{"sha": "63659ca9f6e8601165c07700dffb0d0754822e3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNjU5Y2E5ZjZlODYwMTE2NWMwNzcwMGRmZmIwZDA3NTQ4MjJlM2M=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-08-02T19:59:07Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-08-04T19:16:41Z"}, "message": "Rename `ItemImplKind::Type` to `ItemImplKind::TyAlias`", "tree": {"sha": "94a5fa3d191b0a4187122a2b9e77f7fc19160cb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94a5fa3d191b0a4187122a2b9e77f7fc19160cb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63659ca9f6e8601165c07700dffb0d0754822e3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63659ca9f6e8601165c07700dffb0d0754822e3c", "html_url": "https://github.com/rust-lang/rust/commit/63659ca9f6e8601165c07700dffb0d0754822e3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63659ca9f6e8601165c07700dffb0d0754822e3c/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aa45c65d897570696830ea0675fa2faa989c536", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aa45c65d897570696830ea0675fa2faa989c536", "html_url": "https://github.com/rust-lang/rust/commit/8aa45c65d897570696830ea0675fa2faa989c536"}], "stats": {"total": 71, "additions": 36, "deletions": 35}, "files": [{"sha": "b5c760bc9a08e5a7ace2ad4d0974eaeb82979f6a", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=63659ca9f6e8601165c07700dffb0d0754822e3c", "patch": "@@ -926,7 +926,7 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n                              impl_item.span,\n                              impl_item.hir_id);\n         }\n-        ImplItemKind::Type(ref ty) => {\n+        ImplItemKind::TyAlias(ref ty) => {\n             visitor.visit_id(impl_item.hir_id);\n             visitor.visit_ty(ty);\n         }"}, {"sha": "429eb6b31025f4bce8e18229f9fb35dcf1747b79", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=63659ca9f6e8601165c07700dffb0d0754822e3c", "patch": "@@ -3914,9 +3914,9 @@ impl<'a> LoweringContext<'a> {\n \n                 (generics, hir::ImplItemKind::Method(sig, body_id))\n             }\n-            ImplItemKind::Type(ref ty) => (\n+            ImplItemKind::TyAlias(ref ty) => (\n                 self.lower_generics(&i.generics, ImplTraitContext::disallowed()),\n-                hir::ImplItemKind::Type(self.lower_ty(ty, ImplTraitContext::disallowed())),\n+                hir::ImplItemKind::TyAlias(self.lower_ty(ty, ImplTraitContext::disallowed())),\n             ),\n             ImplItemKind::OpaqueTy(ref bounds) => (\n                 self.lower_generics(&i.generics, ImplTraitContext::disallowed()),\n@@ -3950,7 +3950,7 @@ impl<'a> LoweringContext<'a> {\n             defaultness: self.lower_defaultness(i.defaultness, true /* [1] */),\n             kind: match i.node {\n                 ImplItemKind::Const(..) => hir::AssocItemKind::Const,\n-                ImplItemKind::Type(..) => hir::AssocItemKind::Type,\n+                ImplItemKind::TyAlias(..) => hir::AssocItemKind::Type,\n                 ImplItemKind::OpaqueTy(..) => hir::AssocItemKind::OpaqueTy,\n                 ImplItemKind::Method(ref sig, _) => hir::AssocItemKind::Method {\n                     has_self: sig.decl.has_self(),"}, {"sha": "2964b130ddd313c344f8ffd36cbc0c3d227d3e5b", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=63659ca9f6e8601165c07700dffb0d0754822e3c", "patch": "@@ -222,7 +222,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             }\n             ImplItemKind::Method(..) | ImplItemKind::Const(..) =>\n                 DefPathData::ValueNs(ii.ident.as_interned_str()),\n-            ImplItemKind::Type(..) |\n+            ImplItemKind::TyAlias(..) |\n             ImplItemKind::OpaqueTy(..) => {\n                 DefPathData::TypeNs(ii.ident.as_interned_str())\n             },"}, {"sha": "0d477ae79682285628ad01c08e9424152f849af7", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=63659ca9f6e8601165c07700dffb0d0754822e3c", "patch": "@@ -333,7 +333,7 @@ impl<'hir> Map<'hir> {\n                 match item.node {\n                     ImplItemKind::Const(..) => DefKind::AssocConst,\n                     ImplItemKind::Method(..) => DefKind::Method,\n-                    ImplItemKind::Type(..) => DefKind::AssocTy,\n+                    ImplItemKind::TyAlias(..) => DefKind::AssocTy,\n                     ImplItemKind::OpaqueTy(..) => DefKind::AssocOpaqueTy,\n                 }\n             }\n@@ -1291,7 +1291,7 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId, include_id: bool) -> String {\n                 ImplItemKind::Method(..) => {\n                     format!(\"method {} in {}{}\", ii.ident, path_str(), id_str)\n                 }\n-                ImplItemKind::Type(_) => {\n+                ImplItemKind::TyAlias(_) => {\n                     format!(\"assoc type {} in {}{}\", ii.ident, path_str(), id_str)\n                 }\n                 ImplItemKind::OpaqueTy(_) => {"}, {"sha": "b8d8394a02cee42d27fcc25363d0a374d0d396a7", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=63659ca9f6e8601165c07700dffb0d0754822e3c", "patch": "@@ -1837,7 +1837,7 @@ pub enum ImplItemKind {\n     /// A method implementation with the given signature and body.\n     Method(MethodSig, BodyId),\n     /// An associated type.\n-    Type(P<Ty>),\n+    TyAlias(P<Ty>),\n     /// An associated `type = impl Trait`.\n     OpaqueTy(GenericBounds),\n }"}, {"sha": "11ba512053084f764a6f20758edba483d027390a", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=63659ca9f6e8601165c07700dffb0d0754822e3c", "patch": "@@ -908,7 +908,7 @@ impl<'a> State<'a> {\n                 self.end(); // need to close a box\n                 self.ann.nested(self, Nested::Body(body));\n             }\n-            hir::ImplItemKind::Type(ref ty) => {\n+            hir::ImplItemKind::TyAlias(ref ty) => {\n                 self.print_associated_type(ii.ident, None, Some(ty));\n             }\n             hir::ImplItemKind::OpaqueTy(ref bounds) => {"}, {"sha": "8d0ead5c8fe90e574c7c52b0f2488488a00587df", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=63659ca9f6e8601165c07700dffb0d0754822e3c", "patch": "@@ -270,7 +270,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             hir::ImplItemKind::Method(..) => \"method body\",\n             hir::ImplItemKind::Const(..)\n             | hir::ImplItemKind::OpaqueTy(..)\n-            | hir::ImplItemKind::Type(..) => \"associated item\",\n+            | hir::ImplItemKind::TyAlias(..) => \"associated item\",\n         }\n     }\n "}, {"sha": "55fa261f1ed57976236beb0c9a4600a37341eee3", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=63659ca9f6e8601165c07700dffb0d0754822e3c", "patch": "@@ -640,7 +640,7 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n                 self.visit_nested_body(body_id)\n             }\n             hir::ImplItemKind::OpaqueTy(..) |\n-            hir::ImplItemKind::Type(..) => {}\n+            hir::ImplItemKind::TyAlias(..) => {}\n         }\n     }\n "}, {"sha": "76d8a6738f087c9c9b878f32feb868869e03d941", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=63659ca9f6e8601165c07700dffb0d0754822e3c", "patch": "@@ -189,7 +189,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                         }\n                     }\n                     hir::ImplItemKind::OpaqueTy(..) |\n-                    hir::ImplItemKind::Type(_) => false,\n+                    hir::ImplItemKind::TyAlias(_) => false,\n                 }\n             }\n             Some(_) => false,\n@@ -302,7 +302,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                         }\n                     }\n                     hir::ImplItemKind::OpaqueTy(..) |\n-                    hir::ImplItemKind::Type(_) => {}\n+                    hir::ImplItemKind::TyAlias(_) => {}\n                 }\n             }\n             Node::Expr(&hir::Expr { node: hir::ExprKind::Closure(.., body, _, _), .. }) => {"}, {"sha": "f8f01f79e1db4d8a40e7e525c2fb96cef5d09f02", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=63659ca9f6e8601165c07700dffb0d0754822e3c", "patch": "@@ -828,7 +828,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     |this| intravisit::walk_impl_item(this, impl_item),\n                 )\n             }\n-            Type(ref ty) => {\n+            TyAlias(ref ty) => {\n                 let generics = &impl_item.generics;\n                 let mut index = self.next_early_index();\n                 let mut non_lifetime_count = 0;"}, {"sha": "e569a9bc7df40025d23a8698346c3effc029bbda", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=63659ca9f6e8601165c07700dffb0d0754822e3c", "patch": "@@ -405,7 +405,7 @@ impl DirtyCleanVisitor<'tcx> {\n                 match item.node {\n                     ImplItemKind::Method(..) => (\"Node::ImplItem\", LABELS_FN_IN_IMPL),\n                     ImplItemKind::Const(..) => (\"NodeImplConst\", LABELS_CONST_IN_IMPL),\n-                    ImplItemKind::Type(..) => (\"NodeImplType\", LABELS_CONST_IN_IMPL),\n+                    ImplItemKind::TyAlias(..) => (\"NodeImplType\", LABELS_CONST_IN_IMPL),\n                     ImplItemKind::OpaqueTy(..) => (\"NodeImplType\", LABELS_CONST_IN_IMPL),\n                 }\n             },"}, {"sha": "c9153f285fff71634fa62bed35d5326d2af7eede", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=63659ca9f6e8601165c07700dffb0d0754822e3c", "patch": "@@ -460,7 +460,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n         let desc = match impl_item.node {\n             hir::ImplItemKind::Const(..) => \"an associated constant\",\n             hir::ImplItemKind::Method(..) => \"a method\",\n-            hir::ImplItemKind::Type(_) => \"an associated type\",\n+            hir::ImplItemKind::TyAlias(_) => \"an associated type\",\n             hir::ImplItemKind::OpaqueTy(_) => \"an associated `impl Trait` type\",\n         };\n         self.check_missing_docs_attrs(cx,"}, {"sha": "d73a4966bca8c760de793a5d20a9b2ddfa075f59", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=63659ca9f6e8601165c07700dffb0d0754822e3c", "patch": "@@ -980,7 +980,7 @@ impl EncodeContext<'tcx> {\n                     needs_inline || is_const_fn || always_encode_mir\n                 },\n                 hir::ImplItemKind::OpaqueTy(..) |\n-                hir::ImplItemKind::Type(..) => false,\n+                hir::ImplItemKind::TyAlias(..) => false,\n             };\n \n         Entry {"}, {"sha": "4800bb9365cb78bd6a85adbe1b30dc10791ea950", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=63659ca9f6e8601165c07700dffb0d0754822e3c", "patch": "@@ -1371,7 +1371,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                                                 impl_item_ref.id.hir_id)\n                                          }\n                                          hir::ImplItemKind::OpaqueTy(..) |\n-                                         hir::ImplItemKind::Type(_) => false,\n+                                         hir::ImplItemKind::TyAlias(_) => false,\n                                      }\n                                  });\n \n@@ -1397,7 +1397,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                                     {\n                                         intravisit::walk_impl_item(self, impl_item)\n                                     }\n-                                    hir::ImplItemKind::Type(..) => {\n+                                    hir::ImplItemKind::TyAlias(..) => {\n                                         intravisit::walk_impl_item(self, impl_item)\n                                     }\n                                     _ => {}\n@@ -1423,7 +1423,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                             // Those in 3. are warned with this call.\n                             for impl_item_ref in impl_item_refs {\n                                 let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);\n-                                if let hir::ImplItemKind::Type(ref ty) = impl_item.node {\n+                                if let hir::ImplItemKind::TyAlias(ref ty) = impl_item.node {\n                                     self.visit_ty(ty);\n                                 }\n                             }"}, {"sha": "a7062840a6ffa6f0891c66fb4bd9df78ab35e62f", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=63659ca9f6e8601165c07700dffb0d0754822e3c", "patch": "@@ -3079,7 +3079,7 @@ impl<'a> Resolver<'a> {\n \n                                                 visit::walk_impl_item(this, impl_item);\n                                             }\n-                                            ImplItemKind::Type(ref ty) => {\n+                                            ImplItemKind::TyAlias(ref ty) => {\n                                                 // If this is a trait impl, ensure the type\n                                                 // exists in trait\n                                                 this.check_trait_item(impl_item.ident,"}, {"sha": "c32d4885c4ad9b7d974ff7941cdb11defba63db8", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=63659ca9f6e8601165c07700dffb0d0754822e3c", "patch": "@@ -1167,7 +1167,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     impl_item.span,\n                 );\n             }\n-            ast::ImplItemKind::Type(ref ty) => {\n+            ast::ImplItemKind::TyAlias(ref ty) => {\n                 // FIXME: uses of the assoc type should ideally point to this\n                 // 'def' and the name here should be a ref to the def in the\n                 // trait."}, {"sha": "e8ff83e7d2b1cdb620d9d031c4d93ccb93d91d8f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=63659ca9f6e8601165c07700dffb0d0754822e3c", "patch": "@@ -1543,7 +1543,7 @@ fn check_specialization_validity<'tcx>(\n         hir::ImplItemKind::Const(..) => ty::AssocKind::Const,\n         hir::ImplItemKind::Method(..) => ty::AssocKind::Method,\n         hir::ImplItemKind::OpaqueTy(..) => ty::AssocKind::OpaqueTy,\n-        hir::ImplItemKind::Type(_) => ty::AssocKind::Type\n+        hir::ImplItemKind::TyAlias(_) => ty::AssocKind::Type,\n     };\n \n     let parent = ancestors.defs(tcx, trait_item.ident, kind, trait_def.def_id).nth(1)\n@@ -1640,7 +1640,7 @@ fn check_impl_items_against_trait<'tcx>(\n                     }\n                 }\n                 hir::ImplItemKind::OpaqueTy(..) |\n-                hir::ImplItemKind::Type(_) => {\n+                hir::ImplItemKind::TyAlias(_) => {\n                     if ty_trait_item.kind == ty::AssocKind::Type {\n                         if ty_trait_item.defaultness.has_value() {\n                             overridden_associated_type = Some(impl_item);"}, {"sha": "a14040fe59a4ebeda9d8b75a0ba2bebea6cb9136", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=63659ca9f6e8601165c07700dffb0d0754822e3c", "patch": "@@ -1220,7 +1220,7 @@ pub fn checked_type_of(tcx: TyCtxt<'_>, def_id: DefId, fail: bool) -> Option<Ty<\n \n                 find_opaque_ty_constraints(tcx, def_id)\n             }\n-            ImplItemKind::Type(ref ty) => {\n+            ImplItemKind::TyAlias(ref ty) => {\n                 if tcx\n                     .impl_trait_ref(tcx.hir().get_parent_did(hir_id))\n                     .is_none()"}, {"sha": "fcfd9adef54dfde2a02e38ad872622036188a16a", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=63659ca9f6e8601165c07700dffb0d0754822e3c", "patch": "@@ -189,7 +189,7 @@ fn enforce_impl_items_are_distinct(tcx: TyCtxt<'_>, impl_item_refs: &[hir::ImplI\n     for impl_item_ref in impl_item_refs {\n         let impl_item = tcx.hir().impl_item(impl_item_ref.id);\n         let seen_items = match impl_item.node {\n-            hir::ImplItemKind::Type(_) => &mut seen_type_items,\n+            hir::ImplItemKind::TyAlias(_) => &mut seen_type_items,\n             _                          => &mut seen_value_items,\n         };\n         match seen_items.entry(impl_item.ident.modern()) {"}, {"sha": "1e1d3e7865c92cba748b9dbde85ff3bc2f30a813", "filename": "src/librustc_typeck/namespace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc_typeck%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustc_typeck%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fnamespace.rs?ref=63659ca9f6e8601165c07700dffb0d0754822e3c", "patch": "@@ -23,7 +23,7 @@ impl<'a> From <&'a hir::ImplItemKind> for Namespace {\n     fn from(impl_kind: &'a hir::ImplItemKind) -> Self {\n         match *impl_kind {\n             hir::ImplItemKind::OpaqueTy(..) |\n-            hir::ImplItemKind::Type(..) => Namespace::Type,\n+            hir::ImplItemKind::TyAlias(..) => Namespace::Type,\n             hir::ImplItemKind::Const(..) |\n             hir::ImplItemKind::Method(..) => Namespace::Value,\n         }"}, {"sha": "d3accff5c2ce8805ec242e1efaa15d32fd88ca14", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=63659ca9f6e8601165c07700dffb0d0754822e3c", "patch": "@@ -2253,7 +2253,7 @@ impl Clean<Item> for hir::ImplItem {\n             hir::ImplItemKind::Method(ref sig, body) => {\n                 MethodItem((sig, &self.generics, body, Some(self.defaultness)).clean(cx))\n             }\n-            hir::ImplItemKind::Type(ref ty) => TypedefItem(Typedef {\n+            hir::ImplItemKind::TyAlias(ref ty) => TypedefItem(Typedef {\n                 type_: ty.clean(cx),\n                 generics: Generics::default(),\n             }, true),"}, {"sha": "8a197baa88201cf1eba54fbe787a48b4b5f88aa6", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=63659ca9f6e8601165c07700dffb0d0754822e3c", "patch": "@@ -1508,7 +1508,7 @@ pub struct ImplItem {\n pub enum ImplItemKind {\n     Const(P<Ty>, P<Expr>),\n     Method(MethodSig, P<Block>),\n-    Type(P<Ty>),\n+    TyAlias(P<Ty>),\n     OpaqueTy(GenericBounds),\n     Macro(Mac),\n }"}, {"sha": "76ea8e607b722143c9151b45b6e98b7580dbd6ea", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=63659ca9f6e8601165c07700dffb0d0754822e3c", "patch": "@@ -2254,7 +2254,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     \"`impl Trait` in type aliases is unstable\"\n                 );\n             }\n-            ast::ImplItemKind::Type(_) => {\n+            ast::ImplItemKind::TyAlias(_) => {\n                 if !ii.generics.params.is_empty() {\n                     gate_feature_post!(&self, generic_associated_types, ii.span,\n                                        \"generic associated types are unstable\");"}, {"sha": "a0ea98b8a078add06aa2ee8e052789cb4c5ea249", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=63659ca9f6e8601165c07700dffb0d0754822e3c", "patch": "@@ -933,7 +933,7 @@ pub fn noop_flat_map_impl_item<T: MutVisitor>(mut item: ImplItem, visitor: &mut\n             visit_method_sig(sig, visitor);\n             visitor.visit_block(body);\n         }\n-        ImplItemKind::Type(ty) => visitor.visit_ty(ty),\n+        ImplItemKind::TyAlias(ty) => visitor.visit_ty(ty),\n         ImplItemKind::OpaqueTy(bounds) => visit_bounds(bounds, visitor),\n         ImplItemKind::Macro(mac) => visitor.visit_mac(mac),\n     }"}, {"sha": "56fd679c962866ebea22cef01a00d820028541c6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=63659ca9f6e8601165c07700dffb0d0754822e3c", "patch": "@@ -5687,7 +5687,7 @@ impl<'a> Parser<'a> {\n         let (name, node, generics) = if let Some(type_) = self.eat_type() {\n             let (name, alias, generics) = type_?;\n             let kind = match alias {\n-                AliasKind::Weak(typ) => ast::ImplItemKind::Type(typ),\n+                AliasKind::Weak(typ) => ast::ImplItemKind::TyAlias(typ),\n                 AliasKind::OpaqueTy(bounds) => ast::ImplItemKind::OpaqueTy(bounds),\n             };\n             (name, kind, generics)"}, {"sha": "2ef8a919b9c56e54408b7f0d917d659c289de1a6", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=63659ca9f6e8601165c07700dffb0d0754822e3c", "patch": "@@ -1579,7 +1579,7 @@ impl<'a> State<'a> {\n                 self.nbsp();\n                 self.print_block_with_attrs(body, &ii.attrs);\n             }\n-            ast::ImplItemKind::Type(ref ty) => {\n+            ast::ImplItemKind::TyAlias(ref ty) => {\n                 self.print_associated_type(ii.ident, None, Some(ty));\n             }\n             ast::ImplItemKind::OpaqueTy(ref bounds) => {"}, {"sha": "596c5b46b986f2c82c9ad6204ea697c473f035a5", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=63659ca9f6e8601165c07700dffb0d0754822e3c", "patch": "@@ -616,7 +616,7 @@ pub fn walk_impl_item<'a, V: Visitor<'a>>(visitor: &mut V, impl_item: &'a ImplIt\n             visitor.visit_fn(FnKind::Method(impl_item.ident, sig, Some(&impl_item.vis), body),\n                              &sig.decl, impl_item.span, impl_item.id);\n         }\n-        ImplItemKind::Type(ref ty) => {\n+        ImplItemKind::TyAlias(ref ty) => {\n             visitor.visit_ty(ty);\n         }\n         ImplItemKind::OpaqueTy(ref bounds) => {"}, {"sha": "cb89a68b9f27272c8abedd27c266a2e9dcdc5d33", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63659ca9f6e8601165c07700dffb0d0754822e3c/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=63659ca9f6e8601165c07700dffb0d0754822e3c", "patch": "@@ -529,7 +529,8 @@ impl<'a> TraitDef<'a> {\n                 defaultness: ast::Defaultness::Final,\n                 attrs: Vec::new(),\n                 generics: Generics::default(),\n-                node: ast::ImplItemKind::Type(type_def.to_ty(cx, self.span, type_ident, generics)),\n+                node: ast::ImplItemKind::TyAlias(\n+                    type_def.to_ty(cx, self.span, type_ident, generics)),\n                 tokens: None,\n             }\n         });"}]}