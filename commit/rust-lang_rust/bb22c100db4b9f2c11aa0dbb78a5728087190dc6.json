{"sha": "bb22c100db4b9f2c11aa0dbb78a5728087190dc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMjJjMTAwZGI0YjlmMmMxMWFhMGRiYjc4YTU3MjgwODcxOTBkYzY=", "commit": {"author": {"name": "Keegan McAllister", "email": "mcallister.keegan@gmail.com", "date": "2015-02-19T01:59:47Z"}, "committer": {"name": "Keegan McAllister", "email": "mcallister.keegan@gmail.com", "date": "2015-02-19T01:59:47Z"}, "message": "borrowck/README.md: Remove most references to &const", "tree": {"sha": "0f071c36aa28affbe90f24367483d0267623cd09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f071c36aa28affbe90f24367483d0267623cd09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb22c100db4b9f2c11aa0dbb78a5728087190dc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb22c100db4b9f2c11aa0dbb78a5728087190dc6", "html_url": "https://github.com/rust-lang/rust/commit/bb22c100db4b9f2c11aa0dbb78a5728087190dc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb22c100db4b9f2c11aa0dbb78a5728087190dc6/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfc5c0f1e8799f47f9033bdcc8a7cd8a217620a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfc5c0f1e8799f47f9033bdcc8a7cd8a217620a5", "html_url": "https://github.com/rust-lang/rust/commit/dfc5c0f1e8799f47f9033bdcc8a7cd8a217620a5"}], "stats": {"total": 33, "additions": 9, "deletions": 24}, "files": [{"sha": "d8e4466d627058a1901482b13e753172ef5abb38", "filename": "src/librustc_borrowck/borrowck/README.md", "status": "modified", "additions": 9, "deletions": 24, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bb22c100db4b9f2c11aa0dbb78a5728087190dc6/src%2Flibrustc_borrowck%2Fborrowck%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22c100db4b9f2c11aa0dbb78a5728087190dc6/src%2Flibrustc_borrowck%2Fborrowck%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2FREADME.md?ref=bb22c100db4b9f2c11aa0dbb78a5728087190dc6", "patch": "@@ -64,7 +64,7 @@ Here is the formal grammar for the types we'll consider:\n \n ```text\n TY = () | S<'LT...> | Box<TY> | & 'LT MQ TY\n-MQ = mut | imm | const\n+MQ = mut | imm\n ```\n \n Most of these types should be pretty self explanatory. Here `S` is a\n@@ -198,7 +198,7 @@ The kinds of expressions which in-scope loans can render illegal are:\n \n Now that we hopefully have some kind of intuitive feeling for how the\n borrow checker works, let's look a bit more closely now at the precise\n-conditions that it uses. For simplicity I will ignore const loans.\n+conditions that it uses.\n \n I will present the rules in a modified form of standard inference\n rules, which looks as follows:\n@@ -275,15 +275,14 @@ but also the code in `mem_categorization`.\n \n Let's begin with the rules for variables, which state that if a\n variable is declared as mutable, it may be borrowed any which way, but\n-otherwise the variable must be borrowed as immutable or const:\n+otherwise the variable must be borrowed as immutable:\n \n ```text\n MUTABILITY(X, MQ)                   // M-Var-Mut\n   DECL(X) = mut\n \n-MUTABILITY(X, MQ)                   // M-Var-Imm\n+MUTABILITY(X, imm)                  // M-Var-Imm\n   DECL(X) = imm\n-  MQ = imm | const\n ```\n \n ### Checking mutability of owned content\n@@ -304,12 +303,11 @@ MUTABILITY(*LV, MQ)                 // M-Deref-Unique\n ### Checking mutability of immutable pointer types\n \n Immutable pointer types like `&T` can only\n-be borrowed if MQ is immutable or const:\n+be borrowed if MQ is immutable:\n \n ```text\n-MUTABILITY(*LV, MQ)                // M-Deref-Borrowed-Imm\n+MUTABILITY(*LV, imm)               // M-Deref-Borrowed-Imm\n   TYPE(LV) = &Ty\n-  MQ == imm | const\n ```\n \n ### Checking mutability of mutable pointer types\n@@ -466,15 +464,12 @@ are computed based on the kind of borrow:\n ```text\n &mut LV =>   RESTRICTIONS(LV, LT, MUTATE|CLAIM|FREEZE)\n &LV =>       RESTRICTIONS(LV, LT, MUTATE|CLAIM)\n-&const LV => RESTRICTIONS(LV, LT, [])\n ```\n \n The reasoning here is that a mutable borrow must be the only writer,\n therefore it prevents other writes (`MUTATE`), mutable borrows\n (`CLAIM`), and immutable borrows (`FREEZE`). An immutable borrow\n permits other immutable borrows but forbids writes and mutable borrows.\n-Finally, a const borrow just wants to be sure that the value is not\n-moved out from under it, so no actions are forbidden.\n \n ### Restrictions for loans of a local variable\n \n@@ -641,19 +636,6 @@ in terms of capability, the caller passed in the ability to mutate\n `*p` is borrowed since that would be a move of `p`, as `&mut` pointers\n are affine.)\n \n-### Restrictions for loans of const aliasable referents\n-\n-Freeze pointers are read-only. There may be `&mut` or `&` aliases, and\n-we can not prevent *anything* but moves in that case. So the\n-`RESTRICTIONS` function is only defined if `ACTIONS` is the empty set.\n-Because moves from a `&const` lvalue are never legal, it is not\n-necessary to add any restrictions at all to the final result.\n-\n-```text\n-    RESTRICTIONS(*LV, LT, []) = []                // R-Deref-Freeze-Borrowed\n-      TYPE(LV) = &const Ty\n-```\n-\n ### Restrictions for loans of mutable borrowed referents\n \n Mutable borrowed pointers are guaranteed to be the only way to mutate\n@@ -855,6 +837,9 @@ prohibited from both freezes and claims. This would avoid the need to\n prevent `const` borrows of the base pointer when the referent is\n borrowed.\n \n+[ Previous revisions of this document discussed `&const` in more detail.\n+See the revision history. ]\n+\n # Moves and initialization\n \n The borrow checker is also in charge of ensuring that:"}]}