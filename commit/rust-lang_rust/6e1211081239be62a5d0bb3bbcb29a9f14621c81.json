{"sha": "6e1211081239be62a5d0bb3bbcb29a9f14621c81", "node_id": "C_kwDOAAsO6NoAKDZlMTIxMTA4MTIzOWJlNjJhNWQwYmIzYmJjYjI5YTlmMTQ2MjFjODE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-01T22:47:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-01T22:47:22Z"}, "message": "Auto merge of #89449 - Manishearth:rollup-3alb61f, r=Manishearth\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #85223 (rustdoc: Clarified the attribute which prompts the warning)\n - #88847 (platform-support.md: correct ARMv7+MUSL platform triple notes)\n - #88963 (Coerce const FnDefs to implement const Fn traits )\n - #89376 (Fix use after drop in self-profile with llvm events)\n - #89422 (Replace whitespaces in doctests' name with dashes)\n - #89440 (Clarify a sentence in the documentation of Vec (#84488))\n - #89441 (Normalize after substituting via `field.ty()`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "f29abf20aa3894c46460a3d522f080e6b8cc0b16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f29abf20aa3894c46460a3d522f080e6b8cc0b16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e1211081239be62a5d0bb3bbcb29a9f14621c81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e1211081239be62a5d0bb3bbcb29a9f14621c81", "html_url": "https://github.com/rust-lang/rust/commit/6e1211081239be62a5d0bb3bbcb29a9f14621c81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e1211081239be62a5d0bb3bbcb29a9f14621c81/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c02371c442f811878ab3a0f5a813402b6dfd45d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c02371c442f811878ab3a0f5a813402b6dfd45d2", "html_url": "https://github.com/rust-lang/rust/commit/c02371c442f811878ab3a0f5a813402b6dfd45d2"}, {"sha": "5ab1245303c26d3ae33b1adaa89fef2b8d9fb9ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ab1245303c26d3ae33b1adaa89fef2b8d9fb9ca", "html_url": "https://github.com/rust-lang/rust/commit/5ab1245303c26d3ae33b1adaa89fef2b8d9fb9ca"}], "stats": {"total": 228, "additions": 157, "deletions": 71}, "files": [{"sha": "fd91eda4a01c710de69e223ceb0d249a7d7b4419", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6e1211081239be62a5d0bb3bbcb29a9f14621c81/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1211081239be62a5d0bb3bbcb29a9f14621c81/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=6e1211081239be62a5d0bb3bbcb29a9f14621c81", "patch": "@@ -406,13 +406,15 @@ pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n         None\n     };\n \n-    let llvm_selfprofiler = if cgcx.prof.llvm_recording_enabled() {\n-        let mut llvm_profiler = LlvmSelfProfiler::new(cgcx.prof.get_self_profiler().unwrap());\n-        &mut llvm_profiler as *mut _ as *mut c_void\n+    let mut llvm_profiler = if cgcx.prof.llvm_recording_enabled() {\n+        Some(LlvmSelfProfiler::new(cgcx.prof.get_self_profiler().unwrap()))\n     } else {\n-        std::ptr::null_mut()\n+        None\n     };\n \n+    let llvm_selfprofiler =\n+        llvm_profiler.as_mut().map(|s| s as *mut _ as *mut c_void).unwrap_or(std::ptr::null_mut());\n+\n     let extra_passes = config.passes.join(\",\");\n \n     // FIXME: NewPM doesn't provide a facility to pass custom InlineParams."}, {"sha": "df4cc295fac5f420eb97061786f51e8e6cd509de", "filename": "compiler/rustc_const_eval/src/const_eval/fn_queries.rs", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6e1211081239be62a5d0bb3bbcb29a9f14621c81/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1211081239be62a5d0bb3bbcb29a9f14621c81/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=6e1211081239be62a5d0bb3bbcb29a9f14621c81", "patch": "@@ -6,23 +6,6 @@ use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::abi::Abi;\n \n-/// Whether the `def_id` counts as const fn in your current crate, considering all active\n-/// feature gates\n-pub fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n-    tcx.is_const_fn_raw(def_id)\n-        && match is_unstable_const_fn(tcx, def_id) {\n-            Some(feature_name) => {\n-                // has a `rustc_const_unstable` attribute, check whether the user enabled the\n-                // corresponding feature gate.\n-                tcx.features().declared_lib_features.iter().any(|&(sym, _)| sym == feature_name)\n-            }\n-            // functions without const stability are either stable user written\n-            // const fn or the user is using feature gates and we thus don't\n-            // care what they do\n-            None => true,\n-        }\n-}\n-\n /// Whether the `def_id` is an unstable const fn and what feature gate is necessary to enable it\n pub fn is_unstable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Symbol> {\n     if tcx.is_const_fn_raw(def_id) {\n@@ -77,7 +60,7 @@ fn is_const_fn_raw(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n }\n \n fn is_promotable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n-    is_const_fn(tcx, def_id)\n+    tcx.is_const_fn(def_id)\n         && match tcx.lookup_const_stability(def_id) {\n             Some(stab) => {\n                 if cfg!(debug_assertions) && stab.promotable {"}, {"sha": "be1b827f2356f0d03c03ffef3f83b0915393616f", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6e1211081239be62a5d0bb3bbcb29a9f14621c81/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1211081239be62a5d0bb3bbcb29a9f14621c81/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=6e1211081239be62a5d0bb3bbcb29a9f14621c81", "patch": "@@ -26,7 +26,6 @@ use rustc_index::vec::{Idx, IndexVec};\n use std::cell::Cell;\n use std::{cmp, iter, mem};\n \n-use crate::const_eval::{is_const_fn, is_unstable_const_fn};\n use crate::transform::check_consts::{is_lang_panic_fn, qualifs, ConstCx};\n use crate::transform::MirPass;\n \n@@ -658,9 +657,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n \n         let is_const_fn = match *fn_ty.kind() {\n             ty::FnDef(def_id, _) => {\n-                is_const_fn(self.tcx, def_id)\n-                    || is_unstable_const_fn(self.tcx, def_id).is_some()\n-                    || is_lang_panic_fn(self.tcx, def_id)\n+                self.tcx.is_const_fn_raw(def_id) || is_lang_panic_fn(self.tcx, def_id)\n             }\n             _ => false,\n         };\n@@ -1081,7 +1078,7 @@ pub fn is_const_fn_in_array_repeat_expression<'tcx>(\n                 if let ty::FnDef(def_id, _) = *literal.ty().kind() {\n                     if let Some((destination_place, _)) = destination {\n                         if destination_place == place {\n-                            if is_const_fn(ccx.tcx, def_id) {\n+                            if ccx.tcx.is_const_fn(def_id) {\n                                 return true;\n                             }\n                         }"}, {"sha": "e236c4712c883c4bf3e486eca75eba86a884da8e", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e1211081239be62a5d0bb3bbcb29a9f14621c81/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1211081239be62a5d0bb3bbcb29a9f14621c81/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=6e1211081239be62a5d0bb3bbcb29a9f14621c81", "patch": "@@ -120,7 +120,9 @@ pub enum SelectionCandidate<'tcx> {\n \n     /// Implementation of a `Fn`-family trait by one of the anonymous\n     /// types generated for a fn pointer type (e.g., `fn(int) -> int`)\n-    FnPointerCandidate,\n+    FnPointerCandidate {\n+        is_const: bool,\n+    },\n \n     /// Builtin implementation of `DiscriminantKind`.\n     DiscriminantKindCandidate,"}, {"sha": "a2adecd96367e36c92746107f8c6263bc7d1c2a8", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6e1211081239be62a5d0bb3bbcb29a9f14621c81/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1211081239be62a5d0bb3bbcb29a9f14621c81/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=6e1211081239be62a5d0bb3bbcb29a9f14621c81", "patch": "@@ -2701,6 +2701,29 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {\n         self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))\n     }\n+\n+    /// Whether the `def_id` counts as const fn in the current crate, considering all active\n+    /// feature gates\n+    pub fn is_const_fn(self, def_id: DefId) -> bool {\n+        if self.is_const_fn_raw(def_id) {\n+            match self.lookup_const_stability(def_id) {\n+                Some(stability) if stability.level.is_unstable() => {\n+                    // has a `rustc_const_unstable` attribute, check whether the user enabled the\n+                    // corresponding feature gate.\n+                    self.features()\n+                        .declared_lib_features\n+                        .iter()\n+                        .any(|&(sym, _)| sym == stability.feature)\n+                }\n+                // functions without const stability are either stable user written\n+                // const fn or the user is using feature gates and we thus don't\n+                // care what they do\n+                _ => true,\n+            }\n+        } else {\n+            false\n+        }\n+    }\n }\n \n impl TyCtxtAt<'tcx> {"}, {"sha": "8991ad32ae88240f0433f285e27ff74ce3bc0170", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e1211081239be62a5d0bb3bbcb29a9f14621c81/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1211081239be62a5d0bb3bbcb29a9f14621c81/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=6e1211081239be62a5d0bb3bbcb29a9f14621c81", "patch": "@@ -1638,8 +1638,8 @@ impl ReprOptions {\n }\n \n impl<'tcx> FieldDef {\n-    /// Returns the type of this field. The `subst` is typically obtained\n-    /// via the second field of `TyKind::AdtDef`.\n+    /// Returns the type of this field. The resulting type is not normalized. The `subst` is\n+    /// typically obtained via the second field of `TyKind::AdtDef`.\n     pub fn ty(&self, tcx: TyCtxt<'tcx>, subst: SubstsRef<'tcx>) -> Ty<'tcx> {\n         tcx.type_of(self.did).subst(tcx, subst)\n     }"}, {"sha": "dfcbd0da3a6e15f80e8b079ac2df099d87a45421", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e1211081239be62a5d0bb3bbcb29a9f14621c81/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1211081239be62a5d0bb3bbcb29a9f14621c81/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=6e1211081239be62a5d0bb3bbcb29a9f14621c81", "patch": "@@ -1154,6 +1154,8 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n \n         variant.fields.iter().enumerate().filter_map(move |(i, field)| {\n             let ty = field.ty(cx.tcx, substs);\n+            // `field.ty()` doesn't normalize after substituting.\n+            let ty = cx.tcx.normalize_erasing_regions(cx.param_env, ty);\n             let is_visible = adt.is_enum() || field.vis.is_accessible_from(cx.module, cx.tcx);\n             let is_uninhabited = cx.is_uninhabited(ty);\n \n@@ -1671,7 +1673,7 @@ impl<'p, 'tcx> fmt::Debug for DeconstructedPat<'p, 'tcx> {\n                 write!(f, \"{}\", hi)\n             }\n             IntRange(range) => write!(f, \"{:?}\", range), // Best-effort, will render e.g. `false` as `0..=0`\n-            Wildcard | Missing { .. } | NonExhaustive => write!(f, \"_\"),\n+            Wildcard | Missing { .. } | NonExhaustive => write!(f, \"_ : {:?}\", self.ty),\n             Or => {\n                 for pat in self.iter_fields() {\n                     write!(f, \"{}{:?}\", start_or_continue(\" | \"), pat)?;"}, {"sha": "43adef3d03beda073830005de889aa75d788a28b", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e1211081239be62a5d0bb3bbcb29a9f14621c81/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1211081239be62a5d0bb3bbcb29a9f14621c81/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=6e1211081239be62a5d0bb3bbcb29a9f14621c81", "patch": "@@ -781,8 +781,7 @@ fn is_useful<'p, 'tcx>(\n \n     assert!(rows.iter().all(|r| r.len() == v.len()));\n \n-    // FIXME(Nadrieril): Hack to work around type normalization issues (see #72476).\n-    let ty = matrix.heads().next().map_or(v.head().ty(), |r| r.ty());\n+    let ty = v.head().ty();\n     let is_non_exhaustive = cx.is_foreign_non_exhaustive_enum(ty);\n     let pcx = PatCtxt { cx, ty, span: v.head().span(), is_top_level, is_non_exhaustive };\n "}, {"sha": "719412492f637648e8c812f6e1459a0e031ac477", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e1211081239be62a5d0bb3bbcb29a9f14621c81/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1211081239be62a5d0bb3bbcb29a9f14621c81/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=6e1211081239be62a5d0bb3bbcb29a9f14621c81", "patch": "@@ -476,7 +476,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     ..\n                 } = self_ty.fn_sig(self.tcx()).skip_binder()\n                 {\n-                    candidates.vec.push(FnPointerCandidate);\n+                    candidates.vec.push(FnPointerCandidate { is_const: false });\n                 }\n             }\n             // Provide an impl for suitable functions, rejecting `#[target_feature]` functions (RFC 2396).\n@@ -489,7 +489,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 } = self_ty.fn_sig(self.tcx()).skip_binder()\n                 {\n                     if self.tcx().codegen_fn_attrs(def_id).target_features.is_empty() {\n-                        candidates.vec.push(FnPointerCandidate);\n+                        candidates\n+                            .vec\n+                            .push(FnPointerCandidate { is_const: self.tcx().is_const_fn(def_id) });\n                     }\n                 }\n             }"}, {"sha": "a36cb1358b64c8afc4e5e3bf5ce3ccd0c2f1f2bf", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e1211081239be62a5d0bb3bbcb29a9f14621c81/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1211081239be62a5d0bb3bbcb29a9f14621c81/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=6e1211081239be62a5d0bb3bbcb29a9f14621c81", "patch": "@@ -92,7 +92,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Ok(ImplSource::Generator(vtable_generator))\n             }\n \n-            FnPointerCandidate => {\n+            FnPointerCandidate { .. } => {\n                 let data = self.confirm_fn_pointer_candidate(obligation)?;\n                 Ok(ImplSource::FnPointer(data))\n             }"}, {"sha": "e191654210a43531236dd057fdd41657ac67267c", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6e1211081239be62a5d0bb3bbcb29a9f14621c81/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1211081239be62a5d0bb3bbcb29a9f14621c81/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=6e1211081239be62a5d0bb3bbcb29a9f14621c81", "patch": "@@ -1112,6 +1112,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // generator, this will raise error in other places\n                 // or ignore error with const_async_blocks feature\n                 GeneratorCandidate => {}\n+                // FnDef where the function is const\n+                FnPointerCandidate { is_const: true } => {}\n                 ConstDropCandidate => {}\n                 _ => {\n                     // reject all other types of candidates\n@@ -1539,6 +1541,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n             }\n \n+            // Drop otherwise equivalent non-const fn pointer candidates\n+            (FnPointerCandidate { .. }, FnPointerCandidate { is_const: false }) => true,\n+\n             // Global bounds from the where clause should be ignored\n             // here (see issue #50825). Otherwise, we have a where\n             // clause so don't go around looking for impls.\n@@ -1549,7 +1554,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ImplCandidate(..)\n                 | ClosureCandidate\n                 | GeneratorCandidate\n-                | FnPointerCandidate\n+                | FnPointerCandidate { .. }\n                 | BuiltinObjectCandidate\n                 | BuiltinUnsizeCandidate\n                 | TraitUpcastingUnsizeCandidate(_)\n@@ -1567,7 +1572,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ImplCandidate(_)\n                 | ClosureCandidate\n                 | GeneratorCandidate\n-                | FnPointerCandidate\n+                | FnPointerCandidate { .. }\n                 | BuiltinObjectCandidate\n                 | BuiltinUnsizeCandidate\n                 | TraitUpcastingUnsizeCandidate(_)\n@@ -1597,7 +1602,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ImplCandidate(..)\n                 | ClosureCandidate\n                 | GeneratorCandidate\n-                | FnPointerCandidate\n+                | FnPointerCandidate { .. }\n                 | BuiltinObjectCandidate\n                 | BuiltinUnsizeCandidate\n                 | TraitUpcastingUnsizeCandidate(_)\n@@ -1609,7 +1614,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ImplCandidate(..)\n                 | ClosureCandidate\n                 | GeneratorCandidate\n-                | FnPointerCandidate\n+                | FnPointerCandidate { .. }\n                 | BuiltinObjectCandidate\n                 | BuiltinUnsizeCandidate\n                 | TraitUpcastingUnsizeCandidate(_)\n@@ -1690,7 +1695,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ImplCandidate(_)\n                 | ClosureCandidate\n                 | GeneratorCandidate\n-                | FnPointerCandidate\n+                | FnPointerCandidate { .. }\n                 | BuiltinObjectCandidate\n                 | BuiltinUnsizeCandidate\n                 | TraitUpcastingUnsizeCandidate(_)\n@@ -1699,7 +1704,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ImplCandidate(_)\n                 | ClosureCandidate\n                 | GeneratorCandidate\n-                | FnPointerCandidate\n+                | FnPointerCandidate { .. }\n                 | BuiltinObjectCandidate\n                 | BuiltinUnsizeCandidate\n                 | TraitUpcastingUnsizeCandidate(_)"}, {"sha": "92b6aaadf587c881f192277870346220189a1849", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e1211081239be62a5d0bb3bbcb29a9f14621c81/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1211081239be62a5d0bb3bbcb29a9f14621c81/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=6e1211081239be62a5d0bb3bbcb29a9f14621c81", "patch": "@@ -369,7 +369,7 @@ mod spec_extend;\n /// scratch space that it may use however it wants. It will generally just do\n /// whatever is most efficient or otherwise easy to implement. Do not rely on\n /// removed data to be erased for security purposes. Even if you drop a `Vec`, its\n-/// buffer may simply be reused by another `Vec`. Even if you zero a `Vec`'s memory\n+/// buffer may simply be reused by another allocation. Even if you zero a `Vec`'s memory\n /// first, that might not actually happen because the optimizer does not consider\n /// this a side-effect that must be preserved. There is one case which we will\n /// not break, however: using `unsafe` code to write to the excess capacity,"}, {"sha": "26fef88946251e1ede97342b3543e7892fee137c", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e1211081239be62a5d0bb3bbcb29a9f14621c81/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/6e1211081239be62a5d0bb3bbcb29a9f14621c81/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=6e1211081239be62a5d0bb3bbcb29a9f14621c81", "patch": "@@ -133,8 +133,8 @@ target | std | notes\n `armv5te-unknown-linux-musleabi` | \u2713 | ARMv5TE Linux with MUSL\n `armv7-linux-androideabi` | \u2713 | ARMv7a Android\n `armv7-unknown-linux-gnueabi` | \u2713 |ARMv7 Linux (kernel 4.15, glibc 2.27)\n-`armv7-unknown-linux-musleabi` | \u2713 |ARMv7 Linux, MUSL\n-`armv7-unknown-linux-musleabihf` | \u2713 | ARMv7 Linux with MUSL\n+`armv7-unknown-linux-musleabi` | \u2713 |ARMv7 Linux with MUSL\n+`armv7-unknown-linux-musleabihf` | \u2713 | ARMv7 Linux with MUSL, hardfloat\n `armv7a-none-eabi` | * | Bare ARMv7-A\n `armv7r-none-eabi` | * | Bare ARMv7-R\n `armv7r-none-eabihf` | * | Bare ARMv7-R, hardfloat"}, {"sha": "d5981dd83de8c2067f66c759a48cbc6bbbd074b2", "filename": "src/doc/rustdoc/src/lints.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e1211081239be62a5d0bb3bbcb29a9f14621c81/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md", "raw_url": "https://github.com/rust-lang/rust/raw/6e1211081239be62a5d0bb3bbcb29a9f14621c81/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md?ref=6e1211081239be62a5d0bb3bbcb29a9f14621c81", "patch": "@@ -70,6 +70,8 @@ This lint **warns by default**. This lint detects when [intra-doc links] from pu\n For example:\n \n ```rust\n+#![warn(rustdoc::private_intra_doc_links)] // note: unecessary - warns by default.\n+\n /// [private]\n pub fn public() {}\n fn private() {}\n@@ -227,6 +229,8 @@ This lint **warns by default**. It detects code block attributes in\n documentation examples that have potentially mis-typed values. For example:\n \n ```rust\n+#![warn(rustdoc::invalid_codeblock_attributes)]  // note: unecessary - warns by default.\n+\n /// Example.\n ///\n /// ```should-panic\n@@ -344,6 +348,8 @@ This lint is **warn-by-default**. It detects URLs which are not links.\n For example:\n \n ```rust\n+#![warn(rustdoc::bare_urls)] // note: unecessary - warns by default.\n+\n /// http://example.org\n /// [http://example.net]\n pub fn foo() {}"}, {"sha": "a55d85f5841d267c3fb49472873a4da0d7e38e30", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e1211081239be62a5d0bb3bbcb29a9f14621c81/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1211081239be62a5d0bb3bbcb29a9f14621c81/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6e1211081239be62a5d0bb3bbcb29a9f14621c81", "patch": "@@ -11,7 +11,7 @@ crate mod utils;\n \n use rustc_ast as ast;\n use rustc_attr as attr;\n-use rustc_const_eval::const_eval::{is_const_fn, is_unstable_const_fn};\n+use rustc_const_eval::const_eval::is_unstable_const_fn;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n@@ -787,7 +787,7 @@ fn clean_fn_or_proc_macro(\n             let mut func = (sig, generics, body_id).clean(cx);\n             let def_id = item.def_id.to_def_id();\n             func.header.constness =\n-                if is_const_fn(cx.tcx, def_id) && is_unstable_const_fn(cx.tcx, def_id).is_none() {\n+                if cx.tcx.is_const_fn(def_id) && is_unstable_const_fn(cx.tcx, def_id).is_none() {\n                     hir::Constness::Const\n                 } else {\n                     hir::Constness::NotConst"}, {"sha": "43abcf095d858e140c264e6f0a9c6fa48fac45f6", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e1211081239be62a5d0bb3bbcb29a9f14621c81/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1211081239be62a5d0bb3bbcb29a9f14621c81/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=6e1211081239be62a5d0bb3bbcb29a9f14621c81", "patch": "@@ -853,6 +853,7 @@ impl Collector {\n \n     fn generate_name(&self, line: usize, filename: &FileName) -> String {\n         let mut item_path = self.names.join(\"::\");\n+        item_path.retain(|c| c != ' ');\n         if !item_path.is_empty() {\n             item_path.push(' ');\n         }"}, {"sha": "058f419679847dbbc69874557fa7b121a14c4971", "filename": "src/test/ui/pattern/usefulness/issue-72476-and-89393-associated-type.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/6e1211081239be62a5d0bb3bbcb29a9f14621c81/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72476-and-89393-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1211081239be62a5d0bb3bbcb29a9f14621c81/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72476-and-89393-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72476-and-89393-associated-type.rs?ref=6e1211081239be62a5d0bb3bbcb29a9f14621c81", "patch": "@@ -0,0 +1,56 @@\n+// check-pass\n+\n+// From https://github.com/rust-lang/rust/issues/72476\n+// and https://github.com/rust-lang/rust/issues/89393\n+\n+trait Trait {\n+    type Projection;\n+}\n+\n+struct A;\n+impl Trait for A {\n+    type Projection = bool;\n+}\n+\n+struct B;\n+impl Trait for B {\n+    type Projection = (u32, u32);\n+}\n+\n+struct Next<T: Trait>(T::Projection);\n+\n+fn foo1(item: Next<A>) {\n+    match item {\n+        Next(true) => {}\n+        Next(false) => {}\n+    }\n+}\n+\n+fn foo2(x: <A as Trait>::Projection) {\n+    match x {\n+        true => {}\n+        false => {}\n+    }\n+}\n+\n+fn foo3(x: Next<B>) {\n+    let Next((_, _)) = x;\n+    match x {\n+        Next((_, _)) => {}\n+    }\n+}\n+\n+fn foo4(x: <B as Trait>::Projection) {\n+    let (_, _) = x;\n+    match x {\n+        (_, _) => {}\n+    }\n+}\n+\n+fn foo5<T: Trait>(x: <T as Trait>::Projection) {\n+    match x {\n+        _ => {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "1e1d21433b79cae613a5313bb7d89bb4fde03972", "filename": "src/test/ui/pattern/usefulness/issue-72476-associated-type.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72476-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02371c442f811878ab3a0f5a813402b6dfd45d2/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72476-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fissue-72476-associated-type.rs?ref=c02371c442f811878ab3a0f5a813402b6dfd45d2", "patch": "@@ -1,22 +0,0 @@\n-// check-pass\n-\n-// From https://github.com/rust-lang/rust/issues/72476\n-\n-trait A {\n-    type Projection;\n-}\n-\n-impl A for () {\n-    type Projection = bool;\n-}\n-\n-struct Next<T: A>(T::Projection);\n-\n-fn f(item: Next<()>) {\n-    match item {\n-        Next(true) => {}\n-        Next(false) => {}\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "99e608797ff650c2c2b943c83d04d4acdb8084f0", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-closures.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6e1211081239be62a5d0bb3bbcb29a9f14621c81/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1211081239be62a5d0bb3bbcb29a9f14621c81/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-closures.rs?ref=6e1211081239be62a5d0bb3bbcb29a9f14621c81", "patch": "@@ -0,0 +1,31 @@\n+// run-pass\n+\n+#![feature(const_trait_impl)]\n+#![feature(const_fn_trait_bound)]\n+\n+const fn answer_p1<F>(f: &F) -> u8\n+    where\n+        F: ~const FnOnce() -> u8,\n+        F: ~const FnMut() -> u8,\n+        F: ~const Fn() -> u8,\n+{\n+    f() * 7\n+}\n+\n+const fn three() -> u8 {\n+    3\n+}\n+\n+const fn answer_p2() -> u8 {\n+    answer_p1(&three)\n+}\n+\n+const fn answer<F: ~const Fn() -> u8>(f: &F) -> u8 {\n+    f() + f()\n+}\n+\n+const ANSWER: u8 = answer(&answer_p2);\n+\n+fn main() {\n+    assert_eq!(ANSWER, 42)\n+}"}, {"sha": "03f77f36b460e56c1490ce4481377bf5d0d86ad8", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e1211081239be62a5d0bb3bbcb29a9f14621c81/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1211081239be62a5d0bb3bbcb29a9f14621c81/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=6e1211081239be62a5d0bb3bbcb29a9f14621c81", "patch": "@@ -18,7 +18,6 @@\n extern crate rustc_ast;\n extern crate rustc_ast_pretty;\n extern crate rustc_attr;\n-extern crate rustc_const_eval;\n extern crate rustc_data_structures;\n extern crate rustc_errors;\n extern crate rustc_hir;"}, {"sha": "e6d8ba3f02eb063f0217944036ff087c59770771", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e1211081239be62a5d0bb3bbcb29a9f14621c81/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e1211081239be62a5d0bb3bbcb29a9f14621c81/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=6e1211081239be62a5d0bb3bbcb29a9f14621c81", "patch": "@@ -364,7 +364,7 @@ fn check_terminator(\n }\n \n fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: Option<&RustcVersion>) -> bool {\n-    rustc_const_eval::const_eval::is_const_fn(tcx, def_id)\n+    tcx.is_const_fn(def_id)\n         && tcx.lookup_const_stability(def_id).map_or(true, |const_stab| {\n             if let rustc_attr::StabilityLevel::Stable { since } = const_stab.level {\n                 // Checking MSRV is manually necessary because `rustc` has no such concept. This entire"}]}