{"sha": "98782bb5c9b0196cd10e3cfaf07cd02c6fe9f2f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NzgyYmI1YzliMDE5NmNkMTBlM2NmYWYwN2NkMDJjNmZlOWYyZjM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-24T05:30:18Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-28T05:04:05Z"}, "message": "std: Export the select! macro\n\nMark it as #[experimental] for now. In theory this attribute will be read in the\nfuture. I believe that the implementation is solid enough for general use,\nalthough I would not be surprised if there were bugs in it still. I think that\nit's at the point now where public usage of it will start to uncover hopefully\nthe last few remaining bugs.\n\nCloses #12044", "tree": {"sha": "7ab866c082727a73bab73f6242507c23ad626246", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ab866c082727a73bab73f6242507c23ad626246"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98782bb5c9b0196cd10e3cfaf07cd02c6fe9f2f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98782bb5c9b0196cd10e3cfaf07cd02c6fe9f2f3", "html_url": "https://github.com/rust-lang/rust/commit/98782bb5c9b0196cd10e3cfaf07cd02c6fe9f2f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98782bb5c9b0196cd10e3cfaf07cd02c6fe9f2f3/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bcd8252ee22ea4f153de812e9bf83e3cfe4f8e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bcd8252ee22ea4f153de812e9bf83e3cfe4f8e0", "html_url": "https://github.com/rust-lang/rust/commit/1bcd8252ee22ea4f153de812e9bf83e3cfe4f8e0"}], "stats": {"total": 60, "additions": 44, "deletions": 16}, "files": [{"sha": "75e7265705a77ededc0acdf8b35cfc08d999fcf1", "filename": "src/libstd/comm/select.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/98782bb5c9b0196cd10e3cfaf07cd02c6fe9f2f3/src%2Flibstd%2Fcomm%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98782bb5c9b0196cd10e3cfaf07cd02c6fe9f2f3/src%2Flibstd%2Fcomm%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fselect.rs?ref=98782bb5c9b0196cd10e3cfaf07cd02c6fe9f2f3", "patch": "@@ -58,22 +58,6 @@ use rt::task::{Task, BlockedTask};\n use super::Port;\n use uint;\n \n-macro_rules! select {\n-    (\n-        $($name:pat = $port:ident.$meth:ident() => $code:expr),+\n-    ) => ({\n-        use std::comm::Select;\n-        let sel = Select::new();\n-        $( let mut $port = sel.handle(&$port); )+\n-        unsafe {\n-            $( $port.add(); )+\n-        }\n-        let ret = sel.wait();\n-        $( if ret == $port.id() { let $name = $port.$meth(); $code } else )+\n-        { unreachable!() }\n-    })\n-}\n-\n /// The \"port set\" of the select interface. This structure is used to manage a\n /// set of ports which are being selected over.\n pub struct Select {"}, {"sha": "e16d944fb462888925b095d97ed9f93a9272325a", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/98782bb5c9b0196cd10e3cfaf07cd02c6fe9f2f3/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98782bb5c9b0196cd10e3cfaf07cd02c6fe9f2f3/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=98782bb5c9b0196cd10e3cfaf07cd02c6fe9f2f3", "patch": "@@ -368,3 +368,47 @@ macro_rules! vec(\n     })\n )\n \n+\n+/// A macro to select an event from a number of ports.\n+///\n+/// This macro is used to wait for the first event to occur on a number of\n+/// ports. It places no restrictions on the types of ports given to this macro,\n+/// this can be viewed as a heterogeneous select.\n+///\n+/// # Example\n+///\n+/// ```\n+/// let (p1, c1) = Chan::new();\n+/// let (p2, c2) = Chan::new();\n+/// # fn long_running_task() {}\n+/// # fn calculate_the_answer() -> int { 42 }\n+///\n+/// spawn(proc() { long_running_task(); c1.send(()) });\n+/// spawn(proc() { c2.send(calculate_the_answer()) });\n+///\n+/// select! (\n+///     () = p1.recv() => println!(\"the long running task finished first\"),\n+///     answer = p2.recv() => {\n+///         println!(\"the answer was: {}\", answer);\n+///     }\n+/// )\n+/// ```\n+///\n+/// For more information about select, see the `std::comm::Select` structure.\n+#[macro_export]\n+#[experimental]\n+macro_rules! select {\n+    (\n+        $($name:pat = $port:ident.$meth:ident() => $code:expr),+\n+    ) => ({\n+        use std::comm::Select;\n+        let sel = Select::new();\n+        $( let mut $port = sel.handle(&$port); )+\n+        unsafe {\n+            $( $port.add(); )+\n+        }\n+        let ret = sel.wait();\n+        $( if ret == $port.id() { let $name = $port.$meth(); $code } else )+\n+        { unreachable!() }\n+    })\n+}"}]}