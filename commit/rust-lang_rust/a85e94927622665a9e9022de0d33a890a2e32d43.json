{"sha": "a85e94927622665a9e9022de0d33a890a2e32d43", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4NWU5NDkyNzYyMjY2NWE5ZTkwMjJkZTBkMzNhODkwYTJlMzJkNDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-19T17:53:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-19T17:53:17Z"}, "message": "Auto merge of #78106 - GuillaumeGomez:rollup-06vwk7p, r=GuillaumeGomez\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #77877 (Use `try{}` in `try_fold` to decouple iterators in the library from `Try` details)\n - #78089 (Fix issue with specifying generic arguments for primitive types)\n - #78099 (Add missing punctuation)\n - #78103 (Add link to rustdoc book in rustdoc help popup)\n\nFailed merges:\n\nr? `@ghost`", "tree": {"sha": "20dc9e11e957cbf41cbec568cee8fae0508c2de5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20dc9e11e957cbf41cbec568cee8fae0508c2de5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a85e94927622665a9e9022de0d33a890a2e32d43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a85e94927622665a9e9022de0d33a890a2e32d43", "html_url": "https://github.com/rust-lang/rust/commit/a85e94927622665a9e9022de0d33a890a2e32d43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a85e94927622665a9e9022de0d33a890a2e32d43/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f90e6173053f7e6b377d7f75367b511ceee7d9d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f90e6173053f7e6b377d7f75367b511ceee7d9d1", "html_url": "https://github.com/rust-lang/rust/commit/f90e6173053f7e6b377d7f75367b511ceee7d9d1"}, {"sha": "cbcf8d4235148836a109d2038467c9a27f0f4be2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbcf8d4235148836a109d2038467c9a27f0f4be2", "html_url": "https://github.com/rust-lang/rust/commit/cbcf8d4235148836a109d2038467c9a27f0f4be2"}], "stats": {"total": 137, "additions": 90, "deletions": 47}, "files": [{"sha": "a754d4dbac7134ea4bf0176a1e735b50a664bc85", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a85e94927622665a9e9022de0d33a890a2e32d43/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a85e94927622665a9e9022de0d33a890a2e32d43/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=a85e94927622665a9e9022de0d33a890a2e32d43", "patch": "@@ -112,12 +112,16 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                         tcx.sess.delay_span_bug(tcx.def_span(def_id), \"anon const with Res::Err\");\n                         return None;\n                     }\n-                    _ => span_bug!(\n-                        DUMMY_SP,\n-                        \"unexpected anon const res {:?} in path: {:?}\",\n-                        res,\n-                        path,\n-                    ),\n+                    _ => {\n+                        // If the user tries to specify generics on a type that does not take them,\n+                        // e.g. `usize<T>`, we may hit this branch, in which case we treat it as if\n+                        // no arguments have been passed. An error should already have been emitted.\n+                        tcx.sess.delay_span_bug(\n+                            tcx.def_span(def_id),\n+                            &format!(\"unexpected anon const res {:?} in path: {:?}\", res, path),\n+                        );\n+                        return None;\n+                    }\n                 };\n \n                 generics"}, {"sha": "2e070d71224422b9bb0e190e802a2d5fd1de0084", "filename": "library/core/src/iter/adapters/chain.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a85e94927622665a9e9022de0d33a890a2e32d43/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a85e94927622665a9e9022de0d33a890a2e32d43/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs?ref=a85e94927622665a9e9022de0d33a890a2e32d43", "patch": "@@ -109,7 +109,7 @@ where\n             acc = b.try_fold(acc, f)?;\n             // we don't fuse the second iterator\n         }\n-        Try::from_ok(acc)\n+        try { acc }\n     }\n \n     fn fold<Acc, F>(self, mut acc: Acc, mut f: F) -> Acc\n@@ -292,7 +292,7 @@ where\n             acc = a.try_rfold(acc, f)?;\n             // we don't fuse the second iterator\n         }\n-        Try::from_ok(acc)\n+        try { acc }\n     }\n \n     fn rfold<Acc, F>(self, mut acc: Acc, mut f: F) -> Acc"}, {"sha": "35adb4f69d854eec06cab4edfdf17eb80bcda98d", "filename": "library/core/src/iter/adapters/flatten.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a85e94927622665a9e9022de0d33a890a2e32d43/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a85e94927622665a9e9022de0d33a890a2e32d43/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs?ref=a85e94927622665a9e9022de0d33a890a2e32d43", "patch": "@@ -317,7 +317,7 @@ where\n         }\n         self.backiter = None;\n \n-        Try::from_ok(init)\n+        try { init }\n     }\n \n     #[inline]\n@@ -397,7 +397,7 @@ where\n         }\n         self.frontiter = None;\n \n-        Try::from_ok(init)\n+        try { init }\n     }\n \n     #[inline]"}, {"sha": "60ac3524e66964c65b3c37e1d6c517815c5bc788", "filename": "library/core/src/iter/adapters/fuse.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a85e94927622665a9e9022de0d33a890a2e32d43/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a85e94927622665a9e9022de0d33a890a2e32d43/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs?ref=a85e94927622665a9e9022de0d33a890a2e32d43", "patch": "@@ -303,7 +303,7 @@ where\n             acc = iter.try_fold(acc, fold)?;\n             self.iter = None;\n         }\n-        Try::from_ok(acc)\n+        try { acc }\n     }\n \n     #[inline]\n@@ -353,7 +353,7 @@ where\n             acc = iter.try_rfold(acc, fold)?;\n             self.iter = None;\n         }\n-        Try::from_ok(acc)\n+        try { acc }\n     }\n \n     #[inline]"}, {"sha": "bf30dcb7689fab38c092d497bd5a27c80f248e2c", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a85e94927622665a9e9022de0d33a890a2e32d43/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a85e94927622665a9e9022de0d33a890a2e32d43/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=a85e94927622665a9e9022de0d33a890a2e32d43", "patch": "@@ -579,7 +579,7 @@ where\n         })?;\n \n         if is_empty {\n-            return Try::from_ok(acc);\n+            return try { acc };\n         }\n \n         loop {\n@@ -715,7 +715,7 @@ where\n         if self.first_take {\n             self.first_take = false;\n             match self.iter.next() {\n-                None => return Try::from_ok(acc),\n+                None => return try { acc },\n                 Some(x) => acc = f(acc, x)?,\n             }\n         }\n@@ -792,7 +792,7 @@ where\n         }\n \n         match self.next_back() {\n-            None => Try::from_ok(init),\n+            None => try { init },\n             Some(x) => {\n                 let acc = f(init, x)?;\n                 from_fn(nth_back(&mut self.iter, self.step)).try_fold(acc, f)\n@@ -1075,7 +1075,7 @@ fn filter_try_fold<'a, T, Acc, R: Try<Ok = Acc>>(\n     predicate: &'a mut impl FnMut(&T) -> bool,\n     mut fold: impl FnMut(Acc, T) -> R + 'a,\n ) -> impl FnMut(Acc, T) -> R + 'a {\n-    move |acc, item| if predicate(&item) { fold(acc, item) } else { R::from_ok(acc) }\n+    move |acc, item| if predicate(&item) { fold(acc, item) } else { try { acc } }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1229,7 +1229,7 @@ fn filter_map_try_fold<'a, T, B, Acc, R: Try<Ok = Acc>>(\n ) -> impl FnMut(Acc, T) -> R + 'a {\n     move |acc, item| match f(item) {\n         Some(x) => fold(acc, x),\n-        None => R::from_ok(acc),\n+        None => try { acc },\n     }\n }\n \n@@ -1660,7 +1660,7 @@ impl<I: Iterator> Iterator for Peekable<I> {\n         R: Try<Ok = B>,\n     {\n         let acc = match self.peeked.take() {\n-            Some(None) => return Try::from_ok(init),\n+            Some(None) => return try { init },\n             Some(Some(v)) => f(init, v)?,\n             None => init,\n         };\n@@ -1703,7 +1703,7 @@ where\n         R: Try<Ok = B>,\n     {\n         match self.peeked.take() {\n-            Some(None) => Try::from_ok(init),\n+            Some(None) => try { init },\n             Some(Some(v)) => match self.iter.try_rfold(init, &mut f).into_result() {\n                 Ok(acc) => f(acc, v),\n                 Err(e) => {\n@@ -1938,7 +1938,7 @@ where\n         if !self.flag {\n             match self.next() {\n                 Some(v) => init = fold(init, v)?,\n-                None => return Try::from_ok(init),\n+                None => return try { init },\n             }\n         }\n         self.iter.try_fold(init, fold)\n@@ -2065,13 +2065,13 @@ where\n                     ControlFlow::from_try(fold(acc, x))\n                 } else {\n                     *flag = true;\n-                    ControlFlow::Break(Try::from_ok(acc))\n+                    ControlFlow::Break(try { acc })\n                 }\n             }\n         }\n \n         if self.flag {\n-            Try::from_ok(init)\n+            try { init }\n         } else {\n             let flag = &mut self.flag;\n             let p = &mut self.predicate;\n@@ -2180,7 +2180,7 @@ where\n         let Self { iter, predicate } = self;\n         iter.try_fold(init, |acc, x| match predicate(x) {\n             Some(item) => ControlFlow::from_try(fold(acc, item)),\n-            None => ControlFlow::Break(Try::from_ok(acc)),\n+            None => ControlFlow::Break(try { acc }),\n         })\n         .into_try()\n     }\n@@ -2316,7 +2316,7 @@ where\n         if n > 0 {\n             // nth(n) skips n+1\n             if self.iter.nth(n - 1).is_none() {\n-                return Try::from_ok(init);\n+                return try { init };\n             }\n         }\n         self.iter.try_fold(init, fold)\n@@ -2381,11 +2381,7 @@ where\n         }\n \n         let n = self.len();\n-        if n == 0 {\n-            Try::from_ok(init)\n-        } else {\n-            self.iter.try_rfold(init, check(n, fold)).into_try()\n-        }\n+        if n == 0 { try { init } } else { self.iter.try_rfold(init, check(n, fold)).into_try() }\n     }\n \n     fn rfold<Acc, Fold>(mut self, init: Acc, fold: Fold) -> Acc\n@@ -2509,7 +2505,7 @@ where\n         }\n \n         if self.n == 0 {\n-            Try::from_ok(init)\n+            try { init }\n         } else {\n             let n = &mut self.n;\n             self.iter.try_fold(init, check(n, fold)).into_try()\n@@ -2587,11 +2583,11 @@ where\n         R: Try<Ok = Acc>,\n     {\n         if self.n == 0 {\n-            Try::from_ok(init)\n+            try { init }\n         } else {\n             let len = self.iter.len();\n             if len > self.n && self.iter.nth_back(len - self.n - 1).is_none() {\n-                Try::from_ok(init)\n+                try { init }\n             } else {\n                 self.iter.try_rfold(init, fold)\n             }\n@@ -2687,7 +2683,7 @@ where\n             mut fold: impl FnMut(Acc, B) -> R + 'a,\n         ) -> impl FnMut(Acc, T) -> ControlFlow<Acc, R> + 'a {\n             move |acc, x| match f(state, x) {\n-                None => ControlFlow::Break(Try::from_ok(acc)),\n+                None => ControlFlow::Break(try { acc }),\n                 Some(x) => ControlFlow::from_try(fold(acc, x)),\n             }\n         }\n@@ -2951,7 +2947,7 @@ where\n                 Ok(x) => ControlFlow::from_try(f(acc, x)),\n                 Err(e) => {\n                     *error = Err(e);\n-                    ControlFlow::Break(Try::from_ok(acc))\n+                    ControlFlow::Break(try { acc })\n                 }\n             })\n             .into_try()"}, {"sha": "cd8ab11cb842641ede0ed39576e8328ad2ff0fa9", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a85e94927622665a9e9022de0d33a890a2e32d43/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a85e94927622665a9e9022de0d33a890a2e32d43/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=a85e94927622665a9e9022de0d33a890a2e32d43", "patch": "@@ -713,7 +713,7 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n         R: Try<Ok = B>,\n     {\n         if self.is_empty() {\n-            return Try::from_ok(init);\n+            return try { init };\n         }\n \n         let mut accum = init;\n@@ -731,7 +731,7 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n             accum = f(accum, self.start.clone())?;\n         }\n \n-        Try::from_ok(accum)\n+        try { accum }\n     }\n \n     #[inline]\n@@ -818,7 +818,7 @@ impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n         R: Try<Ok = B>,\n     {\n         if self.is_empty() {\n-            return Try::from_ok(init);\n+            return try { init };\n         }\n \n         let mut accum = init;\n@@ -836,7 +836,7 @@ impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n             accum = f(accum, self.start.clone())?;\n         }\n \n-        Try::from_ok(accum)\n+        try { accum }\n     }\n \n     #[inline]"}, {"sha": "87fe3c210402e5f68e89c1430422cb2792c30959", "filename": "library/core/src/iter/traits/double_ended.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a85e94927622665a9e9022de0d33a890a2e32d43/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a85e94927622665a9e9022de0d33a890a2e32d43/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fdouble_ended.rs?ref=a85e94927622665a9e9022de0d33a890a2e32d43", "patch": "@@ -224,7 +224,7 @@ pub trait DoubleEndedIterator: Iterator {\n         while let Some(x) = self.next_back() {\n             accum = f(accum, x)?;\n         }\n-        Try::from_ok(accum)\n+        try { accum }\n     }\n \n     /// An iterator method that reduces the iterator's elements to a single,"}, {"sha": "18b4adc23e8ef280040ee26191e41d0499a57cb5", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a85e94927622665a9e9022de0d33a890a2e32d43/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a85e94927622665a9e9022de0d33a890a2e32d43/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=a85e94927622665a9e9022de0d33a890a2e32d43", "patch": "@@ -1887,7 +1887,7 @@ pub trait Iterator {\n         while let Some(x) = self.next() {\n             accum = f(accum, x)?;\n         }\n-        Try::from_ok(accum)\n+        try { accum }\n     }\n \n     /// An iterator method that applies a fallible function to each item in the"}, {"sha": "af4b7199397b3977fb6fc7d97c4e642e6e8e6219", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a85e94927622665a9e9022de0d33a890a2e32d43/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a85e94927622665a9e9022de0d33a890a2e32d43/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=a85e94927622665a9e9022de0d33a890a2e32d43", "patch": "@@ -129,6 +129,7 @@\n #![feature(str_split_as_str)]\n #![feature(str_split_inclusive_as_str)]\n #![feature(transparent_unions)]\n+#![feature(try_blocks)]\n #![feature(unboxed_closures)]\n #![feature(unsized_locals)]\n #![cfg_attr(bootstrap, feature(untagged_unions))]"}, {"sha": "a1499467744041b1133a592ed1f8de6593841e87", "filename": "library/std/src/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a85e94927622665a9e9022de0d33a890a2e32d43/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a85e94927622665a9e9022de0d33a890a2e32d43/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=a85e94927622665a9e9022de0d33a890a2e32d43", "patch": "@@ -1184,7 +1184,7 @@ impl Stdio {\n     }\n \n     /// This stream will be ignored. This is the equivalent of attaching the\n-    /// stream to `/dev/null`\n+    /// stream to `/dev/null`.\n     ///\n     /// # Examples\n     ///"}, {"sha": "e382e5aa2348af60f5a26ae5b6da1c0168d4b776", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a85e94927622665a9e9022de0d33a890a2e32d43/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/a85e94927622665a9e9022de0d33a890a2e32d43/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=a85e94927622665a9e9022de0d33a890a2e32d43", "patch": "@@ -2792,6 +2792,10 @@ function defocusSearchBar() {\n         addClass(popup, \"hidden\");\n         popup.id = \"help\";\n \n+        var book_info = document.createElement(\"span\");\n+        book_info.innerHTML = \"You can find more information in \\\n+            <a href=\\\"https://doc.rust-lang.org/rustdoc/\\\">the rustdoc book</a>.\";\n+\n         var container = document.createElement(\"div\");\n         var shortcuts = [\n             [\"?\", \"Show this help dialog\"],\n@@ -2825,6 +2829,7 @@ function defocusSearchBar() {\n         addClass(div_infos, \"infos\");\n         div_infos.innerHTML = \"<h2>Search Tricks</h2>\" + infos;\n \n+        container.appendChild(book_info);\n         container.appendChild(div_shortcuts);\n         container.appendChild(div_infos);\n "}, {"sha": "d7e9496205ab351ded36c7f6eb7d7159287d5c72", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a85e94927622665a9e9022de0d33a890a2e32d43/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/a85e94927622665a9e9022de0d33a890a2e32d43/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=a85e94927622665a9e9022de0d33a890a2e32d43", "patch": "@@ -796,14 +796,22 @@ body.blur > :not(#help) {\n \tclear: left;\n \tdisplay: block;\n }\n+#help > div > span {\n+\ttext-align: center;\n+\tdisplay: block;\n+\tmargin: 10px 0;\n+\tfont-size: 18px;\n+\tborder-bottom: 1px solid #ccc;\n+\tpadding-bottom: 4px;\n+\tmargin-bottom: 6px;\n+}\n #help dd { margin: 5px 35px; }\n #help .infos { padding-left: 0; }\n #help h1, #help h2 { margin-top: 0; }\n #help > div div {\n \twidth: 50%;\n \tfloat: left;\n-\tpadding: 20px;\n-\tpadding-left: 17px;\n+\tpadding: 0 20px 20px 17px;;\n }\n \n .stab {"}, {"sha": "d1cddf0d656571bd5e9f7bc2b4865dfa10c9b9b5", "filename": "src/librustdoc/html/static/themes/ayu.css", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a85e94927622665a9e9022de0d33a890a2e32d43/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/a85e94927622665a9e9022de0d33a890a2e32d43/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css?ref=a85e94927622665a9e9022de0d33a890a2e32d43", "patch": "@@ -219,7 +219,8 @@ a {\n }\n \n .docblock:not(.type-decl) a:not(.srclink):not(.test-arrow),\n-.docblock-short a:not(.srclink):not(.test-arrow), .stability a {\n+.docblock-short a:not(.srclink):not(.test-arrow), .stability a,\n+#help a {\n \tcolor: #39AFD7;\n }\n \n@@ -275,6 +276,10 @@ a {\n \tborder-radius: 4px;\n }\n \n+#help > div > span {\n+\tborder-bottom-color: #5c6773;\n+}\n+\n .since {\n \tcolor: grey;\n }"}, {"sha": "3545943b3fd975118cd9491684bf37edaa2dc6b7", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a85e94927622665a9e9022de0d33a890a2e32d43/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/a85e94927622665a9e9022de0d33a890a2e32d43/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=a85e94927622665a9e9022de0d33a890a2e32d43", "patch": "@@ -177,7 +177,8 @@ a {\n }\n \n .docblock:not(.type-decl) a:not(.srclink):not(.test-arrow),\n-.docblock-short a:not(.srclink):not(.test-arrow), .stability a {\n+.docblock-short a:not(.srclink):not(.test-arrow), .stability a,\n+#help a {\n \tcolor: #D2991D;\n }\n \n@@ -231,6 +232,10 @@ a.test-arrow {\n \tborder-color: #bfbfbf;\n }\n \n+#help > div > span {\n+\tborder-bottom-color: #bfbfbf;\n+}\n+\n #help dt {\n \tborder-color: #bfbfbf;\n \tbackground: rgba(0,0,0,0);"}, {"sha": "4ce4b63e2c6c30a58b958d90737ba54854246c6a", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a85e94927622665a9e9022de0d33a890a2e32d43/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/a85e94927622665a9e9022de0d33a890a2e32d43/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=a85e94927622665a9e9022de0d33a890a2e32d43", "patch": "@@ -175,7 +175,8 @@ a {\n }\n \n .docblock:not(.type-decl) a:not(.srclink):not(.test-arrow),\n-.docblock-short a:not(.srclink):not(.test-arrow), .stability a {\n+.docblock-short a:not(.srclink):not(.test-arrow), .stability a,\n+#help a {\n \tcolor: #3873AD;\n }\n \n@@ -229,6 +230,10 @@ a.test-arrow {\n \tborder-color: #bfbfbf;\n }\n \n+#help > div > span {\n+\tborder-bottom-color: #bfbfbf;\n+}\n+\n .since {\n \tcolor: grey;\n }"}, {"sha": "9eaa58dd438692e53eb23cfa8b5535008e1502c8", "filename": "src/stage0.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a85e94927622665a9e9022de0d33a890a2e32d43/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a85e94927622665a9e9022de0d33a890a2e32d43/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=a85e94927622665a9e9022de0d33a890a2e32d43", "patch": "@@ -20,7 +20,7 @@ cargo: beta\n # bootstrapping issues with use of new syntax in this repo. If you're looking at\n # the beta/stable branch, this key should be omitted, as we don't want to depend\n # on rustfmt from nightly there.\n-rustfmt: nightly-2020-10-07\n+rustfmt: nightly-2020-10-12\n \n # When making a stable release the process currently looks like:\n #"}, {"sha": "46b06e2b3662a593eb151ae66b6c1ad57fa509a2", "filename": "src/test/ui/usize-generic-argument-parent.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a85e94927622665a9e9022de0d33a890a2e32d43/src%2Ftest%2Fui%2Fusize-generic-argument-parent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a85e94927622665a9e9022de0d33a890a2e32d43/src%2Ftest%2Fui%2Fusize-generic-argument-parent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fusize-generic-argument-parent.rs?ref=a85e94927622665a9e9022de0d33a890a2e32d43", "patch": "@@ -0,0 +1,5 @@\n+fn foo() {\n+    let x: usize<foo>; //~ ERROR const arguments are not allowed for this type\n+}\n+\n+fn main() {}"}, {"sha": "f1eae3b500840f4d8cdc56a1bd29e98c1987fe04", "filename": "src/test/ui/usize-generic-argument-parent.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a85e94927622665a9e9022de0d33a890a2e32d43/src%2Ftest%2Fui%2Fusize-generic-argument-parent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a85e94927622665a9e9022de0d33a890a2e32d43/src%2Ftest%2Fui%2Fusize-generic-argument-parent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fusize-generic-argument-parent.stderr?ref=a85e94927622665a9e9022de0d33a890a2e32d43", "patch": "@@ -0,0 +1,9 @@\n+error[E0109]: const arguments are not allowed for this type\n+  --> $DIR/usize-generic-argument-parent.rs:2:18\n+   |\n+LL |     let x: usize<foo>;\n+   |                  ^^^ const argument not allowed\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0109`."}]}