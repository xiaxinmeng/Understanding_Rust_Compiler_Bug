{"sha": "7253057887b6de77e6847844311da517d2ada1eb", "node_id": "C_kwDOAAsO6NoAKDcyNTMwNTc4ODdiNmRlNzdlNjg0Nzg0NDMxMWRhNTE3ZDJhZGExZWI", "commit": {"author": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2022-12-07T18:48:34Z"}, "committer": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2022-12-09T01:38:23Z"}, "message": "Don't generate pointer loads to spills unless necessary\n\nIn order for LLVM to correctly generate debuginfo for msvc, we sometimes\nneed to spill arguments to the stack and perform some direct & indirect\noffsets into the value. Previously, this code always performed those\nactions, even when not required as LLVM would clean it up during\noptimization.\n\nHowever, when MIR inlining is enabled, this can cause problems as the\noperations occur prior to the spilled value being initialized. To solve\nthis, we first calculate the necessary offsets using just the type which\nis side-effect free and does not alter the LLVM IR. Then, if we are in a\nsituation which requires us to generate the LLVM IR (and this situation\nonly occurs for arguments, not local variables) then we perform the same\ncalculation again, this time generating the appropriate LLVM IR as we\ngo.", "tree": {"sha": "f0fa2e56c5451afb1edcf4488162aefa1d5e7aa1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0fa2e56c5451afb1edcf4488162aefa1d5e7aa1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7253057887b6de77e6847844311da517d2ada1eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7253057887b6de77e6847844311da517d2ada1eb", "html_url": "https://github.com/rust-lang/rust/commit/7253057887b6de77e6847844311da517d2ada1eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7253057887b6de77e6847844311da517d2ada1eb/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b33d1e26b220062e23bb202c6765663c157d971b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b33d1e26b220062e23bb202c6765663c157d971b", "html_url": "https://github.com/rust-lang/rust/commit/b33d1e26b220062e23bb202c6765663c157d971b"}], "stats": {"total": 53, "additions": 49, "deletions": 4}, "files": [{"sha": "b7982b633f57fa8b38b93983d078358152820d68", "filename": "compiler/rustc_codegen_ssa/src/mir/debuginfo.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7253057887b6de77e6847844311da517d2ada1eb/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7253057887b6de77e6847844311da517d2ada1eb/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs?ref=7253057887b6de77e6847844311da517d2ada1eb", "patch": "@@ -103,6 +103,28 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> DebugInfoOffsetLocation<'tcx, Bx>\n     }\n }\n \n+impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> DebugInfoOffsetLocation<'tcx, Bx>\n+    for TyAndLayout<'tcx>\n+{\n+    fn deref(&self, bx: &mut Bx) -> Self {\n+        bx.cx().layout_of(\n+            self.ty.builtin_deref(true).unwrap_or_else(|| bug!(\"cannot deref `{}`\", self.ty)).ty,\n+        )\n+    }\n+\n+    fn layout(&self) -> TyAndLayout<'tcx> {\n+        *self\n+    }\n+\n+    fn project_field(&self, bx: &mut Bx, field: mir::Field) -> Self {\n+        self.field(bx.cx(), field.index())\n+    }\n+\n+    fn downcast(&self, bx: &mut Bx, variant: VariantIdx) -> Self {\n+        self.for_variant(bx.cx(), variant)\n+    }\n+}\n+\n struct DebugInfoOffset<T> {\n     /// Offset from the `base` used to calculate the debuginfo offset.\n     direct_offset: Size,\n@@ -340,8 +362,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             let Some(dbg_var) = var.dbg_var else { continue };\n             let Some(dbg_loc) = self.dbg_loc(var.source_info) else { continue };\n \n-            let DebugInfoOffset { direct_offset, indirect_offsets, result: place } =\n-                calculate_debuginfo_offset(bx, local, &var, base);\n+            let DebugInfoOffset { direct_offset, indirect_offsets, result: _ } =\n+                calculate_debuginfo_offset(bx, local, &var, base.layout);\n \n             // When targeting MSVC, create extra allocas for arguments instead of pointing multiple\n             // dbg_var_addr() calls into the same alloca with offsets. MSVC uses CodeView records\n@@ -359,6 +381,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     || !matches!(&indirect_offsets[..], [Size::ZERO] | []));\n \n             if should_create_individual_allocas {\n+                let DebugInfoOffset { direct_offset: _, indirect_offsets: _, result: place } =\n+                    calculate_debuginfo_offset(bx, local, &var, base);\n+\n                 // Create a variable which will be a pointer to the actual value\n                 let ptr_ty = bx.tcx().mk_ty(ty::RawPtr(ty::TypeAndMut {\n                     mutbl: mir::Mutability::Mut,"}, {"sha": "d54ac9e33bce27c865b75cfe9ee4e859e43a2488", "filename": "src/test/codegen/issue-105386-ub-in-debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7253057887b6de77e6847844311da517d2ada1eb/src%2Ftest%2Fcodegen%2Fissue-105386-ub-in-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7253057887b6de77e6847844311da517d2ada1eb/src%2Ftest%2Fcodegen%2Fissue-105386-ub-in-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-105386-ub-in-debuginfo.rs?ref=7253057887b6de77e6847844311da517d2ada1eb", "patch": "@@ -16,7 +16,7 @@ pub fn outer_function(x: S, y: S) -> usize {\n // when generating debuginfo.\n // CHECK-LABEL: @outer_function\n // CHECK: [[spill:%.*]] = alloca %\"[closure@{{.*.rs}}:9:23: 9:25]\"\n-// CHECK: [[ptr_tmp:%.*]] = getelementptr inbounds %\"[closure@{{.*.rs}}:9:23: 9:25]\", ptr [[spill]]\n-// CHECK: [[load:%.*]] = load ptr, ptr [[ptr_tmp]]\n+// CHECK-NOT: [[ptr_tmp:%.*]] = getelementptr inbounds %\"[closure@{{.*.rs}}:9:23: 9:25]\", ptr [[spill]]\n+// CHECK-NOT: [[load:%.*]] = load ptr, ptr\n // CHECK: call void @llvm.lifetime.start{{.*}}({{.*}}, ptr [[spill]])\n // CHECK: call void @llvm.memcpy{{.*}}(ptr {{align .*}} [[spill]], ptr {{align .*}} %x"}, {"sha": "6c6eb5d4e86b760a5e337bf0e3e2faa22641098f", "filename": "src/test/ui/debuginfo/issue-105386-debuginfo-ub.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7253057887b6de77e6847844311da517d2ada1eb/src%2Ftest%2Fui%2Fdebuginfo%2Fissue-105386-debuginfo-ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7253057887b6de77e6847844311da517d2ada1eb/src%2Ftest%2Fui%2Fdebuginfo%2Fissue-105386-debuginfo-ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdebuginfo%2Fissue-105386-debuginfo-ub.rs?ref=7253057887b6de77e6847844311da517d2ada1eb", "patch": "@@ -0,0 +1,20 @@\n+// run-pass\n+// compile-flags: --edition 2021 -Copt-level=3 -Cdebuginfo=2 -Zmir-opt-level=3\n+\n+fn main() {\n+    TranslatorI.visit_pre();\n+}\n+\n+impl TranslatorI {\n+    fn visit_pre(self) {\n+        Some(())\n+            .map(|_| self.flags())\n+            .unwrap_or_else(|| self.flags());\n+    }\n+}\n+\n+struct TranslatorI;\n+\n+impl TranslatorI {\n+    fn flags(&self) {}\n+}"}]}