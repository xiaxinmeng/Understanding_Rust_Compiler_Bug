{"sha": "1cd132eef0ab9fb001f787fc3ee697878d4db3e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZDEzMmVlZjBhYjlmYjAwMWY3ODdmYzNlZTY5Nzg3OGQ0ZGIzZTI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-30T01:24:04Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-30T01:24:04Z"}, "message": "Teach unicode script to emit canonical and compat decomp mappings. Annoyingly large encoding.", "tree": {"sha": "fe072334becca4794ff0075e475f42ea24f7d2a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe072334becca4794ff0075e475f42ea24f7d2a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cd132eef0ab9fb001f787fc3ee697878d4db3e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cd132eef0ab9fb001f787fc3ee697878d4db3e2", "html_url": "https://github.com/rust-lang/rust/commit/1cd132eef0ab9fb001f787fc3ee697878d4db3e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cd132eef0ab9fb001f787fc3ee697878d4db3e2/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36c55b20a89d45f394fceb5e83dd3a032e37810a", "url": "https://api.github.com/repos/rust-lang/rust/commits/36c55b20a89d45f394fceb5e83dd3a032e37810a", "html_url": "https://github.com/rust-lang/rust/commit/36c55b20a89d45f394fceb5e83dd3a032e37810a"}], "stats": {"total": 117, "additions": 71, "deletions": 46}, "files": [{"sha": "1e12c48aad4c16215722e40b6d970996f4f63df8", "filename": "src/etc/unicode.py", "status": "modified", "additions": 71, "deletions": 46, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/1cd132eef0ab9fb001f787fc3ee697878d4db3e2/src%2Fetc%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/1cd132eef0ab9fb001f787fc3ee697878d4db3e2/src%2Fetc%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Funicode.py?ref=1cd132eef0ab9fb001f787fc3ee697878d4db3e2", "patch": "@@ -22,9 +22,11 @@ def fetch(f):\n         exit(1)\n \n \n-def load_general_categories(f):\n+def load_unicode_data(f):\n     fetch(f)\n     gencats = {}\n+    canon_decomp = {}\n+    compat_decomp = {}\n     curr_cat = \"\"\n     c_lo = 0\n     c_hi = 0\n@@ -38,6 +40,18 @@ def load_general_categories(f):\n \n         code = int(code, 16)\n \n+        if decomp != \"\":\n+            if decomp.startswith('<'):\n+                seq = []\n+                for i in decomp.split()[1:]:\n+                    seq.append(int(i, 16))\n+                compat_decomp[code] = seq\n+            else:\n+                seq = []\n+                for i in decomp.split():\n+                    seq.append(int(i, 16))\n+                canon_decomp[code] = seq\n+\n         if curr_cat == \"\":\n             curr_cat = gencat\n             c_lo = code\n@@ -53,7 +67,8 @@ def load_general_categories(f):\n             curr_cat = gencat\n             c_lo = code\n             c_hi = code\n-    return gencats\n+\n+    return (canon_decomp, compat_decomp, gencats)\n \n \n def load_derived_core_properties(f):\n@@ -96,7 +111,7 @@ def escape_char(c):\n         return \"'\\\\u%4.4x'\" % c\n     return \"'\\\\U%8.8x'\" % c\n \n-def emit_rust_module(f, mod, tbl):\n+def emit_property_module(f, mod, tbl):\n     f.write(\"mod %s {\\n\" % mod)\n     keys = tbl.keys()\n     keys.sort()\n@@ -120,53 +135,63 @@ def emit_rust_module(f, mod, tbl):\n         f.write(\"    }\\n\\n\")\n     f.write(\"}\\n\")\n \n-\n-def emit_cpp_module(f, mod, tbl):\n-    keys = tbl.keys()\n-    keys.sort()\n-\n-    for cat in keys:\n-\n-        singles = []\n-        ranges = []\n-\n-        for pair in tbl[cat]:\n-            if pair[0] == pair[1]:\n-                singles.append(pair[0])\n-            else:\n-                ranges.append(pair)\n-\n-        f.write(\"bool %s_%s(unsigned c) {\\n\" % (mod, cat))\n-        for pair in ranges:\n-            f.write(\"    if (0x%x <= c && c <= 0x%x) { return true; }\\n\"\n-                    % pair)\n-        if len(singles) > 0:\n-            f.write(\"    switch (c) {\\n\");\n-            for single in singles:\n-                f.write(\"      case 0x%x:\\n\" % single)\n-            f.write(\"        return true;\\n\");\n-            f.write(\"      default:\\n\");\n-            f.write(\"        return false;\\n\");\n-            f.write(\"    }\\n\")\n-        f.write(\"return false;\\n\")\n-        f.write(\"}\\n\\n\")\n-\n-\n-def emit_module(rf, cf, mod, tbl):\n-    emit_rust_module(rf, mod, tbl)\n-    emit_cpp_module(cf, mod, tbl)\n+def emit_decomp_module(f, canon, compat):\n+    canon_keys = canon.keys()\n+    canon_keys.sort()\n+\n+    compat_keys = compat.keys()\n+    compat_keys.sort()\n+    f.write(\"mod decompose {\\n\\n\");\n+    f.write(\"    export canonical, compatibility;\\n\\n\")\n+    f.write(\"    fn canonical(c: char, i: block(char)) { d(c, i, false); }\\n\\n\")\n+    f.write(\"    fn compatibility(c: char, i: block(char)) { d(c, i, true); }\\n\\n\")\n+    f.write(\"    fn d(c: char, i: block(char), k: bool) {\\n\")\n+\n+    f.write(\"        if c <= '\\\\x7f' { i(c); ret; }\\n\")\n+\n+    # First check the canonical decompositions\n+    f.write(\"        // Canonical decomposition\\n\")\n+    f.write(\"        alt c {\\n\")\n+    for char in canon_keys:\n+        f.write(\"          %s {\\n\" % escape_char(char))\n+        for d in canon[char]:\n+            f.write(\"            d(%s, i, k);\\n\"\n+                    % escape_char(d))\n+        f.write(\"          }\\n\")\n+\n+    f.write(\"          _ { }\\n\")\n+    f.write(\"        }\\n\\n\")\n+\n+    # Bottom out if we're not doing compat.\n+    f.write(\"        if !k { i(c); ret; }\\n\\n \")\n+\n+    # Then check the compatibility decompositions\n+    f.write(\"        // Compatibility decomposition\\n\")\n+    f.write(\"        alt c {\\n\")\n+    for char in compat_keys:\n+        f.write(\"          %s {\\n\" % escape_char(char))\n+        for d in compat[char]:\n+            f.write(\"            d(%s, i, k);\\n\"\n+                    % escape_char(d))\n+        f.write(\"          }\\n\")\n+\n+    f.write(\"          _ { }\\n\")\n+    f.write(\"        }\\n\\n\")\n+\n+    # Finally bottom out.\n+    f.write(\"        i(c);\\n\")\n+    f.write(\"    }\\n\")\n+    f.write(\"}\\n\\n\")\n \n r = \"unicode.rs\"\n-c = \"unicode.cpp\"\n-for i in [r, c]:\n+for i in [r]:\n     if os.path.exists(i):\n         os.remove(i);\n-\n rf = open(r, \"w\")\n-cf = open(c, \"w\")\n \n-emit_module(rf, cf, \"general_category\",\n-            load_general_categories(\"UnicodeData.txt\"))\n+(canon_decomp, compat_decomp, gencats) = load_unicode_data(\"UnicodeData.txt\")\n+emit_decomp_module(rf, canon_decomp, compat_decomp)\n+emit_property_module(rf, \"general_category\", gencats)\n \n-emit_module(rf, cf, \"derived_property\",\n-            load_derived_core_properties(\"DerivedCoreProperties.txt\"))\n+emit_property_module(rf, \"derived_property\",\n+                     load_derived_core_properties(\"DerivedCoreProperties.txt\"))"}]}