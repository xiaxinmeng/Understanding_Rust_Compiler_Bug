{"sha": "c93f571c2a040a29525b077e557b3d592072fcf2", "node_id": "C_kwDOAAsO6NoAKGM5M2Y1NzFjMmEwNDBhMjk1MjViMDc3ZTU1N2IzZDU5MjA3MmZjZjI", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-07T15:50:42Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-07T15:50:42Z"}, "message": "Print opaque types from type aliases via their path", "tree": {"sha": "fca9f71e0581cae7493106f6de5fff2eb21dd232", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fca9f71e0581cae7493106f6de5fff2eb21dd232"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c93f571c2a040a29525b077e557b3d592072fcf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c93f571c2a040a29525b077e557b3d592072fcf2", "html_url": "https://github.com/rust-lang/rust/commit/c93f571c2a040a29525b077e557b3d592072fcf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c93f571c2a040a29525b077e557b3d592072fcf2/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75461633350a24c3c23d387155c200ae31ccc870", "url": "https://api.github.com/repos/rust-lang/rust/commits/75461633350a24c3c23d387155c200ae31ccc870", "html_url": "https://github.com/rust-lang/rust/commit/75461633350a24c3c23d387155c200ae31ccc870"}], "stats": {"total": 230, "additions": 153, "deletions": 77}, "files": [{"sha": "6521957ec944c36b9b26a7fdbe31fa530666a5c0", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -644,18 +644,23 @@ pub trait PrettyPrinter<'tcx>:\n                     return Ok(self);\n                 }\n \n-                let def_key = self.tcx().def_key(def_id);\n-                if let Some(name) = def_key.disambiguated_data.data.get_opt_name() {\n-                    p!(write(\"{}\", name));\n-                    // FIXME(eddyb) print this with `print_def_path`.\n-                    if !substs.is_empty() {\n-                        p!(\"::\");\n-                        p!(generic_delimiters(|cx| cx.comma_sep(substs.iter())));\n+                let parent = self.tcx().parent(def_id).expect(\"opaque types always have a parent\");\n+                match self.tcx().def_kind(parent) {\n+                    DefKind::TyAlias | DefKind::AssocTy => {\n+                        if let ty::Opaque(d, _) = *self.tcx().type_of(parent).kind() {\n+                            if d == def_id {\n+                                // If the type alias directly starts with the `impl` of the\n+                                // opaque type we're printing, then skip the `::{opaque#1}`.\n+                                p!(print_def_path(parent, substs));\n+                                return Ok(self);\n+                            }\n+                        }\n+                        // Complex opaque type, e.g. `type Foo = (i32, impl Debug);`\n+                        p!(print_def_path(def_id, substs));\n+                        return Ok(self);\n                     }\n-                    return Ok(self);\n+                    _ => return self.pretty_print_opaque_impl_type(def_id, substs),\n                 }\n-\n-                return self.pretty_print_opaque_impl_type(def_id, substs);\n             }\n             ty::Str => p!(\"str\"),\n             ty::Generator(did, substs, movability) => {\n@@ -898,15 +903,6 @@ pub trait PrettyPrinter<'tcx>:\n                     if !first {\n                         p!(\", \");\n                     }\n-                    if let GenericArgKind::Type(ty) = ty.unpack() {\n-                        if let ty::Opaque(d, substs) = *ty.kind() {\n-                            if d == def_id {\n-                                p!(print_def_path(d, substs));\n-                                first = false;\n-                                continue;\n-                            }\n-                        }\n-                    }\n                     p!(print(trait_ref.rebind(*ty)));\n                     first = false;\n                 }"}, {"sha": "f1dcd34066dbc6bfda6d3db2cf565f5029f53ef2", "filename": "src/test/ui/associated-type-bounds/assoc-type-eq-with-dyn-atb-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `String: Copy` is not satisfied\n LL |         Box::new(AssocNoCopy)\n    |         ^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n    |\n-   = note: required for the cast to the object type `dyn Bar<Assoc = impl Copy>`\n+   = note: required for the cast to the object type `dyn Bar<Assoc = <AssocNoCopy as Thing>::Out::{opaque#0}>`\n \n error: aborting due to previous error\n "}, {"sha": "35994e4a5ba3f5b7556ef82e9cbb6c0def9e12e6", "filename": "src/test/ui/impl-trait/auto-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.rs?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -19,7 +19,7 @@ impl<T: Send> AnotherTrait for T {}\n // (We treat opaque types as \"foreign types\" that could grow more impls\n // in the future.)\n impl AnotherTrait for D<OpaqueType> {\n-    //~^ ERROR conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`\n+    //~^ ERROR conflicting implementations of trait `AnotherTrait` for type `D<OpaqueType>`\n }\n \n fn main() {}"}, {"sha": "81009413c9a268f550e356fe32381bf0e3526a88", "filename": "src/test/ui/impl-trait/auto-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.stderr?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -1,11 +1,11 @@\n-error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`\n+error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<OpaqueType>`\n   --> $DIR/auto-trait.rs:21:1\n    |\n LL | impl<T: Send> AnotherTrait for T {}\n    | -------------------------------- first implementation here\n ...\n LL | impl AnotherTrait for D<OpaqueType> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `D<impl OpaqueTrait>`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `D<OpaqueType>`\n \n error: aborting due to previous error\n "}, {"sha": "70e24a3a9d029b946073b198b4d1cbf7583381a1", "filename": "src/test/ui/impl-trait/negative-reasoning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.rs?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -17,7 +17,7 @@ impl<T: std::fmt::Debug> AnotherTrait for T {}\n \n // This is in error, because we cannot assume that `OpaqueType: !Debug`\n impl AnotherTrait for D<OpaqueType> {\n-    //~^ ERROR conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`\n+    //~^ ERROR conflicting implementations of trait `AnotherTrait` for type `D<OpaqueType>`\n }\n \n fn main() {}"}, {"sha": "6b8cc9e7374239c2c14036bf2ce6bfd6628323ad", "filename": "src/test/ui/impl-trait/negative-reasoning.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -1,13 +1,13 @@\n-error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<impl OpaqueTrait>`\n+error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<OpaqueType>`\n   --> $DIR/negative-reasoning.rs:19:1\n    |\n LL | impl<T: std::fmt::Debug> AnotherTrait for T {}\n    | ------------------------------------------- first implementation here\n ...\n LL | impl AnotherTrait for D<OpaqueType> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `D<impl OpaqueTrait>`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `D<OpaqueType>`\n    |\n-   = note: upstream crates may add a new impl of trait `std::fmt::Debug` for type `impl OpaqueTrait` in future versions\n+   = note: upstream crates may add a new impl of trait `std::fmt::Debug` for type `OpaqueType` in future versions\n \n error: aborting due to previous error\n "}, {"sha": "691047c8a405b56551985c1b26f21aa99f6efbb1", "filename": "src/test/ui/lint/lint-ctypes-73249-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.rs?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -23,7 +23,7 @@ pub struct A<T: Foo> {\n }\n \n extern \"C\" {\n-    pub fn lint_me() -> A<()>; //~ ERROR: uses type `impl Baz`\n+    pub fn lint_me() -> A<()>; //~ ERROR: uses type `Qux`\n }\n \n fn main() {}"}, {"sha": "7c85e9fa85c632cfc27d83171e2617dc5e6eaf41", "filename": "src/test/ui/lint/lint-ctypes-73249-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-2.stderr?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -1,4 +1,4 @@\n-error: `extern` block uses type `impl Baz`, which is not FFI-safe\n+error: `extern` block uses type `Qux`, which is not FFI-safe\n   --> $DIR/lint-ctypes-73249-2.rs:26:25\n    |\n LL |     pub fn lint_me() -> A<()>;"}, {"sha": "ef8ab7e03d2f07277c0105a158398ebc231d7a04", "filename": "src/test/ui/lint/lint-ctypes-73249-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.rs?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -17,7 +17,7 @@ pub struct A {\n }\n \n extern \"C\" {\n-    pub fn lint_me() -> A; //~ ERROR: uses type `impl Baz`\n+    pub fn lint_me() -> A; //~ ERROR: uses type `Qux`\n }\n \n fn main() {}"}, {"sha": "83e2a233c43355aab8670baf6591a89c49ac7b44", "filename": "src/test/ui/lint/lint-ctypes-73249-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-3.stderr?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -1,4 +1,4 @@\n-error: `extern` block uses type `impl Baz`, which is not FFI-safe\n+error: `extern` block uses type `Qux`, which is not FFI-safe\n   --> $DIR/lint-ctypes-73249-3.rs:20:25\n    |\n LL |     pub fn lint_me() -> A;"}, {"sha": "083fb6c5fb16dcc447c250aa1ebebecc39ac1b8f", "filename": "src/test/ui/lint/lint-ctypes-73249-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.rs?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -17,7 +17,7 @@ pub struct A {\n }\n \n extern \"C\" {\n-    pub fn lint_me() -> A; //~ ERROR: uses type `impl Baz`\n+    pub fn lint_me() -> A; //~ ERROR: uses type `Qux`\n }\n \n fn main() {}"}, {"sha": "37781d78cf28c03513b830662d90e6b2ff5efbaa", "filename": "src/test/ui/lint/lint-ctypes-73249-5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73249-5.stderr?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -1,4 +1,4 @@\n-error: `extern` block uses type `impl Baz`, which is not FFI-safe\n+error: `extern` block uses type `Qux`, which is not FFI-safe\n   --> $DIR/lint-ctypes-73249-5.rs:20:25\n    |\n LL |     pub fn lint_me() -> A;"}, {"sha": "145ba784f7c66955e5a3a8ee068c9e188388bd8a", "filename": "src/test/ui/lint/lint-ctypes-73251-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.rs?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -20,7 +20,7 @@ fn assign() -> Qux {\n }\n \n extern \"C\" {\n-    pub fn lint_me() -> <u32 as Foo>::Assoc; //~ ERROR: uses type `impl Baz`\n+    pub fn lint_me() -> <u32 as Foo>::Assoc; //~ ERROR: uses type `Qux`\n }\n \n fn main() {}"}, {"sha": "76b19d37e21a6d9eaeb5fddf3ec26b2d72f161ae", "filename": "src/test/ui/lint/lint-ctypes-73251-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-1.stderr?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -1,4 +1,4 @@\n-error: `extern` block uses type `impl Baz`, which is not FFI-safe\n+error: `extern` block uses type `Qux`, which is not FFI-safe\n   --> $DIR/lint-ctypes-73251-1.rs:23:25\n    |\n LL |     pub fn lint_me() -> <u32 as Foo>::Assoc;"}, {"sha": "df71a94579624bd51dc28637579094a281210639", "filename": "src/test/ui/lint/lint-ctypes-73251-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.rs?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -33,7 +33,7 @@ fn use_of_b() -> AliasB {\n }\n \n extern \"C\" {\n-    pub fn lint_me() -> <AliasB as TraitB>::Assoc; //~ ERROR: uses type `impl TraitA<Assoc = u32>`\n+    pub fn lint_me() -> <AliasB as TraitB>::Assoc; //~ ERROR: uses type `AliasA`\n }\n \n fn main() {}"}, {"sha": "64f0fb2d892a45d31448a07da8a1bf46be8ded0c", "filename": "src/test/ui/lint/lint-ctypes-73251-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-73251-2.stderr?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -1,4 +1,4 @@\n-error: `extern` block uses type `impl TraitA<Assoc = u32>`, which is not FFI-safe\n+error: `extern` block uses type `AliasA`, which is not FFI-safe\n   --> $DIR/lint-ctypes-73251-2.rs:36:25\n    |\n LL |     pub fn lint_me() -> <AliasB as TraitB>::Assoc;"}, {"sha": "b7cc38e99fc37bdddacf11c89dfb60a9c5bdee91", "filename": "src/test/ui/lint/opaque-ty-ffi-unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.rs?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -9,7 +9,7 @@ pub fn ret_closure() -> A {\n \n extern \"C\" {\n     pub fn a(_: A);\n-    //~^ ERROR `extern` block uses type `impl Fn()`, which is not FFI-safe [improper_ctypes]\n+    //~^ ERROR `extern` block uses type `A`, which is not FFI-safe [improper_ctypes]\n }\n \n fn main() {}"}, {"sha": "62d00fd6835eee19568dc430c5a4b0de43d9d3f1", "filename": "src/test/ui/lint/opaque-ty-ffi-unsafe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-unsafe.stderr?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -1,4 +1,4 @@\n-error: `extern` block uses type `impl Fn()`, which is not FFI-safe\n+error: `extern` block uses type `A`, which is not FFI-safe\n   --> $DIR/opaque-ty-ffi-unsafe.rs:11:17\n    |\n LL |     pub fn a(_: A);"}, {"sha": "04320e72076830aab187c2e7b7dbf43e08d73051", "filename": "src/test/ui/traits/alias/issue-83613.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.rs?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -8,6 +8,6 @@ fn mk_opaque() -> OpaqueType {\n trait AnotherTrait {}\n impl<T: Send> AnotherTrait for T {}\n impl AnotherTrait for OpaqueType {}\n-//~^ ERROR conflicting implementations of trait `AnotherTrait` for type `impl OpaqueTrait`\n+//~^ ERROR conflicting implementations of trait `AnotherTrait` for type `OpaqueType`\n //~| ERROR cannot implement trait on type alias impl trait\n fn main() {}"}, {"sha": "4f19e6607c8d9f3256b34b61a969316754d8e956", "filename": "src/test/ui/traits/alias/issue-83613.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.stderr?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -10,13 +10,13 @@ note: type alias impl trait defined here\n LL | type OpaqueType = impl OpaqueTrait;\n    |                   ^^^^^^^^^^^^^^^^\n \n-error[E0119]: conflicting implementations of trait `AnotherTrait` for type `impl OpaqueTrait`\n+error[E0119]: conflicting implementations of trait `AnotherTrait` for type `OpaqueType`\n   --> $DIR/issue-83613.rs:10:1\n    |\n LL | impl<T: Send> AnotherTrait for T {}\n    | -------------------------------- first implementation here\n LL | impl AnotherTrait for OpaqueType {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `impl OpaqueTrait`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `OpaqueType`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0664275b2ad0a359520c9df3d97743000f2b5f54", "filename": "src/test/ui/type-alias-impl-trait/auto-trait-leakage2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage2.stderr?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -2,15 +2,15 @@ error[E0277]: `Rc<u32>` cannot be sent between threads safely\n   --> $DIR/auto-trait-leakage2.rs:17:13\n    |\n LL |     type Foo = impl std::fmt::Debug;\n-   |                -------------------- within this `impl Debug`\n+   |                -------------------- within this `Foo`\n ...\n LL |     is_send(m::foo());\n    |     ------- ^^^^^^^^ `Rc<u32>` cannot be sent between threads safely\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: within `impl Debug`, the trait `Send` is not implemented for `Rc<u32>`\n-   = note: required because it appears within the type `impl Debug`\n+   = help: within `Foo`, the trait `Send` is not implemented for `Rc<u32>`\n+   = note: required because it appears within the type `Foo`\n note: required by a bound in `is_send`\n   --> $DIR/auto-trait-leakage2.rs:14:15\n    |"}, {"sha": "26308c6ff6b1511936c671cb83239f649595cb4a", "filename": "src/test/ui/type-alias-impl-trait/declared_but_not_defined_in_scope.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fdeclared_but_not_defined_in_scope.stderr?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -15,7 +15,7 @@ LL |     pub type Boo = impl ::std::fmt::Debug;\n LL |     \"\"\n    |     ^^ expected opaque type, found `&str`\n    |\n-   = note: expected opaque type `impl Debug`\n+   = note: expected opaque type `Boo`\n                 found reference `&str`\n \n error: aborting due to 2 previous errors"}, {"sha": "4b7dbbd6a56cc2f9d7a89c4d80ea326407f9f32b", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -25,7 +25,7 @@ LL | type Closure = impl FnOnce();\n LL |     || -> Closure { || () }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found closure\n    |\n-   = note: expected opaque type `impl FnOnce()`\n+   = note: expected opaque type `Closure`\n                   found closure `[closure@$DIR/issue-63279.rs:8:5: 8:28]`\n \n error: aborting due to 3 previous errors"}, {"sha": "38591e37f53585d36d9b9feb1f837f06c360accc", "filename": "src/test/ui/type-alias-impl-trait/issue-74280.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.stderr?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -7,7 +7,7 @@ LL | type Test = impl Copy;\n LL |     7\n    |     ^ expected `()`, found integer\n    |\n-   = note: expected opaque type `impl Copy`\n+   = note: expected opaque type `Test`\n                      found type `{integer}`\n \n error: aborting due to previous error"}, {"sha": "053546e4b9285e29d0175fc6dde04fd1a43f1427", "filename": "src/test/ui/type-alias-impl-trait/issue-77179.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-77179.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-77179.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-77179.stderr?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -5,7 +5,7 @@ LL | fn test() -> Pointer<_> {\n    |              --------^-\n    |              |       |\n    |              |       not allowed in type signatures\n-   |              help: replace with the correct return type: `impl Deref<Target = i32>`\n+   |              help: replace with the correct return type: `Pointer<i32>`\n \n error: aborting due to previous error\n "}, {"sha": "db4b60461ef38435344f008e7448d25d50d76982", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn3.stderr?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -11,7 +11,7 @@ LL | fn g<A: ToString + Clone, B: ToString + Clone>(a: A, b: B) -> (X<A, B>, X<A\n LL |     (a, b)\n    |         ^ expected type parameter `A`, found type parameter `B`\n    |\n-   = note: expected opaque type `impl ToString`\n+   = note: expected opaque type `X<A, B>`\n            found type parameter `B`\n    = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters"}, {"sha": "784a6c75886d427cd0951410e87c58f891c664f1", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.rs?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -12,7 +12,7 @@ impl Foo<()> for () { }\n fn foo() -> impl Foo<FooX> {\n     // FIXME(type-alias-impl-trait): We could probably make this work.\n     ()\n-    //~^ ERROR: the trait bound `(): Foo<impl Debug>` is not satisfied\n+    //~^ ERROR: the trait bound `(): Foo<FooX>` is not satisfied\n }\n \n fn main() { }"}, {"sha": "9472cac63554e21522e589b22849cdc232750645", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.stderr?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `(): Foo<impl Debug>` is not satisfied\n+error[E0277]: the trait bound `(): Foo<FooX>` is not satisfied\n   --> $DIR/nested-tait-inference.rs:14:5\n    |\n LL |     ()\n-   |     ^^ the trait `Foo<impl Debug>` is not implemented for `()`\n+   |     ^^ the trait `Foo<FooX>` is not implemented for `()`\n    |\n    = help: the following implementations were found:\n              <() as Foo<()>>"}, {"sha": "00bd44c493c83475abaeabcd376dbd6e403973fd", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.rs?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -12,7 +12,7 @@ impl Foo<u32> for () {}\n \n fn foo() -> impl Foo<FooX> {\n     ()\n-    //~^ ERROR: the trait bound `(): Foo<impl Debug>` is not satisfied\n+    //~^ ERROR: the trait bound `(): Foo<FooX>` is not satisfied\n }\n \n fn main() {}"}, {"sha": "ec1b4642d08226adc3eaaacc53f8e9c350f2c6d4", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `(): Foo<impl Debug>` is not satisfied\n+error[E0277]: the trait bound `(): Foo<FooX>` is not satisfied\n   --> $DIR/nested-tait-inference2.rs:14:5\n    |\n LL |     ()\n-   |     ^^ the trait `Foo<impl Debug>` is not implemented for `()`\n+   |     ^^ the trait `Foo<FooX>` is not implemented for `()`\n    |\n    = help: the following implementations were found:\n              <() as Foo<()>>"}, {"sha": "6b866be7d173f1033faa961b3c5f711313c66cf4", "filename": "src/test/ui/type-alias-impl-trait/nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested.rs?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -13,5 +13,5 @@ fn bar() -> Bar {\n \n fn main() {\n     println!(\"{:?}\", bar());\n-    //~^ ERROR `impl Trait<impl Debug>` doesn't implement `Debug`\n+    //~^ ERROR `Bar` doesn't implement `Debug`\n }"}, {"sha": "cf4d23656e0e15e515143baae11777d565005446", "filename": "src/test/ui/type-alias-impl-trait/nested.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested.stderr?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -1,10 +1,10 @@\n-error[E0277]: `impl Trait<impl Debug>` doesn't implement `Debug`\n+error[E0277]: `Bar` doesn't implement `Debug`\n   --> $DIR/nested.rs:15:22\n    |\n LL |     println!(\"{:?}\", bar());\n-   |                      ^^^^^ `impl Trait<impl Debug>` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |                      ^^^^^ `Bar` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = help: the trait `Debug` is not implemented for `impl Trait<impl Debug>`\n+   = help: the trait `Debug` is not implemented for `Bar`\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "e691d8781c0f1cff7d2bcac93a715f97bd37e4c8", "filename": "src/test/ui/type-alias-impl-trait/no_revealing_outside_defining_module.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fno_revealing_outside_defining_module.stderr?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -8,7 +8,7 @@ LL |     let _: &str = bomp();\n    |                   ^^^^^^ expected `&str`, found opaque type\n    |\n    = note: expected reference `&str`\n-            found opaque type `impl Debug`\n+            found opaque type `Boo`\n \n error[E0308]: mismatched types\n   --> $DIR/no_revealing_outside_defining_module.rs:19:5\n@@ -19,7 +19,7 @@ LL |     pub type Boo = impl ::std::fmt::Debug;\n LL |     \"\"\n    |     ^^ expected opaque type, found `&str`\n    |\n-   = note: expected opaque type `impl Debug`\n+   = note: expected opaque type `Boo`\n                 found reference `&str`\n \n error: aborting due to 2 previous errors"}, {"sha": "dc7054da5ec190ac3d423ffd9b9935f187977bce", "filename": "src/test/ui/type-alias-impl-trait/self-referential-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-2.rs?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -4,7 +4,7 @@ type Foo = impl std::fmt::Debug;\n type Bar = impl PartialEq<Foo>;\n \n fn bar() -> Bar {\n-    42_i32 //~ ERROR can't compare `i32` with `impl Debug`\n+    42_i32 //~ ERROR can't compare `i32` with `Foo`\n }\n \n fn main() {}"}, {"sha": "6997676260dd603e3a0a30668f8525584cb1278a", "filename": "src/test/ui/type-alias-impl-trait/self-referential-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-2.stderr?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -1,10 +1,10 @@\n-error[E0277]: can't compare `i32` with `impl Debug`\n+error[E0277]: can't compare `i32` with `Foo`\n   --> $DIR/self-referential-2.rs:7:5\n    |\n LL |     42_i32\n-   |     ^^^^^^ no implementation for `i32 == impl Debug`\n+   |     ^^^^^^ no implementation for `i32 == Foo`\n    |\n-   = help: the trait `PartialEq<impl Debug>` is not implemented for `i32`\n+   = help: the trait `PartialEq<Foo>` is not implemented for `i32`\n \n error: aborting due to previous error\n "}, {"sha": "697ec56825a9c5ed9e6f5d3fd6223dcb43962015", "filename": "src/test/ui/type-alias-impl-trait/self-referential-4.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-4.rs?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -0,0 +1,25 @@\n+#![feature(type_alias_impl_trait)]\n+\n+type Bar<'a, 'b> = impl PartialEq<Bar<'b, 'static>> + std::fmt::Debug;\n+\n+fn bar<'a, 'b>(i: &'a i32) -> Bar<'a, 'b> {\n+    i //~ ERROR can't compare `&i32` with `Bar<'b, 'static>`\n+}\n+\n+type Foo<'a, 'b> = impl PartialEq<Foo<'static, 'b>> + std::fmt::Debug;\n+\n+fn foo<'a, 'b>(i: &'a i32) -> Foo<'a, 'b> {\n+    i //~ ERROR can't compare `&i32` with `Foo<'static, 'b>`\n+}\n+\n+type Moo<'a, 'b> = impl PartialEq<Moo<'static, 'a>> + std::fmt::Debug;\n+\n+fn moo<'a, 'b>(i: &'a i32) -> Moo<'a, 'b> {\n+    i //~ ERROR can't compare `&i32` with `Moo<'static, 'a>`\n+}\n+\n+fn main() {\n+    let meh = 42;\n+    let muh = 69;\n+    assert_eq!(bar(&meh), bar(&meh));\n+}"}, {"sha": "4a6ee2f9279d1554febc22ec179449f4b6106e5e", "filename": "src/test/ui/type-alias-impl-trait/self-referential-4.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential-4.stderr?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -0,0 +1,27 @@\n+error[E0277]: can't compare `&i32` with `Bar<'b, 'static>`\n+  --> $DIR/self-referential-4.rs:6:5\n+   |\n+LL |     i\n+   |     ^ no implementation for `&i32 == Bar<'b, 'static>`\n+   |\n+   = help: the trait `PartialEq<Bar<'b, 'static>>` is not implemented for `&i32`\n+\n+error[E0277]: can't compare `&i32` with `Foo<'static, 'b>`\n+  --> $DIR/self-referential-4.rs:12:5\n+   |\n+LL |     i\n+   |     ^ no implementation for `&i32 == Foo<'static, 'b>`\n+   |\n+   = help: the trait `PartialEq<Foo<'static, 'b>>` is not implemented for `&i32`\n+\n+error[E0277]: can't compare `&i32` with `Moo<'static, 'a>`\n+  --> $DIR/self-referential-4.rs:18:5\n+   |\n+LL |     i\n+   |     ^ no implementation for `&i32 == Moo<'static, 'a>`\n+   |\n+   = help: the trait `PartialEq<Moo<'static, 'a>>` is not implemented for `&i32`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "4974ac72dad1838c68dd59e0166a4aaf83a0b956", "filename": "src/test/ui/type-alias-impl-trait/self-referential.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.rs?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -3,7 +3,19 @@\n type Bar<'a, 'b> = impl PartialEq<Bar<'b, 'a>> + std::fmt::Debug;\n \n fn bar<'a, 'b>(i: &'a i32) -> Bar<'a, 'b> {\n-    i //~ ERROR can't compare `&i32` with `impl PartialEq<Bar<'a, 'b>\n+    i //~ ERROR can't compare `&i32` with `Bar<'b, 'a>`\n+}\n+\n+type Foo<'a, 'b> = (i32, impl PartialEq<Foo<'a, 'b>> + std::fmt::Debug);\n+\n+fn foo<'a, 'b>(i: &'a i32) -> Foo<'a, 'b> {\n+    (42, i) //~ ERROR can't compare `&i32` with `(i32, &i32)`\n+}\n+\n+type Moo<'a, 'b> = (i32, impl PartialEq<Moo<'b, 'a>> + std::fmt::Debug);\n+\n+fn moo<'a, 'b>(i: &'a i32) -> Moo<'a, 'b> {\n+    (42, i) //~ ERROR can't compare `&i32` with `(i32, Moo<'b, 'a>::{opaque#0})`\n }\n \n fn main() {"}, {"sha": "0626e6be0d5a5575f5c71b3d1efe1d3b06e9ad8a", "filename": "src/test/ui/type-alias-impl-trait/self-referential.stderr", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fself-referential.stderr?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -1,11 +1,27 @@\n-error[E0277]: can't compare `&i32` with `impl PartialEq<Bar<'a, 'b>::{opaque#0}> + Debug`\n+error[E0277]: can't compare `&i32` with `Bar<'b, 'a>`\n   --> $DIR/self-referential.rs:6:5\n    |\n LL |     i\n-   |     ^ no implementation for `&i32 == impl PartialEq<Bar<'a, 'b>::{opaque#0}> + Debug`\n+   |     ^ no implementation for `&i32 == Bar<'b, 'a>`\n    |\n-   = help: the trait `PartialEq<impl PartialEq<Bar<'a, 'b>::{opaque#0}> + Debug>` is not implemented for `&i32`\n+   = help: the trait `PartialEq<Bar<'b, 'a>>` is not implemented for `&i32`\n \n-error: aborting due to previous error\n+error[E0277]: can't compare `&i32` with `(i32, &i32)`\n+  --> $DIR/self-referential.rs:12:10\n+   |\n+LL |     (42, i)\n+   |          ^ no implementation for `&i32 == (i32, &i32)`\n+   |\n+   = help: the trait `PartialEq<(i32, &i32)>` is not implemented for `&i32`\n+\n+error[E0277]: can't compare `&i32` with `(i32, Moo<'b, 'a>::{opaque#0})`\n+  --> $DIR/self-referential.rs:18:10\n+   |\n+LL |     (42, i)\n+   |          ^ no implementation for `&i32 == (i32, Moo<'b, 'a>::{opaque#0})`\n+   |\n+   = help: the trait `PartialEq<(i32, Moo<'b, 'a>::{opaque#0})>` is not implemented for `&i32`\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "cab742d23f57d05e1a9b9233491d967c2cab13ba", "filename": "src/test/ui/type-alias-impl-trait/structural-match-no-leak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -13,7 +13,7 @@ const LEAK_FREE: Bar = leak_free();\n fn leak_free_test() {\n     match LEAK_FREE {\n         LEAK_FREE => (),\n-        //~^ `impl Send` cannot be used in patterns\n+        //~^ `Bar` cannot be used in patterns\n         _ => (),\n     }\n }"}, {"sha": "aacc0cc7aa69b768afd9cc8ccda621d9bdb5d654", "filename": "src/test/ui/type-alias-impl-trait/structural-match-no-leak.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.stderr?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -1,4 +1,4 @@\n-error: `impl Send` cannot be used in patterns\n+error: `Bar` cannot be used in patterns\n   --> $DIR/structural-match-no-leak.rs:15:9\n    |\n LL |         LEAK_FREE => (),"}, {"sha": "c8825c68e33cc3b0ed351cdfcd1fd80407860dd6", "filename": "src/test/ui/type-alias-impl-trait/structural-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -14,7 +14,7 @@ const VALUE: Foo = value();\n fn test() {\n     match VALUE {\n         VALUE => (),\n-        //~^ `impl Send` cannot be used in patterns\n+        //~^ `Foo` cannot be used in patterns\n         _ => (),\n     }\n }"}, {"sha": "28ae9c212d979f104b491a1527e5ea4069b1dab6", "filename": "src/test/ui/type-alias-impl-trait/structural-match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.stderr?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -1,4 +1,4 @@\n-error: `impl Send` cannot be used in patterns\n+error: `Foo` cannot be used in patterns\n   --> $DIR/structural-match.rs:16:9\n    |\n LL |         VALUE => (),"}, {"sha": "1dabe4586c5b93123e9c9a3e00a2b129b7753b02", "filename": "src/test/ui/type-alias-impl-trait/type_of_a_let.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype_of_a_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c93f571c2a040a29525b077e557b3d592072fcf2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype_of_a_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype_of_a_let.stderr?ref=c93f571c2a040a29525b077e557b3d592072fcf2", "patch": "@@ -2,7 +2,7 @@ error[E0382]: use of moved value: `x`\n   --> $DIR/type_of_a_let.rs:16:16\n    |\n LL |     let x: Foo = 22_u32;\n-   |         - move occurs because `x` has type `impl Debug`, which does not implement the `Copy` trait\n+   |         - move occurs because `x` has type `Foo`, which does not implement the `Copy` trait\n LL |     let y: Foo = x;\n    |                  - value moved here\n LL |     same_type((x, y));\n@@ -12,7 +12,7 @@ error[E0382]: use of moved value: `y`\n   --> $DIR/type_of_a_let.rs:17:5\n    |\n LL |     let y: Foo = x;\n-   |         - move occurs because `y` has type `impl Debug`, which does not implement the `Copy` trait\n+   |         - move occurs because `y` has type `Foo`, which does not implement the `Copy` trait\n LL |     same_type((x, y));\n    |                   - value moved here\n LL |     y"}]}