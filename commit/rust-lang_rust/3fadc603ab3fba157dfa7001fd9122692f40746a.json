{"sha": "3fadc603ab3fba157dfa7001fd9122692f40746a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmYWRjNjAzYWIzZmJhMTU3ZGZhNzAwMWZkOTEyMjY5MmY0MDc0NmE=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-16T19:09:53Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-16T19:09:53Z"}, "message": "Don't use `mut` in Windows Mutex.", "tree": {"sha": "3c16bbc4815f5555af60eca33c512dbf7811e618", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c16bbc4815f5555af60eca33c512dbf7811e618"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fadc603ab3fba157dfa7001fd9122692f40746a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fadc603ab3fba157dfa7001fd9122692f40746a", "html_url": "https://github.com/rust-lang/rust/commit/3fadc603ab3fba157dfa7001fd9122692f40746a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fadc603ab3fba157dfa7001fd9122692f40746a/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1016deb592cec6d02e963bb3ffbfbb2c4f9309b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1016deb592cec6d02e963bb3ffbfbb2c4f9309b8", "html_url": "https://github.com/rust-lang/rust/commit/1016deb592cec6d02e963bb3ffbfbb2c4f9309b8"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "518f8e0f711f0d8e609e729a4098dec591b2283f", "filename": "library/std/src/sys/windows/mutex.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3fadc603ab3fba157dfa7001fd9122692f40746a/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fadc603ab3fba157dfa7001fd9122692f40746a/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmutex.rs?ref=3fadc603ab3fba157dfa7001fd9122692f40746a", "patch": "@@ -64,7 +64,7 @@ impl Mutex {\n         match kind() {\n             Kind::SRWLock => c::AcquireSRWLockExclusive(raw(self)),\n             Kind::CriticalSection => {\n-                let inner = &mut *self.inner();\n+                let inner = &*self.inner();\n                 inner.remutex.lock();\n                 if inner.held.replace(true) {\n                     // It was already locked, so we got a recursive lock which we do not want.\n@@ -78,7 +78,7 @@ impl Mutex {\n         match kind() {\n             Kind::SRWLock => c::TryAcquireSRWLockExclusive(raw(self)) != 0,\n             Kind::CriticalSection => {\n-                let inner = &mut *self.inner();\n+                let inner = &*self.inner();\n                 if !inner.remutex.try_lock() {\n                     false\n                 } else if inner.held.replace(true) {\n@@ -95,7 +95,7 @@ impl Mutex {\n         match kind() {\n             Kind::SRWLock => c::ReleaseSRWLockExclusive(raw(self)),\n             Kind::CriticalSection => {\n-                let inner = &mut *(self.lock.load(Ordering::SeqCst) as *mut Inner);\n+                let inner = &*(self.lock.load(Ordering::SeqCst) as *const Inner);\n                 inner.held.set(false);\n                 inner.remutex.unlock();\n             }\n@@ -106,17 +106,15 @@ impl Mutex {\n             Kind::SRWLock => {}\n             Kind::CriticalSection => match self.lock.load(Ordering::SeqCst) {\n                 0 => {}\n-                n => {\n-                    Box::from_raw(n as *mut Inner).remutex.destroy();\n-                }\n+                n => Box::from_raw(n as *mut Inner).remutex.destroy(),\n             },\n         }\n     }\n \n-    unsafe fn inner(&self) -> *mut Inner {\n+    unsafe fn inner(&self) -> *const Inner {\n         match self.lock.load(Ordering::SeqCst) {\n             0 => {}\n-            n => return n as *mut _,\n+            n => return n as *const _,\n         }\n         let inner = box Inner { remutex: ReentrantMutex::uninitialized(), held: Cell::new(false) };\n         inner.remutex.init();\n@@ -125,7 +123,7 @@ impl Mutex {\n             0 => inner,\n             n => {\n                 Box::from_raw(inner).remutex.destroy();\n-                n as *mut _\n+                n as *const _\n             }\n         }\n     }"}]}