{"sha": "158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1OGQ3YTE5YjNmMzliY2RmM2M4ZDcwOTRmZGE4ZjBkZDZlMTIxYjU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-09T15:18:40Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-22T14:18:20Z"}, "message": "rustc: move the method and vtable maps into ty::ctxt.", "tree": {"sha": "3d538e329daad724dbbe2b3a99d86aaa82627617", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d538e329daad724dbbe2b3a99d86aaa82627617"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "html_url": "https://github.com/rust-lang/rust/commit/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c46c7607a44d047f87e52fca66865b31a4f43b99", "url": "https://api.github.com/repos/rust-lang/rust/commits/c46c7607a44d047f87e52fca66865b31a4f43b99", "html_url": "https://github.com/rust-lang/rust/commit/c46c7607a44d047f87e52fca66865b31a4f43b99"}], "stats": {"total": 296, "additions": 99, "deletions": 197}, "files": [{"sha": "450d4203bae3787e03ca54175b10d8b4b743cfd3", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "patch": "@@ -328,7 +328,7 @@ pub fn phase_3_run_analysis_passes(sess: Session,\n                             freevars, region_map, lang_items);\n \n     // passes are timed inside typeck\n-    let (method_map, vtable_map) = typeck::check_crate(&ty_cx, trait_map, krate);\n+    typeck::check_crate(&ty_cx, trait_map, krate);\n \n     time(time_passes, \"check static items\", (), |_|\n          middle::check_static::check_crate(&ty_cx, krate));\n@@ -338,56 +338,52 @@ pub fn phase_3_run_analysis_passes(sess: Session,\n          middle::const_eval::process_crate(krate, &ty_cx));\n \n     time(time_passes, \"const checking\", (), |_|\n-         middle::check_const::check_crate(krate, def_map, method_map, &ty_cx));\n+         middle::check_const::check_crate(krate, &ty_cx));\n \n     let maps = (external_exports, last_private_map);\n     let (exported_items, public_items) =\n             time(time_passes, \"privacy checking\", maps, |(a, b)|\n-                 middle::privacy::check_crate(&ty_cx, &method_map, &exp_map2,\n-                                              a, b, krate));\n+                 middle::privacy::check_crate(&ty_cx, &exp_map2, a, b, krate));\n \n     time(time_passes, \"effect checking\", (), |_|\n-         middle::effect::check_crate(&ty_cx, method_map, krate));\n+         middle::effect::check_crate(&ty_cx, krate));\n \n     let middle::moves::MoveMaps {moves_map, moved_variables_set,\n                                  capture_map} =\n         time(time_passes, \"compute moves\", (), |_|\n-             middle::moves::compute_moves(&ty_cx, method_map, krate));\n+             middle::moves::compute_moves(&ty_cx, krate));\n \n     time(time_passes, \"match checking\", (), |_|\n-         middle::check_match::check_crate(&ty_cx, method_map,\n-                                          &moves_map, krate));\n+         middle::check_match::check_crate(&ty_cx, &moves_map, krate));\n \n     time(time_passes, \"liveness checking\", (), |_|\n-         middle::liveness::check_crate(&ty_cx, method_map,\n-                                       &capture_map, krate));\n+         middle::liveness::check_crate(&ty_cx, &capture_map, krate));\n \n     let root_map =\n         time(time_passes, \"borrow checking\", (), |_|\n-             middle::borrowck::check_crate(&ty_cx, method_map,\n-                                           &moves_map, &moved_variables_set,\n+             middle::borrowck::check_crate(&ty_cx, &moves_map,\n+                                           &moved_variables_set,\n                                            &capture_map, krate));\n \n     drop(moves_map);\n     drop(moved_variables_set);\n \n     time(time_passes, \"kind checking\", (), |_|\n-         kind::check_crate(&ty_cx, method_map, krate));\n+         kind::check_crate(&ty_cx, krate));\n \n     let reachable_map =\n         time(time_passes, \"reachability checking\", (), |_|\n-             reachable::find_reachable(&ty_cx, method_map, &exported_items));\n+             reachable::find_reachable(&ty_cx, &exported_items));\n \n     time(time_passes, \"death checking\", (), |_| {\n         middle::dead::check_crate(&ty_cx,\n-                                  method_map,\n                                   &exported_items,\n                                   &reachable_map,\n                                   krate)\n     });\n \n     time(time_passes, \"lint checking\", (), |_|\n-         lint::check_crate(&ty_cx, method_map, &exported_items, krate));\n+         lint::check_crate(&ty_cx, &exported_items, krate));\n \n     CrateAnalysis {\n         exp_map2: exp_map2,\n@@ -396,8 +392,6 @@ pub fn phase_3_run_analysis_passes(sess: Session,\n         public_items: public_items,\n         maps: astencode::Maps {\n             root_map: root_map,\n-            method_map: method_map,\n-            vtable_map: vtable_map,\n             capture_map: RefCell::new(capture_map)\n         },\n         reachable: reachable_map"}, {"sha": "0584322ef9e987c9057c0bcb489945dde7e19530", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "patch": "@@ -55,8 +55,6 @@ use writer = serialize::ebml::writer;\n // Auxiliary maps of things to be encoded\n pub struct Maps {\n     pub root_map: middle::borrowck::root_map,\n-    pub method_map: middle::typeck::MethodMap,\n-    pub vtable_map: middle::typeck::vtable_map,\n     pub capture_map: RefCell<middle::moves::CaptureMap>,\n }\n \n@@ -1052,7 +1050,7 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n     }\n \n     let method_call = MethodCall::expr(id);\n-    for &method in maps.method_map.borrow().find(&method_call).iter() {\n+    for &method in tcx.method_map.borrow().find(&method_call).iter() {\n         ebml_w.tag(c::tag_table_method_map, |ebml_w| {\n             ebml_w.id(id);\n             ebml_w.tag(c::tag_table_val, |ebml_w| {\n@@ -1061,7 +1059,7 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n         })\n     }\n \n-    for &dr in maps.vtable_map.borrow().find(&method_call).iter() {\n+    for &dr in tcx.vtable_map.borrow().find(&method_call).iter() {\n         ebml_w.tag(c::tag_table_vtable_map, |ebml_w| {\n             ebml_w.id(id);\n             ebml_w.tag(c::tag_table_val, |ebml_w| {\n@@ -1075,7 +1073,7 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n             ty::AutoDerefRef(adj) => {\n                 for autoderef in range(0, adj.autoderefs) {\n                     let method_call = MethodCall::autoderef(id, autoderef as u32);\n-                    for &method in maps.method_map.borrow().find(&method_call).iter() {\n+                    for &method in tcx.method_map.borrow().find(&method_call).iter() {\n                         ebml_w.tag(c::tag_table_method_map, |ebml_w| {\n                             ebml_w.id(id);\n                             ebml_w.tag(c::tag_table_val, |ebml_w| {\n@@ -1084,7 +1082,7 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n                         })\n                     }\n \n-                    for &dr in maps.vtable_map.borrow().find(&method_call).iter() {\n+                    for &dr in tcx.vtable_map.borrow().find(&method_call).iter() {\n                         ebml_w.tag(c::tag_table_vtable_map, |ebml_w| {\n                             ebml_w.id(id);\n                             ebml_w.tag(c::tag_table_val, |ebml_w| {\n@@ -1398,7 +1396,7 @@ fn decode_side_tables(xcx: &ExtendedDecodeContext,\n                             expr_id: id,\n                             autoderef: autoderef\n                         };\n-                        dcx.maps.method_map.borrow_mut().insert(method_call, method);\n+                        dcx.tcx.method_map.borrow_mut().insert(method_call, method);\n                     }\n                     c::tag_table_vtable_map => {\n                         let (autoderef, vtable_res) =\n@@ -1408,7 +1406,7 @@ fn decode_side_tables(xcx: &ExtendedDecodeContext,\n                             expr_id: id,\n                             autoderef: autoderef\n                         };\n-                        dcx.maps.vtable_map.borrow_mut().insert(vtable_key, vtable_res);\n+                        dcx.tcx.vtable_map.borrow_mut().insert(vtable_key, vtable_res);\n                     }\n                     c::tag_table_adjustments => {\n                         let adj: @ty::AutoAdjustment = @val_dsr.read_auto_adjustment(xcx);"}, {"sha": "848ace40d4da425c2c13c65e7a1e391821c9aff8", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "patch": "@@ -806,7 +806,7 @@ fn check_loans_in_expr<'a>(this: &mut CheckLoanCtxt<'a>,\n     this.check_for_conflicting_loans(expr.id);\n     this.check_move_out_from_expr(expr);\n \n-    let method_map = this.bccx.method_map.borrow();\n+    let method_map = this.bccx.tcx.method_map.borrow();\n     match expr.node {\n       ast::ExprPath(..) => {\n           if !this.move_data.is_assignee(expr.id) {"}, {"sha": "155f805d21746096e54f9c4b640f75c0d4c5b678", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "patch": "@@ -188,7 +188,7 @@ fn gather_loans_in_expr(this: &mut GatherLoanCtxt,\n     }\n \n     // Special checks for various kinds of expressions:\n-    let method_map = this.bccx.method_map.borrow();\n+    let method_map = this.bccx.tcx.method_map.borrow();\n     match ex.node {\n       ast::ExprAddrOf(mutbl, base) => {\n         let base_cmt = this.bccx.cat_expr(base);\n@@ -375,7 +375,7 @@ impl<'a> GatherLoanCtxt<'a> {\n     pub fn guarantee_autoderefs(&mut self,\n                                 expr: &ast::Expr,\n                                 autoderefs: uint) {\n-        let method_map = self.bccx.method_map.borrow();\n+        let method_map = self.bccx.tcx.method_map.borrow();\n         for i in range(0, autoderefs) {\n             match method_map.find(&MethodCall::autoderef(expr.id, i as u32)) {\n                 Some(method) => {"}, {"sha": "628c41fb6c5ec9d1d98191ff5e51b994ebe1b885", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 10, "deletions": 25, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "patch": "@@ -76,15 +76,13 @@ impl<'a> Visitor<()> for BorrowckCtxt<'a> {\n }\n \n pub fn check_crate(tcx: &ty::ctxt,\n-                   method_map: typeck::MethodMap,\n                    moves_map: &NodeSet,\n                    moved_variables_set: &NodeSet,\n                    capture_map: &moves::CaptureMap,\n                    krate: &ast::Crate)\n                    -> root_map {\n     let mut bccx = BorrowckCtxt {\n         tcx: tcx,\n-        method_map: method_map,\n         moves_map: moves_map,\n         moved_variables_set: moved_variables_set,\n         capture_map: capture_map,\n@@ -149,7 +147,6 @@ fn borrowck_fn(this: &mut BorrowckCtxt,\n         gather_loans::gather_loans_in_fn(this, decl, body);\n     let mut loan_dfcx =\n         DataFlowContext::new(this.tcx,\n-                             this.method_map,\n                              LoanDataFlowOperator,\n                              id_range,\n                              all_loans.len());\n@@ -161,7 +158,6 @@ fn borrowck_fn(this: &mut BorrowckCtxt,\n \n     let flowed_moves = move_data::FlowedMoveData::new(move_data,\n                                                       this.tcx,\n-                                                      this.method_map,\n                                                       id_range,\n                                                       body);\n \n@@ -176,7 +172,6 @@ fn borrowck_fn(this: &mut BorrowckCtxt,\n \n pub struct BorrowckCtxt<'a> {\n     tcx: &'a ty::ctxt,\n-    method_map: typeck::MethodMap,\n     moves_map: &'a NodeSet,\n     moved_variables_set: &'a NodeSet,\n     capture_map: &'a moves::CaptureMap,\n@@ -437,12 +432,9 @@ impl<'a> BorrowckCtxt<'a> {\n         self.moves_map.contains(&id)\n     }\n \n-    pub fn mc(&self) -> mc::MemCategorizationContext<TcxTyper<'a>> {\n+    pub fn mc(&self) -> mc::MemCategorizationContext<&'a ty::ctxt> {\n         mc::MemCategorizationContext {\n-            typer: TcxTyper {\n-                tcx: self.tcx,\n-                method_map: self.method_map\n-            }\n+            typer: self.tcx,\n         }\n     }\n \n@@ -572,8 +564,7 @@ impl<'a> BorrowckCtxt<'a> {\n             move_data::MoveExpr => {\n                 let (expr_ty, expr_span) = match self.tcx.map.find(move.id) {\n                     Some(ast_map::NodeExpr(expr)) => {\n-                        (ty::expr_ty_adjusted(self.tcx, expr,\n-                                              &*self.method_map.borrow()), expr.span)\n+                        (ty::expr_ty_adjusted(self.tcx, expr), expr.span)\n                     }\n                     r => self.tcx.sess.bug(format!(\"MoveExpr({:?}) maps to {:?}, not Expr\",\n                                                    move.id, r))\n@@ -599,8 +590,7 @@ impl<'a> BorrowckCtxt<'a> {\n             move_data::Captured => {\n                 let (expr_ty, expr_span) = match self.tcx.map.find(move.id) {\n                     Some(ast_map::NodeExpr(expr)) => {\n-                        (ty::expr_ty_adjusted(self.tcx, expr,\n-                                              &*self.method_map.borrow()), expr.span)\n+                        (ty::expr_ty_adjusted(self.tcx, expr), expr.span)\n                     }\n                     r => self.tcx.sess.bug(format!(\"Captured({:?}) maps to {:?}, not Expr\",\n                                                    move.id, r))\n@@ -915,37 +905,32 @@ impl Repr for LoanPath {\n \n ///////////////////////////////////////////////////////////////////////////\n \n-pub struct TcxTyper<'a> {\n-    tcx: &'a ty::ctxt,\n-    method_map: typeck::MethodMap,\n-}\n-\n-impl<'a> mc::Typer for TcxTyper<'a> {\n+impl<'a> mc::Typer for &'a ty::ctxt {\n     fn tcx<'a>(&'a self) -> &'a ty::ctxt {\n-        self.tcx\n+        *self\n     }\n \n     fn node_ty(&mut self, id: ast::NodeId) -> mc::McResult<ty::t> {\n-        Ok(ty::node_id_to_type(self.tcx, id))\n+        Ok(ty::node_id_to_type(*self, id))\n     }\n \n     fn node_method_ty(&self, method_call: typeck::MethodCall) -> Option<ty::t> {\n         self.method_map.borrow().find(&method_call).map(|method| method.ty)\n     }\n \n     fn adjustment(&mut self, id: ast::NodeId) -> Option<@ty::AutoAdjustment> {\n-        self.tcx.adjustments.borrow().find_copy(&id)\n+        self.adjustments.borrow().find_copy(&id)\n     }\n \n     fn is_method_call(&mut self, id: ast::NodeId) -> bool {\n         self.method_map.borrow().contains_key(&typeck::MethodCall::expr(id))\n     }\n \n     fn temporary_scope(&mut self, id: ast::NodeId) -> Option<ast::NodeId> {\n-        self.tcx.region_maps.temporary_scope(id)\n+        self.region_maps.temporary_scope(id)\n     }\n \n     fn upvar_borrow(&mut self, id: ty::UpvarId) -> ty::UpvarBorrow {\n-        self.tcx.upvar_borrow_map.borrow().get_copy(&id)\n+        self.upvar_borrow_map.borrow().get_copy(&id)\n     }\n }"}, {"sha": "b35eefcc73fb636c2baab3d0e63170971c0ca92b", "filename": "src/librustc/middle/borrowck/move_data.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs?ref=158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "patch": "@@ -22,7 +22,6 @@ use middle::borrowck::*;\n use middle::dataflow::DataFlowContext;\n use middle::dataflow::DataFlowOperator;\n use middle::ty;\n-use middle::typeck;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::codemap::Span;\n@@ -511,19 +510,16 @@ impl MoveData {\n impl<'a> FlowedMoveData<'a> {\n     pub fn new(move_data: MoveData,\n                tcx: &'a ty::ctxt,\n-               method_map: typeck::MethodMap,\n                id_range: ast_util::IdRange,\n                body: &ast::Block)\n                -> FlowedMoveData<'a> {\n         let mut dfcx_moves =\n             DataFlowContext::new(tcx,\n-                                 method_map,\n                                  MoveDataFlowOperator,\n                                  id_range,\n                                  move_data.moves.borrow().len());\n         let mut dfcx_assign =\n             DataFlowContext::new(tcx,\n-                                 method_map,\n                                  AssignDataFlowOperator,\n                                  id_range,\n                                  move_data.var_assignments.borrow().len());"}, {"sha": "6d6031ed050b65520b5dbd8ac5ab4d49a2de5543", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "patch": "@@ -21,8 +21,6 @@ use syntax::visit::Visitor;\n use syntax::visit;\n \n pub struct CheckCrateVisitor<'a> {\n-    def_map: resolve::DefMap,\n-    method_map: typeck::MethodMap,\n     tcx: &'a ty::ctxt,\n }\n \n@@ -38,24 +36,16 @@ impl<'a> Visitor<bool> for CheckCrateVisitor<'a> {\n     }\n }\n \n-pub fn check_crate(krate: &Crate,\n-                   def_map: resolve::DefMap,\n-                   method_map: typeck::MethodMap,\n-                   tcx: &ty::ctxt) {\n-    let mut v = CheckCrateVisitor {\n-        def_map: def_map,\n-        method_map: method_map,\n-        tcx: tcx,\n-    };\n-    visit::walk_crate(&mut v, krate, false);\n+pub fn check_crate(krate: &Crate, tcx: &ty::ctxt) {\n+    visit::walk_crate(&mut CheckCrateVisitor { tcx: tcx }, krate, false);\n     tcx.sess.abort_if_errors();\n }\n \n fn check_item(v: &mut CheckCrateVisitor, it: &Item, _is_const: bool) {\n     match it.node {\n         ItemStatic(_, _, ex) => {\n             v.visit_expr(ex, true);\n-            check_item_recursion(&v.tcx.sess, &v.tcx.map, v.def_map, it);\n+            check_item_recursion(&v.tcx.sess, &v.tcx.map, v.tcx.def_map, it);\n         }\n         ItemEnum(ref enum_definition, _) => {\n             for var in (*enum_definition).variants.iter() {\n@@ -103,7 +93,7 @@ fn check_expr(v: &mut CheckCrateVisitor, e: &Expr, is_const: bool) {\n           ExprLit(lit) if ast_util::lit_is_str(lit) => {}\n           ExprBinary(..) | ExprUnary(..) => {\n             let method_call = typeck::MethodCall::expr(e.id);\n-            if v.method_map.borrow().contains_key(&method_call) {\n+            if v.tcx.method_map.borrow().contains_key(&method_call) {\n                 v.tcx.sess.span_err(e.span, \"user-defined operators are not \\\n                                              allowed in constant expressions\");\n             }\n@@ -127,7 +117,7 @@ fn check_expr(v: &mut CheckCrateVisitor, e: &Expr, is_const: bool) {\n                                     \"paths in constants may only refer to \\\n                                      items without type parameters\");\n             }\n-            match v.def_map.borrow().find(&e.id) {\n+            match v.tcx.def_map.borrow().find(&e.id) {\n               Some(&DefStatic(..)) |\n               Some(&DefFn(_, _)) |\n               Some(&DefVariant(_, _, _)) |\n@@ -145,7 +135,7 @@ fn check_expr(v: &mut CheckCrateVisitor, e: &Expr, is_const: bool) {\n             }\n           }\n           ExprCall(callee, _) => {\n-            match v.def_map.borrow().find(&callee.id) {\n+            match v.tcx.def_map.borrow().find(&callee.id) {\n                 Some(&DefStruct(..)) => {}    // OK.\n                 Some(&DefVariant(..)) => {}    // OK.\n                 _ => {"}, {"sha": "12d83aa4135d20b432c2b2bd1e8e833d2d277ba1", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "patch": "@@ -15,7 +15,6 @@ use middle::const_eval::{eval_const_expr, const_val, const_bool, const_float};\n use middle::pat_util::*;\n use middle::ty::*;\n use middle::ty;\n-use middle::typeck::MethodMap;\n use util::nodemap::NodeSet;\n use util::ppaux::ty_to_str;\n \n@@ -30,7 +29,6 @@ use syntax::visit::{Visitor, FnKind};\n \n struct MatchCheckCtxt<'a> {\n     tcx: &'a ty::ctxt,\n-    method_map: MethodMap,\n     moves_map: &'a NodeSet\n }\n \n@@ -47,12 +45,10 @@ impl<'a> Visitor<()> for MatchCheckCtxt<'a> {\n }\n \n pub fn check_crate(tcx: &ty::ctxt,\n-                   method_map: MethodMap,\n                    moves_map: &NodeSet,\n                    krate: &Crate) {\n     let mut cx = MatchCheckCtxt {\n         tcx: tcx,\n-        method_map: method_map,\n         moves_map: moves_map\n     };\n "}, {"sha": "f72555de9887032dc05b49d235d7a716cf5848cc", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "patch": "@@ -15,7 +15,7 @@ use middle::astencode;\n \n use middle::ty;\n use middle::typeck::astconv;\n-use util::nodemap::{DefIdMap, FnvHashMap, NodeMap};\n+use util::nodemap::{DefIdMap, NodeMap};\n \n use syntax::ast::*;\n use syntax::parse::token::InternedString;\n@@ -128,8 +128,6 @@ pub fn lookup_variant_by_id(tcx: &ty::ctxt,\n         }\n         let maps = astencode::Maps {\n             root_map: @RefCell::new(HashMap::new()),\n-            method_map: @RefCell::new(FnvHashMap::new()),\n-            vtable_map: @RefCell::new(FnvHashMap::new()),\n             capture_map: RefCell::new(NodeMap::new())\n         };\n         let e = match csearch::maybe_get_item_ast(tcx, enum_def,\n@@ -169,8 +167,6 @@ pub fn lookup_const_by_id(tcx: &ty::ctxt, def_id: ast::DefId)\n         }\n         let maps = astencode::Maps {\n             root_map: @RefCell::new(HashMap::new()),\n-            method_map: @RefCell::new(FnvHashMap::new()),\n-            vtable_map: @RefCell::new(FnvHashMap::new()),\n             capture_map: RefCell::new(NodeMap::new())\n         };\n         let e = match csearch::maybe_get_item_ast(tcx, def_id,"}, {"sha": "742daa82ecd43ef54b1023fefa2c9c00696af949", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "patch": "@@ -32,7 +32,6 @@ use util::nodemap::NodeMap;\n #[deriving(Clone)]\n pub struct DataFlowContext<'a, O> {\n     tcx: &'a ty::ctxt,\n-    method_map: typeck::MethodMap,\n \n     /// the data flow operator\n     oper: O,\n@@ -123,7 +122,6 @@ impl<'a, O:DataFlowOperator> pprust::PpAnn for DataFlowContext<'a, O> {\n \n impl<'a, O:DataFlowOperator> DataFlowContext<'a, O> {\n     pub fn new(tcx: &'a ty::ctxt,\n-               method_map: typeck::MethodMap,\n                oper: O,\n                id_range: IdRange,\n                bits_per_id: uint) -> DataFlowContext<'a, O> {\n@@ -138,7 +136,6 @@ impl<'a, O:DataFlowOperator> DataFlowContext<'a, O> {\n \n         DataFlowContext {\n             tcx: tcx,\n-            method_map: method_map,\n             words_per_id: words_per_id,\n             nodeid_to_bitset: NodeMap::new(),\n             bits_per_id: bits_per_id,\n@@ -784,7 +781,7 @@ impl<'a, 'b, O:DataFlowOperator> PropagationContext<'a, 'b, O> {\n \n     fn is_method_call(&self, expr: &ast::Expr) -> bool {\n         let method_call = typeck::MethodCall::expr(expr.id);\n-        self.dfcx.method_map.borrow().contains_key(&method_call)\n+        self.dfcx.tcx.method_map.borrow().contains_key(&method_call)\n     }\n \n     fn reset(&mut self, bits: &mut [uint]) {"}, {"sha": "e74bef9e95ce17fefe2b9a7e3f3b79573eb145ee", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "patch": "@@ -50,18 +50,15 @@ fn should_explore(tcx: &ty::ctxt, def_id: ast::DefId) -> bool {\n \n struct MarkSymbolVisitor<'a> {\n     worklist: Vec<ast::NodeId>,\n-    method_map: typeck::MethodMap,\n     tcx: &'a ty::ctxt,\n     live_symbols: ~HashSet<ast::NodeId>,\n }\n \n impl<'a> MarkSymbolVisitor<'a> {\n     fn new(tcx: &'a ty::ctxt,\n-           method_map: typeck::MethodMap,\n            worklist: Vec<ast::NodeId>) -> MarkSymbolVisitor<'a> {\n         MarkSymbolVisitor {\n             worklist: worklist,\n-            method_map: method_map,\n             tcx: tcx,\n             live_symbols: ~HashSet::new(),\n         }\n@@ -93,7 +90,7 @@ impl<'a> MarkSymbolVisitor<'a> {\n     fn lookup_and_handle_method(&mut self, id: ast::NodeId,\n                                 span: codemap::Span) {\n         let method_call = typeck::MethodCall::expr(id);\n-        match self.method_map.borrow().find(&method_call) {\n+        match self.tcx.method_map.borrow().find(&method_call) {\n             Some(method) => {\n                 match method.origin {\n                     typeck::MethodStatic(def_id) => {\n@@ -285,14 +282,13 @@ fn create_and_seed_worklist(tcx: &ty::ctxt,\n }\n \n fn find_live(tcx: &ty::ctxt,\n-             method_map: typeck::MethodMap,\n              exported_items: &privacy::ExportedItems,\n              reachable_symbols: &NodeSet,\n              krate: &ast::Crate)\n              -> ~HashSet<ast::NodeId> {\n     let worklist = create_and_seed_worklist(tcx, exported_items,\n                                             reachable_symbols, krate);\n-    let mut symbol_visitor = MarkSymbolVisitor::new(tcx, method_map, worklist);\n+    let mut symbol_visitor = MarkSymbolVisitor::new(tcx, worklist);\n     symbol_visitor.mark_live_symbols();\n     symbol_visitor.live_symbols\n }\n@@ -406,11 +402,10 @@ impl<'a> Visitor<()> for DeadVisitor<'a> {\n }\n \n pub fn check_crate(tcx: &ty::ctxt,\n-                   method_map: typeck::MethodMap,\n                    exported_items: &privacy::ExportedItems,\n                    reachable_symbols: &NodeSet,\n                    krate: &ast::Crate) {\n-    let live_symbols = find_live(tcx, method_map, exported_items,\n+    let live_symbols = find_live(tcx, exported_items,\n                                  reachable_symbols, krate);\n     let mut visitor = DeadVisitor { tcx: tcx, live_symbols: live_symbols };\n     visit::walk_crate(&mut visitor, krate, ());"}, {"sha": "ef7c59248449d1e9099c9e7d42402c7855725400", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "patch": "@@ -12,7 +12,7 @@\n /// `unsafe`.\n \n use middle::ty;\n-use middle::typeck::{MethodCall, MethodMap};\n+use middle::typeck::MethodCall;\n use util::ppaux;\n \n use syntax::ast;\n@@ -38,8 +38,6 @@ fn type_is_unsafe_function(ty: ty::t) -> bool {\n struct EffectCheckVisitor<'a> {\n     tcx: &'a ty::ctxt,\n \n-    /// The method map.\n-    method_map: MethodMap,\n     /// Whether we're in an unsafe context.\n     unsafe_context: UnsafeContext,\n }\n@@ -138,7 +136,7 @@ impl<'a> Visitor<()> for EffectCheckVisitor<'a> {\n         match expr.node {\n             ast::ExprMethodCall(_, _, _) => {\n                 let method_call = MethodCall::expr(expr.id);\n-                let base_type = self.method_map.borrow().get(&method_call).ty;\n+                let base_type = self.tcx.method_map.borrow().get(&method_call).ty;\n                 debug!(\"effect: method call case, base type is {}\",\n                        ppaux::ty_to_str(self.tcx, base_type));\n                 if type_is_unsafe_function(base_type) {\n@@ -190,10 +188,9 @@ impl<'a> Visitor<()> for EffectCheckVisitor<'a> {\n     }\n }\n \n-pub fn check_crate(tcx: &ty::ctxt, method_map: MethodMap, krate: &ast::Crate) {\n+pub fn check_crate(tcx: &ty::ctxt, krate: &ast::Crate) {\n     let mut visitor = EffectCheckVisitor {\n         tcx: tcx,\n-        method_map: method_map,\n         unsafe_context: SafeContext,\n     };\n "}, {"sha": "613251df19e9167512cd13569b1be6f9ee1a2415", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "patch": "@@ -47,7 +47,6 @@ use syntax::visit::Visitor;\n #[deriving(Clone)]\n pub struct Context<'a> {\n     tcx: &'a ty::ctxt,\n-    method_map: typeck::MethodMap,\n }\n \n impl<'a> Visitor<()> for Context<'a> {\n@@ -70,11 +69,9 @@ impl<'a> Visitor<()> for Context<'a> {\n }\n \n pub fn check_crate(tcx: &ty::ctxt,\n-                   method_map: typeck::MethodMap,\n                    krate: &Crate) {\n     let mut ctx = Context {\n         tcx: tcx,\n-        method_map: method_map,\n     };\n     visit::walk_crate(&mut ctx, krate, ());\n     tcx.sess.abort_if_errors();\n@@ -240,7 +237,7 @@ pub fn check_expr(cx: &mut Context, e: &Expr) {\n \n     // Handle any kind bounds on type parameters\n     {\n-        let method_map = cx.method_map.borrow();\n+        let method_map = cx.tcx.method_map.borrow();\n         let method = method_map.find(&typeck::MethodCall::expr(e.id));\n         let node_type_substs = cx.tcx.node_type_substs.borrow();\n         let r = match method {\n@@ -312,8 +309,7 @@ pub fn check_expr(cx: &mut Context, e: &Expr) {\n             match **adjustment {\n                 ty::AutoObject(..) => {\n                     let source_ty = ty::expr_ty(cx.tcx, e);\n-                    let target_ty = ty::expr_ty_adjusted(cx.tcx, e,\n-                                                         &*cx.method_map.borrow());\n+                    let target_ty = ty::expr_ty_adjusted(cx.tcx, e);\n                     check_trait_cast(cx, source_ty, target_ty, e.span);\n                 }\n                 ty::AutoAddEnv(..) |"}, {"sha": "3707c60ebe02ff579c9e8acd4687ee3f2cb461dd", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "patch": "@@ -437,9 +437,6 @@ struct Context<'a> {\n     cur: SmallIntMap<(level, LintSource)>,\n     // context we're checking in (used to access fields like sess)\n     tcx: &'a ty::ctxt,\n-    // maps from an expression id that corresponds to a method call to the\n-    // details of the method to be invoked\n-    method_map: typeck::MethodMap,\n     // Items exported by the crate; used by the missing_doc lint.\n     exported_items: &'a privacy::ExportedItems,\n     // The id of the current `ast::StructDef` being walked.\n@@ -1537,7 +1534,7 @@ fn check_stability(cx: &Context, e: &ast::Expr) {\n         }\n         ast::ExprMethodCall(..) => {\n             let method_call = typeck::MethodCall::expr(e.id);\n-            match cx.method_map.borrow().find(&method_call) {\n+            match cx.tcx.method_map.borrow().find(&method_call) {\n                 Some(method) => {\n                     match method.origin {\n                         typeck::MethodStatic(def_id) => {\n@@ -1775,14 +1772,12 @@ impl<'a> IdVisitingOperation for Context<'a> {\n }\n \n pub fn check_crate(tcx: &ty::ctxt,\n-                   method_map: typeck::MethodMap,\n                    exported_items: &privacy::ExportedItems,\n                    krate: &ast::Crate) {\n     let mut cx = Context {\n         dict: @get_lint_dict(),\n         cur: SmallIntMap::new(),\n         tcx: tcx,\n-        method_map: method_map,\n         exported_items: exported_items,\n         cur_struct_def_id: -1,\n         is_doc_hidden: false,"}, {"sha": "32d2a8f9c8f1cff4c86139546d41d395f7f7661e", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "patch": "@@ -106,7 +106,6 @@\n use middle::lint::{UnusedVariable, DeadAssignment};\n use middle::pat_util;\n use middle::ty;\n-use middle::typeck;\n use middle::moves;\n use util::nodemap::NodeMap;\n \n@@ -171,10 +170,9 @@ impl<'a> Visitor<()> for IrMaps<'a> {\n }\n \n pub fn check_crate(tcx: &ty::ctxt,\n-                   method_map: typeck::MethodMap,\n                    capture_map: &moves::CaptureMap,\n                    krate: &Crate) {\n-    visit::walk_crate(&mut IrMaps(tcx, method_map, capture_map), krate, ());\n+    visit::walk_crate(&mut IrMaps(tcx, capture_map), krate, ());\n     tcx.sess.abort_if_errors();\n }\n \n@@ -247,7 +245,6 @@ enum VarKind {\n \n struct IrMaps<'a> {\n     tcx: &'a ty::ctxt,\n-    method_map: typeck::MethodMap,\n     capture_map: &'a moves::CaptureMap,\n \n     num_live_nodes: uint,\n@@ -260,12 +257,10 @@ struct IrMaps<'a> {\n }\n \n fn IrMaps<'a>(tcx: &'a ty::ctxt,\n-              method_map: typeck::MethodMap,\n               capture_map: &'a moves::CaptureMap)\n               -> IrMaps<'a> {\n     IrMaps {\n         tcx: tcx,\n-        method_map: method_map,\n         capture_map: capture_map,\n         num_live_nodes: 0,\n         num_vars: 0,\n@@ -366,7 +361,7 @@ fn visit_fn(ir: &mut IrMaps,\n     let _i = ::util::common::indenter();\n \n     // swap in a new set of IR maps for this function body:\n-    let mut fn_maps = IrMaps(ir.tcx, ir.method_map, ir.capture_map);\n+    let mut fn_maps = IrMaps(ir.tcx, ir.capture_map);\n \n     unsafe {\n         debug!(\"creating fn_maps: {}\", transmute::<&IrMaps, *IrMaps>(&fn_maps));"}, {"sha": "5d63a05e560688d021883f4e5ac045f7c8eed92a", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "patch": "@@ -130,7 +130,7 @@ and so on.\n use middle::pat_util::{pat_bindings};\n use middle::freevars;\n use middle::ty;\n-use middle::typeck::{MethodCall, MethodMap};\n+use middle::typeck::MethodCall;\n use util::ppaux;\n use util::ppaux::Repr;\n use util::common::indenter;\n@@ -177,7 +177,6 @@ pub struct MoveMaps {\n #[deriving(Clone)]\n struct VisitContext<'a> {\n     tcx: &'a ty::ctxt,\n-    method_map: MethodMap,\n     move_maps: MoveMaps\n }\n \n@@ -202,13 +201,9 @@ impl<'a> visit::Visitor<()> for VisitContext<'a> {\n     fn visit_ty(&mut self, _t: &Ty, _: ()) {}\n }\n \n-pub fn compute_moves(tcx: &ty::ctxt,\n-                     method_map: MethodMap,\n-                     krate: &Crate) -> MoveMaps\n-{\n+pub fn compute_moves(tcx: &ty::ctxt, krate: &Crate) -> MoveMaps {\n     let mut visit_cx = VisitContext {\n         tcx: tcx,\n-        method_map: method_map,\n         move_maps: MoveMaps {\n             moves_map: NodeSet::new(),\n             moved_variables_set: NodeSet::new(),\n@@ -274,8 +269,7 @@ impl<'a> VisitContext<'a> {\n         debug!(\"consume_expr(expr={})\",\n                expr.repr(self.tcx));\n \n-        let expr_ty = ty::expr_ty_adjusted(self.tcx, expr,\n-                                           &*self.method_map.borrow());\n+        let expr_ty = ty::expr_ty_adjusted(self.tcx, expr);\n         if ty::type_moves_by_default(self.tcx, expr_ty) {\n             self.move_maps.moves_map.insert(expr.id);\n             self.use_expr(expr, Move);\n@@ -577,7 +571,7 @@ impl<'a> VisitContext<'a> {\n                                    arg_exprs: &[@Expr])\n                                    -> bool {\n         let method_call = MethodCall::expr(expr.id);\n-        if !self.method_map.borrow().contains_key(&method_call) {\n+        if !self.tcx.method_map.borrow().contains_key(&method_call) {\n             return false;\n         }\n "}, {"sha": "4877bfc5cce6a503ab2a26975fe65636d33d2e8a", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "patch": "@@ -337,7 +337,6 @@ struct PrivacyVisitor<'a> {\n     curitem: ast::NodeId,\n     in_fn: bool,\n     in_foreign: bool,\n-    method_map: &'a MethodMap,\n     parents: NodeMap<ast::NodeId>,\n     external_exports: resolve::ExternalExports,\n     last_private_map: resolve::LastPrivateMap,\n@@ -775,8 +774,7 @@ impl<'a> Visitor<()> for PrivacyVisitor<'a> {\n     fn visit_expr(&mut self, expr: &ast::Expr, _: ()) {\n         match expr.node {\n             ast::ExprField(base, ident, _) => {\n-                match ty::get(ty::expr_ty_adjusted(self.tcx, base,\n-                                                   &*self.method_map.borrow())).sty {\n+                match ty::get(ty::expr_ty_adjusted(self.tcx, base)).sty {\n                     ty::ty_struct(id, _) => {\n                         self.check_field(expr.span, id, NamedField(ident));\n                     }\n@@ -785,7 +783,7 @@ impl<'a> Visitor<()> for PrivacyVisitor<'a> {\n             }\n             ast::ExprMethodCall(ident, _, _) => {\n                 let method_call = MethodCall::expr(expr.id);\n-                match self.method_map.borrow().find(&method_call) {\n+                match self.tcx.method_map.borrow().find(&method_call) {\n                     None => {\n                         self.tcx.sess.span_bug(expr.span,\n                                                 \"method call not in \\\n@@ -1404,7 +1402,6 @@ impl<'a> Visitor<()> for VisiblePrivateTypesVisitor<'a> {\n }\n \n pub fn check_crate(tcx: &ty::ctxt,\n-                   method_map: &MethodMap,\n                    exp_map2: &resolve::ExportMap2,\n                    external_exports: resolve::ExternalExports,\n                    last_private_map: resolve::LastPrivateMap,\n@@ -1423,7 +1420,6 @@ pub fn check_crate(tcx: &ty::ctxt,\n         in_foreign: false,\n         tcx: tcx,\n         parents: visitor.parents,\n-        method_map: method_map,\n         external_exports: external_exports,\n         last_private_map: last_private_map,\n     };"}, {"sha": "6e2edb4e8b2aefdbd1126dede1b9172dee707a90", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "patch": "@@ -84,9 +84,6 @@ fn method_might_be_inlined(tcx: &ty::ctxt, method: &ast::Method,\n struct ReachableContext<'a> {\n     // The type context.\n     tcx: &'a ty::ctxt,\n-    // The method map, which links node IDs of method call expressions to the\n-    // methods they've been resolved to.\n-    method_map: typeck::MethodMap,\n     // The set of items which must be exported in the linkage sense.\n     reachable_symbols: NodeSet,\n     // A worklist of item IDs. Each item ID in this worklist will be inlined\n@@ -133,7 +130,7 @@ impl<'a> Visitor<()> for ReachableContext<'a> {\n             }\n             ast::ExprMethodCall(..) => {\n                 let method_call = typeck::MethodCall::expr(expr.id);\n-                match self.method_map.borrow().get(&method_call).origin {\n+                match self.tcx.method_map.borrow().get(&method_call).origin {\n                     typeck::MethodStatic(def_id) => {\n                         if is_local(def_id) {\n                             if self.def_id_represents_local_inlined_item(def_id) {\n@@ -159,10 +156,9 @@ impl<'a> Visitor<()> for ReachableContext<'a> {\n \n impl<'a> ReachableContext<'a> {\n     // Creates a new reachability computation context.\n-    fn new(tcx: &'a ty::ctxt, method_map: typeck::MethodMap) -> ReachableContext<'a> {\n+    fn new(tcx: &'a ty::ctxt) -> ReachableContext<'a> {\n         ReachableContext {\n             tcx: tcx,\n-            method_map: method_map,\n             reachable_symbols: NodeSet::new(),\n             worklist: Vec::new(),\n         }\n@@ -339,10 +335,9 @@ impl<'a> ReachableContext<'a> {\n }\n \n pub fn find_reachable(tcx: &ty::ctxt,\n-                      method_map: typeck::MethodMap,\n                       exported_items: &privacy::ExportedItems)\n                       -> NodeSet {\n-    let mut reachable_context = ReachableContext::new(tcx, method_map);\n+    let mut reachable_context = ReachableContext::new(tcx);\n \n     // Step 1: Seed the worklist with all nodes which were found to be public as\n     //         a result of the privacy pass along with all local lang items. If"}, {"sha": "7c0f81b16d1ecae97577e36802a74a76eac981a0", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "patch": "@@ -391,7 +391,7 @@ pub fn trans_fn_ref_with_vtables(\n             let ref_ty = match node {\n                 ExprId(id) => node_id_type(bcx, id),\n                 MethodCall(method_call) => {\n-                    let t = bcx.ccx().maps.method_map.borrow().get(&method_call).ty;\n+                    let t = bcx.tcx().method_map.borrow().get(&method_call).ty;\n                     monomorphize_type(bcx, t)\n                 }\n             };\n@@ -474,7 +474,7 @@ pub fn trans_method_call<'a>(\n     let _icx = push_ctxt(\"trans_method_call\");\n     debug!(\"trans_method_call(call_ex={})\", call_ex.repr(bcx.tcx()));\n     let method_call = MethodCall::expr(call_ex.id);\n-    let method_ty = bcx.ccx().maps.method_map.borrow().get(&method_call).ty;\n+    let method_ty = bcx.tcx().method_map.borrow().get(&method_call).ty;\n     trans_call_inner(\n         bcx,\n         Some(common::expr_info(call_ex)),"}, {"sha": "66e0a35d63837e4153cdf1e6ebed6ff54bd213bb", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "patch": "@@ -754,9 +754,7 @@ pub fn expr_ty(bcx: &Block, ex: &ast::Expr) -> ty::t {\n }\n \n pub fn expr_ty_adjusted(bcx: &Block, ex: &ast::Expr) -> ty::t {\n-    let tcx = bcx.tcx();\n-    let t = ty::expr_ty_adjusted(tcx, ex, &*bcx.ccx().maps.method_map.borrow());\n-    monomorphize_type(bcx, t)\n+    monomorphize_type(bcx, ty::expr_ty_adjusted(bcx.tcx(), ex))\n }\n \n // Key used to lookup values supplied for type parameters in an expr.\n@@ -774,7 +772,7 @@ pub fn node_id_type_params(bcx: &Block, node: ExprOrMethodCall) -> Vec<ty::t> {\n     let params = match node {\n         ExprId(id) => ty::node_id_to_type_params(tcx, id),\n         MethodCall(method_call) => {\n-            bcx.ccx().maps.method_map.borrow().get(&method_call).substs.tps.clone()\n+            tcx.method_map.borrow().get(&method_call).substs.tps.clone()\n         }\n     };\n \n@@ -799,7 +797,7 @@ pub fn node_id_type_params(bcx: &Block, node: ExprOrMethodCall) -> Vec<ty::t> {\n \n pub fn node_vtables(bcx: &Block, id: typeck::MethodCall)\n                  -> Option<typeck::vtable_res> {\n-    let vtable_map = bcx.ccx().maps.vtable_map.borrow();\n+    let vtable_map = bcx.tcx().vtable_map.borrow();\n     let raw_vtables = vtable_map.find(&id);\n     raw_vtables.map(|vts| resolve_vtables_in_fn_ctxt(bcx.fcx, *vts))\n }"}, {"sha": "cc9029f528643ddcf1177391aaadf59ad7053a2f", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "patch": "@@ -187,8 +187,7 @@ pub fn const_expr(cx: &CrateContext, e: &ast::Expr, is_local: bool) -> (ValueRef\n     let mut llconst = llconst;\n     let mut inlineable = inlineable;\n     let ety = ty::expr_ty(cx.tcx(), e);\n-    let ety_adjusted = ty::expr_ty_adjusted(cx.tcx(), e,\n-                                            &*cx.maps.method_map.borrow());\n+    let ety_adjusted = ty::expr_ty_adjusted(cx.tcx(), e);\n     let opt_adj = cx.tcx.adjustments.borrow().find_copy(&e.id);\n     match opt_adj {\n         None => { }\n@@ -414,8 +413,7 @@ fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr,\n             }, true)\n           }\n           ast::ExprField(base, field, _) => {\n-              let bt = ty::expr_ty_adjusted(cx.tcx(), base,\n-                                            &*cx.maps.method_map.borrow());\n+              let bt = ty::expr_ty_adjusted(cx.tcx(), base);\n               let brepr = adt::represent_type(cx, bt);\n               let (bv, inlineable) = const_expr(cx, base, is_local);\n               expr::with_field_tys(cx.tcx(), bt, None, |discr, field_tys| {\n@@ -425,8 +423,7 @@ fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr,\n           }\n \n           ast::ExprIndex(base, index) => {\n-              let bt = ty::expr_ty_adjusted(cx.tcx(), base,\n-                                            &*cx.maps.method_map.borrow());\n+              let bt = ty::expr_ty_adjusted(cx.tcx(), base);\n               let (bv, inlineable) = const_expr(cx, base, is_local);\n               let iv = match const_eval::eval_const_expr(cx.tcx(), index) {\n                   const_eval::const_int(i) => i as u64,"}, {"sha": "27b4597357212dbdf3987d02eb77c72d8d47de8e", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "patch": "@@ -118,7 +118,7 @@ pub fn trans_into<'a>(bcx: &'a Block<'a>,\n \n     bcx.fcx.push_ast_cleanup_scope(expr.id);\n \n-    let kind = ty::expr_kind(bcx.tcx(), bcx.ccx().maps.method_map, expr);\n+    let kind = ty::expr_kind(bcx.tcx(), expr);\n     bcx = match kind {\n         ty::LvalueExpr | ty::RvalueDatumExpr => {\n             trans_unadjusted(bcx, expr).store_to_dest(dest, expr.id)\n@@ -205,8 +205,7 @@ fn apply_adjustments<'a>(bcx: &'a Block<'a>,\n             };\n         }\n         AutoObject(..) => {\n-            let adjusted_ty = ty::expr_ty_adjusted(bcx.tcx(), expr,\n-                                                   &*bcx.ccx().maps.method_map.borrow());\n+            let adjusted_ty = ty::expr_ty_adjusted(bcx.tcx(), expr);\n             let scratch = rvalue_scratch_datum(bcx, adjusted_ty, \"__adjust\");\n             bcx = meth::trans_trait_cast(\n                 bcx, datum, expr.id, SaveIn(scratch.val));\n@@ -323,7 +322,7 @@ fn trans_unadjusted<'a>(bcx: &'a Block<'a>,\n \n     debuginfo::set_source_location(bcx.fcx, expr.id, expr.span);\n \n-    return match ty::expr_kind(bcx.tcx(), bcx.ccx().maps.method_map, expr) {\n+    return match ty::expr_kind(bcx.tcx(), expr) {\n         ty::LvalueExpr | ty::RvalueDatumExpr => {\n             let datum = unpack_datum!(bcx, {\n                 trans_datum_unadjusted(bcx, expr)\n@@ -1118,7 +1117,7 @@ fn trans_unary<'a>(bcx: &'a Block<'a>,\n     // Otherwise, we should be in the RvalueDpsExpr path.\n     assert!(\n         op == ast::UnDeref ||\n-        !ccx.maps.method_map.borrow().contains_key(&method_call));\n+        !ccx.tcx.method_map.borrow().contains_key(&method_call));\n \n     let un_ty = expr_ty(bcx, expr);\n \n@@ -1403,7 +1402,7 @@ fn trans_binary<'a>(bcx: &'a Block<'a>,\n     let ccx = bcx.ccx();\n \n     // if overloaded, would be RvalueDpsExpr\n-    assert!(!ccx.maps.method_map.borrow().contains_key(&MethodCall::expr(expr.id)));\n+    assert!(!ccx.tcx.method_map.borrow().contains_key(&MethodCall::expr(expr.id)));\n \n     match op {\n         ast::BiAnd => {\n@@ -1443,7 +1442,7 @@ fn trans_overloaded_op<'a, 'b>(\n                        rhs: Option<(Datum<Expr>, ast::NodeId)>,\n                        dest: Option<Dest>)\n                        -> Result<'a> {\n-    let method_ty = bcx.ccx().maps.method_map.borrow().get(&method_call).ty;\n+    let method_ty = bcx.tcx().method_map.borrow().get(&method_call).ty;\n     callee::trans_call_inner(bcx,\n                              Some(expr_info(expr)),\n                              monomorphize_type(bcx, method_ty),\n@@ -1614,7 +1613,7 @@ fn trans_assign_op<'a>(\n     debug!(\"trans_assign_op(expr={})\", bcx.expr_to_str(expr));\n \n     // User-defined operator methods cannot be used with `+=` etc right now\n-    assert!(!bcx.ccx().maps.method_map.borrow().contains_key(&MethodCall::expr(expr.id)));\n+    assert!(!bcx.tcx().method_map.borrow().contains_key(&MethodCall::expr(expr.id)));\n \n     // Evaluate LHS (destination), which should be an lvalue\n     let dst_datum = unpack_datum!(bcx, trans_to_lvalue(bcx, dst, \"assign_op\"));\n@@ -1692,7 +1691,7 @@ fn deref_once<'a>(bcx: &'a Block<'a>,\n         expr_id: expr.id,\n         autoderef: derefs as u32\n     };\n-    let method_ty = ccx.maps.method_map.borrow()\n+    let method_ty = ccx.tcx.method_map.borrow()\n                        .find(&method_call).map(|method| method.ty);\n     let datum = match method_ty {\n         Some(method_ty) => {"}, {"sha": "6ac25cd1f136eb54bfdc408a5e17b49bd9942da9", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "patch": "@@ -83,7 +83,7 @@ pub fn trans_method_callee<'a>(\n                            -> Callee<'a> {\n     let _icx = push_ctxt(\"meth::trans_method_callee\");\n \n-    let (origin, method_ty) = match bcx.ccx().maps.method_map\n+    let (origin, method_ty) = match bcx.tcx().method_map\n                                        .borrow().find(&method_call) {\n         Some(method) => {\n             debug!(\"trans_method_callee({:?}, method={})\",\n@@ -193,7 +193,7 @@ pub fn trans_static_method_callee(bcx: &Block,\n             name={}\", method_id, expr_id, token::get_name(mname));\n \n     let vtable_key = MethodCall::expr(expr_id);\n-    let vtbls = ccx.maps.vtable_map.borrow().get_copy(&vtable_key);\n+    let vtbls = ccx.tcx.vtable_map.borrow().get_copy(&vtable_key);\n     let vtbls = resolve_vtables_in_fn_ctxt(bcx.fcx, vtbls);\n \n     match vtbls.get(bound_index).get(0) {\n@@ -576,7 +576,7 @@ pub fn trans_trait_cast<'a>(bcx: &'a Block<'a>,\n     bcx = datum.store_to(bcx, llboxdest);\n \n     // Store the vtable into the second half of pair.\n-    let res = *ccx.maps.vtable_map.borrow().get(&MethodCall::expr(id));\n+    let res = *ccx.tcx.vtable_map.borrow().get(&MethodCall::expr(id));\n     let origins = *resolve_vtables_in_fn_ctxt(bcx.fcx, res).get(0);\n     let vtable = get_vtable(bcx, v_ty, origins);\n     let llvtabledest = GEPi(bcx, lldest, [0u, abi::trt_field_vtable]);"}, {"sha": "ff9ff64397aa7051c2b541c82e3c47656fec4b94", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "patch": "@@ -22,7 +22,7 @@ use middle::resolve_lifetime;\n use middle::ty;\n use middle::subst::Subst;\n use middle::typeck;\n-use middle::typeck::{MethodCall, MethodCallee, MethodMap};\n+use middle::typeck::MethodCall;\n use middle::ty_fold;\n use middle::ty_fold::TypeFolder;\n use middle;\n@@ -359,6 +359,9 @@ pub struct ctxt {\n     // and variants that are found.\n     pub extern_const_statics: RefCell<DefIdMap<Option<@ast::Expr>>>,\n     pub extern_const_variants: RefCell<DefIdMap<Option<@ast::Expr>>>,\n+\n+    pub method_map: typeck::MethodMap,\n+    pub vtable_map: typeck::vtable_map,\n }\n \n pub enum tbox_flag {\n@@ -1131,6 +1134,8 @@ pub fn mk_ctxt(s: Session,\n         upvar_borrow_map: RefCell::new(HashMap::new()),\n         extern_const_statics: RefCell::new(DefIdMap::new()),\n         extern_const_variants: RefCell::new(DefIdMap::new()),\n+        method_map: @RefCell::new(FnvHashMap::new()),\n+        vtable_map: @RefCell::new(FnvHashMap::new()),\n     }\n }\n \n@@ -2789,10 +2794,7 @@ pub fn expr_ty_opt(cx: &ctxt, expr: &ast::Expr) -> Option<t> {\n     return node_id_to_type_opt(cx, expr.id);\n }\n \n-pub fn expr_ty_adjusted(cx: &ctxt,\n-                        expr: &ast::Expr,\n-                        method_map: &FnvHashMap<MethodCall, MethodCallee>)\n-                        -> t {\n+pub fn expr_ty_adjusted(cx: &ctxt, expr: &ast::Expr) -> t {\n     /*!\n      *\n      * Returns the type of `expr`, considering any `AutoAdjustment`\n@@ -2809,7 +2811,7 @@ pub fn expr_ty_adjusted(cx: &ctxt,\n     let unadjusted_ty = expr_ty(cx, expr);\n     let adjustment = cx.adjustments.borrow().find_copy(&expr.id);\n     adjust_ty(cx, expr.span, expr.id, unadjusted_ty, adjustment, |method_call| {\n-        method_map.find(&method_call).map(|method| method.ty)\n+        cx.method_map.borrow().find(&method_call).map(|method| method.ty)\n     })\n }\n \n@@ -2856,7 +2858,7 @@ pub fn adjust_ty(cx: &ctxt,\n                  expr_id: ast::NodeId,\n                  unadjusted_ty: ty::t,\n                  adjustment: Option<@AutoAdjustment>,\n-                 method_type: |MethodCall| -> Option<ty::t>)\n+                 method_type: |typeck::MethodCall| -> Option<ty::t>)\n                  -> ty::t {\n     /*! See `expr_ty_adjusted` */\n \n@@ -2888,7 +2890,8 @@ pub fn adjust_ty(cx: &ctxt,\n \n                     if !ty::type_is_error(adjusted_ty) {\n                         for i in range(0, adj.autoderefs) {\n-                            match method_type(MethodCall::autoderef(expr_id, i as u32)) {\n+                            let method_call = typeck::MethodCall::autoderef(expr_id, i as u32);\n+                            match method_type(method_call) {\n                                 Some(method_ty) => {\n                                     adjusted_ty = ty_fn_ret(method_ty);\n                                 }\n@@ -3066,10 +3069,8 @@ pub fn resolve_expr(tcx: &ctxt, expr: &ast::Expr) -> ast::Def {\n     }\n }\n \n-pub fn expr_is_lval(tcx: &ctxt,\n-                    method_map: MethodMap,\n-                    e: &ast::Expr) -> bool {\n-    match expr_kind(tcx, method_map, e) {\n+pub fn expr_is_lval(tcx: &ctxt, e: &ast::Expr) -> bool {\n+    match expr_kind(tcx, e) {\n         LvalueExpr => true,\n         RvalueDpsExpr | RvalueDatumExpr | RvalueStmtExpr => false\n     }\n@@ -3087,10 +3088,8 @@ pub enum ExprKind {\n     RvalueStmtExpr\n }\n \n-pub fn expr_kind(tcx: &ctxt,\n-                 method_map: MethodMap,\n-                 expr: &ast::Expr) -> ExprKind {\n-    if method_map.borrow().contains_key(&MethodCall::expr(expr.id)) {\n+pub fn expr_kind(tcx: &ctxt, expr: &ast::Expr) -> ExprKind {\n+    if tcx.method_map.borrow().contains_key(&typeck::MethodCall::expr(expr.id)) {\n         // Overloaded operations are generally calls, and hence they are\n         // generated via DPS, but there are two exceptions:\n         return match expr.node {\n@@ -3234,7 +3233,7 @@ pub fn expr_kind(tcx: &ctxt,\n             }\n         }\n \n-        ast::ExprParen(e) => expr_kind(tcx, method_map, e),\n+        ast::ExprParen(e) => expr_kind(tcx, e),\n \n         ast::ExprMac(..) => {\n             tcx.sess.span_bug("}, {"sha": "476142a415f6977a57c1cb05da8726465df389a0", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "patch": "@@ -2688,7 +2688,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n         demand::suptype(fcx, expr.span, result_t, lhs_t);\n \n         let tcx = fcx.tcx();\n-        if !ty::expr_is_lval(tcx, fcx.ccx.method_map, lhs) {\n+        if !ty::expr_is_lval(tcx, lhs) {\n             tcx.sess.span_err(lhs.span, \"illegal left-hand side expression\");\n         }\n \n@@ -2865,7 +2865,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n         check_expr_with_lvalue_pref(fcx, lhs, PreferMutLvalue);\n \n         let tcx = fcx.tcx();\n-        if !ty::expr_is_lval(tcx, fcx.ccx.method_map, lhs) {\n+        if !ty::expr_is_lval(tcx, lhs) {\n             tcx.sess.span_err(lhs.span, \"illegal left-hand side expression\");\n         }\n "}, {"sha": "d7a22e91c5ea978794e235bd25c117d4fa1b6126", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "patch": "@@ -93,7 +93,7 @@ fn resolve_method_map_entry(wbcx: &mut WbCtxt, sp: Span, method_call: MethodCall\n                     self_ty: None\n                 }\n             };\n-            fcx.ccx.method_map.borrow_mut().insert(method_call, new_method);\n+            tcx.method_map.borrow_mut().insert(method_call, new_method);\n         }\n         None => {}\n     }\n@@ -104,7 +104,7 @@ fn resolve_vtable_map_entry(fcx: &FnCtxt, sp: Span, vtable_key: MethodCall) {\n     match fcx.inh.vtable_map.borrow().find_copy(&vtable_key) {\n         Some(origins) => {\n             let r_origins = resolve_origins(fcx, sp, origins);\n-            fcx.ccx.vtable_map.borrow_mut().insert(vtable_key, r_origins);\n+            fcx.tcx().vtable_map.borrow_mut().insert(vtable_key, r_origins);\n             debug!(\"writeback::resolve_vtable_map_entry(vtable_key={}, vtables={:?})\",\n                     vtable_key, r_origins.repr(fcx.tcx()));\n         }"}, {"sha": "b5fdc492cb40e9effe79f34e7c7f6545b7b32649", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=158d7a19b3f39bcdf3c8d7094fda8f0dd6e121b5", "patch": "@@ -242,8 +242,6 @@ pub type impl_vtable_map = RefCell<DefIdMap<impl_res>>;\n pub struct CrateCtxt<'a> {\n     // A mapping from method call sites to traits that have that method.\n     trait_map: resolve::TraitMap,\n-    method_map: MethodMap,\n-    vtable_map: vtable_map,\n     tcx: &'a ty::ctxt\n }\n \n@@ -445,13 +443,10 @@ fn check_for_entry_fn(ccx: &CrateCtxt) {\n \n pub fn check_crate(tcx: &ty::ctxt,\n                    trait_map: resolve::TraitMap,\n-                   krate: &ast::Crate)\n-                -> (MethodMap, vtable_map) {\n+                   krate: &ast::Crate) {\n     let time_passes = tcx.sess.time_passes();\n     let ccx = CrateCtxt {\n         trait_map: trait_map,\n-        method_map: @RefCell::new(FnvHashMap::new()),\n-        vtable_map: @RefCell::new(FnvHashMap::new()),\n         tcx: tcx\n     };\n \n@@ -473,5 +468,4 @@ pub fn check_crate(tcx: &ty::ctxt,\n \n     check_for_entry_fn(&ccx);\n     tcx.sess.abort_if_errors();\n-    (ccx.method_map, ccx.vtable_map)\n }"}]}