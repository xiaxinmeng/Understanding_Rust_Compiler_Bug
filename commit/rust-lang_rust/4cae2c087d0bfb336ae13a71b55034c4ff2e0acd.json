{"sha": "4cae2c087d0bfb336ae13a71b55034c4ff2e0acd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjYWUyYzA4N2QwYmZiMzM2YWUxM2E3MWI1NTAzNGM0ZmYyZTBhY2Q=", "commit": {"author": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2017-12-14T17:43:27Z"}, "committer": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2017-12-17T09:13:09Z"}, "message": "Add tests with *const Rc<Self> and similar self types", "tree": {"sha": "dc528d4b6d8b9187c7ac0f838aa9f5dcd7477f58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc528d4b6d8b9187c7ac0f838aa9f5dcd7477f58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cae2c087d0bfb336ae13a71b55034c4ff2e0acd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cae2c087d0bfb336ae13a71b55034c4ff2e0acd", "html_url": "https://github.com/rust-lang/rust/commit/4cae2c087d0bfb336ae13a71b55034c4ff2e0acd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cae2c087d0bfb336ae13a71b55034c4ff2e0acd/comments", "author": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc0439b3880808e1385da4b99964d5d506f76e3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc0439b3880808e1385da4b99964d5d506f76e3f", "html_url": "https://github.com/rust-lang/rust/commit/bc0439b3880808e1385da4b99964d5d506f76e3f"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "8b6941e1c635cac5aafaaa50d7fdc08fb9c710df", "filename": "src/test/run-pass/arbitrary_self_types_raw_pointer_struct.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4cae2c087d0bfb336ae13a71b55034c4ff2e0acd/src%2Ftest%2Frun-pass%2Farbitrary_self_types_raw_pointer_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cae2c087d0bfb336ae13a71b55034c4ff2e0acd/src%2Ftest%2Frun-pass%2Farbitrary_self_types_raw_pointer_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farbitrary_self_types_raw_pointer_struct.rs?ref=4cae2c087d0bfb336ae13a71b55034c4ff2e0acd", "patch": "@@ -10,15 +10,28 @@\n \n #![feature(arbitrary_self_types)]\n \n+use std::rc::Rc;\n+\n struct Foo(String);\n \n impl Foo {\n     unsafe fn foo(self: *const Self) -> *const str {\n         (*self).0.as_ref()\n     }\n+\n+    fn complicated_1(self: *const Rc<Self>) -> &'static str {\n+        \"Foo::complicated_1\"\n+    }\n+\n+    unsafe fn complicated_2(self: Rc<*const Self>) -> *const str {\n+        (**self).0.as_ref()\n+    }\n }\n \n fn main() {\n     let foo = Foo(\"abc123\".into());\n     assert_eq!(\"abc123\", unsafe { &*(&foo as *const Foo).foo() });\n+    assert_eq!(\"Foo::complicated_1\", std::ptr::null::<Rc<Foo>>().complicated_1());\n+    let rc = Rc::new(&foo as *const Foo);\n+    assert_eq!(\"abc123\", unsafe { &*rc.complicated_2()});\n }"}, {"sha": "15b65d112781205d6b5bbfd4ee1d4ee9af7785a9", "filename": "src/test/run-pass/arbitrary_self_types_raw_pointer_trait.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4cae2c087d0bfb336ae13a71b55034c4ff2e0acd/src%2Ftest%2Frun-pass%2Farbitrary_self_types_raw_pointer_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cae2c087d0bfb336ae13a71b55034c4ff2e0acd/src%2Ftest%2Frun-pass%2Farbitrary_self_types_raw_pointer_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farbitrary_self_types_raw_pointer_trait.rs?ref=4cae2c087d0bfb336ae13a71b55034c4ff2e0acd", "patch": "@@ -16,6 +16,10 @@ trait Foo {\n     fn foo(self: *const Self) -> &'static str;\n \n     unsafe fn bar(self: *const Self) -> i64;\n+\n+    unsafe fn complicated(self: *const *const Self) -> i64 where Self: Sized {\n+        (*self).bar()\n+    }\n }\n \n impl Foo for i32 {\n@@ -39,21 +43,28 @@ impl Foo for u32 {\n }\n \n fn main() {\n-    let foo_i32 = ptr::null::<i32>() as *const Foo;\n-    let foo_u32 = ptr::null::<u32>() as *const Foo;\n+    let null_i32 = ptr::null::<i32>() as *const Foo;\n+    let null_u32 = ptr::null::<u32>() as *const Foo;\n \n-    assert_eq!(\"I'm an i32!\", foo_i32.foo());\n-    assert_eq!(\"I'm a u32!\", foo_u32.foo());\n+    assert_eq!(\"I'm an i32!\", null_i32.foo());\n+    assert_eq!(\"I'm a u32!\", null_u32.foo());\n \n     let bar_i32 = 5i32;\n     let bar_i32_thin = &bar_i32 as *const i32;\n+    assert_eq!(\"I'm an i32!\", bar_i32_thin.foo());\n     assert_eq!(5, unsafe { bar_i32_thin.bar() });\n+    assert_eq!(5, unsafe { (&bar_i32_thin as *const *const i32).complicated() });\n     let bar_i32_fat = bar_i32_thin as *const Foo;\n+    assert_eq!(\"I'm an i32!\", bar_i32_fat.foo());\n     assert_eq!(5, unsafe { bar_i32_fat.bar() });\n \n     let bar_u32 = 18u32;\n     let bar_u32_thin = &bar_u32 as *const u32;\n+    assert_eq!(\"I'm a u32!\", bar_u32_thin.foo());\n     assert_eq!(18, unsafe { bar_u32_thin.bar() });\n+    assert_eq!(18, unsafe { (&bar_u32_thin as *const *const u32).complicated() });\n     let bar_u32_fat = bar_u32_thin as *const Foo;\n+    assert_eq!(\"I'm a u32!\", bar_u32_fat.foo());\n     assert_eq!(18, unsafe { bar_u32_fat.bar() });\n+\n }"}]}