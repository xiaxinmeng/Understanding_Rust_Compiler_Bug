{"sha": "bea3f096ee5b0cc6f541fae4df21be36ae5ad1e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlYTNmMDk2ZWU1YjBjYzZmNTQxZmFlNGRmMjFiZTM2YWU1YWQxZTI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-29T05:27:51Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-29T22:36:16Z"}, "message": "Add support for arbitrary metadata for numbers and widths.\n\nThis means that each platform has total control over the formatting info\nit needs.", "tree": {"sha": "369863dbfa887c1336910bf52afae059edd159bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/369863dbfa887c1336910bf52afae059edd159bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bea3f096ee5b0cc6f541fae4df21be36ae5ad1e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bea3f096ee5b0cc6f541fae4df21be36ae5ad1e2", "html_url": "https://github.com/rust-lang/rust/commit/bea3f096ee5b0cc6f541fae4df21be36ae5ad1e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bea3f096ee5b0cc6f541fae4df21be36ae5ad1e2/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "083f61304461b48273dce6c2d11445d3166755ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/083f61304461b48273dce6c2d11445d3166755ec", "html_url": "https://github.com/rust-lang/rust/commit/083f61304461b48273dce6c2d11445d3166755ec"}], "stats": {"total": 137, "additions": 79, "deletions": 58}, "files": [{"sha": "dbccdc37d3f40eaaa9706729a94c008b4ed08a16", "filename": "src/etc/platform-intrinsics/aarch64.json", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bea3f096ee5b0cc6f541fae4df21be36ae5ad1e2/src%2Fetc%2Fplatform-intrinsics%2Faarch64.json", "raw_url": "https://github.com/rust-lang/rust/raw/bea3f096ee5b0cc6f541fae4df21be36ae5ad1e2/src%2Fetc%2Fplatform-intrinsics%2Faarch64.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Faarch64.json?ref=bea3f096ee5b0cc6f541fae4df21be36ae5ad1e2", "patch": "@@ -16,9 +16,9 @@\n             \"data_type\": { \"pattern\": \"f{bitwidth}\" }\n         }\n     },\n-    \"widths\": {\n-        \"64\": \"\",\n-        \"128\": \"q\"\n+    \"width_info\": {\n+        \"64\": { \"width\": \"\" },\n+        \"128\": { \"width\": \"q\" }\n     },\n     \"intrinsics\": [\n         {"}, {"sha": "29f69b4e7a535fe0096cf7cba3c643c5017b7e7f", "filename": "src/etc/platform-intrinsics/arm.json", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bea3f096ee5b0cc6f541fae4df21be36ae5ad1e2/src%2Fetc%2Fplatform-intrinsics%2Farm.json", "raw_url": "https://github.com/rust-lang/rust/raw/bea3f096ee5b0cc6f541fae4df21be36ae5ad1e2/src%2Fetc%2Fplatform-intrinsics%2Farm.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Farm.json?ref=bea3f096ee5b0cc6f541fae4df21be36ae5ad1e2", "patch": "@@ -16,9 +16,9 @@\n             \"data_type\": { \"pattern\": \"f{bitwidth}\" }\n         }\n     },\n-    \"widths\": {\n-        \"64\": \"\",\n-        \"128\": \"q\"\n+    \"width_info\": {\n+        \"64\": { \"width\": \"\" },\n+        \"128\": { \"width\": \"q\" }\n     },\n     \"intrinsics\": [\n         {"}, {"sha": "d87d74cb6c2590e268895709c74dd26e9eb9aa56", "filename": "src/etc/platform-intrinsics/generator.py", "status": "modified", "additions": 73, "deletions": 52, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/bea3f096ee5b0cc6f541fae4df21be36ae5ad1e2/src%2Fetc%2Fplatform-intrinsics%2Fgenerator.py", "raw_url": "https://github.com/rust-lang/rust/raw/bea3f096ee5b0cc6f541fae4df21be36ae5ad1e2/src%2Fetc%2Fplatform-intrinsics%2Fgenerator.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fgenerator.py?ref=bea3f096ee5b0cc6f541fae4df21be36ae5ad1e2", "patch": "@@ -20,51 +20,59 @@\n     r'|(?P<reference>\\d+)(?P<modifiers>[vShdnwus]*)(?P<force_width>x\\d+)?)$'\n )\n \n-class IntrinsicSet(object):\n+class PlatformInfo(object):\n     def __init__(self, json):\n         self._platform = json['platform']\n         self._intrinsic_prefix = json['intrinsic_prefix']\n+    def intrinsic_prefix(self):\n+        return self._intrinsic_prefix\n+\n+\n+class IntrinsicSet(object):\n+    def __init__(self, platform, json):\n         self._llvm_prefix = json['llvm_prefix']\n-        self._intrinsics = json['intrinsics']\n         self._type_info = json['number_info']\n-        self._widths = json['widths']\n+        self._intrinsics = json['intrinsics']\n+        self._widths = json['width_info']\n+        self._platform = platform\n \n     def intrinsics(self):\n         for raw in self._intrinsics:\n             yield GenericIntrinsic(self,\n                                    raw['intrinsic'], raw['width'], raw['llvm'],\n                                    raw['ret'], raw['args'])\n+    def platform(self):\n+        return self._platform\n     def llvm_prefix(self):\n         return self._llvm_prefix\n-    def intrinsic_prefix(self):\n-        return self._intrinsic_prefix\n-\n-    def width_name(self, bitwidth):\n+    def width_info(self, bitwidth):\n         return self._widths[str(bitwidth)]\n \n     def number_type_info(self, value):\n         data = self._type_info[value.__class__.__name__.lower()]\n         bitwidth = value.bitwidth()\n-        raw_dtype = data['data_type']\n-        try:\n-            dtype = raw_dtype[str(bitwidth)]\n-        except KeyError:\n-            dtype = raw_dtype['pattern'].format(bitwidth = bitwidth)\n-        return PlatformTypeInfo(data['kind'],\n-                                dtype,\n-                                value.llvm_name())\n+        def lookup(raw):\n+            if not isinstance(raw, dict):\n+                return raw\n+\n+            try:\n+                return raw[str(bitwidth)]\n+            except KeyError:\n+                return raw['pattern'].format(bitwidth = bitwidth)\n+\n+        return PlatformTypeInfo(value.llvm_name(),\n+                                {k: lookup(v) for k, v in data.items()})\n \n class PlatformTypeInfo(object):\n-    def __init__(self, kind, data_type, llvm_name, width = None):\n-        self.kind = kind\n-        self.data_type = data_type\n+    def __init__(self, llvm_name, properties):\n+        self.properties = properties\n         self.llvm_name = llvm_name\n-        if width is not None:\n-            self.width = width\n-    def vectorize(self, length, width):\n-        return PlatformTypeInfo(self.kind, self.data_type,\n-                                'v{}{}'.format(length, self.llvm_name),\n-                                width)\n+    def __getattr__(self, name):\n+        return self.properties[name]\n+    def vectorize(self, length, width_info):\n+        props = self.properties.copy()\n+        props.update(width_info)\n+        return PlatformTypeInfo('v{}{}'.format(length, self.llvm_name), props)\n \n class Type(object):\n     def __init__(self, bitwidth):\n@@ -79,7 +87,11 @@ class Number(Type):\n     def __init__(self, bitwidth):\n         Type.__init__(self, bitwidth)\n     def modify(self, spec, width):\n-        if spec == 'w':\n+        if spec == 'u':\n+            return Unsigned(self.bitwidth())\n+        elif spec == 's':\n+            return Signed(self.bitwidth())\n+        elif spec == 'w':\n             return self.__class__(self.bitwidth() * 2)\n         elif spec == 'n':\n             return self.__class__(self.bitwidth() // 2)\n@@ -94,13 +106,6 @@ def type_info(self, platform_info):\n class Signed(Number):\n     def __init__(self, bitwidth):\n         Number.__init__(self, bitwidth)\n-    def modify(self, spec, width):\n-        if spec == 'u':\n-            return Unsigned(self.bitwidth())\n-        elif spec == 's':\n-            return Signed(self.bitwidth())\n-        else:\n-            return Number.modify(self, spec, width)\n     def compiler_ctor(self):\n         return 'i({})'.format(self.bitwidth())\n     def llvm_name(self):\n@@ -111,13 +116,6 @@ def rust_name(self):\n class Unsigned(Number):\n     def __init__(self, bitwidth):\n         Number.__init__(self, bitwidth)\n-    def modify(self, spec, width):\n-        if spec == 'u':\n-            return Unsigned(self.bitwidth())\n-        elif spec == 's':\n-            return Signed(self.bitwidth())\n-        else:\n-            return Number.modify(self, spec, width)\n     def compiler_ctor(self):\n         return 'u({})'.format(self.bitwidth())\n     def llvm_name(self):\n@@ -159,7 +157,7 @@ def rust_name(self):\n     def type_info(self, platform_info):\n         elem_info = self._elem.type_info(platform_info)\n         return elem_info.vectorize(self._length,\n-                                   platform_info.width_name(self.bitwidth()))\n+                                   platform_info.width_info(self.bitwidth()))\n \n class Aggregate(Type):\n     def __init__(self, flatten, elems):\n@@ -216,7 +214,7 @@ def enumerate(self, width):\n                             yield scalar\n                     bitwidth *= 2\n             else:\n-                print('Failed to parse: {}'.format(spec), file=sys.stderr)\n+                print('Failed to parse: `{}`'.format(spec), file=sys.stderr)\n     def resolve(self, width, zero):\n         assert len(self.spec) == 1\n         spec = self.spec[0]\n@@ -257,7 +255,8 @@ def __init__(self, platform, intrinsic, widths, llvm_name, ret, args):\n \n     def monomorphise(self):\n         for width in self.widths:\n-            assert width in (64, 128)\n+            # must be a power of two\n+            assert width & (width - 1) == 0\n             for ret in self.ret.enumerate(width):\n                 args = [arg.resolve(width, ret) for arg in self.args]\n                 yield MonomorphicIntrinsic(self._platform, self.intrinsic, width, self.llvm_name,\n@@ -283,7 +282,7 @@ def intrinsic_suffix(self):\n                                       *self._args,\n                                       width = self._width)\n     def intrinsic_name(self):\n-        return self._platform.intrinsic_prefix() + self.intrinsic_suffix()\n+        return self._platform.platform().intrinsic_prefix() + self.intrinsic_suffix()\n     def compiler_args(self):\n         return ', '.join(arg.compiler_ctor() for arg in self._args_raw)\n     def compiler_ret(self):\n@@ -294,7 +293,7 @@ def intrinsic_signature(self):\n         names = 'xyzwabcdef'\n         return '({}) -> {}'.format(', '.join('{}: {}'.format(name, arg.rust_name())\n                                              for name, arg in zip(names, self._args_raw)),\n-                                   self._ret.rust_name())\n+                                   self._ret_raw.rust_name())\n \n def parse_args():\n     parser = argparse.ArgumentParser(\n@@ -400,8 +399,11 @@ def parse_args():\n                         help = 'Output format.')\n     parser.add_argument('-o', '--out', type=argparse.FileType('w'), default=sys.stdout,\n                         help = 'File to output to (default stdout).')\n-    parser.add_argument('in_', metavar=\"FILE\", type=argparse.FileType('r'),\n-                        help = 'JSON file to load')\n+    parser.add_argument('-i', '--info', type=argparse.FileType('r'),\n+                        help = 'File containing platform specific information to merge into'\n+                                'the input files\\' header.')\n+    parser.add_argument('in_', metavar=\"FILE\", type=argparse.FileType('r'), nargs='+',\n+                        help = 'JSON files to load')\n     return parser.parse_args()\n \n \n@@ -466,16 +468,35 @@ def close(self):\n \n def main():\n     args = parse_args()\n-    in_ = args.in_\n+    ins = args.in_\n     out = args.out\n     out_format = FORMATS[args.format]\n+    info = args.info\n+    one_file_no_info = False\n+    if len(ins) > 1 and info is None:\n+        print('error: cannot have multiple inputs without an info header.', file=sys.stderr)\n+        sys.exit(1)\n \n-    intrinsics = IntrinsicSet(json.load(in_))\n+    elif info is None:\n+        info = ins[0]\n+        one_file_no_info = True\n+    info_json = json.load(info)\n+    platform = PlatformInfo(info_json)\n+\n+    print(out_format.open(platform), file=out)\n+\n+    for in_ in ins:\n+\n+        if one_file_no_info:\n+            data = info_json\n+        else:\n+            data = json.load(in_)\n+            data.update(info_json)\n \n-    print(out_format.open(intrinsics), file=out)\n-    for intr in intrinsics.intrinsics():\n-        for mono in intr.monomorphise():\n-            print(out_format.render(mono), file=out)\n+        intrinsics = IntrinsicSet(platform, data)\n+        for intr in intrinsics.intrinsics():\n+            for mono in intr.monomorphise():\n+                print(out_format.render(mono), file=out)\n     print(out_format.close(), file=out)\n \n if __name__ == '__main__':"}]}