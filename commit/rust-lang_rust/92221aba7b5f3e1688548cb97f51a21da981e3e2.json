{"sha": "92221aba7b5f3e1688548cb97f51a21da981e3e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMjIxYWJhN2I1ZjNlMTY4ODU0OGNiOTdmNTFhMjFkYTk4MWUzZTI=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-06-07T20:38:24Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-06-08T00:48:54Z"}, "message": "Fix PartialEq documentation with regards to floats\n\nIt is in fact the case that `NaN != NaN`. The true relations for\ncompareQuietNotEqual are LT, GT *and* UN.\n\nI also rephrased the docs for PartialOrd since floats are not the only\ntypes which are not totally ordered.", "tree": {"sha": "0c42bafef92b7993ad095f873f5e5f7f36091d4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c42bafef92b7993ad095f873f5e5f7f36091d4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92221aba7b5f3e1688548cb97f51a21da981e3e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92221aba7b5f3e1688548cb97f51a21da981e3e2", "html_url": "https://github.com/rust-lang/rust/commit/92221aba7b5f3e1688548cb97f51a21da981e3e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92221aba7b5f3e1688548cb97f51a21da981e3e2/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffdb881337911e65f25dba2dc6e67aed29ffa4cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffdb881337911e65f25dba2dc6e67aed29ffa4cc", "html_url": "https://github.com/rust-lang/rust/commit/ffdb881337911e65f25dba2dc6e67aed29ffa4cc"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "5c3e891a2f8fbd029db0c38a4c34a2062d791e9a", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/92221aba7b5f3e1688548cb97f51a21da981e3e2/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92221aba7b5f3e1688548cb97f51a21da981e3e2/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=92221aba7b5f3e1688548cb97f51a21da981e3e2", "patch": "@@ -39,13 +39,12 @@\n \n /// Trait for values that can be compared for equality and inequality.\n ///\n-/// This trait allows partial equality, where types can be unordered instead of\n-/// strictly equal or unequal. For example, with the built-in floating-point\n-/// types `a == b` and `a != b` will both evaluate to false if either `a` or\n-/// `b` is NaN (cf. IEEE 754-2008 section 5.11).\n+/// This trait allows for partial equality, for types that do not have an\n+/// equivalence relation. For example, in floating point numbers `NaN != NaN`,\n+/// so floating point types implement `PartialEq` but not `Eq`.\n ///\n-/// PartialEq only requires the `eq` method to be implemented; `ne` is its negation by\n-/// default.\n+/// PartialEq only requires the `eq` method to be implemented; `ne` is its\n+/// negation by default.\n ///\n /// Eventually, this will be implemented by default for types that implement\n /// `Eq`.\n@@ -147,9 +146,10 @@ pub fn lexical_ordering(o1: Ordering, o2: Ordering) -> Ordering {\n /// PartialOrd only requires implementation of the `lt` method,\n /// with the others generated from default implementations.\n ///\n-/// However it remains possible to implement the others separately,\n-/// for compatibility with floating-point NaN semantics\n-/// (cf. IEEE 754-2008 section 5.11).\n+/// However it remains possible to implement the others separately for types\n+/// which do not have a total order. For example, for floating point numbers,\n+/// `NaN < 0 == false` and `NaN >= 0 == false` (cf. IEEE 754-2008 section\n+/// 5.11).\n #[lang=\"ord\"]\n pub trait PartialOrd: PartialEq {\n     /// This method tests less than (for `self` and `other`) and is used by the `<` operator."}]}