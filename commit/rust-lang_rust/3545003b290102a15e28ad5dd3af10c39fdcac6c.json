{"sha": "3545003b290102a15e28ad5dd3af10c39fdcac6c", "node_id": "C_kwDOAAsO6NoAKDM1NDUwMDNiMjkwMTAyYTE1ZTI4YWQ1ZGQzYWYxMGMzOWZkY2FjNmM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-19T13:50:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-19T13:50:24Z"}, "message": "Rollup merge of #93858 - krallin:process-process_group, r=dtolnay\n\nAdd a `process_group` method to UNIX `CommandExt`\n\n- Tracking issue: #93857\n- RFC: https://github.com/rust-lang/rfcs/pull/3228\n\nAdd a `process_group` method to `std::os::unix::process::CommandExt` that\nallows setting the process group id (i.e. calling `setpgid`) in the child, thus\nenabling users to set process groups while leveraging the `posix_spawn` fast\npath.", "tree": {"sha": "727ba9514119953c40b9c8f3c4ac32fbbccc3c88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/727ba9514119953c40b9c8f3c4ac32fbbccc3c88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3545003b290102a15e28ad5dd3af10c39fdcac6c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiNd+gCRBK7hj4Ov3rIwAAKLYIAIV1reaDnc9iDEZZrzCSsalJ\nZDt3Gv1nv4kk10Q6eaTAQZA3zLu5IW2H/czNqQsXoS3QzjywF1M47L2E781Cd5T/\nWNDzxl26ESkY/NoNDyDfKD5741fwWN36/E9LF6lF0PEvQ3/AK7auLP0/+3SdqioE\nxIhlI0mMlK5xTHCN8SGGPyQXYLdwKKGVWG/spSE3cq2AsXlGis+ldyg3BMkX7NDc\nU/hXFpPX+Eqade/JchBw7z8fRbbMD2ZzvOnJdY4TO1WK0KV4BzPkZpW/TvMIx4hm\n5Ch2Ineo2tM4kaBkj86rpiYKWwzfPK+umOJ4CBMJ4tRNTnPnr3UiBkpC/TROrGo=\n=udOe\n-----END PGP SIGNATURE-----\n", "payload": "tree 727ba9514119953c40b9c8f3c4ac32fbbccc3c88\nparent 31535841701e0bf7ef33998024376f2cedd8b3e3\nparent b628497b7cf8235a7f74fa037e86051fa78b5188\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1647697824 +0100\ncommitter GitHub <noreply@github.com> 1647697824 +0100\n\nRollup merge of #93858 - krallin:process-process_group, r=dtolnay\n\nAdd a `process_group` method to UNIX `CommandExt`\n\n- Tracking issue: #93857\n- RFC: https://github.com/rust-lang/rfcs/pull/3228\n\nAdd a `process_group` method to `std::os::unix::process::CommandExt` that\nallows setting the process group id (i.e. calling `setpgid`) in the child, thus\nenabling users to set process groups while leveraging the `posix_spawn` fast\npath.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3545003b290102a15e28ad5dd3af10c39fdcac6c", "html_url": "https://github.com/rust-lang/rust/commit/3545003b290102a15e28ad5dd3af10c39fdcac6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3545003b290102a15e28ad5dd3af10c39fdcac6c/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31535841701e0bf7ef33998024376f2cedd8b3e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/31535841701e0bf7ef33998024376f2cedd8b3e3", "html_url": "https://github.com/rust-lang/rust/commit/31535841701e0bf7ef33998024376f2cedd8b3e3"}, {"sha": "b628497b7cf8235a7f74fa037e86051fa78b5188", "url": "https://api.github.com/repos/rust-lang/rust/commits/b628497b7cf8235a7f74fa037e86051fa78b5188", "html_url": "https://github.com/rust-lang/rust/commit/b628497b7cf8235a7f74fa037e86051fa78b5188"}], "stats": {"total": 92, "additions": 90, "deletions": 2}, "files": [{"sha": "d95bc9b15c9c42b98aa9ad46de9dbb7ad921e44c", "filename": "library/std/src/os/unix/process.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3545003b290102a15e28ad5dd3af10c39fdcac6c/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3545003b290102a15e28ad5dd3af10c39fdcac6c/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs?ref=3545003b290102a15e28ad5dd3af10c39fdcac6c", "patch": "@@ -149,6 +149,11 @@ pub trait CommandExt: Sealed {\n     fn arg0<S>(&mut self, arg: S) -> &mut process::Command\n     where\n         S: AsRef<OsStr>;\n+\n+    /// Sets the process group ID of the child process. Translates to a `setpgid` call in the child\n+    /// process.\n+    #[unstable(feature = \"process_set_process_group\", issue = \"93857\")]\n+    fn process_group(&mut self, pgroup: i32) -> &mut process::Command;\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -201,6 +206,11 @@ impl CommandExt for process::Command {\n         self.as_inner_mut().set_arg_0(arg.as_ref());\n         self\n     }\n+\n+    fn process_group(&mut self, pgroup: i32) -> &mut process::Command {\n+        self.as_inner_mut().pgroup(pgroup);\n+        self\n+    }\n }\n \n /// Unix-specific extensions to [`process::ExitStatus`] and"}, {"sha": "27bee714f5b4317132db508fe916c7e194d05bc5", "filename": "library/std/src/sys/unix/process/process_common.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3545003b290102a15e28ad5dd3af10c39fdcac6c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3545003b290102a15e28ad5dd3af10c39fdcac6c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=3545003b290102a15e28ad5dd3af10c39fdcac6c", "patch": "@@ -18,7 +18,7 @@ use crate::sys_common::IntoInner;\n #[cfg(not(target_os = \"fuchsia\"))]\n use crate::sys::fs::OpenOptions;\n \n-use libc::{c_char, c_int, gid_t, uid_t, EXIT_FAILURE, EXIT_SUCCESS};\n+use libc::{c_char, c_int, gid_t, pid_t, uid_t, EXIT_FAILURE, EXIT_SUCCESS};\n \n cfg_if::cfg_if! {\n     if #[cfg(target_os = \"fuchsia\")] {\n@@ -82,6 +82,7 @@ pub struct Command {\n     stderr: Option<Stdio>,\n     #[cfg(target_os = \"linux\")]\n     create_pidfd: bool,\n+    pgroup: Option<pid_t>,\n }\n \n // Create a new type for argv, so that we can make it `Send` and `Sync`\n@@ -145,6 +146,7 @@ impl Command {\n             stdin: None,\n             stdout: None,\n             stderr: None,\n+            pgroup: None,\n         }\n     }\n \n@@ -167,6 +169,7 @@ impl Command {\n             stdout: None,\n             stderr: None,\n             create_pidfd: false,\n+            pgroup: None,\n         }\n     }\n \n@@ -202,6 +205,9 @@ impl Command {\n     pub fn groups(&mut self, groups: &[gid_t]) {\n         self.groups = Some(Box::from(groups));\n     }\n+    pub fn pgroup(&mut self, pgroup: pid_t) {\n+        self.pgroup = Some(pgroup);\n+    }\n \n     #[cfg(target_os = \"linux\")]\n     pub fn create_pidfd(&mut self, val: bool) {\n@@ -265,6 +271,10 @@ impl Command {\n     pub fn get_groups(&self) -> Option<&[gid_t]> {\n         self.groups.as_deref()\n     }\n+    #[allow(dead_code)]\n+    pub fn get_pgroup(&self) -> Option<pid_t> {\n+        self.pgroup\n+    }\n \n     pub fn get_closures(&mut self) -> &mut Vec<Box<dyn FnMut() -> io::Result<()> + Send + Sync>> {\n         &mut self.closures"}, {"sha": "9f1a645372f42b06f09552aa26244e55d415d822", "filename": "library/std/src/sys/unix/process/process_common/tests.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/3545003b290102a15e28ad5dd3af10c39fdcac6c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3545003b290102a15e28ad5dd3af10c39fdcac6c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common%2Ftests.rs?ref=3545003b290102a15e28ad5dd3af10c39fdcac6c", "patch": "@@ -67,3 +67,58 @@ fn test_process_mask() {\n         t!(cat.wait());\n     }\n }\n+\n+#[test]\n+#[cfg_attr(\n+    any(\n+        // See test_process_mask\n+        target_os = \"macos\",\n+        target_arch = \"arm\",\n+        target_arch = \"aarch64\",\n+        target_arch = \"riscv64\",\n+    ),\n+    ignore\n+)]\n+fn test_process_group_posix_spawn() {\n+    unsafe {\n+        // Spawn a cat subprocess that's just going to hang since there is no I/O.\n+        let mut cmd = Command::new(OsStr::new(\"cat\"));\n+        cmd.pgroup(0);\n+        cmd.stdin(Stdio::MakePipe);\n+        cmd.stdout(Stdio::MakePipe);\n+        let (mut cat, _pipes) = t!(cmd.spawn(Stdio::Null, true));\n+\n+        // Check that we can kill its process group, which means there *is* one.\n+        t!(cvt(libc::kill(-(cat.id() as libc::pid_t), libc::SIGINT)));\n+\n+        t!(cat.wait());\n+    }\n+}\n+\n+#[test]\n+#[cfg_attr(\n+    any(\n+        // See test_process_mask\n+        target_os = \"macos\",\n+        target_arch = \"arm\",\n+        target_arch = \"aarch64\",\n+        target_arch = \"riscv64\",\n+    ),\n+    ignore\n+)]\n+fn test_process_group_no_posix_spawn() {\n+    unsafe {\n+        // Same as above, create hang-y cat. This time, force using the non-posix_spawnp path.\n+        let mut cmd = Command::new(OsStr::new(\"cat\"));\n+        cmd.pgroup(0);\n+        cmd.pre_exec(Box::new(|| Ok(()))); // pre_exec forces fork + exec\n+        cmd.stdin(Stdio::MakePipe);\n+        cmd.stdout(Stdio::MakePipe);\n+        let (mut cat, _pipes) = t!(cmd.spawn(Stdio::Null, true));\n+\n+        // Check that we can kill its process group, which means there *is* one.\n+        t!(cvt(libc::kill(-(cat.id() as libc::pid_t), libc::SIGINT)));\n+\n+        t!(cat.wait());\n+    }\n+}"}, {"sha": "3d305cd7310fd4b8419d220d1adeadebb9fda914", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3545003b290102a15e28ad5dd3af10c39fdcac6c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3545003b290102a15e28ad5dd3af10c39fdcac6c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=3545003b290102a15e28ad5dd3af10c39fdcac6c", "patch": "@@ -320,6 +320,10 @@ impl Command {\n             cvt(libc::chdir(cwd.as_ptr()))?;\n         }\n \n+        if let Some(pgroup) = self.get_pgroup() {\n+            cvt(libc::setpgid(0, pgroup))?;\n+        }\n+\n         // emscripten has no signal support.\n         #[cfg(not(target_os = \"emscripten\"))]\n         {\n@@ -459,6 +463,8 @@ impl Command {\n             None => None,\n         };\n \n+        let pgroup = self.get_pgroup();\n+\n         // Safety: -1 indicates we don't have a pidfd.\n         let mut p = unsafe { Process::new(0, -1) };\n \n@@ -487,6 +493,8 @@ impl Command {\n             cvt_nz(libc::posix_spawnattr_init(attrs.as_mut_ptr()))?;\n             let attrs = PosixSpawnattr(&mut attrs);\n \n+            let mut flags = 0;\n+\n             let mut file_actions = MaybeUninit::uninit();\n             cvt_nz(libc::posix_spawn_file_actions_init(file_actions.as_mut_ptr()))?;\n             let file_actions = PosixSpawnFileActions(&mut file_actions);\n@@ -516,13 +524,18 @@ impl Command {\n                 cvt_nz(f(file_actions.0.as_mut_ptr(), cwd.as_ptr()))?;\n             }\n \n+            if let Some(pgroup) = pgroup {\n+                flags |= libc::POSIX_SPAWN_SETPGROUP;\n+                cvt_nz(libc::posix_spawnattr_setpgroup(attrs.0.as_mut_ptr(), pgroup))?;\n+            }\n+\n             let mut set = MaybeUninit::<libc::sigset_t>::uninit();\n             cvt(sigemptyset(set.as_mut_ptr()))?;\n             cvt_nz(libc::posix_spawnattr_setsigmask(attrs.0.as_mut_ptr(), set.as_ptr()))?;\n             cvt(sigaddset(set.as_mut_ptr(), libc::SIGPIPE))?;\n             cvt_nz(libc::posix_spawnattr_setsigdefault(attrs.0.as_mut_ptr(), set.as_ptr()))?;\n \n-            let flags = libc::POSIX_SPAWN_SETSIGDEF | libc::POSIX_SPAWN_SETSIGMASK;\n+            flags |= libc::POSIX_SPAWN_SETSIGDEF | libc::POSIX_SPAWN_SETSIGMASK;\n             cvt_nz(libc::posix_spawnattr_setflags(attrs.0.as_mut_ptr(), flags as _))?;\n \n             // Make sure we synchronize access to the global `environ` resource"}]}