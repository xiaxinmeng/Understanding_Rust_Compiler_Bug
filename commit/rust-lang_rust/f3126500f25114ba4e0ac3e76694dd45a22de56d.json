{"sha": "f3126500f25114ba4e0ac3e76694dd45a22de56d", "node_id": "C_kwDOAAsO6NoAKGYzMTI2NTAwZjI1MTE0YmE0ZTBhYzNlNzY2OTRkZDQ1YTIyZGU1NmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-02T17:56:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-02T17:56:53Z"}, "message": "Auto merge of #107601 - matthiaskrgr:rollup-07zaafe, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #106919 (Recover `_` as `..` in field pattern)\n - #107493 (Improve diagnostic for missing space in range pattern)\n - #107515 (Improve pretty-printing of `HirIdValidator` errors)\n - #107524 (Remove both StorageLive and StorageDead in CopyProp.)\n - #107532 (Erase regions before doing uninhabited check in borrowck)\n - #107559 (Rename `rust_2015` \u2192 `is_rust_2015`)\n - #107577 (Reinstate the `hir-stats.rs` tests on stage 1.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ab016ef14231c6193f6a9d086fca0cda4a159f9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab016ef14231c6193f6a9d086fca0cda4a159f9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3126500f25114ba4e0ac3e76694dd45a22de56d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3126500f25114ba4e0ac3e76694dd45a22de56d", "html_url": "https://github.com/rust-lang/rust/commit/f3126500f25114ba4e0ac3e76694dd45a22de56d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3126500f25114ba4e0ac3e76694dd45a22de56d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97872b792c9dd6a9bc5c3f4e62a0bd5958b09cdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/97872b792c9dd6a9bc5c3f4e62a0bd5958b09cdc", "html_url": "https://github.com/rust-lang/rust/commit/97872b792c9dd6a9bc5c3f4e62a0bd5958b09cdc"}, {"sha": "08181eabfeb468e22e5ce179492979d57d0cdf85", "url": "https://api.github.com/repos/rust-lang/rust/commits/08181eabfeb468e22e5ce179492979d57d0cdf85", "html_url": "https://github.com/rust-lang/rust/commit/08181eabfeb468e22e5ce179492979d57d0cdf85"}], "stats": {"total": 492, "additions": 322, "deletions": 170}, "files": [{"sha": "d7767efa9841bc65383b76767c821ddae74379d0", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -131,7 +131,7 @@ pub fn print_crate<'a>(\n \n         // Currently, in Rust 2018 we don't have `extern crate std;` at the crate\n         // root, so this is not needed, and actually breaks things.\n-        if edition.rust_2015() {\n+        if edition.is_rust_2015() {\n             // `#![no_std]`\n             let fake_attr = attr::mk_attr_word(g, ast::AttrStyle::Inner, sym::no_std, DUMMY_SP);\n             s.print_attribute(&fake_attr);"}, {"sha": "6c67e1a00c35c38a8b119cb6c9ceec5715b3bae6", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -1484,7 +1484,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 }\n             }\n             None => {\n-                if !sig.output().is_privately_uninhabited(self.tcx(), self.param_env) {\n+                // The signature in this call can reference region variables,\n+                // so erase them before calling a query.\n+                let output_ty = self.tcx().erase_regions(sig.output());\n+                if !output_ty.is_privately_uninhabited(self.tcx(), self.param_env) {\n                     span_mirbug!(self, term, \"call to converging function {:?} w/o dest\", sig);\n                 }\n             }"}, {"sha": "244eb41eb39eba2ba32b4d0556d939293df4fc51", "filename": "compiler/rustc_error_messages/locales/en-US/parse.ftl", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -203,8 +203,9 @@ parse_inclusive_range_extra_equals = unexpected `=` after inclusive range\n     .suggestion_remove_eq = use `..=` instead\n     .note = inclusive ranges end with a single equals sign (`..=`)\n \n-parse_inclusive_range_match_arrow = unexpected `=>` after open range\n-    .suggestion_add_space = add a space between the pattern and `=>`\n+parse_inclusive_range_match_arrow = unexpected `>` after inclusive range\n+    .label = this is parsed as an inclusive range `..=`\n+    .suggestion = add a space between the pattern and `=>`\n \n parse_inclusive_range_no_end = inclusive range with no end\n     .suggestion_open_range = use `..` instead\n@@ -535,8 +536,8 @@ parse_dot_dot_dot_range_to_pattern_not_allowed = range-to patterns with `...` ar\n \n parse_enum_pattern_instead_of_identifier = expected identifier, found enum pattern\n \n-parse_dot_dot_dot_for_remaining_fields = expected field pattern, found `...`\n-    .suggestion = to omit remaining fields, use one fewer `.`\n+parse_dot_dot_dot_for_remaining_fields = expected field pattern, found `{$token_str}`\n+    .suggestion = to omit remaining fields, use `..`\n \n parse_expected_comma_after_pattern_field = expected `,`\n "}, {"sha": "237142acca6604a8af1731bd66919209b9ee7a09", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -454,8 +454,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             None if let Some(e) = self.tainted_by_errors() => self.tcx.ty_error_with_guaranteed(e),\n             None => {\n                 bug!(\n-                    \"no type for node {}: {} in fcx {}\",\n-                    id,\n+                    \"no type for node {} in fcx {}\",\n                     self.tcx.hir().node_to_string(id),\n                     self.tag()\n                 );"}, {"sha": "92240b66eb1d4727a4a6aaa9d6df41efa26b43ef", "filename": "compiler/rustc_hir_typeck/src/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -155,8 +155,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             None if self.is_tainted_by_errors() => Err(()),\n             None => {\n                 bug!(\n-                    \"no type for node {}: {} in mem_categorization\",\n-                    id,\n+                    \"no type for node {} in mem_categorization\",\n                     self.tcx().hir().node_to_string(id)\n                 );\n             }"}, {"sha": "7f2994fd79b98af288b56103a3482b240ebc5bc7", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -290,7 +290,7 @@ impl<'hir> Map<'hir> {\n     #[track_caller]\n     pub fn parent_id(self, hir_id: HirId) -> HirId {\n         self.opt_parent_id(hir_id)\n-            .unwrap_or_else(|| bug!(\"No parent for node {:?}\", self.node_to_string(hir_id)))\n+            .unwrap_or_else(|| bug!(\"No parent for node {}\", self.node_to_string(hir_id)))\n     }\n \n     pub fn get_parent(self, hir_id: HirId) -> Node<'hir> {\n@@ -1191,12 +1191,10 @@ fn upstream_crates(tcx: TyCtxt<'_>) -> Vec<(StableCrateId, Svh)> {\n }\n \n fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n-    let id_str = format!(\" (hir_id={})\", id);\n-\n     let path_str = |def_id: LocalDefId| map.tcx.def_path_str(def_id.to_def_id());\n \n     let span_str = || map.tcx.sess.source_map().span_to_snippet(map.span(id)).unwrap_or_default();\n-    let node_str = |prefix| format!(\"{} {}{}\", prefix, span_str(), id_str);\n+    let node_str = |prefix| format!(\"{id} ({prefix} `{}`)\", span_str());\n \n     match map.find(id) {\n         Some(Node::Item(item)) => {\n@@ -1225,18 +1223,18 @@ fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n                 ItemKind::TraitAlias(..) => \"trait alias\",\n                 ItemKind::Impl { .. } => \"impl\",\n             };\n-            format!(\"{} {}{}\", item_str, path_str(item.owner_id.def_id), id_str)\n+            format!(\"{id} ({item_str} {})\", path_str(item.owner_id.def_id))\n         }\n         Some(Node::ForeignItem(item)) => {\n-            format!(\"foreign item {}{}\", path_str(item.owner_id.def_id), id_str)\n+            format!(\"{id} (foreign item {})\", path_str(item.owner_id.def_id))\n         }\n         Some(Node::ImplItem(ii)) => {\n             let kind = match ii.kind {\n                 ImplItemKind::Const(..) => \"assoc const\",\n                 ImplItemKind::Fn(..) => \"method\",\n                 ImplItemKind::Type(_) => \"assoc type\",\n             };\n-            format!(\"{} {} in {}{}\", kind, ii.ident, path_str(ii.owner_id.def_id), id_str)\n+            format!(\"{id} ({kind} `{}` in {})\", ii.ident, path_str(ii.owner_id.def_id))\n         }\n         Some(Node::TraitItem(ti)) => {\n             let kind = match ti.kind {\n@@ -1245,13 +1243,13 @@ fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n                 TraitItemKind::Type(..) => \"assoc type\",\n             };\n \n-            format!(\"{} {} in {}{}\", kind, ti.ident, path_str(ti.owner_id.def_id), id_str)\n+            format!(\"{id} ({kind} `{}` in {})\", ti.ident, path_str(ti.owner_id.def_id))\n         }\n         Some(Node::Variant(ref variant)) => {\n-            format!(\"variant {} in {}{}\", variant.ident, path_str(variant.def_id), id_str)\n+            format!(\"{id} (variant `{}` in {})\", variant.ident, path_str(variant.def_id))\n         }\n         Some(Node::Field(ref field)) => {\n-            format!(\"field {} in {}{}\", field.ident, path_str(field.def_id), id_str)\n+            format!(\"{id} (field `{}` in {})\", field.ident, path_str(field.def_id))\n         }\n         Some(Node::AnonConst(_)) => node_str(\"const\"),\n         Some(Node::Expr(_)) => node_str(\"expr\"),\n@@ -1269,16 +1267,15 @@ fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n         Some(Node::Infer(_)) => node_str(\"infer\"),\n         Some(Node::Local(_)) => node_str(\"local\"),\n         Some(Node::Ctor(ctor)) => format!(\n-            \"ctor {}{}\",\n+            \"{id} (ctor {})\",\n             ctor.ctor_def_id().map_or(\"<missing path>\".into(), |def_id| path_str(def_id)),\n-            id_str\n         ),\n         Some(Node::Lifetime(_)) => node_str(\"lifetime\"),\n         Some(Node::GenericParam(ref param)) => {\n-            format!(\"generic_param {}{}\", path_str(param.def_id), id_str)\n+            format!(\"{id} (generic_param {})\", path_str(param.def_id))\n         }\n-        Some(Node::Crate(..)) => String::from(\"root_crate\"),\n-        None => format!(\"unknown node{}\", id_str),\n+        Some(Node::Crate(..)) => String::from(\"(root_crate)\"),\n+        None => format!(\"{id} (unknown node)\"),\n     }\n }\n "}, {"sha": "f98172e420162c4ae6aecc0b8fd247e3589757f2", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -2171,7 +2171,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             self.late_bound_vars_map(id.owner)\n                 .and_then(|map| map.get(&id.local_id).cloned())\n                 .unwrap_or_else(|| {\n-                    bug!(\"No bound vars found for {:?} ({:?})\", self.hir().node_to_string(id), id)\n+                    bug!(\"No bound vars found for {}\", self.hir().node_to_string(id))\n                 })\n                 .iter(),\n         )"}, {"sha": "9beaac87183a7fcde3369cab7949c5eca5a299ee", "filename": "compiler/rustc_middle/src/ty/typeck_results.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -372,7 +372,7 @@ impl<'tcx> TypeckResults<'tcx> {\n \n     pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {\n         self.node_type_opt(id).unwrap_or_else(|| {\n-            bug!(\"node_type: no type for node `{}`\", tls::with(|tcx| tcx.hir().node_to_string(id)))\n+            bug!(\"node_type: no type for node {}\", tls::with(|tcx| tcx.hir().node_to_string(id)))\n         })\n     }\n \n@@ -551,9 +551,8 @@ fn validate_hir_id_for_typeck_results(hir_owner: OwnerId, hir_id: hir::HirId) {\n fn invalid_hir_id_for_typeck_results(hir_owner: OwnerId, hir_id: hir::HirId) {\n     ty::tls::with(|tcx| {\n         bug!(\n-            \"node {} with HirId::owner {:?} cannot be placed in TypeckResults with hir_owner {:?}\",\n+            \"node {} cannot be placed in TypeckResults with hir_owner {:?}\",\n             tcx.hir().node_to_string(hir_id),\n-            hir_id.owner,\n             hir_owner\n         )\n     });"}, {"sha": "4c7d45be0753e1944d25e60434463fb964a462b2", "filename": "compiler/rustc_mir_transform/src/copy_prop.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -162,17 +162,20 @@ impl<'tcx> MutVisitor<'tcx> for Replacer<'_, 'tcx> {\n     }\n \n     fn visit_statement(&mut self, stmt: &mut Statement<'tcx>, loc: Location) {\n-        if let StatementKind::StorageDead(l) = stmt.kind\n-            && self.storage_to_remove.contains(l)\n-        {\n-            stmt.make_nop();\n-        } else if let StatementKind::Assign(box (ref place, ref mut rvalue)) = stmt.kind\n-            && place.as_local().is_some()\n-        {\n-            // Do not replace assignments.\n-            self.visit_rvalue(rvalue, loc)\n-        } else {\n-            self.super_statement(stmt, loc);\n+        match stmt.kind {\n+            // When removing storage statements, we need to remove both (#107511).\n+            StatementKind::StorageLive(l) | StatementKind::StorageDead(l)\n+                if self.storage_to_remove.contains(l) =>\n+            {\n+                stmt.make_nop()\n+            }\n+            StatementKind::Assign(box (ref place, ref mut rvalue))\n+                if place.as_local().is_some() =>\n+            {\n+                // Do not replace assignments.\n+                self.visit_rvalue(rvalue, loc)\n+            }\n+            _ => self.super_statement(stmt, loc),\n         }\n     }\n }"}, {"sha": "fd4333dbbecc3763f3dace3162c65890403af1cc", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -1,3 +1,5 @@\n+use std::borrow::Cow;\n+\n use rustc_ast::token::Token;\n use rustc_ast::{Path, Visibility};\n use rustc_errors::{fluent, AddToDiagnostic, Applicability, EmissionGuarantee, IntoDiagnostic};\n@@ -668,13 +670,10 @@ pub(crate) struct InclusiveRangeExtraEquals {\n #[diag(parse_inclusive_range_match_arrow)]\n pub(crate) struct InclusiveRangeMatchArrow {\n     #[primary_span]\n+    pub arrow: Span,\n+    #[label]\n     pub span: Span,\n-    #[suggestion(\n-        suggestion_add_space,\n-        style = \"verbose\",\n-        code = \" \",\n-        applicability = \"machine-applicable\"\n-    )]\n+    #[suggestion(style = \"verbose\", code = \" \", applicability = \"machine-applicable\")]\n     pub after_pat: Span,\n }\n \n@@ -1802,8 +1801,9 @@ pub(crate) struct EnumPatternInsteadOfIdentifier {\n #[diag(parse_dot_dot_dot_for_remaining_fields)]\n pub(crate) struct DotDotDotForRemainingFields {\n     #[primary_span]\n-    #[suggestion(code = \"..\", applicability = \"machine-applicable\")]\n+    #[suggestion(code = \"..\", style = \"verbose\", applicability = \"machine-applicable\")]\n     pub span: Span,\n+    pub token_str: Cow<'static, str>,\n }\n \n #[derive(Diagnostic)]"}, {"sha": "3d42a9dcbbea1916b3c6d3e66e408d2fc1eff1e9", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -2717,6 +2717,14 @@ impl<'a> Parser<'a> {\n                     );\n                     err.emit();\n                     this.bump();\n+                } else if matches!(\n+                    (&this.prev_token.kind, &this.token.kind),\n+                    (token::DotDotEq, token::Gt)\n+                ) {\n+                    // `error_inclusive_range_match_arrow` handles cases like `0..=> {}`,\n+                    // so we supress the error here\n+                    err.delay_as_bug();\n+                    this.bump();\n                 } else {\n                     return Err(err);\n                 }"}, {"sha": "628e9d88cf1df27451b7811dc010fc9b08ed5cdd", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -2247,7 +2247,7 @@ impl<'a> Parser<'a> {\n         let ext = self.parse_extern(case);\n \n         if let Async::Yes { span, .. } = asyncness {\n-            if span.rust_2015() {\n+            if span.is_rust_2015() {\n                 self.sess.emit_err(AsyncFnIn2015 { span, help: HelpUseLatestEdition::new() });\n             }\n         }"}, {"sha": "b054dc59a0c9d93b43d1b2a365a4ec12d23c22ea", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -743,7 +743,7 @@ impl<'a> Parser<'a> {\n             }\n             token::Gt if no_space => {\n                 let after_pat = span.with_hi(span.hi() - rustc_span::BytePos(1)).shrink_to_hi();\n-                self.sess.emit_err(InclusiveRangeMatchArrow { span, after_pat });\n+                self.sess.emit_err(InclusiveRangeMatchArrow { span, arrow: tok.span, after_pat });\n             }\n             _ => {\n                 self.sess.emit_err(InclusiveRangeNoEnd { span });\n@@ -962,12 +962,15 @@ impl<'a> Parser<'a> {\n             }\n             ate_comma = false;\n \n-            if self.check(&token::DotDot) || self.token == token::DotDotDot {\n+            if self.check(&token::DotDot)\n+                || self.check_noexpect(&token::DotDotDot)\n+                || self.check_keyword(kw::Underscore)\n+            {\n                 etc = true;\n                 let mut etc_sp = self.token.span;\n \n-                self.recover_one_fewer_dotdot();\n-                self.bump(); // `..` || `...`\n+                self.recover_bad_dot_dot();\n+                self.bump(); // `..` || `...` || `_`\n \n                 if self.token == token::CloseDelim(Delimiter::Brace) {\n                     etc_span = Some(etc_sp);\n@@ -1060,14 +1063,15 @@ impl<'a> Parser<'a> {\n         Ok((fields, etc))\n     }\n \n-    /// Recover on `...` as if it were `..` to avoid further errors.\n+    /// Recover on `...` or `_` as if it were `..` to avoid further errors.\n     /// See issue #46718.\n-    fn recover_one_fewer_dotdot(&self) {\n-        if self.token != token::DotDotDot {\n+    fn recover_bad_dot_dot(&self) {\n+        if self.token == token::DotDot {\n             return;\n         }\n \n-        self.sess.emit_err(DotDotDotForRemainingFields { span: self.token.span });\n+        let token_str = pprust::token_to_string(&self.token);\n+        self.sess.emit_err(DotDotDotForRemainingFields { span: self.token.span, token_str });\n     }\n \n     fn parse_pat_field(&mut self, lo: Span, attrs: AttrVec) -> PResult<'a, PatField> {"}, {"sha": "a19ea04fa5e75e47128fa769952be3b6083a68c6", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -614,7 +614,7 @@ impl<'a> Parser<'a> {\n     /// Is a `dyn B0 + ... + Bn` type allowed here?\n     fn is_explicit_dyn_type(&mut self) -> bool {\n         self.check_keyword(kw::Dyn)\n-            && (!self.token.uninterpolated_span().rust_2015()\n+            && (self.token.uninterpolated_span().rust_2018()\n                 || self.look_ahead(1, |t| {\n                     (t.can_begin_bound() || t.kind == TokenKind::BinOp(token::Star))\n                         && !can_continue_type_after_non_fn_ident(t)"}, {"sha": "de0e50a65de6ebba0d48d65f729b8ab01cf63f99", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 14, "deletions": 25, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -74,37 +74,26 @@ impl<'a, 'hir> HirIdValidator<'a, 'hir> {\n             .expect(\"owning item has no entry\");\n \n         if max != self.hir_ids_seen.len() - 1 {\n-            // Collect the missing ItemLocalIds\n-            let missing: Vec<_> = (0..=max as u32)\n-                .filter(|&i| !self.hir_ids_seen.contains(ItemLocalId::from_u32(i)))\n-                .collect();\n-\n-            // Try to map those to something more useful\n-            let mut missing_items = Vec::with_capacity(missing.len());\n+            let hir = self.tcx.hir();\n+            let pretty_owner = hir.def_path(owner.def_id).to_string_no_crate_verbose();\n \n-            for local_id in missing {\n-                let hir_id = HirId { owner, local_id: ItemLocalId::from_u32(local_id) };\n+            let missing_items: Vec<_> = (0..=max as u32)\n+                .map(|i| ItemLocalId::from_u32(i))\n+                .filter(|&local_id| !self.hir_ids_seen.contains(local_id))\n+                .map(|local_id| hir.node_to_string(HirId { owner, local_id }))\n+                .collect();\n \n-                trace!(\"missing hir id {:#?}\", hir_id);\n+            let seen_items: Vec<_> = self\n+                .hir_ids_seen\n+                .iter()\n+                .map(|local_id| hir.node_to_string(HirId { owner, local_id }))\n+                .collect();\n \n-                missing_items.push(format!(\n-                    \"[local_id: {}, owner: {}]\",\n-                    local_id,\n-                    self.tcx.hir().def_path(owner.def_id).to_string_no_crate_verbose()\n-                ));\n-            }\n             self.error(|| {\n                 format!(\n                     \"ItemLocalIds not assigned densely in {}. \\\n-                Max ItemLocalId = {}, missing IDs = {:#?}; seens IDs = {:#?}\",\n-                    self.tcx.hir().def_path(owner.def_id).to_string_no_crate_verbose(),\n-                    max,\n-                    missing_items,\n-                    self.hir_ids_seen\n-                        .iter()\n-                        .map(|local_id| HirId { owner, local_id })\n-                        .map(|h| format!(\"({:?} {})\", h, self.tcx.hir().node_to_string(h)))\n-                        .collect::<Vec<_>>()\n+                Max ItemLocalId = {}, missing IDs = {:#?}; seen IDs = {:#?}\",\n+                    pretty_owner, max, missing_items, seen_items\n                 )\n             });\n         }"}, {"sha": "2fb62ce53ba6e357b0f4be8d04eef0fa949b949d", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -265,7 +265,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 let ident = path.segments.get(0).expect(\"empty path in visibility\").ident;\n                 let crate_root = if ident.is_path_segment_keyword() {\n                     None\n-                } else if ident.span.rust_2015() {\n+                } else if ident.span.is_rust_2015() {\n                     Some(Segment::from_ident(Ident::new(\n                         kw::PathRoot,\n                         path.span.shrink_to_lo().with_ctxt(ident.span.ctxt()),\n@@ -435,10 +435,10 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         // appears, so imports in braced groups can have roots prepended independently.\n         let is_glob = matches!(use_tree.kind, ast::UseTreeKind::Glob);\n         let crate_root = match prefix_iter.peek() {\n-            Some(seg) if !seg.ident.is_path_segment_keyword() && seg.ident.span.rust_2015() => {\n+            Some(seg) if !seg.ident.is_path_segment_keyword() && seg.ident.span.is_rust_2015() => {\n                 Some(seg.ident.span.ctxt())\n             }\n-            None if is_glob && use_tree.span.rust_2015() => Some(use_tree.span.ctxt()),\n+            None if is_glob && use_tree.span.is_rust_2015() => Some(use_tree.span.ctxt()),\n             _ => None,\n         }\n         .map(|ctxt| {"}, {"sha": "a08ae0f184bb2f62cb7400353a063e6e417ed998", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -462,7 +462,9 @@ impl<'a> Resolver<'a> {\n \n         let first_name = match path.get(0) {\n             // In the 2018 edition this lint is a hard error, so nothing to do\n-            Some(seg) if seg.ident.span.rust_2015() && self.session.rust_2015() => seg.ident.name,\n+            Some(seg) if seg.ident.span.is_rust_2015() && self.session.is_rust_2015() => {\n+                seg.ident.name\n+            }\n             _ => return,\n         };\n \n@@ -1717,7 +1719,7 @@ impl<'a> Resolver<'a> {\n                         Applicability::MaybeIncorrect,\n                     )),\n                 )\n-            } else if self.session.rust_2015() {\n+            } else if self.session.is_rust_2015() {\n                 (\n                     format!(\"maybe a missing crate `{ident}`?\"),\n                     Some((\n@@ -1996,7 +1998,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         mut path: Vec<Segment>,\n         parent_scope: &ParentScope<'b>,\n     ) -> Option<(Vec<Segment>, Option<String>)> {\n-        if path[1].ident.span.rust_2015() {\n+        if path[1].ident.span.is_rust_2015() {\n             return None;\n         }\n "}, {"sha": "d03ccf256fad79f2ddc6a1d48e002e821a67e7fe", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -85,7 +85,7 @@ impl<'a> Resolver<'a> {\n         // 4c. Standard library prelude (de-facto closed, controlled).\n         // 6. Language prelude: builtin attributes (closed, controlled).\n \n-        let rust_2015 = ctxt.edition().rust_2015();\n+        let rust_2015 = ctxt.edition().is_rust_2015();\n         let (ns, macro_kind, is_absolute_path) = match scope_set {\n             ScopeSet::All(ns, _) => (ns, None, false),\n             ScopeSet::AbsolutePath(ns) => (ns, None, true),\n@@ -1397,7 +1397,8 @@ impl<'a> Resolver<'a> {\n                         module = Some(ModuleOrUniformRoot::ExternPrelude);\n                         continue;\n                     }\n-                    if name == kw::PathRoot && ident.span.rust_2015() && self.session.rust_2018() {\n+                    if name == kw::PathRoot && ident.span.is_rust_2015() && self.session.rust_2018()\n+                    {\n                         // `::a::b` from 2015 macro on 2018 global edition\n                         module = Some(ModuleOrUniformRoot::CrateRootAndExternPrelude);\n                         continue;"}, {"sha": "3ca10ac50baa6392ed0fcf47f46de5ad34b9871e", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -2145,7 +2145,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         let segments = &use_tree.prefix.segments;\n         if !segments.is_empty() {\n             let ident = segments[0].ident;\n-            if ident.is_path_segment_keyword() || ident.span.rust_2015() {\n+            if ident.is_path_segment_keyword() || ident.span.is_rust_2015() {\n                 return;\n             }\n "}, {"sha": "cee0a7f3c203d8e4eeb871f99f978ccfac100839", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -1343,7 +1343,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     \"!\",\n                     Applicability::MaybeIncorrect,\n                 );\n-                if path_str == \"try\" && span.rust_2015() {\n+                if path_str == \"try\" && span.is_rust_2015() {\n                     err.note(\"if you want the `try` keyword, you need Rust 2018 or later\");\n                 }\n             }"}, {"sha": "dbd419c1406f867c09644875e70b9231e8b355fd", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -919,8 +919,8 @@ impl Session {\n     }\n \n     /// Is this edition 2015?\n-    pub fn rust_2015(&self) -> bool {\n-        self.edition().rust_2015()\n+    pub fn is_rust_2015(&self) -> bool {\n+        self.edition().is_rust_2015()\n     }\n \n     /// Are we allowed to use features from the Rust 2018 edition?"}, {"sha": "f16db69aae2323d6efef2998b64dc43ee307837a", "filename": "compiler/rustc_span/src/edition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_span%2Fsrc%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_span%2Fsrc%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fedition.rs?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -77,7 +77,7 @@ impl Edition {\n     }\n \n     /// Is this edition 2015?\n-    pub fn rust_2015(self) -> bool {\n+    pub fn is_rust_2015(self) -> bool {\n         self == Edition::Edition2015\n     }\n "}, {"sha": "e095cf3fda20d53cef6edd184b5c29d998d74b99", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -705,8 +705,8 @@ impl Span {\n     }\n \n     #[inline]\n-    pub fn rust_2015(self) -> bool {\n-        self.edition().rust_2015()\n+    pub fn is_rust_2015(self) -> bool {\n+        self.edition().is_rust_2015()\n     }\n \n     #[inline]"}, {"sha": "87dbf7c3fd699b2649d36acb122d49de5a99676c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -133,7 +133,7 @@ impl<'tcx, 'a> GeneratorData<'tcx, 'a> {\n                                         .cloned()\n                                         .unwrap_or_else(|| {\n                                             bug!(\n-                                                \"node_type: no type for node `{}`\",\n+                                                \"node_type: no type for node {}\",\n                                                 ty::tls::with(|tcx| tcx\n                                                     .hir()\n                                                     .node_to_string(await_expr.hir_id))"}, {"sha": "4405b55875ed92ed4f401c9ead6a1cfa5e4230c7", "filename": "tests/mir-opt/const_debuginfo.main.ConstDebugInfo.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -56,11 +56,8 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/const_debuginfo.rs:+1:9: +1:10\n           _1 = const 1_u8;                 // scope 0 at $DIR/const_debuginfo.rs:+1:13: +1:16\n-          StorageLive(_2);                 // scope 1 at $DIR/const_debuginfo.rs:+2:9: +2:10\n           _2 = const 2_u8;                 // scope 1 at $DIR/const_debuginfo.rs:+2:13: +2:16\n-          StorageLive(_3);                 // scope 2 at $DIR/const_debuginfo.rs:+3:9: +3:10\n           _3 = const 3_u8;                 // scope 2 at $DIR/const_debuginfo.rs:+3:13: +3:16\n           StorageLive(_4);                 // scope 3 at $DIR/const_debuginfo.rs:+4:9: +4:12\n           StorageLive(_5);                 // scope 3 at $DIR/const_debuginfo.rs:+4:15: +4:20"}, {"sha": "ae9ffd519a148ec6efd25eed5dbe487e231ee483", "filename": "tests/mir-opt/const_prop/bad_op_mod_by_zero.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fbad_op_mod_by_zero.main.ConstProp.diff?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -18,7 +18,6 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/bad_op_mod_by_zero.rs:+1:9: +1:10\n           _1 = const 0_i32;                // scope 0 at $DIR/bad_op_mod_by_zero.rs:+1:13: +1:14\n           StorageLive(_2);                 // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:9: +2:11\n -         _4 = Eq(_1, const 0_i32);        // scope 1 at $DIR/bad_op_mod_by_zero.rs:+2:14: +2:19"}, {"sha": "22f710387db71d8321606cc4c303f361bfd09a65", "filename": "tests/mir-opt/const_prop/scalar_literal_propagation.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fscalar_literal_propagation.main.ConstProp.diff?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -11,7 +11,6 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/scalar_literal_propagation.rs:+1:9: +1:10\n           _1 = const 1_u32;                // scope 0 at $DIR/scalar_literal_propagation.rs:+1:13: +1:14\n           StorageLive(_2);                 // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15\n -         _2 = consume(_1) -> bb1;         // scope 1 at $DIR/scalar_literal_propagation.rs:+2:5: +2:15"}, {"sha": "3e61869e82f11f2085a133825c7ea62b86d52ed9", "filename": "tests/mir-opt/copy-prop/cycle.main.CopyProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.main.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.main.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fcycle.main.CopyProp.diff?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -29,7 +29,7 @@\n       }\n   \n       bb1: {\n-          StorageLive(_2);                 // scope 1 at $DIR/cycle.rs:+2:9: +2:10\n+-         StorageLive(_2);                 // scope 1 at $DIR/cycle.rs:+2:9: +2:10\n           _2 = _1;                         // scope 1 at $DIR/cycle.rs:+2:13: +2:14\n -         StorageLive(_3);                 // scope 2 at $DIR/cycle.rs:+3:9: +3:10\n -         _3 = _2;                         // scope 2 at $DIR/cycle.rs:+3:13: +3:14"}, {"sha": "d48b04e2de273887ca85aa141f8812c1a36be817", "filename": "tests/mir-opt/copy-prop/dead_stores_79191.f.CopyProp.after.mir", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.f.CopyProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.f.CopyProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_79191.f.CopyProp.after.mir?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -11,7 +11,6 @@ fn f(_1: usize) -> usize {\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/dead_stores_79191.rs:+1:9: +1:10\n         _2 = _1;                         // scope 0 at $DIR/dead_stores_79191.rs:+1:13: +1:14\n         _1 = const 5_usize;              // scope 1 at $DIR/dead_stores_79191.rs:+2:5: +2:10\n         _1 = _2;                         // scope 1 at $DIR/dead_stores_79191.rs:+3:5: +3:10"}, {"sha": "727791f50a4ef67b0b15283df8ff7677ebbea1d5", "filename": "tests/mir-opt/copy-prop/dead_stores_better.f.CopyProp.after.mir", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.f.CopyProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.f.CopyProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fdead_stores_better.f.CopyProp.after.mir?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -11,7 +11,6 @@ fn f(_1: usize) -> usize {\n     }\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/dead_stores_better.rs:+1:9: +1:10\n         _2 = _1;                         // scope 0 at $DIR/dead_stores_better.rs:+1:13: +1:14\n         _1 = const 5_usize;              // scope 1 at $DIR/dead_stores_better.rs:+2:5: +2:10\n         _1 = _2;                         // scope 1 at $DIR/dead_stores_better.rs:+3:5: +3:10"}, {"sha": "28ba651ad4ae0e2bf7706f4c0619dafc150f998b", "filename": "tests/mir-opt/copy-prop/issue_107511.main.CopyProp.diff", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.main.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.main.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.main.CopyProp.diff?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -0,0 +1,140 @@\n+- // MIR for `main` before CopyProp\n++ // MIR for `main` after CopyProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue_107511.rs:+0:11: +0:11\n+      let mut _1: i32;                     // in scope 0 at $DIR/issue_107511.rs:+1:9: +1:16\n+      let mut _3: std::ops::Range<usize>;  // in scope 0 at $DIR/issue_107511.rs:+6:14: +6:24\n+      let mut _4: std::ops::Range<usize>;  // in scope 0 at $DIR/issue_107511.rs:+6:14: +6:24\n+      let mut _5: usize;                   // in scope 0 at $DIR/issue_107511.rs:+6:17: +6:24\n+      let mut _6: &[i32];                  // in scope 0 at $DIR/issue_107511.rs:+6:17: +6:24\n+      let mut _7: &[i32; 4];               // in scope 0 at $DIR/issue_107511.rs:+6:17: +6:24\n+      let mut _9: ();                      // in scope 0 at $DIR/issue_107511.rs:+0:1: +9:2\n+      let _10: ();                         // in scope 0 at $DIR/issue_107511.rs:+6:14: +6:24\n+      let mut _11: std::option::Option<usize>; // in scope 0 at $DIR/issue_107511.rs:+6:14: +6:24\n+      let mut _12: &mut std::ops::Range<usize>; // in scope 0 at $DIR/issue_107511.rs:+6:14: +6:24\n+      let mut _13: &mut std::ops::Range<usize>; // in scope 0 at $DIR/issue_107511.rs:+6:14: +6:24\n+      let mut _14: isize;                  // in scope 0 at $DIR/issue_107511.rs:+6:5: +8:6\n+      let mut _15: !;                      // in scope 0 at $DIR/issue_107511.rs:+6:5: +8:6\n+      let mut _17: i32;                    // in scope 0 at $DIR/issue_107511.rs:+7:16: +7:20\n+      let _18: usize;                      // in scope 0 at $DIR/issue_107511.rs:+7:18: +7:19\n+      let mut _19: usize;                  // in scope 0 at $DIR/issue_107511.rs:+7:16: +7:20\n+      let mut _20: bool;                   // in scope 0 at $DIR/issue_107511.rs:+7:16: +7:20\n+      scope 1 {\n+          debug sum => _1;                 // in scope 1 at $DIR/issue_107511.rs:+1:9: +1:16\n+          let _2: [i32; 4];                // in scope 1 at $DIR/issue_107511.rs:+2:9: +2:10\n+          scope 2 {\n+              debug a => _2;               // in scope 2 at $DIR/issue_107511.rs:+2:9: +2:10\n+              let mut _8: std::ops::Range<usize>; // in scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n+              scope 3 {\n+                  debug iter => _8;        // in scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+                  let _16: usize;          // in scope 3 at $DIR/issue_107511.rs:+6:9: +6:10\n+                  scope 4 {\n+                      debug i => _16;      // in scope 4 at $DIR/issue_107511.rs:+6:9: +6:10\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/issue_107511.rs:+1:9: +1:16\n+          _1 = const 0_i32;                // scope 0 at $DIR/issue_107511.rs:+1:19: +1:20\n+          StorageLive(_2);                 // scope 1 at $DIR/issue_107511.rs:+2:9: +2:10\n+          _2 = [const 0_i32, const 10_i32, const 20_i32, const 30_i32]; // scope 1 at $DIR/issue_107511.rs:+2:13: +2:28\n+          StorageLive(_3);                 // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n+          StorageLive(_4);                 // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n+          StorageLive(_5);                 // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n+          StorageLive(_6);                 // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n+          StorageLive(_7);                 // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n+          _7 = &_2;                        // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n+          _6 = move _7 as &[i32] (Pointer(Unsize)); // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n+          StorageDead(_7);                 // scope 2 at $DIR/issue_107511.rs:+6:17: +6:18\n+          _5 = core::slice::<impl [i32]>::len(move _6) -> bb1; // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue_107511.rs:10:19: 10:22\n+                                           // + literal: Const { ty: for<'a> fn(&'a [i32]) -> usize {core::slice::<impl [i32]>::len}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_6);                 // scope 2 at $DIR/issue_107511.rs:+6:23: +6:24\n+          Deinit(_4);                      // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n+          (_4.0: usize) = const 0_usize;   // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n+          (_4.1: usize) = move _5;         // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n+          StorageDead(_5);                 // scope 2 at $DIR/issue_107511.rs:+6:23: +6:24\n+          _3 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _4) -> bb2; // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue_107511.rs:10:14: 10:24\n+                                           // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          StorageDead(_4);                 // scope 2 at $DIR/issue_107511.rs:+6:23: +6:24\n+          StorageLive(_8);                 // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n+          _8 = move _3;                    // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n+          goto -> bb3;                     // scope 3 at $DIR/issue_107511.rs:+6:5: +8:6\n+      }\n+  \n+      bb3: {\n+-         StorageLive(_10);                // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+          StorageLive(_11);                // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+          StorageLive(_12);                // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+          StorageLive(_13);                // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+          _13 = &mut _8;                   // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+          _12 = &mut (*_13);               // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+          _11 = <std::ops::Range<usize> as Iterator>::next(move _12) -> bb4; // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue_107511.rs:10:14: 10:24\n+                                           // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }\n+      }\n+  \n+      bb4: {\n+          StorageDead(_12);                // scope 3 at $DIR/issue_107511.rs:+6:23: +6:24\n+          _14 = discriminant(_11);         // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+          switchInt(move _14) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+      }\n+  \n+      bb5: {\n+-         StorageLive(_16);                // scope 3 at $DIR/issue_107511.rs:+6:9: +6:10\n+          _16 = ((_11 as Some).0: usize);  // scope 3 at $DIR/issue_107511.rs:+6:9: +6:10\n+          StorageLive(_17);                // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n+-         StorageLive(_18);                // scope 4 at $DIR/issue_107511.rs:+7:18: +7:19\n+-         _18 = _16;                       // scope 4 at $DIR/issue_107511.rs:+7:18: +7:19\n+          _19 = Len(_2);                   // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n+-         _20 = Lt(_18, _19);              // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n+-         assert(move _20, \"index out of bounds: the length is {} but the index is {}\", move _19, _18) -> bb8; // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n++         _20 = Lt(_16, _19);              // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n++         assert(move _20, \"index out of bounds: the length is {} but the index is {}\", move _19, _16) -> bb8; // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n+      }\n+  \n+      bb6: {\n+          unreachable;                     // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+      }\n+  \n+      bb7: {\n+          _0 = const ();                   // scope 3 at $DIR/issue_107511.rs:+6:5: +8:6\n+          StorageDead(_13);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n+          StorageDead(_11);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n+-         StorageDead(_10);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n+          StorageDead(_8);                 // scope 2 at $DIR/issue_107511.rs:+8:5: +8:6\n+          StorageDead(_3);                 // scope 2 at $DIR/issue_107511.rs:+8:5: +8:6\n+          StorageDead(_2);                 // scope 1 at $DIR/issue_107511.rs:+9:1: +9:2\n+          StorageDead(_1);                 // scope 0 at $DIR/issue_107511.rs:+9:1: +9:2\n+          return;                          // scope 0 at $DIR/issue_107511.rs:+9:2: +9:2\n+      }\n+  \n+      bb8: {\n+-         _17 = _2[_18];                   // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n++         _17 = _2[_16];                   // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n+          _1 = Add(_1, move _17);          // scope 4 at $DIR/issue_107511.rs:+7:9: +7:20\n+          StorageDead(_17);                // scope 4 at $DIR/issue_107511.rs:+7:19: +7:20\n+-         StorageDead(_18);                // scope 4 at $DIR/issue_107511.rs:+7:20: +7:21\n+-         _10 = const ();                  // scope 4 at $DIR/issue_107511.rs:+6:25: +8:6\n+-         StorageDead(_16);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n+          StorageDead(_13);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n+          StorageDead(_11);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n+-         StorageDead(_10);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n+-         _9 = const ();                   // scope 3 at $DIR/issue_107511.rs:+6:5: +8:6\n+          goto -> bb3;                     // scope 3 at $DIR/issue_107511.rs:+6:5: +8:6\n+      }\n+  }\n+  "}, {"sha": "d593f2872ea40b950ad36978db8b63acbc5319a5", "filename": "tests/mir-opt/copy-prop/issue_107511.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.rs?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -0,0 +1,13 @@\n+// unit-test: CopyProp\n+\n+// EMIT_MIR issue_107511.main.CopyProp.diff\n+fn main() {\n+    let mut sum = 0;\n+    let a = [0, 10, 20, 30];\n+\n+    // `i` is assigned in a loop. Only removing its `StorageDead` would mean that\n+    // execution sees repeated `StorageLive`. This would be UB.\n+    for i in 0..a.len() {\n+        sum += a[i];\n+    }\n+}"}, {"sha": "9c3f87f47c12c0ebab94e7691ada61e6f4ca4e79", "filename": "tests/mir-opt/dataflow-const-prop/inherit_overflow.main.DataflowConstProp.diff", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow.main.DataflowConstProp.diff?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -16,9 +16,7 @@\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n           _1 = const u8::MAX;              // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n-          StorageLive(_2);                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n           _2 = const 1_u8;                 // scope 0 at $DIR/inherit_overflow.rs:+3:13: +3:47\n           _5 = CheckedAdd(const u8::MAX, const 1_u8); // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n           assert(!move (_5.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const u8::MAX, const 1_u8) -> bb1; // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL"}, {"sha": "7c5d28069d59d4f2bf1ec800f8fd4e1a7e179eb3", "filename": "tests/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -79,7 +79,6 @@\n       }\n   \n       bb6: {\n-          StorageLive(_10);                // scope 3 at $DIR/funky_arms.rs:+13:17: +13:26\n           _10 = ((_7 as Some).0: usize);   // scope 3 at $DIR/funky_arms.rs:+13:17: +13:26\n           StorageLive(_11);                // scope 3 at $DIR/funky_arms.rs:+15:43: +15:46\n           _11 = &mut (*_1);                // scope 3 at $DIR/funky_arms.rs:+15:43: +15:46"}, {"sha": "002392c5cf81a24c59eb8b600647cda96a1427a9", "filename": "tests/mir-opt/issue_101973.inner.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -33,7 +33,6 @@\n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/issue_101973.rs:+1:5: +1:65\n           StorageLive(_3);                 // scope 0 at $DIR/issue_101973.rs:+1:5: +1:58\n-          StorageLive(_4);                 // scope 0 at $DIR/issue_101973.rs:+1:5: +1:17\n           StorageLive(_12);                // scope 2 at $DIR/issue_101973.rs:7:12: 7:27\n           StorageLive(_13);                // scope 2 at $DIR/issue_101973.rs:7:12: 7:20\n           _14 = CheckedShr(_1, const 0_i32); // scope 2 at $DIR/issue_101973.rs:7:12: 7:20\n@@ -63,7 +62,6 @@\n           StorageDead(_13);                // scope 2 at $DIR/issue_101973.rs:7:26: 7:27\n           _4 = BitOr(const 0_u32, move _12); // scope 2 at $DIR/issue_101973.rs:7:5: 7:27\n           StorageDead(_12);                // scope 2 at $DIR/issue_101973.rs:7:26: 7:27\n-          StorageLive(_6);                 // scope 0 at $DIR/issue_101973.rs:+1:31: +1:57\n           StorageLive(_7);                 // scope 0 at $DIR/issue_101973.rs:+1:31: +1:52\n           StorageLive(_8);                 // scope 0 at $DIR/issue_101973.rs:+1:32: +1:45\n           _10 = CheckedShr(_1, const 8_i32); // scope 0 at $DIR/issue_101973.rs:+1:32: +1:45"}, {"sha": "cc4f7cc06991f6b77ce66f0cee3f33c8789ede9e", "filename": "tests/mir-opt/issue_76432.test.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -29,7 +29,6 @@\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/issue_76432.rs:+1:9: +1:10\n-          StorageLive(_4);                 // scope 0 at $DIR/issue_76432.rs:+1:19: +1:29\n           StorageLive(_5);                 // scope 0 at $DIR/issue_76432.rs:+1:20: +1:29\n           _5 = [_1, _1, _1];               // scope 0 at $DIR/issue_76432.rs:+1:20: +1:29\n           _4 = &_5;                        // scope 0 at $DIR/issue_76432.rs:+1:19: +1:29"}, {"sha": "b700adfb105b041ff1401f8de61169c5842846cf", "filename": "tests/mir-opt/simplify_match.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -10,7 +10,6 @@\n       }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/simplify_match.rs:+1:17: +1:18\n           _2 = const false;                // scope 0 at $DIR/simplify_match.rs:+1:21: +1:26\n -         switchInt(_2) -> [0: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_match.rs:+1:5: +1:31\n +         switchInt(const false) -> [0: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_match.rs:+1:5: +1:31"}, {"sha": "da6389676f0d47967a061b36841635925825d333", "filename": "tests/mir-opt/slice_filter.variant_a-{closure#0}.CopyProp.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.CopyProp.diff?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -101,16 +101,16 @@\n       }\n   \n       bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n+-         StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n           _25 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n           _3 = &((*_25).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-          StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n+-         StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n           _26 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n           _4 = &((*_26).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-          StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n+-         StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n           _27 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n           _5 = &((*_27).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-          StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n+-         StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n           _28 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n           _6 = &((*_28).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n           StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56"}, {"sha": "294c3272f4f1020b92e7b6da63ae7e8999660947", "filename": "tests/mir-opt/slice_filter.variant_a-{closure#0}.DestinationPropagation.diff", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_a-%7Bclosure%230%7D.DestinationPropagation.diff?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -85,16 +85,12 @@\n       }\n   \n       bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n           _25 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n           _3 = &((*_25).0: usize);         // scope 0 at $DIR/slice_filter.rs:+0:27: +0:28\n-          StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n           _26 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n           _4 = &((*_26).1: usize);         // scope 0 at $DIR/slice_filter.rs:+0:30: +0:31\n-          StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n           _27 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n           _5 = &((*_27).2: usize);         // scope 0 at $DIR/slice_filter.rs:+0:33: +0:34\n-          StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n           _28 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n           _6 = &((*_28).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n -         StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56"}, {"sha": "5e4bdbdfa2e2f9683e0b5206db7181c30c81db94", "filename": "tests/mir-opt/slice_filter.variant_b-{closure#0}.CopyProp.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.CopyProp.diff?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -33,16 +33,16 @@\n       }\n   \n       bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n+-         StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n           _21 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n           _3 = ((*_21).0: usize);          // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n-          StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n+-         StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n           _22 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n           _4 = ((*_22).1: usize);          // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n-          StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n+-         StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n           _23 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n           _5 = ((*_23).2: usize);          // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n-          StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n+-         StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n           _24 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n           _6 = ((*_24).3: usize);          // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n           StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58"}, {"sha": "45af6600cd4e8ed268756a700123dbe015795fea", "filename": "tests/mir-opt/slice_filter.variant_b-{closure#0}.DestinationPropagation.diff", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_filter.variant_b-%7Bclosure%230%7D.DestinationPropagation.diff?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -25,16 +25,12 @@\n       }\n   \n       bb0: {\n-          StorageLive(_3);                 // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n           _13 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n           _3 = ((*_13).0: usize);          // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30\n-          StorageLive(_4);                 // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n           _14 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n           _4 = ((*_14).1: usize);          // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33\n-          StorageLive(_5);                 // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n           _15 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n           _5 = ((*_15).2: usize);          // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n-          StorageLive(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n           _16 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n           _6 = ((*_16).3: usize);          // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n -         StorageLive(_7);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58"}, {"sha": "a4d2660ca6aeb54ff421adcb22bbd51462ab335b", "filename": "tests/mir-opt/try_identity_e2e.new.PreCodegen.after.mir", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Ftry_identity_e2e.new.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Ftry_identity_e2e.new.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Ftry_identity_e2e.new.PreCodegen.after.mir?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -30,7 +30,6 @@ fn new(_1: Result<T, E>) -> Result<T, E> {\n     }\n \n     bb1: {\n-        StorageLive(_5);                 // scope 0 at $DIR/try_identity_e2e.rs:+5:21: +5:22\n         _5 = move ((_1 as Err).0: E);    // scope 0 at $DIR/try_identity_e2e.rs:+5:21: +5:22\n         Deinit(_2);                      // scope 2 at $DIR/try_identity_e2e.rs:+5:27: +5:48\n         ((_2 as Break).0: E) = move _5;  // scope 2 at $DIR/try_identity_e2e.rs:+5:27: +5:48\n@@ -40,7 +39,6 @@ fn new(_1: Result<T, E>) -> Result<T, E> {\n     }\n \n     bb2: {\n-        StorageLive(_4);                 // scope 0 at $DIR/try_identity_e2e.rs:+4:20: +4:21\n         _4 = move ((_1 as Ok).0: T);     // scope 0 at $DIR/try_identity_e2e.rs:+4:20: +4:21\n         Deinit(_2);                      // scope 1 at $DIR/try_identity_e2e.rs:+4:26: +4:50\n         ((_2 as Continue).0: T) = move _4; // scope 1 at $DIR/try_identity_e2e.rs:+4:26: +4:50\n@@ -50,7 +48,6 @@ fn new(_1: Result<T, E>) -> Result<T, E> {\n     }\n \n     bb3: {\n-        StorageLive(_8);                 // scope 0 at $DIR/try_identity_e2e.rs:+9:32: +9:33\n         _8 = move ((_2 as Break).0: E);  // scope 0 at $DIR/try_identity_e2e.rs:+9:32: +9:33\n         Deinit(_0);                      // scope 4 at $DIR/try_identity_e2e.rs:+9:45: +9:51\n         ((_0 as Err).0: E) = move _8;    // scope 4 at $DIR/try_identity_e2e.rs:+9:45: +9:51\n@@ -64,7 +61,6 @@ fn new(_1: Result<T, E>) -> Result<T, E> {\n     }\n \n     bb5: {\n-        StorageLive(_7);                 // scope 0 at $DIR/try_identity_e2e.rs:+8:35: +8:36\n         _7 = move ((_2 as Continue).0: T); // scope 0 at $DIR/try_identity_e2e.rs:+8:35: +8:36\n         Deinit(_0);                      // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +11:6\n         ((_0 as Ok).0: T) = move _7;     // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +11:6"}, {"sha": "37851c66a6076006578e735fee0b181559b75db8", "filename": "tests/mir-opt/try_identity_e2e.old.PreCodegen.after.mir", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Ftry_identity_e2e.old.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fmir-opt%2Ftry_identity_e2e.old.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Ftry_identity_e2e.old.PreCodegen.after.mir?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -19,7 +19,6 @@ fn old(_1: Result<T, E>) -> Result<T, E> {\n     }\n \n     bb1: {\n-        StorageLive(_4);                 // scope 0 at $DIR/try_identity_e2e.rs:+4:17: +4:18\n         _4 = move ((_1 as Err).0: E);    // scope 0 at $DIR/try_identity_e2e.rs:+4:17: +4:18\n         Deinit(_0);                      // scope 2 at $DIR/try_identity_e2e.rs:+4:30: +4:36\n         ((_0 as Err).0: E) = move _4;    // scope 2 at $DIR/try_identity_e2e.rs:+4:30: +4:36\n@@ -32,7 +31,6 @@ fn old(_1: Result<T, E>) -> Result<T, E> {\n     }\n \n     bb3: {\n-        StorageLive(_3);                 // scope 0 at $DIR/try_identity_e2e.rs:+3:16: +3:17\n         _3 = move ((_1 as Ok).0: T);     // scope 0 at $DIR/try_identity_e2e.rs:+3:16: +3:17\n         Deinit(_0);                      // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +6:6\n         ((_0 as Ok).0: T) = move _3;     // scope 0 at $DIR/try_identity_e2e.rs:+1:5: +6:6"}, {"sha": "589b2c3784926dc5a35ef647a26f02be58708b96", "filename": "tests/ui/did_you_mean/issue-46718-struct-pattern-dotdotdot.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fui%2Fdid_you_mean%2Fissue-46718-struct-pattern-dotdotdot.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fui%2Fdid_you_mean%2Fissue-46718-struct-pattern-dotdotdot.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdid_you_mean%2Fissue-46718-struct-pattern-dotdotdot.stderr?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -2,7 +2,12 @@ error: expected field pattern, found `...`\n   --> $DIR/issue-46718-struct-pattern-dotdotdot.rs:11:55\n    |\n LL |             PersonalityInventory { expressivity: exp, ... } => exp\n-   |                                                       ^^^ help: to omit remaining fields, use one fewer `.`: `..`\n+   |                                                       ^^^\n+   |\n+help: to omit remaining fields, use `..`\n+   |\n+LL |             PersonalityInventory { expressivity: exp, .. } => exp\n+   |                                                       ~~\n \n error: aborting due to previous error\n "}, {"sha": "30173b1b4be031eb2642eab7234bb7b65e439548", "filename": "tests/ui/half-open-range-patterns/half-open-range-pats-inclusive-match-arrow.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-match-arrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-match-arrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-match-arrow.rs?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -2,7 +2,8 @@ fn main() {\n     let x = 42;\n     match x {\n         0..=73 => {},\n-        74..=> {},   //~ ERROR unexpected `=>` after open range\n-                     //~^ ERROR expected one of `=>`, `if`, or `|`, found `>`\n+        74..=> {},\n+        //~^ ERROR unexpected `>` after inclusive range\n+        //~| NOTE this is parsed as an inclusive range `..=`\n     }\n }"}, {"sha": "cb7f998df7a5b1471191ee7c46381b2662caf061", "filename": "tests/ui/half-open-range-patterns/half-open-range-pats-inclusive-match-arrow.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-match-arrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-match-arrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-match-arrow.stderr?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -1,19 +1,15 @@\n-error: unexpected `=>` after open range\n-  --> $DIR/half-open-range-pats-inclusive-match-arrow.rs:5:11\n+error: unexpected `>` after inclusive range\n+  --> $DIR/half-open-range-pats-inclusive-match-arrow.rs:5:14\n    |\n LL |         74..=> {},\n-   |           ^^^\n+   |           ---^\n+   |           |\n+   |           this is parsed as an inclusive range `..=`\n    |\n help: add a space between the pattern and `=>`\n    |\n LL |         74.. => {},\n    |             +\n \n-error: expected one of `=>`, `if`, or `|`, found `>`\n-  --> $DIR/half-open-range-pats-inclusive-match-arrow.rs:5:14\n-   |\n-LL |         74..=> {},\n-   |              ^ expected one of `=>`, `if`, or `|`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "ba8174a823b2a30991c0179edbc664a6c8f4e202", "filename": "tests/ui/parser/issue-102806.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fui%2Fparser%2Fissue-102806.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fui%2Fparser%2Fissue-102806.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissue-102806.stderr?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -32,7 +32,12 @@ error: expected field pattern, found `...`\n   --> $DIR/issue-102806.rs:21:22\n    |\n LL |     let V3 { z: val, ... } = v;\n-   |                      ^^^ help: to omit remaining fields, use one fewer `.`: `..`\n+   |                      ^^^\n+   |\n+help: to omit remaining fields, use `..`\n+   |\n+LL |     let V3 { z: val, .. } = v;\n+   |                      ~~\n \n error[E0063]: missing fields `x` and `y` in initializer of `V3`\n   --> $DIR/issue-102806.rs:17:13"}, {"sha": "e0dc356d5467bb996d9c9db592bf4dc0859e411d", "filename": "tests/ui/parser/issues/issue-63135.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fui%2Fparser%2Fissues%2Fissue-63135.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fui%2Fparser%2Fissues%2Fissue-63135.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-63135.stderr?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -20,7 +20,12 @@ error: expected field pattern, found `...`\n   --> $DIR/issue-63135.rs:3:8\n    |\n LL | fn i(n{...,f #\n-   |        ^^^ help: to omit remaining fields, use one fewer `.`: `..`\n+   |        ^^^\n+   |\n+help: to omit remaining fields, use `..`\n+   |\n+LL | fn i(n{..,f #\n+   |        ~~\n \n error: expected `}`, found `,`\n   --> $DIR/issue-63135.rs:3:11"}, {"sha": "9bb87026b6418b00eaf1b8d778549f5e733583eb", "filename": "tests/ui/stats/hir-stats.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fui%2Fstats%2Fhir-stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fui%2Fstats%2Fhir-stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstats%2Fhir-stats.rs?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -1,7 +1,11 @@\n // check-pass\n // compile-flags: -Zhir-stats\n // only-x86_64\n-// ignore-stage1  FIXME: remove after next bootstrap bump\n+\n+// Type layouts sometimes change. When that happens, until the next bootstrap\n+// bump occurs, stage1 and stage2 will give different outputs for this test.\n+// Add an `ignore-stage1` comment marker to work around that problem during\n+// that time.\n \n // The aim here is to include at least one of every different type of top-level\n // AST/HIR node reported by `-Zhir-stats`."}, {"sha": "b569993c6143edeff75e58bcf35395ba12bcee61", "filename": "tests/ui/structs-enums/struct-enum-ignoring-field-with-underscore.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fui%2Fstructs-enums%2Fstruct-enum-ignoring-field-with-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fui%2Fstructs-enums%2Fstruct-enum-ignoring-field-with-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstructs-enums%2Fstruct-enum-ignoring-field-with-underscore.rs?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -7,6 +7,5 @@ fn main() {\n     let foo = Some(Foo::Other);\n \n     if let Some(Foo::Bar {_}) = foo {}\n-    //~^ ERROR expected identifier, found reserved identifier `_`\n-    //~| ERROR pattern does not mention field `bar` [E0027]\n+    //~^ ERROR expected field pattern, found `_`\n }"}, {"sha": "2f3a150e5cba92566aadd814edcbad3e2fb000a4", "filename": "tests/ui/structs-enums/struct-enum-ignoring-field-with-underscore.stderr", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fui%2Fstructs-enums%2Fstruct-enum-ignoring-field-with-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fui%2Fstructs-enums%2Fstruct-enum-ignoring-field-with-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstructs-enums%2Fstruct-enum-ignoring-field-with-underscore.stderr?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -1,24 +1,13 @@\n-error: expected identifier, found reserved identifier `_`\n+error: expected field pattern, found `_`\n   --> $DIR/struct-enum-ignoring-field-with-underscore.rs:9:27\n    |\n LL |     if let Some(Foo::Bar {_}) = foo {}\n-   |                           ^ expected identifier, found reserved identifier\n-\n-error[E0027]: pattern does not mention field `bar`\n-  --> $DIR/struct-enum-ignoring-field-with-underscore.rs:9:17\n-   |\n-LL |     if let Some(Foo::Bar {_}) = foo {}\n-   |                 ^^^^^^^^^^^^ missing field `bar`\n-   |\n-help: include the missing field in the pattern\n+   |                           ^\n    |\n-LL |     if let Some(Foo::Bar {_, bar }) = foo {}\n-   |                            ~~~~~~~\n-help: if you don't care about this missing field, you can explicitly ignore it\n+help: to omit remaining fields, use `..`\n    |\n-LL |     if let Some(Foo::Bar {_, .. }) = foo {}\n-   |                            ~~~~~~\n+LL |     if let Some(Foo::Bar {..}) = foo {}\n+   |                           ~~\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0027`."}, {"sha": "61598541ddf0d51108368bd5a55972e194eb55d3", "filename": "tests/ui/uninhabited/issue-107505.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fui%2Funinhabited%2Fissue-107505.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3126500f25114ba4e0ac3e76694dd45a22de56d/tests%2Fui%2Funinhabited%2Fissue-107505.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinhabited%2Fissue-107505.rs?ref=f3126500f25114ba4e0ac3e76694dd45a22de56d", "patch": "@@ -0,0 +1,18 @@\n+// compile-flags: --crate-type=lib\n+// check-pass\n+\n+// Make sure we don't pass inference variables to uninhabitedness checks in borrowck\n+\n+struct Command<'s> {\n+    session: &'s (),\n+    imp: std::convert::Infallible,\n+}\n+\n+fn command(_: &()) -> Command<'_> {\n+    unreachable!()\n+}\n+\n+fn with_session<'s>(a: &std::process::Command, b: &'s ()) -> Command<'s> {\n+    a.get_program();\n+    command(b)\n+}"}]}