{"sha": "ddc8cc92c998b7d80c782d00d178c791ab564915", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkYzhjYzkyYzk5OGI3ZDgwYzc4MmQwMGQxNzhjNzkxYWI1NjQ5MTU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-08-11T11:12:23Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-08-29T08:05:26Z"}, "message": "rustc: remove a trait that is unnecessary after pretty move.\n\nThe type in the `impl` is now in the module with the trait.", "tree": {"sha": "26f7b5262f94413b9700ca89e8c1072f5adf8186", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26f7b5262f94413b9700ca89e8c1072f5adf8186"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddc8cc92c998b7d80c782d00d178c791ab564915", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddc8cc92c998b7d80c782d00d178c791ab564915", "html_url": "https://github.com/rust-lang/rust/commit/ddc8cc92c998b7d80c782d00d178c791ab564915", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddc8cc92c998b7d80c782d00d178c791ab564915/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "149032aff393de695c068c4cd907d99ec75a3f7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/149032aff393de695c068c4cd907d99ec75a3f7a", "html_url": "https://github.com/rust-lang/rust/commit/149032aff393de695c068c4cd907d99ec75a3f7a"}], "stats": {"total": 52, "additions": 21, "deletions": 31}, "files": [{"sha": "d7118c7e54c75be16907782ddd21b97bf812a394", "filename": "src/librustc/driver/pretty.rs", "status": "modified", "additions": 21, "deletions": 31, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ddc8cc92c998b7d80c782d00d178c791ab564915/src%2Flibrustc%2Fdriver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddc8cc92c998b7d80c782d00d178c791ab564915/src%2Flibrustc%2Fdriver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fpretty.rs?ref=ddc8cc92c998b7d80c782d00d178c791ab564915", "patch": "@@ -87,15 +87,33 @@ pub fn parse_pretty(sess: &Session, name: &str) -> (PpMode, Option<UserIdentifie\n // (The `use_once_payload` is working around the current lack of once\n // functions in the compiler.)\n \n-trait CratePrinter {\n+impl PpSourceMode {\n     /// Constructs a `PrinterSupport` object and passes it to `f`.\n     fn call_with_pp_support<A,B>(&self,\n                                  sess: Session,\n                                  krate: &ast::Crate,\n                                  ast_map: Option<ast_map::Map>,\n                                  id: String,\n-                                 use_once_payload: B,\n-                                 f: |&PrinterSupport, B| -> A) -> A;\n+                                 payload: B,\n+                                 f: |&PrinterSupport, B| -> A) -> A {\n+        match *self {\n+            PpmNormal | PpmExpanded => {\n+                let annotation = NoAnn { sess: sess, ast_map: ast_map };\n+                f(&annotation, payload)\n+            }\n+\n+            PpmIdentified | PpmExpandedIdentified => {\n+                let annotation = IdentifiedAnnotation { sess: sess, ast_map: ast_map };\n+                f(&annotation, payload)\n+            }\n+            PpmTyped => {\n+                let ast_map = ast_map.expect(\"--pretty=typed missing ast_map\");\n+                let analysis = driver::phase_3_run_analysis_passes(sess, krate, ast_map, id);\n+                let annotation = TypedAnnotation { analysis: analysis };\n+                f(&annotation, payload)\n+            }\n+        }\n+    }\n }\n \n trait SessionCarrier {\n@@ -339,34 +357,6 @@ impl UserIdentifiedItem {\n     }\n }\n \n-impl CratePrinter for PpSourceMode {\n-    fn call_with_pp_support<A,B>(&self,\n-                                 sess: Session,\n-                                 krate: &ast::Crate,\n-                                 ast_map: Option<ast_map::Map>,\n-                                 id: String,\n-                                 payload: B,\n-                                 f: |&PrinterSupport, B| -> A) -> A {\n-        match *self {\n-            PpmNormal | PpmExpanded => {\n-                let annotation = NoAnn { sess: sess, ast_map: ast_map };\n-                f(&annotation, payload)\n-            }\n-\n-            PpmIdentified | PpmExpandedIdentified => {\n-                let annotation = IdentifiedAnnotation { sess: sess, ast_map: ast_map };\n-                f(&annotation, payload)\n-            }\n-            PpmTyped => {\n-                let ast_map = ast_map.expect(\"--pretty=typed missing ast_map\");\n-                let analysis = driver::phase_3_run_analysis_passes(sess, krate, ast_map, id);\n-                let annotation = TypedAnnotation { analysis: analysis };\n-                f(&annotation, payload)\n-            }\n-        }\n-    }\n-}\n-\n fn needs_ast_map(ppm: &PpMode, opt_uii: &Option<UserIdentifiedItem>) -> bool {\n     match *ppm {\n         PpmSource(PpmNormal) |"}]}