{"sha": "15c0c35352720efd32bcfc5f4ae05b95f05cd1c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YzBjMzUzNTI3MjBlZmQzMmJjZmM1ZjRhZTA1Yjk1ZjA1Y2QxYzA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-02-22T00:15:01Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-02-22T01:51:55Z"}, "message": "mk: Split target triples into bulid triple + host triples + target triples\n\nFor cross compiling to targets that don't want to build a compiler", "tree": {"sha": "a40347e2091b9c3717b3db5e5e7d89ffea4d1221", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a40347e2091b9c3717b3db5e5e7d89ffea4d1221"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0", "html_url": "https://github.com/rust-lang/rust/commit/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0767bf24f7a526430472290825ebd9158cb1dcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0767bf24f7a526430472290825ebd9158cb1dcc", "html_url": "https://github.com/rust-lang/rust/commit/e0767bf24f7a526430472290825ebd9158cb1dcc"}], "stats": {"total": 309, "additions": 170, "deletions": 139}, "files": [{"sha": "fedcd4f312900785fc305f12703fa4352676fc94", "filename": "Makefile.in", "status": "modified", "additions": 35, "deletions": 21, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=15c0c35352720efd32bcfc5f4ae05b95f05cd1c0", "patch": "@@ -70,16 +70,22 @@ include config.mk\n ALL_OBJ_FILES :=\n \n MKFILE_DEPS := config.stamp $(call rwildcard,$(CFG_SRC_DIR)mk/,*)\n-NON_HOST_TRIPLES = $(filter-out $(CFG_HOST_TRIPLE),$(CFG_TARGET_TRIPLES))\n+NON_BUILD_HOST_TRIPLES = $(filter-out $(CFG_BUILD_TRIPLE),$(CFG_HOST_TRIPLES))\n+NON_BUILD_TARGET_TRIPLES = $(filter-out $(CFG_BUILD_TRIPLE),$(CFG_TARGET_TRIPLES))\n \n ifneq ($(MAKE_RESTARTS),)\n CFG_INFO := $(info cfg: make restarts: $(MAKE_RESTARTS))\n endif\n \n-CFG_INFO := $(info cfg: shell host triple $(CFG_HOST_TRIPLE))\n+CFG_INFO := $(info cfg: build triple $(CFG_BUILD_TRIPLE))\n+CFG_INFO := $(info cfg: host triples $(CFG_HOST_TRIPLES))\n+CFG_INFO := $(info cfg: target triples $(CFG_TARGET_TRIPLES))\n \n-ifneq ($(wildcard $(NON_HOST_TRIPLES)),)\n-CFG_INFO := $(info cfg: non host triples $(NON_HOST_TRIPLES))\n+ifneq ($(wildcard $(NON_BUILD_HOST_TRIPLES)),)\n+CFG_INFO := $(info cfg: non-build host triples $(NON_BUILD_HOST_TRIPLES))\n+endif\n+ifneq ($(wildcard $(NON_BUILD_TARGET_TRIPLES)),)\n+CFG_INFO := $(info cfg: non-build target triples $(NON_BUILD_TARGET_TRIPLES))\n endif\n \n CFG_RUSTC_FLAGS := $(RUSTFLAGS)\n@@ -272,8 +278,8 @@ LLC_$(1)=$$(CFG_LLVM_INST_DIR_$(1))/bin/llc$$(X)\n \n endef\n \n-$(foreach target,$(CFG_TARGET_TRIPLES), \\\n- $(eval $(call DEF_LLVM_VARS,$(target))))\n+$(foreach host,$(CFG_HOST_TRIPLES), \\\n+ $(eval $(call DEF_LLVM_VARS,$(host))))\n \n ######################################################################\n # Exports for sub-utilities\n@@ -285,7 +291,7 @@ $(foreach target,$(CFG_TARGET_TRIPLES), \\\n export CFG_SRC_DIR\n export CFG_BUILD_DIR\n export CFG_VERSION\n-export CFG_HOST_TRIPLE\n+export CFG_BUILD_TRIPLE\n export CFG_LLVM_ROOT\n export CFG_ENABLE_MINGW_CROSS\n export CFG_PREFIX\n@@ -409,7 +415,7 @@ CFGFLAG$(1)_T_$(2)_H_$(3) = stage$(1)\n # if you're building a cross config, the host->* parts are\n # effectively stage1, since it uses the just-built stage0.\n ifeq ($(1),0)\n-ifneq ($(strip $(CFG_HOST_TRIPLE)),$(strip $(3)))\n+ifneq ($(strip $(CFG_BUILD_TRIPLE)),$(strip $(3)))\n CFGFLAG$(1)_T_$(2)_H_$(3) = stage1\n endif\n endif\n@@ -430,7 +436,7 @@ PERF_STAGE$(1)_T_$(2)_H_$(3) := \t\t\t\t\\\n \n endef\n \n-$(foreach build,$(CFG_TARGET_TRIPLES), \\\n+$(foreach build,$(CFG_HOST_TRIPLES), \\\n  $(eval $(foreach target,$(CFG_TARGET_TRIPLES), \\\n   $(eval $(foreach stage,$(STAGES), \\\n    $(eval $(call SREQ,$(stage),$(target),$(build))))))))\n@@ -451,13 +457,13 @@ rustc-stage$(2)-H-$(1):\t\t\t\t\t\t\t\\\n \n endef\n \n-$(foreach host,$(CFG_TARGET_TRIPLES),\t\t\t\t\t\t\t\\\n+$(foreach host,$(CFG_HOST_TRIPLES),\t\t\t\t\t\t\t\\\n  $(eval $(foreach stage,1 2 3,\t\t\t\t\t\t\t\t\t\\\n   $(eval $(call DEF_RUSTC_STAGE_TARGET,$(host),$(stage))))))\n \n-rustc-stage1: rustc-stage1-H-$(CFG_HOST_TRIPLE)\n-rustc-stage2: rustc-stage2-H-$(CFG_HOST_TRIPLE)\n-rustc-stage3: rustc-stage3-H-$(CFG_HOST_TRIPLE)\n+rustc-stage1: rustc-stage1-H-$(CFG_BUILD_TRIPLE)\n+rustc-stage2: rustc-stage2-H-$(CFG_BUILD_TRIPLE)\n+rustc-stage3: rustc-stage3-H-$(CFG_BUILD_TRIPLE)\n \n define DEF_RUSTC_TARGET\n # $(1) == architecture\n@@ -468,12 +474,12 @@ endef\n $(foreach host,$(CFG_TARGET_TRIPLES),\t\t\t\\\n  $(eval $(call DEF_RUSTC_TARGET,$(host))))\n \n-rustc-stage1: rustc-stage1-H-$(CFG_HOST_TRIPLE)\n-rustc-stage2: rustc-stage2-H-$(CFG_HOST_TRIPLE)\n-rustc-stage3: rustc-stage3-H-$(CFG_HOST_TRIPLE)\n-rustc: rustc-H-$(CFG_HOST_TRIPLE)\n+rustc-stage1: rustc-stage1-H-$(CFG_BUILD_TRIPLE)\n+rustc-stage2: rustc-stage2-H-$(CFG_BUILD_TRIPLE)\n+rustc-stage3: rustc-stage3-H-$(CFG_BUILD_TRIPLE)\n+rustc: rustc-H-$(CFG_BUILD_TRIPLE)\n \n-rustc-H-all: $(foreach host,$(CFG_TARGET_TRIPLES),rustc-H-$(host))\n+rustc-H-all: $(foreach host,$(CFG_HOST_TRIPLES),rustc-H-$(host))\n \n ######################################################################\n # Entrypoint rule\n@@ -489,19 +495,27 @@ CFG_INFO := $(info cfg: *** stage2 and later will not be built ***)\n CFG_INFO := $(info cfg:)\n \n #XXX This is surely busted\n-all: $(SREQ1$(CFG_HOST_TRIPLE)) $(GENERATED) docs\n+all: $(SREQ1$(CFG_BUILD_TRIPLE)) $(GENERATED) docs\n \n else\n \n define ALL_TARGET_N\n+ifneq ($$(findstring $(1),$$(CFG_HOST_TRIPLES)),)\n+# This is a host\n all-target-$(1)-host-$(2): $$(CSREQ2_T_$(1)_H_$(2))\n+else\n+# This is a target only\n+all-target-$(1)-host-$(2): $$(SREQ2_T_$(1)_H_$(2))\n+endif\n endef\n \n $(foreach target,$(CFG_TARGET_TRIPLES), \\\n- $(eval $(call ALL_TARGET_N,$(target),$(CFG_HOST_TRIPLE))))\n+ $(foreach host,$(CFG_HOST_TRIPLES), \\\n+ $(eval $(call ALL_TARGET_N,$(target),$(host)))))\n \n ALL_TARGET_RULES = $(foreach target,$(CFG_TARGET_TRIPLES), \\\n- all-target-$(target)-host-$(CFG_HOST_TRIPLE))\n+\t$(foreach host,$(CFG_HOST_TRIPLES), \\\n+ all-target-$(target)-host-$(host)))\n \n all: $(ALL_TARGET_RULES) $(GENERATED) docs\n "}, {"sha": "5249058fe0c12fa76655b15db4a92170ab5d59ad", "filename": "configure", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/configure", "raw_url": "https://github.com/rust-lang/rust/raw/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=15c0c35352720efd32bcfc5f4ae05b95f05cd1c0", "patch": "@@ -301,7 +301,7 @@ then\n fi\n \n \n-DEFAULT_HOST_TRIPLE=\"${CFG_CPUTYPE}-${CFG_OSTYPE}\"\n+DEFAULT_BUILD_TRIPLE=\"${CFG_CPUTYPE}-${CFG_OSTYPE}\"\n \n CFG_SRC_DIR=\"$(cd $(dirname $0) && pwd)/\"\n CFG_BUILD_DIR=\"$(pwd)/\"\n@@ -346,8 +346,9 @@ opt pax-flags 0 \"apply PaX flags to rustc binaries (required for GRSecurity/PaX-\n valopt prefix \"/usr/local\" \"set installation prefix\"\n valopt local-rust-root \"/usr/local\" \"set prefix for local rust binary\"\n valopt llvm-root \"\" \"set LLVM root\"\n-valopt host-triple \"${DEFAULT_HOST_TRIPLE}\" \"LLVM host triple\"\n-valopt target-triples \"${CFG_HOST_TRIPLE}\" \"LLVM target triples\"\n+valopt build-triple \"${DEFAULT_BUILD_TRIPLE}\" \"LLVM build triple\"\n+valopt host-triples \"${CFG_BUILD_TRIPLE}\" \"LLVM host triples\"\n+valopt target-triples \"${CFG_HOST_TRIPLES}\" \"LLVM target triples\"\n \n # Validate Options\n step_msg \"validating $CFG_SELF args\"\n@@ -532,10 +533,6 @@ fi\n \n CFG_PREFIX=${CFG_PREFIX%/}\n CFG_TARGET_TRIPLES=\"$(echo $CFG_TARGET_TRIPLES | tr ',' ' ')\"\n-case $CFG_TARGET_TRIPLES in\n-    (*$CFG_HOST_TRIPLE*) ;;\n-    (*) err \"Host triple is not among the target triples.\" ;;\n-esac\n \n if [ -z \"$CFG_ENABLE_CLANG\" -a -z \"$CFG_GCC\" ]\n then\n@@ -562,13 +559,13 @@ do\n done\n \n make_dir llvm\n-for t in $CFG_TARGET_TRIPLES\n+for t in $CFG_HOST_TRIPLES\n do\n     make_dir llvm/$t\n done\n \n make_dir rustllvm\n-for t in $CFG_TARGET_TRIPLES\n+for t in $CFG_HOST_TRIPLES\n do\n     make_dir rustllvm/$t\n done\n@@ -593,7 +590,7 @@ then\n     CFG_LIBDIR=bin\n fi\n \n-for h in $CFG_TARGET_TRIPLES\n+for h in $CFG_HOST_TRIPLES\n do\n     for t in $CFG_TARGET_TRIPLES\n     do\n@@ -669,7 +666,7 @@ fi\n # Configure llvm, only if necessary\n step_msg \"looking at LLVM\"\n CFG_LLVM_SRC_DIR=${CFG_SRC_DIR}src/llvm/\n-for t in $CFG_TARGET_TRIPLES\n+for t in $CFG_HOST_TRIPLES\n do\n     do_reconfigure=1\n \n@@ -819,6 +816,8 @@ putvar CFG_OSTYPE\n putvar CFG_CPUTYPE\n putvar CFG_CONFIGURE_ARGS\n putvar CFG_PREFIX\n+putvar CFG_BUILD_TRIPLE\n+putvar CFG_HOST_TRIPLES\n putvar CFG_TARGET_TRIPLES\n putvar CFG_C_COMPILER\n putvar CFG_LIBDIR\n@@ -854,7 +853,7 @@ fi\n putvar CFG_LLVM_ROOT\n putvar CFG_LLVM_SRC_DIR\n \n-for t in $CFG_TARGET_TRIPLES\n+for t in $CFG_HOST_TRIPLES\n do\n     CFG_LLVM_BUILD_DIR=$(echo CFG_LLVM_BUILD_DIR_${t} | tr - _)\n     CFG_LLVM_INST_DIR=$(echo CFG_LLVM_INST_DIR_${t} | tr - _)"}, {"sha": "00feb18b0d282e1780b33aeeb991f4a8b5c03586", "filename": "mk/clean.mk", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/mk%2Fclean.mk", "raw_url": "https://github.com/rust-lang/rust/raw/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/mk%2Fclean.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fclean.mk?ref=15c0c35352720efd32bcfc5f4ae05b95f05cd1c0", "patch": "@@ -14,7 +14,7 @@\n \n CLEAN_STAGE_RULES =\t\t\t\t\t\t\t\t\\\n  $(foreach stage, $(STAGES),\t\t\t\t\t\\\n-  $(foreach host, $(CFG_TARGET_TRIPLES),\t\t\\\n+  $(foreach host, $(CFG_HOST_TRIPLES),\t\t\\\n    clean$(stage)_H_$(host)\t\t\t\t\t\t\\\n    $(foreach target, $(CFG_TARGET_TRIPLES),\t\t\\\n     clean$(stage)_T_$(target)_H_$(host))))\n@@ -33,15 +33,15 @@ clean: clean-misc $(CLEAN_STAGE_RULES)\n \n clean-misc:\n \t@$(call E, cleaning)\n-\t$(Q)find rustllvm rt $(CFG_HOST_TRIPLE)/test \\\n+\t$(Q)find rustllvm rt $(CFG_BUILD_TRIPLE)/test \\\n          -name '*.[odasS]' -o \\\n          -name '*.so' -o      \\\n          -name '*.dylib' -o   \\\n          -name '*.dll' -o     \\\n          -name '*.def' -o     \\\n          -name '*.bc'         \\\n          | xargs rm -f\n-\t$(Q)find rustllvm rt $(CFG_HOST_TRIPLE)\\\n+\t$(Q)find rustllvm rt $(CFG_BUILD_TRIPLE)\\\n          -name '*.dSYM'       \\\n          | xargs rm -Rf\n \t$(Q)rm -f $(RUNTIME_OBJS) $(RUNTIME_DEF)\n@@ -93,7 +93,7 @@ clean$(1)_H_$(2):\n \n endef\n \n-$(foreach host, $(CFG_TARGET_TRIPLES), \\\n+$(foreach host, $(CFG_HOST_TRIPLES), \\\n  $(eval $(foreach stage, $(STAGES), \\\n   $(eval $(call CLEAN_HOST_STAGE_N,$(stage),$(host))))))\n \n@@ -127,12 +127,12 @@ clean$(1)_T_$(2)_H_$(3):\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/run_pass_stage* # For windows\n endef\n \n-$(foreach host, $(CFG_TARGET_TRIPLES), \\\n+$(foreach host, $(CFG_HOST_TRIPLES), \\\n  $(eval $(foreach target, $(CFG_TARGET_TRIPLES), \\\n   $(eval $(foreach stage, 0 1 2 3, \\\n    $(eval $(call CLEAN_TARGET_STAGE_N,$(stage),$(target),$(host))))))))\n \n-define DEF_CLEAN_LLVM_TARGET\n+define DEF_CLEAN_LLVM_HOST\n ifeq ($(CFG_LLVM_ROOT),)\n clean-llvm$(1):\n \t$$(Q)$$(MAKE) -C $$(CFG_LLVM_BUILD_DIR_$(1)) clean\n@@ -142,5 +142,5 @@ clean-llvm$(1): ;\n endif\n endef\n \n-$(foreach target, $(CFG_TARGET_TRIPLES), \\\n- $(eval $(call DEF_CLEAN_LLVM_TARGET,$(target))))\n+$(foreach host, $(CFG_HOST_TRIPLES), \\\n+ $(eval $(call DEF_CLEAN_LLVM_HOST,$(host))))"}, {"sha": "db04fd8a92b3dba60bc3719605277729f3d64b42", "filename": "mk/docs.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=15c0c35352720efd32bcfc5f4ae05b95f05cd1c0", "patch": "@@ -171,7 +171,7 @@ ifeq ($(CFG_PANDOC),)\n else\n \n # The rustdoc executable\n-RUSTDOC = $(HBIN2_H_$(CFG_HOST_TRIPLE))/rustdoc$(X)\n+RUSTDOC = $(HBIN2_H_$(CFG_BUILD_TRIPLE))/rustdoc$(X)\n \n # The library documenting macro\n # $(1) - The output directory"}, {"sha": "08a300e71e1f57b017b6752a6016c9a7f7673555", "filename": "mk/host.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/mk%2Fhost.mk", "raw_url": "https://github.com/rust-lang/rust/raw/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/mk%2Fhost.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fhost.mk?ref=15c0c35352720efd32bcfc5f4ae05b95f05cd1c0", "patch": "@@ -115,7 +115,7 @@ $$(HLIB$(2)_H_$(4))/$$(CFG_RUSTLLVM): \\\n \n endef\n \n-$(foreach t,$(CFG_TARGET_TRIPLES),\t\t\t\t\t\\\n+$(foreach t,$(CFG_HOST_TRIPLES),\t\t\t\t\t\\\n \t$(eval $(call CP_HOST_STAGE_N,0,1,$(t),$(t)))\t\\\n \t$(eval $(call CP_HOST_STAGE_N,1,2,$(t),$(t)))\t\\\n \t$(eval $(call CP_HOST_STAGE_N,2,3,$(t),$(t))))"}, {"sha": "07c45db1fe78ddd5c6e0c60e4de909e7f2bd0603", "filename": "mk/install.mk", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/mk%2Finstall.mk", "raw_url": "https://github.com/rust-lang/rust/raw/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/mk%2Finstall.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Finstall.mk?ref=15c0c35352720efd32bcfc5f4ae05b95f05cd1c0", "patch": "@@ -67,24 +67,24 @@ install-target-$(1)-host-$(2): $$(CSREQ$$(ISTAGE)_T_$(1)_H_$(2))\n endef\n \n $(foreach target,$(CFG_TARGET_TRIPLES), \\\n- $(eval $(call INSTALL_TARGET_N,$(target),$(CFG_HOST_TRIPLE))))\n+ $(eval $(call INSTALL_TARGET_N,$(target),$(CFG_BUILD_TRIPLE))))\n \n INSTALL_TARGET_RULES = $(foreach target,$(CFG_TARGET_TRIPLES), \\\n- install-target-$(target)-host-$(CFG_HOST_TRIPLE))\n+ install-target-$(target)-host-$(CFG_BUILD_TRIPLE))\n \n install: all install-host install-targets\n \n # Shorthand for build/stageN/bin\n-HB = $(HBIN$(ISTAGE)_H_$(CFG_HOST_TRIPLE))\n-HB2 = $(HBIN2_H_$(CFG_HOST_TRIPLE))\n+HB = $(HBIN$(ISTAGE)_H_$(CFG_BUILD_TRIPLE))\n+HB2 = $(HBIN2_H_$(CFG_BUILD_TRIPLE))\n # Shorthand for build/stageN/lib\n-HL = $(HLIB$(ISTAGE)_H_$(CFG_HOST_TRIPLE))\n+HL = $(HLIB$(ISTAGE)_H_$(CFG_BUILD_TRIPLE))\n # Shorthand for the prefix bin directory\n PHB = $(PREFIX_BIN)\n # Shorthand for the prefix bin directory\n PHL = $(PREFIX_LIB)\n \n-install-host: $(CSREQ$(ISTAGE)_T_$(CFG_HOST_TRIPLE)_H_$(CFG_HOST_TRIPLE))\n+install-host: $(CSREQ$(ISTAGE)_T_$(CFG_BUILD_TRIPLE)_H_$(CFG_BUILD_TRIPLE))\n \t$(Q)mkdir -p $(PREFIX_BIN)\n \t$(Q)mkdir -p $(PREFIX_LIB)\n \t$(Q)mkdir -p $(PREFIX_ROOT)/share/man/man1"}, {"sha": "77b6b4d96f3628c195139c9e630ad1e7fb391874", "filename": "mk/llvm.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/mk%2Fllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/mk%2Fllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fllvm.mk?ref=15c0c35352720efd32bcfc5f4ae05b95f05cd1c0", "patch": "@@ -30,5 +30,5 @@ endif\n \n endef\n \n-$(foreach target,$(CFG_TARGET_TRIPLES), \\\n- $(eval $(call DEF_LLVM_RULES,$(target))))\n+$(foreach host,$(CFG_HOST_TRIPLES), \\\n+ $(eval $(call DEF_LLVM_RULES,$(host))))"}, {"sha": "1997e0f4fe788f74a2786c8d9c770f23bd4858b6", "filename": "mk/perf.mk", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/mk%2Fperf.mk", "raw_url": "https://github.com/rust-lang/rust/raw/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/mk%2Fperf.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fperf.mk?ref=15c0c35352720efd32bcfc5f4ae05b95f05cd1c0", "patch": "@@ -10,16 +10,16 @@\n \n \n ifdef CFG_PERF_TOOL\n-rustc-perf$(X): $(CFG_HOST_TRIPLE)/stage2/bin/rustc$(X)\n+rustc-perf$(X): $(CFG_BUILD_TRIPLE)/stage2/bin/rustc$(X)\n \t@$(call E, perf compile: $@)\n-\t$(PERF_STAGE2_T_$(CFG_HOST_TRIPLE)_H_$(CFG_HOST_TRIPLE)) \\\n+\t$(PERF_STAGE2_T_$(CFG_BUILD_TRIPLE)_H_$(CFG_BUILD_TRIPLE)) \\\n \t\t -o $@ $(COMPILER_CRATE) >rustc-perf.err 2>&1\n \t$(Q)rm -f $(LIBRUSTC_GLOB)\n else\n-rustc-perf$(X): $(CFG_HOST_TRIPLE)/stage2/bin/rustc$(X)\n+rustc-perf$(X): $(CFG_BUILD_TRIPLE)/stage2/bin/rustc$(X)\n \t$(Q)touch $@\n endif\n \n perf: check-stage2-perf rustc-perf$(X)\n-\t$(Q)find $(CFG_HOST_TRIPLE)/test/perf -name \\*.err | xargs cat\n+\t$(Q)find $(CFG_BUILD_TRIPLE)/test/perf -name \\*.err | xargs cat\n \t$(Q)cat rustc-perf.err"}, {"sha": "51e6f088e4b092c0a593af458bca67ead5cf8e3e", "filename": "mk/platform.mk", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=15c0c35352720efd32bcfc5f4ae05b95f05cd1c0", "patch": "@@ -136,7 +136,7 @@ CFG_TESTLIB=$(CFG_BUILD_DIR)/$(2)/$(strip \\\n                stage2/$(CFG_LIBDIR), \\\n                $(if $(findstring stage3,$(1)), \\\n                     stage3/$(CFG_LIBDIR), \\\n-               )))))/rustc/$(CFG_HOST_TRIPLE)/$(CFG_LIBDIR)\n+               )))))/rustc/$(CFG_BUILD_TRIPLE)/$(CFG_LIBDIR)\n \n ifdef CFG_UNIXY\n   CFG_INFO := $(info cfg: unix-y environment)\n@@ -200,7 +200,7 @@ else\n   CFG_LDPATH :=\n   CFG_RUN=$(2)\n endif\n-  CFG_RUN_TARG=$(call CFG_RUN,$(HLIB$(1)_H_$(CFG_HOST_TRIPLE)),$(2))\n+  CFG_RUN_TARG=$(call CFG_RUN,$(HLIB$(1)_H_$(CFG_BUILD_TRIPLE)),$(2))\n   CFG_RUN_TEST=$(call CFG_RUN,$(call CFG_TESTLIB,$(1),$(3)),$(1))\n   CFG_LIBUV_LINK_FLAGS=-lWs2_32 -lpsapi -liphlpapi\n \n@@ -318,7 +318,7 @@ endif\n # .cfi pseudo-ops on mac\n define CFG_MAKE_ASSEMBLER\n   CFG_ASSEMBLE_$(1)=$$(CPP) $$(CFG_DEPEND_FLAGS) $$(2) | \\\n-                    $$(LLVM_MC_$$(CFG_HOST_TRIPLE)) \\\n+                    $$(LLVM_MC_$$(CFG_BUILD_TRIPLE)) \\\n                     -assemble \\\n                     -filetype=obj \\\n                     -triple=$(1) \\"}, {"sha": "b2668f201af44c53134371b049cb62600cf7dd6f", "filename": "mk/pp.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/mk%2Fpp.mk", "raw_url": "https://github.com/rust-lang/rust/raw/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/mk%2Fpp.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fpp.mk?ref=15c0c35352720efd32bcfc5f4ae05b95f05cd1c0", "patch": "@@ -26,10 +26,10 @@ else\n                        \"no-reformat\\|xfail-pretty\\|xfail-test\")\n endif\n \n-reformat: $(SREQ1$(CFG_HOST_TRIPLE))\n+reformat: $(SREQ1$(CFG_BUILD_TRIPLE))\n \t@$(call E, reformat [stage1]: $@)\n \tfor i in $(PP_INPUTS_FILTERED);  \\\n-    do $(call CFG_RUN_TARG,1,$(CFG_HOST_TRIPLE)/stage1/rustc$(X)) \\\n+    do $(call CFG_RUN_TARG,1,$(CFG_BUILD_TRIPLE)/stage1/rustc$(X)) \\\n        --pretty normal $$i >$$i.tmp; \\\n     if [ $$? -ne 0 ]; \\\n         then echo failed to print $$i; rm $$i.tmp; \\"}, {"sha": "3a566f3beb1386fa329a97f285cdca2c74f7b4b5", "filename": "mk/rt.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=15c0c35352720efd32bcfc5f4ae05b95f05cd1c0", "patch": "@@ -127,7 +127,7 @@ rt/$(1)/%.o: rt/%.c $$(MKFILE_DEPS)\n                  $$(SNAP_DEFINES)) $$<\n \n rt/$(1)/%.o: rt/%.S  $$(MKFILE_DEPS) \\\n-                     $$(LLVM_CONFIG_$$(CFG_HOST_TRIPLE))\n+                     $$(LLVM_CONFIG_$$(CFG_BUILD_TRIPLE))\n \t@$$(call E, compile: $$@)\n \t$$(Q)$$(call CFG_ASSEMBLE_$(1),$$@,$$<)\n "}, {"sha": "b9ceedb696e370d1f46b5493ab42df972367e3b2", "filename": "mk/rustllvm.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/mk%2Frustllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/mk%2Frustllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frustllvm.mk?ref=15c0c35352720efd32bcfc5f4ae05b95f05cd1c0", "patch": "@@ -46,5 +46,5 @@ rustllvm/$(1)/%.o: rustllvm/%.cpp $$(MKFILE_DEPS) $$(LLVM_CONFIG_$(1))\n endef\n \n # Instantiate template for all stages\n-$(foreach target,$(CFG_TARGET_TRIPLES), \\\n- $(eval $(call DEF_RUSTLLVM_TARGETS,$(target))))\n+$(foreach host,$(CFG_HOST_TRIPLES), \\\n+ $(eval $(call DEF_RUSTLLVM_TARGETS,$(host))))"}, {"sha": "ee52ed655ef750a33f8c37a4f0ee085d020874e1", "filename": "mk/snap.mk", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/mk%2Fsnap.mk", "raw_url": "https://github.com/rust-lang/rust/raw/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/mk%2Fsnap.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fsnap.mk?ref=15c0c35352720efd32bcfc5f4ae05b95f05cd1c0", "patch": "@@ -22,12 +22,12 @@ endif\n \n endef\n \n-$(foreach host,$(CFG_TARGET_TRIPLES),\t\t\t\t\t\t\\\n+$(foreach host,$(CFG_HOST_TRIPLES),\t\t\t\t\t\t\\\n  $(eval $(foreach stage,1 2 3,\t\t\t\t\t\t\t\t\\\n   $(eval $(call DEF_SNAP_FOR_STAGE_H,$(stage),$(host))))))\n \n-snap-stage1: snap-stage1-H-$(CFG_HOST_TRIPLE)\n+snap-stage1: snap-stage1-H-$(CFG_BUILD_TRIPLE)\n \n-snap-stage2: snap-stage2-H-$(CFG_HOST_TRIPLE)\n+snap-stage2: snap-stage2-H-$(CFG_BUILD_TRIPLE)\n \n-snap-stage3: snap-stage3-H-$(CFG_HOST_TRIPLE)\n+snap-stage3: snap-stage3-H-$(CFG_BUILD_TRIPLE)"}, {"sha": "a858134194e4c26d4164a1fe97ed915b337e783b", "filename": "mk/stage0.mk", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/mk%2Fstage0.mk", "raw_url": "https://github.com/rust-lang/rust/raw/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/mk%2Fstage0.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage0.mk?ref=15c0c35352720efd32bcfc5f4ae05b95f05cd1c0", "patch": "@@ -2,16 +2,16 @@\n \n \n \n-$(HBIN0_H_$(CFG_HOST_TRIPLE))/rustc$(X):\t\t\\\n+$(HBIN0_H_$(CFG_BUILD_TRIPLE))/rustc$(X):\t\t\\\n \t\t$(S)src/snapshots.txt\t\t\t\t\t\\\n \t\t$(S)src/etc/get-snapshot.py $(MKFILE_DEPS)\n \t@$(call E, fetch: $@)\n #   Note: the variable \"SNAPSHOT_FILE\" is generally not set, and so\n #   we generally only pass one argument to this script.  \n ifdef CFG_ENABLE_LOCAL_RUST\n-\t$(Q)$(S)src/etc/local_stage0.sh $(CFG_HOST_TRIPLE) $(CFG_LOCAL_RUST_ROOT)\n+\t$(Q)$(S)src/etc/local_stage0.sh $(CFG_BUILD_TRIPLE) $(CFG_LOCAL_RUST_ROOT)\n else \n-\t$(Q)$(CFG_PYTHON) $(S)src/etc/get-snapshot.py $(CFG_HOST_TRIPLE) $(SNAPSHOT_FILE)\n+\t$(Q)$(CFG_PYTHON) $(S)src/etc/get-snapshot.py $(CFG_BUILD_TRIPLE) $(SNAPSHOT_FILE)\n ifdef CFG_ENABLE_PAX_FLAGS\n \t@$(call E, apply PaX flags: $@)\n \t@\"$(CFG_PAXCTL)\" -cm \"$@\"\n@@ -21,24 +21,24 @@ endif\n \n # Host libs will be extracted by the above rule\n \n-$(HLIB0_H_$(CFG_HOST_TRIPLE))/$(CFG_RUNTIME): \\\n-\t\t$(HBIN0_H_$(CFG_HOST_TRIPLE))/rustc$(X)\n+$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_RUNTIME): \\\n+\t\t$(HBIN0_H_$(CFG_BUILD_TRIPLE))/rustc$(X)\n \t$(Q)touch $@\n \n-$(HLIB0_H_$(CFG_HOST_TRIPLE))/$(CFG_CORELIB): \\\n-\t\t$(HBIN0_H_$(CFG_HOST_TRIPLE))/rustc$(X)\n+$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_CORELIB): \\\n+\t\t$(HBIN0_H_$(CFG_BUILD_TRIPLE))/rustc$(X)\n \t$(Q)touch $@\n \n-$(HLIB0_H_$(CFG_HOST_TRIPLE))/$(CFG_STDLIB): \\\n-\t\t$(HBIN0_H_$(CFG_HOST_TRIPLE))/rustc$(X)\n+$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_STDLIB): \\\n+\t\t$(HBIN0_H_$(CFG_BUILD_TRIPLE))/rustc$(X)\n \t$(Q)touch $@\n \n-$(HLIB0_H_$(CFG_HOST_TRIPLE))/$(CFG_LIBRUSTC): \\\n-\t\t$(HBIN0_H_$(CFG_HOST_TRIPLE))/rustc$(X)\n+$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_LIBRUSTC): \\\n+\t\t$(HBIN0_H_$(CFG_BUILD_TRIPLE))/rustc$(X)\n \t$(Q)touch $@\n \n-$(HLIB0_H_$(CFG_HOST_TRIPLE))/$(CFG_RUSTLLVM): \\\n-\t\t$(HBIN0_H_$(CFG_HOST_TRIPLE))/rustc$(X)\n+$(HLIB0_H_$(CFG_BUILD_TRIPLE))/$(CFG_RUSTLLVM): \\\n+\t\t$(HBIN0_H_$(CFG_BUILD_TRIPLE))/rustc$(X)\n \t$(Q)touch $@\n \n # For other targets, let the host build the target:\n@@ -82,5 +82,5 @@ endef\n \n # Use stage1 to build other architectures: then you don't have to wait\n # for stage2, but you get the latest updates to the compiler source.\n-$(foreach t,$(NON_HOST_TRIPLES),\t\t\t\t\t\t\t\t\\\n- $(eval $(call BOOTSTRAP_STAGE0,$(t),1,$(CFG_HOST_TRIPLE))))\n+$(foreach t,$(NON_BUILD_HOST_TRIPLES),\t\t\t\t\t\t\t\t\\\n+ $(eval $(call BOOTSTRAP_STAGE0,$(t),1,$(CFG_BUILD_TRIPLE))))"}, {"sha": "df7723b178e8703c2a5a4fbd47d850c94f5d6445", "filename": "mk/target.mk", "status": "modified", "additions": 30, "deletions": 25, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=15c0c35352720efd32bcfc5f4ae05b95f05cd1c0", "patch": "@@ -22,58 +22,63 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a: \\\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUSTLLVM): \\\n-\t\trustllvm/$(2)/$$(CFG_RUSTLLVM)\n+$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUNTIME): \\\n+\t\trt/$(2)/$$(CFG_RUNTIME)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC):\t\t\\\n-\t\t$$(COMPILER_CRATE) $$(COMPILER_INPUTS)\t\t\\\n-                $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBSYNTAX)\n+$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_CORELIB): \\\n+\t\t$$(CORELIB_CRATE) $$(CORELIB_INPUTS) \\\n+\t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< && touch $$@\n \n-$$(TBIN$(1)_T_$(2)_H_$(3))/rustc$$(X):\t\t\t\\\n-\t\t$$(DRIVER_CRATE) \t\t\t\t\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC)\n+$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB): \\\n+\t\t$$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n+\t        $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_CORELIB) \\\n+\t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\n \t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) --cfg rustc -o $$@ $$<\n-ifdef CFG_ENABLE_PAX_FLAGS\n-\t@$$(call E, apply PaX flags: $$@)\n-\t@\"$(CFG_PAXCTL)\" -cm \"$$@\"\n-endif\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< && touch $$@\n \n $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBSYNTAX): \\\n                 $$(LIBSYNTAX_CRATE) $$(LIBSYNTAX_INPUTS) \\\n \t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\t\t\t\\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUSTLLVM)\t\\\n \t\t$$(TCORELIB_DEFAULT$(1)_T_$(2)_H_$(3))      \\\n \t\t$$(TSTDLIB_DEFAULT$(1)_T_$(2)_H_$(3))\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) $(BORROWCK) -o $$@ $$< && touch $$@\n \n-$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUNTIME): \\\n-\t\trt/$(2)/$$(CFG_RUNTIME)\n+# Only build the compiler for host triples\n+ifneq ($$(findstring $(2),$$(CFG_HOST_TRIPLES)),)\n+\n+$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUSTLLVM): \\\n+\t\trustllvm/$(2)/$$(CFG_RUSTLLVM)\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_CORELIB): \\\n-\t\t$$(CORELIB_CRATE) $$(CORELIB_INPUTS) \\\n-\t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\n+$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC):\t\t\\\n+\t\t$$(COMPILER_CRATE) $$(COMPILER_INPUTS)\t\t\\\n+                $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBSYNTAX) \\\n+                $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUSTLLVM)\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< && touch $$@\n \n-$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB): \\\n-\t\t$$(STDLIB_CRATE) $$(STDLIB_INPUTS) \\\n-\t        $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_CORELIB) \\\n-\t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\n+$$(TBIN$(1)_T_$(2)_H_$(3))/rustc$$(X):\t\t\t\\\n+\t\t$$(DRIVER_CRATE) \t\t\t\t\t\t\t\\\n+\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC)\n \t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< && touch $$@\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) --cfg rustc -o $$@ $$<\n+ifdef CFG_ENABLE_PAX_FLAGS\n+\t@$$(call E, apply PaX flags: $$@)\n+\t@\"$(CFG_PAXCTL)\" -cm \"$$@\"\n+endif\n+\n+endif\n \n endef\n \n # In principle, each host can build each target:\n-$(foreach source,$(CFG_TARGET_TRIPLES),\t\t\t\t\\\n+$(foreach source,$(CFG_HOST_TRIPLES),\t\t\t\t\\\n  $(foreach target,$(CFG_TARGET_TRIPLES),\t\t\t\\\n   $(eval $(call TARGET_STAGE_N,0,$(target),$(source)))\t\t\\\n   $(eval $(call TARGET_STAGE_N,1,$(target),$(source)))\t\t\\"}, {"sha": "3876f94afe722bd2889bf3cbb31045555eb064a6", "filename": "mk/tests.mk", "status": "modified", "additions": 38, "deletions": 25, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=15c0c35352720efd32bcfc5f4ae05b95f05cd1c0", "patch": "@@ -14,7 +14,9 @@\n ######################################################################\n \n # The names of crates that must be tested\n-TEST_CRATES = core std syntax rustc rustdoc rusti rust rustpkg\n+TEST_TARGET_CRATES = core std\n+TEST_HOST_CRATES = syntax rustc rustdoc rusti rust rustpkg\n+TEST_CRATES = $(TEST_TARGET_CRATES) $(TEST_HOST_CRATES)\n \n # Markdown files under doc/ that should have their code extracted and run\n DOC_TEST_NAMES = tutorial tutorial-ffi tutorial-macros tutorial-borrowed-ptr tutorial-tasks rust\n@@ -93,7 +95,7 @@ cleantmptestlogs:\n \t$(Q)rm -f tmp/*.log\n \n cleantestlibs:\n-\t$(Q)find $(CFG_HOST_TRIPLE)/test \\\n+\t$(Q)find $(CFG_BUILD_TRIPLE)/test \\\n          -name '*.[odasS]' -o \\\n          -name '*.so' -o      \\\n          -name '*.dylib' -o   \\\n@@ -175,10 +177,22 @@ check-stage$(1)-T-$(2)-H-$(3)-exec:     \t\t\t\t\\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-doc-exec \\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-exec\n \n+# Only test the compiler-dependent crates when the target is\n+# able to build a compiler (when the target triple is in the set of host triples)\n+ifneq ($$(findstring $(2),$$(CFG_HOST_TRIPLES)),)\n+\n check-stage$(1)-T-$(2)-H-$(3)-crates-exec: \\\n \t$$(foreach crate,$$(TEST_CRATES), \\\n            check-stage$(1)-T-$(2)-H-$(3)-$$(crate)-exec)\n \n+else\n+\n+check-stage$(1)-T-$(2)-H-$(3)-crates-exec: \\\n+\t$$(foreach crate,$$(TEST_TARGET_CRATES), \\\n+           check-stage$(1)-T-$(2)-H-$(3)-$$(crate)-exec)\n+\n+endif\n+\n check-stage$(1)-T-$(2)-H-$(3)-doc-exec: \\\n         $$(foreach docname,$$(DOC_TEST_NAMES), \\\n            check-stage$(1)-T-$(2)-H-$(3)-doc-$$(docname)-exec)\n@@ -192,7 +206,7 @@ check-stage$(1)-T-$(2)-H-$(3)-pretty-exec: \\\n \n endef\n \n-$(foreach host,$(CFG_TARGET_TRIPLES), \\\n+$(foreach host,$(CFG_HOST_TRIPLES), \\\n  $(foreach target,$(CFG_TARGET_TRIPLES), \\\n   $(foreach stage,$(STAGES), \\\n     $(eval $(call DEF_TEST_SETS,$(stage),$(target),$(host))))))\n@@ -255,7 +269,7 @@ $(3)/test/rustdoctest.stage$(1)-$(2)$$(X):\t\t\t\t\t\\\n \n endef\n \n-$(foreach host,$(CFG_TARGET_TRIPLES), \\\n+$(foreach host,$(CFG_HOST_TRIPLES), \\\n  $(eval $(foreach target,$(CFG_TARGET_TRIPLES), \\\n   $(eval $(foreach stage,$(STAGES), \\\n    $(eval $(call TEST_RUNNER,$(stage),$(target),$(host))))))))\n@@ -271,7 +285,7 @@ $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n \t&& touch $$@\n endef\n \n-$(foreach host,$(CFG_TARGET_TRIPLES), \\\n+$(foreach host,$(CFG_HOST_TRIPLES), \\\n  $(foreach target,$(CFG_TARGET_TRIPLES), \\\n   $(foreach stage,$(STAGES), \\\n    $(foreach crate, $(TEST_CRATES), \\\n@@ -381,7 +395,7 @@ CTEST_DEPS_debuginfo_$(1)-T-$(2)-H-$(3) = $$(DEBUGINFO_TESTS)\n \n endef\n \n-$(foreach host,$(CFG_TARGET_TRIPLES), \\\n+$(foreach host,$(CFG_HOST_TRIPLES), \\\n  $(eval $(foreach target,$(CFG_TARGET_TRIPLES), \\\n   $(eval $(foreach stage,$(STAGES), \\\n    $(eval $(call DEF_CTEST_VARS,$(stage),$(target),$(host))))))))\n@@ -423,7 +437,7 @@ endef\n \n CTEST_NAMES = rpass rpass-full rfail cfail bench perf debuginfo\n \n-$(foreach host,$(CFG_TARGET_TRIPLES), \\\n+$(foreach host,$(CFG_HOST_TRIPLES), \\\n  $(eval $(foreach target,$(CFG_TARGET_TRIPLES), \\\n   $(eval $(foreach stage,$(STAGES), \\\n    $(eval $(foreach name,$(CTEST_NAMES), \\\n@@ -462,7 +476,7 @@ $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n \n endef\n \n-$(foreach host,$(CFG_TARGET_TRIPLES), \\\n+$(foreach host,$(CFG_HOST_TRIPLES), \\\n  $(foreach target,$(CFG_TARGET_TRIPLES), \\\n   $(foreach stage,$(STAGES), \\\n    $(foreach pretty-name,$(PRETTY_NAMES), \\\n@@ -489,7 +503,7 @@ $$(call TEST_OK_FILE,$(1),$(2),$(3),doc-$(4)): \\\n \n endef\n \n-$(foreach host,$(CFG_TARGET_TRIPLES), \\\n+$(foreach host,$(CFG_HOST_TRIPLES), \\\n  $(foreach target,$(CFG_TARGET_TRIPLES), \\\n   $(foreach stage,$(STAGES), \\\n    $(foreach docname,$(DOC_TEST_NAMES), \\\n@@ -511,7 +525,7 @@ doc-$(2)-extract$(1):\n \n endef\n \n-$(foreach host,$(CFG_TARGET_TRIPLES), \\\n+$(foreach host,$(CFG_HOST_TRIPLES), \\\n  $(foreach docname,$(DOC_TEST_NAMES), \\\n   $(eval $(call DEF_DOC_TEST_HOST,$(host),$(docname)))))\n \n@@ -546,7 +560,7 @@ endef\n \n $(foreach stage,$(STAGES), \\\n  $(foreach target,$(CFG_TARGET_TRIPLES), \\\n-  $(foreach host,$(CFG_TARGET_TRIPLES), \\\n+  $(foreach host,$(CFG_HOST_TRIPLES), \\\n    $(eval $(call DEF_CHECK_FOR_STAGE_AND_TARGET_AND_HOST,$(stage),$(target),$(host))))))\n \n define DEF_CHECK_FOR_STAGE_AND_TARGET_AND_HOST_AND_GROUP\n@@ -555,22 +569,22 @@ endef\n \n $(foreach stage,$(STAGES), \\\n  $(foreach target,$(CFG_TARGET_TRIPLES), \\\n-  $(foreach host,$(CFG_TARGET_TRIPLES), \\\n+  $(foreach host,$(CFG_HOST_TRIPLES), \\\n    $(foreach group,$(TEST_GROUPS), \\\n     $(eval $(call DEF_CHECK_FOR_STAGE_AND_TARGET_AND_HOST_AND_GROUP,$(stage),$(target),$(host),$(group)))))))\n \n define DEF_CHECK_FOR_STAGE\n-check-stage$(1): check-stage$(1)-H-$$(CFG_HOST_TRIPLE)\n-check-stage$(1)-H-all: $$(foreach target,$$(CFG_TARGET_TRIPLES), \\\n+check-stage$(1): check-stage$(1)-H-$$(CFG_BUILD_TRIPLE)\n+check-stage$(1)-H-all: $$(foreach target,$$(CFG_HOST_TRIPLES), \\\n                            check-stage$(1)-H-$$(target))\n endef\n \n $(foreach stage,$(STAGES), \\\n  $(eval $(call DEF_CHECK_FOR_STAGE,$(stage))))\n \n define DEF_CHECK_FOR_STAGE_AND_GROUP\n-check-stage$(1)-$(2): check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-$(2)\n-check-stage$(1)-H-all-$(2): $$(foreach target,$$(CFG_TARGET_TRIPLES), \\\n+check-stage$(1)-$(2): check-stage$(1)-H-$$(CFG_BUILD_TRIPLE)-$(2)\n+check-stage$(1)-H-all-$(2): $$(foreach target,$$(CFG_HOST_TRIPLES), \\\n                                check-stage$(1)-H-$$(target)-$(2))\n endef\n \n@@ -580,25 +594,24 @@ $(foreach stage,$(STAGES), \\\n \n \n define DEF_CHECK_FOR_STAGE_AND_HOSTS\n-check-stage$(1)-H-$(2): $$(foreach target,$$(CFG_TARGET_TRIPLES), \\\n+check-stage$(1)-H-$(2): $$(foreach target,$$(CFG_HOST_TRIPLES), \\\n                            check-stage$(1)-T-$$(target)-H-$(2))\n endef\n \n $(foreach stage,$(STAGES), \\\n- $(foreach host,$(CFG_TARGET_TRIPLES), \\\n+ $(foreach host,$(CFG_HOST_TRIPLES), \\\n   $(eval $(call DEF_CHECK_FOR_STAGE_AND_HOSTS,$(stage),$(host)))))\n \n define DEF_CHECK_FOR_STAGE_AND_HOSTS_AND_GROUP\n-check-stage$(1)-H-$(2)-$(3): $$(foreach target,$$(CFG_TARGET_TRIPLES), \\\n+check-stage$(1)-H-$(2)-$(3): $$(foreach target,$$(CFG_HOST_TRIPLES), \\\n                                 check-stage$(1)-T-$$(target)-H-$(2)-$(3))\n endef\n \n $(foreach stage,$(STAGES), \\\n- $(foreach host,$(CFG_TARGET_TRIPLES), \\\n+ $(foreach host,$(CFG_HOST_TRIPLES), \\\n   $(foreach group,$(TEST_GROUPS), \\\n    $(eval $(call DEF_CHECK_FOR_STAGE_AND_HOSTS_AND_GROUP,$(stage),$(host),$(group))))))\n \n-\n ######################################################################\n # check-fast rules\n ######################################################################\n@@ -644,18 +657,18 @@ check-fast-T-$(2)-H-$(3):     \t\t\t\\\n \n endef\n \n-$(foreach host,$(CFG_TARGET_TRIPLES), \\\n+$(foreach host,$(CFG_HOST_TRIPLES), \\\n  $(eval $(foreach target,$(CFG_TARGET_TRIPLES), \\\n    $(eval $(call DEF_CHECK_FAST_FOR_T_H,,$(target),$(host))))))\n \n-check-fast: tidy check-fast-H-$(CFG_HOST_TRIPLE)\n+check-fast: tidy check-fast-H-$(CFG_BUILD_TRIPLE)\n \n define DEF_CHECK_FAST_FOR_H\n \n check-fast-H-$(1): \t\tcheck-fast-T-$(1)-H-$(1)\n \n endef\n \n-$(foreach target,$(CFG_TARGET_TRIPLES),\t\t\t\\\n- $(eval $(call DEF_CHECK_FAST_FOR_H,$(target))))\n+$(foreach host,$(CFG_HOST_TRIPLES),\t\t\t\\\n+ $(eval $(call DEF_CHECK_FAST_FOR_H,$(host))))\n "}, {"sha": "1c2b3962ac27582b4ec65db137408857569ba2d9", "filename": "mk/tools.mk", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/mk%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/mk%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftools.mk?ref=15c0c35352720efd32bcfc5f4ae05b95f05cd1c0", "patch": "@@ -223,13 +223,13 @@ $$(HBIN$(2)_H_$(4))/rust$$(X):\t\t\t\t\\\n \n endef\n \n-$(foreach host,$(CFG_TARGET_TRIPLES),\t\t\t\t\\\n+$(foreach host,$(CFG_HOST_TRIPLES),\t\t\t\t\\\n $(foreach target,$(CFG_TARGET_TRIPLES),\t\t\t\t\\\n- $(eval $(call TOOLS_STAGE_N_TARGET,0,1,$(target),$(host)))\t\\\n- $(eval $(call TOOLS_STAGE_N_TARGET,1,2,$(target),$(host)))\t\\\n- $(eval $(call TOOLS_STAGE_N_TARGET,2,3,$(target),$(host)))))\n+ $(eval $(call TOOLS_STAGE_N_TARGET,0,1,$(host),$(target)))\t\\\n+ $(eval $(call TOOLS_STAGE_N_TARGET,1,2,$(host),$(target)))\t\\\n+ $(eval $(call TOOLS_STAGE_N_TARGET,2,3,$(host),$(target)))))\n \n-$(foreach host,$(CFG_TARGET_TRIPLES),\t\t\t\t\\\n+$(foreach host,$(CFG_HOST_TRIPLES),\t\t\t\t\\\n  $(eval $(call TOOLS_STAGE_N_HOST,0,1,$(host),$(host)))\t\\\n  $(eval $(call TOOLS_STAGE_N_HOST,1,2,$(host),$(host)))\t\\\n  $(eval $(call TOOLS_STAGE_N_HOST,2,3,$(host),$(host))))"}, {"sha": "50e3148258725ab4844c840788bf60ae2a2f8053", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c0c35352720efd32bcfc5f4ae05b95f05cd1c0/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=15c0c35352720efd32bcfc5f4ae05b95f05cd1c0", "patch": "@@ -516,11 +516,11 @@ pub fn host_triple() -> ~str {\n     // FIXME (#2400): Instead of grabbing the host triple we really should\n     // be grabbing (at compile time) the target triple that this rustc is\n     // built with and calling that (at runtime) the host triple.\n-    let ht = env!(\"CFG_HOST_TRIPLE\");\n+    let ht = env!(\"CFG_BUILD_TRIPLE\");\n     return if ht != ~\"\" {\n             ht\n         } else {\n-            fail!(~\"rustc built without CFG_HOST_TRIPLE\")\n+            fail!(~\"rustc built without CFG_BUILD_TRIPLE\")\n         };\n }\n "}]}