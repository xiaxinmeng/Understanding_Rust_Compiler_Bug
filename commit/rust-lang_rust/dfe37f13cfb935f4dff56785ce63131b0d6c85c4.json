{"sha": "dfe37f13cfb935f4dff56785ce63131b0d6c85c4", "node_id": "C_kwDOAAsO6NoAKGRmZTM3ZjEzY2ZiOTM1ZjRkZmY1Njc4NWNlNjMxMzFiMGQ2Yzg1YzQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-18T09:43:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-18T09:43:51Z"}, "message": "Auto merge of #9850 - pheki:fix-7499-missing-ref, r=dswij\n\nPreserve `ref` on `infallible_destructuring_match` suggestion\n\nFixes https://github.com/rust-lang/rust-clippy/issues/7499\n\nchangelog: [`infallible_destructuring_match`]: Preserve `ref` on suggestion", "tree": {"sha": "4df20c54ed2e24aa8c194286de1a9b3b1558936f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4df20c54ed2e24aa8c194286de1a9b3b1558936f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfe37f13cfb935f4dff56785ce63131b0d6c85c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfe37f13cfb935f4dff56785ce63131b0d6c85c4", "html_url": "https://github.com/rust-lang/rust/commit/dfe37f13cfb935f4dff56785ce63131b0d6c85c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfe37f13cfb935f4dff56785ce63131b0d6c85c4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c9c34de17dde504447accd457afd0ba0da6a06f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c9c34de17dde504447accd457afd0ba0da6a06f", "html_url": "https://github.com/rust-lang/rust/commit/1c9c34de17dde504447accd457afd0ba0da6a06f"}, {"sha": "93ac0f58bfeb8046a6e49b79fbaca0cb27d92f56", "url": "https://api.github.com/repos/rust-lang/rust/commits/93ac0f58bfeb8046a6e49b79fbaca0cb27d92f56", "html_url": "https://github.com/rust-lang/rust/commit/93ac0f58bfeb8046a6e49b79fbaca0cb27d92f56"}], "stats": {"total": 49, "additions": 42, "deletions": 7}, "files": [{"sha": "d18c92caba2a6f0b3eaa65b5dcee86cde686d021", "filename": "clippy_lints/src/matches/infallible_destructuring_match.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dfe37f13cfb935f4dff56785ce63131b0d6c85c4/clippy_lints%2Fsrc%2Fmatches%2Finfallible_destructuring_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe37f13cfb935f4dff56785ce63131b0d6c85c4/clippy_lints%2Fsrc%2Fmatches%2Finfallible_destructuring_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Finfallible_destructuring_match.rs?ref=dfe37f13cfb935f4dff56785ce63131b0d6c85c4", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::{path_to_local_id, peel_blocks, strip_pat_refs};\n use rustc_errors::Applicability;\n-use rustc_hir::{ExprKind, Local, MatchSource, PatKind, QPath};\n+use rustc_hir::{ByRef, ExprKind, Local, MatchSource, PatKind, QPath};\n use rustc_lint::LateContext;\n \n use super::INFALLIBLE_DESTRUCTURING_MATCH;\n@@ -16,7 +16,7 @@ pub(crate) fn check(cx: &LateContext<'_>, local: &Local<'_>) -> bool {\n         if let PatKind::TupleStruct(\n             QPath::Resolved(None, variant_name), args, _) = arms[0].pat.kind;\n         if args.len() == 1;\n-        if let PatKind::Binding(_, arg, ..) = strip_pat_refs(&args[0]).kind;\n+        if let PatKind::Binding(binding, arg, ..) = strip_pat_refs(&args[0]).kind;\n         let body = peel_blocks(arms[0].body);\n         if path_to_local_id(body, arg);\n \n@@ -30,8 +30,9 @@ pub(crate) fn check(cx: &LateContext<'_>, local: &Local<'_>) -> bool {\n                 Consider using `let`\",\n                 \"try this\",\n                 format!(\n-                    \"let {}({}) = {};\",\n+                    \"let {}({}{}) = {};\",\n                     snippet_with_applicability(cx, variant_name.span, \"..\", &mut applicability),\n+                    if binding.0 == ByRef::Yes { \"ref \" } else { \"\" },\n                     snippet_with_applicability(cx, local.pat.span, \"..\", &mut applicability),\n                     snippet_with_applicability(cx, target.span, \"..\", &mut applicability),\n                 ),"}, {"sha": "61985e56b769e45626fbb083ac7e4b83914b1813", "filename": "tests/ui/infallible_destructuring_match.fixed", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dfe37f13cfb935f4dff56785ce63131b0d6c85c4/tests%2Fui%2Finfallible_destructuring_match.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/dfe37f13cfb935f4dff56785ce63131b0d6c85c4/tests%2Fui%2Finfallible_destructuring_match.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfallible_destructuring_match.fixed?ref=dfe37f13cfb935f4dff56785ce63131b0d6c85c4", "patch": "@@ -9,6 +9,9 @@ enum SingleVariantEnum {\n \n struct TupleStruct(i32);\n \n+struct NonCopy;\n+struct TupleStructWithNonCopy(NonCopy);\n+\n enum EmptyEnum {}\n \n macro_rules! match_enum {\n@@ -71,6 +74,15 @@ fn infallible_destructuring_match_struct() {\n     let TupleStruct(data) = wrapper;\n }\n \n+fn infallible_destructuring_match_struct_with_noncopy() {\n+    let wrapper = TupleStructWithNonCopy(NonCopy);\n+\n+    // This should lint! (keeping `ref` in the suggestion)\n+    let TupleStructWithNonCopy(ref data) = wrapper;\n+\n+    let TupleStructWithNonCopy(ref data) = wrapper;\n+}\n+\n macro_rules! match_never_enum {\n     ($param:expr) => {\n         let data = match $param {"}, {"sha": "f2768245bbc417d8fa89944f38f0f3a3b0cd4459", "filename": "tests/ui/infallible_destructuring_match.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dfe37f13cfb935f4dff56785ce63131b0d6c85c4/tests%2Fui%2Finfallible_destructuring_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfe37f13cfb935f4dff56785ce63131b0d6c85c4/tests%2Fui%2Finfallible_destructuring_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfallible_destructuring_match.rs?ref=dfe37f13cfb935f4dff56785ce63131b0d6c85c4", "patch": "@@ -9,6 +9,9 @@ enum SingleVariantEnum {\n \n struct TupleStruct(i32);\n \n+struct NonCopy;\n+struct TupleStructWithNonCopy(NonCopy);\n+\n enum EmptyEnum {}\n \n macro_rules! match_enum {\n@@ -75,6 +78,17 @@ fn infallible_destructuring_match_struct() {\n     let TupleStruct(data) = wrapper;\n }\n \n+fn infallible_destructuring_match_struct_with_noncopy() {\n+    let wrapper = TupleStructWithNonCopy(NonCopy);\n+\n+    // This should lint! (keeping `ref` in the suggestion)\n+    let data = match wrapper {\n+        TupleStructWithNonCopy(ref n) => n,\n+    };\n+\n+    let TupleStructWithNonCopy(ref data) = wrapper;\n+}\n+\n macro_rules! match_never_enum {\n     ($param:expr) => {\n         let data = match $param {"}, {"sha": "f8a50f0223d630053c6393708845449ca1f8e970", "filename": "tests/ui/infallible_destructuring_match.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dfe37f13cfb935f4dff56785ce63131b0d6c85c4/tests%2Fui%2Finfallible_destructuring_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dfe37f13cfb935f4dff56785ce63131b0d6c85c4/tests%2Fui%2Finfallible_destructuring_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfallible_destructuring_match.stderr?ref=dfe37f13cfb935f4dff56785ce63131b0d6c85c4", "patch": "@@ -1,5 +1,5 @@\n error: you seem to be trying to use `match` to destructure a single infallible pattern. Consider using `let`\n-  --> $DIR/infallible_destructuring_match.rs:26:5\n+  --> $DIR/infallible_destructuring_match.rs:29:5\n    |\n LL | /     let data = match wrapper {\n LL | |         SingleVariantEnum::Variant(i) => i,\n@@ -9,20 +9,28 @@ LL | |     };\n    = note: `-D clippy::infallible-destructuring-match` implied by `-D warnings`\n \n error: you seem to be trying to use `match` to destructure a single infallible pattern. Consider using `let`\n-  --> $DIR/infallible_destructuring_match.rs:58:5\n+  --> $DIR/infallible_destructuring_match.rs:61:5\n    |\n LL | /     let data = match wrapper {\n LL | |         TupleStruct(i) => i,\n LL | |     };\n    | |______^ help: try this: `let TupleStruct(data) = wrapper;`\n \n error: you seem to be trying to use `match` to destructure a single infallible pattern. Consider using `let`\n-  --> $DIR/infallible_destructuring_match.rs:90:5\n+  --> $DIR/infallible_destructuring_match.rs:85:5\n+   |\n+LL | /     let data = match wrapper {\n+LL | |         TupleStructWithNonCopy(ref n) => n,\n+LL | |     };\n+   | |______^ help: try this: `let TupleStructWithNonCopy(ref data) = wrapper;`\n+\n+error: you seem to be trying to use `match` to destructure a single infallible pattern. Consider using `let`\n+  --> $DIR/infallible_destructuring_match.rs:104:5\n    |\n LL | /     let data = match wrapper {\n LL | |         Ok(i) => i,\n LL | |     };\n    | |______^ help: try this: `let Ok(data) = wrapper;`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n "}]}