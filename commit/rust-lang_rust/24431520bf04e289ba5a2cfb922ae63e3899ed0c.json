{"sha": "24431520bf04e289ba5a2cfb922ae63e3899ed0c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NDMxNTIwYmYwNGUyODliYTVhMmNmYjkyMmFlNjNlMzg5OWVkMGM=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-05-22T17:44:40Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-05-22T22:31:39Z"}, "message": "Removing par.rs, since it's not usable now anyway.", "tree": {"sha": "367bca8ba41787657c031ca4363cdc4f860fba2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/367bca8ba41787657c031ca4363cdc4f860fba2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24431520bf04e289ba5a2cfb922ae63e3899ed0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24431520bf04e289ba5a2cfb922ae63e3899ed0c", "html_url": "https://github.com/rust-lang/rust/commit/24431520bf04e289ba5a2cfb922ae63e3899ed0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24431520bf04e289ba5a2cfb922ae63e3899ed0c/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a4e2ae70660d5e23e04f7dbb6c1b1ab3c9dd0b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a4e2ae70660d5e23e04f7dbb6c1b1ab3c9dd0b0", "html_url": "https://github.com/rust-lang/rust/commit/5a4e2ae70660d5e23e04f7dbb6c1b1ab3c9dd0b0"}], "stats": {"total": 105, "additions": 0, "deletions": 105}, "files": [{"sha": "5160e50fd9af8ebafe1f08f2f8378c711506219a", "filename": "src/libstd/par.rs", "status": "removed", "additions": 0, "deletions": 103, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/5a4e2ae70660d5e23e04f7dbb6c1b1ab3c9dd0b0/src%2Flibstd%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4e2ae70660d5e23e04f7dbb6c1b1ab3c9dd0b0/src%2Flibstd%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpar.rs?ref=5a4e2ae70660d5e23e04f7dbb6c1b1ab3c9dd0b0", "patch": "@@ -1,103 +0,0 @@\n-import comm::port;\n-import comm::chan;\n-import comm::send;\n-import comm::recv;\n-import task::spawn;\n-\n-export future;\n-export map;\n-export alli;\n-\n-iface future<T: send> {\n-    fn get() -> T;\n-}\n-\n-type future_<T: send> = {\n-    mut slot : option<T>,\n-    port : port<T>,\n-};\n-\n-impl<T: send> of future<T> for future_<T> {\n-    fn get() -> T {\n-        alt(self.slot) {\n-          some(x) { x }\n-          none {\n-            let x = recv(self.port);\n-            self.slot = some(x);\n-            x\n-          }\n-        }\n-    }\n-}\n-\n-\n-#[doc=\"Executes a bit of code asynchronously.\n-\n-Returns a handle that can be used to retrieve the result at your\n-leisure.\"]\n-fn future<T: send>(thunk : fn~() -> T) -> future<T> {\n-    let p = port();\n-    let c = chan(p);\n-\n-    spawn() {||\n-        send(c, thunk());\n-    }\n-\n-    {mut slot: none::<T>, port : p} as future::<T>\n-}\n-\n-#[doc=\"The maximum number of tasks this module will spawn for a single\n- operationg.\"]\n-const max_tasks : uint = 32u;\n-\n-#[doc=\"The minimum number of elements each task will process.\"]\n-const min_granularity : uint = 1024u;\n-\n-#[doc=\"An internal helper to map a function over a large vector and\n- return the intermediate results.\n-\n-This is used to build most of the other parallel vector functions,\n-like map or alli.\"]\n-fn map_slices<A: send, B: send>(xs: [A], f: fn~(uint, [A]) -> B) -> [B] {\n-    let len = xs.len();\n-    if len < min_granularity {\n-        // This is a small vector, fall back on the normal map.\n-        [f(0u, xs)]\n-    }\n-    else {\n-        let num_tasks = uint::min(max_tasks, len / min_granularity);\n-\n-        let items_per_task = len / num_tasks;\n-\n-        let mut futures = [];\n-        let mut base = 0u;\n-        while base < len {\n-            let slice = vec::slice(xs, base,\n-                                   uint::min(len, base + items_per_task));\n-            futures += [future() {|copy base|\n-                f(base, slice)\n-            }];\n-            base += items_per_task;\n-        }\n-\n-        futures.map() {|ys|\n-            ys.get()\n-        }\n-    }\n-}\n-\n-#[doc=\"A parallel version of map.\"]\n-fn map<A: send, B: send>(xs: [A], f: fn~(A) -> B) -> [B] {\n-    vec::concat(map_slices(xs) {|_base, slice|\n-        map(slice, f)\n-    })\n-}\n-\n-#[doc=\"Returns true if the function holds for all elements in the vector.\"]\n-fn alli<A: send>(xs: [A], f: fn~(uint, A) -> bool) -> bool {\n-    vec::all(map_slices(xs) {|base, slice|\n-        slice.alli() {|i, x|\n-            f(i + base, x)\n-        }\n-    }) {|x| x }\n-}"}, {"sha": "40a03ae25c2b5f066e6525178615e1be392c63e3", "filename": "src/libstd/std.rc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24431520bf04e289ba5a2cfb922ae63e3899ed0c/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/24431520bf04e289ba5a2cfb922ae63e3899ed0c/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=24431520bf04e289ba5a2cfb922ae63e3899ed0c", "patch": "@@ -19,7 +19,6 @@ export bitv, deque, fun_treemap, list, map, smallintmap, sort, treemap;\n export rope, arena;\n export ebml, dbg, getopts, json, rand, sha1, term, time, prettyprint;\n export test, tempfile, serialization;\n-export par;\n \n // General io and system-services modules\n \n@@ -59,7 +58,6 @@ mod getopts;\n mod json;\n mod sha1;\n mod md4;\n-mod par;\n mod tempfile;\n mod term;\n mod time;"}]}