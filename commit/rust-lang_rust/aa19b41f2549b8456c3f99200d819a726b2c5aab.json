{"sha": "aa19b41f2549b8456c3f99200d819a726b2c5aab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhMTliNDFmMjU0OWI4NDU2YzNmOTkyMDBkODE5YTcyNmIyYzVhYWI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-03T16:17:32Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-03T16:17:32Z"}, "message": "make pretty printer tests understand revisions, and make them ignore the\nshould-fail annotation", "tree": {"sha": "ddaa5e8ada374b82f7545b74010aa5a0840ba684", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddaa5e8ada374b82f7545b74010aa5a0840ba684"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa19b41f2549b8456c3f99200d819a726b2c5aab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa19b41f2549b8456c3f99200d819a726b2c5aab", "html_url": "https://github.com/rust-lang/rust/commit/aa19b41f2549b8456c3f99200d819a726b2c5aab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa19b41f2549b8456c3f99200d819a726b2c5aab/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9601e6f252f725f1aa90b15cab0e22732b0076ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/9601e6f252f725f1aa90b15cab0e22732b0076ee", "html_url": "https://github.com/rust-lang/rust/commit/9601e6f252f725f1aa90b15cab0e22732b0076ee"}], "stats": {"total": 52, "additions": 32, "deletions": 20}, "files": [{"sha": "99745d840f767f1c4a5b3bf972bf82e771dcbac6", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/aa19b41f2549b8456c3f99200d819a726b2c5aab/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa19b41f2549b8456c3f99200d819a726b2c5aab/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=aa19b41f2549b8456c3f99200d819a726b2c5aab", "patch": "@@ -355,15 +355,24 @@ pub fn is_test(config: &Config, testfile: &Path) -> bool {\n \n pub fn make_test(config: &Config, testpaths: &TestPaths) -> test::TestDescAndFn {\n     let early_props = header::early_props(config, &testpaths.file);\n+\n+    // The `should-fail` annotation doesn't apply to pretty tests,\n+    // since we run the pretty printer across all tests by default.\n+    // If desired, we could add a `should-fail-pretty` annotation.\n+    let should_panic = match config.mode {\n+        Pretty => test::ShouldPanic::No,\n+        _ => if early_props.should_fail {\n+            test::ShouldPanic::Yes\n+        } else {\n+            test::ShouldPanic::No\n+        }\n+    };\n+\n     test::TestDescAndFn {\n         desc: test::TestDesc {\n             name: make_test_name(config, testpaths),\n             ignore: early_props.ignore,\n-            should_panic: if early_props.should_fail {\n-                test::ShouldPanic::Yes\n-            } else {\n-                test::ShouldPanic::No\n-            },\n+            should_panic: should_panic,\n         },\n         testfn: make_test_closure(config, testpaths),\n     }"}, {"sha": "1d2f560f5f65b2be2b39ecb229dc3cd50228ed54", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/aa19b41f2549b8456c3f99200d819a726b2c5aab/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa19b41f2549b8456c3f99200d819a726b2c5aab/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=aa19b41f2549b8456c3f99200d819a726b2c5aab", "patch": "@@ -213,12 +213,13 @@ fn run_valgrind_test(config: &Config, props: &TestProps, testpaths: &TestPaths)\n }\n \n fn run_pretty_test(config: &Config, props: &TestProps, testpaths: &TestPaths) {\n-    // Note: because we run the --pretty tests on the code in run-pass etc,\n-    // we may see a list of revisions -- but we can just ignore them.\n-    // We cannot assert that the list is empty as we do elsewhere.\n-    //\n-    // assert!(props.revisions.is_empty(), \"revisions not relevant here\");\n+    for_each_revision(config, props, testpaths, run_pretty_test_revision);\n+}\n \n+fn run_pretty_test_revision(config: &Config,\n+                            props: &TestProps,\n+                            testpaths: &TestPaths,\n+                            revision: Option<&str>) {\n     if props.pp_exact.is_some() {\n         logv(config, \"testing for exact pretty-printing\".to_owned());\n     } else {\n@@ -234,16 +235,18 @@ fn run_pretty_test(config: &Config, props: &TestProps, testpaths: &TestPaths) {\n \n     let mut round = 0;\n     while round < rounds {\n-        logv(config, format!(\"pretty-printing round {}\", round));\n+        logv(config, format!(\"pretty-printing round {} revision {:?}\",\n+                             round, revision));\n         let proc_res = print_source(config,\n                                     props,\n                                     testpaths,\n                                     srcs[round].to_owned(),\n                                     &props.pretty_mode);\n \n         if !proc_res.status.success() {\n-            fatal_proc_rec(None,\n-                           &format!(\"pretty-printing failed in round {}\", round),\n+            fatal_proc_rec(revision,\n+                           &format!(\"pretty-printing failed in round {} revision {:?}\",\n+                                    round, revision),\n                            &proc_res);\n         }\n \n@@ -270,30 +273,30 @@ fn run_pretty_test(config: &Config, props: &TestProps, testpaths: &TestPaths) {\n         expected = expected.replace(&cr, \"\").to_owned();\n     }\n \n-    compare_source(&expected, &actual);\n+    compare_source(revision, &expected, &actual);\n \n     // If we're only making sure that the output matches then just stop here\n     if props.pretty_compare_only { return; }\n \n     // Finally, let's make sure it actually appears to remain valid code\n     let proc_res = typecheck_source(config, props, testpaths, actual);\n-\n     if !proc_res.status.success() {\n-        fatal_proc_rec(None, \"pretty-printed source does not typecheck\", &proc_res);\n+        fatal_proc_rec(revision, \"pretty-printed source does not typecheck\", &proc_res);\n     }\n+\n     if !props.pretty_expanded { return }\n \n     // additionally, run `--pretty expanded` and try to build it.\n     let proc_res = print_source(config, props, testpaths, srcs[round].clone(), \"expanded\");\n     if !proc_res.status.success() {\n-        fatal_proc_rec(None, \"pretty-printing (expanded) failed\", &proc_res);\n+        fatal_proc_rec(revision, \"pretty-printing (expanded) failed\", &proc_res);\n     }\n \n     let ProcRes{ stdout: expanded_src, .. } = proc_res;\n     let proc_res = typecheck_source(config, props, testpaths, expanded_src);\n     if !proc_res.status.success() {\n         fatal_proc_rec(\n-            None,\n+            revision,\n             \"pretty-printed source (expanded) does not typecheck\",\n             &proc_res);\n     }\n@@ -339,9 +342,9 @@ fn run_pretty_test(config: &Config, props: &TestProps, testpaths: &TestPaths) {\n         };\n     }\n \n-    fn compare_source(expected: &str, actual: &str) {\n+    fn compare_source(revision: Option<&str>, expected: &str, actual: &str) {\n         if expected != actual {\n-            error(None, \"pretty-printed source does not match expected source\");\n+            error(revision, \"pretty-printed source does not match expected source\");\n             println!(\"\\n\\\n expected:\\n\\\n ------------------------------------------\\n\\"}]}