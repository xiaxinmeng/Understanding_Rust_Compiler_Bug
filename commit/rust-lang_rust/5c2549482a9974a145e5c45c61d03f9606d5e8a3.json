{"sha": "5c2549482a9974a145e5c45c61d03f9606d5e8a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMjU0OTQ4MmE5OTc0YTE0NWU1YzQ1YzYxZDAzZjk2MDZkNWU4YTM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-02-28T11:47:48Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-02-28T11:47:48Z"}, "message": "Get cargo clippy working on 64 bit windows again\n\nfixes #1244", "tree": {"sha": "4cdc298231295c4a80f72b17889d9db5d0b019c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cdc298231295c4a80f72b17889d9db5d0b019c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c2549482a9974a145e5c45c61d03f9606d5e8a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c2549482a9974a145e5c45c61d03f9606d5e8a3", "html_url": "https://github.com/rust-lang/rust/commit/5c2549482a9974a145e5c45c61d03f9606d5e8a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c2549482a9974a145e5c45c61d03f9606d5e8a3/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0623730a969ad05f16eb93862b7975bc2e847e49", "url": "https://api.github.com/repos/rust-lang/rust/commits/0623730a969ad05f16eb93862b7975bc2e847e49", "html_url": "https://github.com/rust-lang/rust/commit/0623730a969ad05f16eb93862b7975bc2e847e49"}], "stats": {"total": 45, "additions": 22, "deletions": 23}, "files": [{"sha": "d83d3478c326b644d2ea796d57a2c8f32f74de3a", "filename": "appveyor.yml", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c2549482a9974a145e5c45c61d03f9606d5e8a3/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/5c2549482a9974a145e5c45c61d03f9606d5e8a3/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=5c2549482a9974a145e5c45c61d03f9606d5e8a3", "patch": "@@ -4,10 +4,8 @@ environment:\n     matrix:\n         - TARGET: i686-pc-windows-gnu\n           MSYS2_BITS: 32\n-          RUN_CARGO_CLIPPY: true\n         - TARGET: i686-pc-windows-msvc\n           MSYS2_BITS: 32\n-          RUN_CARGO_CLIPPY: true\n         - TARGET: x86_64-pc-windows-gnu\n           MSYS2_BITS: 64\n         - TARGET: x86_64-pc-windows-msvc\n@@ -29,7 +27,7 @@ test_script:\n     - cargo test --features debugging\n     - copy target\\debug\\cargo-clippy.exe C:\\Users\\appveyor\\.cargo\\bin\\\n     - cargo clippy -- -D clippy\n-    - if defined RUN_CARGO_CLIPPY cd clippy_lints && cargo clippy -- -D clippy && cd ..\n+    - cd clippy_lints && cargo clippy -- -D clippy && cd ..\n \n notifications:\n     - provider: Email"}, {"sha": "c7681364f18e82e8278a67b2c1a5ec213fe743bb", "filename": "src/main.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5c2549482a9974a145e5c45c61d03f9606d5e8a3/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c2549482a9974a145e5c45c61d03f9606d5e8a3/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=5c2549482a9974a145e5c45c61d03f9606d5e8a3", "patch": "@@ -244,30 +244,31 @@ pub fn main() {\n                 .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\")\n         };\n \n-        // this conditional check for the --sysroot flag is there so users can call `cargo-clippy` directly\n-        // without having to pass --sysroot or anything\n-        let mut args: Vec<String> = if env::args().any(|s| s == \"--sysroot\") {\n-            env::args().collect()\n-        } else {\n-            env::args().chain(Some(\"--sysroot\".to_owned())).chain(Some(sys_root)).collect()\n-        };\n-\n-        // this check ensures that dependencies are built but not linted and the final crate is\n-        // linted but not built\n-        let clippy_enabled = env::args().any(|s| s == \"-Zno-trans\");\n+        rustc_driver::in_rustc_thread(|| {\n+            // this conditional check for the --sysroot flag is there so users can call `cargo-clippy` directly\n+            // without having to pass --sysroot or anything\n+            let mut args: Vec<String> = if env::args().any(|s| s == \"--sysroot\") {\n+                env::args().collect()\n+            } else {\n+                env::args().chain(Some(\"--sysroot\".to_owned())).chain(Some(sys_root)).collect()\n+            };\n \n-        if clippy_enabled {\n-            args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-clippy\"\"#.to_owned()]);\n-        }\n+            // this check ensures that dependencies are built but not linted and the final crate is\n+            // linted but not built\n+            let clippy_enabled = env::args().any(|s| s == \"-Zno-trans\");\n \n-        let mut ccc = ClippyCompilerCalls::new(clippy_enabled);\n-        let (result, _) = rustc_driver::run_compiler(&args, &mut ccc, None, None);\n+            if clippy_enabled {\n+                args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-clippy\"\"#.to_owned()]);\n+            }\n \n-        if let Err(err_count) = result {\n-            if err_count > 0 {\n-                std::process::exit(1);\n+            let mut ccc = ClippyCompilerCalls::new(clippy_enabled);\n+            let (result, _) = rustc_driver::run_compiler(&args, &mut ccc, None, None);\n+            if let Err(err_count) = result {\n+                if err_count > 0 {\n+                    std::process::exit(1);\n+                }\n             }\n-        }\n+        }).expect(\"rustc_thread failed\");\n     }\n }\n "}]}