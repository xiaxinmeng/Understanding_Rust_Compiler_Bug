{"sha": "c271c708e2d238bcc19c21fc810c9ed6f8baf324", "node_id": "C_kwDOAAsO6NoAKGMyNzFjNzA4ZTJkMjM4YmNjMTljMjFmYzgxMGM5ZWQ2ZjhiYWYzMjQ", "commit": {"author": {"name": "Alona Enraght-Moony", "email": "code@alona.page", "date": "2023-05-13T13:07:23Z"}, "committer": {"name": "Alona Enraght-Moony", "email": "code@alona.page", "date": "2023-05-13T13:07:23Z"}, "message": "rustdoc-json: Add tests for `#![feature(inherent_associated_types)]`", "tree": {"sha": "257259c57529144d7b8a601310896204e4768e8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/257259c57529144d7b8a601310896204e4768e8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c271c708e2d238bcc19c21fc810c9ed6f8baf324", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c271c708e2d238bcc19c21fc810c9ed6f8baf324", "html_url": "https://github.com/rust-lang/rust/commit/c271c708e2d238bcc19c21fc810c9ed6f8baf324", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c271c708e2d238bcc19c21fc810c9ed6f8baf324/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "url": "https://api.github.com/repos/rust-lang/rust/commits/69fef92ab2f287f072b66fb7b4f62c8bb4acba43", "html_url": "https://github.com/rust-lang/rust/commit/69fef92ab2f287f072b66fb7b4f62c8bb4acba43"}], "stats": {"total": 83, "additions": 83, "deletions": 0}, "files": [{"sha": "ed63def93df0cfbf3d59f5bbdbdeced877b969a0", "filename": "tests/rustdoc-json/type/inherent_associated_type.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c271c708e2d238bcc19c21fc810c9ed6f8baf324/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c271c708e2d238bcc19c21fc810c9ed6f8baf324/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type.rs?ref=c271c708e2d238bcc19c21fc810c9ed6f8baf324", "patch": "@@ -0,0 +1,29 @@\n+// ignore-tidy-linelength\n+#![feature(inherent_associated_types)]\n+#![feature(no_core)]\n+#![allow(incomplete_features)]\n+#![no_core]\n+\n+// @set OwnerMetadata = '$.index[*][?(@.name==\"OwnerMetadata\")].id'\n+pub struct OwnerMetadata;\n+// @set Owner = '$.index[*][?(@.name==\"Owner\")].id'\n+pub struct Owner;\n+\n+pub fn create() -> Owner::Metadata {\n+    OwnerMetadata\n+}\n+// @is '$.index[*][?(@.name==\"create\")].inner.decl.output.kind' '\"qualified_path\"'\n+// @is '$.index[*][?(@.name==\"create\")].inner.decl.output.inner.name' '\"Metadata\"'\n+// @is '$.index[*][?(@.name==\"create\")].inner.decl.output.inner.trait' null\n+// @is '$.index[*][?(@.name==\"create\")].inner.decl.output.inner.self_type.kind' '\"resolved_path\"'\n+// @is '$.index[*][?(@.name==\"create\")].inner.decl.output.inner.self_type.inner.id' $Owner\n+\n+/// impl\n+impl Owner {\n+    /// iat\n+    pub type Metadata = OwnerMetadata;\n+}\n+// @set iat = '$.index[*][?(@.docs==\"iat\")].id'\n+// @is '$.index[*][?(@.docs==\"impl\")].inner.items[*]' $iat\n+// @is '$.index[*][?(@.docs==\"iat\")].kind' '\"assoc_type\"'\n+// @is '$.index[*][?(@.docs==\"iat\")].inner.default.inner.id' $OwnerMetadata"}, {"sha": "a089600b692d6395a3cc1618c3864b7bba15c4dc", "filename": "tests/rustdoc-json/type/inherent_associated_type_bound.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c271c708e2d238bcc19c21fc810c9ed6f8baf324/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c271c708e2d238bcc19c21fc810c9ed6f8baf324/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type_bound.rs?ref=c271c708e2d238bcc19c21fc810c9ed6f8baf324", "patch": "@@ -0,0 +1,21 @@\n+// ignore-tidy-linelength\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+// @set Carrier = '$.index[*][?(@.name==\"Carrier\")].id'\n+pub struct Carrier<'a>(&'a ());\n+\n+// @is '$.index[*][?(@.name==\"User\")].inner.type.kind' '\"function_pointer\"'\n+// @is '$.index[*][?(@.name==\"User\")].inner.type.inner.generic_params[*].name' \\\"\"'b\"\\\"\n+// @is '$.index[*][?(@.name==\"User\")].inner.type.inner.decl.inputs[0][1].kind' '\"qualified_path\"'\n+// @is '$.index[*][?(@.name==\"User\")].inner.type.inner.decl.inputs[0][1].inner.self_type.inner.id' $Carrier\n+// @is '$.index[*][?(@.name==\"User\")].inner.type.inner.decl.inputs[0][1].inner.self_type.inner.args.angle_bracketed.args[0].lifetime' \\\"\"'b\"\\\"\n+// @is '$.index[*][?(@.name==\"User\")].inner.type.inner.decl.inputs[0][1].inner.name' '\"Focus\"'\n+// @is '$.index[*][?(@.name==\"User\")].inner.type.inner.decl.inputs[0][1].inner.trait' null\n+// @is '$.index[*][?(@.name==\"User\")].inner.type.inner.decl.inputs[0][1].inner.args.angle_bracketed.args[0].type.inner' '\"i32\"'\n+\n+pub type User = for<'b> fn(Carrier<'b>::Focus<i32>);\n+\n+impl<'a> Carrier<'a> {\n+    pub type Focus<T> = &'a mut T;\n+}"}, {"sha": "30c68bfe56c917d0c88cb45b22062280588e9106", "filename": "tests/rustdoc-json/type/inherent_associated_type_projections.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c271c708e2d238bcc19c21fc810c9ed6f8baf324/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type_projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c271c708e2d238bcc19c21fc810c9ed6f8baf324/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type_projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-json%2Ftype%2Finherent_associated_type_projections.rs?ref=c271c708e2d238bcc19c21fc810c9ed6f8baf324", "patch": "@@ -0,0 +1,33 @@\n+// ignore-tidy-linelength\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+// @set Parametrized = '$.index[*][?(@.name==\"Parametrized\")].id'\n+pub struct Parametrized<T>(T);\n+\n+// @is '$.index[*][?(@.name==\"Test\")].inner.type.kind' '\"qualified_path\"'\n+// @is '$.index[*][?(@.name==\"Test\")].inner.type.inner.self_type.inner.id' $Parametrized\n+// @is '$.index[*][?(@.name==\"Test\")].inner.type.inner.self_type.inner.args.angle_bracketed.args[0].type' '{\"inner\": \"i32\", \"kind\": \"primitive\"}'\n+// @is '$.index[*][?(@.name==\"Test\")].inner.type.inner.name' '\"Proj\"'\n+// @is '$.index[*][?(@.name==\"Test\")].inner.type.inner.trait' null\n+pub type Test = Parametrized<i32>::Proj;\n+\n+/// param_bool\n+impl Parametrized<bool> {\n+    /// param_bool_proj\n+    pub type Proj = ();\n+}\n+\n+/// param_i32\n+impl Parametrized<i32> {\n+    /// param_i32_proj\n+    pub type Proj = String;\n+}\n+\n+// @set param_bool = '$.index[*][?(@.docs==\"param_bool\")].id'\n+// @set param_i32 = '$.index[*][?(@.docs==\"param_i32\")].id'\n+// @set param_bool_proj = '$.index[*][?(@.docs==\"param_bool_proj\")].id'\n+// @set param_i32_proj = '$.index[*][?(@.docs==\"param_i32_proj\")].id'\n+\n+// @is '$.index[*][?(@.docs==\"param_bool\")].inner.items[*]' $param_bool_proj\n+// @is '$.index[*][?(@.docs==\"param_i32\")].inner.items[*]' $param_i32_proj"}]}