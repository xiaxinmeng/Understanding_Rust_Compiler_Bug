{"sha": "3f09418cbe0cc598e8b0567626c2c800a09cc9cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMDk0MThjYmUwY2M1OThlOGIwNTY3NjI2YzJjODAwYTA5Y2M5Y2M=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-02-10T03:24:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-10T03:24:21Z"}, "message": "Rollup merge of #81466 - sasurau4:fix/enhance-sugget-mut-method-for-loop, r=oli-obk\n\nAdd suggest mut method for loop\n\nPart of #49839\n\nThis PR focus on [the comment case](https://github.com/rust-lang/rust/issues/49839#issuecomment-761930746)", "tree": {"sha": "e81ccfa3478792032081484bcfad833500c81c81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e81ccfa3478792032081484bcfad833500c81c81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f09418cbe0cc598e8b0567626c2c800a09cc9cc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgI1HlCRBK7hj4Ov3rIwAAdHIIAFA3ZjpP9S0aHnt2drHVQacI\nrh3kQLPMNoslaOOfzviE7A/cnG9A7cYNft1iTG4RfiW2rAKQfLU8S4lc4+T8Rp9a\nYrCuMFNEtRt8cI+xaVTDjb5ShSjbpK0r+TtA8E1IiRUyPCZ0kIfRgBvfOBgz1zgc\nLGSXrYtPkv8L3Phwb8hQvX0UlZHi4LFgq6a62+urS18HGnmGFE10ce7ZrWN/BLdY\nJD+mDJG2F45xqencc/gbu/ZCFkwp71pUZ8Riiz5YRdV9a2HtzQ+LXSNtPXH2i1xj\ni0j1a7VpjLEuJFkQye5DFNH4u9ijT7jH0OjL1+j6l1Y4Rv132jbpOjwIgl8sfOQ=\n=43fy\n-----END PGP SIGNATURE-----\n", "payload": "tree e81ccfa3478792032081484bcfad833500c81c81\nparent a28f2afbeb341a5d59730091af4d59e953f9e767\nparent 90c9b57211ce6104660b93d64f18e0c9736f5a99\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1612927461 +0900\ncommitter GitHub <noreply@github.com> 1612927461 +0900\n\nRollup merge of #81466 - sasurau4:fix/enhance-sugget-mut-method-for-loop, r=oli-obk\n\nAdd suggest mut method for loop\n\nPart of #49839\n\nThis PR focus on [the comment case](https://github.com/rust-lang/rust/issues/49839#issuecomment-761930746)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f09418cbe0cc598e8b0567626c2c800a09cc9cc", "html_url": "https://github.com/rust-lang/rust/commit/3f09418cbe0cc598e8b0567626c2c800a09cc9cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f09418cbe0cc598e8b0567626c2c800a09cc9cc/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a28f2afbeb341a5d59730091af4d59e953f9e767", "url": "https://api.github.com/repos/rust-lang/rust/commits/a28f2afbeb341a5d59730091af4d59e953f9e767", "html_url": "https://github.com/rust-lang/rust/commit/a28f2afbeb341a5d59730091af4d59e953f9e767"}, {"sha": "90c9b57211ce6104660b93d64f18e0c9736f5a99", "url": "https://api.github.com/repos/rust-lang/rust/commits/90c9b57211ce6104660b93d64f18e0c9736f5a99", "html_url": "https://github.com/rust-lang/rust/commit/90c9b57211ce6104660b93d64f18e0c9736f5a99"}], "stats": {"total": 126, "additions": 117, "deletions": 9}, "files": [{"sha": "0467bf76afecc5251daaef68715de379e3a564a4", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 85, "deletions": 9, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/3f09418cbe0cc598e8b0567626c2c800a09cc9cc/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f09418cbe0cc598e8b0567626c2c800a09cc9cc/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=3f09418cbe0cc598e8b0567626c2c800a09cc9cc", "patch": "@@ -376,15 +376,18 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                                     opt_assignment_rhs_span.and_then(|span| span.desugaring_kind());\n                                 match opt_desugaring_kind {\n                                     // on for loops, RHS points to the iterator part\n-                                    Some(DesugaringKind::ForLoop(_)) => Some((\n-                                        false,\n-                                        opt_assignment_rhs_span.unwrap(),\n-                                        format!(\n-                                            \"this iterator yields `{SIGIL}` {DESC}s\",\n-                                            SIGIL = pointer_sigil,\n-                                            DESC = pointer_desc\n-                                        ),\n-                                    )),\n+                                    Some(DesugaringKind::ForLoop(_)) => {\n+                                        self.suggest_similar_mut_method_for_for_loop(&mut err);\n+                                        Some((\n+                                            false,\n+                                            opt_assignment_rhs_span.unwrap(),\n+                                            format!(\n+                                                \"this iterator yields `{SIGIL}` {DESC}s\",\n+                                                SIGIL = pointer_sigil,\n+                                                DESC = pointer_desc\n+                                            ),\n+                                        ))\n+                                    }\n                                     // don't create labels for compiler-generated spans\n                                     Some(_) => None,\n                                     None => {\n@@ -537,6 +540,79 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         );\n     }\n \n+    // Attempt to search similar mutable assosiated items for suggestion.\n+    // In the future, attempt in all path but initially for RHS of for_loop\n+    fn suggest_similar_mut_method_for_for_loop(&self, err: &mut DiagnosticBuilder<'_>) {\n+        let hir = self.infcx.tcx.hir();\n+        let node = hir.item(self.mir_hir_id());\n+        use hir::{\n+            Expr,\n+            ExprKind::{Block, Call, DropTemps, Match, MethodCall},\n+        };\n+        if let hir::ItemKind::Fn(_, _, body_id) = node.kind {\n+            if let Block(\n+                hir::Block {\n+                    expr:\n+                        Some(Expr {\n+                            kind:\n+                                DropTemps(Expr {\n+                                    kind:\n+                                        Match(\n+                                            Expr {\n+                                                kind:\n+                                                    Call(\n+                                                        _,\n+                                                        [Expr {\n+                                                            kind: MethodCall(path_segment, ..),\n+                                                            hir_id,\n+                                                            ..\n+                                                        }, ..],\n+                                                    ),\n+                                                ..\n+                                            },\n+                                            ..,\n+                                        ),\n+                                    ..\n+                                }),\n+                            ..\n+                        }),\n+                    ..\n+                },\n+                _,\n+            ) = hir.body(body_id).value.kind\n+            {\n+                let opt_suggestions = path_segment\n+                    .hir_id\n+                    .map(|path_hir_id| self.infcx.tcx.typeck(path_hir_id.owner))\n+                    .and_then(|typeck| typeck.type_dependent_def_id(*hir_id))\n+                    .and_then(|def_id| self.infcx.tcx.impl_of_method(def_id))\n+                    .map(|def_id| self.infcx.tcx.associated_items(def_id))\n+                    .map(|assoc_items| {\n+                        assoc_items\n+                            .in_definition_order()\n+                            .map(|assoc_item_def| assoc_item_def.ident)\n+                            .filter(|&ident| {\n+                                let original_method_ident = path_segment.ident;\n+                                original_method_ident != ident\n+                                    && ident\n+                                        .as_str()\n+                                        .starts_with(&original_method_ident.name.to_string())\n+                            })\n+                            .map(|ident| format!(\"{}()\", ident))\n+                    });\n+\n+                if let Some(suggestions) = opt_suggestions {\n+                    err.span_suggestions(\n+                        path_segment.ident.span,\n+                        &format!(\"use mutable method\"),\n+                        suggestions,\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+            }\n+        };\n+    }\n+\n     /// Targeted error when encountering an `FnMut` closure where an `Fn` closure was expected.\n     fn expected_fn_found_fn_mut_call(&self, err: &mut DiagnosticBuilder<'_>, sp: Span, act: &str) {\n         err.span_label(sp, format!(\"cannot {}\", act));"}, {"sha": "756768bce46504925f8954d909641e23327bbace", "filename": "src/test/ui/suggestions/suggest-mut-method-for-loop.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3f09418cbe0cc598e8b0567626c2c800a09cc9cc/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-mut-method-for-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f09418cbe0cc598e8b0567626c2c800a09cc9cc/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-mut-method-for-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-mut-method-for-loop.rs?ref=3f09418cbe0cc598e8b0567626c2c800a09cc9cc", "patch": "@@ -0,0 +1,17 @@\n+use std::collections::HashMap;\n+struct X(usize);\n+struct Y {\n+    v: u32\n+}\n+\n+fn main() {\n+    let mut buzz = HashMap::new();\n+    buzz.insert(\"a\", Y { v: 0 });\n+\n+    for mut t in buzz.values() {\n+                  //~^ HELP\n+                  //~| SUGGESTION values_mut()\n+        t.v += 1;\n+        //~^ ERROR cannot assign\n+    }\n+}"}, {"sha": "6ab08197441c39a2654826518983683c503b9108", "filename": "src/test/ui/suggestions/suggest-mut-method-for-loop.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3f09418cbe0cc598e8b0567626c2c800a09cc9cc/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-mut-method-for-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f09418cbe0cc598e8b0567626c2c800a09cc9cc/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-mut-method-for-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-mut-method-for-loop.stderr?ref=3f09418cbe0cc598e8b0567626c2c800a09cc9cc", "patch": "@@ -0,0 +1,15 @@\n+error[E0594]: cannot assign to `t.v` which is behind a `&` reference\n+  --> $DIR/suggest-mut-method-for-loop.rs:14:9\n+   |\n+LL |     for mut t in buzz.values() {\n+   |                  -------------\n+   |                  |    |\n+   |                  |    help: use mutable method: `values_mut()`\n+   |                  this iterator yields `&` references\n+...\n+LL |         t.v += 1;\n+   |         ^^^^^^^^ `t` is a `&` reference, so the data it refers to cannot be written\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0594`."}]}