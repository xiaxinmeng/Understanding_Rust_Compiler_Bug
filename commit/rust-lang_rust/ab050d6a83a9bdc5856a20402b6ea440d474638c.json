{"sha": "ab050d6a83a9bdc5856a20402b6ea440d474638c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMDUwZDZhODNhOWJkYzU4NTZhMjA0MDJiNmVhNDQwZDQ3NDYzOGM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-30T06:02:24Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-30T12:50:20Z"}, "message": "MatchExpressionArmPattern: Use more generic wording.\n\nThe existing wording was inappropriate for e.g.\n`if let Ok(_) = expr { .. }`. The diagnostic would\nleak the fact that we desugar to a `match`.", "tree": {"sha": "24e93ba96d75e608b51b03d5aca0b5522fab7360", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24e93ba96d75e608b51b03d5aca0b5522fab7360"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab050d6a83a9bdc5856a20402b6ea440d474638c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab050d6a83a9bdc5856a20402b6ea440d474638c", "html_url": "https://github.com/rust-lang/rust/commit/ab050d6a83a9bdc5856a20402b6ea440d474638c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab050d6a83a9bdc5856a20402b6ea440d474638c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73db83aa70bea7973fa4bb1f025de199a19d5282", "url": "https://api.github.com/repos/rust-lang/rust/commits/73db83aa70bea7973fa4bb1f025de199a19d5282", "html_url": "https://github.com/rust-lang/rust/commit/73db83aa70bea7973fa4bb1f025de199a19d5282"}], "stats": {"total": 76, "additions": 38, "deletions": 38}, "files": [{"sha": "f0f0e2cdeb9c159b5ca22ccd1367a4f89feecc44", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=ab050d6a83a9bdc5856a20402b6ea440d474638c", "patch": "@@ -584,7 +584,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             ObligationCauseCode::MatchExpressionArmPattern { span, ty } => {\n                 if ty.is_suggestable() {\n                     // don't show type `_`\n-                    err.span_label(span, format!(\"this match expression has type `{}`\", ty));\n+                    err.span_label(span, format!(\"this expression has type `{}`\", ty));\n                 }\n                 if let Some(ty::error::ExpectedFound { found, .. }) = exp_found {\n                     if ty.is_box() && ty.boxed_ty() == found {"}, {"sha": "416f055251b04076e82cd19c78a8ae76978dbdab", "filename": "src/test/ui/block-result/issue-13624.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13624.stderr?ref=ab050d6a83a9bdc5856a20402b6ea440d474638c", "patch": "@@ -10,7 +10,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-13624.rs:20:9\n    |\n LL |       match enum_struct_variant {\n-   |             ------------------- this match expression has type `()`\n+   |             ------------------- this expression has type `()`\n LL |         a::Enum::EnumStructVariant { x, y, z } => {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found enum `a::Enum`\n "}, {"sha": "39c0676373794b45135c49e01d9b0412963e7ba6", "filename": "src/test/ui/error-codes/E0308-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Ferror-codes%2FE0308-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Ferror-codes%2FE0308-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0308-4.stderr?ref=ab050d6a83a9bdc5856a20402b6ea440d474638c", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/E0308-4.rs:4:15\n    |\n LL |     match x {\n-   |           - this match expression has type `u8`\n+   |           - this expression has type `u8`\n LL |         0u8..=3i8 => (),\n    |         ---   ^^^ expected `u8`, found `i8`\n    |         |"}, {"sha": "580c80f66c3ca488c6c03859def0d024244168fe", "filename": "src/test/ui/exclusive-range/exclusive_range_pattern_syntax_collision.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision.stderr?ref=ab050d6a83a9bdc5856a20402b6ea440d474638c", "patch": "@@ -8,7 +8,7 @@ error[E0308]: mismatched types\n   --> $DIR/exclusive_range_pattern_syntax_collision.rs:5:13\n    |\n LL |     match [5..4, 99..105, 43..44] {\n-   |           ----------------------- this match expression has type `std::ops::Range<{integer}>`\n+   |           ----------------------- this expression has type `std::ops::Range<{integer}>`\n LL |         [_, 99.., _] => {},\n    |             ^^ expected struct `std::ops::Range`, found integer\n    |"}, {"sha": "88d45f16ff6c9bb357391c0704d7ca636a610129", "filename": "src/test/ui/exclusive-range/exclusive_range_pattern_syntax_collision2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision2.stderr?ref=ab050d6a83a9bdc5856a20402b6ea440d474638c", "patch": "@@ -14,7 +14,7 @@ error[E0308]: mismatched types\n   --> $DIR/exclusive_range_pattern_syntax_collision2.rs:5:13\n    |\n LL |     match [5..4, 99..105, 43..44] {\n-   |           ----------------------- this match expression has type `std::ops::Range<{integer}>`\n+   |           ----------------------- this expression has type `std::ops::Range<{integer}>`\n LL |         [_, 99..] => {},\n    |             ^^ expected struct `std::ops::Range`, found integer\n    |"}, {"sha": "6abba7d7cab10a6bb1a367b3d14ed96f56170c48", "filename": "src/test/ui/exclusive-range/exclusive_range_pattern_syntax_collision3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexclusive-range%2Fexclusive_range_pattern_syntax_collision3.stderr?ref=ab050d6a83a9bdc5856a20402b6ea440d474638c", "patch": "@@ -8,7 +8,7 @@ error[E0308]: mismatched types\n   --> $DIR/exclusive_range_pattern_syntax_collision3.rs:5:12\n    |\n LL |     match [5..4, 99..105, 43..44] {\n-   |           ----------------------- this match expression has type `std::ops::Range<{integer}>`\n+   |           ----------------------- this expression has type `std::ops::Range<{integer}>`\n LL |         [..9, 99..100, _] => {},\n    |            ^ expected struct `std::ops::Range`, found integer\n    |\n@@ -19,7 +19,7 @@ error[E0308]: mismatched types\n   --> $DIR/exclusive_range_pattern_syntax_collision3.rs:5:15\n    |\n LL |     match [5..4, 99..105, 43..44] {\n-   |           ----------------------- this match expression has type `std::ops::Range<{integer}>`\n+   |           ----------------------- this expression has type `std::ops::Range<{integer}>`\n LL |         [..9, 99..100, _] => {},\n    |               ^^  --- this is of type `{integer}`\n    |               |"}, {"sha": "57533ba5e370b86d35ce9fa6eab0c1fd31af61ef", "filename": "src/test/ui/issues/issue-11844.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fissues%2Fissue-11844.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fissues%2Fissue-11844.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11844.stderr?ref=ab050d6a83a9bdc5856a20402b6ea440d474638c", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-11844.rs:6:9\n    |\n LL |     match a {\n-   |           - this match expression has type `std::option::Option<std::boxed::Box<{integer}>>`\n+   |           - this expression has type `std::option::Option<std::boxed::Box<{integer}>>`\n LL |         Ok(a) =>\n    |         ^^^^^ expected enum `std::option::Option`, found enum `std::result::Result`\n    |"}, {"sha": "60c4cceac51bef60570b9aaa89475b0e573c7a04", "filename": "src/test/ui/issues/issue-12552.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fissues%2Fissue-12552.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fissues%2Fissue-12552.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12552.stderr?ref=ab050d6a83a9bdc5856a20402b6ea440d474638c", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-12552.rs:6:5\n    |\n LL |   match t {\n-   |         - this match expression has type `std::result::Result<_, {integer}>`\n+   |         - this expression has type `std::result::Result<_, {integer}>`\n LL |     Some(k) => match k {\n    |     ^^^^^^^ expected enum `std::result::Result`, found enum `std::option::Option`\n    |"}, {"sha": "52d9e2a91b971e9d849faa03e71562b45f925bef", "filename": "src/test/ui/issues/issue-13466.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fissues%2Fissue-13466.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fissues%2Fissue-13466.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13466.stderr?ref=ab050d6a83a9bdc5856a20402b6ea440d474638c", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-13466.rs:8:9\n    |\n LL |     let _x: usize = match Some(1) {\n-   |                           ------- this match expression has type `std::option::Option<{integer}>`\n+   |                           ------- this expression has type `std::option::Option<{integer}>`\n LL |         Ok(u) => u,\n    |         ^^^^^ expected enum `std::option::Option`, found enum `std::result::Result`\n    |\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-13466.rs:14:9\n    |\n LL |     let _x: usize = match Some(1) {\n-   |                           ------- this match expression has type `std::option::Option<{integer}>`\n+   |                           ------- this expression has type `std::option::Option<{integer}>`\n ...\n LL |         Err(e) => panic!(e)\n    |         ^^^^^^ expected enum `std::option::Option`, found enum `std::result::Result`"}, {"sha": "0ad49ea1e7fe5efdf69ae78e084f329bcec755ac", "filename": "src/test/ui/issues/issue-15896.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fissues%2Fissue-15896.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fissues%2Fissue-15896.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15896.stderr?ref=ab050d6a83a9bdc5856a20402b6ea440d474638c", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-15896.rs:11:11\n    |\n LL |     let u = match e {\n-   |                   - this match expression has type `main::R`\n+   |                   - this expression has type `main::R`\n LL |         E::B(\n LL |           Tau{t: x},\n    |           ^^^^^^^^^ expected enum `main::R`, found struct `main::Tau`"}, {"sha": "f8ea0907099a5d0a39f4228f6978271258ff5dfb", "filename": "src/test/ui/issues/issue-16401.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fissues%2Fissue-16401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fissues%2Fissue-16401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16401.stderr?ref=ab050d6a83a9bdc5856a20402b6ea440d474638c", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-16401.rs:8:9\n    |\n LL |     match () {\n-   |           -- this match expression has type `()`\n+   |           -- this expression has type `()`\n LL |         Slice { data: data, len: len } => (),\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `Slice`\n    |"}, {"sha": "713e4b5ccd57575720f08173d3ef8b782f0b85f9", "filename": "src/test/ui/issues/issue-3680.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fissues%2Fissue-3680.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fissues%2Fissue-3680.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3680.stderr?ref=ab050d6a83a9bdc5856a20402b6ea440d474638c", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-3680.rs:3:9\n    |\n LL |     match None {\n-   |           ---- this match expression has type `std::option::Option<_>`\n+   |           ---- this expression has type `std::option::Option<_>`\n LL |         Err(_) => ()\n    |         ^^^^^^ expected enum `std::option::Option`, found enum `std::result::Result`\n    |"}, {"sha": "c47e8689436ee1e7ee3dea504ef8e95c0e2ea35c", "filename": "src/test/ui/issues/issue-5100.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fissues%2Fissue-5100.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fissues%2Fissue-5100.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5100.stderr?ref=ab050d6a83a9bdc5856a20402b6ea440d474638c", "patch": "@@ -29,7 +29,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-5100.rs:33:9\n    |\n LL |     match (true, false) {\n-   |           ------------- this match expression has type `(bool, bool)`\n+   |           ------------- this expression has type `(bool, bool)`\n LL |         box (true, false) => ()\n    |         ^^^^^^^^^^^^^^^^^ expected tuple, found struct `std::boxed::Box`\n    |"}, {"sha": "314d1fddbd76a5ff9598bc3505d44d46e69cba3e", "filename": "src/test/ui/issues/issue-5358-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fissues%2Fissue-5358-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fissues%2Fissue-5358-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5358-1.stderr?ref=ab050d6a83a9bdc5856a20402b6ea440d474638c", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-5358-1.rs:6:9\n    |\n LL |     match S(Either::Left(5)) {\n-   |           ------------------ this match expression has type `S`\n+   |           ------------------ this expression has type `S`\n LL |         Either::Right(_) => {}\n    |         ^^^^^^^^^^^^^^^^ expected struct `S`, found enum `Either`\n    |"}, {"sha": "a4f1ac94825d59f38388fc00de6ee1fdef528e94", "filename": "src/test/ui/issues/issue-57741-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fissues%2Fissue-57741-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fissues%2Fissue-57741-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57741-1.stderr?ref=ab050d6a83a9bdc5856a20402b6ea440d474638c", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-57741-1.rs:14:9\n    |\n LL |     let y = match x {\n-   |                   - this match expression has type `std::boxed::Box<u32>`\n+   |                   - this expression has type `std::boxed::Box<u32>`\n LL |         S::A { a } | S::B { b: a } => a,\n    |         ^^^^^^^^^^ expected struct `std::boxed::Box`, found enum `S`\n    |\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-57741-1.rs:14:22\n    |\n LL |     let y = match x {\n-   |                   - this match expression has type `std::boxed::Box<u32>`\n+   |                   - this expression has type `std::boxed::Box<u32>`\n LL |         S::A { a } | S::B { b: a } => a,\n    |                      ^^^^^^^^^^^^^ expected struct `std::boxed::Box`, found enum `S`\n    |"}, {"sha": "6f9e5b08a833f1990dc0ae107d28132f5e33e648", "filename": "src/test/ui/issues/issue-57741.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fissues%2Fissue-57741.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fissues%2Fissue-57741.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57741.stderr?ref=ab050d6a83a9bdc5856a20402b6ea440d474638c", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     let y = match x {\n    |                   -\n    |                   |\n-   |                   this match expression has type `std::boxed::Box<T>`\n+   |                   this expression has type `std::boxed::Box<T>`\n    |                   help: consider dereferencing the boxed value: `*x`\n LL |         T::A(a) | T::B(a) => a,\n    |         ^^^^^^^ expected struct `std::boxed::Box`, found enum `T`\n@@ -18,7 +18,7 @@ error[E0308]: mismatched types\n LL |     let y = match x {\n    |                   -\n    |                   |\n-   |                   this match expression has type `std::boxed::Box<T>`\n+   |                   this expression has type `std::boxed::Box<T>`\n    |                   help: consider dereferencing the boxed value: `*x`\n LL |         T::A(a) | T::B(a) => a,\n    |                   ^^^^^^^ expected struct `std::boxed::Box`, found enum `T`\n@@ -32,7 +32,7 @@ error[E0308]: mismatched types\n LL |     let y = match x {\n    |                   -\n    |                   |\n-   |                   this match expression has type `std::boxed::Box<S>`\n+   |                   this expression has type `std::boxed::Box<S>`\n    |                   help: consider dereferencing the boxed value: `*x`\n LL |         S::A { a } | S::B { b: a } => a,\n    |         ^^^^^^^^^^ expected struct `std::boxed::Box`, found enum `S`\n@@ -46,7 +46,7 @@ error[E0308]: mismatched types\n LL |     let y = match x {\n    |                   -\n    |                   |\n-   |                   this match expression has type `std::boxed::Box<S>`\n+   |                   this expression has type `std::boxed::Box<S>`\n    |                   help: consider dereferencing the boxed value: `*x`\n LL |         S::A { a } | S::B { b: a } => a,\n    |                      ^^^^^^^^^^^^^ expected struct `std::boxed::Box`, found enum `S`"}, {"sha": "590dd40c65364238fb48e0d2ad48099a7d846c47", "filename": "src/test/ui/issues/issue-7092.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fissues%2Fissue-7092.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fissues%2Fissue-7092.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7092.stderr?ref=ab050d6a83a9bdc5856a20402b6ea440d474638c", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-7092.rs:6:9\n    |\n LL |     match x {\n-   |           - this match expression has type `Whatever`\n+   |           - this expression has type `Whatever`\n LL |         Some(field) =>\n    |         ^^^^^^^^^^^ expected enum `Whatever`, found enum `std::option::Option`\n    |"}, {"sha": "a475bd5e5819c7a4e9d844e2fb9c659882203e43", "filename": "src/test/ui/match/match-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fmatch%2Fmatch-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fmatch%2Fmatch-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-struct.stderr?ref=ab050d6a83a9bdc5856a20402b6ea440d474638c", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/match-struct.rs:6:9\n    |\n LL |     match (S { a: 1 }) {\n-   |           ------------ this match expression has type `S`\n+   |           ------------ this expression has type `S`\n LL |         E::C(_) => (),\n    |         ^^^^^^^ expected struct `S`, found enum `E`\n "}, {"sha": "31f77bdff8b1f00d63f4e312acfcec3a9ab1eb7b", "filename": "src/test/ui/match/match-tag-unary.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-unary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-unary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-unary.stderr?ref=ab050d6a83a9bdc5856a20402b6ea440d474638c", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn main() { let x: A = A::A(0); match x { B::B(y) => { } } }\n    |                                       -   ^^^^^^^ expected enum `A`, found enum `B`\n    |                                       |\n-   |                                       this match expression has type `A`\n+   |                                       this expression has type `A`\n \n error: aborting due to previous error\n "}, {"sha": "8ff4f948a05ec5132610e1f5d5d82dca9797906c", "filename": "src/test/ui/parser/pat-tuple-5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-5.stderr?ref=ab050d6a83a9bdc5856a20402b6ea440d474638c", "patch": "@@ -17,7 +17,7 @@ error[E0308]: mismatched types\n   --> $DIR/pat-tuple-5.rs:5:10\n    |\n LL |     match (0, 1) {\n-   |           ------ this match expression has type `({integer}, {integer})`\n+   |           ------ this expression has type `({integer}, {integer})`\n LL |         (PAT ..) => {}\n    |          ^^^ expected tuple, found `u8`\n    |"}, {"sha": "60f76796c03969717613163d2a4b186361bdedf7", "filename": "src/test/ui/pattern/pattern-error-continue.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.stderr?ref=ab050d6a83a9bdc5856a20402b6ea440d474638c", "patch": "@@ -28,7 +28,7 @@ error[E0308]: mismatched types\n   --> $DIR/pattern-error-continue.rs:22:9\n    |\n LL |     match 'c' {\n-   |           --- this match expression has type `char`\n+   |           --- this expression has type `char`\n LL |         S { .. } => (),\n    |         ^^^^^^^^ expected `char`, found struct `S`\n "}, {"sha": "1e671e8d8eff3315abb6ff9e2ff86a0b8da99375", "filename": "src/test/ui/pattern/pattern-tyvar.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar.stderr?ref=ab050d6a83a9bdc5856a20402b6ea440d474638c", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/pattern-tyvar.rs:5:18\n    |\n LL |     match t {\n-   |           - this match expression has type `std::option::Option<std::vec::Vec<isize>>`\n+   |           - this expression has type `std::option::Option<std::vec::Vec<isize>>`\n LL |       Bar::T1(_, Some::<isize>(x)) => {\n    |                  ^^^^^^^^^^^^^^^^ expected struct `std::vec::Vec`, found `isize`\n    |"}, {"sha": "a69011d7450809df657549b3b8630aaaeea69f12", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=ab050d6a83a9bdc5856a20402b6ea440d474638c", "patch": "@@ -630,7 +630,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:67:12\n    |\n LL |     if let Range { start: _, end: _ } = true..true && false {}\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this match expression has type `bool`\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n    |            |\n    |            expected `bool`, found struct `std::ops::Range`\n    |\n@@ -650,7 +650,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:71:12\n    |\n LL |     if let Range { start: _, end: _ } = true..true || false {}\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this match expression has type `bool`\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n    |            |\n    |            expected `bool`, found struct `std::ops::Range`\n    |\n@@ -697,7 +697,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:86:12\n    |\n LL |     if let Range { start: true, end } = t..&&false {}\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this match expression has type `bool`\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `bool`\n    |            |\n    |            expected `bool`, found struct `std::ops::Range`\n    |\n@@ -818,7 +818,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:131:15\n    |\n LL |     while let Range { start: _, end: _ } = true..true && false {}\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this match expression has type `bool`\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n    |               |\n    |               expected `bool`, found struct `std::ops::Range`\n    |\n@@ -838,7 +838,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:135:15\n    |\n LL |     while let Range { start: _, end: _ } = true..true || false {}\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this match expression has type `bool`\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n    |               |\n    |               expected `bool`, found struct `std::ops::Range`\n    |\n@@ -885,7 +885,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:150:15\n    |\n LL |     while let Range { start: true, end } = t..&&false {}\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this match expression has type `bool`\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^   - this expression has type `bool`\n    |               |\n    |               expected `bool`, found struct `std::ops::Range`\n    |\n@@ -961,7 +961,7 @@ error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:198:10\n    |\n LL |     (let Range { start: _, end: _ } = true..true || false);\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this match expression has type `bool`\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^   ---- this expression has type `bool`\n    |          |\n    |          expected `bool`, found struct `std::ops::Range`\n    |"}, {"sha": "8cfa118a2dac2a3964028fe3e4aaba814d357429", "filename": "src/test/ui/structs/structure-constructor-type-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab050d6a83a9bdc5856a20402b6ea440d474638c/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr?ref=ab050d6a83a9bdc5856a20402b6ea440d474638c", "patch": "@@ -86,7 +86,7 @@ error[E0308]: mismatched types\n   --> $DIR/structure-constructor-type-mismatch.rs:54:9\n    |\n LL |     match (Point { x: 1, y: 2 }) {\n-   |           ---------------------- this match expression has type `Point<{integer}>`\n+   |           ---------------------- this expression has type `Point<{integer}>`\n LL |         PointF::<u32> { .. } => {}\n    |         ^^^^^^^^^^^^^^^^^^^^ expected integer, found `f32`\n    |\n@@ -97,7 +97,7 @@ error[E0308]: mismatched types\n   --> $DIR/structure-constructor-type-mismatch.rs:59:9\n    |\n LL |     match (Point { x: 1, y: 2 }) {\n-   |           ---------------------- this match expression has type `Point<{integer}>`\n+   |           ---------------------- this expression has type `Point<{integer}>`\n LL |         PointF { .. } => {}\n    |         ^^^^^^^^^^^^^ expected integer, found `f32`\n    |\n@@ -108,7 +108,7 @@ error[E0308]: mismatched types\n   --> $DIR/structure-constructor-type-mismatch.rs:67:9\n    |\n LL |     match (Pair { x: 1, y: 2 }) {\n-   |           --------------------- this match expression has type `Pair<{integer}, {integer}>`\n+   |           --------------------- this expression has type `Pair<{integer}, {integer}>`\n LL |         PairF::<u32> { .. } => {}\n    |         ^^^^^^^^^^^^^^^^^^^ expected integer, found `f32`\n    |"}]}