{"sha": "fc23a8a7e0fe32ef18214ced7ee79e111a40df69", "node_id": "C_kwDOAAsO6NoAKGZjMjNhOGE3ZTBmZTMyZWYxODIxNGNlZDdlZTc5ZTExMWE0MGRmNjk", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-05-28T12:45:05Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-06-13T16:39:59Z"}, "message": "Lazily patch coretests", "tree": {"sha": "694ce253e019211083180e7ba5bfc26971b6d3a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/694ce253e019211083180e7ba5bfc26971b6d3a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc23a8a7e0fe32ef18214ced7ee79e111a40df69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc23a8a7e0fe32ef18214ced7ee79e111a40df69", "html_url": "https://github.com/rust-lang/rust/commit/fc23a8a7e0fe32ef18214ced7ee79e111a40df69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc23a8a7e0fe32ef18214ced7ee79e111a40df69/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c38effe286e1b68a2f1125598ece6c8887d7d49", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c38effe286e1b68a2f1125598ece6c8887d7d49", "html_url": "https://github.com/rust-lang/rust/commit/2c38effe286e1b68a2f1125598ece6c8887d7d49"}], "stats": {"total": 49, "additions": 29, "deletions": 20}, "files": [{"sha": "8cf51db17703d2c76cdf54cc5e14599821b347a4", "filename": "build_system/prepare.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fc23a8a7e0fe32ef18214ced7ee79e111a40df69/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc23a8a7e0fe32ef18214ced7ee79e111a40df69/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=fc23a8a7e0fe32ef18214ced7ee79e111a40df69", "patch": "@@ -6,7 +6,6 @@ use std::process::Command;\n use super::build_sysroot::{BUILD_SYSROOT, ORIG_BUILD_SYSROOT, SYSROOT_RUSTC_VERSION, SYSROOT_SRC};\n use super::path::{Dirs, RelPath};\n use super::rustc_info::{get_default_sysroot, get_rustc_version};\n-use super::tests::LIBCORE_TESTS_SRC;\n use super::utils::{\n     copy_dir_recursively, git_command, remove_dir_if_exists, retry_spawn_and_wait, spawn_and_wait,\n };\n@@ -19,7 +18,6 @@ pub(crate) fn prepare(dirs: &Dirs, rustc: &Path) {\n \n     // FIXME do this on the fly?\n     prepare_stdlib(dirs, rustc);\n-    prepare_coretests(dirs, rustc);\n \n     super::tests::RAND_REPO.patch(dirs);\n     super::tests::REGEX_REPO.patch(dirs);\n@@ -44,19 +42,6 @@ fn prepare_stdlib(dirs: &Dirs, rustc: &Path) {\n     fs::write(SYSROOT_RUSTC_VERSION.to_path(dirs), &rustc_version).unwrap();\n }\n \n-fn prepare_coretests(dirs: &Dirs, rustc: &Path) {\n-    let sysroot_src_orig = get_default_sysroot(rustc).join(\"lib/rustlib/src/rust\");\n-    assert!(sysroot_src_orig.exists());\n-\n-    // FIXME ensure builds error out or update the copy if any of the files copied here change\n-    apply_patches(\n-        dirs,\n-        \"coretests\",\n-        &sysroot_src_orig.join(\"library/core/tests\"),\n-        &LIBCORE_TESTS_SRC.to_path(dirs),\n-    );\n-}\n-\n pub(crate) struct GitRepo {\n     url: GitRepoUrl,\n     rev: &'static str,\n@@ -263,7 +248,7 @@ fn get_patches(dirs: &Dirs, crate_name: &str) -> Vec<PathBuf> {\n     patches\n }\n \n-fn apply_patches(dirs: &Dirs, crate_name: &str, source_dir: &Path, target_dir: &Path) {\n+pub(crate) fn apply_patches(dirs: &Dirs, crate_name: &str, source_dir: &Path, target_dir: &Path) {\n     // FIXME avoid copy and patch if src, patches and target are unchanged\n \n     remove_dir_if_exists(target_dir);"}, {"sha": "ec97be2b2d94965cfd1953955922c688c94ab9c4", "filename": "build_system/tests.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fc23a8a7e0fe32ef18214ced7ee79e111a40df69/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc23a8a7e0fe32ef18214ced7ee79e111a40df69/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=fc23a8a7e0fe32ef18214ced7ee79e111a40df69", "patch": "@@ -1,12 +1,14 @@\n use super::build_sysroot;\n use super::config;\n use super::path::{Dirs, RelPath};\n-use super::prepare::GitRepo;\n+use super::prepare::{apply_patches, GitRepo};\n+use super::rustc_info::get_default_sysroot;\n use super::utils::{spawn_and_wait, spawn_and_wait_with_input, CargoProject, Compiler};\n use super::{CodegenBackend, SysrootKind};\n use std::env;\n use std::ffi::OsStr;\n use std::fs;\n+use std::path::PathBuf;\n use std::process::Command;\n \n static BUILD_EXAMPLE_OUT_DIR: RelPath = RelPath::BUILD.join(\"example\");\n@@ -125,9 +127,9 @@ pub(crate) static PORTABLE_SIMD_REPO: GitRepo = GitRepo::github(\n pub(crate) static PORTABLE_SIMD: CargoProject =\n     CargoProject::new(&PORTABLE_SIMD_REPO.source_dir(), \"portable_simd_target\");\n \n-pub(crate) static LIBCORE_TESTS_SRC: RelPath = RelPath::BUILD.join(\"coretests_src\");\n+static LIBCORE_TESTS_SRC: RelPath = RelPath::BUILD.join(\"coretests_src\");\n \n-pub(crate) static LIBCORE_TESTS: CargoProject = CargoProject::new(&LIBCORE_TESTS_SRC, \"core_tests\");\n+static LIBCORE_TESTS: CargoProject = CargoProject::new(&LIBCORE_TESTS_SRC, \"core_tests\");\n \n const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n     TestCase::custom(\"test.rust-random/rand\", &|runner| {\n@@ -145,6 +147,13 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n         }\n     }),\n     TestCase::custom(\"test.libcore\", &|runner| {\n+        apply_patches(\n+            &runner.dirs,\n+            \"coretests\",\n+            &runner.stdlib_source.join(\"library/core/tests\"),\n+            &LIBCORE_TESTS_SRC.to_path(&runner.dirs),\n+        );\n+\n         LIBCORE_TESTS.clean(&runner.dirs);\n \n         if runner.is_native {\n@@ -231,6 +240,10 @@ pub(crate) fn run_tests(\n     rustup_toolchain_name: Option<&str>,\n     target_triple: String,\n ) {\n+    let stdlib_source =\n+        get_default_sysroot(&bootstrap_host_compiler.rustc).join(\"lib/rustlib/src/rust\");\n+    assert!(stdlib_source.exists());\n+\n     if config::get_bool(\"testsuite.no_sysroot\") {\n         let target_compiler = build_sysroot::build_sysroot(\n             dirs,\n@@ -247,6 +260,7 @@ pub(crate) fn run_tests(\n             target_compiler,\n             use_unstable_features,\n             bootstrap_host_compiler.triple == target_triple,\n+            stdlib_source.clone(),\n         );\n \n         BUILD_EXAMPLE_OUT_DIR.ensure_fresh(dirs);\n@@ -277,6 +291,7 @@ pub(crate) fn run_tests(\n             target_compiler,\n             use_unstable_features,\n             bootstrap_host_compiler.triple == target_triple,\n+            stdlib_source,\n         );\n \n         if run_base_sysroot {\n@@ -299,6 +314,7 @@ struct TestRunner {\n     use_unstable_features: bool,\n     dirs: Dirs,\n     target_compiler: Compiler,\n+    stdlib_source: PathBuf,\n }\n \n impl TestRunner {\n@@ -307,6 +323,7 @@ impl TestRunner {\n         mut target_compiler: Compiler,\n         use_unstable_features: bool,\n         is_native: bool,\n+        stdlib_source: PathBuf,\n     ) -> Self {\n         if let Ok(rustflags) = env::var(\"RUSTFLAGS\") {\n             target_compiler.rustflags.push(' ');\n@@ -327,7 +344,14 @@ impl TestRunner {\n             && target_compiler.triple.contains(\"x86_64\")\n             && !target_compiler.triple.contains(\"windows\");\n \n-        Self { is_native, jit_supported, use_unstable_features, dirs, target_compiler }\n+        Self {\n+            is_native,\n+            jit_supported,\n+            use_unstable_features,\n+            dirs,\n+            target_compiler,\n+            stdlib_source,\n+        }\n     }\n \n     fn run_testsuite(&self, tests: &[TestCase]) {"}]}