{"sha": "4b42acf617d05005cc678bcdaec5123d8429cb63", "node_id": "C_kwDOAAsO6NoAKDRiNDJhY2Y2MTdkMDUwMDVjYzY3OGJjZGFlYzUxMjNkODQyOWNiNjM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukas.wirth@ferrous-systems.com", "date": "2023-05-10T18:48:51Z"}, "committer": {"name": "Lukas Wirth", "email": "lukas.wirth@ferrous-systems.com", "date": "2023-05-10T18:48:51Z"}, "message": "Add basic support for `augmentsSyntaxTokens`", "tree": {"sha": "da46f02b9d7797ea664892e63e920bd8de9aad84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da46f02b9d7797ea664892e63e920bd8de9aad84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b42acf617d05005cc678bcdaec5123d8429cb63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b42acf617d05005cc678bcdaec5123d8429cb63", "html_url": "https://github.com/rust-lang/rust/commit/4b42acf617d05005cc678bcdaec5123d8429cb63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b42acf617d05005cc678bcdaec5123d8429cb63/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c26a43d6bd660eba94500645a47f931e153015d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c26a43d6bd660eba94500645a47f931e153015d8", "html_url": "https://github.com/rust-lang/rust/commit/c26a43d6bd660eba94500645a47f931e153015d8"}], "stats": {"total": 92, "additions": 70, "deletions": 22}, "files": [{"sha": "6bfc71f93976221d0a0056cd92800e75edc87689", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4b42acf617d05005cc678bcdaec5123d8429cb63/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b42acf617d05005cc678bcdaec5123d8429cb63/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=4b42acf617d05005cc678bcdaec5123d8429cb63", "patch": "@@ -469,25 +469,8 @@ fn traverse(\n             }\n \n             // apply config filtering\n-            match &mut highlight.tag {\n-                HlTag::StringLiteral if !config.strings => continue,\n-                // If punctuation is disabled, make the macro bang part of the macro call again.\n-                tag @ HlTag::Punctuation(HlPunct::MacroBang) => {\n-                    if !config.macro_bang {\n-                        *tag = HlTag::Symbol(SymbolKind::Macro);\n-                    } else if !config.specialize_punctuation {\n-                        *tag = HlTag::Punctuation(HlPunct::Other);\n-                    }\n-                }\n-                HlTag::Punctuation(_) if !config.punctuation => continue,\n-                tag @ HlTag::Punctuation(_) if !config.specialize_punctuation => {\n-                    *tag = HlTag::Punctuation(HlPunct::Other);\n-                }\n-                HlTag::Operator(_) if !config.operator && highlight.mods.is_empty() => continue,\n-                tag @ HlTag::Operator(_) if !config.specialize_operator => {\n-                    *tag = HlTag::Operator(HlOperator::Other);\n-                }\n-                _ => (),\n+            if !filter_by_config(&mut highlight, config) {\n+                continue;\n             }\n \n             if inside_attribute {\n@@ -498,3 +481,27 @@ fn traverse(\n         }\n     }\n }\n+\n+fn filter_by_config(highlight: &mut Highlight, config: HighlightConfig) -> bool {\n+    match &mut highlight.tag {\n+        HlTag::StringLiteral if !config.strings => return false,\n+        // If punctuation is disabled, make the macro bang part of the macro call again.\n+        tag @ HlTag::Punctuation(HlPunct::MacroBang) => {\n+            if !config.macro_bang {\n+                *tag = HlTag::Symbol(SymbolKind::Macro);\n+            } else if !config.specialize_punctuation {\n+                *tag = HlTag::Punctuation(HlPunct::Other);\n+            }\n+        }\n+        HlTag::Punctuation(_) if !config.punctuation => return false,\n+        tag @ HlTag::Punctuation(_) if !config.specialize_punctuation => {\n+            *tag = HlTag::Punctuation(HlPunct::Other);\n+        }\n+        HlTag::Operator(_) if !config.operator && highlight.mods.is_empty() => return false,\n+        tag @ HlTag::Operator(_) if !config.specialize_operator => {\n+            *tag = HlTag::Operator(HlOperator::Other);\n+        }\n+        _ => (),\n+    }\n+    true\n+}"}, {"sha": "c88794e0cf2b493fe83fbd192814fe0057c72141", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4b42acf617d05005cc678bcdaec5123d8429cb63/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b42acf617d05005cc678bcdaec5123d8429cb63/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=4b42acf617d05005cc678bcdaec5123d8429cb63", "patch": "@@ -1028,6 +1028,11 @@ impl Config {\n         .is_some()\n     }\n \n+    pub fn semantics_tokens_augments_syntax_tokens(&self) -> bool {\n+        try_!(self.caps.text_document.as_ref()?.semantic_tokens.as_ref()?.augments_syntax_tokens?)\n+            .unwrap_or(false)\n+    }\n+\n     pub fn position_encoding(&self) -> PositionEncoding {\n         negotiated_encoding(&self.caps)\n     }"}, {"sha": "4815f8e230566f15f60b79c39aceecf1da546ef1", "filename": "crates/rust-analyzer/src/handlers/request.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4b42acf617d05005cc678bcdaec5123d8429cb63/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b42acf617d05005cc678bcdaec5123d8429cb63/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers%2Frequest.rs?ref=4b42acf617d05005cc678bcdaec5123d8429cb63", "patch": "@@ -1472,7 +1472,12 @@ pub(crate) fn handle_semantic_tokens_full(\n         snap.workspaces.is_empty() || !snap.proc_macros_loaded;\n \n     let highlights = snap.analysis.highlight(highlight_config, file_id)?;\n-    let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights);\n+    let semantic_tokens = to_proto::semantic_tokens(\n+        &text,\n+        &line_index,\n+        highlights,\n+        snap.config.semantics_tokens_augments_syntax_tokens(),\n+    );\n \n     // Unconditionally cache the tokens\n     snap.semantic_tokens_cache.lock().insert(params.text_document.uri, semantic_tokens.clone());\n@@ -1496,7 +1501,12 @@ pub(crate) fn handle_semantic_tokens_full_delta(\n         snap.workspaces.is_empty() || !snap.proc_macros_loaded;\n \n     let highlights = snap.analysis.highlight(highlight_config, file_id)?;\n-    let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights);\n+    let semantic_tokens = to_proto::semantic_tokens(\n+        &text,\n+        &line_index,\n+        highlights,\n+        snap.config.semantics_tokens_augments_syntax_tokens(),\n+    );\n \n     let mut cache = snap.semantic_tokens_cache.lock();\n     let cached_tokens = cache.entry(params.text_document.uri).or_default();\n@@ -1530,7 +1540,12 @@ pub(crate) fn handle_semantic_tokens_range(\n         snap.workspaces.is_empty() || !snap.proc_macros_loaded;\n \n     let highlights = snap.analysis.highlight_range(highlight_config, frange)?;\n-    let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights);\n+    let semantic_tokens = to_proto::semantic_tokens(\n+        &text,\n+        &line_index,\n+        highlights,\n+        snap.config.semantics_tokens_augments_syntax_tokens(),\n+    );\n     Ok(Some(semantic_tokens.into()))\n }\n "}, {"sha": "acb6f0d04a72b9e5c49f98323f92360f1c934018", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4b42acf617d05005cc678bcdaec5123d8429cb63/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b42acf617d05005cc678bcdaec5123d8429cb63/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=4b42acf617d05005cc678bcdaec5123d8429cb63", "patch": "@@ -586,6 +586,7 @@ pub(crate) fn semantic_tokens(\n     text: &str,\n     line_index: &LineIndex,\n     highlights: Vec<HlRange>,\n+    semantics_tokens_augments_syntax_tokens: bool,\n ) -> lsp_types::SemanticTokens {\n     let id = TOKEN_RESULT_COUNTER.fetch_add(1, Ordering::SeqCst).to_string();\n     let mut builder = semantic_tokens::SemanticTokensBuilder::new(id);\n@@ -595,6 +596,26 @@ pub(crate) fn semantic_tokens(\n             continue;\n         }\n \n+        if semantics_tokens_augments_syntax_tokens {\n+            match highlight_range.highlight.tag {\n+                HlTag::BoolLiteral\n+                | HlTag::ByteLiteral\n+                | HlTag::CharLiteral\n+                | HlTag::Comment\n+                | HlTag::Keyword\n+                | HlTag::NumericLiteral\n+                | HlTag::Operator(_)\n+                | HlTag::Punctuation(_)\n+                | HlTag::StringLiteral\n+                | HlTag::None\n+                    if highlight_range.highlight.mods.is_empty() =>\n+                {\n+                    continue\n+                }\n+                _ => (),\n+            }\n+        }\n+\n         let (ty, mods) = semantic_token_type_and_modifiers(highlight_range.highlight);\n         let token_index = semantic_tokens::type_index(ty);\n         let modifier_bitset = mods.0;"}]}