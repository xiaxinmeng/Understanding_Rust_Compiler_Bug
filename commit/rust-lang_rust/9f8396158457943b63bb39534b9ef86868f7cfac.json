{"sha": "9f8396158457943b63bb39534b9ef86868f7cfac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmODM5NjE1ODQ1Nzk0M2I2M2JiMzk1MzRiOWVmODY4NjhmN2NmYWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-08T22:59:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-08T22:59:23Z"}, "message": "Auto merge of #60651 - Centril:rollup-zoamjfk, r=Centril\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #59979 (to_xe_bytes for isize and usize returns an array of different size)\n - #60491 (std: Update compiler-builtins crate)\n - #60550 (Add tests for concrete const types)\n - #60572 (Add test for #59972)\n - #60627 (test for #50518)\n - #60634 (Document + Cleanup lang_items.rs)\n - #60641 (Instead of ICEing on incorrect pattern, use delay_span_bug)\n - #60644 (Use `delay_span_bug` for \"Failed to unify obligation\")\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "0c1930967f41920013576e44024453b8b29893f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c1930967f41920013576e44024453b8b29893f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f8396158457943b63bb39534b9ef86868f7cfac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f8396158457943b63bb39534b9ef86868f7cfac", "html_url": "https://github.com/rust-lang/rust/commit/9f8396158457943b63bb39534b9ef86868f7cfac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f8396158457943b63bb39534b9ef86868f7cfac/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f5152e200c0c02dfe0f79367948c98053d35855", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f5152e200c0c02dfe0f79367948c98053d35855", "html_url": "https://github.com/rust-lang/rust/commit/3f5152e200c0c02dfe0f79367948c98053d35855"}, {"sha": "f683b6b799e36987493ce23c2f96b5bf1a0bc528", "url": "https://api.github.com/repos/rust-lang/rust/commits/f683b6b799e36987493ce23c2f96b5bf1a0bc528", "html_url": "https://github.com/rust-lang/rust/commit/f683b6b799e36987493ce23c2f96b5bf1a0bc528"}], "stats": {"total": 462, "additions": 370, "deletions": 92}, "files": [{"sha": "0154b96751d361658b83f5708c57bc85fe504cf8", "filename": "Cargo.lock", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9f8396158457943b63bb39534b9ef86868f7cfac/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9f8396158457943b63bb39534b9ef86868f7cfac/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9f8396158457943b63bb39534b9ef86868f7cfac", "patch": "@@ -17,7 +17,7 @@ dependencies = [\n name = \"alloc\"\n version = \"0.0.0\"\n dependencies = [\n- \"compiler_builtins 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n  \"rand 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_xorshift 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -115,7 +115,7 @@ version = \"0.1.27\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n@@ -450,7 +450,7 @@ dependencies = [\n \n [[package]]\n name = \"compiler_builtins\"\n-version = \"0.1.10\"\n+version = \"0.1.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -736,7 +736,7 @@ name = \"dlmalloc\"\n version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"compiler_builtins 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n@@ -902,7 +902,7 @@ name = \"fortanix-sgx-abi\"\n version = \"0.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"compiler_builtins 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n \n@@ -1063,7 +1063,7 @@ name = \"hashbrown\"\n version = \"0.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"compiler_builtins 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-alloc 1.0.0\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n@@ -1764,7 +1764,7 @@ dependencies = [\n name = \"panic_abort\"\n version = \"0.0.0\"\n dependencies = [\n- \"compiler_builtins 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1774,7 +1774,7 @@ name = \"panic_unwind\"\n version = \"0.0.0\"\n dependencies = [\n  \"alloc 0.0.0\",\n- \"compiler_builtins 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unwind 0.0.0\",\n@@ -1959,7 +1959,7 @@ name = \"profiler_builtins\"\n version = \"0.0.0\"\n dependencies = [\n  \"cc 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -2484,7 +2484,7 @@ name = \"rustc-demangle\"\n version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"compiler_builtins 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n \n@@ -2612,7 +2612,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -2842,7 +2842,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -2904,7 +2904,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -3021,7 +3021,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.38 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -3290,7 +3290,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"backtrace-sys 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cc 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n  \"dlmalloc 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fortanix-sgx-abi 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3882,7 +3882,7 @@ name = \"unwind\"\n version = \"0.0.0\"\n dependencies = [\n  \"cc 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -4078,7 +4078,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum colored 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b0aa3473e85a3161b59845d6096b289bb577874cafeaf75ea1b1beaa6572c7fc\"\n \"checksum commoncrypto 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d056a8586ba25a1e4d61cb090900e495952c7886786fc55f909ab2f819b69007\"\n \"checksum commoncrypto-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1fed34f46747aa73dfaa578069fd8279d2818ade2b55f38f22a9401c7f4083e2\"\n-\"checksum compiler_builtins 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4ada53ac629568219809178f988ca2aac9889e9a847379588c097d30ce185145\"\n+\"checksum compiler_builtins 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6549720ae78db799196d4af8f719facb4c7946710b4b64148482553e54b56d15\"\n \"checksum compiletest_rs 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f40ecc9332b68270998995c00f8051ee856121764a0d3230e64c9efd059d27b6\"\n \"checksum constant_time_eq 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ff012e225ce166d4422e0e78419d901719760f62ae2b7969ca6b564d1b54a9e\"\n \"checksum core-foundation 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4e2640d6d0bf22e82bed1b73c6aef8d5dd31e5abe6666c57e6d45e2649f4f887\""}, {"sha": "562a7a4b3c7196d1ef392299b7e68e7de66b3163", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 83, "deletions": 30, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/9f8396158457943b63bb39534b9ef86868f7cfac/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8396158457943b63bb39534b9ef86868f7cfac/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=9f8396158457943b63bb39534b9ef86868f7cfac", "patch": "@@ -214,11 +214,31 @@ pub mod diy_float;\n \n mod wrapping;\n \n+macro_rules! usize_isize_to_xe_bytes_doc {\n+    () => {\"\n+\n+**Note**: This function returns an array of length 2, 4 or 8 bytes\n+depending on the target pointer size.\n+\n+\"}\n+}\n+\n+\n+macro_rules! usize_isize_from_xe_bytes_doc {\n+    () => {\"\n+\n+**Note**: This function takes an array of length 2, 4 or 8 bytes\n+depending on the target pointer size.\n+\n+\"}\n+}\n+\n // `Int` + `SignedInt` implemented for signed integers\n macro_rules! int_impl {\n     ($SelfT:ty, $ActualT:ident, $UnsignedT:ty, $BITS:expr, $Min:expr, $Max:expr, $Feature:expr,\n      $EndFeature:expr, $rot:expr, $rot_op:expr, $rot_result:expr, $swap_op:expr, $swapped:expr,\n-     $reversed:expr, $le_bytes:expr, $be_bytes:expr) => {\n+     $reversed:expr, $le_bytes:expr, $be_bytes:expr,\n+     $to_xe_bytes_doc:expr, $from_xe_bytes_doc:expr) => {\n         doc_comment! {\n             concat!(\"Returns the smallest value that can be represented by this integer type.\n \n@@ -2023,7 +2043,9 @@ $EndFeature, \"\n         doc_comment! {\n             concat!(\"Return the memory representation of this integer as a byte array in\n big-endian (network) byte order.\n-\n+\",\n+$to_xe_bytes_doc,\n+\"\n # Examples\n \n ```\n@@ -2041,7 +2063,9 @@ assert_eq!(bytes, \", $be_bytes, \");\n doc_comment! {\n             concat!(\"Return the memory representation of this integer as a byte array in\n little-endian byte order.\n-\n+\",\n+$to_xe_bytes_doc,\n+\"\n # Examples\n \n ```\n@@ -2064,7 +2088,9 @@ native byte order.\n As the target platform's native endianness is used, portable code\n should use [`to_be_bytes`] or [`to_le_bytes`], as appropriate,\n instead.\n-\n+\",\n+$to_xe_bytes_doc,\n+\"\n [`to_be_bytes`]: #method.to_be_bytes\n [`to_le_bytes`]: #method.to_le_bytes\n \n@@ -2089,7 +2115,9 @@ assert_eq!(bytes, if cfg!(target_endian = \\\"big\\\") {\n doc_comment! {\n             concat!(\"Create an integer value from its representation as a byte array in\n big endian.\n-\n+\",\n+$from_xe_bytes_doc,\n+\"\n # Examples\n \n ```\n@@ -2120,7 +2148,9 @@ doc_comment! {\n             concat!(\"\n Create an integer value from its representation as a byte array in\n little endian.\n-\n+\",\n+$from_xe_bytes_doc,\n+\"\n # Examples\n \n ```\n@@ -2157,7 +2187,9 @@ appropriate instead.\n \n [`from_be_bytes`]: #method.from_be_bytes\n [`from_le_bytes`]: #method.from_le_bytes\n-\n+\",\n+$from_xe_bytes_doc,\n+\"\n # Examples\n \n ```\n@@ -2193,28 +2225,28 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n #[lang = \"i8\"]\n impl i8 {\n     int_impl! { i8, i8, u8, 8, -128, 127, \"\", \"\", 2, \"-0x7e\", \"0xa\", \"0x12\", \"0x12\", \"0x48\",\n-        \"[0x12]\", \"[0x12]\" }\n+        \"[0x12]\", \"[0x12]\", \"\", \"\" }\n }\n \n #[lang = \"i16\"]\n impl i16 {\n     int_impl! { i16, i16, u16, 16, -32768, 32767, \"\", \"\", 4, \"-0x5ffd\", \"0x3a\", \"0x1234\", \"0x3412\",\n-        \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\" }\n+        \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\" }\n }\n \n #[lang = \"i32\"]\n impl i32 {\n     int_impl! { i32, i32, u32, 32, -2147483648, 2147483647, \"\", \"\", 8, \"0x10000b3\", \"0xb301\",\n         \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\",\n-        \"[0x12, 0x34, 0x56, 0x78]\" }\n+        \"[0x12, 0x34, 0x56, 0x78]\", \"\", \"\" }\n }\n \n #[lang = \"i64\"]\n impl i64 {\n     int_impl! { i64, i64, u64, 64, -9223372036854775808, 9223372036854775807, \"\", \"\", 12,\n          \"0xaa00000000006e1\", \"0x6e10aa\", \"0x1234567890123456\", \"0x5634129078563412\",\n          \"0x6a2c48091e6a2c48\", \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n-         \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n+         \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\", \"\", \"\" }\n }\n \n #[lang = \"i128\"]\n@@ -2226,22 +2258,24 @@ impl i128 {\n         \"[0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0x90, 0x78, \\\n           0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n         \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56, \\\n-          0x78, 0x90, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12]\" }\n+          0x78, 0x90, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12]\", \"\", \"\" }\n }\n \n #[cfg(target_pointer_width = \"16\")]\n #[lang = \"isize\"]\n impl isize {\n     int_impl! { isize, i16, u16, 16, -32768, 32767, \"\", \"\", 4, \"-0x5ffd\", \"0x3a\", \"0x1234\",\n-        \"0x3412\", \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\" }\n+        \"0x3412\", \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\",\n+        usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n }\n \n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"isize\"]\n impl isize {\n     int_impl! { isize, i32, u32, 32, -2147483648, 2147483647, \"\", \"\", 8, \"0x10000b3\", \"0xb301\",\n         \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\",\n-        \"[0x12, 0x34, 0x56, 0x78]\" }\n+        \"[0x12, 0x34, 0x56, 0x78]\",\n+        usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n }\n \n #[cfg(target_pointer_width = \"64\")]\n@@ -2250,14 +2284,16 @@ impl isize {\n     int_impl! { isize, i64, u64, 64, -9223372036854775808, 9223372036854775807, \"\", \"\",\n         12, \"0xaa00000000006e1\", \"0x6e10aa\",  \"0x1234567890123456\", \"0x5634129078563412\",\n          \"0x6a2c48091e6a2c48\", \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n-         \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n+         \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n+         usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n }\n \n // `Int` + `UnsignedInt` implemented for unsigned integers\n macro_rules! uint_impl {\n     ($SelfT:ty, $ActualT:ty, $BITS:expr, $MaxV:expr, $Feature:expr, $EndFeature:expr,\n         $rot:expr, $rot_op:expr, $rot_result:expr, $swap_op:expr, $swapped:expr,\n-        $reversed:expr, $le_bytes:expr, $be_bytes:expr) => {\n+        $reversed:expr, $le_bytes:expr, $be_bytes:expr,\n+        $to_xe_bytes_doc:expr, $from_xe_bytes_doc:expr) => {\n         doc_comment! {\n             concat!(\"Returns the smallest value that can be represented by this integer type.\n \n@@ -3817,7 +3853,9 @@ $EndFeature, \"\n         doc_comment! {\n             concat!(\"Return the memory representation of this integer as a byte array in\n big-endian (network) byte order.\n-\n+\",\n+$to_xe_bytes_doc,\n+\"\n # Examples\n \n ```\n@@ -3835,7 +3873,9 @@ assert_eq!(bytes, \", $be_bytes, \");\n         doc_comment! {\n             concat!(\"Return the memory representation of this integer as a byte array in\n little-endian byte order.\n-\n+\",\n+$to_xe_bytes_doc,\n+\"\n # Examples\n \n ```\n@@ -3858,7 +3898,9 @@ native byte order.\n As the target platform's native endianness is used, portable code\n should use [`to_be_bytes`] or [`to_le_bytes`], as appropriate,\n instead.\n-\n+\",\n+$to_xe_bytes_doc,\n+\"\n [`to_be_bytes`]: #method.to_be_bytes\n [`to_le_bytes`]: #method.to_le_bytes\n \n@@ -3883,7 +3925,9 @@ assert_eq!(bytes, if cfg!(target_endian = \\\"big\\\") {\n         doc_comment! {\n             concat!(\"Create an integer value from its representation as a byte array in\n big endian.\n-\n+\",\n+$from_xe_bytes_doc,\n+\"\n # Examples\n \n ```\n@@ -3914,7 +3958,9 @@ fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n             concat!(\"\n Create an integer value from its representation as a byte array in\n little endian.\n-\n+\",\n+$from_xe_bytes_doc,\n+\"\n # Examples\n \n ```\n@@ -3951,7 +3997,9 @@ appropriate instead.\n \n [`from_be_bytes`]: #method.from_be_bytes\n [`from_le_bytes`]: #method.from_le_bytes\n-\n+\",\n+$from_xe_bytes_doc,\n+\"\n # Examples\n \n ```\n@@ -3987,7 +4035,7 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n #[lang = \"u8\"]\n impl u8 {\n     uint_impl! { u8, u8, 8, 255, \"\", \"\", 2, \"0x82\", \"0xa\", \"0x12\", \"0x12\", \"0x48\", \"[0x12]\",\n-        \"[0x12]\" }\n+        \"[0x12]\", \"\", \"\" }\n \n \n     /// Checks if the value is within the ASCII range.\n@@ -4506,21 +4554,22 @@ impl u8 {\n #[lang = \"u16\"]\n impl u16 {\n     uint_impl! { u16, u16, 16, 65535, \"\", \"\", 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n-        \"[0x34, 0x12]\", \"[0x12, 0x34]\" }\n+        \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\" }\n }\n \n #[lang = \"u32\"]\n impl u32 {\n     uint_impl! { u32, u32, 32, 4294967295, \"\", \"\", 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n-        \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\" }\n+        \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\", \"\", \"\" }\n }\n \n #[lang = \"u64\"]\n impl u64 {\n     uint_impl! { u64, u64, 64, 18446744073709551615, \"\", \"\", 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n         \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\",\n         \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n-        \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n+        \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n+        \"\", \"\"}\n }\n \n #[lang = \"u128\"]\n@@ -4531,20 +4580,23 @@ impl u128 {\n         \"[0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0x90, 0x78, \\\n           0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n         \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56, \\\n-          0x78, 0x90, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12]\" }\n+          0x78, 0x90, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12]\",\n+         \"\", \"\"}\n }\n \n #[cfg(target_pointer_width = \"16\")]\n #[lang = \"usize\"]\n impl usize {\n     uint_impl! { usize, u16, 16, 65535, \"\", \"\", 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n-        \"[0x34, 0x12]\", \"[0x12, 0x34]\" }\n+        \"[0x34, 0x12]\", \"[0x12, 0x34]\",\n+        usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n }\n #[cfg(target_pointer_width = \"32\")]\n #[lang = \"usize\"]\n impl usize {\n     uint_impl! { usize, u32, 32, 4294967295, \"\", \"\", 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n-        \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\" }\n+        \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\",\n+        usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n }\n \n #[cfg(target_pointer_width = \"64\")]\n@@ -4553,7 +4605,8 @@ impl usize {\n     uint_impl! { usize, u64, 64, 18446744073709551615, \"\", \"\", 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n         \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\",\n         \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n-         \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\" }\n+         \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n+        usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!() }\n }\n \n /// A classification of floating point numbers."}, {"sha": "0e283ca6b1cf15170e231ebc86fc1ad0b72723dc", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 60, "deletions": 37, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/9f8396158457943b63bb39534b9ef86868f7cfac/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8396158457943b63bb39534b9ef86868f7cfac/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=9f8396158457943b63bb39534b9ef86868f7cfac", "patch": "@@ -1,13 +1,13 @@\n-// Detecting language items.\n-//\n-// Language items are items that represent concepts intrinsic to the language\n-// itself. Examples are:\n-//\n-// * Traits that specify \"kinds\"; e.g., \"Sync\", \"Send\".\n-//\n-// * Traits that represent operators; e.g., \"Add\", \"Sub\", \"Index\".\n-//\n-// * Functions called by the compiler itself.\n+//! Detecting language items.\n+//!\n+//! Language items are items that represent concepts intrinsic to the language\n+//! itself. Examples are:\n+//!\n+//! * Traits that specify \"kinds\"; e.g., \"Sync\", \"Send\".\n+//!\n+//! * Traits that represent operators; e.g., \"Add\", \"Sub\", \"Index\".\n+//!\n+//! * Functions called by the compiler itself.\n \n pub use self::LangItem::*;\n \n@@ -32,13 +32,17 @@ macro_rules! language_item_table {\n     ) => {\n \n enum_from_u32! {\n+    /// A representation of all the valid language items in Rust.\n     #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n     pub enum LangItem {\n         $($variant,)*\n     }\n }\n \n impl LangItem {\n+    /// Returns the `name` in `#[lang = \"$name\"]`.\n+    /// For example, `LangItem::EqTraitLangItem`,\n+    /// that is `#[lang = \"eq\"]` would result in `\"eq\"`.\n     fn name(self) -> &'static str {\n         match self {\n             $( $variant => $name, )*\n@@ -48,28 +52,38 @@ impl LangItem {\n \n #[derive(HashStable)]\n pub struct LanguageItems {\n+    /// Mappings from lang items to their possibly found `DefId`s.\n+    /// The index corresponds to the order in `LangItem`.\n     pub items: Vec<Option<DefId>>,\n+    /// Lang items that were not found during collection.\n     pub missing: Vec<LangItem>,\n }\n \n impl LanguageItems {\n-    pub fn new() -> LanguageItems {\n-        fn foo(_: LangItem) -> Option<DefId> { None }\n+    /// Construct an empty collection of lang items and no missing ones.\n+    pub fn new() -> Self {\n+        fn init_none(_: LangItem) -> Option<DefId> { None }\n \n-        LanguageItems {\n-            items: vec![$(foo($variant)),*],\n+        Self {\n+            items: vec![$(init_none($variant)),*],\n             missing: Vec::new(),\n         }\n     }\n \n+    /// Returns the mappings to the possibly found `DefId`s for each lang item.\n     pub fn items(&self) -> &[Option<DefId>] {\n         &*self.items\n     }\n \n+    /// Requires that a given `LangItem` was bound and returns the corresponding `DefId`.\n+    /// If it wasn't bound, e.g. due to a missing `#[lang = \"<it.name()>\"]`,\n+    /// returns an error message as a string.\n     pub fn require(&self, it: LangItem) -> Result<DefId, String> {\n         self.items[it as usize].ok_or_else(|| format!(\"requires `{}` lang_item\", it.name()))\n     }\n \n+    /// Returns the kind of closure that `id`, which is one of the `Fn*` traits, corresponds to.\n+    /// If `id` is not one of the `Fn*` traits, `None` is returned.\n     pub fn fn_trait_kind(&self, id: DefId) -> Option<ty::ClosureKind> {\n         match Some(id) {\n             x if x == self.fn_trait() => Some(ty::ClosureKind::Fn),\n@@ -80,6 +94,9 @@ impl LanguageItems {\n     }\n \n     $(\n+        /// Returns the corresponding `DefId` for the lang item\n+        #[doc = $name]\n+        /// if it exists.\n         #[allow(dead_code)]\n         pub fn $method(&self) -> Option<DefId> {\n             self.items[$variant as usize]\n@@ -90,6 +107,7 @@ impl LanguageItems {\n struct LanguageItemCollector<'a, 'tcx: 'a> {\n     items: LanguageItems,\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    /// A mapping from the name of the lang item to its order and the form it must be of.\n     item_refs: FxHashMap<&'static str, (usize, Target)>,\n }\n \n@@ -105,32 +123,28 @@ impl<'a, 'v, 'tcx> ItemLikeVisitor<'v> for LanguageItemCollector<'a, 'tcx> {\n                 },\n                 // Known lang item with attribute on incorrect target.\n                 Some((_, expected_target)) => {\n-                    let mut err = struct_span_err!(\n+                    struct_span_err!(\n                         self.tcx.sess, span, E0718,\n                         \"`{}` language item must be applied to a {}\",\n                         value, expected_target,\n-                    );\n-                    err.span_label(\n+                    ).span_label(\n                         span,\n                         format!(\n                             \"attribute should be applied to a {}, not a {}\",\n                             expected_target, actual_target,\n                         ),\n-                    );\n-                    err.emit();\n+                    ).emit();\n                 },\n                 // Unknown lang item.\n                 _ => {\n-                    let mut err = struct_span_err!(\n+                    struct_span_err!(\n                         self.tcx.sess, span, E0522,\n                         \"definition of an unknown language item: `{}`\",\n                         value\n-                    );\n-                    err.span_label(\n+                    ).span_label(\n                         span,\n                         format!(\"definition of unknown language item `{}`\", value)\n-                    );\n-                    err.emit();\n+                    ).emit();\n                 },\n             }\n         }\n@@ -190,32 +204,39 @@ impl<'a, 'tcx> LanguageItemCollector<'a, 'tcx> {\n     }\n }\n \n+/// Extract the first `lang = \"$name\"` out of a list of attributes.\n+/// The attributes `#[panic_handler]` and `#[alloc_error_handler]`\n+/// are also extracted out when found.\n pub fn extract(attrs: &[ast::Attribute]) -> Option<(Symbol, Span)> {\n-    for attribute in attrs {\n-        if attribute.check_name(\"lang\") {\n-            if let Some(value) = attribute.value_str() {\n-                return Some((value, attribute.span));\n-            }\n-        } else if attribute.check_name(\"panic_handler\") {\n-            return Some((Symbol::intern(\"panic_impl\"), attribute.span))\n-        } else if attribute.check_name(\"alloc_error_handler\") {\n-            return Some((Symbol::intern(\"oom\"), attribute.span))\n-        }\n-    }\n-\n-    None\n+    attrs.iter().find_map(|attr| Some(match attr {\n+        _ if attr.check_name(\"lang\") => (attr.value_str()?, attr.span),\n+        _ if attr.check_name(\"panic_handler\") => (Symbol::intern(\"panic_impl\"), attr.span),\n+        _ if attr.check_name(\"alloc_error_handler\") => (Symbol::intern(\"oom\"), attr.span),\n+        _ => return None,\n+    }))\n }\n \n+/// Traverse and collect all the lang items in all crates.\n pub fn collect<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> LanguageItems {\n+    // Initialize the collector.\n     let mut collector = LanguageItemCollector::new(tcx);\n+\n+    // Collect lang items in other crates.\n     for &cnum in tcx.crates().iter() {\n         for &(def_id, item_index) in tcx.defined_lang_items(cnum).iter() {\n             collector.collect_item(item_index, def_id);\n         }\n     }\n+\n+    // Collect lang items in this crate.\n     tcx.hir().krate().visit_all_item_likes(&mut collector);\n+\n+    // Extract out the found lang items.\n     let LanguageItemCollector { mut items, .. } = collector;\n+\n+    // Find all required but not-yet-defined lang items.\n     weak_lang_items::check_crate(tcx, &mut items);\n+\n     items\n }\n \n@@ -382,6 +403,8 @@ language_item_table! {\n }\n \n impl<'a, 'tcx, 'gcx> TyCtxt<'a, 'tcx, 'gcx> {\n+    /// Returns the `DefId` for a given `LangItem`.\n+    /// If not found, fatally abort compilation.\n     pub fn require_lang_item(&self, lang_item: LangItem) -> DefId {\n         self.lang_items().require(lang_item).unwrap_or_else(|msg| {\n             self.sess.fatal(&msg)"}, {"sha": "7edd5c5a9de1b865f5d51b15b4d5d70c66ec0a87", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f8396158457943b63bb39534b9ef86868f7cfac/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8396158457943b63bb39534b9ef86868f7cfac/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=9f8396158457943b63bb39534b9ef86868f7cfac", "patch": "@@ -1300,8 +1300,16 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                         }\n                     }\n                     def => {\n-                        span_bug!(pat.span, \"tuple struct pattern didn't resolve \\\n-                                             to variant or struct {:?}\", def);\n+                        debug!(\n+                            \"tuple struct pattern didn't resolve to variant or struct {:?} at {:?}\",\n+                            def,\n+                            pat.span,\n+                        );\n+                        self.tcx.sess.delay_span_bug(pat.span, &format!(\n+                            \"tuple struct pattern didn't resolve to variant or struct {:?}\",\n+                            def,\n+                        ));\n+                        return Err(());\n                     }\n                 };\n "}, {"sha": "b5232e828c4cd366496ff9703f35d5f0764c7a9f", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9f8396158457943b63bb39534b9ef86868f7cfac/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8396158457943b63bb39534b9ef86868f7cfac/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=9f8396158457943b63bb39534b9ef86868f7cfac", "patch": "@@ -1454,13 +1454,18 @@ fn confirm_param_env_candidate<'cx, 'gcx, 'tcx>(\n             }\n         }\n         Err(e) => {\n-            span_bug!(\n-                obligation.cause.span,\n-                \"Failed to unify obligation `{:?}` \\\n-                 with poly_projection `{:?}`: {:?}\",\n+            let msg = format!(\n+                \"Failed to unify obligation `{:?}` with poly_projection `{:?}`: {:?}\",\n                 obligation,\n                 poly_cache_entry,\n-                e);\n+                e,\n+            );\n+            debug!(\"confirm_param_env_candidate: {}\", msg);\n+            infcx.tcx.sess.delay_span_bug(obligation.cause.span, &msg);\n+            Progress {\n+                ty: infcx.tcx.types.err,\n+                obligations: vec![],\n+            }\n         }\n     }\n }"}, {"sha": "ad5d62f667ac97648ca07e2dc2ac0041b682f3f0", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f8396158457943b63bb39534b9ef86868f7cfac/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9f8396158457943b63bb39534b9ef86868f7cfac/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=9f8396158457943b63bb39534b9ef86868f7cfac", "patch": "@@ -19,7 +19,7 @@ panic_unwind = { path = \"../libpanic_unwind\", optional = true }\n panic_abort = { path = \"../libpanic_abort\" }\n core = { path = \"../libcore\" }\n libc = { version = \"0.2.51\", default-features = false, features = ['rustc-dep-of-std'] }\n-compiler_builtins = { version = \"0.1.9\" }\n+compiler_builtins = { version = \"0.1.12\" }\n profiler_builtins = { path = \"../libprofiler_builtins\", optional = true }\n unwind = { path = \"../libunwind\" }\n hashbrown = { version = \"0.3.0\", features = ['rustc-dep-of-std'] }"}, {"sha": "995da4fb3ff3c46c7d3114c4b6d08298ece169ac", "filename": "src/test/run-pass/generator/issue-59972.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9f8396158457943b63bb39534b9ef86868f7cfac/src%2Ftest%2Frun-pass%2Fgenerator%2Fissue-59972.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8396158457943b63bb39534b9ef86868f7cfac/src%2Ftest%2Frun-pass%2Fgenerator%2Fissue-59972.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgenerator%2Fissue-59972.rs?ref=9f8396158457943b63bb39534b9ef86868f7cfac", "patch": "@@ -0,0 +1,23 @@\n+// compile-flags: --edition=2018\n+\n+#![feature(async_await, await_macro)]\n+\n+pub enum Uninhabited { }\n+\n+fn uninhabited_async() -> Uninhabited {\n+    unreachable!()\n+}\n+\n+async fn noop() { }\n+\n+#[allow(unused)]\n+async fn contains_never() {\n+    let error = uninhabited_async();\n+    await!(noop());\n+    let error2 = error;\n+}\n+\n+#[allow(unused_must_use)]\n+fn main() {\n+    contains_never();\n+}"}, {"sha": "54981b77a2b84801d0f07cd3faec6b69725f9565", "filename": "src/test/ui/const-generics/concrete-const-as-fn-arg.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9f8396158457943b63bb39534b9ef86868f7cfac/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-as-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8396158457943b63bb39534b9ef86868f7cfac/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-as-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-as-fn-arg.rs?ref=9f8396158457943b63bb39534b9ef86868f7cfac", "patch": "@@ -0,0 +1,14 @@\n+// Test that a concrete const type i.e. A<2>, can be used as an argument type in a function\n+// run-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+struct A<const N: usize>; // ok\n+\n+fn with_concrete_const_arg(_: A<2>) -> u32 { 17 }\n+\n+fn main() {\n+    let val: A<2> = A;\n+    assert_eq!(with_concrete_const_arg(val), 17);\n+}"}, {"sha": "955b319d7004460b27e969c533cac716e294edc8", "filename": "src/test/ui/const-generics/concrete-const-as-fn-arg.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f8396158457943b63bb39534b9ef86868f7cfac/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-as-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8396158457943b63bb39534b9ef86868f7cfac/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-as-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-as-fn-arg.stderr?ref=9f8396158457943b63bb39534b9ef86868f7cfac", "patch": "@@ -0,0 +1,6 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/concrete-const-as-fn-arg.rs:4:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+"}, {"sha": "226ea4151806ecd68688738afba44578fdb2ae78", "filename": "src/test/ui/const-generics/concrete-const-impl-method.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9f8396158457943b63bb39534b9ef86868f7cfac/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-impl-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8396158457943b63bb39534b9ef86868f7cfac/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-impl-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-impl-method.rs?ref=9f8396158457943b63bb39534b9ef86868f7cfac", "patch": "@@ -0,0 +1,24 @@\n+// Test that a method/associated non-method within an impl block of a concrete const type i.e. A<2>,\n+// is callable.\n+// run-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+pub struct A<const N: u32>;\n+\n+impl A<2> {\n+    fn impl_method(&self) -> u32 {\n+        17\n+    }\n+\n+    fn associated_non_method() -> u32 {\n+        17\n+    }\n+}\n+\n+fn main() {\n+    let val: A<2> = A;\n+    assert_eq!(val.impl_method(), 17);\n+    assert_eq!(A::<2>::associated_non_method(), 17);\n+}"}, {"sha": "3ce488c62755a2c4612b89e31330ef1a9f756009", "filename": "src/test/ui/const-generics/concrete-const-impl-method.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f8396158457943b63bb39534b9ef86868f7cfac/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-impl-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8396158457943b63bb39534b9ef86868f7cfac/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-impl-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-impl-method.stderr?ref=9f8396158457943b63bb39534b9ef86868f7cfac", "patch": "@@ -0,0 +1,6 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/concrete-const-impl-method.rs:5:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+"}, {"sha": "ed76b2c5db025a86f65a84d6f8f88b9339933db6", "filename": "src/test/ui/fn-in-pat.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9f8396158457943b63bb39534b9ef86868f7cfac/src%2Ftest%2Fui%2Ffn-in-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8396158457943b63bb39534b9ef86868f7cfac/src%2Ftest%2Fui%2Ffn-in-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn-in-pat.rs?ref=9f8396158457943b63bb39534b9ef86868f7cfac", "patch": "@@ -0,0 +1,16 @@\n+struct A {}\n+\n+impl A {\n+    fn new() {}\n+}\n+\n+fn hof<F>(_: F) where F: FnMut(()) {}\n+\n+fn ice() {\n+    hof(|c| match c {\n+        A::new() => (), //~ ERROR expected tuple struct/variant, found method\n+        _ => ()\n+    })\n+}\n+\n+fn main() {}"}, {"sha": "eee97fe9587c288953130d2acfd004eb304b44aa", "filename": "src/test/ui/fn-in-pat.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f8396158457943b63bb39534b9ef86868f7cfac/src%2Ftest%2Fui%2Ffn-in-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8396158457943b63bb39534b9ef86868f7cfac/src%2Ftest%2Fui%2Ffn-in-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn-in-pat.stderr?ref=9f8396158457943b63bb39534b9ef86868f7cfac", "patch": "@@ -0,0 +1,9 @@\n+error[E0164]: expected tuple struct/variant, found method `<A>::new`\n+  --> $DIR/fn-in-pat.rs:11:9\n+   |\n+LL |         A::new() => (),\n+   |         ^^^^^^^^ not a tuple variant or struct\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0164`."}, {"sha": "d776d181b62682301ea9a8e00e5d8c0939a1dbd6", "filename": "src/test/ui/issues/issue-50518.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9f8396158457943b63bb39534b9ef86868f7cfac/src%2Ftest%2Fui%2Fissues%2Fissue-50518.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8396158457943b63bb39534b9ef86868f7cfac/src%2Ftest%2Fui%2Fissues%2Fissue-50518.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50518.rs?ref=9f8396158457943b63bb39534b9ef86868f7cfac", "patch": "@@ -0,0 +1,40 @@\n+// compile-pass\n+use std::marker::PhantomData;\n+\n+struct Meta<A> {\n+    value: i32,\n+    type_: PhantomData<A>\n+}\n+\n+trait MetaTrait {\n+    fn get_value(&self) -> i32;\n+}\n+\n+impl<A> MetaTrait for Meta<A> {\n+    fn get_value(&self) -> i32 { self.value }\n+}\n+\n+trait Bar {\n+    fn get_const(&self) -> &dyn MetaTrait;\n+}\n+\n+struct Foo<A> {\n+    _value: A\n+}\n+\n+impl<A: 'static> Foo<A> {\n+    const CONST: &'static dyn MetaTrait = &Meta::<Self> {\n+        value: 10,\n+        type_: PhantomData\n+    };\n+}\n+\n+impl<A: 'static> Bar for Foo<A> {\n+    fn get_const(&self) -> &dyn MetaTrait { Self::CONST }\n+}\n+\n+fn main() {\n+    let foo = Foo::<i32> { _value: 10 };\n+    let bar: &dyn Bar = &foo;\n+    println!(\"const {}\", bar.get_const().get_value());\n+}"}, {"sha": "e5a9caa32fae701643bc10721e7c6583b227feb9", "filename": "src/test/ui/issues/issue-60283.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9f8396158457943b63bb39534b9ef86868f7cfac/src%2Ftest%2Fui%2Fissues%2Fissue-60283.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f8396158457943b63bb39534b9ef86868f7cfac/src%2Ftest%2Fui%2Fissues%2Fissue-60283.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60283.rs?ref=9f8396158457943b63bb39534b9ef86868f7cfac", "patch": "@@ -0,0 +1,17 @@\n+pub trait Trait<'a> {\n+    type Item;\n+}\n+\n+impl<'a> Trait<'a> for () {\n+    type Item = ();\n+}\n+\n+pub fn foo<T, F>(_: T, _: F)\n+where T: for<'a> Trait<'a>,\n+      F: for<'a> FnMut(<T as Trait<'a>>::Item) {}\n+\n+fn main() {\n+    foo((), drop)\n+    //~^ ERROR type mismatch in function arguments\n+    //~| ERROR type mismatch resolving\n+}"}, {"sha": "a79b1959dca2f8479e1eb5469e403cde6fdb95fa", "filename": "src/test/ui/issues/issue-60283.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9f8396158457943b63bb39534b9ef86868f7cfac/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9f8396158457943b63bb39534b9ef86868f7cfac/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr?ref=9f8396158457943b63bb39534b9ef86868f7cfac", "patch": "@@ -0,0 +1,34 @@\n+error[E0631]: type mismatch in function arguments\n+  --> $DIR/issue-60283.rs:14:5\n+   |\n+LL |     foo((), drop)\n+   |     ^^^\n+   |     |\n+   |     expected signature of `for<'a> fn(<() as Trait<'a>>::Item) -> _`\n+   |     found signature of `fn(_) -> _`\n+   |\n+note: required by `foo`\n+  --> $DIR/issue-60283.rs:9:1\n+   |\n+LL | / pub fn foo<T, F>(_: T, _: F)\n+LL | | where T: for<'a> Trait<'a>,\n+LL | |       F: for<'a> FnMut(<T as Trait<'a>>::Item) {}\n+   | |_________________________________________________^\n+\n+error[E0271]: type mismatch resolving `for<'a> <fn(_) {std::mem::drop::<_>} as std::ops::FnOnce<(<() as Trait<'a>>::Item,)>>::Output == ()`\n+  --> $DIR/issue-60283.rs:14:5\n+   |\n+LL |     foo((), drop)\n+   |     ^^^ expected bound lifetime parameter 'a, found concrete lifetime\n+   |\n+note: required by `foo`\n+  --> $DIR/issue-60283.rs:9:1\n+   |\n+LL | / pub fn foo<T, F>(_: T, _: F)\n+LL | | where T: for<'a> Trait<'a>,\n+LL | |       F: for<'a> FnMut(<T as Trait<'a>>::Item) {}\n+   | |_________________________________________________^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0271`."}]}