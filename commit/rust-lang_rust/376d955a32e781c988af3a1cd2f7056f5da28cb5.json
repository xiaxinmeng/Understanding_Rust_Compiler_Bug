{"sha": "376d955a32e781c988af3a1cd2f7056f5da28cb5", "node_id": "C_kwDOAAsO6NoAKDM3NmQ5NTVhMzJlNzgxYzk4OGFmM2ExY2QyZjcwNTZmNWRhMjhjYjU", "commit": {"author": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-01-07T09:51:39Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-02-13T00:06:34Z"}, "message": "Add panic docs describing old, current and possible future behavior", "tree": {"sha": "ce6f539977f40442c32462fb0813933e0516ff5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce6f539977f40442c32462fb0813933e0516ff5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/376d955a32e781c988af3a1cd2f7056f5da28cb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/376d955a32e781c988af3a1cd2f7056f5da28cb5", "html_url": "https://github.com/rust-lang/rust/commit/376d955a32e781c988af3a1cd2f7056f5da28cb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/376d955a32e781c988af3a1cd2f7056f5da28cb5/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bda2693e9bcbf4246d1ada67886d9457054e3535", "url": "https://api.github.com/repos/rust-lang/rust/commits/bda2693e9bcbf4246d1ada67886d9457054e3535", "html_url": "https://github.com/rust-lang/rust/commit/bda2693e9bcbf4246d1ada67886d9457054e3535"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "4a65d612a6208a426b4d5bf608dcd8bc7a075136", "filename": "library/std/src/time.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/376d955a32e781c988af3a1cd2f7056f5da28cb5/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/376d955a32e781c988af3a1cd2f7056f5da28cb5/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=376d955a32e781c988af3a1cd2f7056f5da28cb5", "patch": "@@ -133,9 +133,12 @@ pub use core::time::FromFloatSecsError;\n /// if available, which is the case for all [tier 1] platforms.\n /// In practice such guarantees are \u2013 under rare circumstances \u2013 broken by hardware, virtualization\n /// or operating system bugs. To work around these bugs and platforms not offering monotonic clocks\n-/// [`duration_since`], [`elapsed`] and [`sub`] saturate to zero. [`checked_duration_since`] can\n-/// be used to detect and handle situations where monotonicity is violated, or `Instant`s are\n-/// subtracted in the wrong order.\n+/// [`duration_since`], [`elapsed`] and [`sub`] saturate to zero. In older rust versions this\n+/// lead to a panic instead. [`checked_duration_since`] can be used to detect and handle situations\n+/// where monotonicity is violated, or `Instant`s are subtracted in the wrong order.\n+///\n+/// This workaround obscures programming errors where earlier and later instants are accidentally\n+/// swapped. For this reason future rust versions may reintroduce panics.\n ///\n /// [tier 1]: https://doc.rust-lang.org/rustc/platform-support.html\n /// [`duration_since`]: Instant::duration_since\n@@ -271,6 +274,13 @@ impl Instant {\n     /// Returns the amount of time elapsed from another instant to this one,\n     /// or zero duration if that instant is later than this one.\n     ///\n+    /// # Panics\n+    ///\n+    /// Previous rust versions panicked when `earlier` was later than `self`. Currently this\n+    /// method saturates. Future versions may reintroduce the panic in some circumstances.\n+    /// See [Monotonicity].\n+    ///\n+    /// [Monotonicity]: Instant#monotonicity\n     ///\n     /// # Examples\n     ///\n@@ -339,6 +349,14 @@ impl Instant {\n \n     /// Returns the amount of time elapsed since this instant was created.\n     ///\n+    /// # Panics\n+    ///\n+    /// Previous rust versions panicked when self was earlier than the current time. Currently this\n+    /// method returns a Duration of zero in that case. Future versions may reintroduce the panic.\n+    /// See [Monotonicity].\n+    ///\n+    /// [Monotonicity]: Instant#monotonicity\n+    ///\n     /// # Examples\n     ///\n     /// ```no_run\n@@ -413,6 +431,16 @@ impl SubAssign<Duration> for Instant {\n impl Sub<Instant> for Instant {\n     type Output = Duration;\n \n+    /// Returns the amount of time elapsed from another instant to this one,\n+    /// or zero duration if that instant is later than this one.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Previous rust versions panicked when `other` was later than `self`. Currently this\n+    /// method saturates. Future versions may reintroduce the panic in some circumstances.\n+    /// See [Monotonicity].\n+    ///\n+    /// [Monotonicity]: Instant#monotonicity\n     fn sub(self, other: Instant) -> Duration {\n         self.duration_since(other)\n     }"}]}