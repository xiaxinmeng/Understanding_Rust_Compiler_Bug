{"sha": "f1847f7a986716b0146e4f319f6f5fec8943500f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxODQ3ZjdhOTg2NzE2YjAxNDZlNGYzMTlmNmY1ZmVjODk0MzUwMGY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-21T08:26:46Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-21T08:26:46Z"}, "message": "Test changes", "tree": {"sha": "274f6ee70544a93ce3ef511f6bc7959685c0a4ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/274f6ee70544a93ce3ef511f6bc7959685c0a4ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1847f7a986716b0146e4f319f6f5fec8943500f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlmamUwACgkQpp+NIls6\n19m7Fg/+INXjOsy7XQg4BZ6kgP/QClCXC/pv7gP1TpDTj6qUj0XGiZ042a5Pt1Kn\noKo3M+5Nhv07Zc2WhkcG4lyD7oc2ZVPtXFf1dxyqmQmGiT319cqFgLSUfDxiXfze\nds2exvAHreHSdlmlZ3ZSf5a0q7moZyDj/B+23t2zUMKwEoCqJQI9YgFp232DG16K\nJPidFRGEbzDMQ+8dzrANrxsinN3MSGevmD0G5Dv4cydS7iOXMswveT+/rRL4Hye5\n5FtRuhYAkoM+qmTHLTMYK54FOX2NC1ACzU1cwDc6JkrzaFfEB4I98cm5UHcGW0bp\nrWBkCxy/e74z64SFNg0UP51bOGjHzayOXSjXOZG5s9jeu/2fucbtNAwexY2qjvDc\nuGUwdtJVJW698WqW9t3VQ9+WgCZY8UzBuhcsburPWva+DpRzyqUs2P1TjuBP2V0d\nSzeoqjlS0GkC2SNVk9cPzVLQmuDYmmWR0pWCn+oK7xQY5pQZo97/B0JQ6rYLNwMO\nwKmsHt18UK/vmPIre7bDP0XAsa6vYhmEZl60sjP6mXG9KCWwULqWDBovNVBgfXBZ\nnnGym5k1sr5RIABQ0eLDg42LH7gXIOcvVDZLcV5h9urTXXeXBGnhpdEhZCmZuXI3\n9YMZI0Z84KU/juT36qokAtvu0MAGm1r+aOoH3f7cEBui2kYzQZo=\n=tkcn\n-----END PGP SIGNATURE-----", "payload": "tree 274f6ee70544a93ce3ef511f6bc7959685c0a4ac\nparent 2493176f0edae822b037bc9538503f9cbbcd40b3\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1503304006 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1503304006 +0200\n\nTest changes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1847f7a986716b0146e4f319f6f5fec8943500f", "html_url": "https://github.com/rust-lang/rust/commit/f1847f7a986716b0146e4f319f6f5fec8943500f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1847f7a986716b0146e4f319f6f5fec8943500f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2493176f0edae822b037bc9538503f9cbbcd40b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2493176f0edae822b037bc9538503f9cbbcd40b3", "html_url": "https://github.com/rust-lang/rust/commit/2493176f0edae822b037bc9538503f9cbbcd40b3"}], "stats": {"total": 132, "additions": 131, "deletions": 1}, "files": [{"sha": "99d4ee9d6634c257ff8e414fdaff0ede38acfce8", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 131, "deletions": 1, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/f1847f7a986716b0146e4f319f6f5fec8943500f/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1847f7a986716b0146e4f319f6f5fec8943500f/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=f1847f7a986716b0146e4f319f6f5fec8943500f", "patch": "@@ -1,3 +1,41 @@\n+error: unnecessary structure name repetition\n+  --> $DIR/methods.rs:18:25\n+   |\n+18 |     fn add(self, other: T) -> T { self }\n+   |                         ^ help: use the applicable keyword: `Self`\n+   |\n+   = note: `-D use-self` implied by `-D warnings`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/methods.rs:18:31\n+   |\n+18 |     fn add(self, other: T) -> T { self }\n+   |                               ^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/methods.rs:21:26\n+   |\n+21 |     fn sub(&self, other: T) -> &T { self } // no error, self is a ref\n+   |                          ^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/methods.rs:21:33\n+   |\n+21 |     fn sub(&self, other: T) -> &T { self } // no error, self is a ref\n+   |                                 ^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/methods.rs:22:21\n+   |\n+22 |     fn div(self) -> T { self } // no error, different #arguments\n+   |                     ^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/methods.rs:23:25\n+   |\n+23 |     fn rem(self, other: T) { } // no error, wrong return type\n+   |                         ^ help: use the applicable keyword: `Self`\n+\n error: defining a method called `add` on this type; consider implementing the `std::ops::Add` trait or choosing a less ambiguous name\n   --> $DIR/methods.rs:18:5\n    |\n@@ -40,6 +78,54 @@ error: methods called `new` usually return `Self`\n    |\n    = note: `-D new-ret-no-self` implied by `-D warnings`\n \n+error: unnecessary structure name repetition\n+  --> $DIR/methods.rs:40:35\n+   |\n+40 |     pub fn new<'b>(s: &'b str) -> Lt<'b> { unimplemented!() }\n+   |                                   ^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/methods.rs:49:28\n+   |\n+49 |     pub fn new(s: &str) -> Lt2 { unimplemented!() }\n+   |                            ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/methods.rs:58:21\n+   |\n+58 |     pub fn new() -> Lt3<'static> { unimplemented!() }\n+   |                     ^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/methods.rs:61:10\n+   |\n+61 | #[derive(Clone,Copy)]\n+   |          ^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/methods.rs:74:24\n+   |\n+74 |     fn new() -> Option<V<T>> { None }\n+   |                        ^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/methods.rs:78:19\n+   |\n+78 |     type Output = T;\n+   |                   ^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/methods.rs:79:25\n+   |\n+79 |     fn mul(self, other: T) -> T { self } // no error, obviously\n+   |                         ^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/methods.rs:79:31\n+   |\n+79 |     fn mul(self, other: T) -> T { self } // no error, obviously\n+   |                               ^ help: use the applicable keyword: `Self`\n+\n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n   --> $DIR/methods.rs:97:13\n    |\n@@ -104,6 +190,42 @@ error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done mo\n 125 | |                 );\n     | |_________________^\n \n+error: unnecessary structure name repetition\n+   --> $DIR/methods.rs:131:16\n+    |\n+131 | #[derive(Copy, Clone)]\n+    |                ^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+   --> $DIR/methods.rs:145:16\n+    |\n+145 | #[derive(Copy, Clone)]\n+    |                ^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+   --> $DIR/methods.rs:151:24\n+    |\n+151 |     fn filter(self) -> IteratorFalsePositives {\n+    |                        ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+   --> $DIR/methods.rs:155:22\n+    |\n+155 |     fn next(self) -> IteratorFalsePositives {\n+    |                      ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+   --> $DIR/methods.rs:175:32\n+    |\n+175 |     fn skip(self, _: usize) -> IteratorFalsePositives {\n+    |                                ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+   --> $DIR/methods.rs:180:16\n+    |\n+180 | #[derive(Copy, Clone)]\n+    |                ^^^^^ help: use the applicable keyword: `Self`\n+\n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n    --> $DIR/methods.rs:194:13\n     |\n@@ -178,6 +300,12 @@ error: called `is_some()` after searching an `Iterator` with rposition. This is\n 236 | |                    ).is_some();\n     | |______________________________^\n \n+error: unnecessary structure name repetition\n+   --> $DIR/methods.rs:250:21\n+    |\n+250 |         fn new() -> Foo { Foo }\n+    |                     ^^^ help: use the applicable keyword: `Self`\n+\n error: use of `unwrap_or` followed by a function call\n    --> $DIR/methods.rs:268:5\n     |\n@@ -432,6 +560,8 @@ error: called `ok().expect()` on a Result value. You can call `expect` directly\n 413 |     res6.ok().expect(\"meh\");\n     |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: unnecessary structure name repetition\n+\n error: you should use the `starts_with` method\n    --> $DIR/methods.rs:425:5\n     |\n@@ -626,5 +756,5 @@ error: called `cloned().collect()` on a slice to create a `Vec`. Calling `to_vec\n     |\n     = note: `-D iter-cloned-collect` implied by `-D warnings`\n \n-error: aborting due to 89 previous errors\n+error: aborting due to 111 previous errors\n "}]}