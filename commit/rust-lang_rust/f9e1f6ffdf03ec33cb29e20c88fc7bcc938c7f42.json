{"sha": "f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42", "node_id": "C_kwDOAAsO6NoAKGY5ZTFmNmZmZGYwM2VjMzNjYjI5ZTIwYzg4ZmM3YmNjOTM4YzdmNDI", "commit": {"author": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2022-10-24T08:28:55Z"}, "committer": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2022-10-29T19:47:48Z"}, "message": "rustdoc: add hash to filename of toolchain files\n\nAll static files used by rustdoc are now stored in static.files/ and\ninclude a hash of their contents. They no longer include the contents of\nthe --resource-suffix flag. This clarifies caching semantics. Anything\nin static.files can use Cache-Control: immutable because any updates\nwill show up as a new URL.\n\nInvocation-specific files like crates-NN.js, search-index-NN.js,\nand sidebar-items-NN.js still get the resource suffix.\n\nThe --disable-minification flag is removed because it would vary the\noutput of static files based on invocation flags. Instead, for\nrustdoc development purposes it's preferable to symlink static files\nto a non-minified copy for quick iteration.", "tree": {"sha": "0149d623019575412f9da7350c3d4d7c7312f1b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0149d623019575412f9da7350c3d4d7c7312f1b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42", "html_url": "https://github.com/rust-lang/rust/commit/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/comments", "author": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68c836a904e5a421712db311421c5266f9ce71c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/68c836a904e5a421712db311421c5266f9ce71c0", "html_url": "https://github.com/rust-lang/rust/commit/68c836a904e5a421712db311421c5266f9ce71c0"}], "stats": {"total": 770, "additions": 264, "deletions": 506}, "files": [{"sha": "9c08eac4edcb0140f000dbb8b1ee93f0e270aaaf", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42", "patch": "@@ -239,9 +239,6 @@ pub(crate) struct RenderOptions {\n     pub(crate) default_settings: FxHashMap<String, String>,\n     /// If present, suffix added to CSS/JavaScript files when referencing them in generated pages.\n     pub(crate) resource_suffix: String,\n-    /// Whether to run the static CSS/JavaScript through a minifier when outputting them. `true` by\n-    /// default.\n-    pub(crate) enable_minification: bool,\n     /// Whether to create an index page in the root of the output directory. If this is true but\n     /// `enable_index_page` is None, generate a static listing of crates instead.\n     pub(crate) enable_index_page: bool,\n@@ -416,7 +413,9 @@ impl Options {\n \n         let to_check = matches.opt_strs(\"check-theme\");\n         if !to_check.is_empty() {\n-            let paths = match theme::load_css_paths(static_files::themes::LIGHT) {\n+            let paths = match theme::load_css_paths(\n+                std::str::from_utf8(static_files::STATIC_FILES.theme_light_css.bytes).unwrap(),\n+            ) {\n                 Ok(p) => p,\n                 Err(e) => {\n                     diag.struct_err(&e.to_string()).emit();\n@@ -557,7 +556,9 @@ impl Options {\n \n         let mut themes = Vec::new();\n         if matches.opt_present(\"theme\") {\n-            let paths = match theme::load_css_paths(static_files::themes::LIGHT) {\n+            let paths = match theme::load_css_paths(\n+                std::str::from_utf8(static_files::STATIC_FILES.theme_light_css.bytes).unwrap(),\n+            ) {\n                 Ok(p) => p,\n                 Err(e) => {\n                     diag.struct_err(&e.to_string()).emit();\n@@ -675,7 +676,6 @@ impl Options {\n             ModuleSorting::Alphabetical\n         };\n         let resource_suffix = matches.opt_str(\"resource-suffix\").unwrap_or_default();\n-        let enable_minification = !matches.opt_present(\"disable-minification\");\n         let markdown_no_toc = matches.opt_present(\"markdown-no-toc\");\n         let markdown_css = matches.opt_strs(\"markdown-css\");\n         let markdown_playground_url = matches.opt_str(\"markdown-playground-url\");\n@@ -768,7 +768,6 @@ impl Options {\n             extern_html_root_takes_precedence,\n             default_settings,\n             resource_suffix,\n-            enable_minification,\n             enable_index_page,\n             index_page,\n             static_root_path,"}, {"sha": "087e9219b67c65a4c02de432500f8f90f13719d6", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42", "patch": "@@ -2,13 +2,14 @@ use std::path::PathBuf;\n \n use rustc_data_structures::fx::FxHashMap;\n \n-use crate::error::Error;\n use crate::externalfiles::ExternalHtml;\n use crate::html::format::{Buffer, Print};\n use crate::html::render::{ensure_trailing_slash, StylePath};\n \n use askama::Template;\n \n+use super::static_files::{StaticFiles, STATIC_FILES};\n+\n #[derive(Clone)]\n pub(crate) struct Layout {\n     pub(crate) logo: String,\n@@ -45,6 +46,9 @@ struct PageLayout<'a> {\n     static_root_path: &'a str,\n     page: &'a Page<'a>,\n     layout: &'a Layout,\n+\n+    files: &'static StaticFiles,\n+\n     themes: Vec<String>,\n     sidebar: String,\n     content: String,\n@@ -61,19 +65,17 @@ pub(crate) fn render<T: Print, S: Print>(\n ) -> String {\n     let static_root_path = page.get_static_root_path();\n     let krate_with_trailing_slash = ensure_trailing_slash(&layout.krate).to_string();\n-    let mut themes: Vec<String> = style_files\n-        .iter()\n-        .map(StylePath::basename)\n-        .collect::<Result<_, Error>>()\n-        .unwrap_or_default();\n+    let mut themes: Vec<String> = style_files.iter().map(|s| s.basename().unwrap()).collect();\n     themes.sort();\n+\n     let rustdoc_version = rustc_interface::util::version_str().unwrap_or(\"unknown version\");\n     let content = Buffer::html().to_display(t); // Note: This must happen before making the sidebar.\n     let sidebar = Buffer::html().to_display(sidebar);\n     PageLayout {\n         static_root_path,\n         page,\n         layout,\n+        files: &STATIC_FILES,\n         themes,\n         sidebar,\n         content,"}, {"sha": "5263d0d223285f8d5578f53497907eb944838c14", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42", "patch": "@@ -32,7 +32,7 @@ use crate::html::escape::Escape;\n use crate::html::format::{join_with_double_colon, Buffer};\n use crate::html::markdown::{self, plain_text_summary, ErrorCodes, IdMap};\n use crate::html::url_parts_builder::UrlPartsBuilder;\n-use crate::html::{layout, sources};\n+use crate::html::{layout, sources, static_files};\n use crate::scrape_examples::AllCallLocations;\n use crate::try_err;\n \n@@ -498,7 +498,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         );\n \n         let (sender, receiver) = channel();\n-        let mut scx = SharedContext {\n+        let scx = SharedContext {\n             tcx,\n             src_root,\n             local_sources,\n@@ -521,19 +521,6 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             call_locations,\n         };\n \n-        // Add the default themes to the `Vec` of stylepaths\n-        //\n-        // Note that these must be added before `sources::render` is called\n-        // so that the resulting source pages are styled\n-        //\n-        // `light.css` is not disabled because it is the stylesheet that stays loaded\n-        // by the browser as the theme stylesheet. The theme system (hackily) works by\n-        // changing the href to this stylesheet. All other themes are disabled to\n-        // prevent rule conflicts\n-        scx.style_files.push(StylePath { path: PathBuf::from(\"light.css\") });\n-        scx.style_files.push(StylePath { path: PathBuf::from(\"dark.css\") });\n-        scx.style_files.push(StylePath { path: PathBuf::from(\"ayu.css\") });\n-\n         let dst = output;\n         scx.ensure_dir(&dst)?;\n \n@@ -647,10 +634,11 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n                         </section>\\\n                      </noscript>\\\n                      <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" \\\n-                         href=\\\"{root_path}settings{suffix}.css\\\">\\\n-                     <script defer src=\\\"{root_path}settings{suffix}.js\\\"></script>\",\n-                    root_path = page.static_root_path.unwrap_or(\"\"),\n-                    suffix = page.resource_suffix,\n+                         href=\\\"{static_root_path}{settings_css}\\\">\\\n+                     <script defer src=\\\"{static_root_path}{settings_js}\\\"></script>\",\n+                    static_root_path = page.static_root_path.unwrap_or(\"\"),\n+                    settings_css = static_files::STATIC_FILES.settings_css,\n+                    settings_js = static_files::STATIC_FILES.settings_js,\n                 )\n             },\n             &shared.style_files,"}, {"sha": "713c5d1bcb66477fc6a800d5d74fe39a6601c1ac", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42", "patch": "@@ -30,10 +30,10 @@ use crate::html::format::{\n     join_with_double_colon, print_abi_with_space, print_constness_with_space, print_where_clause,\n     Buffer, Ending, PrintWithSpace,\n };\n-use crate::html::highlight;\n use crate::html::layout::Page;\n use crate::html::markdown::{HeadingOffset, MarkdownSummaryLine};\n use crate::html::url_parts_builder::UrlPartsBuilder;\n+use crate::html::{highlight, static_files};\n \n use askama::Template;\n use itertools::Itertools;\n@@ -52,8 +52,8 @@ struct PathComponent {\n #[derive(Template)]\n #[template(path = \"print_item.html\")]\n struct ItemVars<'a> {\n-    page: &'a Page<'a>,\n     static_root_path: &'a str,\n+    clipboard_svg: &'static static_files::StaticFile,\n     typ: &'a str,\n     name: &'a str,\n     item_type: &'a str,\n@@ -147,8 +147,8 @@ pub(super) fn print_item(\n     };\n \n     let item_vars = ItemVars {\n-        page,\n         static_root_path: page.get_static_root_path(),\n+        clipboard_svg: &static_files::STATIC_FILES.clipboard_svg,\n         typ,\n         name: item.name.as_ref().unwrap().as_str(),\n         item_type: &item.type_().to_string(),"}, {"sha": "723c502c584f030735803567be9d3f428290ac78", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 47, "deletions": 241, "changes": 288, "blob_url": "https://github.com/rust-lang/rust/blob/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42", "patch": "@@ -1,10 +1,8 @@\n-use std::ffi::OsStr;\n use std::fs::{self, File};\n use std::io::prelude::*;\n use std::io::{self, BufReader};\n-use std::path::{Component, Path, PathBuf};\n+use std::path::{Component, Path};\n use std::rc::Rc;\n-use std::sync::LazyLock as Lazy;\n \n use itertools::Itertools;\n use rustc_data_structures::flock;\n@@ -20,123 +18,19 @@ use crate::error::Error;\n use crate::html::{layout, static_files};\n use crate::{try_err, try_none};\n \n-static FILES_UNVERSIONED: Lazy<FxHashMap<&str, &[u8]>> = Lazy::new(|| {\n-    map! {\n-        \"FiraSans-Regular.woff2\" => static_files::fira_sans::REGULAR,\n-        \"FiraSans-Medium.woff2\" => static_files::fira_sans::MEDIUM,\n-        \"FiraSans-LICENSE.txt\" => static_files::fira_sans::LICENSE,\n-        \"SourceSerif4-Regular.ttf.woff2\" => static_files::source_serif_4::REGULAR,\n-        \"SourceSerif4-Bold.ttf.woff2\" => static_files::source_serif_4::BOLD,\n-        \"SourceSerif4-It.ttf.woff2\" => static_files::source_serif_4::ITALIC,\n-        \"SourceSerif4-LICENSE.md\" => static_files::source_serif_4::LICENSE,\n-        \"SourceCodePro-Regular.ttf.woff2\" => static_files::source_code_pro::REGULAR,\n-        \"SourceCodePro-Semibold.ttf.woff2\" => static_files::source_code_pro::SEMIBOLD,\n-        \"SourceCodePro-It.ttf.woff2\" => static_files::source_code_pro::ITALIC,\n-        \"SourceCodePro-LICENSE.txt\" => static_files::source_code_pro::LICENSE,\n-        \"NanumBarunGothic.ttf.woff2\" => static_files::nanum_barun_gothic::REGULAR,\n-        \"NanumBarunGothic-LICENSE.txt\" => static_files::nanum_barun_gothic::LICENSE,\n-        \"LICENSE-MIT.txt\" => static_files::LICENSE_MIT,\n-        \"LICENSE-APACHE.txt\" => static_files::LICENSE_APACHE,\n-        \"COPYRIGHT.txt\" => static_files::COPYRIGHT,\n-    }\n-});\n-\n-enum SharedResource<'a> {\n-    /// This file will never change, no matter what toolchain is used to build it.\n-    ///\n-    /// It does not have a resource suffix.\n-    Unversioned { name: &'static str },\n-    /// This file may change depending on the toolchain.\n-    ///\n-    /// It has a resource suffix.\n-    ToolchainSpecific { basename: &'static str },\n-    /// This file may change for any crate within a build, or based on the CLI arguments.\n-    ///\n-    /// This differs from normal invocation-specific files because it has a resource suffix.\n-    InvocationSpecific { basename: &'a str },\n-}\n-\n-impl SharedResource<'_> {\n-    fn extension(&self) -> Option<&OsStr> {\n-        use SharedResource::*;\n-        match self {\n-            Unversioned { name }\n-            | ToolchainSpecific { basename: name }\n-            | InvocationSpecific { basename: name } => Path::new(name).extension(),\n-        }\n-    }\n-\n-    fn path(&self, cx: &Context<'_>) -> PathBuf {\n-        match self {\n-            SharedResource::Unversioned { name } => cx.dst.join(name),\n-            SharedResource::ToolchainSpecific { basename } => cx.suffix_path(basename),\n-            SharedResource::InvocationSpecific { basename } => cx.suffix_path(basename),\n-        }\n-    }\n-\n-    fn should_emit(&self, emit: &[EmitType]) -> bool {\n-        if emit.is_empty() {\n-            return true;\n-        }\n-        let kind = match self {\n-            SharedResource::Unversioned { .. } => EmitType::Unversioned,\n-            SharedResource::ToolchainSpecific { .. } => EmitType::Toolchain,\n-            SharedResource::InvocationSpecific { .. } => EmitType::InvocationSpecific,\n-        };\n-        emit.contains(&kind)\n-    }\n-}\n-\n-impl Context<'_> {\n-    fn suffix_path(&self, filename: &str) -> PathBuf {\n-        // We use splitn vs Path::extension here because we might get a filename\n-        // like `style.min.css` and we want to process that into\n-        // `style-suffix.min.css`.  Path::extension would just return `css`\n-        // which would result in `style.min-suffix.css` which isn't what we\n-        // want.\n-        let (base, ext) = filename.split_once('.').unwrap();\n-        let filename = format!(\"{}{}.{}\", base, self.shared.resource_suffix, ext);\n-        self.dst.join(&filename)\n-    }\n-\n-    fn write_shared(\n-        &self,\n-        resource: SharedResource<'_>,\n-        contents: impl 'static + Send + AsRef<[u8]>,\n-        emit: &[EmitType],\n-    ) -> Result<(), Error> {\n-        if resource.should_emit(emit) {\n-            self.shared.fs.write(resource.path(self), contents)\n-        } else {\n-            Ok(())\n-        }\n-    }\n-\n-    fn write_minify(\n-        &self,\n-        resource: SharedResource<'_>,\n-        contents: impl 'static + Send + AsRef<str> + AsRef<[u8]>,\n-        minify: bool,\n-        emit: &[EmitType],\n-    ) -> Result<(), Error> {\n-        if minify {\n-            let contents = contents.as_ref();\n-            let contents = if resource.extension() == Some(OsStr::new(\"css\")) {\n-                minifier::css::minify(contents)\n-                    .map_err(|e| {\n-                        Error::new(format!(\"failed to minify CSS file: {}\", e), resource.path(self))\n-                    })?\n-                    .to_string()\n-            } else {\n-                minifier::js::minify(contents).to_string()\n-            };\n-            self.write_shared(resource, contents, emit)\n-        } else {\n-            self.write_shared(resource, contents, emit)\n-        }\n-    }\n-}\n-\n+/// Rustdoc writes out two kinds of shared files:\n+///  - Static files, which are embedded in the rustdoc binary and are written with a\n+///    filename that includes a hash of their contents. These will always have a new\n+///    URL if the contents change, so they are safe to cache with the\n+///    `Cache-Control: immutable` directive. They are written under the static.files/\n+///    directory and are written when --emit-type is empty (default) or contains\n+///    \"toolchain-specific\".\n+///  - Invocation specific files. These are generated based on the crate(s) being\n+///    documented. Their filenames need to be predictable without knowing their\n+///    contents, so they do not include a hash in their filename and are not safe to\n+///    cache with `Cache-Control: immutable`. They include the contents of the\n+///    --resource-suffix flag and are emitted when --emit-type is empty (default)\n+///    or contains \"invocation-specific\".\n pub(super) fn write_shared(\n     cx: &mut Context<'_>,\n     krate: &Crate,\n@@ -149,139 +43,51 @@ pub(super) fn write_shared(\n     let lock_file = cx.dst.join(\".lock\");\n     let _lock = try_err!(flock::Lock::new(&lock_file, true, true, true), &lock_file);\n \n-    // Minified resources are usually toolchain resources. If they're not, they should use `cx.write_minify` directly.\n-    fn write_minify(\n-        basename: &'static str,\n-        contents: impl 'static + Send + AsRef<str> + AsRef<[u8]>,\n-        cx: &Context<'_>,\n-        options: &RenderOptions,\n-    ) -> Result<(), Error> {\n-        cx.write_minify(\n-            SharedResource::ToolchainSpecific { basename },\n-            contents,\n-            options.enable_minification,\n-            &options.emit,\n-        )\n-    }\n-\n-    // Toolchain resources should never be dynamic.\n-    let write_toolchain = |p: &'static _, c: &'static _| {\n-        cx.write_shared(SharedResource::ToolchainSpecific { basename: p }, c, &options.emit)\n-    };\n-\n-    // Crate resources should always be dynamic.\n-    let write_crate = |p: &_, make_content: &dyn Fn() -> Result<Vec<u8>, Error>| {\n+    // InvocationSpecific resources should always be dynamic.\n+    let write_invocation_specific = |p: &str, make_content: &dyn Fn() -> Result<Vec<u8>, Error>| {\n         let content = make_content()?;\n-        cx.write_shared(SharedResource::InvocationSpecific { basename: p }, content, &options.emit)\n+        if options.emit.is_empty() || options.emit.contains(&EmitType::InvocationSpecific) {\n+            let output_filename = static_files::suffix_path(p, &cx.shared.resource_suffix);\n+            cx.shared.fs.write(cx.dst.join(output_filename), content)\n+        } else {\n+            Ok(())\n+        }\n     };\n \n-    // Given \"foo.svg\", return e.g. \"url(\\\"foo1.58.0.svg\\\")\"\n-    fn ver_url(cx: &Context<'_>, basename: &'static str) -> String {\n-        format!(\n-            \"url(\\\"{}\\\")\",\n-            SharedResource::ToolchainSpecific { basename }\n-                .path(cx)\n-                .file_name()\n-                .unwrap()\n-                .to_str()\n-                .unwrap()\n-        )\n-    }\n-\n-    // We use the AUTOREPLACE mechanism to inject into our static JS and CSS certain\n-    // values that are only known at doc build time. Since this mechanism is somewhat\n-    // surprising when reading the code, please limit it to rustdoc.css.\n-    write_minify(\n-        \"rustdoc.css\",\n-        static_files::RUSTDOC_CSS\n-            .replace(\n-                \"/* AUTOREPLACE: */url(\\\"toggle-minus.svg\\\")\",\n-                &ver_url(cx, \"toggle-minus.svg\"),\n-            )\n-            .replace(\"/* AUTOREPLACE: */url(\\\"toggle-plus.svg\\\")\", &ver_url(cx, \"toggle-plus.svg\"))\n-            .replace(\"/* AUTOREPLACE: */url(\\\"down-arrow.svg\\\")\", &ver_url(cx, \"down-arrow.svg\")),\n-        cx,\n-        options,\n-    )?;\n-\n-    // Add all the static files. These may already exist, but we just\n-    // overwrite them anyway to make sure that they're fresh and up-to-date.\n-    write_minify(\"settings.css\", static_files::SETTINGS_CSS, cx, options)?;\n-    write_minify(\"noscript.css\", static_files::NOSCRIPT_CSS, cx, options)?;\n-\n-    // To avoid \"light.css\" to be overwritten, we'll first run over the received themes and only\n-    // then we'll run over the \"official\" styles.\n-    let mut themes: FxHashSet<String> = FxHashSet::default();\n+    cx.shared\n+        .fs\n+        .create_dir_all(cx.dst.join(\"static.files\"))\n+        .map_err(|e| PathError::new(e, \"static.files\"))?;\n \n+    // Handle added third-party themes\n     for entry in &cx.shared.style_files {\n         let theme = entry.basename()?;\n         let extension =\n             try_none!(try_none!(entry.path.extension(), &entry.path).to_str(), &entry.path);\n \n-        // Handle the official themes\n-        match theme.as_str() {\n-            \"light\" => write_minify(\"light.css\", static_files::themes::LIGHT, cx, options)?,\n-            \"dark\" => write_minify(\"dark.css\", static_files::themes::DARK, cx, options)?,\n-            \"ayu\" => write_minify(\"ayu.css\", static_files::themes::AYU, cx, options)?,\n-            _ => {\n-                // Handle added third-party themes\n-                let filename = format!(\"{}.{}\", theme, extension);\n-                write_crate(&filename, &|| Ok(try_err!(fs::read(&entry.path), &entry.path)))?;\n-            }\n-        };\n-\n-        themes.insert(theme.to_owned());\n-    }\n-\n-    if (*cx.shared).layout.logo.is_empty() {\n-        write_toolchain(\"rust-logo.svg\", static_files::RUST_LOGO_SVG)?;\n-    }\n-    if (*cx.shared).layout.favicon.is_empty() {\n-        write_toolchain(\"favicon.svg\", static_files::RUST_FAVICON_SVG)?;\n-        write_toolchain(\"favicon-16x16.png\", static_files::RUST_FAVICON_PNG_16)?;\n-        write_toolchain(\"favicon-32x32.png\", static_files::RUST_FAVICON_PNG_32)?;\n-    }\n-    write_toolchain(\"wheel.svg\", static_files::WHEEL_SVG)?;\n-    write_toolchain(\"clipboard.svg\", static_files::CLIPBOARD_SVG)?;\n-    write_toolchain(\"down-arrow.svg\", static_files::DOWN_ARROW_SVG)?;\n-    write_toolchain(\"toggle-minus.svg\", static_files::TOGGLE_MINUS_PNG)?;\n-    write_toolchain(\"toggle-plus.svg\", static_files::TOGGLE_PLUS_PNG)?;\n-\n-    let mut themes: Vec<&String> = themes.iter().collect();\n-    themes.sort();\n-\n-    write_minify(\"main.js\", static_files::MAIN_JS, cx, options)?;\n-    write_minify(\"search.js\", static_files::SEARCH_JS, cx, options)?;\n-    write_minify(\"settings.js\", static_files::SETTINGS_JS, cx, options)?;\n-\n-    if cx.include_sources {\n-        write_minify(\"source-script.js\", static_files::sidebar::SOURCE_SCRIPT, cx, options)?;\n-    }\n-\n-    write_minify(\"storage.js\", static_files::STORAGE_JS, cx, options)?;\n+        // Skip the official themes. They are written below as part of STATIC_FILES_LIST.\n+        if matches!(theme.as_str(), \"light\" | \"dark\" | \"ayu\") {\n+            continue;\n+        }\n \n-    if cx.shared.layout.scrape_examples_extension {\n-        cx.write_minify(\n-            SharedResource::InvocationSpecific { basename: \"scrape-examples.js\" },\n-            static_files::SCRAPE_EXAMPLES_JS,\n-            options.enable_minification,\n-            &options.emit,\n-        )?;\n+        let bytes = try_err!(fs::read(&entry.path), &entry.path);\n+        let filename = format!(\"{}{}.{}\", theme, cx.shared.resource_suffix, extension);\n+        cx.shared.fs.write(cx.dst.join(filename), bytes)?;\n     }\n \n+    // When the user adds their own CSS files with --extend-css, we write that as an\n+    // invocation-specific file (that is, with a resource suffix).\n     if let Some(ref css) = cx.shared.layout.css_file_extension {\n         let buffer = try_err!(fs::read_to_string(css), css);\n-        // This varies based on the invocation, so it can't go through the write_minify wrapper.\n-        cx.write_minify(\n-            SharedResource::InvocationSpecific { basename: \"theme.css\" },\n-            buffer,\n-            options.enable_minification,\n-            &options.emit,\n-        )?;\n+        let path = static_files::suffix_path(\"theme.css\", &cx.shared.resource_suffix);\n+        cx.shared.fs.write(cx.dst.join(path), buffer)?;\n     }\n-    write_minify(\"normalize.css\", static_files::NORMALIZE_CSS, cx, options)?;\n-    for (name, contents) in &*FILES_UNVERSIONED {\n-        cx.write_shared(SharedResource::Unversioned { name }, contents, &options.emit)?;\n+\n+    if options.emit.is_empty() || options.emit.contains(&EmitType::Toolchain) {\n+        for f in static_files::STATIC_FILES_LIST {\n+            let filename = static_files::static_filename(f.filename, f.bytes);\n+            cx.shared.fs.write(cx.dst.join(filename), f.minified())?;\n+        }\n     }\n \n     /// Read a file and return all lines that match the `\"{crate}\":{data},` format,\n@@ -463,7 +269,7 @@ pub(super) fn write_shared(\n             v.push_str(\"\\\\\\n}');\\ncreateSourceSidebar();\\n\");\n             Ok(v.into_bytes())\n         };\n-        write_crate(\"source-files.js\", &make_sources)?;\n+        write_invocation_specific(\"source-files.js\", &make_sources)?;\n     }\n \n     // Update the search index and crate list.\n@@ -477,7 +283,7 @@ pub(super) fn write_shared(\n     // Sort the indexes by crate so the file will be generated identically even\n     // with rustdoc running in parallel.\n     all_indexes.sort();\n-    write_crate(\"search-index.js\", &|| {\n+    write_invocation_specific(\"search-index.js\", &|| {\n         let mut v = String::from(\"var searchIndex = JSON.parse('{\\\\\\n\");\n         v.push_str(&all_indexes.join(\",\\\\\\n\"));\n         v.push_str(\n@@ -490,7 +296,7 @@ if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};\n         Ok(v.into_bytes())\n     })?;\n \n-    write_crate(\"crates.js\", &|| {\n+    write_invocation_specific(\"crates.js\", &|| {\n         let krates = krates.iter().map(|k| format!(\"\\\"{}\\\"\", k)).join(\",\");\n         Ok(format!(\"window.ALL_CRATES = [{}];\", krates).into_bytes())\n     })?;"}, {"sha": "96c9afd8cb62eeef0fa6a59445fb8558e0d382f6", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42", "patch": "@@ -4,15 +4,15 @@\n \tfont-style: normal;\n \tfont-weight: 400;\n \tsrc: local('Fira Sans'),\n-\t\turl(\"FiraSans-Regular.woff2\") format(\"woff2\");\n+\t\turl(\"FiraSans-Regular-018c141bf0843ffd.woff2\") format(\"woff2\");\n \tfont-display: swap;\n }\n @font-face {\n \tfont-family: 'Fira Sans';\n \tfont-style: normal;\n \tfont-weight: 500;\n \tsrc: local('Fira Sans Medium'),\n-\t\turl(\"FiraSans-Medium.woff2\") format(\"woff2\");\n+\t\turl(\"FiraSans-Medium-8f9a781e4970d388.woff2\") format(\"woff2\");\n \tfont-display: swap;\n }\n \n@@ -22,23 +22,23 @@\n \tfont-style: normal;\n \tfont-weight: 400;\n \tsrc: local('Source Serif 4'),\n-\t\turl(\"SourceSerif4-Regular.ttf.woff2\") format(\"woff2\");\n+\t\turl(\"SourceSerif4-Regular-1f7d512b176f0f72.ttf.woff2\") format(\"woff2\");\n \tfont-display: swap;\n }\n @font-face {\n \tfont-family: 'Source Serif 4';\n \tfont-style: italic;\n \tfont-weight: 400;\n \tsrc: local('Source Serif 4 Italic'),\n-\t\turl(\"SourceSerif4-It.ttf.woff2\") format(\"woff2\");\n+\t\turl(\"SourceSerif4-It-d034fe4ef9d0fa00.ttf.woff2\") format(\"woff2\");\n \tfont-display: swap;\n }\n @font-face {\n \tfont-family: 'Source Serif 4';\n \tfont-style: normal;\n \tfont-weight: 700;\n \tsrc: local('Source Serif 4 Bold'),\n-\t\turl(\"SourceSerif4-Bold.ttf.woff2\") format(\"woff2\");\n+\t\turl(\"SourceSerif4-Bold-124a1ca42af929b6.ttf.woff2\") format(\"woff2\");\n \tfont-display: swap;\n }\n \n@@ -49,28 +49,28 @@\n \tfont-weight: 400;\n \t/* Avoid using locally installed font because bad versions are in circulation:\n \t * see https://github.com/rust-lang/rust/issues/24355 */\n-\tsrc: url(\"SourceCodePro-Regular.ttf.woff2\") format(\"woff2\");\n+\tsrc: url(\"SourceCodePro-Regular-562dcc5011b6de7d.ttf.woff2\") format(\"woff2\");\n \tfont-display: swap;\n }\n @font-face {\n \tfont-family: 'Source Code Pro';\n \tfont-style: italic;\n \tfont-weight: 400;\n-\tsrc: url(\"SourceCodePro-It.ttf.woff2\") format(\"woff2\");\n+\tsrc: url(\"SourceCodePro-It-1cc31594bf4f1f79.ttf.woff2\") format(\"woff2\");\n \tfont-display: swap;\n }\n @font-face {\n \tfont-family: 'Source Code Pro';\n \tfont-style: normal;\n \tfont-weight: 600;\n-\tsrc: url(\"SourceCodePro-Semibold.ttf.woff2\") format(\"woff2\");\n+\tsrc: url(\"SourceCodePro-Semibold-d899c5a5c4aeb14a.ttf.woff2\") format(\"woff2\");\n \tfont-display: swap;\n }\n \n /* Avoid using legacy CJK serif fonts in Windows like Batang. */\n @font-face {\n \tfont-family: 'NanumBarunGothic';\n-\tsrc: url(\"NanumBarunGothic.ttf.woff2\") format(\"woff2\");\n+\tsrc: url(\"NanumBarunGothic-0f09457c7a19b7c6.ttf.woff2\") format(\"woff2\");\n \tfont-display: swap;\n \tunicode-range: U+AC00-D7AF, U+1100-11FF, U+3130-318F, U+A960-A97F, U+D7B0-D7FF;\n }\n@@ -848,7 +848,7 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \tbackground-size: 20px;\n \tbackground-position: calc(100% - 2px) 56%;\n \t/* image is black color, themes should apply a \"filter\" property to change the color */\n-\tbackground-image: /* AUTOREPLACE: */url(\"down-arrow.svg\");\n+\tbackground-image: url(\"down-arrow-2d685a4bae708e15.svg\");\n }\n #crate-search > option {\n \tfont-size: 1rem;\n@@ -1625,11 +1625,11 @@ details.rustdoc-toggle[open] > summary.hideme > span {\n \n details.rustdoc-toggle[open] > summary::before,\n details.rustdoc-toggle[open] > summary.hideme::before {\n-\tbackground-image: /* AUTOREPLACE: */url(\"toggle-minus.svg\");\n+\tbackground-image: url(\"toggle-minus-31bbd6e4c77f5c96.svg\");\n }\n \n details.rustdoc-toggle > summary::before {\n-\tbackground-image: /* AUTOREPLACE: */url(\"toggle-plus.svg\");\n+\tbackground-image: url(\"toggle-plus-1092eb4930d581b0.svg\");\n }\n \n details.rustdoc-toggle[open] > summary::before,"}, {"sha": "0db15996d2ec129c8a5b1b88b6453f6804240892", "filename": "src/librustdoc/html/static/fonts/README.txt", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FREADME.txt", "raw_url": "https://github.com/rust-lang/rust/raw/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FREADME.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffonts%2FREADME.txt?ref=f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42", "patch": "@@ -0,0 +1,12 @@\n+The Nanum Barun Gothic fonts are shipped with rustdoc because the default fonts\n+on many Windows installs render Korean very badly. See:\n+ - https://github.com/rust-lang/rust/pull/84048,\n+ - https://github.com/rust-lang/rust/issues/84035\n+ - https://github.com/rust-lang/rust/pull/90232\n+\n+The font files were generated with these commands:\n+\n+```sh\n+pyftsubset NanumBarunGothic.ttf \\\n+--unicodes=U+AC00-D7AF:U+1100-11FF,U+3130-318F,U+A960-A97F,U+D7B0-D7FF \\\n+--output-file=NanumBarunGothic.ttf.woff2 --flavor=woff2"}, {"sha": "1c84393cb4e6f890661f398220cd35bcf2a7fe38", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42", "patch": "@@ -183,9 +183,9 @@ function browserSupportsHistoryApi() {\n }\n \n // eslint-disable-next-line no-unused-vars\n-function loadCss(cssFileName) {\n+function loadCss(cssUrl) {\n     const link = document.createElement(\"link\");\n-    link.href = resourcePath(cssFileName, \".css\");\n+    link.href = cssUrl;\n     link.type = \"text/css\";\n     link.rel = \"stylesheet\";\n     document.getElementsByTagName(\"head\")[0].appendChild(link);\n@@ -208,8 +208,8 @@ function loadCss(cssFileName) {\n         event.preventDefault();\n         // Sending request for the CSS and the JS files at the same time so it will\n         // hopefully be loaded when the JS will generate the settings content.\n-        loadCss(\"settings\");\n-        loadScript(resourcePath(\"settings\", \".js\"));\n+        loadCss(getVar(\"static-root-path\") + getVar(\"settings-css\"));\n+        loadScript(getVar(\"static-root-path\") + getVar(\"settings-js\"));\n     };\n \n     window.searchState = {\n@@ -286,7 +286,7 @@ function loadCss(cssFileName) {\n             function loadSearch() {\n                 if (!searchLoaded) {\n                     searchLoaded = true;\n-                    loadScript(resourcePath(\"search\", \".js\"));\n+                    loadScript(getVar(\"static-root-path\") + getVar(\"search-js\"));\n                     loadScript(resourcePath(\"search-index\", \".js\"));\n                 }\n             }"}, {"sha": "141563bd46a19796184109af2590d791561f6202", "filename": "src/librustdoc/html/static/js/settings.js", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "raw_url": "https://github.com/rust-lang/rust/raw/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js?ref=f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42", "patch": "@@ -154,7 +154,9 @@\n      * @return {HTMLElement}\n      */\n     function buildSettingsPage() {\n-        const themes = getVar(\"themes\").split(\",\");\n+        const theme_names = getVar(\"themes\").split(\",\").filter(t => t);\n+        theme_names.push(\"light\", \"dark\", \"ayu\");\n+\n         const settings = [\n             {\n                 \"name\": \"Use system theme\",\n@@ -165,19 +167,19 @@\n                 \"name\": \"Theme\",\n                 \"js_name\": \"theme\",\n                 \"default\": \"light\",\n-                \"options\": themes,\n+                \"options\": theme_names,\n             },\n             {\n                 \"name\": \"Preferred light theme\",\n                 \"js_name\": \"preferred-light-theme\",\n                 \"default\": \"light\",\n-                \"options\": themes,\n+                \"options\": theme_names,\n             },\n             {\n                 \"name\": \"Preferred dark theme\",\n                 \"js_name\": \"preferred-dark-theme\",\n                 \"default\": \"dark\",\n-                \"options\": themes,\n+                \"options\": theme_names,\n             },\n             {\n                 \"name\": \"Auto-hide item contents for large items\","}, {"sha": "db2db83ca631008030a6f30f447011c8363211fb", "filename": "src/librustdoc/html/static/js/storage.js", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js?ref=f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42", "patch": "@@ -126,33 +126,29 @@ function getCurrentValue(name) {\n     }\n }\n \n-function switchTheme(styleElem, mainStyleElem, newTheme, saveTheme) {\n-    const newHref = mainStyleElem.href.replace(\n-        /\\/rustdoc([^/]*)\\.css/, \"/\" + newTheme + \"$1\" + \".css\");\n-\n+function switchTheme(styleElem, mainStyleElem, newThemeName, saveTheme) {\n     // If this new value comes from a system setting or from the previously\n     // saved theme, no need to save it.\n     if (saveTheme) {\n-        updateLocalStorage(\"theme\", newTheme);\n-    }\n-\n-    if (styleElem.href === newHref) {\n-        return;\n+        updateLocalStorage(\"theme\", newThemeName);\n     }\n \n-    let found = false;\n     if (savedHref.length === 0) {\n         onEachLazy(document.getElementsByTagName(\"link\"), el => {\n             savedHref.push(el.href);\n         });\n     }\n-    onEach(savedHref, el => {\n-        if (el === newHref) {\n-            found = true;\n+    const newHref = savedHref.find(url => {\n+        const m = url.match(/static\\.files\\/(.*)-[a-f0-9]{16}\\.css$/);\n+        if (m && m[1] === newThemeName) {\n+            return true;\n+        }\n+        const m2 = url.match(/\\/([^/]*)\\.css$/);\n+        if (m2 && m2[1].startsWith(newThemeName)) {\n             return true;\n         }\n     });\n-    if (found) {\n+    if (newHref && newHref !== styleElem.href) {\n         styleElem.href = newHref;\n     }\n }"}, {"sha": "7b89dc8cd9f766f1ebfd0a75943d0be8fadce037", "filename": "src/librustdoc/html/static_files.rs", "status": "modified", "additions": 99, "deletions": 147, "changes": 246, "blob_url": "https://github.com/rust-lang/rust/blob/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs?ref=f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42", "patch": "@@ -2,167 +2,119 @@\n //!\n //! All the static files are included here for centralized access in case anything other than the\n //! HTML rendering code (say, the theme checker) needs to access one of these files.\n-//!\n-//! Note about types: CSS and JavaScript files are included as `&'static str` to allow for the\n-//! minifier to run on them. All other files are included as `&'static [u8]` so they can be\n-//! directly written to a `Write` handle.\n-\n-/// The file contents of the main `rustdoc.css` file, responsible for the core layout of the page.\n-pub(crate) static RUSTDOC_CSS: &str = include_str!(\"static/css/rustdoc.css\");\n-\n-/// The file contents of `settings.css`, responsible for the items on the settings page.\n-pub(crate) static SETTINGS_CSS: &str = include_str!(\"static/css/settings.css\");\n-\n-/// The file contents of the `noscript.css` file, used in case JS isn't supported or is disabled.\n-pub(crate) static NOSCRIPT_CSS: &str = include_str!(\"static/css/noscript.css\");\n-\n-/// The file contents of `normalize.css`, included to even out standard elements between browser\n-/// implementations.\n-pub(crate) static NORMALIZE_CSS: &str = include_str!(\"static/css/normalize.css\");\n-\n-/// The file contents of `main.js`, which contains the core JavaScript used on documentation pages,\n-/// including search behavior and docblock folding, among others.\n-pub(crate) static MAIN_JS: &str = include_str!(\"static/js/main.js\");\n-\n-/// The file contents of `search.js`, which contains the search behavior.\n-pub(crate) static SEARCH_JS: &str = include_str!(\"static/js/search.js\");\n-\n-/// The file contents of `settings.js`, which contains the JavaScript used to handle the settings\n-/// page.\n-pub(crate) static SETTINGS_JS: &str = include_str!(\"static/js/settings.js\");\n-\n-/// The file contents of `storage.js`, which contains functionality related to browser Local\n-/// Storage, used to store documentation settings.\n-pub(crate) static STORAGE_JS: &str = include_str!(\"static/js/storage.js\");\n-\n-/// The file contents of `scraped-examples.js`, which contains functionality related to the\n-/// --scrape-examples flag that inserts automatically-found examples of usages of items.\n-pub(crate) static SCRAPE_EXAMPLES_JS: &str = include_str!(\"static/js/scrape-examples.js\");\n-\n-pub(crate) static SCRAPE_EXAMPLES_HELP_MD: &str = include_str!(\"static/scrape-examples-help.md\");\n-\n-/// The file contents of `wheel.svg`, the icon used for the settings button.\n-pub(crate) static WHEEL_SVG: &[u8] = include_bytes!(\"static/images/wheel.svg\");\n-\n-/// The file contents of `clipboard.svg`, the icon used for the \"copy path\" button.\n-pub(crate) static CLIPBOARD_SVG: &[u8] = include_bytes!(\"static/images/clipboard.svg\");\n-\n-/// The file contents of `down-arrow.svg`, the icon used for the crate choice combobox.\n-pub(crate) static DOWN_ARROW_SVG: &[u8] = include_bytes!(\"static/images/down-arrow.svg\");\n-\n-/// The file contents of `toggle-minus.svg`, the icon used for opened toggles.\n-pub(crate) static TOGGLE_MINUS_PNG: &[u8] = include_bytes!(\"static/images/toggle-minus.svg\");\n \n-/// The file contents of `toggle-plus.svg`, the icon used for closed toggles.\n-pub(crate) static TOGGLE_PLUS_PNG: &[u8] = include_bytes!(\"static/images/toggle-plus.svg\");\n+use rustc_data_structures::fx::FxHasher;\n+use std::hash::Hasher;\n+use std::path::{Path, PathBuf};\n+use std::{fmt, str};\n \n-/// The contents of `COPYRIGHT.txt`, the license listing for files distributed with documentation\n-/// output.\n-pub(crate) static COPYRIGHT: &[u8] = include_bytes!(\"static/COPYRIGHT.txt\");\n-\n-/// The contents of `LICENSE-APACHE.txt`, the text of the Apache License, version 2.0.\n-pub(crate) static LICENSE_APACHE: &[u8] = include_bytes!(\"static/LICENSE-APACHE.txt\");\n-\n-/// The contents of `LICENSE-MIT.txt`, the text of the MIT License.\n-pub(crate) static LICENSE_MIT: &[u8] = include_bytes!(\"static/LICENSE-MIT.txt\");\n-\n-/// The contents of `rust-logo.svg`, the default icon of the documentation.\n-pub(crate) static RUST_LOGO_SVG: &[u8] = include_bytes!(\"static/images/rust-logo.svg\");\n-\n-/// The default documentation favicons (SVG and PNG fallbacks)\n-pub(crate) static RUST_FAVICON_SVG: &[u8] = include_bytes!(\"static/images/favicon.svg\");\n-pub(crate) static RUST_FAVICON_PNG_16: &[u8] = include_bytes!(\"static/images/favicon-16x16.png\");\n-pub(crate) static RUST_FAVICON_PNG_32: &[u8] = include_bytes!(\"static/images/favicon-32x32.png\");\n-\n-/// The built-in themes given to every documentation site.\n-pub(crate) mod themes {\n-    /// The \"light\" theme, selected by default when no setting is available. Used as the basis for\n-    /// the `--check-theme` functionality.\n-    pub(crate) static LIGHT: &str = include_str!(\"static/css/themes/light.css\");\n-\n-    /// The \"dark\" theme.\n-    pub(crate) static DARK: &str = include_str!(\"static/css/themes/dark.css\");\n-\n-    /// The \"ayu\" theme.\n-    pub(crate) static AYU: &str = include_str!(\"static/css/themes/ayu.css\");\n+pub(crate) struct StaticFile {\n+    pub(crate) filename: &'static str,\n+    pub(crate) bytes: &'static [u8],\n }\n \n-/// Files related to the Fira Sans font.\n-pub(crate) mod fira_sans {\n-    /// The file `FiraSans-Regular.woff2`, the Regular variant of the Fira Sans font in woff2.\n-    pub(crate) static REGULAR: &[u8] = include_bytes!(\"static/fonts/FiraSans-Regular.woff2\");\n-\n-    /// The file `FiraSans-Medium.woff2`, the Medium variant of the Fira Sans font in woff2.\n-    pub(crate) static MEDIUM: &[u8] = include_bytes!(\"static/fonts/FiraSans-Medium.woff2\");\n-\n-    /// The file `FiraSans-LICENSE.txt`, the license text for the Fira Sans font.\n-    pub(crate) static LICENSE: &[u8] = include_bytes!(\"static/fonts/FiraSans-LICENSE.txt\");\n+impl StaticFile {\n+    pub(crate) fn minified(&self) -> Vec<u8> {\n+        if self.filename.ends_with(\".css\") {\n+            minifier::css::minify(str::from_utf8(self.bytes).unwrap()).unwrap().to_string().into()\n+        } else if self.filename.ends_with(\".js\") {\n+            minifier::js::minify(str::from_utf8(self.bytes).unwrap()).to_string().into()\n+        } else {\n+            self.bytes.to_owned()\n+        }\n+    }\n+\n+    pub(crate) fn output_filename(&self) -> PathBuf {\n+        static_filename(self.filename, self.bytes)\n+    }\n }\n \n-/// Files related to the Source Serif 4 font.\n-pub(crate) mod source_serif_4 {\n-    /// The file `SourceSerif4-Regular.ttf.woff2`, the Regular variant of the Source Serif 4 font in\n-    /// woff2.\n-    pub(crate) static REGULAR: &[u8] =\n-        include_bytes!(\"static/fonts/SourceSerif4-Regular.ttf.woff2\");\n-\n-    /// The file `SourceSerif4-Bold.ttf.woff2`, the Bold variant of the Source Serif 4 font in\n-    /// woff2.\n-    pub(crate) static BOLD: &[u8] = include_bytes!(\"static/fonts/SourceSerif4-Bold.ttf.woff2\");\n+/// The Display implementation for a StaticFile outputs its filename. This makes it\n+/// convenient to interpolate static files into HTML templates.\n+impl fmt::Display for StaticFile {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        write!(f, \"{}\", self.output_filename().display())\n+    }\n+}\n \n-    /// The file `SourceSerif4-It.ttf.woff2`, the Italic variant of the Source Serif 4 font in\n-    /// woff2.\n-    pub(crate) static ITALIC: &[u8] = include_bytes!(\"static/fonts/SourceSerif4-It.ttf.woff2\");\n+/// Insert the provided suffix into a filename just before the extension.\n+pub(crate) fn suffix_path(filename: &str, suffix: &str) -> PathBuf {\n+    // We use splitn vs Path::extension here because we might get a filename\n+    // like `style.min.css` and we want to process that into\n+    // `style-suffix.min.css`.  Path::extension would just return `css`\n+    // which would result in `style.min-suffix.css` which isn't what we\n+    // want.\n+    let (base, ext) = filename.split_once('.').unwrap();\n+    let filename = format!(\"{}{}.{}\", base, suffix, ext);\n+    filename.into()\n+}\n \n-    /// The file `SourceSerif4-LICENSE.txt`, the license text for the Source Serif 4 font.\n-    pub(crate) static LICENSE: &[u8] = include_bytes!(\"static/fonts/SourceSerif4-LICENSE.md\");\n+pub(crate) fn static_filename(filename: &str, contents: &[u8]) -> PathBuf {\n+    let filename = filename.rsplit(\"/\").next().unwrap();\n+    Path::new(\"static.files\").join(suffix_path(filename, &static_suffix(contents)))\n }\n \n-/// Files related to the Source Code Pro font.\n-pub(crate) mod source_code_pro {\n-    /// The file `SourceCodePro-Regular.ttf.woff2`, the Regular variant of the Source Code Pro font\n-    /// in woff2.\n-    pub(crate) static REGULAR: &[u8] =\n-        include_bytes!(\"static/fonts/SourceCodePro-Regular.ttf.woff2\");\n+fn static_suffix(bytes: &[u8]) -> String {\n+    let mut hasher = FxHasher::default();\n+    hasher.write(bytes);\n+    format!(\"-{:016x}\", hasher.finish())\n+}\n \n-    /// The file `SourceCodePro-Semibold.ttf.woff2`, the Semibold variant of the Source Code Pro\n-    /// font in woff2.\n-    pub(crate) static SEMIBOLD: &[u8] =\n-        include_bytes!(\"static/fonts/SourceCodePro-Semibold.ttf.woff2\");\n+macro_rules! static_files {\n+    ($($field:ident => $file_path:literal,)+) => {\n+        pub(crate) struct StaticFiles {\n+            $(pub $field: StaticFile,)+\n+        }\n \n-    /// The file `SourceCodePro-It.ttf.woff2`, the Italic variant of the Source Code Pro font in\n-    /// woff2.\n-    pub(crate) static ITALIC: &[u8] = include_bytes!(\"static/fonts/SourceCodePro-It.ttf.woff2\");\n+        pub(crate) const STATIC_FILES: StaticFiles = StaticFiles {\n+            $($field: StaticFile { filename: $file_path, bytes: include_bytes!($file_path) },)+\n+        };\n \n-    /// The file `SourceCodePro-LICENSE.txt`, the license text of the Source Code Pro font.\n-    pub(crate) static LICENSE: &[u8] = include_bytes!(\"static/fonts/SourceCodePro-LICENSE.txt\");\n+        pub(crate) static STATIC_FILES_LIST: &[&'static StaticFile] = &[\n+            $(&STATIC_FILES.$field,)+\n+        ];\n+    }\n }\n \n-/// Files related to the Nanum Barun Gothic font.\n-///\n-/// These files are used to avoid some legacy CJK serif fonts in Windows.\n-///\n-/// Note that the Noto Sans KR font, which was used previously but was not very readable on Windows,\n-/// has been replaced by the Nanum Barun Gothic font. This is due to Windows' implementation of font\n-/// rendering that distorts OpenType fonts too much.\n-///\n-/// The font files were generated with these commands:\n-///\n-/// ```sh\n-/// pyftsubset NanumBarunGothic.ttf \\\n-/// --unicodes=U+AC00-D7AF,U+1100-11FF,U+3130-318F,U+A960-A97F,U+D7B0-D7FF \\\n-/// --output-file=NanumBarunGothic.ttf.woff2 --flavor=woff2\n-/// ```\n-pub(crate) mod nanum_barun_gothic {\n-    /// The file `NanumBarunGothic.ttf.woff2`, the Regular variant of the Nanum Barun Gothic font.\n-    pub(crate) static REGULAR: &[u8] = include_bytes!(\"static/fonts/NanumBarunGothic.ttf.woff2\");\n-\n-    /// The file `NanumBarunGothic-LICENSE.txt`, the license text of the Nanum Barun Gothic font.\n-    pub(crate) static LICENSE: &[u8] = include_bytes!(\"static/fonts/NanumBarunGothic-LICENSE.txt\");\n+static_files! {\n+    rustdoc_css => \"static/css/rustdoc.css\",\n+    settings_css => \"static/css/settings.css\",\n+    noscript_css => \"static/css/noscript.css\",\n+    normalize_css => \"static/css/normalize.css\",\n+    main_js => \"static/js/main.js\",\n+    search_js => \"static/js/search.js\",\n+    settings_js => \"static/js/settings.js\",\n+    source_script_js => \"static/js/source-script.js\",\n+    storage_js => \"static/js/storage.js\",\n+    scrape_examples_js => \"static/js/scrape-examples.js\",\n+    wheel_svg => \"static/images/wheel.svg\",\n+    clipboard_svg => \"static/images/clipboard.svg\",\n+    down_arrow_svg => \"static/images/down-arrow.svg\",\n+    toggle_minus_png => \"static/images/toggle-minus.svg\",\n+    toggle_plus_png => \"static/images/toggle-plus.svg\",\n+    copyright => \"static/COPYRIGHT.txt\",\n+    license_apache => \"static/LICENSE-APACHE.txt\",\n+    license_mit => \"static/LICENSE-MIT.txt\",\n+    rust_logo_svg => \"static/images/rust-logo.svg\",\n+    rust_favicon_svg => \"static/images/favicon.svg\",\n+    rust_favicon_png_16 => \"static/images/favicon-16x16.png\",\n+    rust_favicon_png_32 => \"static/images/favicon-32x32.png\",\n+    theme_light_css => \"static/css/themes/light.css\",\n+    theme_dark_css => \"static/css/themes/dark.css\",\n+    theme_ayu_css => \"static/css/themes/ayu.css\",\n+    fira_sans_regular => \"static/fonts/FiraSans-Regular.woff2\",\n+    fira_sans_medium => \"static/fonts/FiraSans-Medium.woff2\",\n+    fira_sans_license => \"static/fonts/FiraSans-LICENSE.txt\",\n+    source_serif_4_regular => \"static/fonts/SourceSerif4-Regular.ttf.woff2\",\n+    source_serif_4_bold => \"static/fonts/SourceSerif4-Bold.ttf.woff2\",\n+    source_serif_4_italic => \"static/fonts/SourceSerif4-It.ttf.woff2\",\n+    source_serif_4_license => \"static/fonts/SourceSerif4-LICENSE.md\",\n+    source_code_pro_regular => \"static/fonts/SourceCodePro-Regular.ttf.woff2\",\n+    source_code_pro_semibold => \"static/fonts/SourceCodePro-Semibold.ttf.woff2\",\n+    source_code_pro_italic => \"static/fonts/SourceCodePro-It.ttf.woff2\",\n+    source_code_pro_license => \"static/fonts/SourceCodePro-LICENSE.txt\",\n+    nanum_barun_gothic_regular => \"static/fonts/NanumBarunGothic.ttf.woff2\",\n+    nanum_barun_gothic_license => \"static/fonts/NanumBarunGothic-LICENSE.txt\",\n }\n \n-/// Files related to the sidebar in rustdoc sources.\n-pub(crate) mod sidebar {\n-    /// File script to handle sidebar.\n-    pub(crate) static SOURCE_SCRIPT: &str = include_str!(\"static/js/source-script.js\");\n-}\n+pub(crate) static SCRAPE_EXAMPLES_HELP_MD: &str = include_str!(\"static/js/scrape-examples.js\");"}, {"sha": "4efcfc510a255c67420218592c9ee0832e48c6f0", "filename": "src/librustdoc/html/templates/page.html", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "raw_url": "https://github.com/rust-lang/rust/raw/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fpage.html?ref=f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42", "patch": "@@ -7,48 +7,44 @@\n     <meta name=\"description\" content=\"{{page.description}}\"> {#- -#}\n     <meta name=\"keywords\" content=\"{{page.keywords}}\"> {#- -#}\n     <title>{{page.title}}</title> {#- -#}\n-    <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"{{static_root_path|safe}}SourceSerif4-Regular.ttf.woff2\"> {#- -#}\n-    <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"{{static_root_path|safe}}FiraSans-Regular.woff2\"> {#- -#}\n-    <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"{{static_root_path|safe}}FiraSans-Medium.woff2\"> {#- -#}\n-    <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"{{static_root_path|safe}}SourceCodePro-Regular.ttf.woff2\"> {#- -#}\n-    <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"{{static_root_path|safe}}SourceSerif4-Bold.ttf.woff2\"> {#- -#}\n-    <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"{{static_root_path|safe}}SourceCodePro-Semibold.ttf.woff2\"> {#- -#}\n+    <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"{{static_root_path|safe}}{{files.source_serif_4_regular}}\"> {#- -#}\n+    <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"{{static_root_path|safe}}{{files.fira_sans_regular}}\"> {#- -#}\n+    <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"{{static_root_path|safe}}{{files.fira_sans_medium}}\"> {#- -#}\n+    <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"{{static_root_path|safe}}{{files.source_code_pro_regular}}\"> {#- -#}\n+    <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"{{static_root_path|safe}}{{files.source_serif_4_bold}}\"> {#- -#}\n+    <link rel=\"preload\" as=\"font\" type=\"font/woff2\" crossorigin href=\"{{static_root_path|safe}}{{files.source_code_pro_semibold}}\"> {#- -#}\n     <link rel=\"stylesheet\" {# -#}\n-          href=\"{{static_root_path|safe}}normalize{{page.resource_suffix}}.css\"> {#- -#}\n+          href=\"{{static_root_path|safe}}{{files.normalize_css}}\"> {#- -#}\n     <link rel=\"stylesheet\" {# -#}\n-          href=\"{{static_root_path|safe}}rustdoc{{page.resource_suffix}}.css\" {# -#}\n+          href=\"{{static_root_path|safe}}{{files.rustdoc_css}}\" {# -#}\n           id=\"mainThemeStyle\"> {#- -#}\n+    <link rel=\"stylesheet\" id=\"themeStyle\" href=\"{{static_root_path|safe}}{{files.theme_light_css}}\"> {#- -#}\n+    <link rel=\"stylesheet\" disabled href=\"{{static_root_path|safe}}{{files.theme_dark_css}}\"> {#- -#}\n+    <link rel=\"stylesheet\" disabled href=\"{{static_root_path|safe}}{{files.theme_ayu_css}}\"> {#- -#}\n     {%- for theme in themes -%}\n-        <link rel=\"stylesheet\" {# -#}\n-            href=\"{{static_root_path|safe}}{{theme}}{{page.resource_suffix}}.css\" {# -#}\n-        {%- if theme == \"light\" -%}\n-            id=\"themeStyle\"\n-        {%- else -%}\n-            disabled\n-        {%- endif -%}\n-        >\n+        <link rel=\"stylesheet\" disabled href=\"{{page.root_path|safe}}{{theme}}{{page.resource_suffix}}.css\"> {#- -#}\n     {%- endfor -%}\n     <script id=\"default-settings\" {# -#}\n       {% for (k, v) in layout.default_settings %}\n         data-{{k}}=\"{{v}}\"\n       {%- endfor -%}\n     ></script> {#- -#}\n-    <script src=\"{{static_root_path|safe}}storage{{page.resource_suffix}}.js\"></script> {#- -#}\n+    <script src=\"{{static_root_path|safe}}{{files.storage_js}}\"></script> {#- -#}\n     {%- if page.css_class.contains(\"crate\") -%}\n     <script defer src=\"{{page.root_path|safe}}crates{{page.resource_suffix}}.js\"></script> {#- -#}\n     {%- else if page.css_class == \"source\" -%}\n-    <script defer src=\"{{static_root_path|safe}}source-script{{page.resource_suffix}}.js\"></script> {#- -#}\n+    <script defer src=\"{{static_root_path|safe}}{{files.source_script_js}}\"></script> {#- -#}\n     <script defer src=\"{{page.root_path|safe}}source-files{{page.resource_suffix}}.js\"></script> {#- -#}\n     {%- else if !page.css_class.contains(\"mod\") -%}\n     <script defer src=\"sidebar-items{{page.resource_suffix}}.js\"></script> {#- -#}\n     {%- endif -%}\n-    <script defer src=\"{{static_root_path|safe}}main{{page.resource_suffix}}.js\"></script> {#- -#}\n+    <script defer src=\"{{static_root_path|safe}}{{files.main_js}}\"></script> {#- -#}\n     {%- if layout.scrape_examples_extension -%}\n-    <script defer src=\"{{page.root_path|safe}}scrape-examples{{page.resource_suffix}}.js\"></script> {#- -#}\n+    <script defer src=\"{{page.root_path|safe}}{{files.scrape_examples_js}}\"></script> {#- -#}\n     {%- endif -%}\n     <noscript> {#- -#}\n         <link rel=\"stylesheet\" {# -#}\n-           href=\"{{static_root_path|safe}}noscript{{page.resource_suffix}}.css\"> {#- -#}\n+           href=\"{{static_root_path|safe}}{{files.noscript_css}}\"> {#- -#}\n     </noscript> {#- -#}\n     {%- if layout.css_file_extension.is_some() -%}\n         <link rel=\"stylesheet\" {# -#}\n@@ -58,11 +54,11 @@\n         <link rel=\"icon\" href=\"{{layout.favicon}}\"> {#- -#}\n     {%- else -%}\n         <link rel=\"alternate icon\" type=\"image/png\" {# -#}\n-            href=\"{{static_root_path|safe}}favicon-16x16{{page.resource_suffix}}.png\"> {#- -#}\n+            href=\"{{static_root_path|safe}}{{files.rust_favicon_png_16}}\"> {#- -#}\n         <link rel=\"alternate icon\" type=\"image/png\" {# -#}\n-            href=\"{{static_root_path|safe}}favicon-32x32{{page.resource_suffix}}.png\"> {#- -#}\n+            href=\"{{static_root_path|safe}}{{files.rust_favicon_png_32}}\"> {#- -#}\n         <link rel=\"icon\" type=\"image/svg+xml\" {# -#}\n-            href=\"{{static_root_path|safe}}favicon{{page.resource_suffix}}.svg\"> {#- -#}\n+            href=\"{{static_root_path|safe}}{{files.rust_favicon_svg}}\"> {#- -#}\n     {%- endif -%}\n     {{- layout.external_html.in_header|safe -}}\n </head> {#- -#}\n@@ -81,7 +77,7 @@\n             {%- if !layout.logo.is_empty() -%}\n                 <img src=\"{{layout.logo}}\" alt=\"logo\"> {#- -#}\n             {%- else -%}\n-                <img class=\"rust-logo\" src=\"{{static_root_path|safe}}rust-logo{{page.resource_suffix}}.svg\" alt=\"logo\"> {#- -#}\n+                <img class=\"rust-logo\" src=\"{{static_root_path|safe}}{{files.rust_logo_svg}}\" alt=\"logo\"> {#- -#}\n             {%- endif -%}\n             </div> {#- -#}\n         </a> {#- -#}\n@@ -95,7 +91,7 @@ <h2></h2> {#- -#}\n                 {%- if !layout.logo.is_empty()  %}\n                     <img src=\"{{layout.logo}}\" alt=\"logo\"> {#- -#}\n                 {%- else -%}\n-                    <img class=\"rust-logo\" src=\"{{static_root_path|safe}}rust-logo{{page.resource_suffix}}.svg\" alt=\"logo\"> {#- -#}\n+                    <img class=\"rust-logo\" src=\"{{static_root_path|safe}}{{files.rust_logo_svg}}\" alt=\"logo\"> {#- -#}\n                 {%- endif -%}\n             </div> {#- -#}\n         </a> {#- -#}\n@@ -110,7 +106,7 @@ <h2></h2> {#- -#}\n                     {%- if !layout.logo.is_empty()  %}\n                         <img src=\"{{layout.logo}}\" alt=\"logo\"> {#- -#}\n                     {%- else -%}\n-                        <img class=\"rust-logo\" src=\"{{static_root_path|safe}}rust-logo{{page.resource_suffix}}.svg\" alt=\"logo\"> {#- -#}\n+                        <img class=\"rust-logo\" src=\"{{static_root_path|safe}}{{files.rust_logo_svg}}\" alt=\"logo\"> {#- -#}\n                     {%- endif -%}\n                 </a> {#- -#}\n                 {%- endif -%}\n@@ -129,7 +125,7 @@ <h2></h2> {#- -#}\n                     <div id=\"settings-menu\" tabindex=\"-1\"> {#- -#}\n                         <a href=\"{{page.root_path|safe}}settings.html\" title=\"settings\"> {#- -#}\n                             <img width=\"22\" height=\"22\" alt=\"Change settings\" {# -#}\n-                             src=\"{{static_root_path|safe}}wheel{{page.resource_suffix}}.svg\"> {#- -#}\n+                            src=\"{{static_root_path|safe}}{{files.wheel_svg}}\"> {#- -#}\n                         </a> {#- -#}\n                     </div> {#- -#}\n                 </form> {#- -#}\n@@ -140,10 +136,14 @@ <h2></h2> {#- -#}\n     {{- layout.external_html.after_content|safe -}}\n     <div id=\"rustdoc-vars\" {# -#}\n          data-root-path=\"{{page.root_path|safe}}\" {# -#}\n+         data-static-root-path=\"{{static_root_path|safe}}\" {# -#}\n          data-current-crate=\"{{layout.krate}}\" {# -#}\n          data-themes=\"{{themes|join(\",\") }}\" {# -#}\n          data-resource-suffix=\"{{page.resource_suffix}}\" {# -#}\n          data-rustdoc-version=\"{{rustdoc_version}}\" {# -#}\n+         data-search-js=\"{{files.search_js}}\" {# -#}\n+         data-settings-js=\"{{files.settings_js}}\" {# -#}\n+         data-settings-css=\"{{files.settings_css}}\" {# -#}\n     > {#- -#}\n     </div> {#- -#}\n </body> {#- -#}"}, {"sha": "4c8c27095751a123d092f409f8796d28865d0ce7", "filename": "src/librustdoc/html/templates/print_item.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html", "raw_url": "https://github.com/rust-lang/rust/raw/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fprint_item.html?ref=f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42", "patch": "@@ -7,7 +7,7 @@ <h1 class=\"fqn\"> {#- -#}\n         {%- endfor -%}\n         <a class=\"{{item_type}}\" href=\"#\">{{name}}</a> {#- -#}\n         <button id=\"copy-path\" onclick=\"copy_path(this)\" title=\"Copy item path to clipboard\"> {#- -#}\n-            <img src=\"{{static_root_path|safe}}clipboard{{page.resource_suffix}}.svg\" {# -#}\n+        <img src=\"{{static_root_path|safe}}{{clipboard_svg}}\" {# -#}\n                 width=\"19\" height=\"18\" {# -#}\n                 alt=\"Copy item path\"> {#- -#}\n         </button> {#- -#}"}, {"sha": "1982c066b6ff28f2dab608625ea6d3d7d852407d", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42", "patch": "@@ -469,9 +469,6 @@ fn opts() -> Vec<RustcOptGroup> {\n         stable(\"json\", |o| {\n             o.optopt(\"\", \"json\", \"Configure the structure of JSON diagnostics\", \"CONFIG\")\n         }),\n-        unstable(\"disable-minification\", |o| {\n-            o.optflagmulti(\"\", \"disable-minification\", \"Disable minification applied on JS files\")\n-        }),\n         stable(\"allow\", |o| o.optmulti(\"A\", \"allow\", \"Set lint allowed\", \"LINT\")),\n         stable(\"warn\", |o| o.optmulti(\"W\", \"warn\", \"Set lint warnings\", \"LINT\")),\n         stable(\"force-warn\", |o| o.optmulti(\"\", \"force-warn\", \"Set lint force-warn\", \"LINT\")),\n@@ -610,6 +607,7 @@ fn opts() -> Vec<RustcOptGroup> {\n             )\n         }),\n         // deprecated / removed options\n+        unstable(\"disable-minification\", |o| o.optflagmulti(\"\", \"disable-minification\", \"removed\")),\n         stable(\"plugin-path\", |o| {\n             o.optmulti(\n                 \"\","}, {"sha": "cad0c9e5b81531ef28e432f6e9716b5b22a9078e", "filename": "src/test/run-make/emit-shared-files/Makefile", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Ftest%2Frun-make%2Femit-shared-files%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Ftest%2Frun-make%2Femit-shared-files%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Femit-shared-files%2FMakefile?ref=f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42", "patch": "@@ -23,24 +23,24 @@ invocation-only:\n \n toolchain-only:\n \t$(RUSTDOC) -Z unstable-options --emit=toolchain-shared-resources --output $(TOOLCHAIN_ONLY) --resource-suffix=-xxx --extend-css z.css x.rs\n-\t[ -e $(TOOLCHAIN_ONLY)/storage-xxx.js ]\n-\t! [ -e $(TOOLCHAIN_ONLY)/SourceSerif4-It.ttf.woff2 ]\n+\t[ -e $(TOOLCHAIN_ONLY)/static.files/storage-*.js ]\n+\t[ -e $(TOOLCHAIN_ONLY)/static.files/SourceSerif4-It-*.ttf.woff2 ]\n \t! [ -e $(TOOLCHAIN_ONLY)/search-index-xxx.js ]\n \t! [ -e $(TOOLCHAIN_ONLY)/x/index.html ]\n \t! [ -e $(TOOLCHAIN_ONLY)/theme.css ]\n \n-\t[ -e $(TOOLCHAIN_ONLY)/main-xxx.js ]\n+\t[ -e $(TOOLCHAIN_ONLY)/static.files/main-*.js ]\n \t! [ -e $(TOOLCHAIN_ONLY)/y-xxx.css ]\n \n all-shared:\n \t$(RUSTDOC) -Z unstable-options --emit=toolchain-shared-resources,unversioned-shared-resources --output $(ALL_SHARED) --resource-suffix=-xxx --extend-css z.css x.rs\n-\t[ -e $(ALL_SHARED)/storage-xxx.js ]\n-\t[ -e $(ALL_SHARED)/SourceSerif4-It.ttf.woff2 ]\n+\t[ -e $(ALL_SHARED)/static.files/storage-*.js ]\n+\t[ -e $(ALL_SHARED)/static.files/SourceSerif4-It-*.ttf.woff2 ]\n \t! [ -e $(ALL_SHARED)/search-index-xxx.js ]\n \t! [ -e $(ALL_SHARED)/settings.html ]\n \t! [ -e $(ALL_SHARED)/x ]\n \t! [ -e $(ALL_SHARED)/src ]\n \t! [ -e $(ALL_SHARED)/theme.css ]\n \n-\t[ -e $(ALL_SHARED)/main-xxx.js ]\n+\t[ -e $(ALL_SHARED)/static.files/main-*.js ]\n \t! [ -e $(ALL_SHARED)/y-xxx.css ]"}, {"sha": "b280698230dd9ce4349fcbb9b0aabb306dad5341", "filename": "src/test/run-make/issue-88756-default-output/output-default.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Ftest%2Frun-make%2Fissue-88756-default-output%2Foutput-default.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Ftest%2Frun-make%2Fissue-88756-default-output%2Foutput-default.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-88756-default-output%2Foutput-default.stdout?ref=f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42", "patch": "@@ -115,8 +115,6 @@ Options:\n                         Provide width of the output for truncated error\n                         messages\n         --json CONFIG   Configure the structure of JSON diagnostics\n-        --disable-minification \n-                        Disable minification applied on JS files\n     -A, --allow LINT    Set lint allowed\n     -W, --warn LINT     Set lint warnings\n         --force-warn LINT\n@@ -173,6 +171,8 @@ Options:\n         --scrape-tests  Include test code when scraping examples\n         --with-examples path to function call information (for displaying examples in the documentation)\n                         \n+        --disable-minification \n+                        removed\n         --plugin-path DIR\n                         removed, see issue #44136\n                         <https://github.com/rust-lang/rust/issues/44136> for"}, {"sha": "04de52c0df0f38567e7df28db9e2ca2fd53be811", "filename": "src/test/rustdoc/static-root-path.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Ftest%2Frustdoc%2Fstatic-root-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Ftest%2Frustdoc%2Fstatic-root-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fstatic-root-path.rs?ref=f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42", "patch": "@@ -1,18 +1,18 @@\n // compile-flags:-Z unstable-options --static-root-path /cache/\n \n // @has static_root_path/struct.SomeStruct.html\n-// @matchesraw - '\"/cache/main\\.js\"'\n-// @!matchesraw - '\"\\.\\./main\\.js\"'\n+// @matchesraw - '\"/cache/static.files/main-'\n+// @!matchesraw - '\"\\.\\./main'\n // @matchesraw - 'data-root-path=\"\\.\\./\"'\n // @!matchesraw - '\"/cache/search-index\\.js\"'\n pub struct SomeStruct;\n \n // @has src/static_root_path/static-root-path.rs.html\n-// @matchesraw - '\"/cache/source-script\\.js\"'\n-// @!matchesraw - '\"\\.\\./\\.\\./source-script\\.js\"'\n+// @matchesraw - '\"/cache/static.files/source-script-'\n+// @!matchesraw - '\"\\.\\./\\.\\./source-script'\n // @matchesraw - '\"\\.\\./\\.\\./source-files.js\"'\n // @!matchesraw - '\"/cache/source-files\\.js\"'\n \n // @has settings.html\n-// @matchesraw - '/cache/settings\\.js'\n-// @!matchesraw - '\\./settings\\.js'\n+// @matchesraw - '/cache/static.files/settings-'\n+// @!matchesraw - '\\../settings'"}, {"sha": "3da4fed33e111246552f730c26ebccb9b1023ce6", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=f9e1f6ffdf03ec33cb29e20c88fc7bcc938c7f42", "patch": "@@ -307,10 +307,13 @@ function runChecks(testFile, doSearch, parseQuery) {\n  *   `parseQuery` function exported from the search module.\n  */\n function loadSearchJS(doc_folder, resource_suffix) {\n-    const searchJs = path.join(doc_folder, \"search\" + resource_suffix + \".js\");\n     const searchIndexJs = path.join(doc_folder, \"search-index\" + resource_suffix + \".js\");\n     const searchIndex = require(searchIndexJs);\n-    const searchModule = require(searchJs);\n+\n+    const staticFiles = path.join(doc_folder, \"static.files\");\n+    const searchJs = fs.readdirSync(staticFiles).find(\n+        f => f.match(/search.*\\.js$/));\n+    const searchModule = require(path.join(staticFiles, searchJs));\n     const searchWords = searchModule.initSearch(searchIndex.searchIndex);\n \n     return {"}]}