{"sha": "6fde3c54385b92711a9087336fb6ab43000e9fad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmZGUzYzU0Mzg1YjkyNzExYTkwODczMzZmYjZhYjQzMDAwZTlmYWQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-02-15T15:06:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-15T15:06:55Z"}, "message": "Rollup merge of #82009 - BoxyUwU:idontknooow, r=varkor\n\nconst_generics: Dont evaluate array length const when handling errors\n\nFixes #79518\nFixes #78246\n\ncc ````@lcnr````\n\nThis was ICE'ing because we dont pass in the correct ``ParamEnv`` which meant that there was no ``Self: Foo`` predicate to make ``Self::Assoc`` well formed which caused an ICE when trying to normalize ``Self::Assoc`` in the mir interpreter\n\nr? ````@varkor````", "tree": {"sha": "7959c285320ad7795da581c11b059ed3152171b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7959c285320ad7795da581c11b059ed3152171b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fde3c54385b92711a9087336fb6ab43000e9fad", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgKo4PCRBK7hj4Ov3rIwAAdHIIAEp2TU7iGEVynhGjddfXCEhC\naTvuPL+GzlSmNOb1PanMoqQa0OzpwqnM6OGtrSTqnQrWzRchGJV0OW9FvMx/+mo9\ns4ULAAlLHKu76GPf3T7QdIZ62kheZnoMjQvr76VOiIP+tswwDxpL4jC7RiRCaSAj\nXjx8MBzsABNweUnmqNfvaqiHs89RJGe8iVrMLf8e2R+hagCLn2iXPjBmCVtY/PtQ\nPwtUlb2m09+l10CK6poBYfUcqnLCbur3eTeT4+U0pDi/dOFFA5Ho82h87lzB3V9F\nbWowCf9kIkMB55CI6vBzbx0zHN6vc1HkpIyUsoZeWGsjtIwxrQ263MxVNvzvCm4=\n=k23u\n-----END PGP SIGNATURE-----\n", "payload": "tree 7959c285320ad7795da581c11b059ed3152171b8\nparent bd0e8a5df339470d3376f97d15021f301687e46b\nparent a3e079534d5dbacae3f6b182e004bcb3e9338aec\nauthor Jonas Schievink <jonasschievink@gmail.com> 1613401615 +0100\ncommitter GitHub <noreply@github.com> 1613401615 +0100\n\nRollup merge of #82009 - BoxyUwU:idontknooow, r=varkor\n\nconst_generics: Dont evaluate array length const when handling errors\n\nFixes #79518\nFixes #78246\n\ncc ````@lcnr````\n\nThis was ICE'ing because we dont pass in the correct ``ParamEnv`` which meant that there was no ``Self: Foo`` predicate to make ``Self::Assoc`` well formed which caused an ICE when trying to normalize ``Self::Assoc`` in the mir interpreter\n\nr? ````@varkor````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fde3c54385b92711a9087336fb6ab43000e9fad", "html_url": "https://github.com/rust-lang/rust/commit/6fde3c54385b92711a9087336fb6ab43000e9fad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fde3c54385b92711a9087336fb6ab43000e9fad/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd0e8a5df339470d3376f97d15021f301687e46b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd0e8a5df339470d3376f97d15021f301687e46b", "html_url": "https://github.com/rust-lang/rust/commit/bd0e8a5df339470d3376f97d15021f301687e46b"}, {"sha": "a3e079534d5dbacae3f6b182e004bcb3e9338aec", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3e079534d5dbacae3f6b182e004bcb3e9338aec", "html_url": "https://github.com/rust-lang/rust/commit/a3e079534d5dbacae3f6b182e004bcb3e9338aec"}], "stats": {"total": 50, "additions": 45, "deletions": 5}, "files": [{"sha": "4f359caf31d7c9ed2724f79b25044277260a8c1b", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6fde3c54385b92711a9087336fb6ab43000e9fad/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fde3c54385b92711a9087336fb6ab43000e9fad/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=6fde3c54385b92711a9087336fb6ab43000e9fad", "patch": "@@ -228,12 +228,17 @@ impl<'tcx> ty::TyS<'tcx> {\n             ty::Adt(def, _) => format!(\"{} `{}`\", def.descr(), tcx.def_path_str(def.did)).into(),\n             ty::Foreign(def_id) => format!(\"extern type `{}`\", tcx.def_path_str(def_id)).into(),\n             ty::Array(t, n) => {\n+                if t.is_simple_ty() {\n+                    return format!(\"array `{}`\", self).into();\n+                }\n+\n                 let n = tcx.lift(n).unwrap();\n-                match n.try_eval_usize(tcx, ty::ParamEnv::empty()) {\n-                    _ if t.is_simple_ty() => format!(\"array `{}`\", self).into(),\n-                    Some(n) => format!(\"array of {} element{}\", n, pluralize!(n)).into(),\n-                    None => \"array\".into(),\n+                if let ty::ConstKind::Value(v) = n.val {\n+                    if let Some(n) = v.try_to_machine_usize(tcx) {\n+                        return format!(\"array of {} element{}\", n, pluralize!(n)).into();\n+                    }\n                 }\n+                \"array\".into()\n             }\n             ty::Slice(ty) if ty.is_simple_ty() => format!(\"slice `{}`\", self).into(),\n             ty::Slice(_) => \"slice\".into(),"}, {"sha": "ed450c0c2a05613af78b454b43bafcbefebdcef1", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fde3c54385b92711a9087336fb6ab43000e9fad/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fde3c54385b92711a9087336fb6ab43000e9fad/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=6fde3c54385b92711a9087336fb6ab43000e9fad", "patch": "@@ -208,7 +208,7 @@ pub fn eval_to_const_value_raw_provider<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc_middle::mir::interpret::EvalToConstValueResult<'tcx> {\n-    // see comment in const_eval_raw_provider for what we're doing here\n+    // see comment in eval_to_allocation_raw_provider for what we're doing here\n     if key.param_env.reveal() == Reveal::All {\n         let mut key = key;\n         key.param_env = key.param_env.with_user_facing();"}, {"sha": "8f02bfb937a5a0708c012c161396493187458b18", "filename": "src/test/ui/const-generics/issue-79518-default_trait_method_normalization.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6fde3c54385b92711a9087336fb6ab43000e9fad/src%2Ftest%2Fui%2Fconst-generics%2Fissue-79518-default_trait_method_normalization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fde3c54385b92711a9087336fb6ab43000e9fad/src%2Ftest%2Fui%2Fconst-generics%2Fissue-79518-default_trait_method_normalization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-79518-default_trait_method_normalization.rs?ref=6fde3c54385b92711a9087336fb6ab43000e9fad", "patch": "@@ -0,0 +1,21 @@\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+// This test is a minimized reproduction for #79518 where\n+// during error handling for the type mismatch we would try\n+// to evaluate std::mem::size_of::<Self::Assoc> causing an ICE\n+\n+trait Foo {\n+    type Assoc: PartialEq;\n+    const AssocInstance: Self::Assoc;\n+\n+    fn foo()\n+    where\n+        [(); std::mem::size_of::<Self::Assoc>()]: ,\n+    {\n+        Self::AssocInstance == [(); std::mem::size_of::<Self::Assoc>()];\n+        //~^ Error: mismatched types\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "c90774e944f1f48d690099893a5025992b15054c", "filename": "src/test/ui/const-generics/issue-79518-default_trait_method_normalization.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6fde3c54385b92711a9087336fb6ab43000e9fad/src%2Ftest%2Fui%2Fconst-generics%2Fissue-79518-default_trait_method_normalization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6fde3c54385b92711a9087336fb6ab43000e9fad/src%2Ftest%2Fui%2Fconst-generics%2Fissue-79518-default_trait_method_normalization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-79518-default_trait_method_normalization.stderr?ref=6fde3c54385b92711a9087336fb6ab43000e9fad", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-79518-default_trait_method_normalization.rs:16:32\n+   |\n+LL |         Self::AssocInstance == [(); std::mem::size_of::<Self::Assoc>()];\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected associated type, found array `[(); _]`\n+   |\n+   = note: expected associated type `<Self as Foo>::Assoc`\n+                        found array `[(); _]`\n+   = help: consider constraining the associated type `<Self as Foo>::Assoc` to `[(); _]` or calling a method that returns `<Self as Foo>::Assoc`\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}