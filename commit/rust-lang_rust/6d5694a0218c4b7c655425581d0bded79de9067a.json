{"sha": "6d5694a0218c4b7c655425581d0bded79de9067a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNTY5NGEwMjE4YzRiN2M2NTU0MjU1ODFkMGJkZWQ3OWRlOTA2N2E=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-07-30T12:00:12Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-07-30T12:00:12Z"}, "message": "fix memrchr in miri", "tree": {"sha": "7992799788106df909e6df9867ed7c4ec11b3cfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7992799788106df909e6df9867ed7c4ec11b3cfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d5694a0218c4b7c655425581d0bded79de9067a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d5694a0218c4b7c655425581d0bded79de9067a", "html_url": "https://github.com/rust-lang/rust/commit/6d5694a0218c4b7c655425581d0bded79de9067a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d5694a0218c4b7c655425581d0bded79de9067a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bbcd005b30582d07f1a39dcf50f77b54e055828", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bbcd005b30582d07f1a39dcf50f77b54e055828", "html_url": "https://github.com/rust-lang/rust/commit/7bbcd005b30582d07f1a39dcf50f77b54e055828"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "c9d3c7fea9839e1ed3da89ae8b61971ff69c493f", "filename": "src/libcore/slice/memchr.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6d5694a0218c4b7c655425581d0bded79de9067a/src%2Flibcore%2Fslice%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d5694a0218c4b7c655425581d0bded79de9067a/src%2Flibcore%2Fslice%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmemchr.rs?ref=6d5694a0218c4b7c655425581d0bded79de9067a", "patch": "@@ -100,24 +100,30 @@ pub fn memrchr(x: u8, text: &[u8]) -> Option<usize> {\n     // - the first remaining bytes, < 2 word size\n     let len = text.len();\n     let ptr = text.as_ptr();\n-    let usize_bytes = mem::size_of::<usize>();\n+    type Chunk = usize;\n \n-    let mut offset = {\n-        // We call this just to obtain the length of the suffix\n-        let (_, _, suffix) = unsafe { text.align_to::<usize>() };\n-        len - suffix.len()\n+    let (min_aligned_offset, max_aligned_offset) = {\n+        // We call this just to obtain the length of the prefix and suffix.\n+        // In the middle we always process two chunks at once.\n+        let (prefix, _, suffix) = unsafe { text.align_to::<(Chunk, Chunk)>() };\n+        (prefix.len(), len - suffix.len())\n     };\n+\n+    let mut offset = max_aligned_offset;\n     if let Some(index) = text[offset..].iter().rposition(|elt| *elt == x) {\n         return Some(offset + index);\n     }\n \n-    // search the body of the text\n+    // search the body of the text, make sure we don't cross min_aligned_offset.\n+    // offset is always aligned, so just testing `>` is sufficient and avoids possible\n+    // overflow.\n     let repeated_x = repeat_byte(x);\n+    let chunk_bytes = mem::size_of::<Chunk>();\n \n-    while offset >= 2 * usize_bytes {\n+    while offset > min_aligned_offset {\n         unsafe {\n-            let u = *(ptr.offset(offset as isize - 2 * usize_bytes as isize) as *const usize);\n-            let v = *(ptr.offset(offset as isize - usize_bytes as isize) as *const usize);\n+            let u = *(ptr.offset(offset as isize - 2 * chunk_bytes as isize) as *const Chunk);\n+            let v = *(ptr.offset(offset as isize - chunk_bytes as isize) as *const Chunk);\n \n             // break if there is a matching byte\n             let zu = contains_zero_byte(u ^ repeated_x);\n@@ -126,7 +132,7 @@ pub fn memrchr(x: u8, text: &[u8]) -> Option<usize> {\n                 break;\n             }\n         }\n-        offset -= 2 * usize_bytes;\n+        offset -= 2 * chunk_bytes;\n     }\n \n     // find the byte before the point the body loop stopped"}]}