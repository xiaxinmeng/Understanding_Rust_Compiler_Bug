{"sha": "c2b5a7ea522672a01b089c159f9b2c3e36d9f4dd", "node_id": "C_kwDOAAsO6NoAKGMyYjVhN2VhNTIyNjcyYTAxYjA4OWMxNTlmOWIyYzNlMzZkOWY0ZGQ", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-04-01T10:41:35Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-04-01T10:41:46Z"}, "message": "remove `unify_key::replace_if_possible`", "tree": {"sha": "7978820295a8bc5d1424695701c7b204529d600b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7978820295a8bc5d1424695701c7b204529d600b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2b5a7ea522672a01b089c159f9b2c3e36d9f4dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2b5a7ea522672a01b089c159f9b2c3e36d9f4dd", "html_url": "https://github.com/rust-lang/rust/commit/c2b5a7ea522672a01b089c159f9b2c3e36d9f4dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2b5a7ea522672a01b089c159f9b2c3e36d9f4dd/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18fae7b2e5744f9a177482e268967a9c7a171425", "url": "https://api.github.com/repos/rust-lang/rust/commits/18fae7b2e5744f9a177482e268967a9c7a171425", "html_url": "https://github.com/rust-lang/rust/commit/18fae7b2e5744f9a177482e268967a9c7a171425"}], "stats": {"total": 54, "additions": 11, "deletions": 43}, "files": [{"sha": "86229dbfad746a51b528e1de9fff6d256cf7baff", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c2b5a7ea522672a01b089c159f9b2c3e36d9f4dd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2b5a7ea522672a01b089c159f9b2c3e36d9f4dd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=c2b5a7ea522672a01b089c159f9b2c3e36d9f4dd", "patch": "@@ -27,15 +27,12 @@ use super::glb::Glb;\n use super::lub::Lub;\n use super::sub::Sub;\n use super::type_variable::TypeVariableValue;\n-use super::unify_key::replace_if_possible;\n-use super::unify_key::{ConstVarValue, ConstVariableValue};\n-use super::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use super::{InferCtxt, MiscVariable, TypeTrace};\n-\n use crate::traits::{Obligation, PredicateObligations};\n-\n use rustc_data_structures::sso::SsoHashMap;\n use rustc_hir::def_id::DefId;\n+use rustc_middle::infer::unify_key::{ConstVarValue, ConstVariableValue};\n+use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n@@ -140,8 +137,8 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n             return Ok(a);\n         }\n \n-        let a = replace_if_possible(&mut self.inner.borrow_mut().const_unification_table(), a);\n-        let b = replace_if_possible(&mut self.inner.borrow_mut().const_unification_table(), b);\n+        let a = self.shallow_resolve(a);\n+        let b = self.shallow_resolve(b);\n \n         let a_is_expected = relation.a_is_expected();\n "}, {"sha": "0a11a81c2942511e461dbd620a5c1da14f09855d", "filename": "compiler/rustc_infer/src/infer/freshen.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c2b5a7ea522672a01b089c159f9b2c3e36d9f4dd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2b5a7ea522672a01b089c159f9b2c3e36d9f4dd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs?ref=c2b5a7ea522672a01b089c159f9b2c3e36d9f4dd", "patch": "@@ -30,17 +30,13 @@\n //! solving a set of constraints. In contrast, the type inferencer assigns a value to each type\n //! variable only once, and it does so as soon as it can, so it is reasonable to ask what the type\n //! inferencer knows \"so far\".\n-\n+use super::InferCtxt;\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_middle::infer::unify_key::ToType;\n use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n-\n-use rustc_data_structures::fx::FxHashMap;\n-\n use std::collections::hash_map::Entry;\n \n-use super::unify_key::ToType;\n-use super::InferCtxt;\n-\n pub struct TypeFreshener<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n     ty_freshen_count: u32,"}, {"sha": "cefe7aae396b4d473511f7e6f15a67f43210dc37", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2b5a7ea522672a01b089c159f9b2c3e36d9f4dd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2b5a7ea522672a01b089c159f9b2c3e36d9f4dd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=c2b5a7ea522672a01b089c159f9b2c3e36d9f4dd", "patch": "@@ -70,8 +70,6 @@ mod sub;\n pub mod type_variable;\n mod undo_log;\n \n-pub use rustc_middle::infer::unify_key;\n-\n #[must_use]\n #[derive(Debug)]\n pub struct InferOk<'tcx, T> {"}, {"sha": "7859922d503473f41b913a5fa65211d6338ebdcc", "filename": "compiler/rustc_middle/src/infer/unify_key.rs", "status": "modified", "additions": 2, "deletions": 25, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c2b5a7ea522672a01b089c159f9b2c3e36d9f4dd/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2b5a7ea522672a01b089c159f9b2c3e36d9f4dd/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs?ref=c2b5a7ea522672a01b089c159f9b2c3e36d9f4dd", "patch": "@@ -1,13 +1,8 @@\n-use crate::ty::{self, InferConst, Ty, TyCtxt};\n-use rustc_data_structures::snapshot_vec;\n-use rustc_data_structures::undo_log::UndoLogs;\n-use rustc_data_structures::unify::{\n-    self, EqUnifyValue, InPlace, NoError, UnificationTable, UnifyKey, UnifyValue,\n-};\n+use crate::ty::{self, Ty, TyCtxt};\n+use rustc_data_structures::unify::{EqUnifyValue, NoError, UnifyKey, UnifyValue};\n use rustc_span::def_id::DefId;\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n-\n use std::cmp;\n use std::marker::PhantomData;\n \n@@ -167,21 +162,3 @@ impl<'tcx> UnifyValue for ConstVarValue<'tcx> {\n }\n \n impl<'tcx> EqUnifyValue for ty::Const<'tcx> {}\n-\n-pub fn replace_if_possible<'tcx, V, L>(\n-    table: &mut UnificationTable<InPlace<ty::ConstVid<'tcx>, V, L>>,\n-    c: ty::Const<'tcx>,\n-) -> ty::Const<'tcx>\n-where\n-    V: snapshot_vec::VecLike<unify::Delegate<ty::ConstVid<'tcx>>>,\n-    L: UndoLogs<snapshot_vec::UndoLog<unify::Delegate<ty::ConstVid<'tcx>>>>,\n-{\n-    if let ty::ConstKind::Infer(InferConst::Var(vid)) = c.val() {\n-        match table.probe_value(vid).val.known() {\n-            Some(c) => c,\n-            None => c,\n-        }\n-    } else {\n-        c\n-    }\n-}"}, {"sha": "55a5eb966c2221b27f8188250a14f5009f9e0f68", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2b5a7ea522672a01b089c159f9b2c3e36d9f4dd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2b5a7ea522672a01b089c159f9b2c3e36d9f4dd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs?ref=c2b5a7ea522672a01b089c159f9b2c3e36d9f4dd", "patch": "@@ -14,7 +14,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc_infer::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n+use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, Const, Ty, TyCtxt};"}, {"sha": "6edcc12bcf5a640c964673c834fccf63116b65e2", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2b5a7ea522672a01b089c159f9b2c3e36d9f4dd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2b5a7ea522672a01b089c159f9b2c3e36d9f4dd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=c2b5a7ea522672a01b089c159f9b2c3e36d9f4dd", "patch": "@@ -15,8 +15,8 @@ use rustc_hir::def::Namespace;\n use rustc_infer::infer::canonical::OriginalQueryValues;\n use rustc_infer::infer::canonical::{Canonical, QueryResponse};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc_infer::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc_infer::infer::{self, InferOk, TyCtxtInferExt};\n+use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc_middle::middle::stability;\n use rustc_middle::ty::fast_reject::{simplify_type, TreatParams};\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};"}]}