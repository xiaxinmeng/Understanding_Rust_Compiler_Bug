{"sha": "654f7e3086ba3e13c4c0621fe5839dd62edb581e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NGY3ZTMwODZiYTNlMTNjNGMwNjIxZmU1ODM5ZGQ2MmVkYjU4MWU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-09T21:11:46Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-31T04:23:34Z"}, "message": "rustc: Make unique boxes self-describing", "tree": {"sha": "85b0fd9e8a8dc556a3ed76eed4811da7d08e9eab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85b0fd9e8a8dc556a3ed76eed4811da7d08e9eab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/654f7e3086ba3e13c4c0621fe5839dd62edb581e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/654f7e3086ba3e13c4c0621fe5839dd62edb581e", "html_url": "https://github.com/rust-lang/rust/commit/654f7e3086ba3e13c4c0621fe5839dd62edb581e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/654f7e3086ba3e13c4c0621fe5839dd62edb581e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "429f7e9e08efcaa2de7d50e444e533b38c52b2c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/429f7e9e08efcaa2de7d50e444e533b38c52b2c8", "html_url": "https://github.com/rust-lang/rust/commit/429f7e9e08efcaa2de7d50e444e533b38c52b2c8"}], "stats": {"total": 118, "additions": 92, "deletions": 26}, "files": [{"sha": "4d6aaf02070e9793f4bad75ab9669f74f53a679c", "filename": "src/rt/rust_cc.cpp", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/654f7e3086ba3e13c4c0621fe5839dd62edb581e/src%2Frt%2Frust_cc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/654f7e3086ba3e13c4c0621fe5839dd62edb581e/src%2Frt%2Frust_cc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_cc.cpp?ref=654f7e3086ba3e13c4c0621fe5839dd62edb581e", "patch": "@@ -117,7 +117,9 @@ class irc : public shape::data<irc,shape::ptr> {\n     }\n \n     void walk_uniq2() {\n-        shape::data<irc,shape::ptr>::walk_uniq_contents1();\n+        rust_opaque_box *box = *(rust_opaque_box**)dp;\n+        if (box)\n+            shape::data<irc,shape::ptr>::walk_uniq_contents1();\n     }\n \n     void walk_rptr2() {\n@@ -373,7 +375,9 @@ class mark : public shape::data<mark,shape::ptr> {\n     }\n \n     void walk_uniq2() {\n-        shape::data<mark,shape::ptr>::walk_uniq_contents1();\n+        rust_opaque_box *box = *(rust_opaque_box**)dp;\n+        if (box)\n+            shape::data<mark,shape::ptr>::walk_uniq_contents1();\n     }\n \n     void walk_rptr2() {"}, {"sha": "5ebd794ab1dfb78c0e5c5120ee830ead375cf96f", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/654f7e3086ba3e13c4c0621fe5839dd62edb581e/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/654f7e3086ba3e13c4c0621fe5839dd62edb581e/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=654f7e3086ba3e13c4c0621fe5839dd62edb581e", "patch": "@@ -783,6 +783,11 @@ class ptr {\n         return box->td;\n     }\n \n+    inline const type_desc *uniq_body_td() const {\n+        rust_opaque_box *box = *reinterpret_cast<rust_opaque_box**>(p);\n+        return box->td;\n+    }\n+\n     inline ptr box_body() const {\n         rust_opaque_box *box = *reinterpret_cast<rust_opaque_box**>(p);\n         return make((uint8_t*)::box_body(box));\n@@ -881,6 +886,11 @@ class ptr_pair {\n         return box_fst->td;\n     }\n \n+    inline const type_desc *uniq_body_td() const {\n+        rust_opaque_box *box_fst = *reinterpret_cast<rust_opaque_box**>(fst);\n+        return box_fst->td;\n+    }\n+\n     inline ptr_pair box_body() const {\n         rust_opaque_box *box_fst = *reinterpret_cast<rust_opaque_box**>(fst);\n         rust_opaque_box *box_snd = *reinterpret_cast<rust_opaque_box**>(snd);\n@@ -1067,10 +1077,16 @@ data<T,U>::walk_box_contents1() {\n template<typename T,typename U>\n void\n data<T,U>::walk_uniq_contents1() {\n-    typename U::template data<uint8_t *>::t box_ptr = bump_dp<uint8_t *>(dp);\n-    U data_ptr(box_ptr);\n-    T sub(*static_cast<T *>(this), data_ptr);\n-    static_cast<T *>(this)->walk_uniq_contents2(sub);\n+    const type_desc *body_td = dp.uniq_body_td();\n+    if (body_td) {\n+        U body_dp(dp.box_body());\n+        arena arena;\n+        type_param *params = type_param::from_tydesc(body_td, arena);\n+        T sub(*static_cast<T *>(this), body_td->shape, params,\n+              body_td->shape_tables, body_dp);\n+        sub.align = true;\n+        static_cast<T *>(this)->walk_uniq_contents2(sub);\n+    }\n }\n \n template<typename T,typename U>"}, {"sha": "5c079f3010689589dee32bb3617dab1ef196d0e3", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/654f7e3086ba3e13c4c0621fe5839dd62edb581e/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654f7e3086ba3e13c4c0621fe5839dd62edb581e/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=654f7e3086ba3e13c4c0621fe5839dd62edb581e", "patch": "@@ -471,7 +471,8 @@ fn compile_submatch(bcx: block, m: match, vals: [ValueRef],\n     }\n \n     if any_uniq_pat(m, col) {\n-        let unboxed = Load(bcx, val);\n+        let box = Load(bcx, val);\n+        let unboxed = GEPi(bcx, box, [0u, abi::box_field_body]);\n         compile_submatch(bcx, enter_uniq(dm, m, col, val),\n                          [unboxed] + vals_left, chk, exits);\n         ret;\n@@ -762,8 +763,10 @@ fn bind_irrefutable_pat(bcx: block, pat: @ast::pat, val: ValueRef,\n         bcx = bind_irrefutable_pat(bcx, inner, unboxed, true);\n       }\n       ast::pat_uniq(inner) {\n-        let val = Load(bcx, val);\n-        bcx = bind_irrefutable_pat(bcx, inner, val, true);\n+        let box = Load(bcx, val);\n+        let unboxed =\n+            GEPi(bcx, box, [0u, abi::box_field_body]);\n+        bcx = bind_irrefutable_pat(bcx, inner, unboxed, true);\n       }\n       ast::pat_wild | ast::pat_lit(_) | ast::pat_range(_, _) { }\n     }"}, {"sha": "2fb4dd9877ffcdbce62d92f10e750a16734e1a31", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/654f7e3086ba3e13c4c0621fe5839dd62edb581e/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654f7e3086ba3e13c4c0621fe5839dd62edb581e/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=654f7e3086ba3e13c4c0621fe5839dd62edb581e", "patch": "@@ -243,6 +243,13 @@ fn trans_shared_free(cx: block, v: ValueRef) -> block {\n     ret cx;\n }\n \n+fn trans_unique_free(cx: block, v: ValueRef) -> block {\n+    let _icx = cx.insn_ctxt(\"trans_shared_free\");\n+    Call(cx, cx.ccx().upcalls.exchange_free,\n+         [PointerCast(cx, v, T_ptr(T_i8()))]);\n+    ret cx;\n+}\n+\n fn umax(cx: block, a: ValueRef, b: ValueRef) -> ValueRef {\n     let _icx = cx.insn_ctxt(\"umax\");\n     let cond = ICmp(cx, lib::llvm::IntULT, a, b);\n@@ -1780,7 +1787,7 @@ fn autoderef(cx: block, e_id: ast::node_id,\n             v1 = PointerCast(cx, body, T_ptr(llty));\n           }\n           ty::ty_uniq(_) {\n-            let derefed = uniq::autoderef(v1, t1);\n+            let derefed = uniq::autoderef(cx, v1, t1);\n             t1 = derefed.t;\n             v1 = derefed.v;\n           }\n@@ -2662,6 +2669,9 @@ fn trans_lval(cx: block, e: @ast::expr) -> lval_result {\n                 let non_gc_val = non_gc_box_cast(sub.bcx, sub.val, t);\n                 GEPi(sub.bcx, non_gc_val, [0u, abi::box_field_body])\n               }\n+              ty::ty_uniq(_) {\n+                GEPi(sub.bcx, sub.val, [0u, abi::box_field_body])\n+              }\n               ty::ty_res(_, _, _) {\n                 GEPi(sub.bcx, sub.val, [0u, 1u])\n               }\n@@ -2670,7 +2680,7 @@ fn trans_lval(cx: block, e: @ast::expr) -> lval_result {\n                 let ellty = T_ptr(type_of(ccx, ety));\n                 PointerCast(sub.bcx, sub.val, ellty)\n               }\n-              ty::ty_ptr(_) | ty::ty_uniq(_) | ty::ty_rptr(_,_) { sub.val }\n+              ty::ty_ptr(_) | ty::ty_rptr(_,_) { sub.val }\n             };\n             ret lval_owned(sub.bcx, val);\n           }\n@@ -2946,7 +2956,15 @@ fn adapt_borrowed_value(lv: lval_result, _arg: ty::arg,\n       }\n \n       ty::ty_uniq(_) {\n-        ret lv; // no change needed at runtime (I think)\n+        let box_ptr = {\n+            alt lv.kind {\n+              temporary { lv.val }\n+              owned { Load(bcx, lv.val) }\n+              owned_imm { lv.val }\n+            }\n+        };\n+        let body_ptr = GEPi(bcx, box_ptr, [0u, abi::box_field_body]);\n+        ret lval_temp(bcx, body_ptr);\n       }\n \n       ty::ty_str | ty::ty_vec(_) |"}, {"sha": "b49272e07b28da8d52bab631b13ae9892e61f881", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/654f7e3086ba3e13c4c0621fe5839dd62edb581e/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654f7e3086ba3e13c4c0621fe5839dd62edb581e/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=654f7e3086ba3e13c4c0621fe5839dd62edb581e", "patch": "@@ -686,6 +686,15 @@ fn T_opaque_box_ptr(cx: @crate_ctxt) -> TypeRef {\n     ret T_box_ptr(T_opaque_box(cx));\n }\n \n+fn T_unique(cx: @crate_ctxt, t: TypeRef) -> TypeRef {\n+    ret T_struct(T_box_header_fields(cx) + [t]);\n+}\n+\n+fn T_unique_ptr(t: TypeRef) -> TypeRef {\n+    const unique_addrspace: uint = 0u;\n+    ret llvm::LLVMPointerType(t, unique_addrspace as c_uint);\n+}\n+\n fn T_port(cx: @crate_ctxt, _t: TypeRef) -> TypeRef {\n     ret T_struct([cx.int_type]); // Refcount\n "}, {"sha": "52d924df03247a2e02ed126b822c4c58da18aabb", "filename": "src/rustc/middle/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/654f7e3086ba3e13c4c0621fe5839dd62edb581e/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654f7e3086ba3e13c4c0621fe5839dd62edb581e/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=654f7e3086ba3e13c4c0621fe5839dd62edb581e", "patch": "@@ -91,7 +91,7 @@ fn type_of(cx: @crate_ctxt, t: ty::t) -> TypeRef {\n           ty::ty_evec(mt, ty::vstore_box) |\n           ty::ty_box(mt) { T_box_ptr(T_box(cx, type_of(cx, mt.ty))) }\n           ty::ty_opaque_box { T_box_ptr(T_box(cx, T_i8())) }\n-          ty::ty_uniq(mt) { T_ptr(type_of(cx, mt.ty)) }\n+          ty::ty_uniq(mt) { T_unique_ptr(T_unique(cx, type_of(cx, mt.ty))) }\n           ty::ty_evec(mt, ty::vstore_uniq) |\n           ty::ty_vec(mt) { T_ptr(T_vec(cx, type_of(cx, mt.ty))) }\n           ty::ty_ptr(mt) { T_ptr(type_of(cx, mt.ty)) }"}, {"sha": "cde7cbf4b705dc7f5372b8e569b080160cfb5ec8", "filename": "src/rustc/middle/trans/uniq.rs", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/654f7e3086ba3e13c4c0621fe5839dd62edb581e/src%2Frustc%2Fmiddle%2Ftrans%2Funiq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/654f7e3086ba3e13c4c0621fe5839dd62edb581e/src%2Frustc%2Fmiddle%2Ftrans%2Funiq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Funiq.rs?ref=654f7e3086ba3e13c4c0621fe5839dd62edb581e", "patch": "@@ -11,11 +11,12 @@ fn trans_uniq(bcx: block, contents: @ast::expr,\n               node_id: ast::node_id, dest: dest) -> block {\n     let _icx = bcx.insn_ctxt(\"uniq::trans_uniq\");\n     let uniq_ty = node_id_type(bcx, node_id);\n-    let llptr = alloc_uniq(bcx, uniq_ty);\n-    add_clean_free(bcx, llptr, true);\n-    let bcx = trans_expr_save_in(bcx, contents, llptr);\n-    revoke_clean(bcx, llptr);\n-    ret store_in_dest(bcx, llptr, dest);\n+    let contents_ty = content_ty(uniq_ty);\n+    let {box, body} = malloc_unique(bcx, contents_ty);\n+    add_clean_free(bcx, box, true);\n+    let bcx = trans_expr_save_in(bcx, contents, body);\n+    revoke_clean(bcx, box);\n+    ret store_in_dest(bcx, box, dest);\n }\n \n fn alloc_uniq(bcx: block, uniq_ty: ty::t) -> ValueRef {\n@@ -31,8 +32,10 @@ fn make_free_glue(bcx: block, vptr: ValueRef, t: ty::t)\n     -> block {\n     let _icx = bcx.insn_ctxt(\"uniq::make_free_glue\");\n     with_cond(bcx, IsNotNull(bcx, vptr)) {|bcx|\n-        let bcx = drop_ty(bcx, vptr, content_ty(t));\n-        trans_shared_free(bcx, vptr)\n+        let content_ty = content_ty(t);\n+        let body_ptr = opaque_box_body(bcx, content_ty, vptr);\n+        let bcx = drop_ty(bcx, body_ptr, content_ty);\n+        trans_unique_free(bcx, vptr)\n     }\n }\n \n@@ -43,18 +46,31 @@ fn content_ty(t: ty::t) -> ty::t {\n     }\n }\n \n-fn autoderef(v: ValueRef, t: ty::t) -> {v: ValueRef, t: ty::t} {\n+fn autoderef(bcx: block, v: ValueRef, t: ty::t) -> {v: ValueRef, t: ty::t} {\n     let content_ty = content_ty(t);\n+    let v = opaque_box_body(bcx, content_ty, v);\n     ret {v: v, t: content_ty};\n }\n \n fn duplicate(bcx: block, v: ValueRef, t: ty::t) -> result {\n     let _icx = bcx.insn_ctxt(\"uniq::duplicate\");\n     let content_ty = content_ty(t);\n-    let llptr = alloc_uniq(bcx, t);\n+    let {box: dst_box, body: dst_body} = malloc_unique(bcx, content_ty);\n+\n+    let src_box = v;\n+    let src_body = opaque_box_body(bcx, content_ty, src_box);\n+    let src_body = load_if_immediate(bcx, src_body, content_ty);\n+    #debug(\"ST: %?\", val_str(bcx.ccx().tn, src_body));\n+    #debug(\"DT: %?\", val_str(bcx.ccx().tn, dst_body));\n+    let bcx = copy_val(bcx, INIT, dst_body, src_body, content_ty);\n+\n+    let src_tydesc_ptr = GEPi(bcx, src_box,\n+                              [0u, back::abi::box_field_tydesc]);\n+    let dst_tydesc_ptr = GEPi(bcx, dst_box,\n+                              [0u, back::abi::box_field_tydesc]);\n+\n+    let td = Load(bcx, src_tydesc_ptr);\n+    Store(bcx, td, dst_tydesc_ptr);\n \n-    let src = load_if_immediate(bcx, v, content_ty);\n-    let dst = llptr;\n-    let bcx = copy_val(bcx, INIT, dst, src, content_ty);\n-    ret rslt(bcx, dst);\n+    ret rslt(bcx, dst_box);\n }\n\\ No newline at end of file"}]}