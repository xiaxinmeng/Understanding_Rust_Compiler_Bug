{"sha": "24fc50fffacef28d580a67b3c881f62d4752a860", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ZmM1MGZmZmFjZWYyOGQ1ODBhNjdiM2M4ODFmNjJkNDc1MmE4NjA=", "commit": {"author": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2017-09-19T21:31:00Z"}, "committer": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2017-09-30T02:34:46Z"}, "message": "make it not to be a method", "tree": {"sha": "1dc3edbe3aa189963dfd912272481a9896604b57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1dc3edbe3aa189963dfd912272481a9896604b57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24fc50fffacef28d580a67b3c881f62d4752a860", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24fc50fffacef28d580a67b3c881f62d4752a860", "html_url": "https://github.com/rust-lang/rust/commit/24fc50fffacef28d580a67b3c881f62d4752a860", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24fc50fffacef28d580a67b3c881f62d4752a860/comments", "author": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5eb302fba812b2c4105192c88d92cbdb8db7cd6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5eb302fba812b2c4105192c88d92cbdb8db7cd6f", "html_url": "https://github.com/rust-lang/rust/commit/5eb302fba812b2c4105192c88d92cbdb8db7cd6f"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "fee4b292359a642a1bcddefcfa5133c87e18cfcd", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/24fc50fffacef28d580a67b3c881f62d4752a860/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24fc50fffacef28d580a67b3c881f62d4752a860/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=24fc50fffacef28d580a67b3c881f62d4752a860", "patch": "@@ -118,16 +118,15 @@ impl<'a, 'b, 'tcx> Instance<'tcx> {\n \n     /// The point where linking happens. Resolve a (def_id, substs)\n     /// pair to an instance.\n-    pub fn resolve(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Option<Instance<'tcx>> {\n-        let def_id = self.def_id();\n-        debug!(\"resolve(def_id={:?}, substs={:?})\", def_id, self.substs);\n+    pub fn resolve(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId, substs: &'tcx Substs<'tcx>) -> Option<Instance<'tcx>> {\n+        debug!(\"resolve(def_id={:?}, substs={:?})\", def_id, substs);\n         let result = if let Some(trait_def_id) = tcx.trait_of_item(def_id) {\n             debug!(\" => associated item, attempting to find impl\");\n             let item = tcx.associated_item(def_id);\n-            resolve_associated_item(tcx, &item, trait_def_id, self.substs)\n+            resolve_associated_item(tcx, &item, trait_def_id, substs)\n         } else {\n             let ty = tcx.type_of(def_id);\n-            let item_type = tcx.trans_apply_param_substs(self.substs, &ty);\n+            let item_type = tcx.trans_apply_param_substs(substs, &ty);\n \n             let def = match item_type.sty {\n                 ty::TyFnDef(..) if {\n@@ -141,7 +140,7 @@ impl<'a, 'b, 'tcx> Instance<'tcx> {\n                 }\n                 _ => {\n                     if Some(def_id) == tcx.lang_items().drop_in_place_fn() {\n-                        let ty = self.substs.type_at(0);\n+                        let ty = substs.type_at(0);\n                         if ty.needs_drop(tcx, ty::ParamEnv::empty(traits::Reveal::All)) {\n                             debug!(\" => nontrivial drop glue\");\n                             ty::InstanceDef::DropGlue(def_id, Some(ty))\n@@ -157,10 +156,10 @@ impl<'a, 'b, 'tcx> Instance<'tcx> {\n             };\n             Some(Instance { \n                 def: def,\n-                substs: self.substs \n+                substs: substs\n             })\n         };\n-        debug!(\"resolve(def_id={:?}, substs={:?}) = {:?}\", def_id, self.substs, result);\n+        debug!(\"resolve(def_id={:?}, substs={:?}) = {:?}\", def_id, substs, result);\n         result\n     }\n "}, {"sha": "426dce4da1a94bbf2d4fc3a173e93b2156eaf447", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24fc50fffacef28d580a67b3c881f62d4752a860/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24fc50fffacef28d580a67b3c881f62d4752a860/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=24fc50fffacef28d580a67b3c881f62d4752a860", "patch": "@@ -88,7 +88,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n                 if let TerminatorKind::Call {\n                     func: Operand::Constant(ref f), .. } = terminator.kind {\n                         if let ty::TyFnDef(callee_def_id, substs) = f.ty.sty {\n-                            if let Some(instance) = Instance::new(callee_def_id, substs).resolve(self.tcx) {\n+                            if let Some(instance) = Instance::resolve(self.tcx, callee_def_id, substs) {\n                                 callsites.push_back(CallSite {\n                                     callee: instance.def_id(),\n                                     substs: instance.substs,"}]}