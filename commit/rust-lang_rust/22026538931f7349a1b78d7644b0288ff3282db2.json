{"sha": "22026538931f7349a1b78d7644b0288ff3282db2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMDI2NTM4OTMxZjczNDlhMWI3OGQ3NjQ0YjAyODhmZjMyODJkYjI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-21T07:26:11Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-21T07:46:51Z"}, "message": "Miri engine validity check: simplify code with 'matches!'\n\nand improve a comment a bit", "tree": {"sha": "6a2f1bd54abfafce651492baabfe40c24f045950", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a2f1bd54abfafce651492baabfe40c24f045950"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22026538931f7349a1b78d7644b0288ff3282db2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22026538931f7349a1b78d7644b0288ff3282db2", "html_url": "https://github.com/rust-lang/rust/commit/22026538931f7349a1b78d7644b0288ff3282db2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22026538931f7349a1b78d7644b0288ff3282db2/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f965120ad3dbe7d4d6b90a16cc7028eb6363b983", "url": "https://api.github.com/repos/rust-lang/rust/commits/f965120ad3dbe7d4d6b90a16cc7028eb6363b983", "html_url": "https://github.com/rust-lang/rust/commit/f965120ad3dbe7d4d6b90a16cc7028eb6363b983"}], "stats": {"total": 20, "additions": 8, "deletions": 12}, "files": [{"sha": "c38f25564e8dd3707f3c043fe0388fde4432fc87", "filename": "compiler/rustc_mir/src/interpret/validity.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/22026538931f7349a1b78d7644b0288ff3282db2/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22026538931f7349a1b78d7644b0288ff3282db2/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs?ref=22026538931f7349a1b78d7644b0288ff3282db2", "patch": "@@ -775,17 +775,13 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                 );\n             }\n             ty::Array(tys, ..) | ty::Slice(tys)\n-                if {\n-                    // This optimization applies for types that can hold arbitrary bytes (such as\n-                    // integer and floating point types) or for structs or tuples with no fields.\n-                    // FIXME(wesleywiser) This logic could be extended further to arbitrary structs\n-                    // or tuples made up of integer/floating point types or inhabited ZSTs with no\n-                    // padding.\n-                    match tys.kind() {\n-                        ty::Int(..) | ty::Uint(..) | ty::Float(..) => true,\n-                        _ => false,\n-                    }\n-                } =>\n+                // This optimization applies for types that can hold arbitrary bytes (such as\n+                // integer and floating point types) or for structs or tuples with no fields.\n+                // FIXME(wesleywiser) This logic could be extended further to arbitrary structs\n+                // or tuples made up of integer/floating point types or inhabited ZSTs with no\n+                // padding.\n+                if matches!(tys.kind(), ty::Int(..) | ty::Uint(..) | ty::Float(..))\n+                =>\n             {\n                 // Optimized handling for arrays of integer/float type.\n \n@@ -853,7 +849,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n             // of an array and not all of them, because there's only a single value of a specific\n             // ZST type, so either validation fails for all elements or none.\n             ty::Array(tys, ..) | ty::Slice(tys) if self.ecx.layout_of(tys)?.is_zst() => {\n-                // Validate just the first element\n+                // Validate just the first element (if any).\n                 self.walk_aggregate(op, fields.take(1))?\n             }\n             _ => {"}]}