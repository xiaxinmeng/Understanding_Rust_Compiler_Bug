{"sha": "b28ca32db22d5e2ed34db556c6fd50a5fc2d679c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyOGNhMzJkYjIyZDVlMmVkMzRkYjU1NmM2ZmQ1MGE1ZmMyZDY3OWM=", "commit": {"author": {"name": "Alan Du", "email": "alanhdu@gmail.com", "date": "2019-06-03T14:27:51Z"}, "committer": {"name": "Alan Du", "email": "alanhdu@gmail.com", "date": "2019-06-04T22:05:07Z"}, "message": "Fix clippy::or_fun_call", "tree": {"sha": "7e86e3f6ffdbc972b2ac968503f2b3671fd9b3a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e86e3f6ffdbc972b2ac968503f2b3671fd9b3a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b28ca32db22d5e2ed34db556c6fd50a5fc2d679c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b28ca32db22d5e2ed34db556c6fd50a5fc2d679c", "html_url": "https://github.com/rust-lang/rust/commit/b28ca32db22d5e2ed34db556c6fd50a5fc2d679c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b28ca32db22d5e2ed34db556c6fd50a5fc2d679c/comments", "author": {"login": "alanhdu", "id": 1914111, "node_id": "MDQ6VXNlcjE5MTQxMTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1914111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alanhdu", "html_url": "https://github.com/alanhdu", "followers_url": "https://api.github.com/users/alanhdu/followers", "following_url": "https://api.github.com/users/alanhdu/following{/other_user}", "gists_url": "https://api.github.com/users/alanhdu/gists{/gist_id}", "starred_url": "https://api.github.com/users/alanhdu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alanhdu/subscriptions", "organizations_url": "https://api.github.com/users/alanhdu/orgs", "repos_url": "https://api.github.com/users/alanhdu/repos", "events_url": "https://api.github.com/users/alanhdu/events{/privacy}", "received_events_url": "https://api.github.com/users/alanhdu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alanhdu", "id": 1914111, "node_id": "MDQ6VXNlcjE5MTQxMTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1914111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alanhdu", "html_url": "https://github.com/alanhdu", "followers_url": "https://api.github.com/users/alanhdu/followers", "following_url": "https://api.github.com/users/alanhdu/following{/other_user}", "gists_url": "https://api.github.com/users/alanhdu/gists{/gist_id}", "starred_url": "https://api.github.com/users/alanhdu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alanhdu/subscriptions", "organizations_url": "https://api.github.com/users/alanhdu/orgs", "repos_url": "https://api.github.com/users/alanhdu/repos", "events_url": "https://api.github.com/users/alanhdu/events{/privacy}", "received_events_url": "https://api.github.com/users/alanhdu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40424d4222d4630bc53294d10f1718f2d3d300de", "url": "https://api.github.com/repos/rust-lang/rust/commits/40424d4222d4630bc53294d10f1718f2d3d300de", "html_url": "https://github.com/rust-lang/rust/commit/40424d4222d4630bc53294d10f1718f2d3d300de"}], "stats": {"total": 55, "additions": 29, "deletions": 26}, "files": [{"sha": "9617beb5c555f3799c44786f4b83dc40b052e4dc", "filename": "crates/ra_assists/src/auto_import.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b28ca32db22d5e2ed34db556c6fd50a5fc2d679c/crates%2Fra_assists%2Fsrc%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28ca32db22d5e2ed34db556c6fd50a5fc2d679c/crates%2Fra_assists%2Fsrc%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fauto_import.rs?ref=b28ca32db22d5e2ed34db556c6fd50a5fc2d679c", "patch": "@@ -334,7 +334,7 @@ fn best_action_for_target<'b, 'a: 'b>(\n         .filter_map(ast::UseItem::use_tree)\n         .map(|u| walk_use_tree_for_best_action(&mut storage, None, u, target))\n         .fold(None, |best, a| {\n-            best.and_then(|best| Some(*ImportAction::better(&best, &a))).or(Some(a))\n+            best.and_then(|best| Some(*ImportAction::better(&best, &a))).or_else(|| Some(a))\n         });\n \n     match best_action {\n@@ -347,7 +347,7 @@ fn best_action_for_target<'b, 'a: 'b>(\n             let anchor = container\n                 .children()\n                 .find(|n| n.range().start() < anchor.range().start())\n-                .or(Some(anchor));\n+                .or_else(|| Some(anchor));\n \n             return ImportAction::add_new_use(anchor, false);\n         }"}, {"sha": "4eb24d27f7c48251c3c234da22cefcb722797150", "filename": "crates/ra_assists/src/change_visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b28ca32db22d5e2ed34db556c6fd50a5fc2d679c/crates%2Fra_assists%2Fsrc%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28ca32db22d5e2ed34db556c6fd50a5fc2d679c/crates%2Fra_assists%2Fsrc%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fchange_visibility.rs?ref=b28ca32db22d5e2ed34db556c6fd50a5fc2d679c", "patch": "@@ -59,7 +59,7 @@ fn vis_offset(node: &SyntaxNode) -> TextUnit {\n         })\n         .next()\n         .map(|it| it.range().start())\n-        .unwrap_or(node.range().start())\n+        .unwrap_or_else(|| node.range().start())\n }\n \n fn change_vis(mut ctx: AssistCtx<impl HirDatabase>, vis: &ast::Visibility) -> Option<Assist> {"}, {"sha": "684fbc0685fce3264ea3e399525a230286de69bb", "filename": "crates/ra_hir/src/lang_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b28ca32db22d5e2ed34db556c6fd50a5fc2d679c/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28ca32db22d5e2ed34db556c6fd50a5fc2d679c/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flang_item.rs?ref=b28ca32db22d5e2ed34db556c6fd50a5fc2d679c", "patch": "@@ -95,7 +95,7 @@ impl LangItems {\n                 .nth(0);\n             if let Some(lang_item_name) = lang_item_name {\n                 let imp = ImplBlock::from_id(*module, impl_id);\n-                self.items.entry(lang_item_name).or_insert(LangItemTarget::ImplBlock(imp));\n+                self.items.entry(lang_item_name).or_insert_with(|| LangItemTarget::ImplBlock(imp));\n             }\n         }\n "}, {"sha": "7bddee9b9d6827bf95fcb7345970b60a57cd862c", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b28ca32db22d5e2ed34db556c6fd50a5fc2d679c/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28ca32db22d5e2ed34db556c6fd50a5fc2d679c/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=b28ca32db22d5e2ed34db556c6fd50a5fc2d679c", "patch": "@@ -332,7 +332,8 @@ impl CrateDefMap {\n         let name = path.expand_macro_expr()?;\n         // search local first\n         // FIXME: Remove public_macros check when we have a correct local_macors implementation\n-        let local = self.public_macros.get(&name).or(self.local_macros.get(&name)).map(|it| *it);\n+        let local =\n+            self.public_macros.get(&name).or_else(|| self.local_macros.get(&name)).map(|it| *it);\n         if local.is_some() {\n             return local;\n         }\n@@ -479,8 +480,10 @@ impl CrateDefMap {\n     }\n \n     fn resolve_name_in_crate_root_or_extern_prelude(&self, name: &Name) -> ItemOrMacro {\n-        let from_crate_root =\n-            self[self.root].scope.get_item_or_macro(name).unwrap_or(Either::Left(PerNs::none()));\n+        let from_crate_root = self[self.root]\n+            .scope\n+            .get_item_or_macro(name)\n+            .unwrap_or_else(|| Either::Left(PerNs::none()));\n         let from_extern_prelude = self.resolve_name_in_extern_prelude(name);\n \n         or(from_crate_root, Either::Left(from_extern_prelude))\n@@ -505,8 +508,10 @@ impl CrateDefMap {\n         //  - current module / scope\n         //  - extern prelude\n         //  - std prelude\n-        let from_scope =\n-            self[module].scope.get_item_or_macro(name).unwrap_or(Either::Left(PerNs::none()));;\n+        let from_scope = self[module]\n+            .scope\n+            .get_item_or_macro(name)\n+            .unwrap_or_else(|| Either::Left(PerNs::none()));;\n         let from_extern_prelude =\n             self.extern_prelude.get(name).map_or(PerNs::none(), |&it| PerNs::types(it));\n         let from_prelude = self.resolve_in_prelude(db, name);\n@@ -525,7 +530,7 @@ impl CrateDefMap {\n             } else {\n                 db.crate_def_map(prelude.krate)[prelude.module_id].scope.get_item_or_macro(name)\n             };\n-            resolution.unwrap_or(Either::Left(PerNs::none()))\n+            resolution.unwrap_or_else(|| Either::Left(PerNs::none()))\n         } else {\n             Either::Left(PerNs::none())\n         }"}, {"sha": "4a37e02684d434aa2dfa5e0d1761a41b3ea938d4", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b28ca32db22d5e2ed34db556c6fd50a5fc2d679c/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28ca32db22d5e2ed34db556c6fd50a5fc2d679c/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=b28ca32db22d5e2ed34db556c6fd50a5fc2d679c", "patch": "@@ -451,7 +451,7 @@ impl Ty {\n     /// Substitutes `Ty::Bound` vars (as opposed to type parameters).\n     pub fn subst_bound_vars(self, substs: &Substs) -> Ty {\n         self.fold(&mut |ty| match ty {\n-            Ty::Bound(idx) => substs.get(idx as usize).cloned().unwrap_or(Ty::Bound(idx)),\n+            Ty::Bound(idx) => substs.get(idx as usize).cloned().unwrap_or_else(|| Ty::Bound(idx)),\n             ty => ty,\n         })\n     }"}, {"sha": "905fe9f0e3dabaef96ddd73df43e3bc2b1fb425b", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b28ca32db22d5e2ed34db556c6fd50a5fc2d679c/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28ca32db22d5e2ed34db556c6fd50a5fc2d679c/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=b28ca32db22d5e2ed34db556c6fd50a5fc2d679c", "patch": "@@ -462,7 +462,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         let mut resolved =\n             if remaining_index.is_none() { def.take_values()? } else { def.take_types()? };\n \n-        let remaining_index = remaining_index.unwrap_or(path.segments.len());\n+        let remaining_index = remaining_index.unwrap_or_else(|| path.segments.len());\n         let mut actual_def_ty: Option<Ty> = None;\n \n         let krate = resolver.krate()?;"}, {"sha": "6655a05a7c80b69f86a376248fafff71f0b73414", "filename": "crates/ra_ide_api/src/completion/complete_pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b28ca32db22d5e2ed34db556c6fd50a5fc2d679c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28ca32db22d5e2ed34db556c6fd50a5fc2d679c/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_pattern.rs?ref=b28ca32db22d5e2ed34db556c6fd50a5fc2d679c", "patch": "@@ -10,7 +10,7 @@ pub(super) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n     let names = ctx.analyzer.all_names(ctx.db);\n     for (name, res) in names.into_iter() {\n         let r = res.as_ref();\n-        let def = match r.take_types().or(r.take_values()) {\n+        let def = match r.take_types().or_else(|| r.take_values()) {\n             Some(hir::Resolution::Def(def)) => def,\n             _ => continue,\n         };"}, {"sha": "a713b762cf5183b8e454990a411193086212348e", "filename": "crates/ra_ide_api/src/extend_selection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b28ca32db22d5e2ed34db556c6fd50a5fc2d679c/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28ca32db22d5e2ed34db556c6fd50a5fc2d679c/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs?ref=b28ca32db22d5e2ed34db556c6fd50a5fc2d679c", "patch": "@@ -95,7 +95,7 @@ fn extend_single_word_in_comment_or_string(\n     }\n \n     let start_idx = before.rfind(non_word_char)? as u32;\n-    let end_idx = after.find(non_word_char).unwrap_or(after.len()) as u32;\n+    let end_idx = after.find(non_word_char).unwrap_or_else(|| after.len()) as u32;\n \n     let from: TextUnit = (start_idx + 1).into();\n     let to: TextUnit = (cursor_position + end_idx).into();"}, {"sha": "a0df32dde618cdbb5221f254961790dd56df3d8d", "filename": "crates/ra_lsp_server/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b28ca32db22d5e2ed34db556c6fd50a5fc2d679c/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28ca32db22d5e2ed34db556c6fd50a5fc2d679c/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs?ref=b28ca32db22d5e2ed34db556c6fd50a5fc2d679c", "patch": "@@ -49,7 +49,7 @@ fn main_inner() -> Result<()> {\n         let opts = params\n             .initialization_options\n             .and_then(|v| InitializationOptions::deserialize(v).ok())\n-            .unwrap_or(InitializationOptions::default());\n+            .unwrap_or_default();\n \n         ra_lsp_server::main_loop(workspace_roots, opts, r, s)\n     })?;"}, {"sha": "55a6ecf587ca2ab542ec32d9db8f71db6b7233ca", "filename": "crates/ra_mbe/src/mbe_expander.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b28ca32db22d5e2ed34db556c6fd50a5fc2d679c/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28ca32db22d5e2ed34db556c6fd50a5fc2d679c/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs?ref=b28ca32db22d5e2ed34db556c6fd50a5fc2d679c", "patch": "@@ -105,17 +105,15 @@ impl Bindings {\n     }\n \n     fn get(&self, name: &SmolStr, nesting: &[usize]) -> Result<&tt::TokenTree, ExpandError> {\n-        let mut b = self\n-            .inner\n-            .get(name)\n-            .ok_or(ExpandError::BindingError(format!(\"could not find binding `{}`\", name)))?;\n+        let mut b = self.inner.get(name).ok_or_else(|| {\n+            ExpandError::BindingError(format!(\"could not find binding `{}`\", name))\n+        })?;\n         for &idx in nesting.iter() {\n             b = match b {\n                 Binding::Simple(_) => break,\n-                Binding::Nested(bs) => bs.get(idx).ok_or(ExpandError::BindingError(format!(\n-                    \"could not find nested binding `{}`\",\n-                    name\n-                )))?,\n+                Binding::Nested(bs) => bs.get(idx).ok_or_else(|| {\n+                    ExpandError::BindingError(format!(\"could not find nested binding `{}`\", name))\n+                })?,\n                 Binding::Empty => {\n                     return Err(ExpandError::BindingError(format!(\n                         \"could not find empty binding `{}`\","}, {"sha": "dca16b5376e8dc9ab629d50b05a276ea76a4379c", "filename": "crates/ra_mbe/src/mbe_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b28ca32db22d5e2ed34db556c6fd50a5fc2d679c/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28ca32db22d5e2ed34db556c6fd50a5fc2d679c/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs?ref=b28ca32db22d5e2ed34db556c6fd50a5fc2d679c", "patch": "@@ -125,8 +125,8 @@ fn parse_repeat(p: &mut TtCursor, transcriber: bool) -> Result<crate::Repeat, Pa\n         }\n     }\n \n-    let sep = p.eat_seperator().ok_or(ParseError::Expected(String::from(\"separator\")))?;\n-    let rep = p.eat_punct().ok_or(ParseError::Expected(String::from(\"repeat\")))?;\n+    let sep = p.eat_seperator().ok_or_else(|| ParseError::Expected(String::from(\"separator\")))?;\n+    let rep = p.eat_punct().ok_or_else(|| ParseError::Expected(String::from(\"repeat\")))?;\n \n     mk_repeat(rep.char, subtree, Some(sep))\n }"}, {"sha": "91dbcfae87f829f9eed6ab0bcc54fe709b864ff4", "filename": "crates/ra_syntax/src/validation/unescape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b28ca32db22d5e2ed34db556c6fd50a5fc2d679c/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Funescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b28ca32db22d5e2ed34db556c6fd50a5fc2d679c/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Funescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Funescape.rs?ref=b28ca32db22d5e2ed34db556c6fd50a5fc2d679c", "patch": "@@ -255,7 +255,7 @@ where\n         let first_non_space = str\n             .bytes()\n             .position(|b| b != b' ' && b != b'\\t' && b != b'\\n' && b != b'\\r')\n-            .unwrap_or(str.len());\n+            .unwrap_or_else(|| str.len());\n         *chars = str[first_non_space..].chars()\n     }\n }"}]}