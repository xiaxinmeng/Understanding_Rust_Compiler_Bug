{"sha": "48662d7cba402af59625906d0a20397a2af96233", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NjYyZDdjYmE0MDJhZjU5NjI1OTA2ZDBhMjAzOTdhMmFmOTYyMzM=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-01-30T07:43:11Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-02-16T15:13:47Z"}, "message": "rustc_trans: correctly round up the largest variant to the enum's alignment.", "tree": {"sha": "5c1d16f143cf9f36914a717365eb4910e9d86910", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c1d16f143cf9f36914a717365eb4910e9d86910"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48662d7cba402af59625906d0a20397a2af96233", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48662d7cba402af59625906d0a20397a2af96233", "html_url": "https://github.com/rust-lang/rust/commit/48662d7cba402af59625906d0a20397a2af96233", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48662d7cba402af59625906d0a20397a2af96233/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4473a4664ca39d110c17682d2e9873a5ed59012", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4473a4664ca39d110c17682d2e9873a5ed59012", "html_url": "https://github.com/rust-lang/rust/commit/f4473a4664ca39d110c17682d2e9873a5ed59012"}], "stats": {"total": 48, "additions": 36, "deletions": 12}, "files": [{"sha": "ddd720f1e84a8600313b9856dd04a8398c5b7660", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/48662d7cba402af59625906d0a20397a2af96233/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48662d7cba402af59625906d0a20397a2af96233/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=48662d7cba402af59625906d0a20397a2af96233", "patch": "@@ -323,7 +323,7 @@ fn represent_type_uncached<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 mk_struct(cx, &ftys[], false, t)\n             }).collect();\n \n-            ensure_enum_fits_in_address_space(cx, ity, &fields[], t);\n+            ensure_enum_fits_in_address_space(cx, &fields[], t);\n \n             General(ity, fields, dtor)\n         }\n@@ -582,20 +582,14 @@ fn ensure_struct_fits_in_address_space<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n fn union_size_and_align(sts: &[Struct]) -> (machine::llsize, machine::llalign) {\n     let size = sts.iter().map(|st| st.size).max().unwrap();\n-    let most_aligned = sts.iter().max_by(|st| st.align).unwrap();\n-    (size, most_aligned.align)\n+    let align = sts.iter().map(|st| st.align).max().unwrap();\n+    (roundup(size, align), align)\n }\n \n fn ensure_enum_fits_in_address_space<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n-                                               discr: IntType,\n                                                fields: &[Struct],\n                                                scapegoat: Ty<'tcx>) {\n-    let discr_size = machine::llsize_of_alloc(ccx, ll_inttype(ccx, discr));\n-    let (field_size, field_align) = union_size_and_align(fields);\n-\n-    // field_align < 1<<32, discr_size <= 8, field_size < OBJ_SIZE_BOUND <= 1<<61\n-    // so the sum is less than 1<<62 (and can't overflow).\n-    let total_size = roundup(discr_size, field_align) + field_size;\n+    let (total_size, _) = union_size_and_align(fields);\n \n     if total_size >= ccx.obj_size_bound() {\n         ccx.report_overbig_object(scapegoat);\n@@ -667,9 +661,11 @@ fn generic_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             // FIXME #10604: this breaks when vector types are present.\n             let (size, align) = union_size_and_align(&sts[]);\n             let align_s = align as u64;\n+            assert_eq!(size % align_s, 0);\n+            let align_units = size / align_s - 1;\n+\n             let discr_ty = ll_inttype(cx, ity);\n             let discr_size = machine::llsize_of_alloc(cx, discr_ty);\n-            let align_units = (size + align_s - 1) / align_s - 1;\n             let fill_ty = match align_s {\n                 1 => Type::array(&Type::i8(cx), align_units),\n                 2 => Type::array(&Type::i16(cx), align_units),\n@@ -1049,7 +1045,7 @@ pub fn trans_const<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, r: &Repr<'tcx>, discr\n         }\n         General(ity, ref cases, _) => {\n             let case = &cases[discr as uint];\n-            let max_sz = cases.iter().map(|x| x.size).max().unwrap();\n+            let (max_sz, _) = union_size_and_align(&cases[]);\n             let lldiscr = C_integral(ll_inttype(ccx, ity), discr as u64, true);\n             let mut f = vec![lldiscr];\n             f.push_all(vals);"}, {"sha": "5377d9a62b91a48be06ee049fcb8e89f74244de9", "filename": "src/test/run-pass/const-adt-align-mismatch.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/48662d7cba402af59625906d0a20397a2af96233/src%2Ftest%2Frun-pass%2Fconst-adt-align-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48662d7cba402af59625906d0a20397a2af96233/src%2Ftest%2Frun-pass%2Fconst-adt-align-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-adt-align-mismatch.rs?ref=48662d7cba402af59625906d0a20397a2af96233", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::mem;\n+\n+#[derive(PartialEq, Show)]\n+enum Foo {\n+    A(u32),\n+    Bar([u16; 4]),\n+    C\n+}\n+\n+// NOTE(eddyb) Don't make this a const, needs to be a static\n+// so it is always instantiated as a LLVM constant value.\n+static FOO: Foo = Foo::C;\n+\n+fn main() {\n+    assert_eq!(FOO, Foo::C);\n+    assert_eq!(mem::size_of::<Foo>(), 12);\n+    assert_eq!(mem::min_align_of::<Foo>(), 4);\n+}"}]}