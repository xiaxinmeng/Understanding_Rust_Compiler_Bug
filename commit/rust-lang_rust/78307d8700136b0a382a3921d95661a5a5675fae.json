{"sha": "78307d8700136b0a382a3921d95661a5a5675fae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MzA3ZDg3MDAxMzZiMGEzODJhMzkyMWQ5NTY2MWE1YTU2NzVmYWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-19T02:19:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-19T02:19:21Z"}, "message": "Auto merge of #77278 - camelid:use-correct-article, r=estebank\n\nUse correct article in help message for conversion or cast\n\nBefore it always used `an`; now it uses the correct article for the type.", "tree": {"sha": "7c5eb0e4f20187a4e664b5d2c38169c60d30ac04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c5eb0e4f20187a4e664b5d2c38169c60d30ac04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78307d8700136b0a382a3921d95661a5a5675fae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78307d8700136b0a382a3921d95661a5a5675fae", "html_url": "https://github.com/rust-lang/rust/commit/78307d8700136b0a382a3921d95661a5a5675fae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78307d8700136b0a382a3921d95661a5a5675fae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e42cbe8edc3b9b05510ca6bb77b719617db24f86", "url": "https://api.github.com/repos/rust-lang/rust/commits/e42cbe8edc3b9b05510ca6bb77b719617db24f86", "html_url": "https://github.com/rust-lang/rust/commit/e42cbe8edc3b9b05510ca6bb77b719617db24f86"}, {"sha": "3eab21e22d080562dbe85ef440309c03c07becba", "url": "https://api.github.com/repos/rust-lang/rust/commits/3eab21e22d080562dbe85ef440309c03c07becba", "html_url": "https://github.com/rust-lang/rust/commit/3eab21e22d080562dbe85ef440309c03c07becba"}], "stats": {"total": 626, "additions": 325, "deletions": 301}, "files": [{"sha": "0fd48d0928257990d4fffe2c655380de5ea2de28", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/78307d8700136b0a382a3921d95661a5a5675fae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78307d8700136b0a382a3921d95661a5a5675fae/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=78307d8700136b0a382a3921d95661a5a5675fae", "patch": "@@ -210,6 +210,18 @@ impl TyKind<'tcx> {\n             _ => false,\n         }\n     }\n+\n+    /// Get the article (\"a\" or \"an\") to use with this type.\n+    pub fn article(&self) -> &'static str {\n+        match self {\n+            Int(_) | Float(_) | Array(_, _) => \"an\",\n+            Adt(def, _) if def.is_enum() => \"an\",\n+            // This should never happen, but ICEing and causing the user's code\n+            // to not compile felt too harsh.\n+            Error(_) => \"a\",\n+            _ => \"a\",\n+        }\n+    }\n }\n \n // `TyKind` is used a lot. Make sure it doesn't unintentionally get bigger."}, {"sha": "b8143787a2ddf499d5064a557eebf9844ee1943c", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/78307d8700136b0a382a3921d95661a5a5675fae/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78307d8700136b0a382a3921d95661a5a5675fae/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=78307d8700136b0a382a3921d95661a5a5675fae", "patch": "@@ -751,8 +751,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n \n-        let msg = format!(\"you can convert an `{}` to `{}`\", checked_ty, expected_ty);\n-        let cast_msg = format!(\"you can cast an `{} to `{}`\", checked_ty, expected_ty);\n+        let msg = format!(\n+            \"you can convert {} `{}` to {} `{}`\",\n+            checked_ty.kind().article(),\n+            checked_ty,\n+            expected_ty.kind().article(),\n+            expected_ty,\n+        );\n+        let cast_msg = format!(\n+            \"you can cast {} `{}` to {} `{}`\",\n+            checked_ty.kind().article(),\n+            checked_ty,\n+            expected_ty.kind().article(),\n+            expected_ty,\n+        );\n         let lit_msg = format!(\n             \"change the type of the numeric literal from `{}` to `{}`\",\n             checked_ty, expected_ty,\n@@ -814,7 +826,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let suggestion = format!(\"{}::from({})\", checked_ty, lhs_src);\n                     (lhs_expr.span, msg, suggestion)\n                 } else {\n-                    let msg = format!(\"{} and panic if the converted value wouldn't fit\", msg);\n+                    let msg = format!(\"{} and panic if the converted value doesn't fit\", msg);\n                     let suggestion =\n                         format!(\"{}{}.try_into().unwrap()\", prefix, with_opt_paren(&src));\n                     (expr.span, msg, suggestion)"}, {"sha": "0881258aca1ac47bbf123c687ba5957e791d683b", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=78307d8700136b0a382a3921d95661a5a5675fae", "patch": "@@ -47,7 +47,7 @@ LL |     let _: i32 = f2(2i32);\n    |            |\n    |            expected due to this\n    |\n-help: you can convert an `u32` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     let _: i32 = f2(2i32).try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "3152dec30a0e6cf4b613b5387f394bd591ccc515", "filename": "src/test/ui/indexing-requires-a-uint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr?ref=78307d8700136b0a382a3921d95661a5a5675fae", "patch": "@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n LL |     bar::<isize>(i);  // i should not be re-coerced back to an isize\n    |                  ^ expected `isize`, found `usize`\n    |\n-help: you can convert an `usize` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     bar::<isize>(i.try_into().unwrap());  // i should not be re-coerced back to an isize\n    |                  ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "bfb47515823a3c4a9caf61d3ffce1efe66d21888", "filename": "src/test/ui/integer-literal-suffix-inference.stderr", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr?ref=78307d8700136b0a382a3921d95661a5a5675fae", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     id_i8(a16);\n    |           ^^^ expected `i8`, found `i16`\n    |\n-help: you can convert an `i16` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     id_i8(a16.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -15,7 +15,7 @@ error[E0308]: mismatched types\n LL |     id_i8(a32);\n    |           ^^^ expected `i8`, found `i32`\n    |\n-help: you can convert an `i32` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     id_i8(a32.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ error[E0308]: mismatched types\n LL |     id_i8(a64);\n    |           ^^^ expected `i8`, found `i64`\n    |\n-help: you can convert an `i64` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     id_i8(a64.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -37,7 +37,7 @@ error[E0308]: mismatched types\n LL |     id_i8(asize);\n    |           ^^^^^ expected `i8`, found `isize`\n    |\n-help: you can convert an `isize` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     id_i8(asize.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -49,15 +49,15 @@ LL |     id_i16(a8);\n    |            ^^\n    |            |\n    |            expected `i16`, found `i8`\n-   |            help: you can convert an `i8` to `i16`: `a8.into()`\n+   |            help: you can convert an `i8` to an `i16`: `a8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:55:12\n    |\n LL |     id_i16(a32);\n    |            ^^^ expected `i16`, found `i32`\n    |\n-help: you can convert an `i32` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     id_i16(a32.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -68,7 +68,7 @@ error[E0308]: mismatched types\n LL |     id_i16(a64);\n    |            ^^^ expected `i16`, found `i64`\n    |\n-help: you can convert an `i64` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     id_i16(a64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -79,7 +79,7 @@ error[E0308]: mismatched types\n LL |     id_i16(asize);\n    |            ^^^^^ expected `i16`, found `isize`\n    |\n-help: you can convert an `isize` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     id_i16(asize.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -91,7 +91,7 @@ LL |     id_i32(a8);\n    |            ^^\n    |            |\n    |            expected `i32`, found `i8`\n-   |            help: you can convert an `i8` to `i32`: `a8.into()`\n+   |            help: you can convert an `i8` to an `i32`: `a8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:68:12\n@@ -100,15 +100,15 @@ LL |     id_i32(a16);\n    |            ^^^\n    |            |\n    |            expected `i32`, found `i16`\n-   |            help: you can convert an `i16` to `i32`: `a16.into()`\n+   |            help: you can convert an `i16` to an `i32`: `a16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:72:12\n    |\n LL |     id_i32(a64);\n    |            ^^^ expected `i32`, found `i64`\n    |\n-help: you can convert an `i64` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     id_i32(a64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -119,7 +119,7 @@ error[E0308]: mismatched types\n LL |     id_i32(asize);\n    |            ^^^^^ expected `i32`, found `isize`\n    |\n-help: you can convert an `isize` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     id_i32(asize.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -131,7 +131,7 @@ LL |     id_i64(a8);\n    |            ^^\n    |            |\n    |            expected `i64`, found `i8`\n-   |            help: you can convert an `i8` to `i64`: `a8.into()`\n+   |            help: you can convert an `i8` to an `i64`: `a8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:82:12\n@@ -140,7 +140,7 @@ LL |     id_i64(a16);\n    |            ^^^\n    |            |\n    |            expected `i64`, found `i16`\n-   |            help: you can convert an `i16` to `i64`: `a16.into()`\n+   |            help: you can convert an `i16` to an `i64`: `a16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:85:12\n@@ -149,15 +149,15 @@ LL |     id_i64(a32);\n    |            ^^^\n    |            |\n    |            expected `i64`, found `i32`\n-   |            help: you can convert an `i32` to `i64`: `a32.into()`\n+   |            help: you can convert an `i32` to an `i64`: `a32.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:89:12\n    |\n LL |     id_i64(asize);\n    |            ^^^^^ expected `i64`, found `isize`\n    |\n-help: you can convert an `isize` to `i64` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to an `i64` and panic if the converted value doesn't fit\n    |\n LL |     id_i64(asize.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -169,7 +169,7 @@ LL |     id_isize(a8);\n    |              ^^\n    |              |\n    |              expected `isize`, found `i8`\n-   |              help: you can convert an `i8` to `isize`: `a8.into()`\n+   |              help: you can convert an `i8` to an `isize`: `a8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:96:14\n@@ -178,15 +178,15 @@ LL |     id_isize(a16);\n    |              ^^^\n    |              |\n    |              expected `isize`, found `i16`\n-   |              help: you can convert an `i16` to `isize`: `a16.into()`\n+   |              help: you can convert an `i16` to an `isize`: `a16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:99:14\n    |\n LL |     id_isize(a32);\n    |              ^^^ expected `isize`, found `i32`\n    |\n-help: you can convert an `i32` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     id_isize(a32.try_into().unwrap());\n    |              ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -197,7 +197,7 @@ error[E0308]: mismatched types\n LL |     id_isize(a64);\n    |              ^^^ expected `isize`, found `i64`\n    |\n-help: you can convert an `i64` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     id_isize(a64.try_into().unwrap());\n    |              ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -208,7 +208,7 @@ error[E0308]: mismatched types\n LL |     id_i8(c16);\n    |           ^^^ expected `i8`, found `i16`\n    |\n-help: you can convert an `i16` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     id_i8(c16.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -219,7 +219,7 @@ error[E0308]: mismatched types\n LL |     id_i8(c32);\n    |           ^^^ expected `i8`, found `i32`\n    |\n-help: you can convert an `i32` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     id_i8(c32.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -230,7 +230,7 @@ error[E0308]: mismatched types\n LL |     id_i8(c64);\n    |           ^^^ expected `i8`, found `i64`\n    |\n-help: you can convert an `i64` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     id_i8(c64.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -242,15 +242,15 @@ LL |     id_i16(c8);\n    |            ^^\n    |            |\n    |            expected `i16`, found `i8`\n-   |            help: you can convert an `i8` to `i16`: `c8.into()`\n+   |            help: you can convert an `i8` to an `i16`: `c8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:122:12\n    |\n LL |     id_i16(c32);\n    |            ^^^ expected `i16`, found `i32`\n    |\n-help: you can convert an `i32` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     id_i16(c32.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -261,7 +261,7 @@ error[E0308]: mismatched types\n LL |     id_i16(c64);\n    |            ^^^ expected `i16`, found `i64`\n    |\n-help: you can convert an `i64` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     id_i16(c64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -273,7 +273,7 @@ LL |     id_i32(c8);\n    |            ^^\n    |            |\n    |            expected `i32`, found `i8`\n-   |            help: you can convert an `i8` to `i32`: `c8.into()`\n+   |            help: you can convert an `i8` to an `i32`: `c8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:132:12\n@@ -282,15 +282,15 @@ LL |     id_i32(c16);\n    |            ^^^\n    |            |\n    |            expected `i32`, found `i16`\n-   |            help: you can convert an `i16` to `i32`: `c16.into()`\n+   |            help: you can convert an `i16` to an `i32`: `c16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:136:12\n    |\n LL |     id_i32(c64);\n    |            ^^^ expected `i32`, found `i64`\n    |\n-help: you can convert an `i64` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     id_i32(c64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -302,7 +302,7 @@ LL |     id_i64(a8);\n    |            ^^\n    |            |\n    |            expected `i64`, found `i8`\n-   |            help: you can convert an `i8` to `i64`: `a8.into()`\n+   |            help: you can convert an `i8` to an `i64`: `a8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:143:12\n@@ -311,7 +311,7 @@ LL |     id_i64(a16);\n    |            ^^^\n    |            |\n    |            expected `i64`, found `i16`\n-   |            help: you can convert an `i16` to `i64`: `a16.into()`\n+   |            help: you can convert an `i16` to an `i64`: `a16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:146:12\n@@ -320,15 +320,15 @@ LL |     id_i64(a32);\n    |            ^^^\n    |            |\n    |            expected `i64`, found `i32`\n-   |            help: you can convert an `i32` to `i64`: `a32.into()`\n+   |            help: you can convert an `i32` to an `i64`: `a32.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:152:11\n    |\n LL |     id_u8(b16);\n    |           ^^^ expected `u8`, found `u16`\n    |\n-help: you can convert an `u16` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert a `u16` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     id_u8(b16.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -339,7 +339,7 @@ error[E0308]: mismatched types\n LL |     id_u8(b32);\n    |           ^^^ expected `u8`, found `u32`\n    |\n-help: you can convert an `u32` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     id_u8(b32.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -350,7 +350,7 @@ error[E0308]: mismatched types\n LL |     id_u8(b64);\n    |           ^^^ expected `u8`, found `u64`\n    |\n-help: you can convert an `u64` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     id_u8(b64.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -361,7 +361,7 @@ error[E0308]: mismatched types\n LL |     id_u8(bsize);\n    |           ^^^^^ expected `u8`, found `usize`\n    |\n-help: you can convert an `usize` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     id_u8(bsize.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -373,15 +373,15 @@ LL |     id_u16(b8);\n    |            ^^\n    |            |\n    |            expected `u16`, found `u8`\n-   |            help: you can convert an `u8` to `u16`: `b8.into()`\n+   |            help: you can convert a `u8` to a `u16`: `b8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:169:12\n    |\n LL |     id_u16(b32);\n    |            ^^^ expected `u16`, found `u32`\n    |\n-help: you can convert an `u32` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     id_u16(b32.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -392,7 +392,7 @@ error[E0308]: mismatched types\n LL |     id_u16(b64);\n    |            ^^^ expected `u16`, found `u64`\n    |\n-help: you can convert an `u64` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     id_u16(b64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -403,7 +403,7 @@ error[E0308]: mismatched types\n LL |     id_u16(bsize);\n    |            ^^^^^ expected `u16`, found `usize`\n    |\n-help: you can convert an `usize` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     id_u16(bsize.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -415,7 +415,7 @@ LL |     id_u32(b8);\n    |            ^^\n    |            |\n    |            expected `u32`, found `u8`\n-   |            help: you can convert an `u8` to `u32`: `b8.into()`\n+   |            help: you can convert a `u8` to a `u32`: `b8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:182:12\n@@ -424,15 +424,15 @@ LL |     id_u32(b16);\n    |            ^^^\n    |            |\n    |            expected `u32`, found `u16`\n-   |            help: you can convert an `u16` to `u32`: `b16.into()`\n+   |            help: you can convert a `u16` to a `u32`: `b16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:186:12\n    |\n LL |     id_u32(b64);\n    |            ^^^ expected `u32`, found `u64`\n    |\n-help: you can convert an `u64` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     id_u32(b64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -443,7 +443,7 @@ error[E0308]: mismatched types\n LL |     id_u32(bsize);\n    |            ^^^^^ expected `u32`, found `usize`\n    |\n-help: you can convert an `usize` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     id_u32(bsize.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -455,7 +455,7 @@ LL |     id_u64(b8);\n    |            ^^\n    |            |\n    |            expected `u64`, found `u8`\n-   |            help: you can convert an `u8` to `u64`: `b8.into()`\n+   |            help: you can convert a `u8` to a `u64`: `b8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:196:12\n@@ -464,7 +464,7 @@ LL |     id_u64(b16);\n    |            ^^^\n    |            |\n    |            expected `u64`, found `u16`\n-   |            help: you can convert an `u16` to `u64`: `b16.into()`\n+   |            help: you can convert a `u16` to a `u64`: `b16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:199:12\n@@ -473,15 +473,15 @@ LL |     id_u64(b32);\n    |            ^^^\n    |            |\n    |            expected `u64`, found `u32`\n-   |            help: you can convert an `u32` to `u64`: `b32.into()`\n+   |            help: you can convert a `u32` to a `u64`: `b32.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:203:12\n    |\n LL |     id_u64(bsize);\n    |            ^^^^^ expected `u64`, found `usize`\n    |\n-help: you can convert an `usize` to `u64` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |     id_u64(bsize.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -493,7 +493,7 @@ LL |     id_usize(b8);\n    |              ^^\n    |              |\n    |              expected `usize`, found `u8`\n-   |              help: you can convert an `u8` to `usize`: `b8.into()`\n+   |              help: you can convert a `u8` to a `usize`: `b8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:210:14\n@@ -502,15 +502,15 @@ LL |     id_usize(b16);\n    |              ^^^\n    |              |\n    |              expected `usize`, found `u16`\n-   |              help: you can convert an `u16` to `usize`: `b16.into()`\n+   |              help: you can convert a `u16` to a `usize`: `b16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/integer-literal-suffix-inference.rs:213:14\n    |\n LL |     id_usize(b32);\n    |              ^^^ expected `usize`, found `u32`\n    |\n-help: you can convert an `u32` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     id_usize(b32.try_into().unwrap());\n    |              ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -521,7 +521,7 @@ error[E0308]: mismatched types\n LL |     id_usize(b64);\n    |              ^^^ expected `usize`, found `u64`\n    |\n-help: you can convert an `u64` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     id_usize(b64.try_into().unwrap());\n    |              ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "115b471e96b465fd6681dfbdd4f6b7a0b414b75b", "filename": "src/test/ui/issues/issue-13359.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr?ref=78307d8700136b0a382a3921d95661a5a5675fae", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     foo(1*(1 as isize));\n    |         ^^^^^^^^^^^^^^ expected `i16`, found `isize`\n    |\n-help: you can convert an `isize` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo((1*(1 as isize)).try_into().unwrap());\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -15,7 +15,7 @@ error[E0308]: mismatched types\n LL |     bar(1*(1 as usize));\n    |         ^^^^^^^^^^^^^^ expected `u32`, found `usize`\n    |\n-help: you can convert an `usize` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     bar((1*(1 as usize)).try_into().unwrap());\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "82660a7c416930dba56bd3b3c767adafb96200ed", "filename": "src/test/ui/methods/method-ambig-one-trait-unknown-int-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr?ref=78307d8700136b0a382a3921d95661a5a5675fae", "patch": "@@ -14,7 +14,7 @@ LL |     let y: usize = x.foo();\n    |            |\n    |            expected due to this\n    |\n-help: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     let y: usize = x.foo().try_into().unwrap();\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e608cd99af238a21835ea8fa2c897bcb929bad80", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=78307d8700136b0a382a3921d95661a5a5675fae", "patch": "@@ -8,7 +8,7 @@ LL |     write!(hello);\n    |     -------------- in this macro invocation\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: you can convert an `usize` to `u64` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |                   ($arr.len() * size_of($arr[0])).try_into().unwrap());\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "5a275d5d089b14ef2299f13de3649f0bd8fa0f8b", "filename": "src/test/ui/numeric/const-scope.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.stderr?ref=78307d8700136b0a382a3921d95661a5a5675fae", "patch": "@@ -57,7 +57,7 @@ LL |     let d: i8 = c;\n    |            |\n    |            expected due to this\n    |\n-help: you can convert an `i32` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     let d: i8 = c.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "79b38b069863187fbb5c14f496d39ff621cb57a1", "filename": "src/test/ui/numeric/len.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Fnumeric%2Flen.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Fnumeric%2Flen.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Flen.stderr?ref=78307d8700136b0a382a3921d95661a5a5675fae", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     test(array.len());\n    |          ^^^^^^^^^^^ expected `u32`, found `usize`\n    |\n-help: you can convert an `usize` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     test(array.len().try_into().unwrap());\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "858990fe59bd50e4fff77632a3f177fc8dfbb7cb", "filename": "src/test/ui/numeric/numeric-cast-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr?ref=78307d8700136b0a382a3921d95661a5a5675fae", "patch": "@@ -6,7 +6,7 @@ LL |     let x: u16 = foo();\n    |            |\n    |            expected due to this\n    |\n-help: you can convert an `i32` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     let x: u16 = foo().try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -18,7 +18,7 @@ LL |     let y: i64 = x + x;\n    |            ---   ^^^^^\n    |            |     |\n    |            |     expected `i64`, found `u16`\n-   |            |     help: you can convert an `u16` to `i64`: `(x + x).into()`\n+   |            |     help: you can convert a `u16` to an `i64`: `(x + x).into()`\n    |            expected due to this\n \n error[E0308]: mismatched types\n@@ -28,7 +28,7 @@ LL |     let z: i32 = x + x;\n    |            ---   ^^^^^\n    |            |     |\n    |            |     expected `i32`, found `u16`\n-   |            |     help: you can convert an `u16` to `i32`: `(x + x).into()`\n+   |            |     help: you can convert a `u16` to an `i32`: `(x + x).into()`\n    |            expected due to this\n \n error: aborting due to 3 previous errors"}, {"sha": "cb051aa1230212c26ebe7a162d432ea483eed076", "filename": "src/test/ui/numeric/numeric-cast-binop.stderr", "status": "modified", "additions": 97, "deletions": 97, "changes": 194, "blob_url": "https://github.com/rust-lang/rust/blob/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-binop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-binop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-binop.stderr?ref=78307d8700136b0a382a3921d95661a5a5675fae", "patch": "@@ -60,7 +60,7 @@ LL |         x_u16 > x_u8;\n    |                 ^^^^\n    |                 |\n    |                 expected `u16`, found `u8`\n-   |                 help: you can convert an `u8` to `u16`: `x_u8.into()`\n+   |                 help: you can convert a `u8` to a `u16`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:36:17\n@@ -113,7 +113,7 @@ LL |         x_u32 > x_u8;\n    |                 ^^^^\n    |                 |\n    |                 expected `u32`, found `u8`\n-   |                 help: you can convert an `u8` to `u32`: `x_u8.into()`\n+   |                 help: you can convert a `u8` to a `u32`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:47:17\n@@ -122,7 +122,7 @@ LL |         x_u32 > x_u16;\n    |                 ^^^^^\n    |                 |\n    |                 expected `u32`, found `u16`\n-   |                 help: you can convert an `u16` to `u32`: `x_u16.into()`\n+   |                 help: you can convert a `u16` to a `u32`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:49:17\n@@ -152,7 +152,7 @@ error[E0308]: mismatched types\n LL |         x_u32 > x_usize;\n    |                 ^^^^^^^ expected `u32`, found `usize`\n    |\n-help: you can convert an `usize` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |         x_u32 > x_usize.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -164,7 +164,7 @@ LL |         x_u64 > x_u8;\n    |                 ^^^^\n    |                 |\n    |                 expected `u64`, found `u8`\n-   |                 help: you can convert an `u8` to `u64`: `x_u8.into()`\n+   |                 help: you can convert a `u8` to a `u64`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:58:17\n@@ -173,7 +173,7 @@ LL |         x_u64 > x_u16;\n    |                 ^^^^^\n    |                 |\n    |                 expected `u64`, found `u16`\n-   |                 help: you can convert an `u16` to `u64`: `x_u16.into()`\n+   |                 help: you can convert a `u16` to a `u64`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:60:17\n@@ -182,7 +182,7 @@ LL |         x_u64 > x_u32;\n    |                 ^^^^^\n    |                 |\n    |                 expected `u64`, found `u32`\n-   |                 help: you can convert an `u32` to `u64`: `x_u32.into()`\n+   |                 help: you can convert a `u32` to a `u64`: `x_u32.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:62:17\n@@ -201,7 +201,7 @@ error[E0308]: mismatched types\n LL |         x_u64 > x_usize;\n    |                 ^^^^^^^ expected `u64`, found `usize`\n    |\n-help: you can convert an `usize` to `u64` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |         x_u64 > x_usize.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -213,7 +213,7 @@ LL |         x_u128 > x_u8;\n    |                  ^^^^\n    |                  |\n    |                  expected `u128`, found `u8`\n-   |                  help: you can convert an `u8` to `u128`: `x_u8.into()`\n+   |                  help: you can convert a `u8` to a `u128`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:69:18\n@@ -222,7 +222,7 @@ LL |         x_u128 > x_u16;\n    |                  ^^^^^\n    |                  |\n    |                  expected `u128`, found `u16`\n-   |                  help: you can convert an `u16` to `u128`: `x_u16.into()`\n+   |                  help: you can convert a `u16` to a `u128`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:71:18\n@@ -231,7 +231,7 @@ LL |         x_u128 > x_u32;\n    |                  ^^^^^\n    |                  |\n    |                  expected `u128`, found `u32`\n-   |                  help: you can convert an `u32` to `u128`: `x_u32.into()`\n+   |                  help: you can convert a `u32` to a `u128`: `x_u32.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:73:18\n@@ -240,15 +240,15 @@ LL |         x_u128 > x_u64;\n    |                  ^^^^^\n    |                  |\n    |                  expected `u128`, found `u64`\n-   |                  help: you can convert an `u64` to `u128`: `x_u64.into()`\n+   |                  help: you can convert a `u64` to a `u128`: `x_u64.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:75:18\n    |\n LL |         x_u128 > x_usize;\n    |                  ^^^^^^^ expected `u128`, found `usize`\n    |\n-help: you can convert an `usize` to `u128` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to a `u128` and panic if the converted value doesn't fit\n    |\n LL |         x_u128 > x_usize.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -260,7 +260,7 @@ LL |         x_usize > x_u8;\n    |                   ^^^^\n    |                   |\n    |                   expected `usize`, found `u8`\n-   |                   help: you can convert an `u8` to `usize`: `x_u8.into()`\n+   |                   help: you can convert a `u8` to a `usize`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:80:19\n@@ -269,15 +269,15 @@ LL |         x_usize > x_u16;\n    |                   ^^^^^\n    |                   |\n    |                   expected `usize`, found `u16`\n-   |                   help: you can convert an `u16` to `usize`: `x_u16.into()`\n+   |                   help: you can convert a `u16` to a `usize`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:82:19\n    |\n LL |         x_usize > x_u32;\n    |                   ^^^^^ expected `usize`, found `u32`\n    |\n-help: you can convert an `u32` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |         x_usize > x_u32.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -288,7 +288,7 @@ error[E0308]: mismatched types\n LL |         x_usize > x_u64;\n    |                   ^^^^^ expected `usize`, found `u64`\n    |\n-help: you can convert an `u64` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |         x_usize > x_u64.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -299,7 +299,7 @@ error[E0308]: mismatched types\n LL |         x_usize > x_u128;\n    |                   ^^^^^^ expected `usize`, found `u128`\n    |\n-help: you can convert an `u128` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert a `u128` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |         x_usize > x_u128.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -366,7 +366,7 @@ LL |         x_i16 > x_i8;\n    |                 ^^^^\n    |                 |\n    |                 expected `i16`, found `i8`\n-   |                 help: you can convert an `i8` to `i16`: `x_i8.into()`\n+   |                 help: you can convert an `i8` to an `i16`: `x_i8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:105:17\n@@ -419,7 +419,7 @@ LL |         x_i32 > x_i8;\n    |                 ^^^^\n    |                 |\n    |                 expected `i32`, found `i8`\n-   |                 help: you can convert an `i8` to `i32`: `x_i8.into()`\n+   |                 help: you can convert an `i8` to an `i32`: `x_i8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:116:17\n@@ -428,7 +428,7 @@ LL |         x_i32 > x_i16;\n    |                 ^^^^^\n    |                 |\n    |                 expected `i32`, found `i16`\n-   |                 help: you can convert an `i16` to `i32`: `x_i16.into()`\n+   |                 help: you can convert an `i16` to an `i32`: `x_i16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:118:17\n@@ -458,7 +458,7 @@ error[E0308]: mismatched types\n LL |         x_i32 > x_isize;\n    |                 ^^^^^^^ expected `i32`, found `isize`\n    |\n-help: you can convert an `isize` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |         x_i32 > x_isize.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -470,7 +470,7 @@ LL |         x_i64 > x_i8;\n    |                 ^^^^\n    |                 |\n    |                 expected `i64`, found `i8`\n-   |                 help: you can convert an `i8` to `i64`: `x_i8.into()`\n+   |                 help: you can convert an `i8` to an `i64`: `x_i8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:127:17\n@@ -479,7 +479,7 @@ LL |         x_i64 > x_i16;\n    |                 ^^^^^\n    |                 |\n    |                 expected `i64`, found `i16`\n-   |                 help: you can convert an `i16` to `i64`: `x_i16.into()`\n+   |                 help: you can convert an `i16` to an `i64`: `x_i16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:129:17\n@@ -488,7 +488,7 @@ LL |         x_i64 > x_i32;\n    |                 ^^^^^\n    |                 |\n    |                 expected `i64`, found `i32`\n-   |                 help: you can convert an `i32` to `i64`: `x_i32.into()`\n+   |                 help: you can convert an `i32` to an `i64`: `x_i32.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:131:17\n@@ -507,7 +507,7 @@ error[E0308]: mismatched types\n LL |         x_i64 > x_isize;\n    |                 ^^^^^^^ expected `i64`, found `isize`\n    |\n-help: you can convert an `isize` to `i64` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to an `i64` and panic if the converted value doesn't fit\n    |\n LL |         x_i64 > x_isize.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -519,7 +519,7 @@ LL |         x_i128 > x_i8;\n    |                  ^^^^\n    |                  |\n    |                  expected `i128`, found `i8`\n-   |                  help: you can convert an `i8` to `i128`: `x_i8.into()`\n+   |                  help: you can convert an `i8` to an `i128`: `x_i8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:138:18\n@@ -528,7 +528,7 @@ LL |         x_i128 > x_i16;\n    |                  ^^^^^\n    |                  |\n    |                  expected `i128`, found `i16`\n-   |                  help: you can convert an `i16` to `i128`: `x_i16.into()`\n+   |                  help: you can convert an `i16` to an `i128`: `x_i16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:140:18\n@@ -537,7 +537,7 @@ LL |         x_i128 > x_i32;\n    |                  ^^^^^\n    |                  |\n    |                  expected `i128`, found `i32`\n-   |                  help: you can convert an `i32` to `i128`: `x_i32.into()`\n+   |                  help: you can convert an `i32` to an `i128`: `x_i32.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:142:18\n@@ -546,15 +546,15 @@ LL |         x_i128 > x_i64;\n    |                  ^^^^^\n    |                  |\n    |                  expected `i128`, found `i64`\n-   |                  help: you can convert an `i64` to `i128`: `x_i64.into()`\n+   |                  help: you can convert an `i64` to an `i128`: `x_i64.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:144:18\n    |\n LL |         x_i128 > x_isize;\n    |                  ^^^^^^^ expected `i128`, found `isize`\n    |\n-help: you can convert an `isize` to `i128` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to an `i128` and panic if the converted value doesn't fit\n    |\n LL |         x_i128 > x_isize.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -566,7 +566,7 @@ LL |         x_isize > x_i8;\n    |                   ^^^^\n    |                   |\n    |                   expected `isize`, found `i8`\n-   |                   help: you can convert an `i8` to `isize`: `x_i8.into()`\n+   |                   help: you can convert an `i8` to an `isize`: `x_i8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:149:19\n@@ -575,15 +575,15 @@ LL |         x_isize > x_i16;\n    |                   ^^^^^\n    |                   |\n    |                   expected `isize`, found `i16`\n-   |                   help: you can convert an `i16` to `isize`: `x_i16.into()`\n+   |                   help: you can convert an `i16` to an `isize`: `x_i16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:151:19\n    |\n LL |         x_isize > x_i32;\n    |                   ^^^^^ expected `isize`, found `i32`\n    |\n-help: you can convert an `i32` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |         x_isize > x_i32.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -594,7 +594,7 @@ error[E0308]: mismatched types\n LL |         x_isize > x_i64;\n    |                   ^^^^^ expected `isize`, found `i64`\n    |\n-help: you can convert an `i64` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |         x_isize > x_i64.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -605,7 +605,7 @@ error[E0308]: mismatched types\n LL |         x_isize > x_i128;\n    |                   ^^^^^^ expected `isize`, found `i128`\n    |\n-help: you can convert an `i128` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert an `i128` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |         x_isize > x_i128.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -616,7 +616,7 @@ error[E0308]: mismatched types\n LL |         x_u8 > x_i8;\n    |                ^^^^ expected `u8`, found `i8`\n    |\n-help: you can convert an `i8` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert an `i8` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |         x_u8 > x_i8.try_into().unwrap();\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -682,7 +682,7 @@ error[E0308]: mismatched types\n LL |         x_u16 > x_i8;\n    |                 ^^^^ expected `u16`, found `i8`\n    |\n-help: you can convert an `i8` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `i8` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |         x_u16 > x_i8.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -693,7 +693,7 @@ error[E0308]: mismatched types\n LL |         x_u16 > x_i16;\n    |                 ^^^^^ expected `u16`, found `i16`\n    |\n-help: you can convert an `i16` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |         x_u16 > x_i16.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -737,7 +737,7 @@ error[E0308]: mismatched types\n LL |         x_u16 > x_isize;\n    |                 ^^^^^^^ expected `u16`, found `isize`\n    |\n-help: you can convert an `isize` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |         x_u16 > x_isize.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -748,7 +748,7 @@ error[E0308]: mismatched types\n LL |         x_u32 > x_i8;\n    |                 ^^^^ expected `u32`, found `i8`\n    |\n-help: you can convert an `i8` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert an `i8` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |         x_u32 > x_i8.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -759,7 +759,7 @@ error[E0308]: mismatched types\n LL |         x_u32 > x_i16;\n    |                 ^^^^^ expected `u32`, found `i16`\n    |\n-help: you can convert an `i16` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |         x_u32 > x_i16.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -770,7 +770,7 @@ error[E0308]: mismatched types\n LL |         x_u32 > x_i32;\n    |                 ^^^^^ expected `u32`, found `i32`\n    |\n-help: you can convert an `i32` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |         x_u32 > x_i32.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -803,7 +803,7 @@ error[E0308]: mismatched types\n LL |         x_u32 > x_isize;\n    |                 ^^^^^^^ expected `u32`, found `isize`\n    |\n-help: you can convert an `isize` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |         x_u32 > x_isize.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -814,7 +814,7 @@ error[E0308]: mismatched types\n LL |         x_u64 > x_i8;\n    |                 ^^^^ expected `u64`, found `i8`\n    |\n-help: you can convert an `i8` to `u64` and panic if the converted value wouldn't fit\n+help: you can convert an `i8` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |         x_u64 > x_i8.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -825,7 +825,7 @@ error[E0308]: mismatched types\n LL |         x_u64 > x_i16;\n    |                 ^^^^^ expected `u64`, found `i16`\n    |\n-help: you can convert an `i16` to `u64` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |         x_u64 > x_i16.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -836,7 +836,7 @@ error[E0308]: mismatched types\n LL |         x_u64 > x_i32;\n    |                 ^^^^^ expected `u64`, found `i32`\n    |\n-help: you can convert an `i32` to `u64` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |         x_u64 > x_i32.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -847,7 +847,7 @@ error[E0308]: mismatched types\n LL |         x_u64 > x_i64;\n    |                 ^^^^^ expected `u64`, found `i64`\n    |\n-help: you can convert an `i64` to `u64` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |         x_u64 > x_i64.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -869,7 +869,7 @@ error[E0308]: mismatched types\n LL |         x_u64 > x_isize;\n    |                 ^^^^^^^ expected `u64`, found `isize`\n    |\n-help: you can convert an `isize` to `u64` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |         x_u64 > x_isize.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -880,7 +880,7 @@ error[E0308]: mismatched types\n LL |         x_u128 > x_i8;\n    |                  ^^^^ expected `u128`, found `i8`\n    |\n-help: you can convert an `i8` to `u128` and panic if the converted value wouldn't fit\n+help: you can convert an `i8` to a `u128` and panic if the converted value doesn't fit\n    |\n LL |         x_u128 > x_i8.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -891,7 +891,7 @@ error[E0308]: mismatched types\n LL |         x_u128 > x_i16;\n    |                  ^^^^^ expected `u128`, found `i16`\n    |\n-help: you can convert an `i16` to `u128` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to a `u128` and panic if the converted value doesn't fit\n    |\n LL |         x_u128 > x_i16.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -902,7 +902,7 @@ error[E0308]: mismatched types\n LL |         x_u128 > x_i32;\n    |                  ^^^^^ expected `u128`, found `i32`\n    |\n-help: you can convert an `i32` to `u128` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to a `u128` and panic if the converted value doesn't fit\n    |\n LL |         x_u128 > x_i32.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -913,7 +913,7 @@ error[E0308]: mismatched types\n LL |         x_u128 > x_i64;\n    |                  ^^^^^ expected `u128`, found `i64`\n    |\n-help: you can convert an `i64` to `u128` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to a `u128` and panic if the converted value doesn't fit\n    |\n LL |         x_u128 > x_i64.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -924,7 +924,7 @@ error[E0308]: mismatched types\n LL |         x_u128 > x_i128;\n    |                  ^^^^^^ expected `u128`, found `i128`\n    |\n-help: you can convert an `i128` to `u128` and panic if the converted value wouldn't fit\n+help: you can convert an `i128` to a `u128` and panic if the converted value doesn't fit\n    |\n LL |         x_u128 > x_i128.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -935,7 +935,7 @@ error[E0308]: mismatched types\n LL |         x_u128 > x_isize;\n    |                  ^^^^^^^ expected `u128`, found `isize`\n    |\n-help: you can convert an `isize` to `u128` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to a `u128` and panic if the converted value doesn't fit\n    |\n LL |         x_u128 > x_isize.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -946,7 +946,7 @@ error[E0308]: mismatched types\n LL |         x_usize > x_i8;\n    |                   ^^^^ expected `usize`, found `i8`\n    |\n-help: you can convert an `i8` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `i8` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |         x_usize > x_i8.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -957,7 +957,7 @@ error[E0308]: mismatched types\n LL |         x_usize > x_i16;\n    |                   ^^^^^ expected `usize`, found `i16`\n    |\n-help: you can convert an `i16` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |         x_usize > x_i16.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -968,7 +968,7 @@ error[E0308]: mismatched types\n LL |         x_usize > x_i32;\n    |                   ^^^^^ expected `usize`, found `i32`\n    |\n-help: you can convert an `i32` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |         x_usize > x_i32.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -979,7 +979,7 @@ error[E0308]: mismatched types\n LL |         x_usize > x_i64;\n    |                   ^^^^^ expected `usize`, found `i64`\n    |\n-help: you can convert an `i64` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |         x_usize > x_i64.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -990,7 +990,7 @@ error[E0308]: mismatched types\n LL |         x_usize > x_i128;\n    |                   ^^^^^^ expected `usize`, found `i128`\n    |\n-help: you can convert an `i128` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `i128` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |         x_usize > x_i128.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1001,7 +1001,7 @@ error[E0308]: mismatched types\n LL |         x_usize > x_isize;\n    |                   ^^^^^^^ expected `usize`, found `isize`\n    |\n-help: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |         x_usize > x_isize.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1012,7 +1012,7 @@ error[E0308]: mismatched types\n LL |         x_i8 > x_u8;\n    |                ^^^^ expected `i8`, found `u8`\n    |\n-help: you can convert an `u8` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `u8` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |         x_i8 > x_u8.try_into().unwrap();\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1023,7 +1023,7 @@ error[E0308]: mismatched types\n LL |         x_i8 > x_u16;\n    |                ^^^^^ expected `i8`, found `u16`\n    |\n-help: you can convert an `u16` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `u16` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |         x_i8 > x_u16.try_into().unwrap();\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1034,7 +1034,7 @@ error[E0308]: mismatched types\n LL |         x_i8 > x_u32;\n    |                ^^^^^ expected `i8`, found `u32`\n    |\n-help: you can convert an `u32` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |         x_i8 > x_u32.try_into().unwrap();\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1045,7 +1045,7 @@ error[E0308]: mismatched types\n LL |         x_i8 > x_u64;\n    |                ^^^^^ expected `i8`, found `u64`\n    |\n-help: you can convert an `u64` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |         x_i8 > x_u64.try_into().unwrap();\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1056,7 +1056,7 @@ error[E0308]: mismatched types\n LL |         x_i8 > x_u128;\n    |                ^^^^^^ expected `i8`, found `u128`\n    |\n-help: you can convert an `u128` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `u128` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |         x_i8 > x_u128.try_into().unwrap();\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1067,7 +1067,7 @@ error[E0308]: mismatched types\n LL |         x_i8 > x_usize;\n    |                ^^^^^^^ expected `i8`, found `usize`\n    |\n-help: you can convert an `usize` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |         x_i8 > x_usize.try_into().unwrap();\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1079,15 +1079,15 @@ LL |         x_i16 > x_u8;\n    |                 ^^^^\n    |                 |\n    |                 expected `i16`, found `u8`\n-   |                 help: you can convert an `u8` to `i16`: `x_u8.into()`\n+   |                 help: you can convert a `u8` to an `i16`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:257:17\n    |\n LL |         x_i16 > x_u16;\n    |                 ^^^^^ expected `i16`, found `u16`\n    |\n-help: you can convert an `u16` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert a `u16` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |         x_i16 > x_u16.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1098,7 +1098,7 @@ error[E0308]: mismatched types\n LL |         x_i16 > x_u32;\n    |                 ^^^^^ expected `i16`, found `u32`\n    |\n-help: you can convert an `u32` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |         x_i16 > x_u32.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1109,7 +1109,7 @@ error[E0308]: mismatched types\n LL |         x_i16 > x_u64;\n    |                 ^^^^^ expected `i16`, found `u64`\n    |\n-help: you can convert an `u64` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |         x_i16 > x_u64.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1120,7 +1120,7 @@ error[E0308]: mismatched types\n LL |         x_i16 > x_u128;\n    |                 ^^^^^^ expected `i16`, found `u128`\n    |\n-help: you can convert an `u128` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert a `u128` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |         x_i16 > x_u128.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1131,7 +1131,7 @@ error[E0308]: mismatched types\n LL |         x_i16 > x_usize;\n    |                 ^^^^^^^ expected `i16`, found `usize`\n    |\n-help: you can convert an `usize` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |         x_i16 > x_usize.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1143,7 +1143,7 @@ LL |         x_i32 > x_u8;\n    |                 ^^^^\n    |                 |\n    |                 expected `i32`, found `u8`\n-   |                 help: you can convert an `u8` to `i32`: `x_u8.into()`\n+   |                 help: you can convert a `u8` to an `i32`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:270:17\n@@ -1152,15 +1152,15 @@ LL |         x_i32 > x_u16;\n    |                 ^^^^^\n    |                 |\n    |                 expected `i32`, found `u16`\n-   |                 help: you can convert an `u16` to `i32`: `x_u16.into()`\n+   |                 help: you can convert a `u16` to an `i32`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:272:17\n    |\n LL |         x_i32 > x_u32;\n    |                 ^^^^^ expected `i32`, found `u32`\n    |\n-help: you can convert an `u32` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |         x_i32 > x_u32.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1171,7 +1171,7 @@ error[E0308]: mismatched types\n LL |         x_i32 > x_u64;\n    |                 ^^^^^ expected `i32`, found `u64`\n    |\n-help: you can convert an `u64` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |         x_i32 > x_u64.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1182,7 +1182,7 @@ error[E0308]: mismatched types\n LL |         x_i32 > x_u128;\n    |                 ^^^^^^ expected `i32`, found `u128`\n    |\n-help: you can convert an `u128` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert a `u128` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |         x_i32 > x_u128.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1193,7 +1193,7 @@ error[E0308]: mismatched types\n LL |         x_i32 > x_usize;\n    |                 ^^^^^^^ expected `i32`, found `usize`\n    |\n-help: you can convert an `usize` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |         x_i32 > x_usize.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1205,7 +1205,7 @@ LL |         x_i64 > x_u8;\n    |                 ^^^^\n    |                 |\n    |                 expected `i64`, found `u8`\n-   |                 help: you can convert an `u8` to `i64`: `x_u8.into()`\n+   |                 help: you can convert a `u8` to an `i64`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:283:17\n@@ -1214,7 +1214,7 @@ LL |         x_i64 > x_u16;\n    |                 ^^^^^\n    |                 |\n    |                 expected `i64`, found `u16`\n-   |                 help: you can convert an `u16` to `i64`: `x_u16.into()`\n+   |                 help: you can convert a `u16` to an `i64`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:285:17\n@@ -1223,15 +1223,15 @@ LL |         x_i64 > x_u32;\n    |                 ^^^^^\n    |                 |\n    |                 expected `i64`, found `u32`\n-   |                 help: you can convert an `u32` to `i64`: `x_u32.into()`\n+   |                 help: you can convert a `u32` to an `i64`: `x_u32.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:287:17\n    |\n LL |         x_i64 > x_u64;\n    |                 ^^^^^ expected `i64`, found `u64`\n    |\n-help: you can convert an `u64` to `i64` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to an `i64` and panic if the converted value doesn't fit\n    |\n LL |         x_i64 > x_u64.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1242,7 +1242,7 @@ error[E0308]: mismatched types\n LL |         x_i64 > x_u128;\n    |                 ^^^^^^ expected `i64`, found `u128`\n    |\n-help: you can convert an `u128` to `i64` and panic if the converted value wouldn't fit\n+help: you can convert a `u128` to an `i64` and panic if the converted value doesn't fit\n    |\n LL |         x_i64 > x_u128.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1253,7 +1253,7 @@ error[E0308]: mismatched types\n LL |         x_i64 > x_usize;\n    |                 ^^^^^^^ expected `i64`, found `usize`\n    |\n-help: you can convert an `usize` to `i64` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to an `i64` and panic if the converted value doesn't fit\n    |\n LL |         x_i64 > x_usize.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1265,7 +1265,7 @@ LL |         x_i128 > x_u8;\n    |                  ^^^^\n    |                  |\n    |                  expected `i128`, found `u8`\n-   |                  help: you can convert an `u8` to `i128`: `x_u8.into()`\n+   |                  help: you can convert a `u8` to an `i128`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:296:18\n@@ -1274,7 +1274,7 @@ LL |         x_i128 > x_u16;\n    |                  ^^^^^\n    |                  |\n    |                  expected `i128`, found `u16`\n-   |                  help: you can convert an `u16` to `i128`: `x_u16.into()`\n+   |                  help: you can convert a `u16` to an `i128`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:298:18\n@@ -1283,7 +1283,7 @@ LL |         x_i128 > x_u32;\n    |                  ^^^^^\n    |                  |\n    |                  expected `i128`, found `u32`\n-   |                  help: you can convert an `u32` to `i128`: `x_u32.into()`\n+   |                  help: you can convert a `u32` to an `i128`: `x_u32.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:300:18\n@@ -1292,15 +1292,15 @@ LL |         x_i128 > x_u64;\n    |                  ^^^^^\n    |                  |\n    |                  expected `i128`, found `u64`\n-   |                  help: you can convert an `u64` to `i128`: `x_u64.into()`\n+   |                  help: you can convert a `u64` to an `i128`: `x_u64.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:302:18\n    |\n LL |         x_i128 > x_u128;\n    |                  ^^^^^^ expected `i128`, found `u128`\n    |\n-help: you can convert an `u128` to `i128` and panic if the converted value wouldn't fit\n+help: you can convert a `u128` to an `i128` and panic if the converted value doesn't fit\n    |\n LL |         x_i128 > x_u128.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1311,7 +1311,7 @@ error[E0308]: mismatched types\n LL |         x_i128 > x_usize;\n    |                  ^^^^^^^ expected `i128`, found `usize`\n    |\n-help: you can convert an `usize` to `i128` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to an `i128` and panic if the converted value doesn't fit\n    |\n LL |         x_i128 > x_usize.try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1323,15 +1323,15 @@ LL |         x_isize > x_u8;\n    |                   ^^^^\n    |                   |\n    |                   expected `isize`, found `u8`\n-   |                   help: you can convert an `u8` to `isize`: `x_u8.into()`\n+   |                   help: you can convert a `u8` to an `isize`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast-binop.rs:309:19\n    |\n LL |         x_isize > x_u16;\n    |                   ^^^^^ expected `isize`, found `u16`\n    |\n-help: you can convert an `u16` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `u16` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |         x_isize > x_u16.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1342,7 +1342,7 @@ error[E0308]: mismatched types\n LL |         x_isize > x_u32;\n    |                   ^^^^^ expected `isize`, found `u32`\n    |\n-help: you can convert an `u32` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |         x_isize > x_u32.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1353,7 +1353,7 @@ error[E0308]: mismatched types\n LL |         x_isize > x_u64;\n    |                   ^^^^^ expected `isize`, found `u64`\n    |\n-help: you can convert an `u64` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |         x_isize > x_u64.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1364,7 +1364,7 @@ error[E0308]: mismatched types\n LL |         x_isize > x_u128;\n    |                   ^^^^^^ expected `isize`, found `u128`\n    |\n-help: you can convert an `u128` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `u128` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |         x_isize > x_u128.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1375,7 +1375,7 @@ error[E0308]: mismatched types\n LL |         x_isize > x_usize;\n    |                   ^^^^^^^ expected `isize`, found `usize`\n    |\n-help: you can convert an `usize` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |         x_isize > x_usize.try_into().unwrap();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "ffd6368bac15faad009235f265822e2fe0b8faf0", "filename": "src/test/ui/numeric/numeric-cast.stderr", "status": "modified", "additions": 113, "deletions": 113, "changes": 226, "blob_url": "https://github.com/rust-lang/rust/blob/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr?ref=78307d8700136b0a382a3921d95661a5a5675fae", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     foo::<usize>(x_u64);\n    |                  ^^^^^ expected `usize`, found `u64`\n    |\n-help: you can convert an `u64` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<usize>(x_u64.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -15,7 +15,7 @@ error[E0308]: mismatched types\n LL |     foo::<usize>(x_u32);\n    |                  ^^^^^ expected `usize`, found `u32`\n    |\n-help: you can convert an `u32` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<usize>(x_u32.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -27,7 +27,7 @@ LL |     foo::<usize>(x_u16);\n    |                  ^^^^^\n    |                  |\n    |                  expected `usize`, found `u16`\n-   |                  help: you can convert an `u16` to `usize`: `x_u16.into()`\n+   |                  help: you can convert a `u16` to a `usize`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:29:18\n@@ -36,15 +36,15 @@ LL |     foo::<usize>(x_u8);\n    |                  ^^^^\n    |                  |\n    |                  expected `usize`, found `u8`\n-   |                  help: you can convert an `u8` to `usize`: `x_u8.into()`\n+   |                  help: you can convert a `u8` to a `usize`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:31:18\n    |\n LL |     foo::<usize>(x_isize);\n    |                  ^^^^^^^ expected `usize`, found `isize`\n    |\n-help: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<usize>(x_isize.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -55,7 +55,7 @@ error[E0308]: mismatched types\n LL |     foo::<usize>(x_i64);\n    |                  ^^^^^ expected `usize`, found `i64`\n    |\n-help: you can convert an `i64` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<usize>(x_i64.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -66,7 +66,7 @@ error[E0308]: mismatched types\n LL |     foo::<usize>(x_i32);\n    |                  ^^^^^ expected `usize`, found `i32`\n    |\n-help: you can convert an `i32` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<usize>(x_i32.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -77,7 +77,7 @@ error[E0308]: mismatched types\n LL |     foo::<usize>(x_i16);\n    |                  ^^^^^ expected `usize`, found `i16`\n    |\n-help: you can convert an `i16` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<usize>(x_i16.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -88,7 +88,7 @@ error[E0308]: mismatched types\n LL |     foo::<usize>(x_i8);\n    |                  ^^^^ expected `usize`, found `i8`\n    |\n-help: you can convert an `i8` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `i8` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<usize>(x_i8.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -99,7 +99,7 @@ error[E0308]: mismatched types\n LL |     foo::<isize>(x_usize);\n    |                  ^^^^^^^ expected `isize`, found `usize`\n    |\n-help: you can convert an `usize` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<isize>(x_usize.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -110,7 +110,7 @@ error[E0308]: mismatched types\n LL |     foo::<isize>(x_u64);\n    |                  ^^^^^ expected `isize`, found `u64`\n    |\n-help: you can convert an `u64` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<isize>(x_u64.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -121,7 +121,7 @@ error[E0308]: mismatched types\n LL |     foo::<isize>(x_u32);\n    |                  ^^^^^ expected `isize`, found `u32`\n    |\n-help: you can convert an `u32` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<isize>(x_u32.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -132,7 +132,7 @@ error[E0308]: mismatched types\n LL |     foo::<isize>(x_u16);\n    |                  ^^^^^ expected `isize`, found `u16`\n    |\n-help: you can convert an `u16` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `u16` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<isize>(x_u16.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -144,15 +144,15 @@ LL |     foo::<isize>(x_u8);\n    |                  ^^^^\n    |                  |\n    |                  expected `isize`, found `u8`\n-   |                  help: you can convert an `u8` to `isize`: `x_u8.into()`\n+   |                  help: you can convert a `u8` to an `isize`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:55:18\n    |\n LL |     foo::<isize>(x_i64);\n    |                  ^^^^^ expected `isize`, found `i64`\n    |\n-help: you can convert an `i64` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<isize>(x_i64.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -163,7 +163,7 @@ error[E0308]: mismatched types\n LL |     foo::<isize>(x_i32);\n    |                  ^^^^^ expected `isize`, found `i32`\n    |\n-help: you can convert an `i32` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to an `isize` and panic if the converted value doesn't fit\n    |\n LL |     foo::<isize>(x_i32.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -175,7 +175,7 @@ LL |     foo::<isize>(x_i16);\n    |                  ^^^^^\n    |                  |\n    |                  expected `isize`, found `i16`\n-   |                  help: you can convert an `i16` to `isize`: `x_i16.into()`\n+   |                  help: you can convert an `i16` to an `isize`: `x_i16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:61:18\n@@ -184,15 +184,15 @@ LL |     foo::<isize>(x_i8);\n    |                  ^^^^\n    |                  |\n    |                  expected `isize`, found `i8`\n-   |                  help: you can convert an `i8` to `isize`: `x_i8.into()`\n+   |                  help: you can convert an `i8` to an `isize`: `x_i8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:66:16\n    |\n LL |     foo::<u64>(x_usize);\n    |                ^^^^^^^ expected `u64`, found `usize`\n    |\n-help: you can convert an `usize` to `u64` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u64>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -204,7 +204,7 @@ LL |     foo::<u64>(x_u32);\n    |                ^^^^^\n    |                |\n    |                expected `u64`, found `u32`\n-   |                help: you can convert an `u32` to `u64`: `x_u32.into()`\n+   |                help: you can convert a `u32` to a `u64`: `x_u32.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:71:16\n@@ -213,7 +213,7 @@ LL |     foo::<u64>(x_u16);\n    |                ^^^^^\n    |                |\n    |                expected `u64`, found `u16`\n-   |                help: you can convert an `u16` to `u64`: `x_u16.into()`\n+   |                help: you can convert a `u16` to a `u64`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:73:16\n@@ -222,15 +222,15 @@ LL |     foo::<u64>(x_u8);\n    |                ^^^^\n    |                |\n    |                expected `u64`, found `u8`\n-   |                help: you can convert an `u8` to `u64`: `x_u8.into()`\n+   |                help: you can convert a `u8` to a `u64`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:75:16\n    |\n LL |     foo::<u64>(x_isize);\n    |                ^^^^^^^ expected `u64`, found `isize`\n    |\n-help: you can convert an `isize` to `u64` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u64>(x_isize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -241,7 +241,7 @@ error[E0308]: mismatched types\n LL |     foo::<u64>(x_i64);\n    |                ^^^^^ expected `u64`, found `i64`\n    |\n-help: you can convert an `i64` to `u64` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u64>(x_i64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -252,7 +252,7 @@ error[E0308]: mismatched types\n LL |     foo::<u64>(x_i32);\n    |                ^^^^^ expected `u64`, found `i32`\n    |\n-help: you can convert an `i32` to `u64` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u64>(x_i32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -263,7 +263,7 @@ error[E0308]: mismatched types\n LL |     foo::<u64>(x_i16);\n    |                ^^^^^ expected `u64`, found `i16`\n    |\n-help: you can convert an `i16` to `u64` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u64>(x_i16.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -274,7 +274,7 @@ error[E0308]: mismatched types\n LL |     foo::<u64>(x_i8);\n    |                ^^^^ expected `u64`, found `i8`\n    |\n-help: you can convert an `i8` to `u64` and panic if the converted value wouldn't fit\n+help: you can convert an `i8` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u64>(x_i8.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -285,7 +285,7 @@ error[E0308]: mismatched types\n LL |     foo::<i64>(x_usize);\n    |                ^^^^^^^ expected `i64`, found `usize`\n    |\n-help: you can convert an `usize` to `i64` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to an `i64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i64>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -296,7 +296,7 @@ error[E0308]: mismatched types\n LL |     foo::<i64>(x_u64);\n    |                ^^^^^ expected `i64`, found `u64`\n    |\n-help: you can convert an `u64` to `i64` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to an `i64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i64>(x_u64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -308,7 +308,7 @@ LL |     foo::<i64>(x_u32);\n    |                ^^^^^\n    |                |\n    |                expected `i64`, found `u32`\n-   |                help: you can convert an `u32` to `i64`: `x_u32.into()`\n+   |                help: you can convert a `u32` to an `i64`: `x_u32.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:94:16\n@@ -317,7 +317,7 @@ LL |     foo::<i64>(x_u16);\n    |                ^^^^^\n    |                |\n    |                expected `i64`, found `u16`\n-   |                help: you can convert an `u16` to `i64`: `x_u16.into()`\n+   |                help: you can convert a `u16` to an `i64`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:96:16\n@@ -326,15 +326,15 @@ LL |     foo::<i64>(x_u8);\n    |                ^^^^\n    |                |\n    |                expected `i64`, found `u8`\n-   |                help: you can convert an `u8` to `i64`: `x_u8.into()`\n+   |                help: you can convert a `u8` to an `i64`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:98:16\n    |\n LL |     foo::<i64>(x_isize);\n    |                ^^^^^^^ expected `i64`, found `isize`\n    |\n-help: you can convert an `isize` to `i64` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to an `i64` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i64>(x_isize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -346,7 +346,7 @@ LL |     foo::<i64>(x_i32);\n    |                ^^^^^\n    |                |\n    |                expected `i64`, found `i32`\n-   |                help: you can convert an `i32` to `i64`: `x_i32.into()`\n+   |                help: you can convert an `i32` to an `i64`: `x_i32.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:103:16\n@@ -355,7 +355,7 @@ LL |     foo::<i64>(x_i16);\n    |                ^^^^^\n    |                |\n    |                expected `i64`, found `i16`\n-   |                help: you can convert an `i16` to `i64`: `x_i16.into()`\n+   |                help: you can convert an `i16` to an `i64`: `x_i16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:105:16\n@@ -364,15 +364,15 @@ LL |     foo::<i64>(x_i8);\n    |                ^^^^\n    |                |\n    |                expected `i64`, found `i8`\n-   |                help: you can convert an `i8` to `i64`: `x_i8.into()`\n+   |                help: you can convert an `i8` to an `i64`: `x_i8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:110:16\n    |\n LL |     foo::<u32>(x_usize);\n    |                ^^^^^^^ expected `u32`, found `usize`\n    |\n-help: you can convert an `usize` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u32>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -383,7 +383,7 @@ error[E0308]: mismatched types\n LL |     foo::<u32>(x_u64);\n    |                ^^^^^ expected `u32`, found `u64`\n    |\n-help: you can convert an `u64` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u32>(x_u64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -395,7 +395,7 @@ LL |     foo::<u32>(x_u16);\n    |                ^^^^^\n    |                |\n    |                expected `u32`, found `u16`\n-   |                help: you can convert an `u16` to `u32`: `x_u16.into()`\n+   |                help: you can convert a `u16` to a `u32`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:117:16\n@@ -404,15 +404,15 @@ LL |     foo::<u32>(x_u8);\n    |                ^^^^\n    |                |\n    |                expected `u32`, found `u8`\n-   |                help: you can convert an `u8` to `u32`: `x_u8.into()`\n+   |                help: you can convert a `u8` to a `u32`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:119:16\n    |\n LL |     foo::<u32>(x_isize);\n    |                ^^^^^^^ expected `u32`, found `isize`\n    |\n-help: you can convert an `isize` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u32>(x_isize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -423,7 +423,7 @@ error[E0308]: mismatched types\n LL |     foo::<u32>(x_i64);\n    |                ^^^^^ expected `u32`, found `i64`\n    |\n-help: you can convert an `i64` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u32>(x_i64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -434,7 +434,7 @@ error[E0308]: mismatched types\n LL |     foo::<u32>(x_i32);\n    |                ^^^^^ expected `u32`, found `i32`\n    |\n-help: you can convert an `i32` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u32>(x_i32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -445,7 +445,7 @@ error[E0308]: mismatched types\n LL |     foo::<u32>(x_i16);\n    |                ^^^^^ expected `u32`, found `i16`\n    |\n-help: you can convert an `i16` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u32>(x_i16.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -456,7 +456,7 @@ error[E0308]: mismatched types\n LL |     foo::<u32>(x_i8);\n    |                ^^^^ expected `u32`, found `i8`\n    |\n-help: you can convert an `i8` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert an `i8` to a `u32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u32>(x_i8.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -467,7 +467,7 @@ error[E0308]: mismatched types\n LL |     foo::<i32>(x_usize);\n    |                ^^^^^^^ expected `i32`, found `usize`\n    |\n-help: you can convert an `usize` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i32>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -478,7 +478,7 @@ error[E0308]: mismatched types\n LL |     foo::<i32>(x_u64);\n    |                ^^^^^ expected `i32`, found `u64`\n    |\n-help: you can convert an `u64` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i32>(x_u64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -489,7 +489,7 @@ error[E0308]: mismatched types\n LL |     foo::<i32>(x_u32);\n    |                ^^^^^ expected `i32`, found `u32`\n    |\n-help: you can convert an `u32` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i32>(x_u32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -501,7 +501,7 @@ LL |     foo::<i32>(x_u16);\n    |                ^^^^^\n    |                |\n    |                expected `i32`, found `u16`\n-   |                help: you can convert an `u16` to `i32`: `x_u16.into()`\n+   |                help: you can convert a `u16` to an `i32`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:140:16\n@@ -510,15 +510,15 @@ LL |     foo::<i32>(x_u8);\n    |                ^^^^\n    |                |\n    |                expected `i32`, found `u8`\n-   |                help: you can convert an `u8` to `i32`: `x_u8.into()`\n+   |                help: you can convert a `u8` to an `i32`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:142:16\n    |\n LL |     foo::<i32>(x_isize);\n    |                ^^^^^^^ expected `i32`, found `isize`\n    |\n-help: you can convert an `isize` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i32>(x_isize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -529,7 +529,7 @@ error[E0308]: mismatched types\n LL |     foo::<i32>(x_i64);\n    |                ^^^^^ expected `i32`, found `i64`\n    |\n-help: you can convert an `i64` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i32>(x_i64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -541,7 +541,7 @@ LL |     foo::<i32>(x_i16);\n    |                ^^^^^\n    |                |\n    |                expected `i32`, found `i16`\n-   |                help: you can convert an `i16` to `i32`: `x_i16.into()`\n+   |                help: you can convert an `i16` to an `i32`: `x_i16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:149:16\n@@ -550,15 +550,15 @@ LL |     foo::<i32>(x_i8);\n    |                ^^^^\n    |                |\n    |                expected `i32`, found `i8`\n-   |                help: you can convert an `i8` to `i32`: `x_i8.into()`\n+   |                help: you can convert an `i8` to an `i32`: `x_i8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:154:16\n    |\n LL |     foo::<u16>(x_usize);\n    |                ^^^^^^^ expected `u16`, found `usize`\n    |\n-help: you can convert an `usize` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -569,7 +569,7 @@ error[E0308]: mismatched types\n LL |     foo::<u16>(x_u64);\n    |                ^^^^^ expected `u16`, found `u64`\n    |\n-help: you can convert an `u64` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_u64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -580,7 +580,7 @@ error[E0308]: mismatched types\n LL |     foo::<u16>(x_u32);\n    |                ^^^^^ expected `u16`, found `u32`\n    |\n-help: you can convert an `u32` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_u32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -592,15 +592,15 @@ LL |     foo::<u16>(x_u8);\n    |                ^^^^\n    |                |\n    |                expected `u16`, found `u8`\n-   |                help: you can convert an `u8` to `u16`: `x_u8.into()`\n+   |                help: you can convert a `u8` to a `u16`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:163:16\n    |\n LL |     foo::<u16>(x_isize);\n    |                ^^^^^^^ expected `u16`, found `isize`\n    |\n-help: you can convert an `isize` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_isize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -611,7 +611,7 @@ error[E0308]: mismatched types\n LL |     foo::<u16>(x_i64);\n    |                ^^^^^ expected `u16`, found `i64`\n    |\n-help: you can convert an `i64` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_i64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -622,7 +622,7 @@ error[E0308]: mismatched types\n LL |     foo::<u16>(x_i32);\n    |                ^^^^^ expected `u16`, found `i32`\n    |\n-help: you can convert an `i32` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_i32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -633,7 +633,7 @@ error[E0308]: mismatched types\n LL |     foo::<u16>(x_i16);\n    |                ^^^^^ expected `u16`, found `i16`\n    |\n-help: you can convert an `i16` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_i16.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -644,7 +644,7 @@ error[E0308]: mismatched types\n LL |     foo::<u16>(x_i8);\n    |                ^^^^ expected `u16`, found `i8`\n    |\n-help: you can convert an `i8` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `i8` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u16>(x_i8.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -655,7 +655,7 @@ error[E0308]: mismatched types\n LL |     foo::<i16>(x_usize);\n    |                ^^^^^^^ expected `i16`, found `usize`\n    |\n-help: you can convert an `usize` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i16>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -666,7 +666,7 @@ error[E0308]: mismatched types\n LL |     foo::<i16>(x_u64);\n    |                ^^^^^ expected `i16`, found `u64`\n    |\n-help: you can convert an `u64` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i16>(x_u64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -677,7 +677,7 @@ error[E0308]: mismatched types\n LL |     foo::<i16>(x_u32);\n    |                ^^^^^ expected `i16`, found `u32`\n    |\n-help: you can convert an `u32` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i16>(x_u32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -688,7 +688,7 @@ error[E0308]: mismatched types\n LL |     foo::<i16>(x_u16);\n    |                ^^^^^ expected `i16`, found `u16`\n    |\n-help: you can convert an `u16` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert a `u16` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i16>(x_u16.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -700,15 +700,15 @@ LL |     foo::<i16>(x_u8);\n    |                ^^^^\n    |                |\n    |                expected `i16`, found `u8`\n-   |                help: you can convert an `u8` to `i16`: `x_u8.into()`\n+   |                help: you can convert a `u8` to an `i16`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:186:16\n    |\n LL |     foo::<i16>(x_isize);\n    |                ^^^^^^^ expected `i16`, found `isize`\n    |\n-help: you can convert an `isize` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i16>(x_isize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -719,7 +719,7 @@ error[E0308]: mismatched types\n LL |     foo::<i16>(x_i64);\n    |                ^^^^^ expected `i16`, found `i64`\n    |\n-help: you can convert an `i64` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i16>(x_i64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -730,7 +730,7 @@ error[E0308]: mismatched types\n LL |     foo::<i16>(x_i32);\n    |                ^^^^^ expected `i16`, found `i32`\n    |\n-help: you can convert an `i32` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to an `i16` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i16>(x_i32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -742,15 +742,15 @@ LL |     foo::<i16>(x_i8);\n    |                ^^^^\n    |                |\n    |                expected `i16`, found `i8`\n-   |                help: you can convert an `i8` to `i16`: `x_i8.into()`\n+   |                help: you can convert an `i8` to an `i16`: `x_i8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:198:15\n    |\n LL |     foo::<u8>(x_usize);\n    |               ^^^^^^^ expected `u8`, found `usize`\n    |\n-help: you can convert an `usize` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_usize.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -761,7 +761,7 @@ error[E0308]: mismatched types\n LL |     foo::<u8>(x_u64);\n    |               ^^^^^ expected `u8`, found `u64`\n    |\n-help: you can convert an `u64` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_u64.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -772,7 +772,7 @@ error[E0308]: mismatched types\n LL |     foo::<u8>(x_u32);\n    |               ^^^^^ expected `u8`, found `u32`\n    |\n-help: you can convert an `u32` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_u32.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -783,7 +783,7 @@ error[E0308]: mismatched types\n LL |     foo::<u8>(x_u16);\n    |               ^^^^^ expected `u8`, found `u16`\n    |\n-help: you can convert an `u16` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert a `u16` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_u16.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -794,7 +794,7 @@ error[E0308]: mismatched types\n LL |     foo::<u8>(x_isize);\n    |               ^^^^^^^ expected `u8`, found `isize`\n    |\n-help: you can convert an `isize` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_isize.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -805,7 +805,7 @@ error[E0308]: mismatched types\n LL |     foo::<u8>(x_i64);\n    |               ^^^^^ expected `u8`, found `i64`\n    |\n-help: you can convert an `i64` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_i64.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -816,7 +816,7 @@ error[E0308]: mismatched types\n LL |     foo::<u8>(x_i32);\n    |               ^^^^^ expected `u8`, found `i32`\n    |\n-help: you can convert an `i32` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_i32.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -827,7 +827,7 @@ error[E0308]: mismatched types\n LL |     foo::<u8>(x_i16);\n    |               ^^^^^ expected `u8`, found `i16`\n    |\n-help: you can convert an `i16` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_i16.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -838,7 +838,7 @@ error[E0308]: mismatched types\n LL |     foo::<u8>(x_i8);\n    |               ^^^^ expected `u8`, found `i8`\n    |\n-help: you can convert an `i8` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert an `i8` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<u8>(x_i8.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -849,7 +849,7 @@ error[E0308]: mismatched types\n LL |     foo::<i8>(x_usize);\n    |               ^^^^^^^ expected `i8`, found `usize`\n    |\n-help: you can convert an `usize` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_usize.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -860,7 +860,7 @@ error[E0308]: mismatched types\n LL |     foo::<i8>(x_u64);\n    |               ^^^^^ expected `i8`, found `u64`\n    |\n-help: you can convert an `u64` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `u64` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_u64.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -871,7 +871,7 @@ error[E0308]: mismatched types\n LL |     foo::<i8>(x_u32);\n    |               ^^^^^ expected `i8`, found `u32`\n    |\n-help: you can convert an `u32` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `u32` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_u32.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -882,7 +882,7 @@ error[E0308]: mismatched types\n LL |     foo::<i8>(x_u16);\n    |               ^^^^^ expected `i8`, found `u16`\n    |\n-help: you can convert an `u16` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `u16` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_u16.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -893,7 +893,7 @@ error[E0308]: mismatched types\n LL |     foo::<i8>(x_u8);\n    |               ^^^^ expected `i8`, found `u8`\n    |\n-help: you can convert an `u8` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert a `u8` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_u8.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -904,7 +904,7 @@ error[E0308]: mismatched types\n LL |     foo::<i8>(x_isize);\n    |               ^^^^^^^ expected `i8`, found `isize`\n    |\n-help: you can convert an `isize` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_isize.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -915,7 +915,7 @@ error[E0308]: mismatched types\n LL |     foo::<i8>(x_i64);\n    |               ^^^^^ expected `i8`, found `i64`\n    |\n-help: you can convert an `i64` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_i64.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -926,7 +926,7 @@ error[E0308]: mismatched types\n LL |     foo::<i8>(x_i32);\n    |               ^^^^^ expected `i8`, found `i32`\n    |\n-help: you can convert an `i32` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_i32.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -937,7 +937,7 @@ error[E0308]: mismatched types\n LL |     foo::<i8>(x_i16);\n    |               ^^^^^ expected `i8`, found `i16`\n    |\n-help: you can convert an `i16` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to an `i8` and panic if the converted value doesn't fit\n    |\n LL |     foo::<i8>(x_i16.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -948,7 +948,7 @@ error[E0308]: mismatched types\n LL |     foo::<f64>(x_usize);\n    |                ^^^^^^^ expected `f64`, found `usize`\n    |\n-help: you can cast an `usize to `f64`, producing the floating point representation of the integer,\n+help: you can cast a `usize` to an `f64`, producing the floating point representation of the integer,\n    |                                              rounded if necessary\n LL |     foo::<f64>(x_usize as f64);\n    |                ^^^^^^^^^^^^^^\n@@ -959,7 +959,7 @@ error[E0308]: mismatched types\n LL |     foo::<f64>(x_u64);\n    |                ^^^^^ expected `f64`, found `u64`\n    |\n-help: you can cast an `u64 to `f64`, producing the floating point representation of the integer,\n+help: you can cast a `u64` to an `f64`, producing the floating point representation of the integer,\n    |                                              rounded if necessary\n LL |     foo::<f64>(x_u64 as f64);\n    |                ^^^^^^^^^^^^\n@@ -970,7 +970,7 @@ error[E0308]: mismatched types\n LL |     foo::<f64>(x_u32);\n    |                ^^^^^ expected `f64`, found `u32`\n    |\n-help: you can convert an `u32` to `f64`, producing the floating point representation of the integer\n+help: you can convert a `u32` to an `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_u32.into());\n    |                ^^^^^^^^^^^^\n@@ -981,7 +981,7 @@ error[E0308]: mismatched types\n LL |     foo::<f64>(x_u16);\n    |                ^^^^^ expected `f64`, found `u16`\n    |\n-help: you can convert an `u16` to `f64`, producing the floating point representation of the integer\n+help: you can convert a `u16` to an `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_u16.into());\n    |                ^^^^^^^^^^^^\n@@ -992,7 +992,7 @@ error[E0308]: mismatched types\n LL |     foo::<f64>(x_u8);\n    |                ^^^^ expected `f64`, found `u8`\n    |\n-help: you can convert an `u8` to `f64`, producing the floating point representation of the integer\n+help: you can convert a `u8` to an `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_u8.into());\n    |                ^^^^^^^^^^^\n@@ -1003,7 +1003,7 @@ error[E0308]: mismatched types\n LL |     foo::<f64>(x_isize);\n    |                ^^^^^^^ expected `f64`, found `isize`\n    |\n-help: you can convert an `isize` to `f64`, producing the floating point representation of the integer, rounded if necessary\n+help: you can convert an `isize` to an `f64`, producing the floating point representation of the integer, rounded if necessary\n    |\n LL |     foo::<f64>(x_isize as f64);\n    |                ^^^^^^^^^^^^^^\n@@ -1014,7 +1014,7 @@ error[E0308]: mismatched types\n LL |     foo::<f64>(x_i64);\n    |                ^^^^^ expected `f64`, found `i64`\n    |\n-help: you can convert an `i64` to `f64`, producing the floating point representation of the integer, rounded if necessary\n+help: you can convert an `i64` to an `f64`, producing the floating point representation of the integer, rounded if necessary\n    |\n LL |     foo::<f64>(x_i64 as f64);\n    |                ^^^^^^^^^^^^\n@@ -1025,7 +1025,7 @@ error[E0308]: mismatched types\n LL |     foo::<f64>(x_i32);\n    |                ^^^^^ expected `f64`, found `i32`\n    |\n-help: you can convert an `i32` to `f64`, producing the floating point representation of the integer\n+help: you can convert an `i32` to an `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_i32.into());\n    |                ^^^^^^^^^^^^\n@@ -1036,7 +1036,7 @@ error[E0308]: mismatched types\n LL |     foo::<f64>(x_i16);\n    |                ^^^^^ expected `f64`, found `i16`\n    |\n-help: you can convert an `i16` to `f64`, producing the floating point representation of the integer\n+help: you can convert an `i16` to an `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_i16.into());\n    |                ^^^^^^^^^^^^\n@@ -1047,7 +1047,7 @@ error[E0308]: mismatched types\n LL |     foo::<f64>(x_i8);\n    |                ^^^^ expected `f64`, found `i8`\n    |\n-help: you can convert an `i8` to `f64`, producing the floating point representation of the integer\n+help: you can convert an `i8` to an `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(x_i8.into());\n    |                ^^^^^^^^^^^\n@@ -1059,15 +1059,15 @@ LL |     foo::<f64>(x_f32);\n    |                ^^^^^\n    |                |\n    |                expected `f64`, found `f32`\n-   |                help: you can convert an `f32` to `f64`: `x_f32.into()`\n+   |                help: you can convert an `f32` to an `f64`: `x_f32.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:266:16\n    |\n LL |     foo::<f32>(x_usize);\n    |                ^^^^^^^ expected `f32`, found `usize`\n    |\n-help: you can cast an `usize to `f32`, producing the floating point representation of the integer,\n+help: you can cast a `usize` to an `f32`, producing the floating point representation of the integer,\n    |                                              rounded if necessary\n LL |     foo::<f32>(x_usize as f32);\n    |                ^^^^^^^^^^^^^^\n@@ -1078,7 +1078,7 @@ error[E0308]: mismatched types\n LL |     foo::<f32>(x_u64);\n    |                ^^^^^ expected `f32`, found `u64`\n    |\n-help: you can cast an `u64 to `f32`, producing the floating point representation of the integer,\n+help: you can cast a `u64` to an `f32`, producing the floating point representation of the integer,\n    |                                              rounded if necessary\n LL |     foo::<f32>(x_u64 as f32);\n    |                ^^^^^^^^^^^^\n@@ -1089,7 +1089,7 @@ error[E0308]: mismatched types\n LL |     foo::<f32>(x_u32);\n    |                ^^^^^ expected `f32`, found `u32`\n    |\n-help: you can cast an `u32 to `f32`, producing the floating point representation of the integer,\n+help: you can cast a `u32` to an `f32`, producing the floating point representation of the integer,\n    |                                              rounded if necessary\n LL |     foo::<f32>(x_u32 as f32);\n    |                ^^^^^^^^^^^^\n@@ -1100,7 +1100,7 @@ error[E0308]: mismatched types\n LL |     foo::<f32>(x_u16);\n    |                ^^^^^ expected `f32`, found `u16`\n    |\n-help: you can convert an `u16` to `f32`, producing the floating point representation of the integer\n+help: you can convert a `u16` to an `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(x_u16.into());\n    |                ^^^^^^^^^^^^\n@@ -1111,7 +1111,7 @@ error[E0308]: mismatched types\n LL |     foo::<f32>(x_u8);\n    |                ^^^^ expected `f32`, found `u8`\n    |\n-help: you can convert an `u8` to `f32`, producing the floating point representation of the integer\n+help: you can convert a `u8` to an `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(x_u8.into());\n    |                ^^^^^^^^^^^\n@@ -1122,7 +1122,7 @@ error[E0308]: mismatched types\n LL |     foo::<f32>(x_isize);\n    |                ^^^^^^^ expected `f32`, found `isize`\n    |\n-help: you can convert an `isize` to `f32`, producing the floating point representation of the integer, rounded if necessary\n+help: you can convert an `isize` to an `f32`, producing the floating point representation of the integer, rounded if necessary\n    |\n LL |     foo::<f32>(x_isize as f32);\n    |                ^^^^^^^^^^^^^^\n@@ -1133,7 +1133,7 @@ error[E0308]: mismatched types\n LL |     foo::<f32>(x_i64);\n    |                ^^^^^ expected `f32`, found `i64`\n    |\n-help: you can convert an `i64` to `f32`, producing the floating point representation of the integer, rounded if necessary\n+help: you can convert an `i64` to an `f32`, producing the floating point representation of the integer, rounded if necessary\n    |\n LL |     foo::<f32>(x_i64 as f32);\n    |                ^^^^^^^^^^^^\n@@ -1144,7 +1144,7 @@ error[E0308]: mismatched types\n LL |     foo::<f32>(x_i32);\n    |                ^^^^^ expected `f32`, found `i32`\n    |\n-help: you can convert an `i32` to `f32`, producing the floating point representation of the integer, rounded if necessary\n+help: you can convert an `i32` to an `f32`, producing the floating point representation of the integer, rounded if necessary\n    |\n LL |     foo::<f32>(x_i32 as f32);\n    |                ^^^^^^^^^^^^\n@@ -1155,7 +1155,7 @@ error[E0308]: mismatched types\n LL |     foo::<f32>(x_i16);\n    |                ^^^^^ expected `f32`, found `i16`\n    |\n-help: you can convert an `i16` to `f32`, producing the floating point representation of the integer\n+help: you can convert an `i16` to an `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(x_i16.into());\n    |                ^^^^^^^^^^^^\n@@ -1166,7 +1166,7 @@ error[E0308]: mismatched types\n LL |     foo::<f32>(x_i8);\n    |                ^^^^ expected `f32`, found `i8`\n    |\n-help: you can convert an `i8` to `f32`, producing the floating point representation of the integer\n+help: you can convert an `i8` to an `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(x_i8.into());\n    |                ^^^^^^^^^^^\n@@ -1178,7 +1178,7 @@ LL |     foo::<u32>(x_u8 as u16);\n    |                ^^^^^^^^^^^\n    |                |\n    |                expected `u32`, found `u16`\n-   |                help: you can convert an `u16` to `u32`: `(x_u8 as u16).into()`\n+   |                help: you can convert a `u16` to a `u32`: `(x_u8 as u16).into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:291:16\n@@ -1187,7 +1187,7 @@ LL |     foo::<i32>(-x_i8);\n    |                ^^^^^\n    |                |\n    |                expected `i32`, found `i8`\n-   |                help: you can convert an `i8` to `i32`: `(-x_i8).into()`\n+   |                help: you can convert an `i8` to an `i32`: `(-x_i8).into()`\n \n error: aborting due to 113 previous errors\n "}, {"sha": "a62956ee8da8db7f8cc66ed6fd7cff845d577400", "filename": "src/test/ui/numeric/numeric-suffix.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-suffix.stderr?ref=78307d8700136b0a382a3921d95661a5a5675fae", "patch": "@@ -1236,7 +1236,7 @@ error[E0308]: mismatched types\n LL |     foo::<f64>(42_u32);\n    |                ^^^^^^ expected `f64`, found `u32`\n    |\n-help: you can convert an `u32` to `f64`, producing the floating point representation of the integer\n+help: you can convert a `u32` to an `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(42_u32.into());\n    |                ^^^^^^^^^^^^^\n@@ -1247,7 +1247,7 @@ error[E0308]: mismatched types\n LL |     foo::<f64>(42_u16);\n    |                ^^^^^^ expected `f64`, found `u16`\n    |\n-help: you can convert an `u16` to `f64`, producing the floating point representation of the integer\n+help: you can convert a `u16` to an `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(42_u16.into());\n    |                ^^^^^^^^^^^^^\n@@ -1258,7 +1258,7 @@ error[E0308]: mismatched types\n LL |     foo::<f64>(42_u8);\n    |                ^^^^^ expected `f64`, found `u8`\n    |\n-help: you can convert an `u8` to `f64`, producing the floating point representation of the integer\n+help: you can convert a `u8` to an `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(42_u8.into());\n    |                ^^^^^^^^^^^^\n@@ -1291,7 +1291,7 @@ error[E0308]: mismatched types\n LL |     foo::<f64>(42_i32);\n    |                ^^^^^^ expected `f64`, found `i32`\n    |\n-help: you can convert an `i32` to `f64`, producing the floating point representation of the integer\n+help: you can convert an `i32` to an `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(42_i32.into());\n    |                ^^^^^^^^^^^^^\n@@ -1302,7 +1302,7 @@ error[E0308]: mismatched types\n LL |     foo::<f64>(42_i16);\n    |                ^^^^^^ expected `f64`, found `i16`\n    |\n-help: you can convert an `i16` to `f64`, producing the floating point representation of the integer\n+help: you can convert an `i16` to an `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(42_i16.into());\n    |                ^^^^^^^^^^^^^\n@@ -1313,7 +1313,7 @@ error[E0308]: mismatched types\n LL |     foo::<f64>(42_i8);\n    |                ^^^^^ expected `f64`, found `i8`\n    |\n-help: you can convert an `i8` to `f64`, producing the floating point representation of the integer\n+help: you can convert an `i8` to an `f64`, producing the floating point representation of the integer\n    |\n LL |     foo::<f64>(42_i8.into());\n    |                ^^^^^^^^^^^^\n@@ -1368,7 +1368,7 @@ error[E0308]: mismatched types\n LL |     foo::<f32>(42_u16);\n    |                ^^^^^^ expected `f32`, found `u16`\n    |\n-help: you can convert an `u16` to `f32`, producing the floating point representation of the integer\n+help: you can convert a `u16` to an `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(42_u16.into());\n    |                ^^^^^^^^^^^^^\n@@ -1379,7 +1379,7 @@ error[E0308]: mismatched types\n LL |     foo::<f32>(42_u8);\n    |                ^^^^^ expected `f32`, found `u8`\n    |\n-help: you can convert an `u8` to `f32`, producing the floating point representation of the integer\n+help: you can convert a `u8` to an `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(42_u8.into());\n    |                ^^^^^^^^^^^^\n@@ -1423,7 +1423,7 @@ error[E0308]: mismatched types\n LL |     foo::<f32>(42_i16);\n    |                ^^^^^^ expected `f32`, found `i16`\n    |\n-help: you can convert an `i16` to `f32`, producing the floating point representation of the integer\n+help: you can convert an `i16` to an `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(42_i16.into());\n    |                ^^^^^^^^^^^^^\n@@ -1434,7 +1434,7 @@ error[E0308]: mismatched types\n LL |     foo::<f32>(42_i8);\n    |                ^^^^^ expected `f32`, found `i8`\n    |\n-help: you can convert an `i8` to `f32`, producing the floating point representation of the integer\n+help: you can convert an `i8` to an `f32`, producing the floating point representation of the integer\n    |\n LL |     foo::<f32>(42_i8.into());\n    |                ^^^^^^^^^^^^\n@@ -1457,7 +1457,7 @@ LL |     foo::<u32>(42_u8 as u16);\n    |                ^^^^^^^^^^^^\n    |                |\n    |                expected `u32`, found `u16`\n-   |                help: you can convert an `u16` to `u32`: `(42_u8 as u16).into()`\n+   |                help: you can convert a `u16` to a `u32`: `(42_u8 as u16).into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-suffix.rs:296:16\n@@ -1466,7 +1466,7 @@ LL |     foo::<i32>(-42_i8);\n    |                ^^^^^^\n    |                |\n    |                expected `i32`, found `i8`\n-   |                help: you can convert an `i8` to `i32`: `(-42_i8).into()`\n+   |                help: you can convert an `i8` to an `i32`: `(-42_i8).into()`\n \n error: aborting due to 134 previous errors\n "}, {"sha": "4064c5b3819ec0851c1ed2afaf839e4a20b2483d", "filename": "src/test/ui/proc-macro/span-preservation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr?ref=78307d8700136b0a382a3921d95661a5a5675fae", "patch": "@@ -15,7 +15,7 @@ LL |     match x {\n LL |         Some(x) => { return x },\n    |                             ^ expected `usize`, found `isize`\n    |\n-help: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n    |\n LL |         Some(x) => { return x.try_into().unwrap() },\n    |                             ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "63b70f7fcd95c35d160e99100215cd71da43f804", "filename": "src/test/ui/shift-various-bad-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Fshift-various-bad-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Fshift-various-bad-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshift-various-bad-types.stderr?ref=78307d8700136b0a382a3921d95661a5a5675fae", "patch": "@@ -30,7 +30,7 @@ LL |     let _: i32 = 22_i64 >> 1_i32;\n    |            |\n    |            expected due to this\n    |\n-help: you can convert an `i64` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to an `i32` and panic if the converted value doesn't fit\n    |\n LL |     let _: i32 = (22_i64 >> 1_i32).try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "b391cd4beb47925138299a7aa554b8bc6b2e1ad4", "filename": "src/test/ui/suggestions/type-mismatch-struct-field-shorthand-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand-2.stderr?ref=78307d8700136b0a382a3921d95661a5a5675fae", "patch": "@@ -5,7 +5,7 @@ LL |     let _ = RGB { r, g, c };\n    |                   ^\n    |                   |\n    |                   expected `f64`, found `f32`\n-   |                   help: you can convert an `f32` to `f64`: `r: r.into()`\n+   |                   help: you can convert an `f32` to an `f64`: `r: r.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch-struct-field-shorthand-2.rs:5:22\n@@ -14,7 +14,7 @@ LL |     let _ = RGB { r, g, c };\n    |                      ^\n    |                      |\n    |                      expected `f64`, found `f32`\n-   |                      help: you can convert an `f32` to `f64`: `g: g.into()`\n+   |                      help: you can convert an `f32` to an `f64`: `g: g.into()`\n \n error[E0560]: struct `RGB` has no field named `c`\n   --> $DIR/type-mismatch-struct-field-shorthand-2.rs:5:25"}, {"sha": "61ea852a8c462b061a1c85fbc9ce5cfbcbdc25de", "filename": "src/test/ui/suggestions/type-mismatch-struct-field-shorthand.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-mismatch-struct-field-shorthand.stderr?ref=78307d8700136b0a382a3921d95661a5a5675fae", "patch": "@@ -5,7 +5,7 @@ LL |     let _ = RGB { r, g, b };\n    |                   ^\n    |                   |\n    |                   expected `f64`, found `f32`\n-   |                   help: you can convert an `f32` to `f64`: `r: r.into()`\n+   |                   help: you can convert an `f32` to an `f64`: `r: r.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch-struct-field-shorthand.rs:8:22\n@@ -14,7 +14,7 @@ LL |     let _ = RGB { r, g, b };\n    |                      ^\n    |                      |\n    |                      expected `f64`, found `f32`\n-   |                      help: you can convert an `f32` to `f64`: `g: g.into()`\n+   |                      help: you can convert an `f32` to an `f64`: `g: g.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch-struct-field-shorthand.rs:8:25\n@@ -23,7 +23,7 @@ LL |     let _ = RGB { r, g, b };\n    |                         ^\n    |                         |\n    |                         expected `f64`, found `f32`\n-   |                         help: you can convert an `f32` to `f64`: `b: b.into()`\n+   |                         help: you can convert an `f32` to an `f64`: `b: b.into()`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "cff0991072103d3fe9b0a2bceb8b32b718f886c0", "filename": "src/test/ui/tail-typeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Ftail-typeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Ftail-typeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftail-typeck.stderr?ref=78307d8700136b0a382a3921d95661a5a5675fae", "patch": "@@ -6,7 +6,7 @@ LL | fn f() -> isize { return g(); }\n    |           |\n    |           expected `isize` because of return type\n    |\n-help: you can convert an `usize` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert a `usize` to an `isize` and panic if the converted value doesn't fit\n    |\n LL | fn f() -> isize { return g().try_into().unwrap(); }\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "edb48b6625ee223865ddea1cdbf506f8ec7f307b", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-projection-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection-error.stderr?ref=78307d8700136b0a382a3921d95661a5a5675fae", "patch": "@@ -7,7 +7,7 @@ LL | fn global_bound_is_hidden() -> u8\n LL |     B::get_x()\n    |     ^^^^^^^^^^ expected `u8`, found `i32`\n    |\n-help: you can convert an `i32` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to a `u8` and panic if the converted value doesn't fit\n    |\n LL |     B::get_x().try_into().unwrap()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "f9974acfb7071c2d2a359d8319b69d333b985cc1", "filename": "src/test/ui/tutorial-suffix-inference-test.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Ftutorial-suffix-inference-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Ftutorial-suffix-inference-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftutorial-suffix-inference-test.stderr?ref=78307d8700136b0a382a3921d95661a5a5675fae", "patch": "@@ -5,15 +5,15 @@ LL |     identity_u16(x);\n    |                  ^\n    |                  |\n    |                  expected `u16`, found `u8`\n-   |                  help: you can convert an `u8` to `u16`: `x.into()`\n+   |                  help: you can convert a `u8` to a `u16`: `x.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/tutorial-suffix-inference-test.rs:12:18\n    |\n LL |     identity_u16(y);\n    |                  ^ expected `u16`, found `i32`\n    |\n-help: you can convert an `i32` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     identity_u16(y.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^\n@@ -24,7 +24,7 @@ error[E0308]: mismatched types\n LL |     identity_u16(a);\n    |                  ^ expected `u16`, found `isize`\n    |\n-help: you can convert an `isize` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to a `u16` and panic if the converted value doesn't fit\n    |\n LL |     identity_u16(a.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "5498dae718f1e46605f70f7942a15b958fa6c4d2", "filename": "src/test/ui/wrong-ret-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Fwrong-ret-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78307d8700136b0a382a3921d95661a5a5675fae/src%2Ftest%2Fui%2Fwrong-ret-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrong-ret-type.stderr?ref=78307d8700136b0a382a3921d95661a5a5675fae", "patch": "@@ -6,7 +6,7 @@ LL | fn mk_int() -> usize { let i: isize = 3; return i; }\n    |                |\n    |                expected `usize` because of return type\n    |\n-help: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to a `usize` and panic if the converted value doesn't fit\n    |\n LL | fn mk_int() -> usize { let i: isize = 3; return i.try_into().unwrap(); }\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^"}]}