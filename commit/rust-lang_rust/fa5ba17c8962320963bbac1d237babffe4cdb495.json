{"sha": "fa5ba17c8962320963bbac1d237babffe4cdb495", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNWJhMTdjODk2MjMyMDk2M2JiYWMxZDIzN2JhYmZmZTRjZGI0OTU=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-03-29T19:51:10Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-04-28T16:51:14Z"}, "message": "parser comments\n\nparser comments", "tree": {"sha": "7ea49792cff8275f30aec9f8fc36a44a1757b623", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ea49792cff8275f30aec9f8fc36a44a1757b623"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa5ba17c8962320963bbac1d237babffe4cdb495", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa5ba17c8962320963bbac1d237babffe4cdb495", "html_url": "https://github.com/rust-lang/rust/commit/fa5ba17c8962320963bbac1d237babffe4cdb495", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa5ba17c8962320963bbac1d237babffe4cdb495/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b4ced8bcb39ab29ba1caaea0a44e881ccbbc9e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b4ced8bcb39ab29ba1caaea0a44e881ccbbc9e1", "html_url": "https://github.com/rust-lang/rust/commit/1b4ced8bcb39ab29ba1caaea0a44e881ccbbc9e1"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "cc580155d70cfd26f736c0f900270386fe6affcf", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fa5ba17c8962320963bbac1d237babffe4cdb495/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5ba17c8962320963bbac1d237babffe4cdb495/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=fa5ba17c8962320963bbac1d237babffe4cdb495", "patch": "@@ -62,12 +62,14 @@ impl parser_attr for Parser {\n         return attrs;\n     }\n \n+    // matches attribute = # attribute_naked\n     fn parse_attribute(&self, style: ast::attr_style) -> ast::attribute {\n         let lo = self.span.lo;\n         self.expect(&token::POUND);\n         return self.parse_attribute_naked(style, lo);\n     }\n \n+    // matches attribute_naked = [ meta_item ]\n     fn parse_attribute_naked(&self, style: ast::attr_style, lo: BytePos) ->\n         ast::attribute {\n         self.expect(&token::LBRACKET);\n@@ -86,6 +88,7 @@ impl parser_attr for Parser {\n     // is an inner attribute of the containing item or an outer attribute of\n     // the first contained item until we see the semi).\n \n+    // matches inner_attrs* outer_attr?\n     // you can make the 'next' field an Option, but the result is going to be\n     // more useful as a vector.\n     fn parse_inner_attrs_and_next(&self) ->\n@@ -134,6 +137,9 @@ impl parser_attr for Parser {\n         (inner_attrs, next_outer_attrs)\n     }\n \n+    // matches meta_item = IDENT\n+    // | IDENT = lit\n+    // | IDENT meta_seq\n     fn parse_meta_item(&self) -> @ast::meta_item {\n         let lo = self.span.lo;\n         let name = self.id_to_str(self.parse_ident());\n@@ -156,6 +162,7 @@ impl parser_attr for Parser {\n         }\n     }\n \n+    // matches meta_seq = ( COMMASEP(meta_item) )\n     fn parse_meta_seq(&self) -> ~[@ast::meta_item] {\n         copy self.parse_seq(\n             &token::LPAREN,"}, {"sha": "156289b0c3bab40571d49f8ef17b981ecf0555f9", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fa5ba17c8962320963bbac1d237babffe4cdb495/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa5ba17c8962320963bbac1d237babffe4cdb495/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=fa5ba17c8962320963bbac1d237babffe4cdb495", "patch": "@@ -870,6 +870,7 @@ pub impl Parser {\n         }\n     }\n \n+    // matches token_lit = LIT_INT | ...\n     fn lit_from_token(&self, tok: &token::Token) -> lit_ {\n         match *tok {\n             token::LIT_INT(i, it) => lit_int(i, it),\n@@ -884,6 +885,7 @@ pub impl Parser {\n         }\n     }\n \n+    // matches lit = true | false | token_lit\n     fn parse_lit(&self) -> lit {\n         let lo = self.span.lo;\n         let lit = if self.eat_keyword(&~\"true\") {\n@@ -2762,8 +2764,6 @@ pub impl Parser {\n     // matches optbounds = ( ( : ( boundseq )? )? )\n     // where   boundseq  = ( bound + boundseq ) | bound\n     // and     bound     = ( 'static ) | ty\n-    // you might want to insist on the boundseq having seen the colon, but\n-    // that's not currently in place.\n     fn parse_optional_ty_param_bounds(&self) -> @OptVec<TyParamBound> {\n         if !self.eat(&token::COLON) {\n             return @opt_vec::Empty;\n@@ -3085,6 +3085,7 @@ pub impl Parser {\n         }\n     }\n \n+    // matches fn_header = IDENT generics\n     // parse the name and optional generic types of a function header.\n     fn parse_fn_header(&self) -> (ident, ast::Generics) {\n         let id = self.parse_ident();\n@@ -3436,7 +3437,7 @@ pub impl Parser {\n         let attrs_remaining_len = attrs_remaining.len();\n \n         // looks like this code depends on the invariant that\n-        // outer attributes can't occur on view items (or macros\n+        // outer attributes can't occur on view items (or macro\n         // invocations?)\n         let mut first = true;\n         while *self.token != term {\n@@ -3449,9 +3450,9 @@ pub impl Parser {\n                    attrs);\n             match self.parse_item_or_view_item(\n                 /*bad*/ copy attrs,\n-                true,\n-                false,\n-                true\n+                true, // items allowed\n+                false, // foreign items allowed\n+                true // macros allowed\n             ) {\n               iovi_item(item) => items.push(item),\n               iovi_view_item(view_item) => {\n@@ -3706,6 +3707,7 @@ pub impl Parser {\n         }\n     }\n \n+    // parse extern mod foo { ... } or extern { ... }\n     fn parse_item_foreign_mod(&self,\n                               lo: BytePos,\n                               opt_abis: Option<AbiSet>,"}, {"sha": "a401d9eb8ace77fdcbd06de7796ea0e1ae3f76e8", "filename": "src/libsyntax/syntax.rc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fa5ba17c8962320963bbac1d237babffe4cdb495/src%2Flibsyntax%2Fsyntax.rc", "raw_url": "https://github.com/rust-lang/rust/raw/fa5ba17c8962320963bbac1d237babffe4cdb495/src%2Flibsyntax%2Fsyntax.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsyntax.rc?ref=fa5ba17c8962320963bbac1d237babffe4cdb495", "patch": "@@ -8,6 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+/*! This module contains the Rust parser. It maps source text\n+ *  to token trees and to ASTs. It contains code for expanding\n+ *  macros.\n+ */\n+\n #[link(name = \"syntax\",\n        vers = \"0.7-pre\",\n        uuid = \"9311401b-d6ea-4cd9-a1d9-61f89499c645\")];"}]}