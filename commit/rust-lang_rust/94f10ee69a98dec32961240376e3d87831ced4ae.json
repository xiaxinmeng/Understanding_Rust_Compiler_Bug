{"sha": "94f10ee69a98dec32961240376e3d87831ced4ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ZjEwZWU2OWE5OGRlYzMyOTYxMjQwMzc2ZTNkODc4MzFjZWQ0YWU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-29T03:09:24Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-29T03:09:24Z"}, "message": "Merge pull request #808 from mcarton/copies\n\nFix false positive in `MATCH_SAME_ARMS` and guards", "tree": {"sha": "457563e2a1b312fe84b632ca86b0ab31551ae783", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/457563e2a1b312fe84b632ca86b0ab31551ae783"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94f10ee69a98dec32961240376e3d87831ced4ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94f10ee69a98dec32961240376e3d87831ced4ae", "html_url": "https://github.com/rust-lang/rust/commit/94f10ee69a98dec32961240376e3d87831ced4ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94f10ee69a98dec32961240376e3d87831ced4ae/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cbfa5dbc983c1c12f64f8de5166e1babbf56cb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cbfa5dbc983c1c12f64f8de5166e1babbf56cb5", "html_url": "https://github.com/rust-lang/rust/commit/9cbfa5dbc983c1c12f64f8de5166e1babbf56cb5"}, {"sha": "0939f5a2ec9797c9277b2dabd578429264da0498", "url": "https://api.github.com/repos/rust-lang/rust/commits/0939f5a2ec9797c9277b2dabd578429264da0498", "html_url": "https://github.com/rust-lang/rust/commit/0939f5a2ec9797c9277b2dabd578429264da0498"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "2de034f83c2703cb95078a06934e1507b85c3df3", "filename": "src/copies.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94f10ee69a98dec32961240376e3d87831ced4ae/src%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f10ee69a98dec32961240376e3d87831ced4ae/src%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcopies.rs?ref=94f10ee69a98dec32961240376e3d87831ced4ae", "patch": "@@ -132,13 +132,15 @@ fn lint_match_arms(cx: &LateContext, expr: &Expr) {\n     };\n \n     let eq = |lhs: &Arm, rhs: &Arm| -> bool {\n-        SpanlessEq::new(cx).eq_expr(&lhs.body, &rhs.body) &&\n+        // Arms with a guard are ignored, those can\u2019t always be merged together\n+        lhs.guard.is_none() && rhs.guard.is_none() &&\n+            SpanlessEq::new(cx).eq_expr(&lhs.body, &rhs.body) &&\n             // all patterns should have the same bindings\n             bindings(cx, &lhs.pats[0]) == bindings(cx, &rhs.pats[0])\n     };\n \n     if let ExprMatch(_, ref arms, MatchSource::Normal) = expr.node {\n-        if let Some((i, j)) = search_same(&**arms, hash, eq) {\n+        if let Some((i, j)) = search_same(&arms, hash, eq) {\n             span_note_and_lint(cx,\n                                MATCH_SAME_ARMS,\n                                j.body.span,"}, {"sha": "68756a57cc75ee21c5dd4e88555d87bb5dab7253", "filename": "tests/compile-fail/copies.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/94f10ee69a98dec32961240376e3d87831ced4ae/tests%2Fcompile-fail%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f10ee69a98dec32961240376e3d87831ced4ae/tests%2Fcompile-fail%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopies.rs?ref=94f10ee69a98dec32961240376e3d87831ced4ae", "patch": "@@ -142,12 +142,23 @@ fn if_same_then_else() -> Result<&'static str, ()> {\n         _ => true,\n     };\n \n+    let _ = match Some(42) {\n+        Some(_) => 24,\n+        None => 24,\n+    };\n+\n     let _ = match Some(42) {\n         Some(42) => 24,\n         Some(a) => 24, // bindings are different\n         None => 0,\n     };\n \n+    let _ = match Some(42) {\n+        Some(a) if a > 0 => 24,\n+        Some(a) => 24, // one arm has a guard\n+        None => 0,\n+    };\n+\n     match (Some(42), Some(42)) {\n         (Some(a), None) => bar(a),\n         (None, Some(a)) => bar(a), //~ERROR this `match` has identical arm bodies"}]}