{"sha": "9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "node_id": "C_kwDOAAsO6NoAKDlhZWVkNmI5YmZlYTQyZTRhNTgwYWQ2ZTcyODliNGZjNzJiNDM2NWM", "commit": {"author": {"name": "Serial", "email": "69764315+Serial-ATA@users.noreply.github.com", "date": "2022-06-05T19:24:41Z"}, "committer": {"name": "Serial", "email": "69764315+Serial-ATA@users.noreply.github.com", "date": "2022-06-05T20:03:18Z"}, "message": "Improve lint doc consistency", "tree": {"sha": "6b462ae48f74175cf1efdd87d013582f9051531d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b462ae48f74175cf1efdd87d013582f9051531d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "html_url": "https://github.com/rust-lang/rust/commit/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/comments", "author": {"login": "Serial-ATA", "id": 69764315, "node_id": "MDQ6VXNlcjY5NzY0MzE1", "avatar_url": "https://avatars.githubusercontent.com/u/69764315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Serial-ATA", "html_url": "https://github.com/Serial-ATA", "followers_url": "https://api.github.com/users/Serial-ATA/followers", "following_url": "https://api.github.com/users/Serial-ATA/following{/other_user}", "gists_url": "https://api.github.com/users/Serial-ATA/gists{/gist_id}", "starred_url": "https://api.github.com/users/Serial-ATA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Serial-ATA/subscriptions", "organizations_url": "https://api.github.com/users/Serial-ATA/orgs", "repos_url": "https://api.github.com/users/Serial-ATA/repos", "events_url": "https://api.github.com/users/Serial-ATA/events{/privacy}", "received_events_url": "https://api.github.com/users/Serial-ATA/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Serial-ATA", "id": 69764315, "node_id": "MDQ6VXNlcjY5NzY0MzE1", "avatar_url": "https://avatars.githubusercontent.com/u/69764315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Serial-ATA", "html_url": "https://github.com/Serial-ATA", "followers_url": "https://api.github.com/users/Serial-ATA/followers", "following_url": "https://api.github.com/users/Serial-ATA/following{/other_user}", "gists_url": "https://api.github.com/users/Serial-ATA/gists{/gist_id}", "starred_url": "https://api.github.com/users/Serial-ATA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Serial-ATA/subscriptions", "organizations_url": "https://api.github.com/users/Serial-ATA/orgs", "repos_url": "https://api.github.com/users/Serial-ATA/repos", "events_url": "https://api.github.com/users/Serial-ATA/events{/privacy}", "received_events_url": "https://api.github.com/users/Serial-ATA/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e52dee6467fb5c1602e7ac65b7e8a2e143ab5c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e52dee6467fb5c1602e7ac65b7e8a2e143ab5c6", "html_url": "https://github.com/rust-lang/rust/commit/3e52dee6467fb5c1602e7ac65b7e8a2e143ab5c6"}], "stats": {"total": 1048, "additions": 621, "deletions": 427}, "files": [{"sha": "2705ffffdcbff9480403fbf37d2ddbc157251809", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -14,9 +14,6 @@ declare_clippy_lint! {\n     /// Will be optimized out by the compiler or should probably be replaced by a\n     /// `panic!()` or `unreachable!()`\n     ///\n-    /// ### Known problems\n-    /// None\n-    ///\n     /// ### Example\n     /// ```rust,ignore\n     /// assert!(false)"}, {"sha": "aef21bfc36c9eb3ca7354aa2af953b47e334487d", "filename": "clippy_lints/src/async_yields_async.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fasync_yields_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fasync_yields_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fasync_yields_async.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -24,6 +24,7 @@ declare_clippy_lint! {\n     ///   };\n     /// }\n     /// ```\n+    ///\n     /// Use instead:\n     /// ```rust\n     /// async fn foo() {}"}, {"sha": "eee5f90d178852368c1237a2a7c898ae78cdbee4", "filename": "clippy_lints/src/await_holding_invalid.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -140,8 +140,6 @@ declare_clippy_lint! {\n     /// from a memory access perspective but will cause bugs at runtime if they\n     /// are held in such a way.\n     ///\n-    /// ### Known problems\n-    ///\n     /// ### Example\n     ///\n     /// ```toml"}, {"sha": "95abe8aa59fbe141e12aff88ad555514adcecfcf", "filename": "clippy_lints/src/bool_assert_comparison.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -17,11 +17,12 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// assert_eq!(\"a\".is_empty(), false);\n     /// assert_ne!(\"a\".is_empty(), true);\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// assert!(!\"a\".is_empty());\n     /// ```\n     #[clippy::version = \"1.53.0\"]"}, {"sha": "1582ec9ee5ce6e21776768a16d4b4159c0450795", "filename": "clippy_lints/src/borrow_deref_ref.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fborrow_deref_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fborrow_deref_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fborrow_deref_ref.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -18,7 +18,7 @@ declare_clippy_lint! {\n     /// Dereferencing and then borrowing a reference value has no effect in most cases.\n     ///\n     /// ### Known problems\n-    /// false negative on such code:\n+    /// False negative on such code:\n     /// ```\n     /// let x = &12;\n     /// let addr_x = &x as *const _ as usize;\n@@ -29,17 +29,20 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n+    /// fn foo(_x: &str) {}\n+    ///\n     /// let s = &String::new();\n     ///\n-    /// // Bad\n     /// let a: &String = &* s;\n     /// foo(&*s);\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # fn foo(_x: &str) {}\n+    /// # let s = &String::new();\n     /// let a: &String = s;\n     /// foo(&**s);\n-    ///\n-    /// fn foo(_: &str){ }\n     /// ```\n     #[clippy::version = \"1.59.0\"]\n     pub BORROW_DEREF_REF,"}, {"sha": "fe8e372b6f50c8c5c019d33a00e77760221cc017", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 30, "deletions": 16, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -219,13 +219,16 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// fn fun() -> i32 { 1 }\n-    /// let a = fun as i64;\n+    /// # let _ =\n+    /// fun as i64;\n+    /// ```\n     ///\n-    /// // Good\n-    /// fn fun2() -> i32 { 1 }\n-    /// let a = fun2 as usize;\n+    /// Use instead:\n+    /// ```rust\n+    /// # fn fun() -> i32 { 1 }\n+    /// # let _ =\n+    /// fun as usize;\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub FN_TO_NUMERIC_CAST,\n@@ -245,17 +248,20 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// fn fn1() -> i16 {\n     ///     1\n     /// };\n-    /// let _ = fn1 as i32;\n+    /// # let _ =\n+    /// fn1 as i32;\n+    /// ```\n     ///\n-    /// // Better: Cast to usize first, then comment with the reason for the truncation\n-    /// fn fn2() -> i16 {\n+    /// Use instead:\n+    /// ```rust\n+    /// // Cast to usize first, then comment with the reason for the truncation\n+    /// fn fn1() -> i16 {\n     ///     1\n     /// };\n-    /// let fn_ptr = fn2 as usize;\n+    /// let fn_ptr = fn1 as usize;\n     /// let fn_ptr_truncated = fn_ptr as i32;\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -277,23 +283,31 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad: fn1 is cast as `usize`\n+    /// // fn1 is cast as `usize`\n     /// fn fn1() -> u16 {\n     ///     1\n     /// };\n-    /// let _ = fn1 as usize;\n+    /// # let _ =\n+    /// fn1 as usize;\n+    /// ```\n     ///\n-    /// // Good: maybe you intended to call the function?\n+    /// Use instead:\n+    /// ```rust\n+    /// // maybe you intended to call the function?\n     /// fn fn2() -> u16 {\n     ///     1\n     /// };\n-    /// let _ = fn2() as usize;\n+    /// # let _ =\n+    /// fn2() as usize;\n+    ///\n+    /// // or\n     ///\n-    /// // Good: maybe you intended to cast it to a function type?\n+    /// // maybe you intended to cast it to a function type?\n     /// fn fn3() -> u16 {\n     ///     1\n     /// }\n-    /// let _ = fn3 as fn() -> u16;\n+    /// # let _ =\n+    /// fn3 as fn() -> u16;\n     /// ```\n     #[clippy::version = \"1.58.0\"]\n     pub FN_TO_NUMERIC_CAST_ANY,"}, {"sha": "a05b41eb3ab52f72441b53a75dcadfdfa167b1e6", "filename": "clippy_lints/src/comparison_chain.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fcomparison_chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fcomparison_chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcomparison_chain.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -35,7 +35,6 @@ declare_clippy_lint! {\n     /// ```\n     ///\n     /// Use instead:\n-    ///\n     /// ```rust,ignore\n     /// use std::cmp::Ordering;\n     /// # fn a() {}"}, {"sha": "fe9f4f9ae3cb9f08ebeef9e3d586fb45650dc3ab", "filename": "clippy_lints/src/dbg_macro.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdbg_macro.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -18,10 +18,11 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust,ignore\n-    /// // Bad\n     /// dbg!(true)\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust,ignore\n     /// true\n     /// ```\n     #[clippy::version = \"1.34.0\"]"}, {"sha": "d99a1aa2969461a40153b91b10933b57b264e794", "filename": "clippy_lints/src/default.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -18,15 +18,16 @@ declare_clippy_lint! {\n     /// Checks for literal calls to `Default::default()`.\n     ///\n     /// ### Why is this bad?\n-    /// It's more clear to the reader to use the name of the type whose default is\n-    /// being gotten than the generic `Default`.\n+    /// It's easier for the reader if the name of the type is used, rather than the\n+    /// generic `Default`.\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// let s: String = Default::default();\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// let s = String::default();\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -47,13 +48,13 @@ declare_clippy_lint! {\n     /// Assignments to patterns that are of tuple type are not linted.\n     ///\n     /// ### Example\n-    /// Bad:\n     /// ```\n     /// # #[derive(Default)]\n     /// # struct A { i: i32 }\n     /// let mut a: A = Default::default();\n     /// a.i = 42;\n     /// ```\n+    ///\n     /// Use instead:\n     /// ```\n     /// # #[derive(Default)]"}, {"sha": "dee83e60d7e54037d02b43a05581439ae14de7dd", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -30,13 +30,14 @@ declare_clippy_lint! {\n     /// let a: &mut String = &mut String::from(\"foo\");\n     /// let b: &str = a.deref();\n     /// ```\n-    /// Could be written as:\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// let a: &mut String = &mut String::from(\"foo\");\n     /// let b = &*a;\n     /// ```\n     ///\n-    /// This lint excludes\n+    /// This lint excludes:\n     /// ```rust,ignore\n     /// let _ = d.unwrap().deref();\n     /// ```\n@@ -59,11 +60,13 @@ declare_clippy_lint! {\n     /// ```rust\n     /// fn fun(_a: &i32) {}\n     ///\n-    /// // Bad\n     /// let x: &i32 = &&&&&&5;\n     /// fun(&x);\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # fn fun(_a: &i32) {}\n     /// let x: &i32 = &5;\n     /// fun(x);\n     /// ```\n@@ -82,13 +85,14 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// let x = Some(\"\");\n     /// if let Some(ref x) = x {\n     ///     // use `x` here\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// let x = Some(\"\");\n     /// if let Some(x) = x {\n     ///     // use `&x` here"}, {"sha": "4d7f4076d7b5134b85e08e04b254e420971f964f", "filename": "clippy_lints/src/derivable_impls.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fderivable_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fderivable_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderivable_impls.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -30,8 +30,7 @@ declare_clippy_lint! {\n     /// }\n     /// ```\n     ///\n-    /// Could be written as:\n-    ///\n+    /// Use instead:\n     /// ```rust\n     /// #[derive(Default)]\n     /// struct Foo {\n@@ -45,7 +44,6 @@ declare_clippy_lint! {\n     /// specialized than what derive will produce. This lint can't detect the manual `impl`\n     /// has exactly equal bounds, and therefore this lint is disabled for types with\n     /// generic parameters.\n-    ///\n     #[clippy::version = \"1.57.0\"]\n     pub DERIVABLE_IMPLS,\n     complexity,"}, {"sha": "23b7510457091eac7c8a9c50e74ac615db2f76e5", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -60,7 +60,8 @@ declare_clippy_lint! {\n     ///     struct BlackForestCake;\n     /// }\n     /// ```\n-    /// Could be written as:\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// mod cake {\n     ///     struct BlackForest;"}, {"sha": "2f4c90d07cf666c9dede8ea2bbba5b1bddeaf5f2", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -52,15 +52,13 @@ declare_clippy_lint! {\n     /// ### Why is this bad?\n     /// It is more idiomatic to dereference the other argument.\n     ///\n-    /// ### Known problems\n-    /// None\n-    ///\n     /// ### Example\n-    /// ```ignore\n-    /// // Bad\n+    /// ```rust,ignore\n     /// &x == y\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust,ignore\n     /// x == *y\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]"}, {"sha": "aa537aa90eca96b826cebea8fe82fddd0176e2a3", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -34,14 +34,14 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust,ignore\n-    /// // Bad\n     /// xs.map(|x| foo(x))\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust,ignore\n+    /// // where `foo(_)` is a plain function that takes the exact argument type of `x`.\n     /// xs.map(foo)\n     /// ```\n-    /// where `foo(_)` is a plain function that takes the exact argument type of\n-    /// `x`.\n     #[clippy::version = \"pre 1.29.0\"]\n     pub REDUNDANT_CLOSURE,\n     style,"}, {"sha": "f7a92bc0795672631544d48d72304131ca875d21", "filename": "clippy_lints/src/excessive_bools.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_bools.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -54,12 +54,11 @@ declare_clippy_lint! {\n     /// API easier to use.\n     ///\n     /// ### Example\n-    /// Bad:\n     /// ```rust,ignore\n     /// fn f(is_round: bool, is_hot: bool) { ... }\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust,ignore\n     /// enum Shape {\n     ///     Round,"}, {"sha": "f2e0798096378a3a0eeb9c9e9196e8f639bf03e3", "filename": "clippy_lints/src/float_literal.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Ffloat_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Ffloat_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloat_literal.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -45,10 +45,11 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// let _: f32 = 16_777_217.0; // 16_777_216.0\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// let _: f32 = 16_777_216.0;\n     /// let _: f64 = 16_777_217.0;\n     /// ```"}, {"sha": "73261fb8a44c7c9ed0891bdb971b3f40a8edcaa9", "filename": "clippy_lints/src/functions/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmod.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -76,12 +76,13 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust,ignore\n-    /// // Bad\n     /// pub fn foo(x: *const u8) {\n     ///     println!(\"{}\", unsafe { *x });\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust,ignore\n     /// pub unsafe fn foo(x: *const u8) {\n     ///     println!(\"{}\", unsafe { *x });\n     /// }"}, {"sha": "529f7babaa5eab516e5f2a7744f4d31cef4afd4a", "filename": "clippy_lints/src/get_first.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fget_first.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fget_first.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fget_first.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -20,13 +20,12 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// let x = vec![2, 3, 5];\n     /// let first_element = x.get(0);\n     /// ```\n+    ///\n     /// Use instead:\n     /// ```rust\n-    /// // Good\n     /// let x = vec![2, 3, 5];\n     /// let first_element = x.first();\n     /// ```"}, {"sha": "9d858e0c2120a6aaa4e1b1509f81f8fbb1d8a70d", "filename": "clippy_lints/src/implicit_saturating_sub.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -16,17 +16,15 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// let end: u32 = 10;\n-    /// let start: u32 = 5;\n-    ///\n-    /// let mut i: u32 = end - start;\n-    ///\n-    /// // Bad\n+    /// # let mut i: u32 = 0;\n     /// if i != 0 {\n     ///     i -= 1;\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let mut i: u32 = 0;\n     /// i = i.saturating_sub(1);\n     /// ```\n     #[clippy::version = \"1.44.0\"]\n@@ -48,7 +46,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitSaturatingSub {\n             // Check if the conditional expression is a binary operation\n             if let ExprKind::Binary(ref cond_op, cond_left, cond_right) = cond.kind;\n \n-            // Ensure that the binary operator is >, != and <\n+            // Ensure that the binary operator is >, !=, or <\n             if BinOpKind::Ne == cond_op.node || BinOpKind::Gt == cond_op.node || BinOpKind::Lt == cond_op.node;\n \n             // Check if assign operation is done"}, {"sha": "301686612a1b19c62960a0da1f2a636c8c291ed4", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 19, "deletions": 26, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -17,19 +17,20 @@ declare_clippy_lint! {\n     /// ### Why is this bad?\n     /// This will always panic at runtime.\n     ///\n-    /// ### Known problems\n-    /// Hopefully none.\n-    ///\n     /// ### Example\n-    /// ```no_run\n+    /// ```rust,no_run\n     /// # #![allow(const_err)]\n     /// let x = [1, 2, 3, 4];\n     ///\n-    /// // Bad\n     /// x[9];\n     /// &x[2..9];\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// # let x = [1, 2, 3, 4];\n+    /// // Index within bounds\n     ///\n-    /// // Good\n     /// x[0];\n     /// x[3];\n     /// ```\n@@ -49,42 +50,34 @@ declare_clippy_lint! {\n     /// Indexing and slicing can panic at runtime and there are\n     /// safe alternatives.\n     ///\n-    /// ### Known problems\n-    /// Hopefully none.\n-    ///\n     /// ### Example\n     /// ```rust,no_run\n     /// // Vector\n     /// let x = vec![0; 5];\n     ///\n-    /// // Bad\n     /// x[2];\n     /// &x[2..100];\n-    /// &x[2..];\n-    /// &x[..100];\n-    ///\n-    /// // Good\n-    /// x.get(2);\n-    /// x.get(2..100);\n-    /// x.get(2..);\n-    /// x.get(..100);\n     ///\n     /// // Array\n     /// let y = [0, 1, 2, 3];\n     ///\n-    /// // Bad\n     /// &y[10..100];\n     /// &y[10..];\n-    /// &y[..100];\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// # let x = vec![0; 5];\n+    /// # let y = [0, 1, 2, 3];\n+    /// # let _ =\n+    /// x.get(2);\n+    /// # let _ =\n+    /// x.get(2..100);\n     ///\n-    /// // Good\n-    /// &y[2..];\n-    /// &y[..2];\n-    /// &y[0..3];\n+    /// # let _ =\n     /// y.get(10);\n+    /// # let _ =\n     /// y.get(10..100);\n-    /// y.get(10..);\n-    /// y.get(..100);\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub INDEXING_SLICING,"}, {"sha": "fc8e473dd9e85dea29e0da794073515e9fba8f77", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -41,6 +41,7 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust\n     /// let infinite_iter = 0..;\n+    /// # let _ =\n     /// [0..].iter().zip(infinite_iter.take_while(|x| *x > 5));\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]"}, {"sha": "39f68a8a1b48081382121f15034330f162fb1faf", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -14,12 +14,8 @@ declare_clippy_lint! {\n     /// ### Why is this bad?\n     /// This method is also implicitly defined if a type implements the `Display` trait. As the functionality of `Display` is much more versatile, it should be preferred.\n     ///\n-    /// ### Known problems\n-    /// None\n-    ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// pub struct A;\n     ///\n     /// impl A {\n@@ -29,8 +25,8 @@ declare_clippy_lint! {\n     /// }\n     /// ```\n     ///\n+    /// Use instead:\n     /// ```rust\n-    /// // Good\n     /// use std::fmt;\n     ///\n     /// pub struct A;\n@@ -54,12 +50,8 @@ declare_clippy_lint! {\n     /// ### Why is this bad?\n     /// This method is also implicitly defined if a type implements the `Display` trait. The less versatile inherent method will then shadow the implementation introduced by `Display`.\n     ///\n-    /// ### Known problems\n-    /// None\n-    ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// use std::fmt;\n     ///\n     /// pub struct A;\n@@ -77,8 +69,8 @@ declare_clippy_lint! {\n     /// }\n     /// ```\n     ///\n+    /// Use instead:\n     /// ```rust\n-    /// // Good\n     /// use std::fmt;\n     ///\n     /// pub struct A;"}, {"sha": "9a944def3eb22e6c1eca93de5aba4076af9065a8", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -21,8 +21,7 @@ declare_clippy_lint! {\n     /// if x >= y + 1 {}\n     /// ```\n     ///\n-    /// Could be written as:\n-    ///\n+    /// Use instead:\n     /// ```rust\n     /// # let x = 1;\n     /// # let y = 1;"}, {"sha": "3effba5682607a241c208124760c2905a25c1997", "filename": "clippy_lints/src/integer_division.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Finteger_division.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Finteger_division.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finteger_division.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -15,11 +15,12 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// let x = 3 / 2;\n     /// println!(\"{}\", x);\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// let x = 3f32 / 2f32;\n     /// println!(\"{}\", x);\n     /// ```"}, {"sha": "46d439b4497e1444d2dcf12b331fa7b197cbefb2", "filename": "clippy_lints/src/items_after_statements.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fitems_after_statements.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -17,7 +17,6 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// fn foo() {\n     ///     println!(\"cake\");\n     /// }\n@@ -31,8 +30,8 @@ declare_clippy_lint! {\n     /// }\n     /// ```\n     ///\n+    /// Use instead:\n     /// ```rust\n-    /// // Good\n     /// fn foo() {\n     ///     println!(\"cake\");\n     /// }"}, {"sha": "0b972bc3916013048c9c0ae06e3dcb3e1da2ca8e", "filename": "clippy_lints/src/large_const_arrays.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_const_arrays.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -21,10 +21,11 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust,ignore\n-    /// // Bad\n     /// pub const a = [0u32; 1_000_000];\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust.ignore\n     /// pub static a = [0u32; 1_000_000];\n     /// ```\n     #[clippy::version = \"1.44.0\"]"}, {"sha": "9be057bcf901f5255564173d5b8ea446b800cd61", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -38,12 +38,14 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// enum Test {\n     ///     A(i32),\n     ///     B([i32; 8000]),\n     /// }\n+    /// ```\n     ///\n+    /// Use instead:\n+    /// ```rust\n     /// // Possibly better\n     /// enum Test2 {\n     ///     A(i32),"}, {"sha": "26c540e2223b1b08ced6de4ad78494fbe7b0b305", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -45,13 +45,11 @@ declare_clippy_lint! {\n     /// `std::mem::drop` conveys your intention better and is less error-prone.\n     ///\n     /// ### Example\n-    ///\n-    /// Bad:\n     /// ```rust,ignore\n     /// let _ = mutex.lock();\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust,ignore\n     /// let _lock = mutex.lock();\n     /// ```\n@@ -75,24 +73,20 @@ declare_clippy_lint! {\n     /// better and is less error-prone.\n     ///\n     /// ### Example\n-    ///\n-    /// Bad:\n-    /// ```rust,ignore\n-    /// struct Droppable;\n-    /// impl Drop for Droppable {\n-    ///     fn drop(&mut self) {}\n-    /// }\n+    /// ```rust\n+    /// # struct DroppableItem;\n     /// {\n-    ///     let _ = Droppable;\n-    ///     //               ^ dropped here\n+    ///     let _ = DroppableItem;\n+    ///     //                   ^ dropped here\n     ///     /* more code */\n     /// }\n     /// ```\n     ///\n-    /// Good:\n-    /// ```rust,ignore\n+    /// Use instead:\n+    /// ```rust\n+    /// # struct DroppableItem;\n     /// {\n-    ///     let _droppable = Droppable;\n+    ///     let _droppable = DroppableItem;\n     ///     /* more code */\n     ///     // dropped at end of scope\n     /// }"}, {"sha": "85f7ff149d119e54e0b8d87c6481b921a350764f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -88,10 +88,11 @@ use rustc_session::Session;\n ///     ///\n ///     /// ### Example\n ///     /// ```rust\n-///     /// // Bad\n ///     /// Insert a short example of code that triggers the lint\n+///     /// ```\n ///     ///\n-///     /// // Good\n+///     /// Use instead:\n+///     /// ```rust\n ///     /// Insert a short example of improved code that doesn't trigger the lint\n ///     /// ```\n ///     pub LINT_NAME,"}, {"sha": "93f5663312f2e23293a0008e97e0bd63517513b7", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -36,12 +36,14 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad: unnecessary lifetime annotations\n+    /// // Unnecessary lifetime annotations\n     /// fn in_and_out<'a>(x: &'a u8, y: u8) -> &'a u8 {\n     ///     x\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// fn elided(x: &u8, y: u8) -> &u8 {\n     ///     x\n     /// }\n@@ -65,12 +67,14 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad: unnecessary lifetimes\n+    /// // unnecessary lifetimes\n     /// fn unused_lifetime<'a>(x: u8) {\n     ///     // ..\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// fn no_lifetime(x: u8) {\n     ///     // ...\n     /// }"}, {"sha": "cbd084c41687c23e7d1fa256bd8cbb836a989467", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -22,11 +22,16 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n-    /// let x: u64 = 61864918973511;\n+    /// # let _: u64 =\n+    /// 61864918973511\n+    /// # ;\n+    /// ```\n     ///\n-    /// // Good\n-    /// let x: u64 = 61_864_918_973_511;\n+    /// Use instead:\n+    /// ```rust\n+    /// # let _: u64 =\n+    /// 61_864_918_973_511\n+    /// # ;\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub UNREADABLE_LITERAL,\n@@ -66,11 +71,16 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n-    /// let x: u64 = 618_64_9189_73_511;\n+    /// # let _: u64 =\n+    /// 618_64_9189_73_511\n+    /// # ;\n+    /// ```\n     ///\n-    /// // Good\n-    /// let x: u64 = 61_864_918_973_511;\n+    /// Use instead:\n+    /// ```rust\n+    /// # let _: u64 =\n+    /// 61_864_918_973_511\n+    /// # ;\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub INCONSISTENT_DIGIT_GROUPING,\n@@ -125,9 +135,11 @@ declare_clippy_lint! {\n     /// readable than a decimal representation.\n     ///\n     /// ### Example\n+    /// ```text\n     /// `255` => `0xFF`\n     /// `65_535` => `0xFFFF`\n     /// `4_042_322_160` => `0xF0F0_F0F0`\n+    /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub DECIMAL_LITERAL_REPRESENTATION,\n     restriction,"}, {"sha": "acf974c586a2d1ad8648349da4e386cc93672ce7", "filename": "clippy_lints/src/loops/mod.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmod.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -42,7 +42,8 @@ declare_clippy_lint! {\n     ///     dst[i + 64] = src[i];\n     /// }\n     /// ```\n-    /// Could be written as:\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// # let src = vec![1];\n     /// # let mut dst = vec![0; 65];\n@@ -70,7 +71,8 @@ declare_clippy_lint! {\n     ///     println!(\"{}\", vec[i]);\n     /// }\n     /// ```\n-    /// Could be written as:\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// let vec = vec!['a', 'b', 'c'];\n     /// for i in vec {\n@@ -103,7 +105,8 @@ declare_clippy_lint! {\n     ///     // ..\n     /// }\n     /// ```\n-    /// can be rewritten to\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// # let y = vec![1];\n     /// for x in &y {\n@@ -286,7 +289,8 @@ declare_clippy_lint! {\n     ///     i += 1;\n     /// }\n     /// ```\n-    /// Could be written as\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// # let v = vec![1];\n     /// # fn bar(bar: usize, baz: usize) {}\n@@ -473,7 +477,7 @@ declare_clippy_lint! {\n     ///\n     /// ### Why is this bad?\n     /// This kind of operation can be expressed more succinctly with\n-    /// `vec![item;SIZE]` or `vec.resize(NEW_SIZE, item)` and using these alternatives may also\n+    /// `vec![item; SIZE]` or `vec.resize(NEW_SIZE, item)` and using these alternatives may also\n     /// have better performance.\n     ///\n     /// ### Example\n@@ -488,7 +492,8 @@ declare_clippy_lint! {\n     ///     vec.push(item2);\n     /// }\n     /// ```\n-    /// could be written as\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// let item1 = 2;\n     /// let item2 = 3;\n@@ -516,7 +521,8 @@ declare_clippy_lint! {\n     ///     println!(\"{}\", item);\n     /// }\n     /// ```\n-    /// could be written as\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// let item1 = 2;\n     /// let item = &item1;"}, {"sha": "3e765173fb9f35aec10ca7b3d8379a0fde7dbc74", "filename": "clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 45, "deletions": 23, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -43,13 +43,16 @@ declare_clippy_lint! {\n     /// ```rust\n     /// # fn bar(stool: &str) {}\n     /// # let x = Some(\"abc\");\n-    /// // Bad\n     /// match x {\n     ///     Some(ref foo) => bar(foo),\n     ///     _ => (),\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # fn bar(stool: &str) {}\n+    /// # let x = Some(\"abc\");\n     /// if let Some(ref foo) = x {\n     ///     bar(foo);\n     /// }\n@@ -114,14 +117,15 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust,ignore\n-    /// // Bad\n     /// match x {\n     ///     &A(ref y) => foo(y),\n     ///     &B => bar(),\n     ///     _ => frob(&x),\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust,ignore\n     /// match *x {\n     ///     A(ref y) => foo(y),\n     ///     B => bar(),\n@@ -227,13 +231,16 @@ declare_clippy_lint! {\n     /// ```rust\n     /// let x: Option<()> = None;\n     ///\n-    /// // Bad\n     /// let r: Option<&()> = match x {\n     ///     None => None,\n     ///     Some(ref v) => Some(v),\n     /// };\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// let x: Option<()> = None;\n     ///\n-    /// // Good\n     /// let r: Option<&()> = x.as_ref();\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -257,13 +264,16 @@ declare_clippy_lint! {\n     /// ```rust\n     /// # enum Foo { A(usize), B(usize) }\n     /// # let x = Foo::B(1);\n-    /// // Bad\n     /// match x {\n     ///     Foo::A(_) => {},\n     ///     _ => {},\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # enum Foo { A(usize), B(usize) }\n+    /// # let x = Foo::B(1);\n     /// match x {\n     ///     Foo::A(_) => {},\n     ///     Foo::B(_) => {},\n@@ -290,14 +300,17 @@ declare_clippy_lint! {\n     /// ```rust\n     /// # enum Foo { A, B, C }\n     /// # let x = Foo::B;\n-    /// // Bad\n     /// match x {\n     ///     Foo::A => {},\n     ///     Foo::B => {},\n     ///     _ => {},\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # enum Foo { A, B, C }\n+    /// # let x = Foo::B;\n     /// match x {\n     ///     Foo::A => {},\n     ///     Foo::B => {},\n@@ -320,14 +333,17 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n-    /// match \"foo\" {\n+    /// # let s = \"foo\";\n+    /// match s {\n     ///     \"a\" => {},\n     ///     \"bar\" | _ => {},\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n-    /// match \"foo\" {\n+    /// Use instead:\n+    /// ```rust\n+    /// # let s = \"foo\";\n+    /// match s {\n     ///     \"a\" => {},\n     ///     _ => {},\n     /// }\n@@ -389,15 +405,17 @@ declare_clippy_lint! {\n     /// ```rust\n     /// # let a = 1;\n     /// # let b = 2;\n-    ///\n-    /// // Bad\n     /// match (a, b) {\n     ///     (c, d) => {\n     ///         // useless match\n     ///     }\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let a = 1;\n+    /// # let b = 2;\n     /// let (c, d) = (a, b);\n     /// ```\n     #[clippy::version = \"1.43.0\"]\n@@ -419,13 +437,16 @@ declare_clippy_lint! {\n     /// # struct A { a: i32 }\n     /// let a = A { a: 5 };\n     ///\n-    /// // Bad\n     /// match a {\n     ///     A { a: 5, .. } => {},\n     ///     _ => {},\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # struct A { a: i32 }\n+    /// # let a = A { a: 5 };\n     /// match a {\n     ///     A { a: 5 } => {},\n     ///     _ => {},\n@@ -509,7 +530,6 @@ declare_clippy_lint! {\n     /// ```rust\n     /// let x = Some(5);\n     ///\n-    /// // Bad\n     /// let a = match x {\n     ///     Some(0) => true,\n     ///     _ => false,\n@@ -520,8 +540,11 @@ declare_clippy_lint! {\n     /// } else {\n     ///     false\n     /// };\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// let x = Some(5);\n     /// let a = matches!(x, Some(0));\n     /// ```\n     #[clippy::version = \"1.47.0\"]\n@@ -695,19 +718,18 @@ declare_clippy_lint! {\n     /// let arr = vec![0, 1, 2, 3];\n     /// let idx = 1;\n     ///\n-    /// // Bad\n     /// match arr[idx] {\n     ///     0 => println!(\"{}\", 0),\n     ///     1 => println!(\"{}\", 3),\n     ///     _ => {},\n     /// }\n     /// ```\n+    ///\n     /// Use instead:\n     /// ```rust, no_run\n     /// let arr = vec![0, 1, 2, 3];\n     /// let idx = 1;\n     ///\n-    /// // Good\n     /// match arr.get(idx) {\n     ///     Some(0) => println!(\"{}\", 0),\n     ///     Some(1) => println!(\"{}\", 3),"}, {"sha": "9d78f0a9fc14a3a160c9a78cd4ac3690d1baa9ed", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 125, "deletions": 82, "changes": 207, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -124,27 +124,27 @@ declare_clippy_lint! {\n     /// It's often inefficient to clone all elements of an iterator, when eventually, only some\n     /// of them will be consumed.\n     ///\n+    /// ### Known Problems\n+    /// This `lint` removes the side of effect of cloning items in the iterator.\n+    /// A code that relies on that side-effect could fail.\n+    ///\n     /// ### Examples\n     /// ```rust\n     /// # let vec = vec![\"string\".to_string()];\n-    ///\n-    /// // Bad\n+    /// # let _ =\n     /// vec.iter().cloned().take(10);\n-    ///\n-    /// // Good\n-    /// vec.iter().take(10).cloned();\n-    ///\n-    /// // Bad\n+    /// # let _ =\n     /// vec.iter().cloned().last();\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let vec = vec![\"string\".to_string()];\n+    /// # let _ =\n+    /// vec.iter().take(10).cloned();\n+    /// # let _ =\n     /// vec.iter().last().cloned();\n-    ///\n     /// ```\n-    /// ### Known Problems\n-    /// This `lint` removes the side of effect of cloning items in the iterator.\n-    /// A code that relies on that side-effect could fail.\n-    ///\n     #[clippy::version = \"1.59.0\"]\n     pub ITER_OVEREAGER_CLONED,\n     perf,\n@@ -342,11 +342,12 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust\n     /// # let x = Ok::<_, ()>(());\n-    ///\n-    /// // Bad\n     /// x.ok().expect(\"why did I do this again?\");\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let x = Ok::<_, ()>(());\n     /// x.expect(\"why did I do this again?\");\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -390,12 +391,13 @@ declare_clippy_lint! {\n     /// ### Examples\n     /// ```rust\n     /// # let x = Some(1);\n-    ///\n-    /// // Bad\n     /// x.unwrap_or_else(Default::default);\n     /// x.unwrap_or_else(u32::default);\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let x = Some(1);\n     /// x.unwrap_or_default();\n     /// ```\n     #[clippy::version = \"1.56.0\"]\n@@ -453,11 +455,12 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust\n     /// # let opt = Some(1);\n-    ///\n-    /// // Bad\n     /// opt.map_or(None, |a| Some(a + 1));\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let opt = Some(1);\n     /// opt.and_then(|a| Some(a + 1));\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -475,13 +478,12 @@ declare_clippy_lint! {\n     /// `_.ok()`.\n     ///\n     /// ### Example\n-    /// Bad:\n     /// ```rust\n     /// # let r: Result<u32, &str> = Ok(1);\n     /// assert_eq!(Some(1), r.map_or(None, Some));\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust\n     /// # let r: Result<u32, &str> = Ok(1);\n     /// assert_eq!(Some(1), r.ok());\n@@ -538,7 +540,8 @@ declare_clippy_lint! {\n     /// # let vec = vec![1];\n     /// vec.iter().filter(|x| **x == 0).next();\n     /// ```\n-    /// Could be written as\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// # let vec = vec![1];\n     /// vec.iter().find(|x| **x == 0);\n@@ -562,7 +565,8 @@ declare_clippy_lint! {\n     /// # let vec = vec![1];\n     /// vec.iter().skip_while(|x| **x == 0).next();\n     /// ```\n-    /// Could be written as\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// # let vec = vec![1];\n     /// vec.iter().find(|x| **x != 0);\n@@ -586,11 +590,16 @@ declare_clippy_lint! {\n     /// let vec = vec![vec![1]];\n     /// let opt = Some(5);\n     ///\n-    /// // Bad\n+    /// # let _ =\n     /// vec.iter().map(|x| x.iter()).flatten();\n     /// opt.map(|x| Some(x * 2)).flatten();\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let vec = vec![vec![1]];\n+    /// # let opt = Some(5);\n+    /// # let _ =\n     /// vec.iter().flat_map(|x| x.iter());\n     /// opt.and_then(|x| Some(x * 2));\n     /// ```\n@@ -610,15 +619,16 @@ declare_clippy_lint! {\n     /// less performant.\n     ///\n      /// ### Example\n-    /// Bad:\n     /// ```rust\n+    /// # let  _ =\n     /// (0_i32..10)\n     ///     .filter(|n| n.checked_add(1).is_some())\n     ///     .map(|n| n.checked_add(1).unwrap());\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust\n+    /// # let _ =\n     /// (0_i32..10).filter_map(|n| n.checked_add(1));\n     /// ```\n     #[clippy::version = \"1.51.0\"]\n@@ -637,14 +647,13 @@ declare_clippy_lint! {\n     /// less performant.\n     ///\n      /// ### Example\n-    /// Bad:\n     /// ```rust\n     /// (0_i32..10)\n     ///     .find(|n| n.checked_add(1).is_some())\n     ///     .map(|n| n.checked_add(1).unwrap());\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust\n     /// (0_i32..10).find_map(|n| n.checked_add(1));\n     /// ```\n@@ -713,16 +722,20 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust\n     /// let vec = vec![1];\n+    /// # let _ =\n     /// vec.iter().find(|x| **x == 0).is_some();\n     ///\n-    /// let _ = \"hello world\".find(\"world\").is_none();\n+    /// # let _ =\n+    /// \"hello world\".find(\"world\").is_none();\n     /// ```\n-    /// Could be written as\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// let vec = vec![1];\n     /// vec.iter().any(|x| *x == 0);\n     ///\n-    /// let _ = !\"hello world\".contains(\"world\");\n+    /// # let _ =\n+    /// !\"hello world\".contains(\"world\");\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub SEARCH_IS_SOME,\n@@ -744,7 +757,8 @@ declare_clippy_lint! {\n     /// let name = \"foo\";\n     /// if name.chars().next() == Some('_') {};\n     /// ```\n-    /// Could be written as\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// let name = \"foo\";\n     /// if name.starts_with('_') {};\n@@ -899,10 +913,13 @@ declare_clippy_lint! {\n     /// # use std::rc::Rc;\n     /// let x = Rc::new(1);\n     ///\n-    /// // Bad\n     /// x.clone();\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # use std::rc::Rc;\n+    /// # let x = Rc::new(1);\n     /// Rc::clone(&x);\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -1034,11 +1051,13 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust,ignore\n-    /// // Bad\n     /// _.split(\"x\");\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust,ignore\n     /// _.split('x');\n+    /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub SINGLE_CHAR_PATTERN,\n     perf,\n@@ -1099,12 +1118,14 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust\n     /// # use std::collections::HashSet;\n-    /// // Bad\n     /// # let mut s = HashSet::new();\n     /// # s.insert(1);\n     /// let x = s.iter().nth(0);\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # use std::collections::HashSet;\n     /// # let mut s = HashSet::new();\n     /// # s.insert(1);\n     /// let x = s.iter().next();\n@@ -1210,11 +1231,12 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// let x = vec![2, 3, 5];\n     /// let last_element = x.get(x.len() - 1);\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// let x = vec![2, 3, 5];\n     /// let last_element = x.last();\n     /// ```\n@@ -1273,10 +1295,14 @@ declare_clippy_lint! {\n     /// let mut a = vec![1, 2, 3];\n     /// let mut b = vec![4, 5, 6];\n     ///\n-    /// // Bad\n     /// a.extend(b.drain(..));\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// let mut a = vec![1, 2, 3];\n+    /// let mut b = vec![4, 5, 6];\n     ///\n-    /// // Good\n     /// a.append(&mut b);\n     /// ```\n     #[clippy::version = \"1.55.0\"]\n@@ -1351,11 +1377,12 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust\n     /// # let name = \"_\";\n-    ///\n-    /// // Bad\n     /// name.chars().last() == Some('_') || name.chars().next_back() == Some('-');\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let name = \"_\";\n     /// name.ends_with('_') || name.ends_with('-');\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -1401,11 +1428,14 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// let _ = (0..3).fold(false, |acc, x| acc || x > 2);\n+    /// # let _ =\n+    /// (0..3).fold(false, |acc, x| acc || x > 2);\n     /// ```\n-    /// This could be written as:\n+    ///\n+    /// Use instead:\n     /// ```rust\n-    /// let _ = (0..3).any(|x| x > 2);\n+    /// # let _ =\n+    /// (0..3).any(|x| x > 2);\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub UNNECESSARY_FOLD,\n@@ -1485,11 +1515,14 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n-    /// let _ = (&vec![3, 4, 5]).into_iter();\n+    /// # let _ =\n+    /// (&vec![3, 4, 5]).into_iter();\n+    /// ```\n     ///\n-    /// // Good\n-    /// let _ = (&vec![3, 4, 5]).iter();\n+    /// Use instead:\n+    /// ```rust\n+    /// # let _ =\n+    /// (&vec![3, 4, 5]).iter();\n     /// ```\n     #[clippy::version = \"1.32.0\"]\n     pub INTO_ITER_ON_REF,\n@@ -1704,13 +1737,14 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// let mut string = String::new();\n+    /// # let mut string = String::new();\n     /// string.insert_str(0, \"R\");\n     /// string.push_str(\"R\");\n     /// ```\n-    /// Could be written as\n+    ///\n+    /// Use instead:\n     /// ```rust\n-    /// let mut string = String::new();\n+    /// # let mut string = String::new();\n     /// string.insert(0, 'R');\n     /// string.push('R');\n     /// ```\n@@ -1897,11 +1931,14 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n-    /// let _ = \"Hello\".bytes().nth(3);\n+    /// # let _ =\n+    /// \"Hello\".bytes().nth(3);\n+    /// ```\n     ///\n-    /// // Good\n-    /// let _ = \"Hello\".as_bytes().get(3);\n+    /// Use instead:\n+    /// ```rust\n+    /// # let _ =\n+    /// \"Hello\".as_bytes().get(3);\n     /// ```\n     #[clippy::version = \"1.52.0\"]\n     pub BYTES_NTH,\n@@ -1945,15 +1982,20 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// let some_vec = vec![0, 1, 2, 3];\n-    /// let _ = some_vec.iter().count();\n-    /// let _ = &some_vec[..].iter().count();\n+    /// # let _ =\n+    /// some_vec.iter().count();\n+    /// # let _ =\n+    /// &some_vec[..].iter().count();\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// let some_vec = vec![0, 1, 2, 3];\n-    /// let _ = some_vec.len();\n-    /// let _ = &some_vec[..].len();\n+    /// # let _ =\n+    /// some_vec.len();\n+    /// # let _ =\n+    /// &some_vec[..].len();\n     /// ```\n     #[clippy::version = \"1.52.0\"]\n     pub ITER_COUNT,\n@@ -1973,16 +2015,17 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n-    /// let s = \"\";\n+    /// # let s = \"\";\n     /// for x in s.splitn(1, \":\") {\n-    ///     // use x\n+    ///     // ..\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n-    /// let s = \"\";\n+    /// Use instead:\n+    /// ```rust\n+    /// # let s = \"\";\n     /// for x in s.splitn(2, \":\") {\n-    ///     // use x\n+    ///     // ..\n     /// }\n     /// ```\n     #[clippy::version = \"1.54.0\"]\n@@ -2000,10 +2043,11 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// let x: String = std::iter::repeat('x').take(10).collect();\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// let x: String = \"x\".repeat(10);\n     /// ```\n     #[clippy::version = \"1.54.0\"]\n@@ -2021,7 +2065,6 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust,ignore\n-    /// // Bad\n     /// let s = \"key=value=add\";\n     /// let (key, value) = s.splitn(2, '=').next_tuple()?;\n     /// let value = s.splitn(2, '=').nth(1)?;\n@@ -2030,9 +2073,9 @@ declare_clippy_lint! {\n     /// let key = parts.next()?;\n     /// let value = parts.next()?;\n     /// ```\n+    ///\n     /// Use instead:\n     /// ```rust,ignore\n-    /// // Good\n     /// let s = \"key=value=add\";\n     /// let (key, value) = s.split_once('=')?;\n     /// let value = s.split_once('=')?.1;\n@@ -2057,13 +2100,12 @@ declare_clippy_lint! {\n     /// that both functions return a lazy iterator.\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// let str = \"key=value=add\";\n     /// let _ = str.splitn(3, '=').next().unwrap();\n     /// ```\n+    ///\n     /// Use instead:\n     /// ```rust\n-    /// // Good\n     /// let str = \"key=value=add\";\n     /// let _ = str.split('=').next().unwrap();\n     /// ```\n@@ -2149,7 +2191,8 @@ declare_clippy_lint! {\n     /// let a = Some(&1);\n     /// let b = a.as_deref(); // goes from Option<&i32> to Option<&i32>\n     /// ```\n-    /// Could be written as:\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// let a = Some(&1);\n     /// let b = a;"}, {"sha": "01bf871198a5cb06c4d8cfa7e38ac442a78f1d05", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -45,16 +45,13 @@ declare_clippy_lint! {\n     /// dereferences, e.g., changing `*x` to `x` within the function.\n     ///\n     /// ### Example\n-    /// ```rust,ignore\n-    /// // Bad\n-    /// fn foo(ref x: u8) -> bool {\n-    ///     true\n-    /// }\n+    /// ```rust\n+    /// fn foo(ref _x: u8) {}\n+    /// ```\n     ///\n-    /// // Good\n-    /// fn foo(x: &u8) -> bool {\n-    ///     true\n-    /// }\n+    /// Use instead:\n+    /// ```rust\n+    /// fn foo(_x: &u8) {}\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub TOPLEVEL_REF_ARG,\n@@ -73,11 +70,12 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust\n     /// # let x = 1.0;\n-    ///\n-    /// // Bad\n     /// if x == f32::NAN { }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let x = 1.0f32;\n     /// if x.is_nan() { }\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -139,7 +137,8 @@ declare_clippy_lint! {\n     /// # let y = String::from(\"foo\");\n     /// if x.to_owned() == y {}\n     /// ```\n-    /// Could be written as\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// # let x = \"foo\";\n     /// # let y = String::from(\"foo\");\n@@ -232,10 +231,11 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// let a = 0 as *const u32;\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// let a = std::ptr::null::<u32>();\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]"}, {"sha": "704918c0b979bdd6bbbf0820ca407842260456cf", "filename": "clippy_lints/src/misc_early/mod.rs", "status": "modified", "additions": 50, "deletions": 21, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -34,13 +34,21 @@ declare_clippy_lint! {\n     /// # }\n     /// let f = Foo { a: 0, b: 0, c: 0 };\n     ///\n-    /// // Bad\n     /// match f {\n     ///     Foo { a: _, b: 0, .. } => {},\n     ///     Foo { a: _, b: _, c: _ } => {},\n     /// }\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// # struct Foo {\n+    /// #     a: i32,\n+    /// #     b: i32,\n+    /// #     c: i32,\n+    /// # }\n+    /// let f = Foo { a: 0, b: 0, c: 0 };\n     ///\n-    /// // Good\n     /// match f {\n     ///     Foo { b: 0, .. } => {},\n     ///     Foo { .. } => {},\n@@ -62,10 +70,11 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// fn foo(a: i32, _a: i32) {}\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// fn bar(a: i32, _b: i32) {}\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -103,11 +112,16 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n-    /// let y = 0x1a9BAcD;\n+    /// # let _ =\n+    /// 0x1a9BAcD\n+    /// # ;\n+    /// ```\n     ///\n-    /// // Good\n-    /// let y = 0x1A9BACD;\n+    /// Use instead:\n+    /// ```rust\n+    /// # let _ =\n+    /// 0x1A9BACD\n+    /// # ;\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub MIXED_CASE_HEX_LITERALS,\n@@ -127,11 +141,16 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n-    /// let y = 123832i32;\n+    /// # let _ =\n+    /// 123832i32\n+    /// # ;\n+    /// ```\n     ///\n-    /// // Good\n-    /// let y = 123832_i32;\n+    /// Use instead:\n+    /// ```rust\n+    /// # let _ =\n+    /// 123832_i32\n+    /// # ;\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub UNSEPARATED_LITERAL_SUFFIX,\n@@ -150,11 +169,16 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n-    /// let y = 123832_i32;\n+    /// # let _ =\n+    /// 123832_i32\n+    /// # ;\n+    /// ```\n     ///\n-    /// // Good\n-    /// let y = 123832i32;\n+    /// Use instead:\n+    /// ```rust\n+    /// # let _ =\n+    /// 123832i32\n+    /// # ;\n     /// ```\n     #[clippy::version = \"1.58.0\"]\n     pub SEPARATED_LITERAL_SUFFIX,\n@@ -234,14 +258,15 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust\n     /// # let v = Some(\"abc\");\n-    ///\n-    /// // Bad\n     /// match v {\n     ///     Some(x) => (),\n     ///     y @ _ => (),\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let v = Some(\"abc\");\n     /// match v {\n     ///     Some(x) => (),\n     ///     y => (),\n@@ -262,6 +287,7 @@ declare_clippy_lint! {\n     /// means there are 0 or more elements left. This can make a difference\n     /// when refactoring, but shouldn't result in errors in the refactored code,\n     /// since the wildcard pattern isn't used anyway.\n+    ///\n     /// ### Why is this bad?\n     /// The wildcard pattern is unneeded as the rest pattern\n     /// can match that element as well.\n@@ -270,13 +296,16 @@ declare_clippy_lint! {\n     /// ```rust\n     /// # struct TupleStruct(u32, u32, u32);\n     /// # let t = TupleStruct(1, 2, 3);\n-    /// // Bad\n     /// match t {\n     ///     TupleStruct(0, .., _) => (),\n     ///     _ => (),\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # struct TupleStruct(u32, u32, u32);\n+    /// # let t = TupleStruct(1, 2, 3);\n     /// match t {\n     ///     TupleStruct(0, ..) => (),\n     ///     _ => (),"}, {"sha": "1ad07125b5473ee21d2b4fabb42de43c27dc8790", "filename": "clippy_lints/src/mixed_read_write_in_expression.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -25,14 +25,16 @@ declare_clippy_lint! {\n     /// ```rust\n     /// let mut x = 0;\n     ///\n-    /// // Bad\n     /// let a = {\n     ///     x = 1;\n     ///     1\n     /// } + x;\n     /// // Unclear whether a is 1 or 2.\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let mut x = 0;\n     /// let tmp = {\n     ///     x = 1;\n     ///     1"}, {"sha": "f434a655f8aff5a9d9c0fd101158b0ef02b1fc72", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -16,12 +16,17 @@ declare_clippy_lint! {\n     /// the value. Also the code misleads about the intent of the call site.\n     ///\n     /// ### Example\n-    /// ```ignore\n-    /// // Bad\n-    /// my_vec.push(&mut value)\n+    /// ```rust\n+    /// # let mut vec = Vec::new();\n+    /// # let mut value = 5;\n+    /// vec.push(&mut value);\n+    /// ```\n     ///\n-    /// // Good\n-    /// my_vec.push(&value)\n+    /// Use instead:\n+    /// ```rust\n+    /// # let mut vec = Vec::new();\n+    /// # let value = 5;\n+    /// vec.push(&value);\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub UNNECESSARY_MUT_PASSED,"}, {"sha": "a98577093ed5e5cf7f621bce9223a8b7553c6773", "filename": "clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -27,12 +27,13 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust\n     /// # let y = true;\n-    ///\n-    /// // Bad\n     /// # use std::sync::Mutex;\n     /// let x = Mutex::new(&y);\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let y = true;\n     /// # use std::sync::atomic::AtomicBool;\n     /// let x = AtomicBool::new(y);\n     /// ```\n@@ -60,8 +61,10 @@ declare_clippy_lint! {\n     /// ```rust\n     /// # use std::sync::Mutex;\n     /// let x = Mutex::new(0usize);\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// # use std::sync::atomic::AtomicUsize;\n     /// let x = AtomicUsize::new(0usize);\n     /// ```"}, {"sha": "33638fe37346e73f6045d93c0370abb288d89116", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -30,16 +30,22 @@ declare_clippy_lint! {\n     /// shorter code.\n     ///\n     /// ### Example\n-    /// ```rust,ignore\n+    /// ```rust\n+    /// # let x = true;\n     /// if x {\n     ///     false\n+    /// # ;\n     /// } else {\n     ///     true\n+    /// # ;\n     /// }\n     /// ```\n-    /// Could be written as\n-    /// ```rust,ignore\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// # let x = true;\n     /// !x\n+    /// # ;\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub NEEDLESS_BOOL,"}, {"sha": "55da6e0f0a3cd30cd8b91c47192c72ba209fe9d9", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -27,16 +27,17 @@ declare_clippy_lint! {\n     /// ```\n     ///\n     /// ### Example\n-    /// Bad:\n     /// ```rust\n     /// let mut v = Vec::<String>::new();\n-    /// let _ = v.iter_mut().filter(|&ref a| a.is_empty());\n+    /// # let _ =\n+    /// v.iter_mut().filter(|&ref a| a.is_empty());\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust\n     /// let mut v = Vec::<String>::new();\n-    /// let _ = v.iter_mut().filter(|a| a.is_empty());\n+    /// # let _ =\n+    /// v.iter_mut().filter(|a| a.is_empty());\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub NEEDLESS_BORROWED_REFERENCE,"}, {"sha": "0bd29d1776b28e714dc2438f7a675fa632887fca", "filename": "clippy_lints/src/needless_update.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fneedless_update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fneedless_update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_update.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -24,16 +24,17 @@ declare_clippy_lint! {\n     /// #     z: i32,\n     /// # }\n     /// # let zero_point = Point { x: 0, y: 0, z: 0 };\n-    ///\n-    /// // Bad\n     /// Point {\n     ///     x: 1,\n     ///     y: 1,\n     ///     z: 1,\n     ///     ..zero_point\n     /// };\n+    /// ```\n     ///\n-    /// // Ok\n+    /// Use instead:\n+    /// ```rust,ignore\n+    /// // Missing field `z`\n     /// Point {\n     ///     x: 1,\n     ///     y: 1,"}, {"sha": "a7e0e35787cffbcc092d5ae27a293bbac7a60244", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -19,17 +19,17 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// use std::cmp::Ordering;\n-    ///\n-    /// // Bad\n     /// let a = 1.0;\n     /// let b = f64::NAN;\n     ///\n-    /// let _not_less_or_equal = !(a <= b);\n+    /// let not_less_or_equal = !(a <= b);\n+    /// ```\n     ///\n-    /// // Good\n-    /// let a = 1.0;\n-    /// let b = f64::NAN;\n+    /// Use instead:\n+    /// ```rust\n+    /// use std::cmp::Ordering;\n+    /// # let a = 1.0;\n+    /// # let b = f64::NAN;\n     ///\n     /// let _not_less_or_equal = match a.partial_cmp(&b) {\n     ///     None | Some(Ordering::Greater) => true,"}, {"sha": "ce6bb38b7c0e9d3d981796591aa1f0ea94b1d197", "filename": "clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_multiply.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -19,12 +19,13 @@ declare_clippy_lint! {\n     /// This only catches integers (for now).\n     ///\n     /// ### Example\n-    /// ```ignore\n-    /// // Bad\n+    /// ```rust,ignore\n     /// let a = x * -1;\n+    /// ```\n     ///\n-    /// // Good\n-    /// let b = -x;\n+    /// Use instead:\n+    /// ```rust,ignore\n+    /// let a = -x;\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub NEG_MULTIPLY,"}, {"sha": "b727105f670fcfe22cbae09eb5832a81a4ec8fff", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -58,12 +58,14 @@ declare_clippy_lint! {\n     /// ```rust\n     /// use std::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n     ///\n-    /// // Bad.\n     /// const CONST_ATOM: AtomicUsize = AtomicUsize::new(12);\n     /// CONST_ATOM.store(6, SeqCst); // the content of the atomic is unchanged\n     /// assert_eq!(CONST_ATOM.load(SeqCst), 12); // because the CONST_ATOM in these lines are distinct\n+    /// ```\n     ///\n-    /// // Good.\n+    /// Use instead:\n+    /// ```rust\n+    /// # use std::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n     /// static STATIC_ATOM: AtomicUsize = AtomicUsize::new(15);\n     /// STATIC_ATOM.store(9, SeqCst);\n     /// assert_eq!(STATIC_ATOM.load(SeqCst), 9); // use a `static` item to refer to the same instance\n@@ -104,11 +106,15 @@ declare_clippy_lint! {\n     /// use std::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n     /// const CONST_ATOM: AtomicUsize = AtomicUsize::new(12);\n     ///\n-    /// // Bad.\n     /// CONST_ATOM.store(6, SeqCst); // the content of the atomic is unchanged\n     /// assert_eq!(CONST_ATOM.load(SeqCst), 12); // because the CONST_ATOM in these lines are distinct\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// use std::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n+    /// const CONST_ATOM: AtomicUsize = AtomicUsize::new(12);\n     ///\n-    /// // Good.\n     /// static STATIC_ATOM: AtomicUsize = CONST_ATOM;\n     /// STATIC_ATOM.store(9, SeqCst);\n     /// assert_eq!(STATIC_ATOM.load(SeqCst), 9); // use a `static` item to refer to the same instance"}, {"sha": "c8854539677c791f36e9bf55789aee65843b7fce", "filename": "clippy_lints/src/octal_escapes.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Foctal_escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Foctal_escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foctal_escapes.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -33,11 +33,12 @@ declare_clippy_lint! {\n     ///\n     /// # Example\n     /// ```rust\n-    /// // Bad\n     /// let one = \"\\033[1m Bold? \\033[0m\";  // \\033 intended as escape\n     /// let two = \"\\033\\0\";                 // \\033 intended as null-3-3\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// let one = \"\\x1b[1mWill this be bold?\\x1b[0m\";\n     /// let two = \"\\x0033\\x00\";\n     /// ```"}, {"sha": "05ab62786f409ab9e5379ebc2af3d3b533498b9b", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -57,12 +57,11 @@ declare_clippy_lint! {\n     /// ### Example\n     ///\n     /// ```rust\n-    /// // Bad\n     /// fn foo(v: &u32) {}\n     /// ```\n     ///\n+    /// Use instead:\n     /// ```rust\n-    /// // Better\n     /// fn foo(v: u32) {}\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -89,14 +88,13 @@ declare_clippy_lint! {\n     /// #[derive(Clone, Copy)]\n     /// struct TooLarge([u8; 2048]);\n     ///\n-    /// // Bad\n     /// fn foo(v: TooLarge) {}\n     /// ```\n-    /// ```rust\n-    /// #[derive(Clone, Copy)]\n-    /// struct TooLarge([u8; 2048]);\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # #[derive(Clone, Copy)]\n+    /// # struct TooLarge([u8; 2048]);\n     /// fn foo(v: &TooLarge) {}\n     /// ```\n     #[clippy::version = \"1.49.0\"]"}, {"sha": "b06eba13d2fdb7bda8e86c8ef95d2228de70e20e", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -48,10 +48,11 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```ignore\n-    /// // Bad\n     /// fn foo(&Vec<u32>) { .. }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```ignore\n     /// fn foo(&[u32]) { .. }\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -70,15 +71,18 @@ declare_clippy_lint! {\n     /// method instead\n     ///\n     /// ### Example\n-    /// ```ignore\n-    /// // Bad\n+    /// ```rust,ignore\n+    /// use std::ptr;\n+    ///\n     /// if x == ptr::null {\n-    ///     ..\n+    ///     // ..\n     /// }\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust,ignore\n     /// if x.is_null() {\n-    ///     ..\n+    ///     // ..\n     /// }\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -129,12 +133,12 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```ignore\n-    /// // Bad. Undefined behavior\n+    /// // Undefined behavior\n     /// unsafe { std::slice::from_raw_parts(ptr::null(), 0); }\n     /// ```\n     ///\n+    /// Use instead:\n     /// ```ignore\n-    /// // Good\n     /// unsafe { std::slice::from_raw_parts(NonNull::dangling().as_ptr(), 0); }\n     /// ```\n     #[clippy::version = \"1.53.0\"]"}, {"sha": "be7eae0268771ac8a5b0ed05455155afa1a068b0", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -27,11 +27,14 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust\n     /// # let x = vec![1];\n+    /// # let _ =\n     /// x.iter().zip(0..x.len());\n     /// ```\n-    /// Could be written as\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// # let x = vec![1];\n+    /// # let _ =\n     /// x.iter().enumerate();\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -65,12 +68,21 @@ declare_clippy_lint! {\n     /// ([#3307](https://github.com/rust-lang/rust-clippy/issues/3307)).\n     ///\n     /// ### Example\n-    /// ```rust,ignore\n-    /// for x..(y+1) { .. }\n+    /// ```rust\n+    /// # let x = 0;\n+    /// # let y = 1;\n+    /// for i in x..(y+1) {\n+    ///     // ..\n+    /// }\n     /// ```\n-    /// Could be written as\n-    /// ```rust,ignore\n-    /// for x..=y { .. }\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// # let x = 0;\n+    /// # let y = 1;\n+    /// for i in x..=y {\n+    ///     // ..\n+    /// }\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub RANGE_PLUS_ONE,\n@@ -94,12 +106,21 @@ declare_clippy_lint! {\n     /// ([#3307](https://github.com/rust-lang/rust-clippy/issues/3307)).\n     ///\n     /// ### Example\n-    /// ```rust,ignore\n-    /// for x..=(y-1) { .. }\n+    /// ```rust\n+    /// # let x = 0;\n+    /// # let y = 1;\n+    /// for i in x..=(y-1) {\n+    ///     // ..\n+    /// }\n     /// ```\n-    /// Could be written as\n-    /// ```rust,ignore\n-    /// for x..y { .. }\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// # let x = 0;\n+    /// # let y = 1;\n+    /// for i in x..y {\n+    ///     // ..\n+    /// }\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub RANGE_MINUS_ONE,"}, {"sha": "3aa18557d91c9be2ecb3a5eee51e87a31ab3f707", "filename": "clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -23,12 +23,13 @@ declare_clippy_lint! {\n     /// complexity.\n     ///\n     /// ### Example\n-    /// ```rust,ignore\n-    /// // Bad\n-    /// let a = (|| 42)()\n+    /// ```rust\n+    /// let a = (|| 42)();\n+    /// ```\n     ///\n-    /// // Good\n-    /// let a = 42\n+    /// Use instead:\n+    /// ```rust\n+    /// let a = 42;\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub REDUNDANT_CLOSURE_CALL,"}, {"sha": "a642e2da3ba127ad36c6f6c4731ea0524ea0ef10", "filename": "clippy_lints/src/reference.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freference.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -21,11 +21,12 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust,ignore\n-    /// // Bad\n     /// let a = f(*&mut b);\n     /// let c = *&d;\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust,ignore\n     /// let a = f(b);\n     /// let c = d;\n     /// ```"}, {"sha": "60be6bd335f686eefc8befed49322c8d021ac983", "filename": "clippy_lints/src/return_self_not_must_use.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturn_self_not_must_use.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -26,37 +26,39 @@ declare_clippy_lint! {\n     /// if it was added on constructors for example.\n     ///\n     /// ### Example\n-    /// Missing attribute\n     /// ```rust\n     /// pub struct Bar;\n     /// impl Bar {\n-    ///     // Bad\n+    ///     // Missing attribute\n     ///     pub fn bar(&self) -> Self {\n     ///         Self\n     ///     }\n     /// }\n     /// ```\n     ///\n-    /// It's better to have the `#[must_use]` attribute on the method like this:\n+    /// Use instead:\n     /// ```rust\n+    /// # {\n+    /// // It's better to have the `#[must_use]` attribute on the method like this:\n     /// pub struct Bar;\n     /// impl Bar {\n     ///     #[must_use]\n     ///     pub fn bar(&self) -> Self {\n     ///         Self\n     ///     }\n     /// }\n-    /// ```\n+    /// # }\n     ///\n-    /// Or on the type definition like this:\n-    /// ```rust\n+    /// # {\n+    /// // Or on the type definition like this:\n     /// #[must_use]\n     /// pub struct Bar;\n     /// impl Bar {\n     ///     pub fn bar(&self) -> Self {\n     ///         Self\n     ///     }\n     /// }\n+    /// # }\n     /// ```\n     #[clippy::version = \"1.59.0\"]\n     pub RETURN_SELF_NOT_MUST_USE,"}, {"sha": "bf318c055dad1d48ae38e37b2ceb70fad1a75b74", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -23,10 +23,12 @@ declare_clippy_lint! {\n     /// ### Example\n     /// ```rust\n     /// # let x = 1;\n-    /// // Bad\n     /// let x = &x;\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let x = 1;\n     /// let y = &x; // use different variable name\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -79,11 +81,14 @@ declare_clippy_lint! {\n     /// # let y = 1;\n     /// # let z = 2;\n     /// let x = y;\n-    ///\n-    /// // Bad\n     /// let x = z; // shadows the earlier binding\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let y = 1;\n+    /// # let z = 2;\n+    /// let x = y;\n     /// let w = z; // use different variable name\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]"}, {"sha": "975a0a06e38858cde96b6d7cdefedcb9b1aa4201", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -23,15 +23,16 @@ declare_clippy_lint! {\n     /// ```rust\n     /// # use core::iter::repeat;\n     /// # let len = 4;\n-    ///\n-    /// // Bad\n     /// let mut vec1 = Vec::with_capacity(len);\n     /// vec1.resize(len, 0);\n     ///\n     /// let mut vec2 = Vec::with_capacity(len);\n     /// vec2.extend(repeat(0).take(len));\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # let len = 4;\n     /// let mut vec1 = vec![0; len];\n     /// let mut vec2 = vec![0; len];\n     /// ```"}, {"sha": "9ea2de001e2bf69b125179bf56d23b1d0dfa20c7", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -99,11 +99,12 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n-    /// let bs = \"a byte string\".as_bytes();\n+    /// let bstr = \"a byte string\".as_bytes();\n+    /// ```\n     ///\n-    /// // Good\n-    /// let bs = b\"a byte string\";\n+    /// Use instead:\n+    /// ```rust\n+    /// let bstr = b\"a byte string\";\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub STRING_LIT_AS_BYTES,\n@@ -223,11 +224,14 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// let _ = std::str::from_utf8(&\"Hello World!\".as_bytes()[6..11]).unwrap();\n+    /// # let _ =\n+    /// std::str::from_utf8(&\"Hello World!\".as_bytes()[6..11]).unwrap();\n     /// ```\n-    /// could be written as\n+    ///\n+    /// Use instead:\n     /// ```rust\n-    /// let _ = &\"Hello World!\"[6..11];\n+    /// # let _ =\n+    /// &\"Hello World!\"[6..11];\n     /// ```\n     #[clippy::version = \"1.50.0\"]\n     pub STRING_FROM_UTF8_AS_BYTES,"}, {"sha": "71957572f2e64403e007476e0f311ee291b7c5ea", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -29,8 +29,7 @@ declare_clippy_lint! {\n     /// pub fn foo<T>(t: T) where T: Copy, T: Clone {}\n     /// ```\n     ///\n-    /// Could be written as:\n-    ///\n+    /// Use instead:\n     /// ```rust\n     /// pub fn foo<T>(t: T) where T: Copy + Clone {}\n     /// ```"}, {"sha": "cc64d17be05520feefc3a13d3563e149a8d344de", "filename": "clippy_lints/src/unicode.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funicode.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -41,7 +41,8 @@ declare_clippy_lint! {\n     /// ```rust\n     /// let x = String::from(\"\u20ac\");\n     /// ```\n-    /// Could be written as:\n+    ///\n+    /// Use instead:\n     /// ```rust\n     /// let x = String::from(\"\\u{20ac}\");\n     /// ```"}, {"sha": "c8ec4442ab1a47475ec763642f31dd9834d60dd9", "filename": "clippy_lints/src/unused_async.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Funused_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Funused_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_async.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -17,13 +17,14 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// async fn get_random_number() -> i64 {\n     ///     4 // Chosen by fair dice roll. Guaranteed to be random.\n     /// }\n     /// let number_future = get_random_number();\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// fn get_random_number_improved() -> i64 {\n     ///     4 // Chosen by fair dice roll. Guaranteed to be random.\n     /// }"}, {"sha": "fe29bf29d0caf9c7b3bf9f1f37cfa4693e5bdd4b", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -21,11 +21,12 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// // format!() returns a `String`\n     /// let s: String = format!(\"hello\").into();\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// let s: String = format!(\"hello\");\n     /// ```\n     #[clippy::version = \"1.45.0\"]"}, {"sha": "17323e4d0efac9599648520fc35031f7d64b2254", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -89,12 +89,11 @@ declare_clippy_lint! {\n     /// warning/error messages.\n     ///\n     /// ### Example\n-    /// Bad:\n     /// ```rust,ignore\n     /// cx.span_lint(LINT_NAME, \"message\");\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust,ignore\n     /// utils::span_lint(cx, LINT_NAME, \"message\");\n     /// ```\n@@ -112,12 +111,11 @@ declare_clippy_lint! {\n     /// `cx.outer_expn_data()` is faster and more concise.\n     ///\n     /// ### Example\n-    /// Bad:\n     /// ```rust,ignore\n     /// expr.span.ctxt().outer().expn_data()\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust,ignore\n     /// expr.span.ctxt().outer_expn_data()\n     /// ```\n@@ -135,7 +133,6 @@ declare_clippy_lint! {\n     /// ICE in large quantities can damage your teeth\n     ///\n     /// ### Example\n-    /// Bad:\n     /// ```rust,ignore\n     /// \ud83c\udf66\ud83c\udf66\ud83c\udf66\ud83c\udf66\ud83c\udf66\n     /// ```\n@@ -153,12 +150,11 @@ declare_clippy_lint! {\n     /// Indicates that the lint is not finished.\n     ///\n     /// ### Example\n-    /// Bad:\n     /// ```rust,ignore\n     /// declare_lint! { pub COOL_LINT, nursery, \"default lint description\" }\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust,ignore\n     /// declare_lint! { pub COOL_LINT, nursery, \"a great new lint\" }\n     /// ```\n@@ -183,7 +179,6 @@ declare_clippy_lint! {\n     /// convenient, readable and less error prone.\n     ///\n     /// ### Example\n-    /// Bad:\n     /// ```rust,ignore\n     /// span_lint_and_then(cx, TEST_LINT, expr.span, lint_msg, |diag| {\n     ///     diag.span_suggestion(\n@@ -207,7 +202,7 @@ declare_clippy_lint! {\n     /// });\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust,ignore\n     /// span_lint_and_sugg(\n     ///     cx,\n@@ -237,12 +232,11 @@ declare_clippy_lint! {\n     /// `utils::is_type_diagnostic_item()` does not require hardcoded paths.\n     ///\n     /// ### Example\n-    /// Bad:\n     /// ```rust,ignore\n     /// utils::match_type(cx, ty, &paths::VEC)\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust,ignore\n     /// utils::is_type_diagnostic_item(cx, ty, sym::Vec)\n     /// ```\n@@ -273,12 +267,11 @@ declare_clippy_lint! {\n     /// It's faster and easier to use the symbol constant.\n     ///\n     /// ### Example\n-    /// Bad:\n     /// ```rust,ignore\n     /// let _ = sym!(f32);\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust,ignore\n     /// let _ = sym::f32;\n     /// ```\n@@ -295,12 +288,11 @@ declare_clippy_lint! {\n     /// It's faster use symbols directly instead of strings.\n     ///\n     /// ### Example\n-    /// Bad:\n     /// ```rust,ignore\n     /// symbol.as_str() == \"clippy\";\n     /// ```\n     ///\n-    /// Good:\n+    /// Use instead:\n     /// ```rust,ignore\n     /// symbol == sym::clippy;\n     /// ```"}, {"sha": "297a80e5767a1ed57b322eb643eb44ffece4e65d", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -28,12 +28,14 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// # fn foo(my_vec: &[u8]) {}\n+    /// fn foo(_x: &[u8]) {}\n     ///\n-    /// // Bad\n     /// foo(&vec![1, 2]);\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # fn foo(_x: &[u8]) {}\n     /// foo(&[1, 2]);\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]"}, {"sha": "5418eca382da0ec8cdf8a1e8cbb938481a35d48b", "filename": "clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -26,13 +26,18 @@ declare_clippy_lint! {\n     /// still around.\n     ///\n     /// ### Example\n-    /// ```rust,ignore\n-    /// // Bad\n+    /// ```rust\n     /// use std::cmp::Ordering::*;\n+    ///\n+    /// # fn foo(_: std::cmp::Ordering) {}\n     /// foo(Less);\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// use std::cmp::Ordering;\n+    ///\n+    /// # fn foo(_: Ordering) {}\n     /// foo(Ordering::Less)\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -76,14 +81,13 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust,ignore\n-    /// // Bad\n     /// use crate1::*;\n     ///\n     /// foo();\n     /// ```\n     ///\n+    /// Use instead:\n     /// ```rust,ignore\n-    /// // Good\n     /// use crate1::foo;\n     ///\n     /// foo();"}, {"sha": "bb74f2a7f0f28e8325c5543e036e20893a995e71", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -25,10 +25,11 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// println!(\"\");\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// println!();\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -177,10 +178,15 @@ declare_clippy_lint! {\n     /// ```rust\n     /// # use std::fmt::Write;\n     /// # let mut buf = String::new();\n-    /// // Bad\n+    /// # let _ =\n     /// writeln!(buf, \"\");\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # use std::fmt::Write;\n+    /// # let mut buf = String::new();\n+    /// # let _ =\n     /// writeln!(buf);\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -204,10 +210,16 @@ declare_clippy_lint! {\n     /// # use std::fmt::Write;\n     /// # let mut buf = String::new();\n     /// # let name = \"World\";\n-    /// // Bad\n+    /// # let _ =\n     /// write!(buf, \"Hello {}!\\n\", name);\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # use std::fmt::Write;\n+    /// # let mut buf = String::new();\n+    /// # let name = \"World\";\n+    /// # let _ =\n     /// writeln!(buf, \"Hello {}!\", name);\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n@@ -233,10 +245,15 @@ declare_clippy_lint! {\n     /// ```rust\n     /// # use std::fmt::Write;\n     /// # let mut buf = String::new();\n-    /// // Bad\n+    /// # let _ =\n     /// writeln!(buf, \"{}\", \"foo\");\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n+    /// # use std::fmt::Write;\n+    /// # let mut buf = String::new();\n+    /// # let _ =\n     /// writeln!(buf, \"foo\");\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]"}, {"sha": "50d3c079fe6758c8ff8ff8dce2adeaed804fd6ac", "filename": "clippy_lints/src/zero_div_zero.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_div_zero.rs?ref=9aeed6b9bfea42e4a580ad6e7289b4fc72b4365c", "patch": "@@ -14,10 +14,11 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// // Bad\n     /// let nan = 0.0f32 / 0.0;\n+    /// ```\n     ///\n-    /// // Good\n+    /// Use instead:\n+    /// ```rust\n     /// let nan = f32::NAN;\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]"}]}