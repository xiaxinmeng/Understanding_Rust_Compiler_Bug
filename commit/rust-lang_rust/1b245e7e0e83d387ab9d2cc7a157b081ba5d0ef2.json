{"sha": "1b245e7e0e83d387ab9d2cc7a157b081ba5d0ef2", "node_id": "C_kwDOAAsO6NoAKDFiMjQ1ZTdlMGU4M2QzODdhYjlkMmNjN2ExNTdiMDgxYmE1ZDBlZjI", "commit": {"author": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-09-10T18:32:05Z"}, "committer": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-09-10T18:33:04Z"}, "message": "Use visit_expr_field for ParamPosition", "tree": {"sha": "90b01ea4e856917a3e991fbfa1c6f6f1ff4ea97e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90b01ea4e856917a3e991fbfa1c6f6f1ff4ea97e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b245e7e0e83d387ab9d2cc7a157b081ba5d0ef2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b245e7e0e83d387ab9d2cc7a157b081ba5d0ef2", "html_url": "https://github.com/rust-lang/rust/commit/1b245e7e0e83d387ab9d2cc7a157b081ba5d0ef2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b245e7e0e83d387ab9d2cc7a157b081ba5d0ef2/comments", "author": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5652ccbc0ff4e3895caca34a147db04c40d734c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5652ccbc0ff4e3895caca34a147db04c40d734c6", "html_url": "https://github.com/rust-lang/rust/commit/5652ccbc0ff4e3895caca34a147db04c40d734c6"}], "stats": {"total": 87, "additions": 36, "deletions": 51}, "files": [{"sha": "058a15590ab259d3c8d470ec68eb950515c9c1a1", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 36, "deletions": 51, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/1b245e7e0e83d387ab9d2cc7a157b081ba5d0ef2/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b245e7e0e83d387ab9d2cc7a157b081ba5d0ef2/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=1b245e7e0e83d387ab9d2cc7a157b081ba5d0ef2", "patch": "@@ -8,7 +8,7 @@ use arrayvec::ArrayVec;\n use itertools::{izip, Either, Itertools};\n use rustc_ast::ast::LitKind;\n use rustc_hir::intravisit::Visitor;\n-use rustc_hir::{self as hir, Expr, ExprKind, HirId, Node, QPath};\n+use rustc_hir::{self as hir, Expr, ExprField, ExprKind, HirId, Node, QPath};\n use rustc_lexer::unescape::unescape_literal;\n use rustc_lexer::{tokenize, unescape, LiteralKind, TokenKind};\n use rustc_lint::LateContext;\n@@ -485,64 +485,49 @@ struct ParamPosition {\n     precision: Option<usize>,\n }\n \n-/// Parses the `fmt` arg of `Arguments::new_v1_formatted(pieces, args, fmt, _)`\n-fn parse_rt_fmt<'tcx>(fmt_arg: &'tcx Expr<'tcx>) -> Option<impl Iterator<Item = ParamPosition> + 'tcx> {\n-    fn parse_count(expr: &Expr<'_>) -> Option<usize> {\n-        // ::core::fmt::rt::v1::Count::Param(1usize),\n-        if let ExprKind::Call(ctor, [val]) = expr.kind\n-            && let ExprKind::Path(QPath::Resolved(_, path)) = ctor.kind\n-            && path.segments.last()?.ident.name == sym::Param\n-            && let ExprKind::Lit(lit) = &val.kind\n-            && let LitKind::Int(pos, _) = lit.node\n-        {\n-            Some(pos as usize)\n-        } else {\n-            None\n+impl<'tcx> Visitor<'tcx> for ParamPosition {\n+    fn visit_expr_field(&mut self, field: &'tcx ExprField<'tcx>) {\n+        fn parse_count(expr: &Expr<'_>) -> Option<usize> {\n+            // ::core::fmt::rt::v1::Count::Param(1usize),\n+            if let ExprKind::Call(ctor, [val]) = expr.kind\n+                && let ExprKind::Path(QPath::Resolved(_, path)) = ctor.kind\n+                && path.segments.last()?.ident.name == sym::Param\n+                && let ExprKind::Lit(lit) = &val.kind\n+                && let LitKind::Int(pos, _) = lit.node\n+            {\n+                Some(pos as usize)\n+            } else {\n+                None\n+            }\n+        }\n+\n+        match field.ident.name {\n+            sym::position => {\n+                if let ExprKind::Lit(lit) = &field.expr.kind\n+                    && let LitKind::Int(pos, _) = lit.node\n+                {\n+                    self.value = pos as usize;\n+                }\n+            },\n+            sym::precision => {\n+                self.precision = parse_count(field.expr);\n+            },\n+            sym::width => {\n+                self.width = parse_count(field.expr);\n+            },\n+            _ => {},\n         }\n     }\n+}\n \n+/// Parses the `fmt` arg of `Arguments::new_v1_formatted(pieces, args, fmt, _)`\n+fn parse_rt_fmt<'tcx>(fmt_arg: &'tcx Expr<'tcx>) -> Option<impl Iterator<Item = ParamPosition> + 'tcx> {\n     if let ExprKind::AddrOf(.., array) = fmt_arg.kind\n         && let ExprKind::Array(specs) = array.kind\n     {\n         Some(specs.iter().map(|spec| {\n             let mut position = ParamPosition::default();\n-\n-            // ::core::fmt::rt::v1::Argument {\n-            //     position: 0usize,\n-            //     format: ::core::fmt::rt::v1::FormatSpec {\n-            //         ..\n-            //         precision: ::core::fmt::rt::v1::Count::Implied,\n-            //         width: ::core::fmt::rt::v1::Count::Implied,\n-            //     },\n-            // }\n-\n-            // TODO: this can be made much nicer next sync with `Visitor::visit_expr_field`\n-            if let ExprKind::Struct(_, fields, _) = spec.kind {\n-                for field in fields {\n-                    match (field.ident.name, &field.expr.kind) {\n-                        (sym::position, ExprKind::Lit(lit)) => {\n-                            if let LitKind::Int(pos, _) = lit.node {\n-                                position.value = pos as usize;\n-                            }\n-                        },\n-                        (sym::format, &ExprKind::Struct(_, spec_fields, _)) => {\n-                            for spec_field in spec_fields {\n-                                match spec_field.ident.name {\n-                                    sym::precision => {\n-                                        position.precision = parse_count(spec_field.expr);\n-                                    },\n-                                    sym::width => {\n-                                        position.width = parse_count(spec_field.expr);\n-                                    },\n-                                    _ => {},\n-                                }\n-                            }\n-                        },\n-                        _ => {},\n-                    }\n-                }\n-            }\n-\n+            position.visit_expr(spec);\n             position\n         }))\n     } else {"}]}