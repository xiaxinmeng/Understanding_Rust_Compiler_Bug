{"sha": "ea64a3394312d65c95c7e74e7b8fa7e454685113", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNjRhMzM5NDMxMmQ2NWM5NWM3ZTc0ZTdiOGZhN2U0NTQ2ODUxMTM=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-01-16T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-01-16T00:00:00Z"}, "message": "Update sanitizer tests\n\n* Move tests from src/test/run-make-fulldeps to src/test/ui.\n* Fix memory sanitizer test to detect the intended issue rather than\n  an unrelated one caused by the use of an uninstrumented std.", "tree": {"sha": "d37e1dbb4ef2afa0dd0b52962bb0a6d419aa27e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d37e1dbb4ef2afa0dd0b52962bb0a6d419aa27e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea64a3394312d65c95c7e74e7b8fa7e454685113", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea64a3394312d65c95c7e74e7b8fa7e454685113", "html_url": "https://github.com/rust-lang/rust/commit/ea64a3394312d65c95c7e74e7b8fa7e454685113", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea64a3394312d65c95c7e74e7b8fa7e454685113/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48840618382eccb8a799320c8e5d08e3b52f4c42", "url": "https://api.github.com/repos/rust-lang/rust/commits/48840618382eccb8a799320c8e5d08e3b52f4c42", "html_url": "https://github.com/rust-lang/rust/commit/48840618382eccb8a799320c8e5d08e3b52f4c42"}], "stats": {"total": 159, "additions": 84, "deletions": 75}, "files": [{"sha": "7f5e9049b2f77e3acd72cb1bef34b33ef39e377e", "filename": "src/test/run-make-fulldeps/sanitizer-address/Makefile", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/48840618382eccb8a799320c8e5d08e3b52f4c42/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-address%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/48840618382eccb8a799320c8e5d08e3b52f4c42/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-address%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-address%2FMakefile?ref=48840618382eccb8a799320c8e5d08e3b52f4c42", "patch": "@@ -1,30 +0,0 @@\n-# needs-sanitizer-support\n-\n--include ../tools.mk\n-\n-LOG := $(TMPDIR)/log.txt\n-\n-# NOTE the address sanitizer only supports x86_64 linux and macOS\n-\n-ifeq ($(TARGET),x86_64-apple-darwin)\n-EXTRA_RUSTFLAG=-C rpath\n-else\n-ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n-\n-# Apparently there are very specific Linux kernels, notably the one that's\n-# currently on Travis CI, which contain a buggy commit that triggers failures in\n-# the ASan implementation, detailed at google/sanitizers#837. As noted in\n-# google/sanitizers#856 the \"fix\" is to avoid using PIE binaries, so we pass a\n-# different relocation model to avoid generating a PIE binary. Once Travis is no\n-# longer running kernel 4.4.0-93 we can remove this and pass an empty set of\n-# flags again.\n-EXTRA_RUSTFLAG=-C relocation-model=dynamic-no-pic\n-endif\n-endif\n-\n-all:\n-\t$(RUSTC) -g -Z sanitizer=address -Z print-link-args $(EXTRA_RUSTFLAG) overflow.rs | $(CGREP) rustc_rt.asan\n-\t# Verify that stack buffer overflow is detected:\n-\t$(TMPDIR)/overflow 2>&1 | $(CGREP) stack-buffer-overflow\n-\t# Verify that variable name is included in address sanitizer report:\n-\t$(TMPDIR)/overflow 2>&1 | $(CGREP) \"'xs'\""}, {"sha": "b997a74cc3eb4ac0d810076e9a298ff51f8131b7", "filename": "src/test/run-make-fulldeps/sanitizer-address/overflow.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48840618382eccb8a799320c8e5d08e3b52f4c42/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-address%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48840618382eccb8a799320c8e5d08e3b52f4c42/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-address%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-address%2Foverflow.rs?ref=48840618382eccb8a799320c8e5d08e3b52f4c42", "patch": "@@ -1,4 +0,0 @@\n-fn main() {\n-    let xs = [0, 1, 2, 3];\n-    let _y = unsafe { *xs.as_ptr().offset(4) };\n-}"}, {"sha": "2a23f0fe3d4ef1d5465db9e0b7ecf59ac0c44b9c", "filename": "src/test/run-make-fulldeps/sanitizer-invalid-target/Makefile", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/48840618382eccb8a799320c8e5d08e3b52f4c42/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-target%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/48840618382eccb8a799320c8e5d08e3b52f4c42/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-target%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-target%2FMakefile?ref=48840618382eccb8a799320c8e5d08e3b52f4c42", "patch": "@@ -1,5 +0,0 @@\n--include ../tools.mk\n-\n-all:\n-\t$(RUSTC) -Z sanitizer=leak --target i686-unknown-linux-gnu hello.rs 2>&1 | \\\n-\t\t$(CGREP) 'LeakSanitizer only works with the `x86_64-unknown-linux-gnu` or `x86_64-apple-darwin` target'"}, {"sha": "d3dd5ed03d9548e1015db5a13d339fc7971be813", "filename": "src/test/run-make-fulldeps/sanitizer-invalid-target/hello.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48840618382eccb8a799320c8e5d08e3b52f4c42/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-target%2Fhello.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48840618382eccb8a799320c8e5d08e3b52f4c42/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-target%2Fhello.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-invalid-target%2Fhello.rs?ref=48840618382eccb8a799320c8e5d08e3b52f4c42", "patch": "@@ -1,3 +0,0 @@\n-#![feature(no_core)]\n-#![no_core]\n-#![no_main]"}, {"sha": "da370335ca91814ddf9f68862a52e48cdff5aa73", "filename": "src/test/run-make-fulldeps/sanitizer-leak/Makefile", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/48840618382eccb8a799320c8e5d08e3b52f4c42/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-leak%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/48840618382eccb8a799320c8e5d08e3b52f4c42/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-leak%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-leak%2FMakefile?ref=48840618382eccb8a799320c8e5d08e3b52f4c42", "patch": "@@ -1,7 +0,0 @@\n--include ../tools.mk\n-\n-# needs-sanitizer-support\n-\n-all:\n-\t$(RUSTC) -O -Z sanitizer=leak -Z print-link-args leak.rs | $(CGREP) rustc_rt.lsan\n-\t$(TMPDIR)/leak 2>&1 | $(CGREP) 'detected memory leaks'"}, {"sha": "8bc9df1b4baebbaa5d23d2521e1891439df19d97", "filename": "src/test/run-make-fulldeps/sanitizer-memory/Makefile", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/48840618382eccb8a799320c8e5d08e3b52f4c42/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/48840618382eccb8a799320c8e5d08e3b52f4c42/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2FMakefile?ref=48840618382eccb8a799320c8e5d08e3b52f4c42", "patch": "@@ -1,11 +0,0 @@\n--include ../tools.mk\n-\n-# needs-sanitizer-support\n-# only-linux\n-# only-x86_64\n-\n-all:\n-\t$(RUSTC) -g -Z sanitizer=memory -Z print-link-args uninit.rs | $(CGREP) rustc_rt.msan\n-\t$(TMPDIR)/uninit 2>&1 | $(CGREP) use-of-uninitialized-value\n-\t$(RUSTC) -g -Z sanitizer=memory -Z print-link-args maybeuninit.rs | $(CGREP) rustc_rt.msan\n-\t$(TMPDIR)/maybeuninit 2>&1 | $(CGREP) use-of-uninitialized-value"}, {"sha": "a9ae85f57639e8d8e78f38d19cc83fc2ef829c04", "filename": "src/test/run-make-fulldeps/sanitizer-memory/maybeuninit.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48840618382eccb8a799320c8e5d08e3b52f4c42/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2Fmaybeuninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48840618382eccb8a799320c8e5d08e3b52f4c42/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2Fmaybeuninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2Fmaybeuninit.rs?ref=48840618382eccb8a799320c8e5d08e3b52f4c42", "patch": "@@ -1,8 +0,0 @@\n-use std::mem::MaybeUninit;\n-\n-fn main() {\n-    // This is technically not sound -- but we're literally trying to test\n-    // that the sanitizer catches this, so I guess \"intentionally unsound\"?\n-    let xs: [u8; 4] = unsafe { MaybeUninit::uninit().assume_init() };\n-    let y = xs[0] + xs[1];\n-}"}, {"sha": "eae52508f658543ee92825830af6aebe13176880", "filename": "src/test/run-make-fulldeps/sanitizer-memory/uninit.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/48840618382eccb8a799320c8e5d08e3b52f4c42/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2Funinit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48840618382eccb8a799320c8e5d08e3b52f4c42/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2Funinit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2Funinit.rs?ref=48840618382eccb8a799320c8e5d08e3b52f4c42", "patch": "@@ -1,7 +0,0 @@\n-fn main() {\n-    // This is technically not sound -- but we're literally trying to test\n-    // that the sanitizer catches this, so I guess \"intentionally unsound\"?\n-    #[allow(deprecated)]\n-    let xs: [u8; 4] = unsafe { std::mem::uninitialized() };\n-    let y = xs[0] + xs[1];\n-}"}, {"sha": "d27a30a2dc55f9e65db391fb888dd49fa0f2f1ef", "filename": "src/test/ui/sanitizer-address.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ea64a3394312d65c95c7e74e7b8fa7e454685113/src%2Ftest%2Fui%2Fsanitizer-address.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea64a3394312d65c95c7e74e7b8fa7e454685113/src%2Ftest%2Fui%2Fsanitizer-address.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitizer-address.rs?ref=ea64a3394312d65c95c7e74e7b8fa7e454685113", "patch": "@@ -0,0 +1,21 @@\n+// needs-sanitizer-support\n+// only-x86_64\n+//\n+// compile-flags: -Z sanitizer=address -O\n+//\n+// run-fail\n+// error-pattern: AddressSanitizer: stack-buffer-overflow\n+// error-pattern: 'xs' <== Memory access at offset\n+\n+#![feature(test)]\n+\n+use std::hint::black_box;\n+use std::mem;\n+\n+fn main() {\n+    let xs = [0, 1, 2, 3];\n+    // Avoid optimizing everything out.\n+    let xs = black_box(xs.as_ptr());\n+    let code = unsafe { *xs.offset(4) };\n+    std::process::exit(code);\n+}"}, {"sha": "5c2f2cb4e868bb0012a960f21a61e7f85f044017", "filename": "src/test/ui/sanitizer-leak.rs", "status": "renamed", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea64a3394312d65c95c7e74e7b8fa7e454685113/src%2Ftest%2Fui%2Fsanitizer-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea64a3394312d65c95c7e74e7b8fa7e454685113/src%2Ftest%2Fui%2Fsanitizer-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitizer-leak.rs?ref=ea64a3394312d65c95c7e74e7b8fa7e454685113", "patch": "@@ -1,3 +1,11 @@\n+// needs-sanitizer-support\n+// only-x86_64\n+//\n+// compile-flags: -Z sanitizer=leak -O\n+//\n+// run-fail\n+// error-pattern: LeakSanitizer: detected memory leaks\n+\n #![feature(test)]\n \n use std::hint::black_box;", "previous_filename": "src/test/run-make-fulldeps/sanitizer-leak/leak.rs"}, {"sha": "3e1cf4509a31ff953cc9a914b9caef79083e729b", "filename": "src/test/ui/sanitizer-memory.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ea64a3394312d65c95c7e74e7b8fa7e454685113/src%2Ftest%2Fui%2Fsanitizer-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea64a3394312d65c95c7e74e7b8fa7e454685113/src%2Ftest%2Fui%2Fsanitizer-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitizer-memory.rs?ref=ea64a3394312d65c95c7e74e7b8fa7e454685113", "patch": "@@ -0,0 +1,44 @@\n+// needs-sanitizer-support\n+// only-linux\n+// only-x86_64\n+//\n+// compile-flags: -Z sanitizer=memory -Zsanitizer-memory-track-origins -O\n+//\n+// run-fail\n+// error-pattern: MemorySanitizer: use-of-uninitialized-value\n+// error-pattern: Uninitialized value was created by an allocation\n+// error-pattern: in the stack frame of function 'random'\n+//\n+// This test case intentionally limits the usage of the std,\n+// since it will be linked with an uninstrumented version of it.\n+\n+#![feature(core_intrinsics)]\n+#![feature(start)]\n+#![feature(test)]\n+\n+use std::hint::black_box;\n+use std::mem::MaybeUninit;\n+\n+#[inline(never)]\n+#[no_mangle]\n+fn random() -> [isize; 32] {\n+    let r = unsafe { MaybeUninit::uninit().assume_init() };\n+    // Avoid optimizing everything out.\n+    black_box(r)\n+}\n+\n+#[inline(never)]\n+#[no_mangle]\n+fn xor(a: &[isize]) -> isize {\n+    let mut s = 0;\n+    for i in 0..a.len() {\n+        s = s ^ a[i];\n+    }\n+    s\n+}\n+\n+#[start]\n+fn main(_: isize, _: *const *const u8) -> isize {\n+    let r = random();\n+    xor(&r)\n+}"}, {"sha": "444333c3f01e22a3413e6e8875193e7b8102c819", "filename": "src/test/ui/sanitizer-unsupported-target.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ea64a3394312d65c95c7e74e7b8fa7e454685113/src%2Ftest%2Fui%2Fsanitizer-unsupported-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea64a3394312d65c95c7e74e7b8fa7e454685113/src%2Ftest%2Fui%2Fsanitizer-unsupported-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitizer-unsupported-target.rs?ref=ea64a3394312d65c95c7e74e7b8fa7e454685113", "patch": "@@ -0,0 +1,7 @@\n+// ignore-tidy-linelength\n+// compile-flags: -Z sanitizer=leak --target i686-unknown-linux-gnu\n+// error-pattern: error: LeakSanitizer only works with the `x86_64-unknown-linux-gnu` or `x86_64-apple-darwin` target\n+\n+#![feature(no_core)]\n+#![no_core]\n+#![no_main]"}, {"sha": "38be58dd4b36598babb4049de8cfdee4352c1af1", "filename": "src/test/ui/sanitizer-unsupported-target.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea64a3394312d65c95c7e74e7b8fa7e454685113/src%2Ftest%2Fui%2Fsanitizer-unsupported-target.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ea64a3394312d65c95c7e74e7b8fa7e454685113/src%2Ftest%2Fui%2Fsanitizer-unsupported-target.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitizer-unsupported-target.stderr?ref=ea64a3394312d65c95c7e74e7b8fa7e454685113", "patch": "@@ -0,0 +1,4 @@\n+error: LeakSanitizer only works with the `x86_64-unknown-linux-gnu` or `x86_64-apple-darwin` target\n+\n+error: aborting due to previous error\n+"}]}