{"sha": "6f95ae612432b38ebdd92c709f2608840f116280", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmOTVhZTYxMjQzMmIzOGViZGQ5MmM3MDlmMjYwODg0MGYxMTYyODA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-09T06:05:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-09T06:05:08Z"}, "message": "Auto merge of #30278 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #30201, #30224, #30261, #30273, #30274\n- Failed merges:", "tree": {"sha": "ba8cfbe70e77efa968dc37e5737eb33f615b4996", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba8cfbe70e77efa968dc37e5737eb33f615b4996"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f95ae612432b38ebdd92c709f2608840f116280", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f95ae612432b38ebdd92c709f2608840f116280", "html_url": "https://github.com/rust-lang/rust/commit/6f95ae612432b38ebdd92c709f2608840f116280", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f95ae612432b38ebdd92c709f2608840f116280/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4005d437653fc09b47cd3176bb65323c52cccd47", "url": "https://api.github.com/repos/rust-lang/rust/commits/4005d437653fc09b47cd3176bb65323c52cccd47", "html_url": "https://github.com/rust-lang/rust/commit/4005d437653fc09b47cd3176bb65323c52cccd47"}, {"sha": "e78629eb5a6bcaf81588814faf36059ea8a175ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/e78629eb5a6bcaf81588814faf36059ea8a175ec", "html_url": "https://github.com/rust-lang/rust/commit/e78629eb5a6bcaf81588814faf36059ea8a175ec"}], "stats": {"total": 157, "additions": 89, "deletions": 68}, "files": [{"sha": "f9e3299f9e726c2d4db86c2a6ca1b37fc219ea24", "filename": "src/doc/book/traits.md", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6f95ae612432b38ebdd92c709f2608840f116280/src%2Fdoc%2Fbook%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/6f95ae612432b38ebdd92c709f2608840f116280/src%2Fdoc%2Fbook%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Ftraits.md?ref=6f95ae612432b38ebdd92c709f2608840f116280", "patch": "@@ -3,8 +3,8 @@\n A trait is a language feature that tells the Rust compiler about\n functionality a type must provide.\n \n-Do you remember the `impl` keyword, used to call a function with [method\n-syntax][methodsyntax]?\n+Recall the `impl` keyword, used to call a function with [method\n+syntax][methodsyntax]:\n \n ```rust\n struct Circle {\n@@ -22,8 +22,8 @@ impl Circle {\n \n [methodsyntax]: method-syntax.html\n \n-Traits are similar, except that we define a trait with just the method\n-signature, then implement the trait for that struct. Like this:\n+Traits are similar, except that we first define a trait with a method\n+signature, then implement the trait for a type. In this example, we implement the trait `HasArea` for `Circle`:\n \n ```rust\n struct Circle {\n@@ -399,15 +399,13 @@ fn inverse<T>() -> T\n ```\n \n This shows off the additional feature of `where` clauses: they allow bounds\n-where the left-hand side is an arbitrary type (`i32` in this case), not just a\n-plain type parameter (like `T`). In this example, `i32` must implement\n+on the left-hand side not only of type parameters `T`, but also of types (`i32` in this case). In this example, `i32` must implement\n `ConvertTo<T>`. Rather than defining what `i32` is (since that's obvious), the\n-`where` clause here is a constraint on `T`.\n+`where` clause here constrains `T`.\n \n # Default methods\n \n-If you already know how a typical implementor will define a method, you can\n-let your trait supply a default:\n+A default method can be added to a trait definition if it is already known how a typical implementor will define a method. For example, `is_invalid()` is defined as the opposite of `is_valid()`:\n \n ```rust\n trait Foo {\n@@ -417,9 +415,7 @@ trait Foo {\n }\n ```\n \n-Implementors of the `Foo` trait need to implement `is_valid()`, but they don\u2019t\n-need to implement `is_invalid()`. They\u2019ll get this default behavior. They can\n-override the default if they so choose:\n+Implementors of the `Foo` trait need to implement `is_valid()` but not `is_invalid()` due to the added default behavior. This default behavior can still be overridden as in:\n \n ```rust\n # trait Foo {\n@@ -446,7 +442,7 @@ impl Foo for OverrideDefault {\n \n     fn is_invalid(&self) -> bool {\n         println!(\"Called OverrideDefault.is_invalid!\");\n-        true // this implementation is a self-contradiction!\n+        true // overrides the expected value of is_invalid()\n     }\n }\n \n@@ -499,7 +495,7 @@ error: the trait `main::Foo` is not implemented for the type `main::Baz` [E0277]\n \n # Deriving\n \n-Implementing traits like `Debug` and `Default` over and over again can become\n+Implementing traits like `Debug` and `Default` repeatedly can become\n quite tedious. For that reason, Rust provides an [attribute][attributes] that\n allows you to let Rust automatically implement traits for you:\n "}, {"sha": "0262ff5a71aadc65a1d313950362a9ded50c800c", "filename": "src/doc/reference.md", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6f95ae612432b38ebdd92c709f2608840f116280/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/6f95ae612432b38ebdd92c709f2608840f116280/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=6f95ae612432b38ebdd92c709f2608840f116280", "patch": "@@ -515,6 +515,25 @@ fn bar() {\n # fn main() {}\n ```\n \n+Additionally keyword `super` may be repeated several times after the first\n+`super` or `self` to refer to ancestor modules.\n+\n+```rust\n+mod a {\n+    fn foo() {}\n+\n+    mod b {\n+        mod c {\n+            fn foo() {\n+                super::super::foo(); // call a's foo function\n+                self::super::super::foo(); // call a's foo function\n+            }\n+        }\n+    }\n+}\n+# fn main() {}\n+```\n+\n # Syntax extensions\n \n A number of minor features of Rust are not central enough to have their own"}, {"sha": "ddad7533a081f8f89d2649f6c5399f53475c9309", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6f95ae612432b38ebdd92c709f2608840f116280/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f95ae612432b38ebdd92c709f2608840f116280/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=6f95ae612432b38ebdd92c709f2608840f116280", "patch": "@@ -920,21 +920,7 @@ impl<T: Clone> Vec<T> {\n         }\n     }\n \n-    /// Appends all elements in a slice to the `Vec`.\n-    ///\n-    /// Iterates over the slice `other`, clones each element, and then appends\n-    /// it to this `Vec`. The `other` vector is traversed in-order.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(vec_push_all)]\n-    /// #![allow(deprecated)]\n-    ///\n-    /// let mut vec = vec![1];\n-    /// vec.push_all(&[2, 3, 4]);\n-    /// assert_eq!(vec, [1, 2, 3, 4]);\n-    /// ```\n+    #[allow(missing_docs)]\n     #[inline]\n     #[unstable(feature = \"vec_push_all\",\n                reason = \"likely to be replaced by a more optimized extend\","}, {"sha": "959b6a97c5ccbacbcfdae275fe5efe0cfba13ac0", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 2, "deletions": 30, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6f95ae612432b38ebdd92c709f2608840f116280/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f95ae612432b38ebdd92c709f2608840f116280/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=6f95ae612432b38ebdd92c709f2608840f116280", "patch": "@@ -1893,21 +1893,7 @@ pub trait Iterator {\n             .map(|(_, x)| x)\n     }\n \n-    /// Returns the element that gives the maximum value from the\n-    /// specified function.\n-    ///\n-    /// Returns the rightmost element if the comparison determines two elements\n-    /// to be equally maximum.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(iter_cmp)]\n-    /// #![allow(deprecated)]\n-    ///\n-    /// let a = [-3_i32, 0, 1, 5, -10];\n-    /// assert_eq!(*a.iter().max_by(|x| x.abs()).unwrap(), -10);\n-    /// ```\n+    #[allow(missing_docs)]\n     #[inline]\n     #[unstable(feature = \"iter_cmp\",\n                reason = \"may want to produce an Ordering directly; see #15311\",\n@@ -1945,22 +1931,8 @@ pub trait Iterator {\n             .map(|(_, x)| x)\n     }\n \n-    /// Returns the element that gives the minimum value from the\n-    /// specified function.\n-    ///\n-    /// Returns the latest element if the comparison determines two elements\n-    /// to be equally minimum.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(iter_cmp)]\n-    /// #![allow(deprecated)]\n-    ///\n-    /// let a = [-3_i32, 0, 1, 5, -10];\n-    /// assert_eq!(*a.iter().min_by(|x| x.abs()).unwrap(), 0);\n-    /// ```\n     #[inline]\n+    #[allow(missing_docs)]\n     #[unstable(feature = \"iter_cmp\",\n                reason = \"may want to produce an Ordering directly; see #15311\",\n                issue = \"27724\")]"}, {"sha": "86dd363993aec5c0720129ec28d9d81bde0610b4", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6f95ae612432b38ebdd92c709f2608840f116280/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f95ae612432b38ebdd92c709f2608840f116280/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=6f95ae612432b38ebdd92c709f2608840f116280", "patch": "@@ -1948,7 +1948,7 @@ fn main() {\n \n You cannot directly use a dereference operation whilst initializing a constant\n or a static. To fix this error, restructure your code to avoid this dereference,\n-perharps moving it inline:\n+perhaps moving it inline:\n \n ```\n use std::ops::Deref;\n@@ -1967,6 +1967,23 @@ fn main() {\n ```\n \"##,\n \n+E0452: r##\"\n+An invalid lint attribute has been given. Erroneous code example:\n+\n+```\n+#![allow(foo = \"\")] // error: malformed lint attribute\n+```\n+\n+Lint attributes only accept a list of identifiers (where each identifier is a\n+lint name). Ensure the attribute is of this form:\n+\n+```\n+#![allow(foo)] // ok!\n+// or:\n+#![allow(foo, foo2)] // ok!\n+```\n+\"##,\n+\n E0492: r##\"\n A borrow of a constant containing interior mutability was attempted. Erroneous\n code example:\n@@ -2242,7 +2259,6 @@ register_diagnostics! {\n     E0314, // closure outlives stack frame\n     E0315, // cannot invoke closure outside of its lifetime\n     E0316, // nested quantification of lifetimes\n-    E0452, // malformed lint attribute\n     E0453, // overruled by outer forbid\n     E0471, // constant evaluation error: ..\n     E0472, // asm! is unsupported on this target"}, {"sha": "1ff8f572a7f571cf179e9a9b3412b74d7a624a13", "filename": "src/libstd/io/error.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6f95ae612432b38ebdd92c709f2608840f116280/src%2Flibstd%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f95ae612432b38ebdd92c709f2608840f116280/src%2Flibstd%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ferror.rs?ref=6f95ae612432b38ebdd92c709f2608840f116280", "patch": "@@ -150,12 +150,7 @@ pub enum ErrorKind {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Other,\n \n-    /// An error returned when an operation could not be completed because an\n-    /// \"end of file\" was reached prematurely.\n-    ///\n-    /// This typically means that an operation could only succeed if it read a\n-    /// particular number of bytes but only a smaller number of bytes could be\n-    /// read.\n+    #[allow(missing_docs)]\n     #[unstable(feature = \"read_exact_old\", reason = \"recently added\",\n                issue = \"0\")]\n     #[rustc_deprecated(since = \"1.6.0\", reason = \"renamed to UnexpectedEof\")]"}, {"sha": "efe40cf07c130981514329179759805502c9a57e", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f95ae612432b38ebdd92c709f2608840f116280/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f95ae612432b38ebdd92c709f2608840f116280/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=6f95ae612432b38ebdd92c709f2608840f116280", "patch": "@@ -576,7 +576,7 @@ pub trait Read {\n     /// will continue.\n     ///\n     /// If this function encounters an \"end of file\" before completely filling\n-    /// the buffer, it returns an error of the kind `ErrorKind::UnexpectedEOF`.\n+    /// the buffer, it returns an error of the kind `ErrorKind::UnexpectedEof`.\n     /// The contents of `buf` are unspecified in this case.\n     ///\n     /// If any other read error is encountered then this function immediately"}, {"sha": "34a7ff833bbbdebb25f7e87d212d3c595da79858", "filename": "src/test/run-fail/overflowing-rsh-5.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6f95ae612432b38ebdd92c709f2608840f116280/src%2Ftest%2Frun-fail%2Foverflowing-rsh-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f95ae612432b38ebdd92c709f2608840f116280/src%2Ftest%2Frun-fail%2Foverflowing-rsh-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-5.rs?ref=6f95ae612432b38ebdd92c709f2608840f116280", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern:thread '<main>' panicked at 'shift operation overflowed'\n+// compile-flags: -C debug-assertions\n+\n+#![warn(exceeding_bitshifts)]\n+\n+fn main() {\n+    let _n = 1i64 >> [64][0];\n+}"}, {"sha": "b6f4348b184de6829fa470a71fcb64ea7b63118f", "filename": "src/test/run-fail/overflowing-rsh-6.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6f95ae612432b38ebdd92c709f2608840f116280/src%2Ftest%2Frun-fail%2Foverflowing-rsh-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f95ae612432b38ebdd92c709f2608840f116280/src%2Ftest%2Frun-fail%2Foverflowing-rsh-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-6.rs?ref=6f95ae612432b38ebdd92c709f2608840f116280", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern:thread '<main>' panicked at 'shift operation overflowed'\n+// compile-flags: -C debug-assertions\n+\n+#![warn(exceeding_bitshifts)]\n+#![feature(const_indexing)]\n+\n+fn main() {\n+    let _n = 1i64 >> [64][0];\n+}"}]}