{"sha": "df9a2e0687895731e12f4a2651e8d70acd08872d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmOWEyZTA2ODc4OTU3MzFlMTJmNGEyNjUxZThkNzBhY2QwODg3MmQ=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-07-30T22:14:34Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-08-31T01:18:43Z"}, "message": "Handle irrufutable or unreachable let-else", "tree": {"sha": "a9a16047e1707928ee90f6d2f49cc817725972a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9a16047e1707928ee90f6d2f49cc817725972a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df9a2e0687895731e12f4a2651e8d70acd08872d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df9a2e0687895731e12f4a2651e8d70acd08872d", "html_url": "https://github.com/rust-lang/rust/commit/df9a2e0687895731e12f4a2651e8d70acd08872d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df9a2e0687895731e12f4a2651e8d70acd08872d/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc028f65688da4d56315bab9f6ed6cfa29e4af84", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc028f65688da4d56315bab9f6ed6cfa29e4af84", "html_url": "https://github.com/rust-lang/rust/commit/dc028f65688da4d56315bab9f6ed6cfa29e4af84"}], "stats": {"total": 54, "additions": 41, "deletions": 13}, "files": [{"sha": "b34c1e07be71c61ff6d2673d67e1ea2bfe1509e6", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/df9a2e0687895731e12f4a2651e8d70acd08872d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9a2e0687895731e12f4a2651e8d70acd08872d/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=df9a2e0687895731e12f4a2651e8d70acd08872d", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::lint::builtin::BINDINGS_WITH_VARIANT_NAME;\n use rustc_session::lint::builtin::{IRREFUTABLE_LET_PATTERNS, UNREACHABLE_PATTERNS};\n use rustc_session::Session;\n-use rustc_span::Span;\n+use rustc_span::{DesugaringKind, ExpnKind, Span};\n use std::slice;\n \n crate fn check_match(tcx: TyCtxt<'_>, def_id: DefId) {\n@@ -381,6 +381,10 @@ fn irrefutable_let_pattern(tcx: TyCtxt<'_>, id: HirId, span: Span) {\n     }\n \n     let source = let_source(tcx, id);\n+    let span = match source {\n+        LetSource::LetElse(span) => span,\n+        _ => span,\n+    };\n     tcx.struct_span_lint_hir(IRREFUTABLE_LET_PATTERNS, id, span, |lint| match source {\n         LetSource::GenericLet => {\n             emit_diag!(lint, \"`let`\", \"`let` is useless\", \"removing `let`\");\n@@ -401,6 +405,14 @@ fn irrefutable_let_pattern(tcx: TyCtxt<'_>, id: HirId, span: Span) {\n                 \"removing the guard and adding a `let` inside the match arm\"\n             );\n         }\n+        LetSource::LetElse(..) => {\n+            emit_diag!(\n+                lint,\n+                \"`let...else`\",\n+                \"`else` clause is useless\",\n+                \"removing the `else` clause\"\n+            );\n+        }\n         LetSource::WhileLet => {\n             emit_diag!(\n                 lint,\n@@ -755,6 +767,7 @@ pub enum LetSource {\n     GenericLet,\n     IfLet,\n     IfLetGuard,\n+    LetElse(Span),\n     WhileLet,\n }\n \n@@ -768,6 +781,12 @@ fn let_source(tcx: TyCtxt<'_>, pat_id: HirId) -> LetSource {\n         }) if hir_id == pat_id => {\n             return LetSource::IfLetGuard;\n         }\n+        hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Let(..), span, .. }) => {\n+            let expn_data = span.ctxt().outer_expn_data();\n+            if let ExpnKind::Desugaring(DesugaringKind::LetElse) = expn_data.kind {\n+                return LetSource::LetElse(expn_data.call_site);\n+            }\n+        }\n         _ => {}\n     }\n     let parent_parent = hir.get_parent_node(parent);"}, {"sha": "076de846129e676b51b742fbe1b8ed0c1c09f51a", "filename": "src/test/ui/pattern/usefulness/top-level-alternation.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df9a2e0687895731e12f4a2651e8d70acd08872d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftop-level-alternation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9a2e0687895731e12f4a2651e8d70acd08872d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftop-level-alternation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftop-level-alternation.rs?ref=df9a2e0687895731e12f4a2651e8d70acd08872d", "patch": "@@ -1,3 +1,5 @@\n+#![feature(let_else)]\n+\n #![deny(unreachable_patterns)]\n \n fn main() {\n@@ -53,4 +55,5 @@ fn main() {\n         1..=2 => {}, //~ ERROR unreachable pattern\n         _ => {},\n     }\n+    let (0 | 0) = 0 else { return }; //~ ERROR unreachable pattern\n }"}, {"sha": "dd5936fdcc42930c9ca3afb2d1a29153377b0424", "filename": "src/test/ui/pattern/usefulness/top-level-alternation.stderr", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/df9a2e0687895731e12f4a2651e8d70acd08872d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftop-level-alternation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df9a2e0687895731e12f4a2651e8d70acd08872d/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftop-level-alternation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftop-level-alternation.stderr?ref=df9a2e0687895731e12f4a2651e8d70acd08872d", "patch": "@@ -1,68 +1,74 @@\n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:4:23\n+  --> $DIR/top-level-alternation.rs:6:23\n    |\n LL |     while let 0..=2 | 1 = 0 {}\n    |                       ^\n    |\n note: the lint level is defined here\n-  --> $DIR/top-level-alternation.rs:1:9\n+  --> $DIR/top-level-alternation.rs:3:9\n    |\n LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:5:20\n+  --> $DIR/top-level-alternation.rs:7:20\n    |\n LL |     if let 0..=2 | 1 = 0 {}\n    |                    ^\n \n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:9:15\n+  --> $DIR/top-level-alternation.rs:11:15\n    |\n LL |             | 0 => {}\n    |               ^\n \n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:14:15\n+  --> $DIR/top-level-alternation.rs:16:15\n    |\n LL |             | Some(0) => {}\n    |               ^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:19:9\n+  --> $DIR/top-level-alternation.rs:21:9\n    |\n LL |         (0, 0) => {}\n    |         ^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:39:9\n+  --> $DIR/top-level-alternation.rs:41:9\n    |\n LL |         _ => {}\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:43:9\n+  --> $DIR/top-level-alternation.rs:45:9\n    |\n LL |         Some(_) => {}\n    |         ^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:44:9\n+  --> $DIR/top-level-alternation.rs:46:9\n    |\n LL |         None => {}\n    |         ^^^^\n \n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:49:9\n+  --> $DIR/top-level-alternation.rs:51:9\n    |\n LL |         None | Some(_) => {}\n    |         ^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:53:9\n+  --> $DIR/top-level-alternation.rs:55:9\n    |\n LL |         1..=2 => {},\n    |         ^^^^^\n \n-error: aborting due to 10 previous errors\n+error: unreachable pattern\n+  --> $DIR/top-level-alternation.rs:58:14\n+   |\n+LL |     let (0 | 0) = 0 else { return };\n+   |              ^\n+\n+error: aborting due to 11 previous errors\n "}]}