{"sha": "69325f815d1316dec36f61afc13dbbaf78cd855e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5MzI1ZjgxNWQxMzE2ZGVjMzZmNjFhZmMxM2RiYmFmNzhjZDg1NWU=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-06-04T00:16:28Z"}, "committer": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-06-04T00:16:28Z"}, "message": "More comments.", "tree": {"sha": "70086330d82c1558253e576c67dc2b6a611e4a51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70086330d82c1558253e576c67dc2b6a611e4a51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69325f815d1316dec36f61afc13dbbaf78cd855e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69325f815d1316dec36f61afc13dbbaf78cd855e", "html_url": "https://github.com/rust-lang/rust/commit/69325f815d1316dec36f61afc13dbbaf78cd855e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69325f815d1316dec36f61afc13dbbaf78cd855e/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcf7fbf833130a046c41d58a26567e39a6c001ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcf7fbf833130a046c41d58a26567e39a6c001ce", "html_url": "https://github.com/rust-lang/rust/commit/dcf7fbf833130a046c41d58a26567e39a6c001ce"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "975f3a7eb26c0be617699b8e36640a09f0bc51bc", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/69325f815d1316dec36f61afc13dbbaf78cd855e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69325f815d1316dec36f61afc13dbbaf78cd855e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=69325f815d1316dec36f61afc13dbbaf78cd855e", "patch": "@@ -1641,6 +1641,8 @@ fn GEP_tag(@block_ctxt cx,\n }\n \n \n+// trans_raw_malloc: expects a type indicating which pointer type we want and\n+// a size indicating how much space we want malloc'd.\n fn trans_raw_malloc(&@block_ctxt cx, TypeRef llptr_ty, ValueRef llsize)\n         -> result {\n     // FIXME: need a table to collect tydesc globals.\n@@ -1650,14 +1652,29 @@ fn trans_raw_malloc(&@block_ctxt cx, TypeRef llptr_ty, ValueRef llsize)\n     ret res(cx, cx.build.PointerCast(rval, llptr_ty));\n }\n \n+\n+// trans_malloc_boxed: expects an unboxed type and returns a pointer to enough\n+// space for something of that type, along with space for a reference count;\n+// in other words, it allocates a box for something of that type.\n fn trans_malloc_boxed(&@block_ctxt cx, ty::t t) -> result {\n     // Synthesize a fake box type structurally so we have something\n     // to measure the size of.\n+\n+    // We synthesize two types here because we want both the type of the\n+    // pointer and the pointee.  boxed_body is the type that we measure the\n+    // size of; box_ptr is the type that's converted to a TypeRef and used as\n+    // the pointer cast target in trans_raw_malloc.\n     auto boxed_body = ty::mk_imm_tup(cx.fcx.lcx.ccx.tcx,\n+                                     // The mk_int here is the space being\n+                                     // reserved for the refcount.\n                                     [ty::mk_int(cx.fcx.lcx.ccx.tcx), t]);\n     auto box_ptr = ty::mk_imm_box(cx.fcx.lcx.ccx.tcx, t);\n     auto sz = size_of(cx, boxed_body);\n+    \n+    // Grab the TypeRef type of box_ptr, because that's what trans_raw_malloc\n+    // wants.\n     auto llty = type_of(cx.fcx.lcx.ccx, cx.sp, box_ptr);\n+\n     ret trans_raw_malloc(sz.bcx, llty, sz.val);\n }\n "}]}