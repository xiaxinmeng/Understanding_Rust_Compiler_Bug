{"sha": "5314c72de88a0c8da60e2999c8b555d44b9967f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMTRjNzJkZTg4YTBjOGRhNjBlMjk5OWM4YjU1NWQ0NGI5OTY3ZjI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-06T22:16:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-06T22:16:07Z"}, "message": "Rollup merge of #77571 - pickfire:patch-6, r=cramertj\n\nUse matches! for core::char methods", "tree": {"sha": "456230710fd90faa9270acc8b139dac7ae824ff9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/456230710fd90faa9270acc8b139dac7ae824ff9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5314c72de88a0c8da60e2999c8b555d44b9967f2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJffOynCRBK7hj4Ov3rIwAAdHIIAJgXgdukt0bv7AOLSWf/7XRi\nK0pCzlHZPSyT99M69VGyN8CHEKpsop/wPcw8LFdLPmKCKdVurfTeIARWg6QeIX4W\ntGz+CdKTbW/3W7drwFCTuPVV8MRPwSC8LZTV7dvQ2KfX7BoNMqnXyP1+9i5KMmp6\nSjnr+G9PvHRDx1U5Mj1anpk/vcfINatf7dRJYBKPYSc2A/+tWgwW6T+NvpImxB1v\nf1uenfoGfcvnf0Hv9Idi5ULOo4YSO/oaQjgukftrLaLVIZ5wuE+WVYF3o8v7d0ev\nbwkDr7dZ9sjpMC6IsYEG+qTpgmEEJwDkl9v8iU3e3FPB16BMtQE8+9we4gOEoA0=\n=YD3r\n-----END PGP SIGNATURE-----\n", "payload": "tree 456230710fd90faa9270acc8b139dac7ae824ff9\nparent 83c58d6fb6469f57cb9a7b0d5de34f1567892653\nparent 9704911ecbea92f3a883d77f355af11be39626c0\nauthor Dylan DPC <dylan.dpc@gmail.com> 1602022567 +0200\ncommitter GitHub <noreply@github.com> 1602022567 +0200\n\nRollup merge of #77571 - pickfire:patch-6, r=cramertj\n\nUse matches! for core::char methods\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5314c72de88a0c8da60e2999c8b555d44b9967f2", "html_url": "https://github.com/rust-lang/rust/commit/5314c72de88a0c8da60e2999c8b555d44b9967f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5314c72de88a0c8da60e2999c8b555d44b9967f2/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83c58d6fb6469f57cb9a7b0d5de34f1567892653", "url": "https://api.github.com/repos/rust-lang/rust/commits/83c58d6fb6469f57cb9a7b0d5de34f1567892653", "html_url": "https://github.com/rust-lang/rust/commit/83c58d6fb6469f57cb9a7b0d5de34f1567892653"}, {"sha": "9704911ecbea92f3a883d77f355af11be39626c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9704911ecbea92f3a883d77f355af11be39626c0", "html_url": "https://github.com/rust-lang/rust/commit/9704911ecbea92f3a883d77f355af11be39626c0"}], "stats": {"total": 50, "additions": 10, "deletions": 40}, "files": [{"sha": "1b847addcf8064c6990daaf31b21db27f3a80b58", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 10, "deletions": 40, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/5314c72de88a0c8da60e2999c8b555d44b9967f2/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5314c72de88a0c8da60e2999c8b555d44b9967f2/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=5314c72de88a0c8da60e2999c8b555d44b9967f2", "patch": "@@ -1229,10 +1229,7 @@ impl char {\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_alphabetic(&self) -> bool {\n-        match *self {\n-            'A'..='Z' | 'a'..='z' => true,\n-            _ => false,\n-        }\n+        matches!(*self, 'A'..='Z' | 'a'..='z')\n     }\n \n     /// Checks if the value is an ASCII uppercase character:\n@@ -1265,10 +1262,7 @@ impl char {\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_uppercase(&self) -> bool {\n-        match *self {\n-            'A'..='Z' => true,\n-            _ => false,\n-        }\n+        matches!(*self, 'A'..='Z')\n     }\n \n     /// Checks if the value is an ASCII lowercase character:\n@@ -1301,10 +1295,7 @@ impl char {\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_lowercase(&self) -> bool {\n-        match *self {\n-            'a'..='z' => true,\n-            _ => false,\n-        }\n+        matches!(*self, 'a'..='z')\n     }\n \n     /// Checks if the value is an ASCII alphanumeric character:\n@@ -1340,10 +1331,7 @@ impl char {\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_alphanumeric(&self) -> bool {\n-        match *self {\n-            '0'..='9' | 'A'..='Z' | 'a'..='z' => true,\n-            _ => false,\n-        }\n+        matches!(*self, '0'..='9' | 'A'..='Z' | 'a'..='z')\n     }\n \n     /// Checks if the value is an ASCII decimal digit:\n@@ -1376,10 +1364,7 @@ impl char {\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_digit(&self) -> bool {\n-        match *self {\n-            '0'..='9' => true,\n-            _ => false,\n-        }\n+        matches!(*self, '0'..='9')\n     }\n \n     /// Checks if the value is an ASCII hexadecimal digit:\n@@ -1415,10 +1400,7 @@ impl char {\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_hexdigit(&self) -> bool {\n-        match *self {\n-            '0'..='9' | 'A'..='F' | 'a'..='f' => true,\n-            _ => false,\n-        }\n+        matches!(*self, '0'..='9' | 'A'..='F' | 'a'..='f')\n     }\n \n     /// Checks if the value is an ASCII punctuation character:\n@@ -1455,10 +1437,7 @@ impl char {\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_punctuation(&self) -> bool {\n-        match *self {\n-            '!'..='/' | ':'..='@' | '['..='`' | '{'..='~' => true,\n-            _ => false,\n-        }\n+        matches!(*self, '!'..='/' | ':'..='@' | '['..='`' | '{'..='~')\n     }\n \n     /// Checks if the value is an ASCII graphic character:\n@@ -1491,10 +1470,7 @@ impl char {\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_graphic(&self) -> bool {\n-        match *self {\n-            '!'..='~' => true,\n-            _ => false,\n-        }\n+        matches!(*self, '!'..='~')\n     }\n \n     /// Checks if the value is an ASCII whitespace character:\n@@ -1544,10 +1520,7 @@ impl char {\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_whitespace(&self) -> bool {\n-        match *self {\n-            '\\t' | '\\n' | '\\x0C' | '\\r' | ' ' => true,\n-            _ => false,\n-        }\n+        matches!(*self, '\\t' | '\\n' | '\\x0C' | '\\r' | ' ')\n     }\n \n     /// Checks if the value is an ASCII control character:\n@@ -1582,10 +1555,7 @@ impl char {\n     #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_control(&self) -> bool {\n-        match *self {\n-            '\\0'..='\\x1F' | '\\x7F' => true,\n-            _ => false,\n-        }\n+        matches!(*self, '\\0'..='\\x1F' | '\\x7F')\n     }\n }\n "}]}