{"sha": "c126aa56924ceec46557eb66420482f854145c87", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMjZhYTU2OTI0Y2VlYzQ2NTU3ZWI2NjQyMDQ4MmY4NTQxNDVjODc=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-15T05:29:17Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-15T05:29:17Z"}, "message": "std::rt: s/pausible/pausable/.", "tree": {"sha": "344795613c02ca2c7c6c2833184b6a51c6620d64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/344795613c02ca2c7c6c2833184b6a51c6620d64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c126aa56924ceec46557eb66420482f854145c87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c126aa56924ceec46557eb66420482f854145c87", "html_url": "https://github.com/rust-lang/rust/commit/c126aa56924ceec46557eb66420482f854145c87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c126aa56924ceec46557eb66420482f854145c87/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55534100ce175143e2c7223100b825bf130e750b", "url": "https://api.github.com/repos/rust-lang/rust/commits/55534100ce175143e2c7223100b825bf130e750b", "html_url": "https://github.com/rust-lang/rust/commit/55534100ce175143e2c7223100b825bf130e750b"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "32c7699a30847b2a6b37bc29eb4574afaf8a1231", "filename": "src/librustuv/idle.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c126aa56924ceec46557eb66420482f854145c87/src%2Flibrustuv%2Fidle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c126aa56924ceec46557eb66420482f854145c87/src%2Flibrustuv%2Fidle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fidle.rs?ref=c126aa56924ceec46557eb66420482f854145c87", "patch": "@@ -13,7 +13,7 @@ use std::libc::{c_int, c_void};\n \n use uvll;\n use super::{Loop, UvHandle};\n-use std::rt::rtio::{Callback, PausibleIdleCallback};\n+use std::rt::rtio::{Callback, PausableIdleCallback};\n \n pub struct IdleWatcher {\n     handle: *uvll::uv_idle_t,\n@@ -63,7 +63,7 @@ impl IdleWatcher {\n     }\n }\n \n-impl PausibleIdleCallback for IdleWatcher {\n+impl PausableIdleCallback for IdleWatcher {\n     fn pause(&mut self) {\n         if self.idle_flag == true {\n             assert_eq!(unsafe {uvll::uv_idle_stop(self.handle) }, 0);\n@@ -99,7 +99,7 @@ impl Drop for IdleWatcher {\n mod test {\n     use super::*;\n     use std::rt::tube::Tube;\n-    use std::rt::rtio::{Callback, PausibleIdleCallback};\n+    use std::rt::rtio::{Callback, PausableIdleCallback};\n     use super::super::local_loop;\n \n     struct MyCallback(Tube<int>, int);"}, {"sha": "c556b96671ab63c9dc24167b508c737c6db6bd2d", "filename": "src/librustuv/uvio.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c126aa56924ceec46557eb66420482f854145c87/src%2Flibrustuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c126aa56924ceec46557eb66420482f854145c87/src%2Flibrustuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvio.rs?ref=c126aa56924ceec46557eb66420482f854145c87", "patch": "@@ -153,8 +153,8 @@ impl EventLoop for UvEventLoop {\n         IdleWatcher::onetime(self.uvio.uv_loop(), f);\n     }\n \n-    fn pausible_idle_callback(&mut self, cb: ~Callback) -> ~PausibleIdleCallback {\n-        IdleWatcher::new(self.uvio.uv_loop(), cb) as ~PausibleIdleCallback\n+    fn pausable_idle_callback(&mut self, cb: ~Callback) -> ~PausableIdleCallback {\n+        IdleWatcher::new(self.uvio.uv_loop(), cb) as ~PausableIdleCallback\n     }\n \n     fn remote_callback(&mut self, f: ~Callback) -> ~RemoteCallback {"}, {"sha": "3589582357c56480d7e2ec36deee5a762fe7f960", "filename": "src/libstd/rt/basic.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c126aa56924ceec46557eb66420482f854145c87/src%2Flibstd%2Frt%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c126aa56924ceec46557eb66420482f854145c87/src%2Flibstd%2Frt%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbasic.rs?ref=c126aa56924ceec46557eb66420482f854145c87", "patch": "@@ -15,7 +15,7 @@\n use prelude::*;\n \n use cast;\n-use rt::rtio::{EventLoop, IoFactory, RemoteCallback, PausibleIdleCallback,\n+use rt::rtio::{EventLoop, IoFactory, RemoteCallback, PausableIdleCallback,\n                Callback};\n use unstable::sync::Exclusive;\n use io::native;\n@@ -28,7 +28,7 @@ pub fn event_loop() -> ~EventLoop {\n \n struct BasicLoop {\n     work: ~[proc()],                  // pending work\n-    idle: Option<*mut BasicPausible>, // only one is allowed\n+    idle: Option<*mut BasicPausable>, // only one is allowed\n     remotes: ~[(uint, ~Callback)],\n     next_remote: uint,\n     messages: Exclusive<~[Message]>,\n@@ -142,14 +142,14 @@ impl EventLoop for BasicLoop {\n     }\n \n     // XXX: Seems like a really weird requirement to have an event loop provide.\n-    fn pausible_idle_callback(&mut self, cb: ~Callback) -> ~PausibleIdleCallback {\n-        let callback = ~BasicPausible::new(self, cb);\n+    fn pausable_idle_callback(&mut self, cb: ~Callback) -> ~PausableIdleCallback {\n+        let callback = ~BasicPausable::new(self, cb);\n         rtassert!(self.idle.is_none());\n         unsafe {\n-            let cb_ptr: &*mut BasicPausible = cast::transmute(&callback);\n+            let cb_ptr: &*mut BasicPausable = cast::transmute(&callback);\n             self.idle = Some(*cb_ptr);\n         }\n-        return callback as ~PausibleIdleCallback;\n+        return callback as ~PausableIdleCallback;\n     }\n \n     fn remote_callback(&mut self, f: ~Callback) -> ~RemoteCallback {\n@@ -196,23 +196,23 @@ impl Drop for BasicRemote {\n     }\n }\n \n-struct BasicPausible {\n+struct BasicPausable {\n     eloop: *mut BasicLoop,\n     work: ~Callback,\n     active: bool,\n }\n \n-impl BasicPausible {\n-    fn new(eloop: &mut BasicLoop, cb: ~Callback) -> BasicPausible {\n-        BasicPausible {\n+impl BasicPausable {\n+    fn new(eloop: &mut BasicLoop, cb: ~Callback) -> BasicPausable {\n+        BasicPausable {\n             active: false,\n             work: cb,\n             eloop: eloop,\n         }\n     }\n }\n \n-impl PausibleIdleCallback for BasicPausible {\n+impl PausableIdleCallback for BasicPausable {\n     fn pause(&mut self) {\n         self.active = false;\n     }\n@@ -221,7 +221,7 @@ impl PausibleIdleCallback for BasicPausible {\n     }\n }\n \n-impl Drop for BasicPausible {\n+impl Drop for BasicPausable {\n     fn drop(&mut self) {\n         unsafe {\n             (*self.eloop).idle = None;"}, {"sha": "557d9c998caea307b844154ddc86a8ef90085e08", "filename": "src/libstd/rt/rtio.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c126aa56924ceec46557eb66420482f854145c87/src%2Flibstd%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c126aa56924ceec46557eb66420482f854145c87/src%2Flibstd%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frtio.rs?ref=c126aa56924ceec46557eb66420482f854145c87", "patch": "@@ -35,7 +35,7 @@ pub trait Callback {\n pub trait EventLoop {\n     fn run(&mut self);\n     fn callback(&mut self, proc());\n-    fn pausible_idle_callback(&mut self, ~Callback) -> ~PausibleIdleCallback;\n+    fn pausable_idle_callback(&mut self, ~Callback) -> ~PausableIdleCallback;\n     fn remote_callback(&mut self, ~Callback) -> ~RemoteCallback;\n \n     /// The asynchronous I/O services. Not all event loops may provide one.\n@@ -265,7 +265,7 @@ pub trait RtioTTY {\n     fn isatty(&self) -> bool;\n }\n \n-pub trait PausibleIdleCallback {\n+pub trait PausableIdleCallback {\n     fn pause(&mut self);\n     fn resume(&mut self);\n }"}, {"sha": "fa17efc833bd0ce98e003e8b0b6a38f207f300a1", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c126aa56924ceec46557eb66420482f854145c87/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c126aa56924ceec46557eb66420482f854145c87/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=c126aa56924ceec46557eb66420482f854145c87", "patch": "@@ -22,7 +22,7 @@ use rt::kill::BlockedTask;\n use rt::deque;\n use rt::local_ptr;\n use rt::local::Local;\n-use rt::rtio::{RemoteCallback, PausibleIdleCallback, Callback};\n+use rt::rtio::{RemoteCallback, PausableIdleCallback, Callback};\n use borrow::{to_uint};\n use rand::{XorShiftRng, Rng, Rand};\n use iter::range;\n@@ -76,7 +76,7 @@ pub struct Scheduler {\n     /// A fast XorShift rng for scheduler use\n     rng: XorShiftRng,\n     /// A togglable idle callback\n-    idle_callback: Option<~PausibleIdleCallback>,\n+    idle_callback: Option<~PausableIdleCallback>,\n     /// A countdown that starts at a random value and is decremented\n     /// every time a yield check is performed. When it hits 0 a task\n     /// will yield.\n@@ -86,7 +86,7 @@ pub struct Scheduler {\n     steal_for_yield: bool,\n \n     // n.b. currently destructors of an object are run in top-to-bottom in order\n-    //      of field declaration. Due to its nature, the pausible idle callback\n+    //      of field declaration. Due to its nature, the pausable idle callback\n     //      must have some sort of handle to the event loop, so it needs to get\n     //      destroyed before the event loop itself. For this reason, we destroy\n     //      the event loop last to ensure that any unsafe references to it are\n@@ -170,7 +170,7 @@ impl Scheduler {\n \n         // Build an Idle callback.\n         let cb = ~SchedRunner as ~Callback;\n-        self.idle_callback = Some(self.event_loop.pausible_idle_callback(cb));\n+        self.idle_callback = Some(self.event_loop.pausable_idle_callback(cb));\n \n         // Initialize the TLS key.\n         local_ptr::init();"}]}