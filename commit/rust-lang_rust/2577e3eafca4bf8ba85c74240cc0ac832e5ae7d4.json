{"sha": "2577e3eafca4bf8ba85c74240cc0ac832e5ae7d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NzdlM2VhZmNhNGJmOGJhODVjNzQyNDBjYzBhYzgzMmU1YWU3ZDQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-04-05T01:01:55Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-04-05T01:08:55Z"}, "message": "Tidy up predicate names in libcore. Should close #1431.", "tree": {"sha": "4f08d41ae1a5367dcb9aab5ba2cdeae65450b09d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f08d41ae1a5367dcb9aab5ba2cdeae65450b09d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2577e3eafca4bf8ba85c74240cc0ac832e5ae7d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2577e3eafca4bf8ba85c74240cc0ac832e5ae7d4", "html_url": "https://github.com/rust-lang/rust/commit/2577e3eafca4bf8ba85c74240cc0ac832e5ae7d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2577e3eafca4bf8ba85c74240cc0ac832e5ae7d4/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4baf2ceae1475933e9e871c8c56a7e8039c61bbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/4baf2ceae1475933e9e871c8c56a7e8039c61bbc", "html_url": "https://github.com/rust-lang/rust/commit/4baf2ceae1475933e9e871c8c56a7e8039c61bbc"}], "stats": {"total": 70, "additions": 35, "deletions": 35}, "files": [{"sha": "6ae13ae44423c59d56c0942302a61414baccf3ca", "filename": "src/libcore/i16.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2577e3eafca4bf8ba85c74240cc0ac832e5ae7d4/src%2Flibcore%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2577e3eafca4bf8ba85c74240cc0ac832e5ae7d4/src%2Flibcore%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fi16.rs?ref=2577e3eafca4bf8ba85c74240cc0ac832e5ae7d4", "patch": "@@ -19,10 +19,10 @@ pure fn ne(x: i16, y: i16) -> bool { x != y }\n pure fn ge(x: i16, y: i16) -> bool { x >= y }\n pure fn gt(x: i16, y: i16) -> bool { x > y }\n \n-pure fn positive(x: i16) -> bool { x > 0i16 }\n-pure fn negative(x: i16) -> bool { x < 0i16 }\n-pure fn nonpositive(x: i16) -> bool { x <= 0i16 }\n-pure fn nonnegative(x: i16) -> bool { x >= 0i16 }\n+pure fn is_positive(x: i16) -> bool { x > 0i16 }\n+pure fn is_negative(x: i16) -> bool { x < 0i16 }\n+pure fn is_nonpositive(x: i16) -> bool { x <= 0i16 }\n+pure fn is_nonnegative(x: i16) -> bool { x >= 0i16 }\n \n #[doc = \"Iterate over the range [`lo`..`hi`)\"]\n fn range(lo: i16, hi: i16, it: fn(i16)) {\n@@ -37,5 +37,5 @@ pure fn compl(i: i16) -> i16 {\n \n #[doc = \"Computes the absolute value\"]\n pure fn abs(i: i16) -> i16 {\n-    if negative(i) { -i } else { i }\n+    if is_negative(i) { -i } else { i }\n }"}, {"sha": "9a6e4ff8a19eef6663199fa6ee7c1188c09cb9c7", "filename": "src/libcore/i32.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2577e3eafca4bf8ba85c74240cc0ac832e5ae7d4/src%2Flibcore%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2577e3eafca4bf8ba85c74240cc0ac832e5ae7d4/src%2Flibcore%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fi32.rs?ref=2577e3eafca4bf8ba85c74240cc0ac832e5ae7d4", "patch": "@@ -19,10 +19,10 @@ pure fn ne(x: i32, y: i32) -> bool { x != y }\n pure fn ge(x: i32, y: i32) -> bool { x >= y }\n pure fn gt(x: i32, y: i32) -> bool { x > y }\n \n-pure fn positive(x: i32) -> bool { x > 0i32 }\n-pure fn negative(x: i32) -> bool { x < 0i32 }\n-pure fn nonpositive(x: i32) -> bool { x <= 0i32 }\n-pure fn nonnegative(x: i32) -> bool { x >= 0i32 }\n+pure fn is_positive(x: i32) -> bool { x > 0i32 }\n+pure fn is_negative(x: i32) -> bool { x < 0i32 }\n+pure fn is_nonpositive(x: i32) -> bool { x <= 0i32 }\n+pure fn is_nonnegative(x: i32) -> bool { x >= 0i32 }\n \n #[doc = \"Iterate over the range [`lo`..`hi`)\"]\n fn range(lo: i32, hi: i32, it: fn(i32)) {\n@@ -37,5 +37,5 @@ pure fn compl(i: i32) -> i32 {\n \n #[doc = \"Computes the absolute value\"]\n pure fn abs(i: i32) -> i32 {\n-    if negative(i) { -i } else { i }\n+    if is_negative(i) { -i } else { i }\n }"}, {"sha": "a0f8bf3e1ebdf9bcf67b26c1b8b6e2338e74fec3", "filename": "src/libcore/i64.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2577e3eafca4bf8ba85c74240cc0ac832e5ae7d4/src%2Flibcore%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2577e3eafca4bf8ba85c74240cc0ac832e5ae7d4/src%2Flibcore%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fi64.rs?ref=2577e3eafca4bf8ba85c74240cc0ac832e5ae7d4", "patch": "@@ -19,10 +19,10 @@ pure fn ne(x: i64, y: i64) -> bool { x != y }\n pure fn ge(x: i64, y: i64) -> bool { x >= y }\n pure fn gt(x: i64, y: i64) -> bool { x > y }\n \n-pure fn positive(x: i64) -> bool { x > 0i64 }\n-pure fn negative(x: i64) -> bool { x < 0i64 }\n-pure fn nonpositive(x: i64) -> bool { x <= 0i64 }\n-pure fn nonnegative(x: i64) -> bool { x >= 0i64 }\n+pure fn is_positive(x: i64) -> bool { x > 0i64 }\n+pure fn is_negative(x: i64) -> bool { x < 0i64 }\n+pure fn is_nonpositive(x: i64) -> bool { x <= 0i64 }\n+pure fn is_nonnegative(x: i64) -> bool { x >= 0i64 }\n \n #[doc = \"Iterate over the range [`lo`..`hi`)\"]\n fn range(lo: i64, hi: i64, it: fn(i64)) {\n@@ -37,5 +37,5 @@ pure fn compl(i: i64) -> i64 {\n \n #[doc = \"Computes the absolute value\"]\n pure fn abs(i: i64) -> i64 {\n-    if negative(i) { -i } else { i }\n+    if is_negative(i) { -i } else { i }\n }"}, {"sha": "8d4e429ffc9ba05e7e88008e5f7672f27664a516", "filename": "src/libcore/i8.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2577e3eafca4bf8ba85c74240cc0ac832e5ae7d4/src%2Flibcore%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2577e3eafca4bf8ba85c74240cc0ac832e5ae7d4/src%2Flibcore%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fi8.rs?ref=2577e3eafca4bf8ba85c74240cc0ac832e5ae7d4", "patch": "@@ -19,10 +19,10 @@ pure fn ne(x: i8, y: i8) -> bool { x != y }\n pure fn ge(x: i8, y: i8) -> bool { x >= y }\n pure fn gt(x: i8, y: i8) -> bool { x > y }\n \n-pure fn positive(x: i8) -> bool { x > 0i8 }\n-pure fn negative(x: i8) -> bool { x < 0i8 }\n-pure fn nonpositive(x: i8) -> bool { x <= 0i8 }\n-pure fn nonnegative(x: i8) -> bool { x >= 0i8 }\n+pure fn is_positive(x: i8) -> bool { x > 0i8 }\n+pure fn is_negative(x: i8) -> bool { x < 0i8 }\n+pure fn is_nonpositive(x: i8) -> bool { x <= 0i8 }\n+pure fn is_nonnegative(x: i8) -> bool { x >= 0i8 }\n \n #[doc = \"Iterate over the range [`lo`..`hi`)\"]\n fn range(lo: i8, hi: i8, it: fn(i8)) {\n@@ -37,5 +37,5 @@ pure fn compl(i: i8) -> i8 {\n \n #[doc = \"Computes the absolute value\"]\n pure fn abs(i: i8) -> i8 {\n-    if negative(i) { -i } else { i }\n+    if is_negative(i) { -i } else { i }\n }"}, {"sha": "bc4820390195c3967f12280f2dc2922d1e71f3aa", "filename": "src/libcore/int.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2577e3eafca4bf8ba85c74240cc0ac832e5ae7d4/src%2Flibcore%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2577e3eafca4bf8ba85c74240cc0ac832e5ae7d4/src%2Flibcore%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint.rs?ref=2577e3eafca4bf8ba85c74240cc0ac832e5ae7d4", "patch": "@@ -30,10 +30,10 @@ pure fn ne(x: int, y: int) -> bool { ret x != y; }\n pure fn ge(x: int, y: int) -> bool { ret x >= y; }\n pure fn gt(x: int, y: int) -> bool { ret x > y; }\n \n-pure fn positive(x: int) -> bool { ret x > 0; }\n-pure fn negative(x: int) -> bool { ret x < 0; }\n-pure fn nonpositive(x: int) -> bool { ret x <= 0; }\n-pure fn nonnegative(x: int) -> bool { ret x >= 0; }\n+pure fn is_positive(x: int) -> bool { ret x > 0; }\n+pure fn is_negative(x: int) -> bool { ret x < 0; }\n+pure fn is_nonpositive(x: int) -> bool { ret x <= 0; }\n+pure fn is_nonnegative(x: int) -> bool { ret x >= 0; }\n \n #[doc = \"Produce a uint suitable for use in a hash table\"]\n pure fn hash(x: int) -> uint { ret x as uint; }\n@@ -112,7 +112,7 @@ pure fn compl(i: int) -> int {\n \n #[doc = \"Computes the absolute value\"]\n fn abs(i: int) -> int {\n-    if negative(i) { -i } else { i }\n+    if is_negative(i) { -i } else { i }\n }\n \n #[test]"}, {"sha": "04dde5960db7f01a49f0d9705ded5fd802cc48c2", "filename": "src/libcore/result.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2577e3eafca4bf8ba85c74240cc0ac832e5ae7d4/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2577e3eafca4bf8ba85c74240cc0ac832e5ae7d4/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=2577e3eafca4bf8ba85c74240cc0ac832e5ae7d4", "patch": "@@ -44,16 +44,16 @@ pure fn get_err<T, U: copy>(res: result<T, U>) -> U {\n }\n \n #[doc = \"Returns true if the result is `ok`\"]\n-pure fn success<T, U>(res: result<T, U>) -> bool {\n+pure fn is_success<T, U>(res: result<T, U>) -> bool {\n     alt res {\n       ok(_) { true }\n       err(_) { false }\n     }\n }\n \n #[doc = \"Returns true if the result is `error`\"]\n-pure fn failure<T, U>(res: result<T, U>) -> bool {\n-    !success(res)\n+pure fn is_failure<T, U>(res: result<T, U>) -> bool {\n+    !is_success(res)\n }\n \n #[doc = \"\n@@ -113,9 +113,9 @@ impl extensions<T:copy, E:copy> for result<T,E> {\n \n     fn get_err() -> E { get_err(self) }\n \n-    fn success() -> bool { success(self) }\n+    fn is_success() -> bool { is_success(self) }\n \n-    fn failure() -> bool { failure(self) }\n+    fn is_failure() -> bool { is_failure(self) }\n \n     fn chain<U:copy>(op: fn(T) -> result<U,E>) -> result<U,E> {\n         chain(self, op)"}, {"sha": "16ca4800f81ceabfb8cc1e2972a006be6bb47fac", "filename": "src/libcore/u16.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2577e3eafca4bf8ba85c74240cc0ac832e5ae7d4/src%2Flibcore%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2577e3eafca4bf8ba85c74240cc0ac832e5ae7d4/src%2Flibcore%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fu16.rs?ref=2577e3eafca4bf8ba85c74240cc0ac832e5ae7d4", "patch": "@@ -19,10 +19,10 @@ pure fn ne(x: u16, y: u16) -> bool { x != y }\n pure fn ge(x: u16, y: u16) -> bool { x >= y }\n pure fn gt(x: u16, y: u16) -> bool { x > y }\n \n-pure fn positive(x: u16) -> bool { x > 0u16 }\n-pure fn negative(x: u16) -> bool { x < 0u16 }\n-pure fn nonpositive(x: u16) -> bool { x <= 0u16 }\n-pure fn nonnegative(x: u16) -> bool { x >= 0u16 }\n+pure fn is_positive(x: u16) -> bool { x > 0u16 }\n+pure fn is_negative(x: u16) -> bool { x < 0u16 }\n+pure fn is_nonpositive(x: u16) -> bool { x <= 0u16 }\n+pure fn is_nonnegative(x: u16) -> bool { x >= 0u16 }\n \n #[doc = \"Iterate over the range [`lo`..`hi`)\"]\n fn range(lo: u16, hi: u16, it: fn(u16)) {"}, {"sha": "0bcd7e65b72bca450bfeefd7c21b24b0601fb2e0", "filename": "src/test/run-pass/cleanup-copy-mode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2577e3eafca4bf8ba85c74240cc0ac832e5ae7d4/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2577e3eafca4bf8ba85c74240cc0ac832e5ae7d4/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs?ref=2577e3eafca4bf8ba85c74240cc0ac832e5ae7d4", "patch": "@@ -2,7 +2,7 @@\n fn adder(+x: @int, +y: @int) -> int { ret *x + *y; }\n fn failer() -> @int { fail; }\n fn main() {\n-    assert(result::failure(task::try {||\n+    assert(result::is_failure(task::try {||\n         adder(@2, failer()); ()\n     }));\n }"}]}