{"sha": "11a68d313ad351907acd68da3e4a683f7c30d94f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExYTY4ZDMxM2FkMzUxOTA3YWNkNjhkYTNlNGE2ODNmN2MzMGQ5NGY=", "commit": {"author": {"name": "Ruben Schmidmeister", "email": "ruben.schmidmeister@icloud.com", "date": "2019-05-18T09:47:54Z"}, "committer": {"name": "Ruben Schmidmeister", "email": "ruben.schmidmeister@icloud.com", "date": "2019-05-18T09:47:54Z"}, "message": "Pass string instead of Symbol to DocCommentFormatter", "tree": {"sha": "09a561bac888912185eeb8d27a488b1c4ccb392d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09a561bac888912185eeb8d27a488b1c4ccb392d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11a68d313ad351907acd68da3e4a683f7c30d94f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEU0FXzFYkrmfOhhqxKTh7Wnqvhj8FAlzf1PgACgkQKTh7Wnqv\nhj/4VAgAssdBXi44Sn6huF8fwz5jb5A93nGlC/xQAszWxmttoytPwOizKALHLxoE\nd85Yif34Hmc7PuDQAy5andbjxItGfJFuiNj2rrbrgAdmTahvrv+zVhwobjhJf9wl\nfxNpArbxmt5Hpv1PhGv5xNT2WqdjaCQnDsIh/FASQs9ZW1b+pjDiNh3sjFcCtS7h\ntrqUbgkg9g95O2PdM7pB6t5LbcM/vdC6juhQB5X1G/w3HcAgL4vsF+kybUwPg1Yq\n364Mlrzq16dBhEGNlngeh+BJGCoeYLuBMpcOJNW6+BxfIEaQq4D4a+U7lpHr1ig8\nqftHhNOVWEle1HJH4rjC16I8vQUdtA==\n=jn2h\n-----END PGP SIGNATURE-----", "payload": "tree 09a561bac888912185eeb8d27a488b1c4ccb392d\nparent 8d4cb6e783c076829568bb82dcd5a0c888a09cb7\nauthor Ruben Schmidmeister <ruben.schmidmeister@icloud.com> 1558172874 +0200\ncommitter Ruben Schmidmeister <ruben.schmidmeister@icloud.com> 1558172874 +0200\n\nPass string instead of Symbol to DocCommentFormatter\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11a68d313ad351907acd68da3e4a683f7c30d94f", "html_url": "https://github.com/rust-lang/rust/commit/11a68d313ad351907acd68da3e4a683f7c30d94f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11a68d313ad351907acd68da3e4a683f7c30d94f/comments", "author": {"login": "bash", "id": 4602612, "node_id": "MDQ6VXNlcjQ2MDI2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4602612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bash", "html_url": "https://github.com/bash", "followers_url": "https://api.github.com/users/bash/followers", "following_url": "https://api.github.com/users/bash/following{/other_user}", "gists_url": "https://api.github.com/users/bash/gists{/gist_id}", "starred_url": "https://api.github.com/users/bash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bash/subscriptions", "organizations_url": "https://api.github.com/users/bash/orgs", "repos_url": "https://api.github.com/users/bash/repos", "events_url": "https://api.github.com/users/bash/events{/privacy}", "received_events_url": "https://api.github.com/users/bash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bash", "id": 4602612, "node_id": "MDQ6VXNlcjQ2MDI2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4602612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bash", "html_url": "https://github.com/bash", "followers_url": "https://api.github.com/users/bash/followers", "following_url": "https://api.github.com/users/bash/following{/other_user}", "gists_url": "https://api.github.com/users/bash/gists{/gist_id}", "starred_url": "https://api.github.com/users/bash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bash/subscriptions", "organizations_url": "https://api.github.com/users/bash/orgs", "repos_url": "https://api.github.com/users/bash/repos", "events_url": "https://api.github.com/users/bash/events{/privacy}", "received_events_url": "https://api.github.com/users/bash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d4cb6e783c076829568bb82dcd5a0c888a09cb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d4cb6e783c076829568bb82dcd5a0c888a09cb7", "html_url": "https://github.com/rust-lang/rust/commit/8d4cb6e783c076829568bb82dcd5a0c888a09cb7"}], "stats": {"total": 30, "additions": 8, "deletions": 22}, "files": [{"sha": "1fb4ef407eb0618fe470515dc9bf29a6f6b803a0", "filename": "src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11a68d313ad351907acd68da3e4a683f7c30d94f/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a68d313ad351907acd68da3e4a683f7c30d94f/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=11a68d313ad351907acd68da3e4a683f7c30d94f", "patch": "@@ -334,7 +334,7 @@ impl Rewrite for ast::Attribute {\n                         };\n \n                         let doc_comment_formatter =\n-                            DocCommentFormatter::new(literal, comment_style);\n+                            DocCommentFormatter::new(literal.as_str().get(), comment_style);\n                         let doc_comment = format!(\"{}\", doc_comment_formatter);\n                         return rewrite_doc_comment(\n                             &doc_comment,"}, {"sha": "c2ae16d1c91456220eeba328831daf3a39e137d7", "filename": "src/attr/doc_comment.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/11a68d313ad351907acd68da3e4a683f7c30d94f/src%2Fattr%2Fdoc_comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a68d313ad351907acd68da3e4a683f7c30d94f/src%2Fattr%2Fdoc_comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr%2Fdoc_comment.rs?ref=11a68d313ad351907acd68da3e4a683f7c30d94f", "patch": "@@ -1,24 +1,16 @@\n use crate::comment::CommentStyle;\n use std::fmt::{self, Display};\n-use syntax_pos::symbol::Symbol;\n \n+#[derive(new)]\n pub(super) struct DocCommentFormatter<'a> {\n-    literal: &'a Symbol,\n+    literal: &'a str,\n     style: CommentStyle<'a>,\n }\n \n-impl<'a> DocCommentFormatter<'a> {\n-    pub(super) fn new(literal: &'a Symbol, style: CommentStyle<'a>) -> Self {\n-        Self { literal, style }\n-    }\n-}\n-\n impl Display for DocCommentFormatter<'_> {\n     fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let opener = self.style.opener().trim_end();\n-        let literal_as_str = self.literal.as_str().get();\n-\n-        let mut lines = literal_as_str.lines().peekable();\n+        let mut lines = self.literal.lines().peekable();\n         while let Some(line) = lines.next() {\n             let is_last_line = lines.peek().is_none();\n             if is_last_line {\n@@ -27,15 +19,13 @@ impl Display for DocCommentFormatter<'_> {\n                 writeln!(formatter, \"{}{}\", opener, line)?;\n             }\n         }\n-\n         Ok(())\n     }\n }\n \n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use syntax_pos::{Globals, GLOBALS};\n \n     #[test]\n     fn literal_controls_leading_spaces() {\n@@ -78,13 +68,9 @@ mod tests {\n         expected_comment: &str,\n         style: CommentStyle<'_>,\n     ) {\n-        GLOBALS.set(&Globals::new(), || {\n-            let literal = Symbol::gensym(literal);\n-\n-            assert_eq!(\n-                expected_comment,\n-                format!(\"{}\", DocCommentFormatter::new(&literal, style))\n-            );\n-        });\n+        assert_eq!(\n+            expected_comment,\n+            format!(\"{}\", DocCommentFormatter::new(&literal, style))\n+        );\n     }\n }"}]}