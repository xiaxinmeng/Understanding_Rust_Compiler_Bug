{"sha": "2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkODNjYmI4YjY4ZDZhODNhOWYwNTU5ZDg5OTA0YTZhMWUwYmI5ZTM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-02T22:55:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-02T22:55:53Z"}, "message": "Rollup merge of #73726 - davidtwco:issue-73541-labelled-break-through-closure-async, r=petrochenkov\n\nresolve: disallow labelled breaks/continues through closures/async blocks\n\nFixes #73541.\n\nThis PR modifies name resolution to prohibit labelled breaks/continues through closures or async blocks, fixing an ICE. In addition, it improves the diagnostics surrounding labelled breaks/continues through closures or async blocks by informing the user if the label exists in an parent scope and telling them that won't work.\n\nr? @petrochenkov (resolve)\ncc @estebank (diagnostic changes) @tmandry (issue is from `wg-async-foundations`)", "tree": {"sha": "57b8be6fab0a2d0eee3d0c8d7f679fc28172986a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57b8be6fab0a2d0eee3d0c8d7f679fc28172986a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe/mX6CRBK7hj4Ov3rIwAAdHIIAC+ekGyGlCie9bkZG1u3lgXH\nnu42ya5vC1O3Mfn9UdpZQEDpt7AjjWI8vLZaHPT//HNCcGd1EM/kCozLiw6DZ+2n\nv04D4s1S2CSAJg0I2y4QoXVjz8Trt32ykVg+9+cmU+bQIJPgUPRD8FnmRa72Y7Go\nZFBjW4IDUGmISUYTxl2uIDVVkk/Im7ZE+ZA6fn7P0gYZNYjHEBpBt5I96CmRRH+u\nK+tN/4PtPmLEh91EZt/RvM9pevT47WdZQ0yh++aka3Be1ww15stlC6iaEX3Y0uIb\nL0fAC0Wd6hFsJf8m5ltUOALB1FwpfatK5Chs+2IiVXdGFTCHNJ7ZEkjeBR83Ln0=\n=XgUZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 57b8be6fab0a2d0eee3d0c8d7f679fc28172986a\nparent 65342fd341f63bb2b594a47436c7591f2ebc0208\nparent cb541dc12cdf2ba14a8f5d210ac7a6b1efa69c22\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593730553 -0700\ncommitter GitHub <noreply@github.com> 1593730553 -0700\n\nRollup merge of #73726 - davidtwco:issue-73541-labelled-break-through-closure-async, r=petrochenkov\n\nresolve: disallow labelled breaks/continues through closures/async blocks\n\nFixes #73541.\n\nThis PR modifies name resolution to prohibit labelled breaks/continues through closures or async blocks, fixing an ICE. In addition, it improves the diagnostics surrounding labelled breaks/continues through closures or async blocks by informing the user if the label exists in an parent scope and telling them that won't work.\n\nr? @petrochenkov (resolve)\ncc @estebank (diagnostic changes) @tmandry (issue is from `wg-async-foundations`)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3", "html_url": "https://github.com/rust-lang/rust/commit/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65342fd341f63bb2b594a47436c7591f2ebc0208", "url": "https://api.github.com/repos/rust-lang/rust/commits/65342fd341f63bb2b594a47436c7591f2ebc0208", "html_url": "https://github.com/rust-lang/rust/commit/65342fd341f63bb2b594a47436c7591f2ebc0208"}, {"sha": "cb541dc12cdf2ba14a8f5d210ac7a6b1efa69c22", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb541dc12cdf2ba14a8f5d210ac7a6b1efa69c22", "html_url": "https://github.com/rust-lang/rust/commit/cb541dc12cdf2ba14a8f5d210ac7a6b1efa69c22"}], "stats": {"total": 547, "additions": 427, "deletions": 120}, "files": [{"sha": "00c072e1b04a159a9bfaa5e69d683a087e476756", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3", "patch": "@@ -448,6 +448,7 @@ E0763: include_str!(\"./error_codes/E0763.md\"),\n E0764: include_str!(\"./error_codes/E0764.md\"),\n E0765: include_str!(\"./error_codes/E0765.md\"),\n E0766: include_str!(\"./error_codes/E0766.md\"),\n+E0767: include_str!(\"./error_codes/E0767.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "679fe7e41e9c765fdd26d3a0756161ed5c58f0eb", "filename": "src/librustc_error_codes/error_codes/E0767.md", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0767.md", "raw_url": "https://github.com/rust-lang/rust/raw/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0767.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0767.md?ref=2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3", "patch": "@@ -0,0 +1,20 @@\n+An unreachable label was used.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0767\n+'a: loop {\n+    || {\n+        loop { break 'a } // error: use of unreachable label `'a`\n+    };\n+}\n+```\n+\n+Ensure that the label is within scope. Labels are not reachable through\n+functions, closures, async blocks or modules. Example:\n+\n+```\n+'a: loop {\n+    break 'a; // ok!\n+}\n+```"}, {"sha": "b288a41e0cfd67adcd943adecbb252505aa968bd", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3", "patch": "@@ -1123,16 +1123,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n                 match target {\n                     Some(b) => self.propagate_through_opt_expr(opt_expr.as_ref().map(|e| &**e), b),\n-                    None => {\n-                        // FIXME: This should have been checked earlier. Once this is fixed,\n-                        // replace with `delay_span_bug`. (#62480)\n-                        self.ir\n-                            .tcx\n-                            .sess\n-                            .struct_span_err(expr.span, \"`break` to unknown label\")\n-                            .emit();\n-                        rustc_errors::FatalError.raise()\n-                    }\n+                    None => span_bug!(expr.span, \"`break` to unknown label\"),\n                 }\n             }\n "}, {"sha": "c64c617b54b592c387ed5504373e2889769b7d09", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 68, "deletions": 10, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3", "patch": "@@ -33,6 +33,10 @@ type Res = def::Res<ast::NodeId>;\n /// A vector of spans and replacements, a message and applicability.\n crate type Suggestion = (Vec<(Span, String)>, String, Applicability);\n \n+/// Potential candidate for an undeclared or out-of-scope label - contains the ident of a\n+/// similarly named label and whether or not it is reachable.\n+crate type LabelSuggestion = (Ident, bool);\n+\n crate struct TypoSuggestion {\n     pub candidate: Symbol,\n     pub res: Res,\n@@ -282,24 +286,39 @@ impl<'a> Resolver<'a> {\n                 err.span_label(span, \"used in a pattern more than once\");\n                 err\n             }\n-            ResolutionError::UndeclaredLabel(name, lev_candidate) => {\n+            ResolutionError::UndeclaredLabel { name, suggestion } => {\n                 let mut err = struct_span_err!(\n                     self.session,\n                     span,\n                     E0426,\n                     \"use of undeclared label `{}`\",\n                     name\n                 );\n-                if let Some(lev_candidate) = lev_candidate {\n-                    err.span_suggestion(\n-                        span,\n-                        \"a label with a similar name exists in this scope\",\n-                        lev_candidate.to_string(),\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                } else {\n-                    err.span_label(span, format!(\"undeclared label `{}`\", name));\n+\n+                err.span_label(span, format!(\"undeclared label `{}`\", name));\n+\n+                match suggestion {\n+                    // A reachable label with a similar name exists.\n+                    Some((ident, true)) => {\n+                        err.span_label(ident.span, \"a label with a similar name is reachable\");\n+                        err.span_suggestion(\n+                            span,\n+                            \"try using similarly named label\",\n+                            ident.name.to_string(),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                    // An unreachable label with a similar name exists.\n+                    Some((ident, false)) => {\n+                        err.span_label(\n+                            ident.span,\n+                            \"a label with a similar name exists but is unreachable\",\n+                        );\n+                    }\n+                    // No similarly-named labels exist.\n+                    None => (),\n                 }\n+\n                 err\n             }\n             ResolutionError::SelfImportsOnlyAllowedWithin { root, span_with_rename } => {\n@@ -433,6 +452,45 @@ impl<'a> Resolver<'a> {\n                 err.span_label(span, \"`Self` in type parameter default\".to_string());\n                 err\n             }\n+            ResolutionError::UnreachableLabel { name, definition_span, suggestion } => {\n+                let mut err = struct_span_err!(\n+                    self.session,\n+                    span,\n+                    E0767,\n+                    \"use of unreachable label `{}`\",\n+                    name,\n+                );\n+\n+                err.span_label(definition_span, \"unreachable label defined here\");\n+                err.span_label(span, format!(\"unreachable label `{}`\", name));\n+                err.note(\n+                    \"labels are unreachable through functions, closures, async blocks and modules\",\n+                );\n+\n+                match suggestion {\n+                    // A reachable label with a similar name exists.\n+                    Some((ident, true)) => {\n+                        err.span_label(ident.span, \"a label with a similar name is reachable\");\n+                        err.span_suggestion(\n+                            span,\n+                            \"try using similarly named label\",\n+                            ident.name.to_string(),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                    // An unreachable label with a similar name exists.\n+                    Some((ident, false)) => {\n+                        err.span_label(\n+                            ident.span,\n+                            \"a label with a similar name exists but is also unreachable\",\n+                        );\n+                    }\n+                    // No similarly-named labels exist.\n+                    None => (),\n+                }\n+\n+                err\n+            }\n         }\n     }\n "}, {"sha": "4451791780eade7ace820bb9101c59addc8a4667", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 99, "deletions": 68, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3", "patch": "@@ -13,7 +13,6 @@ use crate::{ResolutionError, Resolver, Segment, UseError};\n \n use rustc_ast::ast::*;\n use rustc_ast::ptr::P;\n-use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n use rustc_ast::{unwrap_or, walk_list};\n use rustc_ast_lowering::ResolverAstLowering;\n@@ -101,6 +100,9 @@ crate enum RibKind<'a> {\n     /// upvars).\n     AssocItemRibKind,\n \n+    /// We passed through a closure. Disallow labels.\n+    ClosureOrAsyncRibKind,\n+\n     /// We passed through a function definition. Disallow upvars.\n     /// Permit only those const parameters that are specified in the function's generics.\n     FnItemRibKind,\n@@ -124,11 +126,15 @@ crate enum RibKind<'a> {\n }\n \n impl RibKind<'_> {\n-    // Whether this rib kind contains generic parameters, as opposed to local\n-    // variables.\n+    /// Whether this rib kind contains generic parameters, as opposed to local\n+    /// variables.\n     crate fn contains_params(&self) -> bool {\n         match self {\n-            NormalRibKind | FnItemRibKind | ConstantItemRibKind | ModuleRibKind(_)\n+            NormalRibKind\n+            | ClosureOrAsyncRibKind\n+            | FnItemRibKind\n+            | ConstantItemRibKind\n+            | ModuleRibKind(_)\n             | MacroDefinition(_) => false,\n             AssocItemRibKind | ItemRibKind(_) | ForwardTyParamBanRibKind => true,\n         }\n@@ -474,7 +480,8 @@ impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n             // Bail if there's no body.\n             FnKind::Fn(.., None) => return visit::walk_fn(self, fn_kind, sp),\n             FnKind::Fn(FnCtxt::Free | FnCtxt::Foreign, ..) => FnItemRibKind,\n-            FnKind::Fn(FnCtxt::Assoc(_), ..) | FnKind::Closure(..) => NormalRibKind,\n+            FnKind::Fn(FnCtxt::Assoc(_), ..) => NormalRibKind,\n+            FnKind::Closure(..) => ClosureOrAsyncRibKind,\n         };\n         let previous_value =\n             replace(&mut self.diagnostic_metadata.current_function, Some((fn_kind, sp)));\n@@ -725,37 +732,81 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         }\n     }\n \n-    /// Searches the current set of local scopes for labels. Returns the first non-`None` label that\n-    /// is returned by the given predicate function\n-    ///\n-    /// Stops after meeting a closure.\n-    fn search_label<P, R>(&self, mut ident: Ident, pred: P) -> Option<R>\n-    where\n-        P: Fn(&Rib<'_, NodeId>, Ident) -> Option<R>,\n-    {\n-        for rib in self.label_ribs.iter().rev() {\n-            match rib.kind {\n-                NormalRibKind => {}\n+    /// Searches the current set of local scopes for labels. Returns the `NodeId` of the resolved\n+    /// label and reports an error if the label is not found or is unreachable.\n+    fn resolve_label(&self, mut label: Ident) -> Option<NodeId> {\n+        let mut suggestion = None;\n+\n+        // Preserve the original span so that errors contain \"in this macro invocation\"\n+        // information.\n+        let original_span = label.span;\n+\n+        for i in (0..self.label_ribs.len()).rev() {\n+            let rib = &self.label_ribs[i];\n+\n+            if let MacroDefinition(def) = rib.kind {\n                 // If an invocation of this macro created `ident`, give up on `ident`\n                 // and switch to `ident`'s source from the macro definition.\n-                MacroDefinition(def) => {\n-                    if def == self.r.macro_def(ident.span.ctxt()) {\n-                        ident.span.remove_mark();\n-                    }\n-                }\n-                _ => {\n-                    // Do not resolve labels across function boundary\n-                    return None;\n+                if def == self.r.macro_def(label.span.ctxt()) {\n+                    label.span.remove_mark();\n                 }\n             }\n-            let r = pred(rib, ident);\n-            if r.is_some() {\n-                return r;\n+\n+            let ident = label.normalize_to_macro_rules();\n+            if let Some((ident, id)) = rib.bindings.get_key_value(&ident) {\n+                return if self.is_label_valid_from_rib(i) {\n+                    Some(*id)\n+                } else {\n+                    self.r.report_error(\n+                        original_span,\n+                        ResolutionError::UnreachableLabel {\n+                            name: &label.name.as_str(),\n+                            definition_span: ident.span,\n+                            suggestion,\n+                        },\n+                    );\n+\n+                    None\n+                };\n             }\n+\n+            // Diagnostics: Check if this rib contains a label with a similar name, keep track of\n+            // the first such label that is encountered.\n+            suggestion = suggestion.or_else(|| self.suggestion_for_label_in_rib(i, label));\n         }\n+\n+        self.r.report_error(\n+            original_span,\n+            ResolutionError::UndeclaredLabel { name: &label.name.as_str(), suggestion },\n+        );\n         None\n     }\n \n+    /// Determine whether or not a label from the `rib_index`th label rib is reachable.\n+    fn is_label_valid_from_rib(&self, rib_index: usize) -> bool {\n+        let ribs = &self.label_ribs[rib_index + 1..];\n+\n+        for rib in ribs {\n+            match rib.kind {\n+                NormalRibKind | MacroDefinition(..) => {\n+                    // Nothing to do. Continue.\n+                }\n+\n+                AssocItemRibKind\n+                | ClosureOrAsyncRibKind\n+                | FnItemRibKind\n+                | ItemRibKind(..)\n+                | ConstantItemRibKind\n+                | ModuleRibKind(..)\n+                | ForwardTyParamBanRibKind => {\n+                    return false;\n+                }\n+            }\n+        }\n+\n+        true\n+    }\n+\n     fn resolve_adt(&mut self, item: &'ast Item, generics: &'ast Generics) {\n         debug!(\"resolve_adt\");\n         self.with_current_self_item(item, |this| {\n@@ -2044,35 +2095,10 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             }\n \n             ExprKind::Break(Some(label), _) | ExprKind::Continue(Some(label)) => {\n-                let node_id = self.search_label(label.ident, |rib, ident| {\n-                    rib.bindings.get(&ident.normalize_to_macro_rules()).cloned()\n-                });\n-                match node_id {\n-                    None => {\n-                        // Search again for close matches...\n-                        // Picks the first label that is \"close enough\", which is not necessarily\n-                        // the closest match\n-                        let close_match = self.search_label(label.ident, |rib, ident| {\n-                            let names = rib.bindings.iter().filter_map(|(id, _)| {\n-                                if id.span.ctxt() == label.ident.span.ctxt() {\n-                                    Some(&id.name)\n-                                } else {\n-                                    None\n-                                }\n-                            });\n-                            find_best_match_for_name(names, &ident.as_str(), None)\n-                        });\n-                        self.r.record_partial_res(expr.id, PartialRes::new(Res::Err));\n-                        self.r.report_error(\n-                            label.ident.span,\n-                            ResolutionError::UndeclaredLabel(&label.ident.as_str(), close_match),\n-                        );\n-                    }\n-                    Some(node_id) => {\n-                        // Since this res is a label, it is never read.\n-                        self.r.label_res_map.insert(expr.id, node_id);\n-                        self.diagnostic_metadata.unused_labels.remove(&node_id);\n-                    }\n+                if let Some(node_id) = self.resolve_label(label.ident) {\n+                    // Since this res is a label, it is never read.\n+                    self.r.label_res_map.insert(expr.id, node_id);\n+                    self.diagnostic_metadata.unused_labels.remove(&node_id);\n                 }\n \n                 // visit `break` argument if any\n@@ -2144,21 +2170,26 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             // closure are detected as upvars rather than normal closure arg usages.\n             ExprKind::Closure(_, Async::Yes { .. }, _, ref fn_decl, ref body, _span) => {\n                 self.with_rib(ValueNS, NormalRibKind, |this| {\n-                    // Resolve arguments:\n-                    this.resolve_params(&fn_decl.inputs);\n-                    // No need to resolve return type --\n-                    // the outer closure return type is `FnRetTy::Default`.\n+                    this.with_label_rib(ClosureOrAsyncRibKind, |this| {\n+                        // Resolve arguments:\n+                        this.resolve_params(&fn_decl.inputs);\n+                        // No need to resolve return type --\n+                        // the outer closure return type is `FnRetTy::Default`.\n \n-                    // Now resolve the inner closure\n-                    {\n-                        // No need to resolve arguments: the inner closure has none.\n-                        // Resolve the return type:\n-                        visit::walk_fn_ret_ty(this, &fn_decl.output);\n-                        // Resolve the body\n-                        this.visit_expr(body);\n-                    }\n+                        // Now resolve the inner closure\n+                        {\n+                            // No need to resolve arguments: the inner closure has none.\n+                            // Resolve the return type:\n+                            visit::walk_fn_ret_ty(this, &fn_decl.output);\n+                            // Resolve the body\n+                            this.visit_expr(body);\n+                        }\n+                    })\n                 });\n             }\n+            ExprKind::Async(..) | ExprKind::Closure(..) => {\n+                self.with_label_rib(ClosureOrAsyncRibKind, |this| visit::walk_expr(this, expr));\n+            }\n             _ => {\n                 visit::walk_expr(self, expr);\n             }"}, {"sha": "e469ca80c590abbb24e096388199c854781f993a", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3", "patch": "@@ -1,4 +1,4 @@\n-use crate::diagnostics::{ImportSuggestion, TypoSuggestion};\n+use crate::diagnostics::{ImportSuggestion, LabelSuggestion, TypoSuggestion};\n use crate::late::lifetimes::{ElisionFailureInfo, LifetimeContext};\n use crate::late::{LateResolutionVisitor, RibKind};\n use crate::path_names_to_string;\n@@ -992,6 +992,32 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n         }\n         None\n     }\n+\n+    /// Given the target `label`, search the `rib_index`th label rib for similarly named labels,\n+    /// optionally returning the closest match and whether it is reachable.\n+    crate fn suggestion_for_label_in_rib(\n+        &self,\n+        rib_index: usize,\n+        label: Ident,\n+    ) -> Option<LabelSuggestion> {\n+        // Are ribs from this `rib_index` within scope?\n+        let within_scope = self.is_label_valid_from_rib(rib_index);\n+\n+        let rib = &self.label_ribs[rib_index];\n+        let names = rib\n+            .bindings\n+            .iter()\n+            .filter(|(id, _)| id.span.ctxt() == label.span.ctxt())\n+            .map(|(id, _)| &id.name);\n+\n+        find_best_match_for_name(names, &label.as_str(), None).map(|symbol| {\n+            // Upon finding a similar name, get the ident that it was from - the span\n+            // contained within helps make a useful diagnostic. In addition, determine\n+            // whether this candidate is within scope.\n+            let (ident, _) = rib.bindings.iter().find(|(ident, _)| ident.name == symbol).unwrap();\n+            (*ident, within_scope)\n+        })\n+    }\n }\n \n impl<'tcx> LifetimeContext<'_, 'tcx> {"}, {"sha": "f3a1934abc9fe044df1d188734ed81b68de3711c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3", "patch": "@@ -61,7 +61,7 @@ use std::collections::BTreeSet;\n use std::{cmp, fmt, iter, ptr};\n \n use diagnostics::{extend_span_to_previous_binding, find_span_of_binding_until_next_binding};\n-use diagnostics::{ImportSuggestion, Suggestion};\n+use diagnostics::{ImportSuggestion, LabelSuggestion, Suggestion};\n use imports::{Import, ImportKind, ImportResolver, NameResolution};\n use late::{HasGenericParams, PathSource, Rib, RibKind::*};\n use macros::{MacroRulesBinding, MacroRulesScope};\n@@ -197,7 +197,7 @@ enum ResolutionError<'a> {\n     /// Error E0416: identifier is bound more than once in the same pattern.\n     IdentifierBoundMoreThanOnceInSamePattern(&'a str),\n     /// Error E0426: use of undeclared label.\n-    UndeclaredLabel(&'a str, Option<Symbol>),\n+    UndeclaredLabel { name: &'a str, suggestion: Option<LabelSuggestion> },\n     /// Error E0429: `self` imports are only allowed within a `{ }` list.\n     SelfImportsOnlyAllowedWithin { root: bool, span_with_rename: Span },\n     /// Error E0430: `self` import can only appear once in the list.\n@@ -216,6 +216,8 @@ enum ResolutionError<'a> {\n     ForwardDeclaredTyParam, // FIXME(const_generics:defaults)\n     /// Error E0735: type parameters with a default cannot use `Self`\n     SelfInTyParamDefault,\n+    /// Error E0767: use of unreachable label\n+    UnreachableLabel { name: &'a str, definition_span: Span, suggestion: Option<LabelSuggestion> },\n }\n \n enum VisResolutionError<'a> {\n@@ -2453,6 +2455,7 @@ impl<'a> Resolver<'a> {\n                 for rib in ribs {\n                     match rib.kind {\n                         NormalRibKind\n+                        | ClosureOrAsyncRibKind\n                         | ModuleRibKind(..)\n                         | MacroDefinition(..)\n                         | ForwardTyParamBanRibKind => {\n@@ -2488,6 +2491,7 @@ impl<'a> Resolver<'a> {\n                 for rib in ribs {\n                     let has_generic_params = match rib.kind {\n                         NormalRibKind\n+                        | ClosureOrAsyncRibKind\n                         | AssocItemRibKind\n                         | ModuleRibKind(..)\n                         | MacroDefinition(..)"}, {"sha": "26769b30dd5f0ee3fe1fe6e9b9cc4c7e4308534b", "filename": "src/test/ui/break-outside-loop.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fbreak-outside-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fbreak-outside-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbreak-outside-loop.rs?ref=2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3", "patch": "@@ -27,7 +27,9 @@ fn main() {\n     // not the `loop`, which failed in the call to `find_breakable`. (#65383)\n     'lab: loop {\n         || {\n-            break 'lab; //~ ERROR `break` inside of a closure\n+            break 'lab;\n+            //~^ ERROR use of unreachable label `'lab`\n+            //~| ERROR `break` inside of a closure\n         };\n     }\n }"}, {"sha": "287bf9af62e49ca169b4d56c17eb00d24077ca20", "filename": "src/test/ui/break-outside-loop.stderr", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fbreak-outside-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fbreak-outside-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbreak-outside-loop.stderr?ref=2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3", "patch": "@@ -1,3 +1,14 @@\n+error[E0767]: use of unreachable label `'lab`\n+  --> $DIR/break-outside-loop.rs:30:19\n+   |\n+LL |     'lab: loop {\n+   |     ---- unreachable label defined here\n+LL |         || {\n+LL |             break 'lab;\n+   |                   ^^^^ unreachable label `'lab`\n+   |\n+   = note: labels are unreachable through functions, closures, async blocks and modules\n+\n error[E0268]: `break` outside of a loop\n   --> $DIR/break-outside-loop.rs:10:15\n    |\n@@ -41,7 +52,7 @@ LL |         || {\n LL |             break 'lab;\n    |             ^^^^^^^^^^ cannot `break` inside of a closure\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 7 previous errors\n \n-Some errors have detailed explanations: E0267, E0268.\n+Some errors have detailed explanations: E0267, E0268, E0767.\n For more information about an error, try `rustc --explain E0267`."}, {"sha": "6c6cb746e6c757d9fbe7ab319ae39341f4b80b80", "filename": "src/test/ui/error-codes/E0767.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Ferror-codes%2FE0767.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Ferror-codes%2FE0767.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0767.rs?ref=2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3", "patch": "@@ -0,0 +1,7 @@\n+fn main () {\n+    'a: loop {\n+        || {\n+            loop { break 'a; } //~ ERROR E0767\n+        }\n+    }\n+}"}, {"sha": "2429823306b6e6a7de87c515307b6dfcbdb21220", "filename": "src/test/ui/error-codes/E0767.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Ferror-codes%2FE0767.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Ferror-codes%2FE0767.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0767.stderr?ref=2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3", "patch": "@@ -0,0 +1,14 @@\n+error[E0767]: use of unreachable label `'a`\n+  --> $DIR/E0767.rs:4:26\n+   |\n+LL |     'a: loop {\n+   |     -- unreachable label defined here\n+LL |         || {\n+LL |             loop { break 'a; }\n+   |                          ^^ unreachable label `'a`\n+   |\n+   = note: labels are unreachable through functions, closures, async blocks and modules\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0767`."}, {"sha": "5c3be3e64ee1a8ffc579b4e3da5528d39393b5fe", "filename": "src/test/ui/issues/issue-62480.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fissues%2Fissue-62480.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fissues%2Fissue-62480.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-62480.rs?ref=2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3", "patch": "@@ -5,6 +5,8 @@ fn main() {\n     // `propagate_through_expr` would be the closure and not the `loop`, which wouldn't be found in\n     // `self.break_ln`. (#62480)\n     'a: {\n-        || break 'a //~ ERROR `break` to unknown label\n+        || break 'a\n+        //~^ ERROR use of unreachable label `'a`\n+        //~| ERROR `break` inside of a closure\n     }\n }"}, {"sha": "17085ef908bdf864cc03e01d9826b63c3f0fee00", "filename": "src/test/ui/issues/issue-62480.stderr", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fissues%2Fissue-62480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fissues%2Fissue-62480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-62480.stderr?ref=2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3", "patch": "@@ -1,8 +1,22 @@\n-error: `break` to unknown label\n+error[E0767]: use of unreachable label `'a`\n+  --> $DIR/issue-62480.rs:8:18\n+   |\n+LL |     'a: {\n+   |     -- unreachable label defined here\n+LL |         || break 'a\n+   |                  ^^ unreachable label `'a`\n+   |\n+   = note: labels are unreachable through functions, closures, async blocks and modules\n+\n+error[E0267]: `break` inside of a closure\n   --> $DIR/issue-62480.rs:8:12\n    |\n LL |         || break 'a\n-   |            ^^^^^^^^\n+   |         -- ^^^^^^^^ cannot `break` inside of a closure\n+   |         |\n+   |         enclosing closure\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n+Some errors have detailed explanations: E0267, E0767.\n+For more information about an error, try `rustc --explain E0267`."}, {"sha": "05b86cbbf8f057e90d267ece300f649ae42f8e1f", "filename": "src/test/ui/issues/issue-66702-break-outside-loop-val.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fissues%2Fissue-66702-break-outside-loop-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fissues%2Fissue-66702-break-outside-loop-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66702-break-outside-loop-val.rs?ref=2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3", "patch": "@@ -2,6 +2,8 @@\n \n fn main() {\n     'some_label: loop {\n-        || break 'some_label (); //~ ERROR: `break` inside of a closure\n+        || break 'some_label ();\n+        //~^ ERROR: use of unreachable label `'some_label`\n+        //~| ERROR: `break` inside of a closure\n     }\n }"}, {"sha": "f92ede311afb4eec3009a71f514cd73c512c1659", "filename": "src/test/ui/issues/issue-66702-break-outside-loop-val.stderr", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fissues%2Fissue-66702-break-outside-loop-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fissues%2Fissue-66702-break-outside-loop-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66702-break-outside-loop-val.stderr?ref=2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3", "patch": "@@ -1,3 +1,13 @@\n+error[E0767]: use of unreachable label `'some_label`\n+  --> $DIR/issue-66702-break-outside-loop-val.rs:5:18\n+   |\n+LL |     'some_label: loop {\n+   |     ----------- unreachable label defined here\n+LL |         || break 'some_label ();\n+   |                  ^^^^^^^^^^^ unreachable label `'some_label`\n+   |\n+   = note: labels are unreachable through functions, closures, async blocks and modules\n+\n error[E0267]: `break` inside of a closure\n   --> $DIR/issue-66702-break-outside-loop-val.rs:5:12\n    |\n@@ -6,6 +16,7 @@ LL |         || break 'some_label ();\n    |         |\n    |         enclosing closure\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0267`.\n+Some errors have detailed explanations: E0267, E0767.\n+For more information about an error, try `rustc --explain E0267`."}, {"sha": "7fb0d6c39ff6b1b75b287ad834ed50066d9e768e", "filename": "src/test/ui/issues/issue-73541-1.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fissues%2Fissue-73541-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fissues%2Fissue-73541-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-73541-1.rs?ref=2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3", "patch": "@@ -0,0 +1,12 @@\n+// edition:2018\n+\n+fn main() {\n+    'a: loop {\n+        async {\n+            loop {\n+                continue 'a\n+                //~^ ERROR use of unreachable label `'a`\n+            }\n+        };\n+    }\n+}"}, {"sha": "80c1fdf002a832ce71f2bdad52d5af08ac5c4e25", "filename": "src/test/ui/issues/issue-73541-1.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fissues%2Fissue-73541-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fissues%2Fissue-73541-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-73541-1.stderr?ref=2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3", "patch": "@@ -0,0 +1,14 @@\n+error[E0767]: use of unreachable label `'a`\n+  --> $DIR/issue-73541-1.rs:7:26\n+   |\n+LL |     'a: loop {\n+   |     -- unreachable label defined here\n+...\n+LL |                 continue 'a\n+   |                          ^^ unreachable label `'a`\n+   |\n+   = note: labels are unreachable through functions, closures, async blocks and modules\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0767`."}, {"sha": "70b4ab2537626dc3dae0833bc5009ef53500294a", "filename": "src/test/ui/issues/issue-73541-2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fissues%2Fissue-73541-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fissues%2Fissue-73541-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-73541-2.rs?ref=2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3", "patch": "@@ -0,0 +1,20 @@\n+// edition:2018\n+\n+async fn c() {\n+    'a: loop {\n+        macro_rules! b {\n+            () => {\n+                continue 'a\n+                //~^ ERROR use of unreachable label `'a`\n+            }\n+        }\n+\n+        async {\n+            loop {\n+                b!();\n+            }\n+        };\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "75d769c4e154565d3d4177d7f54fb69e9e5a26e5", "filename": "src/test/ui/issues/issue-73541-2.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fissues%2Fissue-73541-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fissues%2Fissue-73541-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-73541-2.stderr?ref=2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3", "patch": "@@ -0,0 +1,18 @@\n+error[E0767]: use of unreachable label `'a`\n+  --> $DIR/issue-73541-2.rs:7:26\n+   |\n+LL |     'a: loop {\n+   |     -- unreachable label defined here\n+...\n+LL |                 continue 'a\n+   |                          ^^ unreachable label `'a`\n+...\n+LL |                 b!();\n+   |                 ----- in this macro invocation\n+   |\n+   = note: labels are unreachable through functions, closures, async blocks and modules\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0767`."}, {"sha": "02ca02da8ed61b1f9276dd24e1ab615dcc01d123", "filename": "src/test/ui/issues/issue-73541-3.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fissues%2Fissue-73541-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fissues%2Fissue-73541-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-73541-3.rs?ref=2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+    'aaaaab: loop {\n+        || {\n+            loop { continue 'aaaaaa }\n+            //~^ ERROR use of undeclared label `'aaaaaa`\n+        };\n+\n+    }\n+}"}, {"sha": "53487aaca998c4b4511369de5f35fc2b5ac3d2df", "filename": "src/test/ui/issues/issue-73541-3.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fissues%2Fissue-73541-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fissues%2Fissue-73541-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-73541-3.stderr?ref=2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3", "patch": "@@ -0,0 +1,12 @@\n+error[E0426]: use of undeclared label `'aaaaaa`\n+  --> $DIR/issue-73541-3.rs:4:29\n+   |\n+LL |     'aaaaab: loop {\n+   |     ------- a label with a similar name exists but is unreachable\n+LL |         || {\n+LL |             loop { continue 'aaaaaa }\n+   |                             ^^^^^^^ undeclared label `'aaaaaa`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0426`."}, {"sha": "399a07cd3fcc893041158c34e703894ac1709d02", "filename": "src/test/ui/issues/issue-73541.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fissues%2Fissue-73541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fissues%2Fissue-73541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-73541.rs?ref=2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3", "patch": "@@ -0,0 +1,9 @@\n+fn main() {\n+    'a: loop {\n+        || {\n+            loop { continue 'a }\n+            //~^ ERROR use of unreachable label `'a`\n+        };\n+\n+    }\n+}"}, {"sha": "4bb466ff16c58c653ba37d2469bd64c2040d6d5d", "filename": "src/test/ui/issues/issue-73541.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fissues%2Fissue-73541.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fissues%2Fissue-73541.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-73541.stderr?ref=2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3", "patch": "@@ -0,0 +1,14 @@\n+error[E0767]: use of unreachable label `'a`\n+  --> $DIR/issue-73541.rs:4:29\n+   |\n+LL |     'a: loop {\n+   |     -- unreachable label defined here\n+LL |         || {\n+LL |             loop { continue 'a }\n+   |                             ^^ unreachable label `'a`\n+   |\n+   = note: labels are unreachable through functions, closures, async blocks and modules\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0767`."}, {"sha": "ac5410cd355223de7678937f41ce8490d953f687", "filename": "src/test/ui/resolve/resolve-label.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fresolve%2Fresolve-label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fresolve%2Fresolve-label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-label.rs?ref=2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3", "patch": "@@ -2,7 +2,7 @@ fn f() {\n     'l: loop {\n         fn g() {\n             loop {\n-                break 'l; //~ ERROR use of undeclared label\n+                break 'l; //~ ERROR use of unreachable label\n             }\n         }\n     }"}, {"sha": "5729348ef21045c250217c2f522234a49045e8dd", "filename": "src/test/ui/resolve/resolve-label.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fresolve%2Fresolve-label.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fresolve%2Fresolve-label.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-label.stderr?ref=2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3", "patch": "@@ -1,9 +1,14 @@\n-error[E0426]: use of undeclared label `'l`\n+error[E0767]: use of unreachable label `'l`\n   --> $DIR/resolve-label.rs:5:23\n    |\n+LL |     'l: loop {\n+   |     -- unreachable label defined here\n+...\n LL |                 break 'l;\n-   |                       ^^ undeclared label `'l`\n+   |                       ^^ unreachable label `'l`\n+   |\n+   = note: labels are unreachable through functions, closures, async blocks and modules\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0426`.\n+For more information about this error, try `rustc --explain E0767`."}, {"sha": "aac6515b527c7e4fb68a3b516f315cb597df4601", "filename": "src/test/ui/suggestions/suggest-labels.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-labels.stderr?ref=2d83cbb8b68d6a83a9f0559d89904a6a1e0bb9e3", "patch": "@@ -1,35 +1,35 @@\n error[E0426]: use of undeclared label `'fo`\n   --> $DIR/suggest-labels.rs:4:15\n    |\n+LL |     'foo: loop {\n+   |     ---- a label with a similar name is reachable\n LL |         break 'fo;\n    |               ^^^\n-   |\n-help: a label with a similar name exists in this scope\n-   |\n-LL |         break 'foo;\n-   |               ^^^^\n+   |               |\n+   |               undeclared label `'fo`\n+   |               help: try using similarly named label: `'foo`\n \n error[E0426]: use of undeclared label `'bor`\n   --> $DIR/suggest-labels.rs:8:18\n    |\n+LL |     'bar: loop {\n+   |     ---- a label with a similar name is reachable\n LL |         continue 'bor;\n    |                  ^^^^\n-   |\n-help: a label with a similar name exists in this scope\n-   |\n-LL |         continue 'bar;\n-   |                  ^^^^\n+   |                  |\n+   |                  undeclared label `'bor`\n+   |                  help: try using similarly named label: `'bar`\n \n error[E0426]: use of undeclared label `'longlable`\n   --> $DIR/suggest-labels.rs:13:19\n    |\n+LL |         'longlabel1: loop {\n+   |         ----------- a label with a similar name is reachable\n LL |             break 'longlable;\n    |                   ^^^^^^^^^^\n-   |\n-help: a label with a similar name exists in this scope\n-   |\n-LL |             break 'longlabel1;\n-   |                   ^^^^^^^^^^^\n+   |                   |\n+   |                   undeclared label `'longlable`\n+   |                   help: try using similarly named label: `'longlabel1`\n \n error: aborting due to 3 previous errors\n "}]}