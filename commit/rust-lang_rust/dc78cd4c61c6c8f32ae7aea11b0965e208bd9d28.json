{"sha": "dc78cd4c61c6c8f32ae7aea11b0965e208bd9d28", "node_id": "C_kwDOAAsO6NoAKGRjNzhjZDRjNjFjNmM4ZjMyYWU3YWVhMTFiMDk2NWUyMDhiZDlkMjg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-30T22:43:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-30T22:43:31Z"}, "message": "Rollup merge of #91294 - cjgillot:process-elem, r=jackh726\n\nVisit type in process_projection_elem.\n\nInstead of reimplementing it for each visitor.", "tree": {"sha": "e68e131ca93af8fe041cea9223ea8e23b79d01a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e68e131ca93af8fe041cea9223ea8e23b79d01a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc78cd4c61c6c8f32ae7aea11b0965e208bd9d28", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhpqkTCRBK7hj4Ov3rIwAAtNoIADY2qX3ja4n2gQR3ZtX8cjFq\n0vQrA34uOH9oixFQA7KFhRyO7SsRMMl/k4KbT1BtTK0D3tiIAIMnhghaldyqOc9L\nF4hZmOEdwToAG9XtMJrFVhjZAILs38Xv0z8a4+xNwEaGgYj3hBrUz6xPjXIH5zOB\ny4QuhGxwWvZNIKZXXMRbhaXGwlEh/idxQKB+YvQRABHqj9AU7qb4Pnxu3tLmGGkq\nU6AILniGk6jT1oCJZG0Fo7vORS2g/s7oiM5HEEfMH93avZhes19CaAayRic2y3tc\n+CnLDDclQBkt3jsh1Jx+Vas+frjs+EDY/tf3isskaaIpO47gypa/9Usi56iTsIQ=\n=HaXJ\n-----END PGP SIGNATURE-----\n", "payload": "tree e68e131ca93af8fe041cea9223ea8e23b79d01a8\nparent 207c80f105282245d93024c95ac408c622f70114\nparent 29b30a9bd291431d4bcae218fc0b1dcb2d35afec\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638312211 +0100\ncommitter GitHub <noreply@github.com> 1638312211 +0100\n\nRollup merge of #91294 - cjgillot:process-elem, r=jackh726\n\nVisit type in process_projection_elem.\n\nInstead of reimplementing it for each visitor.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc78cd4c61c6c8f32ae7aea11b0965e208bd9d28", "html_url": "https://github.com/rust-lang/rust/commit/dc78cd4c61c6c8f32ae7aea11b0965e208bd9d28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc78cd4c61c6c8f32ae7aea11b0965e208bd9d28/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "207c80f105282245d93024c95ac408c622f70114", "url": "https://api.github.com/repos/rust-lang/rust/commits/207c80f105282245d93024c95ac408c622f70114", "html_url": "https://github.com/rust-lang/rust/commit/207c80f105282245d93024c95ac408c622f70114"}, {"sha": "29b30a9bd291431d4bcae218fc0b1dcb2d35afec", "url": "https://api.github.com/repos/rust-lang/rust/commits/29b30a9bd291431d4bcae218fc0b1dcb2d35afec", "html_url": "https://github.com/rust-lang/rust/commit/29b30a9bd291431d4bcae218fc0b1dcb2d35afec"}], "stats": {"total": 66, "additions": 6, "deletions": 60}, "files": [{"sha": "4b6cab24cdb70457537d01f21608a3cacea06e68", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dc78cd4c61c6c8f32ae7aea11b0965e208bd9d28/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc78cd4c61c6c8f32ae7aea11b0965e208bd9d28/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=dc78cd4c61c6c8f32ae7aea11b0965e208bd9d28", "patch": "@@ -1,7 +1,7 @@\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::{InferCtxt, NllRegionVariableOrigin};\n use rustc_middle::mir::visit::{MutVisitor, TyContext};\n-use rustc_middle::mir::{Body, Location, PlaceElem, Promoted};\n+use rustc_middle::mir::{Body, Location, Promoted};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n \n@@ -62,22 +62,6 @@ impl<'a, 'tcx> MutVisitor<'tcx> for NllVisitor<'a, 'tcx> {\n         debug!(?ty);\n     }\n \n-    fn process_projection_elem(\n-        &mut self,\n-        elem: PlaceElem<'tcx>,\n-        _: Location,\n-    ) -> Option<PlaceElem<'tcx>> {\n-        if let PlaceElem::Field(field, ty) = elem {\n-            let new_ty = self.renumber_regions(ty);\n-\n-            if new_ty != ty {\n-                return Some(PlaceElem::Field(field, new_ty));\n-            }\n-        }\n-\n-        None\n-    }\n-\n     #[instrument(skip(self), level = \"debug\")]\n     fn visit_substs(&mut self, substs: &mut SubstsRef<'tcx>, location: Location) {\n         *substs = self.renumber_regions(*substs);"}, {"sha": "4c23ab49fa29f71efd91a9e12c482d41bf0ada32", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc78cd4c61c6c8f32ae7aea11b0965e208bd9d28/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc78cd4c61c6c8f32ae7aea11b0965e208bd9d28/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=dc78cd4c61c6c8f32ae7aea11b0965e208bd9d28", "patch": "@@ -1004,8 +1004,12 @@ macro_rules! visit_place_fns {\n \n                     if new_local == local { None } else { Some(PlaceElem::Index(new_local)) }\n                 }\n+                PlaceElem::Field(field, ty) => {\n+                    let mut new_ty = ty;\n+                    self.visit_ty(&mut new_ty, TyContext::Location(location));\n+                    if ty != new_ty { Some(PlaceElem::Field(field, new_ty)) } else { None }\n+                }\n                 PlaceElem::Deref\n-                | PlaceElem::Field(..)\n                 | PlaceElem::ConstantIndex { .. }\n                 | PlaceElem::Subslice { .. }\n                 | PlaceElem::Downcast(..) => None,"}, {"sha": "c45946a9e2a982d6ca43e534934250481922453a", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dc78cd4c61c6c8f32ae7aea11b0965e208bd9d28/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc78cd4c61c6c8f32ae7aea11b0965e208bd9d28/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=dc78cd4c61c6c8f32ae7aea11b0965e208bd9d28", "patch": "@@ -316,28 +316,6 @@ impl<'tcx> MutVisitor<'tcx> for Replacer<'tcx> {\n         }\n     }\n \n-    fn process_projection_elem(\n-        &mut self,\n-        elem: PlaceElem<'tcx>,\n-        _: Location,\n-    ) -> Option<PlaceElem<'tcx>> {\n-        match elem {\n-            PlaceElem::Index(local) => {\n-                if let Some(replacement) = self.replacements.for_src(local) {\n-                    bug!(\n-                        \"cannot replace {:?} with {:?} in index projection {:?}\",\n-                        local,\n-                        replacement,\n-                        elem,\n-                    );\n-                } else {\n-                    None\n-                }\n-            }\n-            _ => None,\n-        }\n-    }\n-\n     fn visit_place(&mut self, place: &mut Place<'tcx>, context: PlaceContext, location: Location) {\n         if let Some(replacement) = self.replacements.for_src(place.local) {\n             // Rebase `place`s projections onto `replacement`'s."}, {"sha": "3bcb71b64f455e2cf0ba4dcd55f4a9c85d50b6e0", "filename": "compiler/rustc_mir_transform/src/reveal_all.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dc78cd4c61c6c8f32ae7aea11b0965e208bd9d28/compiler%2Frustc_mir_transform%2Fsrc%2Freveal_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc78cd4c61c6c8f32ae7aea11b0965e208bd9d28/compiler%2Frustc_mir_transform%2Fsrc%2Freveal_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Freveal_all.rs?ref=dc78cd4c61c6c8f32ae7aea11b0965e208bd9d28", "patch": "@@ -35,24 +35,4 @@ impl<'tcx> MutVisitor<'tcx> for RevealAllVisitor<'tcx> {\n     fn visit_ty(&mut self, ty: &mut Ty<'tcx>, _: TyContext) {\n         *ty = self.tcx.normalize_erasing_regions(self.param_env, ty);\n     }\n-\n-    #[inline]\n-    fn process_projection_elem(\n-        &mut self,\n-        elem: PlaceElem<'tcx>,\n-        _: Location,\n-    ) -> Option<PlaceElem<'tcx>> {\n-        match elem {\n-            PlaceElem::Field(field, ty) => {\n-                let new_ty = self.tcx.normalize_erasing_regions(self.param_env, ty);\n-                if ty != new_ty { Some(PlaceElem::Field(field, new_ty)) } else { None }\n-            }\n-            // None of those contain a Ty.\n-            PlaceElem::Index(..)\n-            | PlaceElem::Deref\n-            | PlaceElem::ConstantIndex { .. }\n-            | PlaceElem::Subslice { .. }\n-            | PlaceElem::Downcast(..) => None,\n-        }\n-    }\n }"}]}