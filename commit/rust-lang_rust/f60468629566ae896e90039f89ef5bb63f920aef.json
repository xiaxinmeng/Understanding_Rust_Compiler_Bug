{"sha": "f60468629566ae896e90039f89ef5bb63f920aef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MDQ2ODYyOTU2NmFlODk2ZTkwMDM5Zjg5ZWY1YmI2M2Y5MjBhZWY=", "commit": {"author": {"name": "Eric Reed", "email": "ereed@mozilla.com", "date": "2013-06-26T00:04:28Z"}, "committer": {"name": "Eric Reed", "email": "ereed@mozilla.com", "date": "2013-06-26T00:04:28Z"}, "message": "converted UvUdpSocket into a newtype struct", "tree": {"sha": "34a8200e9f99e4785961c6a07a930c260c5b6ee5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34a8200e9f99e4785961c6a07a930c260c5b6ee5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f60468629566ae896e90039f89ef5bb63f920aef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f60468629566ae896e90039f89ef5bb63f920aef", "html_url": "https://github.com/rust-lang/rust/commit/f60468629566ae896e90039f89ef5bb63f920aef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f60468629566ae896e90039f89ef5bb63f920aef/comments", "author": null, "committer": null, "parents": [{"sha": "c5b19f0bf9c2f32f368b0f2565a06ae0271a96c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5b19f0bf9c2f32f368b0f2565a06ae0271a96c1", "html_url": "https://github.com/rust-lang/rust/commit/c5b19f0bf9c2f32f368b0f2565a06ae0271a96c1"}], "stats": {"total": 19, "additions": 5, "deletions": 14}, "files": [{"sha": "905087103fc084f55f40aec2210c3c48ff076a22", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f60468629566ae896e90039f89ef5bb63f920aef/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f60468629566ae896e90039f89ef5bb63f920aef/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=f60468629566ae896e90039f89ef5bb63f920aef", "patch": "@@ -264,7 +264,7 @@ impl IoFactory for UvIoFactory {\n     fn udp_bind(&mut self, addr: IpAddr) -> Result<~RtioUdpSocketObject, IoError> {\n         let /*mut*/ watcher = UdpWatcher::new(self.uv_loop());\n         match watcher.bind(addr) {\n-            Ok(_) => Ok(~UvUdpSocket { watcher: watcher }),\n+            Ok(_) => Ok(~UvUdpSocket(watcher)),\n             Err(uverr) => {\n                 let scheduler = Local::take::<Scheduler>();\n                 do scheduler.deschedule_running_task_and_then |_, task| {\n@@ -451,22 +451,15 @@ impl RtioTcpStream for UvTcpStream {\n     }\n }\n \n-pub struct UvUdpSocket {\n-    watcher: UdpWatcher\n-}\n-\n-impl UvUdpSocket {\n-    fn watcher(&self) -> UdpWatcher { self.watcher }\n-}\n+pub struct UvUdpSocket(UdpWatcher);\n \n impl Drop for UvUdpSocket {\n     fn finalize(&self) {\n         rtdebug!(\"closing udp socket\");\n-        let watcher = self.watcher();\n         let scheduler = Local::take::<Scheduler>();\n         do scheduler.deschedule_running_task_and_then |_, task| {\n             let task_cell = Cell::new(task);\n-            do watcher.close {\n+            do self.close {\n                 let scheduler = Local::take::<Scheduler>();\n                 scheduler.resume_task_immediately(task_cell.take());\n             }\n@@ -481,14 +474,13 @@ impl RtioUdpSocket for UvUdpSocket {\n \n         let scheduler = Local::take::<Scheduler>();\n         assert!(scheduler.in_task_context());\n-        let watcher = self.watcher();\n         let buf_ptr: *&mut [u8] = &buf;\n         do scheduler.deschedule_running_task_and_then |sched, task| {\n             rtdebug!(\"recvfrom: entered scheduler context\");\n             assert!(!sched.in_task_context());\n             let task_cell = Cell::new(task);\n             let alloc: AllocCallback = |_| unsafe { slice_to_uv_buf(*buf_ptr) };\n-            do watcher.recv_start(alloc) |watcher, nread, _buf, addr, flags, status| {\n+            do self.recv_start(alloc) |watcher, nread, _buf, addr, flags, status| {\n                 let _ = flags; // NOTE add handling for partials?\n \n                 watcher.recv_stop();\n@@ -517,12 +509,11 @@ impl RtioUdpSocket for UvUdpSocket {\n         let result_cell_ptr: *Cell<Result<(), IoError>> = &result_cell;\n         let scheduler = Local::take::<Scheduler>();\n         assert!(scheduler.in_task_context());\n-        let watcher = self.watcher();\n         let buf_ptr: *&[u8] = &buf;\n         do scheduler.deschedule_running_task_and_then |_, task| {\n             let task_cell = Cell::new(task);\n             let buf = unsafe { slice_to_uv_buf(*buf_ptr) };\n-            do watcher.send(buf, dst) |_watcher, status| {\n+            do self.send(buf, dst) |_watcher, status| {\n \n                 let result = match status {\n                     None => Ok(()),"}]}