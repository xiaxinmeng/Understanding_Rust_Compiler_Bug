{"sha": "b7f043eeb785abefe472d34b7934bfda029aef5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZjA0M2VlYjc4NWFiZWZlNDcyZDM0Yjc5MzRiZmRhMDI5YWVmNWM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-15T00:07:22Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-15T00:07:48Z"}, "message": "Add new testcase to show the nature of our exciting block-expr / trailing unop interaction.", "tree": {"sha": "0620b87e404eebaabcb640e4e031191f4592b2bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0620b87e404eebaabcb640e4e031191f4592b2bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7f043eeb785abefe472d34b7934bfda029aef5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7f043eeb785abefe472d34b7934bfda029aef5c", "html_url": "https://github.com/rust-lang/rust/commit/b7f043eeb785abefe472d34b7934bfda029aef5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7f043eeb785abefe472d34b7934bfda029aef5c/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec9c4fdde791dc3a6c060031e199883f7ed8ed01", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec9c4fdde791dc3a6c060031e199883f7ed8ed01", "html_url": "https://github.com/rust-lang/rust/commit/ec9c4fdde791dc3a6c060031e199883f7ed8ed01"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "9e9a01c6e669c40fd7a929a17e45fd85364348c8", "filename": "src/test/run-pass/block-expr-precedence.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b7f043eeb785abefe472d34b7934bfda029aef5c/src%2Ftest%2Frun-pass%2Fblock-expr-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f043eeb785abefe472d34b7934bfda029aef5c/src%2Ftest%2Frun-pass%2Fblock-expr-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-expr-precedence.rs?ref=b7f043eeb785abefe472d34b7934bfda029aef5c", "patch": "@@ -0,0 +1,51 @@\n+/*\n+ *\n+ *  When you write a block-expression thing followed by\n+ *  a lone unary operator, you can get a surprising parse:\n+ *\n+ *  if (...) { ... }\n+ *  -num;\n+ *\n+ * for example, or:\n+ *\n+ *  if (...) { ... }\n+ *  *box;\n+ *\n+ * These will parse as subtraction and multiplication binops.\n+ * To get them to parse \"the way you want\" you need to brace\n+ * the leading unops:\n+\n+ *  if (...) { ... }\n+ *  {-num};\n+ *\n+ * or alternatively, semi-separate them:\n+ *\n+ *  if (...) { ... };\n+ *  -num;\n+ *\n+ * This seems a little wonky, but the alternative is to lower\n+ * precedence of such block-like exprs to the point where\n+ * you have to parenthesize them to get them to occur in the\n+ * RHS of a binop. For example, you'd have to write:\n+ *\n+ *   12 + (if (foo) { 13 } else { 14 });\n+ *\n+ * rather than:\n+ *\n+ *   12 + if (foo) { 13 } else { 14 };\n+ *\n+ * Since we want to maintain the ability to write the latter,\n+ * we leave the parens-burden on the trailing unop case.\n+ *\n+ */\n+\n+fn main() {\n+\n+  auto num = 12;\n+\n+  assert if (true) { 12 } else { 12 } - num == 0;\n+  assert 12 - if (true) { 12 } else { 12 } == 0;\n+  if (true) { 12 } {-num};\n+  if (true) { 12 }; {-num};\n+  if (true) { 12 };;; -num;\n+}"}]}