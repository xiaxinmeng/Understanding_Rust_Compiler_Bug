{"sha": "00bc9e8ac4cc6fba98eef558554e7fcd747e49c1", "node_id": "C_kwDOAAsO6NoAKDAwYmM5ZThhYzRjYzZmYmE5OGVlZjU1ODU1NGU3ZmNkNzQ3ZTQ5YzE", "commit": {"author": {"name": "austinabell", "email": "austinabell8@gmail.com", "date": "2022-08-14T17:25:13Z"}, "committer": {"name": "austinabell", "email": "austinabell8@gmail.com", "date": "2022-08-14T17:25:13Z"}, "message": "fix(iter::skip): Optimize `next` and `nth` implementations of `Skip`", "tree": {"sha": "837224135bb3e50ba56c9307fa571c7828630257", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/837224135bb3e50ba56c9307fa571c7828630257"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00bc9e8ac4cc6fba98eef558554e7fcd747e49c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0bg7HDPCLFCYsCEX4k2IIzZkiiQFAmL5L/kACgkQ4k2IIzZk\niiT+IQ/9F111AJ9dasB6zFecgVsnpdKQlHuY1H0LGQsfpf0eNrKU6e/1XWGsMCYS\nQZjyHaAd90eKr5YdfN77ZJ5d9qoF5eA2kT3Db9zzGRWoB8+rTbTLk2kHrOd0bJQF\n3boG1IlNisW44TUY1GOG4+P67cnbujTYzrGAhlYPHlv14gvbAnmRNPuDBUo0rSQF\ni++1SEfzIoecbLCw/2VJnvDVpZ83yDM/HZAFopIdFG01fevGdt6DQFz2wT2BnSRs\nzLjYhNQrkRL74ga02vFsB6EKudS1m3piFYjzT5qvXzaf3Udwfu1OLwe8KQHhi84+\nR+OeMdnimRk1DRYuR+RU6um7o07+xpybU2Qn4N8v39rnBoXrlIwZLvp1yt1fYtTL\nkiuy4VI8BEoFE+B2p639UJSoT5MQpL1mFqSW+CSsZSD6JfGl6mUAEz4fHajsqX8K\nY8jDnVZpzLdFNsKLyniG49rqTOUVBHTT/cQc6us+zOQauASqBYyJ9HJD30SmoDEn\nXarAjF3HkOAvAuAvdrVcSs+e2v08OubFdNdBHjyKb+ZTyP7EnipI+AnVDSllwYjQ\nIPM41XacG8AEiPkf9btulzqKIcMjJsxIp5Q5HGjjHRqTMiDyH7vrNZO9KUcluIMF\nyMZje5qqtky68HOKh82YMdGjuvEAJq9uiOExFJBg4+DoNw2r4kM=\n=zgE2\n-----END PGP SIGNATURE-----", "payload": "tree 837224135bb3e50ba56c9307fa571c7828630257\nparent 801821d1560f84e4716fcbd9244ec959320a13d5\nauthor austinabell <austinabell8@gmail.com> 1660497913 -0400\ncommitter austinabell <austinabell8@gmail.com> 1660497913 -0400\n\nfix(iter::skip): Optimize `next` and `nth` implementations of `Skip`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00bc9e8ac4cc6fba98eef558554e7fcd747e49c1", "html_url": "https://github.com/rust-lang/rust/commit/00bc9e8ac4cc6fba98eef558554e7fcd747e49c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00bc9e8ac4cc6fba98eef558554e7fcd747e49c1/comments", "author": {"login": "austinabell", "id": 24993711, "node_id": "MDQ6VXNlcjI0OTkzNzEx", "avatar_url": "https://avatars.githubusercontent.com/u/24993711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/austinabell", "html_url": "https://github.com/austinabell", "followers_url": "https://api.github.com/users/austinabell/followers", "following_url": "https://api.github.com/users/austinabell/following{/other_user}", "gists_url": "https://api.github.com/users/austinabell/gists{/gist_id}", "starred_url": "https://api.github.com/users/austinabell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/austinabell/subscriptions", "organizations_url": "https://api.github.com/users/austinabell/orgs", "repos_url": "https://api.github.com/users/austinabell/repos", "events_url": "https://api.github.com/users/austinabell/events{/privacy}", "received_events_url": "https://api.github.com/users/austinabell/received_events", "type": "User", "site_admin": false}, "committer": {"login": "austinabell", "id": 24993711, "node_id": "MDQ6VXNlcjI0OTkzNzEx", "avatar_url": "https://avatars.githubusercontent.com/u/24993711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/austinabell", "html_url": "https://github.com/austinabell", "followers_url": "https://api.github.com/users/austinabell/followers", "following_url": "https://api.github.com/users/austinabell/following{/other_user}", "gists_url": "https://api.github.com/users/austinabell/gists{/gist_id}", "starred_url": "https://api.github.com/users/austinabell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/austinabell/subscriptions", "organizations_url": "https://api.github.com/users/austinabell/orgs", "repos_url": "https://api.github.com/users/austinabell/repos", "events_url": "https://api.github.com/users/austinabell/events{/privacy}", "received_events_url": "https://api.github.com/users/austinabell/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "801821d1560f84e4716fcbd9244ec959320a13d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/801821d1560f84e4716fcbd9244ec959320a13d5", "html_url": "https://github.com/rust-lang/rust/commit/801821d1560f84e4716fcbd9244ec959320a13d5"}], "stats": {"total": 58, "additions": 50, "deletions": 8}, "files": [{"sha": "dbf0ae9eca3eb7492b7afbc9d71dbf87ec2b0f49", "filename": "library/core/src/iter/adapters/skip.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/00bc9e8ac4cc6fba98eef558554e7fcd747e49c1/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00bc9e8ac4cc6fba98eef558554e7fcd747e49c1/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fskip.rs?ref=00bc9e8ac4cc6fba98eef558554e7fcd747e49c1", "patch": "@@ -33,21 +33,32 @@ where\n     #[inline]\n     fn next(&mut self) -> Option<I::Item> {\n         if unlikely(self.n > 0) {\n-            self.iter.nth(crate::mem::take(&mut self.n) - 1)?;\n+            self.iter.nth(crate::mem::take(&mut self.n))\n+        } else {\n+            self.iter.next()\n         }\n-        self.iter.next()\n     }\n \n     #[inline]\n     fn nth(&mut self, n: usize) -> Option<I::Item> {\n-        // Can't just add n + self.n due to overflow.\n         if self.n > 0 {\n-            let to_skip = self.n;\n-            self.n = 0;\n-            // nth(n) skips n+1\n-            self.iter.nth(to_skip - 1)?;\n+            let skip: usize = crate::mem::take(&mut self.n);\n+            // Checked add to handle overflow case.\n+            let n = match skip.checked_add(n) {\n+                Some(nth) => nth,\n+                None => {\n+                    // In case of overflow, load skip value, before loading `n`.\n+                    // Because the amount of elements to iterate is beyond `usize::MAX`, this\n+                    // is split into two `nth` calls where the `skip` `nth` call is discarded.\n+                    self.iter.nth(skip - 1)?;\n+                    n\n+                }\n+            };\n+            // Load nth element including skip.\n+            self.iter.nth(n)\n+        } else {\n+            self.iter.nth(n)\n         }\n-        self.iter.nth(n)\n     }\n \n     #[inline]"}, {"sha": "754641834e803a6871ce5b4f13086f3e6ebdd2e4", "filename": "library/core/tests/iter/adapters/skip.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/00bc9e8ac4cc6fba98eef558554e7fcd747e49c1/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00bc9e8ac4cc6fba98eef558554e7fcd747e49c1/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fskip.rs?ref=00bc9e8ac4cc6fba98eef558554e7fcd747e49c1", "patch": "@@ -201,3 +201,34 @@ fn test_skip_non_fused() {\n     // advance it further. `Unfuse` tests that this doesn't happen by panicking in that scenario.\n     let _ = non_fused.skip(20).next();\n }\n+\n+#[test]\n+fn test_skip_non_fused_nth_overflow() {\n+    let non_fused = Unfuse::new(0..10);\n+\n+    // Ensures that calling skip and `nth` where the sum would overflow does not fail for non-fused\n+    // iterators.\n+    let _ = non_fused.skip(20).nth(usize::MAX);\n+}\n+\n+#[test]\n+fn test_skip_overflow_wrapping() {\n+    // Test to ensure even on overflowing on `skip+nth` the correct amount of elements are yielded.\n+    struct WrappingIterator(usize);\n+\n+    impl Iterator for WrappingIterator {\n+        type Item = usize;\n+\n+        fn next(&mut self) -> core::option::Option<Self::Item> {\n+            <Self as Iterator>::nth(self, 0)\n+        }\n+\n+        fn nth(&mut self, nth: usize) -> core::option::Option<Self::Item> {\n+            self.0 = self.0.wrapping_add(nth.wrapping_add(1));\n+            Some(self.0)\n+        }\n+    }\n+\n+    let wrap = WrappingIterator(0);\n+    assert_eq!(wrap.skip(20).nth(usize::MAX), Some(20));\n+}"}]}