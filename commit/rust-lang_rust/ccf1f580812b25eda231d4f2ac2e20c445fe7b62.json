{"sha": "ccf1f580812b25eda231d4f2ac2e20c445fe7b62", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjZjFmNTgwODEyYjI1ZWRhMjMxZDRmMmFjMmUyMGM0NDVmZTdiNjI=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-03T19:34:39Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-03T19:57:27Z"}, "message": "rustdoc: fix min_const_generics with ty::Param", "tree": {"sha": "563737c04612c3235073af3888071738c4e8db55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/563737c04612c3235073af3888071738c4e8db55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccf1f580812b25eda231d4f2ac2e20c445fe7b62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccf1f580812b25eda231d4f2ac2e20c445fe7b62", "html_url": "https://github.com/rust-lang/rust/commit/ccf1f580812b25eda231d4f2ac2e20c445fe7b62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccf1f580812b25eda231d4f2ac2e20c445fe7b62/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e88e908e66cd1e6e30d789b37bcd774951d01856", "url": "https://api.github.com/repos/rust-lang/rust/commits/e88e908e66cd1e6e30d789b37bcd774951d01856", "html_url": "https://github.com/rust-lang/rust/commit/e88e908e66cd1e6e30d789b37bcd774951d01856"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "fc38c6b14b54bc6a965db28238f2e5aa67e42e56", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ccf1f580812b25eda231d4f2ac2e20c445fe7b62/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccf1f580812b25eda231d4f2ac2e20c445fe7b62/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ccf1f580812b25eda231d4f2ac2e20c445fe7b62", "patch": "@@ -1364,16 +1364,16 @@ impl Clean<Type> for hir::Ty<'_> {\n             TyKind::Slice(ref ty) => Slice(box ty.clean(cx)),\n             TyKind::Array(ref ty, ref length) => {\n                 let def_id = cx.tcx.hir().local_def_id(length.hir_id);\n-                let length = match cx.tcx.const_eval_poly(def_id.to_def_id()) {\n-                    Ok(length) => {\n-                        print_const(cx, ty::Const::from_value(cx.tcx, length, cx.tcx.types.usize))\n-                    }\n-                    Err(_) => cx\n-                        .sess()\n-                        .source_map()\n-                        .span_to_snippet(cx.tcx.def_span(def_id))\n-                        .unwrap_or_else(|_| \"_\".to_string()),\n-                };\n+                // NOTE(min_const_generics): We can't use `const_eval_poly` for constants\n+                // as we currently do not supply the parent generics to anonymous constants\n+                // but do allow `ConstKind::Param`.\n+                //\n+                // `const_eval_poly` tries to to first substitute generic parameters which\n+                // results in an ICE while manually constructing the constant and using `eval`\n+                // does nothing for `ConstKind::Param`.\n+                let ct = ty::Const::from_anon_const(cx.tcx, def_id);\n+                let param_env = cx.tcx.param_env(def_id);\n+                let length = print_const(cx, ct.eval(cx.tcx, param_env));\n                 Array(box ty.clean(cx), length)\n             }\n             TyKind::Tup(ref tys) => Tuple(tys.clean(cx)),"}, {"sha": "3064d0701e3006afa1c59725ef04013dc24f437b", "filename": "src/test/rustdoc/const-generics/type-alias.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ccf1f580812b25eda231d4f2ac2e20c445fe7b62/src%2Ftest%2Frustdoc%2Fconst-generics%2Ftype-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccf1f580812b25eda231d4f2ac2e20c445fe7b62/src%2Ftest%2Frustdoc%2Fconst-generics%2Ftype-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Ftype-alias.rs?ref=ccf1f580812b25eda231d4f2ac2e20c445fe7b62", "patch": "@@ -0,0 +1,6 @@\n+// ignore-tidy-linelength\n+#![feature(min_const_generics)]\n+#![crate_name = \"foo\"]\n+\n+// @has foo/type.CellIndex.html '//pre[@class=\"rust typedef\"]' 'type CellIndex<const D: usize> = [i64; D];'\n+pub type CellIndex<const D: usize> = [i64; D];"}]}