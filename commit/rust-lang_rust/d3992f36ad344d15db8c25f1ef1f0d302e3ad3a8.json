{"sha": "d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzOTkyZjM2YWQzNDRkMTVkYjhjMjVmMWVmMWYwZDMwMmUzYWQzYTg=", "commit": {"author": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2021-01-03T14:46:19Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2021-01-03T14:46:49Z"}, "message": "Refactor the non-transient cell borrow error diagnostic", "tree": {"sha": "801adfe8577941388a7115e40cddfb4b161d167d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/801adfe8577941388a7115e40cddfb4b161d167d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8", "html_url": "https://github.com/rust-lang/rust/commit/d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8968c8a103cd69202e4312ad497e641a8f027e88", "url": "https://api.github.com/repos/rust-lang/rust/commits/8968c8a103cd69202e4312ad497e641a8f027e88", "html_url": "https://github.com/rust-lang/rust/commit/8968c8a103cd69202e4312ad497e641a8f027e88"}], "stats": {"total": 71, "additions": 46, "deletions": 25}, "files": [{"sha": "945b422e29c6371c05119d0aa41b80c0f09949a9", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8", "patch": "@@ -238,13 +238,32 @@ impl NonConstOp for TransientCellBorrow {\n pub struct CellBorrow;\n impl NonConstOp for CellBorrow {\n     fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n-        struct_span_err!(\n+        let mut err = struct_span_err!(\n             ccx.tcx.sess,\n             span,\n             E0492,\n-            \"this borrow to an interior mutable value may end up in the final value of this {}\",\n+            \"{}s cannot refer to interior mutable data\",\n             ccx.const_kind(),\n-        )\n+        );\n+        err.span_label(\n+            span,\n+            format!(\"this borrow of an interior mutable value may end up in the final value\"),\n+        );\n+        if let hir::ConstContext::Static(_) = ccx.const_kind() {\n+            err.help(\n+                \"To fix this, the value can be extracted to separate \\\n+                `static` and then referenced.\",\n+            );\n+        }\n+        if ccx.tcx.sess.teach(&err.get_code().unwrap()) {\n+            err.note(\n+                \"A constant containing interior mutable data behind a reference can allow you\n+                 to modify that data. This would make multiple uses of a constant to be able to\n+                 see different values and allow one to escape the `Send` and `Sync` requirements\n+                 for shared mutable data, which is unsound.\",\n+            );\n+        }\n+        err\n     }\n }\n "}, {"sha": "7c28b8b8a628edb8bfcf39f66cd66b89275f8c18", "filename": "src/test/ui/consts/partial_qualif.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.rs?ref=d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8", "patch": "@@ -3,7 +3,7 @@ use std::cell::Cell;\n const FOO: &(Cell<usize>, bool) = {\n     let mut a = (Cell::new(0), false);\n     a.1 = true; // sets `qualif(a)` to `qualif(a) | qualif(true)`\n-    &{a} //~ ERROR borrow to an interior mutable value may end up in the final value\n+    &{a} //~ ERROR cannot refer to interior mutable\n };\n \n fn main() {}"}, {"sha": "32c25be21735bd760e5497b6ca86bb69464a24e4", "filename": "src/test/ui/consts/partial_qualif.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.stderr?ref=d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8", "patch": "@@ -1,8 +1,8 @@\n-error[E0492]: this borrow to an interior mutable value may end up in the final value of this constant\n+error[E0492]: constants cannot refer to interior mutable data\n   --> $DIR/partial_qualif.rs:6:5\n    |\n LL |     &{a}\n-   |     ^^^^\n+   |     ^^^^ this borrow of an interior mutable value may end up in the final value\n \n error: aborting due to previous error\n "}, {"sha": "aae4e41ffd7eec5b78cd9d95d08eee4c5d317a88", "filename": "src/test/ui/consts/qualif_overwrite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.rs?ref=d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8", "patch": "@@ -7,7 +7,7 @@ use std::cell::Cell;\n const FOO: &Option<Cell<usize>> = {\n     let mut a = Some(Cell::new(0));\n     a = None; // sets `qualif(a)` to `qualif(a) | qualif(None)`\n-    &{a} //~ ERROR borrow to an interior mutable value may end up in the final value\n+    &{a} //~ ERROR cannot refer to interior mutable\n };\n \n fn main() {}"}, {"sha": "86a669c433df663bbbe98f7a2962b802ea448d65", "filename": "src/test/ui/consts/qualif_overwrite.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.stderr?ref=d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8", "patch": "@@ -1,8 +1,8 @@\n-error[E0492]: this borrow to an interior mutable value may end up in the final value of this constant\n+error[E0492]: constants cannot refer to interior mutable data\n   --> $DIR/qualif_overwrite.rs:10:5\n    |\n LL |     &{a}\n-   |     ^^^^\n+   |     ^^^^ this borrow of an interior mutable value may end up in the final value\n \n error: aborting due to previous error\n "}, {"sha": "1819d9a6d203d301d826b8805220f4c3f72a6c4e", "filename": "src/test/ui/consts/qualif_overwrite_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.rs?ref=d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8", "patch": "@@ -5,7 +5,7 @@ use std::cell::Cell;\n const FOO: &Option<Cell<usize>> = {\n     let mut a = (Some(Cell::new(0)),);\n     a.0 = None; // sets `qualif(a)` to `qualif(a) | qualif(None)`\n-    &{a.0} //~ ERROR borrow to an interior mutable value may end up in the final value\n+    &{a.0} //~ ERROR cannot refer to interior mutable\n };\n \n fn main() {}"}, {"sha": "9eb123d0b01b1d3d26c817d7c1d854e05b3c0b72", "filename": "src/test/ui/consts/qualif_overwrite_2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.stderr?ref=d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8", "patch": "@@ -1,8 +1,8 @@\n-error[E0492]: this borrow to an interior mutable value may end up in the final value of this constant\n+error[E0492]: constants cannot refer to interior mutable data\n   --> $DIR/qualif_overwrite_2.rs:8:5\n    |\n LL |     &{a.0}\n-   |     ^^^^^^\n+   |     ^^^^^^ this borrow of an interior mutable value may end up in the final value\n \n error: aborting due to previous error\n "}, {"sha": "e8041af99b55c6ada3e7bc7d95b382cd466f42c9", "filename": "src/test/ui/error-codes/E0492.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8/src%2Ftest%2Fui%2Ferror-codes%2FE0492.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8/src%2Ftest%2Fui%2Ferror-codes%2FE0492.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0492.stderr?ref=d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8", "patch": "@@ -1,14 +1,16 @@\n-error[E0492]: this borrow to an interior mutable value may end up in the final value of this constant\n+error[E0492]: constants cannot refer to interior mutable data\n   --> $DIR/E0492.rs:4:33\n    |\n LL | const B: &'static AtomicUsize = &A;\n-   |                                 ^^\n+   |                                 ^^ this borrow of an interior mutable value may end up in the final value\n \n-error[E0492]: this borrow to an interior mutable value may end up in the final value of this static\n+error[E0492]: statics cannot refer to interior mutable data\n   --> $DIR/E0492.rs:5:34\n    |\n LL | static C: &'static AtomicUsize = &A;\n-   |                                  ^^\n+   |                                  ^^ this borrow of an interior mutable value may end up in the final value\n+   |\n+   = help: To fix this, the value can be extracted to separate `static` and then referenced.\n \n error: aborting due to 2 previous errors\n "}, {"sha": "89316dbd5c41a0b9f8db8a55eb71041d3ddf158f", "filename": "src/test/ui/issues/issue-17718-const-borrow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-borrow.rs?ref=d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8", "patch": "@@ -2,13 +2,13 @@ use std::cell::UnsafeCell;\n \n const A: UnsafeCell<usize> = UnsafeCell::new(1);\n const B: &'static UnsafeCell<usize> = &A;\n-//~^ ERROR: borrow to an interior mutable value\n+//~^ ERROR: cannot refer to interior mutable\n \n struct C { a: UnsafeCell<usize> }\n const D: C = C { a: UnsafeCell::new(1) };\n const E: &'static UnsafeCell<usize> = &D.a;\n-//~^ ERROR: borrow to an interior mutable value\n+//~^ ERROR: cannot refer to interior mutable\n const F: &'static C = &D;\n-//~^ ERROR: borrow to an interior mutable value\n+//~^ ERROR: cannot refer to interior mutable\n \n fn main() {}"}, {"sha": "e3ff6c923ad7fa44d665d6b492231411b12ecf61", "filename": "src/test/ui/issues/issue-17718-const-borrow.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-borrow.stderr?ref=d3992f36ad344d15db8c25f1ef1f0d302e3ad3a8", "patch": "@@ -1,20 +1,20 @@\n-error[E0492]: this borrow to an interior mutable value may end up in the final value of this constant\n+error[E0492]: constants cannot refer to interior mutable data\n   --> $DIR/issue-17718-const-borrow.rs:4:39\n    |\n LL | const B: &'static UnsafeCell<usize> = &A;\n-   |                                       ^^\n+   |                                       ^^ this borrow of an interior mutable value may end up in the final value\n \n-error[E0492]: this borrow to an interior mutable value may end up in the final value of this constant\n+error[E0492]: constants cannot refer to interior mutable data\n   --> $DIR/issue-17718-const-borrow.rs:9:39\n    |\n LL | const E: &'static UnsafeCell<usize> = &D.a;\n-   |                                       ^^^^\n+   |                                       ^^^^ this borrow of an interior mutable value may end up in the final value\n \n-error[E0492]: this borrow to an interior mutable value may end up in the final value of this constant\n+error[E0492]: constants cannot refer to interior mutable data\n   --> $DIR/issue-17718-const-borrow.rs:11:23\n    |\n LL | const F: &'static C = &D;\n-   |                       ^^\n+   |                       ^^ this borrow of an interior mutable value may end up in the final value\n \n error: aborting due to 3 previous errors\n "}]}