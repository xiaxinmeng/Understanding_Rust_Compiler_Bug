{"sha": "8cbfbf77f86ad242395bc283d784514b3398de25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjYmZiZjc3Zjg2YWQyNDIzOTViYzI4M2Q3ODQ1MTRiMzM5OGRlMjU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-09-15T11:02:33Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-09-15T11:03:07Z"}, "message": "Remove `#[linkage(foo)]` statics from core miri", "tree": {"sha": "9e8b2adb7cdcb7cd129927c6b9802108e41be773", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e8b2adb7cdcb7cd129927c6b9802108e41be773"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cbfbf77f86ad242395bc283d784514b3398de25", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlm7s2sACgkQpp+NIls6\n19mSjA/+PE4ApeGR4BNC9ECsgSNxe9PM5B5DZV/bc4PJCSIZGff339AoQeoNIp+2\nqWjs4fFsBD1OWaj1Bgjv3p0XcBxsCPG0aj2cTeDeQvTvwwa5SCl3vgKPSS8ZvG8F\neeaBt1gaxmfA+zW3rBwGsdp9H9ekTSx/d+qQeifLEqfxRmTcuqhoNJiCSuT2G6wI\nkvFiiILPsLm0sYdNEKNhGAW9Lmet6oGoUKu0wxh8DRxRbZccWtbTBHbgZeuEz/2k\nyP+RDHGXJNhrsvUd8/WQFcTQhohrR4lj21ekULJrwgbYebbOxgoyvA9J35azKxvY\nAET90FnAiLzg5fJvwEbaCW4EF3SxTskrDFbx9+zhJGsAuXrMFfVdy3iulamTfXCS\nAqykoHCw4UL0BX/6+ICzemCe+9BiLbon+Puy6MGdGVdQVDaKyy106Y0bRK0DpP4o\nSrDJrdGfEm2gseSKPYOJYM3NDJK1czTn6ptNuAFBueNSPUma6XDYNKqKM4dBtJLN\np8Cdb+j+uHk5GnOzN3NXENwfxXZYXGmADaejPfEV8RpjP/n5jbIoLDgMy8VQEJbm\nVYZUJhnpAAp3MGfppqXJh7AzfQxutd1OZbqtMdCSdmPB2QVM0rxyW6678Ta5VtNe\nkk+CEowgI0JT1fbpqgYgMG3V8f1JQmHiIrQMd+mFrG0mUDKBpis=\n=AfMj\n-----END PGP SIGNATURE-----", "payload": "tree 9e8b2adb7cdcb7cd129927c6b9802108e41be773\nparent e8ea7da20111ce4e57031dc959678ec5429ee9b9\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1505473353 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1505473387 +0200\n\nRemove `#[linkage(foo)]` statics from core miri\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cbfbf77f86ad242395bc283d784514b3398de25", "html_url": "https://github.com/rust-lang/rust/commit/8cbfbf77f86ad242395bc283d784514b3398de25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cbfbf77f86ad242395bc283d784514b3398de25/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8ea7da20111ce4e57031dc959678ec5429ee9b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8ea7da20111ce4e57031dc959678ec5429ee9b9", "html_url": "https://github.com/rust-lang/rust/commit/e8ea7da20111ce4e57031dc959678ec5429ee9b9"}], "stats": {"total": 64, "additions": 47, "deletions": 17}, "files": [{"sha": "428724f7de5d9b047f94a33b61559483d40b37f8", "filename": "miri/lib.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8cbfbf77f86ad242395bc283d784514b3398de25/miri%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cbfbf77f86ad242395bc283d784514b3398de25/miri%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Flib.rs?ref=8cbfbf77f86ad242395bc283d784514b3398de25", "patch": "@@ -239,4 +239,32 @@ impl<'tcx> Machine<'tcx> for Evaluator {\n                 .map(PrimVal::Ptr)\n         }\n     }\n+\n+    fn global_item_with_linkage<'a>(\n+        ecx: &mut EvalContext<'a, 'tcx, Self>,\n+        instance: ty::Instance<'tcx>,\n+        mutability: Mutability,\n+    ) -> EvalResult<'tcx> {\n+        // FIXME: check that it's `#[linkage = \"extern_weak\"]`\n+        trace!(\"Initializing an extern global with NULL\");\n+        let ptr_size = ecx.memory.pointer_size();\n+        let ptr = ecx.memory.allocate(\n+            ptr_size,\n+            ptr_size,\n+            MemoryKind::UninitializedStatic,\n+        )?;\n+        ecx.memory.write_ptr_sized_unsigned(ptr, PrimVal::Bytes(0))?;\n+        ecx.memory.mark_static_initalized(ptr.alloc_id, mutability)?;\n+        ecx.globals.insert(\n+            GlobalId {\n+                instance,\n+                promoted: None,\n+            },\n+            PtrAndAlign {\n+                ptr: ptr.into(),\n+                aligned: true,\n+            },\n+        );\n+        Ok(())\n+    }\n }"}, {"sha": "7fa28dccbabe4991d926b98e795f06fa9548c12a", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8cbfbf77f86ad242395bc283d784514b3398de25/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cbfbf77f86ad242395bc283d784514b3398de25/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=8cbfbf77f86ad242395bc283d784514b3398de25", "patch": "@@ -245,4 +245,14 @@ impl<'tcx> super::Machine<'tcx> for CompileTimeFunctionEvaluator {\n             ConstEvalError::NeedsRfc(\"Heap allocations via `box` keyword\".to_string()).into(),\n         )\n     }\n+\n+    fn global_item_with_linkage<'a>(\n+        _ecx: &mut EvalContext<'a, 'tcx, Self>,\n+        _instance: ty::Instance<'tcx>,\n+        _mutability: Mutability,\n+    ) -> EvalResult<'tcx> {\n+        Err(\n+            ConstEvalError::NotConst(\"statics with `linkage` attribute\".to_string()).into(),\n+        )\n+    }\n }"}, {"sha": "debb17fc0a7f96fd9e3938a1f95cd80bebaa2440", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8cbfbf77f86ad242395bc283d784514b3398de25/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cbfbf77f86ad242395bc283d784514b3398de25/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=8cbfbf77f86ad242395bc283d784514b3398de25", "patch": "@@ -6,6 +6,7 @@ use super::{EvalResult, EvalContext, Lvalue, PrimVal, ValTy};\n \n use rustc::{mir, ty};\n use syntax::codemap::Span;\n+use syntax::ast::Mutability;\n \n /// Methods of this trait signifies a point where CTFE evaluation would fail\n /// and some use case dependent behaviour can instead be applied\n@@ -70,4 +71,11 @@ pub trait Machine<'tcx>: Sized {\n         ecx: &mut EvalContext<'a, 'tcx, Self>,\n         ty: ty::Ty<'tcx>,\n     ) -> EvalResult<'tcx, PrimVal>;\n+\n+    /// Called when trying to access a global declared with a `linkage` attribute\n+    fn global_item_with_linkage<'a>(\n+        ecx: &mut EvalContext<'a, 'tcx, Self>,\n+        instance: ty::Instance<'tcx>,\n+        mutability: Mutability,\n+    ) -> EvalResult<'tcx>;\n }"}, {"sha": "1f538707527f2b074be9a0b8b67b53c0a60cd591", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8cbfbf77f86ad242395bc283d784514b3398de25/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cbfbf77f86ad242395bc283d784514b3398de25/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=8cbfbf77f86ad242395bc283d784514b3398de25", "patch": "@@ -205,23 +205,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             return Ok(false);\n         }\n         if self.tcx.has_attr(def_id, \"linkage\") {\n-            // FIXME: check that it's `#[linkage = \"extern_weak\"]`\n-            trace!(\"Initializing an extern global with NULL\");\n-            let ptr_size = self.memory.pointer_size();\n-            let ptr = self.memory.allocate(\n-                ptr_size,\n-                ptr_size,\n-                MemoryKind::UninitializedStatic,\n-            )?;\n-            self.memory.write_ptr_sized_unsigned(ptr, PrimVal::Bytes(0))?;\n-            self.memory.mark_static_initalized(ptr.alloc_id, mutability)?;\n-            self.globals.insert(\n-                cid,\n-                PtrAndAlign {\n-                    ptr: ptr.into(),\n-                    aligned: true,\n-                },\n-            );\n+            M::global_item_with_linkage(self, cid.instance, mutability)?;\n             return Ok(false);\n         }\n         let mir = self.load_mir(instance.def)?;"}]}