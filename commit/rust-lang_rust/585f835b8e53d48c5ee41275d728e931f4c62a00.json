{"sha": "585f835b8e53d48c5ee41275d728e931f4c62a00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4NWY4MzViOGU1M2Q0OGM1ZWU0MTI3NWQ3MjhlOTMxZjRjNjJhMDA=", "commit": {"author": {"name": "Mikhail Modin", "email": "mikhailm1@gmail.com", "date": "2016-10-23T18:53:31Z"}, "committer": {"name": "Mikhail Modin", "email": "mikhailm1@gmail.com", "date": "2016-10-23T18:53:31Z"}, "message": "Make error E0221 more helpful", "tree": {"sha": "6d1be0eb088744a1988cb72bb7af35f34ed984e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d1be0eb088744a1988cb72bb7af35f34ed984e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/585f835b8e53d48c5ee41275d728e931f4c62a00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/585f835b8e53d48c5ee41275d728e931f4c62a00", "html_url": "https://github.com/rust-lang/rust/commit/585f835b8e53d48c5ee41275d728e931f4c62a00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/585f835b8e53d48c5ee41275d728e931f4c62a00/comments", "author": {"login": "mikhail-m1", "id": 5663581, "node_id": "MDQ6VXNlcjU2NjM1ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/5663581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikhail-m1", "html_url": "https://github.com/mikhail-m1", "followers_url": "https://api.github.com/users/mikhail-m1/followers", "following_url": "https://api.github.com/users/mikhail-m1/following{/other_user}", "gists_url": "https://api.github.com/users/mikhail-m1/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikhail-m1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikhail-m1/subscriptions", "organizations_url": "https://api.github.com/users/mikhail-m1/orgs", "repos_url": "https://api.github.com/users/mikhail-m1/repos", "events_url": "https://api.github.com/users/mikhail-m1/events{/privacy}", "received_events_url": "https://api.github.com/users/mikhail-m1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikhail-m1", "id": 5663581, "node_id": "MDQ6VXNlcjU2NjM1ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/5663581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikhail-m1", "html_url": "https://github.com/mikhail-m1", "followers_url": "https://api.github.com/users/mikhail-m1/followers", "following_url": "https://api.github.com/users/mikhail-m1/following{/other_user}", "gists_url": "https://api.github.com/users/mikhail-m1/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikhail-m1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikhail-m1/subscriptions", "organizations_url": "https://api.github.com/users/mikhail-m1/orgs", "repos_url": "https://api.github.com/users/mikhail-m1/repos", "events_url": "https://api.github.com/users/mikhail-m1/events{/privacy}", "received_events_url": "https://api.github.com/users/mikhail-m1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bccb829d0fe9a733bd6efcf6f7313186ae237ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bccb829d0fe9a733bd6efcf6f7313186ae237ab", "html_url": "https://github.com/rust-lang/rust/commit/7bccb829d0fe9a733bd6efcf6f7313186ae237ab"}], "stats": {"total": 60, "additions": 44, "deletions": 16}, "files": [{"sha": "dcb94bfa4aaaca237e5a2b81d98e4b869c38fa03", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/585f835b8e53d48c5ee41275d728e931f4c62a00/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585f835b8e53d48c5ee41275d728e931f4c62a00/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=585f835b8e53d48c5ee41275d728e931f4c62a00", "patch": "@@ -1261,18 +1261,36 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         }\n \n         if bounds.len() > 1 {\n+            let spans = bounds.iter().map(|b| {\n+                self.tcx().impl_or_trait_items(b.def_id()).iter()\n+                .find(|&&def_id| {\n+                    match self.tcx().impl_or_trait_item(def_id) {\n+                        ty::TypeTraitItem(ref item) => item.name.as_str() == assoc_name,\n+                        _ => false\n+                    }\n+                })\n+                .and_then(|&def_id| self.tcx().map.as_local_node_id(def_id))\n+                .and_then(|node_id| self.tcx().map.opt_span(node_id))\n+            });\n+\n             let mut err = struct_span_err!(\n                 self.tcx().sess, span, E0221,\n                 \"ambiguous associated type `{}` in bounds of `{}`\",\n                 assoc_name,\n                 ty_param_name);\n             err.span_label(span, &format!(\"ambiguous associated type `{}`\", assoc_name));\n \n-            for bound in &bounds {\n-                span_note!(&mut err, span,\n-                           \"associated type `{}` could derive from `{}`\",\n-                           ty_param_name,\n-                           bound);\n+            for span_and_bound in spans.zip(&bounds) {\n+                if let Some(span) = span_and_bound.0 {\n+                    err.span_label(span, &format!(\"ambiguous `{}` from `{}`\",\n+                                                  assoc_name,\n+                                                  span_and_bound.1));\n+                } else {\n+                    span_note!(&mut err, span,\n+                               \"associated type `{}` could derive from `{}`\",\n+                               ty_param_name,\n+                               span_and_bound.1);\n+                }\n             }\n             err.emit();\n         }"}, {"sha": "aed2b4084e8103f3e4fb19ac192ba74d2d5db2f5", "filename": "src/test/compile-fail/E0221.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/585f835b8e53d48c5ee41275d728e931f4c62a00/src%2Ftest%2Fcompile-fail%2FE0221.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585f835b8e53d48c5ee41275d728e931f4c62a00/src%2Ftest%2Fcompile-fail%2FE0221.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0221.rs?ref=585f835b8e53d48c5ee41275d728e931f4c62a00", "patch": "@@ -12,17 +12,27 @@ trait T1 {}\n trait T2 {}\n \n trait Foo {\n-    type A: T1;\n+    type A: T1; //~ NOTE: ambiguous `A` from `Foo`\n }\n \n trait Bar : Foo {\n-    type A: T2;\n+    type A: T2; //~ NOTE: ambiguous `A` from `Bar`\n     fn do_something() {\n         let _: Self::A;\n         //~^ ERROR E0221\n         //~| NOTE ambiguous associated type `A`\n-        //~| NOTE associated type `Self` could derive from `Foo`\n-        //~| NOTE associated type `Self` could derive from `Bar`\n+    }\n+}\n+\n+trait T3 {}\n+\n+trait My : std::str::FromStr {\n+    type Err: T3; //~ NOTE: ambiguous `Err` from `My`\n+    fn test() {\n+        let _: Self::Err;\n+        //~^ ERROR E0221\n+        //~| NOTE ambiguous associated type `Err`\n+        //~| NOTE associated type `Self` could derive from `std::str::FromStr`\n     }\n }\n "}, {"sha": "b33bbfd84258fe88828ebf57e503b00ad57ad0bf", "filename": "src/test/compile-fail/associated-type-projection-from-multiple-supertraits.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/585f835b8e53d48c5ee41275d728e931f4c62a00/src%2Ftest%2Fcompile-fail%2Fassociated-type-projection-from-multiple-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/585f835b8e53d48c5ee41275d728e931f4c62a00/src%2Ftest%2Fcompile-fail%2Fassociated-type-projection-from-multiple-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-type-projection-from-multiple-supertraits.rs?ref=585f835b8e53d48c5ee41275d728e931f4c62a00", "patch": "@@ -13,13 +13,19 @@\n \n pub trait Vehicle {\n     type Color;\n+    //~^ NOTE ambiguous `Color` from `Vehicle`\n+    //~| NOTE ambiguous `Color` from `Vehicle`\n+    //~| NOTE ambiguous `Color` from `Vehicle`\n \n     fn go(&self) {  }\n }\n \n pub trait Box {\n     type Color;\n-\n+    //~^ NOTE ambiguous `Color` from `Box`\n+    //~| NOTE ambiguous `Color` from `Box`\n+    //~| NOTE ambiguous `Color` from `Box`\n+    //\n     fn mail(&self) {  }\n }\n \n@@ -29,24 +35,18 @@ pub trait BoxCar : Box + Vehicle {\n fn dent<C:BoxCar>(c: C, color: C::Color) {\n     //~^ ERROR ambiguous associated type `Color` in bounds of `C`\n     //~| NOTE ambiguous associated type `Color`\n-    //~| NOTE could derive from `Vehicle`\n-    //~| NOTE could derive from `Box`\n }\n \n fn dent_object<COLOR>(c: BoxCar<Color=COLOR>) {\n     //~^ ERROR ambiguous associated type\n     //~| ERROR the value of the associated type `Color` (from the trait `Vehicle`) must be specified\n     //~| NOTE ambiguous associated type `Color`\n-    //~| NOTE could derive from `Vehicle`\n-    //~| NOTE could derive from `Box`\n     //~| NOTE missing associated type `Color` value\n }\n \n fn paint<C:BoxCar>(c: C, d: C::Color) {\n     //~^ ERROR ambiguous associated type `Color` in bounds of `C`\n     //~| NOTE ambiguous associated type `Color`\n-    //~| NOTE could derive from `Vehicle`\n-    //~| NOTE could derive from `Box`\n }\n \n pub fn main() { }"}]}