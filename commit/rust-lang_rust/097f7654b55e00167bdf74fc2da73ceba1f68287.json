{"sha": "097f7654b55e00167bdf74fc2da73ceba1f68287", "node_id": "C_kwDOAAsO6NoAKDA5N2Y3NjU0YjU1ZTAwMTY3YmRmNzRmYzJkYTczY2ViYTFmNjgyODc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-01T15:51:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-01T15:51:41Z"}, "message": "Auto merge of #9082 - Alexendoo:let_unit_allow, r=xFrednet\n\nFix direct `#[allow]` attributes in `let_unit_value`\n\nFixes part of #9080\n\nNot sure why it doesn't work when the lint is emitted at the statement, but switching it to the local works fine\n\nchangelog: Fix direct `#[allow]` attributes in [`let_unit_value`]", "tree": {"sha": "0db51e8a742575201074d60fd5655da7c290de0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0db51e8a742575201074d60fd5655da7c290de0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/097f7654b55e00167bdf74fc2da73ceba1f68287", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/097f7654b55e00167bdf74fc2da73ceba1f68287", "html_url": "https://github.com/rust-lang/rust/commit/097f7654b55e00167bdf74fc2da73ceba1f68287", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/097f7654b55e00167bdf74fc2da73ceba1f68287/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8970bfa089ad515d914ce12b0049e427082b254", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8970bfa089ad515d914ce12b0049e427082b254", "html_url": "https://github.com/rust-lang/rust/commit/d8970bfa089ad515d914ce12b0049e427082b254"}, {"sha": "a5b70a4c1df9d009823ec067e7544ce28ec29c2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5b70a4c1df9d009823ec067e7544ce28ec29c2f", "html_url": "https://github.com/rust-lang/rust/commit/a5b70a4c1df9d009823ec067e7544ce28ec29c2f"}], "stats": {"total": 69, "additions": 44, "deletions": 25}, "files": [{"sha": "17d60a40dce105d4aba643bd5f20dfb58e234ee6", "filename": "clippy_lints/src/unit_types/let_unit_value.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/097f7654b55e00167bdf74fc2da73ceba1f68287/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097f7654b55e00167bdf74fc2da73ceba1f68287/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs?ref=097f7654b55e00167bdf74fc2da73ceba1f68287", "patch": "@@ -4,18 +4,17 @@ use clippy_utils::visitors::for_each_value_source;\n use core::ops::ControlFlow;\n use rustc_errors::Applicability;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::{Expr, ExprKind, PatKind, Stmt, StmtKind};\n+use rustc_hir::{Expr, ExprKind, Local, PatKind};\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, Ty, TypeFoldable, TypeSuperFoldable, TypeVisitor};\n \n use super::LET_UNIT_VALUE;\n \n-pub(super) fn check(cx: &LateContext<'_>, stmt: &Stmt<'_>) {\n-    if let StmtKind::Local(local) = stmt.kind\n-        && let Some(init) = local.init\n+pub(super) fn check(cx: &LateContext<'_>, local: &Local<'_>) {\n+    if let Some(init) = local.init\n         && !local.pat.span.from_expansion()\n-        && !in_external_macro(cx.sess(), stmt.span)\n+        && !in_external_macro(cx.sess(), local.span)\n         && cx.typeck_results().pat_ty(local.pat).is_unit()\n     {\n         let needs_inferred = for_each_value_source(init, &mut |e| if needs_inferred_result_ty(cx, e) {\n@@ -29,7 +28,7 @@ pub(super) fn check(cx: &LateContext<'_>, stmt: &Stmt<'_>) {\n                 span_lint_and_then(\n                     cx,\n                     LET_UNIT_VALUE,\n-                    stmt.span,\n+                    local.span,\n                     \"this let-binding has unit value\",\n                     |diag| {\n                             diag.span_suggestion(\n@@ -45,15 +44,15 @@ pub(super) fn check(cx: &LateContext<'_>, stmt: &Stmt<'_>) {\n             span_lint_and_then(\n                 cx,\n                 LET_UNIT_VALUE,\n-                stmt.span,\n+                local.span,\n                 \"this let-binding has unit value\",\n                 |diag| {\n                     if let Some(expr) = &local.init {\n                         let snip = snippet_with_macro_callsite(cx, expr.span, \"()\");\n                         diag.span_suggestion(\n-                            stmt.span,\n+                            local.span,\n                             \"omit the `let` binding\",\n-                            format!(\"{};\", snip),\n+                            format!(\"{snip};\"),\n                             Applicability::MachineApplicable, // snippet\n                         );\n                     }"}, {"sha": "e57d4fc3b8917005be16fd1e808bbfa454b6ec3d", "filename": "clippy_lints/src/unit_types/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/097f7654b55e00167bdf74fc2da73ceba1f68287/clippy_lints%2Fsrc%2Funit_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097f7654b55e00167bdf74fc2da73ceba1f68287/clippy_lints%2Fsrc%2Funit_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Fmod.rs?ref=097f7654b55e00167bdf74fc2da73ceba1f68287", "patch": "@@ -3,7 +3,7 @@ mod unit_arg;\n mod unit_cmp;\n mod utils;\n \n-use rustc_hir::{Expr, Stmt};\n+use rustc_hir::{Expr, Local};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n@@ -99,8 +99,8 @@ declare_clippy_lint! {\n declare_lint_pass!(UnitTypes => [LET_UNIT_VALUE, UNIT_CMP, UNIT_ARG]);\n \n impl LateLintPass<'_> for UnitTypes {\n-    fn check_stmt(&mut self, cx: &LateContext<'_>, stmt: &Stmt<'_>) {\n-        let_unit_value::check(cx, stmt);\n+    fn check_local(&mut self, cx: &LateContext<'_>, local: &Local<'_>) {\n+        let_unit_value::check(cx, local);\n     }\n \n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {"}, {"sha": "18c2672f8804db9f11d4a7d7d69943529cb37961", "filename": "tests/ui/let_unit.fixed", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/097f7654b55e00167bdf74fc2da73ceba1f68287/tests%2Fui%2Flet_unit.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/097f7654b55e00167bdf74fc2da73ceba1f68287/tests%2Fui%2Flet_unit.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_unit.fixed?ref=097f7654b55e00167bdf74fc2da73ceba1f68287", "patch": "@@ -1,8 +1,9 @@\n // run-rustfix\n \n+#![feature(lint_reasons)]\n #![warn(clippy::let_unit_value)]\n #![allow(clippy::no_effect)]\n-#![allow(unused_variables)]\n+#![allow(unused)]\n \n macro_rules! let_and_return {\n     ($n:expr) => {{\n@@ -113,3 +114,12 @@ fn _returns_generic() {\n         Some(_) => (),\n     };\n }\n+\n+fn attributes() {\n+    fn f() {}\n+\n+    #[allow(clippy::let_unit_value)]\n+    let _ = f();\n+    #[expect(clippy::let_unit_value)]\n+    let _ = f();\n+}"}, {"sha": "c9c4582a956e1f8c148677c7d3636ea73a9e1561", "filename": "tests/ui/let_unit.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/097f7654b55e00167bdf74fc2da73ceba1f68287/tests%2Fui%2Flet_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/097f7654b55e00167bdf74fc2da73ceba1f68287/tests%2Fui%2Flet_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_unit.rs?ref=097f7654b55e00167bdf74fc2da73ceba1f68287", "patch": "@@ -1,8 +1,9 @@\n // run-rustfix\n \n+#![feature(lint_reasons)]\n #![warn(clippy::let_unit_value)]\n #![allow(clippy::no_effect)]\n-#![allow(unused_variables)]\n+#![allow(unused)]\n \n macro_rules! let_and_return {\n     ($n:expr) => {{\n@@ -113,3 +114,12 @@ fn _returns_generic() {\n         Some(_) => (),\n     };\n }\n+\n+fn attributes() {\n+    fn f() {}\n+\n+    #[allow(clippy::let_unit_value)]\n+    let _ = f();\n+    #[expect(clippy::let_unit_value)]\n+    let _ = f();\n+}"}, {"sha": "47a2a6e3cc1c9563eebcb6fb980a6cafc830784d", "filename": "tests/ui/let_unit.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/097f7654b55e00167bdf74fc2da73ceba1f68287/tests%2Fui%2Flet_unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/097f7654b55e00167bdf74fc2da73ceba1f68287/tests%2Fui%2Flet_unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_unit.stderr?ref=097f7654b55e00167bdf74fc2da73ceba1f68287", "patch": "@@ -1,19 +1,19 @@\n error: this let-binding has unit value\n-  --> $DIR/let_unit.rs:14:5\n+  --> $DIR/let_unit.rs:15:5\n    |\n LL |     let _x = println!(\"x\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ help: omit the `let` binding: `println!(\"x\");`\n    |\n    = note: `-D clippy::let-unit-value` implied by `-D warnings`\n \n error: this let-binding has unit value\n-  --> $DIR/let_unit.rs:18:9\n+  --> $DIR/let_unit.rs:19:9\n    |\n LL |         let _a = ();\n    |         ^^^^^^^^^^^^ help: omit the `let` binding: `();`\n \n error: this let-binding has unit value\n-  --> $DIR/let_unit.rs:53:5\n+  --> $DIR/let_unit.rs:54:5\n    |\n LL | /     let _ = v\n LL | |         .into_iter()\n@@ -36,55 +36,55 @@ LL +         .unwrap();\n    |\n \n error: this let-binding has unit value\n-  --> $DIR/let_unit.rs:80:5\n+  --> $DIR/let_unit.rs:81:5\n    |\n LL |     let x: () = f(); // Lint.\n    |     ^^^^-^^^^^^^^^^^\n    |         |\n    |         help: use a wild (`_`) binding: `_`\n \n error: this let-binding has unit value\n-  --> $DIR/let_unit.rs:83:5\n+  --> $DIR/let_unit.rs:84:5\n    |\n LL |     let x: () = f2(0i32); // Lint.\n    |     ^^^^-^^^^^^^^^^^^^^^^\n    |         |\n    |         help: use a wild (`_`) binding: `_`\n \n error: this let-binding has unit value\n-  --> $DIR/let_unit.rs:85:5\n+  --> $DIR/let_unit.rs:86:5\n    |\n LL |     let _: () = f3(()); // Lint\n    |     ^^^^^^^^^^^^^^^^^^^ help: omit the `let` binding: `f3(());`\n \n error: this let-binding has unit value\n-  --> $DIR/let_unit.rs:86:5\n+  --> $DIR/let_unit.rs:87:5\n    |\n LL |     let x: () = f3(()); // Lint\n    |     ^^^^^^^^^^^^^^^^^^^ help: omit the `let` binding: `f3(());`\n \n error: this let-binding has unit value\n-  --> $DIR/let_unit.rs:88:5\n+  --> $DIR/let_unit.rs:89:5\n    |\n LL |     let _: () = f4(vec![()]); // Lint\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: omit the `let` binding: `f4(vec![()]);`\n \n error: this let-binding has unit value\n-  --> $DIR/let_unit.rs:89:5\n+  --> $DIR/let_unit.rs:90:5\n    |\n LL |     let x: () = f4(vec![()]); // Lint\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: omit the `let` binding: `f4(vec![()]);`\n \n error: this let-binding has unit value\n-  --> $DIR/let_unit.rs:98:5\n+  --> $DIR/let_unit.rs:99:5\n    |\n LL |     let x: () = if true { f() } else { f2(0) }; // Lint\n    |     ^^^^-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n    |         help: use a wild (`_`) binding: `_`\n \n error: this let-binding has unit value\n-  --> $DIR/let_unit.rs:109:5\n+  --> $DIR/let_unit.rs:110:5\n    |\n LL | /     let _: () = match Some(0) {\n LL | |         None => f2(1),"}]}