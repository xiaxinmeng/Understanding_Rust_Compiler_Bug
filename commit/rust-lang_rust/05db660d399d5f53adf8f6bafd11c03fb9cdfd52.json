{"sha": "05db660d399d5f53adf8f6bafd11c03fb9cdfd52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZGI2NjBkMzk5ZDVmNTNhZGY4ZjZiYWZkMTFjMDNmYjljZGZkNTI=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-11-25T18:36:53Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-11-29T17:07:06Z"}, "message": "remove get_named_span", "tree": {"sha": "9798dff6e9aa9c959dc8348eee7132bc1a385624", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9798dff6e9aa9c959dc8348eee7132bc1a385624"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05db660d399d5f53adf8f6bafd11c03fb9cdfd52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05db660d399d5f53adf8f6bafd11c03fb9cdfd52", "html_url": "https://github.com/rust-lang/rust/commit/05db660d399d5f53adf8f6bafd11c03fb9cdfd52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05db660d399d5f53adf8f6bafd11c03fb9cdfd52/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59a768ce14ca8b439107dce0b575ee1c36244758", "url": "https://api.github.com/repos/rust-lang/rust/commits/59a768ce14ca8b439107dce0b575ee1c36244758", "html_url": "https://github.com/rust-lang/rust/commit/59a768ce14ca8b439107dce0b575ee1c36244758"}], "stats": {"total": 122, "additions": 33, "deletions": 89}, "files": [{"sha": "b775ffdad1b55d00a4bd03de5d6c925712af367f", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 5, "deletions": 39, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/05db660d399d5f53adf8f6bafd11c03fb9cdfd52/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05db660d399d5f53adf8f6bafd11c03fb9cdfd52/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=05db660d399d5f53adf8f6bafd11c03fb9cdfd52", "patch": "@@ -13,13 +13,13 @@ use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n use rustc::mir::{Local, Body};\n use rustc::ty::subst::{SubstsRef, GenericArgKind};\n-use rustc::ty::{self, RegionKind, RegionVid, Ty, TyCtxt};\n+use rustc::ty::{self, RegionVid, Ty, TyCtxt};\n use rustc::ty::print::RegionHighlightMode;\n use rustc_index::vec::IndexVec;\n use rustc_errors::DiagnosticBuilder;\n use syntax::symbol::kw;\n use rustc_data_structures::fx::FxHashMap;\n-use syntax_pos::{Span, symbol::Symbol};\n+use syntax_pos::{Span, symbol::Symbol, DUMMY_SP};\n \n /// A name for a particular region used in emitting diagnostics. This name could be a generated\n /// name like `'1`, a name used by the user like `'a`, or a name like `'static`.\n@@ -275,7 +275,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         match error_region {\n             ty::ReEarlyBound(ebr) => {\n                 if ebr.has_name() {\n-                    let span = self.get_named_span(tcx, error_region, ebr.name);\n+                    let span = tcx.hir().span_if_local(ebr.def_id).unwrap_or(DUMMY_SP);\n                     Some(RegionName {\n                         name: ebr.name,\n                         source: RegionNameSource::NamedEarlyBoundRegion(span),\n@@ -291,9 +291,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             }),\n \n             ty::ReFree(free_region) => match free_region.bound_region {\n-                ty::BoundRegion::BrNamed(_, name) => {\n+                ty::BoundRegion::BrNamed(region_def_id, name) => {\n                     // Get the span to point to, even if we don't use the name.\n-                    let span = self.get_named_span(tcx, error_region, name);\n+                    let span = tcx.hir().span_if_local(region_def_id).unwrap_or(DUMMY_SP);\n                     debug!(\"bound region named: {:?}, is_named: {:?}\",\n                         name, free_region.bound_region.is_named());\n \n@@ -373,40 +373,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         }\n     }\n \n-    /// Gets a span of a named region to provide context for error messages that\n-    /// mention that span, for example:\n-    ///\n-    /// ```\n-    ///  |\n-    ///  | fn two_regions<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n-    ///  |                --  -- lifetime `'b` defined here\n-    ///  |                |\n-    ///  |                lifetime `'a` defined here\n-    ///  |\n-    ///  |     with_signature(cell, t, |cell, t| require(cell, t));\n-    ///  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'b` must\n-    ///  |                                                         outlive `'a`\n-    /// ```\n-    fn get_named_span(\n-        &self,\n-        tcx: TyCtxt<'tcx>,\n-        error_region: &RegionKind,\n-        name: Symbol,\n-    ) -> Span {\n-        let scope = error_region.free_region_binding_scope(tcx);\n-        let node = tcx.hir().as_local_hir_id(scope).unwrap_or(hir::DUMMY_HIR_ID);\n-\n-        let span = tcx.sess.source_map().def_span(tcx.hir().span(node));\n-        if let Some(param) = tcx.hir()\n-            .get_generics(scope)\n-            .and_then(|generics| generics.get_named(name))\n-        {\n-            param.span\n-        } else {\n-            span\n-        }\n-    }\n-\n     /// Finds an argument that contains `fr` and label it with a fully\n     /// elaborated type, returning something like `'1`. Result looks\n     /// like:"}, {"sha": "b05940fd273a146ebda42d28d66c4b7631c8f528", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/05db660d399d5f53adf8f6bafd11c03fb9cdfd52/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05db660d399d5f53adf8f6bafd11c03fb9cdfd52/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr?ref=05db660d399d5f53adf8f6bafd11c03fb9cdfd52", "patch": "@@ -10,18 +10,18 @@ error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:8:52\n    |\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n-   |                          -                         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n-   |                          |\n-   |                          let's call the lifetime of this reference `'1`\n+   |                          -         -               ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |                          |         |\n+   |                          |         let's call the lifetime of this reference `'1`\n    |                          let's call the lifetime of this reference `'2`\n \n error: lifetime may not live long enough\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:11:75\n    |\n LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                          -                                                ^^^^^^^^^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n-   |                          |\n-   |                          let's call the lifetime of this reference `'1`\n+   |                          -          -                                     ^^^^^^^^^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n+   |                          |          |\n+   |                          |          let's call the lifetime of this reference `'1`\n    |                          let's call the lifetime of this reference `'2`\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds"}, {"sha": "8dd823a2204971b127bc76106a9f44ff7303a726", "filename": "src/test/ui/self/elision/lt-ref-self-async.nll.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/05db660d399d5f53adf8f6bafd11c03fb9cdfd52/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05db660d399d5f53adf8f6bafd11c03fb9cdfd52/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr?ref=05db660d399d5f53adf8f6bafd11c03fb9cdfd52", "patch": "@@ -10,9 +10,8 @@ error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:13:9\n    |\n LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n-   |                       -\n+   |                       -         - let's call the lifetime of this reference `'1`\n    |                       |\n-   |                       let's call the lifetime of this reference `'1`\n    |                       let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n@@ -29,9 +28,8 @@ error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:19:9\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n-   |                             -\n+   |                             -         - let's call the lifetime of this reference `'1`\n    |                             |\n-   |                             let's call the lifetime of this reference `'1`\n    |                             let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n@@ -48,9 +46,8 @@ error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:23:9\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n-   |                                     -\n+   |                                     -          - let's call the lifetime of this reference `'1`\n    |                                     |\n-   |                                     let's call the lifetime of this reference `'1`\n    |                                     let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n@@ -67,9 +64,8 @@ error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:27:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n-   |                                     -\n+   |                                     -          - let's call the lifetime of this reference `'1`\n    |                                     |\n-   |                                     let's call the lifetime of this reference `'1`\n    |                                     let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n@@ -86,9 +82,8 @@ error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:31:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n-   |                                             -\n+   |                                             -           - let's call the lifetime of this reference `'1`\n    |                                             |\n-   |                                             let's call the lifetime of this reference `'1`\n    |                                             let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n@@ -105,9 +100,8 @@ error: lifetime may not live long enough\n   --> $DIR/lt-ref-self-async.rs:35:9\n    |\n LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n-   |                                         -\n+   |                                         -           - let's call the lifetime of this reference `'1`\n    |                                         |\n-   |                                         let's call the lifetime of this reference `'1`\n    |                                         let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`"}, {"sha": "768f532c18317ca4f7512e3ca5b1315d8219a19c", "filename": "src/test/ui/self/elision/ref-mut-self-async.nll.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/05db660d399d5f53adf8f6bafd11c03fb9cdfd52/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05db660d399d5f53adf8f6bafd11c03fb9cdfd52/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr?ref=05db660d399d5f53adf8f6bafd11c03fb9cdfd52", "patch": "@@ -10,9 +10,8 @@ error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:13:9\n    |\n LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n-   |                       -\n+   |                       -             - let's call the lifetime of this reference `'1`\n    |                       |\n-   |                       let's call the lifetime of this reference `'1`\n    |                       let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n@@ -29,9 +28,8 @@ error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:19:9\n    |\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n-   |                             -\n+   |                             -             - let's call the lifetime of this reference `'1`\n    |                             |\n-   |                             let's call the lifetime of this reference `'1`\n    |                             let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n@@ -48,9 +46,8 @@ error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:23:9\n    |\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n-   |                                     -\n+   |                                     -              - let's call the lifetime of this reference `'1`\n    |                                     |\n-   |                                     let's call the lifetime of this reference `'1`\n    |                                     let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n@@ -67,9 +64,8 @@ error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:27:9\n    |\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n-   |                                     -\n+   |                                     -              - let's call the lifetime of this reference `'1`\n    |                                     |\n-   |                                     let's call the lifetime of this reference `'1`\n    |                                     let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n@@ -86,9 +82,8 @@ error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:31:9\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n-   |                                             -\n+   |                                             -               - let's call the lifetime of this reference `'1`\n    |                                             |\n-   |                                             let's call the lifetime of this reference `'1`\n    |                                             let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n@@ -105,9 +100,8 @@ error: lifetime may not live long enough\n   --> $DIR/ref-mut-self-async.rs:35:9\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n-   |                                             -\n+   |                                             -               - let's call the lifetime of this reference `'1`\n    |                                             |\n-   |                                             let's call the lifetime of this reference `'1`\n    |                                             let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`"}, {"sha": "9e26e411d30bd832183f4479d449a47b8e36eac8", "filename": "src/test/ui/self/elision/ref-mut-struct-async.nll.stderr", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/05db660d399d5f53adf8f6bafd11c03fb9cdfd52/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05db660d399d5f53adf8f6bafd11c03fb9cdfd52/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr?ref=05db660d399d5f53adf8f6bafd11c03fb9cdfd52", "patch": "@@ -10,9 +10,8 @@ error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:13:9\n    |\n LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n-   |                               -\n+   |                               -               - let's call the lifetime of this reference `'1`\n    |                               |\n-   |                               let's call the lifetime of this reference `'1`\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n@@ -29,9 +28,8 @@ error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:17:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n-   |                                       -\n+   |                                       -                - let's call the lifetime of this reference `'1`\n    |                                       |\n-   |                                       let's call the lifetime of this reference `'1`\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n@@ -48,9 +46,8 @@ error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:21:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n-   |                                       -\n+   |                                       -                - let's call the lifetime of this reference `'1`\n    |                                       |\n-   |                                       let's call the lifetime of this reference `'1`\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n@@ -67,9 +64,8 @@ error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:25:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n-   |                                               -\n+   |                                               -                 - let's call the lifetime of this reference `'1`\n    |                                               |\n-   |                                               let's call the lifetime of this reference `'1`\n    |                                               let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n@@ -86,9 +82,8 @@ error: lifetime may not live long enough\n   --> $DIR/ref-mut-struct-async.rs:29:9\n    |\n LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n-   |                                               -\n+   |                                               -                 - let's call the lifetime of this reference `'1`\n    |                                               |\n-   |                                               let's call the lifetime of this reference `'1`\n    |                                               let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`"}, {"sha": "cbf051205ed969cfd9f836ca3bc030d8ccd6885b", "filename": "src/test/ui/self/elision/ref-struct-async.nll.stderr", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/05db660d399d5f53adf8f6bafd11c03fb9cdfd52/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/05db660d399d5f53adf8f6bafd11c03fb9cdfd52/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr?ref=05db660d399d5f53adf8f6bafd11c03fb9cdfd52", "patch": "@@ -10,9 +10,8 @@ error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:13:9\n    |\n LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n-   |                               -\n+   |                               -           - let's call the lifetime of this reference `'1`\n    |                               |\n-   |                               let's call the lifetime of this reference `'1`\n    |                               let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n@@ -29,9 +28,8 @@ error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:17:9\n    |\n LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n-   |                                       -\n+   |                                       -            - let's call the lifetime of this reference `'1`\n    |                                       |\n-   |                                       let's call the lifetime of this reference `'1`\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n@@ -48,9 +46,8 @@ error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:21:9\n    |\n LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n-   |                                       -\n+   |                                       -            - let's call the lifetime of this reference `'1`\n    |                                       |\n-   |                                       let's call the lifetime of this reference `'1`\n    |                                       let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n@@ -67,9 +64,8 @@ error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:25:9\n    |\n LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n-   |                                               -\n+   |                                               -             - let's call the lifetime of this reference `'1`\n    |                                               |\n-   |                                               let's call the lifetime of this reference `'1`\n    |                                               let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n@@ -86,9 +82,8 @@ error: lifetime may not live long enough\n   --> $DIR/ref-struct-async.rs:29:9\n    |\n LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n-   |                                           -\n+   |                                           -             - let's call the lifetime of this reference `'1`\n    |                                           |\n-   |                                           let's call the lifetime of this reference `'1`\n    |                                           let's call the lifetime of this reference `'2`\n LL |         f\n    |         ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`"}]}