{"sha": "87bf9e2056f8ee71c71e5f9c91afbc1fd965def8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3YmY5ZTIwNTZmOGVlNzFjNzFlNWY5YzkxYWZiYzFmZDk2NWRlZjg=", "commit": {"author": {"name": "Pawe\u0142 Romanowski", "email": "pawroman@gmail.com", "date": "2018-10-02T21:10:04Z"}, "committer": {"name": "Pawe\u0142 Romanowski", "email": "pawroman@gmail.com", "date": "2018-10-02T21:10:04Z"}, "message": "Address review comments", "tree": {"sha": "140f9cd92ccf9b196d1d9f0d317141a86734ca20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/140f9cd92ccf9b196d1d9f0d317141a86734ca20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87bf9e2056f8ee71c71e5f9c91afbc1fd965def8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87bf9e2056f8ee71c71e5f9c91afbc1fd965def8", "html_url": "https://github.com/rust-lang/rust/commit/87bf9e2056f8ee71c71e5f9c91afbc1fd965def8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87bf9e2056f8ee71c71e5f9c91afbc1fd965def8/comments", "author": {"login": "pawroman", "id": 914977, "node_id": "MDQ6VXNlcjkxNDk3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/914977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pawroman", "html_url": "https://github.com/pawroman", "followers_url": "https://api.github.com/users/pawroman/followers", "following_url": "https://api.github.com/users/pawroman/following{/other_user}", "gists_url": "https://api.github.com/users/pawroman/gists{/gist_id}", "starred_url": "https://api.github.com/users/pawroman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pawroman/subscriptions", "organizations_url": "https://api.github.com/users/pawroman/orgs", "repos_url": "https://api.github.com/users/pawroman/repos", "events_url": "https://api.github.com/users/pawroman/events{/privacy}", "received_events_url": "https://api.github.com/users/pawroman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pawroman", "id": 914977, "node_id": "MDQ6VXNlcjkxNDk3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/914977?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pawroman", "html_url": "https://github.com/pawroman", "followers_url": "https://api.github.com/users/pawroman/followers", "following_url": "https://api.github.com/users/pawroman/following{/other_user}", "gists_url": "https://api.github.com/users/pawroman/gists{/gist_id}", "starred_url": "https://api.github.com/users/pawroman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pawroman/subscriptions", "organizations_url": "https://api.github.com/users/pawroman/orgs", "repos_url": "https://api.github.com/users/pawroman/repos", "events_url": "https://api.github.com/users/pawroman/events{/privacy}", "received_events_url": "https://api.github.com/users/pawroman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7d35cc5a8ffcf74937e8c00586d97609b1095ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7d35cc5a8ffcf74937e8c00586d97609b1095ab", "html_url": "https://github.com/rust-lang/rust/commit/f7d35cc5a8ffcf74937e8c00586d97609b1095ab"}], "stats": {"total": 161, "additions": 52, "deletions": 109}, "files": [{"sha": "6eaeee5c0e28ba1c49af78a4d05e7cee6f5fa10e", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 28, "deletions": 35, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/87bf9e2056f8ee71c71e5f9c91afbc1fd965def8/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87bf9e2056f8ee71c71e5f9c91afbc1fd965def8/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=87bf9e2056f8ee71c71e5f9c91afbc1fd965def8", "patch": "@@ -317,7 +317,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             _ if self.is_range_literal(expr) => true,\n                             _ => false,\n                         };\n-                        let sugg_expr = if needs_parens { format!(\"({})\", src) } else { src };\n+                        let sugg_expr = if needs_parens {\n+                            format!(\"({})\", src)\n+                        } else {\n+                            src\n+                        };\n \n                         if let Some(sugg) = self.can_use_as_ref(expr) {\n                             return Some(sugg);\n@@ -379,67 +383,56 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         None\n     }\n \n-    // This function checks if the specified expression is a built-in range literal\n-    // (See: librustc/hir/lowering.rs::LoweringContext::lower_expr() )\n+    /// This function checks if the specified expression is a built-in range literal.\n+    /// (See: ``librustc::hir::lowering::LoweringContext::lower_expr()``).\n     fn is_range_literal(&self, expr: &hir::Expr) -> bool {\n         use hir::{Path, QPath, ExprKind, TyKind};\n \n-        // we support `::std::ops::Range` and `::std::core::Range` prefixes\n-        // (via split on \"|\")\n-        let ops_path = [\"{{root}}\", \"std|core\", \"ops\"];\n-\n+        // We support `::std::ops::Range` and `::core::ops::Range` prefixes\n         let is_range_path = |path: &Path| {\n-            let ident_names: Vec<_> = path.segments\n-                .iter()\n-                .map(|seg| seg.ident.as_str())\n-                .collect();\n-\n-            if let Some((last, preceding)) = ident_names.split_last() {\n-                last.starts_with(\"Range\") &&\n-                    preceding.len() == 3 &&\n-                    preceding.iter()\n-                        .zip(ops_path.iter())\n-                        .all(|(seg, match_seg)| {\n-                            match_seg.split(\"|\")\n-                                .into_iter()\n-                                .any(|ref spl_seg| seg == spl_seg)\n-                        })\n+            let mut segs = path.segments.iter()\n+                .map(|seg| seg.ident.as_str());\n+\n+            if let (Some(root), Some(std_core), Some(ops), Some(range), None) =\n+                (segs.next(), segs.next(), segs.next(), segs.next(), segs.next())\n+            {\n+                // \"{{root}}\" is the equivalent of `::` prefix in Path\n+                root == \"{{root}}\" && (std_core == \"std\" || std_core == \"core\")\n+                    && ops == \"ops\" && range.starts_with(\"Range\")\n             } else {\n                 false\n             }\n         };\n \n-        let is_range_struct_snippet = |span: &Span| {\n-            // Tell if expression span snippet looks like an explicit\n-            // Range struct or new() call.  This is to allow rejecting\n-            // Ranges constructed with non-literals.\n+        let is_range_literal = |span: &Span| {\n+            // Tell if expression span snippet doesn't look like an explicit\n+            // Range struct or `new()` call.  This is to allow inferring\n+            // that this is a range literal.\n             let source_map = self.tcx.sess.source_map();\n             let end_point = source_map.end_point(*span);\n \n             if let Ok(end_string) = source_map.span_to_snippet(end_point) {\n-                end_string.ends_with(\"}\") || end_string.ends_with(\")\")\n+                !(end_string.ends_with(\"}\") || end_string.ends_with(\")\"))\n             } else {\n                 false\n             }\n-\n         };\n \n         match expr.node {\n-            // all built-in range literals but `..=` and `..`\n-            // desugar to Structs, `..` desugars to its struct path\n+            // All built-in range literals but `..=` and `..` desugar to Structs\n             ExprKind::Struct(QPath::Resolved(None, ref path), _, _) |\n+            // `..` desugars to its struct path\n             ExprKind::Path(QPath::Resolved(None, ref path)) => {\n-                return is_range_path(&path) && !is_range_struct_snippet(&expr.span);\n+                return is_range_path(&path) && is_range_literal(&expr.span);\n             }\n \n-            // `..=` desugars into RangeInclusive::new(...)\n+            // `..=` desugars into `::std::ops::RangeInclusive::new(...)`\n             ExprKind::Call(ref func, _) => {\n                 if let ExprKind::Path(QPath::TypeRelative(ref ty, ref segment)) = func.node {\n                     if let TyKind::Path(QPath::Resolved(None, ref path)) = ty.node {\n-                        let calls_new = segment.ident.as_str() == \"new\";\n+                        let call_to_new = segment.ident.as_str() == \"new\";\n \n-                        return is_range_path(&path) && calls_new &&\n-                            !is_range_struct_snippet(&expr.span);\n+                        return is_range_path(&path) && is_range_literal(&expr.span) && call_to_new;\n                     }\n                 }\n             }"}, {"sha": "4d8f67182b9ace5b62fefefd7685d99534cc16aa", "filename": "src/test/ui/range/issue-54505-no-literals.fixed", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87bf9e2056f8ee71c71e5f9c91afbc1fd965def8/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/87bf9e2056f8ee71c71e5f9c91afbc1fd965def8/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.fixed?ref=87bf9e2056f8ee71c71e5f9c91afbc1fd965def8", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // run-rustfix\n \n // Regression test for changes introduced while fixing #54505"}, {"sha": "dc21dcbc2db4170aabbf0104f30e50b15f133f80", "filename": "src/test/ui/range/issue-54505-no-literals.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87bf9e2056f8ee71c71e5f9c91afbc1fd965def8/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87bf9e2056f8ee71c71e5f9c91afbc1fd965def8/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.rs?ref=87bf9e2056f8ee71c71e5f9c91afbc1fd965def8", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // run-rustfix\n \n // Regression test for changes introduced while fixing #54505"}, {"sha": "b8811c98d21bdd5c28a296b83ee51021f4b71ba7", "filename": "src/test/ui/range/issue-54505-no-literals.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/87bf9e2056f8ee71c71e5f9c91afbc1fd965def8/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87bf9e2056f8ee71c71e5f9c91afbc1fd965def8/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-literals.stderr?ref=87bf9e2056f8ee71c71e5f9c91afbc1fd965def8", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-literals.rs:26:16\n+  --> $DIR/issue-54505-no-literals.rs:16:16\n    |\n LL |     take_range(std::ops::Range { start: 0, end: 1 });\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -11,7 +11,7 @@ LL |     take_range(std::ops::Range { start: 0, end: 1 });\n               found type `std::ops::Range<{integer}>`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-literals.rs:31:16\n+  --> $DIR/issue-54505-no-literals.rs:21:16\n    |\n LL |     take_range(::std::ops::Range { start: 0, end: 1 });\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -23,7 +23,7 @@ LL |     take_range(::std::ops::Range { start: 0, end: 1 });\n               found type `std::ops::Range<{integer}>`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-literals.rs:36:16\n+  --> $DIR/issue-54505-no-literals.rs:26:16\n    |\n LL |     take_range(std::ops::RangeFrom { start: 1 });\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -35,7 +35,7 @@ LL |     take_range(std::ops::RangeFrom { start: 1 });\n               found type `std::ops::RangeFrom<{integer}>`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-literals.rs:41:16\n+  --> $DIR/issue-54505-no-literals.rs:31:16\n    |\n LL |     take_range(::std::ops::RangeFrom { start: 1 });\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -47,7 +47,7 @@ LL |     take_range(::std::ops::RangeFrom { start: 1 });\n               found type `std::ops::RangeFrom<{integer}>`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-literals.rs:46:16\n+  --> $DIR/issue-54505-no-literals.rs:36:16\n    |\n LL |     take_range(std::ops::RangeFull {});\n    |                ^^^^^^^^^^^^^^^^^^^^^^\n@@ -59,7 +59,7 @@ LL |     take_range(std::ops::RangeFull {});\n               found type `std::ops::RangeFull`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-literals.rs:51:16\n+  --> $DIR/issue-54505-no-literals.rs:41:16\n    |\n LL |     take_range(::std::ops::RangeFull {});\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -71,7 +71,7 @@ LL |     take_range(::std::ops::RangeFull {});\n               found type `std::ops::RangeFull`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-literals.rs:56:16\n+  --> $DIR/issue-54505-no-literals.rs:46:16\n    |\n LL |     take_range(std::ops::RangeInclusive::new(0, 1));\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -83,7 +83,7 @@ LL |     take_range(std::ops::RangeInclusive::new(0, 1));\n               found type `std::ops::RangeInclusive<{integer}>`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-literals.rs:61:16\n+  --> $DIR/issue-54505-no-literals.rs:51:16\n    |\n LL |     take_range(::std::ops::RangeInclusive::new(0, 1));\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -95,7 +95,7 @@ LL |     take_range(::std::ops::RangeInclusive::new(0, 1));\n               found type `std::ops::RangeInclusive<{integer}>`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-literals.rs:66:16\n+  --> $DIR/issue-54505-no-literals.rs:56:16\n    |\n LL |     take_range(std::ops::RangeTo { end: 5 });\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -107,7 +107,7 @@ LL |     take_range(std::ops::RangeTo { end: 5 });\n               found type `std::ops::RangeTo<{integer}>`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-literals.rs:71:16\n+  --> $DIR/issue-54505-no-literals.rs:61:16\n    |\n LL |     take_range(::std::ops::RangeTo { end: 5 });\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -119,7 +119,7 @@ LL |     take_range(::std::ops::RangeTo { end: 5 });\n               found type `std::ops::RangeTo<{integer}>`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-literals.rs:76:16\n+  --> $DIR/issue-54505-no-literals.rs:66:16\n    |\n LL |     take_range(std::ops::RangeToInclusive { end: 5 });\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -131,7 +131,7 @@ LL |     take_range(std::ops::RangeToInclusive { end: 5 });\n               found type `std::ops::RangeToInclusive<{integer}>`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-literals.rs:81:16\n+  --> $DIR/issue-54505-no-literals.rs:71:16\n    |\n LL |     take_range(::std::ops::RangeToInclusive { end: 5 });\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "c2b17b53ba16b83c8c9596dfd5851b2a5f944539", "filename": "src/test/ui/range/issue-54505-no-std.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87bf9e2056f8ee71c71e5f9c91afbc1fd965def8/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87bf9e2056f8ee71c71e5f9c91afbc1fd965def8/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.rs?ref=87bf9e2056f8ee71c71e5f9c91afbc1fd965def8", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // error-pattern: `#[panic_handler]` function required, but not found\n // error-pattern: language item required, but not found: `eh_personality`\n "}, {"sha": "2810a3f076d4bae51b3ee28f70e1512123550be7", "filename": "src/test/ui/range/issue-54505-no-std.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/87bf9e2056f8ee71c71e5f9c91afbc1fd965def8/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87bf9e2056f8ee71c71e5f9c91afbc1fd965def8/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.stderr?ref=87bf9e2056f8ee71c71e5f9c91afbc1fd965def8", "patch": "@@ -3,7 +3,7 @@ error: `#[panic_handler]` function required, but not found\n error: language item required, but not found: `eh_personality`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-std.rs:31:16\n+  --> $DIR/issue-54505-no-std.rs:21:16\n    |\n LL |     take_range(0..1);\n    |                ^^^^\n@@ -15,7 +15,7 @@ LL |     take_range(0..1);\n               found type `core::ops::Range<{integer}>`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-std.rs:36:16\n+  --> $DIR/issue-54505-no-std.rs:26:16\n    |\n LL |     take_range(1..);\n    |                ^^^\n@@ -27,7 +27,7 @@ LL |     take_range(1..);\n               found type `core::ops::RangeFrom<{integer}>`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-std.rs:41:16\n+  --> $DIR/issue-54505-no-std.rs:31:16\n    |\n LL |     take_range(..);\n    |                ^^\n@@ -39,7 +39,7 @@ LL |     take_range(..);\n               found type `core::ops::RangeFull`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-std.rs:46:16\n+  --> $DIR/issue-54505-no-std.rs:36:16\n    |\n LL |     take_range(0..=1);\n    |                ^^^^^\n@@ -51,7 +51,7 @@ LL |     take_range(0..=1);\n               found type `core::ops::RangeInclusive<{integer}>`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-std.rs:51:16\n+  --> $DIR/issue-54505-no-std.rs:41:16\n    |\n LL |     take_range(..5);\n    |                ^^^\n@@ -63,7 +63,7 @@ LL |     take_range(..5);\n               found type `core::ops::RangeTo<{integer}>`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-std.rs:56:16\n+  --> $DIR/issue-54505-no-std.rs:46:16\n    |\n LL |     take_range(..=42);\n    |                ^^^^^"}, {"sha": "f8298c0b5ceffeebb7a87904cf6d04bf13f7344e", "filename": "src/test/ui/range/issue-54505.fixed", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87bf9e2056f8ee71c71e5f9c91afbc1fd965def8/src%2Ftest%2Fui%2Frange%2Fissue-54505.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/87bf9e2056f8ee71c71e5f9c91afbc1fd965def8/src%2Ftest%2Fui%2Frange%2Fissue-54505.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505.fixed?ref=87bf9e2056f8ee71c71e5f9c91afbc1fd965def8", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // run-rustfix\n \n // Regression test for #54505 - range borrowing suggestion had"}, {"sha": "03673252dd3bae32fc06c27962589716369602a2", "filename": "src/test/ui/range/issue-54505.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87bf9e2056f8ee71c71e5f9c91afbc1fd965def8/src%2Ftest%2Fui%2Frange%2Fissue-54505.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87bf9e2056f8ee71c71e5f9c91afbc1fd965def8/src%2Ftest%2Fui%2Frange%2Fissue-54505.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505.rs?ref=87bf9e2056f8ee71c71e5f9c91afbc1fd965def8", "patch": "@@ -1,13 +1,3 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // run-rustfix\n \n // Regression test for #54505 - range borrowing suggestion had"}, {"sha": "d6e1fb0cef23860b3a65b5e46477a22ce14489ae", "filename": "src/test/ui/range/issue-54505.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/87bf9e2056f8ee71c71e5f9c91afbc1fd965def8/src%2Ftest%2Fui%2Frange%2Fissue-54505.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87bf9e2056f8ee71c71e5f9c91afbc1fd965def8/src%2Ftest%2Fui%2Frange%2Fissue-54505.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505.stderr?ref=87bf9e2056f8ee71c71e5f9c91afbc1fd965def8", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-54505.rs:24:16\n+  --> $DIR/issue-54505.rs:14:16\n    |\n LL |     take_range(0..1);\n    |                ^^^^\n@@ -11,7 +11,7 @@ LL |     take_range(0..1);\n               found type `std::ops::Range<{integer}>`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505.rs:29:16\n+  --> $DIR/issue-54505.rs:19:16\n    |\n LL |     take_range(1..);\n    |                ^^^\n@@ -23,7 +23,7 @@ LL |     take_range(1..);\n               found type `std::ops::RangeFrom<{integer}>`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505.rs:34:16\n+  --> $DIR/issue-54505.rs:24:16\n    |\n LL |     take_range(..);\n    |                ^^\n@@ -35,7 +35,7 @@ LL |     take_range(..);\n               found type `std::ops::RangeFull`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505.rs:39:16\n+  --> $DIR/issue-54505.rs:29:16\n    |\n LL |     take_range(0..=1);\n    |                ^^^^^\n@@ -47,7 +47,7 @@ LL |     take_range(0..=1);\n               found type `std::ops::RangeInclusive<{integer}>`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505.rs:44:16\n+  --> $DIR/issue-54505.rs:34:16\n    |\n LL |     take_range(..5);\n    |                ^^^\n@@ -59,7 +59,7 @@ LL |     take_range(..5);\n               found type `std::ops::RangeTo<{integer}>`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505.rs:49:16\n+  --> $DIR/issue-54505.rs:39:16\n    |\n LL |     take_range(..=42);\n    |                ^^^^^"}]}