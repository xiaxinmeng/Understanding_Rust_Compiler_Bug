{"sha": "a9f55029b9db3bcd439d31c5007785299f7d4025", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZjU1MDI5YjlkYjNiY2Q0MzlkMzFjNTAwNzc4NTI5OWY3ZDQwMjU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-27T17:26:15Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-27T17:26:15Z"}, "message": "introduce known names", "tree": {"sha": "9f6b93060cc56d5c96f4c61d5502b7267a626827", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f6b93060cc56d5c96f4c61d5502b7267a626827"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9f55029b9db3bcd439d31c5007785299f7d4025", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9f55029b9db3bcd439d31c5007785299f7d4025", "html_url": "https://github.com/rust-lang/rust/commit/a9f55029b9db3bcd439d31c5007785299f7d4025", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9f55029b9db3bcd439d31c5007785299f7d4025/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d963042ca9da93be8d5922ce46ea26dc6a79c929", "url": "https://api.github.com/repos/rust-lang/rust/commits/d963042ca9da93be8d5922ce46ea26dc6a79c929", "html_url": "https://github.com/rust-lang/rust/commit/d963042ca9da93be8d5922ce46ea26dc6a79c929"}], "stats": {"total": 100, "additions": 71, "deletions": 29}, "files": [{"sha": "5bbb09c01c9fe58765fbf629b4b31b1e8391a3e4", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9f55029b9db3bcd439d31c5007785299f7d4025/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f55029b9db3bcd439d31c5007785299f7d4025/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=a9f55029b9db3bcd439d31c5007785299f7d4025", "patch": "@@ -38,7 +38,7 @@ use ra_db::{LocationIntener, SourceRootId, FileId, Cancelable};\n use crate::{\n     db::HirDatabase,\n     arena::{Arena, Id},\n-    name::AsName,\n+    name::{AsName, KnownName},\n };\n \n pub use self::{"}, {"sha": "cdad31be7b10c20084de4bcb9bd305fecba1b795", "filename": "crates/ra_hir/src/name.rs", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a9f55029b9db3bcd439d31c5007785299f7d4025/crates%2Fra_hir%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f55029b9db3bcd439d31c5007785299f7d4025/crates%2Fra_hir%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fname.rs?ref=a9f55029b9db3bcd439d31c5007785299f7d4025", "patch": "@@ -17,9 +17,25 @@ impl fmt::Display for Name {\n }\n \n impl Name {\n-    // TODO: get rid of this?\n-    pub(crate) fn as_str(&self) -> &str {\n-        self.text.as_str()\n+    pub(crate) fn as_known_name(&self) -> Option<KnownName> {\n+        let name = match self.text.as_str() {\n+            \"isize\" => KnownName::Isize,\n+            \"i8\" => KnownName::I8,\n+            \"i16\" => KnownName::I16,\n+            \"i32\" => KnownName::I32,\n+            \"i64\" => KnownName::I64,\n+            \"i128\" => KnownName::I128,\n+            \"usize\" => KnownName::Usize,\n+            \"u8\" => KnownName::U8,\n+            \"u16\" => KnownName::U16,\n+            \"u32\" => KnownName::U32,\n+            \"u64\" => KnownName::U64,\n+            \"u128\" => KnownName::U128,\n+            \"f32\" => KnownName::F32,\n+            \"f64\" => KnownName::F64,\n+            _ => return None,\n+        };\n+        Some(name)\n     }\n \n     #[cfg(not(test))]\n@@ -54,3 +70,28 @@ impl AsName for ra_db::Dependency {\n         Name::new(self.name.clone())\n     }\n }\n+\n+// Ideally, should be replaced with\n+// ```\n+// const ISIZE: Name = Name::new(\"isize\")\n+// ```\n+// but const-fn is not that powerful yet.\n+#[derive(Debug)]\n+pub(crate) enum KnownName {\n+    Isize,\n+    I8,\n+    I16,\n+    I32,\n+    I64,\n+    I128,\n+\n+    Usize,\n+    U8,\n+    U16,\n+    U32,\n+    U64,\n+    U128,\n+\n+    F32,\n+    F64,\n+}"}, {"sha": "ad097d1f139dc5f385a750a40bb4211d77d26a80", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a9f55029b9db3bcd439d31c5007785299f7d4025/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f55029b9db3bcd439d31c5007785299f7d4025/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=a9f55029b9db3bcd439d31c5007785299f7d4025", "patch": "@@ -95,7 +95,7 @@ pub enum Ty {\n     Tuple(Vec<Ty>),\n \n     // The projection of an associated type.  For example,\n-    // `<T as Trait<..>>::N`.\n+    // `<T as Trait<..>>::N`.pub\n     // Projection(ProjectionTy),\n \n     // Opaque (`impl Trait`) type found in a return type.\n@@ -180,12 +180,11 @@ impl Ty {\n         path: &Path,\n     ) -> Cancelable<Self> {\n         if let Some(name) = path.as_ident() {\n-            let name = name.as_str(); // :-(\n-            if let Some(int_ty) = primitive::IntTy::from_string(name) {\n+            if let Some(int_ty) = primitive::IntTy::from_name(name) {\n                 return Ok(Ty::Int(int_ty));\n-            } else if let Some(uint_ty) = primitive::UintTy::from_string(name) {\n+            } else if let Some(uint_ty) = primitive::UintTy::from_name(name) {\n                 return Ok(Ty::Uint(uint_ty));\n-            } else if let Some(float_ty) = primitive::FloatTy::from_string(name) {\n+            } else if let Some(float_ty) = primitive::FloatTy::from_name(name) {\n                 return Ok(Ty::Float(float_ty));\n             }\n         }"}, {"sha": "498d42d52ed8c64a10dd3e676a5b7ff7149ed1d9", "filename": "crates/ra_hir/src/ty/primitive.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a9f55029b9db3bcd439d31c5007785299f7d4025/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f55029b9db3bcd439d31c5007785299f7d4025/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fprimitive.rs?ref=a9f55029b9db3bcd439d31c5007785299f7d4025", "patch": "@@ -1,5 +1,7 @@\n use std::fmt;\n \n+use crate::{Name, KnownName};\n+\n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Copy)]\n pub enum IntTy {\n     Isize,\n@@ -34,14 +36,14 @@ impl IntTy {\n         }\n     }\n \n-    pub fn from_string(s: &str) -> Option<IntTy> {\n-        match s {\n-            \"isize\" => Some(IntTy::Isize),\n-            \"i8\" => Some(IntTy::I8),\n-            \"i16\" => Some(IntTy::I16),\n-            \"i32\" => Some(IntTy::I32),\n-            \"i64\" => Some(IntTy::I64),\n-            \"i128\" => Some(IntTy::I128),\n+    pub fn from_name(name: &Name) -> Option<IntTy> {\n+        match name.as_known_name()? {\n+            KnownName::Isize => Some(IntTy::Isize),\n+            KnownName::I8 => Some(IntTy::I8),\n+            KnownName::I16 => Some(IntTy::I16),\n+            KnownName::I32 => Some(IntTy::I32),\n+            KnownName::I64 => Some(IntTy::I64),\n+            KnownName::I128 => Some(IntTy::I128),\n             _ => None,\n         }\n     }\n@@ -69,14 +71,14 @@ impl UintTy {\n         }\n     }\n \n-    pub fn from_string(s: &str) -> Option<UintTy> {\n-        match s {\n-            \"usize\" => Some(UintTy::Usize),\n-            \"u8\" => Some(UintTy::U8),\n-            \"u16\" => Some(UintTy::U16),\n-            \"u32\" => Some(UintTy::U32),\n-            \"u64\" => Some(UintTy::U64),\n-            \"u128\" => Some(UintTy::U128),\n+    pub fn from_name(name: &Name) -> Option<UintTy> {\n+        match name.as_known_name()? {\n+            KnownName::Usize => Some(UintTy::Usize),\n+            KnownName::U8 => Some(UintTy::U8),\n+            KnownName::U16 => Some(UintTy::U16),\n+            KnownName::U32 => Some(UintTy::U32),\n+            KnownName::U64 => Some(UintTy::U64),\n+            KnownName::U128 => Some(UintTy::U128),\n             _ => None,\n         }\n     }\n@@ -120,10 +122,10 @@ impl FloatTy {\n         }\n     }\n \n-    pub fn from_string(s: &str) -> Option<FloatTy> {\n-        match s {\n-            \"f32\" => Some(FloatTy::F32),\n-            \"f64\" => Some(FloatTy::F64),\n+    pub fn from_name(name: &Name) -> Option<FloatTy> {\n+        match name.as_known_name()? {\n+            KnownName::F32 => Some(FloatTy::F32),\n+            KnownName::F64 => Some(FloatTy::F64),\n             _ => None,\n         }\n     }"}]}