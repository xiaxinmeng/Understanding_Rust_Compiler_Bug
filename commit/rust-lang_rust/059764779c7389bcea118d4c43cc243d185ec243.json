{"sha": "059764779c7389bcea118d4c43cc243d185ec243", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1OTc2NDc3OWM3Mzg5YmNlYTExOGQ0YzQzY2MyNDNkMTg1ZWMyNDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-22T12:30:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-22T12:30:50Z"}, "message": "auto merge of #5493 : apasel422/rust/leibniz, r=bstrie\n\nCloses #5411.", "tree": {"sha": "84c32ee97cbc8fc5e1a709aced4a2f29e046c3fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84c32ee97cbc8fc5e1a709aced4a2f29e046c3fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/059764779c7389bcea118d4c43cc243d185ec243", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/059764779c7389bcea118d4c43cc243d185ec243", "html_url": "https://github.com/rust-lang/rust/commit/059764779c7389bcea118d4c43cc243d185ec243", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/059764779c7389bcea118d4c43cc243d185ec243/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9584c60871dc712f95a2f37f24853cf3faf6191e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9584c60871dc712f95a2f37f24853cf3faf6191e", "html_url": "https://github.com/rust-lang/rust/commit/9584c60871dc712f95a2f37f24853cf3faf6191e"}, {"sha": "999e7ef9a97431d2c40ebe09cf27ea7a3e80de40", "url": "https://api.github.com/repos/rust-lang/rust/commits/999e7ef9a97431d2c40ebe09cf27ea7a3e80de40", "html_url": "https://github.com/rust-lang/rust/commit/999e7ef9a97431d2c40ebe09cf27ea7a3e80de40"}], "stats": {"total": 549, "additions": 297, "deletions": 252}, "files": [{"sha": "55d9f467f79e2db4e1bcd786887799586372d6dd", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -10,7 +10,7 @@\n \n use core::prelude::*;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum mode {\n     mode_compile_fail,\n     mode_run_fail,"}, {"sha": "fc8ed5d70c33d2c49da4074b22ab410c90f1acee", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -37,7 +37,7 @@ pub trait Eq {\n     pure fn ne(&self, other: &Self) -> bool;\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Ordering { Less, Equal, Greater }\n \n /// Trait for types that form a total order"}, {"sha": "a036c19c1580e7aa9caf386dc6208bd11524a5e6", "filename": "src/libcore/either.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibcore%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibcore%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Feither.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -17,7 +17,7 @@ use result;\n use vec;\n \n /// The either type\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Either<T, U> {\n     Left(T),\n     Right(U)"}, {"sha": "94e06924e6957ef12e98f05d91d0a8d20cf152a8", "filename": "src/libcore/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -630,7 +630,7 @@ pub pure fn with_str_reader<T>(s: &str, f: &fn(@Reader) -> T) -> T {\n pub enum FileFlag { Append, Create, Truncate, NoFlag, }\n \n // What type of writer are we?\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum WriterType { Screen, File }\n \n // FIXME (#2004): Seekable really should be orthogonal."}, {"sha": "c12b78b393f65f39183f6f97356d842e75d9f63d", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -52,7 +52,7 @@ use iter::{BaseIter, MutableIter};\n #[cfg(test)] use str;\n \n /// The option type\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Option<T> {\n     None,\n     Some(T),"}, {"sha": "df4a3fdfb9e4a83ece928281f8518301d6a3de02", "filename": "src/libcore/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -20,7 +20,7 @@ use option::{None, Option, Some};\n use str;\n use to_str::ToStr;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct WindowsPath {\n     host: Option<~str>,\n     device: Option<~str>,\n@@ -32,7 +32,7 @@ pub pure fn WindowsPath(s: &str) -> WindowsPath {\n     GenericPath::from_str(s)\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct PosixPath {\n     is_absolute: bool,\n     components: ~[~str],"}, {"sha": "18594a73d65ede8cdce8391221ef2d7fd77fa2ab", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -20,7 +20,7 @@ use option::{None, Option, Some};\n use vec;\n \n /// The result type\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Result<T, U> {\n     /// Contains the successful result value\n     Ok(T),"}, {"sha": "1ef2316ec07afecb6acf68509ca678e91902ac87", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -50,13 +50,13 @@ pub mod rt;\n pub mod spawn;\n \n /// A handle to a scheduler\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Scheduler {\n     SchedulerHandle(sched_id)\n }\n \n /// A handle to a task\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Task {\n     TaskHandle(task_id)\n }\n@@ -88,7 +88,7 @@ impl Eq for TaskResult {\n }\n \n /// Scheduler modes\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum SchedMode {\n     /// Run task on the default scheduler\n     DefaultScheduler,"}, {"sha": "28f810c3a28710c8fa1c93128ab311ed634ad919", "filename": "src/libcore/unstable/extfmt.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibcore%2Funstable%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibcore%2Funstable%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fextfmt.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -97,13 +97,13 @@ pub mod ct {\n     use prelude::*;\n     use str;\n \n-    #[deriving_eq]\n+    #[deriving(Eq)]\n     pub enum Signedness { Signed, Unsigned, }\n \n-    #[deriving_eq]\n+    #[deriving(Eq)]\n     pub enum Caseness { CaseUpper, CaseLower, }\n \n-    #[deriving_eq]\n+    #[deriving(Eq)]\n     pub enum Ty {\n         TyBool,\n         TyStr,\n@@ -116,7 +116,7 @@ pub mod ct {\n         TyPoly,\n     }\n \n-    #[deriving_eq]\n+    #[deriving(Eq)]\n     pub enum Flag {\n         FlagLeftJustify,\n         FlagLeftZeroPad,\n@@ -125,15 +125,15 @@ pub mod ct {\n         FlagAlternate,\n     }\n \n-    #[deriving_eq]\n+    #[deriving(Eq)]\n     pub enum Count {\n         CountIs(uint),\n         CountIsParam(uint),\n         CountIsNextParam,\n         CountImplied,\n     }\n \n-    #[deriving_eq]\n+    #[deriving(Eq)]\n     struct Parsed<T> {\n         val: T,\n         next: uint\n@@ -146,7 +146,7 @@ pub mod ct {\n     }\n \n     // A formatted conversion from an expression to a string\n-    #[deriving_eq]\n+    #[deriving(Eq)]\n     pub struct Conv {\n         param: Option<uint>,\n         flags: ~[Flag],\n@@ -156,7 +156,7 @@ pub mod ct {\n     }\n \n     // A fragment of the output sequence\n-    #[deriving_eq]\n+    #[deriving(Eq)]\n     pub enum Piece { PieceString(~str), PieceConv(Conv), }\n \n     pub type ErrorFn = @fn(&str) -> !;\n@@ -596,7 +596,7 @@ pub mod rt {\n             };\n     }\n \n-    #[deriving_eq]\n+    #[deriving(Eq)]\n     pub enum PadMode { PadSigned, PadUnsigned, PadNozero, PadFloat }\n \n     pub fn pad(cv: Conv, s: ~str, mode: PadMode) -> ~str {"}, {"sha": "21015a767b7154bb84fa7e10cc27ac515e7f3747", "filename": "src/libfuzzer/fuzzer.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibfuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibfuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rc?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -39,7 +39,7 @@ use syntax::parse;\n use syntax::print::pprust;\n use syntax::diagnostic;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum test_mode { tm_converge, tm_run, }\n \n pub struct Context { mode: test_mode } // + rng"}, {"sha": "5f9a3e606f201c086b2630fd24a557a282aff450", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -38,7 +38,7 @@ use syntax::ast_map::{path, path_mod, path_name};\n use syntax::attr;\n use syntax::print::pprust;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum output_type {\n     output_type_none,\n     output_type_bitcode,"}, {"sha": "a4fdd7f1b52498efa87bbabbcd85ae3b437142e4", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -161,7 +161,7 @@ pub fn parse_input(sess: Session, +cfg: ast::crate_cfg, input: input)\n     }\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum compile_upto {\n     cu_parse,\n     cu_expand,"}, {"sha": "caf4689688b103a32b23855127f4b83f76c7f946", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -27,10 +27,10 @@ use syntax::parse::ParseSess;\n use syntax::{ast, codemap};\n use syntax;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum os { os_win32, os_macos, os_linux, os_android, os_freebsd, }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum arch { arch_x86, arch_x86_64, arch_arm, arch_mips, }\n \n pub enum crate_type { bin_crate, lib_crate, unknown_crate, }\n@@ -104,7 +104,7 @@ pub fn debugging_opts_map() -> ~[(~str, ~str, uint)] {\n     ]\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum OptLevel {\n     No, // -O0\n     Less, // -O1"}, {"sha": "5cdfe6a49f723ca5529dc6e067288495bed56461", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -127,7 +127,7 @@ pub enum RealPredicate {\n \n // enum for the LLVM TypeKind type - must stay in sync with the def of\n // LLVMTypeKind in llvm/include/llvm-c/Core.h\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum TypeKind {\n     Void      = 0,\n     Half      = 1,"}, {"sha": "655bfc4446ec8beca78625e30e2b1d2247d72c19", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -93,7 +93,7 @@ fn lookup_item(item_id: int, data: @~[u8]) -> ebml::Doc {\n     }\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n enum Family {\n     Const,                 // c\n     Fn,                    // f"}, {"sha": "6dfcf6ddf916829163dcc906053f7f616150e0f6", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -51,7 +51,7 @@ struct CheckLoanCtxt {\n }\n \n // if we are enforcing purity, why are we doing so?\n-#[deriving_eq]\n+#[deriving(Eq)]\n enum purity_cause {\n     // enforcing purity because fn was declared pure:\n     pc_pure_fn,\n@@ -80,7 +80,7 @@ pub fn check_loans(bccx: @BorrowckCtxt,\n     visit::visit_crate(*crate, clcx, vt);\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n enum assignment_type {\n     at_straight_up,\n     at_swap"}, {"sha": "daa365aade1252e9df3070b9ce64e56c326a9b56", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -340,7 +340,7 @@ pub type root_map = HashMap<root_map_key, RootInfo>;\n // if you have an expression `x.f` and x has type ~@T, we could add an\n // entry {id:x, derefs:0} to refer to `x` itself, `{id:x, derefs:1}`\n // to refer to the deref of the unique pointer, and so on.\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct root_map_key {\n     id: ast::node_id,\n     derefs: uint\n@@ -355,7 +355,7 @@ pub type mutbl_map = HashMap<ast::node_id, ()>;\n pub type write_guard_map = HashMap<root_map_key, ()>;\n \n // Errors that can occur\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum bckerr_code {\n     err_mut_uniq,\n     err_mut_variant,\n@@ -367,7 +367,7 @@ pub enum bckerr_code {\n \n // Combination of an error code and the categorization of the expression\n // that caused it\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct bckerr {\n     cmt: cmt,\n     code: bckerr_code\n@@ -382,7 +382,7 @@ pub enum MoveError {\n // shorthand for something that fails with `bckerr` or succeeds with `T`\n pub type bckres<T> = Result<T, bckerr>;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum LoanKind {\n     TotalFreeze,   // Entire path is frozen   (borrowed as &T)\n     PartialFreeze, // Some subpath is frozen  (borrowed as &T)"}, {"sha": "ddc00000c6b4f5fa6086c4fb35983b90e805562c", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -183,7 +183,7 @@ pub type matrix = ~[~[@pat]];\n \n pub enum useful { useful(ty::t, ctor), useful_, not_useful }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum ctor {\n     single,\n     variant(def_id),"}, {"sha": "7e0a36be0a0209e1f47b315585e0fa5aed3c5d46", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -240,7 +240,7 @@ pub fn process_crate(crate: @ast::crate,\n \n // FIXME (#33): this doesn't handle big integer/float literals correctly\n // (nor does the rest of our literal handling).\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum const_val {\n     const_float(f64),\n     const_int(i64),"}, {"sha": "c95ec0f30831d76493ed854bb7fb603b8de62ac2", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -60,7 +60,7 @@ use syntax::{ast, ast_util, visit};\n  * process.\n  */\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum lint {\n     ctypes,\n     unused_imports,\n@@ -99,7 +99,7 @@ pub fn level_to_str(lv: level) -> &'static str {\n     }\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum level {\n     allow, warn, deny, forbid\n }"}, {"sha": "d85570444d825862ae113aa25e85f1533f3a0249", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -60,7 +60,7 @@ use syntax::ast;\n use syntax::codemap::span;\n use syntax::print::pprust;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum categorization {\n     cat_rvalue,                     // result of eval'ing some misc expr\n     cat_special(special_kind),      //\n@@ -75,7 +75,7 @@ pub enum categorization {\n }\n \n // different kinds of pointers:\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum ptr_kind {\n     uniq_ptr,\n     gc_ptr(ast::mutability),\n@@ -85,7 +85,7 @@ pub enum ptr_kind {\n \n // I am coining the term \"components\" to mean \"pieces of a data\n // structure accessible without a dereference\":\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum comp_kind {\n     comp_tuple,                  // elt in a tuple\n     comp_anon_field,             // anonymous field (in e.g.\n@@ -98,15 +98,15 @@ pub enum comp_kind {\n }\n \n // different kinds of expressions we might evaluate\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum special_kind {\n     sk_method,\n     sk_static_item,\n     sk_implicit_self,   // old by-reference `self`\n     sk_heap_upvar\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum MutabilityCategory {\n     McImmutable, // Immutable.\n     McReadOnly,  // Read-only (`const`)\n@@ -119,7 +119,7 @@ pub enum MutabilityCategory {\n // which the value is stored.\n //\n // note: cmt stands for \"categorized mutable type\".\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct cmt_ {\n     id: ast::node_id,          // id of expr/pat producing this value\n     span: span,                // span of same expr/pat\n@@ -134,7 +134,7 @@ pub type cmt = @cmt_;\n // a loan path is like a category, but it exists only when the data is\n // interior to the stack frame.  loan paths are used as the key to a\n // map indicating what is borrowed at any point in time.\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum loan_path {\n     lp_local(ast::node_id),\n     lp_arg(ast::node_id),"}, {"sha": "10838a7a8dc2c1a7ec7c20750050f048359fdb9b", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -389,7 +389,7 @@ pub fn resolve_crate(sess: Session,\n \n pub type region_paramd_items = HashMap<ast::node_id, region_variance>;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct region_dep {\n     ambient_variance: region_variance,\n     id: ast::node_id"}, {"sha": "1d3a0f8b4b63da32f8a7060370d0d6b2df3126bc", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -122,7 +122,7 @@ pub struct Export2 {\n     reexport: bool,     // Whether this is a reexport.\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum PatternBindingMode {\n     RefutableMode,\n     LocalIrrefutableMode,\n@@ -166,7 +166,7 @@ pub enum NameDefinition {\n \n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Mutability {\n     Mutable,\n     Immutable\n@@ -179,7 +179,7 @@ pub enum SelfBinding {\n \n pub type ResolveVisitor = vt<()>;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum ImportDirectiveNS {\n     TypeNSOnly,\n     AnyNS\n@@ -271,7 +271,7 @@ pub enum MethodSort {\n // FIXME #4947: The X-ray flag is kind of questionable in the first\n // place. It might be better to introduce an expr_xray_path instead.\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum XrayFlag {\n     NoXray,     //< Private items cannot be accessed.\n     Xray        //< Private items can be accessed.\n@@ -292,13 +292,13 @@ pub enum ModulePrefixResult {\n     PrefixFound(@mut Module, uint)\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum AllowCapturingSelfFlag {\n     AllowCapturingSelf,         //< The \"self\" definition can be captured.\n     DontAllowCapturingSelf,     //< The \"self\" definition cannot be captured.\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n enum NameSearchType {\n     SearchItemsAndPublicImports,    //< Search items and public imports.\n     SearchItemsAndAllImports,       //< Search items and all imports.\n@@ -312,7 +312,7 @@ pub enum BareIdentifierPatternResolution {\n \n // Specifies how duplicates should be handled when adding a child item if\n // another item exists with the same name in some namespace.\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum DuplicateCheckingMode {\n     ForbidDuplicateModules,\n     ForbidDuplicateTypes,"}, {"sha": "a529fd669394ae5a1a66058de4b9c1a48fac597d", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -1037,7 +1037,7 @@ pub fn pick_col(m: &[@Match]) -> uint {\n     return best_col;\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum branch_kind { no_branch, single, switch, compare, compare_vec_len, }\n \n // Compiles a comparison between two things."}, {"sha": "112d42d8f57e665e9539e4011334073c83507fb6", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -335,14 +335,14 @@ pub fn warn_not_to_commit(ccx: @CrateContext, msg: &str) {\n }\n \n // Heap selectors. Indicate which heap something should go on.\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum heap {\n     heap_managed,\n     heap_managed_unique,\n     heap_exchange,\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum cleantype {\n     normal_exit_only,\n     normal_exit_and_unwind\n@@ -1270,7 +1270,7 @@ pub fn is_undef(val: ValueRef) -> bool {\n }\n \n // Used to identify cached monomorphized functions and vtables\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum mono_param_id {\n     mono_precise(ty::t, Option<~[mono_id]>),\n     mono_any,\n@@ -1280,7 +1280,7 @@ pub enum mono_param_id {\n               datum::DatumMode),\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct mono_id_ {\n     def: ast::def_id,\n     params: ~[mono_param_id],"}, {"sha": "08ed83a9634bb3587bf229a2453ab96a7983d681", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -110,7 +110,7 @@ use core::uint;\n use syntax::ast;\n use syntax::parse::token::special_idents;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum CopyAction {\n     INIT,\n     DROP_EXISTING\n@@ -171,7 +171,7 @@ impl to_bytes::IterBytes for DatumMode {\n }\n \n /// See `Datum cleanup styles` section at the head of this module.\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum DatumCleanup {\n     RevokeClean,\n     ZeroMem"}, {"sha": "065942b8fe63b35ac442c14c9b5abf8840f747ce", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -54,13 +54,13 @@ use syntax;\n \n // Note: after typeck, you should use resolved_mode() to convert this mode\n // into an rmode, which will take into account the results of mode inference.\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct arg {\n     mode: ast::mode,\n     ty: t\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct field {\n     ident: ast::ident,\n     mt: mt\n@@ -84,7 +84,7 @@ pub struct mt {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum vstore {\n     vstore_fixed(uint),\n     vstore_uniq,\n@@ -94,7 +94,7 @@ pub enum vstore {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum TraitStore {\n     BareTraitStore,             // a plain trait without a sigil\n     BoxTraitStore,              // @Trait\n@@ -111,7 +111,7 @@ pub struct field_ty {\n \n // Contains information needed to resolve types and (in the future) look up\n // the types of AST nodes.\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct creader_cache_key {\n     cnum: int,\n     pos: uint,\n@@ -131,7 +131,7 @@ struct intern_key {\n     o_def_id: Option<ast::def_id>\n }\n \n-// NB: Do not replace this with #[deriving_eq]. The automatically-derived\n+// NB: Do not replace this with #[deriving(Eq)]. The automatically-derived\n // implementation will not recurse through sty and you will get stack\n // exhaustion.\n impl cmp::Eq for intern_key {\n@@ -359,14 +359,14 @@ pub pure fn type_has_regions(t: t) -> bool {\n pub pure fn type_def_id(t: t) -> Option<ast::def_id> { get(t).o_def_id }\n pub pure fn type_id(t: t) -> uint { get(t).id }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct BareFnTy {\n     purity: ast::purity,\n     abi: Abi,\n     sig: FnSig\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct ClosureTy {\n     purity: ast::purity,\n     sigil: ast::Sigil,\n@@ -381,7 +381,7 @@ pub struct ClosureTy {\n  *\n  * - `inputs` is the list of arguments and their modes.\n  * - `output` is the return type. */\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct FnSig {\n     inputs: ~[arg],\n     output: t\n@@ -400,7 +400,7 @@ impl to_bytes::IterBytes for ClosureTy {\n     }\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct param_ty {\n     idx: uint,\n     def_id: def_id\n@@ -489,7 +489,7 @@ type opt_region = Option<Region>;\n  * - `self_ty` is the type to which `self` should be remapped, if any.  The\n  *   `self` type is rather funny in that it can only appear on traits and is\n  *   always substituted away to the implementing type for a trait. */\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct substs {\n     self_r: opt_region,\n     self_ty: Option<ty::t>,\n@@ -498,7 +498,7 @@ pub struct substs {\n \n // NB: If you change this, you'll probably want to change the corresponding\n // AST structure in libsyntax/ast.rs as well.\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum sty {\n     ty_nil,\n     ty_bot,\n@@ -535,7 +535,7 @@ pub enum sty {\n     ty_unboxed_vec(mt),\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum IntVarValue {\n     IntType(ast::int_ty),\n     UintType(ast::uint_ty),\n@@ -592,23 +592,23 @@ pub enum param_bound {\n     bound_trait(t),\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct TyVid(uint);\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct IntVid(uint);\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct FloatVid(uint);\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n #[auto_encode]\n #[auto_decode]\n pub struct RegionVid {\n     id: uint\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum InferTy {\n     TyVar(TyVid),\n     IntVar(IntVid),"}, {"sha": "2973492cac4b930cffa6dc34b8fdd97c04ccb641", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -105,13 +105,13 @@ use syntax::ast::{m_const, m_mutbl, m_imm};\n use syntax::ast;\n use syntax::ast_map;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum CheckTraitsFlag {\n     CheckTraitsOnly,\n     CheckTraitsAndInherentMethods,\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum AutoderefReceiverFlag {\n     AutoderefReceiver,\n     DontAutoderefReceiver,"}, {"sha": "df309bcec2fa2b22fc5156a116590ab68cfaace1", "filename": "src/librustc/middle/typeck/infer/region_inference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -1175,10 +1175,10 @@ priv impl RegionVarBindings {\n \n // ______________________________________________________________________\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n enum Direction { Incoming = 0, Outgoing = 1 }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n enum Classification { Expanding, Contracting }\n \n enum GraphNodeValue { NoValue, Value(Region), ErrorValue }"}, {"sha": "60248687f3f98caeb20be3bf89c75413ed9ccac9", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -286,7 +286,7 @@ pub fn run_compiler(args: &~[~str], demitter: diagnostic::Emitter) {\n     compile_input(sess, cfg, input, &odir, &ofile);\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum monitor_msg {\n     fatal,\n     done,"}, {"sha": "43172fd22c0c3f5cef054cf336ccc7e18dbb6176", "filename": "src/librustdoc/doc.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibrustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoc.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -19,18 +19,18 @@ use core::vec;\n \n pub type AstId = int;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct Doc {\n     pages: ~[Page]\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Page {\n     CratePage(CrateDoc),\n     ItemPage(ItemTag)\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Implementation {\n     Required,\n     Provided,\n@@ -40,7 +40,7 @@ pub enum Implementation {\n  * Most rustdocs can be parsed into 'sections' according to their markdown\n  * headers\n  */\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct Section {\n     header: ~str,\n     body: ~str\n@@ -49,12 +49,12 @@ pub struct Section {\n // FIXME (#2596): We currently give topmod the name of the crate.  There\n // would probably be fewer special cases if the crate had its own name\n // and topmod's name was the empty string.\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct CrateDoc {\n     topmod: ModDoc\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum ItemTag {\n     ModTag(ModDoc),\n     NmodTag(NmodDoc),\n@@ -67,7 +67,7 @@ pub enum ItemTag {\n     StructTag(StructDoc)\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct ItemDoc {\n     id: AstId,\n     name: ~str,\n@@ -79,20 +79,20 @@ pub struct ItemDoc {\n     reexport: bool\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct SimpleItemDoc {\n     item: ItemDoc,\n     sig: Option<~str>\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct ModDoc {\n     item: ItemDoc,\n     items: ~[ItemTag],\n     index: Option<Index>\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct NmodDoc {\n     item: ItemDoc,\n     fns: ~[FnDoc],\n@@ -103,26 +103,26 @@ pub type ConstDoc = SimpleItemDoc;\n \n pub type FnDoc = SimpleItemDoc;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct EnumDoc {\n     item: ItemDoc,\n     variants: ~[VariantDoc]\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct VariantDoc {\n     name: ~str,\n     desc: Option<~str>,\n     sig: Option<~str>\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct TraitDoc {\n     item: ItemDoc,\n     methods: ~[MethodDoc]\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct MethodDoc {\n     name: ~str,\n     brief: Option<~str>,\n@@ -132,7 +132,7 @@ pub struct MethodDoc {\n     implementation: Implementation,\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct ImplDoc {\n     item: ItemDoc,\n     trait_types: ~[~str],\n@@ -142,14 +142,14 @@ pub struct ImplDoc {\n \n pub type TyDoc = SimpleItemDoc;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct StructDoc {\n     item: ItemDoc,\n     fields: ~[~str],\n     sig: Option<~str>\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct Index {\n     entries: ~[IndexEntry]\n }\n@@ -164,7 +164,7 @@ pub struct Index {\n  * * brief - The brief description\n  * * link - A format-specific string representing the link target\n  */\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct IndexEntry {\n     kind: ~str,\n     name: ~str,"}, {"sha": "64d28dcde834c1cce093cbf034ac5a4913cdee35", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -253,15 +253,15 @@ mod tests {\n         fail_unless!(*deq.get(3) == d);\n     }\n \n-    #[deriving_eq]\n+    #[deriving(Eq)]\n     enum Taggy { One(int), Two(int, int), Three(int, int, int), }\n \n-    #[deriving_eq]\n+    #[deriving(Eq)]\n     enum Taggypar<T> {\n         Onepar(int), Twopar(int, int), Threepar(int, int, int),\n     }\n \n-    #[deriving_eq]\n+    #[deriving(Eq)]\n     struct RecCy {\n         x: int,\n         y: int,"}, {"sha": "de8a8f343816ca721976813992fdd53888663ba8", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -86,20 +86,20 @@ use core::option::{Some, None};\n use core::str;\n use core::vec;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Name {\n     Long(~str),\n     Short(char),\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum HasArg { Yes, No, Maybe, }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Occur { Req, Optional, Multi, }\n \n /// A description of a possible option\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct Opt {\n     name: Name,\n     hasarg: HasArg,\n@@ -146,14 +146,14 @@ pub fn optmulti(name: &str) -> Opt {\n     return Opt {name: mkname(name), hasarg: Yes, occur: Multi};\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n enum Optval { Val(~str), Given, }\n \n /**\n  * The result of checking command line arguments. Contains a vector\n  * of matches and a vector of free strings.\n  */\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct Matches {\n     opts: ~[Opt],\n     vals: ~[~[Optval]],\n@@ -179,7 +179,7 @@ fn find_opt(opts: &[Opt], nm: Name) -> Option<uint> {\n  * The type returned when the command line does not conform to the\n  * expected format. Pass this value to <fail_str> to get an error message.\n  */\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Fail_ {\n     ArgumentMissing(~str),\n     UnrecognizedOption(~str),\n@@ -446,7 +446,7 @@ pub fn opt_default(mm: &Matches, nm: &str, def: &str) -> Option<~str> {\n                            _      => Some::<~str>(str::from_slice(def)) }\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum FailType {\n     ArgumentMissing_,\n     UnrecognizedOption_,\n@@ -469,7 +469,7 @@ pub mod groups {\n     /** one group of options, e.g., both -h and --help, along with\n      * their shared description and properties\n      */\n-    #[deriving_eq]\n+    #[deriving(Eq)]\n     pub struct OptGroup {\n         short_name: ~str,\n         long_name: ~str,"}, {"sha": "eb1c249be695042f6eb158618c9578c9dc4d23b5", "filename": "src/libstd/list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -15,7 +15,7 @@ use core::option::*;\n use core::prelude::*;\n use core::vec;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum List<T> {\n     Cons(T, @List<T>),\n     Nil,"}, {"sha": "6fb4f6747a3ee189517e3ccdbd2992aad70f5353", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -25,7 +25,7 @@ use core::to_str::ToStr;\n use core::to_str;\n use core::uint;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n struct Url {\n     scheme: ~str,\n     user: Option<UserInfo>,\n@@ -36,7 +36,7 @@ struct Url {\n     fragment: Option<~str>\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n struct UserInfo {\n     user: ~str,\n     pass: Option<~str>\n@@ -398,7 +398,7 @@ pub pure fn get_scheme(rawurl: &str) -> Result<(~str, ~str), ~str> {\n     return Err(~\"url: Scheme must be terminated with a colon.\");\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n enum Input {\n     Digit, // all digits\n     Hex, // digits and letters a-f"}, {"sha": "3593ccc5ae89890c6b6926061bf577f19f1ad8ca", "filename": "src/libstd/semver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibstd%2Fsemver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibstd%2Fsemver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsemver.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -19,7 +19,7 @@ use core::str;\n use core::to_str::ToStr;\n use core::uint;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Identifier {\n     Numeric(uint),\n     AlphaNumeric(~str)\n@@ -60,7 +60,7 @@ impl ToStr for Identifier {\n }\n \n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct Version {\n     major: uint,\n     minor: uint,"}, {"sha": "1829e29826fd8da00c621bd33c5176f27c53141c", "filename": "src/libstd/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -188,13 +188,13 @@ pub fn parse_opts(args: &[~str]) -> OptRes {\n     either::Left(test_opts)\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct BenchSamples {\n     ns_iter_samples: ~[f64],\n     mb_s: uint\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum TestResult { TrOk, TrFailed, TrIgnored, TrBench(BenchSamples) }\n \n struct ConsoleTestState {"}, {"sha": "f8b4337e437f2203e77e4f2a9ada2b7860c7d2c8", "filename": "src/libstd/workcache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibstd%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibstd%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fworkcache.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -96,7 +96,7 @@ use core::mutable::Mut;\n *\n */\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n #[auto_encode]\n #[auto_decode]\n struct WorkKey {"}, {"sha": "cbdcef3eff65a558cbbbb118a0f1e795a4850295", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 85, "deletions": 85, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -33,13 +33,13 @@ macro_rules! interner_key (\n // table and a SyntaxContext to track renaming and\n // macro expansion per Flatt et al., \"Macros\n // That Work Together\"\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct ident { repr: Name }\n \n // a SyntaxContext represents a chain of macro-expandings\n // and renamings. Each macro expansion corresponds to\n // a fresh uint\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum SyntaxContext {\n     MT,\n     Mark (Mrk,~SyntaxContext),\n@@ -98,7 +98,7 @@ pub type fn_ident = Option<ident>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct Lifetime {\n     id: node_id,\n     span: span,\n@@ -111,7 +111,7 @@ pub struct Lifetime {\n // of supporting information.\n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct path {\n     span: span,\n     global: bool,\n@@ -126,7 +126,7 @@ pub type node_id = int;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct def_id {\n     crate: crate_num,\n     node: node_id,\n@@ -137,7 +137,7 @@ pub const crate_node_id: node_id = 0;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n // The AST represents all type param bounds as types.\n // typeck::collect::compute_bounds matches these against\n // the \"special\" built-in traits (see middle::lang_items) and\n@@ -149,7 +149,7 @@ pub enum TyParamBound {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct TyParam {\n     ident: ident,\n     id: node_id,\n@@ -158,7 +158,7 @@ pub struct TyParam {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct Generics {\n     lifetimes: OptVec<Lifetime>,\n     ty_params: OptVec<TyParam>\n@@ -178,7 +178,7 @@ pub impl Generics {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum def {\n     def_fn(def_id, purity),\n     def_static_method(/* method */ def_id,\n@@ -216,7 +216,7 @@ pub type crate = spanned<crate_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct crate_ {\n     module: _mod,\n     attrs: ~[attribute],\n@@ -227,7 +227,7 @@ pub type meta_item = spanned<meta_item_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum meta_item_ {\n     meta_word(@~str),\n     meta_list(@~str, ~[@meta_item]),\n@@ -238,7 +238,7 @@ pub type blk = spanned<blk_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct blk_ {\n     view_items: ~[@view_item],\n     stmts: ~[@stmt],\n@@ -249,7 +249,7 @@ pub struct blk_ {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct pat {\n     id: node_id,\n     node: pat_,\n@@ -258,15 +258,15 @@ pub struct pat {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct field_pat {\n     ident: ident,\n     pat: @pat,\n }\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum binding_mode {\n     bind_by_copy,\n     bind_by_ref(mutability),\n@@ -289,7 +289,7 @@ impl to_bytes::IterBytes for binding_mode {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum pat_ {\n     pat_wild,\n     // A pat_ident may either be a new bound variable,\n@@ -316,7 +316,7 @@ pub enum pat_ {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum mutability { m_mutbl, m_imm, m_const, }\n \n impl to_bytes::IterBytes for mutability {\n@@ -327,7 +327,7 @@ impl to_bytes::IterBytes for mutability {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Abi {\n     RustAbi\n }\n@@ -348,7 +348,7 @@ impl ToStr for Abi {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Sigil {\n     BorrowedSigil,\n     OwnedSigil,\n@@ -373,7 +373,7 @@ impl ToStr for Sigil {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum vstore {\n     // FIXME (#3469): Change uint to @expr (actually only constant exprs)\n     vstore_fixed(Option<uint>),     // [1,2,3,4]\n@@ -384,7 +384,7 @@ pub enum vstore {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum expr_vstore {\n     expr_vstore_fixed(Option<uint>),   // [1,2,3,4]\n     expr_vstore_uniq,                  // ~[1,2,3,4]\n@@ -396,7 +396,7 @@ pub enum expr_vstore {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum binop {\n     add,\n     subtract,\n@@ -420,7 +420,7 @@ pub enum binop {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum unop {\n     box(mutability),\n     uniq(mutability),\n@@ -433,7 +433,7 @@ pub enum unop {\n // using ty::resolved_T(...).\n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum inferable<T> {\n     expl(T),\n     infer(node_id)\n@@ -454,7 +454,7 @@ impl<T:to_bytes::IterBytes> to_bytes::IterBytes for inferable<T> {\n // \"resolved\" mode: the real modes.\n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum rmode { by_ref, by_copy }\n \n impl to_bytes::IterBytes for rmode {\n@@ -470,7 +470,7 @@ pub type stmt = spanned<stmt_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum stmt_ {\n     stmt_decl(@decl, node_id),\n \n@@ -488,7 +488,7 @@ pub enum stmt_ {\n // a refinement on pat.\n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct local_ {\n     is_mutbl: bool,\n     ty: @Ty,\n@@ -503,12 +503,12 @@ pub type decl = spanned<decl_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum decl_ { decl_local(~[@local]), decl_item(@item), }\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct arm {\n     pats: ~[@pat],\n     guard: Option<@expr>,\n@@ -517,7 +517,7 @@ pub struct arm {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct field_ {\n     mutbl: mutability,\n     ident: ident,\n@@ -528,12 +528,12 @@ pub type field = spanned<field_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum blk_check_mode { default_blk, unsafe_blk, }\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct expr {\n     id: node_id,\n     // Extra node ID is only used for index, assign_op, unary, binary, method\n@@ -545,13 +545,13 @@ pub struct expr {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum log_level { error, debug, log_other }\n // 0 = error, 1 = debug, 2 = log_other\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum CallSugar {\n     NoSugar,\n     DoSugar,\n@@ -560,7 +560,7 @@ pub enum CallSugar {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum expr_ {\n     expr_vstore(@expr, expr_vstore),\n     expr_vec(~[@expr], mutability),\n@@ -634,7 +634,7 @@ pub enum expr_ {\n //\n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n #[doc=\"For macro invocations; parsing is delegated to the macro\"]\n pub enum token_tree {\n     // a single token\n@@ -709,7 +709,7 @@ pub type matcher = spanned<matcher_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum matcher_ {\n     // match one token\n     match_tok(::parse::token::Token),\n@@ -724,7 +724,7 @@ pub type mac = spanned<mac_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum mac_ {\n     mac_invoc_tt(@path,~[token_tree]),   // new macro-invocation\n }\n@@ -733,7 +733,7 @@ pub type lit = spanned<lit_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum lit_ {\n     lit_str(@~str),\n     lit_int(i64, int_ty),\n@@ -749,15 +749,15 @@ pub enum lit_ {\n // type structure in middle/ty.rs as well.\n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct mt {\n     ty: @Ty,\n     mutbl: mutability,\n }\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct ty_field_ {\n     ident: ident,\n     mt: mt,\n@@ -767,7 +767,7 @@ pub type ty_field = spanned<ty_field_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct ty_method {\n     ident: ident,\n     attrs: ~[attribute],\n@@ -781,7 +781,7 @@ pub struct ty_method {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n // A trait method is either required (meaning it doesn't have an\n // implementation, just a signature) or provided (meaning it has a default\n // implementation).\n@@ -792,7 +792,7 @@ pub enum trait_method {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum int_ty { ty_i, ty_char, ty_i8, ty_i16, ty_i32, ty_i64, }\n \n impl ToStr for int_ty {\n@@ -809,7 +809,7 @@ impl to_bytes::IterBytes for int_ty {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum uint_ty { ty_u, ty_u8, ty_u16, ty_u32, ty_u64, }\n \n impl ToStr for uint_ty {\n@@ -826,7 +826,7 @@ impl to_bytes::IterBytes for uint_ty {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum float_ty { ty_f, ty_f32, ty_f64, }\n \n impl ToStr for float_ty {\n@@ -844,7 +844,7 @@ impl to_bytes::IterBytes for float_ty {\n // NB Eq method appears below.\n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct Ty {\n     id: node_id,\n     node: ty_,\n@@ -854,7 +854,7 @@ pub struct Ty {\n // Not represented directly in the AST, referred to by name through a ty_path.\n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum prim_ty {\n     ty_int(int_ty),\n     ty_uint(uint_ty),\n@@ -865,7 +865,7 @@ pub enum prim_ty {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Onceness {\n     Once,\n     Many\n@@ -888,7 +888,7 @@ impl to_bytes::IterBytes for Onceness {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct TyClosure {\n     sigil: Sigil,\n     region: Option<@Lifetime>,\n@@ -899,7 +899,7 @@ pub struct TyClosure {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct TyBareFn {\n     purity: purity,\n     abi: Abi,\n@@ -908,7 +908,7 @@ pub struct TyBareFn {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum ty_ {\n     ty_nil,\n     ty_bot, /* bottom type */\n@@ -937,7 +937,7 @@ impl to_bytes::IterBytes for Ty {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct arg {\n     mode: mode,\n     is_mutbl: bool,\n@@ -948,7 +948,7 @@ pub struct arg {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct fn_decl {\n     inputs: ~[arg],\n     output: @Ty,\n@@ -957,7 +957,7 @@ pub struct fn_decl {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum purity {\n     pure_fn, // declared with \"pure fn\"\n     unsafe_fn, // declared with \"unsafe fn\"\n@@ -984,7 +984,7 @@ impl to_bytes::IterBytes for purity {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum ret_style {\n     noreturn, // functions with return type _|_ that always\n               // raise an error or exit (i.e. never return to the caller)\n@@ -999,7 +999,7 @@ impl to_bytes::IterBytes for ret_style {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum self_ty_ {\n     sty_static,                                // no self\n     sty_by_ref,                                // ``\n@@ -1022,7 +1022,7 @@ pub type self_ty = spanned<self_ty_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct method {\n     ident: ident,\n     attrs: ~[attribute],\n@@ -1039,15 +1039,15 @@ pub struct method {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct _mod {\n     view_items: ~[@view_item],\n     items: ~[@item],\n }\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum foreign_abi {\n     foreign_abi_rust_intrinsic,\n     foreign_abi_cdecl,\n@@ -1057,12 +1057,12 @@ pub enum foreign_abi {\n // Foreign mods can be named or anonymous\n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum foreign_mod_sort { named, anonymous }\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct foreign_mod {\n     sort: foreign_mod_sort,\n     abi: ident,\n@@ -1072,15 +1072,15 @@ pub struct foreign_mod {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct variant_arg {\n     ty: @Ty,\n     id: node_id,\n }\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum variant_kind {\n     tuple_variant_kind(~[variant_arg]),\n     struct_variant_kind(@struct_def),\n@@ -1089,15 +1089,15 @@ pub enum variant_kind {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct enum_def {\n     variants: ~[variant],\n     common: Option<@struct_def>,\n }\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct variant_ {\n     name: ident,\n     attrs: ~[attribute],\n@@ -1111,7 +1111,7 @@ pub type variant = spanned<variant_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct path_list_ident_ {\n     name: ident,\n     id: node_id,\n@@ -1121,14 +1121,14 @@ pub type path_list_ident = spanned<path_list_ident_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum namespace { module_ns, type_value_ns }\n \n pub type view_path = spanned<view_path_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum view_path_ {\n \n     // quux = foo::bar::baz\n@@ -1147,7 +1147,7 @@ pub enum view_path_ {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct view_item {\n     node: view_item_,\n     attrs: ~[attribute],\n@@ -1157,7 +1157,7 @@ pub struct view_item {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum view_item_ {\n     view_item_extern_mod(ident, ~[@meta_item], node_id),\n     view_item_use(~[@view_path]),\n@@ -1171,13 +1171,13 @@ pub type attribute = spanned<attribute_>;\n // distinguished for pretty-printing.\n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum attr_style { attr_outer, attr_inner, }\n \n // doc-comments are promoted to attributes that have is_sugared_doc = true\n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct attribute_ {\n     style: attr_style,\n     value: @meta_item,\n@@ -1193,20 +1193,20 @@ pub struct attribute_ {\n  */\n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct trait_ref {\n     path: @path,\n     ref_id: node_id,\n }\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum visibility { public, private, inherited }\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct struct_field_ {\n     kind: struct_field_kind,\n     id: node_id,\n@@ -1217,15 +1217,15 @@ pub type struct_field = spanned<struct_field_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum struct_field_kind {\n     named_field(ident, struct_mutability, visibility),\n     unnamed_field   // element of a tuple-like struct\n }\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct struct_def {\n     fields: ~[@struct_field], /* fields */\n     /* (not including ctor or dtor) */\n@@ -1242,7 +1242,7 @@ pub struct struct_def {\n  */\n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct item {\n     ident: ident,\n     attrs: ~[attribute],\n@@ -1254,7 +1254,7 @@ pub struct item {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum item_ {\n     item_const(@Ty, @expr),\n     item_fn(fn_decl, purity, Generics, blk),\n@@ -1274,7 +1274,7 @@ pub enum item_ {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum struct_mutability { struct_mutable, struct_immutable }\n \n impl to_bytes::IterBytes for struct_mutability {\n@@ -1287,7 +1287,7 @@ pub type struct_dtor = spanned<struct_dtor_>;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct struct_dtor_ {\n     id: node_id,\n     attrs: ~[attribute],\n@@ -1297,7 +1297,7 @@ pub struct struct_dtor_ {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct foreign_item {\n     ident: ident,\n     attrs: ~[attribute],\n@@ -1309,7 +1309,7 @@ pub struct foreign_item {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum foreign_item_ {\n     foreign_item_fn(fn_decl, purity, Generics),\n     foreign_item_const(@Ty)\n@@ -1320,7 +1320,7 @@ pub enum foreign_item_ {\n // that we trans.\n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum inlined_item {\n     ii_item(@item),\n     ii_method(def_id /* impl id */, @method),"}, {"sha": "1225e71cb8c1ff7e235215abc5e4e38d65e61b58", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -582,7 +582,7 @@ pub fn variant_visibility_to_privacy(visibility: visibility,\n     }\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Privacy {\n     Private,\n     Public"}, {"sha": "c84e3abf50bc92b4d0c8d47c693b49b619b29119", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -128,7 +128,7 @@ pub struct span {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct spanned<T> { node: T, span: span }\n \n impl cmp::Eq for span {"}, {"sha": "eed36e16754f5855d4498d8fbf5af1181320d6a3", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -160,7 +160,7 @@ pub fn mk_handler(emitter: Option<Emitter>) -> @handler {\n     @mut HandlerT { err_count: 0, emit: emit } as @handler\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum level {\n     fatal,\n     error,"}, {"sha": "e5f818eef5c234294c44b3bb979bf5e711be57f2", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -1204,7 +1204,7 @@ mod test {\n     use std::serialize::Encoder;\n \n     // just adding the ones I want to test, for now:\n-    #[deriving_eq]\n+    #[deriving(Eq)]\n     pub enum call {\n         CallToEmitEnum(~str),\n         CallToEmitEnumVariant(~str, uint, uint),"}, {"sha": "50f89d37fae8e0576822e2d373a749e4e5ba4bae", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -153,13 +153,13 @@ pub fn syntax_expander_table() -> SyntaxEnv {\n                                 ext::deriving::expand_meta_deriving)));\n     syntax_expanders.insert(@~\"deriving_eq\",\n                             @SE(ItemDecorator(\n-                                ext::deriving::eq::expand_deriving_eq)));\n+                                ext::deriving::eq::expand_deriving_obsolete)));\n     syntax_expanders.insert(@~\"deriving_iter_bytes\",\n                             @SE(ItemDecorator(\n-                                ext::deriving::iter_bytes::expand_deriving_iter_bytes)));\n+                                ext::deriving::iter_bytes::expand_deriving_obsolete)));\n     syntax_expanders.insert(@~\"deriving_clone\",\n                             @SE(ItemDecorator(\n-                                ext::deriving::clone::expand_deriving_clone)));\n+                                ext::deriving::clone::expand_deriving_obsolete)));\n \n     // Quasi-quoting expanders\n     syntax_expanders.insert(@~\"quote_tokens\","}, {"sha": "4ab83cb5f1e42e49f842bcb030a7d3bd6c15911f", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -39,6 +39,15 @@ pub fn expand_deriving_clone(cx: @ext_ctxt,\n                     expand_deriving_clone_enum_def)\n }\n \n+pub fn expand_deriving_obsolete(cx: @ext_ctxt,\n+                                span: span,\n+                                _mitem: @meta_item,\n+                                in_items: ~[@item])\n+                             -> ~[@item] {\n+    cx.span_err(span, ~\"`#[deriving_clone]` is obsolete; use `#[deriving(Clone)]` instead\");\n+    in_items\n+}\n+\n fn create_derived_clone_impl(cx: @ext_ctxt,\n                              span: span,\n                              type_ident: ident,"}, {"sha": "5e94134f70afe020ffc5a6dfcbf70f3516872643", "filename": "src/libsyntax/ext/deriving/eq.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fext%2Fderiving%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fext%2Fderiving%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Feq.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -53,6 +53,15 @@ pub fn expand_deriving_eq(cx: @ext_ctxt,\n                     expand_deriving_eq_enum_def)\n }\n \n+pub fn expand_deriving_obsolete(cx: @ext_ctxt,\n+                                span: span,\n+                                _mitem: @meta_item,\n+                                in_items: ~[@item])\n+                             -> ~[@item] {\n+    cx.span_err(span, ~\"`#[deriving_eq]` is obsolete; use `#[deriving(Eq)]` instead\");\n+    in_items\n+}\n+\n /// Creates a method from the given expression, the signature of which\n /// conforms to the `eq` or `ne` method.\n fn create_eq_method(cx: @ext_ctxt,"}, {"sha": "75d7b396c7e15a7de811b6e00df770099cc059b3", "filename": "src/libsyntax/ext/deriving/iter_bytes.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -39,6 +39,16 @@ pub fn expand_deriving_iter_bytes(cx: @ext_ctxt,\n                     expand_deriving_iter_bytes_enum_def)\n }\n \n+pub fn expand_deriving_obsolete(cx: @ext_ctxt,\n+                                span: span,\n+                                _mitem: @meta_item,\n+                                in_items: ~[@item])\n+                             -> ~[@item] {\n+    cx.span_err(span, ~\"`#[deriving_iter_bytes]` is obsolete; use `#[deriving(IterBytes)]` \\\n+                        instead\");\n+    in_items\n+}\n+\n fn create_derived_iter_bytes_impl(cx: @ext_ctxt,\n                                   span: span,\n                                   type_ident: ident,"}, {"sha": "57fddd623d4745f0695d1cc5f32cee6331cb78b7", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-/// The compiler code necessary to implement the #[deriving_eq] and\n-/// #[deriving_iter_bytes] extensions.\n+/// The compiler code necessary to implement the #[deriving(Eq)] and\n+/// #[deriving(IterBytes)] extensions.\n \n use core::prelude::*;\n "}, {"sha": "d72da6f2d350e88ca6a6ffd4dcc27bf6d09208af", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -17,7 +17,7 @@ use ext::pipes::ast_builder::{append_types, ext_ctxt_ast_builder, path};\n \n use core::to_str::ToStr;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum direction { send, recv }\n \n impl ToStr for direction {"}, {"sha": "435bfbdad24bfb665329844d00338afaa45d2d47", "filename": "src/libsyntax/opt_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fopt_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fopt_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fopt_vec.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -106,7 +106,7 @@ impl<T:Copy> OptVec<T> {\n \n impl<A:Eq> Eq for OptVec<A> {\n     pure fn eq(&self, other: &OptVec<A>) -> bool {\n-        // Note: cannot use #[deriving_eq] here because\n+        // Note: cannot use #[deriving(Eq)] here because\n         // (Empty, Vec(~[])) ought to be equal.\n         match (self, other) {\n             (&Empty, &Empty) => true,"}, {"sha": "f53ac2719019d0f46a80d0832f75b36acf0bfb11", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -37,7 +37,7 @@ pub trait reader {\n     fn dup(@mut self) -> @reader;\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub struct TokenAndSpan {tok: token::Token, sp: span}\n \n pub struct StringReader {"}, {"sha": "5cc1ea756e4d7927d01b41250d14c1a30dbfeaf4", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -30,7 +30,7 @@ use core::str;\n use core::to_bytes;\n \n /// The specific types of unsupported syntax\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum ObsoleteSyntax {\n     ObsoleteLowerCaseKindBounds,\n     ObsoleteLet,"}, {"sha": "e899c79a74cb77d0a17d1f3d685e3d485b9ab45a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -93,7 +93,7 @@ use core::either;\n use core::vec;\n use std::oldmap::HashMap;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n enum restriction {\n     UNRESTRICTED,\n     RESTRICT_STMT_EXPR,"}, {"sha": "5a774718b7d09a22f4076ed476aca3aef297590a", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -24,7 +24,7 @@ use std::oldmap::HashMap;\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum binop {\n     PLUS,\n     MINUS,\n@@ -40,7 +40,7 @@ pub enum binop {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Token {\n     /* Expression-operator symbols. */\n     EQ,\n@@ -103,7 +103,7 @@ pub enum Token {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n /// For interpolation during macro expansion.\n pub enum nonterminal {\n     nt_item(@ast::item),"}, {"sha": "d002267547351aeb53d49df1b01c8ef196f7c1e3", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -66,7 +66,7 @@ use core::vec;\n  * line (which it can't) and so naturally place the content on its own line to\n  * avoid combining it with other lines and making matters even worse.\n  */\n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum breaks { consistent, inconsistent, }\n \n pub struct break_t {"}, {"sha": "298dced1e21ed67e948dff8a91cdfd71be5e629e", "filename": "src/test/compile-fail/deriving-obsolete.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Fcompile-fail%2Fderiving-obsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Fcompile-fail%2Fderiving-obsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-obsolete.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[deriving_clone] //~ ERROR `#[deriving_clone]` is obsolete; use `#[deriving(Clone)]` instead\n+#[deriving_eq] //~ ERROR `#[deriving_eq]` is obsolete; use `#[deriving(Eq)]` instead\n+#[deriving_iter_bytes]\n+//~^ ERROR `#[deriving_iter_bytes]` is obsolete; use `#[deriving(IterBytes)]` instead\n+struct Foo;\n+\n+pub fn main() { }"}, {"sha": "d3177e7c0a8a8512f7504b655e1ddac2d63e1c23", "filename": "src/test/run-fail/assert-eq-macro-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-fail%2Fassert-eq-macro-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-fail%2Fassert-eq-macro-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fassert-eq-macro-fail.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -1,6 +1,6 @@\n // error-pattern:expected: 15, given: 14\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n struct Point { x : int }\n \n fn main() {"}, {"sha": "b204e1aba3a71dbdd566607061a1aa65c5f62dbe", "filename": "src/test/run-pass/assert-eq-macro-success.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -1,4 +1,4 @@\n-#[deriving_eq]\n+#[deriving(Eq)]\n struct Point { x : int }\n \n fn main() {"}, {"sha": "7538892f038920e678f568470c02f0cde1f1fd8f", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -121,7 +121,7 @@ impl cmp::Eq for CLike {\n \n #[auto_encode]\n #[auto_decode]\n-#[deriving_eq]\n+#[deriving(Eq)]\n struct Spanned<T> {\n     lo: uint,\n     hi: uint,"}, {"sha": "3f5547df17d8f802d091b690abf5cc26c188dace", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -88,7 +88,7 @@ mod test {\n     }\n }\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n struct p {\n   x: int,\n   y: int,"}, {"sha": "ee294cb594230abfcf5457777138a707f89f46cc", "filename": "src/test/run-pass/deriving-clone-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-clone-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-clone-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-enum.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -1,4 +1,4 @@\n-#[deriving_clone]\n+#[deriving(Clone)]\n enum E {\n     A,\n     B(()),"}, {"sha": "a868db2425cc27b26e417ddcc8e494cad696647b", "filename": "src/test/run-pass/deriving-clone-generic-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-enum.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -1,4 +1,4 @@\n-#[deriving_clone]\n+#[deriving(Clone)]\n enum E<T,U> {\n     A(T),\n     B(T,U),"}, {"sha": "92721c53435731535084473a6d28d79f8c5720df", "filename": "src/test/run-pass/deriving-clone-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-struct.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -1,4 +1,4 @@\n-#[deriving_clone]\n+#[deriving(Clone)]\n struct S<T> {\n     foo: (),\n     bar: (),"}, {"sha": "aeaa9ed726d2bb009de2e91499316aa916fd1527", "filename": "src/test/run-pass/deriving-clone-generic-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-tuple-struct.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -1,4 +1,4 @@\n-#[deriving_clone]\n+#[deriving(Clone)]\n struct S<T>(T, ());\n \n fn main() {}"}, {"sha": "4dcbadbb3ef9282b3c1e07838183c6ee2fb2b426", "filename": "src/test/run-pass/deriving-clone-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-clone-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-clone-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-struct.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -1,4 +1,4 @@\n-#[deriving_clone]\n+#[deriving(Clone)]\n struct S {\n     _int: int,\n     _i8: i8,"}, {"sha": "04ddb439485fd0ac3cf7c4cd6dc79e2ed1429072", "filename": "src/test/run-pass/deriving-clone-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-clone-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-clone-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-tuple-struct.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -1,4 +1,4 @@\n-#[deriving_clone]\n+#[deriving(Clone)]\n struct S((), ());\n \n fn main() {}"}, {"sha": "ebbdc157c7d13343ed796276add303041b3372b8", "filename": "src/test/run-pass/deriving-enum-single-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-enum-single-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-enum-single-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-enum-single-variant.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -1,6 +1,6 @@\n type task_id = int;\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n pub enum Task {\n     TaskHandle(task_id)\n }"}, {"sha": "47d088cfc6f266cfa5806bc681b9c8a0b4138f9c", "filename": "src/test/run-pass/deriving-via-extension-c-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-via-extension-c-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-via-extension-c-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-c-enum.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n enum Foo {\n     Bar,\n     Baz,"}, {"sha": "32f693abf25558673b664c006cd67cea05a7e5e6", "filename": "src/test/run-pass/deriving-via-extension-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-via-extension-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-via-extension-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-enum.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n enum Foo {\n     Bar(int, int),\n     Baz(float, float)"}, {"sha": "5ceb8c48750d986e49f5c027072c23a4ca6eb135", "filename": "src/test/run-pass/deriving-via-extension-iter-bytes-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-via-extension-iter-bytes-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-via-extension-iter-bytes-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-iter-bytes-enum.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -10,13 +10,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving_iter_bytes]\n+#[deriving(IterBytes)]\n enum Foo {\n     Bar(int, char),\n     Baz(char, int)\n }\n \n-#[deriving_iter_bytes]\n+#[deriving(IterBytes)]\n enum A {\n     B,\n     C,"}, {"sha": "9f18cb6ac58a7b979cb37e8413a710f9b88a8335", "filename": "src/test/run-pass/deriving-via-extension-iter-bytes-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-via-extension-iter-bytes-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-via-extension-iter-bytes-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-iter-bytes-struct.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -10,7 +10,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving_iter_bytes]\n+#[deriving(IterBytes)]\n struct Foo {\n     x: int,\n     y: int,"}, {"sha": "09ee83870a0e2ca1e67bebd8f2a150e897d50f9d", "filename": "src/test/run-pass/deriving-via-extension-struct-empty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-empty.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n struct Foo;\n \n pub fn main() {"}, {"sha": "c349600eb9998a01dd7bac29c12d619ea3b1900b", "filename": "src/test/run-pass/deriving-via-extension-struct-like-enum-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-like-enum-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-like-enum-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-like-enum-variant.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -1,4 +1,4 @@\n-#[deriving_eq]\n+#[deriving(Eq)]\n enum S {\n     X { x: int, y: int },\n     Y"}, {"sha": "35c20c13e93715ae612c160e38ac68bd56026b66", "filename": "src/test/run-pass/deriving-via-extension-struct-tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-tuple.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n struct Foo(int, int, ~str);\n \n pub fn main() {"}, {"sha": "f5cc85c63825067025e100dd4d1b30d52b5e5c13", "filename": "src/test/run-pass/deriving-via-extension-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n struct Foo {\n     x: int,\n     y: int,"}, {"sha": "298e30f7ec1e7779f2c736c6ab40f5ba0716dce5", "filename": "src/test/run-pass/deriving-via-extension-type-params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-via-extension-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fderiving-via-extension-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-type-params.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -10,8 +10,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving_eq]\n-#[deriving_iter_bytes]\n+#[deriving(Eq)]\n+#[deriving(IterBytes)]\n struct Foo<T> {\n     x: int,\n     y: T,"}, {"sha": "f04e9d086e94f156d0d6dccb0694ae314680c8ca", "filename": "src/test/run-pass/extern-pass-TwoU64s-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s-ref.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -12,7 +12,7 @@\n \n // xfail-test --- broken on 32-bit ABIs! (#5347)\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n struct TwoU64s {\n     one: u64, two: u64\n }"}, {"sha": "1937ddaa9f42a446510d06295ca04256ffc2de77", "filename": "src/test/run-pass/extern-pass-TwoU64s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -13,7 +13,7 @@\n \n // xfail-test --- broken on 32-bit ABIs! (#5347)\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n struct TwoU64s {\n     one: u64, two: u64\n }"}, {"sha": "cc4f10ca347b48ceff253292e19355127049afe2", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -20,7 +20,7 @@ pub mod pipes {\n         payload: Option<T>\n     }\n \n-    #[deriving_eq]\n+    #[deriving(Eq)]\n     pub enum state {\n         empty,\n         full,"}, {"sha": "626932850cf42ddf717a9eee2a6d83676a1dd140", "filename": "src/test/run-pass/issue-3935.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fissue-3935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fissue-3935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3935.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving_eq]\n+#[deriving(Eq)]\n struct Bike {\n     name: ~str,\n }"}, {"sha": "082f2db259a4aea2bbfb64fe1c85bf41f61ce972", "filename": "src/test/run-pass/while-prelude-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fwhile-prelude-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/059764779c7389bcea118d4c43cc243d185ec243/src%2Ftest%2Frun-pass%2Fwhile-prelude-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-prelude-drop.rs?ref=059764779c7389bcea118d4c43cc243d185ec243", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-#[deriving_eq]\n+#[deriving(Eq)]\n enum t { a, b(~str), }\n \n fn make(i: int) -> t {"}]}