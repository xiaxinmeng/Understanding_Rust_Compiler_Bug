{"sha": "1b0e9f5af9283b003f5fce6f19ede145c1776684", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMGU5ZjVhZjkyODNiMDAzZjVmY2U2ZjE5ZWRlMTQ1YzE3NzY2ODQ=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-03-22T14:57:28Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-03-22T17:21:30Z"}, "message": "Only generate documentation for local rustc crates.", "tree": {"sha": "2e43a2cc315a8d9a754c7e030feb2b8c8f83df0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e43a2cc315a8d9a754c7e030feb2b8c8f83df0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b0e9f5af9283b003f5fce6f19ede145c1776684", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlqz5hoACgkQAXYLT59T\n8VScdQ//RWGXdzfz8RZehflYZph6WDadn3dvR01QJj/XGGRdb5w4RnYEHThmVzo3\nnnF2m3rPDZZQdW4URDCUcqnAOy9W/SpM79eI5r/hiA+GvTpKCLu1UJltIdtq6ClO\nsaUyHXtguXMFz/o0psVuc+ZHElWeUi2b91AYgD2LqBDf3cPiadeHYN7CQgOcL0Is\njtKrJ6aoUunbsDPDTkFz9DKRzyq481mFNEInBWSqIm4cWgP/SYc6l82+FFz/DNiy\nnOdU8R5KkmoaIKNetOBIyDOISOTpHm3pU8sBbqhrWR3BGS6v+5nLowmSldo51rMG\nndQSLBBbZWsd+yKOjPVI+9TdnoWCMP9jwSLCqtb49ncl8Xh/vGrEe6oxxRwNy0FL\nuYa0VQIcYbRay3iGVWXzSJYRGV1z1ooAf45AkGcXl0bS8zWlcS3/3GhVJJvNCKeY\nbmA7duqy2QpPaJQPnP0i9En4KizKywnT/MEgEEHbROrNqA1MKBr52WKt9D1wKxb4\nVaV/HmfzmWwt0Xeft0xfeaZDqnbVSpcuJBQLqIckdqc+QBBqejIgSPFscF2pMhEU\naPLIRfB3GkvpK9MR7C6ftRPv8A/7/2Qaxz+2SzF3JL3f5b94Frub9b+ztS6QOoTK\nlL8Z+jjRA5YVb9XyuMIfzuDIk8m5OFxQ+FySkKq0Ow/bN/jRPUw=\n=5HKC\n-----END PGP SIGNATURE-----", "payload": "tree 2e43a2cc315a8d9a754c7e030feb2b8c8f83df0d\nparent 1392179cdc9c96e75353771959c246553b918d57\nauthor David Wood <david@davidtw.co> 1521730648 +0000\ncommitter David Wood <david@davidtw.co> 1521739290 +0000\n\nOnly generate documentation for local rustc crates.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b0e9f5af9283b003f5fce6f19ede145c1776684", "html_url": "https://github.com/rust-lang/rust/commit/1b0e9f5af9283b003f5fce6f19ede145c1776684", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b0e9f5af9283b003f5fce6f19ede145c1776684/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1392179cdc9c96e75353771959c246553b918d57", "url": "https://api.github.com/repos/rust-lang/rust/commits/1392179cdc9c96e75353771959c246553b918d57", "html_url": "https://github.com/rust-lang/rust/commit/1392179cdc9c96e75353771959c246553b918d57"}], "stats": {"total": 35, "additions": 31, "deletions": 4}, "files": [{"sha": "e525bdb98fc0c7e0517843439d1c9fd113e9bc15", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1b0e9f5af9283b003f5fce6f19ede145c1776684/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0e9f5af9283b003f5fce6f19ede145c1776684/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=1b0e9f5af9283b003f5fce6f19ede145c1776684", "patch": "@@ -17,12 +17,13 @@\n //! Everything here is basically just a shim around calling either `rustbook` or\n //! `rustdoc`.\n \n+use std::collections::HashSet;\n use std::fs::{self, File};\n use std::io::prelude::*;\n use std::io;\n use std::path::{PathBuf, Path};\n \n-use Mode;\n+use {Build, Mode};\n use build_helper::up_to_date;\n \n use util::{cp_r, symlink_dir};\n@@ -704,15 +705,41 @@ impl Step for Rustc {\n         let mut cargo = builder.cargo(compiler, Mode::Librustc, target, \"doc\");\n         compile::rustc_cargo(build, &mut cargo);\n \n-        // src/rustc/Cargo.toml contains a bin crate called rustc which\n-        // would otherwise overwrite the docs for the real rustc lib crate.\n-        cargo.arg(\"-p\").arg(\"rustc_driver\");\n+        // Only include compiler crates, no dependencies of those, such as `libc`.\n+        cargo.arg(\"--no-deps\");\n+\n+        // Find dependencies for top level crates.\n+        let mut compiler_crates = HashSet::new();\n+        for root_crate in &[\"rustc\", \"rustc_driver\"] {\n+            let interned_root_crate = INTERNER.intern_str(root_crate);\n+            find_compiler_crates(&build, &interned_root_crate, &mut compiler_crates);\n+        }\n+\n+        for krate in &compiler_crates {\n+            cargo.arg(\"-p\").arg(krate);\n+        }\n \n         build.run(&mut cargo);\n         cp_r(&my_out, &out);\n     }\n }\n \n+fn find_compiler_crates(\n+    build: &Build,\n+    name: &Interned<String>,\n+    crates: &mut HashSet<Interned<String>>\n+) {\n+    // Add current crate.\n+    crates.insert(*name);\n+\n+    // Look for dependencies.\n+    for dep in build.crates.get(name).unwrap().deps.iter() {\n+        if build.crates.get(dep).unwrap().is_local(build) {\n+            find_compiler_crates(build, dep, crates);\n+        }\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct ErrorIndex {\n     target: Interned<String>,"}]}