{"sha": "88f03743b0e82fb25cd18f5e5503b03fb65ce0ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZjAzNzQzYjBlODJmYjI1Y2QxOGY1ZTU1MDNiMDNmYjY1Y2UwZWQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-07T20:49:01Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-07T22:13:35Z"}, "message": "Comments only: annotate FIXMEs", "tree": {"sha": "1867ccd4f8a19a4d5b5f9e25892f00701af081c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1867ccd4f8a19a4d5b5f9e25892f00701af081c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88f03743b0e82fb25cd18f5e5503b03fb65ce0ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88f03743b0e82fb25cd18f5e5503b03fb65ce0ed", "html_url": "https://github.com/rust-lang/rust/commit/88f03743b0e82fb25cd18f5e5503b03fb65ce0ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88f03743b0e82fb25cd18f5e5503b03fb65ce0ed/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ee0137018f6e0a20b07e4192be703d0864e6b13", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ee0137018f6e0a20b07e4192be703d0864e6b13", "html_url": "https://github.com/rust-lang/rust/commit/9ee0137018f6e0a20b07e4192be703d0864e6b13"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "a32983b79663dd556cb9acf85162a2553d2873e9", "filename": "src/rustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f03743b0e82fb25cd18f5e5503b03fb65ce0ed/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f03743b0e82fb25cd18f5e5503b03fb65ce0ed/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=88f03743b0e82fb25cd18f5e5503b03fb65ce0ed", "patch": "@@ -136,7 +136,7 @@ fn mk_closure_tys(tcx: ty::ctxt,\n         }];\n     }\n     let bound_data_ty = ty::mk_tup(tcx, bound_tys);\n-    // FIXME[mono] remove tuple of tydescs from closure types\n+    // FIXME[mono] remove tuple of tydescs from closure types (#2531)\n     let cdata_ty = ty::mk_tup(tcx, [ty::mk_tup(tcx, []),\n                                     bound_data_ty]);\n     #debug[\"cdata_ty=%s\", ty_to_str(tcx, cdata_ty)];"}, {"sha": "9cae9f37debf2c2137940e5767a016a4e229dfd6", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f03743b0e82fb25cd18f5e5503b03fb65ce0ed/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f03743b0e82fb25cd18f5e5503b03fb65ce0ed/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=88f03743b0e82fb25cd18f5e5503b03fb65ce0ed", "patch": "@@ -374,7 +374,7 @@ type block = @{\n const first_real_arg: uint = 2u;\n \n // FIXME move blocks to a class once those are finished, and simply use\n-// option<block> for this.\n+// option<block> for this. (#2532)\n enum block_parent { parent_none, parent_some(block), }\n \n type result = {bcx: block, val: ValueRef};"}, {"sha": "508a7b87716cb9e8023234943ab0c8fe1339d694", "filename": "src/rustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f03743b0e82fb25cd18f5e5503b03fb65ce0ed/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f03743b0e82fb25cd18f5e5503b03fb65ce0ed/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=88f03743b0e82fb25cd18f5e5503b03fb65ce0ed", "patch": "@@ -533,6 +533,8 @@ fn create_ty(_cx: @crate_ctxt, _t: ty::t, _ty: @ast::ty)\n      * needed. It is only done to track spans, but you will not get the\n      * right spans anyway -- types tend to refer to stuff defined\n      * elsewhere, not be self-contained.\n+     *\n+     * See Issue #2012\n      */\n \n     fail;\n@@ -649,7 +651,7 @@ fn create_local_var(bcx: block, local: @ast::local)\n \n     let name = alt local.node.pat.node {\n       ast::pat_ident(pth, _) { ast_util::path_to_ident(pth) }\n-      // FIXME this should be handled\n+      // FIXME this should be handled (#2533)\n       _ { fail \"no single variable name for local\"; }\n     };\n     let loc = codemap::lookup_char_pos(cx.sess.codemap,"}, {"sha": "044a05b3b0bd45364507b7cc6f2afc817eae4bc6", "filename": "src/rustc/middle/trans/impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f03743b0e82fb25cd18f5e5503b03fb65ce0ed/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f03743b0e82fb25cd18f5e5503b03fb65ce0ed/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs?ref=88f03743b0e82fb25cd18f5e5503b03fb65ce0ed", "patch": "@@ -148,7 +148,7 @@ fn trans_iface_callee(bcx: block, val: ValueRef,\n     let vtable = Load(bcx, PointerCast(bcx, GEPi(bcx, val, [0u, 0u]),\n                                        T_ptr(T_ptr(T_vtable()))));\n     let box = Load(bcx, GEPi(bcx, val, [0u, 1u]));\n-    // FIXME[impl] I doubt this is alignment-safe\n+    // FIXME[impl] I doubt this is alignment-safe (#2534)\n     let self = GEPi(bcx, box, [0u, abi::box_field_body]);\n     let env = self_env(self, ty::mk_opaque_box(bcx.tcx()), some(box));\n     let llfty = type_of::type_of_fn_from_ty(ccx, callee_ty);"}, {"sha": "9dec0e8dfb07d2fab1162927d99ce144868fd8a1", "filename": "src/rustc/middle/trans/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f03743b0e82fb25cd18f5e5503b03fb65ce0ed/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f03743b0e82fb25cd18f5e5503b03fb65ce0ed/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs?ref=88f03743b0e82fb25cd18f5e5503b03fb65ce0ed", "patch": "@@ -701,7 +701,7 @@ fn trans_native_mod(ccx: @crate_ctxt,\n     }\n \n     // FIXME this is very shaky and probably gets ABIs wrong all over\n-    // the place\n+    // the place (#2535)\n     fn build_direct_fn(ccx: @crate_ctxt, decl: ValueRef,\n                        item: @ast::native_item, tys: @c_stack_tys,\n                        cc: lib::llvm::CallConv) {"}, {"sha": "03960fb48f4f2ba6eddbb318d15411ebdc690fd7", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88f03743b0e82fb25cd18f5e5503b03fb65ce0ed/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f03743b0e82fb25cd18f5e5503b03fb65ce0ed/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=88f03743b0e82fb25cd18f5e5503b03fb65ce0ed", "patch": "@@ -495,6 +495,7 @@ fn gen_enum_shapes(ccx: @crate_ctxt) -> ValueRef {\n \n     ret mk_global(ccx, \"tag_shapes\", C_bytes(header), true);\n \n+/* tjc: Not annotating FIXMEs in this module because of #1498 */\n     fn largest_variants(ccx: @crate_ctxt,\n                         variants: @[ty::variant_info]) -> [uint] {\n         // Compute the minimum and maximum size and alignment for each"}, {"sha": "e53b5ff4886d9be7b4a43e831048e2368ca75a9c", "filename": "src/rustc/middle/trans/tvec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88f03743b0e82fb25cd18f5e5503b03fb65ce0ed/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f03743b0e82fb25cd18f5e5503b03fb65ce0ed/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=88f03743b0e82fb25cd18f5e5503b03fb65ce0ed", "patch": "@@ -60,7 +60,7 @@ fn alloc_uniq_raw(bcx: block, unit_ty: ty::t,\n     let llunitty = type_of::type_of(ccx, unit_ty);\n     let llvecty = T_vec(ccx, llunitty);\n     let vecsize = Add(bcx, alloc, llsize_of(ccx, llvecty));\n-    let vecbodyty = unit_ty; // FIXME: This is not the correct type\n+    let vecbodyty = unit_ty; // FIXME: This is not the correct type (#2536)\n     let {box, body} = base::malloc_unique_dyn(bcx, vecbodyty, vecsize);\n     let boxptr = PointerCast(bcx, box,\n                              T_unique_ptr(T_unique(bcx.ccx(), llvecty)));\n@@ -93,7 +93,7 @@ fn duplicate_uniq(bcx: block, vptr: ValueRef, vec_ty: ty::t) -> result {\n     let unit_ty = ty::sequence_element_type(bcx.tcx(), vec_ty);\n     let llunitty = type_of::type_of(ccx, unit_ty);\n     let llvecty = T_vec(ccx, llunitty);\n-    let vecbodyty = unit_ty; // FIXME: This is not the correct type\n+    let vecbodyty = unit_ty; // FIXME: This is not the correct type (#2536)\n     let {box: newptr, body: new_body_ptr} =\n         base::malloc_unique_dyn(bcx, vecbodyty, size);\n     let newptr = PointerCast(bcx, newptr,\n@@ -428,7 +428,7 @@ fn iter_vec_raw(bcx: block, data_ptr: ValueRef, vec_ty: ty::t,\n \n     // Calculate the last pointer address we want to handle.\n     // FIXME: Optimize this when the size of the unit type is statically\n-    // known to not use pointer casts, which tend to confuse LLVM.\n+    // known to not use pointer casts, which tend to confuse LLVM. (#2536)\n     let data_end_ptr = pointer_add(bcx, data_ptr, fill);\n \n     // Now perform the iteration."}, {"sha": "22bf174a033b386e96cfc22be9dc07e589209c13", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f03743b0e82fb25cd18f5e5503b03fb65ce0ed/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f03743b0e82fb25cd18f5e5503b03fb65ce0ed/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=88f03743b0e82fb25cd18f5e5503b03fb65ce0ed", "patch": "@@ -183,7 +183,7 @@ fn mark_for_expr(cx: ctx, e: @expr) {\n       }\n       expr_index(base, _) | expr_field(base, _, _) {\n         // FIXME could be more careful and not count fields\n-        // after the chosen field\n+        // after the chosen field (#2537)\n         let base_ty = ty::node_id_to_type(cx.ccx.tcx, base.id);\n         type_needs(cx, use_repr, ty::type_autoderef(cx.ccx.tcx, base_ty));\n "}]}