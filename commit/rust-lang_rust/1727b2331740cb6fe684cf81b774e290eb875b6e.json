{"sha": "1727b2331740cb6fe684cf81b774e290eb875b6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MjdiMjMzMTc0MGNiNmZlNjg0Y2Y4MWI3NzRlMjkwZWI4NzViNmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-11T05:41:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-03-11T05:41:41Z"}, "message": "Auto merge of #40432 - alexcrichton:rollup, r=alexcrichton\n\nRollup of 38 pull requests\n\n- Successful merges: #39202, #39820, #39918, #39921, #40092, #40146, #40199, #40225, #40239, #40257, #40259, #40261, #40277, #40278, #40287, #40297, #40311, #40315, #40319, #40324, #40336, #40340, #40344, #40345, #40367, #40369, #40372, #40373, #40379, #40385, #40386, #40389, #40400, #40404, #40410, #40422, #40423, #40424\n- Failed merges: #40220, #40329, #40426", "tree": {"sha": "9959a1db818c8149e66572d5d9619bd2a970cc3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9959a1db818c8149e66572d5d9619bd2a970cc3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1727b2331740cb6fe684cf81b774e290eb875b6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1727b2331740cb6fe684cf81b774e290eb875b6e", "html_url": "https://github.com/rust-lang/rust/commit/1727b2331740cb6fe684cf81b774e290eb875b6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1727b2331740cb6fe684cf81b774e290eb875b6e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71c058b3054b373bd13f68cd85d8b45adcb5f7d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/71c058b3054b373bd13f68cd85d8b45adcb5f7d5", "html_url": "https://github.com/rust-lang/rust/commit/71c058b3054b373bd13f68cd85d8b45adcb5f7d5"}, {"sha": "3493d91a18389d7548fa4079069cf2a75b872a64", "url": "https://api.github.com/repos/rust-lang/rust/commits/3493d91a18389d7548fa4079069cf2a75b872a64", "html_url": "https://github.com/rust-lang/rust/commit/3493d91a18389d7548fa4079069cf2a75b872a64"}], "stats": {"total": 1866, "additions": 968, "deletions": 898}, "files": [{"sha": "9bc2a6a70eb45471df4b3d90f5946a8676a1bbe8", "filename": ".gitmodules", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -22,7 +22,7 @@\n \tpath = src/doc/nomicon\n \turl = https://github.com/rust-lang-nursery/nomicon\n [submodule \"src/tools/cargo\"]\n-\tpath = src/tools/cargo\n+\tpath = cargo\n \turl = https://github.com/rust-lang/cargo\n [submodule \"reference\"]\n \tpath = src/doc/reference"}, {"sha": "7dd5f6efaf07de5dd97c27734d4591c3f5e6275d", "filename": ".travis.yml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -20,6 +20,7 @@ matrix:\n     - env: IMAGE=dist-armv7-aarch64-linux DEPLOY=1\n     - env: IMAGE=dist-freebsd DEPLOY=1\n     - env: IMAGE=dist-i586-gnu-i686-musl DEPLOY=1\n+    - env: IMAGE=dist-fuchsia DEPLOY=1\n     - env: IMAGE=dist-mips-linux DEPLOY=1\n     - env: IMAGE=dist-mips64-linux DEPLOY=1\n     - env: IMAGE=dist-powerpc-linux DEPLOY=1\n@@ -69,9 +70,7 @@ matrix:\n       osx_image: xcode8.2\n       install: >\n         travis_retry curl -o /usr/local/bin/sccache https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-apple-darwin &&\n-          chmod +x /usr/local/bin/sccache &&\n-          brew uninstall --ignore-dependencies openssl &&\n-          brew install openssl --universal --without-test\n+          chmod +x /usr/local/bin/sccache\n     - env: >\n         RUST_CHECK_TARGET=dist\n         RUST_CONFIGURE_ARGS=\"--target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-extended\"\n@@ -133,6 +132,7 @@ after_failure:\n       echo \"#### Build failed; Disk usage after running script:\";\n       df -h;\n       du . | sort -nr | head -n100\n+  - cat obj/tmp/sccache.log\n \n # Save tagged docker images we created and load them if they're available\n before_cache:"}, {"sha": "5f3b9c4c6a7be1f177d6024cb83d150b6479148a", "filename": "cargo", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -0,0 +1 @@\n+Subproject commit 5f3b9c4c6a7be1f177d6024cb83d150b6479148a"}, {"sha": "d8861dacafac1091c3deb54ab211f54bc3d4e058", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/configure", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -512,7 +512,7 @@ case $CFG_CPUTYPE in\n         CFG_OSTYPE=\"${CFG_OSTYPE}eabihf\"\n         ;;\n \n-    armv7l)\n+    armv7l | armv8l)\n         CFG_CPUTYPE=armv7\n         CFG_OSTYPE=\"${CFG_OSTYPE}eabihf\"\n         ;;"}, {"sha": "6dc71e8b602db46269af3a242531e8db205d8e05", "filename": "src/Cargo.lock", "status": "modified", "additions": 0, "deletions": 666, "changes": 666, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -6,23 +6,6 @@ dependencies = [\n  \"libc 0.0.0\",\n ]\n \n-[[package]]\n-name = \"advapi32-sys\"\n-version = \"0.2.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"aho-corasick\"\n-version = \"0.5.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"aho-corasick\"\n version = \"0.6.2\"\n@@ -90,11 +73,6 @@ dependencies = [\n  \"toml 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"bufstream\"\n-version = \"0.1.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"build-manifest\"\n version = \"0.1.0\"\n@@ -110,81 +88,10 @@ dependencies = [\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"cargo\"\n-version = \"0.18.0\"\n-dependencies = [\n- \"advapi32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"bufstream 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cargotest 0.1.0\",\n- \"crates-io 0.7.0\",\n- \"crossbeam 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"curl 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"docopt 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"env_logger 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"flate2 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"fs2 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"git2 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"git2-curl 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"glob 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"hamcrest 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"handlebars 0.25.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libgit2-sys 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"miow 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num_cpus 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"psapi-sys 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-serialize 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"semver 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 0.9.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_ignored 0.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"shell-escape 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tar 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"term 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"toml 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"cargotest\"\n-version = \"0.1.0\"\n-dependencies = [\n- \"bufstream 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cargo 0.18.0\",\n- \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"flate2 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"git2 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"hamcrest 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-serialize 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tar 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"term 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"cargotest2\"\n version = \"0.1.0\"\n \n-[[package]]\n-name = \"cfg-if\"\n-version = \"0.1.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"clap\"\n version = \"2.20.5\"\n@@ -240,58 +147,6 @@ dependencies = [\n name = \"core\"\n version = \"0.0.0\"\n \n-[[package]]\n-name = \"crates-io\"\n-version = \"0.7.0\"\n-dependencies = [\n- \"curl 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 0.9.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"crossbeam\"\n-version = \"0.2.10\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"curl\"\n-version = \"0.4.6\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"curl-sys 0.3.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-probe 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"curl-sys\"\n-version = \"0.3.10\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libz-sys 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"docopt\"\n-version = \"0.7.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"lazy_static 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-serialize 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"strsim 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"dtoa\"\n version = \"0.4.1\"\n@@ -334,48 +189,15 @@ dependencies = [\n  \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"flate2\"\n-version = \"0.2.17\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"miniz-sys 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"fmt_macros\"\n version = \"0.0.0\"\n \n-[[package]]\n-name = \"foreign-types\"\n-version = \"0.2.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"fs2\"\n-version = \"0.4.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"gcc\"\n version = \"0.3.43\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"gdi32-sys\"\n-version = \"0.2.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"getopts\"\n version = \"0.0.0\"\n@@ -385,48 +207,10 @@ name = \"getopts\"\n version = \"0.2.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"git2\"\n-version = \"0.6.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libgit2-sys 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-probe 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"git2-curl\"\n-version = \"0.7.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"curl 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"git2 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"glob\"\n-version = \"0.2.11\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"graphviz\"\n version = \"0.0.0\"\n \n-[[package]]\n-name = \"hamcrest\"\n-version = \"0.1.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"num 0.1.36 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 0.1.80 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"handlebars\"\n version = \"0.25.1\"\n@@ -441,16 +225,6 @@ dependencies = [\n  \"serde_json 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"idna\"\n-version = \"0.1.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"matches 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-bidi 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-normalization 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"itoa\"\n version = \"0.3.1\"\n@@ -482,43 +256,6 @@ name = \"libc\"\n version = \"0.2.20\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"libgit2-sys\"\n-version = \"0.6.7\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"cmake 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"curl-sys 0.3.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libssh2-sys 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libz-sys 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"libssh2-sys\"\n-version = \"0.2.5\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"cmake 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libz-sys 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"libz-sys\"\n-version = \"1.0.13\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"linkchecker\"\n version = \"0.1.0\"\n@@ -532,11 +269,6 @@ name = \"log\"\n version = \"0.3.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"matches\"\n-version = \"0.1.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"mdbook\"\n version = \"0.0.17\"\n@@ -554,14 +286,6 @@ dependencies = [\n  \"toml 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"memchr\"\n-version = \"0.1.11\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"memchr\"\n version = \"1.0.1\"\n@@ -570,99 +294,6 @@ dependencies = [\n  \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"miniz-sys\"\n-version = \"0.1.9\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"miow\"\n-version = \"0.2.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"net2 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"net2\"\n-version = \"0.2.26\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"cfg-if 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"num\"\n-version = \"0.1.36\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"num-bigint 0.1.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-complex 0.1.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-integer 0.1.32 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-iter 0.1.32 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-rational 0.1.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-traits 0.1.36 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"num-bigint\"\n-version = \"0.1.35\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"num-integer 0.1.32 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-traits 0.1.36 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-serialize 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"num-complex\"\n-version = \"0.1.35\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"num-traits 0.1.36 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-serialize 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"num-integer\"\n-version = \"0.1.32\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"num-traits 0.1.36 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"num-iter\"\n-version = \"0.1.32\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"num-integer 0.1.32 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-traits 0.1.36 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"num-rational\"\n-version = \"0.1.35\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"num-bigint 0.1.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-integer 0.1.32 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"num-traits 0.1.36 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-serialize 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"num-traits\"\n version = \"0.1.36\"\n@@ -676,48 +307,11 @@ dependencies = [\n  \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"num_cpus\"\n-version = \"1.2.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"open\"\n version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"openssl\"\n-version = \"0.9.7\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"foreign-types 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"openssl-sys 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"openssl-probe\"\n-version = \"0.1.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"openssl-sys\"\n-version = \"0.9.7\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"gdi32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"user32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"panic_abort\"\n version = \"0.0.0\"\n@@ -741,11 +335,6 @@ name = \"pest\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"pkg-config\"\n-version = \"0.3.9\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"proc_macro\"\n version = \"0.0.0\"\n@@ -762,15 +351,6 @@ dependencies = [\n  \"syntax_pos 0.0.0\",\n ]\n \n-[[package]]\n-name = \"psapi-sys\"\n-version = \"0.1.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"pulldown-cmark\"\n version = \"0.0.8\"\n@@ -793,38 +373,13 @@ name = \"quick-error\"\n version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"quote\"\n-version = \"0.3.14\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"rand\"\n version = \"0.0.0\"\n dependencies = [\n  \"core 0.0.0\",\n ]\n \n-[[package]]\n-name = \"rand\"\n-version = \"0.3.15\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"regex\"\n-version = \"0.1.80\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"aho-corasick 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex-syntax 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"thread_local 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"utf8-ranges 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"regex\"\n version = \"0.2.1\"\n@@ -837,11 +392,6 @@ dependencies = [\n  \"utf8-ranges 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"regex-syntax\"\n-version = \"0.3.9\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"regex-syntax\"\n version = \"0.4.0\"\n@@ -1218,50 +768,11 @@ dependencies = [\n  \"syntax_pos 0.0.0\",\n ]\n \n-[[package]]\n-name = \"semver\"\n-version = \"0.6.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"semver-parser\"\n-version = \"0.7.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"serde\"\n version = \"0.9.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"serde_codegen_internals\"\n-version = \"0.14.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"syn 0.11.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"serde_derive\"\n-version = \"0.9.10\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"quote 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_codegen_internals 0.14.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.11.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"serde_ignored\"\n-version = \"0.0.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"serde 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"serde_json\"\n version = \"0.9.7\"\n@@ -1277,11 +788,6 @@ dependencies = [\n name = \"serialize\"\n version = \"0.0.0\"\n \n-[[package]]\n-name = \"shell-escape\"\n-version = \"0.1.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"std\"\n version = \"0.0.0\"\n@@ -1318,24 +824,6 @@ name = \"strsim\"\n version = \"0.6.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"syn\"\n-version = \"0.11.8\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"quote 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"synom 0.11.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"synom\"\n-version = \"0.11.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"syntax\"\n version = \"0.0.0\"\n@@ -1367,36 +855,10 @@ dependencies = [\n  \"serialize 0.0.0\",\n ]\n \n-[[package]]\n-name = \"tar\"\n-version = \"0.4.10\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"tempdir\"\n-version = \"0.3.5\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"rand 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"term\"\n version = \"0.0.0\"\n \n-[[package]]\n-name = \"term\"\n-version = \"0.4.5\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"term_size\"\n version = \"0.2.3\"\n@@ -1415,15 +877,6 @@ dependencies = [\n  \"term 0.0.0\",\n ]\n \n-[[package]]\n-name = \"thread-id\"\n-version = \"2.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"thread-id\"\n version = \"3.0.0\"\n@@ -1433,14 +886,6 @@ dependencies = [\n  \"libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"thread_local\"\n-version = \"0.2.7\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"thread-id 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"thread_local\"\n version = \"0.3.3\"\n@@ -1470,19 +915,6 @@ dependencies = [\n  \"serde 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"unicode-bidi\"\n-version = \"0.2.5\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"matches 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"unicode-normalization\"\n-version = \"0.1.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"unicode-segmentation\"\n version = \"1.1.0\"\n@@ -1493,11 +925,6 @@ name = \"unicode-width\"\n version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"unicode-xid\"\n-version = \"0.0.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"unreachable\"\n version = \"0.1.1\"\n@@ -1506,29 +933,6 @@ dependencies = [\n  \"void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"url\"\n-version = \"1.4.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"idna 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"matches 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"user32-sys\"\n-version = \"0.2.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"utf8-ranges\"\n-version = \"0.1.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"utf8-ranges\"\n version = \"1.0.0\"\n@@ -1554,119 +958,49 @@ name = \"winapi-build\"\n version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"ws2_32-sys\"\n-version = \"0.2.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [metadata]\n-\"checksum advapi32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e06588080cb19d0acb6739808aafa5f26bfb2ca015b2b6370028b44cf7cb8a9a\"\n-\"checksum aho-corasick 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ca972c2ea5f742bfce5687b9aef75506a764f61d37f8f649047846a9686ddb66\"\n \"checksum aho-corasick 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0638fd549427caa90c499814196d1b9e3725eb4d15d7339d6de073a680ed0ca2\"\n \"checksum ansi_term 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"23ac7c30002a5accbf7e8987d0632fa6de155b7c3d39d0067317a391e00a2ef6\"\n \"checksum bitflags 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4f67931368edf3a9a51d29886d245f1c3db2f1ef0dcc9e35ff70341b78c10d23\"\n \"checksum bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aad18937a628ec6abcd26d1489012cc0e18c21798210f491af69ded9b881106d\"\n-\"checksum bufstream 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b48dbe2ff0e98fa2f03377d204a9637d3c9816cd431bfe05a8abbd0ea11d074\"\n-\"checksum cfg-if 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"de1e760d7b6535af4241fca8bd8adf68e2e7edacc6b29f5d399050c5e48cf88c\"\n \"checksum clap 2.20.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7db281b0520e97fbd15cd615dcd8f8bcad0c26f5f7d5effe705f090f39e9a758\"\n \"checksum cmake 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e1acc68a3f714627af38f9f5d09706a28584ba60dfe2cca68f40bf779f941b25\"\n-\"checksum crossbeam 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0c5ea215664ca264da8a9d9c3be80d2eaf30923c259d03e870388eb927508f97\"\n-\"checksum curl 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c90e1240ef340dd4027ade439e5c7c2064dd9dc652682117bd50d1486a3add7b\"\n-\"checksum curl-sys 0.3.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c0d909dc402ae80b6f7b0118c039203436061b9d9a3ca5d2c2546d93e0a61aaa\"\n-\"checksum docopt 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab32ea6e284d87987066f21a9e809a73c14720571ef34516f0890b3d355ccfd8\"\n \"checksum dtoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"80c8b71fd71146990a9742fc06dcbbde19161a267e0ad4e572c35162f4578c90\"\n \"checksum env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15abd780e45b3ea4f76b4e9a26ff4843258dd8a3eed2775a0e7368c2e7936c2f\"\n \"checksum env_logger 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"99971fb1b635fe7a0ee3c4d065845bb93cca80a23b5613b5613391ece5de4144\"\n \"checksum filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5363ab8e4139b8568a6237db5248646e5a8a2f89bd5ccb02092182b11fd3e922\"\n-\"checksum flate2 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4e4d0c15ef829cbc1b7cda651746be19cceeb238be7b1049227b14891df9e25\"\n-\"checksum foreign-types 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3e4056b9bd47f8ac5ba12be771f77a0dae796d1bbaaf5fd0b9c2d38b69b8a29d\"\n-\"checksum fs2 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"34edaee07555859dc13ca387e6ae05686bb4d0364c95d649b6dab959511f4baf\"\n \"checksum gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c07c758b972368e703a562686adb39125707cc1ef3399da8c019fc6c2498a75d\"\n-\"checksum gdi32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0912515a8ff24ba900422ecda800b52f4016a56251922d397c576bf92c690518\"\n \"checksum getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9047cfbd08a437050b363d35ef160452c5fe8ea5187ae0a624708c91581d685\"\n-\"checksum git2 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"046ae03385257040b2a35e56d9669d950dd911ba2bf48202fbef73ee6aab27b2\"\n-\"checksum git2-curl 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"68676bc784bf0bef83278898929bf64a251e87c0340723d0b93fa096c9c5bf8e\"\n-\"checksum glob 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8be18de09a56b60ed0edf84bc9df007e30040691af7acd1c41874faac5895bfb\"\n-\"checksum hamcrest 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bf088f042a467089e9baa4972f57f9247e42a0cc549ba264c7a04fbb8ecb89d4\"\n \"checksum handlebars 0.25.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b2249f6f0dc5a3bb2b3b1a8f797dfccbc4b053344d773d654ad565e51427d335\"\n-\"checksum idna 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1053236e00ce4f668aeca4a769a09b3bf5a682d802abd6f3cb39374f6b162c11\"\n \"checksum itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eb2f404fbc66fd9aac13e998248505e7ecb2ad8e44ab6388684c5fb11c6c251c\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n \"checksum lazy_static 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6abe0ee2e758cd6bc8a2cd56726359007748fbf4128da998b65d0b70f881e19b\"\n \"checksum libc 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\" = \"684f330624d8c3784fb9558ca46c4ce488073a8d22450415c5eb4f4cfb0d11b5\"\n-\"checksum libgit2-sys 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d951fd5eccae07c74e8c2c1075b05ea1e43be7f8952245af8c2840d1480b1d95\"\n-\"checksum libssh2-sys 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"91e135645c2e198a39552c8c7686bb5b83b1b99f64831c040a6c2798a1195934\"\n-\"checksum libz-sys 1.0.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e5ee912a45d686d393d5ac87fac15ba0ba18daae14e8e7543c63ebf7fb7e970c\"\n \"checksum log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab83497bf8bf4ed2a74259c1c802351fcd67a65baa86394b6ba73c36f4838054\"\n-\"checksum matches 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"efd7622e3022e1a6eaa602c4cea8912254e5582c9c692e9167714182244801b1\"\n \"checksum mdbook 0.0.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dbba458ca886cb082d026afd704eeeeb0531f7e4ffd6c619f72dc309c1c18fe4\"\n-\"checksum memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d8b629fb514376c675b98c1421e80b151d3817ac42d7c667717d282761418d20\"\n \"checksum memchr 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1dbccc0e46f1ea47b9f17e6d67c5a96bd27030519c519c9c91327e31275a47b4\"\n-\"checksum miniz-sys 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"28eaee17666671fa872e567547e8428e83308ebe5808cdf6a0e28397dbe2c726\"\n-\"checksum miow 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a78d2605eb97302c10cf944b8d96b0a2a890c52957caf92fcd1f24f69049579\"\n-\"checksum net2 0.2.26 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5edf9cb6be97212423aed9413dd4729d62b370b5e1c571750e882cebbbc1e3e2\"\n-\"checksum num 0.1.36 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bde7c03b09e7c6a301ee81f6ddf66d7a28ec305699e3d3b056d2fc56470e3120\"\n-\"checksum num-bigint 0.1.35 (registry+https://github.com/rust-lang/crates.io-index)\" = \"88b14378471f7c2adc5262f05b4701ef53e8da376453a8d8fee48e51db745e49\"\n-\"checksum num-complex 0.1.35 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f0c78e054dd19c3fd03419ade63fa661e9c49bb890ce3beb4eee5b7baf93f92f\"\n-\"checksum num-integer 0.1.32 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fb24d9bfb3f222010df27995441ded1e954f8f69cd35021f6bef02ca9552fb92\"\n-\"checksum num-iter 0.1.32 (registry+https://github.com/rust-lang/crates.io-index)\" = \"287a1c9969a847055e1122ec0ea7a5c5d6f72aad97934e131c83d5c08ab4e45c\"\n-\"checksum num-rational 0.1.35 (registry+https://github.com/rust-lang/crates.io-index)\" = \"54ff603b8334a72fbb27fe66948aac0abaaa40231b3cecd189e76162f6f38aaf\"\n \"checksum num-traits 0.1.36 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a16a42856a256b39c6d3484f097f6713e14feacd9bfb02290917904fae46c81c\"\n \"checksum num_cpus 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cee7e88156f3f9e19bdd598f8d6c9db7bf4078f99f8381f43a55b09648d1a6e3\"\n-\"checksum num_cpus 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a225d1e2717567599c24f88e49f00856c6e825a12125181ee42c4257e3688d39\"\n \"checksum open 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3478ed1686bd1300c8a981a940abc92b06fac9cbef747f4c668d4e032ff7b842\"\n-\"checksum openssl 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f9871ecf7629da3760599e3e547d35940cff3cead49159b49f81cd1250f24f1d\"\n-\"checksum openssl-probe 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"756d49c8424483a3df3b5d735112b4da22109ced9a8294f1f5cdf80fb3810919\"\n-\"checksum openssl-sys 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5dd48381e9e8a6dce9c4c402db143b2e243f5f872354532f7a009c289b3998ca\"\n \"checksum pest 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a6dda33d67c26f0aac90d324ab2eb7239c819fc7b2552fe9faa4fe88441edc8\"\n-\"checksum pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a8b4c6b8165cd1a1cd4b9b120978131389f64bdaf456435caa41e630edba903\"\n-\"checksum psapi-sys 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"abcd5d1a07d360e29727f757a9decb3ce8bc6e0efa8969cfaad669a8317a2478\"\n \"checksum pulldown-cmark 0.0.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1058d7bb927ca067656537eec4e02c2b4b70eaaa129664c5b90c111e20326f41\"\n \"checksum quick-error 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0aad603e8d7fb67da22dbdf1f4b826ce8829e406124109e73cf1b2454b93a71c\"\n-\"checksum quote 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7375cf7ad34a92e8fd18dd9c42f58b9a11def59ab48bec955bf359a788335592\"\n-\"checksum rand 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"022e0636ec2519ddae48154b028864bdce4eaf7d35226ab8e65c611be97b189d\"\n-\"checksum regex 0.1.80 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4fd4ace6a8cf7860714a2c2280d6c1f7e6a413486c13298bbc86fd3da019402f\"\n \"checksum regex 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4278c17d0f6d62dfef0ab00028feb45bd7d2102843f80763474eeb1be8a10c01\"\n-\"checksum regex-syntax 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f9ec002c35e86791825ed294b50008eea9ddfc8def4420124fbc6b08db834957\"\n \"checksum regex-syntax 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2f9191b1f57603095f105d317e375d19b1c9c5c3185ea9633a99a6dcbed04457\"\n \"checksum rustc-serialize 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"237546c689f20bb44980270c73c3b9edd0891c1be49cc1274406134a66d3957b\"\n-\"checksum semver 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a3186ec9e65071a2095434b1f5bb24838d4e8e130f584c790f6033c79943537\"\n-\"checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n \"checksum serde 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1e0ed773960f90a78567fcfbe935284adf50c5d7cf119aa2cf43bb0b4afa69bb\"\n-\"checksum serde_codegen_internals 0.14.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4d52006899f910528a10631e5b727973fe668f3228109d1707ccf5bad5490b6e\"\n-\"checksum serde_derive 0.9.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"789ee9f3cd78c850948b94121020147f5220b47dafbf230d7098a93a58f726cf\"\n-\"checksum serde_ignored 0.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4b3f5576874721d14690657e9f0ed286e72a52be2f6fdc0cf2f024182bd8f64\"\n \"checksum serde_json 0.9.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2eb96d30e4e6f9fc52e08f51176d078b6f79b981dc3ed4134f7b850be9f446a8\"\n-\"checksum shell-escape 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dd5cc96481d54583947bfe88bf30c23d53f883c6cd0145368b69989d97b84ef8\"\n \"checksum strsim 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b4d15c810519a91cf877e7e36e63fe068815c678181439f2f29e2562147c3694\"\n-\"checksum syn 0.11.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"37c279fb816210c9bb28b2c292664581e7b87b4561e86b94df462664d8620bb8\"\n-\"checksum synom 0.11.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"27e31aa4b09b9f4cb12dff3c30ba503e17b1a624413d764d32dab76e3920e5bc\"\n-\"checksum tar 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1eb3bf6ec92843ca93f4fcfb5fc6dfe30534815b147885db4b5759b8e2ff7d52\"\n-\"checksum tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"87974a6f5c1dfb344d733055601650059a3363de2a6104819293baff662132d6\"\n-\"checksum term 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d168af3930b369cfe245132550579d47dfd873d69470755a19c2c6568dbbd989\"\n \"checksum term_size 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"07b6c1ac5b3fffd75073276bca1ceed01f67a28537097a2a9539e116e50fb21a\"\n-\"checksum thread-id 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a9539db560102d1cef46b8b78ce737ff0bb64e7e18d35b2a5688f7d097d0ff03\"\n \"checksum thread-id 3.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4437c97558c70d129e40629a5b385b3fb1ffac301e63941335e4d354081ec14a\"\n-\"checksum thread_local 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8576dbbfcaef9641452d5cf0df9b0e7eeab7694956dd33bb61515fb8f18cfdd5\"\n \"checksum thread_local 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c85048c6260d17cf486ceae3282d9fb6b90be220bf5b28c400f5485ffc29f0c7\"\n \"checksum toml 0.1.30 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0590d72182e50e879c4da3b11c6488dae18fccb1ae0c7a3eda18e16795844796\"\n \"checksum toml 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"08272367dd2e766db3fa38f068067d17aa6a9dfd7259af24b3927db92f1e0c2f\"\n-\"checksum unicode-bidi 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3a078ebdd62c0e71a709c3d53d2af693fe09fe93fbff8344aebe289b78f9032\"\n-\"checksum unicode-normalization 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e28fa37426fceeb5cf8f41ee273faa7c82c47dc8fba5853402841e665fcd86ff\"\n \"checksum unicode-segmentation 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"18127285758f0e2c6cf325bb3f3d138a12fee27de4f23e146cd6a179f26c2cf3\"\n \"checksum unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bf3a113775714a22dcb774d8ea3655c53a32debae63a063acc00a91cc586245f\"\n-\"checksum unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f860d7d29cf02cb2f3f359fd35991af3d30bac52c57d265a3c461074cb4dc\"\n \"checksum unreachable 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1f2ae5ddb18e1c92664717616dd9549dde73f539f01bd7b77c2edb2446bdff91\"\n-\"checksum url 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f5ba8a749fb4479b043733416c244fa9d1d3af3d7c23804944651c8a448cb87e\"\n-\"checksum user32-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4ef4711d107b21b410a3a974b1204d9accc8b10dad75d8324b5d755de1617d47\"\n-\"checksum utf8-ranges 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1ca13c08c41c9c3e04224ed9ff80461d97e121589ff27c753a16cb10830ae0f\"\n \"checksum utf8-ranges 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"662fab6525a98beff2921d7f61a39e7d59e0b425ebc7d0d9e66d316e55124122\"\n \"checksum vec_map 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cac5efe5cb0fa14ec2f84f83c701c562ee63f6dcc680861b21d65c682adfb05f\"\n \"checksum void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6a02e4885ed3bc0f2de90ea6dd45ebcbb66dacffe03547fadbb0eeae2770887d\"\n \"checksum winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\"\n \"checksum winapi-build 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2d315eee3b34aca4797b2da6b13ed88266e6d612562a0c46390af8299fc699bc\"\n-\"checksum ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d59cefebd0c892fa2dd6de581e937301d8552cb44489cdff035c6187cb63fa5e\""}, {"sha": "0dafbb8428e3ebf6cd1d44d149805c914cff3e46", "filename": "src/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.toml?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -13,7 +13,6 @@ members = [\n   \"tools/build-manifest\",\n   \"tools/qemu-test-client\",\n   \"tools/qemu-test-server\",\n-  \"tools/cargo\",\n ]\n \n # Curiously, compiletest will segfault if compiled with opt-level=3 on 64-bit"}, {"sha": "4f41d337592b302ffe629ed192e0126d2fb3b383", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -465,7 +465,7 @@ def build_triple(self):\n             cputype = 'i686'\n         elif cputype in {'xscale', 'arm'}:\n             cputype = 'arm'\n-        elif cputype == 'armv7l':\n+        elif cputype in {'armv7l', 'armv8l'}:\n             cputype = 'arm'\n             ostype += 'eabihf'\n         elif cputype == 'aarch64':"}, {"sha": "68b3623a53f255243ade5a90f8b328b390405e58", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -550,7 +550,7 @@ fn find_tests(dir: &Path,\n         let filename = e.file_name().into_string().unwrap();\n         if (target.contains(\"windows\") && filename.ends_with(\".exe\")) ||\n            (!target.contains(\"windows\") && !filename.contains(\".\")) ||\n-           (target.contains(\"emscripten\") && filename.contains(\".js\")){\n+           (target.contains(\"emscripten\") && filename.ends_with(\".js\")) {\n             dst.push(e.path());\n         }\n     }"}, {"sha": "3459c1d2b8425f89385e2a8ccb4023daf08f6fe9", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -417,7 +417,10 @@ pub fn tool(build: &Build, stage: u32, target: &str, tool: &str) {\n     // build.clear_if_dirty(&out_dir, &libstd_stamp(build, stage, &host, target));\n \n     let mut cargo = build.cargo(&compiler, Mode::Tool, target, \"build\");\n-    let dir = build.src.join(\"src/tools\").join(tool);\n+    let mut dir = build.src.join(tool);\n+    if !dir.exists() {\n+        dir = build.src.join(\"src/tools\").join(tool);\n+    }\n     cargo.arg(\"--manifest-path\").arg(dir.join(\"Cargo.toml\"));\n \n     // We don't want to build tools dynamically as they'll be running across"}, {"sha": "87c35e0502ce6d853ce5ad0ff95e1668b9bacead", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -59,6 +59,7 @@ pub struct Config {\n     pub llvm_static_stdcpp: bool,\n     pub llvm_link_shared: bool,\n     pub llvm_targets: Option<String>,\n+    pub llvm_link_jobs: Option<u32>,\n \n     // rust codegen options\n     pub rust_optimize: bool,\n@@ -179,6 +180,7 @@ struct Llvm {\n     version_check: Option<bool>,\n     static_libstdcpp: Option<bool>,\n     targets: Option<String>,\n+    link_jobs: Option<u32>,\n }\n \n #[derive(RustcDecodable, Default, Clone)]\n@@ -333,6 +335,7 @@ impl Config {\n             set(&mut config.llvm_version_check, llvm.version_check);\n             set(&mut config.llvm_static_stdcpp, llvm.static_libstdcpp);\n             config.llvm_targets = llvm.targets.clone();\n+            config.llvm_link_jobs = llvm.link_jobs;\n         }\n \n         if let Some(ref rust) = toml.rust {"}, {"sha": "776bd729119e24458de1038d90252139159420a4", "filename": "src/bootstrap/config.toml.example", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Fbootstrap%2Fconfig.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Fbootstrap%2Fconfig.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.toml.example?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -53,6 +53,14 @@\n # Rust team and file an issue if you need assistance in porting!\n #targets = \"X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX\"\n \n+# Cap the number of parallel linker invocations when compiling LLVM.\n+# This can be useful when building LLVM with debug info, which significantly\n+# increases the size of binaries and consequently the memory required by\n+# each linker process.\n+# If absent or 0, linker invocations are treated like any other job and\n+# controlled by rustbuild's -j parameter.\n+#link-jobs = 0\n+\n # =============================================================================\n # General build configuration options\n # ============================================================================="}, {"sha": "5c4b718490c0cfe977d424ed8029254d76e75032", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -392,6 +392,7 @@ pub fn rust_src(build: &Build) {\n     let src_dirs = [\n         \"man\",\n         \"src\",\n+        \"cargo\",\n     ];\n \n     let filter_fn = move |path: &Path| {\n@@ -533,11 +534,11 @@ pub fn cargo(build: &Build, stage: u32, target: &str) {\n     println!(\"Dist cargo stage{} ({})\", stage, target);\n     let compiler = Compiler::new(stage, &build.config.build);\n \n-    let src = build.src.join(\"src/tools/cargo\");\n+    let src = build.src.join(\"cargo\");\n     let etc = src.join(\"src/etc\");\n-    let release_num = &build.crates[\"cargo\"].version;\n-    let name = format!(\"cargo-{}\", build.package_vers(release_num));\n-    let version = build.cargo_info.version(build, release_num);\n+    let release_num = build.cargo_release_num();\n+    let name = format!(\"cargo-{}\", build.package_vers(&release_num));\n+    let version = build.cargo_info.version(build, &release_num);\n \n     let tmp = tmpdir(build);\n     let image = tmp.join(\"cargo-image\");\n@@ -594,7 +595,7 @@ pub fn extended(build: &Build, stage: u32, target: &str) {\n     println!(\"Dist extended stage{} ({})\", stage, target);\n \n     let dist = distdir(build);\n-    let cargo_vers = &build.crates[\"cargo\"].version;\n+    let cargo_vers = build.cargo_release_num();\n     let rustc_installer = dist.join(format!(\"{}-{}.tar.gz\",\n                                             pkgname(build, \"rustc\"),\n                                             target));\n@@ -943,7 +944,7 @@ pub fn hash_and_sign(build: &Build) {\n     cmd.arg(distdir(build));\n     cmd.arg(today.trim());\n     cmd.arg(build.rust_package_vers());\n-    cmd.arg(build.cargo_info.version(build, &build.crates[\"cargo\"].version));\n+    cmd.arg(build.cargo_info.version(build, &build.cargo_release_num()));\n     cmd.arg(addr);\n \n     t!(fs::create_dir_all(distdir(build)));"}, {"sha": "4831b380837407e1407a98339f215055bbc139de", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -76,11 +76,12 @@ extern crate num_cpus;\n extern crate rustc_serialize;\n extern crate toml;\n \n-use std::collections::HashMap;\n use std::cmp;\n+use std::collections::HashMap;\n use std::env;\n use std::ffi::OsString;\n use std::fs::{self, File};\n+use std::io::Read;\n use std::path::{Component, PathBuf, Path};\n use std::process::Command;\n \n@@ -995,6 +996,21 @@ impl Build {\n         self.rust_info.version(self, channel::CFG_RELEASE_NUM)\n     }\n \n+    /// Returns the `a.b.c` version that Cargo is at.\n+    fn cargo_release_num(&self) -> String {\n+        let mut toml = String::new();\n+        t!(t!(File::open(self.src.join(\"cargo/Cargo.toml\"))).read_to_string(&mut toml));\n+        for line in toml.lines() {\n+            let prefix = \"version = \\\"\";\n+            let suffix = \"\\\"\";\n+            if line.starts_with(prefix) && line.ends_with(suffix) {\n+                return line[prefix.len()..line.len() - suffix.len()].to_string()\n+            }\n+        }\n+\n+        panic!(\"failed to find version in cargo's Cargo.toml\")\n+    }\n+\n     /// Returns whether unstable features should be enabled for the compiler\n     /// we're building.\n     fn unstable_features(&self) -> bool {"}, {"sha": "c13235b9c76804cb9bbb572091307b894c7e4f24", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -115,6 +115,12 @@ pub fn llvm(build: &Build, target: &str) {\n         cfg.define(\"LLVM_BUILD_32_BITS\", \"ON\");\n     }\n \n+    if let Some(num_linkers) = build.config.llvm_link_jobs {\n+        if num_linkers > 0 {\n+            cfg.define(\"LLVM_PARALLEL_LINK_JOBS\", num_linkers.to_string());\n+        }\n+    }\n+\n     // http://llvm.org/docs/HowToCrossCompileLLVM.html\n     if target != build.config.build {\n         // FIXME: if the llvm root for the build triple is overridden then we"}, {"sha": "a11726a57dbdd4ba06329d8af878ddd9e48b2777", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -559,7 +559,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     rules.build(\"tool-qemu-test-client\", \"src/tools/qemu-test-client\")\n          .dep(|s| s.name(\"libstd\"))\n          .run(move |s| compile::tool(build, s.stage, s.target, \"qemu-test-client\"));\n-    rules.build(\"tool-cargo\", \"src/tools/cargo\")\n+    rules.build(\"tool-cargo\", \"cargo\")\n          .dep(|s| s.name(\"libstd\"))\n          .dep(|s| s.stage(0).host(s.target).name(\"openssl\"))\n          .dep(move |s| {"}, {"sha": "25a47c5be1cb345c94da6eb18543691908c232f7", "filename": "src/ci/docker/dist-fuchsia/Dockerfile", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Fci%2Fdocker%2Fdist-fuchsia%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Fci%2Fdocker%2Fdist-fuchsia%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-fuchsia%2FDockerfile?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -0,0 +1,47 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update && apt-get install -y --no-install-recommends \\\n+  g++ \\\n+  make \\\n+  ninja-build \\\n+  file \\\n+  curl \\\n+  ca-certificates \\\n+  python2.7-dev \\\n+  git \\\n+  sudo \\\n+  bzip2 \\\n+  xz-utils \\\n+  swig \\\n+  libedit-dev \\\n+  libncurses5-dev\n+\n+RUN curl -L https://cmake.org/files/v3.8/cmake-3.8.0-rc1-Linux-x86_64.tar.gz | \\\n+      tar xzf - -C /usr/local --strip-components=1\n+\n+WORKDIR /tmp\n+COPY shared.sh build-toolchain.sh /tmp/\n+RUN /tmp/build-toolchain.sh\n+\n+RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n+    dpkg -i dumb-init_*.deb && \\\n+    rm dumb-init_*.deb\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n+\n+RUN curl -o /usr/local/bin/sccache \\\n+      https://s3.amazonaws.com/rust-lang-ci/rust-ci-mirror/2017-02-25-sccache-x86_64-unknown-linux-musl && \\\n+      chmod +x /usr/local/bin/sccache\n+\n+ENV \\\n+    AR_x86_64_unknown_fuchsia=x86_64-unknown-fuchsia-ar \\\n+    CC_x86_64_unknown_fuchsia=x86_64-unknown-fuchsia-clang \\\n+    CXX_x86_64_unknown_fuchsia=x86_64-unknown-fuchsia-clang++ \\\n+    AR_aarch64_unknown_fuchsia=aarch64-unknown-fuchsia-ar \\\n+    CC_aarch64_unknown_fuchsia=aarch64-unknown-fuchsia-clang \\\n+    CXX_aarch64_unknown_fuchsia=aarch64-unknown-fuchsia-clang++\n+\n+ENV TARGETS=x86_64-unknown-fuchsia\n+ENV TARGETS=$TARGETS,aarch64-unknown-fuchsia\n+\n+ENV RUST_CONFIGURE_ARGS --target=$TARGETS\n+ENV SCRIPT python2.7 ../x.py dist --target $TARGETS"}, {"sha": "cad73eee1e0130546bc34f574cde6500f15652de", "filename": "src/ci/docker/dist-fuchsia/build-toolchain.sh", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Fci%2Fdocker%2Fdist-fuchsia%2Fbuild-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Fci%2Fdocker%2Fdist-fuchsia%2Fbuild-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-fuchsia%2Fbuild-toolchain.sh?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -0,0 +1,116 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+source shared.sh\n+\n+# Download sources\n+SRCS=(\n+  \"https://fuchsia.googlesource.com/magenta magenta ac69119\"\n+  \"https://fuchsia.googlesource.com/third_party/llvm llvm 5463083\"\n+  \"https://fuchsia.googlesource.com/third_party/clang llvm/tools/clang 4ff7b4b\"\n+  \"https://fuchsia.googlesource.com/third_party/lld llvm/tools/lld fd465a3\"\n+  \"https://fuchsia.googlesource.com/third_party/lldb llvm/tools/lldb 6bb11f8\"\n+  \"https://fuchsia.googlesource.com/third_party/compiler-rt llvm/runtimes/compiler-rt 52d4ecc\"\n+  \"https://fuchsia.googlesource.com/third_party/libcxx llvm/runtimes/libcxx e891cc8\"\n+  \"https://fuchsia.googlesource.com/third_party/libcxxabi llvm/runtimes/libcxxabi f0f0257\"\n+  \"https://fuchsia.googlesource.com/third_party/libunwind llvm/runtimes/libunwind 50bddc1\"\n+)\n+\n+fetch() {\n+  mkdir -p $2\n+  pushd $2 > /dev/null\n+  curl -sL $1/+archive/$3.tar.gz | tar xzf -\n+  popd > /dev/null\n+}\n+\n+for i in \"${SRCS[@]}\"; do\n+  fetch $i\n+done\n+\n+# Build toolchain\n+cd llvm\n+mkdir build\n+cd build\n+hide_output cmake -GNinja \\\n+  -DFUCHSIA_SYSROOT=${PWD}/../../magenta/third_party/ulib/musl \\\n+  -DLLVM_ENABLE_LTO=OFF \\\n+  -DCLANG_BOOTSTRAP_PASSTHROUGH=LLVM_ENABLE_LTO \\\n+  -C ../tools/clang/cmake/caches/Fuchsia.cmake \\\n+  ..\n+hide_output ninja stage2-distribution\n+hide_output ninja stage2-install-distribution\n+cd ../..\n+\n+# Build sysroot\n+rm -rf llvm/runtimes/compiler-rt\n+./magenta/scripts/download-toolchain\n+\n+build_sysroot() {\n+  local arch=\"$1\"\n+\n+  case \"${arch}\" in\n+    x86_64) tgt=\"magenta-pc-x86-64\" ;;\n+    aarch64) tgt=\"magenta-qemu-arm64\" ;;\n+  esac\n+\n+  hide_output make -C magenta -j$(getconf _NPROCESSORS_ONLN) $tgt\n+  dst=/usr/local/${arch}-unknown-fuchsia\n+  mkdir -p $dst\n+  cp -r magenta/build-${tgt}/sysroot/include $dst/\n+  cp -r magenta/build-${tgt}/sysroot/lib $dst/\n+\n+  cd llvm\n+  mkdir build-runtimes-${arch}\n+  cd build-runtimes-${arch}\n+  hide_output cmake -GNinja \\\n+    -DCMAKE_C_COMPILER=clang \\\n+    -DCMAKE_CXX_COMPILER=clang++ \\\n+    -DCMAKE_AR=/usr/local/bin/llvm-ar \\\n+    -DCMAKE_RANLIB=/usr/local/bin/llvm-ranlib \\\n+    -DCMAKE_INSTALL_PREFIX= \\\n+    -DLLVM_MAIN_SRC_DIR=${PWD}/.. \\\n+    -DLLVM_BINARY_DIR=${PWD}/../build \\\n+    -DLLVM_ENABLE_WERROR=OFF \\\n+    -DCMAKE_BUILD_TYPE=Release \\\n+    -DLLVM_INCLUDE_TESTS=ON \\\n+    -DCMAKE_SYSTEM_NAME=Fuchsia \\\n+    -DCMAKE_C_COMPILER_TARGET=${arch}-fuchsia \\\n+    -DCMAKE_CXX_COMPILER_TARGET=${arch}-fuchsia \\\n+    -DUNIX=1 \\\n+    -DLIBCXX_HAS_MUSL_LIBC=ON \\\n+    -DLIBCXXABI_USE_LLVM_UNWINDER=ON \\\n+    -DCMAKE_SYSROOT=${dst} \\\n+    -DCMAKE_C_COMPILER_FORCED=TRUE \\\n+    -DCMAKE_CXX_COMPILER_FORCED=TRUE \\\n+    -DLLVM_ENABLE_LIBCXX=ON \\\n+    -DCMAKE_EXE_LINKER_FLAGS=\"-nodefaultlibs -lc\" \\\n+    -DCMAKE_SHARED_LINKER_FLAGS=\"$(clang --target=${arch}-fuchsia -print-libgcc-file-name)\" \\\n+    ../runtimes\n+  hide_output env DESTDIR=\"${dst}\" ninja install\n+  cd ../..\n+}\n+\n+build_sysroot \"x86_64\"\n+build_sysroot \"aarch64\"\n+\n+rm -rf magenta llvm\n+\n+for arch in x86_64 aarch64; do\n+  for tool in clang clang++; do\n+    cat >/usr/local/bin/${arch}-unknown-fuchsia-${tool} <<EOF\n+#!/bin/sh\n+${tool} --target=${arch}-unknown-fuchsia --sysroot=/usr/local/${arch}-unknown-fuchsia \"\\$@\"\n+EOF\n+    chmod +x /usr/local/bin/${arch}-unknown-fuchsia-${tool}\n+  done\n+  ln -s /usr/local/bin/llvm-ar /usr/local/bin/${arch}-unknown-fuchsia-ar\n+done"}, {"sha": "e26c6eb6645781c70b1948a53b8b5e1532d359d7", "filename": "src/ci/docker/dist-fuchsia/shared.sh", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Fci%2Fdocker%2Fdist-fuchsia%2Fshared.sh", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Fci%2Fdocker%2Fdist-fuchsia%2Fshared.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-fuchsia%2Fshared.sh?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -0,0 +1,25 @@\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+hide_output() {\n+  set +x\n+  on_err=\"\n+echo ERROR: An error was encountered with the build.\n+cat /tmp/build.log\n+exit 1\n+\"\n+  trap \"$on_err\" ERR\n+  bash -c \"while true; do sleep 30; echo \\$(date) - building ...; done\" &\n+  PING_LOOP_PID=$!\n+  \"$@\" &> /tmp/build.log\n+  trap - ERR\n+  kill $PING_LOOP_PID\n+  set -x\n+}"}, {"sha": "437041e0292cac7339a6ae0b884fd54683d5dc8d", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -30,13 +30,17 @@ retry docker \\\n objdir=$root_dir/obj\n \n mkdir -p $HOME/.cargo\n-mkdir -p $objdir\n+mkdir -p $objdir/tmp\n \n args=\n if [ \"$SCCACHE_BUCKET\" != \"\" ]; then\n     args=\"$args --env SCCACHE_BUCKET=$SCCACHE_BUCKET\"\n     args=\"$args --env AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID\"\n     args=\"$args --env AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY\"\n+    args=\"$args --env SCCACHE_ERROR_LOG=/tmp/sccache/sccache.log\"\n+    args=\"$args --env SCCACHE_LOG_LEVEL=debug\"\n+    args=\"$args --env RUST_LOG=sccache=debug\"\n+    args=\"$args --volume $objdir/tmp:/tmp/sccache\"\n else\n     mkdir -p $HOME/.cache/sccache\n     args=\"$args --env SCCACHE_DIR=/sccache --volume $HOME/.cache/sccache:/sccache\""}, {"sha": "43b0d72186a29233d45484a6ac033a4971a70559", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -225,6 +225,8 @@ impl<T: ?Sized> Drop for IntermediateBox<T> {\n impl<T> Box<T> {\n     /// Allocates memory on the heap and then places `x` into it.\n     ///\n+    /// This doesn't actually allocate if `T` is zero-sized.\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "1985be7f901c6889c2c763be7aa0190f81138cb0", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 161, "deletions": 26, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -22,7 +22,7 @@ use core::cmp::Ordering;\n use core::fmt;\n use core::iter::{repeat, FromIterator, FusedIterator};\n use core::mem;\n-use core::ops::{Index, IndexMut};\n+use core::ops::{Index, IndexMut, Place, Placer, InPlace};\n use core::ptr;\n use core::ptr::Shared;\n use core::slice;\n@@ -1087,14 +1087,7 @@ impl<T> VecDeque<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn push_front(&mut self, value: T) {\n-        if self.is_full() {\n-            let old_cap = self.cap();\n-            self.buf.double();\n-            unsafe {\n-                self.handle_cap_increase(old_cap);\n-            }\n-            debug_assert!(!self.is_full());\n-        }\n+        self.grow_if_necessary();\n \n         self.tail = self.wrap_sub(self.tail, 1);\n         let tail = self.tail;\n@@ -1117,14 +1110,7 @@ impl<T> VecDeque<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn push_back(&mut self, value: T) {\n-        if self.is_full() {\n-            let old_cap = self.cap();\n-            self.buf.double();\n-            unsafe {\n-                self.handle_cap_increase(old_cap);\n-            }\n-            debug_assert!(!self.is_full());\n-        }\n+        self.grow_if_necessary();\n \n         let head = self.head;\n         self.head = self.wrap_add(self.head, 1);\n@@ -1257,14 +1243,7 @@ impl<T> VecDeque<T> {\n     #[stable(feature = \"deque_extras_15\", since = \"1.5.0\")]\n     pub fn insert(&mut self, index: usize, value: T) {\n         assert!(index <= self.len(), \"index out of bounds\");\n-        if self.is_full() {\n-            let old_cap = self.cap();\n-            self.buf.double();\n-            unsafe {\n-                self.handle_cap_increase(old_cap);\n-            }\n-            debug_assert!(!self.is_full());\n-        }\n+        self.grow_if_necessary();\n \n         // Move the least number of elements in the ring buffer and insert\n         // the given object\n@@ -1762,11 +1741,74 @@ impl<T> VecDeque<T> {\n             self.truncate(len - del);\n         }\n     }\n+\n+    // This may panic or abort\n+    #[inline]\n+    fn grow_if_necessary(&mut self) {\n+        if self.is_full() {\n+            let old_cap = self.cap();\n+            self.buf.double();\n+            unsafe {\n+                self.handle_cap_increase(old_cap);\n+            }\n+            debug_assert!(!self.is_full());\n+        }\n+    }\n+\n+    /// Returns a place for insertion at the back of the `VecDeque`.\n+    ///\n+    /// Using this method with placement syntax is equivalent to [`push_back`](#method.push_back),\n+    /// but may be more efficient.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(collection_placement)]\n+    /// #![feature(placement_in_syntax)]\n+    ///\n+    /// use std::collections::VecDeque;\n+    ///\n+    /// let mut buf = VecDeque::new();\n+    /// buf.place_back() <- 3;\n+    /// buf.place_back() <- 4;\n+    /// assert_eq!(&buf, &[3, 4]);\n+    /// ```\n+    #[unstable(feature = \"collection_placement\",\n+               reason = \"placement protocol is subject to change\",\n+               issue = \"30172\")]\n+    pub fn place_back(&mut self) -> PlaceBack<T> {\n+        PlaceBack { vec_deque: self }\n+    }\n+\n+    /// Returns a place for insertion at the front of the `VecDeque`.\n+    ///\n+    /// Using this method with placement syntax is equivalent to [`push_front`](#method.push_front),\n+    /// but may be more efficient.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(collection_placement)]\n+    /// #![feature(placement_in_syntax)]\n+    ///\n+    /// use std::collections::VecDeque;\n+    ///\n+    /// let mut buf = VecDeque::new();\n+    /// buf.place_front() <- 3;\n+    /// buf.place_front() <- 4;\n+    /// assert_eq!(&buf, &[4, 3]);\n+    /// ```\n+    #[unstable(feature = \"collection_placement\",\n+               reason = \"placement protocol is subject to change\",\n+               issue = \"30172\")]\n+    pub fn place_front(&mut self) -> PlaceFront<T> {\n+        PlaceFront { vec_deque: self }\n+    }\n }\n \n impl<T: Clone> VecDeque<T> {\n     /// Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\n-    /// either by removing excess elements or by appending copies of a value to the back.\n+    /// either by removing excess elements or by appending clones of `value` to the back.\n     ///\n     /// # Examples\n     ///\n@@ -2442,6 +2484,98 @@ impl<T> From<VecDeque<T>> for Vec<T> {\n     }\n }\n \n+/// A place for insertion at the back of a `VecDeque`.\n+///\n+/// See [`VecDeque::place_back`](struct.VecDeque.html#method.place_back) for details.\n+#[must_use = \"places do nothing unless written to with `<-` syntax\"]\n+#[unstable(feature = \"collection_placement\",\n+           reason = \"struct name and placement protocol are subject to change\",\n+           issue = \"30172\")]\n+#[derive(Debug)]\n+pub struct PlaceBack<'a, T: 'a> {\n+    vec_deque: &'a mut VecDeque<T>,\n+}\n+\n+#[unstable(feature = \"collection_placement\",\n+           reason = \"placement protocol is subject to change\",\n+           issue = \"30172\")]\n+impl<'a, T> Placer<T> for PlaceBack<'a, T> {\n+    type Place = PlaceBack<'a, T>;\n+\n+    fn make_place(self) -> Self {\n+        self.vec_deque.grow_if_necessary();\n+        self\n+    }\n+}\n+\n+#[unstable(feature = \"collection_placement\",\n+           reason = \"placement protocol is subject to change\",\n+           issue = \"30172\")]\n+impl<'a, T> Place<T> for PlaceBack<'a, T> {\n+    fn pointer(&mut self) -> *mut T {\n+        unsafe { self.vec_deque.ptr().offset(self.vec_deque.head as isize) }\n+    }\n+}\n+\n+#[unstable(feature = \"collection_placement\",\n+           reason = \"placement protocol is subject to change\",\n+           issue = \"30172\")]\n+impl<'a, T> InPlace<T> for PlaceBack<'a, T> {\n+    type Owner = &'a mut T;\n+\n+    unsafe fn finalize(mut self) -> &'a mut T {\n+        let head = self.vec_deque.head;\n+        self.vec_deque.head = self.vec_deque.wrap_add(head, 1);\n+        &mut *(self.vec_deque.ptr().offset(head as isize))\n+    }\n+}\n+\n+/// A place for insertion at the front of a `VecDeque`.\n+///\n+/// See [`VecDeque::place_front`](struct.VecDeque.html#method.place_front) for details.\n+#[must_use = \"places do nothing unless written to with `<-` syntax\"]\n+#[unstable(feature = \"collection_placement\",\n+           reason = \"struct name and placement protocol are subject to change\",\n+           issue = \"30172\")]\n+#[derive(Debug)]\n+pub struct PlaceFront<'a, T: 'a> {\n+    vec_deque: &'a mut VecDeque<T>,\n+}\n+\n+#[unstable(feature = \"collection_placement\",\n+           reason = \"placement protocol is subject to change\",\n+           issue = \"30172\")]\n+impl<'a, T> Placer<T> for PlaceFront<'a, T> {\n+    type Place = PlaceFront<'a, T>;\n+\n+    fn make_place(self) -> Self {\n+        self.vec_deque.grow_if_necessary();\n+        self\n+    }\n+}\n+\n+#[unstable(feature = \"collection_placement\",\n+           reason = \"placement protocol is subject to change\",\n+           issue = \"30172\")]\n+impl<'a, T> Place<T> for PlaceFront<'a, T> {\n+    fn pointer(&mut self) -> *mut T {\n+        let tail = self.vec_deque.wrap_sub(self.vec_deque.tail, 1);\n+        unsafe { self.vec_deque.ptr().offset(tail as isize) }\n+    }\n+}\n+\n+#[unstable(feature = \"collection_placement\",\n+           reason = \"placement protocol is subject to change\",\n+           issue = \"30172\")]\n+impl<'a, T> InPlace<T> for PlaceFront<'a, T> {\n+    type Owner = &'a mut T;\n+\n+    unsafe fn finalize(mut self) -> &'a mut T {\n+        self.vec_deque.tail = self.vec_deque.wrap_sub(self.vec_deque.tail, 1);\n+        &mut *(self.vec_deque.ptr().offset(self.vec_deque.tail as isize))\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use test;\n@@ -2797,4 +2931,5 @@ mod tests {\n             }\n         }\n     }\n+\n }"}, {"sha": "d97d9b8ab83f67935fcec4a60e48c83f0e924a4c", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -32,6 +32,7 @@\n extern crate collections;\n extern crate test;\n extern crate std_unicode;\n+extern crate core;\n \n use std::hash::{Hash, Hasher};\n use std::collections::hash_map::DefaultHasher;"}, {"sha": "f2935c05d4f7a90ac3112b0481fdac7057562652", "filename": "src/libcollectionstest/vec_deque.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibcollectionstest%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibcollectionstest%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fvec_deque.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -10,7 +10,7 @@\n \n use std::collections::VecDeque;\n use std::fmt::Debug;\n-use std::collections::vec_deque::Drain;\n+use std::collections::vec_deque::{Drain};\n \n use self::Taggy::*;\n use self::Taggypar::*;\n@@ -1000,3 +1000,25 @@ fn test_is_empty() {\n     assert!(v.iter_mut().is_empty());\n     assert!(v.into_iter().is_empty());\n }\n+\n+#[test]\n+fn test_placement_in() {\n+    let mut buf: VecDeque<isize> = VecDeque::new();\n+    buf.place_back() <- 1;\n+    buf.place_back() <- 2;\n+    assert_eq!(buf, [1,2]);\n+\n+    buf.place_front() <- 3;\n+    buf.place_front() <- 4;\n+    assert_eq!(buf, [4,3,1,2]);\n+\n+    {\n+        let ptr_head = buf.place_front() <- 5;\n+        assert_eq!(*ptr_head, 5);\n+    }\n+    {\n+        let ptr_tail = buf.place_back() <- 6;\n+        assert_eq!(*ptr_tail, 6);\n+    }\n+    assert_eq!(buf, [5,4,3,1,2,6]);\n+}"}, {"sha": "2d08817e2a0d1cc70c8ae579815f6a48a91068e5", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -125,6 +125,10 @@ pub fn compile_input(sess: &Session,\n         };\n \n         write_out_deps(sess, &outputs, &crate_name);\n+        if sess.opts.output_types.contains_key(&OutputType::DepInfo) &&\n+            sess.opts.output_types.keys().count() == 1 {\n+            return Ok(())\n+        }\n \n         let arena = DroplessArena::new();\n         let arenas = GlobalArenas::new();\n@@ -604,7 +608,7 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n \n     let whitelisted_legacy_custom_derives = registry.take_whitelisted_custom_derives();\n     let Registry { syntax_exts, early_lint_passes, late_lint_passes, lint_groups,\n-                   llvm_passes, attributes, mir_passes, .. } = registry;\n+                   llvm_passes, attributes, .. } = registry;\n \n     sess.track_errors(|| {\n         let mut ls = sess.lint_store.borrow_mut();\n@@ -620,7 +624,6 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n         }\n \n         *sess.plugin_llvm_passes.borrow_mut() = llvm_passes;\n-        sess.mir_passes.borrow_mut().extend(mir_passes);\n         *sess.plugin_attributes.borrow_mut() = attributes.clone();\n     })?;\n "}, {"sha": "431edb3c9bc4d44e828f44f2d9f2421295b6c6b7", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 34, "deletions": 28, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -358,39 +358,45 @@ impl EmitterWriter {\n         let mut annotations_position = vec![];\n         let mut line_len = 0;\n         let mut p = 0;\n-        let mut ann_iter = annotations.iter().peekable();\n-        while let Some(annotation) = ann_iter.next() {\n-            let peek = ann_iter.peek();\n-            if let Some(next) = peek {\n-                if overlaps(next, annotation) && !annotation.is_line() && !next.is_line()\n+        for (i, annotation) in annotations.iter().enumerate() {\n+            for (j, next) in annotations.iter().enumerate() {\n+                if overlaps(next, annotation, 0)  // This label overlaps with another one and both\n+                    && !annotation.is_line()      // take space (they have text and are not\n+                    && !next.is_line()            // multiline lines).\n                     && annotation.has_label()\n+                    && j > i\n+                    && p == 0  // We're currently on the first line, move the label one line down\n                 {\n                     // This annotation needs a new line in the output.\n                     p += 1;\n+                    break;\n                 }\n             }\n             annotations_position.push((p, annotation));\n-            if let Some(next) = peek {\n-                let l = if let Some(ref label) = next.label {\n-                    label.len() + 2\n-                } else {\n-                    0\n-                };\n-                if (overlaps(next, annotation)  // Do not allow two labels to be in the same line\n-                    || next.end_col + l > annotation.start_col)  // if they overlap including\n-                                                // padding, to avoid situations like:\n-                                                //\n-                                                //      fn foo(x: u32) {\n-                                                //      -------^------\n-                                                //      |      |\n-                                                //      fn_spanx_span\n-                                                //\n-                    && !annotation.is_line()    // Do not add a new line if this annotation or the\n-                    && !next.is_line()          // next are vertical line placeholders.\n-                    && annotation.has_label()   // Both labels must have some text, otherwise\n-                    && next.has_label()         // they are not overlapping.\n-                {\n-                    p += 1;\n+            for (j, next) in annotations.iter().enumerate() {\n+                if j > i  {\n+                    let l = if let Some(ref label) = next.label {\n+                        label.len() + 2\n+                    } else {\n+                        0\n+                    };\n+                    if overlaps(next, annotation, l) // Do not allow two labels to be in the same\n+                                                     // line if they overlap including padding, to\n+                                                     // avoid situations like:\n+                                                     //\n+                                                     //      fn foo(x: u32) {\n+                                                     //      -------^------\n+                                                     //      |      |\n+                                                     //      fn_spanx_span\n+                                                     //\n+                        && !annotation.is_line()     // Do not add a new line if this annotation\n+                        && !next.is_line()           // or the next are vertical line placeholders.\n+                        && annotation.has_label()    // Both labels must have some text, otherwise\n+                        && next.has_label()          // they are not overlapping.\n+                    {\n+                        p += 1;\n+                        break;\n+                    }\n                 }\n             }\n             if line_len < p {\n@@ -1088,8 +1094,8 @@ fn num_overlap(a_start: usize, a_end: usize, b_start: usize, b_end:usize, inclus\n     (b_start..b_end + extra).contains(a_start) ||\n     (a_start..a_end + extra).contains(b_start)\n }\n-fn overlaps(a1: &Annotation, a2: &Annotation) -> bool {\n-    num_overlap(a1.start_col, a1.end_col, a2.start_col, a2.end_col, false)\n+fn overlaps(a1: &Annotation, a2: &Annotation, padding: usize) -> bool {\n+    num_overlap(a1.start_col, a1.end_col + padding, a2.start_col, a2.end_col, false)\n }\n \n fn emit_to_destination(rendered_buffer: &Vec<Vec<StyledString>>,"}, {"sha": "4c889dad8ca5050b0803be1a360b84bfda96fbb0", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -90,7 +90,8 @@ impl CodeSuggestion {\n                          hi_opt: Option<&Loc>) {\n             let (lo, hi_opt) = (lo.col.to_usize(), hi_opt.map(|hi| hi.col.to_usize()));\n             if let Some(line) = line_opt {\n-                if line.len() > lo {\n+                if let Some(lo) = line.char_indices().map(|(i, _)| i).nth(lo) {\n+                    let hi_opt = hi_opt.and_then(|hi| line.char_indices().map(|(i, _)| i).nth(hi));\n                     buf.push_str(match hi_opt {\n                         Some(hi) => &line[lo..hi],\n                         None => &line[lo..],"}, {"sha": "f9b7c68587678dea4a5f6a0edecbcfe8c5500583", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -189,11 +189,38 @@ impl LintPass for UnusedUnsafe {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedUnsafe {\n     fn check_expr(&mut self, cx: &LateContext, e: &hir::Expr) {\n+        /// Return the NodeId for an enclosing scope that is also `unsafe`\n+        fn is_enclosed(cx: &LateContext, id: ast::NodeId) -> Option<(String, ast::NodeId)> {\n+            let parent_id = cx.tcx.hir.get_parent_node(id);\n+            if parent_id != id {\n+                if cx.tcx.used_unsafe.borrow().contains(&parent_id) {\n+                    Some((\"block\".to_string(), parent_id))\n+                } else if let Some(hir::map::NodeItem(&hir::Item {\n+                    node: hir::ItemFn(_, hir::Unsafety::Unsafe, _, _, _, _),\n+                    ..\n+                })) = cx.tcx.hir.find(parent_id) {\n+                    Some((\"fn\".to_string(), parent_id))\n+                } else {\n+                    is_enclosed(cx, parent_id)\n+                }\n+            } else {\n+                None\n+            }\n+        }\n         if let hir::ExprBlock(ref blk) = e.node {\n             // Don't warn about generated blocks, that'll just pollute the output.\n             if blk.rules == hir::UnsafeBlock(hir::UserProvided) &&\n                !cx.tcx.used_unsafe.borrow().contains(&blk.id) {\n-                cx.span_lint(UNUSED_UNSAFE, blk.span, \"unnecessary `unsafe` block\");\n+\n+                let mut db = cx.struct_span_lint(UNUSED_UNSAFE, blk.span,\n+                                                 \"unnecessary `unsafe` block\");\n+\n+                db.span_label(blk.span, &\"unnecessary `unsafe` block\");\n+                if let Some((kind, id)) = is_enclosed(cx, blk.id) {\n+                    db.span_note(cx.tcx.hir.span(id),\n+                                 &format!(\"because it's nested under this `unsafe` {}\", kind));\n+                }\n+                db.emit();\n             }\n         }\n     }"}, {"sha": "cdde56f5f634be75a2d0917a5a1885bf59606e2d", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -13,8 +13,6 @@\n use rustc::lint::{EarlyLintPassObject, LateLintPassObject, LintId, Lint};\n use rustc::session::Session;\n \n-use rustc::mir::transform::MirMapPass;\n-\n use syntax::ext::base::{SyntaxExtension, NamedSyntaxExtension, NormalTT, IdentTT};\n use syntax::ext::base::MacroExpanderFn;\n use syntax::symbol::Symbol;\n@@ -53,9 +51,6 @@ pub struct Registry<'a> {\n     #[doc(hidden)]\n     pub late_lint_passes: Vec<LateLintPassObject>,\n \n-    #[doc(hidden)]\n-    pub mir_passes: Vec<Box<for<'pcx> MirMapPass<'pcx>>>,\n-\n     #[doc(hidden)]\n     pub lint_groups: HashMap<&'static str, Vec<LintId>>,\n \n@@ -81,7 +76,6 @@ impl<'a> Registry<'a> {\n             lint_groups: HashMap::new(),\n             llvm_passes: vec![],\n             attributes: vec![],\n-            mir_passes: Vec::new(),\n             whitelisted_custom_derives: Vec::new(),\n         }\n     }\n@@ -157,11 +151,6 @@ impl<'a> Registry<'a> {\n         self.lint_groups.insert(name, to.into_iter().map(|x| LintId::of(x)).collect());\n     }\n \n-    /// Register a MIR pass\n-    pub fn register_mir_pass(&mut self, pass: Box<for<'pcx> MirMapPass<'pcx>>) {\n-        self.mir_passes.push(pass);\n-    }\n-\n     /// Register an LLVM pass.\n     ///\n     /// Registration with LLVM itself is handled through static C++ objects with"}, {"sha": "6caf81380e40dad51f8c33c1d90a51c7dd5f7065", "filename": "src/librustc_save_analysis/data.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibrustc_save_analysis%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibrustc_save_analysis%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdata.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -15,7 +15,7 @@\n \n use rustc::hir;\n use rustc::hir::def_id::{CrateNum, DefId};\n-use syntax::ast::{self, NodeId};\n+use syntax::ast::{self, Attribute, NodeId};\n use syntax_pos::Span;\n \n pub struct CrateData {\n@@ -136,6 +136,7 @@ pub struct EnumData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n /// Data for extern crates.\n@@ -171,6 +172,7 @@ pub struct FunctionData {\n     pub parent: Option<DefId>,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n /// Data about a function call.\n@@ -256,6 +258,7 @@ pub struct MethodData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n /// Data for modules.\n@@ -271,6 +274,7 @@ pub struct ModData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n /// Data for a reference to a module.\n@@ -295,6 +299,7 @@ pub struct StructData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -309,6 +314,7 @@ pub struct StructVariantData {\n     pub parent: Option<DefId>,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -323,6 +329,7 @@ pub struct TraitData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -337,6 +344,7 @@ pub struct TupleVariantData {\n     pub parent: Option<DefId>,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n /// Data for a typedef.\n@@ -351,6 +359,7 @@ pub struct TypeDefData {\n     pub parent: Option<DefId>,\n     pub docs: String,\n     pub sig: Option<Signature>,\n+    pub attributes: Vec<Attribute>,\n }\n \n /// Data for a reference to a type or trait.\n@@ -396,6 +405,7 @@ pub struct VariableData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Option<Signature>,\n+    pub attributes: Vec<Attribute>,\n }\n \n #[derive(Debug, RustcEncodable)]"}, {"sha": "61956e5cd9d66e4abfd1e411e7b30d1a7ccfedf8", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -327,6 +327,9 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                     scope: scope\n                 }.lower(self.tcx));\n             }\n+            // With macros 2.0, we can legitimately get a ref to a macro, but\n+            // we don't handle it properly for now (FIXME).\n+            Def::Macro(..) => {}\n             Def::Local(..) |\n             Def::Upvar(..) |\n             Def::SelfTy(..) |\n@@ -336,7 +339,6 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n             Def::AssociatedTy(..) |\n             Def::AssociatedConst(..) |\n             Def::PrimTy(_) |\n-            Def::Macro(..) |\n             Def::Err => {\n                span_bug!(span,\n                          \"process_def_kind for unexpected item: {:?}\",\n@@ -373,6 +375,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                         visibility: Visibility::Inherited,\n                         docs: String::new(),\n                         sig: None,\n+                        attributes: vec![],\n                     }.lower(self.tcx));\n                 }\n             }\n@@ -448,6 +451,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                     visibility: vis,\n                     docs: docs_for_attrs(attrs),\n                     sig: method_data.sig,\n+                    attributes: attrs.to_vec(),\n                 }.lower(self.tcx));\n             }\n \n@@ -519,6 +523,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                     parent: None,\n                     docs: String::new(),\n                     sig: None,\n+                    attributes: vec![],\n                 }.lower(self.tcx));\n             }\n         }\n@@ -592,6 +597,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 visibility: vis,\n                 docs: docs_for_attrs(attrs),\n                 sig: None,\n+                attributes: attrs.to_vec(),\n             }.lower(self.tcx));\n         }\n \n@@ -636,6 +642,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 visibility: From::from(&item.vis),\n                 docs: docs_for_attrs(&item.attrs),\n                 sig: self.save_ctxt.sig_base(item),\n+                attributes: item.attrs.clone(),\n             }.lower(self.tcx));\n         }\n \n@@ -701,6 +708,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                             parent: Some(make_def_id(item.id, &self.tcx.hir)),\n                             docs: docs_for_attrs(&variant.node.attrs),\n                             sig: sig,\n+                            attributes: variant.node.attrs.clone(),\n                         }.lower(self.tcx));\n                     }\n                 }\n@@ -727,6 +735,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                             parent: Some(make_def_id(item.id, &self.tcx.hir)),\n                             docs: docs_for_attrs(&variant.node.attrs),\n                             sig: sig,\n+                            attributes: variant.node.attrs.clone(),\n                         }.lower(self.tcx));\n                     }\n                 }\n@@ -798,6 +807,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 visibility: From::from(&item.vis),\n                 docs: docs_for_attrs(&item.attrs),\n                 sig: self.save_ctxt.sig_base(item),\n+                attributes: item.attrs.clone(),\n             }.lower(self.tcx));\n         }\n \n@@ -1064,6 +1074,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                     visibility: Visibility::Inherited,\n                     docs: String::new(),\n                     sig: None,\n+                    attributes: vec![],\n                 }.lower(self.tcx));\n             }\n         }\n@@ -1305,6 +1316,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll,\n                         parent: None,\n                         docs: docs_for_attrs(&item.attrs),\n                         sig: Some(self.save_ctxt.sig_base(item)),\n+                        attributes: item.attrs.clone(),\n                     }.lower(self.tcx));\n                 }\n \n@@ -1527,6 +1539,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll,\n                             visibility: Visibility::Inherited,\n                             docs: String::new(),\n                             sig: None,\n+                            attributes: vec![],\n                         }.lower(self.tcx));\n                     }\n                 }"}, {"sha": "41658dc5b1b48b043b9faf344768803a1db2b52b", "filename": "src/librustc_save_analysis/external_data.rs", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibrustc_save_analysis%2Fexternal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fexternal_data.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -11,8 +11,10 @@\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex};\n use rustc::hir::map::Map;\n use rustc::ty::TyCtxt;\n-use syntax::ast::NodeId;\n+use syntax::ast::{self, NodeId};\n use syntax::codemap::CodeMap;\n+use syntax::print::pprust;\n+use syntax::symbol::Symbol;\n use syntax_pos::Span;\n \n use data::{self, Visibility, SigElement};\n@@ -64,6 +66,39 @@ impl SpanData {\n     }\n }\n \n+/// Represent an arbitrary attribute on a code element\n+#[derive(Clone, Debug, RustcEncodable)]\n+pub struct Attribute {\n+    value: String,\n+    span: SpanData,\n+}\n+\n+impl Lower for Vec<ast::Attribute> {\n+    type Target = Vec<Attribute>;\n+\n+    fn lower(self, tcx: TyCtxt) -> Vec<Attribute> {\n+        let doc = Symbol::intern(\"doc\");\n+        self.into_iter()\n+        // Only retain real attributes. Doc comments are lowered separately.\n+        .filter(|attr| attr.name() != doc)\n+        .map(|mut attr| {\n+            // Remove the surrounding '#[..]' or '#![..]' of the pretty printed\n+            // attribute. First normalize all inner attribute (#![..]) to outer\n+            // ones (#[..]), then remove the two leading and the one trailing character.\n+            attr.style = ast::AttrStyle::Outer;\n+            let value = pprust::attribute_to_string(&attr);\n+            // This str slicing works correctly, because the leading and trailing characters\n+            // are in the ASCII range and thus exactly one byte each.\n+            let value = value[2..value.len()-1].to_string();\n+\n+            Attribute {\n+                value: value,\n+                span: SpanData::from_span(attr.span, tcx.sess.codemap()),\n+            }\n+        }).collect()\n+    }\n+}\n+\n #[derive(Debug, RustcEncodable)]\n pub struct CratePreludeData {\n     pub crate_name: String,\n@@ -98,6 +133,7 @@ pub struct EnumData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n impl Lower for data::EnumData {\n@@ -115,6 +151,7 @@ impl Lower for data::EnumData {\n             visibility: self.visibility,\n             docs: self.docs,\n             sig: self.sig.lower(tcx),\n+            attributes: self.attributes.lower(tcx),\n         }\n     }\n }\n@@ -179,6 +216,7 @@ pub struct FunctionData {\n     pub parent: Option<DefId>,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n impl Lower for data::FunctionData {\n@@ -197,6 +235,7 @@ impl Lower for data::FunctionData {\n             parent: self.parent,\n             docs: self.docs,\n             sig: self.sig.lower(tcx),\n+            attributes: self.attributes.lower(tcx),\n         }\n     }\n }\n@@ -346,6 +385,7 @@ pub struct MethodData {\n     pub parent: Option<DefId>,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n impl Lower for data::MethodData {\n@@ -364,6 +404,7 @@ impl Lower for data::MethodData {\n             parent: self.parent,\n             docs: self.docs,\n             sig: self.sig.lower(tcx),\n+            attributes: self.attributes.lower(tcx),\n         }\n     }\n }\n@@ -381,6 +422,7 @@ pub struct ModData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n impl Lower for data::ModData {\n@@ -398,6 +440,7 @@ impl Lower for data::ModData {\n             visibility: self.visibility,\n             docs: self.docs,\n             sig: self.sig.lower(tcx),\n+            attributes: self.attributes.lower(tcx),\n         }\n     }\n }\n@@ -437,6 +480,7 @@ pub struct StructData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n impl Lower for data::StructData {\n@@ -455,6 +499,7 @@ impl Lower for data::StructData {\n             visibility: self.visibility,\n             docs: self.docs,\n             sig: self.sig.lower(tcx),\n+            attributes: self.attributes.lower(tcx),\n         }\n     }\n }\n@@ -471,6 +516,7 @@ pub struct StructVariantData {\n     pub parent: Option<DefId>,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n impl Lower for data::StructVariantData {\n@@ -488,6 +534,7 @@ impl Lower for data::StructVariantData {\n             parent: self.parent,\n             docs: self.docs,\n             sig: self.sig.lower(tcx),\n+            attributes: self.attributes.lower(tcx),\n         }\n     }\n }\n@@ -504,6 +551,7 @@ pub struct TraitData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n impl Lower for data::TraitData {\n@@ -521,6 +569,7 @@ impl Lower for data::TraitData {\n             visibility: self.visibility,\n             docs: self.docs,\n             sig: self.sig.lower(tcx),\n+            attributes: self.attributes.lower(tcx),\n         }\n     }\n }\n@@ -537,6 +586,7 @@ pub struct TupleVariantData {\n     pub parent: Option<DefId>,\n     pub docs: String,\n     pub sig: Signature,\n+    pub attributes: Vec<Attribute>,\n }\n \n impl Lower for data::TupleVariantData {\n@@ -554,6 +604,7 @@ impl Lower for data::TupleVariantData {\n             parent: self.parent,\n             docs: self.docs,\n             sig: self.sig.lower(tcx),\n+            attributes: self.attributes.lower(tcx),\n         }\n     }\n }\n@@ -570,6 +621,7 @@ pub struct TypeDefData {\n     pub parent: Option<DefId>,\n     pub docs: String,\n     pub sig: Option<Signature>,\n+    pub attributes: Vec<Attribute>,\n }\n \n impl Lower for data::TypeDefData {\n@@ -586,6 +638,7 @@ impl Lower for data::TypeDefData {\n             parent: self.parent,\n             docs: self.docs,\n             sig: self.sig.map(|s| s.lower(tcx)),\n+            attributes: self.attributes.lower(tcx),\n         }\n     }\n }\n@@ -675,6 +728,7 @@ pub struct VariableData {\n     pub visibility: Visibility,\n     pub docs: String,\n     pub sig: Option<Signature>,\n+    pub attributes: Vec<Attribute>,\n }\n \n impl Lower for data::VariableData {\n@@ -694,6 +748,7 @@ impl Lower for data::VariableData {\n             visibility: self.visibility,\n             docs: self.docs,\n             sig: self.sig.map(|s| s.lower(tcx)),\n+            attributes: self.attributes.lower(tcx),\n         }\n     }\n }"}, {"sha": "1b72489f83c67da2d611710b757001966994c3f5", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -87,6 +87,7 @@ impl<'b, W: Write + 'b> Dump for JsonDumper<'b, W> {\n             decl_id: None,\n             docs: data.docs,\n             sig: Some(From::from(data.sig)),\n+            attributes: data.attributes,\n         };\n         if def.span.file_name != def.value {\n             // If the module is an out-of-line defintion, then we'll make the\n@@ -232,6 +233,7 @@ struct Def {\n     decl_id: Option<Id>,\n     docs: String,\n     sig: Option<JsonSignature>,\n+    attributes: Vec<Attribute>,\n }\n \n #[derive(Debug, RustcEncodable)]\n@@ -274,6 +276,7 @@ impl From<EnumData> for Def {\n             decl_id: None,\n             docs: data.docs,\n             sig: Some(From::from(data.sig)),\n+            attributes: data.attributes,\n         }\n     }\n }\n@@ -291,6 +294,7 @@ impl From<TupleVariantData> for Def {\n             decl_id: None,\n             docs: data.docs,\n             sig: Some(From::from(data.sig)),\n+            attributes: data.attributes,\n         }\n     }\n }\n@@ -307,6 +311,7 @@ impl From<StructVariantData> for Def {\n             decl_id: None,\n             docs: data.docs,\n             sig: Some(From::from(data.sig)),\n+            attributes: data.attributes,\n         }\n     }\n }\n@@ -323,6 +328,7 @@ impl From<StructData> for Def {\n             decl_id: None,\n             docs: data.docs,\n             sig: Some(From::from(data.sig)),\n+            attributes: data.attributes,\n         }\n     }\n }\n@@ -339,6 +345,7 @@ impl From<TraitData> for Def {\n             decl_id: None,\n             docs: data.docs,\n             sig: Some(From::from(data.sig)),\n+            attributes: data.attributes,\n         }\n     }\n }\n@@ -355,6 +362,7 @@ impl From<FunctionData> for Def {\n             decl_id: None,\n             docs: data.docs,\n             sig: Some(From::from(data.sig)),\n+            attributes: data.attributes,\n         }\n     }\n }\n@@ -371,6 +379,7 @@ impl From<MethodData> for Def {\n             decl_id: data.decl_id.map(|id| From::from(id)),\n             docs: data.docs,\n             sig: Some(From::from(data.sig)),\n+            attributes: data.attributes,\n         }\n     }\n }\n@@ -387,6 +396,7 @@ impl From<MacroData> for Def {\n             decl_id: None,\n             docs: data.docs,\n             sig: None,\n+            attributes: vec![],\n         }\n     }\n }\n@@ -403,6 +413,7 @@ impl From<TypeDefData> for Def {\n             decl_id: None,\n             docs: String::new(),\n             sig: data.sig.map(|s| From::from(s)),\n+            attributes: data.attributes,\n         }\n     }\n }\n@@ -424,6 +435,7 @@ impl From<VariableData> for Def {\n             decl_id: None,\n             docs: data.docs,\n             sig: None,\n+            attributes: data.attributes,\n         }\n     }\n }"}, {"sha": "2153b30b62cd52d9e4bcb201ca1e6ab758d2567f", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -136,6 +136,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     parent: None,\n                     docs: docs_for_attrs(&item.attrs),\n                     sig: self.sig_base(item),\n+                    attributes: item.attrs.clone(),\n                 }))\n             }\n             ast::ItemKind::Static(ref typ, mt, ref expr) => {\n@@ -164,6 +165,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n                     sig: Some(self.sig_base(item)),\n+                    attributes: item.attrs.clone(),\n                 }))\n             }\n             ast::ItemKind::Const(ref typ, ref expr) => {\n@@ -183,6 +185,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n                     sig: Some(self.sig_base(item)),\n+                    attributes: item.attrs.clone(),\n                 }))\n             }\n             ast::ItemKind::Mod(ref m) => {\n@@ -205,6 +208,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n                     sig: self.sig_base(item),\n+                    attributes: item.attrs.clone(),\n                 }))\n             }\n             ast::ItemKind::Enum(ref def, _) => {\n@@ -228,6 +232,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     visibility: From::from(&item.vis),\n                     docs: docs_for_attrs(&item.attrs),\n                     sig: self.sig_base(item),\n+                    attributes: item.attrs.clone(),\n                 }))\n             }\n             ast::ItemKind::Impl(.., ref trait_ref, ref typ, _) => {\n@@ -315,6 +320,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 visibility: From::from(&field.vis),\n                 docs: docs_for_attrs(&field.attrs),\n                 sig: Some(sig),\n+                attributes: field.attrs.clone(),\n             })\n         } else {\n             None\n@@ -327,7 +333,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                            name: ast::Name, span: Span) -> Option<FunctionData> {\n         // The qualname for a method is the trait name or name of the struct in an impl in\n         // which the method is declared in, followed by the method's name.\n-        let (qualname, parent_scope, decl_id, vis, docs) =\n+        let (qualname, parent_scope, decl_id, vis, docs, attributes) =\n           match self.tcx.impl_of_method(self.tcx.hir.local_def_id(id)) {\n             Some(impl_id) => match self.tcx.hir.get_if_local(impl_id) {\n                 Some(Node::NodeItem(item)) => {\n@@ -349,7 +355,8 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n \n                             (result, trait_id, decl_id,\n                              From::from(&item.vis),\n-                             docs_for_attrs(&item.attrs))\n+                             docs_for_attrs(&item.attrs),\n+                             item.attrs.to_vec())\n                         }\n                         _ => {\n                             span_bug!(span,\n@@ -374,7 +381,8 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                             (format!(\"::{}\", self.tcx.item_path_str(def_id)),\n                              Some(def_id), None,\n                              From::from(&item.vis),\n-                             docs_for_attrs(&item.attrs))\n+                             docs_for_attrs(&item.attrs),\n+                             item.attrs.to_vec())\n                         }\n                         r => {\n                             span_bug!(span,\n@@ -423,6 +431,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             parent: parent_scope,\n             docs: docs,\n             sig: sig,\n+            attributes: attributes,\n         })\n     }\n "}, {"sha": "4047f6045bcc5fae61b401cf6e8b182edb714228", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 6, "deletions": 27, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -377,13 +377,13 @@ h4 > code, h3 > code, .invisible > code {\n .content .method .where,\n .content .fn .where,\n .content .where.fmt-newline {\n-    display: block;\n+\tdisplay: block;\n }\n /* Bit of whitespace to indent it */\n .content .method .where::before,\n .content .fn .where::before,\n .content .where.fmt-newline::before {\n-    content: '  ';\n+\tcontent: '  ';\n }\n \n .content .methods > div { margin-left: 40px; }\n@@ -506,17 +506,15 @@ body.blur > :not(#help) {\n }\n #help > div {\n \tflex: 0 0 auto;\n-\tbackground: #e9e9e9;\n \tbox-shadow: 0 0 6px rgba(0,0,0,.2);\n \twidth: 550px;\n \theight: 330px;\n-\tborder: 1px solid #bfbfbf;\n+\tborder: 1px solid;\n }\n #help dt {\n \tfloat: left;\n \tborder-radius: 4px;\n-\tborder: 1px solid #bfbfbf;\n-\tbackground: #fff;\n+\tborder: 1px solid;\n \twidth: 23px;\n \ttext-align: center;\n \tclear: left;\n@@ -567,7 +565,6 @@ body.blur > :not(#help) {\n .since {\n \tfont-weight: normal;\n \tfont-size: initial;\n-\tcolor: grey;\n \tposition: absolute;\n \tright: 0;\n \ttop: 0;\n@@ -589,24 +586,12 @@ td.summary-column {\n \tpadding-right: 0px;\n }\n \n-.line-numbers :target { background-color: transparent; }\n-\n-/* Code highlighting */\n-pre.rust .kw { color: #8959A8; }\n-pre.rust .kw-2, pre.rust .prelude-ty { color: #4271AE; }\n-pre.rust .number, pre.rust .string { color: #718C00; }\n-pre.rust .self, pre.rust .bool-val, pre.rust .prelude-val,\n-pre.rust .attribute, pre.rust .attribute .ident { color: #C82829; }\n-pre.rust .macro, pre.rust .macro-nonterminal { color: #3E999F; }\n-pre.rust .lifetime { color: #B76514; }\n pre.rust .question-mark {\n-\tcolor: #ff9011;\n \tfont-weight: bold;\n }\n \n pre.rust { position: relative; }\n a.test-arrow {\n-\tbackground-color: rgba(78, 139, 202, 0.2);\n \tdisplay: inline-block;\n \tposition: absolute;\n \tpadding: 5px 10px 5px 10px;\n@@ -616,7 +601,6 @@ a.test-arrow {\n \tright: 5px;\n }\n a.test-arrow:hover{\n-\tbackground-color: #4e8bca;\n \ttext-decoration: none;\n }\n \n@@ -660,10 +644,6 @@ a.test-arrow:hover{\n \ttext-align: center;\n }\n \n-.toggle-label {\n-\tcolor: #999;\n-}\n-\n .ghost {\n \tdisplay: none;\n }\n@@ -719,8 +699,7 @@ span.since {\n }\n \n :target > code {\n-   background: #FDFFD3;\n-   opacity: 1;\n+\topacity: 1;\n }\n \n /* Media Queries */\n@@ -793,4 +772,4 @@ span.since {\n \tnav.sub, .content .out-of-band, .collapse-toggle {\n \t\tdisplay: none;\n \t}\n-}\n+}\n\\ No newline at end of file"}, {"sha": "40561597e93e09be91c1eb555ab9e7b9319ad834", "filename": "src/librustdoc/html/static/styles/main.css", "status": "modified", "additions": 83, "deletions": 31, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstyles%2Fmain.css?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -13,28 +13,36 @@\n /* General structure and fonts */\n \n body {\n-    background-color: white;\n-    color: black;\n+\tbackground-color: white;\n+\tcolor: black;\n }\n \n h1, h2, h3:not(.impl):not(.method):not(.type):not(.tymethod), h4:not(.method):not(.type):not(.tymethod) {\n-    color: black;\n+\tcolor: black;\n }\n h1.fqn {\n-    border-bottom-color: #D5D5D5;\n+\tborder-bottom-color: #D5D5D5;\n }\n h2, h3:not(.impl):not(.method):not(.type):not(.tymethod), h4:not(.method):not(.type):not(.tymethod) {\n-    border-bottom-color: #DDDDDD;\n+\tborder-bottom-color: #DDDDDD;\n }\n .in-band {\n-    background-color: white;\n+\tbackground-color: white;\n }\n \n .docblock code, .docblock-short code {\n-    background-color: #F5F5F5;\n+\tbackground-color: #F5F5F5;\n }\n pre {\n-    background-color: #F5F5F5;\n+\tbackground-color: #F5F5F5;\n+}\n+\n+.sidebar {\n+\tbackground-color: #F1F1F1;\n+}\n+\n+.sidebar .current {\n+\tbackground-color: #fff;\n }\n \n .sidebar {\n@@ -46,24 +54,24 @@ pre {\n }\n \n .sidebar .location {\n-    border-color: #000;\n-    background-color: #fff;\n-    color: #333;\n+\tborder-color: #000;\n+\tbackground-color: #fff;\n+\tcolor: #333;\n }\n \n .block a:hover {\n-    background: #F5F5F5;\n+\tbackground: #F5F5F5;\n }\n \n .line-numbers span { color: #c67e2d; }\n .line-numbers .line-highlighted {\n-    background-color: #f6fdb0 !important;\n+\tbackground-color: #f6fdb0 !important;\n }\n \n :target { background: #FDFFD3; }\n .content .highlighted {\n-    color: #000 !important;\n-    background-color: #ccc;\n+\tcolor: #000 !important;\n+\tbackground-color: #ccc;\n }\n .content .highlighted a, .content .highlighted span { color: #000 !important; }\n .content .highlighted.trait { background-color: #fece7e; }\n@@ -76,21 +84,21 @@ pre {\n .content .highlighted.type { background-color: #c6afb3; }\n \n .docblock h1, .docblock h2, .docblock h3, .docblock h4, .docblock h5 {\n-    border-bottom-color: #DDD;\n+\tborder-bottom-color: #DDD;\n }\n \n .docblock table {\n-    border-color: #ddd;\n+\tborder-color: #ddd;\n }\n \n .docblock table td {\n-    border-top-color: #ddd;\n-    border-bottom-color: #ddd;\n+\tborder-top-color: #ddd;\n+\tborder-bottom-color: #ddd;\n }\n \n .docblock table th {\n-    border-top-color: #ddd;\n-    border-bottom-color: #ddd;\n+\tborder-top-color: #ddd;\n+\tborder-bottom-color: #ddd;\n }\n \n .content span.primitive, .content a.primitive, .block a.current.primitive { color: #39a7bf; }\n@@ -105,34 +113,78 @@ pre.rust .comment { color: #8E908C; }\n pre.rust .doccomment { color: #4D4D4C; }\n \n nav {\n-    border-bottom-color: #e0e0e0;\n+\tborder-bottom-color: #e0e0e0;\n }\n nav.main .current {\n-    border-top-color: #000;\n-    border-bottom-color: #000;\n+\tborder-top-color: #000;\n+\tborder-bottom-color: #000;\n }\n nav.main .separator {\n-    border: 1px solid #000;\n+\tborder: 1px solid #000;\n }\n a {\n-    color: #000;\n+\tcolor: #000;\n }\n \n .docblock a, .docblock-short a, .stability a {\n-    color: #3873AD;\n+\tcolor: #3873AD;\n }\n \n a.test-arrow {\n-    color: #f5f5f5;\n+\tcolor: #f5f5f5;\n }\n \n .content span.trait, .content a.trait, .block a.current.trait { color: #7c5af3; }\n \n .search-input {\n-    color: #555;\n-    box-shadow: 0 0 0 1px #e0e0e0, 0 0 0 2px transparent;\n-    background-color: white;\n+\tcolor: #555;\n+\tbox-shadow: 0 0 0 1px #e0e0e0, 0 0 0 2px transparent;\n+\tbackground-color: white;\n }\n \n .stab.unstable { background: #FFF5D6; border-color: #FFC600; }\n .stab.deprecated { background: #F3DFFF; border-color: #7F0087; }\n+\n+#help > div {\n+\tbackground: #e9e9e9;\n+\tborder-color: #bfbfbf;;\n+}\n+\n+#help dt {\n+\tborder-color: #bfbfbf;\n+\tbackground: #fff;\n+}\n+\n+.since {\n+\tcolor: grey;\n+}\n+\n+.line-numbers :target { background-color: transparent; }\n+\n+/* Code highlighting */\n+pre.rust .kw { color: #8959A8; }\n+pre.rust .kw-2, pre.rust .prelude-ty { color: #4271AE; }\n+pre.rust .number, pre.rust .string { color: #718C00; }\n+pre.rust .self, pre.rust .bool-val, pre.rust .prelude-val,\n+pre.rust .attribute, pre.rust .attribute .ident { color: #C82829; }\n+pre.rust .macro, pre.rust .macro-nonterminal { color: #3E999F; }\n+pre.rust .lifetime { color: #B76514; }\n+pre.rust .question-mark {\n+\tcolor: #ff9011;\n+}\n+\n+a.test-arrow {\n+\tbackground-color: rgba(78, 139, 202, 0.2);\n+}\n+\n+a.test-arrow:hover{\n+\tbackground-color: #4e8bca;\n+}\n+\n+.toggle-label {\n+\tcolor: #999;\n+}\n+\n+:target > code {\n+\tbackground: #FDFFD3;\n+}\n\\ No newline at end of file"}, {"sha": "bfb0aa6e1a122410e6fe6acfd1e9b612e2c76710", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -154,7 +154,28 @@ pub struct NulError(usize, Vec<u8>);\n /// byte was found too early in the slice provided or one wasn't found at all.\n #[derive(Clone, PartialEq, Eq, Debug)]\n #[stable(feature = \"cstr_from_bytes\", since = \"1.10.0\")]\n-pub struct FromBytesWithNulError { _a: () }\n+pub struct FromBytesWithNulError {\n+    kind: FromBytesWithNulErrorKind,\n+}\n+\n+#[derive(Clone, PartialEq, Eq, Debug)]\n+enum FromBytesWithNulErrorKind {\n+    InteriorNul(usize),\n+    NotNulTerminated,\n+}\n+\n+impl FromBytesWithNulError {\n+    fn interior_nul(pos: usize) -> FromBytesWithNulError {\n+        FromBytesWithNulError {\n+            kind: FromBytesWithNulErrorKind::InteriorNul(pos),\n+        }\n+    }\n+    fn not_nul_terminated() -> FromBytesWithNulError {\n+        FromBytesWithNulError {\n+            kind: FromBytesWithNulErrorKind::NotNulTerminated,\n+        }\n+    }\n+}\n \n /// An error returned from `CString::into_string` to indicate that a UTF-8 error\n /// was encountered during the conversion.\n@@ -458,14 +479,23 @@ impl From<NulError> for io::Error {\n #[stable(feature = \"frombyteswithnulerror_impls\", since = \"1.17.0\")]\n impl Error for FromBytesWithNulError {\n     fn description(&self) -> &str {\n-        \"data provided is not null terminated or contains an interior nul byte\"\n+        match self.kind {\n+            FromBytesWithNulErrorKind::InteriorNul(..) =>\n+                \"data provided contains an interior nul byte\",\n+            FromBytesWithNulErrorKind::NotNulTerminated =>\n+                \"data provided is not nul terminated\",\n+        }\n     }\n }\n \n #[stable(feature = \"frombyteswithnulerror_impls\", since = \"1.17.0\")]\n impl fmt::Display for FromBytesWithNulError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        self.description().fmt(f)\n+        f.write_str(self.description())?;\n+        if let FromBytesWithNulErrorKind::InteriorNul(pos) = self.kind {\n+            write!(f, \" at byte pos {}\", pos)?;\n+        }\n+        Ok(())\n     }\n }\n \n@@ -559,10 +589,14 @@ impl CStr {\n     #[stable(feature = \"cstr_from_bytes\", since = \"1.10.0\")]\n     pub fn from_bytes_with_nul(bytes: &[u8])\n                                -> Result<&CStr, FromBytesWithNulError> {\n-        if bytes.is_empty() || memchr::memchr(0, &bytes) != Some(bytes.len() - 1) {\n-            Err(FromBytesWithNulError { _a: () })\n+        let nul_pos = memchr::memchr(0, bytes);\n+        if let Some(nul_pos) = nul_pos {\n+            if nul_pos + 1 != bytes.len() {\n+                return Err(FromBytesWithNulError::interior_nul(nul_pos));\n+            }\n+            Ok(unsafe { CStr::from_bytes_with_nul_unchecked(bytes) })\n         } else {\n-            Ok(unsafe { Self::from_bytes_with_nul_unchecked(bytes) })\n+            Err(FromBytesWithNulError::not_nul_terminated())\n         }\n     }\n "}, {"sha": "41bdd9c51d458e1c9d85f34cfdd1f0cc1ec6386a", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -205,6 +205,12 @@ impl OsString {\n         self.inner.reserve_exact(additional)\n     }\n \n+    /// Shrinks the capacity of the `OsString` to match its length.\n+    #[unstable(feature = \"osstring_shrink_to_fit\", issue = \"40421\")]\n+    pub fn shrink_to_fit(&mut self) {\n+        self.inner.shrink_to_fit()\n+    }\n+\n     /// Converts this `OsString` into a boxed `OsStr`.\n     #[unstable(feature = \"into_boxed_os_str\", issue = \"0\")]\n     pub fn into_boxed_os_str(self) -> Box<OsStr> {"}, {"sha": "474d59eed83d1daa3bf3b8b00b6e73edec840688", "filename": "src/libstd/sys/redox/os_str.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibstd%2Fsys%2Fredox%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibstd%2Fsys%2Fredox%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fos_str.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -83,6 +83,11 @@ impl Buf {\n         self.inner.reserve_exact(additional)\n     }\n \n+    #[inline]\n+    pub fn shrink_to_fit(&mut self) {\n+        self.inner.shrink_to_fit()\n+    }\n+\n     pub fn as_slice(&self) -> &Slice {\n         unsafe { mem::transmute(&*self.inner) }\n     }"}, {"sha": "c27599ec0206f8ae46b581c658e80fa215b7ebe2", "filename": "src/libstd/sys/unix/os_str.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -83,6 +83,11 @@ impl Buf {\n         self.inner.reserve_exact(additional)\n     }\n \n+    #[inline]\n+    pub fn shrink_to_fit(&mut self) {\n+        self.inner.shrink_to_fit()\n+    }\n+\n     pub fn as_slice(&self) -> &Slice {\n         unsafe { mem::transmute(&*self.inner) }\n     }"}, {"sha": "b02b06e1ef2e1510aed1b7885a9efaf70655f9ac", "filename": "src/libstd/sys/windows/os_str.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -89,6 +89,10 @@ impl Buf {\n         self.inner.reserve_exact(additional)\n     }\n \n+    pub fn shrink_to_fit(&mut self) {\n+        self.inner.shrink_to_fit()\n+    }\n+\n     #[inline]\n     pub fn into_box(self) -> Box<Slice> {\n         unsafe { mem::transmute(self.inner.into_box()) }"}, {"sha": "14c0e8699bc060b2cbbf9255e4fbff86701ce1b7", "filename": "src/libstd/sys_common/gnu/libbacktrace.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -105,9 +105,6 @@ extern \"C\" fn(data: *mut libc::c_void,\n               msg: *const libc::c_char,\n               errnum: libc::c_int);\n enum backtrace_state {}\n-#[link(name = \"backtrace\", kind = \"static\")]\n-#[cfg(all(not(test), not(cargobuild)))]\n-extern {}\n \n extern {\n     fn backtrace_create_state(filename: *const libc::c_char,"}, {"sha": "b486d4ffda3fd61c239b94d61f9a03e9b758e52e", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -236,6 +236,11 @@ impl Wtf8Buf {\n         self.bytes.reserve_exact(additional)\n     }\n \n+    #[inline]\n+    pub fn shrink_to_fit(&mut self) {\n+        self.bytes.shrink_to_fit()\n+    }\n+\n     /// Returns the number of bytes that this string buffer can hold without reallocating.\n     #[inline]\n     pub fn capacity(&self) -> usize {"}, {"sha": "f7dcd00e40976d7ba8f16464ca4428dcdc95ce1c", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -464,8 +464,20 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 let attr_toks = stream_for_attr_args(&attr, &self.cx.parse_sess);\n                 let item_toks = stream_for_item(&item, &self.cx.parse_sess);\n \n+                let span = Span {\n+                    expn_id: self.cx.codemap().record_expansion(ExpnInfo {\n+                        call_site: attr.span,\n+                        callee: NameAndSpan {\n+                            format: MacroAttribute(name),\n+                            span: None,\n+                            allow_internal_unstable: false,\n+                        },\n+                    }),\n+                    ..attr.span\n+                };\n+\n                 let tok_result = mac.expand(self.cx, attr.span, attr_toks, item_toks);\n-                self.parse_expansion(tok_result, kind, name, attr.span)\n+                self.parse_expansion(tok_result, kind, name, span)\n             }\n             SyntaxExtension::ProcMacroDerive(..) | SyntaxExtension::BuiltinDerive(..) => {\n                 self.cx.span_err(attr.span, &format!(\"`{}` is a derive mode\", name));"}, {"sha": "2fd84639f21904131a4547a455aa37de3839d826", "filename": "src/test/run-make/dep-info-doesnt-run-much/Makefile", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Ftest%2Frun-make%2Fdep-info-doesnt-run-much%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Ftest%2Frun-make%2Fdep-info-doesnt-run-much%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-info-doesnt-run-much%2FMakefile?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -0,0 +1,4 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) foo.rs --emit dep-info"}, {"sha": "35911821044982825a5dfade9db91d6101c78237", "filename": "src/test/run-make/dep-info-doesnt-run-much/foo.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Ftest%2Frun-make%2Fdep-info-doesnt-run-much%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Ftest%2Frun-make%2Fdep-info-doesnt-run-much%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-info-doesnt-run-much%2Ffoo.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// We're only emitting dep info, so we shouldn't be running static analysis to\n+// figure out that this program is erroneous.\n+fn main() {\n+    let a: u8 = \"a\";\n+}"}, {"sha": "3bc4a40a39c99a144c1bafe11752527bd9708ef3", "filename": "src/test/run-pass-fulldeps/auxiliary/dummy_mir_pass.rs", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/71c058b3054b373bd13f68cd85d8b45adcb5f7d5/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fdummy_mir_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71c058b3054b373bd13f68cd85d8b45adcb5f7d5/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fdummy_mir_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fdummy_mir_pass.rs?ref=71c058b3054b373bd13f68cd85d8b45adcb5f7d5", "patch": "@@ -1,55 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// force-host\n-\n-#![feature(plugin_registrar, rustc_private)]\n-#![feature(box_syntax)]\n-\n-#[macro_use] extern crate rustc;\n-extern crate rustc_plugin;\n-extern crate rustc_const_math;\n-extern crate syntax;\n-\n-use rustc::mir::transform::{self, MirPass, MirSource};\n-use rustc::mir::{Mir, Literal, Location};\n-use rustc::mir::visit::MutVisitor;\n-use rustc::ty::TyCtxt;\n-use rustc::middle::const_val::ConstVal;\n-use rustc_const_math::ConstInt;\n-use rustc_plugin::Registry;\n-\n-struct Pass;\n-\n-impl transform::Pass for Pass {}\n-\n-impl<'tcx> MirPass<'tcx> for Pass {\n-    fn run_pass<'a>(&mut self, _: TyCtxt<'a, 'tcx, 'tcx>,\n-                    _: MirSource, mir: &mut Mir<'tcx>) {\n-        Visitor.visit_mir(mir)\n-    }\n-}\n-\n-struct Visitor;\n-\n-impl<'tcx> MutVisitor<'tcx> for Visitor {\n-    fn visit_literal(&mut self, literal: &mut Literal<'tcx>, _: Location) {\n-        if let Literal::Value { ref mut value } = *literal {\n-            if let ConstVal::Integral(ConstInt::I32(ref mut i @ 11)) = *value {\n-                *i = 42;\n-            }\n-        }\n-    }\n-}\n-\n-#[plugin_registrar]\n-pub fn plugin_registrar(reg: &mut Registry) {\n-    reg.register_mir_pass(box Pass);\n-}"}, {"sha": "8f3a7ae3417366fe34dad2e590d8e1f7fcbbe562", "filename": "src/test/ui/span/issue-40157.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Ftest%2Fui%2Fspan%2Fissue-40157.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Ftest%2Fui%2Fspan%2Fissue-40157.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-40157.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main () {\n+    {println!(\"{:?}\", match { let foo = vec![1, 2]; foo.get(1) } { x => x });}\n+}"}, {"sha": "ad1c149d2e56f7546a7f86cbae68e4ee6a006a3d", "filename": "src/test/ui/span/issue-40157.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Ftest%2Fui%2Fspan%2Fissue-40157.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Ftest%2Fui%2Fspan%2Fissue-40157.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-40157.stderr?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -0,0 +1,14 @@\n+error: `foo` does not live long enough\n+  --> $DIR/issue-40157.rs:12:64\n+   |\n+12 |     {println!(\"{:?}\", match { let foo = vec![1, 2]; foo.get(1) } { x => x });}\n+   |      ----------------------------------------------------------^-------------\n+   |      |                                              |          |\n+   |      |                                              |          `foo` dropped here while still borrowed\n+   |      |                                              borrow occurs here\n+   |      borrowed value needs to live until here\n+   |\n+   = note: this error originates in a macro outside of the current crate\n+\n+error: aborting due to previous error\n+"}, {"sha": "5c8e73e674751d109db04ffec9e4d657e0abae90", "filename": "src/test/ui/span/lint-unused-unsafe.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "previous_filename": "src/test/compile-fail/lint-unused-unsafe.rs"}, {"sha": "0df3fa43022a485c3c993512a3602d18a6263d00", "filename": "src/test/ui/span/lint-unused-unsafe.stderr", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Flint-unused-unsafe.stderr?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -0,0 +1,116 @@\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:26:13\n+   |\n+26 | fn bad1() { unsafe {} }                  //~ ERROR: unnecessary `unsafe` block\n+   |             ^^^^^^^^^ unnecessary `unsafe` block\n+   |\n+note: lint level defined here\n+  --> $DIR/lint-unused-unsafe.rs:14:9\n+   |\n+14 | #![deny(unused_unsafe)]\n+   |         ^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:27:13\n+   |\n+27 | fn bad2() { unsafe { bad1() } }          //~ ERROR: unnecessary `unsafe` block\n+   |             ^^^^^^^^^^^^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:28:20\n+   |\n+28 | unsafe fn bad3() { unsafe {} }           //~ ERROR: unnecessary `unsafe` block\n+   |                    ^^^^^^^^^ unnecessary `unsafe` block\n+   |\n+note: because it's nested under this `unsafe` fn\n+  --> $DIR/lint-unused-unsafe.rs:28:1\n+   |\n+28 | unsafe fn bad3() { unsafe {} }           //~ ERROR: unnecessary `unsafe` block\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:29:13\n+   |\n+29 | fn bad4() { unsafe { callback(||{}) } }  //~ ERROR: unnecessary `unsafe` block\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:30:20\n+   |\n+30 | unsafe fn bad5() { unsafe { unsf() } }   //~ ERROR: unnecessary `unsafe` block\n+   |                    ^^^^^^^^^^^^^^^^^ unnecessary `unsafe` block\n+   |\n+note: because it's nested under this `unsafe` fn\n+  --> $DIR/lint-unused-unsafe.rs:30:1\n+   |\n+30 | unsafe fn bad5() { unsafe { unsf() } }   //~ ERROR: unnecessary `unsafe` block\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:33:9\n+   |\n+33 |           unsafe {                         //~ ERROR: unnecessary `unsafe` block\n+   |  _________^ starting here...\n+34 | |             unsf()\n+35 | |         }\n+   | |_________^ ...ending here: unnecessary `unsafe` block\n+   |\n+note: because it's nested under this `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:32:5\n+   |\n+32 |       unsafe {                             // don't put the warning here\n+   |  _____^ starting here...\n+33 | |         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n+34 | |             unsf()\n+35 | |         }\n+36 | |     }\n+   | |_____^ ...ending here\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:39:5\n+   |\n+39 |       unsafe {                             //~ ERROR: unnecessary `unsafe` block\n+   |  _____^ starting here...\n+40 | |         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n+41 | |             unsf()\n+42 | |         }\n+43 | |     }\n+   | |_____^ ...ending here: unnecessary `unsafe` block\n+   |\n+note: because it's nested under this `unsafe` fn\n+  --> $DIR/lint-unused-unsafe.rs:38:1\n+   |\n+38 |   unsafe fn bad7() {\n+   |  _^ starting here...\n+39 | |     unsafe {                             //~ ERROR: unnecessary `unsafe` block\n+40 | |         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n+41 | |             unsf()\n+42 | |         }\n+43 | |     }\n+44 | | }\n+   | |_^ ...ending here\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/lint-unused-unsafe.rs:40:9\n+   |\n+40 |           unsafe {                         //~ ERROR: unnecessary `unsafe` block\n+   |  _________^ starting here...\n+41 | |             unsf()\n+42 | |         }\n+   | |_________^ ...ending here: unnecessary `unsafe` block\n+   |\n+note: because it's nested under this `unsafe` fn\n+  --> $DIR/lint-unused-unsafe.rs:38:1\n+   |\n+38 |   unsafe fn bad7() {\n+   |  _^ starting here...\n+39 | |     unsafe {                             //~ ERROR: unnecessary `unsafe` block\n+40 | |         unsafe {                         //~ ERROR: unnecessary `unsafe` block\n+41 | |             unsf()\n+42 | |         }\n+43 | |     }\n+44 | | }\n+   | |_^ ...ending here\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "67dbe1dc7b5668fbeb8d389e57a5d970d536891f", "filename": "src/test/ui/span/suggestion-non-ascii.rs", "status": "renamed", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Ftest%2Fui%2Fspan%2Fsuggestion-non-ascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Ftest%2Fui%2Fspan%2Fsuggestion-non-ascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsuggestion-non-ascii.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,16 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:dummy_mir_pass.rs\n-// ignore-stage1\n \n-#![feature(plugin)]\n-#![plugin(dummy_mir_pass)]\n-\n-fn math() -> i32 {\n-    11\n+fn main() {\n+    let tup = (1,);\n+    println!(\"\u2603{}\", tup[0]);\n }\n \n-pub fn main() {\n-    assert_eq!(math(), 42);\n-}", "previous_filename": "src/test/run-pass-fulldeps/mir-pass.rs"}, {"sha": "385c211f393c6c9f94cc88f3c096e15e8880bf59", "filename": "src/test/ui/span/suggestion-non-ascii.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Ftest%2Fui%2Fspan%2Fsuggestion-non-ascii.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Ftest%2Fui%2Fspan%2Fsuggestion-non-ascii.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsuggestion-non-ascii.stderr?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -0,0 +1,11 @@\n+error: cannot index a value of type `({integer},)`\n+  --> $DIR/suggestion-non-ascii.rs:14:21\n+   |\n+14 |     println!(\"\u2603{}\", tup[0]);\n+   |                     ^^^^^^\n+   |\n+help: to access tuple elements, use tuple indexing syntax as shown\n+   |     println!(\"\u2603{}\", tup.0);\n+\n+error: aborting due to previous error\n+"}, {"sha": "c2ec42195fcb7e16a76601780e46a10334e1ac60", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1727b2331740cb6fe684cf81b774e290eb875b6e/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=1727b2331740cb6fe684cf81b774e290eb875b6e", "patch": "@@ -45,6 +45,7 @@ static HOSTS: &'static [&'static str] = &[\n \n static TARGETS: &'static [&'static str] = &[\n     \"aarch64-apple-ios\",\n+    \"aarch64-unknown-fuchsia\",\n     \"aarch64-linux-android\",\n     \"aarch64-unknown-linux-gnu\",\n     \"arm-linux-androideabi\",\n@@ -86,6 +87,7 @@ static TARGETS: &'static [&'static str] = &[\n     \"x86_64-pc-windows-msvc\",\n     \"x86_64-rumprun-netbsd\",\n     \"x86_64-unknown-freebsd\",\n+    \"x86_64-unknown-fuchsia\",\n     \"x86_64-unknown-linux-gnu\",\n     \"x86_64-unknown-linux-musl\",\n     \"x86_64-unknown-netbsd\",\n@@ -183,15 +185,19 @@ impl Builder {\n         let mut manifest = BTreeMap::new();\n         manifest.insert(\"manifest-version\".to_string(),\n                         toml::Value::String(manifest_version));\n-        manifest.insert(\"date\".to_string(), toml::Value::String(date));\n+        manifest.insert(\"date\".to_string(), toml::Value::String(date.clone()));\n         manifest.insert(\"pkg\".to_string(), toml::encode(&pkg));\n         let manifest = toml::Value::Table(manifest).to_string();\n \n         let filename = format!(\"channel-rust-{}.toml\", self.rust_release);\n         self.write_manifest(&manifest, &filename);\n \n+        let filename = format!(\"channel-rust-{}-date.txt\", self.rust_release);\n+        self.write_date_stamp(&date, &filename);\n+\n         if self.rust_release != \"beta\" && self.rust_release != \"nightly\" {\n             self.write_manifest(&manifest, \"channel-rust-stable.toml\");\n+            self.write_date_stamp(&date, \"channel-rust-stable-date.txt\");\n         }\n     }\n \n@@ -218,7 +224,7 @@ impl Builder {\n         self.package(\"rust-docs\", &mut manifest.pkg, TARGETS);\n         self.package(\"rust-src\", &mut manifest.pkg, &[\"*\"]);\n \n-        if self.channel == \"nightly\" {\n+        if self.rust_release == \"nightly\" {\n             self.package(\"rust-analysis\", &mut manifest.pkg, TARGETS);\n         }\n \n@@ -271,7 +277,7 @@ impl Builder {\n                         target: target.to_string(),\n                     });\n                 }\n-                if self.channel == \"nightly\" {\n+                if self.rust_release == \"nightly\" {\n                     extensions.push(Component {\n                         pkg: \"rust-analysis\".to_string(),\n                         target: target.to_string(),\n@@ -411,4 +417,11 @@ impl Builder {\n         self.hash(&dst);\n         self.sign(&dst);\n     }\n+\n+    fn write_date_stamp(&self, date: &str, name: &str) {\n+        let dst = self.output.join(name);\n+        t!(t!(File::create(&dst)).write_all(date.as_bytes()));\n+        self.hash(&dst);\n+        self.sign(&dst);\n+    }\n }"}, {"sha": "d17b61aa5a2ca790f268a043bffdb0ffb04f0ec7", "filename": "src/tools/cargo", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=71c058b3054b373bd13f68cd85d8b45adcb5f7d5", "patch": "@@ -1 +0,0 @@\n-Subproject commit d17b61aa5a2ca790f268a043bffdb0ffb04f0ec7"}]}