{"sha": "dd3ed6139a6fc6fda15403d0b5679535959945e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkM2VkNjEzOWE2ZmM2ZmRhMTU0MDNkMGI1Njc5NTM1OTU5OTQ1ZTU=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-02-02T15:43:57Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-02-02T15:43:57Z"}, "message": "Add most of the plumbing for native items and add support for parsing native type declarations.", "tree": {"sha": "f97126df9bb855569e2b40d668d7190c033d8ce2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f97126df9bb855569e2b40d668d7190c033d8ce2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd3ed6139a6fc6fda15403d0b5679535959945e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd3ed6139a6fc6fda15403d0b5679535959945e5", "html_url": "https://github.com/rust-lang/rust/commit/dd3ed6139a6fc6fda15403d0b5679535959945e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd3ed6139a6fc6fda15403d0b5679535959945e5/comments", "author": null, "committer": null, "parents": [{"sha": "f22dc4d581760d365392323a431f4787f31ae130", "url": "https://api.github.com/repos/rust-lang/rust/commits/f22dc4d581760d365392323a431f4787f31ae130", "html_url": "https://github.com/rust-lang/rust/commit/f22dc4d581760d365392323a431f4787f31ae130"}], "stats": {"total": 100, "additions": 96, "deletions": 4}, "files": [{"sha": "7b22e700682cf919d532f01f2983807dfa809381", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dd3ed6139a6fc6fda15403d0b5679535959945e5/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3ed6139a6fc6fda15403d0b5679535959945e5/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=dd3ed6139a6fc6fda15403d0b5679535959945e5", "patch": "@@ -215,7 +215,6 @@ type obj_field = rec(@ty ty, ident ident, def_id id, ann ann);\n type _obj = rec(vec[obj_field] fields,\n                 vec[@method] methods);\n \n-\n tag mod_index_entry {\n     mie_view_item(@view_item);\n     mie_item(@item);\n@@ -227,7 +226,10 @@ type _mod = rec(vec[@view_item] view_items,\n                 vec[@item] items,\n                 mod_index index);\n \n-type native_mod = rec(str native_name);\n+type native_mod = rec(str native_name,\n+                      vec[@native_item] items,\n+                      native_mod_index index);\n+type native_mod_index = hashmap[ident,@native_item];\n \n type variant_arg = rec(@ty ty, def_id id);\n type variant = rec(str name, vec[variant_arg] args, def_id id, ann ann);\n@@ -249,6 +251,11 @@ tag item_ {\n     item_obj(ident, _obj, vec[ty_param], def_id, ann);\n }\n \n+type native_item = spanned[native_item_];\n+tag native_item_ {\n+    native_item_ty(ident, def_id);\n+}\n+\n fn index_view_item(mod_index index, @view_item it) {\n     alt (it.node) {\n         case(ast.view_item_use(?id, _, _)) {\n@@ -292,6 +299,14 @@ fn index_item(mod_index index, @item it) {\n     }\n }\n \n+fn index_native_item(native_mod_index index, @native_item it) {\n+    alt (it.node) {\n+        case (ast.native_item_ty(?id, _)) {\n+            index.insert(id, it);\n+        }\n+    }\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "c088e68d93916e76efd04ce23cbd90c4aceee12d", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/dd3ed6139a6fc6fda15403d0b5679535959945e5/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3ed6139a6fc6fda15403d0b5679535959945e5/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=dd3ed6139a6fc6fda15403d0b5679535959945e5", "patch": "@@ -1577,14 +1577,47 @@ impure fn parse_item_mod(parser p) -> @ast.item {\n     ret @spanned(lo, hi, item);\n }\n \n+\n+impure fn parse_item_native_type(parser p) -> @ast.native_item {\n+    auto lo = p.get_span();\n+    expect(p, token.TYPE);\n+    auto id = parse_ident(p);\n+    auto hi = p.get_span();\n+    expect(p, token.SEMI);\n+    auto item = ast.native_item_ty(id, p.next_def_id());\n+    ret @spanned(lo, hi, item);\n+}\n+\n+impure fn parse_native_item(parser p) -> @ast.native_item {\n+    alt (p.peek()) {\n+        case (token.TYPE) {\n+            ret parse_item_native_type(p);\n+        }\n+    }\n+}\n+\n+impure fn parse_native_mod_items(parser p,\n+                                 str native_name) -> ast.native_mod {\n+    auto index = new_str_hash[@ast.native_item]();\n+    let vec[@ast.native_item] items = vec();\n+    while (p.peek() != token.RBRACE) {\n+        auto item = parse_native_item(p);\n+        items += vec(item);\n+\n+        // Index the item.\n+        ast.index_native_item(index, item);\n+    }\n+    ret rec(native_name=native_name, items=items, index=index);\n+}\n+\n impure fn parse_item_native_mod(parser p) -> @ast.item {\n     auto lo = p.get_span();\n     expect(p, token.NATIVE);\n     auto native_name = parse_str_lit(p);\n     expect(p, token.MOD);\n     auto id = parse_ident(p);\n     expect(p, token.LBRACE);\n-    auto m = rec(native_name = native_name);\n+    auto m = parse_native_mod_items(p, native_name);\n     auto hi = p.get_span();\n     expect(p, token.RBRACE);\n     auto item = ast.item_native_mod(id, m, p.next_def_id());"}, {"sha": "b9027836afb68eb55c508e38bf222b792d877ad6", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/dd3ed6139a6fc6fda15403d0b5679535959945e5/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3ed6139a6fc6fda15403d0b5679535959945e5/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=dd3ed6139a6fc6fda15403d0b5679535959945e5", "patch": "@@ -20,6 +20,7 @@ import front.ast.block;\n import front.ast.item;\n import front.ast.view_item;\n import front.ast.meta_item;\n+import front.ast.native_item;\n import front.ast.arg;\n import front.ast.pat;\n import front.ast.decl;\n@@ -203,6 +204,9 @@ type ast_fold[ENV] =\n          @ty t, vec[ast.ty_param] ty_params,\n          def_id id, ann a) -> @item)              fold_item_ty,\n \n+     (fn(&ENV e, &span sp, ident ident,\n+         def_id id) -> @native_item)              fold_native_item_ty,\n+\n      (fn(&ENV e, &span sp, ident ident,\n          vec[ast.variant] variants,\n          vec[ast.ty_param] ty_params,\n@@ -244,6 +248,7 @@ type ast_fold[ENV] =\n      // Env updates.\n      (fn(&ENV e, @ast.crate c) -> ENV) update_env_for_crate,\n      (fn(&ENV e, @item i) -> ENV) update_env_for_item,\n+     (fn(&ENV e, @native_item i) -> ENV) update_env_for_native_item,\n      (fn(&ENV e, @view_item i) -> ENV) update_env_for_view_item,\n      (fn(&ENV e, &block b) -> ENV) update_env_for_block,\n      (fn(&ENV e, @stmt s) -> ENV) update_env_for_stmt,\n@@ -841,9 +846,34 @@ fn fold_mod[ENV](&ENV e, ast_fold[ENV] fld, &ast._mod m) -> ast._mod {\n     ret fld.fold_mod(e, rec(view_items=view_items, items=items, index=index));\n }\n \n+fn fold_native_item[ENV](&ENV env, ast_fold[ENV] fld,\n+                         @native_item i) -> @native_item {\n+    let ENV env_ = fld.update_env_for_native_item(env, i);\n+\n+    if (!fld.keep_going(env_)) {\n+        ret i;\n+    }\n+    alt (i.node) {\n+        case (ast.native_item_ty(?ident, ?id)) {\n+            ret fld.fold_native_item_ty(env_, i.span, ident, id);\n+        }\n+    }\n+}\n+\n fn fold_native_mod[ENV](&ENV e, ast_fold[ENV] fld,\n                         &ast.native_mod m) -> ast.native_mod {\n-    ret fld.fold_native_mod(e, rec(native_name = m.native_name));\n+    let vec[@native_item] items = vec();\n+    auto index = new_str_hash[@ast.native_item]();\n+\n+    for (@native_item i in m.items) {\n+        auto new_item = fold_native_item[ENV](e, fld, i);\n+        append[@native_item](items, new_item);\n+        ast.index_native_item(index, new_item);\n+    }\n+\n+    ret fld.fold_native_mod(e, rec(native_name=m.native_name,\n+                                   items=items,\n+                                   index=index));\n }\n \n fn fold_crate[ENV](&ENV env, ast_fold[ENV] fld, @ast.crate c) -> @ast.crate {\n@@ -1130,6 +1160,11 @@ fn identity_fold_item_ty[ENV](&ENV e, &span sp, ident i,\n     ret @respan(sp, ast.item_ty(i, t, ty_params, id, a));\n }\n \n+fn identity_fold_native_item_ty[ENV](&ENV e, &span sp, ident i,\n+                                     def_id id) -> @native_item {\n+    ret @respan(sp, ast.native_item_ty(i, id));\n+}\n+\n fn identity_fold_item_tag[ENV](&ENV e, &span sp, ident i,\n                                vec[ast.variant] variants,\n                                vec[ast.ty_param] ty_params,\n@@ -1204,6 +1239,10 @@ fn identity_update_env_for_item[ENV](&ENV e, @item i) -> ENV {\n     ret e;\n }\n \n+fn identity_update_env_for_native_item[ENV](&ENV e, @native_item i) -> ENV {\n+    ret e;\n+}\n+\n fn identity_update_env_for_view_item[ENV](&ENV e, @view_item i) -> ENV {\n     ret e;\n }\n@@ -1308,6 +1347,8 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_item_native_mod =\n              bind identity_fold_item_native_mod[ENV](_,_,_,_,_),\n          fold_item_ty   = bind identity_fold_item_ty[ENV](_,_,_,_,_,_,_),\n+         fold_native_item_ty =\n+             bind identity_fold_native_item_ty[ENV](_,_,_,_),\n          fold_item_tag  = bind identity_fold_item_tag[ENV](_,_,_,_,_,_),\n          fold_item_obj  = bind identity_fold_item_obj[ENV](_,_,_,_,_,_,_),\n \n@@ -1325,6 +1366,8 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n \n          update_env_for_crate = bind identity_update_env_for_crate[ENV](_,_),\n          update_env_for_item = bind identity_update_env_for_item[ENV](_,_),\n+         update_env_for_native_item =\n+             bind identity_update_env_for_native_item[ENV](_,_),\n          update_env_for_view_item =\n              bind identity_update_env_for_view_item[ENV](_,_),\n          update_env_for_block = bind identity_update_env_for_block[ENV](_,_),"}, {"sha": "b848ec8c9a36b868905149a9cdb92ab46325cea9", "filename": "src/test/run-pass/native2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd3ed6139a6fc6fda15403d0b5679535959945e5/src%2Ftest%2Frun-pass%2Fnative2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd3ed6139a6fc6fda15403d0b5679535959945e5/src%2Ftest%2Frun-pass%2Fnative2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnative2.rs?ref=dd3ed6139a6fc6fda15403d0b5679535959945e5", "patch": "@@ -1,4 +1,5 @@\n native \"rust\" mod rustrt {\n+    type vbuf;\n }\n \n fn main(vec[str] args) {"}]}