{"sha": "9c75f30272d8c520089a9937544bb77423b52a5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNzVmMzAyNzJkOGM1MjAwODlhOTkzNzU0NGJiNzc0MjNiNTJhNWM=", "commit": {"author": {"name": "Alexander Andreev", "email": "andreevlex.as@gmail.com", "date": "2019-07-14T06:24:18Z"}, "committer": {"name": "Alexander Andreev", "email": "andreevlex.as@gmail.com", "date": "2019-07-14T06:24:18Z"}, "message": "Fixed request comments", "tree": {"sha": "3f000814aa05a6d5c9adec1c7058f57691ff087f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f000814aa05a6d5c9adec1c7058f57691ff087f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c75f30272d8c520089a9937544bb77423b52a5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c75f30272d8c520089a9937544bb77423b52a5c", "html_url": "https://github.com/rust-lang/rust/commit/9c75f30272d8c520089a9937544bb77423b52a5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c75f30272d8c520089a9937544bb77423b52a5c/comments", "author": {"login": "ava57r", "id": 20382553, "node_id": "MDQ6VXNlcjIwMzgyNTUz", "avatar_url": "https://avatars.githubusercontent.com/u/20382553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ava57r", "html_url": "https://github.com/ava57r", "followers_url": "https://api.github.com/users/ava57r/followers", "following_url": "https://api.github.com/users/ava57r/following{/other_user}", "gists_url": "https://api.github.com/users/ava57r/gists{/gist_id}", "starred_url": "https://api.github.com/users/ava57r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ava57r/subscriptions", "organizations_url": "https://api.github.com/users/ava57r/orgs", "repos_url": "https://api.github.com/users/ava57r/repos", "events_url": "https://api.github.com/users/ava57r/events{/privacy}", "received_events_url": "https://api.github.com/users/ava57r/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ava57r", "id": 20382553, "node_id": "MDQ6VXNlcjIwMzgyNTUz", "avatar_url": "https://avatars.githubusercontent.com/u/20382553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ava57r", "html_url": "https://github.com/ava57r", "followers_url": "https://api.github.com/users/ava57r/followers", "following_url": "https://api.github.com/users/ava57r/following{/other_user}", "gists_url": "https://api.github.com/users/ava57r/gists{/gist_id}", "starred_url": "https://api.github.com/users/ava57r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ava57r/subscriptions", "organizations_url": "https://api.github.com/users/ava57r/orgs", "repos_url": "https://api.github.com/users/ava57r/repos", "events_url": "https://api.github.com/users/ava57r/events{/privacy}", "received_events_url": "https://api.github.com/users/ava57r/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22b863c53401971200ed0d94a6f4d9389891c608", "url": "https://api.github.com/repos/rust-lang/rust/commits/22b863c53401971200ed0d94a6f4d9389891c608", "html_url": "https://github.com/rust-lang/rust/commit/22b863c53401971200ed0d94a6f4d9389891c608"}], "stats": {"total": 138, "additions": 72, "deletions": 66}, "files": [{"sha": "7f765caf36ad4e2c4072cf1dd919879e716398a2", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9c75f30272d8c520089a9937544bb77423b52a5c/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c75f30272d8c520089a9937544bb77423b52a5c/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=9c75f30272d8c520089a9937544bb77423b52a5c", "patch": "@@ -1,3 +1,5 @@\n+use std::borrow::Cow;\n+\n use arrayvec::ArrayVec;\n use ra_db::FileId;\n use ra_syntax::{ast, SmolStr};\n@@ -650,7 +652,7 @@ fn resolve_submodule(\n     let mut candidates = ArrayVec::<[_; 3]>::new();\n     let file_attr_mod = attr_path.map(|file_path| {\n         let file_path = normalize_attribute_path(file_path);\n-        let file_attr_mod = dir_path.join(file_path).normalize();\n+        let file_attr_mod = dir_path.join(file_path.as_ref()).normalize();\n         candidates.push(file_attr_mod.clone());\n \n         file_attr_mod\n@@ -676,14 +678,18 @@ fn resolve_submodule(\n     }\n }\n \n-fn normalize_attribute_path(file_path: &SmolStr) -> String {\n+fn normalize_attribute_path(file_path: &SmolStr) -> Cow<str> {\n     let current_dir = \"./\";\n-\n-    let separator = |path: &str| path.replace(\"\\\\\", \"/\");\n-    if file_path.starts_with(current_dir) {\n-        separator(&file_path[current_dir.len()..])\n+    let windows_path_separator = r#\"\\\"#;\n+    let current_dir_normalize = if file_path.starts_with(current_dir) {\n+        &file_path[current_dir.len()..]\n+    } else {\n+        file_path.as_str()\n+    };\n+    if current_dir_normalize.contains(windows_path_separator) {\n+        Cow::Owned(current_dir_normalize.replace(windows_path_separator, \"/\"))\n     } else {\n-        separator(file_path.as_str())\n+        Cow::Borrowed(current_dir_normalize)\n     }\n }\n "}, {"sha": "d714a3276acb0e6cf934b8f1bcbbaaae19bad231", "filename": "crates/ra_hir/src/nameres/tests/mods.rs", "status": "modified", "additions": 59, "deletions": 59, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/9c75f30272d8c520089a9937544bb77423b52a5c/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c75f30272d8c520089a9937544bb77423b52a5c/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmods.rs?ref=9c75f30272d8c520089a9937544bb77423b52a5c", "patch": "@@ -80,15 +80,15 @@ fn module_resolution_works_for_raw_modules() {\n #[test]\n fn module_resolution_decl_path() {\n     let map = def_map_with_crate_graph(\n-        \"\n+        r###\"\n         //- /library.rs\n-        #[path = \\\"bar/baz/foo.rs\\\"]\n+        #[path = \"bar/baz/foo.rs\"]\n         mod foo;\n         use self::foo::Bar;\n \n         //- /bar/baz/foo.rs\n         pub struct Bar;\n-        \",\n+        \"###,\n         crate_graph! {\n             \"library\": (\"/library.rs\", []),\n         },\n@@ -107,19 +107,19 @@ fn module_resolution_decl_path() {\n #[test]\n fn module_resolution_module_with_path_in_mod_rs() {\n     let map = def_map_with_crate_graph(\n-        \"\n+        r###\"\n         //- /main.rs\n         mod foo;\n         \n         //- /foo/mod.rs\n-        #[path = \\\"baz.rs\\\"]\n+        #[path = \"baz.rs\"]\n         pub mod bar;\n \n         use self::bar::Baz;\n \n         //- /foo/baz.rs\n         pub struct Baz;\n-        \",\n+        \"###,\n         crate_graph! {\n             \"main\": (\"/main.rs\", []),\n         },\n@@ -141,19 +141,19 @@ fn module_resolution_module_with_path_in_mod_rs() {\n #[test]\n fn module_resolution_module_with_path_non_crate_root() {\n     let map = def_map_with_crate_graph(\n-        \"\n+        r###\"\n         //- /main.rs\n         mod foo;\n         \n         //- /foo.rs\n-        #[path = \\\"baz.rs\\\"]\n+        #[path = \"baz.rs\"]\n         pub mod bar;\n \n         use self::bar::Baz;\n \n         //- /baz.rs\n         pub struct Baz;\n-        \",\n+        \"###,\n         crate_graph! {\n             \"main\": (\"/main.rs\", []),\n         },\n@@ -175,15 +175,15 @@ fn module_resolution_module_with_path_non_crate_root() {\n #[test]\n fn module_resolution_module_decl_path_super() {\n     let map = def_map_with_crate_graph(\n-        \"\n+        r###\"\n         //- /main.rs\n-        #[path = \\\"bar/baz/module.rs\\\"]\n+        #[path = \"bar/baz/module.rs\"]\n         mod foo;\n         pub struct Baz;\n \n         //- /bar/baz/module.rs\n         use super::Baz;\n-        \",\n+        \"###,\n         crate_graph! {\n             \"main\": (\"/main.rs\", []),\n         },\n@@ -202,14 +202,14 @@ fn module_resolution_module_decl_path_super() {\n #[test]\n fn module_resolution_explicit_path_mod_rs() {\n     let map = def_map_with_crate_graph(\n-        \"\n+        r###\"\n         //- /main.rs\n-        #[path = \\\"module/mod.rs\\\"]\n+        #[path = \"module/mod.rs\"]\n         mod foo;\n \n         //- /module/mod.rs\n         pub struct Baz;\n-        \",\n+        \"###,\n         crate_graph! {\n             \"main\": (\"/main.rs\", []),\n         },\n@@ -227,17 +227,17 @@ fn module_resolution_explicit_path_mod_rs() {\n #[test]\n fn module_resolution_relative_path() {\n     let map = def_map_with_crate_graph(\n-        \"\n+        r###\"\n         //- /main.rs\n         mod foo;\n \n         //- /foo.rs\n-        #[path = \\\"./sub.rs\\\"]\n+        #[path = \"./sub.rs\"]\n         pub mod foo_bar;\n \n         //- /sub.rs\n         pub struct Baz;\n-        \",\n+        \"###,\n         crate_graph! {\n             \"main\": (\"/main.rs\", []),\n         },\n@@ -258,17 +258,17 @@ fn module_resolution_relative_path() {\n #[test]\n fn module_resolution_relative_path_2() {\n     let map = def_map_with_crate_graph(\n-        \"\n+        r###\"\n         //- /main.rs\n         mod foo;\n \n         //- /foo/mod.rs\n-        #[path=\\\"../sub.rs\\\"]\n+        #[path=\"../sub.rs\"]\n         pub mod foo_bar;\n \n         //- /sub.rs\n         pub struct Baz;\n-        \",\n+        \"###,\n         crate_graph! {\n             \"main\": (\"/main.rs\", []),\n         },\n@@ -289,14 +289,14 @@ fn module_resolution_relative_path_2() {\n #[test]\n fn module_resolution_explicit_path_mod_rs_2() {\n     let map = def_map_with_crate_graph(\n-        \"\n+        r###\"\n         //- /main.rs\n-        #[path = \\\"module/bar/mod.rs\\\"]\n+        #[path = \"module/bar/mod.rs\"]\n         mod foo;\n \n         //- /module/bar/mod.rs\n         pub struct Baz;\n-        \",\n+        \"###,\n         crate_graph! {\n             \"main\": (\"/main.rs\", []),\n         },\n@@ -314,14 +314,14 @@ fn module_resolution_explicit_path_mod_rs_2() {\n #[test]\n fn module_resolution_explicit_path_mod_rs_with_win_separator() {\n     let map = def_map_with_crate_graph(\n-        \"\n+        r###\"\n         //- /main.rs\n-        #[path = \\\"module\\\\bar\\\\mod.rs\\\"]\n+        #[path = \"module\\bar\\mod.rs\"]\n         mod foo;\n \n         //- /module/bar/mod.rs\n         pub struct Baz;\n-        \",\n+        \"###,\n         crate_graph! {\n             \"main\": (\"/main.rs\", []),\n         },\n@@ -341,16 +341,16 @@ fn module_resolution_explicit_path_mod_rs_with_win_separator() {\n #[ignore]\n fn module_resolution_decl_inside_inline_module() {\n     let map = def_map_with_crate_graph(\n-        \"\n+        r###\"\n         //- /main.rs\n-        #[path = \\\"models\\\"]\n+        #[path = \"models\"]\n         mod foo {\n             mod bar;\n         }\n \n         //- /models/bar.rs\n         pub struct Baz;\n-        \",\n+        \"###,\n         crate_graph! {\n             \"main\": (\"/main.rs\", []),\n         },\n@@ -373,16 +373,16 @@ fn module_resolution_decl_inside_inline_module() {\n #[ignore]\n fn module_resolution_decl_inside_inline_module_2() {\n     let map = def_map_with_crate_graph(\n-        \"\n+        r###\"\n         //- /main.rs\n-        #[path = \\\"models/db\\\"]\n+        #[path = \"models/db\"]\n         mod foo {\n             mod bar;\n         }\n \n         //- /models/db/bar.rs\n         pub struct Baz;\n-        \",\n+        \"###,\n         crate_graph! {\n             \"main\": (\"/main.rs\", []),\n         },\n@@ -405,17 +405,17 @@ fn module_resolution_decl_inside_inline_module_2() {\n #[ignore]\n fn module_resolution_decl_inside_inline_module_3() {\n     let map = def_map_with_crate_graph(\n-        \"\n+        r###\"\n         //- /main.rs\n-        #[path = \\\"models/db\\\"]\n+        #[path = \"models/db\"]\n         mod foo {\n-            #[path = \\\"users.rs\\\"]\n+            #[path = \"users.rs\"]\n             mod bar;\n         }\n \n         //- /models/db/users.rs\n         pub struct Baz;\n-        \",\n+        \"###,\n         crate_graph! {\n             \"main\": (\"/main.rs\", []),\n         },\n@@ -438,17 +438,17 @@ fn module_resolution_decl_inside_inline_module_3() {\n #[ignore]\n fn module_resolution_decl_inside_inline_module_empty_path() {\n     let map = def_map_with_crate_graph(\n-        \"\n+        r###\"\n         //- /main.rs\n-        #[path = \\\"\\\"]\n+        #[path = \"\"]\n         mod foo {\n-            #[path = \\\"users.rs\\\"]\n+            #[path = \"users.rs\"]\n             mod bar;\n         }\n \n         //- /users.rs\n         pub struct Baz;\n-        \",\n+        \"###,\n         crate_graph! {\n             \"main\": (\"/main.rs\", []),\n         },\n@@ -469,14 +469,14 @@ fn module_resolution_decl_inside_inline_module_empty_path() {\n #[test]\n fn module_resolution_decl_empty_path() {\n     let map = def_map_with_crate_graph(\n-        \"\n+        r###\"\n         //- /main.rs\n-        #[path = \\\"\\\"]\n+        #[path = \"\"]\n         mod foo;\n \n         //- /foo.rs\n         pub struct Baz;\n-        \",\n+        \"###,\n         crate_graph! {\n             \"main\": (\"/main.rs\", []),\n         },\n@@ -496,16 +496,16 @@ fn module_resolution_decl_empty_path() {\n #[ignore]\n fn module_resolution_decl_inside_inline_module_relative_path() {\n     let map = def_map_with_crate_graph(\n-        \"\n+        r###\"\n         //- /main.rs\n-        #[path = \\\"./models\\\"]\n+        #[path = \"./models\"]\n         mod foo {\n             mod bar;\n         }\n \n         //- /models/bar.rs\n         pub struct Baz;\n-        \",\n+        \"###,\n         crate_graph! {\n             \"main\": (\"/main.rs\", []),\n         },\n@@ -528,17 +528,17 @@ fn module_resolution_decl_inside_inline_module_relative_path() {\n #[ignore]\n fn module_resolution_decl_inside_inline_module_in_crate_root() {\n     let map = def_map_with_crate_graph(\n-        \"\n+        r###\"\n         //- /main.rs\n         mod foo {\n-            #[path = \\\"baz.rs\\\"]\n+            #[path = \"baz.rs\"]\n             mod bar;\n         }\n         use self::foo::bar::Baz;\n \n         //- /foo/baz.rs\n         pub struct Baz;\n-        \",\n+        \"###,\n         crate_graph! {\n             \"main\": (\"/main.rs\", []),\n         },\n@@ -562,20 +562,20 @@ fn module_resolution_decl_inside_inline_module_in_crate_root() {\n #[ignore]\n fn module_resolution_decl_inside_inline_module_in_mod_rs() {\n     let map = def_map_with_crate_graph(\n-        \"\n+        r###\"\n         //- /main.rs\n         mod foo;\n \n         //- /foo/mod.rs\n         mod bar {\n-            #[path = \\\"qwe.rs\\\"]\n+            #[path = \"qwe.rs\"]\n             pub mod baz;\n         }\n         use self::bar::baz::Baz;\n \n         //- /foo/bar/qwe.rs\n         pub struct Baz;\n-        \",\n+        \"###,\n         crate_graph! {\n             \"main\": (\"/main.rs\", []),\n         },\n@@ -602,20 +602,20 @@ fn module_resolution_decl_inside_inline_module_in_mod_rs() {\n #[ignore]\n fn module_resolution_decl_inside_inline_module_in_non_crate_root() {\n     let map = def_map_with_crate_graph(\n-        \"\n+        r###\"\n         //- /main.rs\n         mod foo;\n \n         //- /foo.rs\n         mod bar {\n-            #[path = \\\"qwe.rs\\\"]\n+            #[path = \"qwe.rs\"]\n             pub mod baz;\n         }\n         use self::bar::baz::Baz;\n \n         //- /foo/bar/qwe.rs\n         pub struct Baz;\n-        \",\n+        \"###,\n         crate_graph! {\n             \"main\": (\"/main.rs\", []),\n         },\n@@ -642,20 +642,20 @@ fn module_resolution_decl_inside_inline_module_in_non_crate_root() {\n #[ignore]\n fn module_resolution_decl_inside_inline_module_in_non_crate_root_2() {\n     let map = def_map_with_crate_graph(\n-        \"\n+        r###\"\n         //- /main.rs\n         mod foo;\n \n         //- /foo.rs\n-        #[path = \\\"bar\\\"]\n+        #[path = \"bar\"]\n         mod bar {\n             pub mod baz;\n         }\n         use self::bar::baz::Baz;\n \n         //- /bar/baz.rs\n         pub struct Baz;\n-        \",\n+        \"###,\n         crate_graph! {\n             \"main\": (\"/main.rs\", []),\n         },"}]}