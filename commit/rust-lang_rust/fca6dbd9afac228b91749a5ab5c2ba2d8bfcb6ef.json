{"sha": "fca6dbd9afac228b91749a5ab5c2ba2d8bfcb6ef", "node_id": "C_kwDOAAsO6NoAKGZjYTZkYmQ5YWZhYzIyOGI5MTc0OWE1YWI1YzJiYTJkOGJmY2I2ZWY", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-04-28T04:43:33Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-06-18T14:58:29Z"}, "message": "Add tests for fixed bugs", "tree": {"sha": "b034277adea2da14e21c6bb7624dc15c4fe4b2ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b034277adea2da14e21c6bb7624dc15c4fe4b2ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fca6dbd9afac228b91749a5ab5c2ba2d8bfcb6ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fca6dbd9afac228b91749a5ab5c2ba2d8bfcb6ef", "html_url": "https://github.com/rust-lang/rust/commit/fca6dbd9afac228b91749a5ab5c2ba2d8bfcb6ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fca6dbd9afac228b91749a5ab5c2ba2d8bfcb6ef/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0da0a2196d2d7b37bd5e07ce18b03568e2711f39", "url": "https://api.github.com/repos/rust-lang/rust/commits/0da0a2196d2d7b37bd5e07ce18b03568e2711f39", "html_url": "https://github.com/rust-lang/rust/commit/0da0a2196d2d7b37bd5e07ce18b03568e2711f39"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "3b20cc4ca39290751d6306538845fde82879fdce", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fca6dbd9afac228b91749a5ab5c2ba2d8bfcb6ef/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fca6dbd9afac228b91749a5ab5c2ba2d8bfcb6ef/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=fca6dbd9afac228b91749a5ab5c2ba2d8bfcb6ef", "patch": "@@ -348,7 +348,11 @@ impl StepDescription {\n             eprintln!(\n                 \"note: if you are adding a new Step to bootstrap itself, make sure you register it with `describe!`\"\n             );\n+            #[cfg(not(test))]\n             std::process::exit(1);\n+            #[cfg(test)]\n+            // so we can use #[should_panic]\n+            panic!()\n         }\n     }\n }"}, {"sha": "70cb0de7cce04401dfdf5a7c972fa0b02cdb73d6", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fca6dbd9afac228b91749a5ab5c2ba2d8bfcb6ef/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fca6dbd9afac228b91749a5ab5c2ba2d8bfcb6ef/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=fca6dbd9afac228b91749a5ab5c2ba2d8bfcb6ef", "patch": "@@ -3,7 +3,11 @@ use crate::config::{Config, TargetSelection};\n use std::thread;\n \n fn configure(cmd: &str, host: &[&str], target: &[&str]) -> Config {\n-    let mut config = Config::parse(&[cmd.to_owned()]);\n+    configure_with_args(&[cmd.to_owned()], host, target)\n+}\n+\n+fn configure_with_args(cmd: &[String], host: &[&str], target: &[&str]) -> Config {\n+    let mut config = Config::parse(cmd);\n     // don't save toolstates\n     config.save_toolstates = None;\n     config.dry_run = true;\n@@ -46,11 +50,39 @@ fn run_build(paths: &[PathBuf], config: Config) -> Cache {\n     builder.cache\n }\n \n+fn check_cli<const N: usize>(paths: [&str; N]) {\n+    run_build(\n+        &paths.map(PathBuf::from),\n+        configure_with_args(&paths.map(String::from), &[\"A\"], &[\"A\"]),\n+    );\n+}\n+\n+#[test]\n+fn test_valid() {\n+    // make sure multi suite paths are accepted\n+    check_cli([\"test\", \"src/test/ui/attr-start.rs\", \"src/test/ui/attr-shebang.rs\"]);\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_invalid() {\n+    // make sure that invalid paths are caught, even when combined with valid paths\n+    check_cli([\"test\", \"library/std\", \"x\"]);\n+}\n+\n #[test]\n fn test_intersection() {\n-    let set = PathSet::Set([\"library/core\", \"library/alloc\", \"library/std\"].into_iter().map(TaskPath::parse).collect());\n-    let subset = set.intersection(&[Path::new(\"library/core\"), Path::new(\"library/alloc\"), Path::new(\"library/stdarch\")], None);\n-    assert_eq!(subset, PathSet::Set([\"library/core\", \"library/alloc\"].into_iter().map(TaskPath::parse).collect()));\n+    let set = PathSet::Set(\n+        [\"library/core\", \"library/alloc\", \"library/std\"].into_iter().map(TaskPath::parse).collect(),\n+    );\n+    let mut command_paths =\n+        vec![Path::new(\"library/core\"), Path::new(\"library/alloc\"), Path::new(\"library/stdarch\")];\n+    let subset = set.intersection_removing_matches(&mut command_paths, None);\n+    assert_eq!(\n+        subset,\n+        PathSet::Set([\"library/core\", \"library/alloc\"].into_iter().map(TaskPath::parse).collect())\n+    );\n+    assert_eq!(command_paths, vec![Path::new(\"library/stdarch\")]);\n }\n \n #[test]"}]}