{"sha": "b0feb5be2f045a7611845b92113f7f720c32ae95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZmViNWJlMmYwNDVhNzYxMTg0NWI5MjExM2Y3ZjcyMGMzMmFlOTU=", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-03-01T11:50:09Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-03-23T17:16:20Z"}, "message": "progress, stuff compiles now", "tree": {"sha": "e7de52e5c76f1cef681e1b4f7522421367eaa048", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7de52e5c76f1cef681e1b4f7522421367eaa048"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0feb5be2f045a7611845b92113f7f720c32ae95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0feb5be2f045a7611845b92113f7f720c32ae95", "html_url": "https://github.com/rust-lang/rust/commit/b0feb5be2f045a7611845b92113f7f720c32ae95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0feb5be2f045a7611845b92113f7f720c32ae95/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ef81388e2def7b12d3b527705bf32402c8d7c8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ef81388e2def7b12d3b527705bf32402c8d7c8a", "html_url": "https://github.com/rust-lang/rust/commit/8ef81388e2def7b12d3b527705bf32402c8d7c8a"}], "stats": {"total": 184, "additions": 108, "deletions": 76}, "files": [{"sha": "96bb9cfb1a6bb1593d3563621b0424db651fc29b", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b0feb5be2f045a7611845b92113f7f720c32ae95/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0feb5be2f045a7611845b92113f7f720c32ae95/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=b0feb5be2f045a7611845b92113f7f720c32ae95", "patch": "@@ -1150,20 +1150,23 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n \n     fn visit_generics(&mut self, generics: &'a Generics) {\n-        let mut prev_ty_default = None;\n+        let cg_defaults = self.session.features_untracked().const_generics_defaults;\n+\n+        let mut prev_param_default = None;\n         for param in &generics.params {\n             match param.kind {\n                 GenericParamKind::Lifetime => (),\n-                GenericParamKind::Type { default: Some(_), .. } => {\n-                    prev_ty_default = Some(param.ident.span);\n+                GenericParamKind::Type { default: Some(_), .. }\n+                | GenericParamKind::Const { default: Some(_), .. } => {\n+                    prev_param_default = Some(param.ident.span);\n                 }\n                 GenericParamKind::Type { .. } | GenericParamKind::Const { .. } => {\n-                    if let Some(span) = prev_ty_default {\n+                    if let Some(span) = prev_param_default {\n                         let mut err = self.err_handler().struct_span_err(\n                             span,\n-                            \"type parameters with a default must be trailing\",\n+                            \"generic parameters with a default must be trailing\",\n                         );\n-                        if matches!(param.kind, GenericParamKind::Const { .. }) {\n+                        if matches!(param.kind, GenericParamKind::Const { .. }) && !cg_defaults {\n                             err.note(\n                                 \"using type defaults and const parameters \\\n                                  in the same parameter list is currently not permitted\",\n@@ -1174,17 +1177,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     }\n                 }\n             }\n-            if !self.session.features_untracked().const_generics_defaults {\n-                if let GenericParamKind::Const { default: Some(ref default), .. } = param.kind {\n-                    let mut err = self.err_handler().struct_span_err(\n-                        default.value.span,\n-                        \"default values for const generic parameters are unstable\",\n-                    );\n-                    err.help(\"add `#![feature(const_generic_defaults)]` to the crate attributes to enable\");\n-                    err.emit();\n-                    break;\n-                }\n-            }\n         }\n \n         validate_generic_param_order("}, {"sha": "2ea8ae68ef87702265e4d2b1a3d366321155d39f", "filename": "compiler/rustc_error_codes/src/error_codes/E0128.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0feb5be2f045a7611845b92113f7f720c32ae95/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0128.md", "raw_url": "https://github.com/rust-lang/rust/raw/b0feb5be2f045a7611845b92113f7f720c32ae95/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0128.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0128.md?ref=b0feb5be2f045a7611845b92113f7f720c32ae95", "patch": "@@ -7,7 +7,7 @@ struct Foo<T = U, U = ()> {\n     field1: T,\n     field2: U,\n }\n-// error: type parameters with a default cannot use forward declared\n+// error: generic parameters with a default cannot use forward declared\n //        identifiers\n ```\n "}, {"sha": "9b908b141af147659048d542d86b68c493f53876", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b0feb5be2f045a7611845b92113f7f720c32ae95/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0feb5be2f045a7611845b92113f7f720c32ae95/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=b0feb5be2f045a7611845b92113f7f720c32ae95", "patch": "@@ -366,6 +366,9 @@ pub trait Visitor<'v>: Sized {\n     fn visit_generic_param(&mut self, p: &'v GenericParam<'v>) {\n         walk_generic_param(self, p)\n     }\n+    fn visit_const_param_default(&mut self, _param: HirId, ct: &'v AnonConst) {\n+        walk_const_param_default(self, ct)\n+    }\n     fn visit_generics(&mut self, g: &'v Generics<'v>) {\n         walk_generics(self, g)\n     }\n@@ -869,13 +872,17 @@ pub fn walk_generic_param<'v, V: Visitor<'v>>(visitor: &mut V, param: &'v Generi\n         GenericParamKind::Const { ref ty, ref default } => {\n             visitor.visit_ty(ty);\n             if let Some(ref default) = default {\n-                visitor.visit_anon_const(default);\n+                visitor.visit_const_param_default(param.hir_id, default);\n             }\n         }\n     }\n     walk_list!(visitor, visit_param_bound, param.bounds);\n }\n \n+pub fn walk_const_param_default<'v, V: Visitor<'v>>(visitor: &mut V, ct: &'v AnonConst) {\n+    visitor.visit_anon_const(ct)\n+}\n+\n pub fn walk_generics<'v, V: Visitor<'v>>(visitor: &mut V, generics: &'v Generics<'v>) {\n     walk_list!(visitor, visit_generic_param, generics.params);\n     walk_list!(visitor, visit_where_predicate, generics.where_clause.predicates);"}, {"sha": "4602ed695fe68ccdc8202a1e6cd105f9c013c9ef", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0feb5be2f045a7611845b92113f7f720c32ae95/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0feb5be2f045a7611845b92113f7f720c32ae95/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=b0feb5be2f045a7611845b92113f7f720c32ae95", "patch": "@@ -395,6 +395,10 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         }\n     }\n \n+    fn visit_const_param_default(&mut self, param: HirId, ct: &'hir AnonConst) {\n+        self.with_parent(param, |this| intravisit::walk_const_param_default(this, ct))\n+    }\n+\n     fn visit_trait_item(&mut self, ti: &'hir TraitItem<'hir>) {\n         self.with_dep_node_owner(ti.def_id, ti, |this, hash| {\n             this.insert_with_hash(ti.span, ti.hir_id(), Node::TraitItem(ti), hash);"}, {"sha": "9cd4c09082cef2472ad8588294d463bbf274c25b", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0feb5be2f045a7611845b92113f7f720c32ae95/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0feb5be2f045a7611845b92113f7f720c32ae95/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=b0feb5be2f045a7611845b92113f7f720c32ae95", "patch": "@@ -44,7 +44,11 @@ impl<'tcx> Const<'tcx> {\n         let hir_id = tcx.hir().local_def_id_to_hir_id(def.did);\n \n         let body_id = match tcx.hir().get(hir_id) {\n-            hir::Node::AnonConst(ac) => ac.body,\n+            hir::Node::AnonConst(ac)\n+            | hir::Node::GenericParam(hir::GenericParam {\n+                kind: hir::GenericParamKind::Const { ty: _, default: Some(ac) },\n+                ..\n+            }) => ac.body,\n             _ => span_bug!(\n                 tcx.def_span(def.did.to_def_id()),\n                 \"from_anon_const can only process anonymous constants\""}, {"sha": "14e3d8498b0d8d4a278bac71de474a3492414dc4", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0feb5be2f045a7611845b92113f7f720c32ae95/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0feb5be2f045a7611845b92113f7f720c32ae95/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=b0feb5be2f045a7611845b92113f7f720c32ae95", "patch": "@@ -228,7 +228,7 @@ enum ResolutionError<'a> {\n     ),\n     /// Error E0530: `X` bindings cannot shadow `Y`s.\n     BindingShadowsSomethingUnacceptable(&'static str, Symbol, &'a NameBinding<'a>),\n-    /// Error E0128: type parameters with a default cannot use forward-declared identifiers.\n+    /// Error E0128: generic parameters with a default cannot use forward-declared identifiers.\n     ForwardDeclaredTyParam, // FIXME(const_generics_defaults)\n     /// ERROR E0770: the type of const parameters must not depend on other generic parameters.\n     ParamInTyOfConstParam(Symbol),\n@@ -238,7 +238,7 @@ enum ResolutionError<'a> {\n     ///\n     /// This error is only emitted when using `min_const_generics`.\n     ParamInNonTrivialAnonConst { name: Symbol, is_type: bool },\n-    /// Error E0735: type parameters with a default cannot use `Self`\n+    /// Error E0735: generic parameters with a default cannot use `Self`\n     SelfInTyParamDefault,\n     /// Error E0767: use of unreachable label\n     UnreachableLabel { name: Symbol, definition_span: Span, suggestion: Option<LabelSuggestion> },"}, {"sha": "9625211109d1067c04d2572ab2de4473c33a4268", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0feb5be2f045a7611845b92113f7f720c32ae95/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0feb5be2f045a7611845b92113f7f720c32ae95/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=b0feb5be2f045a7611845b92113f7f720c32ae95", "patch": "@@ -499,7 +499,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             let expected_min = if infer_args {\n                 0\n             } else {\n-                param_counts.consts + named_type_param_count - default_counts.types\n+                param_counts.consts + named_type_param_count\n+                    - default_counts.types\n+                    - default_counts.consts\n             };\n \n             check_generics("}, {"sha": "1a765772e3ca99e3140201f70bfc43bd8d8e6f56", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b0feb5be2f045a7611845b92113f7f720c32ae95/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0feb5be2f045a7611845b92113f7f720c32ae95/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=b0feb5be2f045a7611845b92113f7f720c32ae95", "patch": "@@ -505,34 +505,17 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         }\n                     }\n                     GenericParamDefKind::Const { has_default } => {\n-                        let ty = tcx.at(self.span).type_of(param.def_id);\n                         if !infer_args && has_default {\n-                            let c = substs.unwrap()[param.index as usize].expect_const();\n-                            ty::subst::GenericArg::from(c)\n-                        } else if infer_args {\n-                            self.astconv.ct_infer(ty, Some(param), self.span).into()\n+                            ty::Const::from_anon_const(tcx, param.def_id.expect_local()).into()\n                         } else {\n-                            // We've already errored above about the mismatch.\n-                            tcx.const_error(ty).into()\n-                        }\n-                        // FIXME(const_generic_defaults)\n-                        /*\n-                        if !infer_args && has_default {\n-                            /*\n-                            if default_needs_object_self(param) {\n-                                missing_type_params.push(param.name.to_string());\n-                                tcx.const_error(ty).into()\n+                            let ty = tcx.at(self.span).type_of(param.def_id);\n+                            if infer_args {\n+                                self.astconv.ct_infer(ty, Some(param), self.span).into()\n                             } else {\n+                                // We've already errored above about the mismatch.\n+                                tcx.const_error(ty).into()\n                             }\n-                            */\n-                        } else if infer_args {\n-                            // No const parameters were provided, we can infer all.\n-                            self.astconv.ct_infer(ty, Some(param), self.span).into()\n-                        } else {\n-                            // We've already errored above about the mismatch.\n-                            tcx.const_error(ty).into()\n                         }\n-                        */\n                     }\n                 }\n             }"}, {"sha": "49b6e506eb1aae906a9abc77c7ab505d6c66cff0", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b0feb5be2f045a7611845b92113f7f720c32ae95/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0feb5be2f045a7611845b92113f7f720c32ae95/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=b0feb5be2f045a7611845b92113f7f720c32ae95", "patch": "@@ -1444,12 +1444,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n                     }\n                     GenericParamDefKind::Const { has_default, .. } => {\n-                        if infer_args || !has_default {\n-                            return self.fcx.var_for_def(self.span, param);\n+                        if !infer_args && has_default {\n+                            ty::Const::from_anon_const(tcx, param.def_id.expect_local()).into()\n+                        } else {\n+                            self.fcx.var_for_def(self.span, param)\n                         }\n-                        // FIXME(const_generic_defaults)\n-                        // No const parameters were provided, we have to infer them.\n-                        todo!()\n                     }\n                 }\n             }"}, {"sha": "7fd49ccc8e46a57cf8a55997c889c8e0fee84778", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b0feb5be2f045a7611845b92113f7f720c32ae95/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0feb5be2f045a7611845b92113f7f720c32ae95/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=b0feb5be2f045a7611845b92113f7f720c32ae95", "patch": "@@ -759,7 +759,7 @@ fn check_where_clauses<'tcx, 'fcx>(\n                 fcx.tcx.mk_param_from_def(param)\n             }\n \n-            GenericParamDefKind::Type { .. } | GenericParamDefKind::Const { .. } => {\n+            GenericParamDefKind::Type { .. } => {\n                 // If the param has a default, ...\n                 if is_our_default(param) {\n                     let default_ty = fcx.tcx.type_of(param.def_id);\n@@ -772,6 +772,16 @@ fn check_where_clauses<'tcx, 'fcx>(\n \n                 fcx.tcx.mk_param_from_def(param)\n             }\n+            GenericParamDefKind::Const { .. } => {\n+                if is_our_default(param) {\n+                    let default_ct = ty::Const::from_anon_const(tcx, param.def_id.expect_local());\n+                    // Const params have to currently be concrete.\n+                    assert!(!default_ct.needs_subst());\n+                    default_ct.into()\n+                } else {\n+                    fcx.tcx.mk_param_from_def(param)\n+                }\n+            }\n         }\n     });\n "}, {"sha": "933618e3a7b9f0b749c7597c0c111bb139665149", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b0feb5be2f045a7611845b92113f7f720c32ae95/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0feb5be2f045a7611845b92113f7f720c32ae95/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=b0feb5be2f045a7611845b92113f7f720c32ae95", "patch": "@@ -1527,7 +1527,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                         |lint| {\n                             lint.build(\n                                 \"defaults for type parameters are only allowed in \\\n-                                 `struct`, `enum`, `type`, or `trait` definitions.\",\n+                                 `struct`, `enum`, `type`, or `trait` definitions\",\n                             )\n                             .emit();\n                         },\n@@ -1554,6 +1554,14 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             Some(param_def)\n         }\n         GenericParamKind::Const { default, .. } => {\n+            if !allow_defaults && default.is_some() {\n+                tcx.sess.span_err(\n+                    param.span,\n+                    \"defaults for const parameters are only allowed in \\\n+                    `struct`, `enum`, `type`, or `trait` definitions\",\n+                );\n+            }\n+\n             let param_def = ty::GenericParamDef {\n                 index: type_start + i as u32,\n                 name: param.name.ident().name,"}, {"sha": "a05cc36fd4c1c8731181d35ef5fcbd0b7a8736de", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0feb5be2f045a7611845b92113f7f720c32ae95/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0feb5be2f045a7611845b92113f7f720c32ae95/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=b0feb5be2f045a7611845b92113f7f720c32ae95", "patch": "@@ -436,6 +436,12 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     .discr_type()\n                     .to_ty(tcx),\n \n+                Node::GenericParam(&GenericParam {\n+                    hir_id: param_hir_id,\n+                    kind: GenericParamKind::Const { default: Some(ct), .. },\n+                    ..\n+                }) if ct.hir_id == hir_id => tcx.type_of(tcx.hir().local_def_id(param_hir_id)),\n+\n                 x => tcx.ty_error_with_message(\n                     DUMMY_SP,\n                     &format!(\"unexpected const parent in type_of_def_id(): {:?}\", x),"}, {"sha": "150c70770ae51e69d1627326c5e898707aa7c911", "filename": "src/test/ui/const-generics/defaults/const-default.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b0feb5be2f045a7611845b92113f7f720c32ae95/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0feb5be2f045a7611845b92113f7f720c32ae95/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-default.rs?ref=b0feb5be2f045a7611845b92113f7f720c32ae95", "patch": "@@ -1,12 +1,30 @@\n-// check-pass\n+// run-pass\n \n #![feature(const_generics)]\n-#![feature(const_generic_defaults)]\n+#![feature(const_generics_defaults)]\n #![allow(incomplete_features)]\n \n \n-pub struct ConstDefault<const N: usize = 3> {}\n+pub struct ConstDefault<const N: usize = 3>;\n+\n+impl<const N: usize> ConstDefault<N> {\n+    fn foo(self) -> usize {\n+        N\n+    }\n+}\n+\n+impl ConstDefault {\n+    fn new() -> Self {\n+        ConstDefault\n+    }\n+\n+    fn bar(self) {}\n+}\n \n pub fn main() {\n-  let s = ConstDefault::default();\n+    let s = ConstDefault::new();\n+    assert_eq!(s.foo(), 3);\n+\n+    let w = ConstDefault::<3>;\n+    w.bar();\n }"}, {"sha": "accc73134d8997f984832b730d4b62ce98871923", "filename": "src/test/ui/const-generics/defaults/wrong-order.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0feb5be2f045a7611845b92113f7f720c32ae95/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0feb5be2f045a7611845b92113f7f720c32ae95/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.full.stderr?ref=b0feb5be2f045a7611845b92113f7f720c32ae95", "patch": "@@ -1,4 +1,4 @@\n-error: type parameters with a default must be trailing\n+error: generic parameters with a default must be trailing\n   --> $DIR/wrong-order.rs:4:10\n    |\n LL | struct A<T = u32, const N: usize> {"}, {"sha": "c8f1d471b244b3497ae28a6f3704e1745d2b8df9", "filename": "src/test/ui/const-generics/defaults/wrong-order.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0feb5be2f045a7611845b92113f7f720c32ae95/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0feb5be2f045a7611845b92113f7f720c32ae95/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.min.stderr?ref=b0feb5be2f045a7611845b92113f7f720c32ae95", "patch": "@@ -1,4 +1,4 @@\n-error: type parameters with a default must be trailing\n+error: generic parameters with a default must be trailing\n   --> $DIR/wrong-order.rs:4:10\n    |\n LL | struct A<T = u32, const N: usize> {"}, {"sha": "5c2d9b8ad475104d5e488a331f4f05b1b8ecc49b", "filename": "src/test/ui/const-generics/defaults/wrong-order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0feb5be2f045a7611845b92113f7f720c32ae95/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0feb5be2f045a7611845b92113f7f720c32ae95/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fwrong-order.rs?ref=b0feb5be2f045a7611845b92113f7f720c32ae95", "patch": "@@ -2,7 +2,7 @@\n #![cfg_attr(full, feature(const_generics))] //[full]~WARN the feature `const_generics` is incomplete\n \n struct A<T = u32, const N: usize> {\n-    //~^ ERROR type parameters with a default must be trailing\n+    //~^ ERROR generic parameters with a default must be trailing\n     arg: T,\n }\n "}, {"sha": "ebdb5a65bc351840ef94784a7cf5dc1f027a7e7b", "filename": "src/test/ui/const-generics/min_const_generics/default_function_param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0feb5be2f045a7611845b92113f7f720c32ae95/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0feb5be2f045a7611845b92113f7f720c32ae95/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.rs?ref=b0feb5be2f045a7611845b92113f7f720c32ae95", "patch": "@@ -1,6 +1,6 @@\n #![crate_type = \"lib\"]\n #![feature(const_generics_defaults)]\n-#![feature(min_const_generics)]\n #![allow(incomplete_features)]\n \n fn foo<const SIZE: usize = 5usize>() {}\n+//~^ ERROR defaults for const parameters are"}, {"sha": "243ac0db5f55f194defecdf313977cefc6c287dc", "filename": "src/test/ui/const-generics/min_const_generics/default_function_param.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b0feb5be2f045a7611845b92113f7f720c32ae95/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0feb5be2f045a7611845b92113f7f720c32ae95/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.stderr?ref=b0feb5be2f045a7611845b92113f7f720c32ae95", "patch": "@@ -1,9 +1,8 @@\n-error[E0282]: type annotations needed\n-  --> $DIR/default_function_param.rs:6:28\n+error: defaults for const parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n+  --> $DIR/default_function_param.rs:5:14\n    |\n-LL | fn foo<const SIZE: usize = 5>() {}\n-   |                            ^ cannot infer type for type `{integer}`\n+LL | fn foo<const SIZE: usize = 5usize>() {}\n+   |              ^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0282`."}, {"sha": "c2b7b206653a60d97a73f92aa5e4ba549608f2ea", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0feb5be2f045a7611845b92113f7f720c32ae95/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0feb5be2f045a7611845b92113f7f720c32ae95/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.full.stderr?ref=b0feb5be2f045a7611845b92113f7f720c32ae95", "patch": "@@ -1,4 +1,4 @@\n-error: type parameters with a default must be trailing\n+error: generic parameters with a default must be trailing\n   --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:11:12\n    |\n LL | struct Bar<T = [u8; N], const N: usize>(T);"}, {"sha": "4a462c328bf6457e434d3c613f9b2d40db74e041", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0feb5be2f045a7611845b92113f7f720c32ae95/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0feb5be2f045a7611845b92113f7f720c32ae95/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr?ref=b0feb5be2f045a7611845b92113f7f720c32ae95", "patch": "@@ -1,4 +1,4 @@\n-error: type parameters with a default must be trailing\n+error: generic parameters with a default must be trailing\n   --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:11:12\n    |\n LL | struct Bar<T = [u8; N], const N: usize>(T);"}, {"sha": "c7be8bdaf9c3dc68fe5be5b322c56c353ba0f06b", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0feb5be2f045a7611845b92113f7f720c32ae95/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0feb5be2f045a7611845b92113f7f720c32ae95/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs?ref=b0feb5be2f045a7611845b92113f7f720c32ae95", "patch": "@@ -10,6 +10,6 @@ struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n // FIXME(const_generics_defaults): We still don't know how to deal with type defaults.\n struct Bar<T = [u8; N], const N: usize>(T);\n //~^ ERROR constant values inside of type parameter defaults\n-//~| ERROR type parameters with a default\n+//~| ERROR generic parameters with a default\n \n fn main() {}"}, {"sha": "bd076b1f72579956a6b33dd8589a7ce3794de9ee", "filename": "src/test/ui/generics/generic-non-trailing-defaults.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b0feb5be2f045a7611845b92113f7f720c32ae95/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0feb5be2f045a7611845b92113f7f720c32ae95/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.rs?ref=b0feb5be2f045a7611845b92113f7f720c32ae95", "patch": "@@ -1,10 +1,10 @@\n struct Heap;\n \n struct Vec<A = Heap, T>(A, T);\n-//~^ ERROR type parameters with a default must be trailing\n+//~^ ERROR generic parameters with a default must be trailing\n \n struct Foo<A, B = Vec<C>, C>(A, B, C);\n-//~^ ERROR type parameters with a default must be trailing\n-//~| ERROR type parameters with a default cannot use forward declared identifiers\n+//~^ ERROR generic parameters with a default must be trailing\n+//~| ERROR generic parameters with a default cannot use forward declared identifiers\n \n fn main() {}"}, {"sha": "6d7686175033545215869f2b111652728784d654", "filename": "src/test/ui/generics/generic-non-trailing-defaults.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0feb5be2f045a7611845b92113f7f720c32ae95/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b0feb5be2f045a7611845b92113f7f720c32ae95/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.stderr?ref=b0feb5be2f045a7611845b92113f7f720c32ae95", "patch": "@@ -1,10 +1,10 @@\n-error: type parameters with a default must be trailing\n+error: generic parameters with a default must be trailing\n   --> $DIR/generic-non-trailing-defaults.rs:3:12\n    |\n LL | struct Vec<A = Heap, T>(A, T);\n    |            ^\n \n-error: type parameters with a default must be trailing\n+error: generic parameters with a default must be trailing\n   --> $DIR/generic-non-trailing-defaults.rs:6:15\n    |\n LL | struct Foo<A, B = Vec<C>, C>(A, B, C);"}, {"sha": "000c47095d27ca988f3b3fa944051adea7066b7b", "filename": "src/test/ui/generics/generic-type-params-forward-mention.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0feb5be2f045a7611845b92113f7f720c32ae95/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-params-forward-mention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0feb5be2f045a7611845b92113f7f720c32ae95/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-params-forward-mention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-params-forward-mention.rs?ref=b0feb5be2f045a7611845b92113f7f720c32ae95", "patch": "@@ -1,6 +1,6 @@\n // Ensure that we get an error and not an ICE for this problematic case.\n struct Foo<T = Option<U>, U = bool>(T, U);\n-//~^ ERROR type parameters with a default cannot use forward declared identifiers\n+//~^ ERROR generic parameters with a default cannot use forward declared identifiers\n fn main() {\n     let x: Foo;\n }"}, {"sha": "3391ea4b350af466de5ae328d942c0b56b443ced", "filename": "src/test/ui/issues/issue-26812.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0feb5be2f045a7611845b92113f7f720c32ae95/src%2Ftest%2Fui%2Fissues%2Fissue-26812.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0feb5be2f045a7611845b92113f7f720c32ae95/src%2Ftest%2Fui%2Fissues%2Fissue-26812.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26812.rs?ref=b0feb5be2f045a7611845b92113f7f720c32ae95", "patch": "@@ -1,6 +1,6 @@\n #![feature(default_type_parameter_fallback)]\n \n fn avg<T=T::Item>(_: T) {}\n-//~^ ERROR type parameters with a default cannot use forward declared identifiers\n+//~^ ERROR generic parameters with a default cannot use forward declared identifiers\n \n fn main() {}"}]}