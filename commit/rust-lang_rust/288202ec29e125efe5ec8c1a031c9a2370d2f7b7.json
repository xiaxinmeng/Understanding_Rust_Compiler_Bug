{"sha": "288202ec29e125efe5ec8c1a031c9a2370d2f7b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ODIwMmVjMjllMTI1ZWZlNWVjOGMxYTAzMWM5YTIzNzBkMmY3Yjc=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-06-03T19:06:49Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-06-03T19:06:49Z"}, "message": "Fix regression #61475", "tree": {"sha": "2530a8bb21139299063b72e3d60ae4e0e2a16db1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2530a8bb21139299063b72e3d60ae4e0e2a16db1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/288202ec29e125efe5ec8c1a031c9a2370d2f7b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/288202ec29e125efe5ec8c1a031c9a2370d2f7b7", "html_url": "https://github.com/rust-lang/rust/commit/288202ec29e125efe5ec8c1a031c9a2370d2f7b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/288202ec29e125efe5ec8c1a031c9a2370d2f7b7/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61d286e9d0530bea8fb1ae24be3989baa9ea08eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/61d286e9d0530bea8fb1ae24be3989baa9ea08eb", "html_url": "https://github.com/rust-lang/rust/commit/61d286e9d0530bea8fb1ae24be3989baa9ea08eb"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "b9bf52e6ef1a1ea30107d53b10e94f2b20acc050", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/288202ec29e125efe5ec8c1a031c9a2370d2f7b7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/288202ec29e125efe5ec8c1a031c9a2370d2f7b7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=288202ec29e125efe5ec8c1a031c9a2370d2f7b7", "patch": "@@ -628,10 +628,10 @@ impl<'a> Parser<'a> {\n             }\n             _ => {\n                 Err(if self.prev_token_kind == PrevTokenKind::DocComment {\n-                        self.span_fatal_err(self.prev_span, Error::UselessDocComment)\n-                    } else {\n-                        self.expected_ident_found()\n-                    })\n+                    self.span_fatal_err(self.prev_span, Error::UselessDocComment)\n+                } else {\n+                    self.expected_ident_found()\n+                })\n             }\n         }\n     }\n@@ -1660,8 +1660,8 @@ impl<'a> Parser<'a> {\n             path = self.parse_path(PathStyle::Type)?;\n             path_span = path_lo.to(self.prev_span);\n         } else {\n-            path = ast::Path { segments: Vec::new(), span: DUMMY_SP };\n             path_span = self.span.to(self.span);\n+            path = ast::Path { segments: Vec::new(), span: path_span };\n         }\n \n         // See doc comment for `unmatched_angle_bracket_count`.\n@@ -2847,7 +2847,11 @@ impl<'a> Parser<'a> {\n             // want to keep their span info to improve diagnostics in these cases in a later stage.\n             (true, Some(AssocOp::Multiply)) | // `{ 42 } *foo = bar;` or `{ 42 } * 3`\n             (true, Some(AssocOp::Subtract)) | // `{ 42 } -5`\n-            (true, Some(AssocOp::Add)) => { // `{ 42 } + 42\n+            (true, Some(AssocOp::LAnd)) | // `{ 42 } &&x` (#61475)\n+            (true, Some(AssocOp::Add)) // `{ 42 } + 42\n+            // If the next token is a keyword, then the tokens above *are* unambiguously incorrect:\n+            // `if x { a } else { b } && if y { c } else { d }`\n+            if !self.look_ahead(1, |t| t.is_reserved_ident()) => {\n                 // These cases are ambiguous and can't be identified in the parser alone\n                 let sp = self.sess.source_map().start_point(self.span);\n                 self.sess.ambiguous_block_expr_parse.borrow_mut().insert(sp, lhs.span);\n@@ -5298,7 +5302,7 @@ impl<'a> Parser<'a> {\n         let mut where_clause = WhereClause {\n             id: ast::DUMMY_NODE_ID,\n             predicates: Vec::new(),\n-            span: DUMMY_SP,\n+            span: self.prev_span.to(self.prev_span),\n         };\n \n         if !self.eat_keyword(kw::Where) {"}]}