{"sha": "1e3302d85f6c9635c14535bb59d17964a9479c2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMzMwMmQ4NWY2Yzk2MzVjMTQ1MzViYjU5ZDE3OTY0YTk0NzljMmQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-22T20:10:38Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-22T20:10:38Z"}, "message": "Suggest dereferencing on assignment to mutable borrow", "tree": {"sha": "f149fd848a359217eb0f17c5e63e4e15259af847", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f149fd848a359217eb0f17c5e63e4e15259af847"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e3302d85f6c9635c14535bb59d17964a9479c2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e3302d85f6c9635c14535bb59d17964a9479c2d", "html_url": "https://github.com/rust-lang/rust/commit/1e3302d85f6c9635c14535bb59d17964a9479c2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e3302d85f6c9635c14535bb59d17964a9479c2d/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37ff5d388f8c004ca248adb635f1cc84d347eda0", "url": "https://api.github.com/repos/rust-lang/rust/commits/37ff5d388f8c004ca248adb635f1cc84d347eda0", "html_url": "https://github.com/rust-lang/rust/commit/37ff5d388f8c004ca248adb635f1cc84d347eda0"}], "stats": {"total": 55, "additions": 50, "deletions": 5}, "files": [{"sha": "a4e687b8f9080f4b4e8e535af1b36200c26dc7dc", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1e3302d85f6c9635c14535bb59d17964a9479c2d/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3302d85f6c9635c14535bb59d17964a9479c2d/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=1e3302d85f6c9635c14535bb59d17964a9479c2d", "patch": "@@ -306,11 +306,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// In addition of this check, it also checks between references mutability state. If the\n     /// expected is mutable but the provided isn't, maybe we could just say \"Hey, try with\n     /// `&mut`!\".\n-    pub fn check_ref(&self,\n-                 expr: &hir::Expr,\n-                 checked_ty: Ty<'tcx>,\n-                 expected: Ty<'tcx>)\n-                 -> Option<(Span, &'static str, String)> {\n+    pub fn check_ref(\n+        &self,\n+        expr: &hir::Expr,\n+        checked_ty: Ty<'tcx>,\n+        expected: Ty<'tcx>,\n+    ) -> Option<(Span, &'static str, String)> {\n         let cm = self.sess().source_map();\n         let sp = expr.span;\n         if !cm.span_to_filename(sp).is_real() {\n@@ -397,6 +398,29 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         } else {\n                             String::new()\n                         };\n+                        if let Some(hir::Node::Expr(hir::Expr {\n+                            node: hir::ExprKind::Assign(left_expr, _),\n+                            ..\n+                        })) = self.tcx.hir().find_by_hir_id(\n+                            self.tcx.hir().get_parent_node_by_hir_id(expr.hir_id),\n+                        ) {\n+                            if mutability == hir::Mutability::MutMutable {\n+                                // Found the following case:\n+                                // fn foo(opt: &mut Option<String>){ opt = None }\n+                                //                                   ---   ^^^^\n+                                //                                   |     |\n+                                //    consider dereferencing here: `*opt`  |\n+                                // expected mutable reference, found enum `Option`\n+                                if let Ok(src) = cm.span_to_snippet(left_expr.span) {\n+                                    return Some((\n+                                        left_expr.span,\n+                                        \"consider dereferencing here to assign to the mutable \\\n+                                         borrowed piece of memory\",\n+                                        format!(\"*{}\", src),\n+                                    ));\n+                                }\n+                            }\n+                        }\n                         return Some(match mutability {\n                             hir::Mutability::MutMutable => (\n                                 sp,"}, {"sha": "b9deaa96dbfc33649d430111874d95d761e1e542", "filename": "src/test/ui/suggestions/mut-ref-reassignment.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e3302d85f6c9635c14535bb59d17964a9479c2d/src%2Ftest%2Fui%2Fsuggestions%2Fmut-ref-reassignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3302d85f6c9635c14535bb59d17964a9479c2d/src%2Ftest%2Fui%2Fsuggestions%2Fmut-ref-reassignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-ref-reassignment.rs?ref=1e3302d85f6c9635c14535bb59d17964a9479c2d", "patch": "@@ -0,0 +1,5 @@\n+fn change_opt(opt: &mut Option<String>){\n+    opt = None //~ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "d90c13b388279a1e06072f4afe9053530ad59a81", "filename": "src/test/ui/suggestions/mut-ref-reassignment.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1e3302d85f6c9635c14535bb59d17964a9479c2d/src%2Ftest%2Fui%2Fsuggestions%2Fmut-ref-reassignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e3302d85f6c9635c14535bb59d17964a9479c2d/src%2Ftest%2Fui%2Fsuggestions%2Fmut-ref-reassignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-ref-reassignment.stderr?ref=1e3302d85f6c9635c14535bb59d17964a9479c2d", "patch": "@@ -0,0 +1,16 @@\n+error[E0308]: mismatched types\n+  --> $DIR/mut-ref-reassignment.rs:2:11\n+   |\n+LL |     opt = None\n+   |           ^^^^ expected mutable reference, found enum `std::option::Option`\n+   |\n+   = note: expected type `&mut std::option::Option<std::string::String>`\n+              found type `std::option::Option<_>`\n+help: consider dereferencing here to assign to the mutable borrowed piece of memory\n+   |\n+LL |     *opt = None\n+   |     ^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}