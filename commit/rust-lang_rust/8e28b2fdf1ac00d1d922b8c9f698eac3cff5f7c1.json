{"sha": "8e28b2fdf1ac00d1d922b8c9f698eac3cff5f7c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMjhiMmZkZjFhYzAwZDFkOTIyYjhjOWY2OThlYWMzY2ZmNWY3YzE=", "commit": {"author": {"name": "Areredify", "email": "misha-babenko@yandex.ru", "date": "2020-01-30T23:39:10Z"}, "committer": {"name": "Mikhail Babenko", "email": "misha-babenko@yandex.ru", "date": "2020-02-05T15:11:20Z"}, "message": "move is_trait_impl_item check from functions.rs to utils", "tree": {"sha": "a390adbfb286efc808217ce4fdc0b46511e1be8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a390adbfb286efc808217ce4fdc0b46511e1be8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e28b2fdf1ac00d1d922b8c9f698eac3cff5f7c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e28b2fdf1ac00d1d922b8c9f698eac3cff5f7c1", "html_url": "https://github.com/rust-lang/rust/commit/8e28b2fdf1ac00d1d922b8c9f698eac3cff5f7c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e28b2fdf1ac00d1d922b8c9f698eac3cff5f7c1/comments", "author": {"login": "basil-cow", "id": 25266609, "node_id": "MDQ6VXNlcjI1MjY2NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/25266609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/basil-cow", "html_url": "https://github.com/basil-cow", "followers_url": "https://api.github.com/users/basil-cow/followers", "following_url": "https://api.github.com/users/basil-cow/following{/other_user}", "gists_url": "https://api.github.com/users/basil-cow/gists{/gist_id}", "starred_url": "https://api.github.com/users/basil-cow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/basil-cow/subscriptions", "organizations_url": "https://api.github.com/users/basil-cow/orgs", "repos_url": "https://api.github.com/users/basil-cow/repos", "events_url": "https://api.github.com/users/basil-cow/events{/privacy}", "received_events_url": "https://api.github.com/users/basil-cow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "basil-cow", "id": 25266609, "node_id": "MDQ6VXNlcjI1MjY2NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/25266609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/basil-cow", "html_url": "https://github.com/basil-cow", "followers_url": "https://api.github.com/users/basil-cow/followers", "following_url": "https://api.github.com/users/basil-cow/following{/other_user}", "gists_url": "https://api.github.com/users/basil-cow/gists{/gist_id}", "starred_url": "https://api.github.com/users/basil-cow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/basil-cow/subscriptions", "organizations_url": "https://api.github.com/users/basil-cow/orgs", "repos_url": "https://api.github.com/users/basil-cow/repos", "events_url": "https://api.github.com/users/basil-cow/events{/privacy}", "received_events_url": "https://api.github.com/users/basil-cow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7b3b9f553f58974bd14ee28ba857e3e703fb8c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7b3b9f553f58974bd14ee28ba857e3e703fb8c1", "html_url": "https://github.com/rust-lang/rust/commit/a7b3b9f553f58974bd14ee28ba857e3e703fb8c1"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "ee9221c811e82ffa4fe2185337a873f9052fc90c", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8e28b2fdf1ac00d1d922b8c9f698eac3cff5f7c1/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e28b2fdf1ac00d1d922b8c9f698eac3cff5f7c1/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=8e28b2fdf1ac00d1d922b8c9f698eac3cff5f7c1", "patch": "@@ -1,9 +1,8 @@\n use crate::utils::{\n-    attr_by_name, attrs::is_proc_macro, is_must_use_ty, iter_input_pats, match_def_path, must_use_attr, qpath_res,\n-    return_ty, snippet, snippet_opt, span_lint, span_lint_and_help, span_lint_and_then, trait_ref_of_method,\n-    type_is_unsafe_function,\n+    attr_by_name, attrs::is_proc_macro, is_must_use_ty, is_trait_impl_item, iter_input_pats, match_def_path,\n+    must_use_attr, qpath_res, return_ty, snippet, snippet_opt, span_lint, span_lint_and_help, span_lint_and_then,\n+    trait_ref_of_method, type_is_unsafe_function,\n };\n-use matches::matches;\n use rustc::hir::map::Map;\n use rustc::lint::in_external_macro;\n use rustc::ty::{self, Ty};\n@@ -195,20 +194,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n         span: Span,\n         hir_id: hir::HirId,\n     ) {\n-        let is_impl = if let Some(hir::Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n-            matches!(item.kind, hir::ItemKind::Impl{ of_trait: Some(_), .. })\n-        } else {\n-            false\n-        };\n-\n         let unsafety = match kind {\n             intravisit::FnKind::ItemFn(_, _, hir::FnHeader { unsafety, .. }, _, _) => unsafety,\n             intravisit::FnKind::Method(_, sig, _, _) => sig.header.unsafety,\n             intravisit::FnKind::Closure(_) => return,\n         };\n \n         // don't warn for implementations, it's not their fault\n-        if !is_impl {\n+        if !is_trait_impl_item(cx, hir_id) {\n             // don't lint extern functions decls, it's not their fault either\n             match kind {\n                 intravisit::FnKind::Method("}, {"sha": "393ae64f81c5a25a6ae408bbfdd3d33f0370290f", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e28b2fdf1ac00d1d922b8c9f698eac3cff5f7c1/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e28b2fdf1ac00d1d922b8c9f698eac3cff5f7c1/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=8e28b2fdf1ac00d1d922b8c9f698eac3cff5f7c1", "patch": "@@ -1354,3 +1354,11 @@ pub fn is_no_std_crate(krate: &Crate<'_>) -> bool {\n         }\n     })\n }\n+\n+pub fn is_trait_impl_item(cx: &LateContext<'_, '_>, hir_id: HirId) -> bool {\n+    if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(hir_id)) {\n+        matches!(item.kind, ItemKind::Impl{ of_trait: Some(_), .. })\n+    } else {\n+        false\n+    }\n+}"}]}