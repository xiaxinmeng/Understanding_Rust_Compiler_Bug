{"sha": "cabfa9919951ac31fcec2d3f6291438ff8c40cd0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhYmZhOTkxOTk1MWFjMzFmY2VjMmQzZjYyOTE0MzhmZjhjNDBjZDA=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-09-30T17:44:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-30T17:44:46Z"}, "message": "Rollup merge of #36623 - GuillaumeGomez:doc_typos, r=steveklabnik\n\nFix some typos and improve doc comments style\n\nr? @steveklabnik", "tree": {"sha": "61233e035514494b8ebd446a89ebf5ffd7618fb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61233e035514494b8ebd446a89ebf5ffd7618fb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cabfa9919951ac31fcec2d3f6291438ff8c40cd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cabfa9919951ac31fcec2d3f6291438ff8c40cd0", "html_url": "https://github.com/rust-lang/rust/commit/cabfa9919951ac31fcec2d3f6291438ff8c40cd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cabfa9919951ac31fcec2d3f6291438ff8c40cd0/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71a4bde9e97dbb142606b906a6707da14ed328e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/71a4bde9e97dbb142606b906a6707da14ed328e8", "html_url": "https://github.com/rust-lang/rust/commit/71a4bde9e97dbb142606b906a6707da14ed328e8"}, {"sha": "323701e3458fc6a509e518098a163db72dfc1faf", "url": "https://api.github.com/repos/rust-lang/rust/commits/323701e3458fc6a509e518098a163db72dfc1faf", "html_url": "https://github.com/rust-lang/rust/commit/323701e3458fc6a509e518098a163db72dfc1faf"}], "stats": {"total": 62, "additions": 32, "deletions": 30}, "files": [{"sha": "6b705ca039fd881b4f1d261c764f0b78c9eb1b60", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/cabfa9919951ac31fcec2d3f6291438ff8c40cd0/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cabfa9919951ac31fcec2d3f6291438ff8c40cd0/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=cabfa9919951ac31fcec2d3f6291438ff8c40cd0", "patch": "@@ -168,7 +168,7 @@ impl<T> [T] {\n         core_slice::SliceExt::len(self)\n     }\n \n-    /// Returns true if the slice has a length of 0\n+    /// Returns true if the slice has a length of 0.\n     ///\n     /// # Example\n     ///\n@@ -402,7 +402,7 @@ impl<T> [T] {\n         core_slice::SliceExt::get_unchecked_mut(self, index)\n     }\n \n-    /// Returns an raw pointer to the slice's buffer\n+    /// Returns an raw pointer to the slice's buffer.\n     ///\n     /// The caller must ensure that the slice outlives the pointer this\n     /// function returns, or else it will end up pointing to garbage.\n@@ -468,7 +468,7 @@ impl<T> [T] {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut v = [\"a\", \"b\", \"c\", \"d\"];\n     /// v.swap(1, 3);\n     /// assert!(v == [\"a\", \"d\", \"c\", \"b\"]);\n@@ -483,7 +483,7 @@ impl<T> [T] {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut v = [1, 2, 3];\n     /// v.reverse();\n     /// assert!(v == [3, 2, 1]);\n@@ -567,9 +567,9 @@ impl<T> [T] {\n     }\n \n     /// Returns an iterator over `size` elements of the slice at a\n-    /// time. The chunks are slices and do not overlap. If `size` does not divide the\n-    /// length of the slice, then the last chunk will not have length\n-    /// `size`.\n+    /// time. The chunks are slices and do not overlap. If `size` does\n+    /// not divide the length of the slice, then the last chunk will\n+    /// not have length `size`.\n     ///\n     /// # Panics\n     ///\n@@ -656,7 +656,7 @@ impl<T> [T] {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut v = [1, 2, 3, 4, 5, 6];\n     ///\n     /// // scoped to restrict the lifetime of the borrows\n@@ -754,7 +754,7 @@ impl<T> [T] {\n     }\n \n     /// Returns an iterator over subslices separated by elements that match\n-    /// `pred`, limited to returning at most `n` items.  The matched element is\n+    /// `pred`, limited to returning at most `n` items. The matched element is\n     /// not contained in the subslices.\n     ///\n     /// The last element returned, if any, will contain the remainder of the\n@@ -781,7 +781,7 @@ impl<T> [T] {\n     }\n \n     /// Returns an iterator over subslices separated by elements that match\n-    /// `pred`, limited to returning at most `n` items.  The matched element is\n+    /// `pred`, limited to returning at most `n` items. The matched element is\n     /// not contained in the subslices.\n     ///\n     /// The last element returned, if any, will contain the remainder of the\n@@ -835,7 +835,7 @@ impl<T> [T] {\n \n     /// Returns an iterator over subslices separated by elements that match\n     /// `pred` limited to returning at most `n` items. This starts at the end of\n-    /// the slice and works backwards.  The matched element is not contained in\n+    /// the slice and works backwards. The matched element is not contained in\n     /// the subslices.\n     ///\n     /// The last element returned, if any, will contain the remainder of the\n@@ -922,9 +922,9 @@ impl<T> [T] {\n     ///\n     /// Looks up a series of four elements. The first is found, with a\n     /// uniquely determined position; the second and third are not\n-    /// found; the fourth could match any position in `[1,4]`.\n+    /// found; the fourth could match any position in `[1, 4]`.\n     ///\n-    /// ```rust\n+    /// ```\n     /// let s = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n     ///\n     /// assert_eq!(s.binary_search(&13),  Ok(9));\n@@ -956,9 +956,9 @@ impl<T> [T] {\n     ///\n     /// Looks up a series of four elements. The first is found, with a\n     /// uniquely determined position; the second and third are not\n-    /// found; the fourth could match any position in `[1,4]`.\n+    /// found; the fourth could match any position in `[1, 4]`.\n     ///\n-    /// ```rust\n+    /// ```\n     /// let s = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n     ///\n     /// let seek = 13;\n@@ -982,21 +982,23 @@ impl<T> [T] {\n     /// Binary search a sorted slice with a key extraction function.\n     ///\n     /// Assumes that the slice is sorted by the key, for instance with\n-    /// `sort_by_key` using the same key extraction function.\n+    /// [`sort_by_key`] using the same key extraction function.\n     ///\n     /// If a matching value is found then returns `Ok`, containing the\n     /// index for the matched element; if no match is found then `Err`\n     /// is returned, containing the index where a matching element could\n     /// be inserted while maintaining sorted order.\n     ///\n+    /// [`sort_by_key`]: #method.sort_by_key\n+    ///\n     /// # Examples\n     ///\n     /// Looks up a series of four elements in a slice of pairs sorted by\n     /// their second elements. The first is found, with a uniquely\n     /// determined position; the second and third are not found; the\n-    /// fourth could match any position in `[1,4]`.\n+    /// fourth could match any position in `[1, 4]`.\n     ///\n-    /// ```rust\n+    /// ```\n     /// let s = [(0, 0), (2, 1), (4, 1), (5, 1), (3, 1),\n     ///          (1, 2), (2, 3), (4, 5), (5, 8), (3, 13),\n     ///          (1, 21), (2, 34), (4, 55)];\n@@ -1023,7 +1025,7 @@ impl<T> [T] {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut v = [-5, 4, 1, -3, 2];\n     ///\n     /// v.sort();\n@@ -1045,7 +1047,7 @@ impl<T> [T] {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut v = [-5i32, 4, 1, -3, 2];\n     ///\n     /// v.sort_by_key(|k| k.abs());\n@@ -1067,7 +1069,7 @@ impl<T> [T] {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut v = [5, 4, 1, 3, 2];\n     /// v.sort_by(|a, b| a.cmp(b));\n     /// assert!(v == [1, 2, 3, 4, 5]);\n@@ -1094,7 +1096,7 @@ impl<T> [T] {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut dst = [0, 0, 0];\n     /// let src = [1, 2, 3];\n     ///\n@@ -1116,7 +1118,7 @@ impl<T> [T] {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// let mut dst = [0, 0, 0];\n     /// let src = [1, 2, 3];\n     ///"}, {"sha": "96efe1a03e351095898bbead31653ec78ae5f13f", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cabfa9919951ac31fcec2d3f6291438ff8c40cd0/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cabfa9919951ac31fcec2d3f6291438ff8c40cd0/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=cabfa9919951ac31fcec2d3f6291438ff8c40cd0", "patch": "@@ -697,7 +697,7 @@ impl str {\n     ///\n     /// Basic usage:\n     ///\n-    /// ```rust\n+    /// ```\n     /// let bananas = \"bananas\";\n     ///\n     /// assert!(bananas.ends_with(\"anas\"));\n@@ -900,7 +900,7 @@ impl str {\n     ///\n     /// It does _not_ give you:\n     ///\n-    /// ```rust,ignore\n+    /// ```,ignore\n     /// assert_eq!(d, &[\"a\", \"b\", \"c\"]);\n     /// ```\n     ///"}, {"sha": "119828ea43c61c31ce419b1c173ae0fd795f542b", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cabfa9919951ac31fcec2d3f6291438ff8c40cd0/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cabfa9919951ac31fcec2d3f6291438ff8c40cd0/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=cabfa9919951ac31fcec2d3f6291438ff8c40cd0", "patch": "@@ -21,7 +21,7 @@\n //!\n //! There are multiple ways to create a new `String` from a string literal:\n //!\n-//! ```rust\n+//! ```\n //! let s = \"Hello\".to_string();\n //!\n //! let s = String::from(\"world\");\n@@ -31,7 +31,7 @@\n //! You can create a new `String` from an existing one by concatenating with\n //! `+`:\n //!\n-//! ```rust\n+//! ```\n //! let s = \"Hello\".to_string();\n //!\n //! let message = s + \" world!\";\n@@ -40,7 +40,7 @@\n //! If you have a vector of valid UTF-8 bytes, you can make a `String` out of\n //! it. You can do the reverse too.\n //!\n-//! ```rust\n+//! ```\n //! let sparkle_heart = vec![240, 159, 146, 150];\n //!\n //! // We know these bytes are valid, so we'll use `unwrap()`."}, {"sha": "ed6eb62c9677ebdc5bafd47aba8dc359724f2728", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cabfa9919951ac31fcec2d3f6291438ff8c40cd0/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cabfa9919951ac31fcec2d3f6291438ff8c40cd0/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=cabfa9919951ac31fcec2d3f6291438ff8c40cd0", "patch": "@@ -1769,7 +1769,7 @@ impl<T> IntoIter<T> {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// # #![feature(vec_into_iter_as_slice)]\n     /// let vec = vec!['a', 'b', 'c'];\n     /// let mut into_iter = vec.into_iter();\n@@ -1788,7 +1788,7 @@ impl<T> IntoIter<T> {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// # #![feature(vec_into_iter_as_slice)]\n     /// let vec = vec!['a', 'b', 'c'];\n     /// let mut into_iter = vec.into_iter();"}]}