{"sha": "ea633b42aeadf807a10036a87bf2903123250152", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNjMzYjQyYWVhZGY4MDdhMTAwMzZhODdiZjI5MDMxMjMyNTAxNTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-30T20:20:17Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-30T20:20:17Z"}, "message": "core::rt: deny(unused_imports, unused_mut, unused_variable)", "tree": {"sha": "e99e3a65b8caeabc673aa30e514c37a81168fdb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e99e3a65b8caeabc673aa30e514c37a81168fdb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea633b42aeadf807a10036a87bf2903123250152", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea633b42aeadf807a10036a87bf2903123250152", "html_url": "https://github.com/rust-lang/rust/commit/ea633b42aeadf807a10036a87bf2903123250152", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea633b42aeadf807a10036a87bf2903123250152/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "053b38e7e1cba8f7bb649a5fc8d82b0448d33c55", "url": "https://api.github.com/repos/rust-lang/rust/commits/053b38e7e1cba8f7bb649a5fc8d82b0448d33c55", "html_url": "https://github.com/rust-lang/rust/commit/053b38e7e1cba8f7bb649a5fc8d82b0448d33c55"}], "stats": {"total": 33, "additions": 11, "deletions": 22}, "files": [{"sha": "26d02fb6640ac238d3c550412b04141ff9c45aa7", "filename": "src/libstd/rt/comm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea633b42aeadf807a10036a87bf2903123250152/src%2Flibstd%2Frt%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea633b42aeadf807a10036a87bf2903123250152/src%2Flibstd%2Frt%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcomm.rs?ref=ea633b42aeadf807a10036a87bf2903123250152", "patch": "@@ -22,7 +22,6 @@ use ops::Drop;\n use kinds::Owned;\n use rt::sched::{Scheduler, Coroutine};\n use rt::local::Local;\n-use rt::rtio::EventLoop;\n use unstable::intrinsics::{atomic_xchg, atomic_load};\n use util::Void;\n use comm::{GenericChan, GenericSmartChan, GenericPort, Peekable};"}, {"sha": "e6988c538881a275cdd36d8928ac1b015f22f235", "filename": "src/libstd/rt/local.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea633b42aeadf807a10036a87bf2903123250152/src%2Flibstd%2Frt%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea633b42aeadf807a10036a87bf2903123250152/src%2Flibstd%2Frt%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal.rs?ref=ea633b42aeadf807a10036a87bf2903123250152", "patch": "@@ -87,7 +87,6 @@ impl Local for IoFactoryObject {\n mod test {\n     use rt::test::*;\n     use rt::sched::Scheduler;\n-    use rt::uv::uvio::UvEventLoop;\n     use super::*;\n \n     #[test]"}, {"sha": "caf3e15e535afac18adab55910792dc758f4f141", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ea633b42aeadf807a10036a87bf2903123250152/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea633b42aeadf807a10036a87bf2903123250152/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=ea633b42aeadf807a10036a87bf2903123250152", "patch": "@@ -55,6 +55,9 @@ Several modules in `core` are clients of `rt`:\n */\n \n #[doc(hidden)];\n+#[deny(unused_imports)];\n+#[deny(unused_mut)];\n+#[deny(unused_variable)];\n \n use ptr::Ptr;\n \n@@ -228,8 +231,6 @@ pub fn context() -> RuntimeContext {\n fn test_context() {\n     use unstable::run_in_bare_thread;\n     use self::sched::{Scheduler, Coroutine};\n-    use rt::uv::uvio::UvEventLoop;\n-    use cell::Cell;\n     use rt::local::Local;\n     use rt::test::new_test_uv_sched;\n "}, {"sha": "b0080a010140d2bf69718233925eb31de38927fa", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ea633b42aeadf807a10036a87bf2903123250152/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea633b42aeadf807a10036a87bf2903123250152/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=ea633b42aeadf807a10036a87bf2903123250152", "patch": "@@ -13,7 +13,6 @@ use sys;\n use cast::transmute;\n use cell::Cell;\n use clone::Clone;\n-use to_str::ToStr;\n \n use super::sleeper_list::SleeperList;\n use super::work_queue::WorkQueue;\n@@ -24,7 +23,7 @@ use super::task::Task;\n use super::message_queue::MessageQueue;\n use rt::local_ptr;\n use rt::local::Local;\n-use rt::rtio::{IoFactoryObject, RemoteCallback};\n+use rt::rtio::RemoteCallback;\n use rt::metrics::SchedMetrics;\n \n /// The Scheduler is responsible for coordinating execution of Coroutines\n@@ -583,7 +582,6 @@ impl ClosureConverter for UnsafeTaskReceiver {\n mod test {\n     use int;\n     use cell::Cell;\n-    use rt::uv::uvio::UvEventLoop;\n     use unstable::run_in_bare_thread;\n     use task::spawn;\n     use rt::local::Local;\n@@ -751,13 +749,13 @@ mod test {\n \n             let sched1_cell = Cell(sched1);\n             let _thread1 = do Thread::start {\n-                let mut sched1 = sched1_cell.take();\n+                let sched1 = sched1_cell.take();\n                 sched1.run();\n             };\n \n             let sched2_cell = Cell(sched2);\n             let _thread2 = do Thread::start {\n-                let mut sched2 = sched2_cell.take();\n+                let sched2 = sched2_cell.take();\n                 sched2.run();\n             };\n         }\n@@ -790,9 +788,6 @@ mod test {\n     #[test]\n     fn thread_ring() {\n         use rt::comm::*;\n-        use iter::Times;\n-        use vec::OwnedVector;\n-        use container::Container;\n         use comm::{GenericPort, GenericChan};\n \n         do run_in_mt_newsched_task {"}, {"sha": "e2873e78d805fa312fda7f75c73f32aff2ce2be0", "filename": "src/libstd/rt/sleeper_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea633b42aeadf807a10036a87bf2903123250152/src%2Flibstd%2Frt%2Fsleeper_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea633b42aeadf807a10036a87bf2903123250152/src%2Flibstd%2Frt%2Fsleeper_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsleeper_list.rs?ref=ea633b42aeadf807a10036a87bf2903123250152", "patch": "@@ -16,7 +16,7 @@ use vec::OwnedVector;\n use option::{Option, Some, None};\n use cell::Cell;\n use unstable::sync::{Exclusive, exclusive};\n-use rt::sched::{Scheduler, SchedHandle};\n+use rt::sched::SchedHandle;\n use clone::Clone;\n \n pub struct SleeperList {"}, {"sha": "907d289fb0748a33e13293bf0bc10192590f76fb", "filename": "src/libstd/rt/test.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea633b42aeadf807a10036a87bf2903123250152/src%2Flibstd%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea633b42aeadf807a10036a87bf2903123250152/src%2Flibstd%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftest.rs?ref=ea633b42aeadf807a10036a87bf2903123250152", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use uint;\n-use option::{Option, Some, None};\n+use option::{Some, None};\n use cell::Cell;\n use clone::Clone;\n use container::Container;\n@@ -42,7 +42,6 @@ pub fn new_test_uv_sched() -> Scheduler {\n pub fn run_in_newsched_task(f: ~fn()) {\n     use super::sched::*;\n     use unstable::run_in_bare_thread;\n-    use rt::uv::uvio::UvEventLoop;\n \n     let f = Cell(f);\n \n@@ -74,7 +73,7 @@ pub fn run_in_mt_newsched_task(f: ~fn()) {\n         let mut handles = ~[];\n         let mut scheds = ~[];\n \n-        for uint::range(0, N) |i| {\n+        for uint::range(0, N) |_| {\n             let loop_ = ~UvEventLoop::new();\n             let mut sched = ~Scheduler::new(loop_, work_queue.clone(), sleepers.clone());\n             let handle = sched.make_handle();\n@@ -102,7 +101,7 @@ pub fn run_in_mt_newsched_task(f: ~fn()) {\n             let sched = scheds.pop();\n             let sched_cell = Cell(sched);\n             let thread = do Thread::start {\n-                let mut sched = sched_cell.take();\n+                let sched = sched_cell.take();\n                 sched.run();\n             };\n \n@@ -214,7 +213,6 @@ pub fn spawntask_try(f: ~fn()) -> Result<(), ()> {\n // Spawn a new task in a new scheduler and return a thread handle.\n pub fn spawntask_thread(f: ~fn()) -> Thread {\n     use rt::sched::*;\n-    use rt::uv::uvio::UvEventLoop;\n \n     let f = Cell(f);\n     let thread = do Thread::start {"}, {"sha": "0d9530239a3d9868f7b4ff98e23c5e9cb9395a3e", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ea633b42aeadf807a10036a87bf2903123250152/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea633b42aeadf807a10036a87bf2903123250152/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=ea633b42aeadf807a10036a87bf2903123250152", "patch": "@@ -24,9 +24,7 @@ use rt::sched::Scheduler;\n use rt::io::{standard_error, OtherIoError};\n use rt::tube::Tube;\n use rt::local::Local;\n-use rt::work_queue::WorkQueue;\n use unstable::sync::{UnsafeAtomicRcBox, AtomicInt};\n-use unstable::intrinsics;\n \n #[cfg(test)] use container::Container;\n #[cfg(test)] use uint;\n@@ -140,7 +138,7 @@ impl RemoteCallback for UvRemoteCallback {\n impl Drop for UvRemoteCallback {\n     fn finalize(&self) {\n         unsafe {\n-            let mut this: &mut UvRemoteCallback = cast::transmute_mut(self);\n+            let this: &mut UvRemoteCallback = cast::transmute_mut(self);\n             let exit_flag_ptr = this.exit_flag.get();\n             (*exit_flag_ptr).store(1);\n             this.async.send();\n@@ -150,7 +148,6 @@ impl Drop for UvRemoteCallback {\n \n #[cfg(test)]\n mod test_remote {\n-    use super::*;\n     use cell;\n     use cell::Cell;\n     use rt::test::*;"}]}