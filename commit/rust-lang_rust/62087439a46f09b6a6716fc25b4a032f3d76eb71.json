{"sha": "62087439a46f09b6a6716fc25b4a032f3d76eb71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMDg3NDM5YTQ2ZjA5YjZhNjcxNmZjMjViNGEwMzJmM2Q3NmViNzE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-14T10:12:32Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-14T10:12:32Z"}, "message": "add Scalar::from methods for signed integers", "tree": {"sha": "f54786cd6a319fdcfc6083412717aa2f4d08b117", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f54786cd6a319fdcfc6083412717aa2f4d08b117"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62087439a46f09b6a6716fc25b4a032f3d76eb71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62087439a46f09b6a6716fc25b4a032f3d76eb71", "html_url": "https://github.com/rust-lang/rust/commit/62087439a46f09b6a6716fc25b4a032f3d76eb71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62087439a46f09b6a6716fc25b4a032f3d76eb71/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ed3453af9db9c516e564e25ba9ee28056d48103", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ed3453af9db9c516e564e25ba9ee28056d48103", "html_url": "https://github.com/rust-lang/rust/commit/5ed3453af9db9c516e564e25ba9ee28056d48103"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "1e630c96dd409aa8c0684579f9ba28c2a8738fc1", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/62087439a46f09b6a6716fc25b4a032f3d76eb71/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62087439a46f09b6a6716fc25b4a032f3d76eb71/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=62087439a46f09b6a6716fc25b4a032f3d76eb71", "patch": "@@ -272,11 +272,13 @@ impl<'tcx, Tag> Scalar<Tag> {\n \n     #[inline]\n     pub fn from_bool(b: bool) -> Self {\n+        // Guaranteed to be truncated and does not need sign extension.\n         Scalar::Raw { data: b as u128, size: 1 }\n     }\n \n     #[inline]\n     pub fn from_char(c: char) -> Self {\n+        // Guaranteed to be truncated and does not need sign extension.\n         Scalar::Raw { data: c as u128, size: 4 }\n     }\n \n@@ -299,21 +301,25 @@ impl<'tcx, Tag> Scalar<Tag> {\n \n     #[inline]\n     pub fn from_u8(i: u8) -> Self {\n+        // Guaranteed to be truncated and does not need sign extension.\n         Scalar::Raw { data: i as u128, size: 1 }\n     }\n \n     #[inline]\n     pub fn from_u16(i: u16) -> Self {\n+        // Guaranteed to be truncated and does not need sign extension.\n         Scalar::Raw { data: i as u128, size: 2 }\n     }\n \n     #[inline]\n     pub fn from_u32(i: u32) -> Self {\n+        // Guaranteed to be truncated and does not need sign extension.\n         Scalar::Raw { data: i as u128, size: 4 }\n     }\n \n     #[inline]\n     pub fn from_u64(i: u64) -> Self {\n+        // Guaranteed to be truncated and does not need sign extension.\n         Scalar::Raw { data: i as u128, size: 8 }\n     }\n \n@@ -341,6 +347,26 @@ impl<'tcx, Tag> Scalar<Tag> {\n             .unwrap_or_else(|| bug!(\"Signed value {:#x} does not fit in {} bits\", i, size.bits()))\n     }\n \n+    #[inline]\n+    pub fn from_i8(i: i8) -> Self {\n+        Self::from_int(i, Size::from_bits(8))\n+    }\n+\n+    #[inline]\n+    pub fn from_i16(i: i16) -> Self {\n+        Self::from_int(i, Size::from_bits(16))\n+    }\n+\n+    #[inline]\n+    pub fn from_i32(i: i32) -> Self {\n+        Self::from_int(i, Size::from_bits(32))\n+    }\n+\n+    #[inline]\n+    pub fn from_i64(i: i64) -> Self {\n+        Self::from_int(i, Size::from_bits(64))\n+    }\n+\n     #[inline]\n     pub fn from_machine_isize(i: i64, cx: &impl HasDataLayout) -> Self {\n         Self::from_int(i, cx.data_layout().pointer_size)"}]}