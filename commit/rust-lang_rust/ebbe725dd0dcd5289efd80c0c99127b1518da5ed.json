{"sha": "ebbe725dd0dcd5289efd80c0c99127b1518da5ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViYmU3MjVkZDBkY2Q1Mjg5ZWZkODBjMGM5OTEyN2IxNTE4ZGE1ZWQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-06-01T03:48:09Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-06-01T03:48:09Z"}, "message": "Tweak wording", "tree": {"sha": "53c3b5e1d3b5e1895ac2175cd3ef074ad21a14e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53c3b5e1d3b5e1895ac2175cd3ef074ad21a14e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebbe725dd0dcd5289efd80c0c99127b1518da5ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebbe725dd0dcd5289efd80c0c99127b1518da5ed", "html_url": "https://github.com/rust-lang/rust/commit/ebbe725dd0dcd5289efd80c0c99127b1518da5ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebbe725dd0dcd5289efd80c0c99127b1518da5ed/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74fb3bbee45d54e1680832ba064fa1af8d344bc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/74fb3bbee45d54e1680832ba064fa1af8d344bc0", "html_url": "https://github.com/rust-lang/rust/commit/74fb3bbee45d54e1680832ba064fa1af8d344bc0"}], "stats": {"total": 56, "additions": 25, "deletions": 31}, "files": [{"sha": "bfe2cbbd1cdd6320091a607f081c92d97237aad3", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ebbe725dd0dcd5289efd80c0c99127b1518da5ed/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebbe725dd0dcd5289efd80c0c99127b1518da5ed/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=ebbe725dd0dcd5289efd80c0c99127b1518da5ed", "patch": "@@ -148,13 +148,16 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         // L |     let b = Ok(4);\n         //   |         -   ^^ cannot infer type for `E` in `std::result::Result<i32, E>`\n         //   |         |\n-        //   |         consider giving `b` a type\n+        //   |         consider giving `b` the type `std::result::Result<i32, E>` with the type\n+        //   |         parameter `E` specified\n         // ```\n-        let ty_msg = match &local_visitor.found_ty {\n+        let (ty_msg, suffix) = match &local_visitor.found_ty {\n             Some(ty) if &ty.to_string() != \"_\" && ty.to_string() != name => {\n-                format!(\" in `{}`\", ty_to_string(ty))\n+                let ty = ty_to_string(ty);\n+                (format!(\" in `{}`\", ty),\n+                 format!( \"the type `{}` with the type parameter `{}` specified\", ty, name))\n             }\n-            _ => String::new(),\n+            _ => (String::new(), \"a type\".to_owned()),\n         };\n         let mut labels = vec![(span, InferCtxt::missing_type_msg(&name, &ty_msg))];\n \n@@ -177,25 +180,16 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             //            with the type parameter `_` specified\n             // ```\n             labels.clear();\n-            labels.push((pattern.span, format!(\n-                \"consider giving this closure parameter {}\",\n-                match &local_visitor.found_ty {\n-                    Some(ty) if &ty.to_string() != \"_\" && ty.to_string() != name => {\n-                        format!(\n-                            \"the type `{}` with the type parameter `{}` specified\",\n-                            ty_to_string(ty),\n-                            name,\n-                        )\n-                    }\n-                    _ => \"a type\".to_owned(),\n-                },\n-            )));\n+            labels.push((\n+                pattern.span,\n+                format!(\"consider giving this closure parameter {}\", suffix),\n+            ));\n         } else if let Some(pattern) = local_visitor.found_local_pattern {\n             if let Some(simple_ident) = pattern.simple_ident() {\n                 match pattern.span.compiler_desugaring_kind() {\n                     None => labels.push((\n                         pattern.span,\n-                        format!(\"consider giving `{}` a type\", simple_ident),\n+                        format!(\"consider giving `{}` {}\", simple_ident, suffix),\n                     )),\n                     Some(CompilerDesugaringKind::ForLoop) => labels.push((\n                         pattern.span,\n@@ -204,7 +198,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     _ => {}\n                 }\n             } else {\n-                labels.push((pattern.span, \"consider giving the pattern a type\".to_owned()));\n+                labels.push((pattern.span, format!(\"consider giving this pattern {}\", suffix)));\n             }\n         };\n "}, {"sha": "25340a2e24276dadbed5a3196c07758d66c4dc56", "filename": "src/test/ui/issues/issue-12187-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebbe725dd0dcd5289efd80c0c99127b1518da5ed/src%2Ftest%2Fui%2Fissues%2Fissue-12187-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ebbe725dd0dcd5289efd80c0c99127b1518da5ed/src%2Ftest%2Fui%2Fissues%2Fissue-12187-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12187-1.stderr?ref=ebbe725dd0dcd5289efd80c0c99127b1518da5ed", "patch": "@@ -5,7 +5,7 @@ LL |     let &v = new();\n    |         -^\n    |         ||\n    |         |cannot infer type\n-   |         consider giving the pattern a type\n+   |         consider giving this pattern the type `&T` with the type parameter `_` specified\n \n error: aborting due to previous error\n "}, {"sha": "e0f060b26e69a9abe0d2d0bdfe21c9865c33c05d", "filename": "src/test/ui/issues/issue-12187-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebbe725dd0dcd5289efd80c0c99127b1518da5ed/src%2Ftest%2Fui%2Fissues%2Fissue-12187-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ebbe725dd0dcd5289efd80c0c99127b1518da5ed/src%2Ftest%2Fui%2Fissues%2Fissue-12187-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12187-2.stderr?ref=ebbe725dd0dcd5289efd80c0c99127b1518da5ed", "patch": "@@ -5,7 +5,7 @@ LL |     let &v = new();\n    |         -^\n    |         ||\n    |         |cannot infer type\n-   |         consider giving the pattern a type\n+   |         consider giving this pattern the type `&T` with the type parameter `_` specified\n \n error: aborting due to previous error\n "}, {"sha": "11dd66129d21e1863a2634208da0ba5afc898031", "filename": "src/test/ui/issues/issue-17551.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebbe725dd0dcd5289efd80c0c99127b1518da5ed/src%2Ftest%2Fui%2Fissues%2Fissue-17551.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ebbe725dd0dcd5289efd80c0c99127b1518da5ed/src%2Ftest%2Fui%2Fissues%2Fissue-17551.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17551.stderr?ref=ebbe725dd0dcd5289efd80c0c99127b1518da5ed", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed in `B<T>`\n LL |     let foo = B(marker::PhantomData);\n    |         ---   ^ cannot infer type for `T` in `B<T>`\n    |         |\n-   |         consider giving `foo` a type\n+   |         consider giving `foo` the type `B<T>` with the type parameter `T` specified\n \n error: aborting due to previous error\n "}, {"sha": "3f0beaee3b1aba554b03fc63cb3c03b3fad54637", "filename": "src/test/ui/issues/issue-25368.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebbe725dd0dcd5289efd80c0c99127b1518da5ed/src%2Ftest%2Fui%2Fissues%2Fissue-25368.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ebbe725dd0dcd5289efd80c0c99127b1518da5ed/src%2Ftest%2Fui%2Fissues%2Fissue-25368.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25368.stderr?ref=ebbe725dd0dcd5289efd80c0c99127b1518da5ed", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed in `(std::sync::mpsc::Sender<Foo<T>>, std:\n   --> $DIR/issue-25368.rs:11:17\n    |\n LL |     let (tx, rx) = channel();\n-   |         -------- consider giving the pattern a type\n+   |         -------- consider giving this pattern the type `(std::sync::mpsc::Sender<Foo<T>>, std::sync::mpsc::Receiver<Foo<T>>)` with the type parameter `T` specified\n ...\n LL |         tx.send(Foo{ foo: PhantomData });\n    |                 ^^^ cannot infer type for `T` in `(std::sync::mpsc::Sender<Foo<T>>, std::sync::mpsc::Receiver<Foo<T>>)`"}, {"sha": "65088079476b76edc1f18e422a7f85fda33d4308", "filename": "src/test/ui/issues/issue-7813.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebbe725dd0dcd5289efd80c0c99127b1518da5ed/src%2Ftest%2Fui%2Fissues%2Fissue-7813.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ebbe725dd0dcd5289efd80c0c99127b1518da5ed/src%2Ftest%2Fui%2Fissues%2Fissue-7813.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7813.stderr?ref=ebbe725dd0dcd5289efd80c0c99127b1518da5ed", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed in `&[_; 0]`\n LL |     let v = &[];\n    |         -   ^^^ cannot infer type\n    |         |\n-   |         consider giving `v` a type\n+   |         consider giving `v` the type `&[_; 0]` with the type parameter `_` specified\n \n error: aborting due to previous error\n "}, {"sha": "842aa8a1f385970da3f91998f643e003b33bf230", "filename": "src/test/ui/methods/method-ambig-one-trait-unknown-int-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebbe725dd0dcd5289efd80c0c99127b1518da5ed/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ebbe725dd0dcd5289efd80c0c99127b1518da5ed/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr?ref=ebbe725dd0dcd5289efd80c0c99127b1518da5ed", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed in `std::vec::Vec<T>`\n LL |     let mut x = Vec::new();\n    |         -----   ^^^^^^^^ cannot infer type for `T` in `std::vec::Vec<T>`\n    |         |\n-   |         consider giving `x` a type\n+   |         consider giving `x` the type `std::vec::Vec<T>` with the type parameter `T` specified\n \n error[E0308]: mismatched types\n   --> $DIR/method-ambig-one-trait-unknown-int-type.rs:33:20"}, {"sha": "5e05216532126d343dd59c1c674def87eabb6a94", "filename": "src/test/ui/span/issue-42234-unknown-receiver-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebbe725dd0dcd5289efd80c0c99127b1518da5ed/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ebbe725dd0dcd5289efd80c0c99127b1518da5ed/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr?ref=ebbe725dd0dcd5289efd80c0c99127b1518da5ed", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed in `std::option::Option<_>`\n   --> $DIR/issue-42234-unknown-receiver-type.rs:7:5\n    |\n LL |     let x: Option<_> = None;\n-   |         - consider giving `x` a type\n+   |         - consider giving `x` the type `std::option::Option<_>` with the type parameter `T` specified\n LL |     x.unwrap().method_that_could_exist_on_some_type();\n    |     ^^^^^^^^^^ cannot infer type for `T` in `std::option::Option<_>`\n    |"}, {"sha": "428ea6de6ed9cd339542d429fd7014d43816fe1b", "filename": "src/test/ui/type/type-check/cannot_infer_local_or_array.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebbe725dd0dcd5289efd80c0c99127b1518da5ed/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ebbe725dd0dcd5289efd80c0c99127b1518da5ed/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_array.stderr?ref=ebbe725dd0dcd5289efd80c0c99127b1518da5ed", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed in `[_; 0]`\n LL |     let x = [];\n    |         -   ^^ cannot infer type\n    |         |\n-   |         consider giving `x` a type\n+   |         consider giving `x` the type `[_; 0]` with the type parameter `_` specified\n \n error: aborting due to previous error\n "}, {"sha": "8d0dc18ab90ddf81b6b488b359a2d3f4f1f39c9d", "filename": "src/test/ui/type/type-check/cannot_infer_local_or_vec.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebbe725dd0dcd5289efd80c0c99127b1518da5ed/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ebbe725dd0dcd5289efd80c0c99127b1518da5ed/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr?ref=ebbe725dd0dcd5289efd80c0c99127b1518da5ed", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed in `std::vec::Vec<T>`\n LL |     let x = vec![];\n    |         -   ^^^^^^ cannot infer type for `T` in `std::vec::Vec<T>`\n    |         |\n-   |         consider giving `x` a type\n+   |         consider giving `x` the type `std::vec::Vec<T>` with the type parameter `T` specified\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n "}, {"sha": "5cd898f3fefc768e64760e0ba2a9cdd26e4a64ff", "filename": "src/test/ui/type/type-check/cannot_infer_local_or_vec_in_tuples.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebbe725dd0dcd5289efd80c0c99127b1518da5ed/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ebbe725dd0dcd5289efd80c0c99127b1518da5ed/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr?ref=ebbe725dd0dcd5289efd80c0c99127b1518da5ed", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed in `(std::vec::Vec<T>,)`\n LL |     let (x, ) = (vec![], );\n    |         -----    ^^^^^^ cannot infer type for `T` in `(std::vec::Vec<T>,)`\n    |         |\n-   |         consider giving the pattern a type\n+   |         consider giving this pattern the type `(std::vec::Vec<T>,)` with the type parameter `T` specified\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n "}, {"sha": "4804983b8618b0b22a6d5d6a3c6cf5452f18bdef", "filename": "src/test/ui/unboxed-closures/unboxed-closures-failed-recursive-fn-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebbe725dd0dcd5289efd80c0c99127b1518da5ed/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ebbe725dd0dcd5289efd80c0c99127b1518da5ed/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-2.stderr?ref=ebbe725dd0dcd5289efd80c0c99127b1518da5ed", "patch": "@@ -2,7 +2,7 @@ error[E0282]: type annotations needed in `std::option::Option<T>`\n   --> $DIR/unboxed-closures-failed-recursive-fn-2.rs:16:32\n    |\n LL |     let mut closure0 = None;\n-   |         ------------ consider giving `closure0` a type\n+   |         ------------ consider giving `closure0` the type `std::option::Option<T>` with the type parameter `_` specified\n ...\n LL |                         return c();\n    |                                ^^^ cannot infer type"}, {"sha": "3ece3063cd032bc2b915498072312e5bbf1d8ca1", "filename": "src/test/ui/vector-no-ann.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebbe725dd0dcd5289efd80c0c99127b1518da5ed/src%2Ftest%2Fui%2Fvector-no-ann.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ebbe725dd0dcd5289efd80c0c99127b1518da5ed/src%2Ftest%2Fui%2Fvector-no-ann.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvector-no-ann.stderr?ref=ebbe725dd0dcd5289efd80c0c99127b1518da5ed", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed in `std::vec::Vec<T>`\n LL |     let _foo = Vec::new();\n    |         ----   ^^^^^^^^ cannot infer type for `T` in `std::vec::Vec<T>`\n    |         |\n-   |         consider giving `_foo` a type\n+   |         consider giving `_foo` the type `std::vec::Vec<T>` with the type parameter `T` specified\n \n error: aborting due to previous error\n "}]}