{"sha": "bd18ad4fef9ca3d618521b8268183497b6104ff9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMThhZDRmZWY5Y2EzZDYxODUyMWI4MjY4MTgzNDk3YjYxMDRmZjk=", "commit": {"author": {"name": "jumbatm", "email": "jumbatm@gmail.com", "date": "2020-05-01T11:49:42Z"}, "committer": {"name": "jumbatm", "email": "jumbatm@gmail.com", "date": "2020-05-01T11:52:43Z"}, "message": "Note that try_validation_pat can take a format str directly.", "tree": {"sha": "f63c1410912182548f43a587104b66c870101b12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f63c1410912182548f43a587104b66c870101b12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd18ad4fef9ca3d618521b8268183497b6104ff9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd18ad4fef9ca3d618521b8268183497b6104ff9", "html_url": "https://github.com/rust-lang/rust/commit/bd18ad4fef9ca3d618521b8268183497b6104ff9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd18ad4fef9ca3d618521b8268183497b6104ff9/comments", "author": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "830473959adef21d6d9a9e13faadc0776b64e925", "url": "https://api.github.com/repos/rust-lang/rust/commits/830473959adef21d6d9a9e13faadc0776b64e925", "html_url": "https://github.com/rust-lang/rust/commit/830473959adef21d6d9a9e13faadc0776b64e925"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "fe584596f01b9ed7e2e1a8a892abd006652ca97a", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bd18ad4fef9ca3d618521b8268183497b6104ff9/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd18ad4fef9ca3d618521b8268183497b6104ff9/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=bd18ad4fef9ca3d618521b8268183497b6104ff9", "patch": "@@ -66,6 +66,15 @@ macro_rules! try_validation {\n /// });\n /// ```\n ///\n+/// An additional nicety is that both parameters actually take format args, so you can just write\n+/// the format string in directly:\n+///\n+/// ```\n+/// let v = try_validation_pat!(some_fn(), some_path, {\n+///     Foo | Bar | Baz => { \"{:?}\", some_failure } expected { \"{}\", expected_value },\n+/// });\n+/// ```\n+///\n macro_rules! try_validation_pat {\n     ($e:expr, $where:expr, { $( $p:pat )|+ =>\n         { $( $what_fmt:expr ),+ } $( expected { $( $expected_fmt:expr ),+ } )? $( , )?}) => {{"}]}