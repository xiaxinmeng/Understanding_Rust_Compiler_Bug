{"sha": "659b0e73cfd9ef7755d032f90622a08576f1d86d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1OWIwZTczY2ZkOWVmNzc1NWQwMzJmOTA2MjJhMDg1NzZmMWQ4NmQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-17T18:03:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-17T18:03:03Z"}, "message": "Merge cli and ra_lsp_server", "tree": {"sha": "238a2cb3e021502608d357785ebbe3b21f94573f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/238a2cb3e021502608d357785ebbe3b21f94573f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/659b0e73cfd9ef7755d032f90622a08576f1d86d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/659b0e73cfd9ef7755d032f90622a08576f1d86d", "html_url": "https://github.com/rust-lang/rust/commit/659b0e73cfd9ef7755d032f90622a08576f1d86d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/659b0e73cfd9ef7755d032f90622a08576f1d86d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d1b3da5fb69d932c65884a361ec10d81e8a51d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d1b3da5fb69d932c65884a361ec10d81e8a51d8", "html_url": "https://github.com/rust-lang/rust/commit/2d1b3da5fb69d932c65884a361ec10d81e8a51d8"}], "stats": {"total": 395, "additions": 190, "deletions": 205}, "files": [{"sha": "ccdcfbee37425663302865d7008480170556645e", "filename": "Cargo.lock", "status": "modified", "additions": 8, "deletions": 24, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/659b0e73cfd9ef7755d032f90622a08576f1d86d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/659b0e73cfd9ef7755d032f90622a08576f1d86d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=659b0e73cfd9ef7755d032f90622a08576f1d86d", "patch": "@@ -941,30 +941,6 @@ dependencies = [\n  \"rustc-hash\",\n ]\n \n-[[package]]\n-name = \"ra_cli\"\n-version = \"0.1.0\"\n-dependencies = [\n- \"anyhow\",\n- \"crossbeam-channel\",\n- \"env_logger\",\n- \"itertools\",\n- \"log\",\n- \"pico-args\",\n- \"ra_db\",\n- \"ra_hir\",\n- \"ra_hir_def\",\n- \"ra_hir_ty\",\n- \"ra_ide\",\n- \"ra_prof\",\n- \"ra_project_model\",\n- \"ra_syntax\",\n- \"ra_vfs\",\n- \"ra_vfs_glob\",\n- \"rand\",\n- \"rustc-hash\",\n-]\n-\n [[package]]\n name = \"ra_db\"\n version = \"0.1.0\"\n@@ -1122,22 +1098,30 @@ dependencies = [\n name = \"ra_lsp_server\"\n version = \"0.1.0\"\n dependencies = [\n+ \"anyhow\",\n  \"crossbeam-channel\",\n  \"either\",\n  \"env_logger\",\n+ \"itertools\",\n  \"jod-thread\",\n  \"log\",\n  \"lsp-server\",\n  \"lsp-types\",\n  \"parking_lot\",\n+ \"pico-args\",\n  \"ra_cargo_watch\",\n+ \"ra_db\",\n+ \"ra_hir\",\n+ \"ra_hir_def\",\n+ \"ra_hir_ty\",\n  \"ra_ide\",\n  \"ra_prof\",\n  \"ra_project_model\",\n  \"ra_syntax\",\n  \"ra_text_edit\",\n  \"ra_vfs\",\n  \"ra_vfs_glob\",\n+ \"rand\",\n  \"relative-path\",\n  \"rustc-hash\",\n  \"serde\","}, {"sha": "ce88a76b1d7fe49325099e4b4175742ae184df71", "filename": "crates/ra_cli/Cargo.toml", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2d1b3da5fb69d932c65884a361ec10d81e8a51d8/crates%2Fra_cli%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2d1b3da5fb69d932c65884a361ec10d81e8a51d8/crates%2Fra_cli%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2FCargo.toml?ref=2d1b3da5fb69d932c65884a361ec10d81e8a51d8", "patch": "@@ -1,31 +0,0 @@\n-[package]\n-edition = \"2018\"\n-name = \"ra_cli\"\n-version = \"0.1.0\"\n-authors = [\"rust-analyzer developers\"]\n-publish = false\n-\n-[dependencies]\n-crossbeam-channel = \"0.4.0\"\n-env_logger = { version = \"0.7.1\", default-features = false }\n-itertools = \"0.8.0\"\n-log = \"0.4.5\"\n-pico-args = \"0.3.0\"\n-rand = { version = \"0.7.0\", features = [\"small_rng\"] }\n-rustc-hash = \"1.0\"\n-anyhow = \"1.0\"\n-\n-hir = { path = \"../ra_hir\", package = \"ra_hir\" }\n-hir_def = { path = \"../ra_hir_def\", package = \"ra_hir_def\" }\n-hir_ty = { path = \"../ra_hir_ty\", package = \"ra_hir_ty\" }\n-ra_db = { path = \"../ra_db\" }\n-ra_ide = { path = \"../ra_ide\" }\n-ra_project_model = { path = \"../ra_project_model\" }\n-ra_syntax = { path = \"../ra_syntax\" }\n-ra_vfs = \"0.5.0\"\n-ra_vfs_glob = { path = \"../ra_vfs_glob\" }\n-\n-[dependencies.ra_prof]\n-path = \"../ra_prof\"\n-# features = [ \"cpu_profiler\" ]\n-# features = [ \"jemalloc\" ]"}, {"sha": "be7982b2ab55e9819072d247642a7385df11f4f3", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/659b0e73cfd9ef7755d032f90622a08576f1d86d/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/659b0e73cfd9ef7755d032f90622a08576f1d86d/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=659b0e73cfd9ef7755d032f90622a08576f1d86d", "patch": "@@ -8,13 +8,17 @@ authors = [\"rust-analyzer developers\"]\n doctest = false\n \n [dependencies]\n+anyhow = \"1.0\"\n crossbeam-channel = \"0.4\"\n either = \"1.5\"\n env_logger = { version = \"0.7.1\", default-features = false }\n+itertools = \"0.8.0\"\n jod-thread = \"0.1.0\"\n log = \"0.4.3\"\n lsp-types = { version = \"0.70.0\", features = [\"proposed\"] }\n parking_lot = \"0.10.0\"\n+pico-args = \"0.3.0\"\n+rand = { version = \"0.7.0\", features = [\"small_rng\"] }\n relative-path = \"1.0.0\"\n rustc-hash = \"1.0\"\n serde = { version = \"1.0.83\", features = [\"derive\"] }\n@@ -31,6 +35,13 @@ ra_text_edit = { path = \"../ra_text_edit\" }\n ra_vfs = \"0.5.0\"\n ra_vfs_glob = { path = \"../ra_vfs_glob\" }\n \n+# This should only be used in CLI\n+ra_db = { path = \"../ra_db\" }\n+hir = { path = \"../ra_hir\", package = \"ra_hir\" }\n+hir_def = { path = \"../ra_hir_def\", package = \"ra_hir_def\" }\n+hir_ty = { path = \"../ra_hir_ty\", package = \"ra_hir_ty\" }\n+\n+\n [target.'cfg(windows)'.dependencies]\n winapi = \"0.3\"\n "}, {"sha": "41959797ccad2ecad7ce058a726c9ec93d76c64b", "filename": "crates/ra_lsp_server/src/args.rs", "status": "renamed", "additions": 28, "deletions": 127, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/659b0e73cfd9ef7755d032f90622a08576f1d86d/crates%2Fra_lsp_server%2Fsrc%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659b0e73cfd9ef7755d032f90622a08576f1d86d/crates%2Fra_lsp_server%2Fsrc%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fargs.rs?ref=659b0e73cfd9ef7755d032f90622a08576f1d86d", "patch": "@@ -1,65 +1,15 @@\n-//! FIXME: write short doc here\n-\n-mod load_cargo;\n-mod analysis_stats;\n-mod analysis_bench;\n-mod progress_report;\n-\n-use std::{fmt::Write, io::Read, path::PathBuf, str::FromStr};\n-\n+use anyhow::{bail, Result};\n use pico_args::Arguments;\n-use ra_ide::{file_structure, Analysis};\n-use ra_prof::profile;\n-use ra_syntax::{AstNode, SourceFile};\n-\n-use anyhow::{bail, format_err, Result};\n-\n-fn main() -> Result<()> {\n-    env_logger::try_init()?;\n-\n-    let command = match Command::from_env_args()? {\n-        Ok(it) => it,\n-        Err(HelpPrinted) => return Ok(()),\n-    };\n-    match command {\n-        Command::Parse { no_dump } => {\n-            let _p = profile(\"parsing\");\n-            let file = file()?;\n-            if !no_dump {\n-                println!(\"{:#?}\", file.syntax());\n-            }\n-            std::mem::forget(file);\n-        }\n-        Command::Symbols => {\n-            let file = file()?;\n-            for s in file_structure(&file) {\n-                println!(\"{:?}\", s);\n-            }\n-        }\n-        Command::Highlight { rainbow } => {\n-            let (analysis, file_id) = Analysis::from_single_file(read_stdin()?);\n-            let html = analysis.highlight_as_html(file_id, rainbow).unwrap();\n-            println!(\"{}\", html);\n-        }\n-        Command::Stats { verbosity, randomize, memory_usage, only, with_deps, path } => {\n-            analysis_stats::run(\n-                verbosity,\n-                memory_usage,\n-                path.as_ref(),\n-                only.as_ref().map(String::as_ref),\n-                with_deps,\n-                randomize,\n-            )?;\n-        }\n-        Command::Bench { verbosity, path, what } => {\n-            analysis_bench::run(verbosity, path.as_ref(), what)?;\n-        }\n-    }\n+use ra_lsp_server::cli::{BenchWhat, Position, Verbosity};\n+\n+use std::{fmt::Write, path::PathBuf};\n \n-    Ok(())\n+pub(crate) struct Args {\n+    pub(crate) verbosity: Verbosity,\n+    pub(crate) command: Command,\n }\n \n-enum Command {\n+pub(crate) enum Command {\n     Parse {\n         no_dump: bool,\n     },\n@@ -68,75 +18,28 @@ enum Command {\n         rainbow: bool,\n     },\n     Stats {\n-        verbosity: Verbosity,\n         randomize: bool,\n         memory_usage: bool,\n         only: Option<String>,\n         with_deps: bool,\n         path: PathBuf,\n     },\n     Bench {\n-        verbosity: Verbosity,\n         path: PathBuf,\n         what: BenchWhat,\n     },\n+    RunServer,\n+    Version,\n }\n \n-#[derive(Clone, Copy)]\n-pub enum Verbosity {\n-    Spammy,\n-    Verbose,\n-    Normal,\n-    Quiet,\n-}\n+impl Args {\n+    pub(crate) fn parse() -> Result<Result<Args, HelpPrinted>> {\n+        let mut matches = Arguments::from_env();\n \n-impl Verbosity {\n-    fn is_verbose(self) -> bool {\n-        match self {\n-            Verbosity::Verbose | Verbosity::Spammy => true,\n-            _ => false,\n+        if matches.contains(\"--version\") {\n+            matches.finish().or_else(handle_extra_flags)?;\n+            return Ok(Ok(Args { verbosity: Verbosity::Normal, command: Command::Version }));\n         }\n-    }\n-    fn is_spammy(self) -> bool {\n-        match self {\n-            Verbosity::Spammy => true,\n-            _ => false,\n-        }\n-    }\n-}\n-\n-enum BenchWhat {\n-    Highlight { path: PathBuf },\n-    Complete(Position),\n-    GotoDef(Position),\n-}\n-\n-pub(crate) struct Position {\n-    path: PathBuf,\n-    line: u32,\n-    column: u32,\n-}\n-\n-impl FromStr for Position {\n-    type Err = anyhow::Error;\n-    fn from_str(s: &str) -> Result<Self> {\n-        let (path_line, column) = rsplit_at_char(s, ':')?;\n-        let (path, line) = rsplit_at_char(path_line, ':')?;\n-        Ok(Position { path: path.into(), line: line.parse()?, column: column.parse()? })\n-    }\n-}\n-\n-fn rsplit_at_char(s: &str, c: char) -> Result<(&str, &str)> {\n-    let idx = s.rfind(c).ok_or_else(|| format_err!(\"no `{}` in {}\", c, s))?;\n-    Ok((&s[..idx], &s[idx + 1..]))\n-}\n-\n-struct HelpPrinted;\n-\n-impl Command {\n-    fn from_env_args() -> Result<Result<Command, HelpPrinted>> {\n-        let mut matches = Arguments::from_env();\n-        let subcommand = matches.subcommand()?.unwrap_or_default();\n \n         let verbosity = match (\n             matches.contains([\"-vv\", \"--spammy\"]),\n@@ -151,6 +54,13 @@ impl Command {\n             (false, true, true) => bail!(\"Invalid flags: -q conflicts with -v\"),\n         };\n \n+        let subcommand = match matches.subcommand()? {\n+            Some(it) => it,\n+            None => {\n+                matches.finish().or_else(handle_extra_flags)?;\n+                return Ok(Ok(Args { verbosity, command: Command::RunServer }));\n+            }\n+        };\n         let command = match subcommand.as_str() {\n             \"parse\" => {\n                 if matches.contains([\"-h\", \"--help\"]) {\n@@ -247,7 +157,7 @@ ARGS:\n                     trailing.pop().unwrap().into()\n                 };\n \n-                Command::Stats { verbosity, randomize, memory_usage, only, with_deps, path }\n+                Command::Stats { randomize, memory_usage, only, with_deps, path }\n             }\n             \"analysis-bench\" => {\n                 if matches.contains([\"-h\", \"--help\"]) {\n@@ -284,7 +194,7 @@ ARGS:\n                         \"exactly one of  `--highlight`, `--complete` or `--goto-def` must be set\"\n                     ),\n                 };\n-                Command::Bench { verbosity, path, what }\n+                Command::Bench { path, what }\n             }\n             _ => {\n                 eprintln!(\n@@ -307,10 +217,12 @@ SUBCOMMANDS:\n                 return Ok(Err(HelpPrinted));\n             }\n         };\n-        Ok(Ok(command))\n+        Ok(Ok(Args { verbosity, command }))\n     }\n }\n \n+pub(crate) struct HelpPrinted;\n+\n fn handle_extra_flags(e: pico_args::Error) -> Result<()> {\n     if let pico_args::Error::UnusedArgsLeft(flags) = e {\n         let mut invalid_flags = String::new();\n@@ -323,14 +235,3 @@ fn handle_extra_flags(e: pico_args::Error) -> Result<()> {\n         bail!(e);\n     }\n }\n-\n-fn file() -> Result<SourceFile> {\n-    let text = read_stdin()?;\n-    Ok(SourceFile::parse(&text).tree())\n-}\n-\n-fn read_stdin() -> Result<String> {\n-    let mut buff = String::new();\n-    std::io::stdin().read_to_string(&mut buff)?;\n-    Ok(buff)\n-}", "previous_filename": "crates/ra_cli/src/main.rs"}, {"sha": "3c7b8e2509a686e7123878ecde24de1b182c3cce", "filename": "crates/ra_lsp_server/src/cli.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/659b0e73cfd9ef7755d032f90622a08576f1d86d/crates%2Fra_lsp_server%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659b0e73cfd9ef7755d032f90622a08576f1d86d/crates%2Fra_lsp_server%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcli.rs?ref=659b0e73cfd9ef7755d032f90622a08576f1d86d", "patch": "@@ -0,0 +1,75 @@\n+//! FIXME: write short doc here\n+\n+mod load_cargo;\n+mod analysis_stats;\n+mod analysis_bench;\n+mod progress_report;\n+\n+use std::io::Read;\n+\n+use anyhow::Result;\n+use ra_ide::{file_structure, Analysis};\n+use ra_prof::profile;\n+use ra_syntax::{AstNode, SourceFile};\n+\n+#[derive(Clone, Copy)]\n+pub enum Verbosity {\n+    Spammy,\n+    Verbose,\n+    Normal,\n+    Quiet,\n+}\n+\n+impl Verbosity {\n+    pub fn is_verbose(self) -> bool {\n+        match self {\n+            Verbosity::Verbose | Verbosity::Spammy => true,\n+            _ => false,\n+        }\n+    }\n+    pub fn is_spammy(self) -> bool {\n+        match self {\n+            Verbosity::Spammy => true,\n+            _ => false,\n+        }\n+    }\n+}\n+\n+pub fn parse(no_dump: bool) -> Result<()> {\n+    let _p = profile(\"parsing\");\n+    let file = file()?;\n+    if !no_dump {\n+        println!(\"{:#?}\", file.syntax());\n+    }\n+    std::mem::forget(file);\n+    Ok(())\n+}\n+\n+pub fn symbols() -> Result<()> {\n+    let file = file()?;\n+    for s in file_structure(&file) {\n+        println!(\"{:?}\", s);\n+    }\n+    Ok(())\n+}\n+\n+pub fn highlight(rainbow: bool) -> Result<()> {\n+    let (analysis, file_id) = Analysis::from_single_file(read_stdin()?);\n+    let html = analysis.highlight_as_html(file_id, rainbow).unwrap();\n+    println!(\"{}\", html);\n+    Ok(())\n+}\n+\n+pub use analysis_bench::{analysis_bench, BenchWhat, Position};\n+pub use analysis_stats::analysis_stats;\n+\n+fn file() -> Result<SourceFile> {\n+    let text = read_stdin()?;\n+    Ok(SourceFile::parse(&text).tree())\n+}\n+\n+fn read_stdin() -> Result<String> {\n+    let mut buff = String::new();\n+    std::io::stdin().read_to_string(&mut buff)?;\n+    Ok(buff)\n+}"}, {"sha": "e00f8107348e0ddba76119e836d412b612585e7c", "filename": "crates/ra_lsp_server/src/cli/analysis_bench.rs", "status": "renamed", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/659b0e73cfd9ef7755d032f90622a08576f1d86d/crates%2Fra_lsp_server%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659b0e73cfd9ef7755d032f90622a08576f1d86d/crates%2Fra_lsp_server%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=659b0e73cfd9ef7755d032f90622a08576f1d86d", "patch": "@@ -1,17 +1,48 @@\n //! FIXME: write short doc here\n \n-use std::{path::Path, sync::Arc, time::Instant};\n+use std::{\n+    path::{Path, PathBuf},\n+    str::FromStr,\n+    sync::Arc,\n+    time::Instant,\n+};\n \n-use anyhow::format_err;\n+use anyhow::{format_err, Result};\n use ra_db::{\n     salsa::{Database, Durability},\n     FileId, SourceDatabaseExt,\n };\n use ra_ide::{Analysis, AnalysisChange, AnalysisHost, FilePosition, LineCol};\n \n-use crate::{load_cargo::load_cargo, BenchWhat, Result, Verbosity};\n+use crate::cli::{load_cargo::load_cargo, Verbosity};\n+\n+pub enum BenchWhat {\n+    Highlight { path: PathBuf },\n+    Complete(Position),\n+    GotoDef(Position),\n+}\n+\n+pub struct Position {\n+    pub path: PathBuf,\n+    pub line: u32,\n+    pub column: u32,\n+}\n+\n+impl FromStr for Position {\n+    type Err = anyhow::Error;\n+    fn from_str(s: &str) -> Result<Self> {\n+        let (path_line, column) = rsplit_at_char(s, ':')?;\n+        let (path, line) = rsplit_at_char(path_line, ':')?;\n+        Ok(Position { path: path.into(), line: line.parse()?, column: column.parse()? })\n+    }\n+}\n+\n+fn rsplit_at_char(s: &str, c: char) -> Result<(&str, &str)> {\n+    let idx = s.rfind(c).ok_or_else(|| format_err!(\"no `{}` in {}\", c, s))?;\n+    Ok((&s[..idx], &s[idx + 1..]))\n+}\n \n-pub(crate) fn run(verbosity: Verbosity, path: &Path, what: BenchWhat) -> Result<()> {\n+pub fn analysis_bench(verbosity: Verbosity, path: &Path, what: BenchWhat) -> Result<()> {\n     ra_prof::init();\n \n     let start = Instant::now();", "previous_filename": "crates/ra_cli/src/analysis_bench.rs"}, {"sha": "c27fabe3c4bc7d7c698cd064f3d7cb0cce3dd243", "filename": "crates/ra_lsp_server/src/cli/analysis_stats.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/659b0e73cfd9ef7755d032f90622a08576f1d86d/crates%2Fra_lsp_server%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659b0e73cfd9ef7755d032f90622a08576f1d86d/crates%2Fra_lsp_server%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=659b0e73cfd9ef7755d032f90622a08576f1d86d", "patch": "@@ -13,9 +13,9 @@ use ra_db::SourceDatabaseExt;\n use ra_syntax::AstNode;\n use rand::{seq::SliceRandom, thread_rng};\n \n-use crate::{load_cargo::load_cargo, progress_report::ProgressReport, Result, Verbosity};\n+use crate::cli::{load_cargo::load_cargo, progress_report::ProgressReport, Result, Verbosity};\n \n-pub fn run(\n+pub fn analysis_stats(\n     verbosity: Verbosity,\n     memory_usage: bool,\n     path: &Path,", "previous_filename": "crates/ra_cli/src/analysis_stats.rs"}, {"sha": "b9a4e6abad37f916de7045f1e9bc0522b250c6b8", "filename": "crates/ra_lsp_server/src/cli/load_cargo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/659b0e73cfd9ef7755d032f90622a08576f1d86d/crates%2Fra_lsp_server%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659b0e73cfd9ef7755d032f90622a08576f1d86d/crates%2Fra_lsp_server%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcli%2Fload_cargo.rs?ref=659b0e73cfd9ef7755d032f90622a08576f1d86d", "previous_filename": "crates/ra_cli/src/load_cargo.rs"}, {"sha": "31867a1e973e3f29fa00f120619fba8bf1366900", "filename": "crates/ra_lsp_server/src/cli/progress_report.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/659b0e73cfd9ef7755d032f90622a08576f1d86d/crates%2Fra_lsp_server%2Fsrc%2Fcli%2Fprogress_report.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659b0e73cfd9ef7755d032f90622a08576f1d86d/crates%2Fra_lsp_server%2Fsrc%2Fcli%2Fprogress_report.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcli%2Fprogress_report.rs?ref=659b0e73cfd9ef7755d032f90622a08576f1d86d", "previous_filename": "crates/ra_cli/src/progress_report.rs"}, {"sha": "2832b260576e0447f789d235c599bacd0e7d4964", "filename": "crates/ra_lsp_server/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/659b0e73cfd9ef7755d032f90622a08576f1d86d/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659b0e73cfd9ef7755d032f90622a08576f1d86d/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Flib.rs?ref=659b0e73cfd9ef7755d032f90622a08576f1d86d", "patch": "@@ -7,6 +7,8 @@\n //! state, and `main_loop` module defines the rules for modifying it.\n #![recursion_limit = \"512\"]\n \n+pub mod cli;\n+\n #[allow(unused)]\n macro_rules! println {\n     ($($tt:tt)*) => {"}, {"sha": "a549e5ff1249a85a08d6b6447aaa863ccb5085c4", "filename": "crates/ra_lsp_server/src/main.rs", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/659b0e73cfd9ef7755d032f90622a08576f1d86d/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659b0e73cfd9ef7755d032f90622a08576f1d86d/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs?ref=659b0e73cfd9ef7755d032f90622a08576f1d86d", "patch": "@@ -1,14 +1,39 @@\n //! `ra_lsp_server` binary\n+mod args;\n \n use lsp_server::Connection;\n-use ra_lsp_server::{from_json, show_message, Result, ServerConfig};\n+use ra_lsp_server::{cli, from_json, show_message, Result, ServerConfig};\n use ra_prof;\n \n+use crate::args::HelpPrinted;\n+\n fn main() -> Result<()> {\n     setup_logging()?;\n-    match Args::parse()? {\n-        Args::Version => println!(\"rust-analyzer {}\", env!(\"REV\")),\n-        Args::Run => run_server()?,\n+    let args = match args::Args::parse()? {\n+        Ok(it) => it,\n+        Err(HelpPrinted) => return Ok(()),\n+    };\n+    match args.command {\n+        args::Command::Parse { no_dump } => cli::parse(no_dump)?,\n+        args::Command::Symbols => cli::symbols()?,\n+        args::Command::Highlight { rainbow } => cli::highlight(rainbow)?,\n+        args::Command::Stats { randomize, memory_usage, only, with_deps, path } => {\n+            cli::analysis_stats(\n+                args.verbosity,\n+                memory_usage,\n+                path.as_ref(),\n+                only.as_ref().map(String::as_ref),\n+                with_deps,\n+                randomize,\n+            )?\n+        }\n+\n+        args::Command::Bench { path, what } => {\n+            cli::analysis_bench(args.verbosity, path.as_ref(), what)?\n+        }\n+\n+        args::Command::RunServer => run_server()?,\n+        args::Command::Version => println!(\"rust-analyzer {}\", env!(\"REV\")),\n     }\n     Ok(())\n }\n@@ -20,19 +45,6 @@ fn setup_logging() -> Result<()> {\n     Ok(())\n }\n \n-enum Args {\n-    Version,\n-    Run,\n-}\n-\n-impl Args {\n-    fn parse() -> Result<Args> {\n-        let res =\n-            if std::env::args().any(|it| it == \"--version\") { Args::Version } else { Args::Run };\n-        Ok(res)\n-    }\n-}\n-\n fn run_server() -> Result<()> {\n     log::info!(\"lifecycle: server started\");\n "}]}