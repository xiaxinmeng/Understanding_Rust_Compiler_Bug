{"sha": "1edd63f1e78a50906e6709b146ca0ce2dc5b9e96", "node_id": "C_kwDOAAsO6NoAKDFlZGQ2M2YxZTc4YTUwOTA2ZTY3MDliMTQ2Y2EwY2UyZGM1YjllOTY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-04T11:18:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-04T11:18:03Z"}, "message": "Rollup merge of #103953 - TaKO8Ki:remove-unused-arg-from-throw_unresolved_import_error, r=oli-obk\n\nRemove unused argument from `throw_unresolved_import_error`\n\n`throw_unresolved_import_error` does not need the second argument.", "tree": {"sha": "e94183c2603221ece94e64fbca5793f3fcd6041b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e94183c2603221ece94e64fbca5793f3fcd6041b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1edd63f1e78a50906e6709b146ca0ce2dc5b9e96", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjZPTrCRBK7hj4Ov3rIwAAF+AIAJ6c1h1hyE8bZ5D3fFsrMSxu\nXM2ETx2hp/TJjf1cn1ATQBgwok3vJ4VNhSHPubcLIXPGdTh1/nnEIZkHIJGSoikj\nL5iz8fvvfm9gor/28YTW+sdZyKexvS1JFdH1ykwef60xPbJDeBgnLIRq/ZkU2E3T\nMtB2zCjE/AJ59Ht1qF2ulzmyLZMB78LfFBkvx/ey7qpKw72Qp1qt8T1VY5GqL6pg\nbpNUUn3O1Fa3ktg+PeiXvVaE8wNuBhkzJsP+FbtyhymD5MpBLpqbt9fzlB3axwFG\nU/sYt4yMn6jG0jJ1deqQ7pnP72j67XZGRblKNkhfsVSqVzzOnxd7xKcMfdUk86w=\n=CQsp\n-----END PGP SIGNATURE-----\n", "payload": "tree e94183c2603221ece94e64fbca5793f3fcd6041b\nparent ee3c9f7051e26e7a36c8b252299bdd064562f8a9\nparent 97ddc6343afd1f3f916d57a5c0e8fc4467c760da\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1667560683 +0100\ncommitter GitHub <noreply@github.com> 1667560683 +0100\n\nRollup merge of #103953 - TaKO8Ki:remove-unused-arg-from-throw_unresolved_import_error, r=oli-obk\n\nRemove unused argument from `throw_unresolved_import_error`\n\n`throw_unresolved_import_error` does not need the second argument.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1edd63f1e78a50906e6709b146ca0ce2dc5b9e96", "html_url": "https://github.com/rust-lang/rust/commit/1edd63f1e78a50906e6709b146ca0ce2dc5b9e96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1edd63f1e78a50906e6709b146ca0ce2dc5b9e96/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee3c9f7051e26e7a36c8b252299bdd064562f8a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee3c9f7051e26e7a36c8b252299bdd064562f8a9", "html_url": "https://github.com/rust-lang/rust/commit/ee3c9f7051e26e7a36c8b252299bdd064562f8a9"}, {"sha": "97ddc6343afd1f3f916d57a5c0e8fc4467c760da", "url": "https://api.github.com/repos/rust-lang/rust/commits/97ddc6343afd1f3f916d57a5c0e8fc4467c760da", "html_url": "https://github.com/rust-lang/rust/commit/97ddc6343afd1f3f916d57a5c0e8fc4467c760da"}], "stats": {"total": 28, "additions": 10, "deletions": 18}, "files": [{"sha": "4c899a5ff2d7eea409ce980dd2d9e4c77beac438", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1edd63f1e78a50906e6709b146ca0ce2dc5b9e96/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd63f1e78a50906e6709b146ca0ce2dc5b9e96/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=1edd63f1e78a50906e6709b146ca0ce2dc5b9e96", "patch": "@@ -473,7 +473,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 {\n                     // In the case of a new import line, throw a diagnostic message\n                     // for the previous line.\n-                    self.throw_unresolved_import_error(errors, None);\n+                    self.throw_unresolved_import_error(errors);\n                     errors = vec![];\n                 }\n                 if seen_spans.insert(err.span) {\n@@ -505,29 +505,21 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         }\n \n         if !errors.is_empty() {\n-            self.throw_unresolved_import_error(errors, None);\n+            self.throw_unresolved_import_error(errors);\n         }\n     }\n \n-    fn throw_unresolved_import_error(\n-        &self,\n-        errors: Vec<(String, UnresolvedImportError)>,\n-        span: Option<MultiSpan>,\n-    ) {\n+    fn throw_unresolved_import_error(&self, errors: Vec<(String, UnresolvedImportError)>) {\n+        if errors.is_empty() {\n+            return;\n+        }\n+\n         /// Upper limit on the number of `span_label` messages.\n         const MAX_LABEL_COUNT: usize = 10;\n \n-        let (span, msg) = if errors.is_empty() {\n-            (span.unwrap(), \"unresolved import\".to_string())\n-        } else {\n-            let span = MultiSpan::from_spans(errors.iter().map(|(_, err)| err.span).collect());\n-\n-            let paths = errors.iter().map(|(path, _)| format!(\"`{}`\", path)).collect::<Vec<_>>();\n-\n-            let msg = format!(\"unresolved import{} {}\", pluralize!(paths.len()), paths.join(\", \"),);\n-\n-            (span, msg)\n-        };\n+        let span = MultiSpan::from_spans(errors.iter().map(|(_, err)| err.span).collect());\n+        let paths = errors.iter().map(|(path, _)| format!(\"`{}`\", path)).collect::<Vec<_>>();\n+        let msg = format!(\"unresolved import{} {}\", pluralize!(paths.len()), paths.join(\", \"),);\n \n         let mut diag = struct_span_err!(self.r.session, span, E0432, \"{}\", &msg);\n "}]}