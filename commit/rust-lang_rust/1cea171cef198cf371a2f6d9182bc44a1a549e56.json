{"sha": "1cea171cef198cf371a2f6d9182bc44a1a549e56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZWExNzFjZWYxOThjZjM3MWEyZjZkOTE4MmJjNDRhMWE1NDllNTY=", "commit": {"author": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2019-06-12T11:28:29Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-06-12T11:28:29Z"}, "message": "Improve handling of unicode characters (#3618)", "tree": {"sha": "b448495828778c6490f1490e693ed630441966ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b448495828778c6490f1490e693ed630441966ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cea171cef198cf371a2f6d9182bc44a1a549e56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cea171cef198cf371a2f6d9182bc44a1a549e56", "html_url": "https://github.com/rust-lang/rust/commit/1cea171cef198cf371a2f6d9182bc44a1a549e56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cea171cef198cf371a2f6d9182bc44a1a549e56/comments", "author": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04add0cd38197c25404ea2f7d3be104c92b8cad8", "url": "https://api.github.com/repos/rust-lang/rust/commits/04add0cd38197c25404ea2f7d3be104c92b8cad8", "html_url": "https://github.com/rust-lang/rust/commit/04add0cd38197c25404ea2f7d3be104c92b8cad8"}], "stats": {"total": 58, "additions": 55, "deletions": 3}, "files": [{"sha": "6cac55c6e869732da7219ef03918aa714b168454", "filename": "src/chains.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1cea171cef198cf371a2f6d9182bc44a1a549e56/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cea171cef198cf371a2f6d9182bc44a1a549e56/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=1cea171cef198cf371a2f6d9182bc44a1a549e56", "patch": "@@ -557,7 +557,10 @@ impl<'a> ChainFormatterShared<'a> {\n         let almost_total = if extendable {\n             prev_last_line_width\n         } else {\n-            self.rewrites.iter().map(String::len).sum()\n+            self.rewrites\n+                .iter()\n+                .map(|rw| utils::unicode_str_width(&rw))\n+                .sum()\n         } + last.tries;\n         let one_line_budget = if self.child_count == 1 {\n             shape.width"}, {"sha": "b1ba99ba6e56f394598e58db355cba71d8b253d3", "filename": "src/expr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1cea171cef198cf371a2f6d9182bc44a1a549e56/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cea171cef198cf371a2f6d9182bc44a1a549e56/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=1cea171cef198cf371a2f6d9182bc44a1a549e56", "patch": "@@ -33,7 +33,7 @@ use crate::types::{rewrite_path, PathContext};\n use crate::utils::{\n     colon_spaces, contains_skip, count_newlines, first_line_ends_with, inner_attributes,\n     last_line_extendable, last_line_width, mk_sp, outer_attributes, ptr_vec_to_ref_vec,\n-    semicolon_for_expr, semicolon_for_stmt, wrap_str,\n+    semicolon_for_expr, semicolon_for_stmt, unicode_str_width, wrap_str,\n };\n use crate::vertical::rewrite_with_alignment;\n use crate::visitor::FmtVisitor;\n@@ -1973,7 +1973,9 @@ fn choose_rhs<R: Rewrite>(\n     rhs_tactics: RhsTactics,\n ) -> Option<String> {\n     match orig_rhs {\n-        Some(ref new_str) if !new_str.contains('\\n') && new_str.len() <= shape.width => {\n+        Some(ref new_str)\n+            if !new_str.contains('\\n') && unicode_str_width(new_str) <= shape.width =>\n+        {\n             Some(format!(\" {}\", new_str))\n         }\n         _ => {"}, {"sha": "8b46a437190dbfe3e07ac9ed776a239bd4f5be36", "filename": "tests/source/unicode.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1cea171cef198cf371a2f6d9182bc44a1a549e56/tests%2Fsource%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cea171cef198cf371a2f6d9182bc44a1a549e56/tests%2Fsource%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Funicode.rs?ref=1cea171cef198cf371a2f6d9182bc44a1a549e56", "patch": "@@ -0,0 +1,25 @@\n+// rustfmt-wrap_comments: true\n+\n+fn foo() {\n+    let s = \"this line goes to 100: \u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\";\n+    let s     =     42;\n+\n+    // a comment of length 80, with the starting sigil: \u0498\u0498\u0498\u0498\u0498\u0498\u0498\u0498\u0498\u0498 \u0498\u0498\u0498\u0498\u0498\u0498\u0498\u0498\u0498\u0498\u0498\u0498\u0498\u0498\n+    let s     =     42;\n+}\n+\n+pub fn bar(config: &Config) {\n+    let csv = RefCell::new(create_csv(config, \"foo\"));\n+    {\n+        let mut csv = csv.borrow_mut();\n+        for (i1, i2, i3) in iproduct!(0..2, 0..3, 0..3) {\n+            csv.write_field(format!(\"\u03b3[{}.{}.{}]\", i1, i2, i3))\n+                .unwrap();\n+            csv.write_field(format!(\"d[{}.{}.{}]\", i1, i2, i3))\n+                .unwrap();\n+            csv.write_field(format!(\"i[{}.{}.{}]\", i1, i2, i3))\n+                .unwrap();\n+        }\n+        csv.write_record(None::<&[u8]>).unwrap();\n+    }\n+}"}, {"sha": "00fb59d13dbb784101e349c483606b98f35b126b", "filename": "tests/target/unicode.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1cea171cef198cf371a2f6d9182bc44a1a549e56/tests%2Ftarget%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cea171cef198cf371a2f6d9182bc44a1a549e56/tests%2Ftarget%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Funicode.rs?ref=1cea171cef198cf371a2f6d9182bc44a1a549e56", "patch": "@@ -0,0 +1,22 @@\n+// rustfmt-wrap_comments: true\n+\n+fn foo() {\n+    let s = \"this line goes to 100: \u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\u0376\";\n+    let s = 42;\n+\n+    // a comment of length 80, with the starting sigil: \u0498\u0498\u0498\u0498\u0498\u0498\u0498\u0498\u0498\u0498 \u0498\u0498\u0498\u0498\u0498\u0498\u0498\u0498\u0498\u0498\u0498\u0498\u0498\u0498\n+    let s = 42;\n+}\n+\n+pub fn bar(config: &Config) {\n+    let csv = RefCell::new(create_csv(config, \"foo\"));\n+    {\n+        let mut csv = csv.borrow_mut();\n+        for (i1, i2, i3) in iproduct!(0..2, 0..3, 0..3) {\n+            csv.write_field(format!(\"\u03b3[{}.{}.{}]\", i1, i2, i3)).unwrap();\n+            csv.write_field(format!(\"d[{}.{}.{}]\", i1, i2, i3)).unwrap();\n+            csv.write_field(format!(\"i[{}.{}.{}]\", i1, i2, i3)).unwrap();\n+        }\n+        csv.write_record(None::<&[u8]>).unwrap();\n+    }\n+}"}]}