{"sha": "5ec118383b39f00589dc72d01a0f510c1ed0511f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlYzExODM4M2IzOWYwMDU4OWRjNzJkMDFhMGY1MTBjMWVkMDUxMWY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-20T12:22:45Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-20T12:29:57Z"}, "message": "rustc: avoid compiler generated `unsafe` blocks leaking.\n\nPreviously an `unsafe` block created by the compiler (like those in the\nformatting macros) would be \"ignored\" if surrounded by `unsafe`, that\nis, the internal unsafety would be being legitimised by the external\nblock:\n\n    unsafe { println!(\"...\") } =(expansion)=> unsafe { ... unsafe { ... } }\n\nAnd the code in the inner block would be using the outer block, making\nit considered used (and the inner one considered unused).\n\nThis patch forces the compiler to create a new unsafe context for\ncompiler generated blocks, so that their internal unsafety doesn't\nescape to external blocks.\n\nFixes #12418.", "tree": {"sha": "fab65b654aad77c9601f05e3d6c4359af54cc5d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fab65b654aad77c9601f05e3d6c4359af54cc5d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ec118383b39f00589dc72d01a0f510c1ed0511f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ec118383b39f00589dc72d01a0f510c1ed0511f", "html_url": "https://github.com/rust-lang/rust/commit/5ec118383b39f00589dc72d01a0f510c1ed0511f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ec118383b39f00589dc72d01a0f510c1ed0511f/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4afcf44d2c70b2c176bdf283082a7bdd4be5826", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4afcf44d2c70b2c176bdf283082a7bdd4be5826", "html_url": "https://github.com/rust-lang/rust/commit/c4afcf44d2c70b2c176bdf283082a7bdd4be5826"}], "stats": {"total": 94, "additions": 59, "deletions": 35}, "files": [{"sha": "9f239098e81ba06391666e5d44911bada900e7c1", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5ec118383b39f00589dc72d01a0f510c1ed0511f/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ec118383b39f00589dc72d01a0f510c1ed0511f/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=5ec118383b39f00589dc72d01a0f510c1ed0511f", "patch": "@@ -106,11 +106,28 @@ impl Visitor<()> for EffectCheckVisitor {\n \n     fn visit_block(&mut self, block: &ast::Block, _:()) {\n         let old_unsafe_context = self.unsafe_context;\n-        let is_unsafe = match block.rules {\n-            ast::UnsafeBlock(..) => true, ast::DefaultBlock => false\n-        };\n-        if is_unsafe && self.unsafe_context == SafeContext {\n-            self.unsafe_context = UnsafeBlock(block.id)\n+        match block.rules {\n+            ast::DefaultBlock => {}\n+            ast::UnsafeBlock(source) => {\n+                // By default only the outermost `unsafe` block is\n+                // \"used\" and so nested unsafe blocks are pointless\n+                // (the inner ones are unnecessary and we actually\n+                // warn about them). As such, there are two cases when\n+                // we need to create a new context, when we're\n+                // - outside `unsafe` and found a `unsafe` block\n+                //   (normal case)\n+                // - inside `unsafe` but found an `unsafe` block\n+                //   created internally to the compiler\n+                //\n+                // The second case is necessary to ensure that the\n+                // compiler `unsafe` blocks don't accidentally \"use\"\n+                // external blocks (e.g. `unsafe { println(\"\") }`,\n+                // expands to `unsafe { ... unsafe { ... } }` where\n+                // the inner one is compiler generated).\n+                if self.unsafe_context == SafeContext || source == ast::CompilerGenerated {\n+                    self.unsafe_context = UnsafeBlock(block.id)\n+                }\n+            }\n         }\n \n         visit::walk_block(self, block, ());"}, {"sha": "daa58cc8ae2b585ae121bfc42ae05a13c68d720c", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5ec118383b39f00589dc72d01a0f510c1ed0511f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ec118383b39f00589dc72d01a0f510c1ed0511f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=5ec118383b39f00589dc72d01a0f510c1ed0511f", "patch": "@@ -924,11 +924,9 @@ pub fn invoke<'a>(\n     }\n \n     if need_invoke(bcx) {\n-        unsafe {\n-            debug!(\"invoking {} at {}\", llfn, bcx.llbb);\n-            for &llarg in llargs.iter() {\n-                debug!(\"arg: {}\", llarg);\n-            }\n+        debug!(\"invoking {} at {}\", llfn, bcx.llbb);\n+        for &llarg in llargs.iter() {\n+            debug!(\"arg: {}\", llarg);\n         }\n         let normal_bcx = bcx.fcx.new_temp_block(\"normal-return\");\n         let landing_pad = bcx.fcx.get_landing_pad();\n@@ -946,11 +944,9 @@ pub fn invoke<'a>(\n                               attributes);\n         return (llresult, normal_bcx);\n     } else {\n-        unsafe {\n-            debug!(\"calling {} at {}\", llfn, bcx.llbb);\n-            for &llarg in llargs.iter() {\n-                debug!(\"arg: {}\", llarg);\n-            }\n+        debug!(\"calling {} at {}\", llfn, bcx.llbb);\n+        for &llarg in llargs.iter() {\n+            debug!(\"arg: {}\", llarg);\n         }\n \n         match call_info {"}, {"sha": "0d6efc3a5f95e9ddb911fc41209367d9d540274f", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ec118383b39f00589dc72d01a0f510c1ed0511f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ec118383b39f00589dc72d01a0f510c1ed0511f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=5ec118383b39f00589dc72d01a0f510c1ed0511f", "patch": "@@ -992,9 +992,7 @@ impl RegionScope for infer::InferCtxt {\n \n impl FnCtxt {\n     pub fn tag(&self) -> ~str {\n-        unsafe {\n-            format!(\"{}\", self as *FnCtxt)\n-        }\n+        format!(\"{}\", self as *FnCtxt)\n     }\n \n     pub fn local_ty(&self, span: Span, nid: ast::NodeId) -> ty::t {"}, {"sha": "444f2d14dba20f976e573f790af3477f6cdd5e93", "filename": "src/libstd/comm/shared.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5ec118383b39f00589dc72d01a0f510c1ed0511f/src%2Flibstd%2Fcomm%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ec118383b39f00589dc72d01a0f510c1ed0511f/src%2Flibstd%2Fcomm%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fshared.rs?ref=5ec118383b39f00589dc72d01a0f510c1ed0511f", "patch": "@@ -486,14 +486,12 @@ impl<T: Send> Packet<T> {\n #[unsafe_destructor]\n impl<T: Send> Drop for Packet<T> {\n     fn drop(&mut self) {\n-        unsafe {\n-            // Note that this load is not only an assert for correctness about\n-            // disconnection, but also a proper fence before the read of\n-            // `to_wake`, so this assert cannot be removed with also removing\n-            // the `to_wake` assert.\n-            assert_eq!(self.cnt.load(atomics::SeqCst), DISCONNECTED);\n-            assert_eq!(self.to_wake.load(atomics::SeqCst), 0);\n-            assert_eq!(self.channels.load(atomics::SeqCst), 0);\n-        }\n+        // Note that this load is not only an assert for correctness about\n+        // disconnection, but also a proper fence before the read of\n+        // `to_wake`, so this assert cannot be removed with also removing\n+        // the `to_wake` assert.\n+        assert_eq!(self.cnt.load(atomics::SeqCst), DISCONNECTED);\n+        assert_eq!(self.to_wake.load(atomics::SeqCst), 0);\n+        assert_eq!(self.channels.load(atomics::SeqCst), 0);\n     }\n }"}, {"sha": "4eac22b813dbefb2a0048300befbfb7ec9c1a13c", "filename": "src/libstd/comm/stream.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5ec118383b39f00589dc72d01a0f510c1ed0511f/src%2Flibstd%2Fcomm%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ec118383b39f00589dc72d01a0f510c1ed0511f/src%2Flibstd%2Fcomm%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fstream.rs?ref=5ec118383b39f00589dc72d01a0f510c1ed0511f", "patch": "@@ -471,13 +471,11 @@ impl<T: Send> Packet<T> {\n #[unsafe_destructor]\n impl<T: Send> Drop for Packet<T> {\n     fn drop(&mut self) {\n-        unsafe {\n-            // Note that this load is not only an assert for correctness about\n-            // disconnection, but also a proper fence before the read of\n-            // `to_wake`, so this assert cannot be removed with also removing\n-            // the `to_wake` assert.\n-            assert_eq!(self.cnt.load(atomics::SeqCst), DISCONNECTED);\n-            assert_eq!(self.to_wake.load(atomics::SeqCst), 0);\n-        }\n+        // Note that this load is not only an assert for correctness about\n+        // disconnection, but also a proper fence before the read of\n+        // `to_wake`, so this assert cannot be removed with also removing\n+        // the `to_wake` assert.\n+        assert_eq!(self.cnt.load(atomics::SeqCst), DISCONNECTED);\n+        assert_eq!(self.to_wake.load(atomics::SeqCst), 0);\n     }\n }"}, {"sha": "2aefdd213bbc50ddef0dbe994797068bf3310986", "filename": "src/test/compile-fail/unsafe-around-compiler-generated-unsafe.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5ec118383b39f00589dc72d01a0f510c1ed0511f/src%2Ftest%2Fcompile-fail%2Funsafe-around-compiler-generated-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ec118383b39f00589dc72d01a0f510c1ed0511f/src%2Ftest%2Fcompile-fail%2Funsafe-around-compiler-generated-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-around-compiler-generated-unsafe.rs?ref=5ec118383b39f00589dc72d01a0f510c1ed0511f", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// issue #12418\n+\n+#[deny(unused_unsafe)];\n+\n+fn main() {\n+    unsafe { println!(\"foo\"); } //~ ERROR unnecessary `unsafe`\n+}"}]}