{"sha": "f854f8b366c8243ef096f1dcc0e7a9a8f9f05992", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NTRmOGIzNjZjODI0M2VmMDk2ZjFkY2MwZTdhOWE4ZjlmMDU5OTI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-05-31T12:53:39Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-05-31T12:53:39Z"}, "message": "Build DefPathHash->DefId table when incr.comp. is enabled", "tree": {"sha": "58c43e66f20a50bbe016b1689b40caa8227df41b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58c43e66f20a50bbe016b1689b40caa8227df41b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f854f8b366c8243ef096f1dcc0e7a9a8f9f05992", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f854f8b366c8243ef096f1dcc0e7a9a8f9f05992", "html_url": "https://github.com/rust-lang/rust/commit/f854f8b366c8243ef096f1dcc0e7a9a8f9f05992", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f854f8b366c8243ef096f1dcc0e7a9a8f9f05992/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59ebe8e1155720d56cfde1890fc2f6b9bdb33243", "url": "https://api.github.com/repos/rust-lang/rust/commits/59ebe8e1155720d56cfde1890fc2f6b9bdb33243", "html_url": "https://github.com/rust-lang/rust/commit/59ebe8e1155720d56cfde1890fc2f6b9bdb33243"}], "stats": {"total": 81, "additions": 77, "deletions": 4}, "files": [{"sha": "745af53e7a3bf9a3872233392d3f01e2caa1f91e", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f854f8b366c8243ef096f1dcc0e7a9a8f9f05992/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f854f8b366c8243ef096f1dcc0e7a9a8f9f05992/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=f854f8b366c8243ef096f1dcc0e7a9a8f9f05992", "patch": "@@ -126,6 +126,30 @@ impl DefPathTable {\n \n         Some(index)\n     }\n+\n+    pub fn add_def_path_hashes_to(&self,\n+                                  cnum: CrateNum,\n+                                  out: &mut FxHashMap<DefPathHash, DefId>) {\n+        for address_space in &[DefIndexAddressSpace::Low, DefIndexAddressSpace::High] {\n+            let start_index = address_space.start();\n+            out.extend(\n+                (&self.def_path_hashes[address_space.index()])\n+                    .iter()\n+                    .enumerate()\n+                    .map(|(index, &hash)| {\n+                        let def_id = DefId {\n+                            krate: cnum,\n+                            index: DefIndex::new(index + start_index),\n+                        };\n+                        (hash, def_id)\n+                    })\n+            );\n+        }\n+    }\n+\n+    pub fn size(&self) -> usize {\n+        self.key_to_index.len()\n+    }\n }\n \n "}, {"sha": "71b066c6688b583e0b26c9121e9c384cba600c4c", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f854f8b366c8243ef096f1dcc0e7a9a8f9f05992/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f854f8b366c8243ef096f1dcc0e7a9a8f9f05992/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=f854f8b366c8243ef096f1dcc0e7a9a8f9f05992", "patch": "@@ -26,7 +26,8 @@ use hir::def;\n use dep_graph::DepNode;\n use hir::def_id::{CrateNum, DefId, DefIndex};\n use hir::map as hir_map;\n-use hir::map::definitions::{Definitions, DefKey, DisambiguatedDefPathData};\n+use hir::map::definitions::{Definitions, DefKey, DisambiguatedDefPathData,\n+                            DefPathTable};\n use hir::svh::Svh;\n use ich;\n use middle::lang_items;\n@@ -282,6 +283,7 @@ pub trait CrateStore {\n     fn def_key(&self, def: DefId) -> DefKey;\n     fn def_path(&self, def: DefId) -> hir_map::DefPath;\n     fn def_path_hash(&self, def: DefId) -> hir_map::DefPathHash;\n+    fn def_path_table(&self, cnum: CrateNum) -> Rc<DefPathTable>;\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name>;\n     fn item_children(&self, did: DefId) -> Vec<def::Export>;\n     fn load_macro(&self, did: DefId, sess: &Session) -> LoadedMacro;\n@@ -415,6 +417,9 @@ impl CrateStore for DummyCrateStore {\n     fn def_path_hash(&self, def: DefId) -> hir_map::DefPathHash {\n         bug!(\"def_path_hash\")\n     }\n+    fn def_path_table(&self, cnum: CrateNum) -> Rc<DefPathTable> {\n+        bug!(\"def_path_table\")\n+    }\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name> { bug!(\"struct_field_names\") }\n     fn item_children(&self, did: DefId) -> Vec<def::Export> { bug!(\"item_children\") }\n     fn load_macro(&self, did: DefId, sess: &Session) -> LoadedMacro { bug!(\"load_macro\") }"}, {"sha": "17e0657139437728c4bddf9c1411eb0be2379856", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f854f8b366c8243ef096f1dcc0e7a9a8f9f05992/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f854f8b366c8243ef096f1dcc0e7a9a8f9f05992/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=f854f8b366c8243ef096f1dcc0e7a9a8f9f05992", "patch": "@@ -18,7 +18,7 @@ use hir::TraitMap;\n use hir::def::{Def, ExportMap};\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use hir::map as hir_map;\n-use hir::map::DisambiguatedDefPathData;\n+use hir::map::{DisambiguatedDefPathData, DefPathHash};\n use middle::free_region::FreeRegionMap;\n use middle::lang_items;\n use middle::resolve_lifetime;\n@@ -448,6 +448,10 @@ pub struct GlobalCtxt<'tcx> {\n \n     pub hir: hir_map::Map<'tcx>,\n \n+    /// A map from DefPathHash -> DefId. Includes DefIds from the local crate\n+    /// as well as all upstream crates. Only populated in incremental mode.\n+    pub def_path_hash_to_def_id: Option<FxHashMap<DefPathHash, DefId>>,\n+\n     pub maps: maps::Maps<'tcx>,\n \n     pub mir_passes: Rc<Passes>,\n@@ -676,6 +680,40 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         let max_cnum = s.cstore.crates().iter().map(|c| c.as_usize()).max().unwrap_or(0);\n         let mut providers = IndexVec::from_elem_n(extern_providers, max_cnum + 1);\n         providers[LOCAL_CRATE] = local_providers;\n+\n+        let def_path_hash_to_def_id = if s.opts.build_dep_graph() {\n+            let upstream_def_path_tables: Vec<(CrateNum, Rc<_>)> = s\n+                .cstore\n+                .crates()\n+                .iter()\n+                .map(|&cnum| (cnum, s.cstore.def_path_table(cnum)))\n+                .collect();\n+\n+            let def_path_tables = || {\n+                upstream_def_path_tables\n+                    .iter()\n+                    .map(|&(cnum, ref rc)| (cnum, &**rc))\n+                    .chain(iter::once((LOCAL_CRATE, hir.definitions().def_path_table())))\n+            };\n+\n+            // Precompute the capacity of the hashmap so we don't have to\n+            // re-allocate when populating it.\n+            let capacity = def_path_tables().map(|(_, t)| t.size()).sum::<usize>();\n+\n+            let mut map: FxHashMap<_, _> = FxHashMap::with_capacity_and_hasher(\n+                capacity,\n+                ::std::default::Default::default()\n+            );\n+\n+            for (cnum, def_path_table) in def_path_tables() {\n+                def_path_table.add_def_path_hashes_to(cnum, &mut map);\n+            }\n+\n+            Some(map)\n+        } else {\n+            None\n+        };\n+\n         tls::enter_global(GlobalCtxt {\n             sess: s,\n             trans_trait_caches: traits::trans::TransTraitCaches::new(dep_graph.clone()),\n@@ -689,6 +727,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             export_map: resolutions.export_map,\n             fulfilled_predicates: RefCell::new(fulfilled_predicates),\n             hir: hir,\n+            def_path_hash_to_def_id: def_path_hash_to_def_id,\n             maps: maps::Maps::new(providers),\n             mir_passes,\n             freevars: RefCell::new(resolutions.freevars),"}, {"sha": "51f152991fdaf54974792026ea147e32c382a6fa", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f854f8b366c8243ef096f1dcc0e7a9a8f9f05992/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f854f8b366c8243ef096f1dcc0e7a9a8f9f05992/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=f854f8b366c8243ef096f1dcc0e7a9a8f9f05992", "patch": "@@ -326,7 +326,7 @@ impl<'a> CrateLoader<'a> {\n         let mut cmeta = cstore::CrateMetadata {\n             name: name,\n             extern_crate: Cell::new(None),\n-            def_path_table: def_path_table,\n+            def_path_table: Rc::new(def_path_table),\n             exported_symbols: exported_symbols,\n             trait_impls: trait_impls,\n             proc_macros: crate_root.macro_derive_registrar.map(|_| {"}, {"sha": "5066b927c11526214029b6f3667c5cedb3a67c53", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f854f8b366c8243ef096f1dcc0e7a9a8f9f05992/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f854f8b366c8243ef096f1dcc0e7a9a8f9f05992/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=f854f8b366c8243ef096f1dcc0e7a9a8f9f05992", "patch": "@@ -76,7 +76,7 @@ pub struct CrateMetadata {\n     /// hashmap, which gives the reverse mapping.  This allows us to\n     /// quickly retrace a `DefPath`, which is needed for incremental\n     /// compilation support.\n-    pub def_path_table: DefPathTable,\n+    pub def_path_table: Rc<DefPathTable>,\n \n     pub exported_symbols: Tracked<FxHashSet<DefIndex>>,\n "}, {"sha": "dcc55846b53d8421f334dabb3afc039d76fccfb2", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f854f8b366c8243ef096f1dcc0e7a9a8f9f05992/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f854f8b366c8243ef096f1dcc0e7a9a8f9f05992/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=f854f8b366c8243ef096f1dcc0e7a9a8f9f05992", "patch": "@@ -25,6 +25,7 @@ use rustc::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE\n \n use rustc::dep_graph::{DepNode, GlobalMetaDataKind};\n use rustc::hir::map::{DefKey, DefPath, DisambiguatedDefPathData, DefPathHash};\n+use rustc::hir::map::definitions::DefPathTable;\n use rustc::util::nodemap::{NodeSet, DefIdMap};\n use rustc_back::PanicStrategy;\n \n@@ -337,6 +338,10 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(def.krate).def_path_hash(def.index)\n     }\n \n+    fn def_path_table(&self, cnum: CrateNum) -> Rc<DefPathTable> {\n+        self.get_crate_data(cnum).def_path_table.clone()\n+    }\n+\n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name>\n     {\n         self.dep_graph.read(DepNode::MetaData(def));"}]}