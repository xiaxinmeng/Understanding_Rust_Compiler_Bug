{"sha": "1336b8e8c7417fdde5384119a588a11ef0818cf3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMzZiOGU4Yzc0MTdmZGRlNTM4NDExOWE1ODhhMTFlZjA4MThjZjM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-01-08T15:55:18Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-01-10T22:04:19Z"}, "message": "integrate trait aliases into def-paths / metadata\n\nCo-authored-by: Alexander Regueiro <alexreg@me.com>", "tree": {"sha": "8b357440cee22e15f1ef273257d5ce6b4a7d440a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b357440cee22e15f1ef273257d5ce6b4a7d440a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1336b8e8c7417fdde5384119a588a11ef0818cf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1336b8e8c7417fdde5384119a588a11ef0818cf3", "html_url": "https://github.com/rust-lang/rust/commit/1336b8e8c7417fdde5384119a588a11ef0818cf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1336b8e8c7417fdde5384119a588a11ef0818cf3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "430553bc7766ecdbdb04113ef0137e6174e0dba2", "url": "https://api.github.com/repos/rust-lang/rust/commits/430553bc7766ecdbdb04113ef0137e6174e0dba2", "html_url": "https://github.com/rust-lang/rust/commit/430553bc7766ecdbdb04113ef0137e6174e0dba2"}], "stats": {"total": 121, "additions": 82, "deletions": 39}, "files": [{"sha": "c9b4b2bb997178184d8a5dc8eaa5f2620f103cab", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1336b8e8c7417fdde5384119a588a11ef0818cf3/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1336b8e8c7417fdde5384119a588a11ef0818cf3/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=1336b8e8c7417fdde5384119a588a11ef0818cf3", "patch": "@@ -120,10 +120,10 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         let def_data = match i.node {\n             ItemKind::Impl(..) => DefPathData::Impl,\n             ItemKind::Trait(..) => DefPathData::Trait(i.ident.as_interned_str()),\n+            ItemKind::TraitAlias(..) => DefPathData::TraitAlias(i.ident.as_interned_str()),\n             ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Union(..) |\n-            ItemKind::TraitAlias(..) | ItemKind::Existential(..) |\n-            ItemKind::ExternCrate(..) | ItemKind::ForeignMod(..) | ItemKind::Ty(..) =>\n-                DefPathData::TypeNs(i.ident.as_interned_str()),\n+            ItemKind::Existential(..) | ItemKind::ExternCrate(..) | ItemKind::ForeignMod(..) |\n+            ItemKind::Ty(..) => DefPathData::TypeNs(i.ident.as_interned_str()),\n             ItemKind::Mod(..) if i.ident == keywords::Invalid.ident() => {\n                 return visit::walk_item(self, i);\n             }"}, {"sha": "1b7445199475c4ccaf215afc2336fad9681148c9", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1336b8e8c7417fdde5384119a588a11ef0818cf3/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1336b8e8c7417fdde5384119a588a11ef0818cf3/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=1336b8e8c7417fdde5384119a588a11ef0818cf3", "patch": "@@ -373,7 +373,9 @@ pub enum DefPathData {\n     /// GlobalMetaData identifies a piece of crate metadata that is global to\n     /// a whole crate (as opposed to just one item). GlobalMetaData components\n     /// are only supposed to show up right below the crate root.\n-    GlobalMetaData(InternedString)\n+    GlobalMetaData(InternedString),\n+    /// A trait alias.\n+    TraitAlias(InternedString),\n }\n \n #[derive(Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord, Debug,\n@@ -615,6 +617,7 @@ impl DefPathData {\n         match *self {\n             TypeNs(name) |\n             Trait(name) |\n+            TraitAlias(name) |\n             AssocTypeInTrait(name) |\n             AssocTypeInImpl(name) |\n             AssocExistentialInImpl(name) |\n@@ -642,6 +645,7 @@ impl DefPathData {\n         let s = match *self {\n             TypeNs(name) |\n             Trait(name) |\n+            TraitAlias(name) |\n             AssocTypeInTrait(name) |\n             AssocTypeInImpl(name) |\n             AssocExistentialInImpl(name) |"}, {"sha": "4d478365e727601c252f9a564ee0dac87c415751", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1336b8e8c7417fdde5384119a588a11ef0818cf3/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1336b8e8c7417fdde5384119a588a11ef0818cf3/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=1336b8e8c7417fdde5384119a588a11ef0818cf3", "patch": "@@ -2154,7 +2154,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n \n         let def_id = obligation.predicate.def_id();\n \n-        if ty::is_trait_alias(self.tcx(), def_id) {\n+        if self.tcx().is_trait_alias(def_id) {\n             candidates.vec.push(TraitAliasCandidate(def_id.clone()));\n         }\n "}, {"sha": "9328de4f6a0a15347913a486a3875852f9297b3c", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1336b8e8c7417fdde5384119a588a11ef0818cf3/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1336b8e8c7417fdde5384119a588a11ef0818cf3/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=1336b8e8c7417fdde5384119a588a11ef0818cf3", "patch": "@@ -311,6 +311,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             data @ DefPathData::Misc |\n             data @ DefPathData::TypeNs(..) |\n             data @ DefPathData::Trait(..) |\n+            data @ DefPathData::TraitAlias(..) |\n             data @ DefPathData::AssocTypeInTrait(..) |\n             data @ DefPathData::AssocTypeInImpl(..) |\n             data @ DefPathData::AssocExistentialInImpl(..) |"}, {"sha": "e2f696b0974a791b153f90dc798815622027486e", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1336b8e8c7417fdde5384119a588a11ef0818cf3/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1336b8e8c7417fdde5384119a588a11ef0818cf3/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=1336b8e8c7417fdde5384119a588a11ef0818cf3", "patch": "@@ -3178,18 +3178,6 @@ pub fn is_impl_trait_defn(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Option<DefI\n     None\n }\n \n-/// Returns `true` if `def_id` is a trait alias.\n-pub fn is_trait_alias(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> bool {\n-    if let Some(node_id) = tcx.hir().as_local_node_id(def_id) {\n-        if let Node::Item(item) = tcx.hir().get(node_id) {\n-            if let hir::ItemKind::TraitAlias(..) = item.node {\n-                return true;\n-            }\n-        }\n-    }\n-    false\n-}\n-\n /// See `ParamEnv` struct definition for details.\n fn param_env<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                        def_id: DefId)"}, {"sha": "75fc0f716a2f6424319dc91d720bd0f3354a9a87", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1336b8e8c7417fdde5384119a588a11ef0818cf3/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1336b8e8c7417fdde5384119a588a11ef0818cf3/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=1336b8e8c7417fdde5384119a588a11ef0818cf3", "patch": "@@ -526,6 +526,15 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    /// True if `def_id` refers to a trait alias (i.e., `trait Foo = ...;`).\n+    pub fn is_trait_alias(self, def_id: DefId) -> bool {\n+        if let DefPathData::TraitAlias(_) = self.def_key(def_id).disambiguated_data.data {\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+\n     /// True if this def-id refers to the implicit constructor for\n     /// a tuple struct like `struct Foo(u32)`.\n     pub fn is_struct_constructor(self, def_id: DefId) -> bool {"}, {"sha": "51e9192cd290d107d0f7d1f1ab12c2469b8f04a1", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1336b8e8c7417fdde5384119a588a11ef0818cf3/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1336b8e8c7417fdde5384119a588a11ef0818cf3/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=1336b8e8c7417fdde5384119a588a11ef0818cf3", "patch": "@@ -409,6 +409,7 @@ impl PrintContext {\n                     DefPathData::AssocTypeInImpl(_) |\n                     DefPathData::AssocExistentialInImpl(_) |\n                     DefPathData::Trait(_) |\n+                    DefPathData::TraitAlias(_) |\n                     DefPathData::Impl |\n                     DefPathData::TypeNs(_) => {\n                         break;"}, {"sha": "1f07e8f478b5a05ef9803711aa6cf5fd6081b198", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 30, "deletions": 16, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1336b8e8c7417fdde5384119a588a11ef0818cf3/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1336b8e8c7417fdde5384119a588a11ef0818cf3/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=1336b8e8c7417fdde5384119a588a11ef0818cf3", "patch": "@@ -418,6 +418,7 @@ impl<'tcx> EntryKind<'tcx> {\n             EntryKind::Mod(_) => Def::Mod(did),\n             EntryKind::Variant(_) => Def::Variant(did),\n             EntryKind::Trait(_) => Def::Trait(did),\n+            EntryKind::TraitAlias(_) => Def::TraitAlias(did),\n             EntryKind::Enum(..) => Def::Enum(did),\n             EntryKind::MacroDef(_) => Def::Macro(did, MacroKind::Bang),\n             EntryKind::ForeignType => Def::ForeignTy(did),\n@@ -520,17 +521,26 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     pub fn get_trait_def(&self, item_id: DefIndex, sess: &Session) -> ty::TraitDef {\n-        let data = match self.entry(item_id).kind {\n-            EntryKind::Trait(data) => data.decode((self, sess)),\n-            _ => bug!(),\n-        };\n-\n-        ty::TraitDef::new(self.local_def_id(item_id),\n-                          data.unsafety,\n-                          data.paren_sugar,\n-                          data.has_auto_impl,\n-                          data.is_marker,\n-                          self.def_path_table.def_path_hash(item_id))\n+        match self.entry(item_id).kind {\n+            EntryKind::Trait(data) => {\n+                let data = data.decode((self, sess));\n+                ty::TraitDef::new(self.local_def_id(item_id),\n+                                  data.unsafety,\n+                                  data.paren_sugar,\n+                                  data.has_auto_impl,\n+                                  data.is_marker,\n+                                  self.def_path_table.def_path_hash(item_id))\n+            },\n+            EntryKind::TraitAlias(_) => {\n+                ty::TraitDef::new(self.local_def_id(item_id),\n+                                  hir::Unsafety::Normal,\n+                                  false,\n+                                  false,\n+                                  false,\n+                                  self.def_path_table.def_path_hash(item_id))\n+            },\n+            _ => bug!(\"def-index does not refer to trait or trait alias\"),\n+        }\n     }\n \n     fn get_variant(&self,\n@@ -615,10 +625,13 @@ impl<'a, 'tcx> CrateMetadata {\n                                 item_id: DefIndex,\n                                 tcx: TyCtxt<'a, 'tcx, 'tcx>)\n                                 -> ty::GenericPredicates<'tcx> {\n-        match self.entry(item_id).kind {\n-            EntryKind::Trait(data) => data.decode(self).super_predicates.decode((self, tcx)),\n-            _ => bug!(),\n-        }\n+        let super_predicates = match self.entry(item_id).kind {\n+            EntryKind::Trait(data) => data.decode(self).super_predicates,\n+            EntryKind::TraitAlias(data) => data.decode(self).super_predicates,\n+            _ => bug!(\"def-index does not refer to trait or trait alias\"),\n+        };\n+\n+        super_predicates.decode((self, tcx))\n     }\n \n     pub fn get_generics(&self,\n@@ -1014,7 +1027,8 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n         def_key.parent.and_then(|parent_index| {\n             match self.entry(parent_index).kind {\n-                EntryKind::Trait(_) => Some(self.local_def_id(parent_index)),\n+                EntryKind::Trait(_) |\n+                EntryKind::TraitAlias(_) => Some(self.local_def_id(parent_index)),\n                 _ => None,\n             }\n         })"}, {"sha": "2522469086f67192355302c496e97366b682f424", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1336b8e8c7417fdde5384119a588a11ef0818cf3/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1336b8e8c7417fdde5384119a588a11ef0818cf3/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=1336b8e8c7417fdde5384119a588a11ef0818cf3", "patch": "@@ -1131,8 +1131,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n \n                 EntryKind::Impl(self.lazy(&data))\n             }\n-            hir::ItemKind::Trait(..) |\n-            hir::ItemKind::TraitAlias(..) => {\n+            hir::ItemKind::Trait(..) => {\n                 let trait_def = tcx.trait_def(def_id);\n                 let data = TraitData {\n                     unsafety: trait_def.unsafety,\n@@ -1144,6 +1143,13 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n \n                 EntryKind::Trait(self.lazy(&data))\n             }\n+            hir::ItemKind::TraitAlias(..) => {\n+                let data = TraitAliasData {\n+                    super_predicates: self.lazy(&tcx.super_predicates_of(def_id)),\n+                };\n+\n+                EntryKind::TraitAlias(self.lazy(&data))\n+            }\n             hir::ItemKind::ExternCrate(_) |\n             hir::ItemKind::Use(..) => bug!(\"cannot encode info for item {:?}\", item),\n         };\n@@ -1217,6 +1223,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                 hir::ItemKind::Impl(..) |\n                 hir::ItemKind::Existential(..) |\n                 hir::ItemKind::Trait(..) => Some(self.encode_generics(def_id)),\n+                hir::ItemKind::TraitAlias(..) => Some(self.encode_generics(def_id)),\n                 _ => None,\n             },\n             predicates: match item.node {\n@@ -1229,7 +1236,8 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                 hir::ItemKind::Union(..) |\n                 hir::ItemKind::Impl(..) |\n                 hir::ItemKind::Existential(..) |\n-                hir::ItemKind::Trait(..) => Some(self.encode_predicates(def_id)),\n+                hir::ItemKind::Trait(..) |\n+                hir::ItemKind::TraitAlias(..) => Some(self.encode_predicates(def_id)),\n                 _ => None,\n             },\n \n@@ -1239,7 +1247,8 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             // hack. (No reason not to expand it in the future if\n             // necessary.)\n             predicates_defined_on: match item.node {\n-                hir::ItemKind::Trait(..) => Some(self.encode_predicates_defined_on(def_id)),\n+                hir::ItemKind::Trait(..) |\n+                hir::ItemKind::TraitAlias(..) => Some(self.encode_predicates_defined_on(def_id)),\n                 _ => None, // not *wrong* for other kinds of items, but not needed\n             },\n "}, {"sha": "f3ff9747625f5b68724701049c5f6a660f347869", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1336b8e8c7417fdde5384119a588a11ef0818cf3/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1336b8e8c7417fdde5384119a588a11ef0818cf3/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=1336b8e8c7417fdde5384119a588a11ef0818cf3", "patch": "@@ -316,6 +316,7 @@ pub enum EntryKind<'tcx> {\n     AssociatedType(AssociatedContainer),\n     AssociatedExistential(AssociatedContainer),\n     AssociatedConst(AssociatedContainer, ConstQualif, Lazy<RenderedConst>),\n+    TraitAlias(Lazy<TraitAliasData<'tcx>>),\n }\n \n impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for EntryKind<'gcx> {\n@@ -370,6 +371,9 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for EntryKind<'gcx> {\n             EntryKind::Trait(ref trait_data) => {\n                 trait_data.hash_stable(hcx, hasher);\n             }\n+            EntryKind::TraitAlias(ref trait_alias_data) => {\n+                trait_alias_data.hash_stable(hcx, hasher);\n+            }\n             EntryKind::Impl(ref impl_data) => {\n                 impl_data.hash_stable(hcx, hasher);\n             }\n@@ -474,6 +478,15 @@ impl_stable_hash_for!(struct TraitData<'tcx> {\n     super_predicates\n });\n \n+#[derive(RustcEncodable, RustcDecodable)]\n+pub struct TraitAliasData<'tcx> {\n+    pub super_predicates: Lazy<ty::GenericPredicates<'tcx>>,\n+}\n+\n+impl_stable_hash_for!(struct TraitAliasData<'tcx> {\n+    super_predicates\n+});\n+\n #[derive(RustcEncodable, RustcDecodable)]\n pub struct ImplData<'tcx> {\n     pub polarity: hir::ImplPolarity,"}, {"sha": "28b80fe3aaf295bce7bf660a01a5555f9a0701ac", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1336b8e8c7417fdde5384119a588a11ef0818cf3/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1336b8e8c7417fdde5384119a588a11ef0818cf3/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=1336b8e8c7417fdde5384119a588a11ef0818cf3", "patch": "@@ -673,6 +673,9 @@ impl<'a> Resolver<'a> {\n                 }\n                 module.populated.set(true);\n             }\n+            Def::TraitAlias(..) => {\n+                self.define(parent, ident, TypeNS, (def, vis, DUMMY_SP, expansion));\n+            }\n             Def::Struct(..) | Def::Union(..) => {\n                 self.define(parent, ident, TypeNS, (def, vis, DUMMY_SP, expansion));\n "}, {"sha": "9bdef3051e58934403ec63e0be1712fff71fdda2", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1336b8e8c7417fdde5384119a588a11ef0818cf3/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1336b8e8c7417fdde5384119a588a11ef0818cf3/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=1336b8e8c7417fdde5384119a588a11ef0818cf3", "patch": "@@ -158,7 +158,8 @@ crate fn program_clauses_for<'a, 'tcx>(\n     def_id: DefId,\n ) -> Clauses<'tcx> {\n     match tcx.def_key(def_id).disambiguated_data.data {\n-        DefPathData::Trait(_) => program_clauses_for_trait(tcx, def_id),\n+        DefPathData::Trait(_) |\n+        DefPathData::TraitAlias(_) => program_clauses_for_trait(tcx, def_id),\n         DefPathData::Impl => program_clauses_for_impl(tcx, def_id),\n         DefPathData::AssocTypeInImpl(..) => program_clauses_for_associated_type_value(tcx, def_id),\n         DefPathData::AssocTypeInTrait(..) => program_clauses_for_associated_type_def(tcx, def_id),"}, {"sha": "66b2443af413ab8fd6f194bbb52fff11a6aecc25", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1336b8e8c7417fdde5384119a588a11ef0818cf3/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1336b8e8c7417fdde5384119a588a11ef0818cf3/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=1336b8e8c7417fdde5384119a588a11ef0818cf3", "patch": "@@ -706,7 +706,7 @@ fn super_predicates_of<'a, 'tcx>(\n     // In the case of trait aliases, however, we include all bounds in the where clause,\n     // so e.g., `trait Foo = where u32: PartialEq<Self>` would include `u32: PartialEq<Self>`\n     // as one of its \"superpredicates\".\n-    let is_trait_alias = ty::is_trait_alias(tcx, trait_def_id);\n+    let is_trait_alias = tcx.is_trait_alias(trait_def_id);\n     let superbounds2 = icx.type_parameter_bounds_in_generics(\n         generics, item.id, self_param_ty, OnlySelfBounds(!is_trait_alias));\n "}]}