{"sha": "a183141e2d0f0af7f12946ff1a81615fa35e8099", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExODMxNDFlMmQwZjBhZjdmMTI5NDZmZjFhODE2MTVmYTM1ZTgwOTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-17T01:32:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-17T01:32:15Z"}, "message": "Auto merge of #87990 - Aaron1011:moved-src-dir, r=cjgillot\n\nInclude (potentially remapped) working dir in crate hash\n\nFixes #85019\n\nA `SourceFile` created during compilation may have a relative\npath (e.g. if rustc itself is invoked with a relative path).\nWhen we write out crate metadata, we convert all relative paths\nto absolute paths using the current working directory.\n\nHowever, the working directory is not included in the crate hash.\nThis means that the crate metadata can change while the crate\nhash remains the same. Among other problems, this can cause a\nfingerprint mismatch ICE, since incremental compilation uses\nthe crate metadata hash to determine if a foreign query is green.\n\nThis commit moves the field holding the working directory from\n`Session` to `Options`, including it as part of the crate hash.\n\ncc `@ohsayan`", "tree": {"sha": "ab56cd0306c325b7c9194dabbde513cbbd15c2da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab56cd0306c325b7c9194dabbde513cbbd15c2da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a183141e2d0f0af7f12946ff1a81615fa35e8099", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a183141e2d0f0af7f12946ff1a81615fa35e8099", "html_url": "https://github.com/rust-lang/rust/commit/a183141e2d0f0af7f12946ff1a81615fa35e8099", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a183141e2d0f0af7f12946ff1a81615fa35e8099/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e41c6201f7a3f1823b3b668da61577d89bf76d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e41c6201f7a3f1823b3b668da61577d89bf76d4", "html_url": "https://github.com/rust-lang/rust/commit/0e41c6201f7a3f1823b3b668da61577d89bf76d4"}, {"sha": "1ac7881c9f3a9fdd314695795a8f8be167261ef8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ac7881c9f3a9fdd314695795a8f8be167261ef8", "html_url": "https://github.com/rust-lang/rust/commit/1ac7881c9f3a9fdd314695795a8f8be167261ef8"}], "stats": {"total": 84, "additions": 65, "deletions": 19}, "files": [{"sha": "c471da83de2342f0151328f78206457d1252b771", "filename": "compiler/rustc_codegen_cranelift/src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a183141e2d0f0af7f12946ff1a81615fa35e8099/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a183141e2d0f0af7f12946ff1a81615fa35e8099/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=a183141e2d0f0af7f12946ff1a81615fa35e8099", "patch": "@@ -66,7 +66,7 @@ impl<'tcx> DebugContext<'tcx> {\n             rustc_interface::util::version_str().unwrap_or(\"unknown version\"),\n             cranelift_codegen::VERSION,\n         );\n-        let comp_dir = tcx.sess.working_dir.to_string_lossy(false).into_owned();\n+        let comp_dir = tcx.sess.opts.working_dir.to_string_lossy(false).into_owned();\n         let (name, file_info) = match tcx.sess.local_crate_source_file.clone() {\n             Some(path) => {\n                 let name = path.to_string_lossy().into_owned();"}, {"sha": "8ff2f1cc6520f0b41872fd53160eeb480aa4a571", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a183141e2d0f0af7f12946ff1a81615fa35e8099/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a183141e2d0f0af7f12946ff1a81615fa35e8099/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=a183141e2d0f0af7f12946ff1a81615fa35e8099", "patch": "@@ -771,7 +771,7 @@ pub fn file_metadata(cx: &CodegenCx<'ll, '_>, source_file: &SourceFile) -> &'ll\n     let hash = Some(&source_file.src_hash);\n     let file_name = Some(source_file.name.prefer_remapped().to_string());\n     let directory = if source_file.is_real_file() && !source_file.is_imported() {\n-        Some(cx.sess().working_dir.to_string_lossy(false).to_string())\n+        Some(cx.sess().opts.working_dir.to_string_lossy(false).to_string())\n     } else {\n         // If the path comes from an upstream crate we assume it has been made\n         // independent of the compiler's working directory one way or another.\n@@ -999,7 +999,7 @@ pub fn compile_unit_metadata(\n     let producer = format!(\"clang LLVM ({})\", rustc_producer);\n \n     let name_in_debuginfo = name_in_debuginfo.to_string_lossy();\n-    let work_dir = tcx.sess.working_dir.to_string_lossy(false);\n+    let work_dir = tcx.sess.opts.working_dir.to_string_lossy(false);\n     let flags = \"\\0\";\n     let output_filenames = tcx.output_filenames(());\n     let out_dir = &output_filenames.out_directory;"}, {"sha": "d9bbb03129975de9884dbf73d9ce61c174c8b60a", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a183141e2d0f0af7f12946ff1a81615fa35e8099/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a183141e2d0f0af7f12946ff1a81615fa35e8099/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=a183141e2d0f0af7f12946ff1a81615fa35e8099", "patch": "@@ -503,7 +503,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                                 // Prepend path of working directory onto potentially\n                                 // relative paths, because they could become relative\n                                 // to a wrong directory.\n-                                let working_dir = &self.tcx.sess.working_dir;\n+                                // We include `working_dir` as part of the crate hash,\n+                                // so it's okay for us to use it as part of the encoded\n+                                // metadata.\n+                                let working_dir = &self.tcx.sess.opts.working_dir;\n                                 match working_dir {\n                                     RealFileName::LocalPath(absolute) => {\n                                         // If working_dir has not been remapped, then we emit a"}, {"sha": "29068761d6d843849770cd1889ff57576628fc1c", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a183141e2d0f0af7f12946ff1a81615fa35e8099/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a183141e2d0f0af7f12946ff1a81615fa35e8099/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=a183141e2d0f0af7f12946ff1a81615fa35e8099", "patch": "@@ -185,7 +185,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n         };\n \n         let data = CompilationOptions {\n-            directory: self.tcx.sess.working_dir.remapped_path_if_available().into(),\n+            directory: self.tcx.sess.opts.working_dir.remapped_path_if_available().into(),\n             program,\n             arguments,\n             output: self.save_ctxt.compilation_output(crate_name),"}, {"sha": "8d6758f40f96522d3cbcc9ec79fad3790df563aa", "filename": "compiler/rustc_save_analysis/src/span_utils.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a183141e2d0f0af7f12946ff1a81615fa35e8099/compiler%2Frustc_save_analysis%2Fsrc%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a183141e2d0f0af7f12946ff1a81615fa35e8099/compiler%2Frustc_save_analysis%2Fsrc%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fspan_utils.rs?ref=a183141e2d0f0af7f12946ff1a81615fa35e8099", "patch": "@@ -27,6 +27,7 @@ impl<'a> SpanUtils<'a> {\n                         .to_string()\n                 } else {\n                     self.sess\n+                        .opts\n                         .working_dir\n                         .remapped_path_if_available()\n                         .join(&path)"}, {"sha": "123f47b430a170c183e1ab7fce62f750b605f8b7", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a183141e2d0f0af7f12946ff1a81615fa35e8099/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a183141e2d0f0af7f12946ff1a81615fa35e8099/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=a183141e2d0f0af7f12946ff1a81615fa35e8099", "patch": "@@ -21,6 +21,7 @@ use rustc_feature::UnstableFeatures;\n use rustc_span::edition::{Edition, DEFAULT_EDITION, EDITION_NAME_LIST, LATEST_STABLE_EDITION};\n use rustc_span::source_map::{FileName, FilePathMapping};\n use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::RealFileName;\n use rustc_span::SourceFileHashAlgorithm;\n \n use rustc_errors::emitter::HumanReadableErrorType;\n@@ -707,6 +708,7 @@ impl Default for Options {\n             json_artifact_notifications: false,\n             json_unused_externs: false,\n             pretty: None,\n+            working_dir: RealFileName::LocalPath(std::env::current_dir().unwrap()),\n         }\n     }\n }\n@@ -2132,6 +2134,18 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         if candidate.join(\"library/std/src/lib.rs\").is_file() { Some(candidate) } else { None }\n     };\n \n+    let working_dir = std::env::current_dir().unwrap_or_else(|e| {\n+        early_error(error_format, &format!(\"Current directory is invalid: {}\", e));\n+    });\n+\n+    let (path, remapped) =\n+        FilePathMapping::new(remap_path_prefix.clone()).map_prefix(working_dir.clone());\n+    let working_dir = if remapped {\n+        RealFileName::Remapped { local_path: Some(working_dir), virtual_name: path }\n+    } else {\n+        RealFileName::LocalPath(path)\n+    };\n+\n     Options {\n         crate_types,\n         optimize: opt_level,\n@@ -2167,6 +2181,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         json_artifact_notifications,\n         json_unused_externs,\n         pretty,\n+        working_dir,\n     }\n }\n \n@@ -2413,6 +2428,7 @@ crate mod dep_tracking {\n     use crate::utils::{NativeLib, NativeLibKind};\n     use rustc_feature::UnstableFeatures;\n     use rustc_span::edition::Edition;\n+    use rustc_span::RealFileName;\n     use rustc_target::spec::{CodeModel, MergeFunctions, PanicStrategy, RelocModel};\n     use rustc_target::spec::{RelroLevel, SanitizerSet, SplitDebuginfo, TargetTriple, TlsModel};\n     use std::collections::hash_map::DefaultHasher;\n@@ -2494,6 +2510,7 @@ crate mod dep_tracking {\n         TrimmedDefPaths,\n         Option<LdImpl>,\n         OutputType,\n+        RealFileName,\n     );\n \n     impl<T1, T2> DepTrackingHash for (T1, T2)"}, {"sha": "481520122d25d95040c345b8000a3ce4c3bef398", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a183141e2d0f0af7f12946ff1a81615fa35e8099/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a183141e2d0f0af7f12946ff1a81615fa35e8099/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=a183141e2d0f0af7f12946ff1a81615fa35e8099", "patch": "@@ -10,6 +10,7 @@ use rustc_target::spec::{RelocModel, RelroLevel, SplitDebuginfo, TargetTriple, T\n \n use rustc_feature::UnstableFeatures;\n use rustc_span::edition::Edition;\n+use rustc_span::RealFileName;\n use rustc_span::SourceFileHashAlgorithm;\n \n use std::collections::BTreeMap;\n@@ -203,6 +204,9 @@ top_level_options!(\n         json_unused_externs: bool [UNTRACKED],\n \n         pretty: Option<PpMode> [UNTRACKED],\n+\n+        /// The (potentially remapped) working directory\n+        working_dir: RealFileName [TRACKED],\n     }\n );\n "}, {"sha": "5b163603d5ffba09f839218f9849e7b7f5f121ff", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a183141e2d0f0af7f12946ff1a81615fa35e8099/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a183141e2d0f0af7f12946ff1a81615fa35e8099/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=a183141e2d0f0af7f12946ff1a81615fa35e8099", "patch": "@@ -23,8 +23,8 @@ use rustc_errors::registry::Registry;\n use rustc_errors::{DiagnosticBuilder, DiagnosticId, ErrorReported};\n use rustc_macros::HashStable_Generic;\n pub use rustc_span::def_id::StableCrateId;\n+use rustc_span::edition::Edition;\n use rustc_span::source_map::{FileLoader, MultiSpan, RealFileLoader, SourceMap, Span};\n-use rustc_span::{edition::Edition, RealFileName};\n use rustc_span::{sym, SourceFileHashAlgorithm, Symbol};\n use rustc_target::asm::InlineAsmArch;\n use rustc_target::spec::{CodeModel, PanicStrategy, RelocModel, RelroLevel};\n@@ -139,8 +139,6 @@ pub struct Session {\n     /// The name of the root source file of the crate, in the local file system.\n     /// `None` means that there is no source file.\n     pub local_crate_source_file: Option<PathBuf>,\n-    /// The directory the compiler has been executed in\n-    pub working_dir: RealFileName,\n \n     /// Set of `(DiagnosticId, Option<Span>, message)` tuples tracking\n     /// (sub)diagnostics that have been set once, but should not be set again,\n@@ -1304,16 +1302,6 @@ pub fn build_session(\n     let print_fuel_crate = sopts.debugging_opts.print_fuel.clone();\n     let print_fuel = AtomicU64::new(0);\n \n-    let working_dir = env::current_dir().unwrap_or_else(|e| {\n-        parse_sess.span_diagnostic.fatal(&format!(\"Current directory is invalid: {}\", e)).raise()\n-    });\n-    let (path, remapped) = file_path_mapping.map_prefix(working_dir.clone());\n-    let working_dir = if remapped {\n-        RealFileName::Remapped { local_path: Some(working_dir), virtual_name: path }\n-    } else {\n-        RealFileName::LocalPath(path)\n-    };\n-\n     let cgu_reuse_tracker = if sopts.debugging_opts.query_dep_graph {\n         CguReuseTracker::new()\n     } else {\n@@ -1344,7 +1332,6 @@ pub fn build_session(\n         parse_sess,\n         sysroot,\n         local_crate_source_file,\n-        working_dir,\n         one_time_diagnostics: Default::default(),\n         crate_types: OnceCell::new(),\n         stable_crate_id: OnceCell::new(),"}, {"sha": "3606d4fdf57ce3b500412597a15395c5ef40cf0c", "filename": "src/test/run-make/issue-85019-moved-src-dir/Makefile", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a183141e2d0f0af7f12946ff1a81615fa35e8099/src%2Ftest%2Frun-make%2Fissue-85019-moved-src-dir%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a183141e2d0f0af7f12946ff1a81615fa35e8099/src%2Ftest%2Frun-make%2Fissue-85019-moved-src-dir%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-85019-moved-src-dir%2FMakefile?ref=a183141e2d0f0af7f12946ff1a81615fa35e8099", "patch": "@@ -0,0 +1,28 @@\n+include ../../run-make-fulldeps/tools.mk\n+\n+INCR=$(TMPDIR)/incr\n+FIRST_SRC=$(TMPDIR)/first_src\n+SECOND_SRC=$(TMPDIR)/second_src\n+\n+# ignore-none no-std is not supported\n+# ignore-nvptx64-nvidia-cuda FIXME: can't find crate for 'std'\n+\n+# Tests that we don't get an ICE when the working directory\n+# (but not the build directory!) changes between compilation\n+# sessions\n+\n+all:\n+\tmkdir $(INCR)\n+\t# Build from 'FIRST_SRC'\n+\tmkdir $(FIRST_SRC)\n+\tcp my_lib.rs $(FIRST_SRC)/my_lib.rs\n+\tcp main.rs $(FIRST_SRC)/main.rs\n+\tcd $(FIRST_SRC) && \\\n+\t\t$(RUSTC) -C incremental=$(INCR) --crate-type lib my_lib.rs --target $(TARGET) && \\\n+\t\t$(RUSTC) -C incremental=$(INCR) --extern my_lib=$(TMPDIR)/libmy_lib.rlib main.rs --target $(TARGET)\n+\t# Build from 'SECOND_SRC', keeping the output directory and incremental directory\n+\t# the same\n+\tmv $(FIRST_SRC) $(SECOND_SRC)\n+\tcd $(SECOND_SRC) && \\\n+\t\t$(RUSTC) -C incremental=$(INCR) --crate-type lib my_lib.rs --target $(TARGET) && \\\n+\t\t$(RUSTC) -C incremental=$(INCR) --extern my_lib=$(TMPDIR)/libmy_lib.rlib main.rs --target $(TARGET)"}, {"sha": "543559a5c539f293005f58373c90f2dbd5c6856e", "filename": "src/test/run-make/issue-85019-moved-src-dir/main.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a183141e2d0f0af7f12946ff1a81615fa35e8099/src%2Ftest%2Frun-make%2Fissue-85019-moved-src-dir%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a183141e2d0f0af7f12946ff1a81615fa35e8099/src%2Ftest%2Frun-make%2Fissue-85019-moved-src-dir%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-85019-moved-src-dir%2Fmain.rs?ref=a183141e2d0f0af7f12946ff1a81615fa35e8099", "patch": "@@ -0,0 +1,5 @@\n+extern crate my_lib;\n+\n+fn main() {\n+    my_lib::my_fn(\"hi\");\n+}"}, {"sha": "432875739affb6e69ab22ee7951f417925f702c7", "filename": "src/test/run-make/issue-85019-moved-src-dir/my_lib.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a183141e2d0f0af7f12946ff1a81615fa35e8099/src%2Ftest%2Frun-make%2Fissue-85019-moved-src-dir%2Fmy_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a183141e2d0f0af7f12946ff1a81615fa35e8099/src%2Ftest%2Frun-make%2Fissue-85019-moved-src-dir%2Fmy_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-85019-moved-src-dir%2Fmy_lib.rs?ref=a183141e2d0f0af7f12946ff1a81615fa35e8099", "patch": "@@ -0,0 +1 @@\n+pub fn my_fn<T: Copy>(_val: T) {}"}]}