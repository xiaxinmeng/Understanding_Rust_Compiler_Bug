{"sha": "b81302f42d2dfb3b36c91d9b0c5ab2c465214ead", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MTMwMmY0MmQyZGZiM2IzNmM5MWQ5YjBjNWFiMmM0NjUyMTRlYWQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-09-19T07:40:30Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-25T14:48:15Z"}, "message": "for now, just use NULL ptr for unsized locals", "tree": {"sha": "45e312736de0f17c9d5fd29422adc57a5ebdd082", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45e312736de0f17c9d5fd29422adc57a5ebdd082"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b81302f42d2dfb3b36c91d9b0c5ab2c465214ead", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b81302f42d2dfb3b36c91d9b0c5ab2c465214ead", "html_url": "https://github.com/rust-lang/rust/commit/b81302f42d2dfb3b36c91d9b0c5ab2c465214ead", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b81302f42d2dfb3b36c91d9b0c5ab2c465214ead/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7717a63182722b33d9c5c298157d54eaaf23dab2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7717a63182722b33d9c5c298157d54eaaf23dab2", "html_url": "https://github.com/rust-lang/rust/commit/7717a63182722b33d9c5c298157d54eaaf23dab2"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "9ef123d2daf50d1c64b13959a09477ba8949ea02", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b81302f42d2dfb3b36c91d9b0c5ab2c465214ead/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b81302f42d2dfb3b36c91d9b0c5ab2c465214ead/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=b81302f42d2dfb3b36c91d9b0c5ab2c465214ead", "patch": "@@ -176,33 +176,33 @@ impl<'tcx, Tag> Pointer<Tag> {\n         Pointer { alloc_id, offset, tag }\n     }\n \n-    pub fn wrapping_signed_offset<C: HasDataLayout>(self, i: i64, cx: C) -> Self {\n+    pub fn wrapping_signed_offset(self, i: i64, cx: impl HasDataLayout) -> Self {\n         Pointer::new_with_tag(\n             self.alloc_id,\n             Size::from_bytes(cx.data_layout().wrapping_signed_offset(self.offset.bytes(), i)),\n             self.tag,\n         )\n     }\n \n-    pub fn overflowing_signed_offset<C: HasDataLayout>(self, i: i128, cx: C) -> (Self, bool) {\n+    pub fn overflowing_signed_offset(self, i: i128, cx: impl HasDataLayout) -> (Self, bool) {\n         let (res, over) = cx.data_layout().overflowing_signed_offset(self.offset.bytes(), i);\n         (Pointer::new_with_tag(self.alloc_id, Size::from_bytes(res), self.tag), over)\n     }\n \n-    pub fn signed_offset<C: HasDataLayout>(self, i: i64, cx: C) -> EvalResult<'tcx, Self> {\n+    pub fn signed_offset(self, i: i64, cx: impl HasDataLayout) -> EvalResult<'tcx, Self> {\n         Ok(Pointer::new_with_tag(\n             self.alloc_id,\n             Size::from_bytes(cx.data_layout().signed_offset(self.offset.bytes(), i)?),\n             self.tag,\n         ))\n     }\n \n-    pub fn overflowing_offset<C: HasDataLayout>(self, i: Size, cx: C) -> (Self, bool) {\n+    pub fn overflowing_offset(self, i: Size, cx: impl HasDataLayout) -> (Self, bool) {\n         let (res, over) = cx.data_layout().overflowing_offset(self.offset.bytes(), i.bytes());\n         (Pointer::new_with_tag(self.alloc_id, Size::from_bytes(res), self.tag), over)\n     }\n \n-    pub fn offset<C: HasDataLayout>(self, i: Size, cx: C) -> EvalResult<'tcx, Self> {\n+    pub fn offset(self, i: Size, cx: impl HasDataLayout) -> EvalResult<'tcx, Self> {\n         Ok(Pointer::new_with_tag(\n             self.alloc_id,\n             Size::from_bytes(cx.data_layout().offset(self.offset.bytes(), i.bytes())?),"}, {"sha": "4fa08e8c3111b4ffaa57bb5b2312b965954275f0", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b81302f42d2dfb3b36c91d9b0c5ab2c465214ead/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b81302f42d2dfb3b36c91d9b0c5ab2c465214ead/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=b81302f42d2dfb3b36c91d9b0c5ab2c465214ead", "patch": "@@ -125,6 +125,12 @@ impl<Tag> MemPlace<Tag> {\n         }\n     }\n \n+    /// Produces a Place that will error if attempted to be read from or written to\n+    #[inline(always)]\n+    pub fn null(cx: impl HasDataLayout) -> Self {\n+        Self::from_scalar_ptr(Scalar::ptr_null(cx), Align::from_bytes(1, 1).unwrap())\n+    }\n+\n     #[inline(always)]\n     pub fn from_ptr(ptr: Pointer<Tag>, align: Align) -> Self {\n         Self::from_scalar_ptr(ptr.into(), align)\n@@ -209,17 +215,17 @@ impl<'tcx, Tag: ::std::fmt::Debug> OpTy<'tcx, Tag> {\n \n impl<'tcx, Tag: ::std::fmt::Debug> Place<Tag> {\n     /// Produces a Place that will error if attempted to be read from or written to\n-    #[inline]\n+    #[inline(always)]\n     pub fn null(cx: impl HasDataLayout) -> Self {\n-        Self::from_scalar_ptr(Scalar::ptr_null(cx), Align::from_bytes(1, 1).unwrap())\n+        Place::Ptr(MemPlace::null(cx))\n     }\n \n-    #[inline]\n+    #[inline(always)]\n     pub fn from_scalar_ptr(ptr: Scalar<Tag>, align: Align) -> Self {\n         Place::Ptr(MemPlace::from_scalar_ptr(ptr, align))\n     }\n \n-    #[inline]\n+    #[inline(always)]\n     pub fn from_ptr(ptr: Pointer<Tag>, align: Align) -> Self {\n         Place::Ptr(MemPlace::from_ptr(ptr, align))\n     }\n@@ -882,10 +888,8 @@ where\n     ) -> EvalResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n         if layout.is_unsized() {\n             assert!(self.tcx.features().unsized_locals, \"cannot alloc memory for unsized type\");\n-            // allocate a fat pointer slot instead\n-            let fat = self.tcx.mk_mut_ptr(layout.ty);\n-            let fat = self.layout_of(fat)?;\n-            self.allocate(fat, kind)\n+            // FIXME: What should we do here?\n+            Ok(MPlaceTy::dangling(layout, &self))\n         } else {\n             let ptr = self.memory.allocate(layout.size, layout.align, kind)?;\n             Ok(MPlaceTy::from_aligned_ptr(ptr, layout))"}]}