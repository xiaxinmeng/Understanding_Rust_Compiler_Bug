{"sha": "b2c1a606feb1fbdb0ac0acba76f881ef172ed474", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyYzFhNjA2ZmViMWZiZGIwYWMwYWNiYTc2Zjg4MWVmMTcyZWQ0NzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-17T08:42:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-17T08:42:51Z"}, "message": "Auto merge of #70629 - anyska:fields-variant, r=oli-obk\n\nrustc_target::abi: add Primitive variant to FieldsShape.\n\nOriginally suggested by @eddyb.", "tree": {"sha": "18874526814851b0fb67cd67d41759720bf5d18e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18874526814851b0fb67cd67d41759720bf5d18e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2c1a606feb1fbdb0ac0acba76f881ef172ed474", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2c1a606feb1fbdb0ac0acba76f881ef172ed474", "html_url": "https://github.com/rust-lang/rust/commit/b2c1a606feb1fbdb0ac0acba76f881ef172ed474", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2c1a606feb1fbdb0ac0acba76f881ef172ed474/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "861996e13820a2e401df60756a373606b50948e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/861996e13820a2e401df60756a373606b50948e5", "html_url": "https://github.com/rust-lang/rust/commit/861996e13820a2e401df60756a373606b50948e5"}, {"sha": "8f081d5b2bd92f621f2db6841971e7c38e0e8f26", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f081d5b2bd92f621f2db6841971e7c38e0e8f26", "html_url": "https://github.com/rust-lang/rust/commit/8f081d5b2bd92f621f2db6841971e7c38e0e8f26"}], "stats": {"total": 82, "additions": 59, "deletions": 23}, "files": [{"sha": "77009aca6d32edb195355c64475a61511db64c5f", "filename": "src/librustc_codegen_llvm/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2c1a606feb1fbdb0ac0acba76f881ef172ed474/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c1a606feb1fbdb0ac0acba76f881ef172ed474/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_of.rs?ref=b2c1a606feb1fbdb0ac0acba76f881ef172ed474", "patch": "@@ -81,7 +81,7 @@ fn uncached_llvm_type<'a, 'tcx>(\n     };\n \n     match layout.fields {\n-        FieldsShape::Union(_) => {\n+        FieldsShape::Primitive | FieldsShape::Union(_) => {\n             let fill = cx.type_padding_filler(layout.size, layout.align.abi);\n             let packed = false;\n             match name {\n@@ -368,7 +368,7 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyAndLayout<'tcx> {\n             _ => {}\n         }\n         match self.fields {\n-            FieldsShape::Union(_) => {\n+            FieldsShape::Primitive | FieldsShape::Union(_) => {\n                 bug!(\"TyAndLayout::llvm_field_index({:?}): not applicable\", self)\n             }\n "}, {"sha": "97b02eaef35d0732b0c4ce8ab9a19cf30ba66147", "filename": "src/librustc_data_structures/stable_hasher.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2c1a606feb1fbdb0ac0acba76f881ef172ed474/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c1a606feb1fbdb0ac0acba76f881ef172ed474/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_hasher.rs?ref=b2c1a606feb1fbdb0ac0acba76f881ef172ed474", "patch": "@@ -210,6 +210,12 @@ impl<CTX> HashStable<CTX> for ::std::num::NonZeroU32 {\n     }\n }\n \n+impl<CTX> HashStable<CTX> for ::std::num::NonZeroUsize {\n+    fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n+        self.get().hash_stable(ctx, hasher)\n+    }\n+}\n+\n impl<CTX> HashStable<CTX> for f32 {\n     fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n         let val: u32 = unsafe { ::std::mem::transmute(*self) };"}, {"sha": "5a210547f13c00a82c045b26012f45dbb487d27a", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b2c1a606feb1fbdb0ac0acba76f881ef172ed474/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c1a606feb1fbdb0ac0acba76f881ef172ed474/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=b2c1a606feb1fbdb0ac0acba76f881ef172ed474", "patch": "@@ -22,6 +22,7 @@ use std::cmp;\n use std::fmt;\n use std::iter;\n use std::mem;\n+use std::num::NonZeroUsize;\n use std::ops::Bound;\n \n pub trait IntegerExt {\n@@ -518,7 +519,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             // The never type.\n             ty::Never => tcx.intern_layout(Layout {\n                 variants: Variants::Single { index: VariantIdx::new(0) },\n-                fields: FieldsShape::Union(0),\n+                fields: FieldsShape::Primitive,\n                 abi: Abi::Uninhabited,\n                 largest_niche: None,\n                 align: dl.i8_align,\n@@ -744,7 +745,10 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n                     return Ok(tcx.intern_layout(Layout {\n                         variants: Variants::Single { index },\n-                        fields: FieldsShape::Union(variants[index].len()),\n+                        fields: FieldsShape::Union(\n+                            NonZeroUsize::new(variants[index].len())\n+                                .ok_or(LayoutError::Unknown(ty))?,\n+                        ),\n                         abi,\n                         largest_niche: None,\n                         align,\n@@ -1988,7 +1992,7 @@ where\n                 if index == variant_index &&\n                 // Don't confuse variants of uninhabited enums with the enum itself.\n                 // For more details see https://github.com/rust-lang/rust/issues/69763.\n-                this.fields != FieldsShape::Union(0) =>\n+                this.fields != FieldsShape::Primitive =>\n             {\n                 this.layout\n             }\n@@ -2006,7 +2010,10 @@ where\n                 let tcx = cx.tcx();\n                 tcx.intern_layout(Layout {\n                     variants: Variants::Single { index: variant_index },\n-                    fields: FieldsShape::Union(fields),\n+                    fields: match NonZeroUsize::new(fields) {\n+                        Some(fields) => FieldsShape::Union(fields),\n+                        None => FieldsShape::Arbitrary { offsets: vec![], memory_index: vec![] },\n+                    },\n                     abi: Abi::Uninhabited,\n                     largest_niche: None,\n                     align: tcx.data_layout.i8_align,"}, {"sha": "2dffd78d776bd4310edfd38df75aee038fe068a4", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2c1a606feb1fbdb0ac0acba76f881ef172ed474/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c1a606feb1fbdb0ac0acba76f881ef172ed474/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=b2c1a606feb1fbdb0ac0acba76f881ef172ed474", "patch": "@@ -6,6 +6,7 @@\n \n use std::convert::TryFrom;\n use std::fmt::Write;\n+use std::num::NonZeroUsize;\n use std::ops::RangeInclusive;\n \n use rustc_data_structures::fx::FxHashSet;\n@@ -647,10 +648,11 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n     }\n \n     #[inline(always)]\n-    fn visit_union(&mut self, op: OpTy<'tcx, M::PointerTag>, fields: usize) -> InterpResult<'tcx> {\n-        // Empty unions are not accepted by rustc. But uninhabited enums\n-        // claim to be unions, so allow them, too.\n-        assert!(op.layout.abi.is_uninhabited() || fields > 0);\n+    fn visit_union(\n+        &mut self,\n+        _op: OpTy<'tcx, M::PointerTag>,\n+        _fields: NonZeroUsize,\n+    ) -> InterpResult<'tcx> {\n         Ok(())\n     }\n "}, {"sha": "00d39452c49d5ad502c259c7504e58d9b76993fc", "filename": "src/librustc_mir/interpret/visitor.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b2c1a606feb1fbdb0ac0acba76f881ef172ed474/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c1a606feb1fbdb0ac0acba76f881ef172ed474/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs?ref=b2c1a606feb1fbdb0ac0acba76f881ef172ed474", "patch": "@@ -6,6 +6,8 @@ use rustc_middle::ty;\n use rustc_middle::ty::layout::TyAndLayout;\n use rustc_target::abi::{FieldsShape, VariantIdx, Variants};\n \n+use std::num::NonZeroUsize;\n+\n use super::{InterpCx, MPlaceTy, Machine, OpTy};\n \n // A thing that we can project into, and that has a layout.\n@@ -130,7 +132,7 @@ macro_rules! make_value_visitor {\n             }\n             /// Visits the given value as a union. No automatic recursion can happen here.\n             #[inline(always)]\n-            fn visit_union(&mut self, _v: Self::V, _fields: usize) -> InterpResult<'tcx>\n+            fn visit_union(&mut self, _v: Self::V, _fields: NonZeroUsize) -> InterpResult<'tcx>\n             {\n                 Ok(())\n             }\n@@ -208,6 +210,7 @@ macro_rules! make_value_visitor {\n \n                 // Visit the fields of this value.\n                 match v.layout().fields {\n+                    FieldsShape::Primitive => {},\n                     FieldsShape::Union(fields) => {\n                         self.visit_union(v, fields)?;\n                     },"}, {"sha": "917dd104d1496fd24f60cb0c20c627ff72af7063", "filename": "src/librustc_target/abi/call/mips64.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2c1a606feb1fbdb0ac0acba76f881ef172ed474/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c1a606feb1fbdb0ac0acba76f881ef172ed474/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmips64.rs?ref=b2c1a606feb1fbdb0ac0acba76f881ef172ed474", "patch": "@@ -88,6 +88,7 @@ where\n     let mut prefix_index = 0;\n \n     match arg.layout.fields {\n+        abi::FieldsShape::Primitive => unreachable!(),\n         abi::FieldsShape::Array { .. } => {\n             // Arrays are passed indirectly\n             arg.make_indirect();"}, {"sha": "0303312d057fe1cb53797c405f734d78262abaa5", "filename": "src/librustc_target/abi/call/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b2c1a606feb1fbdb0ac0acba76f881ef172ed474/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c1a606feb1fbdb0ac0acba76f881ef172ed474/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs?ref=b2c1a606feb1fbdb0ac0acba76f881ef172ed474", "patch": "@@ -308,13 +308,16 @@ impl<'a, Ty> TyAndLayout<'a, Ty> {\n             }\n \n             Abi::ScalarPair(..) | Abi::Aggregate { .. } => {\n-                // Helper for computing `homogenous_aggregate`, allowing a custom\n+                // Helper for computing `homogeneous_aggregate`, allowing a custom\n                 // starting offset (used below for handling variants).\n                 let from_fields_at =\n                     |layout: Self,\n                      start: Size|\n                      -> Result<(HomogeneousAggregate, Size), Heterogeneous> {\n                         let is_union = match layout.fields {\n+                            FieldsShape::Primitive => {\n+                                unreachable!(\"aggregates can't have `FieldsShape::Primitive`\")\n+                            }\n                             FieldsShape::Array { count, .. } => {\n                                 assert_eq!(start, Size::ZERO);\n "}, {"sha": "2e10bed3bd451ff9c01a075d510d51aa64ff4ff6", "filename": "src/librustc_target/abi/call/riscv.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b2c1a606feb1fbdb0ac0acba76f881ef172ed474/src%2Flibrustc_target%2Fabi%2Fcall%2Friscv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c1a606feb1fbdb0ac0acba76f881ef172ed474/src%2Flibrustc_target%2Fabi%2Fcall%2Friscv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Friscv.rs?ref=b2c1a606feb1fbdb0ac0acba76f881ef172ed474", "patch": "@@ -87,6 +87,9 @@ where\n         },\n         Abi::Vector { .. } | Abi::Uninhabited => return Err(CannotUseFpConv),\n         Abi::ScalarPair(..) | Abi::Aggregate { .. } => match arg_layout.fields {\n+            FieldsShape::Primitive => {\n+                unreachable!(\"aggregates can't have `FieldsShape::Primitive`\")\n+            }\n             FieldsShape::Union(_) => {\n                 if !arg_layout.is_zst() {\n                     return Err(CannotUseFpConv);"}, {"sha": "dcf181cb59f4a22aa86c3e27b4e3ce3cb6a4374e", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b2c1a606feb1fbdb0ac0acba76f881ef172ed474/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c1a606feb1fbdb0ac0acba76f881ef172ed474/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=b2c1a606feb1fbdb0ac0acba76f881ef172ed474", "patch": "@@ -4,6 +4,7 @@ pub use Primitive::*;\n use crate::spec::Target;\n \n use std::convert::{TryFrom, TryInto};\n+use std::num::NonZeroUsize;\n use std::ops::{Add, AddAssign, Deref, Mul, Range, RangeInclusive, Sub};\n \n use rustc_index::vec::{Idx, IndexVec};\n@@ -619,10 +620,11 @@ impl Scalar {\n /// Describes how the fields of a type are located in memory.\n #[derive(PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n pub enum FieldsShape {\n+    /// Scalar primitives and `!`, which never have fields.\n+    Primitive,\n+\n     /// All fields start at no offset. The `usize` is the field count.\n-    ///\n-    /// In the case of primitives the number of fields is `0`.\n-    Union(usize),\n+    Union(NonZeroUsize),\n \n     /// Array/vector-like placement, with all fields of identical types.\n     Array { stride: Size, count: u64 },\n@@ -660,7 +662,8 @@ pub enum FieldsShape {\n impl FieldsShape {\n     pub fn count(&self) -> usize {\n         match *self {\n-            FieldsShape::Union(count) => count,\n+            FieldsShape::Primitive => 0,\n+            FieldsShape::Union(count) => count.get(),\n             FieldsShape::Array { count, .. } => {\n                 let usize_count = count as usize;\n                 assert_eq!(usize_count as u64, count);\n@@ -672,8 +675,16 @@ impl FieldsShape {\n \n     pub fn offset(&self, i: usize) -> Size {\n         match *self {\n+            FieldsShape::Primitive => {\n+                unreachable!(\"FieldsShape::offset: `Primitive`s have no fields\")\n+            }\n             FieldsShape::Union(count) => {\n-                assert!(i < count, \"tried to access field {} of union with {} fields\", i, count);\n+                assert!(\n+                    i < count.get(),\n+                    \"tried to access field {} of union with {} fields\",\n+                    i,\n+                    count\n+                );\n                 Size::ZERO\n             }\n             FieldsShape::Array { stride, count } => {\n@@ -687,6 +698,9 @@ impl FieldsShape {\n \n     pub fn memory_index(&self, i: usize) -> usize {\n         match *self {\n+            FieldsShape::Primitive => {\n+                unreachable!(\"FieldsShape::memory_index: `Primitive`s have no fields\")\n+            }\n             FieldsShape::Union(_) | FieldsShape::Array { .. } => i,\n             FieldsShape::Arbitrary { ref memory_index, .. } => {\n                 let r = memory_index[i];\n@@ -718,7 +732,7 @@ impl FieldsShape {\n         }\n \n         (0..self.count()).map(move |i| match *self {\n-            FieldsShape::Union(_) | FieldsShape::Array { .. } => i,\n+            FieldsShape::Primitive | FieldsShape::Union(_) | FieldsShape::Array { .. } => i,\n             FieldsShape::Arbitrary { .. } => {\n                 if use_small {\n                     inverse_small[i] as usize\n@@ -887,7 +901,6 @@ impl Niche {\n #[derive(PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n pub struct Layout {\n     /// Says where the fields are located within the layout.\n-    /// Primitives and uninhabited enums appear as unions without fields.\n     pub fields: FieldsShape,\n \n     /// Encodes information about multi-variant layouts.\n@@ -923,7 +936,7 @@ impl Layout {\n         let align = scalar.value.align(cx);\n         Layout {\n             variants: Variants::Single { index: VariantIdx::new(0) },\n-            fields: FieldsShape::Union(0),\n+            fields: FieldsShape::Primitive,\n             abi: Abi::Scalar(scalar),\n             largest_niche,\n             size,"}, {"sha": "cd8ebdffb730bc845adfd0069f7638a39b9176c8", "filename": "src/test/ui/layout/debug.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2c1a606feb1fbdb0ac0acba76f881ef172ed474/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2c1a606feb1fbdb0ac0acba76f881ef172ed474/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr?ref=b2c1a606feb1fbdb0ac0acba76f881ef172ed474", "patch": "@@ -316,9 +316,7 @@ LL | type Test = Result<i32, i32>;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: layout_of(i32) = Layout {\n-    fields: Union(\n-        0,\n-    ),\n+    fields: Primitive,\n     variants: Single {\n         index: 0,\n     },"}]}