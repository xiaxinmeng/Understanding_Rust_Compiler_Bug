{"sha": "fe2524cb9cf09e7a0aa84bbb36a130e65255e1c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMjUyNGNiOWNmMDllN2EwYWE4NGJiYjM2YTEzMGU2NTI1NWUxYzA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-15T22:15:36Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-08-16T18:10:12Z"}, "message": "resolve: Populate external traits lazily as well", "tree": {"sha": "ce43ea262bdb0b64752b7fe40f22e11c9d9a346a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce43ea262bdb0b64752b7fe40f22e11c9d9a346a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe2524cb9cf09e7a0aa84bbb36a130e65255e1c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe2524cb9cf09e7a0aa84bbb36a130e65255e1c0", "html_url": "https://github.com/rust-lang/rust/commit/fe2524cb9cf09e7a0aa84bbb36a130e65255e1c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe2524cb9cf09e7a0aa84bbb36a130e65255e1c0/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea81d8cedb68076cb194204f86a0ffb1204be8f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea81d8cedb68076cb194204f86a0ffb1204be8f9", "html_url": "https://github.com/rust-lang/rust/commit/ea81d8cedb68076cb194204f86a0ffb1204be8f9"}], "stats": {"total": 31, "additions": 9, "deletions": 22}, "files": [{"sha": "643a68d1e53defae7da7c046b8176a0c2661ecc6", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/fe2524cb9cf09e7a0aa84bbb36a130e65255e1c0/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe2524cb9cf09e7a0aa84bbb36a130e65255e1c0/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=fe2524cb9cf09e7a0aa84bbb36a130e65255e1c0", "patch": "@@ -870,7 +870,8 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         let expansion = ExpnId::root(); // FIXME(jseyfried) intercrate hygiene\n         match res {\n             Res::Def(kind @ DefKind::Mod, def_id)\n-            | Res::Def(kind @ DefKind::Enum, def_id) => {\n+            | Res::Def(kind @ DefKind::Enum, def_id)\n+            | Res::Def(kind @ DefKind::Trait, def_id) => {\n                 let module = self.r.new_module(parent,\n                                              ModuleKind::Def(kind, def_id, ident.name),\n                                              def_id,\n@@ -883,13 +884,16 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             | Res::Def(DefKind::ForeignTy, _)\n             | Res::Def(DefKind::OpaqueTy, _)\n             | Res::Def(DefKind::TraitAlias, _)\n+            | Res::Def(DefKind::AssocTy, _)\n+            | Res::Def(DefKind::AssocOpaqueTy, _)\n             | Res::PrimTy(..)\n             | Res::ToolMod => {\n                 self.r.define(parent, ident, TypeNS, (res, vis, DUMMY_SP, expansion));\n             }\n             Res::Def(DefKind::Fn, _)\n             | Res::Def(DefKind::Static, _)\n             | Res::Def(DefKind::Const, _)\n+            | Res::Def(DefKind::AssocConst, _)\n             | Res::Def(DefKind::Ctor(CtorOf::Variant, ..), _) => {\n                 self.r.define(parent, ident, ValueNS, (res, vis, DUMMY_SP, expansion));\n             }\n@@ -902,28 +906,11 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                     self.r.struct_constructors.insert(struct_def_id, (res, vis));\n                 }\n             }\n-            Res::Def(DefKind::Trait, def_id) => {\n-                let module_kind = ModuleKind::Def(DefKind::Trait, def_id, ident.name);\n-                let module = self.r.new_module(parent,\n-                                             module_kind,\n-                                             parent.normal_ancestor_id,\n-                                             expansion,\n-                                             span);\n-                self.r.define(parent, ident, TypeNS, (module, vis, DUMMY_SP, expansion));\n+            Res::Def(DefKind::Method, def_id) => {\n+                self.r.define(parent, ident, ValueNS, (res, vis, DUMMY_SP, expansion));\n \n-                module.populate_on_access.set(false);\n-                for child in self.r.cstore.item_children_untracked(def_id, self.r.session) {\n-                    let res = child.res.map_id(|_| panic!(\"unexpected id\"));\n-                    let ns = if let Res::Def(DefKind::AssocTy, _) = res {\n-                        TypeNS\n-                    } else { ValueNS };\n-                    self.r.define(module, child.ident, ns,\n-                                (res, ty::Visibility::Public, DUMMY_SP, expansion));\n-\n-                    if self.r.cstore.associated_item_cloned_untracked(child.res.def_id())\n-                           .method_has_self_argument {\n-                        self.r.has_self.insert(res.def_id());\n-                    }\n+                if self.r.cstore.associated_item_cloned_untracked(def_id).method_has_self_argument {\n+                    self.r.has_self.insert(def_id);\n                 }\n             }\n             Res::Def(DefKind::Struct, def_id) | Res::Def(DefKind::Union, def_id) => {"}]}