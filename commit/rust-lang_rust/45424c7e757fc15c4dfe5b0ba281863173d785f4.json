{"sha": "45424c7e757fc15c4dfe5b0ba281863173d785f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NDI0YzdlNzU3ZmMxNWM0ZGZlNWIwYmEyODE4NjMxNzNkNzg1ZjQ=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-03-05T08:30:12Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-03-05T16:11:21Z"}, "message": "lintcheck: add --fix mode which tries to apply lint suggestions to the sources and prints a warning if that fails\n\nGreat for spotting false positives/broken suggestions of applicable lints.\n\nThere are false positives though becasue I'm not sure yet how to silence rustc warnings while keeping clippy warnings.\nSometimes rustc makes a suggestion that fails to apply and the implementation does not differenciate between clippy and rustc warnings when applying lint suggestions.\n\nchangelog: none", "tree": {"sha": "dfa81536d4422155e4c93abac9a88c3383173b80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfa81536d4422155e4c93abac9a88c3383173b80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45424c7e757fc15c4dfe5b0ba281863173d785f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45424c7e757fc15c4dfe5b0ba281863173d785f4", "html_url": "https://github.com/rust-lang/rust/commit/45424c7e757fc15c4dfe5b0ba281863173d785f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45424c7e757fc15c4dfe5b0ba281863173d785f4/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e5453835572784dcdcdf63a4723254507282dc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e5453835572784dcdcdf63a4723254507282dc7", "html_url": "https://github.com/rust-lang/rust/commit/9e5453835572784dcdcdf63a4723254507282dc7"}], "stats": {"total": 52, "additions": 47, "deletions": 5}, "files": [{"sha": "765d3349ec01f8a43bb8c3929b9df8b2e013df3d", "filename": "clippy_dev/src/lintcheck.rs", "status": "modified", "additions": 45, "deletions": 4, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/45424c7e757fc15c4dfe5b0ba281863173d785f4/clippy_dev%2Fsrc%2Flintcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45424c7e757fc15c4dfe5b0ba281863173d785f4/clippy_dev%2Fsrc%2Flintcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flintcheck.rs?ref=45424c7e757fc15c4dfe5b0ba281863173d785f4", "patch": "@@ -229,6 +229,7 @@ impl Crate {\n         target_dir_index: &AtomicUsize,\n         thread_limit: usize,\n         total_crates_to_lint: usize,\n+        fix: bool,\n     ) -> Vec<ClippyWarning> {\n         // advance the atomic index by one\n         let index = target_dir_index.fetch_add(1, Ordering::SeqCst);\n@@ -252,7 +253,18 @@ impl Crate {\n \n         let shared_target_dir = clippy_project_root().join(\"target/lintcheck/shared_target_dir\");\n \n-        let mut args = vec![\"--\", \"--message-format=json\", \"--\", \"--cap-lints=warn\"];\n+        let mut args = if fix {\n+            vec![\n+                \"-Zunstable-options\",\n+                \"--fix\",\n+                \"-Zunstable-options\",\n+                \"--allow-no-vcs\",\n+                \"--\",\n+                \"--cap-lints=warn\",\n+            ]\n+        } else {\n+            vec![\"--\", \"--message-format=json\", \"--\", \"--cap-lints=warn\"]\n+        };\n \n         if let Some(options) = &self.options {\n             for opt in options {\n@@ -282,13 +294,31 @@ impl Crate {\n                 );\n             });\n         let stdout = String::from_utf8_lossy(&all_output.stdout);\n+        let stderr = String::from_utf8_lossy(&all_output.stderr);\n+\n+        if fix {\n+            if let Some(stderr) = stderr\n+                .lines()\n+                .find(|line| line.contains(\"failed to automatically apply fixes suggested by rustc to crate\"))\n+            {\n+                let subcrate = &stderr[63..];\n+                println!(\n+                    \"ERROR: failed to apply some suggetion to {} / to (sub)crate {}\",\n+                    self.name, subcrate\n+                );\n+            }\n+            // fast path, we don't need the warnings anyway\n+            return Vec::new();\n+        }\n+\n         let output_lines = stdout.lines();\n         let warnings: Vec<ClippyWarning> = output_lines\n             .into_iter()\n             // get all clippy warnings and ICEs\n             .filter(|line| filter_clippy_warnings(&line))\n             .map(|json_msg| parse_json_message(json_msg, &self))\n             .collect();\n+\n         warnings\n     }\n }\n@@ -301,6 +331,8 @@ struct LintcheckConfig {\n     sources_toml_path: PathBuf,\n     // we save the clippy lint results here\n     lintcheck_results_path: PathBuf,\n+    // whether to just run --fix and not collect all the warnings\n+    fix: bool,\n }\n \n impl LintcheckConfig {\n@@ -342,11 +374,13 @@ impl LintcheckConfig {\n             // no -j passed, use a single thread\n             None => 1,\n         };\n+        let fix: bool = clap_config.is_present(\"fix\");\n \n         LintcheckConfig {\n             max_jobs,\n             sources_toml_path,\n             lintcheck_results_path,\n+            fix,\n         }\n     }\n }\n@@ -598,7 +632,7 @@ pub fn run(clap_config: &ArgMatches) {\n             .into_iter()\n             .map(|krate| krate.download_and_extract())\n             .filter(|krate| krate.name == only_one_crate)\n-            .flat_map(|krate| krate.run_clippy_lints(&cargo_clippy_path, &AtomicUsize::new(0), 1, 1))\n+            .flat_map(|krate| krate.run_clippy_lints(&cargo_clippy_path, &AtomicUsize::new(0), 1, 1, config.fix))\n             .collect()\n     } else {\n         if config.max_jobs > 1 {\n@@ -621,19 +655,26 @@ pub fn run(clap_config: &ArgMatches) {\n             crates\n                 .into_par_iter()\n                 .map(|krate| krate.download_and_extract())\n-                .flat_map(|krate| krate.run_clippy_lints(&cargo_clippy_path, &counter, num_cpus, num_crates))\n+                .flat_map(|krate| {\n+                    krate.run_clippy_lints(&cargo_clippy_path, &counter, num_cpus, num_crates, config.fix)\n+                })\n                 .collect()\n         } else {\n             // run sequential\n             let num_crates = crates.len();\n             crates\n                 .into_iter()\n                 .map(|krate| krate.download_and_extract())\n-                .flat_map(|krate| krate.run_clippy_lints(&cargo_clippy_path, &counter, 1, num_crates))\n+                .flat_map(|krate| krate.run_clippy_lints(&cargo_clippy_path, &counter, 1, num_crates, config.fix))\n                 .collect()\n         }\n     };\n \n+    // if we are in --fix mode, don't change the log files, terminate here\n+    if config.fix {\n+        return;\n+    }\n+\n     // generate some stats\n     let (stats_formatted, new_stats) = gather_stats(&clippy_warnings);\n "}, {"sha": "33fef18d553af80e8a9134a37c6195b7d6607513", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/45424c7e757fc15c4dfe5b0ba281863173d785f4/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45424c7e757fc15c4dfe5b0ba281863173d785f4/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=45424c7e757fc15c4dfe5b0ba281863173d785f4", "patch": "@@ -77,7 +77,8 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                 .short(\"j\")\n                 .long(\"jobs\")\n                 .help(\"number of threads to use, 0 automatic choice\"),\n-        );\n+        )\n+        .arg(Arg::with_name(\"fix\").help(\"runs cargo clippy --fix and checks if all suggestions apply\"));\n \n     let app = App::new(\"Clippy developer tooling\")\n         .subcommand("}]}