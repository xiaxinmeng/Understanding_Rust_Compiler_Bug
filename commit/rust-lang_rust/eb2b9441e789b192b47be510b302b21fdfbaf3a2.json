{"sha": "eb2b9441e789b192b47be510b302b21fdfbaf3a2", "node_id": "C_kwDOAAsO6NoAKGViMmI5NDQxZTc4OWIxOTJiNDdiZTUxMGIzMDJiMjFmZGZiYWYzYTI", "commit": {"author": {"name": "cuishuang", "email": "imcusg@gmail.com", "date": "2022-03-01T12:02:47Z"}, "committer": {"name": "cuishuang", "email": "imcusg@gmail.com", "date": "2022-03-01T12:02:47Z"}, "message": "compiler: fix some typos", "tree": {"sha": "6ca2a26607de2c01d298ec0c37d1f4c37e278dfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ca2a26607de2c01d298ec0c37d1f4c37e278dfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb2b9441e789b192b47be510b302b21fdfbaf3a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb2b9441e789b192b47be510b302b21fdfbaf3a2", "html_url": "https://github.com/rust-lang/rust/commit/eb2b9441e789b192b47be510b302b21fdfbaf3a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb2b9441e789b192b47be510b302b21fdfbaf3a2/comments", "author": {"login": "cuishuang", "id": 15921519, "node_id": "MDQ6VXNlcjE1OTIxNTE5", "avatar_url": "https://avatars.githubusercontent.com/u/15921519?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuishuang", "html_url": "https://github.com/cuishuang", "followers_url": "https://api.github.com/users/cuishuang/followers", "following_url": "https://api.github.com/users/cuishuang/following{/other_user}", "gists_url": "https://api.github.com/users/cuishuang/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuishuang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuishuang/subscriptions", "organizations_url": "https://api.github.com/users/cuishuang/orgs", "repos_url": "https://api.github.com/users/cuishuang/repos", "events_url": "https://api.github.com/users/cuishuang/events{/privacy}", "received_events_url": "https://api.github.com/users/cuishuang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuishuang", "id": 15921519, "node_id": "MDQ6VXNlcjE1OTIxNTE5", "avatar_url": "https://avatars.githubusercontent.com/u/15921519?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuishuang", "html_url": "https://github.com/cuishuang", "followers_url": "https://api.github.com/users/cuishuang/followers", "following_url": "https://api.github.com/users/cuishuang/following{/other_user}", "gists_url": "https://api.github.com/users/cuishuang/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuishuang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuishuang/subscriptions", "organizations_url": "https://api.github.com/users/cuishuang/orgs", "repos_url": "https://api.github.com/users/cuishuang/repos", "events_url": "https://api.github.com/users/cuishuang/events{/privacy}", "received_events_url": "https://api.github.com/users/cuishuang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a56cbec59903a830a5fc06c5c81956de4199584", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a56cbec59903a830a5fc06c5c81956de4199584", "html_url": "https://github.com/rust-lang/rust/commit/4a56cbec59903a830a5fc06c5c81956de4199584"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "e8fca6f04ba5b4bfd88afb289186f368d60ffcf5", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2b9441e789b192b47be510b302b21fdfbaf3a2/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2b9441e789b192b47be510b302b21fdfbaf3a2/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=eb2b9441e789b192b47be510b302b21fdfbaf3a2", "patch": "@@ -1366,7 +1366,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         generics: &Generics,\n         itctx: ImplTraitContext<'_, 'hir>,\n     ) -> GenericsCtor<'hir> {\n-        // Error if `?Trait` bounds in where clauses don't refer directly to type paramters.\n+        // Error if `?Trait` bounds in where clauses don't refer directly to type parameters.\n         // Note: we used to clone these bounds directly onto the type parameter (and avoid lowering\n         // these into hir when we lower thee where clauses), but this makes it quite difficult to\n         // keep track of the Span info. Now, `add_implicitly_sized` in `AstConv` checks both param bounds and"}, {"sha": "fa9fe905256f5ac6daf84d49b27ebf43583b238d", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2b9441e789b192b47be510b302b21fdfbaf3a2/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2b9441e789b192b47be510b302b21fdfbaf3a2/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=eb2b9441e789b192b47be510b302b21fdfbaf3a2", "patch": "@@ -1992,7 +1992,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             .find_map(|constraint| {\n                 if let ConstraintCategory::Predicate(predicate_span) = constraint.category {\n                     // We currentl'y doesn't store the `DefId` in the `ConstraintCategory`\n-                    // for perforamnce reasons. The error reporting code used by NLL only\n+                    // for performances reasons. The error reporting code used by NLL only\n                     // uses the span, so this doesn't cause any problems at the moment.\n                     Some(ObligationCauseCode::BindingObligation(\n                         CRATE_DEF_ID.to_def_id(),"}, {"sha": "8574cfae86092660b943a7124afb9f1ebff3547c", "filename": "compiler/rustc_builtin_macros/src/cfg_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2b9441e789b192b47be510b302b21fdfbaf3a2/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2b9441e789b192b47be510b302b21fdfbaf3a2/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs?ref=eb2b9441e789b192b47be510b302b21fdfbaf3a2", "patch": "@@ -201,7 +201,7 @@ impl CfgEval<'_, '_> {\n \n         // Re-parse the tokens, setting the `capture_cfg` flag to save extra information\n         // to the captured `AttrAnnotatedTokenStream` (specifically, we capture\n-        // `AttrAnnotatedTokenTree::AttributesData` for all occurences of `#[cfg]` and `#[cfg_attr]`)\n+        // `AttrAnnotatedTokenTree::AttributesData` for all occurrences of `#[cfg]` and `#[cfg_attr]`)\n         let mut parser =\n             rustc_parse::stream_to_parser(&self.cfg.sess.parse_sess, orig_tokens, None);\n         parser.capture_cfg = true;"}, {"sha": "b36645ad37b935056b031fc381db0d4274055749", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2b9441e789b192b47be510b302b21fdfbaf3a2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2b9441e789b192b47be510b302b21fdfbaf3a2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=eb2b9441e789b192b47be510b302b21fdfbaf3a2", "patch": "@@ -989,7 +989,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n \n         // ... and otherwise we're processing a `*.dwp` packed dwarf file.\n         //\n-        // We cannot rely on the .o paths in the exectuable because they may have been\n+        // We cannot rely on the .o paths in the executable because they may have been\n         // remapped by --remap-path-prefix and therefore invalid, so we need to provide\n         // the .o/.dwo paths explicitly.\n         SplitDebuginfo::Packed => link_dwarf_object(sess, codegen_results, out_filename),"}, {"sha": "a838787381d3f6f2dc825b22993b213062e45143", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2b9441e789b192b47be510b302b21fdfbaf3a2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2b9441e789b192b47be510b302b21fdfbaf3a2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=eb2b9441e789b192b47be510b302b21fdfbaf3a2", "patch": "@@ -1338,7 +1338,7 @@ impl<'a> Linker for WasmLd<'a> {\n         }\n \n         // LLD will hide these otherwise-internal symbols since it only exports\n-        // symbols explicity passed via the `--export` flags above and hides all\n+        // symbols explicitly passed via the `--export` flags above and hides all\n         // others. Various bits and pieces of tooling use this, so be sure these\n         // symbols make their way out of the linker as well.\n         self.cmd.arg(\"--export=__heap_base\");"}, {"sha": "131eeef4582de6fc35df95d90470cf9881bf48e1", "filename": "compiler/rustc_data_structures/src/sso/either_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2b9441e789b192b47be510b302b21fdfbaf3a2/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Feither_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2b9441e789b192b47be510b302b21fdfbaf3a2/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Feither_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsso%2Feither_iter.rs?ref=eb2b9441e789b192b47be510b302b21fdfbaf3a2", "patch": "@@ -7,7 +7,7 @@ use std::iter::Iterator;\n /// one of two specific implementations.\n ///\n /// Note: For most methods providing custom\n-///       implementation may margianlly\n+///       implementation may marginally\n ///       improve performance by avoiding\n ///       doing Left/Right match on every step\n ///       and doing it only once instead."}, {"sha": "4c93d661fd2fd8b9c4e3e9599fcbe4ee09f53db1", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb2b9441e789b192b47be510b302b21fdfbaf3a2/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb2b9441e789b192b47be510b302b21fdfbaf3a2/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=eb2b9441e789b192b47be510b302b21fdfbaf3a2", "patch": "@@ -50,7 +50,7 @@ impl DefPathTable {\n             // Continuing with colliding DefPathHashes can lead to correctness\n             // issues. We must abort compilation.\n             //\n-            // The likelyhood of such a collision is very small, so actually\n+            // The likelihood of such a collision is very small, so actually\n             // running into one could be indicative of a poor hash function\n             // being used.\n             //"}]}