{"sha": "eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhYzVmYjhiMGFiODU3MGI4NDc1NTQ1ZjQzNzhjYjM1NDgxZTlmYTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-19T09:29:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-19T09:29:51Z"}, "message": "Rollup merge of #67189 - LeSeulArtichaut:binop-wording, r=estebank\n\nUnify binop wording\n\nCloses #60497\nr? @estebank", "tree": {"sha": "1fb34c1dc6715165572225efa030258937d4355f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fb34c1dc6715165572225efa030258937d4355f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd+0MQCRBK7hj4Ov3rIwAAdHIIAFH0aMoUJ3KN0S6LyuqEMx2Q\nGVYFz2lNT+qWX/4CrSgbZ0ltqD2T45AqKEPVAIVcTGrvloTJf4EWJlUFqdS0XiZc\nznlJphdZ4yGEEmfii1LWdzbypK0UahrgyTBw300TKfr18tuHACDTLZ3JztoP6elZ\nE2xlSVWjAtQQBjrOmKAWzphtvi8vEvOKMTRgkdG6n4Q+U36PNWDB6UOk0Jh4vlx5\nAjpWve8NLiQTvPpgBwd5ZJuPopl9PYwk341s8FaqL5QMMwke82E9Jd6e5A2KK+lg\nm95x61HVKUacooCUveXaNPCqfOCXsJmA+LOQ4BAjj4+lmMHMAt5dtAA3fxuOr08=\n=81B6\n-----END PGP SIGNATURE-----\n", "payload": "tree 1fb34c1dc6715165572225efa030258937d4355f\nparent c605199e89572e586a5f37bc698c48b6a10896fb\nparent e4abcfbd34f759c33da6f6d7e37235c15ede07c2\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1576747791 +0100\ncommitter GitHub <noreply@github.com> 1576747791 +0100\n\nRollup merge of #67189 - LeSeulArtichaut:binop-wording, r=estebank\n\nUnify binop wording\n\nCloses #60497\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "html_url": "https://github.com/rust-lang/rust/commit/eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c605199e89572e586a5f37bc698c48b6a10896fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c605199e89572e586a5f37bc698c48b6a10896fb", "html_url": "https://github.com/rust-lang/rust/commit/c605199e89572e586a5f37bc698c48b6a10896fb"}, {"sha": "e4abcfbd34f759c33da6f6d7e37235c15ede07c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4abcfbd34f759c33da6f6d7e37235c15ede07c2", "html_url": "https://github.com/rust-lang/rust/commit/e4abcfbd34f759c33da6f6d7e37235c15ede07c2"}], "stats": {"total": 265, "additions": 153, "deletions": 112}, "files": [{"sha": "4f20a91e4b0136b227c267561d8af59f42ae47df", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 63, "deletions": 22, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -334,10 +334,70 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             err.emit();\n                         }\n                         IsAssign::No => {\n+                            let (message, missing_trait) = match op.node {\n+                                hir::BinOpKind::Add    => {\n+                                    (format!(\"cannot add `{}` to `{}`\", rhs_ty, lhs_ty),\n+                                    Some(\"std::ops::Add\"))\n+                                },\n+                                hir::BinOpKind::Sub    => {\n+                                    (format!(\"cannot substract `{}` from `{}`\", rhs_ty, lhs_ty),\n+                                    Some(\"std::ops::Sub\"))\n+                                },\n+                                hir::BinOpKind::Mul    => {\n+                                    (format!(\"cannot multiply `{}` to `{}`\", rhs_ty, lhs_ty),\n+                                    Some(\"std::ops::Mul\"))\n+                                },\n+                                hir::BinOpKind::Div    => {\n+                                    (format!(\"cannot divide `{}` by `{}`\", lhs_ty, rhs_ty),\n+                                    Some(\"std::ops::Div\"))\n+                                },\n+                                hir::BinOpKind::Rem    => {\n+                                    (format!(\"cannot mod `{}` by `{}`\", lhs_ty, rhs_ty),\n+                                    Some(\"std::ops::Rem\"))\n+                                },\n+                                hir::BinOpKind::BitAnd => {\n+                                    (format!(\"no implementation for `{} & {}`\", lhs_ty, rhs_ty),\n+                                    Some(\"std::ops::BitAnd\"))\n+                                },\n+                                hir::BinOpKind::BitXor => {\n+                                    (format!(\"no implementation for `{} ^ {}`\", lhs_ty, rhs_ty),\n+                                    Some(\"std::ops::BitXor\"))\n+                                },\n+                                hir::BinOpKind::BitOr  => {\n+                                    (format!(\"no implementation for `{} | {}`\", lhs_ty, rhs_ty),\n+                                    Some(\"std::ops::BitOr\"))\n+                                },\n+                                hir::BinOpKind::Shl    => {\n+                                    (format!(\"no implementation for `{} << {}`\", lhs_ty, rhs_ty),\n+                                    Some(\"std::ops::Shl\"))\n+                                },\n+                                hir::BinOpKind::Shr    => {\n+                                    (format!(\"no implementation for `{} >> {}`\", lhs_ty, rhs_ty),\n+                                    Some(\"std::ops::Shr\"))\n+                                },\n+                                hir::BinOpKind::Eq |\n+                                hir::BinOpKind::Ne     => {\n+                                    (format!(\n+                                            \"binary operation `{}` cannot be applied to type `{}`\",\n+                                            op.node.as_str(), lhs_ty),\n+                                    Some(\"std::cmp::PartialEq\"))\n+                                },\n+                                hir::BinOpKind::Lt |\n+                                hir::BinOpKind::Le |\n+                                hir::BinOpKind::Gt |\n+                                hir::BinOpKind::Ge     => {\n+                                    (format!(\n+                                            \"binary operation `{}` cannot be applied to type `{}`\",\n+                                            op.node.as_str(), lhs_ty),\n+                                    Some(\"std::cmp::PartialOrd\"))\n+                                }\n+                                _ => (format!(\n+                                        \"binary operation `{}` cannot be applied to type `{}`\",\n+                                        op.node.as_str(), lhs_ty),\n+                                    None)\n+                            };\n                             let mut err = struct_span_err!(self.tcx.sess, op.span, E0369,\n-                                \"binary operation `{}` cannot be applied to type `{}`\",\n-                                op.node.as_str(),\n-                                lhs_ty);\n+                                \"{}\", message.as_str());\n \n                             let mut involves_fn = false;\n                             if !lhs_expr.span.eq(&rhs_expr.span) {\n@@ -382,25 +442,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     }\n                                 }\n                             }\n-                            let missing_trait = match op.node {\n-                                hir::BinOpKind::Add    => Some(\"std::ops::Add\"),\n-                                hir::BinOpKind::Sub    => Some(\"std::ops::Sub\"),\n-                                hir::BinOpKind::Mul    => Some(\"std::ops::Mul\"),\n-                                hir::BinOpKind::Div    => Some(\"std::ops::Div\"),\n-                                hir::BinOpKind::Rem    => Some(\"std::ops::Rem\"),\n-                                hir::BinOpKind::BitAnd => Some(\"std::ops::BitAnd\"),\n-                                hir::BinOpKind::BitXor => Some(\"std::ops::BitXor\"),\n-                                hir::BinOpKind::BitOr  => Some(\"std::ops::BitOr\"),\n-                                hir::BinOpKind::Shl    => Some(\"std::ops::Shl\"),\n-                                hir::BinOpKind::Shr    => Some(\"std::ops::Shr\"),\n-                                hir::BinOpKind::Eq |\n-                                hir::BinOpKind::Ne => Some(\"std::cmp::PartialEq\"),\n-                                hir::BinOpKind::Lt |\n-                                hir::BinOpKind::Le |\n-                                hir::BinOpKind::Gt |\n-                                hir::BinOpKind::Ge => Some(\"std::cmp::PartialOrd\"),\n-                                _ => None\n-                            };\n                             if let Some(missing_trait) = missing_trait {\n                                 if op.node == hir::BinOpKind::Add &&\n                                     self.check_str_addition("}, {"sha": "4bef1012e33deb8895c125f6ccb0a7d840fc56da", "filename": "src/test/ui/autoderef-full-lval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fautoderef-full-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fautoderef-full-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fautoderef-full-lval.rs?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -13,13 +13,13 @@ fn main() {\n     let a: Clam = Clam{x: box 1, y: box 2};\n     let b: Clam = Clam{x: box 10, y: box 20};\n     let z: isize = a.x + b.y;\n-    //~^ ERROR binary operation `+` cannot be applied to type `std::boxed::Box<isize>`\n+    //~^ ERROR cannot add `std::boxed::Box<isize>` to `std::boxed::Box<isize>`\n     println!(\"{}\", z);\n     assert_eq!(z, 21);\n     let forty: Fish = Fish{a: box 40};\n     let two: Fish = Fish{a: box 2};\n     let answer: isize = forty.a + two.a;\n-    //~^ ERROR binary operation `+` cannot be applied to type `std::boxed::Box<isize>`\n+    //~^ ERROR cannot add `std::boxed::Box<isize>` to `std::boxed::Box<isize>`\n     println!(\"{}\", answer);\n     assert_eq!(answer, 42);\n }"}, {"sha": "e2870ef8062d36be12d5b5febaa76697afe0d203", "filename": "src/test/ui/autoderef-full-lval.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fautoderef-full-lval.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fautoderef-full-lval.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fautoderef-full-lval.stderr?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -1,4 +1,4 @@\n-error[E0369]: binary operation `+` cannot be applied to type `std::boxed::Box<isize>`\n+error[E0369]: cannot add `std::boxed::Box<isize>` to `std::boxed::Box<isize>`\n   --> $DIR/autoderef-full-lval.rs:15:24\n    |\n LL |     let z: isize = a.x + b.y;\n@@ -8,7 +8,7 @@ LL |     let z: isize = a.x + b.y;\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `std::boxed::Box<isize>`\n \n-error[E0369]: binary operation `+` cannot be applied to type `std::boxed::Box<isize>`\n+error[E0369]: cannot add `std::boxed::Box<isize>` to `std::boxed::Box<isize>`\n   --> $DIR/autoderef-full-lval.rs:21:33\n    |\n LL |     let answer: isize = forty.a + two.a;"}, {"sha": "67e01b9327db1ec904673ca293afe7cfffb6daa3", "filename": "src/test/ui/binary-op-on-double-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.rs?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -2,7 +2,7 @@ fn main() {\n     let v = vec![1, 2, 3, 4, 5, 6, 7, 8, 9];\n     let vr = v.iter().filter(|x| {\n         x % 2 == 0\n-        //~^ ERROR binary operation `%` cannot be applied to type `&&{integer}`\n+        //~^ ERROR cannot mod `&&{integer}` by `{integer}`\n     });\n     println!(\"{:?}\", vr);\n }"}, {"sha": "6c405333ec681e06f95ca1f7ce65e7bc75cf988b", "filename": "src/test/ui/binary-op-on-double-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.stderr?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -1,4 +1,4 @@\n-error[E0369]: binary operation `%` cannot be applied to type `&&{integer}`\n+error[E0369]: cannot mod `&&{integer}` by `{integer}`\n   --> $DIR/binary-op-on-double-ref.rs:4:11\n    |\n LL |         x % 2 == 0"}, {"sha": "e98ea4df97defc71fe5dee49a36e714823fd30bf", "filename": "src/test/ui/binop/binop-bitxor-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fbinop%2Fbinop-bitxor-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fbinop%2Fbinop-bitxor-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-bitxor-str.rs?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern:`^` cannot be applied to type `std::string::String`\n+// error-pattern:no implementation for `std::string::String ^ std::string::String`\n \n fn main() { let x = \"a\".to_string() ^ \"b\".to_string(); }"}, {"sha": "9a0d301d86356e0911a30975e0a5c1c408bc96e9", "filename": "src/test/ui/binop/binop-bitxor-str.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fbinop%2Fbinop-bitxor-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fbinop%2Fbinop-bitxor-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-bitxor-str.stderr?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -1,4 +1,4 @@\n-error[E0369]: binary operation `^` cannot be applied to type `std::string::String`\n+error[E0369]: no implementation for `std::string::String ^ std::string::String`\n   --> $DIR/binop-bitxor-str.rs:3:37\n    |\n LL | fn main() { let x = \"a\".to_string() ^ \"b\".to_string(); }"}, {"sha": "27b2f8bb3ff3009ba6c55c705b7cc8ccb58f8a45", "filename": "src/test/ui/binop/binop-mul-bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-bool.rs?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern:`*` cannot be applied to type `bool`\n+// error-pattern:cannot multiply `bool` to `bool`\n \n fn main() { let x = true * false; }"}, {"sha": "ade220255893402315547b415f721f48b398e138", "filename": "src/test/ui/binop/binop-mul-bool.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-bool.stderr?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -1,4 +1,4 @@\n-error[E0369]: binary operation `*` cannot be applied to type `bool`\n+error[E0369]: cannot multiply `bool` to `bool`\n   --> $DIR/binop-mul-bool.rs:3:26\n    |\n LL | fn main() { let x = true * false; }"}, {"sha": "812fe95db4e57dcf045135cb6e144ca38058277c", "filename": "src/test/ui/binop/binop-typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fbinop%2Fbinop-typeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fbinop%2Fbinop-typeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-typeck.rs?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -4,5 +4,5 @@ fn main() {\n     let x = true;\n     let y = 1;\n     let z = x + y;\n-    //~^ ERROR binary operation `+` cannot be applied to type `bool`\n+    //~^ ERROR cannot add `{integer}` to `bool`\n }"}, {"sha": "ebf82079ef2e8b044c731d8f6318f9464a6ee3ad", "filename": "src/test/ui/binop/binop-typeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fbinop%2Fbinop-typeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fbinop%2Fbinop-typeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-typeck.stderr?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -1,4 +1,4 @@\n-error[E0369]: binary operation `+` cannot be applied to type `bool`\n+error[E0369]: cannot add `{integer}` to `bool`\n   --> $DIR/binop-typeck.rs:6:15\n    |\n LL |     let z = x + y;"}, {"sha": "8d9fc20f0d0d6ef0dd5189e4fd45d8895c49b2f3", "filename": "src/test/ui/for/for-loop-type-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Ffor%2Ffor-loop-type-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Ffor%2Ffor-loop-type-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-loop-type-error.rs?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -1,5 +1,5 @@\n pub fn main() {\n-    let x = () + (); //~ ERROR binary operation\n+    let x = () + (); //~ ERROR cannot add `()` to `()`\n \n     // this shouldn't have a flow-on error:\n     for _ in x {}"}, {"sha": "0ed26384f40643f84f44506f9c9eddb7e10a20db", "filename": "src/test/ui/for/for-loop-type-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Ffor%2Ffor-loop-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Ffor%2Ffor-loop-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-loop-type-error.stderr?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -1,4 +1,4 @@\n-error[E0369]: binary operation `+` cannot be applied to type `()`\n+error[E0369]: cannot add `()` to `()`\n   --> $DIR/for-loop-type-error.rs:2:16\n    |\n LL |     let x = () + ();"}, {"sha": "4acb51a4e50fa6ff08281ea6faedf4da716b7445", "filename": "src/test/ui/issues/issue-14915.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-14915.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-14915.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14915.rs?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -4,5 +4,5 @@ fn main() {\n     let x: Box<isize> = box 0;\n \n     println!(\"{}\", x + 1);\n-    //~^ ERROR binary operation `+` cannot be applied to type `std::boxed::Box<isize>`\n+    //~^ ERROR cannot add `{integer}` to `std::boxed::Box<isize>`\n }"}, {"sha": "00b9909af59791c09ebbd198f01d0b8d2bad05a7", "filename": "src/test/ui/issues/issue-14915.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-14915.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-14915.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14915.stderr?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -1,4 +1,4 @@\n-error[E0369]: binary operation `+` cannot be applied to type `std::boxed::Box<isize>`\n+error[E0369]: cannot add `{integer}` to `std::boxed::Box<isize>`\n   --> $DIR/issue-14915.rs:6:22\n    |\n LL |     println!(\"{}\", x + 1);"}, {"sha": "34726fba9c66a58323410c5b3be2db6ea8a9a3b4", "filename": "src/test/ui/issues/issue-24363.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-24363.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-24363.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24363.rs?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     1.create_a_type_error[ //~ `{integer}` is a primitive type and therefore doesn't have fields\n-        ()+() //~ ERROR binary operation `+` cannot be applied\n+        ()+() //~ ERROR cannot add\n               //   ^ ensure that we typeck the inner expression ^\n     ];\n }"}, {"sha": "a60fb24ec1209febc5da490b33aa475ac43db2f5", "filename": "src/test/ui/issues/issue-24363.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-24363.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-24363.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24363.stderr?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -4,7 +4,7 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n LL |     1.create_a_type_error[\n    |       ^^^^^^^^^^^^^^^^^^^\n \n-error[E0369]: binary operation `+` cannot be applied to type `()`\n+error[E0369]: cannot add `()` to `()`\n   --> $DIR/issue-24363.rs:3:11\n    |\n LL |         ()+()"}, {"sha": "438a4c521b198f8dcfeaa185f07f826eb77fc8f9", "filename": "src/test/ui/issues/issue-28837.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-28837.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-28837.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28837.rs?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -3,23 +3,23 @@ struct A;\n fn main() {\n     let a = A;\n \n-    a + a; //~ ERROR binary operation `+` cannot be applied to type `A`\n+    a + a; //~ ERROR cannot add `A` to `A`\n \n-    a - a; //~ ERROR binary operation `-` cannot be applied to type `A`\n+    a - a; //~ ERROR cannot substract `A` from `A`\n \n-    a * a; //~ ERROR binary operation `*` cannot be applied to type `A`\n+    a * a; //~ ERROR cannot multiply `A` to `A`\n \n-    a / a; //~ ERROR binary operation `/` cannot be applied to type `A`\n+    a / a; //~ ERROR cannot divide `A` by `A`\n \n-    a % a; //~ ERROR binary operation `%` cannot be applied to type `A`\n+    a % a; //~ ERROR cannot mod `A` by `A`\n \n-    a & a; //~ ERROR binary operation `&` cannot be applied to type `A`\n+    a & a; //~ ERROR no implementation for `A & A`\n \n-    a | a; //~ ERROR binary operation `|` cannot be applied to type `A`\n+    a | a; //~ ERROR no implementation for `A | A`\n \n-    a << a; //~ ERROR binary operation `<<` cannot be applied to type `A`\n+    a << a; //~ ERROR no implementation for `A << A`\n \n-    a >> a; //~ ERROR binary operation `>>` cannot be applied to type `A`\n+    a >> a; //~ ERROR no implementation for `A >> A`\n \n     a == a; //~ ERROR binary operation `==` cannot be applied to type `A`\n "}, {"sha": "2ef571b576f891377cd5c6fe3532c590a9197f9a", "filename": "src/test/ui/issues/issue-28837.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-28837.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-28837.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28837.stderr?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -1,4 +1,4 @@\n-error[E0369]: binary operation `+` cannot be applied to type `A`\n+error[E0369]: cannot add `A` to `A`\n   --> $DIR/issue-28837.rs:6:7\n    |\n LL |     a + a;\n@@ -8,7 +8,7 @@ LL |     a + a;\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `A`\n \n-error[E0369]: binary operation `-` cannot be applied to type `A`\n+error[E0369]: cannot substract `A` from `A`\n   --> $DIR/issue-28837.rs:8:7\n    |\n LL |     a - a;\n@@ -18,7 +18,7 @@ LL |     a - a;\n    |\n    = note: an implementation of `std::ops::Sub` might be missing for `A`\n \n-error[E0369]: binary operation `*` cannot be applied to type `A`\n+error[E0369]: cannot multiply `A` to `A`\n   --> $DIR/issue-28837.rs:10:7\n    |\n LL |     a * a;\n@@ -28,7 +28,7 @@ LL |     a * a;\n    |\n    = note: an implementation of `std::ops::Mul` might be missing for `A`\n \n-error[E0369]: binary operation `/` cannot be applied to type `A`\n+error[E0369]: cannot divide `A` by `A`\n   --> $DIR/issue-28837.rs:12:7\n    |\n LL |     a / a;\n@@ -38,7 +38,7 @@ LL |     a / a;\n    |\n    = note: an implementation of `std::ops::Div` might be missing for `A`\n \n-error[E0369]: binary operation `%` cannot be applied to type `A`\n+error[E0369]: cannot mod `A` by `A`\n   --> $DIR/issue-28837.rs:14:7\n    |\n LL |     a % a;\n@@ -48,7 +48,7 @@ LL |     a % a;\n    |\n    = note: an implementation of `std::ops::Rem` might be missing for `A`\n \n-error[E0369]: binary operation `&` cannot be applied to type `A`\n+error[E0369]: no implementation for `A & A`\n   --> $DIR/issue-28837.rs:16:7\n    |\n LL |     a & a;\n@@ -58,7 +58,7 @@ LL |     a & a;\n    |\n    = note: an implementation of `std::ops::BitAnd` might be missing for `A`\n \n-error[E0369]: binary operation `|` cannot be applied to type `A`\n+error[E0369]: no implementation for `A | A`\n   --> $DIR/issue-28837.rs:18:7\n    |\n LL |     a | a;\n@@ -68,7 +68,7 @@ LL |     a | a;\n    |\n    = note: an implementation of `std::ops::BitOr` might be missing for `A`\n \n-error[E0369]: binary operation `<<` cannot be applied to type `A`\n+error[E0369]: no implementation for `A << A`\n   --> $DIR/issue-28837.rs:20:7\n    |\n LL |     a << a;\n@@ -78,7 +78,7 @@ LL |     a << a;\n    |\n    = note: an implementation of `std::ops::Shl` might be missing for `A`\n \n-error[E0369]: binary operation `>>` cannot be applied to type `A`\n+error[E0369]: no implementation for `A >> A`\n   --> $DIR/issue-28837.rs:22:7\n    |\n LL |     a >> a;"}, {"sha": "f9c35526ec3423ac371430bcaeb943ff0b896bf5", "filename": "src/test/ui/issues/issue-31076.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-31076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-31076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31076.rs?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -11,7 +11,7 @@ impl Add<i32> for i32 {}\n \n fn main() {\n     let x = 5 + 6;\n-    //~^ ERROR binary operation `+` cannot be applied to type `{integer}`\n+    //~^ ERROR cannot add `{integer}` to `{integer}`\n     let y = 5i32 + 6i32;\n-    //~^ ERROR binary operation `+` cannot be applied to type `i32`\n+    //~^ ERROR cannot add `i32` to `i32`\n }"}, {"sha": "5d65734cd230a784b5e565d04c2c1acae4a6bb4c", "filename": "src/test/ui/issues/issue-31076.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-31076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-31076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31076.stderr?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -1,4 +1,4 @@\n-error[E0369]: binary operation `+` cannot be applied to type `{integer}`\n+error[E0369]: cannot add `{integer}` to `{integer}`\n   --> $DIR/issue-31076.rs:13:15\n    |\n LL |     let x = 5 + 6;\n@@ -8,7 +8,7 @@ LL |     let x = 5 + 6;\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `{integer}`\n \n-error[E0369]: binary operation `+` cannot be applied to type `i32`\n+error[E0369]: cannot add `i32` to `i32`\n   --> $DIR/issue-31076.rs:15:18\n    |\n LL |     let y = 5i32 + 6i32;"}, {"sha": "6f6dfb00f86b71f89fd45361279c5a611b35203e", "filename": "src/test/ui/issues/issue-35668.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-35668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-35668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35668.rs?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -1,6 +1,6 @@\n fn func<'a, T>(a: &'a [T]) -> impl Iterator<Item=&'a T> {\n     a.iter().map(|a| a*a)\n-    //~^ ERROR binary operation `*` cannot be applied to type `&T`\n+    //~^ ERROR cannot multiply `&T` to `&T`\n }\n \n fn main() {"}, {"sha": "9d5796a5eefed079a5790a80e96aca76f5cb8102", "filename": "src/test/ui/issues/issue-35668.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-35668.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-35668.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35668.stderr?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -1,4 +1,4 @@\n-error[E0369]: binary operation `*` cannot be applied to type `&T`\n+error[E0369]: cannot multiply `&T` to `&T`\n   --> $DIR/issue-35668.rs:2:23\n    |\n LL |     a.iter().map(|a| a*a)"}, {"sha": "c090654623206b85b75f097bc6e269fe88457b05", "filename": "src/test/ui/issues/issue-3820.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-3820.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-3820.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3820.rs?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -11,5 +11,5 @@ impl Thing {\n fn main() {\n     let u = Thing {x: 2};\n     let _v = u.mul(&3); // This is ok\n-    let w = u * 3; //~ ERROR binary operation `*` cannot be applied to type `Thing`\n+    let w = u * 3; //~ ERROR cannot multiply `{integer}` to `Thing`\n }"}, {"sha": "8cc768237a9486d0542cac2d90588b4ff8ce2487", "filename": "src/test/ui/issues/issue-3820.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-3820.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-3820.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3820.stderr?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -1,4 +1,4 @@\n-error[E0369]: binary operation `*` cannot be applied to type `Thing`\n+error[E0369]: cannot multiply `{integer}` to `Thing`\n   --> $DIR/issue-3820.rs:14:15\n    |\n LL |     let w = u * 3;"}, {"sha": "c01233605b57cbbfffada4bccdcf327012b87af9", "filename": "src/test/ui/issues/issue-40610.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-40610.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-40610.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40610.rs?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -2,5 +2,5 @@ fn f(_: &[f32]) {}\n \n fn main() {\n     () + f(&[1.0]);\n-    //~^ ERROR binary operation `+` cannot be applied to type `()`\n+    //~^ ERROR cannot add `()` to `()`\n }"}, {"sha": "95f45c168e1222d3cdb825a24b00513368b41d04", "filename": "src/test/ui/issues/issue-40610.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-40610.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-40610.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40610.stderr?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -1,4 +1,4 @@\n-error[E0369]: binary operation `+` cannot be applied to type `()`\n+error[E0369]: cannot add `()` to `()`\n   --> $DIR/issue-40610.rs:4:8\n    |\n LL |     () + f(&[1.0]);"}, {"sha": "64873ac35a00213e78fc7479e75ba180f5029a34", "filename": "src/test/ui/issues/issue-41394.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-41394.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-41394.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41394.rs?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -1,6 +1,6 @@\n enum Foo {\n     A = \"\" + 1\n-    //~^ ERROR binary operation `+` cannot be applied to type `&str`\n+    //~^ ERROR cannot add `{integer}` to `&str`\n }\n \n enum Bar {"}, {"sha": "3f60ea4bbf73a1cc38107520779b81ec2c442616", "filename": "src/test/ui/issues/issue-41394.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-41394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-41394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41394.stderr?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -1,4 +1,4 @@\n-error[E0369]: binary operation `+` cannot be applied to type `&str`\n+error[E0369]: cannot add `{integer}` to `&str`\n   --> $DIR/issue-41394.rs:2:12\n    |\n LL |     A = \"\" + 1"}, {"sha": "5f785679c5587791799534f2a6dc19e76a72dc70", "filename": "src/test/ui/issues/issue-47377.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-47377.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-47377.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47377.stderr?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -1,4 +1,4 @@\n-error[E0369]: binary operation `+` cannot be applied to type `&str`\n+error[E0369]: cannot add `&str` to `&str`\n   --> $DIR/issue-47377.rs:4:14\n    |\n LL |      let _a = b + \", World!\";"}, {"sha": "216e32ddae4115e4bbc7bd65e919a1b2a98a9ba1", "filename": "src/test/ui/issues/issue-47380.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-47380.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fissues%2Fissue-47380.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47380.stderr?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -1,4 +1,4 @@\n-error[E0369]: binary operation `+` cannot be applied to type `&str`\n+error[E0369]: cannot add `&str` to `&str`\n   --> $DIR/issue-47380.rs:3:35\n    |\n LL |     println!(\"\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\"); let _a = b + \", World!\";"}, {"sha": "ce6836f30f9461e4ed3e8d12e5b0b0bf107011b0", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.rs?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -21,7 +21,7 @@ use E::*;\n \n fn no_top_level_or_patterns() {\n     // We do *not* allow or-patterns at the top level of lambdas...\n-    let _ = |A | B: E| (); //~ ERROR binary operation `|` cannot be applied to type `E`\n+    let _ = |A | B: E| (); //~ ERROR no implementation for `E | ()`\n     //           -------- This looks like an or-pattern but is in fact `|A| (B: E | ())`.\n \n     // ...and for now neither do we allow or-patterns at the top level of functions."}, {"sha": "e77d92e8b07d9d1138fb9b2529be5a1b801564bb", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -104,7 +104,7 @@ LL | #![feature(or_patterns)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0369]: binary operation `|` cannot be applied to type `E`\n+error[E0369]: no implementation for `E | ()`\n   --> $DIR/or-patterns-syntactic-fail.rs:24:22\n    |\n LL |     let _ = |A | B: E| ();"}, {"sha": "4c6d515b86af348166d1aed9bf4538cf3c6bcb61", "filename": "src/test/ui/pattern/pattern-tyvar-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar-2.rs?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -1,6 +1,6 @@\n enum Bar { T1((), Option<Vec<isize>>), T2, }\n \n fn foo(t: Bar) -> isize { match t { Bar::T1(_, Some(x)) => { return x * 3; } _ => { panic!(); } } }\n-//~^ ERROR binary operation `*` cannot be applied to\n+//~^ ERROR cannot multiply `{integer}` to `std::vec::Vec<isize>`\n \n fn main() { }"}, {"sha": "bb3e61017d4876d05eb83ca414e510c3002bdc94", "filename": "src/test/ui/pattern/pattern-tyvar-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar-2.stderr?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -1,4 +1,4 @@\n-error[E0369]: binary operation `*` cannot be applied to type `std::vec::Vec<isize>`\n+error[E0369]: cannot multiply `{integer}` to `std::vec::Vec<isize>`\n   --> $DIR/pattern-tyvar-2.rs:3:71\n    |\n LL | fn foo(t: Bar) -> isize { match t { Bar::T1(_, Some(x)) => { return x * 3; } _ => { panic!(); } } }"}, {"sha": "b6db4008db0d76e634b3e5b2fe4e727a1c3b0920", "filename": "src/test/ui/span/issue-39018.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fspan%2Fissue-39018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fspan%2Fissue-39018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.rs?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -1,15 +1,15 @@\n pub fn main() {\n     let x = \"Hello \" + \"World!\";\n-    //~^ ERROR cannot be applied to type\n+    //~^ ERROR cannot add\n \n     // Make sure that the span outputs a warning\n     // for not having an implementation for std::ops::Add\n     // that won't output for the above string concatenation\n     let y = World::Hello + World::Goodbye;\n-    //~^ ERROR cannot be applied to type\n+    //~^ ERROR cannot add\n \n     let x = \"Hello \" + \"World!\".to_owned();\n-    //~^ ERROR cannot be applied to type\n+    //~^ ERROR cannot add\n }\n \n enum World {\n@@ -23,16 +23,16 @@ fn foo() {\n     let c = \"\";\n     let d = \"\";\n     let e = &a;\n-    let _ = &a + &b; //~ ERROR binary operation\n-    let _ = &a + b; //~ ERROR binary operation\n+    let _ = &a + &b; //~ ERROR cannot add\n+    let _ = &a + b; //~ ERROR cannot add\n     let _ = a + &b; // ok\n     let _ = a + b; //~ ERROR mismatched types\n-    let _ = e + b; //~ ERROR binary operation\n-    let _ = e + &b; //~ ERROR binary operation\n-    let _ = e + d; //~ ERROR binary operation\n-    let _ = e + &d; //~ ERROR binary operation\n-    let _ = &c + &d; //~ ERROR binary operation\n-    let _ = &c + d; //~ ERROR binary operation\n-    let _ = c + &d; //~ ERROR binary operation\n-    let _ = c + d; //~ ERROR binary operation\n+    let _ = e + b; //~ ERROR cannot add\n+    let _ = e + &b; //~ ERROR cannot add\n+    let _ = e + d; //~ ERROR cannot add\n+    let _ = e + &d; //~ ERROR cannot add\n+    let _ = &c + &d; //~ ERROR cannot add\n+    let _ = &c + d; //~ ERROR cannot add\n+    let _ = c + &d; //~ ERROR cannot add\n+    let _ = c + d; //~ ERROR cannot add\n }"}, {"sha": "8a32561bd01db44beed7fb96549b79b9be66bdef", "filename": "src/test/ui/span/issue-39018.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -1,4 +1,4 @@\n-error[E0369]: binary operation `+` cannot be applied to type `&str`\n+error[E0369]: cannot add `&str` to `&str`\n   --> $DIR/issue-39018.rs:2:22\n    |\n LL |     let x = \"Hello \" + \"World!\";\n@@ -12,7 +12,7 @@ help: `to_owned()` can be used to create an owned `String` from a string referen\n LL |     let x = \"Hello \".to_owned() + \"World!\";\n    |             ^^^^^^^^^^^^^^^^^^^\n \n-error[E0369]: binary operation `+` cannot be applied to type `World`\n+error[E0369]: cannot add `World` to `World`\n   --> $DIR/issue-39018.rs:8:26\n    |\n LL |     let y = World::Hello + World::Goodbye;\n@@ -22,7 +22,7 @@ LL |     let y = World::Hello + World::Goodbye;\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `World`\n \n-error[E0369]: binary operation `+` cannot be applied to type `&str`\n+error[E0369]: cannot add `std::string::String` to `&str`\n   --> $DIR/issue-39018.rs:11:22\n    |\n LL |     let x = \"Hello \" + \"World!\".to_owned();\n@@ -36,7 +36,7 @@ help: `to_owned()` can be used to create an owned `String` from a string referen\n LL |     let x = \"Hello \".to_owned() + &\"World!\".to_owned();\n    |             ^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^\n \n-error[E0369]: binary operation `+` cannot be applied to type `&std::string::String`\n+error[E0369]: cannot add `&std::string::String` to `&std::string::String`\n   --> $DIR/issue-39018.rs:26:16\n    |\n LL |     let _ = &a + &b;\n@@ -50,7 +50,7 @@ help: String concatenation appends the string on the right to the string on the\n LL |     let _ = a + &b;\n    |             ^\n \n-error[E0369]: binary operation `+` cannot be applied to type `&std::string::String`\n+error[E0369]: cannot add `std::string::String` to `&std::string::String`\n   --> $DIR/issue-39018.rs:27:16\n    |\n LL |     let _ = &a + b;\n@@ -73,7 +73,7 @@ LL |     let _ = a + b;\n    |                 expected `&str`, found struct `std::string::String`\n    |                 help: consider borrowing here: `&b`\n \n-error[E0369]: binary operation `+` cannot be applied to type `&std::string::String`\n+error[E0369]: cannot add `std::string::String` to `&std::string::String`\n   --> $DIR/issue-39018.rs:30:15\n    |\n LL |     let _ = e + b;\n@@ -87,7 +87,7 @@ help: `to_owned()` can be used to create an owned `String` from a string referen\n LL |     let _ = e.to_owned() + &b;\n    |             ^^^^^^^^^^^^   ^^\n \n-error[E0369]: binary operation `+` cannot be applied to type `&std::string::String`\n+error[E0369]: cannot add `&std::string::String` to `&std::string::String`\n   --> $DIR/issue-39018.rs:31:15\n    |\n LL |     let _ = e + &b;\n@@ -101,7 +101,7 @@ help: `to_owned()` can be used to create an owned `String` from a string referen\n LL |     let _ = e.to_owned() + &b;\n    |             ^^^^^^^^^^^^\n \n-error[E0369]: binary operation `+` cannot be applied to type `&std::string::String`\n+error[E0369]: cannot add `&str` to `&std::string::String`\n   --> $DIR/issue-39018.rs:32:15\n    |\n LL |     let _ = e + d;\n@@ -115,7 +115,7 @@ help: `to_owned()` can be used to create an owned `String` from a string referen\n LL |     let _ = e.to_owned() + d;\n    |             ^^^^^^^^^^^^\n \n-error[E0369]: binary operation `+` cannot be applied to type `&std::string::String`\n+error[E0369]: cannot add `&&str` to `&std::string::String`\n   --> $DIR/issue-39018.rs:33:15\n    |\n LL |     let _ = e + &d;\n@@ -129,7 +129,7 @@ help: `to_owned()` can be used to create an owned `String` from a string referen\n LL |     let _ = e.to_owned() + &d;\n    |             ^^^^^^^^^^^^\n \n-error[E0369]: binary operation `+` cannot be applied to type `&&str`\n+error[E0369]: cannot add `&&str` to `&&str`\n   --> $DIR/issue-39018.rs:34:16\n    |\n LL |     let _ = &c + &d;\n@@ -139,7 +139,7 @@ LL |     let _ = &c + &d;\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `&&str`\n \n-error[E0369]: binary operation `+` cannot be applied to type `&&str`\n+error[E0369]: cannot add `&str` to `&&str`\n   --> $DIR/issue-39018.rs:35:16\n    |\n LL |     let _ = &c + d;\n@@ -149,7 +149,7 @@ LL |     let _ = &c + d;\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `&&str`\n \n-error[E0369]: binary operation `+` cannot be applied to type `&str`\n+error[E0369]: cannot add `&&str` to `&str`\n   --> $DIR/issue-39018.rs:36:15\n    |\n LL |     let _ = c + &d;\n@@ -163,7 +163,7 @@ help: `to_owned()` can be used to create an owned `String` from a string referen\n LL |     let _ = c.to_owned() + &d;\n    |             ^^^^^^^^^^^^\n \n-error[E0369]: binary operation `+` cannot be applied to type `&str`\n+error[E0369]: cannot add `&str` to `&str`\n   --> $DIR/issue-39018.rs:37:15\n    |\n LL |     let _ = c + d;"}, {"sha": "23e5f8920622e7247625230d74d10f4fb3e5f16f", "filename": "src/test/ui/str/str-concat-on-double-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.rs?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -2,6 +2,6 @@ fn main() {\n     let a: &String = &\"1\".to_owned();\n     let b: &str = &\"2\";\n     let c = a + b;\n-    //~^ ERROR binary operation `+` cannot be applied to type `&std::string::String`\n+    //~^ ERROR cannot add `&str` to `&std::string::String`\n     println!(\"{:?}\", c);\n }"}, {"sha": "d77e0d8f242d7fec00d6217c5a56c68cabf4920d", "filename": "src/test/ui/str/str-concat-on-double-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.stderr?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -1,4 +1,4 @@\n-error[E0369]: binary operation `+` cannot be applied to type `&std::string::String`\n+error[E0369]: cannot add `&str` to `&std::string::String`\n   --> $DIR/str-concat-on-double-ref.rs:4:15\n    |\n LL |     let c = a + b;"}, {"sha": "1989ea8863592038e57e42fb4a0015ac448cccfb", "filename": "src/test/ui/terminal-width/non-1-width-unicode-multiline-label.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fterminal-width%2Fnon-1-width-unicode-multiline-label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fterminal-width%2Fnon-1-width-unicode-multiline-label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fnon-1-width-unicode-multiline-label.rs?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -3,5 +3,5 @@\n fn main() {\n     let unicode_is_fun = \"\u0601\u2031\u0bb9\u0bf8\u0bf5\ua9c4.\u102a\ua9c5\u2e3b\ud808\ude19\ud809\udc2b\ufdfd\ud808\udf04\ud808\ude1f\ud808\udf7c\ud808\udc4e\ud808\udc31\ud808\udf27\ud808\udd43 \ud808\ude13\ud808\udf59\ud808\ude8e\ud808\udd21\ud808\udd4c\ud808\udc4f\ud808\udc30\ud809\udc2a\ud809\udc29\ud808\ude19\ud809\udc2b\ud869\udea5\";\n     let _ = \"\u0f00\u0f01\u0f02\u0f03\u0f04\u0f05\u0f06\u0f07\u0f08\u0f09\u0f0a\u0f0b\u0f0c\u0f0d\u0f0e\u0f0f\u0f10\u0f11\u0f12\u0f13\u0f14\u0f15\u0f16\u0f17\u0f18\u0f19\u0f1a\u0f1b\u0f1c\u0f1d\u0f1e\u0f1f\u0f20\u0f21\u0f22\u0f23\u0f24\u0f25\u0f26\u0f27\u0f28\u0f29\u0f2a\u0f2b\u0f2c\u0f2d\u0f2e\u0f2f\u0f30\u0f31\u0f32\u0f33\u0f34\u0f35\u0f36\u0f37\u0f38\u0f39\u0f3a\u0f3b\u0f3c\u0f3d\u0f3e\u0f3f\u0f40\u0f41\u0f42\u0f43\u0f44\u0f45\u0f46\u0f47\u0f48\u0f49\u0f4a\u0f4b\u0f4c\u0f4d\u0f4e\u0f4f\u0f50\u0f51\u0f52\u0f53\u0f54\u0f55\u0f56\u0f57\u0f58\u0f59\u0f5a\u0f5b\u0f5c\u0f5d\u0f5e\u0f5f\u0f60\u0f61\u0f62\u0f63\u0f64\u0f65\u0f66\u0f67\u0f68\u0f69\u0f6a\u0f6b\u0f6c\u0f6d\u0f6e\u0f6f\u0f70\u0f71\u0f72\u0f73\u0f74\u0f75\u0f76\u0f77\u0f78\u0f79\u0f7a\u0f7b\u0f7c\u0f7d\u0f7e\u0f7f\u0f80\u0f81\u0f82\u0f83\u0f84\u0f85\u0f86\u0f87\u0f88\u0f89\u0f8a\u0f8b\u0f8c\u0f8d\u0f8e\u0f8f\u0f90\u0f91\u0f92\u0f93\u0f94\u0f95\u0f96\u0f97\u0f98\u0f99\u0f9a\u0f9b\u0f9c\u0f9d\u0f9e\u0f9f\u0fa0\u0fa1\u0fa2\u0fa3\u0fa4\u0fa5\u0fa6\u0fa7\u0fa8\u0fa9\u0faa\u0fab\u0fac\u0fad\u0fae\u0faf\u0fb0\u0fb1\u0fb2\u0fb3\u0fb4\u0fb5\u0fb6\u0fb7\u0fb8\u0fb9\u0fba\u0fbb\u0fbc\u0fbd\u0fbe\u0fbf\u0fc0\u0fc1\u0fc2\u0fc3\u0fc4\u0fc5\u0fc6\u0fc7\u0fc8\u0fc9\u0fca\u0fcb\u0fcc\u0fcd\u0fce\u0fcf\u0fd0\u0fd1\u0fd2\u0fd3\u0fd4\u0fd5\u0fd6\u0fd7\u0fd8\u0fd9\u0fda\"; let _a = unicode_is_fun + \" really fun!\";\n-    //~^ ERROR binary operation `+` cannot be applied to type `&str`\n+    //~^ ERROR cannot add `&str` to `&str`\n }"}, {"sha": "69daa93412a3a40829586072f48a70ad13ad4cdf", "filename": "src/test/ui/terminal-width/non-1-width-unicode-multiline-label.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fterminal-width%2Fnon-1-width-unicode-multiline-label.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fterminal-width%2Fnon-1-width-unicode-multiline-label.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fnon-1-width-unicode-multiline-label.stderr?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -1,4 +1,4 @@\n-error[E0369]: binary operation `+` cannot be applied to type `&str`\n+error[E0369]: cannot add `&str` to `&str`\n   --> $DIR/non-1-width-unicode-multiline-label.rs:5:260\n    |\n LL | ...\u0f7d\u0f7e\u0f7f\u0f80\u0f81\u0f82\u0f83\u0f84\u0f85\u0f86\u0f87\u0f88\u0f89\u0f8a\u0f8b\u0f8c\u0f8d\u0f8e\u0f8f\u0f90\u0f91\u0f92\u0f93\u0f94\u0f95\u0f96\u0f97\u0f98\u0f99\u0f9a\u0f9b\u0f9c\u0f9d\u0f9e\u0f9f\u0fa0\u0fa1\u0fa2\u0fa3\u0fa4\u0fa5\u0fa6\u0fa7\u0fa8\u0fa9\u0faa\u0fab\u0fac\u0fad\u0fae\u0faf\u0fb0\u0fb1\u0fb2\u0fb3\u0fb4\u0fb5\u0fb6\u0fb7\u0fb8\u0fb9\u0fba\u0fbb\u0fbc\u0fbd\u0fbe\u0fbf\u0fc0\u0fc1\u0fc2\u0fc3\u0fc4\u0fc5\u0fc6\u0fc7...\u0fcb\u0fcc\u0fcd\u0fce\u0fcf\u0fd0\u0fd1\u0fd2\u0fd3\u0fd4\u0fd5\u0fd6\u0fd7\u0fd8\u0fd9\u0fda\"; let _a = unicode_is_fun + \" really fun!\";"}, {"sha": "286776985168f78ef5e2f11e0a158efc20b2646c", "filename": "src/test/ui/traits/trait-resolution-in-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Ftraits%2Ftrait-resolution-in-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Ftraits%2Ftrait-resolution-in-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-resolution-in-overloaded-op.rs?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -5,7 +5,7 @@ trait MyMul<Rhs, Res> {\n }\n \n fn foo<T: MyMul<f64, f64>>(a: &T, b: f64) -> f64 {\n-    a * b //~ ERROR binary operation `*` cannot be applied to type `&T`\n+    a * b //~ ERROR cannot multiply `f64` to `&T`\n }\n \n fn main() {}"}, {"sha": "8d7ba36c665b31d19d4cd9ef3af43ba7bdf17f28", "filename": "src/test/ui/traits/trait-resolution-in-overloaded-op.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Ftraits%2Ftrait-resolution-in-overloaded-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Ftraits%2Ftrait-resolution-in-overloaded-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-resolution-in-overloaded-op.stderr?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -1,4 +1,4 @@\n-error[E0369]: binary operation `*` cannot be applied to type `&T`\n+error[E0369]: cannot multiply `f64` to `&T`\n   --> $DIR/trait-resolution-in-overloaded-op.rs:8:7\n    |\n LL |     a * b"}, {"sha": "f61ada3f63ff9a1a9e7afafd4e80526099b9207c", "filename": "src/test/ui/type/type-check/missing_trait_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fmissing_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fmissing_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fmissing_trait_impl.rs?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -2,7 +2,7 @@ fn main() {\n }\n \n fn foo<T>(x: T, y: T) {\n-    let z = x + y; //~ ERROR binary operation `+` cannot be applied to type `T`\n+    let z = x + y; //~ ERROR cannot add `T` to `T`\n }\n \n fn bar<T>(x: T) {"}, {"sha": "7186d6a542dc9db031b8228708f03e52747dff02", "filename": "src/test/ui/type/type-check/missing_trait_impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fmissing_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fmissing_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fmissing_trait_impl.stderr?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -1,4 +1,4 @@\n-error[E0369]: binary operation `+` cannot be applied to type `T`\n+error[E0369]: cannot add `T` to `T`\n   --> $DIR/missing_trait_impl.rs:5:15\n    |\n LL |     let z = x + y;"}, {"sha": "4785178fb2575e825093fe77cd6644d174d1bca4", "filename": "src/test/ui/vec/vec-res-add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fvec%2Fvec-res-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fvec%2Fvec-res-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvec%2Fvec-res-add.rs?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -14,6 +14,6 @@ fn main() {\n     let i = vec![r(0)];\n     let j = vec![r(1)];\n     let k = i + j;\n-    //~^ ERROR binary operation `+` cannot be applied to type\n+    //~^ ERROR cannot add `std::vec::Vec<R>` to `std::vec::Vec<R>`\n     println!(\"{:?}\", j);\n }"}, {"sha": "1cc12a222e50bae2d131809b60e4f0e062979149", "filename": "src/test/ui/vec/vec-res-add.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fvec%2Fvec-res-add.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eac5fb8b0ab8570b8475545f4378cb35481e9fa6/src%2Ftest%2Fui%2Fvec%2Fvec-res-add.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvec%2Fvec-res-add.stderr?ref=eac5fb8b0ab8570b8475545f4378cb35481e9fa6", "patch": "@@ -1,4 +1,4 @@\n-error[E0369]: binary operation `+` cannot be applied to type `std::vec::Vec<R>`\n+error[E0369]: cannot add `std::vec::Vec<R>` to `std::vec::Vec<R>`\n   --> $DIR/vec-res-add.rs:16:15\n    |\n LL |     let k = i + j;"}]}