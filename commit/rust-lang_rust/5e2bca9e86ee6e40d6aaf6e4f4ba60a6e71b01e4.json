{"sha": "5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlMmJjYTllODZlZTZlNDBkNmFhZjZlNGY0YmE2MGE2ZTcxYjAxZTQ=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-15T04:14:38Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-19T15:51:00Z"}, "message": "librustc_trans: use `#[deriving(Copy)]`", "tree": {"sha": "45a3432c1335fa6ef038ef334862b9463b08e746", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45a3432c1335fa6ef038ef334862b9463b08e746"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4", "html_url": "https://github.com/rust-lang/rust/commit/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/comments", "author": null, "committer": null, "parents": [{"sha": "463475b7fa95cfeddbe9e153b1fdf408965252da", "url": "https://api.github.com/repos/rust-lang/rust/commits/463475b7fa95cfeddbe9e153b1fdf408965252da", "html_url": "https://github.com/rust-lang/rust/commit/463475b7fa95cfeddbe9e153b1fdf408965252da"}], "stats": {"total": 152, "additions": 43, "deletions": 109}, "files": [{"sha": "489d29492c227827165d597d182262575c2c0b86", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4", "patch": "@@ -33,7 +33,7 @@ use std::sync::{Arc, Mutex};\n use std::thread;\n use libc::{c_uint, c_int, c_void};\n \n-#[deriving(Clone, PartialEq, PartialOrd, Ord, Eq)]\n+#[deriving(Clone, Copy, PartialEq, PartialOrd, Ord, Eq)]\n pub enum OutputType {\n     OutputTypeBitcode,\n     OutputTypeAssembly,\n@@ -42,8 +42,6 @@ pub enum OutputType {\n     OutputTypeExe,\n }\n \n-impl Copy for OutputType {}\n-\n pub fn llvm_err(handler: &diagnostic::Handler, msg: String) -> ! {\n     unsafe {\n         let cstr = llvm::LLVMRustGetLastError();"}, {"sha": "37d9e5d9940730fbc3b19cf123290301a04daad5", "filename": "src/librustc_trans/save/recorder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Frecorder.rs?ref=5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4", "patch": "@@ -61,6 +61,7 @@ macro_rules! svec {\n     })\n }\n \n+#[deriving(Copy)]\n pub enum Row {\n     Variable,\n     Enum,\n@@ -87,8 +88,6 @@ pub enum Row {\n     FnRef,\n }\n \n-impl Copy for Row {}\n-\n impl<'a> FmtStrs<'a> {\n     pub fn new(rec: Box<Recorder>, span: SpanUtils<'a>, krate: String) -> FmtStrs<'a> {\n         FmtStrs {"}, {"sha": "1401f1ad1f551352fbde3a6a5655ec1082d4f061", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4", "patch": "@@ -228,11 +228,9 @@ use syntax::codemap::Span;\n use syntax::fold::Folder;\n use syntax::ptr::P;\n \n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n struct ConstantExpr<'a>(&'a ast::Expr);\n \n-impl<'a> Copy for ConstantExpr<'a> {}\n-\n impl<'a> ConstantExpr<'a> {\n     fn eq(self, other: ConstantExpr<'a>, tcx: &ty::ctxt) -> bool {\n         let ConstantExpr(expr) = self;\n@@ -301,7 +299,7 @@ impl<'a, 'tcx> Opt<'a, 'tcx> {\n     }\n }\n \n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum BranchKind {\n     NoBranch,\n     Single,\n@@ -310,31 +308,27 @@ pub enum BranchKind {\n     CompareSliceLength\n }\n \n-impl Copy for BranchKind {}\n-\n pub enum OptResult<'blk, 'tcx: 'blk> {\n     SingleResult(Result<'blk, 'tcx>),\n     RangeResult(Result<'blk, 'tcx>, Result<'blk, 'tcx>),\n     LowerBound(Result<'blk, 'tcx>)\n }\n \n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n pub enum TransBindingMode {\n     TrByCopy(/* llbinding */ ValueRef),\n     TrByMove,\n     TrByRef,\n }\n \n-impl Copy for TransBindingMode {}\n-\n /// Information about a pattern binding:\n /// - `llmatch` is a pointer to a stack slot.  The stack slot contains a\n ///   pointer into the value being matched.  Hence, llmatch has type `T**`\n ///   where `T` is the value being matched.\n /// - `trmode` is the trans binding mode\n /// - `id` is the node id of the binding\n /// - `ty` is the Rust type of the binding\n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n pub struct BindingInfo<'tcx> {\n     pub llmatch: ValueRef,\n     pub trmode: TransBindingMode,\n@@ -343,8 +337,6 @@ pub struct BindingInfo<'tcx> {\n     pub ty: Ty<'tcx>,\n }\n \n-impl<'tcx> Copy for BindingInfo<'tcx> {}\n-\n type BindingsMap<'tcx> = FnvHashMap<Ident, BindingInfo<'tcx>>;\n \n struct ArmData<'p, 'blk, 'tcx: 'blk> {"}, {"sha": "f7edb281b9eda7a18fa2320b482893dec800083a", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4", "patch": "@@ -281,14 +281,12 @@ struct Case<'tcx> {\n }\n \n \n-#[deriving(Eq, PartialEq, Show)]\n+#[deriving(Copy, Eq, PartialEq, Show)]\n pub enum PointerField {\n     ThinPointer(uint),\n     FatPointer(uint)\n }\n \n-impl Copy for PointerField {}\n-\n impl<'tcx> Case<'tcx> {\n     fn is_zerolen<'a>(&self, cx: &CrateContext<'a, 'tcx>, scapegoat: Ty<'tcx>)\n                       -> bool {"}, {"sha": "25fbaa6677684af6496ec59333c61721ebe8f071", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4", "patch": "@@ -565,10 +565,9 @@ pub fn maybe_name_value(cx: &CrateContext, v: ValueRef, s: &str) {\n \n \n // Used only for creating scalar comparison glue.\n+#[deriving(Copy)]\n pub enum scalar_type { nil_type, signed_int, unsigned_int, floating_point, }\n \n-impl Copy for scalar_type {}\n-\n pub fn compare_scalar_types<'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n                                         lhs: ValueRef,\n                                         rhs: ValueRef,\n@@ -1792,14 +1791,12 @@ pub fn build_return_block<'blk, 'tcx>(fcx: &FunctionContext<'blk, 'tcx>,\n     }\n }\n \n-#[deriving(Clone, Eq, PartialEq)]\n+#[deriving(Clone, Copy, Eq, PartialEq)]\n pub enum IsUnboxedClosureFlag {\n     NotUnboxedClosure,\n     IsUnboxedClosure,\n }\n \n-impl Copy for IsUnboxedClosureFlag {}\n-\n // trans_closure: Builds an LLVM function out of a source function.\n // If the function closes over its environment a closure will be\n // returned.\n@@ -2194,6 +2191,7 @@ pub fn llvm_linkage_by_name(name: &str) -> Option<Linkage> {\n \n \n /// Enum describing the origin of an LLVM `Value`, for linkage purposes.\n+#[deriving(Copy)]\n pub enum ValueOrigin {\n     /// The LLVM `Value` is in this context because the corresponding item was\n     /// assigned to the current compilation unit.\n@@ -2204,8 +2202,6 @@ pub enum ValueOrigin {\n     InlinedCopy,\n }\n \n-impl Copy for ValueOrigin {}\n-\n /// Set the appropriate linkage for an LLVM `ValueRef` (function or global).\n /// If the `llval` is the direct translation of a specific Rust item, `id`\n /// should be set to the `NodeId` of that item.  (This mapping should be"}, {"sha": "476f5e2d618fe751deb7147807a0c7fb7636b21c", "filename": "src/librustc_trans/trans/basic_block.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Fbasic_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Fbasic_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbasic_block.rs?ref=5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4", "patch": "@@ -13,10 +13,9 @@ use llvm::{BasicBlockRef};\n use trans::value::{Users, Value};\n use std::iter::{Filter, Map};\n \n+#[deriving(Copy)]\n pub struct BasicBlock(pub BasicBlockRef);\n \n-impl Copy for BasicBlock {}\n-\n pub type Preds = Map<\n     Value,\n     BasicBlock,"}, {"sha": "ad2a6db1222c2dacbca9e47eeceec8763ef0db1d", "filename": "src/librustc_trans/trans/cabi.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi.rs?ref=5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4", "patch": "@@ -20,7 +20,7 @@ use trans::cabi_arm;\n use trans::cabi_mips;\n use trans::type_::Type;\n \n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, Copy, PartialEq)]\n pub enum ArgKind {\n     /// Pass the argument directly using the normal converted\n     /// LLVM type or by coercing to another specified type\n@@ -31,13 +31,11 @@ pub enum ArgKind {\n     Ignore,\n }\n \n-impl Copy for ArgKind {}\n-\n /// Information about how a specific C type\n /// should be passed to or returned from a function\n ///\n /// This is borrowed from clang's ABIInfo.h\n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n pub struct ArgType {\n     pub kind: ArgKind,\n     /// Original LLVM type\n@@ -50,8 +48,6 @@ pub struct ArgType {\n     pub attr: option::Option<Attribute>\n }\n \n-impl Copy for ArgType {}\n-\n impl ArgType {\n     pub fn direct(ty: Type, cast: option::Option<Type>,\n                             pad: option::Option<Type>,"}, {"sha": "9b678a4f3ae9b7d502a1b8d370d1e19e7329f48e", "filename": "src/librustc_trans/trans/cabi_x86_64.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcabi_x86_64.rs?ref=5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4", "patch": "@@ -24,7 +24,7 @@ use trans::type_::Type;\n \n use std::cmp;\n \n-#[deriving(Clone, PartialEq)]\n+#[deriving(Clone, Copy, PartialEq)]\n enum RegClass {\n     NoClass,\n     Int,\n@@ -40,8 +40,6 @@ enum RegClass {\n     Memory\n }\n \n-impl Copy for RegClass {}\n-\n trait TypeMethods {\n     fn is_reg_ty(&self) -> bool;\n }"}, {"sha": "3376479b7a42dce40792de933778ba630150c132", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4", "patch": "@@ -57,13 +57,12 @@ use syntax::ast;\n use syntax::ast_map;\n use syntax::ptr::P;\n \n+#[deriving(Copy)]\n pub struct MethodData {\n     pub llfn: ValueRef,\n     pub llself: ValueRef,\n }\n \n-impl Copy for MethodData {}\n-\n pub enum CalleeData<'tcx> {\n     Closure(Datum<'tcx, Lvalue>),\n \n@@ -1049,13 +1048,12 @@ pub fn trans_args<'a, 'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n     bcx\n }\n \n+#[deriving(Copy)]\n pub enum AutorefArg {\n     DontAutorefArg,\n     DoAutorefArg(ast::NodeId)\n }\n \n-impl Copy for AutorefArg {}\n-\n pub fn trans_arg_datum<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                    formal_arg_ty: Ty<'tcx>,\n                                    arg_datum: Datum<'tcx, Expr>,"}, {"sha": "fb2c432ef5cf4be7dca42d7039e490628bcbaa2a", "filename": "src/librustc_trans/trans/cleanup.rs", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs?ref=5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4", "patch": "@@ -50,13 +50,11 @@ pub struct CleanupScope<'blk, 'tcx: 'blk> {\n     cached_landing_pad: Option<BasicBlockRef>,\n }\n \n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n pub struct CustomScopeIndex {\n     index: uint\n }\n \n-impl Copy for CustomScopeIndex {}\n-\n pub const EXIT_BREAK: uint = 0;\n pub const EXIT_LOOP: uint = 1;\n pub const EXIT_MAX: uint = 2;\n@@ -83,22 +81,19 @@ impl<'blk, 'tcx: 'blk> fmt::Show for CleanupScopeKind<'blk, 'tcx> {\n     }\n }\n \n-#[deriving(PartialEq, Show)]\n+#[deriving(Copy, PartialEq, Show)]\n pub enum EarlyExitLabel {\n     UnwindExit,\n     ReturnExit,\n     LoopExit(ast::NodeId, uint)\n }\n \n-impl Copy for EarlyExitLabel {}\n-\n+#[deriving(Copy)]\n pub struct CachedEarlyExit {\n     label: EarlyExitLabel,\n     cleanup_block: BasicBlockRef,\n }\n \n-impl Copy for CachedEarlyExit {}\n-\n pub trait Cleanup<'tcx> {\n     fn must_unwind(&self) -> bool;\n     fn clean_on_unwind(&self) -> bool;\n@@ -111,14 +106,12 @@ pub trait Cleanup<'tcx> {\n \n pub type CleanupObj<'tcx> = Box<Cleanup<'tcx>+'tcx>;\n \n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n pub enum ScopeId {\n     AstScope(ast::NodeId),\n     CustomScope(CustomScopeIndex)\n }\n \n-impl Copy for ScopeId {}\n-\n impl<'blk, 'tcx> CleanupMethods<'blk, 'tcx> for FunctionContext<'blk, 'tcx> {\n     /// Invoked when we start to trans the code contained within a new cleanup scope.\n     fn push_ast_cleanup_scope(&self, debug_loc: NodeInfo) {\n@@ -876,6 +869,7 @@ impl EarlyExitLabel {\n ///////////////////////////////////////////////////////////////////////////\n // Cleanup types\n \n+#[deriving(Copy)]\n pub struct DropValue<'tcx> {\n     is_immediate: bool,\n     must_unwind: bool,\n@@ -884,8 +878,6 @@ pub struct DropValue<'tcx> {\n     zero: bool\n }\n \n-impl<'tcx> Copy for DropValue<'tcx> {}\n-\n impl<'tcx> Cleanup<'tcx> for DropValue<'tcx> {\n     fn must_unwind(&self) -> bool {\n         self.must_unwind\n@@ -915,21 +907,18 @@ impl<'tcx> Cleanup<'tcx> for DropValue<'tcx> {\n     }\n }\n \n-#[deriving(Show)]\n+#[deriving(Copy, Show)]\n pub enum Heap {\n     HeapExchange\n }\n \n-impl Copy for Heap {}\n-\n+#[deriving(Copy)]\n pub struct FreeValue<'tcx> {\n     ptr: ValueRef,\n     heap: Heap,\n     content_ty: Ty<'tcx>\n }\n \n-impl<'tcx> Copy for FreeValue<'tcx> {}\n-\n impl<'tcx> Cleanup<'tcx> for FreeValue<'tcx> {\n     fn must_unwind(&self) -> bool {\n         true\n@@ -957,15 +946,14 @@ impl<'tcx> Cleanup<'tcx> for FreeValue<'tcx> {\n     }\n }\n \n+#[deriving(Copy)]\n pub struct FreeSlice {\n     ptr: ValueRef,\n     size: ValueRef,\n     align: ValueRef,\n     heap: Heap,\n }\n \n-impl Copy for FreeSlice {}\n-\n impl<'tcx> Cleanup<'tcx> for FreeSlice {\n     fn must_unwind(&self) -> bool {\n         true\n@@ -993,12 +981,11 @@ impl<'tcx> Cleanup<'tcx> for FreeSlice {\n     }\n }\n \n+#[deriving(Copy)]\n pub struct LifetimeEnd {\n     ptr: ValueRef,\n }\n \n-impl Copy for LifetimeEnd {}\n-\n impl<'tcx> Cleanup<'tcx> for LifetimeEnd {\n     fn must_unwind(&self) -> bool {\n         false"}, {"sha": "d5d954f5a907bbe9164e5bae2da131b5dad26bc3", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4", "patch": "@@ -102,13 +102,12 @@ use syntax::ast_util;\n //\n // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n+#[deriving(Copy)]\n pub struct EnvValue<'tcx> {\n     action: ast::CaptureClause,\n     datum: Datum<'tcx, Lvalue>\n }\n \n-impl<'tcx> Copy for EnvValue<'tcx> {}\n-\n impl<'tcx> EnvValue<'tcx> {\n     pub fn to_string<'a>(&self, ccx: &CrateContext<'a, 'tcx>) -> String {\n         format!(\"{}({})\", self.action, self.datum.to_string(ccx))"}, {"sha": "4dd4e27c9c0d4255dd052271fbebb39c87139e07", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4", "patch": "@@ -119,6 +119,7 @@ pub fn gensym_name(name: &str) -> PathElem {\n     PathName(token::gensym(format!(\"{}:{}\", name, num).as_slice()))\n }\n \n+#[deriving(Copy)]\n pub struct tydesc_info<'tcx> {\n     pub ty: Ty<'tcx>,\n     pub tydesc: ValueRef,\n@@ -127,8 +128,6 @@ pub struct tydesc_info<'tcx> {\n     pub name: ValueRef,\n }\n \n-impl<'tcx> Copy for tydesc_info<'tcx> {}\n-\n /*\n  * A note on nomenclature of linking: \"extern\", \"foreign\", and \"upcall\".\n  *\n@@ -155,13 +154,12 @@ impl<'tcx> Copy for tydesc_info<'tcx> {}\n  *\n  */\n \n+#[deriving(Copy)]\n pub struct NodeInfo {\n     pub id: ast::NodeId,\n     pub span: Span,\n }\n \n-impl Copy for NodeInfo {}\n-\n pub fn expr_info(expr: &ast::Expr) -> NodeInfo {\n     NodeInfo { id: expr.id, span: expr.span }\n }\n@@ -863,7 +861,7 @@ pub fn fulfill_obligation<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n }\n \n // Key used to lookup values supplied for type parameters in an expr.\n-#[deriving(PartialEq, Show)]\n+#[deriving(Copy, PartialEq, Show)]\n pub enum ExprOrMethodCall {\n     // Type parameters for a path like `None::<int>`\n     ExprId(ast::NodeId),\n@@ -872,8 +870,6 @@ pub enum ExprOrMethodCall {\n     MethodCall(ty::MethodCall)\n }\n \n-impl Copy for ExprOrMethodCall {}\n-\n pub fn node_id_substs<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                   node: ExprOrMethodCall)\n                                   -> subst::Substs<'tcx> {"}, {"sha": "75473dc58bf479fe38173d6a05a13cb385ac1e44", "filename": "src/librustc_trans/trans/datum.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs?ref=5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4", "patch": "@@ -33,7 +33,7 @@ use syntax::ast;\n /// describes where the value is stored, what Rust type the value has,\n /// whether it is addressed by reference, and so forth. Please refer\n /// the section on datums in `doc.rs` for more details.\n-#[deriving(Clone)]\n+#[deriving(Clone, Copy)]\n pub struct Datum<'tcx, K> {\n     /// The llvm value.  This is either a pointer to the Rust value or\n     /// the value itself, depending on `kind` below.\n@@ -46,8 +46,6 @@ pub struct Datum<'tcx, K> {\n     pub kind: K,\n }\n \n-impl<'tcx,K:Copy> Copy for Datum<'tcx,K> {}\n-\n pub struct DatumBlock<'blk, 'tcx: 'blk, K> {\n     pub bcx: Block<'blk, 'tcx>,\n     pub datum: Datum<'tcx, K>,\n@@ -65,11 +63,9 @@ pub enum Expr {\n     LvalueExpr,\n }\n \n-#[deriving(Clone, Show)]\n+#[deriving(Clone, Copy, Show)]\n pub struct Lvalue;\n \n-impl Copy for Lvalue {}\n-\n #[deriving(Show)]\n pub struct Rvalue {\n     pub mode: RvalueMode\n@@ -86,7 +82,7 @@ impl Drop for Rvalue {\n     fn drop(&mut self) { }\n }\n \n-#[deriving(PartialEq, Eq, Hash, Show)]\n+#[deriving(Copy, PartialEq, Eq, Hash, Show)]\n pub enum RvalueMode {\n     /// `val` is a pointer to the actual value (and thus has type *T)\n     ByRef,\n@@ -95,8 +91,6 @@ pub enum RvalueMode {\n     ByValue,\n }\n \n-impl Copy for RvalueMode {}\n-\n pub fn immediate_rvalue<'tcx>(val: ValueRef, ty: Ty<'tcx>) -> Datum<'tcx, Rvalue> {\n     return Datum::new(val, ty, Rvalue::new(ByValue));\n }"}, {"sha": "9a5e6830da194b33998b58917e5612495bfc5f22", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4", "patch": "@@ -248,11 +248,9 @@ static FLAGS_NONE: c_uint = 0;\n //  Public Interface of debuginfo module\n //=-----------------------------------------------------------------------------\n \n-#[deriving(Show, Hash, Eq, PartialEq, Clone)]\n+#[deriving(Copy, Show, Hash, Eq, PartialEq, Clone)]\n struct UniqueTypeId(ast::Name);\n \n-impl Copy for UniqueTypeId {}\n-\n // The TypeMap is where the CrateDebugContext holds the type metadata nodes\n // created so far. The metadata nodes are indexed by UniqueTypeId, and, for\n // faster lookup, also by Ty. The TypeMap is responsible for creating\n@@ -2320,14 +2318,13 @@ impl<'tcx> VariantMemberDescriptionFactory<'tcx> {\n     }\n }\n \n+#[deriving(Copy)]\n enum EnumDiscriminantInfo {\n     RegularDiscriminant(DIType),\n     OptimizedDiscriminant(adt::PointerField),\n     NoDiscriminant\n }\n \n-impl Copy for EnumDiscriminantInfo {}\n-\n // Returns a tuple of (1) type_metadata_stub of the variant, (2) the llvm_type\n // of the variant, and (3) a MemberDescriptionFactory for producing the\n // descriptions of the fields of the variant. This is a rudimentary version of a\n@@ -3047,14 +3044,12 @@ impl MetadataCreationResult {\n     }\n }\n \n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n enum DebugLocation {\n     KnownLocation { scope: DIScope, line: uint, col: uint },\n     UnknownLocation\n }\n \n-impl Copy for DebugLocation {}\n-\n impl DebugLocation {\n     fn new(scope: DIScope, line: uint, col: uint) -> DebugLocation {\n         KnownLocation {"}, {"sha": "dd87879b7375506d7e2a5c4256aafd1b627fb1a5", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4", "patch": "@@ -73,14 +73,12 @@ use std::rc::Rc;\n // These are passed around by the code generating functions to track the\n // destination of a computation's value.\n \n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum Dest {\n     SaveIn(ValueRef),\n     Ignore,\n }\n \n-impl Copy for Dest {}\n-\n impl Dest {\n     pub fn to_string(&self, ccx: &CrateContext) -> String {\n         match *self {\n@@ -1889,7 +1887,7 @@ fn float_cast(bcx: Block,\n     } else { llsrc };\n }\n \n-#[deriving(PartialEq, Show)]\n+#[deriving(Copy, PartialEq, Show)]\n pub enum cast_kind {\n     cast_pointer,\n     cast_integral,\n@@ -1898,8 +1896,6 @@ pub enum cast_kind {\n     cast_other,\n }\n \n-impl Copy for cast_kind {}\n-\n pub fn cast_type_kind<'tcx>(tcx: &ty::ctxt<'tcx>, t: Ty<'tcx>) -> cast_kind {\n     match t.sty {\n         ty::ty_char        => cast_integral,"}, {"sha": "05797d74feefc50343348d8d3c50072eda0a81f6", "filename": "src/librustc_trans/trans/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmod.rs?ref=5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4", "patch": "@@ -54,13 +54,12 @@ mod basic_block;\n mod llrepr;\n mod cleanup;\n \n+#[deriving(Copy)]\n pub struct ModuleTranslation {\n     pub llcx: ContextRef,\n     pub llmod: ModuleRef,\n }\n \n-impl Copy for ModuleTranslation {}\n-\n pub struct CrateTranslation {\n     pub modules: Vec<ModuleTranslation>,\n     pub metadata_module: ModuleTranslation,"}, {"sha": "e09032ac2d04f1607f8d1f32f53b5230c0d9a2d3", "filename": "src/librustc_trans/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs?ref=5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4", "patch": "@@ -89,15 +89,14 @@ pub fn make_drop_glue_unboxed<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     })\n }\n \n+#[deriving(Copy)]\n pub struct VecTypes<'tcx> {\n     pub unit_ty: Ty<'tcx>,\n     pub llunit_ty: Type,\n     pub llunit_size: ValueRef,\n     pub llunit_alloc_size: u64\n }\n \n-impl<'tcx> Copy for VecTypes<'tcx> {}\n-\n impl<'tcx> VecTypes<'tcx> {\n     pub fn to_string<'a>(&self, ccx: &CrateContext<'a, 'tcx>) -> String {\n         format!(\"VecTypes {{unit_ty={}, llunit_ty={}, \\"}, {"sha": "51a0533a7bb63665437923be568343b43129952b", "filename": "src/librustc_trans/trans/type_.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs?ref=5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4", "patch": "@@ -25,14 +25,12 @@ use std::cell::RefCell;\n \n use libc::c_uint;\n \n-#[deriving(Clone, PartialEq, Show)]\n+#[deriving(Clone, Copy, PartialEq, Show)]\n #[repr(C)]\n pub struct Type {\n     rf: TypeRef\n }\n \n-impl Copy for Type {}\n-\n macro_rules! ty {\n     ($e:expr) => ( Type::from_ref(unsafe { $e }))\n }"}, {"sha": "2801e0ccead6db69331983c84ada8478a0ecaf41", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4", "patch": "@@ -443,14 +443,13 @@ pub fn align_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>)\n }\n \n // Want refinements! (Or case classes, I guess\n+#[deriving(Copy)]\n pub enum named_ty {\n     a_struct,\n     an_enum,\n     an_unboxed_closure,\n }\n \n-impl Copy for named_ty {}\n-\n pub fn llvm_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                 what: named_ty,\n                                 did: ast::DefId,"}, {"sha": "4f9b8c5ea37c973cb9c3822cd4d49904b344a942", "filename": "src/librustc_trans/trans/value.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fvalue.rs?ref=5e2bca9e86ee6e40d6aaf6e4f4ba60a6e71b01e4", "patch": "@@ -14,10 +14,9 @@ use trans::basic_block::BasicBlock;\n use trans::common::Block;\n use libc::c_uint;\n \n+#[deriving(Copy)]\n pub struct Value(pub ValueRef);\n \n-impl Copy for Value {}\n-\n macro_rules! opt_val { ($e:expr) => (\n     unsafe {\n         match $e {\n@@ -126,10 +125,9 @@ impl Value {\n }\n \n /// Wrapper for LLVM UseRef\n+#[deriving(Copy)]\n pub struct Use(UseRef);\n \n-impl Copy for Use {}\n-\n impl Use {\n     pub fn get(&self) -> UseRef {\n         let Use(v) = *self; v"}]}