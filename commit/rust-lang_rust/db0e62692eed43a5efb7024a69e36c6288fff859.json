{"sha": "db0e62692eed43a5efb7024a69e36c6288fff859", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMGU2MjY5MmVlZDQzYTVlZmI3MDI0YTY5ZTM2YzYyODhmZmY4NTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-17T17:03:34Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-26T13:38:26Z"}, "message": "introduce a \"comparison fn\" instead of always use `==`", "tree": {"sha": "770c805e26c1439f0d9777e1d1350d0e9ce3c3d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/770c805e26c1439f0d9777e1d1350d0e9ce3c3d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db0e62692eed43a5efb7024a69e36c6288fff859", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db0e62692eed43a5efb7024a69e36c6288fff859", "html_url": "https://github.com/rust-lang/rust/commit/db0e62692eed43a5efb7024a69e36c6288fff859", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db0e62692eed43a5efb7024a69e36c6288fff859/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b63dcc7731e1023c525e795ba36472a3e4bd21b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b63dcc7731e1023c525e795ba36472a3e4bd21b", "html_url": "https://github.com/rust-lang/rust/commit/9b63dcc7731e1023c525e795ba36472a3e4bd21b"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "a4fd4d4b88047dd5c20268853b109766bf78e4e5", "filename": "src/librustc/infer/outlives/verify.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/db0e62692eed43a5efb7024a69e36c6288fff859/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db0e62692eed43a5efb7024a69e36c6288fff859/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs?ref=db0e62692eed43a5efb7024a69e36c6288fff859", "patch": "@@ -153,7 +153,10 @@ impl<'cx, 'gcx, 'tcx> VerifyBoundCx<'cx, 'gcx, 'tcx> {\n         // like `<T as Foo<'a>>::Item`.\n         let generic_ty = generic.to_ty(tcx);\n         let c_b = self.param_env.caller_bounds;\n-        let mut param_bounds = self.collect_outlives_from_predicate_list(generic_ty, c_b);\n+        let mut param_bounds = self.collect_outlives_from_predicate_list(\n+            |ty| ty == generic_ty,\n+            c_b,\n+        );\n \n         // Next, collect regions we scraped from the well-formedness\n         // constraints in the fn signature. To do that, we walk the list\n@@ -241,7 +244,7 @@ impl<'cx, 'gcx, 'tcx> VerifyBoundCx<'cx, 'gcx, 'tcx> {\n         let identity_substs = Substs::identity_for_item(tcx, assoc_item_def_id);\n         let identity_proj = tcx.mk_projection(assoc_item_def_id, identity_substs);\n         self.collect_outlives_from_predicate_list(\n-            identity_proj,\n+            |ty| ty == identity_proj,\n             traits::elaborate_predicates(tcx, trait_predicates.predicates),\n         )\n     }\n@@ -252,20 +255,16 @@ impl<'cx, 'gcx, 'tcx> VerifyBoundCx<'cx, 'gcx, 'tcx> {\n     /// when comparing `ty` for equality, so `ty` must be something\n     /// that does not involve inference variables and where you\n     /// otherwise want a precise match.\n-    fn collect_outlives_from_predicate_list<I, P>(\n+    fn collect_outlives_from_predicate_list(\n         &self,\n-        ty: Ty<'tcx>,\n-        predicates: I,\n-    ) -> Vec<ty::Region<'tcx>>\n-    where\n-        I: IntoIterator<Item = P>,\n-        P: AsRef<ty::Predicate<'tcx>>,\n-    {\n+        compare_ty: impl Fn(Ty<'tcx>) -> bool,\n+        predicates: impl IntoIterator<Item = impl AsRef<ty::Predicate<'tcx>>>,\n+    ) -> Vec<ty::Region<'tcx>> {\n         predicates\n             .into_iter()\n             .filter_map(|p| p.as_ref().to_opt_type_outlives())\n             .filter_map(|p| p.no_late_bound_regions())\n-            .filter(|p| p.0 == ty)\n+            .filter(|p| compare_ty(p.0))\n             .map(|p| p.1)\n             .collect()\n     }"}]}