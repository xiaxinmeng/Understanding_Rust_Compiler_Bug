{"sha": "121caa927bc4dace0df64f728f62fbce42a15fe9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMWNhYTkyN2JjNGRhY2UwZGY2NGY3MjhmNjJmYmNlNDJhMTVmZTk=", "commit": {"author": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-05-05T03:03:32Z"}, "committer": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-05-05T03:03:32Z"}, "message": "Correct handling of arguments in async fn", "tree": {"sha": "ea803a3dc1863ce02adbc3ef05f719bef705a2e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea803a3dc1863ce02adbc3ef05f719bef705a2e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/121caa927bc4dace0df64f728f62fbce42a15fe9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/121caa927bc4dace0df64f728f62fbce42a15fe9", "html_url": "https://github.com/rust-lang/rust/commit/121caa927bc4dace0df64f728f62fbce42a15fe9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/121caa927bc4dace0df64f728f62fbce42a15fe9/comments", "author": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "committer": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "747dd57e0f2eafc4c632f8698525e45db2f3e5ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/747dd57e0f2eafc4c632f8698525e45db2f3e5ec", "html_url": "https://github.com/rust-lang/rust/commit/747dd57e0f2eafc4c632f8698525e45db2f3e5ec"}], "stats": {"total": 73, "additions": 52, "deletions": 21}, "files": [{"sha": "83f8b0e90c574ffdfd1330216333af99b5f82636", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/121caa927bc4dace0df64f728f62fbce42a15fe9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121caa927bc4dace0df64f728f62fbce42a15fe9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=121caa927bc4dace0df64f728f62fbce42a15fe9", "patch": "@@ -1576,7 +1576,7 @@ impl<'a> Parser<'a> {\n             let ident = self.parse_ident()?;\n             let mut generics = self.parse_generics()?;\n \n-            let d = self.parse_fn_decl_with_self(|p: &mut Parser<'a>| {\n+            let mut decl = self.parse_fn_decl_with_self(|p: &mut Parser<'a>| {\n                 // This is somewhat dubious; We don't want to allow\n                 // argument names to be left off if there is a\n                 // definition...\n@@ -1585,7 +1585,7 @@ impl<'a> Parser<'a> {\n                 p.parse_arg_general(p.span.rust_2018(), true, false)\n             })?;\n             generics.where_clause = self.parse_where_clause()?;\n-            self.construct_async_arguments(&mut asyncness, &d);\n+            self.construct_async_arguments(&mut asyncness, &mut decl);\n \n             let sig = ast::MethodSig {\n                 header: FnHeader {\n@@ -1594,7 +1594,7 @@ impl<'a> Parser<'a> {\n                     abi,\n                     asyncness,\n                 },\n-                decl: d,\n+                decl,\n             };\n \n             let body = match self.token {\n@@ -6479,10 +6479,10 @@ impl<'a> Parser<'a> {\n                      -> PResult<'a, ItemInfo> {\n         let (ident, mut generics) = self.parse_fn_header()?;\n         let allow_c_variadic = abi == Abi::C && unsafety == Unsafety::Unsafe;\n-        let decl = self.parse_fn_decl(allow_c_variadic)?;\n+        let mut decl = self.parse_fn_decl(allow_c_variadic)?;\n         generics.where_clause = self.parse_where_clause()?;\n         let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n-        self.construct_async_arguments(&mut asyncness, &decl);\n+        self.construct_async_arguments(&mut asyncness, &mut decl);\n         let header = FnHeader { unsafety, asyncness, constness, abi };\n         Ok((ident, ItemKind::Fn(decl, header, generics, body), Some(inner_attrs)))\n     }\n@@ -6666,9 +6666,9 @@ impl<'a> Parser<'a> {\n             let (constness, unsafety, mut asyncness, abi) = self.parse_fn_front_matter()?;\n             let ident = self.parse_ident()?;\n             let mut generics = self.parse_generics()?;\n-            let decl = self.parse_fn_decl_with_self(|p| p.parse_arg())?;\n+            let mut decl = self.parse_fn_decl_with_self(|p| p.parse_arg())?;\n             generics.where_clause = self.parse_where_clause()?;\n-            self.construct_async_arguments(&mut asyncness, &decl);\n+            self.construct_async_arguments(&mut asyncness, &mut decl);\n             *at_end = true;\n             let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n             let header = ast::FnHeader { abi, unsafety, constness, asyncness };\n@@ -8714,9 +8714,9 @@ impl<'a> Parser<'a> {\n     ///\n     /// The arguments of the function are replaced in HIR lowering with the arguments created by\n     /// this function and the statements created here are inserted at the top of the closure body.\n-    fn construct_async_arguments(&mut self, asyncness: &mut Spanned<IsAsync>, decl: &FnDecl) {\n+    fn construct_async_arguments(&mut self, asyncness: &mut Spanned<IsAsync>, decl: &mut FnDecl) {\n         if let IsAsync::Async { ref mut arguments, .. } = asyncness.node {\n-            for (index, input) in decl.inputs.iter().enumerate() {\n+            for (index, input) in decl.inputs.iter_mut().enumerate() {\n                 let id = ast::DUMMY_NODE_ID;\n                 let span = input.pat.span;\n \n@@ -8728,8 +8728,10 @@ impl<'a> Parser<'a> {\n                 // `let <pat> = __argN;` statement, instead just adding a `let <pat> = <pat>;`\n                 // statement.\n                 let (binding_mode, ident, is_simple_pattern) = match input.pat.node {\n-                    PatKind::Ident(binding_mode, ident, _) => (binding_mode, ident, true),\n-                    _ => (BindingMode::ByValue(Mutability::Immutable), ident, false),\n+                    PatKind::Ident(binding_mode @ BindingMode::ByValue(_), ident, _) => {\n+                        (binding_mode, ident, true)\n+                    }\n+                    _ => (BindingMode::ByValue(Mutability::Mutable), ident, false),\n                 };\n \n                 // Construct an argument representing `__argN: <ty>` to replace the argument of the\n@@ -8796,6 +8798,15 @@ impl<'a> Parser<'a> {\n                     })\n                 };\n \n+                // Remove mutability from arguments. If this is not a simple pattern,\n+                // those arguments are replaced by `__argN`, so there is no need to do this.\n+                if let PatKind::Ident(BindingMode::ByValue(mutability @ Mutability::Mutable), ..) =\n+                    &mut input.pat.node\n+                {\n+                    assert!(is_simple_pattern);\n+                    *mutability = Mutability::Immutable;\n+                }\n+\n                 let move_stmt = Stmt { id, node: StmtKind::Local(P(move_local)), span };\n                 arguments.push(AsyncArgument { ident, arg, pat_stmt, move_stmt });\n             }"}, {"sha": "3750c2bcb701a0172906cd7a7ca4a4832478fe47", "filename": "src/test/ui/async-await/argument-patterns.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/121caa927bc4dace0df64f728f62fbce42a15fe9/src%2Ftest%2Fui%2Fasync-await%2Fargument-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121caa927bc4dace0df64f728f62fbce42a15fe9/src%2Ftest%2Fui%2Fasync-await%2Fargument-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fargument-patterns.rs?ref=121caa927bc4dace0df64f728f62fbce42a15fe9", "patch": "@@ -0,0 +1,30 @@\n+// edition:2018\n+// run-pass\n+\n+#![allow(unused_variables)]\n+#![deny(unused_mut)]\n+#![feature(async_await)]\n+\n+type A = Vec<u32>;\n+\n+async fn a(n: u32, mut vec: A) {\n+    vec.push(n);\n+}\n+\n+async fn b(n: u32, ref mut vec: A) {\n+    vec.push(n);\n+}\n+\n+async fn c(ref vec: A) {\n+    vec.contains(&0);\n+}\n+\n+async fn d((a, mut b): (A, A)) {\n+    b.push(1);\n+}\n+\n+async fn f((ref mut a, ref b): (A, A)) {}\n+\n+async fn g(((ref a, ref mut b), (ref mut c, ref d)): ((A, A), (A, A))) {}\n+\n+fn main() {}"}, {"sha": "4d6dba74097ca77f240a4d6ff436b5466882924e", "filename": "src/test/ui/async-await/mutable-arguments.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/747dd57e0f2eafc4c632f8698525e45db2f3e5ec/src%2Ftest%2Fui%2Fasync-await%2Fmutable-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/747dd57e0f2eafc4c632f8698525e45db2f3e5ec/src%2Ftest%2Fui%2Fasync-await%2Fmutable-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmutable-arguments.rs?ref=747dd57e0f2eafc4c632f8698525e45db2f3e5ec", "patch": "@@ -1,10 +0,0 @@\n-// edition:2018\n-// run-pass\n-\n-#![feature(async_await)]\n-\n-async fn foo(n: u32, mut vec: Vec<u32>) {\n-    vec.push(n);\n-}\n-\n-fn main() {}"}]}