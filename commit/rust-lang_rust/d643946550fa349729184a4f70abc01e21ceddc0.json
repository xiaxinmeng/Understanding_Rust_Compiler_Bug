{"sha": "d643946550fa349729184a4f70abc01e21ceddc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NDM5NDY1NTBmYTM0OTcyOTE4NGE0ZjcwYWJjMDFlMjFjZWRkYzA=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-25T17:41:03Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-20T11:19:04Z"}, "message": "Rename ast::GenericParam and ast::GenericArg\n\nIt's so confusing to have everything having the same name, at least while refactoring.", "tree": {"sha": "56b75eb7b607a7b06db9d88878ee9cca438730de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56b75eb7b607a7b06db9d88878ee9cca438730de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d643946550fa349729184a4f70abc01e21ceddc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d643946550fa349729184a4f70abc01e21ceddc0", "html_url": "https://github.com/rust-lang/rust/commit/d643946550fa349729184a4f70abc01e21ceddc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d643946550fa349729184a4f70abc01e21ceddc0/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "html_url": "https://github.com/rust-lang/rust/commit/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b"}], "stats": {"total": 247, "additions": 123, "deletions": 124}, "files": [{"sha": "4660352b28bfc66e4c0215646c48f99441c81c6d", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=d643946550fa349729184a4f70abc01e21ceddc0", "patch": "@@ -810,7 +810,7 @@ impl<'a> LoweringContext<'a> {\n     {\n         let (in_band_defs, (mut lowered_generics, res)) = self.with_in_scope_lifetime_defs(\n             generics.params.iter().filter_map(|p| match p {\n-                GenericParam::Lifetime(ld) => Some(ld),\n+                GenericParamAST::Lifetime(ld) => Some(ld),\n                 _ => None,\n             }),\n             |this| {\n@@ -1040,14 +1040,14 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_generic_arg(&mut self,\n-                        p: &ast::GenericArg,\n+                        p: &ast::GenericArgAST,\n                         itctx: ImplTraitContext)\n                         -> hir::GenericArg {\n         match p {\n-            ast::GenericArg::Lifetime(lt) => {\n+            ast::GenericArgAST::Lifetime(lt) => {\n                 GenericArg::Lifetime(self.lower_lifetime(&lt))\n             }\n-            ast::GenericArg::Type(ty) => {\n+            ast::GenericArgAST::Type(ty) => {\n                 GenericArg::Type(self.lower_ty(&ty, itctx))\n             }\n         }\n@@ -1069,7 +1069,7 @@ impl<'a> LoweringContext<'a> {\n             }\n             TyKind::BareFn(ref f) => self.with_in_scope_lifetime_defs(\n                 f.generic_params.iter().filter_map(|p| match p {\n-                    GenericParam::Lifetime(ld) => Some(ld),\n+                    GenericParamAST::Lifetime(ld) => Some(ld),\n                     _ => None,\n                 }),\n                 |this| {\n@@ -1980,17 +1980,17 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_generic_params(\n         &mut self,\n-        params: &Vec<GenericParam>,\n+        params: &Vec<GenericParamAST>,\n         add_bounds: &NodeMap<Vec<TyParamBound>>,\n         itctx: ImplTraitContext,\n     ) -> hir::HirVec<hir::GenericParam> {\n         params\n             .iter()\n             .map(|param| match *param {\n-                GenericParam::Lifetime(ref lifetime_def) => {\n+                GenericParamAST::Lifetime(ref lifetime_def) => {\n                     hir::GenericParam::Lifetime(self.lower_lifetime_def(lifetime_def))\n                 }\n-                GenericParam::Type(ref ty_param) => hir::GenericParam::Type(self.lower_ty_param(\n+                GenericParamAST::Type(ref ty_param) => hir::GenericParam::Type(self.lower_ty_param(\n                     ty_param,\n                     add_bounds.get(&ty_param.id).map_or(&[][..], |x| &x),\n                     itctx,\n@@ -2030,7 +2030,7 @@ impl<'a> LoweringContext<'a> {\n                                         self.resolver.definitions().as_local_node_id(def_id)\n                                     {\n                                         for param in &g.params {\n-                                            if let GenericParam::Type(ref ty_param) = *param {\n+                                            if let GenericParamAST::Type(ref ty_param) = *param {\n                                                 if node_id == ty_param.id {\n                                                     add_bounds\n                                                         .entry(ty_param.id)\n@@ -2078,7 +2078,7 @@ impl<'a> LoweringContext<'a> {\n             }) => {\n                 self.with_in_scope_lifetime_defs(\n                     bound_generic_params.iter().filter_map(|p| match p {\n-                        GenericParam::Lifetime(ld) => Some(ld),\n+                        GenericParamAST::Lifetime(ld) => Some(ld),\n                         _ => None,\n                     }),\n                     |this| {\n@@ -2397,7 +2397,7 @@ impl<'a> LoweringContext<'a> {\n \n                 let new_impl_items = self.with_in_scope_lifetime_defs(\n                     ast_generics.params.iter().filter_map(|p| match p {\n-                        GenericParam::Lifetime(ld) => Some(ld),\n+                        GenericParamAST::Lifetime(ld) => Some(ld),\n                         _ => None,\n                     }),\n                     |this| {"}, {"sha": "7ab6e17ac35ea1a15831ceee6a5ca14a28b1a87d", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=d643946550fa349729184a4f70abc01e21ceddc0", "patch": "@@ -170,17 +170,17 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         }\n     }\n \n-    fn visit_generic_param(&mut self, param: &'a GenericParam) {\n+    fn visit_generic_param(&mut self, param: &'a GenericParamAST) {\n         match *param {\n-            GenericParam::Lifetime(ref lifetime_def) => {\n+            GenericParamAST::Lifetime(ref lifetime_def) => {\n                 self.create_def(\n                     lifetime_def.lifetime.id,\n                     DefPathData::LifetimeDef(lifetime_def.lifetime.ident.name.as_interned_str()),\n                     REGULAR_SPACE,\n                     lifetime_def.lifetime.ident.span\n                 );\n             }\n-            GenericParam::Type(ref ty_param) => {\n+            GenericParamAST::Type(ref ty_param) => {\n                 self.create_def(\n                     ty_param.id,\n                     DefPathData::TypeParam(ty_param.ident.name.as_interned_str()),"}, {"sha": "7236eebdb6f2b624f10c6fb20b4c1337207468d5", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=d643946550fa349729184a4f70abc01e21ceddc0", "patch": "@@ -990,7 +990,7 @@ impl<'a> ast_visit::Visitor<'a> for EarlyContext<'a> {\n         run_lints!(self, check_expr_post, early_passes, e);\n     }\n \n-    fn visit_generic_param(&mut self, param: &'a ast::GenericParam) {\n+    fn visit_generic_param(&mut self, param: &'a ast::GenericParamAST) {\n         run_lints!(self, check_generic_param, early_passes, param);\n         ast_visit::walk_generic_param(self, param);\n     }"}, {"sha": "3d31a651b2f6df974c721727a316eaf69719b9b6", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=d643946550fa349729184a4f70abc01e21ceddc0", "patch": "@@ -254,7 +254,7 @@ pub trait EarlyLintPass: LintPass {\n     fn check_expr(&mut self, _: &EarlyContext, _: &ast::Expr) { }\n     fn check_expr_post(&mut self, _: &EarlyContext, _: &ast::Expr) { }\n     fn check_ty(&mut self, _: &EarlyContext, _: &ast::Ty) { }\n-    fn check_generic_param(&mut self, _: &EarlyContext, _: &ast::GenericParam) { }\n+    fn check_generic_param(&mut self, _: &EarlyContext, _: &ast::GenericParamAST) { }\n     fn check_generics(&mut self, _: &EarlyContext, _: &ast::Generics) { }\n     fn check_where_predicate(&mut self, _: &EarlyContext, _: &ast::WherePredicate) { }\n     fn check_poly_trait_ref(&mut self, _: &EarlyContext, _: &ast::PolyTraitRef,"}, {"sha": "b50407c82d19c6d5b03deb7fd689db662e3a6658", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=d643946550fa349729184a4f70abc01e21ceddc0", "patch": "@@ -138,12 +138,12 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn check_late_bound_lifetime_defs(&self, params: &Vec<GenericParam>) {\n+    fn check_late_bound_lifetime_defs(&self, params: &Vec<GenericParamAST>) {\n         // Check: Only lifetime parameters\n         let non_lifetime_param_spans : Vec<_> = params.iter()\n             .filter_map(|param| match *param {\n-                GenericParam::Lifetime(_) => None,\n-                GenericParam::Type(ref t) => Some(t.ident.span),\n+                GenericParamAST::Lifetime(_) => None,\n+                GenericParamAST::Type(ref t) => Some(t.ident.span),\n             }).collect();\n         if !non_lifetime_param_spans.is_empty() {\n             self.err_handler().span_err(non_lifetime_param_spans,\n@@ -153,14 +153,14 @@ impl<'a> AstValidator<'a> {\n         // Check: No bounds on lifetime parameters\n         for param in params.iter() {\n             match *param {\n-                GenericParam::Lifetime(ref l) => {\n+                GenericParamAST::Lifetime(ref l) => {\n                     if !l.bounds.is_empty() {\n                         let spans: Vec<_> = l.bounds.iter().map(|b| b.ident.span).collect();\n                         self.err_handler().span_err(spans,\n                             \"lifetime bounds cannot be used in this context\");\n                     }\n                 }\n-                GenericParam::Type(_) => {}\n+                GenericParamAST::Type(_) => {}\n             }\n         }\n     }\n@@ -335,7 +335,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             }\n             ItemKind::TraitAlias(Generics { ref params, .. }, ..) => {\n                 for param in params {\n-                    if let GenericParam::Type(TyParam {\n+                    if let GenericParamAST::Type(TyParam {\n                         ident,\n                         ref bounds,\n                         ref default,\n@@ -414,17 +414,17 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         let mut seen_default = None;\n         for param in &g.params {\n             match (param, seen_non_lifetime_param) {\n-                (&GenericParam::Lifetime(ref ld), true) => {\n+                (&GenericParamAST::Lifetime(ref ld), true) => {\n                     self.err_handler()\n                         .span_err(ld.lifetime.ident.span, \"lifetime parameters must be leading\");\n                 },\n-                (&GenericParam::Lifetime(_), false) => {}\n+                (&GenericParamAST::Lifetime(_), false) => {}\n                 _ => {\n                     seen_non_lifetime_param = true;\n                 }\n             }\n \n-            if let GenericParam::Type(ref ty_param @ TyParam { default: Some(_), .. }) = *param {\n+            if let GenericParamAST::Type(ref ty_param @ TyParam { default: Some(_), .. }) = *param {\n                 seen_default = Some(ty_param.ident.span);\n             } else if let Some(span) = seen_default {\n                 self.err_handler()"}, {"sha": "d70a7e2b8278b365f53f25cdc092b66433a8d361", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d643946550fa349729184a4f70abc01e21ceddc0", "patch": "@@ -56,7 +56,7 @@ use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::visit::{self, FnKind, Visitor};\n use syntax::attr;\n use syntax::ast::{Arm, BindingMode, Block, Crate, Expr, ExprKind};\n-use syntax::ast::{FnDecl, ForeignItem, ForeignItemKind, GenericParam, Generics};\n+use syntax::ast::{FnDecl, ForeignItem, ForeignItemKind, GenericParamAST, Generics};\n use syntax::ast::{Item, ItemKind, ImplItem, ImplItemKind};\n use syntax::ast::{Label, Local, Mutability, Pat, PatKind, Path};\n use syntax::ast::{QSelf, TraitItemKind, TraitRef, Ty, TyKind};\n@@ -798,14 +798,14 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n         // them one by one as they are processed and become available.\n         let mut default_ban_rib = Rib::new(ForwardTyParamBanRibKind);\n         default_ban_rib.bindings.extend(generics.params.iter()\n-            .filter_map(|p| if let GenericParam::Type(ref tp) = *p { Some(tp) } else { None })\n+            .filter_map(|p| if let GenericParamAST::Type(ref tp) = *p { Some(tp) } else { None })\n             .skip_while(|p| p.default.is_none())\n             .map(|p| (Ident::with_empty_ctxt(p.ident.name), Def::Err)));\n \n         for param in &generics.params {\n             match *param {\n-                GenericParam::Lifetime(_) => self.visit_generic_param(param),\n-                GenericParam::Type(ref ty_param) => {\n+                GenericParamAST::Lifetime(_) => self.visit_generic_param(param),\n+                GenericParamAST::Type(ref ty_param) => {\n                     for bound in &ty_param.bounds {\n                         self.visit_ty_param_bound(bound);\n                     }\n@@ -2198,7 +2198,7 @@ impl<'a> Resolver<'a> {\n                 let mut function_type_rib = Rib::new(rib_kind);\n                 let mut seen_bindings = FxHashMap();\n                 for param in &generics.params {\n-                    if let GenericParam::Type(ref type_parameter) = *param {\n+                    if let GenericParamAST::Type(ref type_parameter) = *param {\n                         let ident = type_parameter.ident.modern();\n                         debug!(\"with_type_parameter_rib: {}\", type_parameter.id);\n "}, {"sha": "303406dac76618b769d4621faa48c231d48bc723", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=d643946550fa349729184a4f70abc01e21ceddc0", "patch": "@@ -370,7 +370,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         id: NodeId,\n     ) {\n         for param in &generics.params {\n-            if let ast::GenericParam::Type(ref ty_param) = *param {\n+            if let ast::GenericParamAST::Type(ref ty_param) = *param {\n                 let param_ss = ty_param.ident.span;\n                 let name = escape(self.span.snippet(param_ss));\n                 // Append $id to name to make sure each one is unique\n@@ -1479,7 +1479,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n \n     fn visit_generics(&mut self, generics: &'l ast::Generics) {\n         for param in &generics.params {\n-            if let ast::GenericParam::Type(ref ty_param) = *param {\n+            if let ast::GenericParamAST::Type(ref ty_param) = *param {\n                 for bound in ty_param.bounds.iter() {\n                     if let ast::TraitTyParamBound(ref trait_ref, _) = *bound {\n                         self.process_path(trait_ref.trait_ref.ref_id, &trait_ref.trait_ref.path)"}, {"sha": "a634e979363bb65c3974cd21b9f51c4fb5d6c467", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=d643946550fa349729184a4f70abc01e21ceddc0", "patch": "@@ -935,8 +935,8 @@ fn make_signature(decl: &ast::FnDecl, generics: &ast::Generics) -> String {\n             .params\n             .iter()\n             .map(|param| match *param {\n-                ast::GenericParam::Lifetime(ref l) => l.lifetime.ident.name.to_string(),\n-                ast::GenericParam::Type(ref t) => t.ident.to_string(),\n+                ast::GenericParamAST::Lifetime(ref l) => l.lifetime.ident.name.to_string(),\n+                ast::GenericParamAST::Type(ref t) => t.ident.to_string(),\n             })\n             .collect::<Vec<_>>()\n             .join(\", \"));"}, {"sha": "f5384683506ef4fdc0e8acbc52e2b045ff845732", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=d643946550fa349729184a4f70abc01e21ceddc0", "patch": "@@ -224,7 +224,7 @@ impl Sig for ast::Ty {\n                     text.push_str(&f.generic_params\n                         .iter()\n                         .filter_map(|p| match *p {\n-                            ast::GenericParam::Lifetime(ref l) => {\n+                            ast::GenericParamAST::Lifetime(ref l) => {\n                                 Some(l.lifetime.ident.to_string())\n                             }\n                             _ => None,\n@@ -618,7 +618,7 @@ impl Sig for ast::Generics {\n         let mut defs = vec![];\n         for param in &self.params {\n             match *param {\n-                ast::GenericParam::Lifetime(ref l) => {\n+                ast::GenericParamAST::Lifetime(ref l) => {\n                     let mut l_text = l.lifetime.ident.to_string();\n                     defs.push(SigElement {\n                         id: id_from_node_id(l.lifetime.id, scx),\n@@ -639,7 +639,7 @@ impl Sig for ast::Generics {\n                     text.push_str(&l_text);\n                     text.push(',');\n                 }\n-                ast::GenericParam::Type(ref t) => {\n+                ast::GenericParamAST::Type(ref t) => {\n                     let mut t_text = t.ident.to_string();\n                     defs.push(SigElement {\n                         id: id_from_node_id(t.id, scx),"}, {"sha": "17df8dd7027e4bf8eecd5cea17674f45710299f4", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=d643946550fa349729184a4f70abc01e21ceddc0", "patch": "@@ -168,7 +168,7 @@ impl GenericArgs {\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum GenericArg {\n+pub enum GenericArgAST {\n     Lifetime(Lifetime),\n     Type(P<Ty>),\n }\n@@ -179,7 +179,7 @@ pub struct AngleBracketedArgs {\n     /// Overall span\n     pub span: Span,\n     /// The arguments for this path segment.\n-    pub args: Vec<GenericArg>,\n+    pub args: Vec<GenericArgAST>,\n     /// Bindings (equality constraints) on associated types, if present.\n     ///\n     /// E.g., `Foo<A=Bar>`.\n@@ -189,7 +189,7 @@ pub struct AngleBracketedArgs {\n impl AngleBracketedArgs {\n     pub fn lifetimes(&self) -> impl DoubleEndedIterator<Item = &Lifetime> {\n         self.args.iter().filter_map(|arg| {\n-            if let GenericArg::Lifetime(lt) = arg {\n+            if let GenericArgAST::Lifetime(lt) = arg {\n                 Some(lt)\n             } else {\n                 None\n@@ -199,7 +199,7 @@ impl AngleBracketedArgs {\n \n     pub fn types(&self) -> impl DoubleEndedIterator<Item = &P<Ty>> {\n         self.args.iter().filter_map(|arg| {\n-            if let GenericArg::Type(ty) = arg {\n+            if let GenericArgAST::Type(ty) = arg {\n                 Some(ty)\n             } else {\n                 None\n@@ -338,22 +338,22 @@ pub struct TyParam {\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-pub enum GenericParam {\n+pub enum GenericParamAST {\n     Lifetime(LifetimeDef),\n     Type(TyParam),\n }\n \n-impl GenericParam {\n+impl GenericParamAST {\n     pub fn is_lifetime_param(&self) -> bool {\n         match *self {\n-            GenericParam::Lifetime(_) => true,\n+            GenericParamAST::Lifetime(_) => true,\n             _ => false,\n         }\n     }\n \n     pub fn is_type_param(&self) -> bool {\n         match *self {\n-            GenericParam::Type(_) => true,\n+            GenericParamAST::Type(_) => true,\n             _ => false,\n         }\n     }\n@@ -363,7 +363,7 @@ impl GenericParam {\n /// a function, enum, trait, etc.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Generics {\n-    pub params: Vec<GenericParam>,\n+    pub params: Vec<GenericParamAST>,\n     pub where_clause: WhereClause,\n     pub span: Span,\n }\n@@ -383,7 +383,7 @@ impl Generics {\n \n     pub fn span_for_name(&self, name: &str) -> Option<Span> {\n         for param in &self.params {\n-            if let GenericParam::Type(ref t) = *param {\n+            if let GenericParamAST::Type(ref t) = *param {\n                 if t.ident.name == name {\n                     return Some(t.ident.span);\n                 }\n@@ -444,7 +444,7 @@ impl WherePredicate {\n pub struct WhereBoundPredicate {\n     pub span: Span,\n     /// Any generics from a `for` binding\n-    pub bound_generic_params: Vec<GenericParam>,\n+    pub bound_generic_params: Vec<GenericParamAST>,\n     /// The type being bounded\n     pub bounded_ty: P<Ty>,\n     /// Trait and lifetime bounds (`Clone+Send+'static`)\n@@ -1576,7 +1576,7 @@ impl fmt::Debug for Ty {\n pub struct BareFnTy {\n     pub unsafety: Unsafety,\n     pub abi: Abi,\n-    pub generic_params: Vec<GenericParam>,\n+    pub generic_params: Vec<GenericParamAST>,\n     pub decl: P<FnDecl>\n }\n \n@@ -1955,7 +1955,7 @@ pub struct TraitRef {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct PolyTraitRef {\n     /// The `'a` in `<'a> Foo<&'a T>`\n-    pub bound_generic_params: Vec<GenericParam>,\n+    pub bound_generic_params: Vec<GenericParamAST>,\n \n     /// The `Foo<&'a T>` in `<'a> Foo<&'a T>`\n     pub trait_ref: TraitRef,\n@@ -1964,7 +1964,7 @@ pub struct PolyTraitRef {\n }\n \n impl PolyTraitRef {\n-    pub fn new(generic_params: Vec<GenericParam>, path: Path, span: Span) -> Self {\n+    pub fn new(generic_params: Vec<GenericParamAST>, path: Path, span: Span) -> Self {\n         PolyTraitRef {\n             bound_generic_params: generic_params,\n             trait_ref: TraitRef { path: path, ref_id: DUMMY_NODE_ID },"}, {"sha": "1c74a2bd5be0d3d0544cc924b444d2a864694c44", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=d643946550fa349729184a4f70abc01e21ceddc0", "patch": "@@ -31,7 +31,7 @@ pub trait AstBuilder {\n     fn path_all(&self, sp: Span,\n                 global: bool,\n                 idents: Vec<ast::Ident>,\n-                args: Vec<ast::GenericArg>,\n+                args: Vec<ast::GenericArgAST>,\n                 bindings: Vec<ast::TypeBinding>)\n         -> ast::Path;\n \n@@ -42,7 +42,7 @@ pub trait AstBuilder {\n     fn qpath_all(&self, self_type: P<ast::Ty>,\n                 trait_path: ast::Path,\n                 ident: ast::Ident,\n-                args: Vec<ast::GenericArg>,\n+                args: Vec<ast::GenericArgAST>,\n                 bindings: Vec<ast::TypeBinding>)\n                 -> (ast::QSelf, ast::Path);\n \n@@ -314,7 +314,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                 span: Span,\n                 global: bool,\n                 mut idents: Vec<ast::Ident> ,\n-                args: Vec<ast::GenericArg>,\n+                args: Vec<ast::GenericArgAST>,\n                 bindings: Vec<ast::TypeBinding> )\n                 -> ast::Path {\n         let last_ident = idents.pop().unwrap();\n@@ -356,7 +356,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                  self_type: P<ast::Ty>,\n                  trait_path: ast::Path,\n                  ident: ast::Ident,\n-                 args: Vec<ast::GenericArg>,\n+                 args: Vec<ast::GenericArgAST>,\n                  bindings: Vec<ast::TypeBinding>)\n                  -> (ast::QSelf, ast::Path) {\n         let mut path = trait_path;\n@@ -424,7 +424,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             self.path_all(DUMMY_SP,\n                           true,\n                           self.std_path(&[\"option\", \"Option\"]),\n-                          vec![ast::GenericArg::Type(ty)],\n+                          vec![ast::GenericArgAST::Type(ty)],\n                           Vec::new()))\n     }\n "}, {"sha": "1e09c7b2206c63d466041a29a6ac843f8427f124", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=d643946550fa349729184a4f70abc01e21ceddc0", "patch": "@@ -132,10 +132,10 @@ pub trait Folder : Sized {\n         noop_fold_exprs(es, self)\n     }\n \n-    fn fold_generic_arg(&mut self, arg: GenericArg) -> GenericArg {\n+    fn fold_generic_arg(&mut self, arg: GenericArgAST) -> GenericArgAST {\n         match arg {\n-            GenericArg::Lifetime(lt) => GenericArg::Lifetime(self.fold_lifetime(lt)),\n-            GenericArg::Type(ty) => GenericArg::Type(self.fold_ty(ty)),\n+            GenericArgAST::Lifetime(lt) => GenericArgAST::Lifetime(self.fold_lifetime(lt)),\n+            GenericArgAST::Type(ty) => GenericArgAST::Type(self.fold_ty(ty)),\n         }\n     }\n \n@@ -244,11 +244,11 @@ pub trait Folder : Sized {\n         noop_fold_ty_param(tp, self)\n     }\n \n-    fn fold_generic_param(&mut self, param: GenericParam) -> GenericParam {\n+    fn fold_generic_param(&mut self, param: GenericParamAST) -> GenericParamAST {\n         noop_fold_generic_param(param, self)\n     }\n \n-    fn fold_generic_params(&mut self, params: Vec<GenericParam>) -> Vec<GenericParam> {\n+    fn fold_generic_params(&mut self, params: Vec<GenericParamAST>) -> Vec<GenericParamAST> {\n         noop_fold_generic_params(params, self)\n     }\n \n@@ -702,11 +702,11 @@ pub fn noop_fold_ty_param<T: Folder>(tp: TyParam, fld: &mut T) -> TyParam {\n     }\n }\n \n-pub fn noop_fold_generic_param<T: Folder>(param: GenericParam, fld: &mut T) -> GenericParam {\n+pub fn noop_fold_generic_param<T: Folder>(param: GenericParamAST, fld: &mut T) -> GenericParamAST {\n     match param {\n-        GenericParam::Lifetime(l) => {\n+        GenericParamAST::Lifetime(l) => {\n             let attrs: Vec<_> = l.attrs.into();\n-            GenericParam::Lifetime(LifetimeDef {\n+            GenericParamAST::Lifetime(LifetimeDef {\n                 attrs: attrs.into_iter()\n                     .flat_map(|x| fld.fold_attribute(x).into_iter())\n                     .collect::<Vec<_>>()\n@@ -718,14 +718,14 @@ pub fn noop_fold_generic_param<T: Folder>(param: GenericParam, fld: &mut T) -> G\n                 bounds: l.bounds.move_map(|l| noop_fold_lifetime(l, fld)),\n             })\n         }\n-        GenericParam::Type(t) => GenericParam::Type(fld.fold_ty_param(t)),\n+        GenericParamAST::Type(t) => GenericParamAST::Type(fld.fold_ty_param(t)),\n     }\n }\n \n pub fn noop_fold_generic_params<T: Folder>(\n-    params: Vec<GenericParam>,\n+    params: Vec<GenericParamAST>,\n     fld: &mut T\n-) -> Vec<GenericParam> {\n+) -> Vec<GenericParamAST> {\n     params.move_map(|p| fld.fold_generic_param(p))\n }\n "}, {"sha": "be4a4b8b11fbacdbd793da5a6935152e278cb4cc", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d643946550fa349729184a4f70abc01e21ceddc0", "patch": "@@ -21,8 +21,8 @@ use ast::EnumDef;\n use ast::{Expr, ExprKind, RangeLimits};\n use ast::{Field, FnDecl};\n use ast::{ForeignItem, ForeignItemKind, FunctionRetTy};\n-use ast::GenericParam;\n-use ast::GenericArg;\n+use ast::GenericParamAST;\n+use ast::GenericArgAST;\n use ast::{Ident, ImplItem, IsAuto, Item, ItemKind};\n use ast::{Label, Lifetime, LifetimeDef, Lit, LitKind};\n use ast::Local;\n@@ -1246,8 +1246,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// parse a TyKind::BareFn type:\n-    fn parse_ty_bare_fn(&mut self, generic_params: Vec<GenericParam>)\n-                            -> PResult<'a, TyKind> {\n+    fn parse_ty_bare_fn(&mut self, generic_params: Vec<GenericParamAST>) -> PResult<'a, TyKind> {\n         /*\n \n         [unsafe] [extern \"ABI\"] fn (S) -> T\n@@ -1566,7 +1565,7 @@ impl<'a> Parser<'a> {\n         Ok(P(ty))\n     }\n \n-    fn parse_remaining_bounds(&mut self, generic_params: Vec<GenericParam>, path: ast::Path,\n+    fn parse_remaining_bounds(&mut self, generic_params: Vec<GenericParamAST>, path: ast::Path,\n                               lo: Span, parse_plus: bool) -> PResult<'a, TyKind> {\n         let poly_trait_ref = PolyTraitRef::new(generic_params, path, lo.to(self.prev_span));\n         let mut bounds = vec![TraitTyParamBound(poly_trait_ref, TraitBoundModifier::None)];\n@@ -4864,7 +4863,7 @@ impl<'a> Parser<'a> {\n \n     /// Parses (possibly empty) list of lifetime and type parameters, possibly including\n     /// trailing comma and erroneous trailing attributes.\n-    crate fn parse_generic_params(&mut self) -> PResult<'a, Vec<ast::GenericParam>> {\n+    crate fn parse_generic_params(&mut self) -> PResult<'a, Vec<ast::GenericParamAST>> {\n         let mut params = Vec::new();\n         let mut seen_ty_param = false;\n         loop {\n@@ -4877,7 +4876,7 @@ impl<'a> Parser<'a> {\n                 } else {\n                     Vec::new()\n                 };\n-                params.push(ast::GenericParam::Lifetime(LifetimeDef {\n+                params.push(ast::GenericParamAST::Lifetime(LifetimeDef {\n                     attrs: attrs.into(),\n                     lifetime,\n                     bounds,\n@@ -4888,7 +4887,7 @@ impl<'a> Parser<'a> {\n                 }\n             } else if self.check_ident() {\n                 // Parse type parameter.\n-                params.push(ast::GenericParam::Type(self.parse_ty_param(attrs)?));\n+                params.push(ast::GenericParamAST::Type(self.parse_ty_param(attrs)?));\n                 seen_ty_param = true;\n             } else {\n                 // Check for trailing attributes and stop parsing.\n@@ -4938,15 +4937,15 @@ impl<'a> Parser<'a> {\n     /// Parses (possibly empty) list of lifetime and type arguments and associated type bindings,\n     /// possibly including trailing comma.\n     fn parse_generic_args(&mut self)\n-                          -> PResult<'a, (Vec<GenericArg>, Vec<TypeBinding>)> {\n+                          -> PResult<'a, (Vec<GenericArgAST>, Vec<TypeBinding>)> {\n         let mut args = Vec::new();\n         let mut bindings = Vec::new();\n         let mut seen_type = false;\n         let mut seen_binding = false;\n         loop {\n             if self.check_lifetime() && self.look_ahead(1, |t| !t.is_like_plus()) {\n                 // Parse lifetime argument.\n-                args.push(GenericArg::Lifetime(self.expect_lifetime()));\n+                args.push(GenericArgAST::Lifetime(self.expect_lifetime()));\n                 if seen_type || seen_binding {\n                     self.span_err(self.prev_span,\n                         \"lifetime parameters must be declared prior to type parameters\");\n@@ -4971,7 +4970,7 @@ impl<'a> Parser<'a> {\n                     self.span_err(ty_param.span,\n                         \"type parameters must be declared prior to associated type bindings\");\n                 }\n-                args.push(GenericArg::Type(ty_param));\n+                args.push(GenericArgAST::Type(ty_param));\n                 seen_type = true;\n             } else {\n                 break\n@@ -5693,7 +5692,7 @@ impl<'a> Parser<'a> {\n         Ok((keywords::Invalid.ident(), item_kind, Some(attrs)))\n     }\n \n-    fn parse_late_bound_lifetime_defs(&mut self) -> PResult<'a, Vec<GenericParam>> {\n+    fn parse_late_bound_lifetime_defs(&mut self) -> PResult<'a, Vec<GenericParamAST>> {\n         if self.eat_keyword(keywords::For) {\n             self.expect_lt()?;\n             let params = self.parse_generic_params()?;"}, {"sha": "a7a85a4c71fa528d67e1b6ae4df0aa7b9e1080db", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d643946550fa349729184a4f70abc01e21ceddc0", "patch": "@@ -13,7 +13,7 @@ pub use self::AnnNode::*;\n use rustc_target::spec::abi::{self, Abi};\n use ast::{self, BlockCheckMode, PatKind, RangeEnd, RangeSyntax};\n use ast::{SelfKind, RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n-use ast::{Attribute, MacDelimiter, GenericArg};\n+use ast::{Attribute, MacDelimiter, GenericArgAST};\n use util::parser::{self, AssocOp, Fixity};\n use attr;\n use codemap::{self, CodeMap};\n@@ -344,7 +344,7 @@ pub fn trait_item_to_string(i: &ast::TraitItem) -> String {\n     to_string(|s| s.print_trait_item(i))\n }\n \n-pub fn generic_params_to_string(generic_params: &[ast::GenericParam]) -> String {\n+pub fn generic_params_to_string(generic_params: &[ast::GenericParamAST]) -> String {\n     to_string(|s| s.print_generic_params(generic_params))\n }\n \n@@ -1017,10 +1017,10 @@ impl<'a> State<'a> {\n         Ok(())\n     }\n \n-    pub fn print_generic_arg(&mut self, generic_arg: &GenericArg) -> io::Result<()> {\n+    pub fn print_generic_arg(&mut self, generic_arg: &GenericArgAST) -> io::Result<()> {\n         match generic_arg {\n-            GenericArg::Lifetime(lt) => self.print_lifetime(lt),\n-            GenericArg::Type(ty) => self.print_type(ty),\n+            GenericArgAST::Lifetime(lt) => self.print_lifetime(lt),\n+            GenericArgAST::Type(ty) => self.print_type(ty),\n         }\n     }\n \n@@ -1443,7 +1443,7 @@ impl<'a> State<'a> {\n \n     fn print_formal_generic_params(\n         &mut self,\n-        generic_params: &[ast::GenericParam]\n+        generic_params: &[ast::GenericParamAST]\n     ) -> io::Result<()> {\n         if !generic_params.is_empty() {\n             self.s.word(\"for\")?;\n@@ -2869,7 +2869,7 @@ impl<'a> State<'a> {\n \n     pub fn print_generic_params(\n         &mut self,\n-        generic_params: &[ast::GenericParam]\n+        generic_params: &[ast::GenericParamAST]\n     ) -> io::Result<()> {\n         if generic_params.is_empty() {\n             return Ok(());\n@@ -2879,11 +2879,11 @@ impl<'a> State<'a> {\n \n         self.commasep(Inconsistent, &generic_params, |s, param| {\n             match *param {\n-                ast::GenericParam::Lifetime(ref lifetime_def) => {\n+                ast::GenericParamAST::Lifetime(ref lifetime_def) => {\n                     s.print_outer_attributes_inline(&lifetime_def.attrs)?;\n                     s.print_lifetime_bounds(&lifetime_def.lifetime, &lifetime_def.bounds)\n                 },\n-                ast::GenericParam::Type(ref ty_param) => s.print_ty_param(ty_param),\n+                ast::GenericParamAST::Type(ref ty_param) => s.print_ty_param(ty_param),\n             }\n         })?;\n \n@@ -3047,7 +3047,7 @@ impl<'a> State<'a> {\n                        unsafety: ast::Unsafety,\n                        decl: &ast::FnDecl,\n                        name: Option<ast::Ident>,\n-                       generic_params: &Vec<ast::GenericParam>)\n+                       generic_params: &Vec<ast::GenericParamAST>)\n                        -> io::Result<()> {\n         self.ibox(INDENT_UNIT)?;\n         if !generic_params.is_empty() {"}, {"sha": "caddd0513d136e04d1dacf51cc6b1b3c702732b7", "filename": "src/libsyntax/util/node_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibsyntax%2Futil%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibsyntax%2Futil%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fnode_count.rs?ref=d643946550fa349729184a4f70abc01e21ceddc0", "patch": "@@ -71,7 +71,7 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n         self.count += 1;\n         walk_ty(self, t)\n     }\n-    fn visit_generic_param(&mut self, param: &GenericParam) {\n+    fn visit_generic_param(&mut self, param: &GenericParamAST) {\n         self.count += 1;\n         walk_generic_param(self, param)\n     }"}, {"sha": "8a4fde21e63f7cdbb5fbbadd17d76a2cdd0d5ad4", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=d643946550fa349729184a4f70abc01e21ceddc0", "patch": "@@ -73,7 +73,7 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_expr(&mut self, ex: &'ast Expr) { walk_expr(self, ex) }\n     fn visit_expr_post(&mut self, _ex: &'ast Expr) { }\n     fn visit_ty(&mut self, t: &'ast Ty) { walk_ty(self, t) }\n-    fn visit_generic_param(&mut self, param: &'ast GenericParam) { walk_generic_param(self, param) }\n+    fn visit_generic_param(&mut self, param: &'ast GenericParamAST) { walk_generic_param(self, param) }\n     fn visit_generics(&mut self, g: &'ast Generics) { walk_generics(self, g) }\n     fn visit_where_predicate(&mut self, p: &'ast WherePredicate) {\n         walk_where_predicate(self, p)\n@@ -131,10 +131,10 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_generic_args(&mut self, path_span: Span, generic_args: &'ast GenericArgs) {\n         walk_generic_args(self, path_span, generic_args)\n     }\n-    fn visit_generic_arg(&mut self, generic_arg: &'ast GenericArg) {\n+    fn visit_generic_arg(&mut self, generic_arg: &'ast GenericArgAST) {\n         match generic_arg {\n-            GenericArg::Lifetime(lt) => self.visit_lifetime(lt),\n-            GenericArg::Type(ty)     => self.visit_ty(ty),\n+            GenericArgAST::Lifetime(lt) => self.visit_lifetime(lt),\n+            GenericArgAST::Type(ty)     => self.visit_ty(ty),\n         }\n     }\n     fn visit_assoc_type_binding(&mut self, type_binding: &'ast TypeBinding) {\n@@ -488,14 +488,14 @@ pub fn walk_ty_param_bound<'a, V: Visitor<'a>>(visitor: &mut V, bound: &'a TyPar\n     }\n }\n \n-pub fn walk_generic_param<'a, V: Visitor<'a>>(visitor: &mut V, param: &'a GenericParam) {\n+pub fn walk_generic_param<'a, V: Visitor<'a>>(visitor: &mut V, param: &'a GenericParamAST) {\n     match *param {\n-        GenericParam::Lifetime(ref l) => {\n+        GenericParamAST::Lifetime(ref l) => {\n             visitor.visit_ident(l.lifetime.ident);\n             walk_list!(visitor, visit_lifetime, &l.bounds);\n             walk_list!(visitor, visit_attribute, &*l.attrs);\n         }\n-        GenericParam::Type(ref t) => {\n+        GenericParamAST::Type(ref t) => {\n             visitor.visit_ident(t.ident);\n             walk_list!(visitor, visit_ty_param_bound, &t.bounds);\n             walk_list!(visitor, visit_ty, &t.default);"}, {"sha": "40d49b49960481154eef9945c19b2f2c3344a4d9", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=d643946550fa349729184a4f70abc01e21ceddc0", "patch": "@@ -13,7 +13,7 @@ use deriving::generic::*;\n use deriving::generic::ty::*;\n \n use syntax::ast::{self, Expr, Generics, ItemKind, MetaItem, VariantData};\n-use syntax::ast::GenericArg;\n+use syntax::ast::GenericArgAST;\n use syntax::attr;\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n@@ -124,7 +124,7 @@ fn cs_clone_shallow(name: &str,\n         let span = span.with_ctxt(cx.backtrace());\n         let assert_path = cx.path_all(span, true,\n                                         cx.std_path(&[\"clone\", helper_name]),\n-                                        vec![GenericArg::Type(ty)], vec![]);\n+                                        vec![GenericArgAST::Type(ty)], vec![]);\n         stmts.push(cx.stmt_let_type_only(span, cx.ty_path(assert_path)));\n     }\n     fn process_variant(cx: &mut ExtCtxt, stmts: &mut Vec<ast::Stmt>, variant: &VariantData) {"}, {"sha": "e9bcf70e90c8eaf91950823708119dc86978a390", "filename": "src/libsyntax_ext/deriving/cmp/eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs?ref=d643946550fa349729184a4f70abc01e21ceddc0", "patch": "@@ -12,7 +12,7 @@ use deriving::path_std;\n use deriving::generic::*;\n use deriving::generic::ty::*;\n \n-use syntax::ast::{self, Expr, MetaItem, GenericArg};\n+use syntax::ast::{self, Expr, MetaItem, GenericArgAST};\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n use syntax::ptr::P;\n@@ -62,7 +62,7 @@ fn cs_total_eq_assert(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure)\n         let span = span.with_ctxt(cx.backtrace());\n         let assert_path = cx.path_all(span, true,\n                                         cx.std_path(&[\"cmp\", helper_name]),\n-                                        vec![GenericArg::Type(ty)], vec![]);\n+                                        vec![GenericArgAST::Type(ty)], vec![]);\n         stmts.push(cx.stmt_let_type_only(span, cx.ty_path(assert_path)));\n     }\n     fn process_variant(cx: &mut ExtCtxt, stmts: &mut Vec<ast::Stmt>, variant: &ast::VariantData) {"}, {"sha": "f85091b0e719d25daf5218d76ab81d52233ad159", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=d643946550fa349729184a4f70abc01e21ceddc0", "patch": "@@ -192,8 +192,8 @@ use std::collections::HashSet;\n use std::vec;\n \n use rustc_target::spec::abi::Abi;\n-use syntax::ast::{self, BinOpKind, EnumDef, Expr, GenericParam, Generics, Ident, PatKind};\n-use syntax::ast::{VariantData, GenericArg};\n+use syntax::ast::{self, BinOpKind, EnumDef, Expr, GenericParamAST, Generics, Ident, PatKind};\n+use syntax::ast::{VariantData, GenericArgAST};\n use syntax::attr;\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n@@ -548,8 +548,8 @@ impl<'a> TraitDef<'a> {\n         // Create the generic parameters\n         params.extend(generics.params.iter().map(|param| {\n             match *param {\n-                ref l @ GenericParam::Lifetime(_) => l.clone(),\n-                GenericParam::Type(ref ty_param) => {\n+                ref l @ GenericParamAST::Lifetime(_) => l.clone(),\n+                GenericParamAST::Type(ref ty_param) => {\n                     // I don't think this can be moved out of the loop, since\n                     // a TyParamBound requires an ast id\n                     let mut bounds: Vec<_> =\n@@ -568,7 +568,7 @@ impl<'a> TraitDef<'a> {\n                         bounds.push((*declared_bound).clone());\n                     }\n \n-                    GenericParam::Type(cx.typaram(self.span, ty_param.ident, vec![], bounds, None))\n+                    GenericParamAST::Type(cx.typaram(self.span, ty_param.ident, vec![], bounds, None))\n                 }\n             }\n         }));\n@@ -607,7 +607,7 @@ impl<'a> TraitDef<'a> {\n \n             let mut ty_params = params.iter()\n                 .filter_map(|param| match *param {\n-                    ast::GenericParam::Type(ref t) => Some(t),\n+                    ast::GenericParamAST::Type(ref t) => Some(t),\n                     _ => None,\n                 })\n                 .peekable();\n@@ -668,7 +668,7 @@ impl<'a> TraitDef<'a> {\n         let self_ty_params: Vec<P<ast::Ty>> = generics.params\n             .iter()\n             .filter_map(|param| match *param {\n-                GenericParam::Type(ref ty_param)\n+                GenericParamAST::Type(ref ty_param)\n                     => Some(cx.ty_ident(self.span, ty_param.ident)),\n                 _ => None,\n             })\n@@ -677,15 +677,15 @@ impl<'a> TraitDef<'a> {\n         let self_lifetimes: Vec<ast::Lifetime> = generics.params\n             .iter()\n             .filter_map(|param| match *param {\n-                GenericParam::Lifetime(ref ld) => Some(ld.lifetime),\n+                GenericParamAST::Lifetime(ref ld) => Some(ld.lifetime),\n                 _ => None,\n             })\n             .collect();\n \n         let self_params = self_lifetimes.into_iter()\n-                                        .map(|lt| GenericArg::Lifetime(lt))\n+                                        .map(|lt| GenericArgAST::Lifetime(lt))\n                                         .chain(self_ty_params.into_iter().map(|ty|\n-                                            GenericArg::Type(ty)))\n+                                            GenericArgAST::Type(ty)))\n                                         .collect();\n \n         // Create the type of `self`."}, {"sha": "92046262ed2534299c2b208b754b817230265d87", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=d643946550fa349729184a4f70abc01e21ceddc0", "patch": "@@ -15,7 +15,7 @@ pub use self::PtrTy::*;\n pub use self::Ty::*;\n \n use syntax::ast;\n-use syntax::ast::{Expr, GenericParam, Generics, Ident, SelfKind, GenericArg};\n+use syntax::ast::{Expr, GenericParamAST, Generics, Ident, SelfKind, GenericArgAST};\n use syntax::ext::base::ExtCtxt;\n use syntax::ext::build::AstBuilder;\n use syntax::codemap::{respan, DUMMY_SP};\n@@ -89,8 +89,8 @@ impl<'a> Path<'a> {\n         let tys: Vec<P<ast::Ty>> =\n             self.params.iter().map(|t| t.to_ty(cx, span, self_ty, self_generics)).collect();\n         let params = lt.into_iter()\n-                       .map(|lt| GenericArg::Lifetime(lt))\n-                       .chain(tys.into_iter().map(|ty| GenericArg::Type(ty)))\n+                       .map(|lt| GenericArgAST::Lifetime(lt))\n+                       .chain(tys.into_iter().map(|ty| GenericArgAST::Type(ty)))\n                        .collect();\n \n         match self.kind {\n@@ -192,23 +192,23 @@ impl<'a> Ty<'a> {\n                 let ty_params: Vec<P<ast::Ty>> = self_generics.params\n                     .iter()\n                     .filter_map(|param| match *param {\n-                        GenericParam::Type(ref ty_param) => Some(cx.ty_ident(span, ty_param.ident)),\n+                        GenericParamAST::Type(ref ty_param) => Some(cx.ty_ident(span, ty_param.ident)),\n                         _ => None,\n                     })\n                     .collect();\n \n                 let lifetimes: Vec<ast::Lifetime> = self_generics.params\n                     .iter()\n                     .filter_map(|param| match *param {\n-                        GenericParam::Lifetime(ref ld) => Some(ld.lifetime),\n+                        GenericParamAST::Lifetime(ref ld) => Some(ld.lifetime),\n                         _ => None,\n                     })\n                     .collect();\n \n                 let params = lifetimes.into_iter()\n-                                      .map(|lt| GenericArg::Lifetime(lt))\n+                                      .map(|lt| GenericArgAST::Lifetime(lt))\n                                       .chain(ty_params.into_iter().map(|ty|\n-                                            GenericArg::Type(ty)))\n+                                            GenericArgAST::Type(ty)))\n                                       .collect();\n \n                 cx.path_all(span,\n@@ -242,7 +242,7 @@ fn mk_ty_param(cx: &ExtCtxt,\n     cx.typaram(span, cx.ident_of(name), attrs.to_owned(), bounds, None)\n }\n \n-fn mk_generics(params: Vec<GenericParam>, span: Span) -> Generics {\n+fn mk_generics(params: Vec<GenericParamAST>, span: Span) -> Generics {\n     Generics {\n         params,\n         where_clause: ast::WhereClause {\n@@ -280,13 +280,13 @@ impl<'a> LifetimeBounds<'a> {\n                 let bounds = bounds.iter()\n                     .map(|b| cx.lifetime(span, Ident::from_str(b)))\n                     .collect();\n-                GenericParam::Lifetime(cx.lifetime_def(span, Ident::from_str(lt), vec![], bounds))\n+                GenericParamAST::Lifetime(cx.lifetime_def(span, Ident::from_str(lt), vec![], bounds))\n             })\n             .chain(self.bounds\n                 .iter()\n                 .map(|t| {\n                     let (name, ref bounds) = *t;\n-                    GenericParam::Type(mk_ty_param(\n+                    GenericParamAST::Type(mk_ty_param(\n                         cx, span, name, &[], &bounds, self_ty, self_generics\n                     ))\n                 })"}, {"sha": "9bc19bb5ede6842e25e840f6ae2c1d973557566a", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=d643946550fa349729184a4f70abc01e21ceddc0", "patch": "@@ -135,7 +135,7 @@ fn hygienic_type_parameter(item: &Annotatable, base: &str) -> String {\n             ast::ItemKind::Struct(_, ast::Generics { ref params, .. }) |\n             ast::ItemKind::Enum(_, ast::Generics { ref params, .. }) => {\n                 for param in params.iter() {\n-                    if let ast::GenericParam::Type(ref ty) = *param{\n+                    if let ast::GenericParamAST::Type(ref ty) = *param {\n                         typaram.push_str(&ty.ident.as_str());\n                     }\n                 }"}, {"sha": "a3254788d45299c45e67e9205a9b5937aaf3eb06", "filename": "src/libsyntax_ext/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d643946550fa349729184a4f70abc01e21ceddc0/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=d643946550fa349729184a4f70abc01e21ceddc0", "patch": "@@ -13,7 +13,7 @@\n // interface.\n //\n \n-use syntax::ast::{self, Ident, GenericArg};\n+use syntax::ast::{self, Ident, GenericArgAST};\n use syntax::ext::base::*;\n use syntax::ext::base;\n use syntax::ext::build::AstBuilder;\n@@ -39,7 +39,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt,\n             cx.expr_path(cx.path_all(sp,\n                                      true,\n                                      cx.std_path(&[\"option\", \"Option\", \"None\"]),\n-                                     vec![GenericArg::Type(cx.ty_rptr(sp,\n+                                     vec![GenericArgAST::Type(cx.ty_rptr(sp,\n                                                      cx.ty_ident(sp, Ident::from_str(\"str\")),\n                                                      Some(lt),\n                                                      ast::Mutability::Immutable))],"}]}