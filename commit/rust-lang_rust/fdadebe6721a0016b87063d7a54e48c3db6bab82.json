{"sha": "fdadebe6721a0016b87063d7a54e48c3db6bab82", "node_id": "C_kwDOAAsO6NoAKGZkYWRlYmU2NzIxYTAwMTZiODcwNjNkN2E1NGU0OGMzZGI2YmFiODI", "commit": {"author": {"name": "Serial", "email": "69764315+Serial-ATA@users.noreply.github.com", "date": "2022-05-28T19:27:53Z"}, "committer": {"name": "Serial", "email": "69764315+Serial-ATA@users.noreply.github.com", "date": "2022-06-07T00:04:56Z"}, "message": "Add lint output to lint list", "tree": {"sha": "7999061c4a0780878b93c4cf49ded69a61c04498", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7999061c4a0780878b93c4cf49ded69a61c04498"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdadebe6721a0016b87063d7a54e48c3db6bab82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdadebe6721a0016b87063d7a54e48c3db6bab82", "html_url": "https://github.com/rust-lang/rust/commit/fdadebe6721a0016b87063d7a54e48c3db6bab82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdadebe6721a0016b87063d7a54e48c3db6bab82/comments", "author": {"login": "Serial-ATA", "id": 69764315, "node_id": "MDQ6VXNlcjY5NzY0MzE1", "avatar_url": "https://avatars.githubusercontent.com/u/69764315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Serial-ATA", "html_url": "https://github.com/Serial-ATA", "followers_url": "https://api.github.com/users/Serial-ATA/followers", "following_url": "https://api.github.com/users/Serial-ATA/following{/other_user}", "gists_url": "https://api.github.com/users/Serial-ATA/gists{/gist_id}", "starred_url": "https://api.github.com/users/Serial-ATA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Serial-ATA/subscriptions", "organizations_url": "https://api.github.com/users/Serial-ATA/orgs", "repos_url": "https://api.github.com/users/Serial-ATA/repos", "events_url": "https://api.github.com/users/Serial-ATA/events{/privacy}", "received_events_url": "https://api.github.com/users/Serial-ATA/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Serial-ATA", "id": 69764315, "node_id": "MDQ6VXNlcjY5NzY0MzE1", "avatar_url": "https://avatars.githubusercontent.com/u/69764315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Serial-ATA", "html_url": "https://github.com/Serial-ATA", "followers_url": "https://api.github.com/users/Serial-ATA/followers", "following_url": "https://api.github.com/users/Serial-ATA/following{/other_user}", "gists_url": "https://api.github.com/users/Serial-ATA/gists{/gist_id}", "starred_url": "https://api.github.com/users/Serial-ATA/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Serial-ATA/subscriptions", "organizations_url": "https://api.github.com/users/Serial-ATA/orgs", "repos_url": "https://api.github.com/users/Serial-ATA/repos", "events_url": "https://api.github.com/users/Serial-ATA/events{/privacy}", "received_events_url": "https://api.github.com/users/Serial-ATA/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "542d474d382373369f7d93128efd888546caf7d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/542d474d382373369f7d93128efd888546caf7d4", "html_url": "https://github.com/rust-lang/rust/commit/542d474d382373369f7d93128efd888546caf7d4"}], "stats": {"total": 279, "additions": 247, "deletions": 32}, "files": [{"sha": "42455998fe79007e4235acd29307af04a92897c3", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdadebe6721a0016b87063d7a54e48c3db6bab82/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fdadebe6721a0016b87063d7a54e48c3db6bab82/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=fdadebe6721a0016b87063d7a54e48c3db6bab82", "patch": "@@ -59,7 +59,7 @@ rustc_tools_util = { version = \"0.2\", path = \"rustc_tools_util\" }\n [features]\n deny-warnings = [\"clippy_lints/deny-warnings\"]\n integration = [\"tempfile\"]\n-internal = [\"clippy_lints/internal\"]\n+internal = [\"clippy_lints/internal\", \"tempfile\"]\n \n [package.metadata.rust-analyzer]\n # This package uses #[feature(rustc_private)]"}, {"sha": "eb4582b93f2c00e2691f4bdab0e74c555f8347ed", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdadebe6721a0016b87063d7a54e48c3db6bab82/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fdadebe6721a0016b87063d7a54e48c3db6bab82/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=fdadebe6721a0016b87063d7a54e48c3db6bab82", "patch": "@@ -10,6 +10,7 @@ edition = \"2021\"\n \n [dependencies]\n cargo_metadata = \"0.14\"\n+clippy_dev = { path = \"../clippy_dev\", optional = true }\n clippy_utils = { path = \"../clippy_utils\" }\n if_chain = \"1.0\"\n itertools = \"0.10.1\"\n@@ -18,6 +19,7 @@ quine-mc_cluskey = \"0.2\"\n regex-syntax = \"0.6\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = { version = \"1.0\", optional = true }\n+tempfile = { version = \"3.3.0\", optional = true }\n toml = \"0.5\"\n unicode-normalization = \"0.1\"\n unicode-script = { version = \"0.5\", default-features = false }\n@@ -30,7 +32,7 @@ url = { version = \"2.2\", features = [\"serde\"] }\n [features]\n deny-warnings = [\"clippy_utils/deny-warnings\"]\n # build clippy with internal lints enabled, off by default\n-internal = [\"clippy_utils/internal\", \"serde_json\"]\n+internal = [\"clippy_utils/internal\", \"serde_json\", \"tempfile\", \"clippy_dev\"]\n \n [package.metadata.rust-analyzer]\n # This crate uses #[feature(rustc_private)]"}, {"sha": "90430b71a0ef99638596bfa9ea7ac840fe035867", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fdadebe6721a0016b87063d7a54e48c3db6bab82/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdadebe6721a0016b87063d7a54e48c3db6bab82/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=fdadebe6721a0016b87063d7a54e48c3db6bab82", "patch": "@@ -32,20 +32,20 @@ declare_clippy_lint! {\n     /// makes code look more complex than it really is.\n     ///\n     /// ### Example\n-    /// ```rust,ignore\n+    /// ```rust\n+    /// # let (x, y) = (true, true);\n     /// if x {\n     ///     if y {\n-    ///         \u2026\n+    ///         // \u2026\n     ///     }\n     /// }\n-    ///\n     /// ```\n     ///\n     /// Use instead:\n-    ///\n-    /// ```rust,ignore\n+    /// ```rust\n+    /// # let (x, y) = (true, true);\n     /// if x && y {\n-    ///     \u2026\n+    ///     // \u2026\n     /// }\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]"}, {"sha": "bf8c810a3e75212a9ae598bce3062d2262a53dd8", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdadebe6721a0016b87063d7a54e48c3db6bab82/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdadebe6721a0016b87063d7a54e48c3db6bab82/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=fdadebe6721a0016b87063d7a54e48c3db6bab82", "patch": "@@ -178,7 +178,7 @@ declare_clippy_lint! {\n     /// if the `fn main()` is left implicit.\n     ///\n     /// ### Examples\n-    /// ``````rust\n+    /// ```rust\n     /// /// An example of a doctest with a `main()` function\n     /// ///\n     /// /// # Examples\n@@ -191,7 +191,7 @@ declare_clippy_lint! {\n     /// fn needless_main() {\n     ///     unimplemented!();\n     /// }\n-    /// ``````\n+    /// ```\n     #[clippy::version = \"1.40.0\"]\n     pub NEEDLESS_DOCTEST_MAIN,\n     style,"}, {"sha": "84dd61a1e4b0d6cb219ca9acdf933667fcab632a", "filename": "clippy_lints/src/large_include_file.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fdadebe6721a0016b87063d7a54e48c3db6bab82/clippy_lints%2Fsrc%2Flarge_include_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdadebe6721a0016b87063d7a54e48c3db6bab82/clippy_lints%2Fsrc%2Flarge_include_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_include_file.rs?ref=fdadebe6721a0016b87063d7a54e48c3db6bab82", "patch": "@@ -22,10 +22,11 @@ declare_clippy_lint! {\n     /// let included_bytes = include_bytes!(\"very_large_file.txt\");\n     /// ```\n     ///\n-    /// Instead, you can load the file at runtime:\n+    /// Use instead:\n     /// ```rust,ignore\n     /// use std::fs;\n     ///\n+    /// // You can load the file at runtime\n     /// let string = fs::read_to_string(\"very_large_file.txt\")?;\n     /// let bytes = fs::read(\"very_large_file.txt\")?;\n     /// ```"}, {"sha": "2a4e1262276d2858347b6ece10012332d4dd5d98", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fdadebe6721a0016b87063d7a54e48c3db6bab82/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdadebe6721a0016b87063d7a54e48c3db6bab82/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=fdadebe6721a0016b87063d7a54e48c3db6bab82", "patch": "@@ -46,6 +46,7 @@ declare_clippy_lint! {\n     /// - Does not match on `_127` since that is a valid grouping for decimal and octal numbers\n     ///\n     /// ### Example\n+    /// ```ignore\n     /// `2_32` => `2_i32`\n     /// `250_8 => `250_u8`\n     /// ```"}, {"sha": "904454037eade8982910d80c72b23033b600d543", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fdadebe6721a0016b87063d7a54e48c3db6bab82/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdadebe6721a0016b87063d7a54e48c3db6bab82/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=fdadebe6721a0016b87063d7a54e48c3db6bab82", "patch": "@@ -1039,6 +1039,7 @@ declare_clippy_lint! {\n     ///\n     /// // Good\n     /// _.split('x');\n+    /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub SINGLE_CHAR_PATTERN,\n     perf,"}, {"sha": "069d8374b2684230eb77ee44d58d92ef2c4ce202", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 210, "deletions": 18, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/fdadebe6721a0016b87063d7a54e48c3db6bab82/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdadebe6721a0016b87063d7a54e48c3db6bab82/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=fdadebe6721a0016b87063d7a54e48c3db6bab82", "patch": "@@ -31,6 +31,8 @@ use std::fmt::Write as _;\n use std::fs::{self, OpenOptions};\n use std::io::prelude::*;\n use std::path::Path;\n+use std::path::PathBuf;\n+use std::process::Command;\n \n /// This is the output file of the lint collector.\n const OUTPUT_FILE: &str = \"../util/gh-pages/lints.json\";\n@@ -180,6 +182,7 @@ pub struct MetadataCollector {\n     lints: BinaryHeap<LintMetadata>,\n     applicability_info: FxHashMap<String, ApplicabilityInfo>,\n     config: Vec<ClippyConfiguration>,\n+    clippy_project_root: PathBuf,\n }\n \n impl MetadataCollector {\n@@ -188,6 +191,7 @@ impl MetadataCollector {\n             lints: BinaryHeap::<LintMetadata>::default(),\n             applicability_info: FxHashMap::<String, ApplicabilityInfo>::default(),\n             config: collect_configs(),\n+            clippy_project_root: clippy_dev::clippy_project_root(),\n         }\n     }\n \n@@ -215,11 +219,13 @@ impl Drop for MetadataCollector {\n \n         // Mapping the final data\n         let mut lints = std::mem::take(&mut self.lints).into_sorted_vec();\n-        collect_renames(&mut lints);\n         for x in &mut lints {\n             x.applicability = Some(applicability_info.remove(&x.id).unwrap_or_default());\n+            replace_produces(&x.id, &mut x.docs, &self.clippy_project_root);\n         }\n \n+        collect_renames(&mut lints);\n+\n         // Outputting\n         if Path::new(OUTPUT_FILE).exists() {\n             fs::remove_file(OUTPUT_FILE).unwrap();\n@@ -263,14 +269,193 @@ impl LintMetadata {\n     }\n }\n \n+fn replace_produces(lint_name: &str, docs: &mut String, clippy_project_root: &Path) {\n+    let mut doc_lines = docs.lines().map(ToString::to_string).collect::<Vec<_>>();\n+    let mut lines = doc_lines.iter_mut();\n+\n+    'outer: loop {\n+        // Find the start of the example\n+\n+        // ```rust\n+        loop {\n+            match lines.next() {\n+                Some(line) if line.trim_start().starts_with(\"```rust\") => {\n+                    if line.contains(\"ignore\") || line.contains(\"no_run\") {\n+                        // A {{produces}} marker may have been put on a ignored code block by mistake,\n+                        // just seek to the end of the code block and continue checking.\n+                        if lines.any(|line| line.trim_start().starts_with(\"```\")) {\n+                            continue;\n+                        }\n+\n+                        panic!(\"lint `{}` has an unterminated code block\", lint_name)\n+                    }\n+\n+                    break;\n+                },\n+                Some(line) if line.trim_start() == \"{{produces}}\" => {\n+                    panic!(\n+                        \"lint `{}` has marker {{{{produces}}}} with an ignored or missing code block\",\n+                        lint_name\n+                    )\n+                },\n+                Some(line) => {\n+                    let line = line.trim();\n+                    // These are the two most common markers of the corrections section\n+                    if line.eq_ignore_ascii_case(\"Use instead:\") || line.eq_ignore_ascii_case(\"Could be written as:\") {\n+                        break 'outer;\n+                    }\n+                },\n+                None => break 'outer,\n+            }\n+        }\n+\n+        // Collect the example\n+        let mut example = Vec::new();\n+        loop {\n+            match lines.next() {\n+                Some(line) if line.trim_start() == \"```\" => break,\n+                Some(line) => example.push(line),\n+                None => panic!(\"lint `{}` has an unterminated code block\", lint_name),\n+            }\n+        }\n+\n+        // Find the {{produces}} and attempt to generate the output\n+        loop {\n+            match lines.next() {\n+                Some(line) if line.is_empty() => {},\n+                Some(line) if line.trim() == \"{{produces}}\" => {\n+                    let output = get_lint_output(lint_name, &example, clippy_project_root);\n+                    line.replace_range(\n+                        ..,\n+                        &format!(\n+                            \"<details>\\\n+                            <summary>Produces</summary>\\n\\\n+                            \\n\\\n+                            ```text\\n\\\n+                            {}\\n\\\n+                            ```\\n\\\n+                        </details>\",\n+                            output\n+                        ),\n+                    );\n+\n+                    break;\n+                },\n+                // No {{produces}}, we can move on to the next example\n+                Some(_) => break,\n+                None => break 'outer,\n+            }\n+        }\n+    }\n+\n+    *docs = cleanup_docs(&doc_lines);\n+}\n+\n+fn get_lint_output(lint_name: &str, example: &[&mut String], clippy_project_root: &Path) -> String {\n+    let dir = tempfile::tempdir().unwrap_or_else(|e| panic!(\"failed to create temp dir: {e}\"));\n+    let file = dir.path().join(\"lint_example.rs\");\n+\n+    let mut source = String::new();\n+    let unhidden = example\n+        .iter()\n+        .map(|line| line.trim_start().strip_prefix(\"# \").unwrap_or(line));\n+\n+    // Get any attributes\n+    let mut lines = unhidden.peekable();\n+    while let Some(line) = lines.peek() {\n+        if line.starts_with(\"#!\") {\n+            source.push_str(line);\n+            source.push('\\n');\n+            lines.next();\n+        } else {\n+            break;\n+        }\n+    }\n+\n+    let needs_main = !example.iter().any(|line| line.contains(\"fn main\"));\n+    if needs_main {\n+        source.push_str(\"fn main() {\\n\");\n+    }\n+\n+    for line in lines {\n+        source.push_str(line);\n+        source.push('\\n');\n+    }\n+\n+    if needs_main {\n+        source.push_str(\"}\\n\");\n+    }\n+\n+    if let Err(e) = fs::write(&file, &source) {\n+        panic!(\"failed to write to `{}`: {e}\", file.as_path().to_string_lossy());\n+    }\n+\n+    let prefixed_name = format!(\"{}{lint_name}\", CLIPPY_LINT_GROUP_PREFIX);\n+\n+    let mut cmd = Command::new(\"cargo\");\n+\n+    cmd.current_dir(clippy_project_root)\n+        .env(\"CARGO_INCREMENTAL\", \"0\")\n+        .env(\"CLIPPY_ARGS\", \"\")\n+        .env(\"CLIPPY_DISABLE_DOCS_LINKS\", \"1\")\n+        // We need to disable this to enable all lints\n+        .env(\"ENABLE_METADATA_COLLECTION\", \"0\")\n+        .args([\"run\", \"--bin\", \"clippy-driver\"])\n+        .args([\"--target-dir\", \"./clippy_lints/target\"])\n+        .args([\"--\", \"--error-format=json\"])\n+        .args([\"--edition\", \"2021\"])\n+        .arg(\"-Cdebuginfo=0\")\n+        .args([\"-A\", \"clippy::all\"])\n+        .args([\"-W\", &prefixed_name])\n+        .args([\"-L\", \"./target/debug\"])\n+        .args([\"-Z\", \"no-codegen\"]);\n+\n+    let output = cmd\n+        .arg(file.as_path())\n+        .output()\n+        .unwrap_or_else(|e| panic!(\"failed to run `{:?}`: {e}\", cmd));\n+\n+    let tmp_file_path = file.to_string_lossy();\n+    let stderr = std::str::from_utf8(&output.stderr).unwrap();\n+    let msgs = stderr\n+        .lines()\n+        .filter(|line| line.starts_with('{'))\n+        .map(|line| serde_json::from_str(line).unwrap())\n+        .collect::<Vec<serde_json::Value>>();\n+\n+    let mut rendered = String::new();\n+    let iter = msgs\n+        .iter()\n+        .filter(|msg| matches!(&msg[\"code\"][\"code\"], serde_json::Value::String(s) if s == &prefixed_name));\n+\n+    for message in iter {\n+        let rendered_part = message[\"rendered\"].as_str().expect(\"rendered field should exist\");\n+        rendered.push_str(rendered_part);\n+    }\n+\n+    if rendered.is_empty() {\n+        let rendered: Vec<&str> = msgs.iter().filter_map(|msg| msg[\"rendered\"].as_str()).collect();\n+        let non_json: Vec<&str> = stderr.lines().filter(|line| !line.starts_with('{')).collect();\n+        panic!(\n+            \"did not find lint `{}` in output of example, got:\\n{}\\n{}\",\n+            lint_name,\n+            non_json.join(\"\\n\"),\n+            rendered.join(\"\\n\")\n+        );\n+    }\n+\n+    // The reader doesn't need to see `/tmp/.tmpfiy2Qd/lint_example.rs` :)\n+    rendered.trim_end().replace(&*tmp_file_path, \"lint_example.rs\")\n+}\n+\n #[derive(Debug, Clone, Serialize, PartialEq, Eq, PartialOrd, Ord)]\n struct SerializableSpan {\n     path: String,\n     line: usize,\n }\n \n-impl std::fmt::Display for SerializableSpan {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+impl fmt::Display for SerializableSpan {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}:{}\", self.path.rsplit('/').next().unwrap_or_default(), self.line)\n     }\n }\n@@ -435,10 +620,10 @@ impl<'hir> LateLintPass<'hir> for MetadataCollector {\n                 if !BLACK_LISTED_LINTS.contains(&lint_name.as_str());\n                 // metadata extraction\n                 if let Some((group, level)) = get_lint_group_and_level_or_lint(cx, &lint_name, item);\n-                if let Some(mut docs) = extract_attr_docs_or_lint(cx, item);\n+                if let Some(mut raw_docs) = extract_attr_docs_or_lint(cx, item);\n                 then {\n                     if let Some(configuration_section) = self.get_lint_configs(&lint_name) {\n-                        docs.push_str(&configuration_section);\n+                        raw_docs.push_str(&configuration_section);\n                     }\n                     let version = get_lint_version(cx, item);\n \n@@ -448,7 +633,7 @@ impl<'hir> LateLintPass<'hir> for MetadataCollector {\n                         group,\n                         level,\n                         version,\n-                        docs,\n+                        raw_docs,\n                     ));\n                 }\n             }\n@@ -459,7 +644,7 @@ impl<'hir> LateLintPass<'hir> for MetadataCollector {\n                 let lint_name = sym_to_string(item.ident.name).to_ascii_lowercase();\n                 if !BLACK_LISTED_LINTS.contains(&lint_name.as_str());\n                 // Metadata the little we can get from a deprecated lint\n-                if let Some(docs) = extract_attr_docs_or_lint(cx, item);\n+                if let Some(raw_docs) = extract_attr_docs_or_lint(cx, item);\n                 then {\n                     let version = get_lint_version(cx, item);\n \n@@ -469,7 +654,7 @@ impl<'hir> LateLintPass<'hir> for MetadataCollector {\n                         DEPRECATED_LINT_GROUP_STR.to_string(),\n                         DEPRECATED_LINT_LEVEL,\n                         version,\n-                        docs,\n+                        raw_docs,\n                     ));\n                 }\n             }\n@@ -535,22 +720,28 @@ fn extract_attr_docs_or_lint(cx: &LateContext<'_>, item: &Item<'_>) -> Option<St\n /// ```\n ///\n /// Would result in `Hello world!\\n=^.^=\\n`\n-///\n-/// ---\n-///\n+fn extract_attr_docs(cx: &LateContext<'_>, item: &Item<'_>) -> Option<String> {\n+    let attrs = cx.tcx.hir().attrs(item.hir_id());\n+    let mut lines = attrs.iter().filter_map(ast::Attribute::doc_str);\n+\n+    if let Some(line) = lines.next() {\n+        let raw_docs = lines.fold(String::from(line.as_str()) + \"\\n\", |s, line| s + line.as_str() + \"\\n\");\n+        return Some(raw_docs);\n+    }\n+\n+    None\n+}\n+\n /// This function may modify the doc comment to ensure that the string can be displayed using a\n /// markdown viewer in Clippy's lint list. The following modifications could be applied:\n /// * Removal of leading space after a new line. (Important to display tables)\n /// * Ensures that code blocks only contain language information\n-fn extract_attr_docs(cx: &LateContext<'_>, item: &Item<'_>) -> Option<String> {\n-    let attrs = cx.tcx.hir().attrs(item.hir_id());\n-    let mut lines = attrs.iter().filter_map(ast::Attribute::doc_str);\n-    let mut docs = String::from(lines.next()?.as_str());\n+fn cleanup_docs(docs_collection: &Vec<String>) -> String {\n     let mut in_code_block = false;\n     let mut is_code_block_rust = false;\n-    for line in lines {\n-        let line = line.as_str();\n \n+    let mut docs = String::new();\n+    for line in docs_collection {\n         // Rustdoc hides code lines starting with `# ` and this removes them from Clippy's lint list :)\n         if is_code_block_rust && line.trim_start().starts_with(\"# \") {\n             continue;\n@@ -583,7 +774,8 @@ fn extract_attr_docs(cx: &LateContext<'_>, item: &Item<'_>) -> Option<String> {\n             docs.push_str(line);\n         }\n     }\n-    Some(docs)\n+\n+    docs\n }\n \n fn get_lint_version(cx: &LateContext<'_>, item: &Item<'_>) -> String {"}, {"sha": "fffc53603424ba831f52c94c14be81ed01af4b00", "filename": "tests/dogfood.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fdadebe6721a0016b87063d7a54e48c3db6bab82/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdadebe6721a0016b87063d7a54e48c3db6bab82/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=fdadebe6721a0016b87063d7a54e48c3db6bab82", "patch": "@@ -21,7 +21,7 @@ fn dogfood_clippy() {\n \n     // \"\" is the root package\n     for package in &[\"\", \"clippy_dev\", \"clippy_lints\", \"clippy_utils\", \"rustc_tools_util\"] {\n-        run_clippy_for_package(package, &[]);\n+        run_clippy_for_package(package, &[\"-D\", \"clippy::all\", \"-D\", \"clippy::pedantic\"]);\n     }\n }\n \n@@ -77,8 +77,6 @@ fn run_clippy_for_package(project: &str, args: &[&str]) {\n         .arg(\"--all-features\")\n         .arg(\"--\")\n         .args(args)\n-        .args(&[\"-D\", \"clippy::all\"])\n-        .args(&[\"-D\", \"clippy::pedantic\"])\n         .arg(\"-Cdebuginfo=0\"); // disable debuginfo to generate less data in the target dir\n \n     if cfg!(feature = \"internal\") {"}, {"sha": "4999cce75114b77b6e3223a1fdf54f3fbc167e0d", "filename": "util/gh-pages/index.html", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fdadebe6721a0016b87063d7a54e48c3db6bab82/util%2Fgh-pages%2Findex.html", "raw_url": "https://github.com/rust-lang/rust/raw/fdadebe6721a0016b87063d7a54e48c3db6bab82/util%2Fgh-pages%2Findex.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fgh-pages%2Findex.html?ref=fdadebe6721a0016b87063d7a54e48c3db6bab82", "patch": "@@ -206,6 +206,26 @@\n             margin: auto 5px;\n             font-family: monospace;\n         }\n+\n+        details {\n+            border-radius: 4px;\n+            padding: .5em .5em 0;\n+        }\n+\n+        code {\n+            white-space: pre !important;\n+        }\n+\n+        summary {\n+            font-weight: bold;\n+            margin: -.5em -.5em 0;\n+            padding: .5em;\n+            display: revert;\n+        }\n+\n+        details[open] {\n+            padding: .5em;\n+        }\n     </style>\n     <style>\n         /* Expanding the mdBoom theme*/"}]}