{"sha": "76d6120e521b6546c54722e0dabfe8e73a5d6e73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ZDYxMjBlNTIxYjY1NDZjNTQ3MjJlMGRhYmZlOGU3M2E1ZDZlNzM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-19T19:00:09Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-21T03:12:14Z"}, "message": "Fix resolve bug that made nested classes not work\n\nIt wasn't possible to refer to the constructor for a class nested inside\nan item from the class's outer scope. Fixed.", "tree": {"sha": "637a0dd02f56112bef4ec6f597cda8b74bf7a296", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/637a0dd02f56112bef4ec6f597cda8b74bf7a296"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76d6120e521b6546c54722e0dabfe8e73a5d6e73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76d6120e521b6546c54722e0dabfe8e73a5d6e73", "html_url": "https://github.com/rust-lang/rust/commit/76d6120e521b6546c54722e0dabfe8e73a5d6e73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76d6120e521b6546c54722e0dabfe8e73a5d6e73/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6db7843f46afd5cd905b2e3a4266a23c4bb41ef1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6db7843f46afd5cd905b2e3a4266a23c4bb41ef1", "html_url": "https://github.com/rust-lang/rust/commit/6db7843f46afd5cd905b2e3a4266a23c4bb41ef1"}], "stats": {"total": 48, "additions": 31, "deletions": 17}, "files": [{"sha": "78a0f1bfef7472aac7fa866ffa2779725d0ec6af", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/76d6120e521b6546c54722e0dabfe8e73a5d6e73/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d6120e521b6546c54722e0dabfe8e73a5d6e73/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=76d6120e521b6546c54722e0dabfe8e73a5d6e73", "patch": "@@ -573,7 +573,6 @@ fn visit_item_with_scope(e: @env, i: @ast::item,\n       }\n       ast::item_class(tps, ifaces, members, ctor, m_dtor, _) {\n         v.visit_ty_params(tps, sc, v);\n-        // Can maybe skip this now that we require self on class fields\n         let class_scope = @cons(scope_item(i), sc);\n         /* visit the constructor... */\n         let ctor_scope = @cons(scope_method(ctor.node.self_id, tps),\n@@ -1061,7 +1060,7 @@ fn lookup_in_scope(e: env, &&sc: scopes, sp: span, name: ident, ns: namespace,\n               }\n               ast::item_class(tps, _, members, ctor, _, _) {\n                   if ns == ns_type {\n-                    ret lookup_in_ty_params(e, name, tps);\n+                      ret lookup_in_ty_params(e, name, tps);\n                   }\n                   if ns == ns_val && name == it.ident {\n                       ret some(ast::def_fn(local_def(ctor.node.id),\n@@ -1317,13 +1316,14 @@ fn found_def_item(i: @ast::item, ns: namespace) -> option<def> {\n     alt i.node {\n       ast::item_const(*) {\n         if ns == ns_val {\n-            ret some(ast::def_const(local_def(i.id))); }\n+            ret some(ast::def_const(local_def(i.id)));\n+        }\n       }\n       ast::item_fn(decl, _, _) {\n-        if ns == ns_val {\n+          if ns == ns_val {\n             ret some(ast::def_fn(local_def(i.id), decl.purity));\n-        }\n-      }\n+           }\n+       }\n       ast::item_mod(_) {\n         if ns == ns_module { ret some(ast::def_mod(local_def(i.id))); }\n       }\n@@ -1342,9 +1342,16 @@ fn found_def_item(i: @ast::item, ns: namespace) -> option<def> {\n           _ { }\n         }\n       }\n-      ast::item_class(*) {\n-          if ns == ns_type {\n-            ret some(ast::def_class(local_def(i.id)));\n+      ast::item_class(_, _, _members, ct, _, _) {\n+          alt ns {\n+             ns_type {\n+               ret some(ast::def_class(local_def(i.id)));\n+             }\n+             ns_val {\n+               ret some(ast::def_fn(local_def(ct.node.id),\n+                                    ast::impure_fn));\n+             }\n+             ns_module { }\n           }\n       }\n       ast::item_impl(*) { /* ??? */ }\n@@ -1653,14 +1660,6 @@ fn index_mod(md: ast::_mod) -> mod_index {\n           ast::item_class(tps, _, items, ctor, _, _) {\n               // add the class name itself\n               add_to_index(index, it.ident, mie_item(it));\n-              // add the constructor decl\n-              add_to_index(index, it.ident,\n-                           mie_item(@{ident: it.ident, attrs: [],\n-                            id: ctor.node.id,\n-                            node:\n-                              item_fn(ctor.node.dec, tps, ctor.node.body),\n-                            vis: ast::public,\n-                            span: ctor.node.body.span}));\n           }\n         }\n     }"}, {"sha": "b0f62cc3ea915a7d7365f344c90738728e4a1be6", "filename": "src/test/run-pass/nested-class.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/76d6120e521b6546c54722e0dabfe8e73a5d6e73/src%2Ftest%2Frun-pass%2Fnested-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d6120e521b6546c54722e0dabfe8e73a5d6e73/src%2Ftest%2Frun-pass%2Fnested-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-class.rs?ref=76d6120e521b6546c54722e0dabfe8e73a5d6e73", "patch": "@@ -0,0 +1,15 @@\n+fn main() {\n+  \n+  class b {\n+    let i: int;\n+    fn do_stuff() -> int { ret 37; }\n+    new(i:int) { self.i = i; }\n+  }\n+\n+  //  fn b(x:int) -> int { fail; }\n+\n+  let z = b(42);\n+  assert(z.i == 42);\n+  assert(z.do_stuff() == 37);\n+  \n+}\n\\ No newline at end of file"}]}