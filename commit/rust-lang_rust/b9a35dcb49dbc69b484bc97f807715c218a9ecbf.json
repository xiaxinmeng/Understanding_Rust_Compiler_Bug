{"sha": "b9a35dcb49dbc69b484bc97f807715c218a9ecbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5YTM1ZGNiNDlkYmM2OWI0ODRiYzk3ZjgwNzcxNWMyMThhOWVjYmY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-06T10:10:03Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-07T15:54:31Z"}, "message": "calling the ptr hooks no longer needs expensive preparation, remove the opt-out", "tree": {"sha": "442fc6ddda57172ded2e8387a7f9b45e8259634b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/442fc6ddda57172ded2e8387a7f9b45e8259634b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9a35dcb49dbc69b484bc97f807715c218a9ecbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9a35dcb49dbc69b484bc97f807715c218a9ecbf", "html_url": "https://github.com/rust-lang/rust/commit/b9a35dcb49dbc69b484bc97f807715c218a9ecbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9a35dcb49dbc69b484bc97f807715c218a9ecbf/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f27cd60ae1819b3b23fc8c3cb21d5f7d457014a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f27cd60ae1819b3b23fc8c3cb21d5f7d457014a1", "html_url": "https://github.com/rust-lang/rust/commit/f27cd60ae1819b3b23fc8c3cb21d5f7d457014a1"}], "stats": {"total": 24, "additions": 8, "deletions": 16}, "files": [{"sha": "cbcc6709c0199c05b7f2270f6758c29b1f8459ad", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b9a35dcb49dbc69b484bc97f807715c218a9ecbf/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a35dcb49dbc69b484bc97f807715c218a9ecbf/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=b9a35dcb49dbc69b484bc97f807715c218a9ecbf", "patch": "@@ -351,7 +351,6 @@ impl<'a, 'mir, 'tcx> interpret::Machine<'a, 'mir, 'tcx>\n     type MemoryMap = FxHashMap<AllocId, (MemoryKind<!>, Allocation)>;\n \n     const STATIC_KIND: Option<!> = None; // no copying of statics allowed\n-    const ENABLE_PTR_TRACKING_HOOKS: bool = false; // we don't have no provenance\n \n     #[inline(always)]\n     fn enforce_validity(_ecx: &EvalContext<'a, 'mir, 'tcx, Self>) -> bool {"}, {"sha": "55da12a68e38550210c3896c2860829be31f5986", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b9a35dcb49dbc69b484bc97f807715c218a9ecbf/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a35dcb49dbc69b484bc97f807715c218a9ecbf/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=b9a35dcb49dbc69b484bc97f807715c218a9ecbf", "patch": "@@ -95,11 +95,6 @@ pub trait Machine<'a, 'mir, 'tcx>: Sized {\n     /// that is added to the memory so that the work is not done twice.\n     const STATIC_KIND: Option<Self::MemoryKinds>;\n \n-    /// As an optimization, you can prevent the pointer tracking hooks from ever being\n-    /// called.  You should only do this if you do not care about provenance tracking.\n-    /// This controls the `tag_reference` and `tag_dereference` hooks.\n-    const ENABLE_PTR_TRACKING_HOOKS: bool;\n-\n     /// Whether to enforce the validity invariant\n     fn enforce_validity(ecx: &EvalContext<'a, 'mir, 'tcx, Self>) -> bool;\n "}, {"sha": "d52250a43ac9f340c257de3928ef39f69425969d", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b9a35dcb49dbc69b484bc97f807715c218a9ecbf/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9a35dcb49dbc69b484bc97f807715c218a9ecbf/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=b9a35dcb49dbc69b484bc97f807715c218a9ecbf", "patch": "@@ -290,16 +290,14 @@ where\n         let mplace = MemPlace { ptr, align, meta };\n         let mut mplace = MPlaceTy { mplace, layout };\n         // Pointer tag tracking might want to adjust the tag.\n-        if M::ENABLE_PTR_TRACKING_HOOKS {\n-            let mutbl = match val.layout.ty.sty {\n-                // `builtin_deref` considers boxes immutable, that's useless for our purposes\n-                ty::Ref(_, _, mutbl) => Some(mutbl),\n-                ty::Adt(def, _) if def.is_box() => Some(hir::MutMutable),\n-                ty::RawPtr(_) => None,\n-                _ => bug!(\"Unexpected pointer type {}\", val.layout.ty.sty),\n-            };\n-            mplace.mplace.ptr = M::tag_dereference(self, mplace, mutbl)?;\n-        }\n+        let mutbl = match val.layout.ty.sty {\n+            // `builtin_deref` considers boxes immutable, that's useless for our purposes\n+            ty::Ref(_, _, mutbl) => Some(mutbl),\n+            ty::Adt(def, _) if def.is_box() => Some(hir::MutMutable),\n+            ty::RawPtr(_) => None,\n+            _ => bug!(\"Unexpected pointer type {}\", val.layout.ty.sty),\n+        };\n+        mplace.mplace.ptr = M::tag_dereference(self, mplace, mutbl)?;\n         // Done\n         Ok(mplace)\n     }"}]}