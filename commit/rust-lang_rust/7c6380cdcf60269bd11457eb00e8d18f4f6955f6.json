{"sha": "7c6380cdcf60269bd11457eb00e8d18f4f6955f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjNjM4MGNkY2Y2MDI2OWJkMTE0NTdlYjAwZThkMThmNGY2OTU1ZjY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-02-02T08:29:23Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-02-02T14:48:49Z"}, "message": "Rollup merge of #47919 - varkor:to_degrees-precision, r=rkruppe Use constant for 180/\u03c0 in to_degrees The current `f32|f64.to_degrees` implementation uses a division to calculate `180/\u03c0`, which causes a loss of precision. Using a constant is still not perfect (implementing a maximally-precise algorithm would come with a high performance cost), but improves precision with a minimal change. As per the discussion in #29944, this fixes #29944 (the costs of improving the precision further would not outweigh the gains).", "tree": {"sha": "18c289173179b5d2e9d4051009774421ba42dd32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18c289173179b5d2e9d4051009774421ba42dd32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c6380cdcf60269bd11457eb00e8d18f4f6955f6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlp0elEACgkQ/vbIBR0O\nATyk2A//dWKAhNsF3Z2egramNZkNQibhCjaftBSGmHIAwT2SJBajDPUdLidOa7li\nTL7+/JF392vRAkvL6s3hPr1XNjKfTYhQL6nYy0yFDQcqZ5sNcDN2ZBTbsF1nks4v\nqw6DXF7Nf0S+tNkKOtKubf0GX+knaxvfUPhDSF3iGorskNhK63TUY9b2mdIVr/IE\nTq/5MBiLLd7KPrqSKlKZDsf3HJVHU/Kxed4J+iCvsqS1AcoNLTy+gvYJUA+1t4EO\nH6ym6gcLxqcjOZMmBY2zXal7Ookozt77MBTUK6WNKDyi34GmIQ0i3nq3KpJ1YUB/\nTIYtVGn6fBCYDWDYBLxRAcTS7MiMZGptk/0BMKR4vlat3O2a2jWE98cjGAf/0Zei\nrRaeDgj8KNgeg+1d8uZETrIxrBxmGroBQliyup41mxPyykkwL40P26kGa5d7Apsy\nEyDtAWCUiw91ElOFdCt6WOy70tHnAzB7U/WEAjQT95GmFWep+PtXEQdWSLgRfe/l\neKrW8b9eDHGnxMWfn1Nqu7TwR7NNNI/lFYkBBJDqUS14LVdvxby/rFG19KifddL4\noVl0IpiM/67++lj9QB+26yFIc+wUcSSmDxPkxj4zUs4D9DJh9rl6qTOWPHq6X8MC\nCrwi7BaBbXgyV7dIIoq8N/7jDQYoS07pdcIOftyxDI8fm0pr3+4=\n=No+k\n-----END PGP SIGNATURE-----", "payload": "tree 18c289173179b5d2e9d4051009774421ba42dd32\nparent 5edeff31305c36a440ca8482043ad52e6f14b0ed\nparent e34c31bf02eb0f0ff4dd43ae72e0eae53f2ac519\nauthor kennytm <kennytm@gmail.com> 1517560163 +0800\ncommitter kennytm <kennytm@gmail.com> 1517582929 +0800\n\nRollup merge of #47919 - varkor:to_degrees-precision, r=rkruppe Use constant for 180/\u03c0 in to_degrees The current `f32|f64.to_degrees` implementation uses a division to calculate `180/\u03c0`, which causes a loss of precision. Using a constant is still not perfect (implementing a maximally-precise algorithm would come with a high performance cost), but improves precision with a minimal change. As per the discussion in #29944, this fixes #29944 (the costs of improving the precision further would not outweigh the gains).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c6380cdcf60269bd11457eb00e8d18f4f6955f6", "html_url": "https://github.com/rust-lang/rust/commit/7c6380cdcf60269bd11457eb00e8d18f4f6955f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c6380cdcf60269bd11457eb00e8d18f4f6955f6/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5edeff31305c36a440ca8482043ad52e6f14b0ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/5edeff31305c36a440ca8482043ad52e6f14b0ed", "html_url": "https://github.com/rust-lang/rust/commit/5edeff31305c36a440ca8482043ad52e6f14b0ed"}, {"sha": "e34c31bf02eb0f0ff4dd43ae72e0eae53f2ac519", "url": "https://api.github.com/repos/rust-lang/rust/commits/e34c31bf02eb0f0ff4dd43ae72e0eae53f2ac519", "html_url": "https://github.com/rust-lang/rust/commit/e34c31bf02eb0f0ff4dd43ae72e0eae53f2ac519"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "3586fa5442fb44a1712882cbc8864570fa5ea04a", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c6380cdcf60269bd11457eb00e8d18f4f6955f6/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c6380cdcf60269bd11457eb00e8d18f4f6955f6/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=7c6380cdcf60269bd11457eb00e8d18f4f6955f6", "patch": "@@ -239,7 +239,9 @@ impl Float for f32 {\n     /// Converts to degrees, assuming the number is in radians.\n     #[inline]\n     fn to_degrees(self) -> f32 {\n-        self * (180.0f32 / consts::PI)\n+        // Use a constant for better precision.\n+        const PIS_IN_180: f32 = 57.2957795130823208767981548141051703_f32;\n+        self * PIS_IN_180\n     }\n \n     /// Converts to radians, assuming the number is in degrees."}, {"sha": "64c0d508b388cf6b41b8a3df3e0567af55092822", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c6380cdcf60269bd11457eb00e8d18f4f6955f6/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c6380cdcf60269bd11457eb00e8d18f4f6955f6/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=7c6380cdcf60269bd11457eb00e8d18f4f6955f6", "patch": "@@ -237,6 +237,9 @@ impl Float for f64 {\n     /// Converts to degrees, assuming the number is in radians.\n     #[inline]\n     fn to_degrees(self) -> f64 {\n+        // The division here is correctly rounded with respect to the true\n+        // value of 180/\u03c0. (This differs from f32, where a constant must be\n+        // used to ensure a correctly rounded result.)\n         self * (180.0f64 / consts::PI)\n     }\n "}, {"sha": "ecf68f29d6f1f7c80c4324d1c71073b09a8a019c", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c6380cdcf60269bd11457eb00e8d18f4f6955f6/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c6380cdcf60269bd11457eb00e8d18f4f6955f6/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=7c6380cdcf60269bd11457eb00e8d18f4f6955f6", "patch": "@@ -1531,6 +1531,7 @@ mod tests {\n         assert!(nan.to_degrees().is_nan());\n         assert_eq!(inf.to_degrees(), inf);\n         assert_eq!(neg_inf.to_degrees(), neg_inf);\n+        assert_eq!(1_f32.to_degrees(), 57.2957795130823208767981548141051703);\n     }\n \n     #[test]"}]}