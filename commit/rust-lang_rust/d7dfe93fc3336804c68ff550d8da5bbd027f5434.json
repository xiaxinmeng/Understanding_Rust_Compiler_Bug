{"sha": "d7dfe93fc3336804c68ff550d8da5bbd027f5434", "node_id": "C_kwDOAAsO6NoAKGQ3ZGZlOTNmYzMzMzY4MDRjNjhmZjU1MGQ4ZGE1YmJkMDI3ZjU0MzQ", "commit": {"author": {"name": "Heinenen", "email": "th.m.heinen@gmail.com", "date": "2021-12-21T16:26:37Z"}, "committer": {"name": "me", "email": "th.m.heinen@gmail.com", "date": "2021-12-23T11:56:38Z"}, "message": "hide type inlay hints for enum variant constructors and tuple struct constructors", "tree": {"sha": "892f792262387ac7f658e7fdf853daf2ce815c6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/892f792262387ac7f658e7fdf853daf2ce815c6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7dfe93fc3336804c68ff550d8da5bbd027f5434", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7dfe93fc3336804c68ff550d8da5bbd027f5434", "html_url": "https://github.com/rust-lang/rust/commit/d7dfe93fc3336804c68ff550d8da5bbd027f5434", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7dfe93fc3336804c68ff550d8da5bbd027f5434/comments", "author": {"login": "Heinenen", "id": 37484430, "node_id": "MDQ6VXNlcjM3NDg0NDMw", "avatar_url": "https://avatars.githubusercontent.com/u/37484430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Heinenen", "html_url": "https://github.com/Heinenen", "followers_url": "https://api.github.com/users/Heinenen/followers", "following_url": "https://api.github.com/users/Heinenen/following{/other_user}", "gists_url": "https://api.github.com/users/Heinenen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Heinenen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Heinenen/subscriptions", "organizations_url": "https://api.github.com/users/Heinenen/orgs", "repos_url": "https://api.github.com/users/Heinenen/repos", "events_url": "https://api.github.com/users/Heinenen/events{/privacy}", "received_events_url": "https://api.github.com/users/Heinenen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Heinenen", "id": 37484430, "node_id": "MDQ6VXNlcjM3NDg0NDMw", "avatar_url": "https://avatars.githubusercontent.com/u/37484430?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Heinenen", "html_url": "https://github.com/Heinenen", "followers_url": "https://api.github.com/users/Heinenen/followers", "following_url": "https://api.github.com/users/Heinenen/following{/other_user}", "gists_url": "https://api.github.com/users/Heinenen/gists{/gist_id}", "starred_url": "https://api.github.com/users/Heinenen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Heinenen/subscriptions", "organizations_url": "https://api.github.com/users/Heinenen/orgs", "repos_url": "https://api.github.com/users/Heinenen/repos", "events_url": "https://api.github.com/users/Heinenen/events{/privacy}", "received_events_url": "https://api.github.com/users/Heinenen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ea1f58bf6b3fd5bb59ed583f2ac432e237e1e1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ea1f58bf6b3fd5bb59ed583f2ac432e237e1e1e", "html_url": "https://github.com/rust-lang/rust/commit/4ea1f58bf6b3fd5bb59ed583f2ac432e237e1e1e"}], "stats": {"total": 56, "additions": 37, "deletions": 19}, "files": [{"sha": "509b158184bd887a65d7f2c523f784954b266d94", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 37, "deletions": 19, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d7dfe93fc3336804c68ff550d8da5bbd027f5434/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7dfe93fc3336804c68ff550d8da5bbd027f5434/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=d7dfe93fc3336804c68ff550d8da5bbd027f5434", "patch": "@@ -257,26 +257,20 @@ fn is_named_constructor(\n     }?;\n     let expr = match expr {\n         ast::Expr::CallExpr(call) => match call.expr()? {\n-            ast::Expr::PathExpr(p) => p,\n+            ast::Expr::PathExpr(path) => path,\n             _ => return None,\n         },\n+        ast::Expr::PathExpr(path) => path,\n         _ => return None,\n     };\n     let path = expr.path()?;\n \n-    // Check for tuple-struct or tuple-variant in which case we can check the last segment\n-    let callable = sema.type_of_expr(&ast::Expr::PathExpr(expr))?.original.as_callable(sema.db);\n-    let callable_kind = callable.map(|it| it.kind());\n-    if let Some(hir::CallableKind::TupleStruct(_) | hir::CallableKind::TupleEnumVariant(_)) =\n-        callable_kind\n-    {\n-        if let Some(ctor) = path.segment() {\n-            return (ctor.to_string() == ty_name).then(|| ());\n-        }\n-    }\n-\n-    // otherwise use the qualifying segment as the constructor name\n-    let qual_seg = path.qualifier()?.segment()?;\n+    // If it exists, use qualifying segment as the constructor name.\n+    // If not, use the last segment.\n+    let qual_seg = match path.qualifier() {\n+        Some(qual) => qual.segment(),\n+        None => path.segment(),\n+    }?;\n     let ctor_name = match qual_seg.kind()? {\n         ast::PathSegmentKind::Name(name_ref) => {\n             match qual_seg.generic_arg_list().map(|it| it.generic_args()) {\n@@ -1341,7 +1335,7 @@ fn main() {\n     }\n \n     #[test]\n-    fn skip_constructor_type_hints() {\n+    fn skip_constructor_and_enum_type_hints() {\n         check_with_config(\n             InlayHintsConfig {\n                 type_hints: true,\n@@ -1351,7 +1345,7 @@ fn main() {\n                 max_length: None,\n             },\n             r#\"\n-//- minicore: try\n+//- minicore: try, option\n use core::ops::ControlFlow;\n \n struct Struct;\n@@ -1373,13 +1367,37 @@ impl Generic<i32> {\n     }\n }\n \n+enum Enum {\n+    Variant(u32)\n+}\n+\n+fn times2(value: i32) -> i32 {\n+    2 * value\n+}\n+\n fn main() {\n+    let enumb = Enum::Variant(0);\n+\n+    let strukt = Struct;\n     let strukt = Struct::new();\n+\n     let tuple_struct = TupleStruct();\n+\n     let generic0 = Generic::new();\n-     // ^^^^^^^^ Generic<i32>\n-    let generic1 = Generic::<i32>::new();\n-    let generic2 = <Generic<i32>>::new();\n+    //  ^^^^^^^^ Generic<i32>\n+    let generic1 = Generic(0);\n+    //  ^^^^^^^^ Generic<i32>\n+    let generic2 = Generic::<i32>::new();\n+    let generic3 = <Generic<i32>>::new();\n+    let generic4 = Generic::<i32>(0);\n+\n+\n+    let option = Some(0);\n+    //  ^^^^^^ Option<i32>\n+    let func = times2;\n+    //  ^^^^ fn times2(i32) -> i32\n+    let closure = |x: i32| x * 2;\n+    //  ^^^^^^^ |i32| -> i32\n }\n \n fn fallible() -> ControlFlow<()> {"}]}