{"sha": "6f435977df34e722b45d787d7eadac23cf5b040e", "node_id": "C_kwDOAAsO6NoAKDZmNDM1OTc3ZGYzNGU3MjJiNDVkNzg3ZDdlYWRhYzIzY2Y1YjA0MGU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-10-17T12:20:14Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-10-17T12:21:12Z"}, "message": "Refactor language client handling", "tree": {"sha": "b13dab6901885f3291773d7c723eac700cfa9519", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b13dab6901885f3291773d7c723eac700cfa9519"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f435977df34e722b45d787d7eadac23cf5b040e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f435977df34e722b45d787d7eadac23cf5b040e", "html_url": "https://github.com/rust-lang/rust/commit/6f435977df34e722b45d787d7eadac23cf5b040e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f435977df34e722b45d787d7eadac23cf5b040e/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40cbeb5b3d1ec37e8857844e43c75b6980f588e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/40cbeb5b3d1ec37e8857844e43c75b6980f588e3", "html_url": "https://github.com/rust-lang/rust/commit/40cbeb5b3d1ec37e8857844e43c75b6980f588e3"}], "stats": {"total": 901, "additions": 460, "deletions": 441}, "files": [{"sha": "192d8fabc3170de9698478507b90bd262d3be7d8", "filename": "editors/code/package-lock.json", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/6f435977df34e722b45d787d7eadac23cf5b040e/editors%2Fcode%2Fpackage-lock.json", "raw_url": "https://github.com/rust-lang/rust/raw/6f435977df34e722b45d787d7eadac23cf5b040e/editors%2Fcode%2Fpackage-lock.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage-lock.json?ref=6f435977df34e722b45d787d7eadac23cf5b040e", "patch": "@@ -11,11 +11,11 @@\n             \"dependencies\": {\n                 \"d3\": \"^7.6.1\",\n                 \"d3-graphviz\": \"^4.1.1\",\n-                \"vscode-languageclient\": \"^8.0.0-next.14\"\n+                \"vscode-languageclient\": \"^8.0.2\"\n             },\n             \"devDependencies\": {\n                 \"@types/node\": \"~16.11.7\",\n-                \"@types/vscode\": \"~1.66.0\",\n+                \"@types/vscode\": \"~1.72.0\",\n                 \"@typescript-eslint/eslint-plugin\": \"^5.30.5\",\n                 \"@typescript-eslint/parser\": \"^5.30.5\",\n                 \"@vscode/test-electron\": \"^2.1.5\",\n@@ -141,9 +141,9 @@\n             \"dev\": true\n         },\n         \"node_modules/@types/vscode\": {\n-            \"version\": \"1.66.0\",\n-            \"resolved\": \"https://registry.npmjs.org/@types/vscode/-/vscode-1.66.0.tgz\",\n-            \"integrity\": \"sha512-ZfJck4M7nrGasfs4A4YbUoxis3Vu24cETw3DERsNYtDZmYSYtk6ljKexKFKhImO/ZmY6ZMsmegu2FPkXoUFImA==\",\n+            \"version\": \"1.72.0\",\n+            \"resolved\": \"https://registry.npmjs.org/@types/vscode/-/vscode-1.72.0.tgz\",\n+            \"integrity\": \"sha512-WvHluhUo+lQvE3I4wUagRpnkHuysB4qSyOQUyIAS9n9PYMJjepzTUD8Jyks0YeXoPD0UGctjqp2u84/b3v6Ydw==\",\n             \"dev\": true\n         },\n         \"node_modules/@typescript-eslint/eslint-plugin\": {\n@@ -3791,39 +3791,39 @@\n             }\n         },\n         \"node_modules/vscode-jsonrpc\": {\n-            \"version\": \"8.0.0-next.7\",\n-            \"resolved\": \"https://registry.npmjs.org/vscode-jsonrpc/-/vscode-jsonrpc-8.0.0-next.7.tgz\",\n-            \"integrity\": \"sha512-JX/F31LEsims0dAlOTKFE4E+AJMiJvdRSRViifFJSqSN7EzeYyWlfuDchF7g91oRNPZOIWfibTkDf3/UMsQGzQ==\",\n+            \"version\": \"8.0.2\",\n+            \"resolved\": \"https://registry.npmjs.org/vscode-jsonrpc/-/vscode-jsonrpc-8.0.2.tgz\",\n+            \"integrity\": \"sha512-RY7HwI/ydoC1Wwg4gJ3y6LpU9FJRZAUnTYMXthqhFXXu77ErDd/xkREpGuk4MyYkk4a+XDWAMqe0S3KkelYQEQ==\",\n             \"engines\": {\n                 \"node\": \">=14.0.0\"\n             }\n         },\n         \"node_modules/vscode-languageclient\": {\n-            \"version\": \"8.0.0-next.14\",\n-            \"resolved\": \"https://registry.npmjs.org/vscode-languageclient/-/vscode-languageclient-8.0.0-next.14.tgz\",\n-            \"integrity\": \"sha512-NqjkOuDTMu8uo+PhoMsV72VO9Gd3wBi/ZpOrkRUOrWKQo7yUdiIw183g8wjH8BImgbK9ZP51HM7TI0ZhCnI1Mw==\",\n+            \"version\": \"8.0.2\",\n+            \"resolved\": \"https://registry.npmjs.org/vscode-languageclient/-/vscode-languageclient-8.0.2.tgz\",\n+            \"integrity\": \"sha512-lHlthJtphG9gibGb/y72CKqQUxwPsMXijJVpHEC2bvbFqxmkj9LwQ3aGU9dwjBLqsX1S4KjShYppLvg1UJDF/Q==\",\n             \"dependencies\": {\n                 \"minimatch\": \"^3.0.4\",\n                 \"semver\": \"^7.3.5\",\n-                \"vscode-languageserver-protocol\": \"3.17.0-next.16\"\n+                \"vscode-languageserver-protocol\": \"3.17.2\"\n             },\n             \"engines\": {\n-                \"vscode\": \"^1.66.0\"\n+                \"vscode\": \"^1.67.0\"\n             }\n         },\n         \"node_modules/vscode-languageserver-protocol\": {\n-            \"version\": \"3.17.0-next.16\",\n-            \"resolved\": \"https://registry.npmjs.org/vscode-languageserver-protocol/-/vscode-languageserver-protocol-3.17.0-next.16.tgz\",\n-            \"integrity\": \"sha512-tx4DnXw9u3N7vw+bx6n2NKp6FoxoNwiP/biH83AS30I2AnTGyLd7afSeH6Oewn2E8jvB7K15bs12sMppkKOVeQ==\",\n+            \"version\": \"3.17.2\",\n+            \"resolved\": \"https://registry.npmjs.org/vscode-languageserver-protocol/-/vscode-languageserver-protocol-3.17.2.tgz\",\n+            \"integrity\": \"sha512-8kYisQ3z/SQ2kyjlNeQxbkkTNmVFoQCqkmGrzLH6A9ecPlgTbp3wDTnUNqaUxYr4vlAcloxx8zwy7G5WdguYNg==\",\n             \"dependencies\": {\n-                \"vscode-jsonrpc\": \"8.0.0-next.7\",\n-                \"vscode-languageserver-types\": \"3.17.0-next.9\"\n+                \"vscode-jsonrpc\": \"8.0.2\",\n+                \"vscode-languageserver-types\": \"3.17.2\"\n             }\n         },\n         \"node_modules/vscode-languageserver-types\": {\n-            \"version\": \"3.17.0-next.9\",\n-            \"resolved\": \"https://registry.npmjs.org/vscode-languageserver-types/-/vscode-languageserver-types-3.17.0-next.9.tgz\",\n-            \"integrity\": \"sha512-9/PeDNPYduaoXRUzYpqmu4ZV9L01HGo0wH9FUt+sSHR7IXwA7xoXBfNUlv8gB9H0D2WwEmMomSy1NmhjKQyn3A==\"\n+            \"version\": \"3.17.2\",\n+            \"resolved\": \"https://registry.npmjs.org/vscode-languageserver-types/-/vscode-languageserver-types-3.17.2.tgz\",\n+            \"integrity\": \"sha512-zHhCWatviizPIq9B7Vh9uvrH6x3sK8itC84HkamnBWoDFJtzBf7SWlpLCZUit72b3os45h6RWQNC9xHRDF8dRA==\"\n         },\n         \"node_modules/which\": {\n             \"version\": \"2.0.2\",\n@@ -4039,9 +4039,9 @@\n             \"dev\": true\n         },\n         \"@types/vscode\": {\n-            \"version\": \"1.66.0\",\n-            \"resolved\": \"https://registry.npmjs.org/@types/vscode/-/vscode-1.66.0.tgz\",\n-            \"integrity\": \"sha512-ZfJck4M7nrGasfs4A4YbUoxis3Vu24cETw3DERsNYtDZmYSYtk6ljKexKFKhImO/ZmY6ZMsmegu2FPkXoUFImA==\",\n+            \"version\": \"1.72.0\",\n+            \"resolved\": \"https://registry.npmjs.org/@types/vscode/-/vscode-1.72.0.tgz\",\n+            \"integrity\": \"sha512-WvHluhUo+lQvE3I4wUagRpnkHuysB4qSyOQUyIAS9n9PYMJjepzTUD8Jyks0YeXoPD0UGctjqp2u84/b3v6Ydw==\",\n             \"dev\": true\n         },\n         \"@typescript-eslint/eslint-plugin\": {\n@@ -6634,33 +6634,33 @@\n             }\n         },\n         \"vscode-jsonrpc\": {\n-            \"version\": \"8.0.0-next.7\",\n-            \"resolved\": \"https://registry.npmjs.org/vscode-jsonrpc/-/vscode-jsonrpc-8.0.0-next.7.tgz\",\n-            \"integrity\": \"sha512-JX/F31LEsims0dAlOTKFE4E+AJMiJvdRSRViifFJSqSN7EzeYyWlfuDchF7g91oRNPZOIWfibTkDf3/UMsQGzQ==\"\n+            \"version\": \"8.0.2\",\n+            \"resolved\": \"https://registry.npmjs.org/vscode-jsonrpc/-/vscode-jsonrpc-8.0.2.tgz\",\n+            \"integrity\": \"sha512-RY7HwI/ydoC1Wwg4gJ3y6LpU9FJRZAUnTYMXthqhFXXu77ErDd/xkREpGuk4MyYkk4a+XDWAMqe0S3KkelYQEQ==\"\n         },\n         \"vscode-languageclient\": {\n-            \"version\": \"8.0.0-next.14\",\n-            \"resolved\": \"https://registry.npmjs.org/vscode-languageclient/-/vscode-languageclient-8.0.0-next.14.tgz\",\n-            \"integrity\": \"sha512-NqjkOuDTMu8uo+PhoMsV72VO9Gd3wBi/ZpOrkRUOrWKQo7yUdiIw183g8wjH8BImgbK9ZP51HM7TI0ZhCnI1Mw==\",\n+            \"version\": \"8.0.2\",\n+            \"resolved\": \"https://registry.npmjs.org/vscode-languageclient/-/vscode-languageclient-8.0.2.tgz\",\n+            \"integrity\": \"sha512-lHlthJtphG9gibGb/y72CKqQUxwPsMXijJVpHEC2bvbFqxmkj9LwQ3aGU9dwjBLqsX1S4KjShYppLvg1UJDF/Q==\",\n             \"requires\": {\n                 \"minimatch\": \"^3.0.4\",\n                 \"semver\": \"^7.3.5\",\n-                \"vscode-languageserver-protocol\": \"3.17.0-next.16\"\n+                \"vscode-languageserver-protocol\": \"3.17.2\"\n             }\n         },\n         \"vscode-languageserver-protocol\": {\n-            \"version\": \"3.17.0-next.16\",\n-            \"resolved\": \"https://registry.npmjs.org/vscode-languageserver-protocol/-/vscode-languageserver-protocol-3.17.0-next.16.tgz\",\n-            \"integrity\": \"sha512-tx4DnXw9u3N7vw+bx6n2NKp6FoxoNwiP/biH83AS30I2AnTGyLd7afSeH6Oewn2E8jvB7K15bs12sMppkKOVeQ==\",\n+            \"version\": \"3.17.2\",\n+            \"resolved\": \"https://registry.npmjs.org/vscode-languageserver-protocol/-/vscode-languageserver-protocol-3.17.2.tgz\",\n+            \"integrity\": \"sha512-8kYisQ3z/SQ2kyjlNeQxbkkTNmVFoQCqkmGrzLH6A9ecPlgTbp3wDTnUNqaUxYr4vlAcloxx8zwy7G5WdguYNg==\",\n             \"requires\": {\n-                \"vscode-jsonrpc\": \"8.0.0-next.7\",\n-                \"vscode-languageserver-types\": \"3.17.0-next.9\"\n+                \"vscode-jsonrpc\": \"8.0.2\",\n+                \"vscode-languageserver-types\": \"3.17.2\"\n             }\n         },\n         \"vscode-languageserver-types\": {\n-            \"version\": \"3.17.0-next.9\",\n-            \"resolved\": \"https://registry.npmjs.org/vscode-languageserver-types/-/vscode-languageserver-types-3.17.0-next.9.tgz\",\n-            \"integrity\": \"sha512-9/PeDNPYduaoXRUzYpqmu4ZV9L01HGo0wH9FUt+sSHR7IXwA7xoXBfNUlv8gB9H0D2WwEmMomSy1NmhjKQyn3A==\"\n+            \"version\": \"3.17.2\",\n+            \"resolved\": \"https://registry.npmjs.org/vscode-languageserver-types/-/vscode-languageserver-types-3.17.2.tgz\",\n+            \"integrity\": \"sha512-zHhCWatviizPIq9B7Vh9uvrH6x3sK8itC84HkamnBWoDFJtzBf7SWlpLCZUit72b3os45h6RWQNC9xHRDF8dRA==\"\n         },\n         \"which\": {\n             \"version\": \"2.0.2\","}, {"sha": "da4bac5ad8443f8a295921a49d5cf9c33dfa5382", "filename": "editors/code/package.json", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f435977df34e722b45d787d7eadac23cf5b040e/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/6f435977df34e722b45d787d7eadac23cf5b040e/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=6f435977df34e722b45d787d7eadac23cf5b040e", "patch": "@@ -37,11 +37,11 @@\n     \"dependencies\": {\n         \"d3\": \"^7.6.1\",\n         \"d3-graphviz\": \"^4.1.1\",\n-        \"vscode-languageclient\": \"^8.0.0-next.14\"\n+        \"vscode-languageclient\": \"^8.0.2\"\n     },\n     \"devDependencies\": {\n         \"@types/node\": \"~16.11.7\",\n-        \"@types/vscode\": \"~1.66.0\",\n+        \"@types/vscode\": \"~1.72.0\",\n         \"@typescript-eslint/eslint-plugin\": \"^5.30.5\",\n         \"@typescript-eslint/parser\": \"^5.30.5\",\n         \"@vscode/test-electron\": \"^2.1.5\","}, {"sha": "2a2c9326b6a000a27aa69af43195142986594bc9", "filename": "editors/code/src/ast_inspector.ts", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f435977df34e722b45d787d7eadac23cf5b040e/editors%2Fcode%2Fsrc%2Fast_inspector.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6f435977df34e722b45d787d7eadac23cf5b040e/editors%2Fcode%2Fsrc%2Fast_inspector.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fast_inspector.ts?ref=6f435977df34e722b45d787d7eadac23cf5b040e", "patch": "@@ -35,8 +35,10 @@ export class AstInspector implements vscode.HoverProvider, vscode.DefinitionProv\n     });\n \n     constructor(ctx: Ctx) {\n-        ctx.pushCleanup(vscode.languages.registerHoverProvider({ scheme: \"rust-analyzer\" }, this));\n-        ctx.pushCleanup(vscode.languages.registerDefinitionProvider({ language: \"rust\" }, this));\n+        ctx.pushExtCleanup(\n+            vscode.languages.registerHoverProvider({ scheme: \"rust-analyzer\" }, this)\n+        );\n+        ctx.pushExtCleanup(vscode.languages.registerDefinitionProvider({ language: \"rust\" }, this));\n         vscode.workspace.onDidCloseTextDocument(\n             this.onDidCloseTextDocument,\n             this,\n@@ -53,7 +55,7 @@ export class AstInspector implements vscode.HoverProvider, vscode.DefinitionProv\n             ctx.subscriptions\n         );\n \n-        ctx.pushCleanup(this);\n+        ctx.pushExtCleanup(this);\n     }\n     dispose() {\n         this.setRustEditor(undefined);"}, {"sha": "374c3b8144c3841c2290dc0f0300cb38ce142f47", "filename": "editors/code/src/bootstrap.ts", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/6f435977df34e722b45d787d7eadac23cf5b040e/editors%2Fcode%2Fsrc%2Fbootstrap.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6f435977df34e722b45d787d7eadac23cf5b040e/editors%2Fcode%2Fsrc%2Fbootstrap.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fbootstrap.ts?ref=6f435977df34e722b45d787d7eadac23cf5b040e", "patch": "@@ -0,0 +1,148 @@\n+import * as vscode from \"vscode\";\n+import * as os from \"os\";\n+import { Config } from \"./config\";\n+import { log, isValidExecutable } from \"./util\";\n+import { PersistentState } from \"./persistent_state\";\n+import { exec } from \"child_process\";\n+\n+export async function bootstrap(\n+    context: vscode.ExtensionContext,\n+    config: Config,\n+    state: PersistentState\n+): Promise<string> {\n+    const path = await getServer(context, config, state);\n+    if (!path) {\n+        throw new Error(\n+            \"Rust Analyzer Language Server is not available. \" +\n+                \"Please, ensure its [proper installation](https://rust-analyzer.github.io/manual.html#installation).\"\n+        );\n+    }\n+\n+    log.info(\"Using server binary at\", path);\n+\n+    if (!isValidExecutable(path)) {\n+        if (config.serverPath) {\n+            throw new Error(`Failed to execute ${path} --version. \\`config.server.path\\` or \\`config.serverPath\\` has been set explicitly.\\\n+            Consider removing this config or making a valid server binary available at that path.`);\n+        } else {\n+            throw new Error(`Failed to execute ${path} --version`);\n+        }\n+    }\n+\n+    return path;\n+}\n+\n+async function patchelf(dest: vscode.Uri): Promise<void> {\n+    await vscode.window.withProgress(\n+        {\n+            location: vscode.ProgressLocation.Notification,\n+            title: \"Patching rust-analyzer for NixOS\",\n+        },\n+        async (progress, _) => {\n+            const expression = `\n+            {srcStr, pkgs ? import <nixpkgs> {}}:\n+                pkgs.stdenv.mkDerivation {\n+                    name = \"rust-analyzer\";\n+                    src = /. + srcStr;\n+                    phases = [ \"installPhase\" \"fixupPhase\" ];\n+                    installPhase = \"cp $src $out\";\n+                    fixupPhase = ''\n+                    chmod 755 $out\n+                    patchelf --set-interpreter \"$(cat $NIX_CC/nix-support/dynamic-linker)\" $out\n+                    '';\n+                }\n+            `;\n+            const origFile = vscode.Uri.file(dest.fsPath + \"-orig\");\n+            await vscode.workspace.fs.rename(dest, origFile, { overwrite: true });\n+            try {\n+                progress.report({ message: \"Patching executable\", increment: 20 });\n+                await new Promise((resolve, reject) => {\n+                    const handle = exec(\n+                        `nix-build -E - --argstr srcStr '${origFile.fsPath}' -o '${dest.fsPath}'`,\n+                        (err, stdout, stderr) => {\n+                            if (err != null) {\n+                                reject(Error(stderr));\n+                            } else {\n+                                resolve(stdout);\n+                            }\n+                        }\n+                    );\n+                    handle.stdin?.write(expression);\n+                    handle.stdin?.end();\n+                });\n+            } finally {\n+                await vscode.workspace.fs.delete(origFile);\n+            }\n+        }\n+    );\n+}\n+\n+async function getServer(\n+    context: vscode.ExtensionContext,\n+    config: Config,\n+    state: PersistentState\n+): Promise<string | undefined> {\n+    const explicitPath = serverPath(config);\n+    if (explicitPath) {\n+        if (explicitPath.startsWith(\"~/\")) {\n+            return os.homedir() + explicitPath.slice(\"~\".length);\n+        }\n+        return explicitPath;\n+    }\n+    if (config.package.releaseTag === null) return \"rust-analyzer\";\n+\n+    const ext = process.platform === \"win32\" ? \".exe\" : \"\";\n+    const bundled = vscode.Uri.joinPath(context.extensionUri, \"server\", `rust-analyzer${ext}`);\n+    const bundledExists = await vscode.workspace.fs.stat(bundled).then(\n+        () => true,\n+        () => false\n+    );\n+    if (bundledExists) {\n+        let server = bundled;\n+        if (await isNixOs()) {\n+            await vscode.workspace.fs.createDirectory(config.globalStorageUri).then();\n+            const dest = vscode.Uri.joinPath(config.globalStorageUri, `rust-analyzer${ext}`);\n+            let exists = await vscode.workspace.fs.stat(dest).then(\n+                () => true,\n+                () => false\n+            );\n+            if (exists && config.package.version !== state.serverVersion) {\n+                await vscode.workspace.fs.delete(dest);\n+                exists = false;\n+            }\n+            if (!exists) {\n+                await vscode.workspace.fs.copy(bundled, dest);\n+                await patchelf(dest);\n+            }\n+            server = dest;\n+        }\n+        await state.updateServerVersion(config.package.version);\n+        return server.fsPath;\n+    }\n+\n+    await state.updateServerVersion(undefined);\n+    await vscode.window.showErrorMessage(\n+        \"Unfortunately we don't ship binaries for your platform yet. \" +\n+            \"You need to manually clone the rust-analyzer repository and \" +\n+            \"run `cargo xtask install --server` to build the language server from sources. \" +\n+            \"If you feel that your platform should be supported, please create an issue \" +\n+            \"about that [here](https://github.com/rust-lang/rust-analyzer/issues) and we \" +\n+            \"will consider it.\"\n+    );\n+    return undefined;\n+}\n+function serverPath(config: Config): string | null {\n+    return process.env.__RA_LSP_SERVER_DEBUG ?? config.serverPath;\n+}\n+\n+async function isNixOs(): Promise<boolean> {\n+    try {\n+        const contents = (\n+            await vscode.workspace.fs.readFile(vscode.Uri.file(\"/etc/os-release\"))\n+        ).toString();\n+        const idString = contents.split(\"\\n\").find((a) => a.startsWith(\"ID=\")) || \"ID=linux\";\n+        return idString.indexOf(\"nixos\") !== -1;\n+    } catch {\n+        return false;\n+    }\n+}"}, {"sha": "3408a2ee84eeeb8fb47a7e13a730393f7b8589e9", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 10, "deletions": 33, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6f435977df34e722b45d787d7eadac23cf5b040e/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6f435977df34e722b45d787d7eadac23cf5b040e/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=6f435977df34e722b45d787d7eadac23cf5b040e", "patch": "@@ -4,9 +4,7 @@ import * as ra from \"../src/lsp_ext\";\n import * as Is from \"vscode-languageclient/lib/common/utils/is\";\n import { assert } from \"./util\";\n import { WorkspaceEdit } from \"vscode\";\n-import { Workspace } from \"./ctx\";\n-import { substituteVariablesInEnv, substituteVSCodeVariables } from \"./config\";\n-import { outputChannel, traceOutputChannel } from \"./main\";\n+import { substituteVSCodeVariables } from \"./config\";\n import { randomUUID } from \"crypto\";\n \n export interface Env {\n@@ -65,41 +63,17 @@ function renderHoverActions(actions: ra.CommandLinkGroup[]): vscode.MarkdownStri\n }\n \n export async function createClient(\n-    serverPath: string,\n-    workspace: Workspace,\n-    extraEnv: Env\n+    traceOutputChannel: vscode.OutputChannel,\n+    outputChannel: vscode.OutputChannel,\n+    initializationOptions: vscode.WorkspaceConfiguration,\n+    serverOptions: lc.ServerOptions\n ): Promise<lc.LanguageClient> {\n-    // '.' Is the fallback if no folder is open\n-    // TODO?: Workspace folders support Uri's (eg: file://test.txt).\n-    // It might be a good idea to test if the uri points to a file.\n-\n-    const newEnv = substituteVariablesInEnv(Object.assign({}, process.env, extraEnv));\n-    const run: lc.Executable = {\n-        command: serverPath,\n-        options: { env: newEnv },\n-    };\n-    const serverOptions: lc.ServerOptions = {\n-        run,\n-        debug: run,\n-    };\n-\n-    let rawInitializationOptions = vscode.workspace.getConfiguration(\"rust-analyzer\");\n-\n-    if (workspace.kind === \"Detached Files\") {\n-        rawInitializationOptions = {\n-            detachedFiles: workspace.files.map((file) => file.uri.fsPath),\n-            ...rawInitializationOptions,\n-        };\n-    }\n-\n-    const initializationOptions = substituteVSCodeVariables(rawInitializationOptions);\n-\n     const clientOptions: lc.LanguageClientOptions = {\n         documentSelector: [{ scheme: \"file\", language: \"rust\" }],\n         initializationOptions,\n         diagnosticCollectionName: \"rustc\",\n-        traceOutputChannel: traceOutputChannel(),\n-        outputChannel: outputChannel(),\n+        traceOutputChannel,\n+        outputChannel,\n         middleware: {\n             workspace: {\n                 async configuration(\n@@ -273,6 +247,9 @@ export async function createClient(\n }\n \n class ExperimentalFeatures implements lc.StaticFeature {\n+    getState(): lc.FeatureState {\n+        return { kind: \"static\" };\n+    }\n     fillClientCapabilities(capabilities: lc.ClientCapabilities): void {\n         const caps: any = capabilities.experimental ?? {};\n         caps.snippetTextEdit = true;"}, {"sha": "cbdeb28c99fe80855c980ff2df082fb2673b0a81", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 89, "deletions": 94, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/6f435977df34e722b45d787d7eadac23cf5b040e/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6f435977df34e722b45d787d7eadac23cf5b040e/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=6f435977df34e722b45d787d7eadac23cf5b040e", "patch": "@@ -21,24 +21,24 @@ export function analyzerStatus(ctx: Ctx): Cmd {\n         readonly uri = vscode.Uri.parse(\"rust-analyzer-status://status\");\n         readonly eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n \n-        provideTextDocumentContent(_uri: vscode.Uri): vscode.ProviderResult<string> {\n+        async provideTextDocumentContent(_uri: vscode.Uri): Promise<string> {\n             if (!vscode.window.activeTextEditor) return \"\";\n+            const client = await ctx.getClient();\n \n             const params: ra.AnalyzerStatusParams = {};\n             const doc = ctx.activeRustEditor?.document;\n             if (doc != null) {\n-                params.textDocument =\n-                    ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(doc);\n+                params.textDocument = client.code2ProtocolConverter.asTextDocumentIdentifier(doc);\n             }\n-            return ctx.client.sendRequest(ra.analyzerStatus, params);\n+            return await client.sendRequest(ra.analyzerStatus, params);\n         }\n \n         get onDidChange(): vscode.Event<vscode.Uri> {\n             return this.eventEmitter.event;\n         }\n     })();\n \n-    ctx.pushCleanup(\n+    ctx.pushExtCleanup(\n         vscode.workspace.registerTextDocumentContentProvider(\"rust-analyzer-status\", tdcp)\n     );\n \n@@ -60,17 +60,22 @@ export function memoryUsage(ctx: Ctx): Cmd {\n         provideTextDocumentContent(_uri: vscode.Uri): vscode.ProviderResult<string> {\n             if (!vscode.window.activeTextEditor) return \"\";\n \n-            return ctx.client.sendRequest(ra.memoryUsage).then((mem: any) => {\n-                return \"Per-query memory usage:\\n\" + mem + \"\\n(note: database has been cleared)\";\n-            });\n+            return ctx\n+                .getClient()\n+                .then((it) => it.sendRequest(ra.memoryUsage))\n+                .then((mem: any) => {\n+                    return (\n+                        \"Per-query memory usage:\\n\" + mem + \"\\n(note: database has been cleared)\"\n+                    );\n+                });\n         }\n \n         get onDidChange(): vscode.Event<vscode.Uri> {\n             return this.eventEmitter.event;\n         }\n     })();\n \n-    ctx.pushCleanup(\n+    ctx.pushExtCleanup(\n         vscode.workspace.registerTextDocumentContentProvider(\"rust-analyzer-memory\", tdcp)\n     );\n \n@@ -83,23 +88,19 @@ export function memoryUsage(ctx: Ctx): Cmd {\n \n export function shuffleCrateGraph(ctx: Ctx): Cmd {\n     return async () => {\n-        const client = ctx.client;\n-        if (!client) return;\n-\n-        await client.sendRequest(ra.shuffleCrateGraph);\n+        return ctx.getClient().then((it) => it.sendRequest(ra.shuffleCrateGraph));\n     };\n }\n \n export function matchingBrace(ctx: Ctx): Cmd {\n     return async () => {\n         const editor = ctx.activeRustEditor;\n-        const client = ctx.client;\n-        if (!editor || !client) return;\n+        if (!editor) return;\n+\n+        const client = await ctx.getClient();\n \n         const response = await client.sendRequest(ra.matchingBrace, {\n-            textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(\n-                editor.document\n-            ),\n+            textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document),\n             positions: editor.selections.map((s) =>\n                 client.code2ProtocolConverter.asPosition(s.active)\n             ),\n@@ -116,14 +117,13 @@ export function matchingBrace(ctx: Ctx): Cmd {\n export function joinLines(ctx: Ctx): Cmd {\n     return async () => {\n         const editor = ctx.activeRustEditor;\n-        const client = ctx.client;\n-        if (!editor || !client) return;\n+        if (!editor) return;\n+\n+        const client = await ctx.getClient();\n \n         const items: lc.TextEdit[] = await client.sendRequest(ra.joinLines, {\n             ranges: editor.selections.map((it) => client.code2ProtocolConverter.asRange(it)),\n-            textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(\n-                editor.document\n-            ),\n+            textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document),\n         });\n         const textEdits = await client.protocol2CodeConverter.asTextEdits(items);\n         await editor.edit((builder) => {\n@@ -145,14 +145,12 @@ export function moveItemDown(ctx: Ctx): Cmd {\n export function moveItem(ctx: Ctx, direction: ra.Direction): Cmd {\n     return async () => {\n         const editor = ctx.activeRustEditor;\n-        const client = ctx.client;\n-        if (!editor || !client) return;\n+        if (!editor) return;\n+        const client = await ctx.getClient();\n \n         const lcEdits = await client.sendRequest(ra.moveItem, {\n             range: client.code2ProtocolConverter.asRange(editor.selection),\n-            textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(\n-                editor.document\n-            ),\n+            textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document),\n             direction,\n         });\n \n@@ -166,13 +164,13 @@ export function moveItem(ctx: Ctx, direction: ra.Direction): Cmd {\n export function onEnter(ctx: Ctx): Cmd {\n     async function handleKeypress() {\n         const editor = ctx.activeRustEditor;\n-        const client = ctx.client;\n \n-        if (!editor || !client) return false;\n+        if (!editor) return false;\n \n+        const client = await ctx.getClient();\n         const lcEdits = await client\n             .sendRequest(ra.onEnter, {\n-                textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(\n+                textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(\n                     editor.document\n                 ),\n                 position: client.code2ProtocolConverter.asPosition(editor.selection.active),\n@@ -198,14 +196,13 @@ export function onEnter(ctx: Ctx): Cmd {\n export function parentModule(ctx: Ctx): Cmd {\n     return async () => {\n         const editor = vscode.window.activeTextEditor;\n-        const client = ctx.client;\n-        if (!editor || !client) return;\n+        if (!editor) return;\n         if (!(isRustDocument(editor.document) || isCargoTomlDocument(editor.document))) return;\n \n+        const client = await ctx.getClient();\n+\n         const locations = await client.sendRequest(ra.parentModule, {\n-            textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(\n-                editor.document\n-            ),\n+            textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document),\n             position: client.code2ProtocolConverter.asPosition(editor.selection.active),\n         });\n         if (!locations) return;\n@@ -236,13 +233,11 @@ export function parentModule(ctx: Ctx): Cmd {\n export function openCargoToml(ctx: Ctx): Cmd {\n     return async () => {\n         const editor = ctx.activeRustEditor;\n-        const client = ctx.client;\n-        if (!editor || !client) return;\n+        if (!editor) return;\n \n+        const client = await ctx.getClient();\n         const response = await client.sendRequest(ra.openCargoToml, {\n-            textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(\n-                editor.document\n-            ),\n+            textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document),\n         });\n         if (!response) return;\n \n@@ -259,12 +254,13 @@ export function openCargoToml(ctx: Ctx): Cmd {\n export function ssr(ctx: Ctx): Cmd {\n     return async () => {\n         const editor = vscode.window.activeTextEditor;\n-        const client = ctx.client;\n-        if (!editor || !client) return;\n+        if (!editor) return;\n+\n+        const client = await ctx.getClient();\n \n         const position = editor.selection.active;\n         const selections = editor.selections;\n-        const textDocument = ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(\n+        const textDocument = client.code2ProtocolConverter.asTextDocumentIdentifier(\n             editor.document\n         );\n \n@@ -354,21 +350,22 @@ export function syntaxTree(ctx: Ctx): Cmd {\n             }\n         }\n \n-        provideTextDocumentContent(\n+        async provideTextDocumentContent(\n             uri: vscode.Uri,\n             ct: vscode.CancellationToken\n-        ): vscode.ProviderResult<string> {\n+        ): Promise<string> {\n             const rustEditor = ctx.activeRustEditor;\n             if (!rustEditor) return \"\";\n+            const client = await ctx.getClient();\n \n             // When the range based query is enabled we take the range of the selection\n             const range =\n                 uri.query === \"range=true\" && !rustEditor.selection.isEmpty\n-                    ? ctx.client.code2ProtocolConverter.asRange(rustEditor.selection)\n+                    ? client.code2ProtocolConverter.asRange(rustEditor.selection)\n                     : null;\n \n             const params = { textDocument: { uri: rustEditor.document.uri.toString() }, range };\n-            return ctx.client.sendRequest(ra.syntaxTree, params, ct);\n+            return client.sendRequest(ra.syntaxTree, params, ct);\n         }\n \n         get onDidChange(): vscode.Event<vscode.Uri> {\n@@ -378,10 +375,10 @@ export function syntaxTree(ctx: Ctx): Cmd {\n \n     void new AstInspector(ctx);\n \n-    ctx.pushCleanup(\n+    ctx.pushExtCleanup(\n         vscode.workspace.registerTextDocumentContentProvider(\"rust-analyzer-syntax-tree\", tdcp)\n     );\n-    ctx.pushCleanup(\n+    ctx.pushExtCleanup(\n         vscode.languages.setLanguageConfiguration(\"ra_syntax_tree\", {\n             brackets: [[\"[\", \")\"]],\n         })\n@@ -437,14 +434,14 @@ export function viewHir(ctx: Ctx): Cmd {\n             }\n         }\n \n-        provideTextDocumentContent(\n+        async provideTextDocumentContent(\n             _uri: vscode.Uri,\n             ct: vscode.CancellationToken\n-        ): vscode.ProviderResult<string> {\n+        ): Promise<string> {\n             const rustEditor = ctx.activeRustEditor;\n-            const client = ctx.client;\n-            if (!rustEditor || !client) return \"\";\n+            if (!rustEditor) return \"\";\n \n+            const client = await ctx.getClient();\n             const params = {\n                 textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(\n                     rustEditor.document\n@@ -459,7 +456,7 @@ export function viewHir(ctx: Ctx): Cmd {\n         }\n     })();\n \n-    ctx.pushCleanup(\n+    ctx.pushExtCleanup(\n         vscode.workspace.registerTextDocumentContentProvider(\"rust-analyzer-hir\", tdcp)\n     );\n \n@@ -503,13 +500,13 @@ export function viewFileText(ctx: Ctx): Cmd {\n             }\n         }\n \n-        provideTextDocumentContent(\n+        async provideTextDocumentContent(\n             _uri: vscode.Uri,\n             ct: vscode.CancellationToken\n-        ): vscode.ProviderResult<string> {\n+        ): Promise<string> {\n             const rustEditor = ctx.activeRustEditor;\n-            const client = ctx.client;\n-            if (!rustEditor || !client) return \"\";\n+            if (!rustEditor) return \"\";\n+            const client = await ctx.getClient();\n \n             const params = client.code2ProtocolConverter.asTextDocumentIdentifier(\n                 rustEditor.document\n@@ -522,7 +519,7 @@ export function viewFileText(ctx: Ctx): Cmd {\n         }\n     })();\n \n-    ctx.pushCleanup(\n+    ctx.pushExtCleanup(\n         vscode.workspace.registerTextDocumentContentProvider(\"rust-analyzer-file-text\", tdcp)\n     );\n \n@@ -566,13 +563,13 @@ export function viewItemTree(ctx: Ctx): Cmd {\n             }\n         }\n \n-        provideTextDocumentContent(\n+        async provideTextDocumentContent(\n             _uri: vscode.Uri,\n             ct: vscode.CancellationToken\n-        ): vscode.ProviderResult<string> {\n+        ): Promise<string> {\n             const rustEditor = ctx.activeRustEditor;\n-            const client = ctx.client;\n-            if (!rustEditor || !client) return \"\";\n+            if (!rustEditor) return \"\";\n+            const client = await ctx.getClient();\n \n             const params = {\n                 textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(\n@@ -587,7 +584,7 @@ export function viewItemTree(ctx: Ctx): Cmd {\n         }\n     })();\n \n-    ctx.pushCleanup(\n+    ctx.pushExtCleanup(\n         vscode.workspace.registerTextDocumentContentProvider(\"rust-analyzer-item-tree\", tdcp)\n     );\n \n@@ -618,8 +615,8 @@ function crateGraph(ctx: Ctx, full: boolean): Cmd {\n         const params = {\n             full: full,\n         };\n-\n-        const dot = await ctx.client.sendRequest(ra.viewCrateGraph, params);\n+        const client = await ctx.getClient();\n+        const dot = await client.sendRequest(ra.viewCrateGraph, params);\n         const uri = panel.webview.asWebviewUri(nodeModulesPath);\n \n         const html = `\n@@ -690,13 +687,13 @@ export function expandMacro(ctx: Ctx): Cmd {\n         eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n         async provideTextDocumentContent(_uri: vscode.Uri): Promise<string> {\n             const editor = vscode.window.activeTextEditor;\n-            const client = ctx.client;\n-            if (!editor || !client) return \"\";\n+            if (!editor) return \"\";\n+            const client = await ctx.getClient();\n \n             const position = editor.selection.active;\n \n             const expanded = await client.sendRequest(ra.expandMacro, {\n-                textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(\n+                textDocument: client.code2ProtocolConverter.asTextDocumentIdentifier(\n                     editor.document\n                 ),\n                 position,\n@@ -712,7 +709,7 @@ export function expandMacro(ctx: Ctx): Cmd {\n         }\n     })();\n \n-    ctx.pushCleanup(\n+    ctx.pushExtCleanup(\n         vscode.workspace.registerTextDocumentContentProvider(\"rust-analyzer-expand-macro\", tdcp)\n     );\n \n@@ -724,11 +721,11 @@ export function expandMacro(ctx: Ctx): Cmd {\n }\n \n export function reloadWorkspace(ctx: Ctx): Cmd {\n-    return async () => ctx.client.sendRequest(ra.reloadWorkspace);\n+    return async () => (await ctx.getClient()).sendRequest(ra.reloadWorkspace);\n }\n \n async function showReferencesImpl(\n-    client: LanguageClient,\n+    client: LanguageClient | undefined,\n     uri: string,\n     position: lc.Position,\n     locations: lc.Location[]\n@@ -745,7 +742,7 @@ async function showReferencesImpl(\n \n export function showReferences(ctx: Ctx): Cmd {\n     return async (uri: string, position: lc.Position, locations: lc.Location[]) => {\n-        await showReferencesImpl(ctx.client, uri, position, locations);\n+        await showReferencesImpl(await ctx.getClient(), uri, position, locations);\n     };\n }\n \n@@ -762,25 +759,23 @@ export function applyActionGroup(_ctx: Ctx): Cmd {\n \n export function gotoLocation(ctx: Ctx): Cmd {\n     return async (locationLink: lc.LocationLink) => {\n-        const client = ctx.client;\n-        if (client) {\n-            const uri = client.protocol2CodeConverter.asUri(locationLink.targetUri);\n-            let range = client.protocol2CodeConverter.asRange(locationLink.targetSelectionRange);\n-            // collapse the range to a cursor position\n-            range = range.with({ end: range.start });\n+        const client = await ctx.getClient();\n+        const uri = client.protocol2CodeConverter.asUri(locationLink.targetUri);\n+        let range = client.protocol2CodeConverter.asRange(locationLink.targetSelectionRange);\n+        // collapse the range to a cursor position\n+        range = range.with({ end: range.start });\n \n-            await vscode.window.showTextDocument(uri, { selection: range });\n-        }\n+        await vscode.window.showTextDocument(uri, { selection: range });\n     };\n }\n \n export function openDocs(ctx: Ctx): Cmd {\n     return async () => {\n-        const client = ctx.client;\n         const editor = vscode.window.activeTextEditor;\n-        if (!editor || !client) {\n+        if (!editor) {\n             return;\n         }\n+        const client = await ctx.getClient();\n \n         const position = editor.selection.active;\n         const textDocument = { uri: editor.document.uri.toString() };\n@@ -795,20 +790,21 @@ export function openDocs(ctx: Ctx): Cmd {\n \n export function cancelFlycheck(ctx: Ctx): Cmd {\n     return async () => {\n-        await ctx.client.sendRequest(ra.cancelFlycheck);\n+        const client = await ctx.getClient();\n+        await client.sendRequest(ra.cancelFlycheck);\n     };\n }\n \n export function resolveCodeAction(ctx: Ctx): Cmd {\n-    const client = ctx.client;\n     return async (params: lc.CodeAction) => {\n+        const client = await ctx.getClient();\n         params.command = undefined;\n-        const item = await client.sendRequest(lc.CodeActionResolveRequest.type, params);\n-        if (!item.edit) {\n+        const item = await client?.sendRequest(lc.CodeActionResolveRequest.type, params);\n+        if (!item?.edit) {\n             return;\n         }\n         const itemEdit = item.edit;\n-        const edit = await client.protocol2CodeConverter.asWorkspaceEdit(itemEdit);\n+        const edit = await client?.protocol2CodeConverter.asWorkspaceEdit(itemEdit);\n         // filter out all text edits and recreate the WorkspaceEdit without them so we can apply\n         // snippet edits on our own\n         const lcFileSystemEdit = {\n@@ -847,11 +843,10 @@ export function run(ctx: Ctx): Cmd {\n }\n \n export function peekTests(ctx: Ctx): Cmd {\n-    const client = ctx.client;\n-\n     return async () => {\n         const editor = ctx.activeRustEditor;\n-        if (!editor || !client) return;\n+        if (!editor) return;\n+        const client = await ctx.getClient();\n \n         await vscode.window.withProgress(\n             {\n@@ -937,10 +932,10 @@ export function newDebugConfig(ctx: Ctx): Cmd {\n     };\n }\n \n-export function linkToCommand(ctx: Ctx): Cmd {\n+export function linkToCommand(_: Ctx): Cmd {\n     return async (commandId: string) => {\n         const link = LINKED_COMMANDS.get(commandId);\n-        if (ctx.client && link) {\n+        if (link) {\n             const { command, arguments: args = [] } = link;\n             await vscode.commands.executeCommand(command, ...args);\n         }"}, {"sha": "d4f5ab3c88c9f697d0faddb550e709f90f01eac5", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 113, "deletions": 30, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/6f435977df34e722b45d787d7eadac23cf5b040e/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6f435977df34e722b45d787d7eadac23cf5b040e/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=6f435977df34e722b45d787d7eadac23cf5b040e", "patch": "@@ -2,9 +2,9 @@ import * as vscode from \"vscode\";\n import * as lc from \"vscode-languageclient/node\";\n import * as ra from \"./lsp_ext\";\n \n-import { Config } from \"./config\";\n+import { Config, substituteVariablesInEnv, substituteVSCodeVariables } from \"./config\";\n import { createClient } from \"./client\";\n-import { isRustEditor, RustEditor } from \"./util\";\n+import { isRustEditor, log, RustEditor } from \"./util\";\n import { ServerStatusParams } from \"./lsp_ext\";\n \n export type Workspace =\n@@ -17,35 +17,118 @@ export type Workspace =\n       };\n \n export class Ctx {\n-    private constructor(\n-        readonly config: Config,\n-        private readonly extCtx: vscode.ExtensionContext,\n-        readonly client: lc.LanguageClient,\n-        readonly serverPath: string,\n-        readonly statusBar: vscode.StatusBarItem\n-    ) {}\n-\n-    static async create(\n+    private client: lc.LanguageClient | undefined;\n+    readonly config: Config;\n+    serverPath: string;\n+    readonly statusBar: vscode.StatusBarItem;\n+\n+    traceOutputChannel: vscode.OutputChannel | undefined;\n+    outputChannel: vscode.OutputChannel | undefined;\n+\n+    serverOptions:\n+        | {\n+              run: lc.Executable;\n+              debug: lc.Executable;\n+          }\n+        | undefined;\n+    workspace: Workspace;\n+\n+    constructor(\n+        readonly extCtx: vscode.ExtensionContext,\n         config: Config,\n-        extCtx: vscode.ExtensionContext,\n         serverPath: string,\n         workspace: Workspace\n-    ): Promise<Ctx> {\n-        const client = await createClient(serverPath, workspace, config.serverExtraEnv);\n-\n-        const statusBar = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\n-        extCtx.subscriptions.push(statusBar);\n-        statusBar.text = \"rust-analyzer\";\n-        statusBar.tooltip = \"ready\";\n-        statusBar.command = \"rust-analyzer.analyzerStatus\";\n-        statusBar.show();\n-\n-        const res = new Ctx(config, extCtx, client, serverPath, statusBar);\n-\n-        res.pushCleanup(client.start());\n-        await client.onReady();\n-        client.onNotification(ra.serverStatus, (params) => res.setServerStatus(params));\n-        return res;\n+    ) {\n+        this.statusBar = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\n+        extCtx.subscriptions.push(this.statusBar);\n+        extCtx.subscriptions.push({\n+            dispose() {\n+                this.dispose();\n+            },\n+        });\n+        this.statusBar.text = \"rust-analyzer\";\n+        this.statusBar.tooltip = \"ready\";\n+        this.statusBar.command = \"rust-analyzer.analyzerStatus\";\n+        this.statusBar.show();\n+        this.serverPath = serverPath;\n+        this.config = config;\n+        this.workspace = workspace;\n+    }\n+\n+    clientFetcher() {\n+        return {\n+            get client(): lc.LanguageClient | undefined {\n+                return this.client;\n+            },\n+        };\n+    }\n+\n+    async getClient() {\n+        if (!this.traceOutputChannel) {\n+            this.traceOutputChannel = vscode.window.createOutputChannel(\n+                \"Rust Analyzer Language Server Trace\"\n+            );\n+        }\n+        if (!this.outputChannel) {\n+            this.outputChannel = vscode.window.createOutputChannel(\"Rust Analyzer Language Server\");\n+        }\n+        if (!this.serverOptions) {\n+            log.info(\"Creating server options client\");\n+            const newEnv = substituteVariablesInEnv(\n+                Object.assign({}, process.env, this.config.serverExtraEnv)\n+            );\n+            const run: lc.Executable = {\n+                command: this.serverPath,\n+                options: { env: newEnv },\n+            };\n+            this.serverOptions = {\n+                run,\n+                debug: run,\n+            };\n+        } else {\n+            this.serverOptions.run.command = this.serverPath;\n+            this.serverOptions.debug.command = this.serverPath;\n+        }\n+        if (!this.client) {\n+            log.info(\"Creating language client\");\n+            let rawInitializationOptions = vscode.workspace.getConfiguration(\"rust-analyzer\");\n+\n+            if (this.workspace.kind === \"Detached Files\") {\n+                rawInitializationOptions = {\n+                    detachedFiles: this.workspace.files.map((file) => file.uri.fsPath),\n+                    ...rawInitializationOptions,\n+                };\n+            }\n+\n+            const initializationOptions = substituteVSCodeVariables(rawInitializationOptions);\n+\n+            this.client = await createClient(\n+                this.traceOutputChannel,\n+                this.outputChannel,\n+                initializationOptions,\n+                this.serverOptions\n+            );\n+            this.client.onNotification(ra.serverStatus, (params) => this.setServerStatus(params));\n+        }\n+        return this.client;\n+    }\n+\n+    async activate() {\n+        log.info(\"Activating language client\");\n+        const client = await this.getClient();\n+        await client.start();\n+        return client;\n+    }\n+\n+    async deactivate() {\n+        log.info(\"Deactivating language client\");\n+        await this.client?.stop();\n+    }\n+\n+    async disposeClient() {\n+        log.info(\"Deactivating language client\");\n+        await this.client?.dispose();\n+        this.client = undefined;\n     }\n \n     get activeRustEditor(): RustEditor | undefined {\n@@ -61,7 +144,7 @@ export class Ctx {\n         const fullName = `rust-analyzer.${name}`;\n         const cmd = factory(this);\n         const d = vscode.commands.registerCommand(fullName, cmd);\n-        this.pushCleanup(d);\n+        this.pushExtCleanup(d);\n     }\n \n     get extensionPath(): string {\n@@ -111,7 +194,7 @@ export class Ctx {\n         statusBar.text = `${icon}rust-analyzer`;\n     }\n \n-    pushCleanup(d: Disposable) {\n+    pushExtCleanup(d: Disposable) {\n         this.extCtx.subscriptions.push(d);\n     }\n }"}, {"sha": "4ff27e0b5518577a44b7d7f8b5ca536af382082f", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 54, "deletions": 240, "changes": 294, "blob_url": "https://github.com/rust-lang/rust/blob/6f435977df34e722b45d787d7eadac23cf5b040e/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6f435977df34e722b45d787d7eadac23cf5b040e/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=6f435977df34e722b45d787d7eadac23cf5b040e", "patch": "@@ -1,53 +1,36 @@\n import * as vscode from \"vscode\";\n import * as lc from \"vscode-languageclient/node\";\n-import * as os from \"os\";\n \n import * as commands from \"./commands\";\n-import { Ctx } from \"./ctx\";\n-import { Config } from \"./config\";\n-import { log, isValidExecutable, isRustDocument } from \"./util\";\n+import { Ctx, Workspace } from \"./ctx\";\n+import { log, isRustDocument } from \"./util\";\n import { PersistentState } from \"./persistent_state\";\n import { activateTaskProvider } from \"./tasks\";\n import { setContextValue } from \"./util\";\n-import { exec } from \"child_process\";\n-\n-let ctx: Ctx | undefined;\n+import { bootstrap } from \"./bootstrap\";\n+import { Config } from \"./config\";\n \n const RUST_PROJECT_CONTEXT_NAME = \"inRustProject\";\n \n-let TRACE_OUTPUT_CHANNEL: vscode.OutputChannel | null = null;\n-export function traceOutputChannel() {\n-    if (!TRACE_OUTPUT_CHANNEL) {\n-        TRACE_OUTPUT_CHANNEL = vscode.window.createOutputChannel(\n-            \"Rust Analyzer Language Server Trace\"\n-        );\n-    }\n-    return TRACE_OUTPUT_CHANNEL;\n-}\n-let OUTPUT_CHANNEL: vscode.OutputChannel | null = null;\n-export function outputChannel() {\n-    if (!OUTPUT_CHANNEL) {\n-        OUTPUT_CHANNEL = vscode.window.createOutputChannel(\"Rust Analyzer Language Server\");\n-    }\n-    return OUTPUT_CHANNEL;\n-}\n-\n export interface RustAnalyzerExtensionApi {\n-    client?: lc.LanguageClient;\n+    // FIXME: this should be non-optional\n+    readonly client?: lc.LanguageClient;\n }\n \n export async function activate(\n     context: vscode.ExtensionContext\n ): Promise<RustAnalyzerExtensionApi> {\n-    // VS Code doesn't show a notification when an extension fails to activate\n-    // so we do it ourselves.\n-    return await tryActivate(context).catch((err) => {\n-        void vscode.window.showErrorMessage(`Cannot activate rust-analyzer: ${err.message}`);\n-        throw err;\n-    });\n-}\n+    if (vscode.extensions.getExtension(\"rust-lang.rust\")) {\n+        vscode.window\n+            .showWarningMessage(\n+                `You have both the rust-analyzer (rust-lang.rust-analyzer) and Rust (rust-lang.rust) ` +\n+                    \"plugins enabled. These are known to conflict and cause various functions of \" +\n+                    \"both plugins to not work correctly. You should disable one of them.\",\n+                \"Got it\"\n+            )\n+            .then(() => {}, console.error);\n+    }\n \n-async function tryActivate(context: vscode.ExtensionContext): Promise<RustAnalyzerExtensionApi> {\n     // We only support local folders, not eg. Live Share (`vlsl:` scheme), so don't activate if\n     // only those are in use.\n     // (r-a still somewhat works with Live Share, because commands are tunneled to the host)\n@@ -65,8 +48,17 @@ async function tryActivate(context: vscode.ExtensionContext): Promise<RustAnalyz\n         return {};\n     }\n \n-    const config = new Config(context);\n+    const workspace: Workspace =\n+        folders.length === 0\n+            ? {\n+                  kind: \"Detached Files\",\n+                  files: rustDocuments,\n+              }\n+            : { kind: \"Workspace Folder\" };\n+\n     const state = new PersistentState(context.globalState);\n+    const config = new Config(context);\n+\n     const serverPath = await bootstrap(context, config, state).catch((err) => {\n         let message = \"bootstrap error. \";\n \n@@ -77,42 +69,43 @@ async function tryActivate(context: vscode.ExtensionContext): Promise<RustAnalyz\n         throw new Error(message);\n     });\n \n-    if (folders.length === 0) {\n-        ctx = await Ctx.create(config, context, serverPath, {\n-            kind: \"Detached Files\",\n-            files: rustDocuments,\n-        });\n-    } else {\n-        // Note: we try to start the server before we activate type hints so that it\n-        // registers its `onDidChangeDocument` handler before us.\n-        //\n-        // This a horribly, horribly wrong way to deal with this problem.\n-        ctx = await Ctx.create(config, context, serverPath, { kind: \"Workspace Folder\" });\n-        ctx.pushCleanup(activateTaskProvider(ctx.config));\n+    const ctx = new Ctx(context, config, serverPath, workspace);\n+    // VS Code doesn't show a notification when an extension fails to activate\n+    // so we do it ourselves.\n+    return await activateServer(ctx).catch((err) => {\n+        void vscode.window.showErrorMessage(`Cannot activate rust-analyzer: ${err.message}`);\n+        throw err;\n+    });\n+}\n+\n+async function activateServer(ctx: Ctx): Promise<RustAnalyzerExtensionApi> {\n+    if (ctx.workspace.kind === \"Workspace Folder\") {\n+        ctx.pushExtCleanup(activateTaskProvider(ctx.config));\n     }\n-    await initCommonContext(context, ctx);\n \n-    warnAboutExtensionConflicts();\n+    await ctx.activate();\n+    await initCommonContext(ctx);\n \n-    if (config.typingContinueCommentsOnNewline) {\n-        ctx.pushCleanup(configureLanguage());\n+    if (ctx.config.typingContinueCommentsOnNewline) {\n+        ctx.pushExtCleanup(configureLanguage());\n     }\n \n     vscode.workspace.onDidChangeConfiguration(\n         (_) =>\n-            ctx?.client\n-                ?.sendNotification(\"workspace/didChangeConfiguration\", { settings: \"\" })\n+            ctx\n+                .getClient()\n+                .then((it) =>\n+                    it.sendNotification(\"workspace/didChangeConfiguration\", { settings: \"\" })\n+                )\n                 .catch(log.error),\n         null,\n         ctx.subscriptions\n     );\n \n-    return {\n-        client: ctx.client,\n-    };\n+    return ctx.clientFetcher();\n }\n \n-async function initCommonContext(context: vscode.ExtensionContext, ctx: Ctx) {\n+async function initCommonContext(ctx: Ctx) {\n     // Register a \"dumb\" onEnter command for the case where server fails to\n     // start.\n     //\n@@ -130,24 +123,15 @@ async function initCommonContext(context: vscode.ExtensionContext, ctx: Ctx) {\n     const defaultOnEnter = vscode.commands.registerCommand(\"rust-analyzer.onEnter\", () =>\n         vscode.commands.executeCommand(\"default:type\", { text: \"\\n\" })\n     );\n-    context.subscriptions.push(defaultOnEnter);\n+    ctx.pushExtCleanup(defaultOnEnter);\n \n     await setContextValue(RUST_PROJECT_CONTEXT_NAME, true);\n \n     // Commands which invokes manually via command palette, shortcut, etc.\n-\n-    // Reloading is inspired by @DanTup maneuver: https://github.com/microsoft/vscode/issues/45774#issuecomment-373423895\n     ctx.registerCommand(\"reload\", (_) => async () => {\n         void vscode.window.showInformationMessage(\"Reloading rust-analyzer...\");\n-        await doDeactivate();\n-        while (context.subscriptions.length > 0) {\n-            try {\n-                context.subscriptions.pop()!.dispose();\n-            } catch (err) {\n-                log.error(\"Dispose error:\", err);\n-            }\n-        }\n-        await activate(context).catch(log.error);\n+        await ctx.disposeClient();\n+        await ctx.activate();\n     });\n \n     ctx.registerCommand(\"analyzerStatus\", commands.analyzerStatus);\n@@ -175,9 +159,6 @@ async function initCommonContext(context: vscode.ExtensionContext, ctx: Ctx) {\n     ctx.registerCommand(\"moveItemDown\", commands.moveItemDown);\n     ctx.registerCommand(\"cancelFlycheck\", commands.cancelFlycheck);\n \n-    defaultOnEnter.dispose();\n-    ctx.registerCommand(\"onEnter\", commands.onEnter);\n-\n     ctx.registerCommand(\"ssr\", commands.ssr);\n     ctx.registerCommand(\"serverVersion\", commands.serverVersion);\n \n@@ -191,176 +172,9 @@ async function initCommonContext(context: vscode.ExtensionContext, ctx: Ctx) {\n     ctx.registerCommand(\"gotoLocation\", commands.gotoLocation);\n \n     ctx.registerCommand(\"linkToCommand\", commands.linkToCommand);\n-}\n \n-export async function deactivate() {\n-    TRACE_OUTPUT_CHANNEL?.dispose();\n-    TRACE_OUTPUT_CHANNEL = null;\n-    OUTPUT_CHANNEL?.dispose();\n-    OUTPUT_CHANNEL = null;\n-    await doDeactivate();\n-}\n-\n-async function doDeactivate() {\n-    await setContextValue(RUST_PROJECT_CONTEXT_NAME, undefined);\n-    await ctx?.client.stop();\n-    ctx = undefined;\n-}\n-\n-async function bootstrap(\n-    context: vscode.ExtensionContext,\n-    config: Config,\n-    state: PersistentState\n-): Promise<string> {\n-    const path = await getServer(context, config, state);\n-    if (!path) {\n-        throw new Error(\n-            \"Rust Analyzer Language Server is not available. \" +\n-                \"Please, ensure its [proper installation](https://rust-analyzer.github.io/manual.html#installation).\"\n-        );\n-    }\n-\n-    log.info(\"Using server binary at\", path);\n-\n-    if (!isValidExecutable(path)) {\n-        if (config.serverPath) {\n-            throw new Error(`Failed to execute ${path} --version. \\`config.server.path\\` or \\`config.serverPath\\` has been set explicitly.\\\n-            Consider removing this config or making a valid server binary available at that path.`);\n-        } else {\n-            throw new Error(`Failed to execute ${path} --version`);\n-        }\n-    }\n-\n-    return path;\n-}\n-\n-async function patchelf(dest: vscode.Uri): Promise<void> {\n-    await vscode.window.withProgress(\n-        {\n-            location: vscode.ProgressLocation.Notification,\n-            title: \"Patching rust-analyzer for NixOS\",\n-        },\n-        async (progress, _) => {\n-            const expression = `\n-            {srcStr, pkgs ? import <nixpkgs> {}}:\n-                pkgs.stdenv.mkDerivation {\n-                    name = \"rust-analyzer\";\n-                    src = /. + srcStr;\n-                    phases = [ \"installPhase\" \"fixupPhase\" ];\n-                    installPhase = \"cp $src $out\";\n-                    fixupPhase = ''\n-                    chmod 755 $out\n-                    patchelf --set-interpreter \"$(cat $NIX_CC/nix-support/dynamic-linker)\" $out\n-                    '';\n-                }\n-            `;\n-            const origFile = vscode.Uri.file(dest.fsPath + \"-orig\");\n-            await vscode.workspace.fs.rename(dest, origFile, { overwrite: true });\n-            try {\n-                progress.report({ message: \"Patching executable\", increment: 20 });\n-                await new Promise((resolve, reject) => {\n-                    const handle = exec(\n-                        `nix-build -E - --argstr srcStr '${origFile.fsPath}' -o '${dest.fsPath}'`,\n-                        (err, stdout, stderr) => {\n-                            if (err != null) {\n-                                reject(Error(stderr));\n-                            } else {\n-                                resolve(stdout);\n-                            }\n-                        }\n-                    );\n-                    handle.stdin?.write(expression);\n-                    handle.stdin?.end();\n-                });\n-            } finally {\n-                await vscode.workspace.fs.delete(origFile);\n-            }\n-        }\n-    );\n-}\n-\n-async function getServer(\n-    context: vscode.ExtensionContext,\n-    config: Config,\n-    state: PersistentState\n-): Promise<string | undefined> {\n-    const explicitPath = serverPath(config);\n-    if (explicitPath) {\n-        if (explicitPath.startsWith(\"~/\")) {\n-            return os.homedir() + explicitPath.slice(\"~\".length);\n-        }\n-        return explicitPath;\n-    }\n-    if (config.package.releaseTag === null) return \"rust-analyzer\";\n-\n-    const ext = process.platform === \"win32\" ? \".exe\" : \"\";\n-    const bundled = vscode.Uri.joinPath(context.extensionUri, \"server\", `rust-analyzer${ext}`);\n-    const bundledExists = await vscode.workspace.fs.stat(bundled).then(\n-        () => true,\n-        () => false\n-    );\n-    if (bundledExists) {\n-        let server = bundled;\n-        if (await isNixOs()) {\n-            await vscode.workspace.fs.createDirectory(config.globalStorageUri).then();\n-            const dest = vscode.Uri.joinPath(config.globalStorageUri, `rust-analyzer${ext}`);\n-            let exists = await vscode.workspace.fs.stat(dest).then(\n-                () => true,\n-                () => false\n-            );\n-            if (exists && config.package.version !== state.serverVersion) {\n-                await vscode.workspace.fs.delete(dest);\n-                exists = false;\n-            }\n-            if (!exists) {\n-                await vscode.workspace.fs.copy(bundled, dest);\n-                await patchelf(dest);\n-            }\n-            server = dest;\n-        }\n-        await state.updateServerVersion(config.package.version);\n-        return server.fsPath;\n-    }\n-\n-    await state.updateServerVersion(undefined);\n-    await vscode.window.showErrorMessage(\n-        \"Unfortunately we don't ship binaries for your platform yet. \" +\n-            \"You need to manually clone the rust-analyzer repository and \" +\n-            \"run `cargo xtask install --server` to build the language server from sources. \" +\n-            \"If you feel that your platform should be supported, please create an issue \" +\n-            \"about that [here](https://github.com/rust-lang/rust-analyzer/issues) and we \" +\n-            \"will consider it.\"\n-    );\n-    return undefined;\n-}\n-\n-function serverPath(config: Config): string | null {\n-    return process.env.__RA_LSP_SERVER_DEBUG ?? config.serverPath;\n-}\n-\n-async function isNixOs(): Promise<boolean> {\n-    try {\n-        const contents = (\n-            await vscode.workspace.fs.readFile(vscode.Uri.file(\"/etc/os-release\"))\n-        ).toString();\n-        const idString = contents.split(\"\\n\").find((a) => a.startsWith(\"ID=\")) || \"ID=linux\";\n-        return idString.indexOf(\"nixos\") !== -1;\n-    } catch {\n-        return false;\n-    }\n-}\n-\n-function warnAboutExtensionConflicts() {\n-    if (vscode.extensions.getExtension(\"rust-lang.rust\")) {\n-        vscode.window\n-            .showWarningMessage(\n-                `You have both the rust-analyzer (rust-lang.rust-analyzer) and Rust (rust-lang.rust) ` +\n-                    \"plugins enabled. These are known to conflict and cause various functions of \" +\n-                    \"both plugins to not work correctly. You should disable one of them.\",\n-                \"Got it\"\n-            )\n-            .then(() => {}, console.error);\n-    }\n+    defaultOnEnter.dispose();\n+    ctx.registerCommand(\"onEnter\", commands.onEnter);\n }\n \n /**"}]}