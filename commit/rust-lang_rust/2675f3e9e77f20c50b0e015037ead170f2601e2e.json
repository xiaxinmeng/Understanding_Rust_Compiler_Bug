{"sha": "2675f3e9e77f20c50b0e015037ead170f2601e2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NzVmM2U5ZTc3ZjIwYzUwYjBlMDE1MDM3ZWFkMTcwZjI2MDFlMmU=", "commit": {"author": {"name": "Florian Zeitz", "email": "florob@babelmonkeys.de", "date": "2013-08-10T23:57:59Z"}, "committer": {"name": "Florian Zeitz", "email": "florob@babelmonkeys.de", "date": "2013-08-21T09:50:07Z"}, "message": "Add canonical combining class to std::unicode", "tree": {"sha": "af6d82007145df77f68c28fefd74646f78c5eead", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af6d82007145df77f68c28fefd74646f78c5eead"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2675f3e9e77f20c50b0e015037ead170f2601e2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2675f3e9e77f20c50b0e015037ead170f2601e2e", "html_url": "https://github.com/rust-lang/rust/commit/2675f3e9e77f20c50b0e015037ead170f2601e2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2675f3e9e77f20c50b0e015037ead170f2601e2e/comments", "author": {"login": "Florob", "id": 133684, "node_id": "MDQ6VXNlcjEzMzY4NA==", "avatar_url": "https://avatars.githubusercontent.com/u/133684?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Florob", "html_url": "https://github.com/Florob", "followers_url": "https://api.github.com/users/Florob/followers", "following_url": "https://api.github.com/users/Florob/following{/other_user}", "gists_url": "https://api.github.com/users/Florob/gists{/gist_id}", "starred_url": "https://api.github.com/users/Florob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Florob/subscriptions", "organizations_url": "https://api.github.com/users/Florob/orgs", "repos_url": "https://api.github.com/users/Florob/repos", "events_url": "https://api.github.com/users/Florob/events{/privacy}", "received_events_url": "https://api.github.com/users/Florob/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Florob", "id": 133684, "node_id": "MDQ6VXNlcjEzMzY4NA==", "avatar_url": "https://avatars.githubusercontent.com/u/133684?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Florob", "html_url": "https://github.com/Florob", "followers_url": "https://api.github.com/users/Florob/followers", "following_url": "https://api.github.com/users/Florob/following{/other_user}", "gists_url": "https://api.github.com/users/Florob/gists{/gist_id}", "starred_url": "https://api.github.com/users/Florob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Florob/subscriptions", "organizations_url": "https://api.github.com/users/Florob/orgs", "repos_url": "https://api.github.com/users/Florob/repos", "events_url": "https://api.github.com/users/Florob/events{/privacy}", "received_events_url": "https://api.github.com/users/Florob/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83f4bee44f077c8f45eb2bd314aee7f2af8ee0dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/83f4bee44f077c8f45eb2bd314aee7f2af8ee0dc", "html_url": "https://github.com/rust-lang/rust/commit/83f4bee44f077c8f45eb2bd314aee7f2af8ee0dc"}], "stats": {"total": 223, "additions": 219, "deletions": 4}, "files": [{"sha": "0f6e1c4c606218ac61869c36ed04d19728a6e895", "filename": "src/etc/unicode.py", "status": "modified", "additions": 53, "deletions": 4, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/2675f3e9e77f20c50b0e015037ead170f2601e2e/src%2Fetc%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/2675f3e9e77f20c50b0e015037ead170f2601e2e/src%2Fetc%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Funicode.py?ref=2675f3e9e77f20c50b0e015037ead170f2601e2e", "patch": "@@ -26,11 +26,15 @@ def fetch(f):\n def load_unicode_data(f):\n     fetch(f)\n     gencats = {}\n+    combines = []\n     canon_decomp = {}\n     compat_decomp = {}\n     curr_cat = \"\"\n+    curr_combine = \"\"\n     c_lo = 0\n     c_hi = 0\n+    com_lo = 0\n+    com_hi = 0\n     for line in fileinput.input(f):\n         fields = line.split(\";\")\n         if len(fields) != 15:\n@@ -69,7 +73,21 @@ def load_unicode_data(f):\n             c_lo = code\n             c_hi = code\n \n-    return (canon_decomp, compat_decomp, gencats)\n+        if curr_combine == \"\":\n+            curr_combine = combine\n+            com_lo = code\n+            com_hi = code\n+\n+        if curr_combine == combine:\n+            com_hi = code\n+        else:\n+            if curr_combine != \"0\":\n+                combines.append((com_lo, com_hi, curr_combine))\n+            curr_combine = combine\n+            com_lo = code\n+            com_hi = code\n+\n+    return (canon_decomp, compat_decomp, gencats, combines)\n \n \n def load_derived_core_properties(f):\n@@ -193,7 +211,7 @@ def format_table_content(f, content, indent):\n             line = \" \"*indent + chunk\n     f.write(line)\n \n-def emit_decomp_module(f, canon, compat):\n+def emit_decomp_module(f, canon, compat, combine):\n     canon_keys = canon.keys()\n     canon_keys.sort()\n \n@@ -217,8 +235,26 @@ def emit_decomp_module(f, canon, compat):\n             }\n             None => None\n         }\n+    }\\n\n+\"\"\")\n+\n+    f.write(\"\"\"\n+    fn bsearch_range_value_table(c: char, r: &'static [(char, char, u8)]) -> u8 {\n+        use cmp::{Equal, Less, Greater};\n+        match r.bsearch(|&(lo, hi, _)| {\n+            if lo <= c && c <= hi { Equal }\n+            else if hi < c { Less }\n+            else { Greater }\n+        }) {\n+            Some(idx) => {\n+                let (_, _, result) = r[idx];\n+                result\n+            }\n+            None => 0\n+        }\n     }\\n\\n\n \"\"\")\n+\n     f.write(\"    // Canonical decompositions\\n\")\n     f.write(\"    static canonical_table : &'static [(char, &'static [char])] = &[\\n\")\n     data = \"\"\n@@ -237,6 +273,7 @@ def emit_decomp_module(f, canon, compat):\n         data += \"])\"\n     format_table_content(f, data, 8)\n     f.write(\"\\n    ];\\n\\n\")\n+\n     f.write(\"    // Compatibility decompositions\\n\")\n     f.write(\"    static compatibility_table : &'static [(char, &'static [char])] = &[\\n\")\n     data = \"\"\n@@ -255,10 +292,22 @@ def emit_decomp_module(f, canon, compat):\n         data += \"])\"\n     format_table_content(f, data, 8)\n     f.write(\"\\n    ];\\n\\n\")\n+\n+    f.write(\"    static combining_class_table : &'static [(char, char, u8)] = &[\\n\")\n+    ix = 0\n+    for pair in combine:\n+        f.write(ch_prefix(ix))\n+        f.write(\"(%s, %s, %s)\" % (escape_char(pair[0]), escape_char(pair[1]), pair[2]))\n+        ix += 1\n+    f.write(\"\\n    ];\\n\")\n+\n     f.write(\"    pub fn canonical(c: char, i: &fn(char)) \"\n         + \"{ d(c, i, false); }\\n\\n\")\n     f.write(\"    pub fn compatibility(c: char, i: &fn(char)) \"\n             +\"{ d(c, i, true); }\\n\\n\")\n+    f.write(\"    pub fn canonical_combining_class(c: char) -> u8 {\\n\"\n+        + \"        bsearch_range_value_table(c, combining_class_table)\\n\"\n+        + \"    }\\n\\n\")\n     f.write(\"    fn d(c: char, i: &fn(char), k: bool) {\\n\")\n     f.write(\"        use iterator::Iterator;\\n\");\n \n@@ -302,7 +351,7 @@ def emit_decomp_module(f, canon, compat):\n         os.remove(i);\n rf = open(r, \"w\")\n \n-(canon_decomp, compat_decomp, gencats) = load_unicode_data(\"UnicodeData.txt\")\n+(canon_decomp, compat_decomp, gencats, combines) = load_unicode_data(\"UnicodeData.txt\")\n \n # Preamble\n rf.write('''// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n@@ -324,7 +373,7 @@ def emit_decomp_module(f, canon, compat):\n \n emit_property_module(rf, \"general_category\", gencats)\n \n-emit_decomp_module(rf, canon_decomp, compat_decomp)\n+emit_decomp_module(rf, canon_decomp, compat_decomp, combines)\n \n derived = load_derived_core_properties(\"DerivedCoreProperties.txt\")\n emit_property_module(rf, \"derived_property\", derived)"}, {"sha": "6d763b58cd125db1073a2e15f25a4d19f3971c54", "filename": "src/libstd/unicode.rs", "status": "modified", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/2675f3e9e77f20c50b0e015037ead170f2601e2e/src%2Flibstd%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2675f3e9e77f20c50b0e015037ead170f2601e2e/src%2Flibstd%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funicode.rs?ref=2675f3e9e77f20c50b0e015037ead170f2601e2e", "patch": "@@ -1469,6 +1469,22 @@ pub mod decompose {\n     }\n \n \n+    fn bsearch_range_value_table(c: char, r: &'static [(char, char, u8)]) -> u8 {\n+        use cmp::{Equal, Less, Greater};\n+        match r.bsearch(|&(lo, hi, _)| {\n+            if lo <= c && c <= hi { Equal }\n+            else if hi < c { Less }\n+            else { Greater }\n+        }) {\n+            Some(idx) => {\n+                let (_, _, result) = r[idx];\n+                result\n+            }\n+            None => 0\n+        }\n+    }\n+\n+\n     // Canonical decompositions\n     static canonical_table : &'static [(char, &'static [char])] = &[\n         ('\\xc0', &['\\x41', '\\u0300']), ('\\xc1', &['\\x41', '\\u0301']), ('\\xc2', &['\\x41', '\\u0302']),\n@@ -3465,10 +3481,160 @@ pub mod decompose {\n         &['\\u53ef'])\n     ];\n \n+    static combining_class_table : &'static [(char, char, u8)] = &[\n+        ('\\u0300', '\\u0314', 230), ('\\u0315', '\\u0315', 232),\n+        ('\\u0316', '\\u0319', 220), ('\\u031a', '\\u031a', 232),\n+        ('\\u031b', '\\u031b', 216), ('\\u031c', '\\u0320', 220),\n+        ('\\u0321', '\\u0322', 202), ('\\u0323', '\\u0326', 220),\n+        ('\\u0327', '\\u0328', 202), ('\\u0329', '\\u0333', 220),\n+        ('\\u0334', '\\u0338', 1), ('\\u0339', '\\u033c', 220),\n+        ('\\u033d', '\\u0344', 230), ('\\u0345', '\\u0345', 240),\n+        ('\\u0346', '\\u0346', 230), ('\\u0347', '\\u0349', 220),\n+        ('\\u034a', '\\u034c', 230), ('\\u034d', '\\u034e', 220),\n+        ('\\u0350', '\\u0352', 230), ('\\u0353', '\\u0356', 220),\n+        ('\\u0357', '\\u0357', 230), ('\\u0358', '\\u0358', 232),\n+        ('\\u0359', '\\u035a', 220), ('\\u035b', '\\u035b', 230),\n+        ('\\u035c', '\\u035c', 233), ('\\u035d', '\\u035e', 234),\n+        ('\\u035f', '\\u035f', 233), ('\\u0360', '\\u0361', 234),\n+        ('\\u0362', '\\u0362', 233), ('\\u0363', '\\u036f', 230),\n+        ('\\u0483', '\\u0487', 230), ('\\u0591', '\\u0591', 220),\n+        ('\\u0592', '\\u0595', 230), ('\\u0596', '\\u0596', 220),\n+        ('\\u0597', '\\u0599', 230), ('\\u059a', '\\u059a', 222),\n+        ('\\u059b', '\\u059b', 220), ('\\u059c', '\\u05a1', 230),\n+        ('\\u05a2', '\\u05a7', 220), ('\\u05a8', '\\u05a9', 230),\n+        ('\\u05aa', '\\u05aa', 220), ('\\u05ab', '\\u05ac', 230),\n+        ('\\u05ad', '\\u05ad', 222), ('\\u05ae', '\\u05ae', 228),\n+        ('\\u05af', '\\u05af', 230), ('\\u05b0', '\\u05b0', 10),\n+        ('\\u05b1', '\\u05b1', 11), ('\\u05b2', '\\u05b2', 12),\n+        ('\\u05b3', '\\u05b3', 13), ('\\u05b4', '\\u05b4', 14),\n+        ('\\u05b5', '\\u05b5', 15), ('\\u05b6', '\\u05b6', 16),\n+        ('\\u05b7', '\\u05b7', 17), ('\\u05b8', '\\u05b8', 18),\n+        ('\\u05b9', '\\u05ba', 19), ('\\u05bb', '\\u05bb', 20),\n+        ('\\u05bc', '\\u05bc', 21), ('\\u05bd', '\\u05bd', 22),\n+        ('\\u05bf', '\\u05bf', 23), ('\\u05c1', '\\u05c1', 24),\n+        ('\\u05c2', '\\u05c2', 25), ('\\u05c4', '\\u05c4', 230),\n+        ('\\u05c5', '\\u05c5', 220), ('\\u05c7', '\\u05c7', 18),\n+        ('\\u0610', '\\u0617', 230), ('\\u0618', '\\u0618', 30),\n+        ('\\u0619', '\\u0619', 31), ('\\u061a', '\\u061a', 32),\n+        ('\\u064b', '\\u064b', 27), ('\\u064c', '\\u064c', 28),\n+        ('\\u064d', '\\u064d', 29), ('\\u064e', '\\u064e', 30),\n+        ('\\u064f', '\\u064f', 31), ('\\u0650', '\\u0650', 32),\n+        ('\\u0651', '\\u0651', 33), ('\\u0652', '\\u0652', 34),\n+        ('\\u0653', '\\u0654', 230), ('\\u0655', '\\u0656', 220),\n+        ('\\u0657', '\\u065b', 230), ('\\u065c', '\\u065c', 220),\n+        ('\\u065d', '\\u065e', 230), ('\\u065f', '\\u065f', 220),\n+        ('\\u0670', '\\u0670', 35), ('\\u06d6', '\\u06dc', 230),\n+        ('\\u06df', '\\u06e2', 230), ('\\u06e3', '\\u06e3', 220),\n+        ('\\u06e4', '\\u06e4', 230), ('\\u06e7', '\\u06e8', 230),\n+        ('\\u06ea', '\\u06ea', 220), ('\\u06eb', '\\u06ec', 230),\n+        ('\\u06ed', '\\u06ed', 220), ('\\u0711', '\\u0711', 36),\n+        ('\\u0730', '\\u0730', 230), ('\\u0731', '\\u0731', 220),\n+        ('\\u0732', '\\u0733', 230), ('\\u0734', '\\u0734', 220),\n+        ('\\u0735', '\\u0736', 230), ('\\u0737', '\\u0739', 220),\n+        ('\\u073a', '\\u073a', 230), ('\\u073b', '\\u073c', 220),\n+        ('\\u073d', '\\u073d', 230), ('\\u073e', '\\u073e', 220),\n+        ('\\u073f', '\\u0741', 230), ('\\u0742', '\\u0742', 220),\n+        ('\\u0743', '\\u0743', 230), ('\\u0744', '\\u0744', 220),\n+        ('\\u0745', '\\u0745', 230), ('\\u0746', '\\u0746', 220),\n+        ('\\u0747', '\\u0747', 230), ('\\u0748', '\\u0748', 220),\n+        ('\\u0749', '\\u074a', 230), ('\\u07eb', '\\u07f1', 230),\n+        ('\\u07f2', '\\u07f2', 220), ('\\u07f3', '\\u07f3', 230),\n+        ('\\u0816', '\\u0819', 230), ('\\u081b', '\\u0823', 230),\n+        ('\\u0825', '\\u0827', 230), ('\\u0829', '\\u082d', 230),\n+        ('\\u0859', '\\u085b', 220), ('\\u08e4', '\\u08e5', 230),\n+        ('\\u08e6', '\\u08e6', 220), ('\\u08e7', '\\u08e8', 230),\n+        ('\\u08e9', '\\u08e9', 220), ('\\u08ea', '\\u08ec', 230),\n+        ('\\u08ed', '\\u08ef', 220), ('\\u08f0', '\\u08f0', 27),\n+        ('\\u08f1', '\\u08f1', 28), ('\\u08f2', '\\u08f2', 29),\n+        ('\\u08f3', '\\u08f5', 230), ('\\u08f6', '\\u08f6', 220),\n+        ('\\u08f7', '\\u08f8', 230), ('\\u08f9', '\\u08fa', 220),\n+        ('\\u08fb', '\\u08fe', 230), ('\\u093c', '\\u093c', 7),\n+        ('\\u094d', '\\u094d', 9), ('\\u0951', '\\u0951', 230),\n+        ('\\u0952', '\\u0952', 220), ('\\u0953', '\\u0954', 230),\n+        ('\\u09bc', '\\u09bc', 7), ('\\u09cd', '\\u09cd', 9),\n+        ('\\u0a3c', '\\u0a3c', 7), ('\\u0a4d', '\\u0a4d', 9),\n+        ('\\u0abc', '\\u0abc', 7), ('\\u0acd', '\\u0acd', 9),\n+        ('\\u0b3c', '\\u0b3c', 7), ('\\u0b4d', '\\u0b4d', 9),\n+        ('\\u0bcd', '\\u0bcd', 9), ('\\u0c4d', '\\u0c4d', 9),\n+        ('\\u0c55', '\\u0c55', 84), ('\\u0c56', '\\u0c56', 91),\n+        ('\\u0cbc', '\\u0cbc', 7), ('\\u0ccd', '\\u0ccd', 9),\n+        ('\\u0d4d', '\\u0d4d', 9), ('\\u0dca', '\\u0dca', 9),\n+        ('\\u0e38', '\\u0e39', 103), ('\\u0e3a', '\\u0e3a', 9),\n+        ('\\u0e48', '\\u0e4b', 107), ('\\u0eb8', '\\u0eb9', 118),\n+        ('\\u0ec8', '\\u0ecb', 122), ('\\u0f18', '\\u0f19', 220),\n+        ('\\u0f35', '\\u0f35', 220), ('\\u0f37', '\\u0f37', 220),\n+        ('\\u0f39', '\\u0f39', 216), ('\\u0f71', '\\u0f71', 129),\n+        ('\\u0f72', '\\u0f72', 130), ('\\u0f74', '\\u0f74', 132),\n+        ('\\u0f7a', '\\u0f7d', 130), ('\\u0f80', '\\u0f80', 130),\n+        ('\\u0f82', '\\u0f83', 230), ('\\u0f84', '\\u0f84', 9),\n+        ('\\u0f86', '\\u0f87', 230), ('\\u0fc6', '\\u0fc6', 220),\n+        ('\\u1037', '\\u1037', 7), ('\\u1039', '\\u103a', 9),\n+        ('\\u108d', '\\u108d', 220), ('\\u135d', '\\u135f', 230),\n+        ('\\u1714', '\\u1714', 9), ('\\u1734', '\\u1734', 9),\n+        ('\\u17d2', '\\u17d2', 9), ('\\u17dd', '\\u17dd', 230),\n+        ('\\u18a9', '\\u18a9', 228), ('\\u1939', '\\u1939', 222),\n+        ('\\u193a', '\\u193a', 230), ('\\u193b', '\\u193b', 220),\n+        ('\\u1a17', '\\u1a17', 230), ('\\u1a18', '\\u1a18', 220),\n+        ('\\u1a60', '\\u1a60', 9), ('\\u1a75', '\\u1a7c', 230),\n+        ('\\u1a7f', '\\u1a7f', 220), ('\\u1b34', '\\u1b34', 7),\n+        ('\\u1b44', '\\u1b44', 9), ('\\u1b6b', '\\u1b6b', 230),\n+        ('\\u1b6c', '\\u1b6c', 220), ('\\u1b6d', '\\u1b73', 230),\n+        ('\\u1baa', '\\u1bab', 9), ('\\u1be6', '\\u1be6', 7),\n+        ('\\u1bf2', '\\u1bf3', 9), ('\\u1c37', '\\u1c37', 7),\n+        ('\\u1cd0', '\\u1cd2', 230), ('\\u1cd4', '\\u1cd4', 1),\n+        ('\\u1cd5', '\\u1cd9', 220), ('\\u1cda', '\\u1cdb', 230),\n+        ('\\u1cdc', '\\u1cdf', 220), ('\\u1ce0', '\\u1ce0', 230),\n+        ('\\u1ce2', '\\u1ce8', 1), ('\\u1ced', '\\u1ced', 220),\n+        ('\\u1cf4', '\\u1cf4', 230), ('\\u1dc0', '\\u1dc1', 230),\n+        ('\\u1dc2', '\\u1dc2', 220), ('\\u1dc3', '\\u1dc9', 230),\n+        ('\\u1dca', '\\u1dca', 220), ('\\u1dcb', '\\u1dcc', 230),\n+        ('\\u1dcd', '\\u1dcd', 234), ('\\u1dce', '\\u1dce', 214),\n+        ('\\u1dcf', '\\u1dcf', 220), ('\\u1dd0', '\\u1dd0', 202),\n+        ('\\u1dd1', '\\u1de6', 230), ('\\u1dfc', '\\u1dfc', 233),\n+        ('\\u1dfd', '\\u1dfd', 220), ('\\u1dfe', '\\u1dfe', 230),\n+        ('\\u1dff', '\\u1dff', 220), ('\\u20d0', '\\u20d1', 230),\n+        ('\\u20d2', '\\u20d3', 1), ('\\u20d4', '\\u20d7', 230),\n+        ('\\u20d8', '\\u20da', 1), ('\\u20db', '\\u20dc', 230),\n+        ('\\u20e1', '\\u20e1', 230), ('\\u20e5', '\\u20e6', 1),\n+        ('\\u20e7', '\\u20e7', 230), ('\\u20e8', '\\u20e8', 220),\n+        ('\\u20e9', '\\u20e9', 230), ('\\u20ea', '\\u20eb', 1),\n+        ('\\u20ec', '\\u20ef', 220), ('\\u20f0', '\\u20f0', 230),\n+        ('\\u2cef', '\\u2cf1', 230), ('\\u2d7f', '\\u2d7f', 9),\n+        ('\\u2de0', '\\u2dff', 230), ('\\u302a', '\\u302a', 218),\n+        ('\\u302b', '\\u302b', 228), ('\\u302c', '\\u302c', 232),\n+        ('\\u302d', '\\u302d', 222), ('\\u302e', '\\u302f', 224),\n+        ('\\u3099', '\\u309a', 8), ('\\ua66f', '\\ua66f', 230),\n+        ('\\ua674', '\\ua67d', 230), ('\\ua69f', '\\ua69f', 230),\n+        ('\\ua6f0', '\\ua6f1', 230), ('\\ua806', '\\ua806', 9),\n+        ('\\ua8c4', '\\ua8c4', 9), ('\\ua8e0', '\\ua8f1', 230),\n+        ('\\ua92b', '\\ua92d', 220), ('\\ua953', '\\ua953', 9),\n+        ('\\ua9b3', '\\ua9b3', 7), ('\\ua9c0', '\\ua9c0', 9),\n+        ('\\uaab0', '\\uaab0', 230), ('\\uaab2', '\\uaab3', 230),\n+        ('\\uaab4', '\\uaab4', 220), ('\\uaab7', '\\uaab8', 230),\n+        ('\\uaabe', '\\uaabf', 230), ('\\uaac1', '\\uaac1', 230),\n+        ('\\uaaf6', '\\uaaf6', 9), ('\\uabed', '\\uabed', 9),\n+        ('\\ufb1e', '\\ufb1e', 26), ('\\ufe20', '\\ufe26', 230),\n+        ('\\U000101fd', '\\U000101fd', 220), ('\\U00010a0d', '\\U00010a0d', 220),\n+        ('\\U00010a0f', '\\U00010a0f', 230), ('\\U00010a38', '\\U00010a38', 230),\n+        ('\\U00010a39', '\\U00010a39', 1), ('\\U00010a3a', '\\U00010a3a', 220),\n+        ('\\U00010a3f', '\\U00010a3f', 9), ('\\U00011046', '\\U00011046', 9),\n+        ('\\U000110b9', '\\U000110b9', 9), ('\\U000110ba', '\\U000110ba', 7),\n+        ('\\U00011100', '\\U00011102', 230), ('\\U00011133', '\\U00011134', 9),\n+        ('\\U000111c0', '\\U000111c0', 9), ('\\U000116b6', '\\U000116b6', 9),\n+        ('\\U000116b7', '\\U000116b7', 7), ('\\U0001d165', '\\U0001d166', 216),\n+        ('\\U0001d167', '\\U0001d169', 1), ('\\U0001d16d', '\\U0001d16d', 226),\n+        ('\\U0001d16e', '\\U0001d172', 216), ('\\U0001d17b', '\\U0001d182', 220),\n+        ('\\U0001d185', '\\U0001d189', 230), ('\\U0001d18a', '\\U0001d18b', 220),\n+        ('\\U0001d1aa', '\\U0001d1ad', 230), ('\\U0001d242', '\\U0001d244', 230)\n+    ];\n     pub fn canonical(c: char, i: &fn(char)) { d(c, i, false); }\n \n     pub fn compatibility(c: char, i: &fn(char)) { d(c, i, true); }\n \n+    pub fn canonical_combining_class(c: char) -> u8 {\n+        bsearch_range_value_table(c, combining_class_table)\n+    }\n+\n     fn d(c: char, i: &fn(char), k: bool) {\n         use iterator::Iterator;\n         if c <= '\\x7f' { i(c); return; }"}]}