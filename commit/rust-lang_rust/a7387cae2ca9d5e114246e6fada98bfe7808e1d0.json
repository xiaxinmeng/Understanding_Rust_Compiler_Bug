{"sha": "a7387cae2ca9d5e114246e6fada98bfe7808e1d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3Mzg3Y2FlMmNhOWQ1ZTExNDI0NmU2ZmFkYTk4YmZlNzgwOGUxZDA=", "commit": {"author": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2021-02-12T14:58:29Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2021-02-12T15:31:16Z"}, "message": "Fix slow tests sometimes failing\n\nIn some situations we reloaded the workspace in the tests after having reported\nto be ready. There's two fixes here:\n1. Add a version to the VFS config and include that version in progress reports,\nso that we don't think we're done prematurely;\n2. Delay status transitions until after changes are applied. Otherwise the last\nchange during loading can potentially trigger a workspace reload, if it contains\ninteresting changes.", "tree": {"sha": "db0fe8d939afaa10929debf317be670f79909c9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db0fe8d939afaa10929debf317be670f79909c9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7387cae2ca9d5e114246e6fada98bfe7808e1d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7387cae2ca9d5e114246e6fada98bfe7808e1d0", "html_url": "https://github.com/rust-lang/rust/commit/a7387cae2ca9d5e114246e6fada98bfe7808e1d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7387cae2ca9d5e114246e6fada98bfe7808e1d0/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dee5aba43a1b45131bf31268431fa71923f2ef2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dee5aba43a1b45131bf31268431fa71923f2ef2a", "html_url": "https://github.com/rust-lang/rust/commit/dee5aba43a1b45131bf31268431fa71923f2ef2a"}], "stats": {"total": 65, "additions": 51, "deletions": 14}, "files": [{"sha": "cf0cd81deef522a33d45a8b8e665ddb0b5be0465", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a7387cae2ca9d5e114246e6fada98bfe7808e1d0/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7387cae2ca9d5e114246e6fada98bfe7808e1d0/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=a7387cae2ca9d5e114246e6fada98bfe7808e1d0", "patch": "@@ -59,7 +59,11 @@ pub fn load_cargo(root: &Path, config: &LoadCargoConfig) -> Result<(AnalysisHost\n     );\n \n     let project_folders = ProjectFolders::new(&[ws], &[], build_data.as_ref());\n-    loader.set_config(vfs::loader::Config { load: project_folders.load, watch: vec![] });\n+    loader.set_config(vfs::loader::Config {\n+        load: project_folders.load,\n+        watch: vec![],\n+        version: 0,\n+    });\n \n     log::debug!(\"crate graph: {:?}\", crate_graph);\n     let host = load(crate_graph, project_folders.source_root_config, &mut vfs, &receiver);\n@@ -79,7 +83,7 @@ fn load(\n     // wait until Vfs has loaded all roots\n     for task in receiver {\n         match task {\n-            vfs::loader::Message::Progress { n_done, n_total } => {\n+            vfs::loader::Message::Progress { n_done, n_total, config_version: _ } => {\n                 if n_done == n_total {\n                     break;\n                 }"}, {"sha": "c3bc8791d4bb51da2d21b2352936cfb7a5dea4c2", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7387cae2ca9d5e114246e6fada98bfe7808e1d0/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7387cae2ca9d5e114246e6fada98bfe7808e1d0/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=a7387cae2ca9d5e114246e6fada98bfe7808e1d0", "patch": "@@ -67,6 +67,7 @@ pub(crate) struct GlobalState {\n     req_queue: ReqQueue,\n     pub(crate) task_pool: Handle<TaskPool<Task>, Receiver<Task>>,\n     pub(crate) loader: Handle<Box<dyn vfs::loader::Handle>, Receiver<vfs::loader::Message>>,\n+    pub(crate) vfs_config_version: u32,\n     pub(crate) flycheck: Vec<FlycheckHandle>,\n     pub(crate) flycheck_sender: Sender<flycheck::Message>,\n     pub(crate) flycheck_receiver: Receiver<flycheck::Message>,\n@@ -120,6 +121,7 @@ impl GlobalState {\n         GlobalState {\n             sender,\n             req_queue: ReqQueue::default(),\n+            vfs_config_version: 0,\n             task_pool,\n             loader,\n             flycheck: Vec::new(),"}, {"sha": "2829d5970e6b502d52706891c6f30d8927574ac8", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a7387cae2ca9d5e114246e6fada98bfe7808e1d0/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7387cae2ca9d5e114246e6fada98bfe7808e1d0/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=a7387cae2ca9d5e114246e6fada98bfe7808e1d0", "patch": "@@ -5,6 +5,7 @@ use std::{\n     time::{Duration, Instant},\n };\n \n+use always_assert::always;\n use crossbeam_channel::{select, Receiver};\n use ide::PrimeCachesProgress;\n use ide::{Canceled, FileId};\n@@ -186,7 +187,7 @@ impl GlobalState {\n             log::info!(\"task queue len: {}\", task_queue_len);\n         }\n \n-        let prev_status = self.status;\n+        let mut new_status = self.status;\n         match event {\n             Event::Lsp(msg) => match msg {\n                 lsp_server::Message::Request(req) => self.on_request(loop_start, req)?,\n@@ -298,22 +299,23 @@ impl GlobalState {\n                                 }\n                             }\n                         }\n-                        vfs::loader::Message::Progress { n_total, n_done } => {\n+                        vfs::loader::Message::Progress { n_total, n_done, config_version } => {\n+                            always!(config_version <= self.vfs_config_version);\n                             if n_total == 0 {\n-                                self.transition(Status::Invalid);\n+                                new_status = Status::Invalid;\n                             } else {\n                                 let state = if n_done == 0 {\n-                                    self.transition(Status::Loading);\n+                                    new_status = Status::Loading;\n                                     Progress::Begin\n                                 } else if n_done < n_total {\n                                     Progress::Report\n                                 } else {\n                                     assert_eq!(n_done, n_total);\n-                                    let status = Status::Ready {\n+                                    new_status = Status::Ready {\n                                         partial: self.config.load_out_dirs_from_check()\n-                                            && self.workspace_build_data.is_none(),\n+                                            && self.workspace_build_data.is_none()\n+                                            || config_version < self.vfs_config_version,\n                                     };\n-                                    self.transition(status);\n                                     Progress::End\n                                 };\n                                 self.report_progress(\n@@ -398,6 +400,10 @@ impl GlobalState {\n         }\n \n         let state_changed = self.process_changes();\n+        let prev_status = self.status;\n+        if prev_status != new_status {\n+            self.transition(new_status);\n+        }\n         let is_ready = matches!(self.status, Status::Ready { .. });\n         if prev_status == Status::Loading && is_ready {\n             for flycheck in &self.flycheck {"}, {"sha": "c07efa330313d7f6cf0e4d47dd41e365e4b0b9c5", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a7387cae2ca9d5e114246e6fada98bfe7808e1d0/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7387cae2ca9d5e114246e6fada98bfe7808e1d0/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=a7387cae2ca9d5e114246e6fada98bfe7808e1d0", "patch": "@@ -50,6 +50,16 @@ impl GlobalState {\n             Status::Loading | Status::NeedsReload => return,\n             Status::Ready { .. } | Status::Invalid => (),\n         }\n+        log::info!(\n+            \"Reloading workspace because of the following changes: {}\",\n+            itertools::join(\n+                changes\n+                    .iter()\n+                    .filter(|(path, kind)| is_interesting(path, *kind))\n+                    .map(|(path, kind)| format!(\"{}/{:?}\", path.display(), kind)),\n+                \", \"\n+            )\n+        );\n         if self.config.cargo_autoreload() {\n             self.fetch_workspaces_request();\n         } else {\n@@ -290,7 +300,12 @@ impl GlobalState {\n             FilesWatcher::Client => vec![],\n             FilesWatcher::Notify => project_folders.watch,\n         };\n-        self.loader.handle.set_config(vfs::loader::Config { load: project_folders.load, watch });\n+        self.vfs_config_version += 1;\n+        self.loader.handle.set_config(vfs::loader::Config {\n+            load: project_folders.load,\n+            watch,\n+            version: self.vfs_config_version,\n+        });\n \n         // Create crate graph from all the workspaces\n         let crate_graph = {"}, {"sha": "f7ae0577d2e2c6b0f118b76d32434e640c425047", "filename": "crates/vfs-notify/src/lib.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a7387cae2ca9d5e114246e6fada98bfe7808e1d0/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7387cae2ca9d5e114246e6fada98bfe7808e1d0/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs-notify%2Fsrc%2Flib.rs?ref=a7387cae2ca9d5e114246e6fada98bfe7808e1d0", "patch": "@@ -86,8 +86,10 @@ impl NotifyActor {\n                             self.watcher = watcher.map(|it| (it, watcher_receiver));\n                         }\n \n+                        let config_version = config.version;\n+\n                         let n_total = config.load.len();\n-                        self.send(loader::Message::Progress { n_total, n_done: 0 });\n+                        self.send(loader::Message::Progress { n_total, n_done: 0, config_version });\n \n                         self.watched_entries.clear();\n \n@@ -98,7 +100,11 @@ impl NotifyActor {\n                             }\n                             let files = self.load_entry(entry, watch);\n                             self.send(loader::Message::Loaded { files });\n-                            self.send(loader::Message::Progress { n_total, n_done: i + 1 });\n+                            self.send(loader::Message::Progress {\n+                                n_total,\n+                                n_done: i + 1,\n+                                config_version,\n+                            });\n                         }\n                     }\n                     Message::Invalidate(path) => {"}, {"sha": "473b29fcb32fd2f55bf3450b176d12f78f52a677", "filename": "crates/vfs/src/loader.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a7387cae2ca9d5e114246e6fada98bfe7808e1d0/crates%2Fvfs%2Fsrc%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7387cae2ca9d5e114246e6fada98bfe7808e1d0/crates%2Fvfs%2Fsrc%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Floader.rs?ref=a7387cae2ca9d5e114246e6fada98bfe7808e1d0", "patch": "@@ -32,6 +32,9 @@ pub struct Directories {\n /// [`Handle`]'s configuration.\n #[derive(Debug)]\n pub struct Config {\n+    /// Version number to associate progress updates to the right config\n+    /// version.\n+    pub version: u32,\n     /// Set of initially loaded files.\n     pub load: Vec<Entry>,\n     /// Index of watched entries in `load`.\n@@ -45,7 +48,7 @@ pub enum Message {\n     /// Indicate a gradual progress.\n     ///\n     /// This is supposed to be the number of loaded files.\n-    Progress { n_total: usize, n_done: usize },\n+    Progress { n_total: usize, n_done: usize, config_version: u32 },\n     /// The handle loaded the following files' content.\n     Loaded { files: Vec<(AbsPathBuf, Option<Vec<u8>>)> },\n }\n@@ -196,10 +199,11 @@ impl fmt::Debug for Message {\n             Message::Loaded { files } => {\n                 f.debug_struct(\"Loaded\").field(\"n_files\", &files.len()).finish()\n             }\n-            Message::Progress { n_total, n_done } => f\n+            Message::Progress { n_total, n_done, config_version } => f\n                 .debug_struct(\"Progress\")\n                 .field(\"n_total\", n_total)\n                 .field(\"n_done\", n_done)\n+                .field(\"config_version\", config_version)\n                 .finish(),\n         }\n     }"}]}