{"sha": "7ea4bce1b292d455c313f914b3aa3051293c502b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYTRiY2UxYjI5MmQ0NTVjMzEzZjkxNGIzYWEzMDUxMjkzYzUwMmI=", "commit": {"author": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-01-24T14:22:00Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-02-07T17:28:10Z"}, "message": "Add impl trait lowering mode", "tree": {"sha": "9dffb37e0cc74135d0c92e2ee9a714ed2ff4d5be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dffb37e0cc74135d0c92e2ee9a714ed2ff4d5be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ea4bce1b292d455c313f914b3aa3051293c502b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ea4bce1b292d455c313f914b3aa3051293c502b", "html_url": "https://github.com/rust-lang/rust/commit/7ea4bce1b292d455c313f914b3aa3051293c502b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ea4bce1b292d455c313f914b3aa3051293c502b/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22a65b11b3a69b3dae561b34c6b28cb2107169d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/22a65b11b3a69b3dae561b34c6b28cb2107169d1", "html_url": "https://github.com/rust-lang/rust/commit/22a65b11b3a69b3dae561b34c6b28cb2107169d1"}], "stats": {"total": 181, "additions": 141, "deletions": 40}, "files": [{"sha": "fda31d5177c39f09b32d511570d61ef1aa0ec0ea", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7ea4bce1b292d455c313f914b3aa3051293c502b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea4bce1b292d455c313f914b3aa3051293c502b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=7ea4bce1b292d455c313f914b3aa3051293c502b", "patch": "@@ -733,8 +733,7 @@ impl Local {\n         let ty = infer[self.pat_id].clone();\n         let resolver = def.resolver(db);\n         let krate = def.module(db).krate;\n-        let ctx = hir_ty::TyLoweringContext { db, resolver: &resolver };\n-        let environment = TraitEnvironment::lower(&ctx);\n+        let environment = TraitEnvironment::lower(db, &resolver);\n         Type { krate, ty: InEnvironment { value: ty, environment } }\n     }\n \n@@ -790,8 +789,12 @@ impl ImplBlock {\n     pub fn target_ty(&self, db: &impl HirDatabase) -> Type {\n         let impl_data = db.impl_data(self.id);\n         let resolver = self.id.resolver(db);\n-        let ctx = hir_ty::TyLoweringContext { db, resolver: &resolver };\n-        let environment = TraitEnvironment::lower(&ctx);\n+        let ctx = hir_ty::TyLoweringContext {\n+            db,\n+            resolver: &resolver,\n+            impl_trait_mode: hir_ty::ImplTraitLoweringMode::Disallowed,\n+        };\n+        let environment = TraitEnvironment::lower(db, &resolver);\n         let ty = Ty::from_hir(&ctx, &impl_data.target_type);\n         Type {\n             krate: self.id.lookup(db).container.module(db).krate,\n@@ -846,8 +849,7 @@ pub struct Type {\n impl Type {\n     fn new(db: &impl HirDatabase, krate: CrateId, lexical_env: impl HasResolver, ty: Ty) -> Type {\n         let resolver = lexical_env.resolver(db);\n-        let ctx = hir_ty::TyLoweringContext { db, resolver: &resolver };\n-        let environment = TraitEnvironment::lower(&ctx);\n+        let environment = TraitEnvironment::lower(db, &resolver);\n         Type { krate, ty: InEnvironment { value: ty, environment } }\n     }\n "}, {"sha": "bb9a35c5d1224de747bca1bf29fb4d52e0bb6c0e", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ea4bce1b292d455c313f914b3aa3051293c502b/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea4bce1b292d455c313f914b3aa3051293c502b/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=7ea4bce1b292d455c313f914b3aa3051293c502b", "patch": "@@ -179,8 +179,7 @@ impl SourceAnalyzer {\n     }\n \n     fn trait_env(&self, db: &impl HirDatabase) -> Arc<TraitEnvironment> {\n-        let ctx = hir_ty::TyLoweringContext { db, resolver: &self.resolver };\n-        TraitEnvironment::lower(&ctx)\n+        TraitEnvironment::lower(db, &self.resolver)\n     }\n \n     pub fn type_of(&self, db: &impl HirDatabase, expr: &ast::Expr) -> Option<Type> {"}, {"sha": "b4a3e16755ca8c616c55413f609bad89818778a6", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7ea4bce1b292d455c313f914b3aa3051293c502b/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea4bce1b292d455c313f914b3aa3051293c502b/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=7ea4bce1b292d455c313f914b3aa3051293c502b", "patch": "@@ -42,7 +42,9 @@ use super::{\n     ApplicationTy, GenericPredicate, InEnvironment, ProjectionTy, Substs, TraitEnvironment,\n     TraitRef, Ty, TypeCtor, TypeWalk, Uncertain,\n };\n-use crate::{db::HirDatabase, infer::diagnostics::InferenceDiagnostic};\n+use crate::{\n+    db::HirDatabase, infer::diagnostics::InferenceDiagnostic, lower::ImplTraitLoweringMode,\n+};\n \n pub(crate) use unify::unify;\n \n@@ -215,13 +217,12 @@ struct InferenceContext<'a, D: HirDatabase> {\n \n impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     fn new(db: &'a D, owner: DefWithBodyId, resolver: Resolver) -> Self {\n-        let ctx = crate::lower::TyLoweringContext { db, resolver: &resolver };\n         InferenceContext {\n             result: InferenceResult::default(),\n             table: unify::InferenceTable::new(),\n             obligations: Vec::default(),\n             return_ty: Ty::Unknown, // set in collect_fn_signature\n-            trait_env: TraitEnvironment::lower(&ctx),\n+            trait_env: TraitEnvironment::lower(db, &resolver),\n             coerce_unsized_map: Self::init_coerce_unsized_map(db, &resolver),\n             db,\n             owner,\n@@ -272,14 +273,26 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         self.result.diagnostics.push(diagnostic);\n     }\n \n-    fn make_ty(&mut self, type_ref: &TypeRef) -> Ty {\n+    fn make_ty_with_mode(\n+        &mut self,\n+        type_ref: &TypeRef,\n+        impl_trait_mode: ImplTraitLoweringMode,\n+    ) -> Ty {\n         // FIXME use right resolver for block\n-        let ctx = crate::lower::TyLoweringContext { db: self.db, resolver: &self.resolver };\n+        let ctx = crate::lower::TyLoweringContext {\n+            db: self.db,\n+            resolver: &self.resolver,\n+            impl_trait_mode,\n+        };\n         let ty = Ty::from_hir(&ctx, type_ref);\n         let ty = self.insert_type_vars(ty);\n         self.normalize_associated_types_in(ty)\n     }\n \n+    fn make_ty(&mut self, type_ref: &TypeRef) -> Ty {\n+        self.make_ty_with_mode(type_ref, ImplTraitLoweringMode::Disallowed)\n+    }\n+\n     /// Replaces `impl Trait` in `ty` by type variables and obligations for\n     /// those variables. This is done for function arguments when calling a\n     /// function, and for return types when inside the function body, i.e. in\n@@ -444,7 +457,11 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             None => return (Ty::Unknown, None),\n         };\n         let resolver = &self.resolver;\n-        let ctx = crate::lower::TyLoweringContext { db: self.db, resolver: &self.resolver };\n+        let ctx = crate::lower::TyLoweringContext {\n+            db: self.db,\n+            resolver: &self.resolver,\n+            impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n+        };\n         // FIXME: this should resolve assoc items as well, see this example:\n         // https://play.rust-lang.org/?gist=087992e9e22495446c01c0d4e2d69521\n         match resolver.resolve_path_in_type_ns_fully(self.db, path.mod_path()) {\n@@ -471,11 +488,11 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     fn collect_fn(&mut self, data: &FunctionData) {\n         let body = Arc::clone(&self.body); // avoid borrow checker problem\n         for (type_ref, pat) in data.params.iter().zip(body.params.iter()) {\n-            let ty = self.make_ty(type_ref);\n+            let ty = self.make_ty_with_mode(type_ref, ImplTraitLoweringMode::Opaque);\n \n             self.infer_pat(*pat, &ty, BindingMode::default());\n         }\n-        let return_ty = self.make_ty(&data.ret_type);\n+        let return_ty = self.make_ty_with_mode(&data.ret_type, ImplTraitLoweringMode::Placeholder);\n         self.return_ty = self.insert_vars_for_impl_trait(return_ty);\n     }\n "}, {"sha": "02fc99288879332dc1a89aa9795b4602877da571", "filename": "crates/ra_hir_ty/src/infer/path.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7ea4bce1b292d455c313f914b3aa3051293c502b/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea4bce1b292d455c313f914b3aa3051293c502b/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=7ea4bce1b292d455c313f914b3aa3051293c502b", "patch": "@@ -9,7 +9,10 @@ use hir_def::{\n };\n use hir_expand::name::Name;\n \n-use crate::{db::HirDatabase, method_resolution, Substs, Ty, TypeWalk, ValueTyDefId};\n+use crate::{\n+    db::HirDatabase, lower::ImplTraitLoweringMode, method_resolution, Substs, Ty, TypeWalk,\n+    ValueTyDefId,\n+};\n \n use super::{ExprOrPatId, InferenceContext, TraitRef};\n \n@@ -39,7 +42,11 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             }\n             let ty = self.make_ty(type_ref);\n             let remaining_segments_for_ty = path.segments().take(path.segments().len() - 1);\n-            let ctx = crate::lower::TyLoweringContext { db: self.db, resolver: &resolver };\n+            let ctx = crate::lower::TyLoweringContext {\n+                db: self.db,\n+                resolver: &resolver,\n+                impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n+            };\n             let ty = Ty::from_type_relative_path(&ctx, ty, remaining_segments_for_ty);\n             self.resolve_ty_assoc_item(\n                 ty,\n@@ -74,7 +81,11 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         if let Some(self_subst) = self_subst {\n             ty = ty.subst(&self_subst);\n         }\n-        let ctx = crate::lower::TyLoweringContext { db: self.db, resolver: &self.resolver };\n+        let ctx = crate::lower::TyLoweringContext {\n+            db: self.db,\n+            resolver: &self.resolver,\n+            impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n+        };\n         let substs = Ty::substs_from_path(&ctx, path, typable);\n         let ty = ty.subst(&substs);\n         Some(ty)\n@@ -100,7 +111,11 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             (TypeNs::TraitId(trait_), true) => {\n                 let segment =\n                     remaining_segments.last().expect(\"there should be at least one segment here\");\n-                let ctx = crate::lower::TyLoweringContext { db: self.db, resolver: &self.resolver };\n+                let ctx = crate::lower::TyLoweringContext {\n+                    db: self.db,\n+                    resolver: &self.resolver,\n+                    impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n+                };\n                 let trait_ref =\n                     TraitRef::from_resolved_path(&ctx, trait_.into(), resolved_segment, None);\n                 self.resolve_trait_assoc_item(trait_ref, segment, id)\n@@ -112,7 +127,11 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 // as Iterator>::Item::default`)\n                 let remaining_segments_for_ty =\n                     remaining_segments.take(remaining_segments.len() - 1);\n-                let ctx = crate::lower::TyLoweringContext { db: self.db, resolver: &self.resolver };\n+                let ctx = crate::lower::TyLoweringContext {\n+                    db: self.db,\n+                    resolver: &self.resolver,\n+                    impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n+                };\n                 let ty = Ty::from_partly_resolved_hir_path(\n                     &ctx,\n                     def,"}, {"sha": "c64b81f98482f1f8991c1993ab2ec21c9b020283", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ea4bce1b292d455c313f914b3aa3051293c502b/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea4bce1b292d455c313f914b3aa3051293c502b/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=7ea4bce1b292d455c313f914b3aa3051293c502b", "patch": "@@ -60,7 +60,9 @@ use display::{HirDisplay, HirFormatter};\n pub use autoderef::autoderef;\n pub use infer::{do_infer_query, InferTy, InferenceResult};\n pub use lower::CallableDef;\n-pub use lower::{callable_item_sig, TyDefId, TyLoweringContext, ValueTyDefId};\n+pub use lower::{\n+    callable_item_sig, ImplTraitLoweringMode, TyDefId, TyLoweringContext, ValueTyDefId,\n+};\n pub use traits::{InEnvironment, Obligation, ProjectionPredicate, TraitEnvironment};\n \n /// A type constructor or type name: this might be something like the primitive"}, {"sha": "3d242122397286a09c9bfd7d926bb5d36cfd6075", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 80, "deletions": 18, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/7ea4bce1b292d455c313f914b3aa3051293c502b/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ea4bce1b292d455c313f914b3aa3051293c502b/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=7ea4bce1b292d455c313f914b3aa3051293c502b", "patch": "@@ -35,6 +35,14 @@ use crate::{\n pub struct TyLoweringContext<'a, DB: HirDatabase> {\n     pub db: &'a DB,\n     pub resolver: &'a Resolver,\n+    pub impl_trait_mode: ImplTraitLoweringMode,\n+}\n+\n+#[derive(Clone, Debug)]\n+pub enum ImplTraitLoweringMode {\n+    Opaque,\n+    Placeholder,\n+    Disallowed,\n }\n \n impl Ty {\n@@ -484,7 +492,11 @@ pub(crate) fn field_types_query(\n         VariantId::EnumVariantId(it) => it.parent.resolver(db),\n     };\n     let mut res = ArenaMap::default();\n-    let ctx = TyLoweringContext { db, resolver: &resolver };\n+    let ctx = TyLoweringContext {\n+        db,\n+        resolver: &resolver,\n+        impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n+    };\n     for (field_id, field_data) in var_data.fields().iter() {\n         res.insert(field_id, Ty::from_hir(&ctx, &field_data.type_ref))\n     }\n@@ -505,7 +517,11 @@ pub(crate) fn generic_predicates_for_param_query(\n     param_idx: u32,\n ) -> Arc<[GenericPredicate]> {\n     let resolver = def.resolver(db);\n-    let ctx = TyLoweringContext { db, resolver: &resolver };\n+    let ctx = TyLoweringContext {\n+        db,\n+        resolver: &resolver,\n+        impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n+    };\n     resolver\n         .where_predicates_in_scope()\n         // we have to filter out all other predicates *first*, before attempting to lower them\n@@ -524,11 +540,12 @@ pub(crate) fn generic_predicates_for_param_recover(\n }\n \n impl TraitEnvironment {\n-    pub fn lower(ctx: &TyLoweringContext<'_, impl HirDatabase>) -> Arc<TraitEnvironment> {\n-        let predicates = ctx\n-            .resolver\n+    pub fn lower(db: &impl HirDatabase, resolver: &Resolver) -> Arc<TraitEnvironment> {\n+        let ctx =\n+            TyLoweringContext { db, resolver, impl_trait_mode: ImplTraitLoweringMode::Disallowed };\n+        let predicates = resolver\n             .where_predicates_in_scope()\n-            .flat_map(|pred| GenericPredicate::from_where_predicate(ctx, pred))\n+            .flat_map(|pred| GenericPredicate::from_where_predicate(&ctx, pred))\n             .collect::<Vec<_>>();\n \n         Arc::new(TraitEnvironment { predicates })\n@@ -541,7 +558,11 @@ pub(crate) fn generic_predicates_query(\n     def: GenericDefId,\n ) -> Arc<[GenericPredicate]> {\n     let resolver = def.resolver(db);\n-    let ctx = TyLoweringContext { db, resolver: &resolver };\n+    let ctx = TyLoweringContext {\n+        db,\n+        resolver: &resolver,\n+        impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n+    };\n     resolver\n         .where_predicates_in_scope()\n         .flat_map(|pred| GenericPredicate::from_where_predicate(&ctx, pred))\n@@ -551,7 +572,11 @@ pub(crate) fn generic_predicates_query(\n /// Resolve the default type params from generics\n pub(crate) fn generic_defaults_query(db: &impl HirDatabase, def: GenericDefId) -> Substs {\n     let resolver = def.resolver(db);\n-    let ctx = TyLoweringContext { db, resolver: &resolver };\n+    let ctx = TyLoweringContext {\n+        db,\n+        resolver: &resolver,\n+        impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n+    };\n     let generic_params = generics(db, def.into());\n \n     let defaults = generic_params\n@@ -565,9 +590,18 @@ pub(crate) fn generic_defaults_query(db: &impl HirDatabase, def: GenericDefId) -\n fn fn_sig_for_fn(db: &impl HirDatabase, def: FunctionId) -> FnSig {\n     let data = db.function_data(def);\n     let resolver = def.resolver(db);\n-    let ctx = TyLoweringContext { db, resolver: &resolver };\n-    let params = data.params.iter().map(|tr| Ty::from_hir(&ctx, tr)).collect::<Vec<_>>();\n-    let ret = Ty::from_hir(&ctx, &data.ret_type);\n+    let ctx_params = TyLoweringContext {\n+        db,\n+        resolver: &resolver,\n+        impl_trait_mode: ImplTraitLoweringMode::Placeholder,\n+    };\n+    let params = data.params.iter().map(|tr| Ty::from_hir(&ctx_params, tr)).collect::<Vec<_>>();\n+    let ctx_ret = TyLoweringContext {\n+        db,\n+        resolver: &resolver,\n+        impl_trait_mode: ImplTraitLoweringMode::Opaque,\n+    };\n+    let ret = Ty::from_hir(&ctx_ret, &data.ret_type);\n     FnSig::from_params_and_return(params, ret)\n }\n \n@@ -583,7 +617,11 @@ fn type_for_fn(db: &impl HirDatabase, def: FunctionId) -> Ty {\n fn type_for_const(db: &impl HirDatabase, def: ConstId) -> Ty {\n     let data = db.const_data(def);\n     let resolver = def.resolver(db);\n-    let ctx = TyLoweringContext { db, resolver: &resolver };\n+    let ctx = TyLoweringContext {\n+        db,\n+        resolver: &resolver,\n+        impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n+    };\n \n     Ty::from_hir(&ctx, &data.type_ref)\n }\n@@ -592,7 +630,11 @@ fn type_for_const(db: &impl HirDatabase, def: ConstId) -> Ty {\n fn type_for_static(db: &impl HirDatabase, def: StaticId) -> Ty {\n     let data = db.static_data(def);\n     let resolver = def.resolver(db);\n-    let ctx = TyLoweringContext { db, resolver: &resolver };\n+    let ctx = TyLoweringContext {\n+        db,\n+        resolver: &resolver,\n+        impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n+    };\n \n     Ty::from_hir(&ctx, &data.type_ref)\n }\n@@ -612,7 +654,11 @@ fn fn_sig_for_struct_constructor(db: &impl HirDatabase, def: StructId) -> FnSig\n     let struct_data = db.struct_data(def.into());\n     let fields = struct_data.variant_data.fields();\n     let resolver = def.resolver(db);\n-    let ctx = TyLoweringContext { db, resolver: &resolver };\n+    let ctx = TyLoweringContext {\n+        db,\n+        resolver: &resolver,\n+        impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n+    };\n     let params =\n         fields.iter().map(|(_, field)| Ty::from_hir(&ctx, &field.type_ref)).collect::<Vec<_>>();\n     let ret = type_for_adt(db, def.into());\n@@ -635,7 +681,11 @@ fn fn_sig_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariantId\n     let var_data = &enum_data.variants[def.local_id];\n     let fields = var_data.variant_data.fields();\n     let resolver = def.parent.resolver(db);\n-    let ctx = TyLoweringContext { db, resolver: &resolver };\n+    let ctx = TyLoweringContext {\n+        db,\n+        resolver: &resolver,\n+        impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n+    };\n     let params =\n         fields.iter().map(|(_, field)| Ty::from_hir(&ctx, &field.type_ref)).collect::<Vec<_>>();\n     let generics = generics(db, def.parent.into());\n@@ -664,7 +714,11 @@ fn type_for_adt(db: &impl HirDatabase, adt: AdtId) -> Ty {\n fn type_for_type_alias(db: &impl HirDatabase, t: TypeAliasId) -> Ty {\n     let generics = generics(db, t.into());\n     let resolver = t.resolver(db);\n-    let ctx = TyLoweringContext { db, resolver: &resolver };\n+    let ctx = TyLoweringContext {\n+        db,\n+        resolver: &resolver,\n+        impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n+    };\n     let type_ref = &db.type_alias_data(t).type_ref;\n     let substs = Substs::identity(&generics);\n     let inner = Ty::from_hir(&ctx, type_ref.as_ref().unwrap_or(&TypeRef::Error));\n@@ -747,7 +801,11 @@ pub(crate) fn value_ty_query(db: &impl HirDatabase, def: ValueTyDefId) -> Ty {\n pub(crate) fn impl_self_ty_query(db: &impl HirDatabase, impl_id: ImplId) -> Ty {\n     let impl_data = db.impl_data(impl_id);\n     let resolver = impl_id.resolver(db);\n-    let ctx = TyLoweringContext { db, resolver: &resolver };\n+    let ctx = TyLoweringContext {\n+        db,\n+        resolver: &resolver,\n+        impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n+    };\n     Ty::from_hir(&ctx, &impl_data.target_type)\n }\n \n@@ -762,7 +820,11 @@ pub(crate) fn impl_self_ty_recover(\n pub(crate) fn impl_trait_query(db: &impl HirDatabase, impl_id: ImplId) -> Option<TraitRef> {\n     let impl_data = db.impl_data(impl_id);\n     let resolver = impl_id.resolver(db);\n-    let ctx = TyLoweringContext { db, resolver: &resolver };\n+    let ctx = TyLoweringContext {\n+        db,\n+        resolver: &resolver,\n+        impl_trait_mode: ImplTraitLoweringMode::Disallowed,\n+    };\n     let self_ty = db.impl_self_ty(impl_id);\n     let target_trait = impl_data.target_trait.as_ref()?;\n     TraitRef::from_hir(&ctx, target_trait, Some(self_ty.clone()))"}]}