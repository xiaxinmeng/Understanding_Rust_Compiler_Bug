{"sha": "f6dc48fe3a0ec30b6db132b6848f6908f987af14", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ZGM0OGZlM2EwZWMzMGI2ZGIxMzJiNjg0OGY2OTA4Zjk4N2FmMTQ=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-11T20:06:30Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-11T20:25:47Z"}, "message": "new lint for \"let x = EXPR; x\" at the end of functions (fixes #104)", "tree": {"sha": "ab62c1a3a011b6ad33e558a4e9da023bd4cdacce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab62c1a3a011b6ad33e558a4e9da023bd4cdacce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6dc48fe3a0ec30b6db132b6848f6908f987af14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6dc48fe3a0ec30b6db132b6848f6908f987af14", "html_url": "https://github.com/rust-lang/rust/commit/f6dc48fe3a0ec30b6db132b6848f6908f987af14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6dc48fe3a0ec30b6db132b6848f6908f987af14/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02c0cafa146759f908201467d0a758f8f3d75325", "url": "https://api.github.com/repos/rust-lang/rust/commits/02c0cafa146759f908201467d0a758f8f3d75325", "html_url": "https://github.com/rust-lang/rust/commit/02c0cafa146759f908201467d0a758f8f3d75325"}], "stats": {"total": 84, "additions": 77, "deletions": 7}, "files": [{"sha": "1176841ca201cdff012bc561c733709fe07681a3", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f6dc48fe3a0ec30b6db132b6848f6908f987af14/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/f6dc48fe3a0ec30b6db132b6848f6908f987af14/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=f6dc48fe3a0ec30b6db132b6848f6908f987af14", "patch": "@@ -31,6 +31,7 @@ Lints included in this crate:\n  - `zero_width_space`: Warns on encountering a unicode zero-width space\n  - `string_add_assign`: Warns on `x = x + ..` where `x` is a `String` and suggests using `push_str(..)` instead.\n  - `needless_return`: Warns on using `return expr;` when a simple `expr` would suffice.\n+ - `let_and_return`: Warns on doing `let x = expr; x` at the end of a function.\n  - `option_unwrap_used`: Warns when `Option.unwrap()` is used, and suggests `.expect()`.\n  - `result_unwrap_used`: Warns when `Result.unwrap()` is used (silent by default).\n  - `modulo_one`: Warns on taking a number modulo 1, which always has a result of 0."}, {"sha": "9bfc99972c9698e80c24c72e901e25e9c81c94ee", "filename": "src/returns.rs", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f6dc48fe3a0ec30b6db132b6848f6908f987af14/src%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6dc48fe3a0ec30b6db132b6848f6908f987af14/src%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freturns.rs?ref=f6dc48fe3a0ec30b6db132b6848f6908f987af14", "patch": "@@ -1,13 +1,15 @@\n use syntax::ast;\n use syntax::ast::*;\n-use syntax::codemap::Span;\n+use syntax::codemap::{Span, Spanned};\n use syntax::visit::FnKind;\n-use rustc::lint::{Context, LintPass, LintArray};\n+use rustc::lint::{Context, LintPass, LintArray, Level};\n \n-use utils::{span_lint, snippet};\n+use utils::{span_lint, snippet, match_path};\n \n declare_lint!(pub NEEDLESS_RETURN, Warn,\n               \"Warn on using a return statement where an expression would be enough\");\n+declare_lint!(pub LET_AND_RETURN, Warn,\n+              \"Warn on creating a let-binding and then immediately returning it\");\n \n #[derive(Copy,Clone)]\n pub struct ReturnPass;\n@@ -20,7 +22,7 @@ impl ReturnPass {\n         } else if let Some(stmt) = block.stmts.last() {\n             if let StmtSemi(ref expr, _) = stmt.node {\n                 if let ExprRet(Some(ref inner)) = expr.node {\n-                    self.emit_lint(cx, (expr.span, inner.span));\n+                    self.emit_return_lint(cx, (expr.span, inner.span));\n                 }\n             }\n         }\n@@ -31,7 +33,7 @@ impl ReturnPass {\n         match expr.node {\n             // simple return is always \"bad\"\n             ExprRet(Some(ref inner)) => {\n-                self.emit_lint(cx, (expr.span, inner.span));\n+                self.emit_return_lint(cx, (expr.span, inner.span));\n             }\n             // a whole block? check it!\n             ExprBlock(ref block) => {\n@@ -55,21 +57,54 @@ impl ReturnPass {\n         }\n     }\n \n-    fn emit_lint(&mut self, cx: &Context, spans: (Span, Span)) {\n+    fn emit_return_lint(&mut self, cx: &Context, spans: (Span, Span)) {\n         span_lint(cx, NEEDLESS_RETURN, spans.0, &format!(\n             \"unneeded return statement. Consider using {} \\\n              without the trailing semicolon\",\n             snippet(cx, spans.1, \"..\")))\n     }\n+\n+    // Check for \"let x = EXPR; x\"\n+    fn check_let_return(&mut self, cx: &Context, block: &Block) {\n+        // we need both a let-binding stmt and an expr\n+        if let Some(stmt) = block.stmts.last() {\n+            if let StmtDecl(ref decl, _) = stmt.node {\n+                if let DeclLocal(ref local) = decl.node {\n+                    if let Some(ref initexpr) = local.init {\n+                        if let PatIdent(_, Spanned { node: id, .. }, _) = local.pat.node {\n+                            if let Some(ref retexpr) = block.expr {\n+                                if let ExprPath(_, ref path) = retexpr.node {\n+                                    if match_path(path, &[&*id.name.as_str()]) {\n+                                        self.emit_let_lint(cx, retexpr.span, initexpr.span);\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    fn emit_let_lint(&mut self, cx: &Context, lint_span: Span, note_span: Span) {\n+        span_lint(cx, LET_AND_RETURN, lint_span,\n+                  \"returning the result of a let binding. \\\n+                   Consider returning the expression directly.\");\n+        if cx.current_level(LET_AND_RETURN) != Level::Allow {\n+            cx.sess().span_note(note_span,\n+                                \"this expression can be directly returned\");\n+        }\n+    }\n }\n \n impl LintPass for ReturnPass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(NEEDLESS_RETURN)\n+        lint_array!(NEEDLESS_RETURN, LET_AND_RETURN)\n     }\n \n     fn check_fn(&mut self, cx: &Context, _: FnKind, _: &FnDecl,\n                 block: &Block, _: Span, _: ast::NodeId) {\n         self.check_block_return(cx, block);\n+        self.check_let_return(cx, block);\n     }\n }"}, {"sha": "8ea4653ef0f2963b93a963baf922084d875347d8", "filename": "tests/compile-fail/let_return.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f6dc48fe3a0ec30b6db132b6848f6908f987af14/tests%2Fcompile-fail%2Flet_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6dc48fe3a0ec30b6db132b6848f6908f987af14/tests%2Fcompile-fail%2Flet_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Flet_return.rs?ref=f6dc48fe3a0ec30b6db132b6848f6908f987af14", "patch": "@@ -0,0 +1,34 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(let_and_return)]\n+\n+fn test() -> i32 {\n+    let _y = 0; // no warning\n+    let x = 5;   //~NOTE\n+    x            //~ERROR:\n+}\n+\n+fn test_nowarn_1() -> i32 {\n+    let mut x = 5;\n+    x += 1;\n+    x\n+}\n+\n+fn test_nowarn_2() -> i32 {\n+    let x = 5;\n+    x + 1\n+}\n+\n+fn test_nowarn_3() -> (i32, i32) {\n+    // this should technically warn, but we do not compare complex patterns\n+    let (x, y) = (5, 9);\n+    (x, y)\n+}\n+\n+fn main() {\n+    test();\n+    test_nowarn_1();\n+    test_nowarn_2();\n+    test_nowarn_3();\n+}"}]}