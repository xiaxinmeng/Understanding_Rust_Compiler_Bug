{"sha": "65c0e68bf339bf3fdfb9f6b790f90aa30cd8dd93", "node_id": "C_kwDOAAsO6NoAKDY1YzBlNjhiZjMzOWJmM2ZkZmI5ZjZiNzkwZjkwYWEzMGNkOGRkOTM", "commit": {"author": {"name": "Rageking8", "email": "tomleetyt@gmail.com", "date": "2022-10-05T13:54:59Z"}, "committer": {"name": "Rageking8", "email": "tomleetyt@gmail.com", "date": "2022-10-05T14:22:59Z"}, "message": "add test for issue 82633", "tree": {"sha": "deedf88361c0a1a0389e5ae5bbb58b6fd802df66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/deedf88361c0a1a0389e5ae5bbb58b6fd802df66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65c0e68bf339bf3fdfb9f6b790f90aa30cd8dd93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65c0e68bf339bf3fdfb9f6b790f90aa30cd8dd93", "html_url": "https://github.com/rust-lang/rust/commit/65c0e68bf339bf3fdfb9f6b790f90aa30cd8dd93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65c0e68bf339bf3fdfb9f6b790f90aa30cd8dd93/comments", "author": {"login": "Rageking8", "id": 106309953, "node_id": "U_kgDOBlYpQQ", "avatar_url": "https://avatars.githubusercontent.com/u/106309953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rageking8", "html_url": "https://github.com/Rageking8", "followers_url": "https://api.github.com/users/Rageking8/followers", "following_url": "https://api.github.com/users/Rageking8/following{/other_user}", "gists_url": "https://api.github.com/users/Rageking8/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rageking8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rageking8/subscriptions", "organizations_url": "https://api.github.com/users/Rageking8/orgs", "repos_url": "https://api.github.com/users/Rageking8/repos", "events_url": "https://api.github.com/users/Rageking8/events{/privacy}", "received_events_url": "https://api.github.com/users/Rageking8/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Rageking8", "id": 106309953, "node_id": "U_kgDOBlYpQQ", "avatar_url": "https://avatars.githubusercontent.com/u/106309953?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rageking8", "html_url": "https://github.com/Rageking8", "followers_url": "https://api.github.com/users/Rageking8/followers", "following_url": "https://api.github.com/users/Rageking8/following{/other_user}", "gists_url": "https://api.github.com/users/Rageking8/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rageking8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rageking8/subscriptions", "organizations_url": "https://api.github.com/users/Rageking8/orgs", "repos_url": "https://api.github.com/users/Rageking8/repos", "events_url": "https://api.github.com/users/Rageking8/events{/privacy}", "received_events_url": "https://api.github.com/users/Rageking8/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2", "html_url": "https://github.com/rust-lang/rust/commit/dd8c3a80dd2e5a0b62c3ef77511f3296070f78e2"}], "stats": {"total": 173, "additions": 173, "deletions": 0}, "files": [{"sha": "8cfa0291229bd7f4c0d70b2bca4a243be7547ef1", "filename": "src/test/ui/closures/closure-return-type-must-be-sized.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/65c0e68bf339bf3fdfb9f6b790f90aa30cd8dd93/src%2Ftest%2Fui%2Fclosures%2Fclosure-return-type-must-be-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c0e68bf339bf3fdfb9f6b790f90aa30cd8dd93/src%2Ftest%2Fui%2Fclosures%2Fclosure-return-type-must-be-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-return-type-must-be-sized.rs?ref=65c0e68bf339bf3fdfb9f6b790f90aa30cd8dd93", "patch": "@@ -0,0 +1,74 @@\n+#![feature(unboxed_closures)]\n+\n+trait A {\n+    fn a() where Self: Sized;\n+}\n+\n+mod a {\n+    use crate::A;\n+\n+    pub fn foo<F: FnOnce<()>>() where F::Output: A {\n+        F::Output::a()\n+    }\n+\n+    pub fn bar<F: FnOnce() -> R, R: ?Sized>() {}\n+\n+    pub fn baz<F: FnOnce<()>>() where F::Output: A, F::Output: Sized {\n+        F::Output::a()\n+    }\n+}\n+\n+mod b {\n+    use crate::A;\n+\n+    pub fn foo<F: Fn<()>>() where F::Output: A {\n+        F::Output::a()\n+    }\n+\n+    pub fn bar<F: Fn() -> R, R: ?Sized>() {}\n+\n+    pub fn baz<F: Fn<()>>() where F::Output: A, F::Output: Sized {\n+        F::Output::a()\n+    }\n+}\n+\n+mod c {\n+    use crate::A;\n+\n+    pub fn foo<F: FnMut<()>>() where F::Output: A {\n+        F::Output::a()\n+    }\n+\n+    pub fn bar<F: FnMut() -> R, R: ?Sized>() {}\n+\n+    pub fn baz<F: FnMut<()>>() where F::Output: A, F::Output: Sized {\n+        F::Output::a()\n+    }\n+}\n+\n+impl A for Box<dyn A> {\n+    fn a() {}\n+}\n+\n+fn main() {\n+    a::foo::<fn() -> dyn A>();         //~ ERROR E0277\n+    a::bar::<fn() -> dyn A, _>();      //~ ERROR E0277\n+    a::baz::<fn() -> dyn A>();         //~ ERROR E0277\n+    a::foo::<fn() -> Box<dyn A>>();    //  ok\n+    a::bar::<fn() -> Box<dyn A>, _>(); //  ok\n+    a::baz::<fn() -> Box<dyn A>>();    //  ok\n+\n+    b::foo::<fn() -> dyn A>();         //~ ERROR E0277\n+    b::bar::<fn() -> dyn A, _>();      //~ ERROR E0277\n+    b::baz::<fn() -> dyn A>();         //~ ERROR E0277\n+    b::foo::<fn() -> Box<dyn A>>();    //  ok\n+    b::bar::<fn() -> Box<dyn A>, _>(); //  ok\n+    b::baz::<fn() -> Box<dyn A>>();    //  ok\n+\n+    c::foo::<fn() -> dyn A>();         //~ ERROR E0277\n+    c::bar::<fn() -> dyn A, _>();      //~ ERROR E0277\n+    c::baz::<fn() -> dyn A>();         //~ ERROR E0277\n+    c::foo::<fn() -> Box<dyn A>>();    //  ok\n+    c::bar::<fn() -> Box<dyn A>, _>(); //  ok\n+    c::baz::<fn() -> Box<dyn A>>();    //  ok\n+}"}, {"sha": "b07425bd82501fff334063b0f1d6eb6433ff37ac", "filename": "src/test/ui/closures/closure-return-type-must-be-sized.stderr", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/65c0e68bf339bf3fdfb9f6b790f90aa30cd8dd93/src%2Ftest%2Fui%2Fclosures%2Fclosure-return-type-must-be-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65c0e68bf339bf3fdfb9f6b790f90aa30cd8dd93/src%2Ftest%2Fui%2Fclosures%2Fclosure-return-type-must-be-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-return-type-must-be-sized.stderr?ref=65c0e68bf339bf3fdfb9f6b790f90aa30cd8dd93", "patch": "@@ -0,0 +1,99 @@\n+error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n+  --> $DIR/closure-return-type-must-be-sized.rs:54:5\n+   |\n+LL |     a::foo::<fn() -> dyn A>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `fn() -> dyn A`, the trait `Sized` is not implemented for `dyn A`\n+   = note: required because it appears within the type `fn() -> dyn A`\n+\n+error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n+  --> $DIR/closure-return-type-must-be-sized.rs:55:14\n+   |\n+LL |     a::bar::<fn() -> dyn A, _>();\n+   |              ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `fn() -> dyn A`, the trait `Sized` is not implemented for `dyn A`\n+   = note: required because it appears within the type `fn() -> dyn A`\n+note: required by a bound in `a::bar`\n+  --> $DIR/closure-return-type-must-be-sized.rs:14:19\n+   |\n+LL |     pub fn bar<F: FnOnce() -> R, R: ?Sized>() {}\n+   |                   ^^^^^^^^^^^^^ required by this bound in `a::bar`\n+\n+error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n+  --> $DIR/closure-return-type-must-be-sized.rs:56:5\n+   |\n+LL |     a::baz::<fn() -> dyn A>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `fn() -> dyn A`, the trait `Sized` is not implemented for `dyn A`\n+   = note: required because it appears within the type `fn() -> dyn A`\n+\n+error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n+  --> $DIR/closure-return-type-must-be-sized.rs:61:5\n+   |\n+LL |     b::foo::<fn() -> dyn A>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `fn() -> dyn A`, the trait `Sized` is not implemented for `dyn A`\n+   = note: required because it appears within the type `fn() -> dyn A`\n+\n+error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n+  --> $DIR/closure-return-type-must-be-sized.rs:62:14\n+   |\n+LL |     b::bar::<fn() -> dyn A, _>();\n+   |              ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `fn() -> dyn A`, the trait `Sized` is not implemented for `dyn A`\n+   = note: required because it appears within the type `fn() -> dyn A`\n+note: required by a bound in `b::bar`\n+  --> $DIR/closure-return-type-must-be-sized.rs:28:19\n+   |\n+LL |     pub fn bar<F: Fn() -> R, R: ?Sized>() {}\n+   |                   ^^^^^^^^^ required by this bound in `b::bar`\n+\n+error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n+  --> $DIR/closure-return-type-must-be-sized.rs:63:5\n+   |\n+LL |     b::baz::<fn() -> dyn A>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `fn() -> dyn A`, the trait `Sized` is not implemented for `dyn A`\n+   = note: required because it appears within the type `fn() -> dyn A`\n+\n+error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n+  --> $DIR/closure-return-type-must-be-sized.rs:68:5\n+   |\n+LL |     c::foo::<fn() -> dyn A>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `fn() -> dyn A`, the trait `Sized` is not implemented for `dyn A`\n+   = note: required because it appears within the type `fn() -> dyn A`\n+\n+error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n+  --> $DIR/closure-return-type-must-be-sized.rs:69:14\n+   |\n+LL |     c::bar::<fn() -> dyn A, _>();\n+   |              ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `fn() -> dyn A`, the trait `Sized` is not implemented for `dyn A`\n+   = note: required because it appears within the type `fn() -> dyn A`\n+note: required by a bound in `c::bar`\n+  --> $DIR/closure-return-type-must-be-sized.rs:42:19\n+   |\n+LL |     pub fn bar<F: FnMut() -> R, R: ?Sized>() {}\n+   |                   ^^^^^^^^^^^^ required by this bound in `c::bar`\n+\n+error[E0277]: the size for values of type `dyn A` cannot be known at compilation time\n+  --> $DIR/closure-return-type-must-be-sized.rs:70:5\n+   |\n+LL |     c::baz::<fn() -> dyn A>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: within `fn() -> dyn A`, the trait `Sized` is not implemented for `dyn A`\n+   = note: required because it appears within the type `fn() -> dyn A`\n+\n+error: aborting due to 9 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}