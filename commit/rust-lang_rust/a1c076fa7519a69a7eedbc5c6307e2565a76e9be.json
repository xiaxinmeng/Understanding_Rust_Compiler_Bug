{"sha": "a1c076fa7519a69a7eedbc5c6307e2565a76e9be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExYzA3NmZhNzUxOWE2OWE3ZWVkYmM1YzYzMDdlMjU2NWE3NmU5YmU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-05T23:07:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-05T23:07:34Z"}, "message": "Rollup merge of #74027 - lcnr:ConstCx-local-def-id, r=varkor\n\nConvert more `DefId`s to `LocalDefId`s", "tree": {"sha": "f855fef1b952161d7ca56ae1c1b0ba80b6eab15a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f855fef1b952161d7ca56ae1c1b0ba80b6eab15a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1c076fa7519a69a7eedbc5c6307e2565a76e9be", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfAl02CRBK7hj4Ov3rIwAAdHIIAJz/UAUbcyd7IWCvuqi7nH9W\nNreUkF26wRNxcxfXgttmqzCSBJd1XFIMqDRenM5IgF29QgjC88u2tOL2yk5UQWP8\nPXVDrndLvdwhSlQPHjbkAzt/A3dFQMUT3Vijnb5Zdcyu5mnt91nVM+Jf9b8GTut5\nf703QzL+7dO9qcenYX6R2M2bTUJ0KZEUBeVKGK3Ad/rVXfT9E7M38+U72UZ2S4xt\nj4zm2kUpk/wamuHa1QXScBviA4NGIccBZLiIWVxa1hd0pgjxbIQbBszImxiCjpi7\nR+o4vqV/yvZdUCOTPGnTH6bB3L+QHyjRgGKDFVgZKeps0TV8ZgQxbXQ2D1Xe8gc=\n=Sr4X\n-----END PGP SIGNATURE-----\n", "payload": "tree f855fef1b952161d7ca56ae1c1b0ba80b6eab15a\nparent aef2ca6681cb2d5fb9ae613df8e94ad906c05085\nparent f5305c3d16fb8221463ef604a1ea5ac11506ba6d\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593990454 -0700\ncommitter GitHub <noreply@github.com> 1593990454 -0700\n\nRollup merge of #74027 - lcnr:ConstCx-local-def-id, r=varkor\n\nConvert more `DefId`s to `LocalDefId`s\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1c076fa7519a69a7eedbc5c6307e2565a76e9be", "html_url": "https://github.com/rust-lang/rust/commit/a1c076fa7519a69a7eedbc5c6307e2565a76e9be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1c076fa7519a69a7eedbc5c6307e2565a76e9be/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aef2ca6681cb2d5fb9ae613df8e94ad906c05085", "url": "https://api.github.com/repos/rust-lang/rust/commits/aef2ca6681cb2d5fb9ae613df8e94ad906c05085", "html_url": "https://github.com/rust-lang/rust/commit/aef2ca6681cb2d5fb9ae613df8e94ad906c05085"}, {"sha": "f5305c3d16fb8221463ef604a1ea5ac11506ba6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5305c3d16fb8221463ef604a1ea5ac11506ba6d", "html_url": "https://github.com/rust-lang/rust/commit/f5305c3d16fb8221463ef604a1ea5ac11506ba6d"}], "stats": {"total": 89, "additions": 40, "deletions": 49}, "files": [{"sha": "8cebd3679345f6e84afe5104eaa3edb6d4c0f34e", "filename": "src/librustc_mir/borrow_check/type_check/input_output.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1c076fa7519a69a7eedbc5c6307e2565a76e9be/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c076fa7519a69a7eedbc5c6307e2565a76e9be/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Finput_output.rs?ref=a1c076fa7519a69a7eedbc5c6307e2565a76e9be", "patch": "@@ -122,7 +122,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         if let Err(terr) = self.eq_opaque_type_and_type(\n             mir_output_ty,\n             normalized_output_ty,\n-            self.mir_def_id.to_def_id(),\n+            self.mir_def_id,\n             Locations::All(output_span),\n             ConstraintCategory::BoringNoLocation,\n         ) {\n@@ -145,7 +145,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             if let Err(err) = self.eq_opaque_type_and_type(\n                 mir_output_ty,\n                 user_provided_output_ty,\n-                self.mir_def_id.to_def_id(),\n+                self.mir_def_id,\n                 Locations::All(output_span),\n                 ConstraintCategory::BoringNoLocation,\n             ) {"}, {"sha": "3532b6de003ba1d24054f8be92b02c48628354cd", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1c076fa7519a69a7eedbc5c6307e2565a76e9be/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c076fa7519a69a7eedbc5c6307e2565a76e9be/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=a1c076fa7519a69a7eedbc5c6307e2565a76e9be", "patch": "@@ -1144,7 +1144,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 // When you have `let x: impl Foo = ...` in a closure,\n                 // the resulting inferend values are stored with the\n                 // def-id of the base function.\n-                let parent_def_id = self.tcx().closure_base_def_id(self.mir_def_id.to_def_id());\n+                let parent_def_id =\n+                    self.tcx().closure_base_def_id(self.mir_def_id.to_def_id()).expect_local();\n                 return self.eq_opaque_type_and_type(sub, sup, parent_def_id, locations, category);\n             } else {\n                 return Err(terr);\n@@ -1208,7 +1209,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         &mut self,\n         revealed_ty: Ty<'tcx>,\n         anon_ty: Ty<'tcx>,\n-        anon_owner_def_id: DefId,\n+        anon_owner_def_id: LocalDefId,\n         locations: Locations,\n         category: ConstraintCategory,\n     ) -> Fallible<()> {\n@@ -1238,8 +1239,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         let tcx = infcx.tcx;\n         let param_env = self.param_env;\n         let body = self.body;\n-        let concrete_opaque_types =\n-            &tcx.typeck_tables_of(anon_owner_def_id.expect_local()).concrete_opaque_types;\n+        let concrete_opaque_types = &tcx.typeck_tables_of(anon_owner_def_id).concrete_opaque_types;\n         let mut opaque_type_values = Vec::new();\n \n         debug!(\"eq_opaque_type_and_type: mir_def_id={:?}\", self.mir_def_id);"}, {"sha": "75067ffa4b338d64b73c627b8d98008325673d22", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1c076fa7519a69a7eedbc5c6307e2565a76e9be/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c076fa7519a69a7eedbc5c6307e2565a76e9be/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=a1c076fa7519a69a7eedbc5c6307e2565a76e9be", "patch": "@@ -334,9 +334,9 @@ pub fn const_eval_raw_provider<'tcx>(\n                 }\n \n                 v\n-            } else if def_id.is_local() {\n+            } else if let Some(def_id) = def_id.as_local() {\n                 // constant defined in this crate, we can figure out a lint level!\n-                match tcx.def_kind(def_id) {\n+                match tcx.def_kind(def_id.to_def_id()) {\n                     // constants never produce a hard error at the definition site. Anything else is\n                     // a backwards compatibility hazard (and will break old versions of winapi for\n                     // sure)\n@@ -346,7 +346,7 @@ pub fn const_eval_raw_provider<'tcx>(\n                     // validation thus preventing such a hard error from being a backwards\n                     // compatibility hazard\n                     DefKind::Const | DefKind::AssocConst => {\n-                        let hir_id = tcx.hir().as_local_hir_id(def_id.expect_local());\n+                        let hir_id = tcx.hir().as_local_hir_id(def_id);\n                         err.report_as_lint(\n                             tcx.at(tcx.def_span(def_id)),\n                             \"any use of this value will cause an error\",\n@@ -369,7 +369,7 @@ pub fn const_eval_raw_provider<'tcx>(\n                                 err.report_as_lint(\n                                     tcx.at(span),\n                                     \"reaching this expression at runtime will panic or abort\",\n-                                    tcx.hir().as_local_hir_id(def_id.expect_local()),\n+                                    tcx.hir().as_local_hir_id(def_id),\n                                     Some(err.span),\n                                 )\n                             }"}, {"sha": "81c1b0b5bd49f6443144776f06b11faa79ce72cc", "filename": "src/librustc_mir/transform/check_consts/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1c076fa7519a69a7eedbc5c6307e2565a76e9be/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c076fa7519a69a7eedbc5c6307e2565a76e9be/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=a1c076fa7519a69a7eedbc5c6307e2565a76e9be", "patch": "@@ -22,7 +22,7 @@ pub mod validation;\n pub struct ConstCx<'mir, 'tcx> {\n     pub body: &'mir mir::Body<'tcx>,\n     pub tcx: TyCtxt<'tcx>,\n-    pub def_id: DefId,\n+    pub def_id: LocalDefId,\n     pub param_env: ty::ParamEnv<'tcx>,\n     pub const_kind: Option<hir::ConstContext>,\n }\n@@ -40,7 +40,7 @@ impl ConstCx<'mir, 'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> Self {\n         let const_kind = tcx.hir().body_const_context(def_id);\n-        ConstCx { body, tcx, def_id: def_id.to_def_id(), param_env, const_kind }\n+        ConstCx { body, tcx, def_id: def_id, param_env, const_kind }\n     }\n \n     /// Returns the kind of const context this `Item` represents (`const`, `static`, etc.)."}, {"sha": "55075b3ab5e99912e8501ed42b88a82e4b07630f", "filename": "src/librustc_mir/transform/check_consts/post_drop_elaboration.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1c076fa7519a69a7eedbc5c6307e2565a76e9be/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c076fa7519a69a7eedbc5c6307e2565a76e9be/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs?ref=a1c076fa7519a69a7eedbc5c6307e2565a76e9be", "patch": "@@ -29,13 +29,7 @@ pub fn check_live_drops(tcx: TyCtxt<'tcx>, def_id: LocalDefId, body: &mir::Body<\n         return;\n     }\n \n-    let ccx = ConstCx {\n-        body,\n-        tcx,\n-        def_id: def_id.to_def_id(),\n-        const_kind,\n-        param_env: tcx.param_env(def_id),\n-    };\n+    let ccx = ConstCx { body, tcx, def_id, const_kind, param_env: tcx.param_env(def_id) };\n \n     let mut visitor = CheckLiveDrops { ccx: &ccx, qualifs: Qualifs::default() };\n "}, {"sha": "3dddd9c1c1766cea6845b18c7de17dac227fdee9", "filename": "src/librustc_mir/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1c076fa7519a69a7eedbc5c6307e2565a76e9be/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c076fa7519a69a7eedbc5c6307e2565a76e9be/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=a1c076fa7519a69a7eedbc5c6307e2565a76e9be", "patch": "@@ -126,7 +126,7 @@ impl Qualif for CustomEq {\n         // because that component may be part of an enum variant (e.g.,\n         // `Option::<NonStructuralMatchTy>::Some`), in which case some values of this type may be\n         // structural-match (`Option::None`).\n-        let id = cx.tcx.hir().local_def_id_to_hir_id(cx.def_id.as_local().unwrap());\n+        let id = cx.tcx.hir().local_def_id_to_hir_id(cx.def_id);\n         traits::search_for_structural_match_violation(id, cx.body.span, cx.tcx, ty).is_some()\n     }\n "}, {"sha": "5cb161ebcfb5ea4ca8f3f62a642e4c13b1052780", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a1c076fa7519a69a7eedbc5c6307e2565a76e9be/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c076fa7519a69a7eedbc5c6307e2565a76e9be/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=a1c076fa7519a69a7eedbc5c6307e2565a76e9be", "patch": "@@ -56,7 +56,7 @@ impl Qualifs<'mir, 'tcx> {\n             // without breaking stable code?\n             MaybeMutBorrowedLocals::mut_borrows_only(tcx, &body, param_env)\n                 .unsound_ignore_borrow_on_drop()\n-                .into_engine(tcx, &body, def_id)\n+                .into_engine(tcx, &body, def_id.to_def_id())\n                 .iterate_to_fixpoint()\n                 .into_results_cursor(&body)\n         });\n@@ -83,7 +83,7 @@ impl Qualifs<'mir, 'tcx> {\n             let ConstCx { tcx, body, def_id, .. } = *ccx;\n \n             FlowSensitiveAnalysis::new(NeedsDrop, ccx)\n-                .into_engine(tcx, &body, def_id)\n+                .into_engine(tcx, &body, def_id.to_def_id())\n                 .iterate_to_fixpoint()\n                 .into_results_cursor(&body)\n         });\n@@ -110,7 +110,7 @@ impl Qualifs<'mir, 'tcx> {\n             let ConstCx { tcx, body, def_id, .. } = *ccx;\n \n             FlowSensitiveAnalysis::new(HasMutInterior, ccx)\n-                .into_engine(tcx, &body, def_id)\n+                .into_engine(tcx, &body, def_id.to_def_id())\n                 .iterate_to_fixpoint()\n                 .into_results_cursor(&body)\n         });\n@@ -153,7 +153,7 @@ impl Qualifs<'mir, 'tcx> {\n \n             hir::ConstContext::Const | hir::ConstContext::Static(_) => {\n                 let mut cursor = FlowSensitiveAnalysis::new(CustomEq, ccx)\n-                    .into_engine(ccx.tcx, &ccx.body, ccx.def_id)\n+                    .into_engine(ccx.tcx, &ccx.body, ccx.def_id.to_def_id())\n                     .iterate_to_fixpoint()\n                     .into_results_cursor(&ccx.body);\n \n@@ -195,13 +195,13 @@ impl Validator<'mir, 'tcx> {\n         let ConstCx { tcx, body, def_id, const_kind, .. } = *self.ccx;\n \n         let use_min_const_fn_checks = (const_kind == Some(hir::ConstContext::ConstFn)\n-            && crate::const_eval::is_min_const_fn(tcx, def_id))\n+            && crate::const_eval::is_min_const_fn(tcx, def_id.to_def_id()))\n             && !tcx.sess.opts.debugging_opts.unleash_the_miri_inside_of_you;\n \n         if use_min_const_fn_checks {\n             // Enforce `min_const_fn` for stable `const fn`s.\n             use crate::transform::qualify_min_const_fn::is_min_const_fn;\n-            if let Err((span, err)) = is_min_const_fn(tcx, def_id, &body) {\n+            if let Err((span, err)) = is_min_const_fn(tcx, def_id.to_def_id(), &body) {\n                 error_min_const_fn_violation(tcx, span, err);\n                 return;\n             }\n@@ -212,10 +212,10 @@ impl Validator<'mir, 'tcx> {\n         // Ensure that the end result is `Sync` in a non-thread local `static`.\n         let should_check_for_sync = const_kind\n             == Some(hir::ConstContext::Static(hir::Mutability::Not))\n-            && !tcx.is_thread_local_static(def_id);\n+            && !tcx.is_thread_local_static(def_id.to_def_id());\n \n         if should_check_for_sync {\n-            let hir_id = tcx.hir().as_local_hir_id(def_id.expect_local());\n+            let hir_id = tcx.hir().as_local_hir_id(def_id);\n             check_return_ty_is_sync(tcx, &body, hir_id);\n         }\n     }\n@@ -535,7 +535,7 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                     // `#[allow_internal_unstable]`.\n                     use crate::transform::qualify_min_const_fn::lib_feature_allowed;\n                     if !self.span.allows_unstable(feature)\n-                        && !lib_feature_allowed(self.tcx, self.def_id, feature)\n+                        && !lib_feature_allowed(self.tcx, self.def_id.to_def_id(), feature)\n                     {\n                         self.check_op(ops::FnCallUnstable(def_id, feature));\n                     }"}, {"sha": "14c3093e1e9a11e784ad1ac75751673b99a7e31f", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a1c076fa7519a69a7eedbc5c6307e2565a76e9be/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c076fa7519a69a7eedbc5c6307e2565a76e9be/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=a1c076fa7519a69a7eedbc5c6307e2565a76e9be", "patch": "@@ -203,7 +203,8 @@ pub fn run_passes(\n }\n \n fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> ConstQualifs {\n-    let const_kind = tcx.hir().body_const_context(def_id.expect_local());\n+    let def_id = def_id.expect_local();\n+    let const_kind = tcx.hir().body_const_context(def_id);\n \n     // No need to const-check a non-const `fn`.\n     if const_kind.is_none() {\n@@ -214,7 +215,7 @@ fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> ConstQualifs {\n     // cannot yet be stolen), because `mir_validated()`, which steals\n     // from `mir_const(), forces this query to execute before\n     // performing the steal.\n-    let body = &tcx.mir_const(def_id).borrow();\n+    let body = &tcx.mir_const(def_id.to_def_id()).borrow();\n \n     if body.return_ty().references_error() {\n         tcx.sess.delay_span_bug(body.span, \"mir_const_qualif: MIR had errors\");"}, {"sha": "5aa67227994d918a1ac679cf6bee3394b4c65a5b", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a1c076fa7519a69a7eedbc5c6307e2565a76e9be/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c076fa7519a69a7eedbc5c6307e2565a76e9be/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=a1c076fa7519a69a7eedbc5c6307e2565a76e9be", "patch": "@@ -60,15 +60,16 @@ impl<'tcx> MirPass<'tcx> for PromoteTemps<'tcx> {\n             return;\n         }\n \n-        let def_id = src.def_id();\n+        let def_id = src.def_id().expect_local();\n \n         let mut rpo = traversal::reverse_postorder(body);\n-        let ccx = ConstCx::new(tcx, def_id.expect_local(), body);\n+        let ccx = ConstCx::new(tcx, def_id, body);\n         let (temps, all_candidates) = collect_temps_and_candidates(&ccx, &mut rpo);\n \n         let promotable_candidates = validate_candidates(&ccx, &temps, &all_candidates);\n \n-        let promoted = promote_candidates(def_id, body, tcx, temps, promotable_candidates);\n+        let promoted =\n+            promote_candidates(def_id.to_def_id(), body, tcx, temps, promotable_candidates);\n         self.promoted_fragments.set(promoted);\n     }\n }\n@@ -724,7 +725,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n             ty::FnDef(def_id, _) => {\n                 is_const_fn(self.tcx, def_id)\n                     || is_unstable_const_fn(self.tcx, def_id).is_some()\n-                    || is_lang_panic_fn(self.tcx, self.def_id)\n+                    || is_lang_panic_fn(self.tcx, self.def_id.to_def_id())\n             }\n             _ => false,\n         };"}, {"sha": "b60531833bd41ae997956f33e7f72a938cb4d4e2", "filename": "src/librustc_trait_selection/opaque_types.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a1c076fa7519a69a7eedbc5c6307e2565a76e9be/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c076fa7519a69a7eedbc5c6307e2565a76e9be/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Fopaque_types.rs?ref=a1c076fa7519a69a7eedbc5c6307e2565a76e9be", "patch": "@@ -108,7 +108,7 @@ pub enum GenerateMemberConstraints {\n pub trait InferCtxtExt<'tcx> {\n     fn instantiate_opaque_types<T: TypeFoldable<'tcx>>(\n         &self,\n-        parent_def_id: DefId,\n+        parent_def_id: LocalDefId,\n         body_id: hir::HirId,\n         param_env: ty::ParamEnv<'tcx>,\n         value: &T,\n@@ -184,7 +184,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     /// - `value_span` -- the span where the value came from, used in error reporting\n     fn instantiate_opaque_types<T: TypeFoldable<'tcx>>(\n         &self,\n-        parent_def_id: DefId,\n+        parent_def_id: LocalDefId,\n         body_id: hir::HirId,\n         param_env: ty::ParamEnv<'tcx>,\n         value: &T,\n@@ -986,7 +986,7 @@ impl TypeFolder<'tcx> for ReverseMapper<'tcx> {\n \n struct Instantiator<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n-    parent_def_id: DefId,\n+    parent_def_id: LocalDefId,\n     body_id: hir::HirId,\n     param_env: ty::ParamEnv<'tcx>,\n     value_span: Span,\n@@ -1043,8 +1043,7 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n                         let parent_def_id = self.parent_def_id;\n                         let def_scope_default = || {\n                             let opaque_parent_hir_id = tcx.hir().get_parent_item(opaque_hir_id);\n-                            parent_def_id\n-                                == tcx.hir().local_def_id(opaque_parent_hir_id).to_def_id()\n+                            parent_def_id == tcx.hir().local_def_id(opaque_parent_hir_id)\n                         };\n                         let (in_definition_scope, origin) = match tcx.hir().find(opaque_hir_id) {\n                             Some(Node::Item(item)) => match item.kind {\n@@ -1053,18 +1052,14 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n                                     impl_trait_fn: Some(parent),\n                                     origin,\n                                     ..\n-                                }) => (parent == self.parent_def_id, origin),\n+                                }) => (parent == self.parent_def_id.to_def_id(), origin),\n                                 // Named `type Foo = impl Bar;`\n                                 hir::ItemKind::OpaqueTy(hir::OpaqueTy {\n                                     impl_trait_fn: None,\n                                     origin,\n                                     ..\n                                 }) => (\n-                                    may_define_opaque_type(\n-                                        tcx,\n-                                        self.parent_def_id.expect_local(),\n-                                        opaque_hir_id,\n-                                    ),\n+                                    may_define_opaque_type(tcx, self.parent_def_id, opaque_hir_id),\n                                     origin,\n                                 ),\n                                 _ => (def_scope_default(), hir::OpaqueTyOrigin::Misc),"}, {"sha": "e564b01b11721e65b70d811a8dc098e2df40335c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1c076fa7519a69a7eedbc5c6307e2565a76e9be/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1c076fa7519a69a7eedbc5c6307e2565a76e9be/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a1c076fa7519a69a7eedbc5c6307e2565a76e9be", "patch": "@@ -1321,8 +1321,8 @@ fn check_fn<'a, 'tcx>(\n         fcx.resume_yield_tys = Some((resume_ty, yield_ty));\n     }\n \n-    let outer_def_id = tcx.closure_base_def_id(hir.local_def_id(fn_id).to_def_id());\n-    let outer_hir_id = hir.as_local_hir_id(outer_def_id.expect_local());\n+    let outer_def_id = tcx.closure_base_def_id(hir.local_def_id(fn_id).to_def_id()).expect_local();\n+    let outer_hir_id = hir.as_local_hir_id(outer_def_id);\n     GatherLocalsVisitor { fcx: &fcx, parent_id: outer_hir_id }.visit_body(body);\n \n     // C-variadic fns also have a `VaList` input that's not listed in `fn_sig`\n@@ -3427,7 +3427,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let (value, opaque_type_map) =\n             self.register_infer_ok_obligations(self.instantiate_opaque_types(\n-                parent_def_id.to_def_id(),\n+                parent_def_id,\n                 self.body_id,\n                 self.param_env,\n                 value,"}]}