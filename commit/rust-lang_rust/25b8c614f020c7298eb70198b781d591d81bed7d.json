{"sha": "25b8c614f020c7298eb70198b781d591d81bed7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1YjhjNjE0ZjAyMGM3Mjk4ZWI3MDE5OGI3ODFkNTkxZDgxYmVkN2Q=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-02-10T22:23:00Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-03-03T15:07:29Z"}, "message": "Wrap the self-profiler in an `Arc<Mutex<>>`\n\nThis will allow us to send it across threads and measure things like\nLLVM time.", "tree": {"sha": "fc7b4bc6992fb0efe225dc94a5f5a70726110aa1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc7b4bc6992fb0efe225dc94a5f5a70726110aa1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25b8c614f020c7298eb70198b781d591d81bed7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25b8c614f020c7298eb70198b781d591d81bed7d", "html_url": "https://github.com/rust-lang/rust/commit/25b8c614f020c7298eb70198b781d591d81bed7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25b8c614f020c7298eb70198b781d591d81bed7d/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0086b9e8972fef9fd4af24bae20d45021ed06c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0086b9e8972fef9fd4af24bae20d45021ed06c6", "html_url": "https://github.com/rust-lang/rust/commit/c0086b9e8972fef9fd4af24bae20d45021ed06c6"}], "stats": {"total": 92, "additions": 60, "deletions": 32}, "files": [{"sha": "9154cb4d5b8b6d8e44061e74a1169e18ae9bf202", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25b8c614f020c7298eb70198b781d591d81bed7d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/25b8c614f020c7298eb70198b781d591d81bed7d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=25b8c614f020c7298eb70198b781d591d81bed7d", "patch": "@@ -2625,6 +2625,7 @@ dependencies = [\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"memmap 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc-demangle 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_allocator 0.0.0\","}, {"sha": "d873a72ed4d7782419bf9392dae8ebab6ecac086", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/25b8c614f020c7298eb70198b781d591d81bed7d/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b8c614f020c7298eb70198b781d591d81bed7d/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=25b8c614f020c7298eb70198b781d591d81bed7d", "patch": "@@ -44,7 +44,9 @@ use std::fmt;\n use std::io::Write;\n use std::path::PathBuf;\n use std::time::Duration;\n-use std::sync::mpsc;\n+use std::sync::{Arc, mpsc};\n+\n+use parking_lot::Mutex as PlMutex;\n \n mod code_stats;\n pub mod config;\n@@ -127,11 +129,8 @@ pub struct Session {\n     /// Used by `-Z profile-queries` in `util::common`.\n     pub profile_channel: Lock<Option<mpsc::Sender<ProfileQueriesMsg>>>,\n \n-    /// Used by `-Z self-profile`.\n-    pub self_profiling_active: bool,\n-\n-    /// Used by `-Z self-profile`.\n-    pub self_profiling: Lock<SelfProfiler>,\n+    /// Used by -Z self-profile\n+    pub self_profiling: Option<Arc<PlMutex<SelfProfiler>>>,\n \n     /// Some measurements that are being gathered during compilation.\n     pub perf_stats: PerfStats,\n@@ -834,27 +833,23 @@ impl Session {\n     #[inline(never)]\n     #[cold]\n     fn profiler_active<F: FnOnce(&mut SelfProfiler) -> ()>(&self, f: F) {\n-        let mut profiler = self.self_profiling.borrow_mut();\n-        f(&mut profiler);\n+        match &self.self_profiling {\n+            None => bug!(\"profiler_active() called but there was no profiler active\"),\n+            Some(profiler) => {\n+                let mut p = profiler.lock();\n+\n+                f(&mut p);\n+            }\n+        }\n     }\n \n     #[inline(always)]\n     pub fn profiler<F: FnOnce(&mut SelfProfiler) -> ()>(&self, f: F) {\n-        if unlikely!(self.self_profiling_active) {\n+        if unlikely!(self.self_profiling.is_some()) {\n             self.profiler_active(f)\n         }\n     }\n \n-    pub fn print_profiler_results(&self) {\n-        let mut profiler = self.self_profiling.borrow_mut();\n-        profiler.print_results(&self.opts);\n-    }\n-\n-    pub fn save_json_results(&self) {\n-        let profiler = self.self_profiling.borrow();\n-        profiler.save_results(&self.opts);\n-    }\n-\n     pub fn print_perf_stats(&self) {\n         println!(\n             \"Total time spent computing symbol hashes:      {}\",\n@@ -1136,6 +1131,13 @@ pub fn build_session_(\n     source_map: Lrc<source_map::SourceMap>,\n     driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n ) -> Session {\n+    let self_profiling_active = sopts.debugging_opts.self_profile ||\n+                                sopts.debugging_opts.profile_json;\n+\n+    let self_profiler =\n+        if self_profiling_active { Some(Arc::new(PlMutex::new(SelfProfiler::new()))) }\n+        else { None };\n+\n     let host_triple = TargetTriple::from_triple(config::host_triple());\n     let host = Target::search(&host_triple).unwrap_or_else(|e|\n         span_diagnostic\n@@ -1185,9 +1187,6 @@ pub fn build_session_(\n         CguReuseTracker::new_disabled()\n     };\n \n-    let self_profiling_active = sopts.debugging_opts.self_profile ||\n-                                sopts.debugging_opts.profile_json;\n-\n     let sess = Session {\n         target: target_cfg,\n         host,\n@@ -1216,8 +1215,7 @@ pub fn build_session_(\n         imported_macro_spans: OneThread::new(RefCell::new(FxHashMap::default())),\n         incr_comp_session: OneThread::new(RefCell::new(IncrCompSession::NotInitialized)),\n         cgu_reuse_tracker,\n-        self_profiling_active,\n-        self_profiling: Lock::new(SelfProfiler::new()),\n+        self_profiling: self_profiler,\n         profile_channel: Lock::new(None),\n         perf_stats: PerfStats {\n             symbol_hash_time: Lock::new(Duration::from_secs(0)),"}, {"sha": "4702e34aa19e7fabe00b33304e339b3a47ea8d68", "filename": "src/librustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25b8c614f020c7298eb70198b781d591d81bed7d/src%2Flibrustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/25b8c614f020c7298eb70198b781d591d81bed7d/src%2Flibrustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2FCargo.toml?ref=25b8c614f020c7298eb70198b781d591d81bed7d", "patch": "@@ -19,6 +19,7 @@ memmap = \"0.6\"\n log = \"0.4.5\"\n libc = \"0.2.44\"\n jobserver = \"0.1.11\"\n+parking_lot = \"0.7\"\n \n serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "4bccc2a6d1f7b7d06809b8fd0b644cc42fd213d4", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/25b8c614f020c7298eb70198b781d591d81bed7d/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b8c614f020c7298eb70198b781d591d81bed7d/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=25b8c614f020c7298eb70198b781d591d81bed7d", "patch": "@@ -19,6 +19,7 @@ use rustc::util::time_graph::{self, TimeGraph, Timeline};\n use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc::ty::TyCtxt;\n use rustc::util::common::{time_depth, set_time_depth, print_time_passes_entry};\n+use rustc::util::profiling::SelfProfiler;\n use rustc_fs_util::link_or_copy;\n use rustc_data_structures::svh::Svh;\n use rustc_errors::{Handler, Level, DiagnosticBuilder, FatalError, DiagnosticId};\n@@ -29,6 +30,7 @@ use syntax::ext::hygiene::Mark;\n use syntax_pos::MultiSpan;\n use syntax_pos::symbol::Symbol;\n use jobserver::{Client, Acquired};\n+use parking_lot::Mutex as PlMutex;\n \n use std::any::Any;\n use std::fs;\n@@ -201,6 +203,7 @@ pub struct CodegenContext<B: WriteBackendMethods> {\n     // Resources needed when running LTO\n     pub backend: B,\n     pub time_passes: bool,\n+    pub profiler: Option<Arc<PlMutex<SelfProfiler>>>,\n     pub lto: Lto,\n     pub no_landing_pads: bool,\n     pub save_temps: bool,\n@@ -254,6 +257,26 @@ impl<B: WriteBackendMethods> CodegenContext<B> {\n             ModuleKind::Allocator => &self.allocator_module_config,\n         }\n     }\n+\n+    #[inline(never)]\n+    #[cold]\n+    fn profiler_active<F: FnOnce(&mut SelfProfiler) -> ()>(&self, f: F) {\n+        match &self.profiler {\n+            None => bug!(\"profiler_active() called but there was no profiler active\"),\n+            Some(profiler) => {\n+                let mut p = profiler.lock();\n+\n+                f(&mut p);\n+            }\n+        }\n+    }\n+\n+    #[inline(always)]\n+    pub fn profile<F: FnOnce(&mut SelfProfiler) -> ()>(&self, f: F) {\n+        if unlikely!(self.profiler.is_some()) {\n+            self.profiler_active(f)\n+        }\n+    }\n }\n \n fn generate_lto_work<B: ExtraBackendMethods>(\n@@ -1033,6 +1056,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         save_temps: sess.opts.cg.save_temps,\n         opts: Arc::new(sess.opts.clone()),\n         time_passes: sess.time_passes(),\n+        profiler: sess.self_profiling.clone(),\n         exported_symbols,\n         plugin_passes: sess.plugin_llvm_passes.borrow().clone(),\n         remark: sess.opts.cg.remark.clone(),"}, {"sha": "fec41936a238432314336d6f149669c70f51b5e0", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25b8c614f020c7298eb70198b781d591d81bed7d/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b8c614f020c7298eb70198b781d591d81bed7d/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=25b8c614f020c7298eb70198b781d591d81bed7d", "patch": "@@ -2,9 +2,11 @@\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(core_intrinsics)]\n #![feature(custom_attribute)]\n #![feature(libc)]\n #![feature(rustc_diagnostic_macros)]\n+#![feature(stmt_expr_attributes)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![allow(unused_attributes)]\n@@ -20,6 +22,7 @@\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate rustc;\n+#[macro_use] extern crate rustc_data_structures;\n #[macro_use] extern crate syntax;\n \n use std::path::PathBuf;"}, {"sha": "d3e295607c2b395b40dd1f222a8286f705bde98b", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/25b8c614f020c7298eb70198b781d591d81bed7d/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b8c614f020c7298eb70198b781d591d81bed7d/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=25b8c614f020c7298eb70198b781d591d81bed7d", "patch": "@@ -349,14 +349,6 @@ pub fn compile_input(\n         sess.print_perf_stats();\n     }\n \n-    if sess.opts.debugging_opts.self_profile {\n-        sess.print_profiler_results();\n-    }\n-\n-    if sess.opts.debugging_opts.profile_json {\n-        sess.save_json_results();\n-    }\n-\n     controller_entry_point!(\n         compilation_done,\n         sess,"}, {"sha": "9546498cf939a77abb87fda6a23c4a11705998e8", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/25b8c614f020c7298eb70198b781d591d81bed7d/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25b8c614f020c7298eb70198b781d591d81bed7d/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=25b8c614f020c7298eb70198b781d591d81bed7d", "patch": "@@ -276,6 +276,15 @@ fn run_compiler_with_pool<'a>(\n                               &control)\n     };\n \n+\n+    if sess.opts.debugging_opts.self_profile {\n+        sess.profiler(|p| p.print_results(&sess.opts));\n+    }\n+\n+    if sess.opts.debugging_opts.profile_json {\n+        sess.profiler(|p| p.save_results(&sess.opts));\n+    }\n+\n     (result, Some(sess))\n }\n "}]}