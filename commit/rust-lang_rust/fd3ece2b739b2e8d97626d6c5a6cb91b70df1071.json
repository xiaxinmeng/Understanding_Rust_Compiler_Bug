{"sha": "fd3ece2b739b2e8d97626d6c5a6cb91b70df1071", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkM2VjZTJiNzM5YjJlOGQ5NzYyNmQ2YzVhNmNiOTFiNzBkZjEwNzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-12T16:38:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-12T16:38:48Z"}, "message": "Make naming more uniform", "tree": {"sha": "0b133ad3347251ab2db0aeedca89ef9e14b1732d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b133ad3347251ab2db0aeedca89ef9e14b1732d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd3ece2b739b2e8d97626d6c5a6cb91b70df1071", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd3ece2b739b2e8d97626d6c5a6cb91b70df1071", "html_url": "https://github.com/rust-lang/rust/commit/fd3ece2b739b2e8d97626d6c5a6cb91b70df1071", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd3ece2b739b2e8d97626d6c5a6cb91b70df1071/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d98a5fab46c5850a484349c50dda7cb823cc179a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d98a5fab46c5850a484349c50dda7cb823cc179a", "html_url": "https://github.com/rust-lang/rust/commit/d98a5fab46c5850a484349c50dda7cb823cc179a"}], "stats": {"total": 70, "additions": 35, "deletions": 35}, "files": [{"sha": "cd0757be5f1f5637d29366b46bc2b87fab84cb07", "filename": "crates/ra_ide/src/completion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd3ece2b739b2e8d97626d6c5a6cb91b70df1071/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd3ece2b739b2e8d97626d6c5a6cb91b70df1071/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion.rs?ref=fd3ece2b739b2e8d97626d6c5a6cb91b70df1071", "patch": "@@ -75,9 +75,9 @@ impl Default for CompletionOptions {\n pub(crate) fn completions(\n     db: &RootDatabase,\n     position: FilePosition,\n-    opts: &CompletionOptions,\n+    options: &CompletionOptions,\n ) -> Option<Completions> {\n-    let ctx = CompletionContext::new(db, position, opts)?;\n+    let ctx = CompletionContext::new(db, position, options)?;\n \n     let mut acc = Completions::default();\n "}, {"sha": "ecd615cf4c00d9889f769f0b3d22f1e774653f1b", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/fd3ece2b739b2e8d97626d6c5a6cb91b70df1071/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd3ece2b739b2e8d97626d6c5a6cb91b70df1071/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=fd3ece2b739b2e8d97626d6c5a6cb91b70df1071", "patch": "@@ -11,13 +11,13 @@ use ra_syntax::{\n use crate::{FileId, FunctionSignature};\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n-pub struct InlayConfig {\n+pub struct InlayHintsOptions {\n     pub type_hints: bool,\n     pub parameter_hints: bool,\n     pub max_length: Option<usize>,\n }\n \n-impl Default for InlayConfig {\n+impl Default for InlayHintsOptions {\n     fn default() -> Self {\n         Self { type_hints: true, parameter_hints: true, max_length: None }\n     }\n@@ -39,7 +39,7 @@ pub struct InlayHint {\n pub(crate) fn inlay_hints(\n     db: &RootDatabase,\n     file_id: FileId,\n-    inlay_hint_opts: &InlayConfig,\n+    options: &InlayHintsOptions,\n ) -> Vec<InlayHint> {\n     let _p = profile(\"inlay_hints\");\n     let sema = Semantics::new(db);\n@@ -49,9 +49,9 @@ pub(crate) fn inlay_hints(\n     for node in file.syntax().descendants() {\n         match_ast! {\n             match node {\n-                ast::CallExpr(it) => { get_param_name_hints(&mut res, &sema, inlay_hint_opts, ast::Expr::from(it)); },\n-                ast::MethodCallExpr(it) => { get_param_name_hints(&mut res, &sema, inlay_hint_opts, ast::Expr::from(it)); },\n-                ast::BindPat(it) => { get_bind_pat_hints(&mut res, &sema, inlay_hint_opts, it); },\n+                ast::CallExpr(it) => { get_param_name_hints(&mut res, &sema, options, ast::Expr::from(it)); },\n+                ast::MethodCallExpr(it) => { get_param_name_hints(&mut res, &sema, options, ast::Expr::from(it)); },\n+                ast::BindPat(it) => { get_bind_pat_hints(&mut res, &sema, options, it); },\n                 _ => (),\n             }\n         }\n@@ -62,10 +62,10 @@ pub(crate) fn inlay_hints(\n fn get_param_name_hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<RootDatabase>,\n-    inlay_hint_opts: &InlayConfig,\n+    options: &InlayHintsOptions,\n     expr: ast::Expr,\n ) -> Option<()> {\n-    if !inlay_hint_opts.parameter_hints {\n+    if !options.parameter_hints {\n         return None;\n     }\n \n@@ -102,10 +102,10 @@ fn get_param_name_hints(\n fn get_bind_pat_hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<RootDatabase>,\n-    inlay_hint_opts: &InlayConfig,\n+    options: &InlayHintsOptions,\n     pat: ast::BindPat,\n ) -> Option<()> {\n-    if !inlay_hint_opts.type_hints {\n+    if !options.type_hints {\n         return None;\n     }\n \n@@ -118,7 +118,7 @@ fn get_bind_pat_hints(\n     acc.push(InlayHint {\n         range: pat.syntax().text_range(),\n         kind: InlayKind::TypeHint,\n-        label: ty.display_truncated(sema.db, inlay_hint_opts.max_length).to_string().into(),\n+        label: ty.display_truncated(sema.db, options.max_length).to_string().into(),\n     });\n     Some(())\n }\n@@ -224,7 +224,7 @@ fn get_fn_signature(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Option<\n \n #[cfg(test)]\n mod tests {\n-    use crate::inlay_hints::InlayConfig;\n+    use crate::inlay_hints::InlayHintsOptions;\n     use insta::assert_debug_snapshot;\n \n     use crate::mock_analysis::single_file;\n@@ -238,7 +238,7 @@ mod tests {\n                 let _x = foo(4, 4);\n             }\"#,\n         );\n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig{ parameter_hints: true, type_hints: false, max_length: None}).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions{ parameter_hints: true, type_hints: false, max_length: None}).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [106; 107),\n@@ -262,7 +262,7 @@ mod tests {\n                 let _x = foo(4, 4);\n             }\"#,\n         );\n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig{ type_hints: false, parameter_hints: false, max_length: None}).unwrap(), @r###\"[]\"###);\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions{ type_hints: false, parameter_hints: false, max_length: None}).unwrap(), @r###\"[]\"###);\n     }\n \n     #[test]\n@@ -274,7 +274,7 @@ mod tests {\n                 let _x = foo(4, 4);\n             }\"#,\n         );\n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig{ type_hints: true, parameter_hints: false, max_length: None}).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions{ type_hints: true, parameter_hints: false, max_length: None}).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [97; 99),\n@@ -298,7 +298,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig::default()).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [69; 71),\n@@ -355,7 +355,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig::default()).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [193; 197),\n@@ -435,7 +435,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig::default()).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [21; 30),\n@@ -499,7 +499,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig::default()).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [21; 30),\n@@ -549,7 +549,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig::default()).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [188; 192),\n@@ -644,7 +644,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig::default()).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [188; 192),\n@@ -739,7 +739,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig::default()).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [252; 256),\n@@ -811,7 +811,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig { max_length: Some(8), ..Default::default() }).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions { max_length: Some(8), ..Default::default() }).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [74; 75),\n@@ -899,7 +899,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig::default()).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [798; 809),\n@@ -1021,7 +1021,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig { max_length: Some(8), ..Default::default() }).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions { max_length: Some(8), ..Default::default() }).unwrap(), @r###\"\n         []\n         \"###\n         );\n@@ -1047,7 +1047,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayConfig { max_length: Some(8), ..Default::default() }).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions { max_length: Some(8), ..Default::default() }).unwrap(), @r###\"\n         []\n         \"###\n         );"}, {"sha": "e9af80b6c4d33ebf2c692f155bf04dd040d5bf3d", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd3ece2b739b2e8d97626d6c5a6cb91b70df1071/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd3ece2b739b2e8d97626d6c5a6cb91b70df1071/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=fd3ece2b739b2e8d97626d6c5a6cb91b70df1071", "patch": "@@ -68,7 +68,7 @@ pub use crate::{\n     expand_macro::ExpandedMacro,\n     folding_ranges::{Fold, FoldKind},\n     hover::HoverResult,\n-    inlay_hints::{InlayConfig, InlayHint, InlayKind},\n+    inlay_hints::{InlayHint, InlayHintsOptions, InlayKind},\n     references::{Declaration, Reference, ReferenceAccess, ReferenceKind, ReferenceSearchResult},\n     runnables::{Runnable, RunnableKind, TestId},\n     source_change::{FileSystemEdit, SourceChange, SourceFileEdit},\n@@ -319,7 +319,7 @@ impl Analysis {\n     pub fn inlay_hints(\n         &self,\n         file_id: FileId,\n-        inlay_hint_opts: &InlayConfig,\n+        inlay_hint_opts: &InlayHintsOptions,\n     ) -> Cancelable<Vec<InlayHint>> {\n         self.with_db(|db| inlay_hints::inlay_hints(db, file_id, inlay_hint_opts))\n     }"}, {"sha": "a6f832ed7c6b97b048ce42cbdcccbf4113d6c1fa", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd3ece2b739b2e8d97626d6c5a6cb91b70df1071/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd3ece2b739b2e8d97626d6c5a6cb91b70df1071/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=fd3ece2b739b2e8d97626d6c5a6cb91b70df1071", "patch": "@@ -8,7 +8,7 @@\n //! tweak things like automatic insertion of `()` in completions.\n \n use crate::req::InlayConfigDef;\n-use ra_ide::InlayConfig;\n+use ra_ide::InlayHintsOptions;\n use rustc_hash::FxHashMap;\n \n use ra_project_model::CargoFeatures;\n@@ -33,7 +33,7 @@ pub struct ServerConfig {\n     pub lru_capacity: Option<usize>,\n \n     #[serde(with = \"InlayConfigDef\")]\n-    pub inlay_hints: InlayConfig,\n+    pub inlay_hints: InlayHintsOptions,\n \n     pub cargo_watch_enable: bool,\n     pub cargo_watch_args: Vec<String>,"}, {"sha": "fa7a42099b5c6159bf6c25f8680eb9d8188139c8", "filename": "crates/rust-analyzer/src/req.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd3ece2b739b2e8d97626d6c5a6cb91b70df1071/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd3ece2b739b2e8d97626d6c5a6cb91b70df1071/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freq.rs?ref=fd3ece2b739b2e8d97626d6c5a6cb91b70df1071", "patch": "@@ -4,7 +4,7 @@ use lsp_types::{Location, Position, Range, TextDocumentIdentifier, Url};\n use rustc_hash::FxHashMap;\n use serde::{Deserialize, Serialize};\n \n-use ra_ide::{InlayConfig, InlayKind};\n+use ra_ide::{InlayHintsOptions, InlayKind};\n \n pub use lsp_types::{\n     notification::*, request::*, ApplyWorkspaceEditParams, CodeActionParams, CodeLens,"}, {"sha": "058ce2af8a8a06c26aa71c031bbccae980440bcf", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd3ece2b739b2e8d97626d6c5a6cb91b70df1071/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd3ece2b739b2e8d97626d6c5a6cb91b70df1071/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=fd3ece2b739b2e8d97626d6c5a6cb91b70df1071", "patch": "@@ -13,7 +13,7 @@ use lsp_types::Url;\n use parking_lot::RwLock;\n use ra_cargo_watch::{url_from_path_with_drive_lowercasing, CheckOptions, CheckWatcher};\n use ra_ide::{\n-    Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, InlayConfig, LibraryData,\n+    Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, InlayHintsOptions, LibraryData,\n     SourceRootId,\n };\n use ra_project_model::{get_rustc_cfg_options, ProjectWorkspace};\n@@ -35,7 +35,7 @@ pub struct Options {\n     pub publish_decorations: bool,\n     pub supports_location_link: bool,\n     pub line_folding_only: bool,\n-    pub inlay_hints: InlayConfig,\n+    pub inlay_hints: InlayHintsOptions,\n     pub rustfmt_args: Vec<String>,\n     pub cargo_watch: CheckOptions,\n }"}]}