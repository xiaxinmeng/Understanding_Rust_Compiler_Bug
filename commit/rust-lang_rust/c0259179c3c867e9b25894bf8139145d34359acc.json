{"sha": "c0259179c3c867e9b25894bf8139145d34359acc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMjU5MTc5YzNjODY3ZTliMjU4OTRiZjgxMzkxNDVkMzQzNTlhY2M=", "commit": {"author": {"name": "xd009642", "email": "danielmckenna93@gmail.com", "date": "2019-07-24T21:59:32Z"}, "committer": {"name": "xd009642", "email": "danielmckenna93@gmail.com", "date": "2019-07-24T21:59:32Z"}, "message": "Fixed more compile errors\n\nMoved to rustc::hir::Ty", "tree": {"sha": "0388aed118915f0a1095e86a37f65f352b1be63e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0388aed118915f0a1095e86a37f65f352b1be63e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0259179c3c867e9b25894bf8139145d34359acc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0259179c3c867e9b25894bf8139145d34359acc", "html_url": "https://github.com/rust-lang/rust/commit/c0259179c3c867e9b25894bf8139145d34359acc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0259179c3c867e9b25894bf8139145d34359acc/comments", "author": {"login": "xd009642", "id": 3472518, "node_id": "MDQ6VXNlcjM0NzI1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3472518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xd009642", "html_url": "https://github.com/xd009642", "followers_url": "https://api.github.com/users/xd009642/followers", "following_url": "https://api.github.com/users/xd009642/following{/other_user}", "gists_url": "https://api.github.com/users/xd009642/gists{/gist_id}", "starred_url": "https://api.github.com/users/xd009642/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xd009642/subscriptions", "organizations_url": "https://api.github.com/users/xd009642/orgs", "repos_url": "https://api.github.com/users/xd009642/repos", "events_url": "https://api.github.com/users/xd009642/events{/privacy}", "received_events_url": "https://api.github.com/users/xd009642/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xd009642", "id": 3472518, "node_id": "MDQ6VXNlcjM0NzI1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3472518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xd009642", "html_url": "https://github.com/xd009642", "followers_url": "https://api.github.com/users/xd009642/followers", "following_url": "https://api.github.com/users/xd009642/following{/other_user}", "gists_url": "https://api.github.com/users/xd009642/gists{/gist_id}", "starred_url": "https://api.github.com/users/xd009642/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xd009642/subscriptions", "organizations_url": "https://api.github.com/users/xd009642/orgs", "repos_url": "https://api.github.com/users/xd009642/repos", "events_url": "https://api.github.com/users/xd009642/events{/privacy}", "received_events_url": "https://api.github.com/users/xd009642/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "792153104c5af9948df6d8def8ab4b2611731eb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/792153104c5af9948df6d8def8ab4b2611731eb6", "html_url": "https://github.com/rust-lang/rust/commit/792153104c5af9948df6d8def8ab4b2611731eb6"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "02514377dfb4e25986d05feba74eee0018a5ada9", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0259179c3c867e9b25894bf8139145d34359acc/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0259179c3c867e9b25894bf8139145d34359acc/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=c0259179c3c867e9b25894bf8139145d34359acc", "patch": "@@ -28,13 +28,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TraitBounds {\n         let mut map = FxHashMap::default();\n         for bound in &gen.where_clause.predicates {\n             if let WherePredicate::BoundPredicate(ref p) = bound {\n-                let h = hash(&p.bounded_ty.node);\n+                let h = hash(&p.bounded_ty);\n                 if let Some(ref v) = map.insert(h, p.bounds) {\n                     let mut hint_string = format!(\"consider combining the bounds: `{:?}: \", p.bounded_ty);\n-                    for &b in v.iter() {\n+                    for b in v.iter() {\n                         hint_string.push_str(&format!(\"{:?}, \", b));\n                     }\n-                    for &b in p.bounds.iter() {\n+                    for b in p.bounds.iter() {\n                         hint_string.push_str(&format!(\"{:?}, \", b));\n                     }\n                     hint_string.truncate(hint_string.len() - 2);"}, {"sha": "4330b55878c3dab8d2f31b9e2032cd647c179d43", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c0259179c3c867e9b25894bf8139145d34359acc/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0259179c3c867e9b25894bf8139145d34359acc/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=c0259179c3c867e9b25894bf8139145d34359acc", "patch": "@@ -3,7 +3,7 @@ use crate::utils::differing_macro_contexts;\n use rustc::hir::ptr::P;\n use rustc::hir::*;\n use rustc::lint::LateContext;\n-use rustc::ty::{self, Ty, TypeckTables};\n+use rustc::ty::{self, TypeckTables};\n use std::collections::hash_map::DefaultHasher;\n use std::hash::{Hash, Hasher};\n use syntax::ast::Name;\n@@ -45,7 +45,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n         match (&left.node, &right.node) {\n             (&StmtKind::Local(ref l), &StmtKind::Local(ref r)) => {\n                 self.eq_pat(&l.pat, &r.pat)\n-                    && both(&l.ty, &r.ty, |l, r| self.eq_ty(*l, *r))\n+                    && both(&l.ty, &r.ty, |l, r| self.eq_ty(l, r))\n                     && both(&l.init, &r.init, |l, r| self.eq_expr(l, r))\n             },\n             (&StmtKind::Expr(ref l), &StmtKind::Expr(ref r)) | (&StmtKind::Semi(ref l), &StmtKind::Semi(ref r)) => {\n@@ -257,8 +257,8 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n         }\n     }\n \n-    pub fn eq_ty(&mut self, left: &Ty<'tcx>, right: &Ty<'tcx>) -> bool {\n-        self.eq_ty_kind(&left.sty, &right.sty)\n+    pub fn eq_ty(&mut self, left: &Ty, right: &Ty) -> bool {\n+        self.eq_ty_kind(&left.node, &right.node)\n     }\n \n     #[allow(clippy::similar_names)]\n@@ -604,8 +604,12 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n         }\n     }\n \n-    pub fn hash_ty(&mut self, ty: &TyKind) {\n-        std::mem::discriminant(&ty.node).hash(&mut self.s);\n+    pub fn hash_ty(&mut self, ty: &Ty) {\n+        self.hash_tykind(&ty.node);\n+    }\n+\n+    pub fn hash_tykind(&mut self, ty: &TyKind) {\n+        std::mem::discriminant(&ty).hash(&mut self.s);\n         match ty {\n             TyKind::Slice(ty) => {\n                 self.hash_ty(ty);\n@@ -665,7 +669,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 for arg in arg_list {\n                     match arg {\n                         GenericArg::Lifetime(ref l) => self.hash_lifetime(l),\n-                        GenericArg::Type(ref ty) => self.hash_ty(ty),\n+                        GenericArg::Type(ref ty) => self.hash_ty(&ty),\n                         GenericArg::Const(ref ca) => {\n                             self.hash_expr(&self.cx.tcx.hir().body(ca.value.body).value);\n                         },"}]}