{"sha": "43fcd7d55ed228a2fef7441e1df201b1bd53e5a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzZmNkN2Q1NWVkMjI4YTJmZWY3NDQxZTFkZjIwMWIxYmQ1M2U1YTA=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-05-08T08:58:53Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-05-08T08:59:09Z"}, "message": "Create a convenience wrapper for `get_global_alloc(id).unwrap()`", "tree": {"sha": "8f16ee673f7df92af98fbb132787dc70e3865108", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f16ee673f7df92af98fbb132787dc70e3865108"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43fcd7d55ed228a2fef7441e1df201b1bd53e5a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43fcd7d55ed228a2fef7441e1df201b1bd53e5a0", "html_url": "https://github.com/rust-lang/rust/commit/43fcd7d55ed228a2fef7441e1df201b1bd53e5a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43fcd7d55ed228a2fef7441e1df201b1bd53e5a0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4572d328103b96ef0c80c00dc9b3455e526e8eab", "url": "https://api.github.com/repos/rust-lang/rust/commits/4572d328103b96ef0c80c00dc9b3455e526e8eab", "html_url": "https://github.com/rust-lang/rust/commit/4572d328103b96ef0c80c00dc9b3455e526e8eab"}], "stats": {"total": 69, "additions": 34, "deletions": 35}, "files": [{"sha": "856f989bc10a12802f0a755315785704ab92fb46", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/43fcd7d55ed228a2fef7441e1df201b1bd53e5a0/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43fcd7d55ed228a2fef7441e1df201b1bd53e5a0/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=43fcd7d55ed228a2fef7441e1df201b1bd53e5a0", "patch": "@@ -244,8 +244,8 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                 }\n             }\n             Scalar::Ptr(ptr) => {\n-                let base_addr = match self.tcx.get_global_alloc(ptr.alloc_id) {\n-                    Some(GlobalAlloc::Memory(alloc)) => {\n+                let base_addr = match self.tcx.global_alloc(ptr.alloc_id) {\n+                    GlobalAlloc::Memory(alloc) => {\n                         let init = const_alloc_to_llvm(self, alloc);\n                         let value = match alloc.mutability {\n                             Mutability::Mut => self.static_addr_of_mut(init, alloc.align, None),\n@@ -256,12 +256,11 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                         }\n                         value\n                     }\n-                    Some(GlobalAlloc::Function(fn_instance)) => self.get_fn_addr(fn_instance),\n-                    Some(GlobalAlloc::Static(def_id)) => {\n+                    GlobalAlloc::Function(fn_instance) => self.get_fn_addr(fn_instance),\n+                    GlobalAlloc::Static(def_id) => {\n                         assert!(self.tcx.is_static(def_id));\n                         self.get_static(def_id)\n                     }\n-                    None => bug!(\"missing allocation {:?}\", ptr.alloc_id),\n                 };\n                 let llval = unsafe {\n                     llvm::LLVMConstInBoundsGEP("}, {"sha": "e663521eee8260727f1158a043b8aabf9d58bf8a", "filename": "src/librustc_middle/mir/interpret/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/43fcd7d55ed228a2fef7441e1df201b1bd53e5a0/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43fcd7d55ed228a2fef7441e1df201b1bd53e5a0/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fmod.rs?ref=43fcd7d55ed228a2fef7441e1df201b1bd53e5a0", "patch": "@@ -197,7 +197,7 @@ pub fn specialized_encode_alloc_id<'tcx, E: Encoder>(\n     tcx: TyCtxt<'tcx>,\n     alloc_id: AllocId,\n ) -> Result<(), E::Error> {\n-    match tcx.get_global_alloc(alloc_id).expect(\"no value for given alloc ID\") {\n+    match tcx.global_alloc(alloc_id) {\n         GlobalAlloc::Memory(alloc) => {\n             trace!(\"encoding {:?} with {:#?}\", alloc_id, alloc);\n             AllocDiscriminant::Alloc.encode(encoder)?;\n@@ -513,6 +513,15 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.alloc_map.lock().alloc_map.get(&id).cloned()\n     }\n \n+    #[inline]\n+    #[track_caller]\n+    pub fn global_alloc(&self, id: AllocId) -> GlobalAlloc<'tcx> {\n+        match self.get_global_alloc(id) {\n+            Some(alloc) => alloc,\n+            None => bug!(\"could not find allocation for {}\", id),\n+        }\n+    }\n+\n     /// Freezes an `AllocId` created with `reserve` by pointing it at an `Allocation`. Trying to\n     /// call this function twice, even with the same `Allocation` will ICE the compiler.\n     pub fn set_alloc_id_memory(&self, id: AllocId, mem: &'tcx Allocation) {"}, {"sha": "a32ac6100100f555d1f4de17aeae2a476693b8cc", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/43fcd7d55ed228a2fef7441e1df201b1bd53e5a0/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43fcd7d55ed228a2fef7441e1df201b1bd53e5a0/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=43fcd7d55ed228a2fef7441e1df201b1bd53e5a0", "patch": "@@ -2410,13 +2410,9 @@ pub struct Constant<'tcx> {\n impl Constant<'tcx> {\n     pub fn check_static_ptr(&self, tcx: TyCtxt<'_>) -> Option<DefId> {\n         match self.literal.val.try_to_scalar() {\n-            Some(Scalar::Ptr(ptr)) => match tcx.get_global_alloc(ptr.alloc_id) {\n-                Some(GlobalAlloc::Static(def_id)) => Some(def_id),\n-                Some(_) => None,\n-                None => {\n-                    tcx.sess.delay_span_bug(DUMMY_SP, \"MIR cannot contain dangling const pointers\");\n-                    None\n-                }\n+            Some(Scalar::Ptr(ptr)) => match tcx.global_alloc(ptr.alloc_id) {\n+                GlobalAlloc::Static(def_id) => Some(def_id),\n+                _ => None,\n             },\n             _ => None,\n         }"}, {"sha": "94384230a7860b8d84b543b7b005ee59c822d99a", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/43fcd7d55ed228a2fef7441e1df201b1bd53e5a0/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43fcd7d55ed228a2fef7441e1df201b1bd53e5a0/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=43fcd7d55ed228a2fef7441e1df201b1bd53e5a0", "patch": "@@ -956,8 +956,7 @@ pub trait PrettyPrinter<'tcx>:\n             ) => {\n                 let byte_str = self\n                     .tcx()\n-                    .get_global_alloc(ptr.alloc_id)\n-                    .unwrap()\n+                    .global_alloc(ptr.alloc_id)\n                     .unwrap_memory()\n                     .get_bytes(&self.tcx(), ptr, Size::from_bytes(*data))\n                     .unwrap();\n@@ -1021,7 +1020,7 @@ pub trait PrettyPrinter<'tcx>:\n                 )?;\n             }\n             (Scalar::Ptr(ptr), ty::FnPtr(_)) => {\n-                let instance = self.tcx().get_global_alloc(ptr.alloc_id).unwrap().unwrap_fn();\n+                let instance = self.tcx().global_alloc(ptr.alloc_id).unwrap_fn();\n                 self = self.typed_value(\n                     |this| this.print_value_path(instance.def_id(), instance.substs),\n                     |this| this.print_type(ty),"}, {"sha": "9c198dd556ac3b8a70855de75d114a0b7b885e3d", "filename": "src/librustc_middle/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/43fcd7d55ed228a2fef7441e1df201b1bd53e5a0/src%2Flibrustc_middle%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43fcd7d55ed228a2fef7441e1df201b1bd53e5a0/src%2Flibrustc_middle%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Frelate.rs?ref=43fcd7d55ed228a2fef7441e1df201b1bd53e5a0", "patch": "@@ -549,10 +549,8 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n                     if a_val == b_val {\n                         Ok(ConstValue::Scalar(a_val))\n                     } else if let ty::FnPtr(_) = a.ty.kind {\n-                        let a_instance =\n-                            tcx.get_global_alloc(a_val.assert_ptr().alloc_id).unwrap().unwrap_fn();\n-                        let b_instance =\n-                            tcx.get_global_alloc(b_val.assert_ptr().alloc_id).unwrap().unwrap_fn();\n+                        let a_instance = tcx.global_alloc(a_val.assert_ptr().alloc_id).unwrap_fn();\n+                        let b_instance = tcx.global_alloc(b_val.assert_ptr().alloc_id).unwrap_fn();\n                         if a_instance == b_instance {\n                             Ok(ConstValue::Scalar(a_val))\n                         } else {"}, {"sha": "29b4b25496c57cb9235028e3b0492dcde4585b34", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/43fcd7d55ed228a2fef7441e1df201b1bd53e5a0/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43fcd7d55ed228a2fef7441e1df201b1bd53e5a0/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=43fcd7d55ed228a2fef7441e1df201b1bd53e5a0", "patch": "@@ -130,7 +130,7 @@ pub(super) fn op_to_const<'tcx>(\n \n     let to_const_value = |mplace: MPlaceTy<'_>| match mplace.ptr {\n         Scalar::Ptr(ptr) => {\n-            let alloc = ecx.tcx.get_global_alloc(ptr.alloc_id).unwrap().unwrap_memory();\n+            let alloc = ecx.tcx.global_alloc(ptr.alloc_id).unwrap_memory();\n             ConstValue::ByRef { alloc, offset: ptr.offset }\n         }\n         Scalar::Raw { data, .. } => {\n@@ -154,10 +154,9 @@ pub(super) fn op_to_const<'tcx>(\n             },\n             Immediate::ScalarPair(a, b) => {\n                 let (data, start) = match a.not_undef().unwrap() {\n-                    Scalar::Ptr(ptr) => (\n-                        ecx.tcx.get_global_alloc(ptr.alloc_id).unwrap().unwrap_memory(),\n-                        ptr.offset.bytes(),\n-                    ),\n+                    Scalar::Ptr(ptr) => {\n+                        (ecx.tcx.global_alloc(ptr.alloc_id).unwrap_memory(), ptr.offset.bytes())\n+                    }\n                     Scalar::Raw { .. } => (\n                         ecx.tcx\n                             .intern_const_alloc(Allocation::from_byte_aligned_bytes(b\"\" as &[u8])),\n@@ -204,7 +203,7 @@ fn validate_and_turn_into_const<'tcx>(\n         if is_static || cid.promoted.is_some() {\n             let ptr = mplace.ptr.assert_ptr();\n             Ok(ConstValue::ByRef {\n-                alloc: ecx.tcx.get_global_alloc(ptr.alloc_id).unwrap().unwrap_memory(),\n+                alloc: ecx.tcx.global_alloc(ptr.alloc_id).unwrap_memory(),\n                 offset: ptr.offset,\n             })\n         } else {"}, {"sha": "61c365644c7f2d10a09daf5caa73b116c03cefa6", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43fcd7d55ed228a2fef7441e1df201b1bd53e5a0/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43fcd7d55ed228a2fef7441e1df201b1bd53e5a0/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=43fcd7d55ed228a2fef7441e1df201b1bd53e5a0", "patch": "@@ -467,7 +467,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                     })?;\n                 // Make sure we use the ID of the resolved memory, not the lazy one!\n                 let id = raw_const.alloc_id;\n-                let allocation = tcx.get_global_alloc(id).unwrap().unwrap_memory();\n+                let allocation = tcx.global_alloc(id).unwrap_memory();\n \n                 (allocation, Some(def_id))\n             }"}, {"sha": "ef08cbb468f6ae4f15cff9618fd0813d8750a4bf", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43fcd7d55ed228a2fef7441e1df201b1bd53e5a0/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43fcd7d55ed228a2fef7441e1df201b1bd53e5a0/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=43fcd7d55ed228a2fef7441e1df201b1bd53e5a0", "patch": "@@ -1101,7 +1101,7 @@ where\n         raw: RawConst<'tcx>,\n     ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n         // This must be an allocation in `tcx`\n-        assert!(self.tcx.get_global_alloc(raw.alloc_id).is_some());\n+        let _ = self.tcx.global_alloc(raw.alloc_id);\n         let ptr = self.tag_global_base_pointer(Pointer::from(raw.alloc_id));\n         let layout = self.layout_of(raw.ty)?;\n         Ok(MPlaceTy::from_aligned_ptr(ptr, layout))"}, {"sha": "4648100e3b701ac529ac6a772389655ba3d9e235", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/43fcd7d55ed228a2fef7441e1df201b1bd53e5a0/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43fcd7d55ed228a2fef7441e1df201b1bd53e5a0/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=43fcd7d55ed228a2fef7441e1df201b1bd53e5a0", "patch": "@@ -1136,29 +1136,28 @@ fn create_mono_items_for_default_impls<'tcx>(\n \n /// Scans the miri alloc in order to find function calls, closures, and drop-glue.\n fn collect_miri<'tcx>(tcx: TyCtxt<'tcx>, alloc_id: AllocId, output: &mut Vec<MonoItem<'tcx>>) {\n-    match tcx.get_global_alloc(alloc_id) {\n-        Some(GlobalAlloc::Static(def_id)) => {\n+    match tcx.global_alloc(alloc_id) {\n+        GlobalAlloc::Static(def_id) => {\n             let instance = Instance::mono(tcx, def_id);\n             if should_monomorphize_locally(tcx, &instance) {\n                 trace!(\"collecting static {:?}\", def_id);\n                 output.push(MonoItem::Static(def_id));\n             }\n         }\n-        Some(GlobalAlloc::Memory(alloc)) => {\n+        GlobalAlloc::Memory(alloc) => {\n             trace!(\"collecting {:?} with {:#?}\", alloc_id, alloc);\n             for &((), inner) in alloc.relocations().values() {\n                 rustc_data_structures::stack::ensure_sufficient_stack(|| {\n                     collect_miri(tcx, inner, output);\n                 });\n             }\n         }\n-        Some(GlobalAlloc::Function(fn_instance)) => {\n+        GlobalAlloc::Function(fn_instance) => {\n             if should_monomorphize_locally(tcx, &fn_instance) {\n                 trace!(\"collecting {:?} with {:#?}\", alloc_id, fn_instance);\n                 output.push(create_fn_mono_item(fn_instance));\n             }\n         }\n-        None => bug!(\"alloc id without corresponding allocation: {}\", alloc_id),\n     }\n }\n "}, {"sha": "9e60746b448e3baab9baca4d6b6850c1dc81fded", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/43fcd7d55ed228a2fef7441e1df201b1bd53e5a0/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43fcd7d55ed228a2fef7441e1df201b1bd53e5a0/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=43fcd7d55ed228a2fef7441e1df201b1bd53e5a0", "patch": "@@ -286,7 +286,7 @@ impl<'tcx> LiteralExpander<'tcx> {\n             (ConstValue::Scalar(p), x, y) if x == y => {\n                 match p {\n                     Scalar::Ptr(p) => {\n-                        let alloc = self.tcx.get_global_alloc(p.alloc_id).unwrap().unwrap_memory();\n+                        let alloc = self.tcx.global_alloc(p.alloc_id).unwrap_memory();\n                         ConstValue::ByRef { alloc, offset: p.offset }\n                     }\n                     Scalar::Raw { .. } => {\n@@ -305,7 +305,7 @@ impl<'tcx> LiteralExpander<'tcx> {\n             (ConstValue::Scalar(Scalar::Ptr(p)), ty::Array(t, n), ty::Slice(u)) => {\n                 assert_eq!(t, u);\n                 ConstValue::Slice {\n-                    data: self.tcx.get_global_alloc(p.alloc_id).unwrap().unwrap_memory(),\n+                    data: self.tcx.global_alloc(p.alloc_id).unwrap_memory(),\n                     start: p.offset.bytes().try_into().unwrap(),\n                     end: n.eval_usize(self.tcx, ty::ParamEnv::empty()).try_into().unwrap(),\n                 }"}]}