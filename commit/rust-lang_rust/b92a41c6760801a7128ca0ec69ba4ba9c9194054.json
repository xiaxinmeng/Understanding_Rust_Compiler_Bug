{"sha": "b92a41c6760801a7128ca0ec69ba4ba9c9194054", "node_id": "C_kwDOAAsO6NoAKGI5MmE0MWM2NzYwODAxYTcxMjhjYTBlYzY5YmE0YmE5YzkxOTQwNTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-21T05:54:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-21T05:54:13Z"}, "message": "Auto merge of #110636 - matthiaskrgr:rollup-faa33c6, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #110365 (ship tools with sysroot)\n - #110555 (Substitute missing trait items suggestion correctly)\n - #110578 (fix(error): normalize whitespace during msg_to_buffer)\n - #110597 (remove unused ftl messages)\n - #110611 (Add regression test for #46506)\n - #110618 (Track if EvalCtxt has been tainted, make sure it can't be used to make query responses after)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "15f0278bd32303a444414f77da5dc49ea1d83b14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15f0278bd32303a444414f77da5dc49ea1d83b14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b92a41c6760801a7128ca0ec69ba4ba9c9194054", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b92a41c6760801a7128ca0ec69ba4ba9c9194054", "html_url": "https://github.com/rust-lang/rust/commit/b92a41c6760801a7128ca0ec69ba4ba9c9194054", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b92a41c6760801a7128ca0ec69ba4ba9c9194054/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77778e075d225f1a72523fe7bec6b76e24260692", "url": "https://api.github.com/repos/rust-lang/rust/commits/77778e075d225f1a72523fe7bec6b76e24260692", "html_url": "https://github.com/rust-lang/rust/commit/77778e075d225f1a72523fe7bec6b76e24260692"}, {"sha": "77de5f0754bbd7d6e973eb7544cfacb11901bdbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/77de5f0754bbd7d6e973eb7544cfacb11901bdbc", "html_url": "https://github.com/rust-lang/rust/commit/77de5f0754bbd7d6e973eb7544cfacb11901bdbc"}], "stats": {"total": 294, "additions": 210, "deletions": 84}, "files": [{"sha": "2498ae2b7bce541fc752740c0e1281853dd0cea6", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b92a41c6760801a7128ca0ec69ba4ba9c9194054/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92a41c6760801a7128ca0ec69ba4ba9c9194054/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=b92a41c6760801a7128ca0ec69ba4ba9c9194054", "patch": "@@ -1336,6 +1336,7 @@ impl EmitterWriter {\n         //                see?\n         for (text, style) in msg.iter() {\n             let text = self.translate_message(text, args).map_err(Report::new).unwrap();\n+            let text = &normalize_whitespace(&text);\n             let lines = text.split('\\n').collect::<Vec<_>>();\n             if lines.len() > 1 {\n                 for (i, line) in lines.iter().enumerate() {"}, {"sha": "51ec5dd7a285fb3d60a651ef3f911f15c114d38c", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b92a41c6760801a7128ca0ec69ba4ba9c9194054/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92a41c6760801a7128ca0ec69ba4ba9c9194054/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=b92a41c6760801a7128ca0ec69ba4ba9c9194054", "patch": "@@ -863,7 +863,7 @@ fn check_impl_items_against_trait<'tcx>(\n         if !missing_items.is_empty() {\n             let full_impl_span =\n                 tcx.hir().span_with_body(tcx.hir().local_def_id_to_hir_id(impl_id));\n-            missing_items_err(tcx, tcx.def_span(impl_id), &missing_items, full_impl_span);\n+            missing_items_err(tcx, impl_id, &missing_items, full_impl_span);\n         }\n \n         if let Some(missing_items) = must_implement_one_of {"}, {"sha": "4b3f3cf169dc0e9f473eea5d61c4674034534fd9", "filename": "compiler/rustc_hir_analysis/src/check/mod.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b92a41c6760801a7128ca0ec69ba4ba9c9194054/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92a41c6760801a7128ca0ec69ba4ba9c9194054/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs?ref=b92a41c6760801a7128ca0ec69ba4ba9c9194054", "patch": "@@ -198,7 +198,7 @@ fn report_forbidden_specialization(tcx: TyCtxt<'_>, impl_item: DefId, parent_imp\n \n fn missing_items_err(\n     tcx: TyCtxt<'_>,\n-    impl_span: Span,\n+    impl_def_id: LocalDefId,\n     missing_items: &[ty::AssocItem],\n     full_impl_span: Span,\n ) {\n@@ -211,6 +211,7 @@ fn missing_items_err(\n         .collect::<Vec<_>>()\n         .join(\"`, `\");\n \n+    let impl_span = tcx.def_span(impl_def_id);\n     let mut err = struct_span_err!(\n         tcx.sess,\n         impl_span,\n@@ -229,7 +230,11 @@ fn missing_items_err(\n         tcx.sess.source_map().indentation_before(sugg_sp).unwrap_or_else(|| String::new());\n \n     for &trait_item in missing_items {\n-        let snippet = suggestion_signature(trait_item, tcx);\n+        let snippet = suggestion_signature(\n+            tcx,\n+            trait_item,\n+            tcx.impl_trait_ref(impl_def_id).unwrap().subst_identity(),\n+        );\n         let code = format!(\"{}{}\\n{}\", padding, snippet, padding);\n         let msg = format!(\"implement the missing item: `{snippet}`\");\n         let appl = Applicability::HasPlaceholders;\n@@ -301,11 +306,11 @@ fn default_body_is_unstable(\n /// Re-sugar `ty::GenericPredicates` in a way suitable to be used in structured suggestions.\n fn bounds_from_generic_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    predicates: ty::GenericPredicates<'tcx>,\n+    predicates: impl IntoIterator<Item = (ty::Predicate<'tcx>, Span)>,\n ) -> (String, String) {\n     let mut types: FxHashMap<Ty<'tcx>, Vec<DefId>> = FxHashMap::default();\n     let mut projections = vec![];\n-    for (predicate, _) in predicates.predicates {\n+    for (predicate, _) in predicates {\n         debug!(\"predicate {:?}\", predicate);\n         let bound_predicate = predicate.kind();\n         match bound_predicate.skip_binder() {\n@@ -367,7 +372,7 @@ fn fn_sig_suggestion<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     sig: ty::FnSig<'tcx>,\n     ident: Ident,\n-    predicates: ty::GenericPredicates<'tcx>,\n+    predicates: impl IntoIterator<Item = (ty::Predicate<'tcx>, Span)>,\n     assoc: ty::AssocItem,\n ) -> String {\n     let args = sig\n@@ -436,7 +441,17 @@ pub fn ty_kind_suggestion(ty: Ty<'_>) -> Option<&'static str> {\n /// Return placeholder code for the given associated item.\n /// Similar to `ty::AssocItem::suggestion`, but appropriate for use as the code snippet of a\n /// structured suggestion.\n-fn suggestion_signature(assoc: ty::AssocItem, tcx: TyCtxt<'_>) -> String {\n+fn suggestion_signature<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    assoc: ty::AssocItem,\n+    impl_trait_ref: ty::TraitRef<'tcx>,\n+) -> String {\n+    let substs = ty::InternalSubsts::identity_for_item(tcx, assoc.def_id).rebase_onto(\n+        tcx,\n+        assoc.container_id(tcx),\n+        impl_trait_ref.with_self_ty(tcx, tcx.types.self_param).substs,\n+    );\n+\n     match assoc.kind {\n         ty::AssocKind::Fn => {\n             // We skip the binder here because the binder would deanonymize all\n@@ -445,16 +460,22 @@ fn suggestion_signature(assoc: ty::AssocItem, tcx: TyCtxt<'_>) -> String {\n             // regions just fine, showing `fn(&MyType)`.\n             fn_sig_suggestion(\n                 tcx,\n-                tcx.fn_sig(assoc.def_id).subst_identity().skip_binder(),\n+                tcx.fn_sig(assoc.def_id).subst(tcx, substs).skip_binder(),\n                 assoc.ident(tcx),\n-                tcx.predicates_of(assoc.def_id),\n+                tcx.predicates_of(assoc.def_id).instantiate_own(tcx, substs),\n                 assoc,\n             )\n         }\n-        ty::AssocKind::Type => format!(\"type {} = Type;\", assoc.name),\n+        ty::AssocKind::Type => {\n+            let (generics, where_clauses) = bounds_from_generic_predicates(\n+                tcx,\n+                tcx.predicates_of(assoc.def_id).instantiate_own(tcx, substs),\n+            );\n+            format!(\"type {}{generics} = /* Type */{where_clauses};\", assoc.name)\n+        }\n         ty::AssocKind::Const => {\n             let ty = tcx.type_of(assoc.def_id).subst_identity();\n-            let val = ty_kind_suggestion(ty).unwrap_or(\"value\");\n+            let val = ty_kind_suggestion(ty).unwrap_or(\"todo!()\");\n             format!(\"const {}: {} = {};\", assoc.name, ty, val)\n         }\n     }"}, {"sha": "6d40df7d0ccfa2baa3a3a0f417b45619d5474fbd", "filename": "compiler/rustc_hir_typeck/messages.ftl", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b92a41c6760801a7128ca0ec69ba4ba9c9194054/compiler%2Frustc_hir_typeck%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/b92a41c6760801a7128ca0ec69ba4ba9c9194054/compiler%2Frustc_hir_typeck%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fmessages.ftl?ref=b92a41c6760801a7128ca0ec69ba4ba9c9194054", "patch": "@@ -3,21 +3,6 @@ hir_typeck_field_multiply_specified_in_initializer =\n     .label = used more than once\n     .previous_use_label = first use of `{$ident}`\n \n-hir_typeck_copy_impl_on_type_with_dtor =\n-    the trait `Copy` cannot be implemented for this type; the type has a destructor\n-    .label = `Copy` not allowed on types with destructors\n-\n-hir_typeck_multiple_relaxed_default_bounds =\n-    type parameter has more than one relaxed default bound, only one is supported\n-\n-hir_typeck_copy_impl_on_non_adt =\n-    the trait `Copy` cannot be implemented for this type\n-    .label = type is not a structure or enumeration\n-\n-hir_typeck_trait_object_declared_with_no_traits =\n-    at least one trait is required for an object type\n-    .alias_span = this alias does not contain a trait\n-\n hir_typeck_functional_record_update_on_non_struct =\n     functional record update syntax requires a struct\n "}, {"sha": "bd52957d162f202dd50de0e80863e6286173fe0c", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b92a41c6760801a7128ca0ec69ba4ba9c9194054/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92a41c6760801a7128ca0ec69ba4ba9c9194054/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs?ref=b92a41c6760801a7128ca0ec69ba4ba9c9194054", "patch": "@@ -57,6 +57,14 @@ pub struct EvalCtxt<'a, 'tcx> {\n     pub(super) search_graph: &'a mut SearchGraph<'tcx>,\n \n     pub(super) nested_goals: NestedGoals<'tcx>,\n+\n+    // Has this `EvalCtxt` errored out with `NoSolution` in `try_evaluate_added_goals`?\n+    //\n+    // If so, then it can no longer be used to make a canonical query response,\n+    // since subsequent calls to `try_evaluate_added_goals` have possibly dropped\n+    // ambiguous goals. Instead, a probe needs to be introduced somewhere in the\n+    // evaluation code.\n+    tainted: Result<(), NoSolution>,\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq)]\n@@ -121,6 +129,7 @@ impl<'tcx> InferCtxtEvalExt<'tcx> for InferCtxt<'tcx> {\n             max_input_universe: ty::UniverseIndex::ROOT,\n             var_values: CanonicalVarValues::dummy(),\n             nested_goals: NestedGoals::new(),\n+            tainted: Ok(()),\n         };\n         let result = ecx.evaluate_goal(IsNormalizesToHack::No, goal);\n \n@@ -172,6 +181,7 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n                 max_input_universe: canonical_goal.max_universe,\n                 search_graph,\n                 nested_goals: NestedGoals::new(),\n+                tainted: Ok(()),\n             };\n             ecx.compute_goal(goal)\n         })\n@@ -391,6 +401,10 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n             },\n         );\n \n+        if response.is_err() {\n+            self.tainted = Err(NoSolution);\n+        }\n+\n         self.nested_goals = goals;\n         response\n     }\n@@ -404,6 +418,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             max_input_universe: self.max_input_universe,\n             search_graph: self.search_graph,\n             nested_goals: self.nested_goals.clone(),\n+            tainted: self.tainted,\n         };\n         self.infcx.probe(|_| f(&mut ecx))\n     }"}, {"sha": "2dea36811d80bc2ee8f48a3d24344ab60d627870", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt/canonical.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b92a41c6760801a7128ca0ec69ba4ba9c9194054/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92a41c6760801a7128ca0ec69ba4ba9c9194054/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt%2Fcanonical.rs?ref=b92a41c6760801a7128ca0ec69ba4ba9c9194054", "patch": "@@ -51,6 +51,13 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         certainty: Certainty,\n     ) -> QueryResult<'tcx> {\n         let goals_certainty = self.try_evaluate_added_goals()?;\n+        assert_eq!(\n+            self.tainted,\n+            Ok(()),\n+            \"EvalCtxt is tainted -- nested goals may have been dropped in a \\\n+            previous call to `try_evaluate_added_goals!`\"\n+        );\n+\n         let certainty = certainty.unify_with(goals_certainty);\n \n         let external_constraints = self.compute_external_query_constraints()?;"}, {"sha": "ab307d4d038c5b79c3be579571fb381bb8cbcfcf", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b92a41c6760801a7128ca0ec69ba4ba9c9194054/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92a41c6760801a7128ca0ec69ba4ba9c9194054/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=b92a41c6760801a7128ca0ec69ba4ba9c9194054", "patch": "@@ -1328,7 +1328,6 @@ impl Step for Sysroot {\n                     true\n                 }\n             });\n-            return INTERNER.intern_path(sysroot);\n         }\n \n         // Symlink the source root into the same location inside the sysroot,"}, {"sha": "f8da6df0c7ccd0e7a841d1480b85fb3030f494fc", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b92a41c6760801a7128ca0ec69ba4ba9c9194054/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92a41c6760801a7128ca0ec69ba4ba9c9194054/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=b92a41c6760801a7128ca0ec69ba4ba9c9194054", "patch": "@@ -748,6 +748,7 @@ macro_rules! tool_extended {\n        stable = $stable:expr\n        $(,tool_std = $tool_std:literal)?\n        $(,allow_features = $allow_features:expr)?\n+       $(,add_bins_to_sysroot = $add_bins_to_sysroot:expr)?\n        ;)+) => {\n         $(\n             #[derive(Debug, Clone, Hash, PartialEq, Eq)]\n@@ -790,7 +791,7 @@ macro_rules! tool_extended {\n \n             #[allow(unused_mut)]\n             fn run(mut $sel, $builder: &Builder<'_>) -> Option<PathBuf> {\n-                $builder.ensure(ToolBuild {\n+                let tool = $builder.ensure(ToolBuild {\n                     compiler: $sel.compiler,\n                     target: $sel.target,\n                     tool: $tool_name,\n@@ -800,7 +801,27 @@ macro_rules! tool_extended {\n                     is_optional_tool: true,\n                     source_type: SourceType::InTree,\n                     allow_features: concat!($($allow_features)*),\n-                })\n+                })?;\n+\n+                if (false $(|| !$add_bins_to_sysroot.is_empty())?) && $sel.compiler.stage > 0 {\n+                    let bindir = $builder.sysroot($sel.compiler).join(\"bin\");\n+                    t!(fs::create_dir_all(&bindir));\n+\n+                    #[allow(unused_variables)]\n+                    let tools_out = $builder\n+                        .cargo_out($sel.compiler, Mode::ToolRustc, $sel.target);\n+\n+                    $(for add_bin in $add_bins_to_sysroot {\n+                        let bin_source = tools_out.join(exe(add_bin, $sel.target));\n+                        let bin_destination = bindir.join(exe(add_bin, $sel.compiler.host));\n+                        $builder.copy(&bin_source, &bin_destination);\n+                    })?\n+\n+                    let tool = bindir.join(exe($tool_name, $sel.compiler.host));\n+                    Some(tool)\n+                } else {\n+                    Some(tool)\n+                }\n             }\n         }\n         )+\n@@ -814,15 +835,15 @@ macro_rules! tool_extended {\n tool_extended!((self, builder),\n     Cargofmt, \"src/tools/rustfmt\", \"cargo-fmt\", stable=true;\n     CargoClippy, \"src/tools/clippy\", \"cargo-clippy\", stable=true;\n-    Clippy, \"src/tools/clippy\", \"clippy-driver\", stable=true;\n-    Miri, \"src/tools/miri\", \"miri\", stable=false;\n-    CargoMiri, \"src/tools/miri/cargo-miri\", \"cargo-miri\", stable=true;\n+    Clippy, \"src/tools/clippy\", \"clippy-driver\", stable=true, add_bins_to_sysroot = [\"clippy-driver\", \"cargo-clippy\"];\n+    Miri, \"src/tools/miri\", \"miri\", stable=false, add_bins_to_sysroot = [\"miri\"];\n+    CargoMiri, \"src/tools/miri/cargo-miri\", \"cargo-miri\", stable=true, add_bins_to_sysroot = [\"cargo-miri\"];\n     // FIXME: tool_std is not quite right, we shouldn't allow nightly features.\n     // But `builder.cargo` doesn't know how to handle ToolBootstrap in stages other than 0,\n     // and this is close enough for now.\n     Rls, \"src/tools/rls\", \"rls\", stable=true, tool_std=true;\n     RustDemangler, \"src/tools/rust-demangler\", \"rust-demangler\", stable=false, tool_std=true;\n-    Rustfmt, \"src/tools/rustfmt\", \"rustfmt\", stable=true;\n+    Rustfmt, \"src/tools/rustfmt\", \"rustfmt\", stable=true, add_bins_to_sysroot = [\"rustfmt\", \"cargo-fmt\"];\n );\n \n impl<'a> Builder<'a> {"}, {"sha": "d8953eaf5970a80bd7673f35153a8a759333af2e", "filename": "tests/rustdoc/issue-46506-pub-reexport-of-pub-reexport.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Frustdoc%2Fissue-46506-pub-reexport-of-pub-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Frustdoc%2Fissue-46506-pub-reexport-of-pub-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-46506-pub-reexport-of-pub-reexport.rs?ref=b92a41c6760801a7128ca0ec69ba4ba9c9194054", "patch": "@@ -0,0 +1,24 @@\n+// This is a regression test for <https://github.com/rust-lang/rust/issues/46506>.\n+// This test ensures that if public re-exported is re-exported, it won't be inlined.\n+\n+#![crate_name = \"foo\"]\n+\n+// @has 'foo/associations/index.html'\n+// @count - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 1\n+// @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Traits'\n+// @has - '//*[@id=\"main-content\"]//a[@href=\"trait.GroupedBy.html\"]' 'GroupedBy'\n+// @has 'foo/associations/trait.GroupedBy.html'\n+pub mod associations {\n+    mod belongs_to {\n+        pub trait GroupedBy {}\n+    }\n+    pub use self::belongs_to::GroupedBy;\n+}\n+\n+// @has 'foo/prelude/index.html'\n+// @count - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 1\n+// @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Re-exports'\n+// @has - '//*[@id=\"main-content\"]//*[@id=\"reexport.GroupedBy\"]' 'pub use associations::GroupedBy;'\n+pub mod prelude {\n+    pub use associations::GroupedBy;\n+}"}, {"sha": "6bdb9ded4827649aeaac5c81a29d4b9c8bf01c79", "filename": "tests/ui/async-await/issue-74047.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Fui%2Fasync-await%2Fissue-74047.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Fui%2Fasync-await%2Fissue-74047.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-74047.stderr?ref=b92a41c6760801a7128ca0ec69ba4ba9c9194054", "patch": "@@ -4,8 +4,8 @@ error[E0046]: not all trait items implemented, missing: `Error`, `try_from`\n LL | impl TryFrom<OtherStream> for MyStream {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `Error`, `try_from` in implementation\n    |\n-   = help: implement the missing item: `type Error = Type;`\n-   = help: implement the missing item: `fn try_from(_: T) -> Result<Self, <Self as TryFrom<T>>::Error> { todo!() }`\n+   = help: implement the missing item: `type Error = /* Type */;`\n+   = help: implement the missing item: `fn try_from(_: OtherStream) -> Result<Self, <Self as TryFrom<OtherStream>>::Error> { todo!() }`\n \n error: aborting due to previous error\n "}, {"sha": "a6fb96ac066494a587f3f553fc801f47b894613a", "filename": "tests/ui/extenv/issue-110547.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Fui%2Fextenv%2Fissue-110547.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Fui%2Fextenv%2Fissue-110547.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextenv%2Fissue-110547.rs?ref=b92a41c6760801a7128ca0ec69ba4ba9c9194054", "patch": "@@ -0,0 +1,7 @@\n+// compile-flags: -C debug-assertions\n+\n+fn main() {\n+    env!{\"\\t\"}; //~ ERROR not defined at compile time\n+    env!(\"\\t\"); //~ ERROR not defined at compile time\n+    env!(\"\\u{2069}\"); //~ ERROR not defined at compile time\n+}"}, {"sha": "1219630d346a45af9eafc0f16cda12401b74dd99", "filename": "tests/ui/extenv/issue-110547.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Fui%2Fextenv%2Fissue-110547.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Fui%2Fextenv%2Fissue-110547.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextenv%2Fissue-110547.stderr?ref=b92a41c6760801a7128ca0ec69ba4ba9c9194054", "patch": "@@ -0,0 +1,29 @@\n+error: environment variable `    ` not defined at compile time\n+  --> $DIR/issue-110547.rs:4:5\n+   |\n+LL |     env!{\"\\t\"};\n+   |     ^^^^^^^^^^\n+   |\n+   = help: use `std::env::var(\"    \")` to read the variable at run time\n+   = note: this error originates in the macro `env` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: environment variable `    ` not defined at compile time\n+  --> $DIR/issue-110547.rs:5:5\n+   |\n+LL |     env!(\"\\t\");\n+   |     ^^^^^^^^^^\n+   |\n+   = help: use `std::env::var(\"    \")` to read the variable at run time\n+   = note: this error originates in the macro `env` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: environment variable `` not defined at compile time\n+  --> $DIR/issue-110547.rs:6:5\n+   |\n+LL |     env!(\"\\u{2069}\");\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `std::env::var(\"\")` to read the variable at run time\n+   = note: this error originates in the macro `env` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "5b10aab4b3f8df974e497bbcd19e33e141d4c019", "filename": "tests/ui/generic-associated-types/auxiliary/missing-item-sugg.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Fui%2Fgeneric-associated-types%2Fauxiliary%2Fmissing-item-sugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Fui%2Fgeneric-associated-types%2Fauxiliary%2Fmissing-item-sugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fauxiliary%2Fmissing-item-sugg.rs?ref=b92a41c6760801a7128ca0ec69ba4ba9c9194054", "patch": "@@ -0,0 +1,5 @@\n+pub trait Foo {\n+    type Gat<T>\n+    where\n+        T: std::fmt::Display;\n+}"}, {"sha": "35d573d818846f78e1a3eb5e94424e7b24622b9c", "filename": "tests/ui/generic-associated-types/missing-item-sugg.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Fui%2Fgeneric-associated-types%2Fmissing-item-sugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Fui%2Fgeneric-associated-types%2Fmissing-item-sugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fmissing-item-sugg.rs?ref=b92a41c6760801a7128ca0ec69ba4ba9c9194054", "patch": "@@ -0,0 +1,11 @@\n+// aux-build:missing-item-sugg.rs\n+\n+extern crate missing_item_sugg;\n+\n+struct Local;\n+impl missing_item_sugg::Foo for Local {\n+    //~^ ERROR not all trait items implemented, missing: `Gat`\n+}\n+//~^ HELP implement the missing item: `type Gat<T> = /* Type */ where T: std::fmt::Display;`\n+\n+fn main() {}"}, {"sha": "378115f6d38938130b866a87c24bc5e6e65e5cd8", "filename": "tests/ui/generic-associated-types/missing-item-sugg.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Fui%2Fgeneric-associated-types%2Fmissing-item-sugg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Fui%2Fgeneric-associated-types%2Fmissing-item-sugg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fmissing-item-sugg.stderr?ref=b92a41c6760801a7128ca0ec69ba4ba9c9194054", "patch": "@@ -0,0 +1,11 @@\n+error[E0046]: not all trait items implemented, missing: `Gat`\n+  --> $DIR/missing-item-sugg.rs:6:1\n+   |\n+LL | impl missing_item_sugg::Foo for Local {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `Gat` in implementation\n+   |\n+   = help: implement the missing item: `type Gat<T> = /* Type */ where T: std::fmt::Display;`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0046`."}, {"sha": "e849f5d0490d7504fcfd4a7ed5a066e07adda225", "filename": "tests/ui/issues/issue-3344.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Fui%2Fissues%2Fissue-3344.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Fui%2Fissues%2Fissue-3344.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-3344.stderr?ref=b92a41c6760801a7128ca0ec69ba4ba9c9194054", "patch": "@@ -4,7 +4,7 @@ error[E0046]: not all trait items implemented, missing: `partial_cmp`\n LL | impl PartialOrd for Thing {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ missing `partial_cmp` in implementation\n    |\n-   = help: implement the missing item: `fn partial_cmp(&self, _: &Rhs) -> Option<std::cmp::Ordering> { todo!() }`\n+   = help: implement the missing item: `fn partial_cmp(&self, _: &Thing) -> Option<std::cmp::Ordering> { todo!() }`\n \n error: aborting due to previous error\n "}, {"sha": "835c9b2aa4840b90de27d3afd97f7bc5be5b23d3", "filename": "tests/ui/missing/missing-items/m2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Fui%2Fmissing%2Fmissing-items%2Fm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Fui%2Fmissing%2Fmissing-items%2Fm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing%2Fmissing-items%2Fm2.stderr?ref=b92a41c6760801a7128ca0ec69ba4ba9c9194054", "patch": "@@ -5,7 +5,7 @@ LL | impl m1::X for X {\n    | ^^^^^^^^^^^^^^^^ missing `CONSTANT`, `Type`, `method`, `method2`, `method3`, `method4`, `method5` in implementation\n    |\n    = help: implement the missing item: `const CONSTANT: u32 = 42;`\n-   = help: implement the missing item: `type Type = Type;`\n+   = help: implement the missing item: `type Type = /* Type */;`\n    = help: implement the missing item: `fn method(&self, _: String) -> <Self as m1::X>::Type { todo!() }`\n    = help: implement the missing item: `fn method2(self: Box<Self>, _: String) -> <Self as m1::X>::Type { todo!() }`\n    = help: implement the missing item: `fn method3(_: &Self, _: String) -> <Self as m1::X>::Type { todo!() }`"}, {"sha": "cd854e61f2f4711689dfe1bd6f6f931dc6a4255f", "filename": "tests/ui/span/issue-23729.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Fui%2Fspan%2Fissue-23729.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Fui%2Fspan%2Fissue-23729.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-23729.stderr?ref=b92a41c6760801a7128ca0ec69ba4ba9c9194054", "patch": "@@ -4,7 +4,7 @@ error[E0046]: not all trait items implemented, missing: `Item`\n LL |         impl Iterator for Recurrence {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `Item` in implementation\n    |\n-   = help: implement the missing item: `type Item = Type;`\n+   = help: implement the missing item: `type Item = /* Type */;`\n \n error: aborting due to previous error\n "}, {"sha": "83a9e8c9b9876039f8df73b64f0d0b46119b9217", "filename": "tests/ui/span/issue-23827.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Fui%2Fspan%2Fissue-23827.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Fui%2Fspan%2Fissue-23827.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-23827.stderr?ref=b92a41c6760801a7128ca0ec69ba4ba9c9194054", "patch": "@@ -4,7 +4,7 @@ error[E0046]: not all trait items implemented, missing: `Output`\n LL | impl<C: Component> FnOnce<(C,)> for Prototype {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `Output` in implementation\n    |\n-   = help: implement the missing item: `type Output = Type;`\n+   = help: implement the missing item: `type Output = /* Type */;`\n \n error: aborting due to previous error\n "}, {"sha": "cf666e8b4a7a648e9ada29fd3dc4c32d562b2f7d", "filename": "tests/ui/span/issue-24356.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Fui%2Fspan%2Fissue-24356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Fui%2Fspan%2Fissue-24356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-24356.stderr?ref=b92a41c6760801a7128ca0ec69ba4ba9c9194054", "patch": "@@ -4,7 +4,7 @@ error[E0046]: not all trait items implemented, missing: `Target`\n LL |         impl Deref for Thing {\n    |         ^^^^^^^^^^^^^^^^^^^^ missing `Target` in implementation\n    |\n-   = help: implement the missing item: `type Target = Type;`\n+   = help: implement the missing item: `type Target = /* Type */;`\n \n error: aborting due to previous error\n "}, {"sha": "b026035a6a1689ad4dabffaa10e2cdbc9a243261", "filename": "tests/ui/suggestions/auxiliary/missing-assoc-fn-applicable-suggestions.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Fui%2Fsuggestions%2Fauxiliary%2Fmissing-assoc-fn-applicable-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Fui%2Fsuggestions%2Fauxiliary%2Fmissing-assoc-fn-applicable-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fauxiliary%2Fmissing-assoc-fn-applicable-suggestions.rs?ref=b92a41c6760801a7128ca0ec69ba4ba9c9194054", "patch": "@@ -0,0 +1,16 @@\n+pub trait TraitB {\n+    type Item;\n+}\n+\n+pub trait TraitA<A> {\n+    type Type;\n+\n+    fn bar<T>(_: T) -> Self;\n+\n+    fn baz<T>(_: T) -> Self\n+    where\n+        T: TraitB,\n+        <T as TraitB>::Item: Copy;\n+\n+    const A: usize;\n+}"}, {"sha": "a0cb39a3f8a25104b49a96e33b9f22a5d9fe89e6", "filename": "tests/ui/suggestions/missing-assoc-fn-applicable-suggestions.fixed", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/77778e075d225f1a72523fe7bec6b76e24260692/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/77778e075d225f1a72523fe7bec6b76e24260692/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.fixed?ref=77778e075d225f1a72523fe7bec6b76e24260692", "patch": "@@ -1,21 +0,0 @@\n-// run-rustfix\n-trait TraitB {\n-    type Item;\n-}\n-\n-trait TraitA<A> {\n-    type Type;\n-    fn bar<T>(_: T) -> Self;\n-    fn baz<T>(_: T) -> Self where T: TraitB, <T as TraitB>::Item: Copy;\n-}\n-\n-struct S;\n-struct Type;\n-\n-impl TraitA<()> for S { //~ ERROR not all trait items implemented\n-fn baz<T>(_: T) -> Self where T: TraitB, <T as TraitB>::Item: Copy { todo!() }\n-fn bar<T>(_: T) -> Self { todo!() }\n-type Type = Type;\n-}\n-\n-fn main() {}"}, {"sha": "11e0c9a3a72afd493fc2a1f5a562fad24468dcfd", "filename": "tests/ui/suggestions/missing-assoc-fn-applicable-suggestions.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.rs?ref=b92a41c6760801a7128ca0ec69ba4ba9c9194054", "patch": "@@ -1,18 +1,15 @@\n-// run-rustfix\n-trait TraitB {\n-    type Item;\n-}\n+// aux-build:missing-assoc-fn-applicable-suggestions.rs\n \n-trait TraitA<A> {\n-    type Type;\n-    fn bar<T>(_: T) -> Self;\n-    fn baz<T>(_: T) -> Self where T: TraitB, <T as TraitB>::Item: Copy;\n-}\n+extern crate missing_assoc_fn_applicable_suggestions;\n+use missing_assoc_fn_applicable_suggestions::TraitA;\n \n struct S;\n-struct Type;\n-\n-impl TraitA<()> for S { //~ ERROR not all trait items implemented\n+impl TraitA<()> for S {\n+    //~^ ERROR not all trait items implemented\n }\n+//~^ HELP implement the missing item: `type Type = /* Type */;`\n+//~| HELP implement the missing item: `fn bar<T>(_: T) -> Self { todo!() }`\n+//~| HELP implement the missing item: `fn baz<T>(_: T) -> Self where T: TraitB, <T as TraitB>::Item: Copy { todo!() }`\n+//~| HELP implement the missing item: `const A: usize = 42;`\n \n fn main() {}"}, {"sha": "4c2d2776d3d8102ef00159f9de8ddbd7f30dcab8", "filename": "tests/ui/suggestions/missing-assoc-fn-applicable-suggestions.stderr", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn-applicable-suggestions.stderr?ref=b92a41c6760801a7128ca0ec69ba4ba9c9194054", "patch": "@@ -1,15 +1,13 @@\n-error[E0046]: not all trait items implemented, missing: `Type`, `bar`, `baz`\n-  --> $DIR/missing-assoc-fn-applicable-suggestions.rs:15:1\n+error[E0046]: not all trait items implemented, missing: `Type`, `bar`, `baz`, `A`\n+  --> $DIR/missing-assoc-fn-applicable-suggestions.rs:7:1\n    |\n-LL |     type Type;\n-   |     --------- `Type` from trait\n-LL |     fn bar<T>(_: T) -> Self;\n-   |     ------------------------ `bar` from trait\n-LL |     fn baz<T>(_: T) -> Self where T: TraitB, <T as TraitB>::Item: Copy;\n-   |     ------------------------------------------------------------------- `baz` from trait\n-...\n LL | impl TraitA<()> for S {\n-   | ^^^^^^^^^^^^^^^^^^^^^ missing `Type`, `bar`, `baz` in implementation\n+   | ^^^^^^^^^^^^^^^^^^^^^ missing `Type`, `bar`, `baz`, `A` in implementation\n+   |\n+   = help: implement the missing item: `type Type = /* Type */;`\n+   = help: implement the missing item: `fn bar<T>(_: T) -> Self { todo!() }`\n+   = help: implement the missing item: `fn baz<T>(_: T) -> Self where T: TraitB, <T as TraitB>::Item: Copy { todo!() }`\n+   = help: implement the missing item: `const A: usize = 42;`\n \n error: aborting due to previous error\n "}, {"sha": "77fa956287816b0db6ac9d82b69aebc245f6f2e2", "filename": "tests/ui/suggestions/missing-assoc-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b92a41c6760801a7128ca0ec69ba4ba9c9194054/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn.stderr?ref=b92a41c6760801a7128ca0ec69ba4ba9c9194054", "patch": "@@ -28,7 +28,7 @@ error[E0046]: not all trait items implemented, missing: `from_iter`\n LL | impl FromIterator<()> for X {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `from_iter` in implementation\n    |\n-   = help: implement the missing item: `fn from_iter<T>(_: T) -> Self where T: IntoIterator, std::iter::IntoIterator::Item = A { todo!() }`\n+   = help: implement the missing item: `fn from_iter<T>(_: T) -> Self where T: IntoIterator, std::iter::IntoIterator::Item = () { todo!() }`\n \n error: aborting due to 3 previous errors\n "}]}