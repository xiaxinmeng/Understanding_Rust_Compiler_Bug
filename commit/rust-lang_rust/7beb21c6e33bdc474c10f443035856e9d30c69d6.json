{"sha": "7beb21c6e33bdc474c10f443035856e9d30c69d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiZWIyMWM2ZTMzYmRjNDc0YzEwZjQ0MzAzNTg1NmU5ZDMwYzY5ZDY=", "commit": {"author": {"name": "Lenny222", "email": "github@kudling.de", "date": "2011-12-21T21:57:57Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-22T07:59:22Z"}, "message": "tests: add corner case (empty list)", "tree": {"sha": "ac6e9b42e774a3acc2fd55088a8135ae73bacb9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac6e9b42e774a3acc2fd55088a8135ae73bacb9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7beb21c6e33bdc474c10f443035856e9d30c69d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7beb21c6e33bdc474c10f443035856e9d30c69d6", "html_url": "https://github.com/rust-lang/rust/commit/7beb21c6e33bdc474c10f443035856e9d30c69d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7beb21c6e33bdc474c10f443035856e9d30c69d6/comments", "author": null, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "341e4151d6721d53be1408a2ab4cf8198ea8c9be", "url": "https://api.github.com/repos/rust-lang/rust/commits/341e4151d6721d53be1408a2ab4cf8198ea8c9be", "html_url": "https://github.com/rust-lang/rust/commit/341e4151d6721d53be1408a2ab4cf8198ea8c9be"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "227e8ad299deec0028057f012e6238df7908f56b", "filename": "src/test/stdtest/list.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7beb21c6e33bdc474c10f443035856e9d30c69d6/src%2Ftest%2Fstdtest%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7beb21c6e33bdc474c10f443035856e9d30c69d6/src%2Ftest%2Fstdtest%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Flist.rs?ref=7beb21c6e33bdc474c10f443035856e9d30c69d6", "patch": "@@ -15,6 +15,12 @@ fn test_from_vec() {\n     assert (head(tail(tail(l))) == 2);\n }\n \n+#[test]\n+fn test_from_vec_empty() {\n+    let empty : list::list<int> = from_vec([]);\n+    assert (empty == list::nil::<int>);\n+}\n+\n #[test]\n fn test_from_vec_mut() {\n     let l = from_vec([mutable 0, 1, 2]);\n@@ -25,10 +31,11 @@ fn test_from_vec_mut() {\n \n #[test]\n fn test_foldl() {\n-    let l = from_vec([0, 1, 2, 3, 4]);\n     fn add(&&a: uint, &&b: int) -> uint { ret a + (b as uint); }\n-    let rs = list::foldl(l, 0u, add);\n-    assert (rs == 10u);\n+    let l = from_vec([0, 1, 2, 3, 4]);\n+    let empty = list::nil::<int>;\n+    assert (list::foldl(l, 0u, add) == 10u);\n+    assert (list::foldl(empty, 0u, add) == 0u);\n }\n \n #[test]\n@@ -37,26 +44,25 @@ fn test_foldl2() {\n         a - b\n     }\n     let l = from_vec([1, 2, 3, 4]);\n-    let sum = list::foldl(l, 0, sub);\n-    assert sum == -10;\n+    assert (list::foldl(l, 0, sub) == -10);\n }\n \n #[test]\n fn test_find_success() {\n-    let l = from_vec([0, 1, 2]);\n     fn match(&&i: int) -> option::t<int> {\n         ret if i == 2 { option::some(i) } else { option::none::<int> };\n     }\n-    let rs = list::find(l, match);\n-    assert (rs == option::some(2));\n+    let l = from_vec([0, 1, 2]);\n+    assert (list::find(l, match) == option::some(2));\n }\n \n #[test]\n fn test_find_fail() {\n-    let l = from_vec([0, 1, 2]);\n     fn match(&&_i: int) -> option::t<int> { ret option::none::<int>; }\n-    let rs = list::find(l, match);\n-    assert (rs == option::none::<int>);\n+    let l = from_vec([0, 1, 2]);\n+    let empty = list::nil::<int>;\n+    assert (list::find(l, match) == option::none::<int>);\n+    assert (list::find(empty, match) == option::none::<int>);\n }\n \n #[test]\n@@ -72,6 +78,8 @@ fn test_has() {\n #[test]\n fn test_len() {\n     let l = from_vec([0, 1, 2]);\n+    let empty = list::nil::<int>;\n     assert (list::len(l) == 3u);\n+    assert (list::len(empty) == 0u);\n }\n "}]}