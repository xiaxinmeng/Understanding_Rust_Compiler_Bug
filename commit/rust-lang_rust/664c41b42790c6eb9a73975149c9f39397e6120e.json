{"sha": "664c41b42790c6eb9a73975149c9f39397e6120e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NGM0MWI0Mjc5MGM2ZWI5YTczOTc1MTQ5YzlmMzkzOTdlNjEyMGU=", "commit": {"author": {"name": "GuillaumeGomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-02-03T23:03:39Z"}, "committer": {"name": "GuillaumeGomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-02-06T10:59:10Z"}, "message": "librustc has been updated", "tree": {"sha": "d3d2fdb81c7031e40add6c3bc719621fbe58a9ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3d2fdb81c7031e40add6c3bc719621fbe58a9ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/664c41b42790c6eb9a73975149c9f39397e6120e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/664c41b42790c6eb9a73975149c9f39397e6120e", "html_url": "https://github.com/rust-lang/rust/commit/664c41b42790c6eb9a73975149c9f39397e6120e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/664c41b42790c6eb9a73975149c9f39397e6120e/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b12d3ddf981e5450d8159b29db6ee2197064c8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b12d3ddf981e5450d8159b29db6ee2197064c8a", "html_url": "https://github.com/rust-lang/rust/commit/8b12d3ddf981e5450d8159b29db6ee2197064c8a"}], "stats": {"total": 128, "additions": 62, "deletions": 66}, "files": [{"sha": "30863c81aa26bbe9e499d8f79f83655ed6c57587", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=664c41b42790c6eb9a73975149c9f39397e6120e", "patch": "@@ -699,7 +699,7 @@ impl LintPass for UnusedAttributes {\n \n         if !attr::is_used(attr) {\n             cx.span_lint(UNUSED_ATTRIBUTES, attr.span, \"unused attribute\");\n-            if CRATE_ATTRS.contains(&attr.name().get()) {\n+            if CRATE_ATTRS.contains(&&attr.name()[]) {\n                 let msg = match attr.node.style {\n                     ast::AttrOuter => \"crate-level attribute should be an inner \\\n                                        attribute: add an exclamation mark: #![foo]\",\n@@ -801,7 +801,7 @@ impl LintPass for UnusedResults {\n                         None => {}\n                         Some(s) => {\n                             msg.push_str(\": \");\n-                            msg.push_str(s.get());\n+                            msg.push_str(&s[]);\n                         }\n                     }\n                     cx.span_lint(UNUSED_MUST_USE, sp, &msg[]);\n@@ -826,8 +826,8 @@ impl NonCamelCaseTypes {\n     fn check_case(&self, cx: &Context, sort: &str, ident: ast::Ident, span: Span) {\n         fn is_camel_case(ident: ast::Ident) -> bool {\n             let ident = token::get_ident(ident);\n-            if ident.get().is_empty() { return true; }\n-            let ident = ident.get().trim_matches('_');\n+            if ident.is_empty() { return true; }\n+            let ident = ident.trim_matches('_');\n \n             // start with a non-lowercase letter rather than non-uppercase\n             // ones (some scripts don't have a concept of upper/lowercase)\n@@ -844,7 +844,7 @@ impl NonCamelCaseTypes {\n         let s = token::get_ident(ident);\n \n         if !is_camel_case(ident) {\n-            let c = to_camel_case(s.get());\n+            let c = to_camel_case(&s[]);\n             let m = if c.is_empty() {\n                 format!(\"{} `{}` should have a camel case name such as `CamelCase`\", sort, s)\n             } else {\n@@ -977,8 +977,8 @@ impl NonSnakeCase {\n     fn check_snake_case(&self, cx: &Context, sort: &str, ident: ast::Ident, span: Span) {\n         fn is_snake_case(ident: ast::Ident) -> bool {\n             let ident = token::get_ident(ident);\n-            if ident.get().is_empty() { return true; }\n-            let ident = ident.get().trim_left_matches('\\'');\n+            if ident.is_empty() { return true; }\n+            let ident = ident.trim_left_matches('\\'');\n             let ident = ident.trim_matches('_');\n \n             let mut allow_underscore = true;\n@@ -996,8 +996,8 @@ impl NonSnakeCase {\n         let s = token::get_ident(ident);\n \n         if !is_snake_case(ident) {\n-            let sc = NonSnakeCase::to_snake_case(s.get());\n-            if sc != s.get() {\n+            let sc = NonSnakeCase::to_snake_case(&s[]);\n+            if sc != &s[] {\n                 cx.span_lint(NON_SNAKE_CASE, span,\n                     &*format!(\"{} `{}` should have a snake case name such as `{}`\",\n                             sort, s, sc));\n@@ -1077,10 +1077,10 @@ impl NonUpperCaseGlobals {\n     fn check_upper_case(cx: &Context, sort: &str, ident: ast::Ident, span: Span) {\n         let s = token::get_ident(ident);\n \n-        if s.get().chars().any(|c| c.is_lowercase()) {\n-            let uc: String = NonSnakeCase::to_snake_case(s.get()).chars()\n+        if s.chars().any(|c| c.is_lowercase()) {\n+            let uc: String = NonSnakeCase::to_snake_case(&s[]).chars()\n                                            .map(|c| c.to_uppercase()).collect();\n-            if uc != s.get() {\n+            if uc != &s[] {\n                 cx.span_lint(NON_UPPER_CASE_GLOBALS, span,\n                     &format!(\"{} `{}` should have an upper case name such as `{}`\",\n                              sort, s, uc));\n@@ -1241,7 +1241,7 @@ impl LintPass for UnusedImportBraces {\n                             match items[0].node {\n                                 ast::PathListIdent {ref name, ..} => {\n                                     let m = format!(\"braces around {} is unnecessary\",\n-                                                    token::get_ident(*name).get());\n+                                                    &token::get_ident(*name)[]);\n                                     cx.span_lint(UNUSED_IMPORT_BRACES, item.span,\n                                                  &m[]);\n                                 },\n@@ -1358,7 +1358,7 @@ impl UnusedMut {\n             pat_util::pat_bindings(&cx.tcx.def_map, &**p, |mode, id, _, path1| {\n                 let ident = path1.node;\n                 if let ast::BindByValue(ast::MutMutable) = mode {\n-                    if !token::get_ident(ident).get().starts_with(\"_\") {\n+                    if !token::get_ident(ident).starts_with(\"_\") {\n                         match mutables.entry(ident.name.usize()) {\n                             Vacant(entry) => { entry.insert(vec![id]); },\n                             Occupied(mut entry) => { entry.get_mut().push(id); },"}, {"sha": "0db7c802abbddf3fa8a81db20684d1a24564be6e", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=664c41b42790c6eb9a73975149c9f39397e6120e", "patch": "@@ -341,7 +341,7 @@ pub fn gather_attrs(attrs: &[ast::Attribute])\n                     -> Vec<Result<(InternedString, Level, Span), Span>> {\n     let mut out = vec!();\n     for attr in attrs {\n-        let level = match Level::from_str(attr.name().get()) {\n+        let level = match Level::from_str(&attr.name()[]) {\n             None => continue,\n             Some(lvl) => lvl,\n         };\n@@ -499,10 +499,10 @@ impl<'a, 'tcx> Context<'a, 'tcx> {\n                     continue;\n                 }\n                 Ok((lint_name, level, span)) => {\n-                    match self.lints.find_lint(lint_name.get(), &self.tcx.sess, Some(span)) {\n+                    match self.lints.find_lint(&lint_name[], &self.tcx.sess, Some(span)) {\n                         Some(lint_id) => vec![(lint_id, level, span)],\n                         None => {\n-                            match self.lints.lint_groups.get(lint_name.get()) {\n+                            match self.lints.lint_groups.get(&lint_name[]) {\n                                 Some(&(ref v, _)) => v.iter()\n                                                       .map(|lint_id: &LintId|\n                                                            (*lint_id, level, span))"}, {"sha": "304ff80845cf0f67f1e9c67bb2f1386cb6a37891", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=664c41b42790c6eb9a73975149c9f39397e6120e", "patch": "@@ -170,7 +170,7 @@ impl<'a> CrateReader<'a> {\n     fn process_crate(&self, c: &ast::Crate) {\n         for a in c.attrs.iter().filter(|m| m.name() == \"link_args\") {\n             match a.value_str() {\n-                Some(ref linkarg) => self.sess.cstore.add_used_link_args(linkarg.get()),\n+                Some(ref linkarg) => self.sess.cstore.add_used_link_args(&linkarg[]),\n                 None => { /* fallthrough */ }\n             }\n         }\n@@ -184,15 +184,15 @@ impl<'a> CrateReader<'a> {\n                        ident, path_opt);\n                 let name = match *path_opt {\n                     Some((ref path_str, _)) => {\n-                        let name = path_str.get().to_string();\n+                        let name = path_str.to_string();\n                         validate_crate_name(Some(self.sess), &name[],\n                                             Some(i.span));\n                         name\n                     }\n-                    None => ident.get().to_string(),\n+                    None => ident.to_string(),\n                 };\n                 Some(CrateInfo {\n-                    ident: ident.get().to_string(),\n+                    ident: ident.to_string(),\n                     name: name,\n                     id: i.id,\n                     should_link: should_link(i),\n@@ -237,7 +237,7 @@ impl<'a> CrateReader<'a> {\n                     .collect::<Vec<&ast::Attribute>>();\n                 for m in &link_args {\n                     match m.value_str() {\n-                        Some(linkarg) => self.sess.cstore.add_used_link_args(linkarg.get()),\n+                        Some(linkarg) => self.sess.cstore.add_used_link_args(&linkarg[]),\n                         None => { /* fallthrough */ }\n                     }\n                 }\n@@ -289,7 +289,7 @@ impl<'a> CrateReader<'a> {\n                                 }\n                             };\n                             register_native_lib(self.sess, Some(m.span),\n-                                                n.get().to_string(), kind);\n+                                                n.to_string(), kind);\n                         }\n                         None => {}\n                     }"}, {"sha": "b151856e30941e3eb0dcc68dd2a2d159809481db", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=664c41b42790c6eb9a73975149c9f39397e6120e", "patch": "@@ -383,7 +383,7 @@ pub fn is_staged_api(cstore: &cstore::CStore, def: ast::DefId) -> bool {\n     let cdata = cstore.get_crate_data(def.krate);\n     let attrs = decoder::get_crate_attributes(cdata.data());\n     for attr in &attrs {\n-        if attr.name().get() == \"staged_api\" {\n+        if &attr.name()[] == \"staged_api\" {\n             match attr.node.value.node { ast::MetaWord(_) => return true, _ => (/*pass*/) }\n         }\n     }"}, {"sha": "e0ea157368154f2d3e7389095bc19490e2c55277", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=664c41b42790c6eb9a73975149c9f39397e6120e", "patch": "@@ -86,11 +86,11 @@ pub struct EncodeContext<'a, 'tcx: 'a> {\n }\n \n fn encode_name(rbml_w: &mut Encoder, name: ast::Name) {\n-    rbml_w.wr_tagged_str(tag_paths_data_name, token::get_name(name).get());\n+    rbml_w.wr_tagged_str(tag_paths_data_name, &token::get_name(name)[]);\n }\n \n fn encode_impl_type_basename(rbml_w: &mut Encoder, name: ast::Ident) {\n-    rbml_w.wr_tagged_str(tag_item_impl_type_basename, token::get_ident(name).get());\n+    rbml_w.wr_tagged_str(tag_item_impl_type_basename, &token::get_ident(name));\n }\n \n pub fn encode_def_id(rbml_w: &mut Encoder, id: DefId) {\n@@ -372,7 +372,7 @@ fn encode_path<PI: Iterator<Item=PathElem>>(rbml_w: &mut Encoder, path: PI) {\n             ast_map::PathMod(_) => tag_path_elem_mod,\n             ast_map::PathName(_) => tag_path_elem_name\n         };\n-        rbml_w.wr_tagged_str(tag, token::get_name(pe.name()).get());\n+        rbml_w.wr_tagged_str(tag, &token::get_name(pe.name())[]);\n     }\n     rbml_w.end_tag();\n }\n@@ -915,7 +915,7 @@ fn encode_method_argument_names(rbml_w: &mut Encoder,\n         rbml_w.start_tag(tag_method_argument_name);\n         if let ast::PatIdent(_, ref path1, _) = arg.pat.node {\n             let name = token::get_ident(path1.node);\n-            rbml_w.writer.write_all(name.get().as_bytes());\n+            rbml_w.writer.write_all(name.as_bytes());\n         }\n         rbml_w.end_tag();\n     }\n@@ -1636,7 +1636,7 @@ fn encode_meta_item(rbml_w: &mut Encoder, mi: &ast::MetaItem) {\n       ast::MetaWord(ref name) => {\n         rbml_w.start_tag(tag_meta_item_word);\n         rbml_w.start_tag(tag_meta_item_name);\n-        rbml_w.writer.write_all(name.get().as_bytes());\n+        rbml_w.writer.write_all(name.as_bytes());\n         rbml_w.end_tag();\n         rbml_w.end_tag();\n       }\n@@ -1645,10 +1645,10 @@ fn encode_meta_item(rbml_w: &mut Encoder, mi: &ast::MetaItem) {\n           ast::LitStr(ref value, _) => {\n             rbml_w.start_tag(tag_meta_item_name_value);\n             rbml_w.start_tag(tag_meta_item_name);\n-            rbml_w.writer.write_all(name.get().as_bytes());\n+            rbml_w.writer.write_all(name.as_bytes());\n             rbml_w.end_tag();\n             rbml_w.start_tag(tag_meta_item_value);\n-            rbml_w.writer.write_all(value.get().as_bytes());\n+            rbml_w.writer.write_all(value.as_bytes());\n             rbml_w.end_tag();\n             rbml_w.end_tag();\n           }\n@@ -1658,7 +1658,7 @@ fn encode_meta_item(rbml_w: &mut Encoder, mi: &ast::MetaItem) {\n       ast::MetaList(ref name, ref items) => {\n         rbml_w.start_tag(tag_meta_item_list);\n         rbml_w.start_tag(tag_meta_item_name);\n-        rbml_w.writer.write_all(name.get().as_bytes());\n+        rbml_w.writer.write_all(name.as_bytes());\n         rbml_w.end_tag();\n         for inner_item in items {\n             encode_meta_item(rbml_w, &**inner_item);\n@@ -1695,7 +1695,7 @@ fn encode_paren_sugar(rbml_w: &mut Encoder, paren_sugar: bool) {\n fn encode_associated_type_names(rbml_w: &mut Encoder, names: &[ast::Name]) {\n     rbml_w.start_tag(tag_associated_type_names);\n     for &name in names {\n-        rbml_w.wr_tagged_str(tag_associated_type_name, token::get_name(name).get());\n+        rbml_w.wr_tagged_str(tag_associated_type_name, &token::get_name(name)[]);\n     }\n     rbml_w.end_tag();\n }"}, {"sha": "12573bf0ffd1ae3bd265952684a080b065330be9", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=664c41b42790c6eb9a73975149c9f39397e6120e", "patch": "@@ -249,7 +249,7 @@ fn check_for_bindings_named_the_same_as_variants(cx: &MatchCheckCtxt, pat: &Pat)\n                             span_warn!(cx.tcx.sess, p.span, E0170,\n                                 \"pattern binding `{}` is named the same as one \\\n                                  of the variants of the type `{}`\",\n-                                token::get_ident(&ident.node)[], ty_to_string(cx.tcx, pat_ty));\n+                                &token::get_ident(ident.node)[], ty_to_string(cx.tcx, pat_ty));\n                             span_help!(cx.tcx.sess, p.span,\n                                 \"if you meant to match on a variant, \\\n                                  consider making the path in the pattern qualified: `{}::{}`\","}, {"sha": "6bb0516c89b6fcd50af77a5f477e440f51e45c49", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=664c41b42790c6eb9a73975149c9f39397e6120e", "patch": "@@ -610,7 +610,7 @@ pub fn lit_to_const(lit: &ast::Lit) -> const_val {\n         ast::LitInt(n, ast::UnsignedIntLit(_)) => const_uint(n),\n         ast::LitFloat(ref n, _) |\n         ast::LitFloatUnsuffixed(ref n) => {\n-            const_float(n.get().parse::<f64>().unwrap() as f64)\n+            const_float(n.parse::<f64>().unwrap() as f64)\n         }\n         ast::LitBool(b) => const_bool(b)\n     }"}, {"sha": "a157d5d712b58759032dc29ab196277c0742fc85", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=664c41b42790c6eb9a73975149c9f39397e6120e", "patch": "@@ -321,7 +321,7 @@ fn has_allow_dead_code_or_lang_attr(attrs: &[ast::Attribute]) -> bool {\n     for attr in lint::gather_attrs(attrs) {\n         match attr {\n             Ok((ref name, lint::Allow, _))\n-                if name.get() == dead_code => return true,\n+                if &name[] == dead_code => return true,\n             _ => (),\n         }\n     }"}, {"sha": "90b43dd7f7d62bb2c1de7fcc7ca0417a4973c0ad", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=664c41b42790c6eb9a73975149c9f39397e6120e", "patch": "@@ -514,7 +514,6 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                             lifetime of captured variable `{}`...\",\n                             ty::local_var_name_str(self.tcx,\n                                                    upvar_id.var_id)\n-                                .get()\n                                 .to_string());\n                 note_and_explain_region(\n                     self.tcx,\n@@ -526,7 +525,6 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                     &format!(\"...but `{}` is only valid for \",\n                             ty::local_var_name_str(self.tcx,\n                                                    upvar_id.var_id)\n-                                .get()\n                                 .to_string())[],\n                     sup,\n                     \"\");\n@@ -570,8 +568,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                     &format!(\"captured variable `{}` does not \\\n                             outlive the enclosing closure\",\n                             ty::local_var_name_str(self.tcx,\n-                                                   id).get()\n-                                                      .to_string())[]);\n+                                                   id).to_string())[]);\n                 note_and_explain_region(\n                     self.tcx,\n                     \"captured variable is valid for \",\n@@ -959,7 +956,7 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n             // choice of lifetime name deterministic and thus easier to test.\n             let mut names = Vec::new();\n             for rn in region_names {\n-                let lt_name = token::get_name(*rn).get().to_string();\n+                let lt_name = token::get_name(*rn).to_string();\n                 names.push(lt_name);\n             }\n             names.sort();\n@@ -1438,15 +1435,15 @@ impl<'a, 'tcx> ErrorReportingHelpers<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n             infer::EarlyBoundRegion(_, name) => {\n                 format!(\" for lifetime parameter `{}`\",\n-                        token::get_name(name).get())\n+                        &token::get_name(name))\n             }\n             infer::BoundRegionInCoherence(name) => {\n                 format!(\" for lifetime parameter `{}` in coherence check\",\n-                        token::get_name(name).get())\n+                        &token::get_name(name)[])\n             }\n             infer::UpvarRegion(ref upvar_id, _) => {\n                 format!(\" for capture of `{}` by closure\",\n-                        ty::local_var_name_str(self.tcx, upvar_id.var_id).get().to_string())\n+                        ty::local_var_name_str(self.tcx, upvar_id.var_id).to_string())\n             }\n         };\n \n@@ -1527,7 +1524,6 @@ impl<'a, 'tcx> ErrorReportingHelpers<'tcx> for InferCtxt<'a, 'tcx> {\n                     &format!(\n                         \"...so that closure can access `{}`\",\n                         ty::local_var_name_str(self.tcx, upvar_id.var_id)\n-                            .get()\n                             .to_string())[])\n             }\n             infer::InfStackClosure(span) => {\n@@ -1553,7 +1549,7 @@ impl<'a, 'tcx> ErrorReportingHelpers<'tcx> for InferCtxt<'a, 'tcx> {\n                             does not outlive the enclosing closure\",\n                             ty::local_var_name_str(\n                                 self.tcx,\n-                                id).get().to_string())[]);\n+                                id).to_string())[]);\n             }\n             infer::IndexSlice(span) => {\n                 self.tcx.sess.span_note(\n@@ -1730,7 +1726,7 @@ impl LifeGiver {\n     fn with_taken(taken: &[ast::LifetimeDef]) -> LifeGiver {\n         let mut taken_ = HashSet::new();\n         for lt in taken {\n-            let lt_name = token::get_name(lt.lifetime.name).get().to_string();\n+            let lt_name = token::get_name(lt.lifetime.name).to_string();\n             taken_.insert(lt_name);\n         }\n         LifeGiver {"}, {"sha": "05969d4ea4398564863a576851fa188ebb58684c", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=664c41b42790c6eb9a73975149c9f39397e6120e", "patch": "@@ -149,7 +149,7 @@ impl<'a, 'v> Visitor<'v> for LanguageItemCollector<'a> {\n     fn visit_item(&mut self, item: &ast::Item) {\n         match extract(&item.attrs) {\n             Some(value) => {\n-                let item_index = self.item_refs.get(value.get()).map(|x| *x);\n+                let item_index = self.item_refs.get(&value[]).map(|x| *x);\n \n                 match item_index {\n                     Some(item_index) => {"}, {"sha": "fcc5d70a7a564b327203e6cf03966d308ad7d2ea", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=664c41b42790c6eb9a73975149c9f39397e6120e", "patch": "@@ -333,7 +333,7 @@ impl<'a, 'tcx> IrMaps<'a, 'tcx> {\n     fn variable_name(&self, var: Variable) -> String {\n         match self.var_kinds[var.get()] {\n             Local(LocalInfo { ident: nm, .. }) | Arg(_, nm) => {\n-                token::get_ident(nm).get().to_string()\n+                token::get_ident(nm).to_string()\n             },\n             ImplicitRet => \"<implicit-ret>\".to_string(),\n             CleanExit => \"<clean-exit>\".to_string()"}, {"sha": "3e7aa0ff1d04e982f009434416c3634503a1d21a", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=664c41b42790c6eb9a73975149c9f39397e6120e", "patch": "@@ -1543,7 +1543,7 @@ impl<'tcx> Repr<'tcx> for InteriorKind {\n     fn repr(&self, _tcx: &ty::ctxt) -> String {\n         match *self {\n             InteriorField(NamedField(fld)) => {\n-                token::get_name(fld).get().to_string()\n+                token::get_name(fld).to_string()\n             }\n             InteriorField(PositionalField(i)) => format!(\"#{}\", i),\n             InteriorElement(_) => \"[]\".to_string(),"}, {"sha": "9b9e3ec947420b79d041c9f011451b5235033e28", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=664c41b42790c6eb9a73975149c9f39397e6120e", "patch": "@@ -180,7 +180,7 @@ impl Index {\n     pub fn new(krate: &Crate) -> Index {\n         let mut staged_api = false;\n         for attr in &krate.attrs {\n-            if attr.name().get() == \"staged_api\" {\n+            if &attr.name()[] == \"staged_api\" {\n                 match attr.node.value.node {\n                     ast::MetaWord(_) => {\n                         attr::mark_used(attr);\n@@ -239,12 +239,12 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n                 if !self.active_features.contains(feature) {\n                     let msg = match *reason {\n                         Some(ref r) => format!(\"use of unstable library feature '{}': {}\",\n-                                               feature.get(), r.get()),\n-                        None => format!(\"use of unstable library feature '{}'\", feature.get())\n+                                               &feature[], &r[]),\n+                        None => format!(\"use of unstable library feature '{}'\", &feature[])\n                     };\n \n                     emit_feature_warn(&self.tcx.sess.parse_sess.span_diagnostic,\n-                                      feature.get(), span, &msg[]);\n+                                      &feature[], span, &msg[]);\n                 }\n             }\n             Some(..) => {"}, {"sha": "0343d9af28d6a53e911e78e1efc0bb5c94635ab8", "filename": "src/librustc/middle/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs?ref=664c41b42790c6eb9a73975149c9f39397e6120e", "patch": "@@ -86,7 +86,7 @@ fn report_on_unimplemented<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                                               }).collect::<HashMap<String, String>>();\n                 generic_map.insert(\"Self\".to_string(),\n                                    trait_ref.self_ty().user_string(infcx.tcx));\n-                let parser = Parser::new(istring.get());\n+                let parser = Parser::new(&istring[]);\n                 let mut errored = false;\n                 let err: String = parser.filter_map(|p| {\n                     match p {"}, {"sha": "d60a2d2af36b6ae67ab5a40b58e802b49a349d9e", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=664c41b42790c6eb9a73975149c9f39397e6120e", "patch": "@@ -4644,7 +4644,7 @@ pub fn field_idx_strict(tcx: &ctxt, name: ast::Name, fields: &[field])\n         \"no field named `{}` found in the list of fields `{:?}`\",\n         token::get_name(name),\n         fields.iter()\n-              .map(|f| token::get_name(f.name).get().to_string())\n+              .map(|f| token::get_name(f.name).to_string())\n               .collect::<Vec<String>>())[]);\n }\n "}, {"sha": "7456cc8cb0f664dc9b77c2c92510352c0dbe7531", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=664c41b42790c6eb9a73975149c9f39397e6120e", "patch": "@@ -55,7 +55,7 @@ pub fn check_crate(krate: &ast::Crate,\n \n pub fn link_name(attrs: &[ast::Attribute]) -> Option<InternedString> {\n     lang_items::extract(attrs).and_then(|name| {\n-        $(if name.get() == stringify!($name) {\n+        $(if &name[] == stringify!($name) {\n             Some(InternedString::new(stringify!($sym)))\n         } else)* {\n             None\n@@ -110,7 +110,7 @@ impl<'a, 'v> Visitor<'v> for Context<'a> {\n     fn visit_foreign_item(&mut self, i: &ast::ForeignItem) {\n         match lang_items::extract(&i.attrs) {\n             None => {}\n-            Some(lang_item) => self.register(lang_item.get(), i.span),\n+            Some(lang_item) => self.register(&lang_item[], i.span),\n         }\n         visit::walk_foreign_item(self, i)\n     }"}, {"sha": "1a15e169d6ade49034084a707fe608c1e53efc04", "filename": "src/librustc/plugin/load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Fplugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Fplugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fload.rs?ref=664c41b42790c6eb9a73975149c9f39397e6120e", "patch": "@@ -109,7 +109,7 @@ impl<'a, 'v> Visitor<'v> for PluginLoader<'a> {\n         let mut reexport = HashSet::new();\n         for attr in &item.attrs {\n             let mut used = true;\n-            match attr.name().get() {\n+            match &attr.name()[] {\n                 \"phase\" => {\n                     self.sess.span_err(attr.span, \"#[phase] is deprecated; use \\\n                                        #[macro_use], #[plugin], and/or #[no_link]\");"}, {"sha": "a7a5ea4c7b46c235d846fd957446c3beb3c03b10", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664c41b42790c6eb9a73975149c9f39397e6120e/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=664c41b42790c6eb9a73975149c9f39397e6120e", "patch": "@@ -217,7 +217,7 @@ pub fn region_to_string(cx: &ctxt, prefix: &str, space: bool, region: Region) ->\n     match region {\n         ty::ReScope(_) => prefix.to_string(),\n         ty::ReEarlyBound(_, _, _, name) => {\n-            token::get_name(name).get().to_string()\n+            token::get_name(name).to_string()\n         }\n         ty::ReLateBound(_, br) => bound_region_to_string(cx, prefix, space, br),\n         ty::ReFree(ref fr) => bound_region_to_string(cx, prefix, space, fr.bound_region),\n@@ -277,7 +277,7 @@ pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n         match ident {\n             Some(i) => {\n                 s.push(' ');\n-                s.push_str(token::get_ident(i).get());\n+                s.push_str(&token::get_ident(i)[]);\n             }\n             _ => { }\n         }\n@@ -1020,19 +1020,19 @@ impl<'tcx> Repr<'tcx> for ty::Method<'tcx> {\n \n impl<'tcx> Repr<'tcx> for ast::Name {\n     fn repr(&self, _tcx: &ctxt) -> String {\n-        token::get_name(*self).get().to_string()\n+        token::get_name(*self).to_string()\n     }\n }\n \n impl<'tcx> UserString<'tcx> for ast::Name {\n     fn user_string(&self, _tcx: &ctxt) -> String {\n-        token::get_name(*self).get().to_string()\n+        token::get_name(*self).to_string()\n     }\n }\n \n impl<'tcx> Repr<'tcx> for ast::Ident {\n     fn repr(&self, _tcx: &ctxt) -> String {\n-        token::get_ident(*self).get().to_string()\n+        token::get_ident(*self).to_string()\n     }\n }\n \n@@ -1220,7 +1220,7 @@ impl<'tcx, T> UserString<'tcx> for ty::Binder<T>\n                 }\n             })\n         });\n-        let names: Vec<_> = names.iter().map(|s| s.get()).collect();\n+        let names: Vec<_> = names.iter().map(|s| &s[]).collect();\n \n         let value_str = unbound_value.user_string(tcx);\n         if names.len() == 0 {\n@@ -1248,7 +1248,7 @@ impl<'tcx> UserString<'tcx> for Ty<'tcx> {\n \n impl<'tcx> UserString<'tcx> for ast::Ident {\n     fn user_string(&self, _tcx: &ctxt) -> String {\n-        token::get_name(self.name).get().to_string()\n+        token::get_name(self.name).to_string()\n     }\n }\n "}]}