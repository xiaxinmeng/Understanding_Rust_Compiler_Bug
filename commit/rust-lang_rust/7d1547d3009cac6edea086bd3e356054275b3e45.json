{"sha": "7d1547d3009cac6edea086bd3e356054275b3e45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMTU0N2QzMDA5Y2FjNmVkZWEwODZiZDNlMzU2MDU0Mjc1YjNlNDU=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-08-08T03:50:53Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-08-09T19:25:22Z"}, "message": "rustc_span: use IndexSet in SpanInterner", "tree": {"sha": "c4b0501d8eb41908933021b2917a94033aa1a0ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4b0501d8eb41908933021b2917a94033aa1a0ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d1547d3009cac6edea086bd3e356054275b3e45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d1547d3009cac6edea086bd3e356054275b3e45", "html_url": "https://github.com/rust-lang/rust/commit/7d1547d3009cac6edea086bd3e356054275b3e45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d1547d3009cac6edea086bd3e356054275b3e45/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4efc7e92fa29f550f0825f290c048a55515ce98f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4efc7e92fa29f550f0825f290c048a55515ce98f", "html_url": "https://github.com/rust-lang/rust/commit/4efc7e92fa29f550f0825f290c048a55515ce98f"}], "stats": {"total": 17, "additions": 5, "deletions": 12}, "files": [{"sha": "b05e01d666bd6917e32f4451640c4c4748a7f0ce", "filename": "src/librustc_span/span_encoding.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7d1547d3009cac6edea086bd3e356054275b3e45/src%2Flibrustc_span%2Fspan_encoding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d1547d3009cac6edea086bd3e356054275b3e45/src%2Flibrustc_span%2Fspan_encoding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fspan_encoding.rs?ref=7d1547d3009cac6edea086bd3e356054275b3e45", "patch": "@@ -8,7 +8,7 @@ use crate::hygiene::SyntaxContext;\n use crate::SESSION_GLOBALS;\n use crate::{BytePos, SpanData};\n \n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::FxIndexSet;\n \n /// A compressed span.\n ///\n@@ -111,25 +111,18 @@ impl Span {\n \n #[derive(Default)]\n pub struct SpanInterner {\n-    spans: FxHashMap<SpanData, u32>,\n-    span_data: Vec<SpanData>,\n+    spans: FxIndexSet<SpanData>,\n }\n \n impl SpanInterner {\n     fn intern(&mut self, span_data: &SpanData) -> u32 {\n-        if let Some(index) = self.spans.get(span_data) {\n-            return *index;\n-        }\n-\n-        let index = self.spans.len() as u32;\n-        self.span_data.push(*span_data);\n-        self.spans.insert(*span_data, index);\n-        index\n+        let (index, _) = self.spans.insert_full(*span_data);\n+        index as u32\n     }\n \n     #[inline]\n     fn get(&self, index: u32) -> &SpanData {\n-        &self.span_data[index as usize]\n+        &self.spans[index as usize]\n     }\n }\n "}]}