{"sha": "2b32b315f91536b32ac60ea0d3a93a1feb1d9215", "node_id": "C_kwDOAAsO6NoAKDJiMzJiMzE1ZjkxNTM2YjMyYWM2MGVhMGQzYTkzYTFmZWIxZDkyMTU", "commit": {"author": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-08-04T19:31:37Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2023-02-28T20:00:00Z"}, "message": "rewrite iterator `Default` tests as doctests", "tree": {"sha": "f397c3f6bbb9aaf926a3795b14b664407da3225d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f397c3f6bbb9aaf926a3795b14b664407da3225d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b32b315f91536b32ac60ea0d3a93a1feb1d9215", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b32b315f91536b32ac60ea0d3a93a1feb1d9215", "html_url": "https://github.com/rust-lang/rust/commit/2b32b315f91536b32ac60ea0d3a93a1feb1d9215", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05c7330ca03650bbcb6a55f5fa490b3bb03c1940", "url": "https://api.github.com/repos/rust-lang/rust/commits/05c7330ca03650bbcb6a55f5fa490b3bb03c1940", "html_url": "https://github.com/rust-lang/rust/commit/05c7330ca03650bbcb6a55f5fa490b3bb03c1940"}], "stats": {"total": 214, "additions": 174, "deletions": 40}, "files": [{"sha": "d0a87e3fb9fd5c09976f44d4a855dcd1ce096fe9", "filename": "library/alloc/src/collections/binary_heap/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap%2Fmod.rs?ref=2b32b315f91536b32ac60ea0d3a93a1feb1d9215", "patch": "@@ -1470,6 +1470,13 @@ impl<T> FusedIterator for IntoIter<T> {}\n \n #[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n impl<T> Default for IntoIter<T> {\n+    /// Creates an empty `binary_heap::IntoIter`.\n+    ///\n+    /// ```\n+    /// # use std::collections::binary_heap;\n+    /// let iter: binary_heap::IntoIter<u8> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n     fn default() -> Self {\n         IntoIter { iter: Default::default() }\n     }"}, {"sha": "8c8a459fec95c8ae7bc745ef105a14c239663f44", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=2b32b315f91536b32ac60ea0d3a93a1feb1d9215", "patch": "@@ -364,6 +364,13 @@ impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for Iter<'_, K, V> {\n \n #[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n impl<'a, K: 'a, V: 'a> Default for Iter<'a, K, V> {\n+    /// Creates an empty `btree_map::Iter`.\n+    ///\n+    /// ```\n+    /// # use std::collections::btree_map;\n+    /// let iter: btree_map::Iter<'_, u8, u8> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n     fn default() -> Self {\n         Iter { range: Default::default(), length: 0 }\n     }\n@@ -395,6 +402,13 @@ impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for IterMut<'_, K, V> {\n \n #[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n impl<'a, K: 'a, V: 'a> Default for IterMut<'a, K, V> {\n+    /// Creates an empty `btree_map::IterMut`.\n+    ///\n+    /// ```\n+    /// # use std::collections::btree_map;\n+    /// let iter: btree_map::IterMut<'_, u8, u8> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n     fn default() -> Self {\n         IterMut { range: Default::default(), length: 0, _marker: PhantomData {} }\n     }\n@@ -437,6 +451,13 @@ impl<K: Debug, V: Debug, A: Allocator + Clone> Debug for IntoIter<K, V, A> {\n \n #[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n impl<K, V> Default for IntoIter<K, V> {\n+    /// Creates an empty `btree_map::IntoIter`.\n+    ///\n+    /// ```\n+    /// # use std::collections::btree_map;\n+    /// let iter: btree_map::IntoIter<u8, u8> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n     fn default() -> Self {\n         IntoIter { range: Default::default(), length: 0, alloc: Global }\n     }\n@@ -1791,6 +1812,13 @@ impl<K, V> Clone for Keys<'_, K, V> {\n \n #[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n impl<K, V> Default for Keys<'_, K, V> {\n+    /// Creates an empty `btree_map::Keys`.\n+    ///\n+    /// ```\n+    /// # use std::collections::btree_map;\n+    /// let iter: btree_map::Keys<'_, u8, u8> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n     fn default() -> Self {\n         Keys { inner: Default::default() }\n     }\n@@ -1839,6 +1867,13 @@ impl<K, V> Clone for Values<'_, K, V> {\n \n #[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n impl<K, V> Default for Values<'_, K, V> {\n+    /// Creates an empty `btree_map::Values`.\n+    ///\n+    /// ```\n+    /// # use std::collections::btree_map;\n+    /// let iter: btree_map::Values<'_, u8, u8> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n     fn default() -> Self {\n         Values { inner: Default::default() }\n     }\n@@ -1982,6 +2017,13 @@ impl<'a, K, V> Iterator for Range<'a, K, V> {\n \n #[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n impl<K, V> Default for Range<'_, K, V> {\n+    /// Creates an empty `btree_map::Range`.\n+    ///\n+    /// ```\n+    /// # use std::collections::btree_map;\n+    /// let iter: btree_map::Range<'_, u8, u8> = Default::default();\n+    /// assert_eq!(iter.count(), 0);\n+    /// ```\n     fn default() -> Self {\n         Range { inner: Default::default() }\n     }\n@@ -2065,6 +2107,13 @@ impl<K, V, A: Allocator + Clone> FusedIterator for IntoKeys<K, V, A> {}\n \n #[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n impl<K, V> Default for IntoKeys<K, V> {\n+    /// Creates an empty `btree_map::IntoKeys`.\n+    ///\n+    /// ```\n+    /// # use std::collections::btree_map;\n+    /// let iter: btree_map::IntoKeys<u8, u8> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n     fn default() -> Self {\n         IntoKeys { inner: Default::default() }\n     }\n@@ -2106,6 +2155,13 @@ impl<K, V, A: Allocator + Clone> FusedIterator for IntoValues<K, V, A> {}\n \n #[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n impl<K, V> Default for IntoValues<K, V> {\n+    /// Creates an empty `btree_map::IntoValues`.\n+    ///\n+    /// ```\n+    /// # use std::collections::btree_map;\n+    /// let iter: btree_map::IntoValues<u8, u8> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n     fn default() -> Self {\n         IntoValues { inner: Default::default() }\n     }"}, {"sha": "76c2f27b46634a885a663a6ba53595a74f79702c", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=2b32b315f91536b32ac60ea0d3a93a1feb1d9215", "patch": "@@ -563,22 +563,6 @@ fn test_iter_min_max() {\n     a.check();\n }\n \n-#[test]\n-fn test_iters_default() {\n-    let iter: Keys<'_, u8, u8> = Keys::default();\n-    assert_eq!(iter.len(), 0);\n-    let iter: Values<'_, u8, u8> = Values::default();\n-    assert_eq!(iter.len(), 0);\n-    let iter: Range<'_, u8, u8> = Range::default();\n-    assert_eq!(iter.count(), 0);\n-    let iter: IntoIter<u8, u8> = IntoIter::default();\n-    assert_eq!(iter.len(), 0);\n-    let iter: IntoKeys<u8, u8> = IntoKeys::default();\n-    assert_eq!(iter.len(), 0);\n-    let iter: IntoValues<u8, u8> = IntoValues::default();\n-    assert_eq!(iter.len(), 0);\n-}\n-\n fn range_keys(map: &BTreeMap<i32, i32>, range: impl RangeBounds<i32>) -> Vec<i32> {\n     Vec::from_iter(map.range(range).map(|(&k, &v)| {\n         assert_eq!(k, v);"}, {"sha": "5992b814bba739b4641e71dfd0880b8a0c35bfd2", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=2b32b315f91536b32ac60ea0d3a93a1feb1d9215", "patch": "@@ -1547,6 +1547,13 @@ impl<T, A: Allocator + Clone> Iterator for IntoIter<T, A> {\n \n #[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n impl<T> Default for Iter<'_, T> {\n+    /// Creates an empty `btree_set::Iter`.\n+    ///\n+    /// ```\n+    /// # use std::collections::btree_set;\n+    /// let iter: btree_set::Iter<'_, u8> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n     fn default() -> Self {\n         Iter { iter: Default::default() }\n     }\n@@ -1570,6 +1577,13 @@ impl<T, A: Allocator + Clone> FusedIterator for IntoIter<T, A> {}\n \n #[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n impl<T> Default for IntoIter<T> {\n+    /// Creates an empty `btree_set::IntoIter`.\n+    ///\n+    /// ```\n+    /// # use std::collections::btree_set;\n+    /// let iter: btree_set::IntoIter<u8> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n     fn default() -> Self {\n         IntoIter { iter: Default::default() }\n     }\n@@ -1615,6 +1629,13 @@ impl<T> FusedIterator for Range<'_, T> {}\n \n #[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n impl<T> Default for Range<'_, T> {\n+    /// Creates an empty `btree_set::Range`.\n+    ///\n+    /// ```\n+    /// # use std::collections::btree_set;\n+    /// let iter: btree_set::Range<'_, u8> = Default::default();\n+    /// assert_eq!(iter.count(), 0);\n+    /// ```\n     fn default() -> Self {\n         Range { iter: Default::default() }\n     }"}, {"sha": "080a4a14eda6ea7d13fe98cb1b93563a4470b066", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=2b32b315f91536b32ac60ea0d3a93a1feb1d9215", "patch": "@@ -1077,6 +1077,13 @@ impl<T> FusedIterator for Iter<'_, T> {}\n \n #[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n impl<T> Default for Iter<'_, T> {\n+    /// Creates an empty `linked_list::Iter`.\n+    ///\n+    /// ```\n+    /// # use std::collections::linked_list;\n+    /// let iter: linked_list::Iter<'_, u8> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n     fn default() -> Self {\n         Iter { head: None, tail: None, len: 0, marker: Default::default() }\n     }\n@@ -1824,6 +1831,13 @@ impl<T> FusedIterator for IntoIter<T> {}\n \n #[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n impl<T> Default for IntoIter<T> {\n+    /// Creates an empty `linked_list::IntoIter`.\n+    ///\n+    /// ```\n+    /// # use std::collections::linked_list;\n+    /// let iter: linked_list::IntoIter<u8> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n     fn default() -> Self {\n         LinkedList::new().into_iter()\n     }"}, {"sha": "04594d55b6abf1834eea51ac3f19ee0e2039a123", "filename": "library/alloc/src/collections/linked_list/tests.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list%2Ftests.rs?ref=2b32b315f91536b32ac60ea0d3a93a1feb1d9215", "patch": "@@ -172,12 +172,6 @@ fn test_iterator() {\n     assert_eq!(it.next(), None);\n }\n \n-#[test]\n-fn test_default() {\n-    let iter: IntoIter<u8> = Default::default();\n-    assert_eq!(iter.len(), 0);\n-}\n-\n #[test]\n fn test_iterator_clone() {\n     let mut n = LinkedList::new();"}, {"sha": "8fed4a584a377729d69d5aeeba9687df7de85188", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=2b32b315f91536b32ac60ea0d3a93a1feb1d9215", "patch": "@@ -349,6 +349,14 @@ unsafe impl<T, A: Allocator> TrustedLen for IntoIter<T, A> {}\n \n #[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n impl<T> Default for IntoIter<T> {\n+    /// Creates an empty `vec::IntoIter`.\n+    ///\n+    /// ```\n+    /// # use std::vec;\n+    /// let iter: vec::IntoIter<u8> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// assert_eq!(iter.as_slice(), &[]);\n+    /// ```\n     fn default() -> Self {\n         super::Vec::new().into_iter()\n     }"}, {"sha": "2f07c2911a50264aee57ab1a67b966a869045ef3", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=2b32b315f91536b32ac60ea0d3a93a1feb1d9215", "patch": "@@ -1,6 +1,5 @@\n use core::alloc::{Allocator, Layout};\n-use core::assert_eq;\n-use core::iter::{ExactSizeIterator, IntoIterator};\n+use core::iter::IntoIterator;\n use core::ptr::NonNull;\n use std::alloc::System;\n use std::assert_matches::assert_matches;\n@@ -1036,13 +1035,6 @@ fn test_into_iter_clone() {\n     assert_eq!(it.next(), None);\n }\n \n-#[test]\n-fn test_into_iter_default() {\n-    let iter: IntoIter<u8> = Default::default();\n-    assert_eq!(iter.len(), 0);\n-    assert_eq!(iter.as_slice(), &[]);\n-}\n-\n #[test]\n fn test_into_iter_leak() {\n     static mut DROPS: i32 = 0;"}, {"sha": "0f5e3718408cef884e1bbef28d4179219ca7fadb", "filename": "library/core/src/iter/adapters/chain.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fchain.rs?ref=2b32b315f91536b32ac60ea0d3a93a1feb1d9215", "patch": "@@ -288,6 +288,21 @@ where\n     A: Iterator + Default,\n     B: Iterator + Default,\n {\n+    /// Creates a `Chain` from the default values for `A` and `B`.\n+    ///\n+    /// ```\n+    /// # use core::iter::Chain;\n+    /// # use core::slice;\n+    /// # use std::collections::{btree_set, BTreeSet};\n+    /// # use std::mem;\n+    /// struct Foo<'a>(Chain<slice::Iter<'a, u8>, btree_set::Iter<'a, u8>>);\n+    ///\n+    /// let set = BTreeSet::<u8>::new();\n+    /// let slice: &[u8] = &[];\n+    /// let mut foo = Foo(slice.iter().chain(set.iter()));\n+    ///\n+    /// // take requires `Default`\n+    /// let _: Chain<_, _> = mem::take(&mut foo.0);\n     fn default() -> Self {\n         Chain::new(Default::default(), Default::default())\n     }"}, {"sha": "b9e2700860c06b5be278e3b3229fca15688ae4be", "filename": "library/core/src/iter/adapters/cloned.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcloned.rs?ref=2b32b315f91536b32ac60ea0d3a93a1feb1d9215", "patch": "@@ -160,6 +160,13 @@ where\n     I: Default + Iterator<Item = &'a T>,\n     T: Clone,\n {\n+    /// Creates a `Cloned` iterator from the default value of `I`\n+    /// ```\n+    /// # use core::slice;\n+    /// # use core::iter::Cloned;\n+    /// let iter: Cloned<slice::Iter<'_, u8>> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n     fn default() -> Self {\n         Self::new(Default::default())\n     }"}, {"sha": "0aa466e37a217dbae677a51bae2763df38e60022", "filename": "library/core/src/iter/adapters/copied.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fcopied.rs?ref=2b32b315f91536b32ac60ea0d3a93a1feb1d9215", "patch": "@@ -247,6 +247,13 @@ where\n     I: Default + Iterator<Item = &'a T>,\n     T: Copy,\n {\n+    /// Creates a `Copied` iterator from the default value of `I`\n+    /// ```\n+    /// # use core::slice;\n+    /// # use core::iter::Copied;\n+    /// let iter: Copied<slice::Iter<'_, u8>> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n     fn default() -> Self {\n         Self::new(Default::default())\n     }"}, {"sha": "5b0025cb9849a3b0ffc033f07e0a7a384d79d9a1", "filename": "library/core/src/iter/adapters/enumerate.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fenumerate.rs?ref=2b32b315f91536b32ac60ea0d3a93a1feb1d9215", "patch": "@@ -270,6 +270,13 @@ impl<I> Default for Enumerate<I>\n where\n     I: Iterator + Default,\n {\n+    /// Creates an `Enumerate` iterator from the default value of `I`\n+    /// ```\n+    /// # use core::slice;\n+    /// # use std::iter::Enumerate;\n+    /// let iter: Enumerate<slice::Iter<'_, u8>> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n     fn default() -> Self {\n         Enumerate::new(Default::default())\n     }"}, {"sha": "cb68c807bf5fcb81b254ddbaab4db92070608f97", "filename": "library/core/src/iter/adapters/flatten.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fflatten.rs?ref=2b32b315f91536b32ac60ea0d3a93a1feb1d9215", "patch": "@@ -308,6 +308,14 @@ where\n     I: Iterator + Default,\n     <I as Iterator>::Item: IntoIterator,\n {\n+    /// Creates a `Flatten` iterator from the default value of `I`.\n+    ///\n+    /// ```\n+    /// # use core::slice;\n+    /// # use std::iter::Flatten;\n+    /// let iter: Flatten<slice::Iter<'_, [u8; 4]>> = Default::default();\n+    /// assert_eq!(iter.count(), 0);\n+    /// ```\n     fn default() -> Self {\n         Flatten::new(Default::default())\n     }"}, {"sha": "de91c188eeb2ab62d8711700f24c1c87f6de4949", "filename": "library/core/src/iter/adapters/fuse.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ffuse.rs?ref=2b32b315f91536b32ac60ea0d3a93a1feb1d9215", "patch": "@@ -183,6 +183,14 @@ where\n \n #[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n impl<I: Default> Default for Fuse<I> {\n+    /// Creates a `Fuse` iterator from the default value of `I`.\n+    ///\n+    /// ```\n+    /// # use core::slice;\n+    /// # use std::iter::Fuse;\n+    /// let iter: Fuse<slice::Iter<'_, u8>> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n     fn default() -> Self {\n         Fuse { iter: Default::default() }\n     }"}, {"sha": "0b132e138131a67a4751ea329c3a14ed4b53704e", "filename": "library/core/src/iter/adapters/rev.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Frev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Frev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Frev.rs?ref=2b32b315f91536b32ac60ea0d3a93a1feb1d9215", "patch": "@@ -141,6 +141,13 @@ impl<I> Default for Rev<I>\n where\n     I: Default + Iterator,\n {\n+    /// Creates a `Rev` iterator from the default value of `I`\n+    /// ```\n+    /// # use core::slice;\n+    /// # use core::iter::Rev;\n+    /// let iter: Rev<slice::Iter<'_, u8>> = Default::default();\n+    /// assert_eq!(iter.len(), 0);\n+    /// ```\n     fn default() -> Self {\n         Rev::new(Default::default())\n     }"}, {"sha": "a800da546b45007cf65a4cde5c7103a77a90bc30", "filename": "library/core/src/slice/iter/macros.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs?ref=2b32b315f91536b32ac60ea0d3a93a1feb1d9215", "patch": "@@ -396,6 +396,13 @@ macro_rules! iterator {\n \n         #[stable(feature = \"default_iters\", since = \"CURRENT_RUSTC_VERSION\")]\n         impl<T> Default for $name<'_, T> {\n+            /// Creates an empty slice iterator.\n+            ///\n+            /// ```\n+            #[doc = concat!(\"# use core::slice::\", stringify!($name), \";\")]\n+            #[doc = concat!(\"let iter: \", stringify!($name<'_, u8>), \" = Default::default();\")]\n+            /// assert_eq!(iter.len(), 0);\n+            /// ```\n             fn default() -> Self {\n                 (& $( $mut_ )? []).into_iter()\n             }"}, {"sha": "39559cdbb5ea9c275b9b3db5b1db08291ec90c64", "filename": "library/core/tests/slice.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Fcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b32b315f91536b32ac60ea0d3a93a1feb1d9215/library%2Fcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fslice.rs?ref=2b32b315f91536b32ac60ea0d3a93a1feb1d9215", "patch": "@@ -1,10 +1,8 @@\n use core::cell::Cell;\n use core::cmp::Ordering;\n-use core::iter::ExactSizeIterator;\n use core::mem::MaybeUninit;\n use core::result::Result::{Err, Ok};\n-use core::slice::Iter;\n-use core::{assert_eq, slice};\n+use core::slice;\n \n #[test]\n fn test_position() {\n@@ -226,12 +224,6 @@ fn test_iterator_count() {\n     assert_eq!(iter2.count(), 3);\n }\n \n-#[test]\n-fn test_iterator_default() {\n-    let iter: Iter<'_, u8> = Iter::default();\n-    assert_eq!(iter.len(), 0);\n-}\n-\n #[test]\n fn test_chunks_count() {\n     let v: &[i32] = &[0, 1, 2, 3, 4, 5];"}]}