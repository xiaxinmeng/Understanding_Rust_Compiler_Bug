{"sha": "de403b10448e23f232804596538de92fc57203d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNDAzYjEwNDQ4ZTIzZjIzMjgwNDU5NjUzOGRlOTJmYzU3MjAzZDY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-21T16:29:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-21T16:29:31Z"}, "message": "Merge #8910\n\n8910: Don't lower extern block in the ItemTree r=jonas-schievink a=jonas-schievink\n\nThe ItemTree lowering code used to attach attributes on an `extern {}` block to all the children. This is wrong and causes problems with attribute resolution that manifested as a hang.\r\n\r\nThis PR treats extern blocks as first-class items in the ItemTree and lowers its contents in the `ModCollector` instead.\r\n\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/8414#issuecomment-845607923\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/8905\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/8909\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "dcf8ccdfd09d282f14e5e5c24057496caaa3a4ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcf8ccdfd09d282f14e5e5c24057496caaa3a4ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de403b10448e23f232804596538de92fc57203d6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgp9/rCRBK7hj4Ov3rIwAAetEIAKQPlE5eSpcdKWhVZsJ1K/UO\n78cE85L19lLwOgnrzRN+Z9UopeBo5PmYc3ANB18Vzy/dwYStSU8ypojl1D68fi57\nsS03bzX8ntmRfKHjKa4TekIp1HM5/74FfI9ypp7S9Aijdvwh50g+/eW6awRC7cAM\nBttBmMuF1m0AXRNblkvz4lq1050FzY07r1EHoWRNqm7iW4HiY6HtvNaOniaBu3PX\n7lac6jma98odAi4cMG+FdUJFjpjTWsarQB7QjNvmnQ6igPfc2gR0iexldVLb9IsQ\n8BzaKiu6C8QlTRyZ2ANO5GssGFOEZ2OFBGsr9UdfU+ob8wMQobfNJ7lWuqdUFgI=\n=m+rp\n-----END PGP SIGNATURE-----\n", "payload": "tree dcf8ccdfd09d282f14e5e5c24057496caaa3a4ff\nparent eb08a27f1bd31cc15db4893dded60663effaf3f9\nparent d00bc9c2fc211650bf3d16b0e77fc7dac20f34c5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1621614571 +0000\ncommitter GitHub <noreply@github.com> 1621614571 +0000\n\nMerge #8910\n\n8910: Don't lower extern block in the ItemTree r=jonas-schievink a=jonas-schievink\n\nThe ItemTree lowering code used to attach attributes on an `extern {}` block to all the children. This is wrong and causes problems with attribute resolution that manifested as a hang.\r\n\r\nThis PR treats extern blocks as first-class items in the ItemTree and lowers its contents in the `ModCollector` instead.\r\n\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/8414#issuecomment-845607923\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/8905\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/8909\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de403b10448e23f232804596538de92fc57203d6", "html_url": "https://github.com/rust-lang/rust/commit/de403b10448e23f232804596538de92fc57203d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de403b10448e23f232804596538de92fc57203d6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb08a27f1bd31cc15db4893dded60663effaf3f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb08a27f1bd31cc15db4893dded60663effaf3f9", "html_url": "https://github.com/rust-lang/rust/commit/eb08a27f1bd31cc15db4893dded60663effaf3f9"}, {"sha": "d00bc9c2fc211650bf3d16b0e77fc7dac20f34c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d00bc9c2fc211650bf3d16b0e77fc7dac20f34c5", "html_url": "https://github.com/rust-lang/rust/commit/d00bc9c2fc211650bf3d16b0e77fc7dac20f34c5"}], "stats": {"total": 99, "additions": 79, "deletions": 20}, "files": [{"sha": "797b905d1b0503ca8fb262a6ddd9c4b1b0c8c670", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/de403b10448e23f232804596538de92fc57203d6/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de403b10448e23f232804596538de92fc57203d6/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=de403b10448e23f232804596538de92fc57203d6", "patch": "@@ -132,6 +132,7 @@ impl ItemTree {\n             let ItemTreeData {\n                 imports,\n                 extern_crates,\n+                extern_blocks,\n                 functions,\n                 params,\n                 structs,\n@@ -154,6 +155,7 @@ impl ItemTree {\n \n             imports.shrink_to_fit();\n             extern_crates.shrink_to_fit();\n+            extern_blocks.shrink_to_fit();\n             functions.shrink_to_fit();\n             params.shrink_to_fit();\n             structs.shrink_to_fit();\n@@ -239,6 +241,7 @@ static VIS_PUB_CRATE: RawVisibility = RawVisibility::Module(ModPath::from_kind(P\n struct ItemTreeData {\n     imports: Arena<Import>,\n     extern_crates: Arena<ExternCrate>,\n+    extern_blocks: Arena<ExternBlock>,\n     functions: Arena<Function>,\n     params: Arena<Param>,\n     structs: Arena<Struct>,\n@@ -432,6 +435,7 @@ macro_rules! mod_items {\n mod_items! {\n     Import in imports -> ast::Use,\n     ExternCrate in extern_crates -> ast::ExternCrate,\n+    ExternBlock in extern_blocks -> ast::ExternBlock,\n     Function in functions -> ast::Fn,\n     Struct in structs -> ast::Struct,\n     Union in unions -> ast::Union,\n@@ -507,6 +511,13 @@ pub struct ExternCrate {\n     pub ast_id: FileAstId<ast::ExternCrate>,\n }\n \n+#[derive(Debug, Clone, Eq, PartialEq)]\n+pub struct ExternBlock {\n+    pub abi: Option<Interned<str>>,\n+    pub ast_id: FileAstId<ast::ExternBlock>,\n+    pub children: Box<[ModItem]>,\n+}\n+\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct Function {\n     pub name: Name,\n@@ -691,6 +702,7 @@ impl ModItem {\n         match self {\n             ModItem::Import(_)\n             | ModItem::ExternCrate(_)\n+            | ModItem::ExternBlock(_)\n             | ModItem::Struct(_)\n             | ModItem::Union(_)\n             | ModItem::Enum(_)\n@@ -715,6 +727,7 @@ impl ModItem {\n         match self {\n             ModItem::Import(it) => tree[it.index].ast_id().upcast(),\n             ModItem::ExternCrate(it) => tree[it.index].ast_id().upcast(),\n+            ModItem::ExternBlock(it) => tree[it.index].ast_id().upcast(),\n             ModItem::Function(it) => tree[it.index].ast_id().upcast(),\n             ModItem::Struct(it) => tree[it.index].ast_id().upcast(),\n             ModItem::Union(it) => tree[it.index].ast_id().upcast(),"}, {"sha": "a7ffc6364e383edb2e90c6c3cd640b5c16fb2318", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/de403b10448e23f232804596538de92fc57203d6/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de403b10448e23f232804596538de92fc57203d6/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=de403b10448e23f232804596538de92fc57203d6", "patch": "@@ -147,9 +147,7 @@ impl<'a> Ctx<'a> {\n             ast::Item::MacroCall(ast) => self.lower_macro_call(ast).map(Into::into),\n             ast::Item::MacroRules(ast) => self.lower_macro_rules(ast).map(Into::into),\n             ast::Item::MacroDef(ast) => self.lower_macro_def(ast).map(Into::into),\n-            ast::Item::ExternBlock(ast) => {\n-                Some(ModItems(self.lower_extern_block(ast).into_iter().collect::<SmallVec<_>>()))\n-            }\n+            ast::Item::ExternBlock(ast) => Some(self.lower_extern_block(ast).into()),\n         };\n \n         if !attrs.is_empty() {\n@@ -397,19 +395,7 @@ impl<'a> Ctx<'a> {\n             ret_type\n         };\n \n-        let abi = func.abi().map(|abi| {\n-            // FIXME: Abi::abi() -> Option<SyntaxToken>?\n-            match abi.syntax().last_token() {\n-                Some(tok) if tok.kind() == SyntaxKind::STRING => {\n-                    // FIXME: Better way to unescape?\n-                    Interned::new_str(tok.text().trim_matches('\"'))\n-                }\n-                _ => {\n-                    // `extern` default to be `extern \"C\"`.\n-                    Interned::new_str(\"C\")\n-                }\n-            }\n-        });\n+        let abi = func.abi().map(lower_abi);\n \n         let ast_id = self.source_ast_id_map.ast_id(func);\n \n@@ -647,8 +633,10 @@ impl<'a> Ctx<'a> {\n         Some(id(self.data().macro_defs.alloc(res)))\n     }\n \n-    fn lower_extern_block(&mut self, block: &ast::ExternBlock) -> Vec<ModItem> {\n-        block.extern_item_list().map_or(Vec::new(), |list| {\n+    fn lower_extern_block(&mut self, block: &ast::ExternBlock) -> FileItemTreeId<ExternBlock> {\n+        let ast_id = self.source_ast_id_map.ast_id(block);\n+        let abi = block.abi().map(lower_abi);\n+        let children: Box<[_]> = block.extern_item_list().map_or(Box::new([]), |list| {\n             list.extern_items()\n                 .filter_map(|item| {\n                     self.collect_inner_items(item.syntax());\n@@ -673,13 +661,20 @@ impl<'a> Ctx<'a> {\n                             self.data().type_aliases[foreign_ty.index].is_extern = true;\n                             foreign_ty.into()\n                         }\n-                        ast::ExternItem::MacroCall(_) => return None,\n+                        ast::ExternItem::MacroCall(call) => {\n+                            // FIXME: we need some way of tracking that the macro call is in an\n+                            // extern block\n+                            self.lower_macro_call(&call)?.into()\n+                        }\n                     };\n                     self.add_attrs(id.into(), attrs);\n                     Some(id)\n                 })\n                 .collect()\n-        })\n+        });\n+\n+        let res = ExternBlock { abi, ast_id, children };\n+        id(self.data().extern_blocks.alloc(res))\n     }\n \n     /// Lowers generics defined on `node` and collects inner items defined within.\n@@ -879,3 +874,17 @@ fn is_intrinsic_fn_unsafe(name: &Name) -> bool {\n     ]\n     .contains(&name)\n }\n+\n+fn lower_abi(abi: ast::Abi) -> Interned<str> {\n+    // FIXME: Abi::abi() -> Option<SyntaxToken>?\n+    match abi.syntax().last_token() {\n+        Some(tok) if tok.kind() == SyntaxKind::STRING => {\n+            // FIXME: Better way to unescape?\n+            Interned::new_str(tok.text().trim_matches('\"'))\n+        }\n+        _ => {\n+            // `extern` default to be `extern \"C\"`.\n+            Interned::new_str(\"C\")\n+        }\n+    }\n+}"}, {"sha": "fa4b135fd3c7333daeb626fc52a180483d65f4b5", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de403b10448e23f232804596538de92fc57203d6/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de403b10448e23f232804596538de92fc57203d6/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=de403b10448e23f232804596538de92fc57203d6", "patch": "@@ -1243,6 +1243,7 @@ impl ModCollector<'_, '_> {\n                         status: PartialResolvedImport::Unresolved,\n                     })\n                 }\n+                ModItem::ExternBlock(block) => self.collect(&self.item_tree[block].children),\n                 ModItem::MacroCall(mac) => self.collect_macro_call(&self.item_tree[mac]),\n                 ModItem::MacroRules(id) => self.collect_macro_rules(id),\n                 ModItem::MacroDef(id) => self.collect_macro_def(id),"}, {"sha": "133b2d818427764cbb8f7ed024d669b1ff27f133", "filename": "crates/hir_def/src/nameres/tests/macros.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/de403b10448e23f232804596538de92fc57203d6/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de403b10448e23f232804596538de92fc57203d6/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=de403b10448e23f232804596538de92fc57203d6", "patch": "@@ -735,6 +735,42 @@ fn unresolved_attributes_fall_back_track_per_file_moditems() {\n     );\n }\n \n+#[test]\n+fn unresolved_attrs_extern_block_hang() {\n+    check(\n+        r#\"\n+#[unresolved]\n+extern \"C\" {\n+    #[unresolved]\n+    fn f();\n+}\n+    \"#,\n+        expect![[r#\"\n+        crate\n+        f: v\n+    \"#]],\n+    );\n+}\n+\n+#[test]\n+fn macros_in_extern_block() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    () => { static S: u8; };\n+}\n+\n+extern {\n+    m!();\n+}\n+    \"#,\n+        expect![[r#\"\n+            crate\n+            S: v\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn resolves_derive_helper() {\n     cov_mark::check!(resolved_derive_helper);"}]}