{"sha": "4f35f66796acc8711ccb844afe951aef29cfbaad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMzVmNjY3OTZhY2M4NzExY2NiODQ0YWZlOTUxYWVmMjljZmJhYWQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-08-30T16:05:15Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-09-02T10:25:26Z"}, "message": "Don't store Session in CrateLocator", "tree": {"sha": "9228a49604553e9fb42b3c721b8249da16e94b04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9228a49604553e9fb42b3c721b8249da16e94b04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f35f66796acc8711ccb844afe951aef29cfbaad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f35f66796acc8711ccb844afe951aef29cfbaad", "html_url": "https://github.com/rust-lang/rust/commit/4f35f66796acc8711ccb844afe951aef29cfbaad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f35f66796acc8711ccb844afe951aef29cfbaad/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbb0fe9d803f7fa8688b33306266a6b054c2c3f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbb0fe9d803f7fa8688b33306266a6b054c2c3f4", "html_url": "https://github.com/rust-lang/rust/commit/dbb0fe9d803f7fa8688b33306266a6b054c2c3f4"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "d03575dfb53af55cc8c7634b3b708dd8e2725c36", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4f35f66796acc8711ccb844afe951aef29cfbaad/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f35f66796acc8711ccb844afe951aef29cfbaad/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=4f35f66796acc8711ccb844afe951aef29cfbaad", "patch": "@@ -240,7 +240,8 @@ use tracing::{debug, info, warn};\n #[derive(Clone)]\n crate struct CrateLocator<'a> {\n     // Immutable per-session configuration.\n-    sess: &'a Session,\n+    only_needs_metadata: bool,\n+    sysroot: &'a Path,\n     metadata_loader: &'a dyn MetadataLoader,\n \n     // Immutable per-search configuration.\n@@ -305,8 +306,18 @@ impl<'a> CrateLocator<'a> {\n         root: Option<&'a CratePaths>,\n         is_proc_macro: Option<bool>,\n     ) -> CrateLocator<'a> {\n+        // The all loop is because `--crate-type=rlib --crate-type=rlib` is\n+        // legal and produces both inside this type.\n+        let is_rlib = sess.crate_types().iter().all(|c| *c == CrateType::Rlib);\n+        let needs_object_code = sess.opts.output_types.should_codegen();\n+        // If we're producing an rlib, then we don't need object code.\n+        // Or, if we're not producing object code, then we don't need it either\n+        // (e.g., if we're a cdylib but emitting just metadata).\n+        let only_needs_metadata = is_rlib || !needs_object_code;\n+\n         CrateLocator {\n-            sess,\n+            only_needs_metadata,\n+            sysroot: &sess.sysroot,\n             metadata_loader,\n             crate_name,\n             exact_paths: if hash.is_none() {\n@@ -484,14 +495,7 @@ impl<'a> CrateLocator<'a> {\n             return true;\n         }\n \n-        // The all loop is because `--crate-type=rlib --crate-type=rlib` is\n-        // legal and produces both inside this type.\n-        let is_rlib = self.sess.crate_types().iter().all(|c| *c == CrateType::Rlib);\n-        let needs_object_code = self.sess.opts.output_types.should_codegen();\n-        // If we're producing an rlib, then we don't need object code.\n-        // Or, if we're not producing object code, then we don't need it either\n-        // (e.g., if we're a cdylib but emitting just metadata).\n-        if is_rlib || !needs_object_code {\n+        if self.only_needs_metadata {\n             flavor == CrateFlavor::Rmeta\n         } else {\n             // we need all flavors (perhaps not true, but what we do for now)\n@@ -591,7 +595,7 @@ impl<'a> CrateLocator<'a> {\n             // candidates are all canonicalized, so we canonicalize the sysroot\n             // as well.\n             if let Some((prev, _)) = &ret {\n-                let sysroot = &self.sess.sysroot;\n+                let sysroot = self.sysroot;\n                 let sysroot = sysroot.canonicalize().unwrap_or_else(|_| sysroot.to_path_buf());\n                 if prev.starts_with(&sysroot) {\n                     continue;"}]}