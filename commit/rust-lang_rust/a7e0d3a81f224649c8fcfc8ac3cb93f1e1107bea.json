{"sha": "a7e0d3a81f224649c8fcfc8ac3cb93f1e1107bea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZTBkM2E4MWYyMjQ2NDljOGZjZmM4YWMzY2I5M2YxZTExMDdiZWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-11T19:43:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-11T19:43:44Z"}, "message": "Auto merge of #43750 - tbu-:pr_fn_unreachable, r=sfackler\n\nPut `intrinsics::unreachable` on a possible path to stabilization\n\nMark it with the `unreachable` feature and put it into the `mem` module.\nThis is a pretty straight-forward API that can already be simulated in\nstable Rust by using `transmute` to create an uninhabited enum that can\nbe matched.", "tree": {"sha": "aede5c10be8e1ee591381c67ddafadfbe5881a4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aede5c10be8e1ee591381c67ddafadfbe5881a4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7e0d3a81f224649c8fcfc8ac3cb93f1e1107bea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7e0d3a81f224649c8fcfc8ac3cb93f1e1107bea", "html_url": "https://github.com/rust-lang/rust/commit/a7e0d3a81f224649c8fcfc8ac3cb93f1e1107bea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7e0d3a81f224649c8fcfc8ac3cb93f1e1107bea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edd82ee9f09c74188f88440db6586ef8e5b1c0b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/edd82ee9f09c74188f88440db6586ef8e5b1c0b2", "html_url": "https://github.com/rust-lang/rust/commit/edd82ee9f09c74188f88440db6586ef8e5b1c0b2"}, {"sha": "faadd35ee5074aa85fa6e2078650b3e6f1fd4662", "url": "https://api.github.com/repos/rust-lang/rust/commits/faadd35ee5074aa85fa6e2078650b3e6f1fd4662", "html_url": "https://github.com/rust-lang/rust/commit/faadd35ee5074aa85fa6e2078650b3e6f1fd4662"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "fdca8d00d7a75f1fc0a693765a576b7d536d893d", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a7e0d3a81f224649c8fcfc8ac3cb93f1e1107bea/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7e0d3a81f224649c8fcfc8ac3cb93f1e1107bea/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=a7e0d3a81f224649c8fcfc8ac3cb93f1e1107bea", "patch": "@@ -629,10 +629,12 @@ extern \"rust-intrinsic\" {\n     /// Aborts the execution of the process.\n     pub fn abort() -> !;\n \n-    /// Tells LLVM that this point in the code is not reachable,\n-    /// enabling further optimizations.\n+    /// Tells LLVM that this point in the code is not reachable, enabling\n+    /// further optimizations.\n     ///\n-    /// NB: This is very different from the `unreachable!()` macro!\n+    /// NB: This is very different from the `unreachable!()` macro: Unlike the\n+    /// macro, which panics when it is executed, it is *undefined behavior* to\n+    /// reach code marked with this function.\n     pub fn unreachable() -> !;\n \n     /// Informs the optimizer that a condition is always true."}, {"sha": "6f7adbe1e7a0e9e67754ae9731582c4e209b4668", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a7e0d3a81f224649c8fcfc8ac3cb93f1e1107bea/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7e0d3a81f224649c8fcfc8ac3cb93f1e1107bea/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=a7e0d3a81f224649c8fcfc8ac3cb93f1e1107bea", "patch": "@@ -942,3 +942,15 @@ impl<T: ::fmt::Debug> ::fmt::Debug for ManuallyDrop<T> {\n         }\n     }\n }\n+\n+/// Tells LLVM that this point in the code is not reachable, enabling further\n+/// optimizations.\n+///\n+/// NB: This is very different from the `unreachable!()` macro: Unlike the\n+/// macro, which panics when it is executed, it is *undefined behavior* to\n+/// reach code marked with this function.\n+#[inline]\n+#[unstable(feature = \"unreachable\", issue = \"43751\")]\n+pub unsafe fn unreachable() -> ! {\n+    intrinsics::unreachable()\n+}"}]}