{"sha": "7d05d1e7f0add9e5151d48d51d92b6fb5885e257", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMDVkMWU3ZjBhZGQ5ZTUxNTFkNDhkNTFkOTJiNmZiNTg4NWUyNTc=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2016-12-05T18:15:14Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2016-12-06T00:44:27Z"}, "message": "Consider only libs that aren't excluded by #[link(cfg=...)]", "tree": {"sha": "96d6ce1c413c605d8c1b4d1121283171cc41767d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96d6ce1c413c605d8c1b4d1121283171cc41767d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d05d1e7f0add9e5151d48d51d92b6fb5885e257", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d05d1e7f0add9e5151d48d51d92b6fb5885e257", "html_url": "https://github.com/rust-lang/rust/commit/7d05d1e7f0add9e5151d48d51d92b6fb5885e257", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d05d1e7f0add9e5151d48d51d92b6fb5885e257/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b700dd35e7fe9f3a987cca47a00ac0bdd1cfd425", "url": "https://api.github.com/repos/rust-lang/rust/commits/b700dd35e7fe9f3a987cca47a00ac0bdd1cfd425", "html_url": "https://github.com/rust-lang/rust/commit/b700dd35e7fe9f3a987cca47a00ac0bdd1cfd425"}], "stats": {"total": 41, "additions": 24, "deletions": 17}, "files": [{"sha": "d36242537b8e54a255f9920796d4102f7bb97c54", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7d05d1e7f0add9e5151d48d51d92b6fb5885e257/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d05d1e7f0add9e5151d48d51d92b6fb5885e257/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=7d05d1e7f0add9e5151d48d51d92b6fb5885e257", "patch": "@@ -113,6 +113,13 @@ fn register_native_lib(sess: &Session,\n     cstore.add_used_library(lib);\n }\n \n+fn relevant_lib(sess: &Session, lib: &NativeLibrary) -> bool {\n+    match lib.cfg {\n+        Some(ref cfg) => attr::cfg_matches(cfg, &sess.parse_sess, None),\n+        None => true,\n+    }\n+}\n+\n // Extra info about a crate loaded for plugins or exported macros.\n struct ExtensionCrate {\n     metadata: PMDSource,\n@@ -290,7 +297,7 @@ impl<'a> CrateLoader<'a> {\n \n         let cnum_map = self.resolve_crate_deps(root, &crate_root, &metadata, cnum, span, dep_kind);\n \n-        let cmeta = Rc::new(cstore::CrateMetadata {\n+        let mut cmeta = cstore::CrateMetadata {\n             name: name,\n             extern_crate: Cell::new(None),\n             key_map: metadata.load_key_map(crate_root.index),\n@@ -308,9 +315,18 @@ impl<'a> CrateLoader<'a> {\n                 rlib: rlib,\n                 rmeta: rmeta,\n             },\n-            dllimport_foreign_items: RefCell::new(None),\n-        });\n+            dllimport_foreign_items: FxHashSet(),\n+        };\n+\n+        let dllimports: Vec<_> = cmeta.get_native_libraries().iter()\n+                            .filter(|lib| relevant_lib(self.sess, lib) &&\n+                                          lib.kind == cstore::NativeLibraryKind::NativeUnknown)\n+                            .flat_map(|lib| &lib.foreign_items)\n+                            .map(|id| *id)\n+                            .collect();\n+        cmeta.dllimport_foreign_items.extend(dllimports);\n \n+        let cmeta = Rc::new(cmeta);\n         self.cstore.set_crate_data(cnum, cmeta.clone());\n         (cnum, cmeta)\n     }\n@@ -643,7 +659,7 @@ impl<'a> CrateLoader<'a> {\n         let mut items = vec![];\n         let libs = self.cstore.get_used_libraries();\n         for lib in libs.borrow().iter() {\n-            if lib.kind == kind {\n+            if relevant_lib(self.sess, lib) && lib.kind == kind {\n                 items.extend(&lib.foreign_items);\n             }\n         }"}, {"sha": "7700ebde181333772a7fbda715e721ed85831e18", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d05d1e7f0add9e5151d48d51d92b6fb5885e257/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d05d1e7f0add9e5151d48d51d92b6fb5885e257/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=7d05d1e7f0add9e5151d48d51d92b6fb5885e257", "patch": "@@ -85,7 +85,7 @@ pub struct CrateMetadata {\n \n     pub proc_macros: Option<Vec<(ast::Name, Rc<SyntaxExtension>)>>,\n     // Foreign items imported from a dylib (Windows only)\n-    pub dllimport_foreign_items: RefCell<Option<FxHashSet<DefIndex>>>,\n+    pub dllimport_foreign_items: FxHashSet<DefIndex>,\n }\n \n pub struct CachedInlinedItem {"}, {"sha": "5bd1dea1d79c86ae4812b9e755bd2a4be23478ee", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7d05d1e7f0add9e5151d48d51d92b6fb5885e257/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d05d1e7f0add9e5151d48d51d92b6fb5885e257/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=7d05d1e7f0add9e5151d48d51d92b6fb5885e257", "patch": "@@ -11,13 +11,13 @@\n // Decoding metadata from a single crate's metadata\n \n use astencode::decode_inlined_item;\n-use cstore::{self, CrateMetadata, MetadataBlob, NativeLibrary, NativeLibraryKind};\n+use cstore::{self, CrateMetadata, MetadataBlob, NativeLibrary};\n use index::Index;\n use schema::*;\n \n use rustc::hir::map as hir_map;\n use rustc::hir::map::{DefKey, DefPathData};\n-use rustc::util::nodemap::{FxHashMap, FxHashSet};\n+use rustc::util::nodemap::FxHashMap;\n use rustc::hir;\n use rustc::hir::intravisit::IdRange;\n \n@@ -36,7 +36,6 @@ use rustc::mir::Mir;\n use std::borrow::Cow;\n use std::cell::Ref;\n use std::io;\n-use std::iter::FromIterator;\n use std::mem;\n use std::str;\n use std::u32;\n@@ -1089,15 +1088,7 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     pub fn is_dllimport_foreign_item(&self, id: DefIndex) -> bool {\n-        if self.dllimport_foreign_items.borrow().is_none() {\n-            *self.dllimport_foreign_items.borrow_mut() = Some(FxHashSet::from_iter(\n-                self.get_native_libraries().iter()\n-                    .filter(|lib| lib.kind == NativeLibraryKind::NativeUnknown)\n-                    .flat_map(|lib| &lib.foreign_items)\n-                    .map(|id| *id)\n-            ));\n-        }\n-        self.dllimport_foreign_items.borrow().as_ref().unwrap().contains(&id)\n+        self.dllimport_foreign_items.contains(&id)\n     }\n \n     pub fn is_defaulted_trait(&self, trait_id: DefIndex) -> bool {"}]}