{"sha": "bd29696218c9363d0e6dff7824c53f040eab76fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMjk2OTYyMThjOTM2M2QwZTZkZmY3ODI0YzUzZjA0MGVhYjc2ZmM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-23T06:34:06Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-23T16:24:49Z"}, "message": "Add ability for hardwired lints to operate on the diagnostic builder", "tree": {"sha": "4ded7492627f5162340d4747f79a2fea3552187e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ded7492627f5162340d4747f79a2fea3552187e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd29696218c9363d0e6dff7824c53f040eab76fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd29696218c9363d0e6dff7824c53f040eab76fc", "html_url": "https://github.com/rust-lang/rust/commit/bd29696218c9363d0e6dff7824c53f040eab76fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd29696218c9363d0e6dff7824c53f040eab76fc/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3eeabe7b7d13f8ca2d29e117f45cd420d6f73da4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3eeabe7b7d13f8ca2d29e117f45cd420d6f73da4", "html_url": "https://github.com/rust-lang/rust/commit/3eeabe7b7d13f8ca2d29e117f45cd420d6f73da4"}], "stats": {"total": 64, "additions": 59, "deletions": 5}, "files": [{"sha": "cc7c5dc06660c63c70ecad6278a87619f1e6715a", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bd29696218c9363d0e6dff7824c53f040eab76fc/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd29696218c9363d0e6dff7824c53f040eab76fc/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=bd29696218c9363d0e6dff7824c53f040eab76fc", "patch": "@@ -14,8 +14,11 @@\n //! compiler code, rather than using their own custom pass. Those\n //! lints are all available in `rustc_lint::builtin`.\n \n+use errors::DiagnosticBuilder;\n use lint::{LintPass, LateLintPass, LintArray};\n+use session::Session;\n use session::config::Epoch;\n+use syntax::codemap::Span;\n \n declare_lint! {\n     pub CONST_ERR,\n@@ -312,4 +315,27 @@ impl LintPass for HardwiredLints {\n     }\n }\n \n+// this could be a closure, but then implementing derive traits\n+// becomes hacky (and it gets allocated)\n+#[derive(PartialEq, RustcEncodable, RustcDecodable, Debug)]\n+pub enum BuiltinLintDiagnostics {\n+    Normal,\n+    BareTraitObject(Span)\n+}\n+\n+impl BuiltinLintDiagnostics {\n+    pub fn run(self, sess: &Session, db: &mut DiagnosticBuilder) {\n+        match self {\n+            BuiltinLintDiagnostics::Normal => (),\n+            BuiltinLintDiagnostics::BareTraitObject(span) => {\n+                let sugg = match sess.codemap().span_to_snippet(span) {\n+                    Ok(s) => format!(\"dyn {}\", s),\n+                    Err(_) => format!(\"dyn <type>\")\n+                };\n+                db.span_suggestion(span, \"use `dyn`\", sugg);\n+            }\n+        }\n+    }\n+}\n+\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for HardwiredLints {}"}, {"sha": "a9c023d14309daa8034446d5bcc5736211b00a7d", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bd29696218c9363d0e6dff7824c53f040eab76fc/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd29696218c9363d0e6dff7824c53f040eab76fc/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=bd29696218c9363d0e6dff7824c53f040eab76fc", "patch": "@@ -29,6 +29,7 @@ use self::TargetLint::*;\n use std::slice;\n use lint::{EarlyLintPassObject, LateLintPassObject};\n use lint::{Level, Lint, LintId, LintPass, LintBuffer};\n+use lint::builtin::BuiltinLintDiagnostics;\n use lint::levels::{LintLevelSets, LintLevelsBuilder};\n use middle::privacy::AccessLevels;\n use rustc_serialize::{Decoder, Decodable, Encoder, Encodable};\n@@ -92,6 +93,7 @@ pub struct BufferedEarlyLint {\n     pub ast_id: ast::NodeId,\n     pub span: MultiSpan,\n     pub msg: String,\n+    pub diagnostic: BuiltinLintDiagnostics,\n }\n \n /// Extra information for a future incompatibility lint. See the call\n@@ -446,6 +448,16 @@ pub trait LintContext<'tcx>: Sized {\n         self.lookup(lint, span, msg).emit();\n     }\n \n+    fn lookup_and_emit_with_diagnostics<S: Into<MultiSpan>>(&self,\n+                                                            lint: &'static Lint,\n+                                                            span: Option<S>,\n+                                                            msg: &str,\n+                                                            diagnostic: BuiltinLintDiagnostics) {\n+        let mut db = self.lookup(lint, span, msg);\n+        diagnostic.run(self.sess(), &mut db);\n+        db.emit();\n+    }\n+\n     fn lookup<S: Into<MultiSpan>>(&self,\n                                   lint: &'static Lint,\n                                   span: Option<S>,\n@@ -516,9 +528,10 @@ impl<'a> EarlyContext<'a> {\n \n     fn check_id(&mut self, id: ast::NodeId) {\n         for early_lint in self.buffered.take(id) {\n-            self.lookup_and_emit(early_lint.lint_id.lint,\n-                                 Some(early_lint.span.clone()),\n-                                 &early_lint.msg);\n+            self.lookup_and_emit_with_diagnostics(early_lint.lint_id.lint,\n+                                                  Some(early_lint.span.clone()),\n+                                                  &early_lint.msg,\n+                                                  early_lint.diagnostic);\n         }\n     }\n }"}, {"sha": "a51d06c06edd3a1ebb1a7fd9b5ac8cbe09669555", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd29696218c9363d0e6dff7824c53f040eab76fc/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd29696218c9363d0e6dff7824c53f040eab76fc/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=bd29696218c9363d0e6dff7824c53f040eab76fc", "patch": "@@ -37,6 +37,7 @@ use errors::{DiagnosticBuilder, DiagnosticId};\n use hir::def_id::{CrateNum, LOCAL_CRATE};\n use hir::intravisit::{self, FnKind};\n use hir;\n+use lint::builtin::BuiltinLintDiagnostics;\n use session::{config, Session, DiagnosticMessageId};\n use std::hash;\n use syntax::ast;\n@@ -399,12 +400,14 @@ impl LintBuffer {\n                     lint: &'static Lint,\n                     id: ast::NodeId,\n                     sp: MultiSpan,\n-                    msg: &str) {\n+                    msg: &str,\n+                    diagnostic: BuiltinLintDiagnostics) {\n         let early_lint = BufferedEarlyLint {\n             lint_id: LintId::of(lint),\n             ast_id: id,\n             span: sp,\n             msg: msg.to_string(),\n+            diagnostic\n         };\n         let arr = self.map.entry(id).or_insert(Vec::new());\n         if !arr.contains(&early_lint) {"}, {"sha": "7041efbd5bc5eabe96c2db5feea96ddfc9171a0a", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bd29696218c9363d0e6dff7824c53f040eab76fc/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd29696218c9363d0e6dff7824c53f040eab76fc/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=bd29696218c9363d0e6dff7824c53f040eab76fc", "patch": "@@ -16,6 +16,7 @@ use ich::Fingerprint;\n \n use ich;\n use lint;\n+use lint::builtin::BuiltinLintDiagnostics;\n use middle::allocator::AllocatorKind;\n use middle::dependency_format;\n use session::search_paths::PathKind;\n@@ -341,7 +342,18 @@ impl Session {\n                                            sp: S,\n                                            msg: &str) {\n         match *self.buffered_lints.borrow_mut() {\n-            Some(ref mut buffer) => buffer.add_lint(lint, id, sp.into(), msg),\n+            Some(ref mut buffer) => buffer.add_lint(lint, id, sp.into(),\n+                                                    msg, BuiltinLintDiagnostics::Normal),\n+            None => bug!(\"can't buffer lints after HIR lowering\"),\n+        }\n+    }\n+\n+    pub fn buffer_lint_with_diagnostic<S: Into<MultiSpan>>(&self,\n+        lint: &'static lint::Lint, id: ast::NodeId, sp: S,\n+        msg: &str, diagnostic: BuiltinLintDiagnostics) {\n+        match *self.buffered_lints.borrow_mut() {\n+            Some(ref mut buffer) => buffer.add_lint(lint, id, sp.into(),\n+                                                    msg, diagnostic),\n             None => bug!(\"can't buffer lints after HIR lowering\"),\n         }\n     }"}]}