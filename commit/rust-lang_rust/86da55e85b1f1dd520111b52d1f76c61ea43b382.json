{"sha": "86da55e85b1f1dd520111b52d1f76c61ea43b382", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ZGE1NWU4NWIxZjFkZDUyMDExMWI1MmQxZjc2YzYxZWE0M2IzODI=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-08T20:07:22Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-08T20:07:22Z"}, "message": "std: Fix Ord for Option, using iterator::order", "tree": {"sha": "413b0a2328e1ca3b733ed91c4a1690832027ac70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/413b0a2328e1ca3b733ed91c4a1690832027ac70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86da55e85b1f1dd520111b52d1f76c61ea43b382", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86da55e85b1f1dd520111b52d1f76c61ea43b382", "html_url": "https://github.com/rust-lang/rust/commit/86da55e85b1f1dd520111b52d1f76c61ea43b382", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86da55e85b1f1dd520111b52d1f76c61ea43b382/comments", "author": null, "committer": null, "parents": [{"sha": "9cac4ccc90c135082911c59fa366a88f234c4ecb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cac4ccc90c135082911c59fa366a88f234c4ecb", "html_url": "https://github.com/rust-lang/rust/commit/9cac4ccc90c135082911c59fa366a88f234c4ecb"}], "stats": {"total": 33, "additions": 18, "deletions": 15}, "files": [{"sha": "9af3645c7893c54ac0cdfef9487b930caa0ee117", "filename": "src/libstd/option.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/86da55e85b1f1dd520111b52d1f76c61ea43b382/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86da55e85b1f1dd520111b52d1f76c61ea43b382/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=86da55e85b1f1dd520111b52d1f76c61ea43b382", "patch": "@@ -47,6 +47,7 @@ use ops::Add;\n use util;\n use num::Zero;\n use iterator::Iterator;\n+use iterator;\n use str::{StrSlice, OwnedStr};\n use to_str::ToStr;\n use clone::DeepClone;\n@@ -58,31 +59,21 @@ pub enum Option<T> {\n     Some(T),\n }\n \n-impl<T:Ord> Ord for Option<T> {\n+impl<T: Eq + Ord> Ord for Option<T> {\n     fn lt(&self, other: &Option<T>) -> bool {\n-        match (self, other) {\n-            (&None, &None) => false,\n-            (&None, &Some(_)) => true,\n-            (&Some(_), &None) => false,\n-            (&Some(ref a), &Some(ref b)) => *a < *b\n-        }\n+        iterator::order::lt(self.iter(), other.iter())\n     }\n \n     fn le(&self, other: &Option<T>) -> bool {\n-        match (self, other) {\n-            (&None, &None) => true,\n-            (&None, &Some(_)) => true,\n-            (&Some(_), &None) => false,\n-            (&Some(ref a), &Some(ref b)) => *a <= *b\n-        }\n+        iterator::order::le(self.iter(), other.iter())\n     }\n \n     fn ge(&self, other: &Option<T>) -> bool {\n-        !(self < other)\n+        iterator::order::ge(self.iter(), other.iter())\n     }\n \n     fn gt(&self, other: &Option<T>) -> bool {\n-        !(self <= other)\n+        iterator::order::gt(self.iter(), other.iter())\n     }\n }\n \n@@ -553,6 +544,18 @@ mod tests {\n         assert!(it.next().is_none());\n     }\n \n+    #[test]\n+    fn test_ord() {\n+        let small = Some(1.0);\n+        let big = Some(5.0);\n+        let nan = Some(0.0/0.0);\n+        assert!(!(nan < big));\n+        assert!(!(nan > big));\n+        assert!(small < big);\n+        assert!(None < big);\n+        assert!(big > None);\n+    }\n+\n     #[test]\n     fn test_mutate() {\n         let mut x = Some(3i);"}]}