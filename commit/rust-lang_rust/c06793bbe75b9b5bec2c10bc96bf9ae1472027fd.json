{"sha": "c06793bbe75b9b5bec2c10bc96bf9ae1472027fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNjc5M2JiZTc1YjliNWJlYzJjMTBiYzk2YmY5YWUxNDcyMDI3ZmQ=", "commit": {"author": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2020-12-15T20:28:12Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-12-17T20:44:40Z"}, "message": "Add Roadmap for 2021", "tree": {"sha": "104c16b178bbb8543471b845c58eb3c55ae663f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/104c16b178bbb8543471b845c58eb3c55ae663f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c06793bbe75b9b5bec2c10bc96bf9ae1472027fd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqv54U47RUUXZfOLnLO/Nsn7QvnkFAl/bwzkACgkQLO/Nsn7Q\nvnnnMhAAr7PVYVw99N+PRHJSI0VhDsp89sA+PkZbyKceAbLH3LY6nBYu+o6AEl0X\nQawOMp5VEMfAZuCNdiuc9h3Cj85cWXDzsC7snc8xAxRTpD2zkocdzf4oJ6CiMwGm\n3/zgLSKOaUkt/Axyq+I/VNW07VRsQKcwtsNzUvlEaQsKJfjg5fdLP+RCgShq1old\nbtTYiuDlgm3kFXfGpEEcL6YygToOzuExym0vrMF2nkyq1o7dSPM/0XR9QOXHLNdJ\n+aUUSGF4wscvDcOTHpGQhoUfVih/fNL6XAv7/kEhlm4qasDjEeVG8V4nYQLZnpT1\n/b7T8b+aZcN/6zy4mskW+8DD09vj3U/ImeVykJzOHI5KMgjSBLEndUrNCepblhb4\nyjViZZZaxCDu5AVTdBR9mWE0GRKUbZsa6+eQFrXX+5A6jGPcQG4BgwuihORIpwDY\nWUAb+ozMhNq/CXOih3XuawPV9w0r4vyVMpjCYp0MxMGCTzmYH+auzVVQBrizqXJU\nRY3Kqu+qBqVX9lSMWYS3r3gjQnkBxgMCh1GUPZr51ye2WSFqN+YBdTVvVwjKnO1p\ncR/vFX8YgnEc6Vn+p9R3KIIF8hJqCE52lMQH9lXAf1WM3KjerNmQqqkPNOJrU8e6\nRNvf42FQUWnZOrLw125xMpeujlPuPEI7WORLYQSSsPU7eeFLvNA=\n=oSOX\n-----END PGP SIGNATURE-----", "payload": "tree 104c16b178bbb8543471b845c58eb3c55ae663f8\nparent 5c00931642357c835d5ba292d8c642ef7389021b\nauthor flip1995 <philipp.krones@embecosm.com> 1608064092 +0100\ncommitter flip1995 <hello@philkrones.com> 1608237880 +0100\n\nAdd Roadmap for 2021\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c06793bbe75b9b5bec2c10bc96bf9ae1472027fd", "html_url": "https://github.com/rust-lang/rust/commit/c06793bbe75b9b5bec2c10bc96bf9ae1472027fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c06793bbe75b9b5bec2c10bc96bf9ae1472027fd/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c00931642357c835d5ba292d8c642ef7389021b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c00931642357c835d5ba292d8c642ef7389021b", "html_url": "https://github.com/rust-lang/rust/commit/5c00931642357c835d5ba292d8c642ef7389021b"}], "stats": {"total": 228, "additions": 228, "deletions": 0}, "files": [{"sha": "1407ac6823daf5356443a0eeabf983dff90358ec", "filename": "doc/roadmap-2021.md", "status": "added", "additions": 228, "deletions": 0, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/c06793bbe75b9b5bec2c10bc96bf9ae1472027fd/doc%2Froadmap-2021.md", "raw_url": "https://github.com/rust-lang/rust/raw/c06793bbe75b9b5bec2c10bc96bf9ae1472027fd/doc%2Froadmap-2021.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Froadmap-2021.md?ref=c06793bbe75b9b5bec2c10bc96bf9ae1472027fd", "patch": "@@ -0,0 +1,228 @@\n+# Roadmap 2021\n+\n+# Summary\n+\n+This Roadmap lays out the plans for Clippy in 2021:\n+\n+- Improving usability and reliability\n+- Improving experience of contributors and maintainers\n+- Develop and specify processes\n+\n+Members of the Clippy team will be assigned tasks from one or more of these\n+topics. The team member is then responsible to complete the assigned tasks. This\n+can either be done by implementing them or by providing mentorship to interested\n+contributors.\n+\n+# Motivation\n+\n+With the ongoing growth of the Rust language and with that of the whole\n+ecosystem, also Clippy gets more and more users and contributors. This is good\n+for the project, but also brings challenges along. Some of these challenges are:\n+\n+- More issues about reliability or usability are popping up\n+- Traffic is hard to handle for a small team\n+- Bigger projects don't get completed due to the lack of processes and/or time\n+  of the team members\n+\n+Additionally, according to the [Rust Roadmap 2021], clear processes should be\n+defined by every team and unified across teams. This Roadmap is the first step\n+towards this.\n+\n+[Rust Roadmap 2021]: https://github.com/rust-lang/rfcs/pull/3037\n+\n+# Explanation\n+\n+This section will explain the things that should be done in 2021. It is\n+important to note, that this document focuses on the \"What?\", not the \"How?\".\n+The later will be addressed in follow-up tracking issue, with an assigned team\n+member.\n+\n+The following is split up in two major sections. The first section covers the\n+user facing plans, the second section the internal plans.\n+\n+## User Facing\n+\n+Clippy should be as pleasant to use and configure as possible. This section\n+covers plans that should be implemented to improve the situation of Clippy in\n+this regard.\n+\n+### Usability\n+\n+In the following, plans to improve the usability are covered.\n+\n+#### No Output After `cargo check`\n+\n+Currently when `cargo clippy` is run after `cargo check`, it does not produce\n+any output. This is especially problematic since `rust-analyzer` is on the rise\n+and it uses `cargo check` for checking code. A fix is already implemented, but\n+it still has to be pushed over the finish line. This also includes the\n+stabilization of the `cargo clippy --fix` command or the support of multi-span\n+suggestions in `rustfix`.\n+\n+- [#4612](https://github.com/rust-lang/rust-clippy/issues/4612)\n+\n+#### `lints.toml` Configuration\n+\n+This is something that comes up every now and then: a reusable configuration\n+file, where lint levels can be defined. Discussions about this often lead to\n+nothing specific or to \"we need an RFC for this\". And this is exactly what needs\n+to be done. Get together with the cargo team and write an RFC and implement such\n+a configuration file somehow and somewhere.\n+\n+- [#3164](https://github.com/rust-lang/rust-clippy/issues/3164)\n+- [cargo#5034](https://github.com/rust-lang/cargo/issues/5034)\n+- [IRLO](https://internals.rust-lang.org/t/proposal-cargo-lint-configuration/9135/8)\n+\n+#### Lint Groups\n+\n+There are more and more issues about managing lints in Clippy popping up. Lints\n+are hard to implement with a guarantee of no/few false positives (FPs). One way\n+to address this might be to introduce more lint groups to give users the ability\n+to better manage lints, or improve the process of classifying lints, so that\n+disabling lints due to FPs becomes rare. It is important to note, that Clippy\n+lints are less conservative than `rustc` lints, which won't change in the\n+future.\n+\n+- [#5537](https://github.com/rust-lang/rust-clippy/issues/5537)\n+- [#6366](https://github.com/rust-lang/rust-clippy/issues/6366)\n+\n+### Reliability\n+\n+In the following, plans to improve the reliability are covered.\n+\n+#### False Positive Rate\n+\n+In the worst case, new lints are only available in nightly for 2 weeks, before\n+hitting beta and ultimately stable. This and the fact that fewer people use\n+nightly Rust nowadays makes it more probable that a lint with many FPs hits\n+stable. This leads to annoyed users, that will disable these new lints in the\n+best case and to more annoyed users, that will stop using Clippy in the worst.\n+A process should be developed and implemented to prevent this from happening.\n+\n+- [#6429](https://github.com/rust-lang/rust-clippy/issues/6429)\n+\n+## Internal\n+\n+(The end of) 2020 has shown, that Clippy has to think about the available\n+resources, especially regarding management and maintenance of the project. This\n+section address issues affecting team members and contributors.\n+\n+### Management\n+\n+In 2020 Clippy achieved over 1000 open issues with regularly between 25-35 open\n+PRs. This is simultaneously a win and a loss. More issues and PRs means more\n+people are interested in Clippy and in contributing to it. On the other hand, it\n+means for team members more work and for contributors longer wait times for\n+reviews. The following will describe plans how to improve the situation for both\n+team members and contributors.\n+\n+#### Clear Expectations for Team Members\n+\n+According to the [Rust Roadmap 2021], a document specifying what it means to be\n+a member of the team should be produced. This should not put more pressure on\n+the team members, but rather help them and interested folks to know what the\n+expectations are. With this it should also be easier to recruit new team members\n+and may encourage people to get in touch, if they're interested to join.\n+\n+#### Scaling up the Team\n+\n+More people means less work for each individual. Together with the document\n+about expectations for team members, a document defining the process of how to\n+join the team should be produced. This can also increase the stability of the\n+team, in case of current members dropping out (temporarily). There can also be\n+different roles in the team, like people triaging vs. people reviewing.\n+\n+#### Regular Meetings\n+\n+Other teams have regular meetings. Clippy is big enough that it might be worth\n+to also do them. Especially if more people join the team, this can be important\n+for sync-ups. Besides the asynchronous communication, that works well for\n+working on separate lints, a meeting adds a synchronous alternative at a known\n+time. This is especially helpful if there are bigger things that need to be\n+discussed (like the projects in this roadmap). For starters bi-weekly meetings\n+before Rust syncs might make sense.\n+\n+#### Triaging\n+\n+To get a handle on the influx of open issues, a process for triaging issues and\n+PRs should be developed. Officially, Clippy follows the Rust triage process, but\n+currently no one enforces it. This can be improved by sharing triage teams\n+across projects or by implementing dashboards / tools which simplify triaging.\n+\n+### Development\n+\n+Improving the developer and contributor experience is something the Clippy team\n+works on regularly. Though, some things might need special attention and\n+planing. These topics are listed in the following.\n+\n+#### Process for New and Existing Lints\n+\n+As already mentioned above, classifying new lints gets quite hard, because the\n+probability of a buggy lint getting into stable is quite high. A process should\n+be implemented on how to classify lints. In addition, a test system should be\n+developed to find out which lints are currently problematic in real world code\n+to fix or disable them.\n+\n+- [#6429 (comment)](https://github.com/rust-lang/rust-clippy/issues/6429#issuecomment-741056379)\n+- [#6429 (comment)](https://github.com/rust-lang/rust-clippy/issues/6429#issuecomment-741153345)\n+\n+#### Processes\n+\n+Related to the point before, a process for suggesting and discussing major\n+changes should be implemented. It's also not clearly defined when a lint should\n+be enabled or disabled by default. This can also be improved by the test system\n+mentioned above.\n+\n+#### Dev-Tools\n+\n+There's already `cargo dev` which makes Clippy development easier and more\n+pleasant. This can still be expanded, so that it covers more areas of the\n+development process.\n+\n+- [#5394](https://github.com/rust-lang/rust-clippy/issues/5394)\n+\n+#### Contributor Guide\n+\n+Similar to a Clippy Book, which describes how to use Clippy, a book about how to\n+contribute to Clippy might be helpful for new and existing contributors. There's\n+already the `doc` directory in the Clippy repo, this can be turned into a\n+`mdbook`.\n+\n+#### `rustc` integration\n+\n+Recently Clippy was integrated with `git subtree` into the `rust-lang/rust`\n+repository. This made syncing between the two repositories easier. A\n+`#[non_exhaustive]` list of things that still can be improved is:\n+\n+1. Use the same `rustfmt` version and configuration as `rustc`.\n+2. Make `cargo dev` work in the Rust repo, just as it works in the Clippy repo.\n+   E.g. `cargo dev bless` or `cargo dev update_lints`. And even add more things\n+   to it that might be useful for the Rust repo, e.g. `cargo dev deprecate`.\n+3. Easier sync process. The `subtree` situation is not ideal.\n+\n+# Prior Art\n+\n+## Rust Roadmap\n+\n+Rust's roadmap process was established by [RFC 1728] in 2016. Since then every\n+year a roadmap was published, that defined the bigger plans for the coming\n+years. This years roadmap can be found [here][Rust Roadmap 2021].\n+\n+[RFC 1728]: https://rust-lang.github.io/rfcs/1728-north-star.html\n+\n+# Drawbacks\n+\n+## Big Roadmap\n+\n+This roadmap is pretty big and not all items listed in this document might be\n+addressed during 2021. Because this is the first roadmap for Clippy, having open\n+tasks at the end of 2021 is fine, but they should be revisited in the 2022\n+roadmap.\n+\n+# Unresolved Questions\n+\n+## Prioritization\n+\n+This document is not in the order from highest to lowest priority, but grouped\n+into tasks that address the same broader topic. Prioritizing these tasks might\n+help to get them completed."}]}