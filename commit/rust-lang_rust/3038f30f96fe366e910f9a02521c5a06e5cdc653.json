{"sha": "3038f30f96fe366e910f9a02521c5a06e5cdc653", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwMzhmMzBmOTZmZTM2NmU5MTBmOWEwMjUyMWM1YTA2ZTVjZGM2NTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-20T17:44:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-20T17:44:15Z"}, "message": "Auto merge of #38271 - jseyfried:rfc_1560_warning_cycle, r=nrc\n\nresolve: change most backwards incompatible ambiguity errors to `legacy_imports` warnings\n\nFixes #38176.\nr? @nrc or @nikomatsakis", "tree": {"sha": "a4eb12eb35941038941d4ebbf5a8d36dd963fe9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4eb12eb35941038941d4ebbf5a8d36dd963fe9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3038f30f96fe366e910f9a02521c5a06e5cdc653", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3038f30f96fe366e910f9a02521c5a06e5cdc653", "html_url": "https://github.com/rust-lang/rust/commit/3038f30f96fe366e910f9a02521c5a06e5cdc653", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3038f30f96fe366e910f9a02521c5a06e5cdc653/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94ae2a2e6791e0c4ab6fba836b2b09a07f2d3c8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/94ae2a2e6791e0c4ab6fba836b2b09a07f2d3c8a", "html_url": "https://github.com/rust-lang/rust/commit/94ae2a2e6791e0c4ab6fba836b2b09a07f2d3c8a"}, {"sha": "cfabce22304d5e9008b36a1895cf3206e7eb5d19", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfabce22304d5e9008b36a1895cf3206e7eb5d19", "html_url": "https://github.com/rust-lang/rust/commit/cfabce22304d5e9008b36a1895cf3206e7eb5d19"}], "stats": {"total": 139, "additions": 111, "deletions": 28}, "files": [{"sha": "667c2590fa9966d7b6f539fc70c5ad5849f15dfd", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3038f30f96fe366e910f9a02521c5a06e5cdc653/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3038f30f96fe366e910f9a02521c5a06e5cdc653/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=3038f30f96fe366e910f9a02521c5a06e5cdc653", "patch": "@@ -211,6 +211,12 @@ declare_lint! {\n      not named `mod.rs`\"\n }\n \n+declare_lint! {\n+    pub LEGACY_IMPORTS,\n+    Warn,\n+    \"detects names that resolve to ambiguous glob imports with RFC 1560\"\n+}\n+\n declare_lint! {\n     pub DEPRECATED,\n     Warn,\n@@ -257,6 +263,7 @@ impl LintPass for HardwiredLints {\n             PATTERNS_IN_FNS_WITHOUT_BODY,\n             EXTRA_REQUIREMENT_IN_IMPL,\n             LEGACY_DIRECTORY_OWNERSHIP,\n+            LEGACY_IMPORTS,\n             DEPRECATED\n         )\n     }"}, {"sha": "a53d43b2a257ae365b390fb7ebce3763319fbe81", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3038f30f96fe366e910f9a02521c5a06e5cdc653/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3038f30f96fe366e910f9a02521c5a06e5cdc653/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=3038f30f96fe366e910f9a02521c5a06e5cdc653", "patch": "@@ -234,6 +234,10 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(LEGACY_DIRECTORY_OWNERSHIP),\n             reference: \"issue #37872 <https://github.com/rust-lang/rust/issues/37872>\",\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(LEGACY_IMPORTS),\n+            reference: \"issue #38260 <https://github.com/rust-lang/rust/issues/38260>\",\n+        },\n         ]);\n \n     // Register renamed and removed lints"}, {"sha": "7ae8a5fa1965283ffee94fec2a12c6033b76f1e9", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 38, "deletions": 18, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3038f30f96fe366e910f9a02521c5a06e5cdc653/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3038f30f96fe366e910f9a02521c5a06e5cdc653/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=3038f30f96fe366e910f9a02521c5a06e5cdc653", "patch": "@@ -64,7 +64,7 @@ use syntax::ast::{Item, ItemKind, ImplItem, ImplItemKind};\n use syntax::ast::{Local, Mutability, Pat, PatKind, Path};\n use syntax::ast::{PathSegment, PathParameters, QSelf, TraitItemKind, TraitRef, Ty, TyKind};\n \n-use syntax_pos::{Span, DUMMY_SP};\n+use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n use errors::DiagnosticBuilder;\n \n use std::cell::{Cell, RefCell};\n@@ -896,6 +896,7 @@ enum NameBindingKind<'a> {\n     Ambiguity {\n         b1: &'a NameBinding<'a>,\n         b2: &'a NameBinding<'a>,\n+        legacy: bool,\n     }\n }\n \n@@ -907,13 +908,15 @@ struct AmbiguityError<'a> {\n     lexical: bool,\n     b1: &'a NameBinding<'a>,\n     b2: &'a NameBinding<'a>,\n+    legacy: bool,\n }\n \n impl<'a> NameBinding<'a> {\n     fn module(&self) -> Option<Module<'a>> {\n         match self.kind {\n             NameBindingKind::Module(module) => Some(module),\n             NameBindingKind::Import { binding, .. } => binding.module(),\n+            NameBindingKind::Ambiguity { legacy: true, b1, .. } => b1.module(),\n             _ => None,\n         }\n     }\n@@ -923,6 +926,7 @@ impl<'a> NameBinding<'a> {\n             NameBindingKind::Def(def) => def,\n             NameBindingKind::Module(module) => module.def().unwrap(),\n             NameBindingKind::Import { binding, .. } => binding.def(),\n+            NameBindingKind::Ambiguity { legacy: true, b1, .. } => b1.def(),\n             NameBindingKind::Ambiguity { .. } => Def::Err,\n         }\n     }\n@@ -1349,11 +1353,14 @@ impl<'a> Resolver<'a> {\n                 self.record_use(name, ns, binding, span)\n             }\n             NameBindingKind::Import { .. } => false,\n-            NameBindingKind::Ambiguity { b1, b2 } => {\n+            NameBindingKind::Ambiguity { b1, b2, legacy } => {\n                 self.ambiguity_errors.push(AmbiguityError {\n-                    span: span, name: name, lexical: false, b1: b1, b2: b2,\n+                    span: span, name: name, lexical: false, b1: b1, b2: b2, legacy: legacy,\n                 });\n-                true\n+                if legacy {\n+                    self.record_use(name, ns, b1, span);\n+                }\n+                !legacy\n             }\n             _ => false\n         }\n@@ -3065,26 +3072,39 @@ impl<'a> Resolver<'a> {\n         self.report_shadowing_errors();\n         let mut reported_spans = FxHashSet();\n \n-        for &AmbiguityError { span, name, b1, b2, lexical } in &self.ambiguity_errors {\n+        for &AmbiguityError { span, name, b1, b2, lexical, legacy } in &self.ambiguity_errors {\n             if !reported_spans.insert(span) { continue }\n             let participle = |binding: &NameBinding| {\n                 if binding.is_import() { \"imported\" } else { \"defined\" }\n             };\n             let msg1 = format!(\"`{}` could resolve to the name {} here\", name, participle(b1));\n             let msg2 = format!(\"`{}` could also resolve to the name {} here\", name, participle(b2));\n-            self.session.struct_span_err(span, &format!(\"`{}` is ambiguous\", name))\n-                .span_note(b1.span, &msg1)\n-                .span_note(b2.span, &msg2)\n-                .note(&if !lexical && b1.is_glob_import() {\n-                    format!(\"consider adding an explicit import of `{}` to disambiguate\", name)\n-                } else if let Def::Macro(..) = b1.def() {\n-                    format!(\"macro-expanded {} do not shadow\",\n-                            if b1.is_import() { \"macro imports\" } else { \"macros\" })\n-                } else {\n-                    format!(\"macro-expanded {} do not shadow when used in a macro invocation path\",\n-                            if b1.is_import() { \"imports\" } else { \"items\" })\n-                })\n-                .emit();\n+            let note = if !lexical && b1.is_glob_import() {\n+                format!(\"consider adding an explicit import of `{}` to disambiguate\", name)\n+            } else if let Def::Macro(..) = b1.def() {\n+                format!(\"macro-expanded {} do not shadow\",\n+                        if b1.is_import() { \"macro imports\" } else { \"macros\" })\n+            } else {\n+                format!(\"macro-expanded {} do not shadow when used in a macro invocation path\",\n+                        if b1.is_import() { \"imports\" } else { \"items\" })\n+            };\n+            if legacy {\n+                let id = match b2.kind {\n+                    NameBindingKind::Import { directive, .. } => directive.id,\n+                    _ => unreachable!(),\n+                };\n+                let mut span = MultiSpan::from_span(span);\n+                span.push_span_label(b1.span, msg1);\n+                span.push_span_label(b2.span, msg2);\n+                let msg = format!(\"`{}` is ambiguous\", name);\n+                self.session.add_lint(lint::builtin::LEGACY_IMPORTS, id, span, msg);\n+            } else {\n+                self.session.struct_span_err(span, &format!(\"`{}` is ambiguous\", name))\n+                    .span_note(b1.span, &msg1)\n+                    .span_note(b2.span, &msg2)\n+                    .note(&note)\n+                    .emit();\n+            }\n         }\n \n         for &PrivacyError(span, name, binding) in &self.privacy_errors {"}, {"sha": "613829bab8be313869e6199341b629486048aec8", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3038f30f96fe366e910f9a02521c5a06e5cdc653/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3038f30f96fe366e910f9a02521c5a06e5cdc653/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=3038f30f96fe366e910f9a02521c5a06e5cdc653", "patch": "@@ -288,6 +288,7 @@ impl<'a> Resolver<'a> {\n                         Some(shadower) if shadower.def() != binding.def() => {\n                             self.ambiguity_errors.push(AmbiguityError {\n                                 span: span, name: name, b1: shadower, b2: binding, lexical: true,\n+                                legacy: false,\n                             });\n                             return Ok(shadower);\n                         }"}, {"sha": "208c43d898ce01bccb5c4b9eab5d29897a5fe243", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/3038f30f96fe366e910f9a02521c5a06e5cdc653/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3038f30f96fe366e910f9a02521c5a06e5cdc653/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=3038f30f96fe366e910f9a02521c5a06e5cdc653", "patch": "@@ -159,6 +159,7 @@ impl<'a> Resolver<'a> {\n                        binding.def() != shadowed_glob.def() {\n                         self.ambiguity_errors.push(AmbiguityError {\n                             span: span, name: name, lexical: false, b1: binding, b2: shadowed_glob,\n+                            legacy: false,\n                         });\n                     }\n                 }\n@@ -336,9 +337,9 @@ impl<'a> Resolver<'a> {\n     }\n \n     pub fn ambiguity(&mut self, b1: &'a NameBinding<'a>, b2: &'a NameBinding<'a>)\n-                 -> &'a NameBinding<'a> {\n+                     -> &'a NameBinding<'a> {\n         self.arenas.alloc_name_binding(NameBinding {\n-            kind: NameBindingKind::Ambiguity { b1: b1, b2: b2 },\n+            kind: NameBindingKind::Ambiguity { b1: b1, b2: b2, legacy: false },\n             vis: if b1.vis.is_at_least(b2.vis, self) { b1.vis } else { b2.vis },\n             span: b1.span,\n             expansion: Mark::root(),\n@@ -726,7 +727,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         }\n \n         for (&(name, ns), resolution) in module.resolutions.borrow().iter() {\n-            let resolution = resolution.borrow();\n+            let resolution = &mut *resolution.borrow_mut();\n             let binding = match resolution.binding {\n                 Some(binding) => binding,\n                 None => continue,\n@@ -743,14 +744,34 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                 }\n             }\n \n-            if let NameBindingKind::Import { binding: orig_binding, directive, .. } = binding.kind {\n-                if ns == TypeNS && orig_binding.is_variant() &&\n-                   !orig_binding.vis.is_at_least(binding.vis, self) {\n-                    let msg = format!(\"variant `{}` is private, and cannot be reexported \\\n-                                       (error E0364), consider declaring its enum as `pub`\",\n-                                      name);\n-                    self.session.add_lint(PRIVATE_IN_PUBLIC, directive.id, binding.span, msg);\n+            match binding.kind {\n+                NameBindingKind::Import { binding: orig_binding, directive, .. } => {\n+                    if ns == TypeNS && orig_binding.is_variant() &&\n+                       !orig_binding.vis.is_at_least(binding.vis, self) {\n+                        let msg = format!(\"variant `{}` is private, and cannot be reexported \\\n+                                           (error E0364), consider declaring its enum as `pub`\",\n+                                          name);\n+                        self.session.add_lint(PRIVATE_IN_PUBLIC, directive.id, binding.span, msg);\n+                    }\n+                }\n+                NameBindingKind::Ambiguity { b1, b2, .. }\n+                        if b1.is_glob_import() && b2.is_glob_import() => {\n+                    let (orig_b1, orig_b2) = match (&b1.kind, &b2.kind) {\n+                        (&NameBindingKind::Import { binding: b1, .. },\n+                         &NameBindingKind::Import { binding: b2, .. }) => (b1, b2),\n+                        _ => continue,\n+                    };\n+                    let (b1, b2) = match (orig_b1.vis, orig_b2.vis) {\n+                        (ty::Visibility::Public, ty::Visibility::Public) => continue,\n+                        (ty::Visibility::Public, _) => (b1, b2),\n+                        (_, ty::Visibility::Public) => (b2, b1),\n+                        _ => continue,\n+                    };\n+                    resolution.binding = Some(self.arenas.alloc_name_binding(NameBinding {\n+                        kind: NameBindingKind::Ambiguity { b1: b1, b2: b2, legacy: true }, ..*b1\n+                    }));\n                 }\n+                _ => {}\n             }\n         }\n "}, {"sha": "bed10c87ae185672e42e0b4f51d4f68b7bb59d5d", "filename": "src/test/compile-fail/imports/rfc-1560-warning-cycle.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3038f30f96fe366e910f9a02521c5a06e5cdc653/src%2Ftest%2Fcompile-fail%2Fimports%2Frfc-1560-warning-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3038f30f96fe366e910f9a02521c5a06e5cdc653/src%2Ftest%2Fcompile-fail%2Fimports%2Frfc-1560-warning-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimports%2Frfc-1560-warning-cycle.rs?ref=3038f30f96fe366e910f9a02521c5a06e5cdc653", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+#![allow(unused)]\n+\n+pub struct Foo;\n+\n+mod bar {\n+    struct Foo;\n+\n+    mod baz {\n+        use *; //~ NOTE `Foo` could resolve to the name imported here\n+        use bar::*; //~ NOTE `Foo` could also resolve to the name imported here\n+        fn f(_: Foo) {}\n+        //~^ WARN `Foo` is ambiguous\n+        //~| WARN hard error in a future release\n+        //~| NOTE see issue #38260\n+    }\n+}\n+\n+#[rustc_error]\n+fn main() {} //~ ERROR compilation successful"}]}