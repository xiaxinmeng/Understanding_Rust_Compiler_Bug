{"sha": "3558736582eebdf47a14940143f87f31304430ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NTg3MzY1ODJlZWJkZjQ3YTE0OTQwMTQzZjg3ZjMxMzA0NDMwZWU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-10T15:56:55Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-10T15:56:55Z"}, "message": "Better name", "tree": {"sha": "71ffb649b48ee965ae0c99df422fc0acc3fdbcc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71ffb649b48ee965ae0c99df422fc0acc3fdbcc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3558736582eebdf47a14940143f87f31304430ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3558736582eebdf47a14940143f87f31304430ee", "html_url": "https://github.com/rust-lang/rust/commit/3558736582eebdf47a14940143f87f31304430ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3558736582eebdf47a14940143f87f31304430ee/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d20c8f218710b7d98611cf501783a591b7dc0bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d20c8f218710b7d98611cf501783a591b7dc0bb", "html_url": "https://github.com/rust-lang/rust/commit/2d20c8f218710b7d98611cf501783a591b7dc0bb"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "fcdaeef49b000a8ce7cba54a07bde78e69962698", "filename": "crates/ra_ide/src/completion/complete_keyword.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3558736582eebdf47a14940143f87f31304430ee/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3558736582eebdf47a14940143f87f31304430ee/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=3558736582eebdf47a14940143f87f31304430ee", "patch": "@@ -92,7 +92,7 @@ pub(super) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n         add_keyword(ctx, acc, \"union\", \"union $0 {}\");\n     }\n \n-    if ctx.can_be_expr {\n+    if ctx.is_expr {\n         add_keyword(ctx, acc, \"match\", \"match $0 {}\");\n         add_keyword(ctx, acc, \"while\", \"while $0 {}\");\n         add_keyword(ctx, acc, \"loop\", \"loop {$0}\");"}, {"sha": "02811a91e21399ef805279b2d279443cce61e45e", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3558736582eebdf47a14940143f87f31304430ee/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3558736582eebdf47a14940143f87f31304430ee/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=3558736582eebdf47a14940143f87f31304430ee", "patch": "@@ -54,7 +54,7 @@ pub(crate) struct CompletionContext<'a> {\n     /// `true` if we are a statement or a last expr in the block.\n     pub(super) can_be_stmt: bool,\n     /// `true` if we expect an expression at the cursor position.\n-    pub(super) can_be_expr: bool,\n+    pub(super) is_expr: bool,\n     /// Something is typed at the \"top\" level, in module or impl/trait.\n     pub(super) is_new_item: bool,\n     /// The receiver if this is a field or method access, i.e. writing something.<|>\n@@ -129,7 +129,7 @@ impl<'a> CompletionContext<'a> {\n             path_prefix: None,\n             after_if: false,\n             can_be_stmt: false,\n-            can_be_expr: false,\n+            is_expr: false,\n             is_new_item: false,\n             dot_receiver: None,\n             is_call: false,\n@@ -406,7 +406,7 @@ impl<'a> CompletionContext<'a> {\n                         None\n                     })\n                     .unwrap_or(false);\n-                self.can_be_expr = path.syntax().parent().and_then(ast::PathExpr::cast).is_some();\n+                self.is_expr = path.syntax().parent().and_then(ast::PathExpr::cast).is_some();\n \n                 if let Some(off) = name_ref.syntax().text_range().start().checked_sub(2.into()) {\n                     if let Some(if_expr) ="}]}