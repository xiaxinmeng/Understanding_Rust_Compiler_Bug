{"sha": "0fbb315be70aaaa19bd38801ad894657332f9fc3", "node_id": "C_kwDOAAsO6NoAKDBmYmIzMTViZTcwYWFhYTE5YmQzODgwMWFkODk0NjU3MzMyZjlmYzM", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-21T19:33:42Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-22T19:21:27Z"}, "message": "Use revisions or ignore-compare-mode-nll for NLL in generic-associated-types", "tree": {"sha": "06da4477bc194e293e6d255be6f2ed18efeeb060", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06da4477bc194e293e6d255be6f2ed18efeeb060"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fbb315be70aaaa19bd38801ad894657332f9fc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fbb315be70aaaa19bd38801ad894657332f9fc3", "html_url": "https://github.com/rust-lang/rust/commit/0fbb315be70aaaa19bd38801ad894657332f9fc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fbb315be70aaaa19bd38801ad894657332f9fc3/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62806f75369f810ddde1b28e6aca7b8a2792aac3", "url": "https://api.github.com/repos/rust-lang/rust/commits/62806f75369f810ddde1b28e6aca7b8a2792aac3", "html_url": "https://github.com/rust-lang/rust/commit/62806f75369f810ddde1b28e6aca7b8a2792aac3"}], "stats": {"total": 70, "additions": 26, "deletions": 44}, "files": [{"sha": "3da7794b3d2c0352f504612541e6dd3f52270351", "filename": "src/test/ui/generic-associated-types/extended/lending_iterator.base.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/62806f75369f810ddde1b28e6aca7b8a2792aac3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.base.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62806f75369f810ddde1b28e6aca7b8a2792aac3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.base.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.base.nll.stderr?ref=62806f75369f810ddde1b28e6aca7b8a2792aac3", "patch": "@@ -1,12 +0,0 @@\n-error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/lending_iterator.rs:14:45\n-   |\n-LL |     fn from_iter<T: for<'x> LendingIterator<Item<'x> = A>>(iter: T) -> Self;\n-   |     ------------------------------------------------------------------------ definition of `from_iter` from trait\n-...\n-LL |     fn from_iter<I: for<'x> LendingIterator<Item<'x> = A>>(mut iter: I) -> Self {\n-   |                                             ^^^^^^^^^^^^ impl has extra requirement `I: 'x`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0276`."}, {"sha": "aa1e50014fe4ebbde99125c993cdcbac07ed5c23", "filename": "src/test/ui/generic-associated-types/extended/lending_iterator.base.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0fbb315be70aaaa19bd38801ad894657332f9fc3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fbb315be70aaaa19bd38801ad894657332f9fc3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.base.stderr?ref=0fbb315be70aaaa19bd38801ad894657332f9fc3", "patch": "@@ -1,5 +1,5 @@\n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/lending_iterator.rs:14:45\n+  --> $DIR/lending_iterator.rs:16:45\n    |\n LL |     fn from_iter<T: for<'x> LendingIterator<Item<'x> = A>>(iter: T) -> Self;\n    |     ------------------------------------------------------------------------ definition of `from_iter` from trait\n@@ -8,15 +8,15 @@ LL |     fn from_iter<I: for<'x> LendingIterator<Item<'x> = A>>(mut iter: I) ->\n    |                                             ^^^^^^^^^^^^ impl has extra requirement `I: 'x`\n \n error[E0311]: the parameter type `Self` may not live long enough\n-  --> $DIR/lending_iterator.rs:35:9\n+  --> $DIR/lending_iterator.rs:37:9\n    |\n LL |         <B as FromLendingIterator<A>>::from_iter(self)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `Self: 'a`...\n    = note: ...so that the type `Self` will meet its required lifetime bounds...\n note: ...that is required by this bound\n-  --> $DIR/lending_iterator.rs:10:45\n+  --> $DIR/lending_iterator.rs:12:45\n    |\n LL |     fn from_iter<T: for<'x> LendingIterator<Item<'x> = A>>(iter: T) -> Self;\n    |                                             ^^^^^^^^^^^^"}, {"sha": "6048e6e87c0ec6cfb5b1348541ecdaec22356b7b", "filename": "src/test/ui/generic-associated-types/extended/lending_iterator.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fbb315be70aaaa19bd38801ad894657332f9fc3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbb315be70aaaa19bd38801ad894657332f9fc3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fextended%2Flending_iterator.rs?ref=0fbb315be70aaaa19bd38801ad894657332f9fc3", "patch": "@@ -1,3 +1,5 @@\n+// FIXME(nll): this is experimental anyways, don't really care about the output\n+// ignore-compare-mode-nll\n // revisions: base extended\n //[base] check-fail\n //[extended] check-pass"}, {"sha": "341e2e05d1cd9163c4b590e5387423b8492c28ca", "filename": "src/test/ui/generic-associated-types/projection-type-lifetime-mismatch.base.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0fbb315be70aaaa19bd38801ad894657332f9fc3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fbb315be70aaaa19bd38801ad894657332f9fc3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.base.stderr?ref=0fbb315be70aaaa19bd38801ad894657332f9fc3", "patch": "@@ -1,5 +1,5 @@\n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/projection-type-lifetime-mismatch.rs:17:7\n+  --> $DIR/projection-type-lifetime-mismatch.rs:21:7\n    |\n LL | fn f(x: &impl for<'a> X<Y<'a> = &'a ()>) -> &'static () {\n    |         ------------------------------- this data with an anonymous lifetime `'_`...\n@@ -9,7 +9,7 @@ LL |     x.m()\n    |     ...is used and required to live as long as `'static` here\n \n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/projection-type-lifetime-mismatch.rs:22:7\n+  --> $DIR/projection-type-lifetime-mismatch.rs:27:7\n    |\n LL | fn g<T: for<'a> X<Y<'a> = &'a ()>>(x: &T) -> &'static () {\n    |                                       -- this data with an anonymous lifetime `'_`...\n@@ -19,7 +19,7 @@ LL |     x.m()\n    |     ...is used and required to live as long as `'static` here\n \n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/projection-type-lifetime-mismatch.rs:27:7\n+  --> $DIR/projection-type-lifetime-mismatch.rs:33:7\n    |\n LL | fn h(x: &()) -> &'static () {\n    |         --- this data with an anonymous lifetime `'_`...", "previous_filename": "src/test/ui/generic-associated-types/projection-type-lifetime-mismatch.stderr"}, {"sha": "00395af4889dd70bb548b3faf5c43e629fff47a9", "filename": "src/test/ui/generic-associated-types/projection-type-lifetime-mismatch.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0fbb315be70aaaa19bd38801ad894657332f9fc3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fbb315be70aaaa19bd38801ad894657332f9fc3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.nll.stderr?ref=0fbb315be70aaaa19bd38801ad894657332f9fc3", "patch": "@@ -1,21 +1,21 @@\n error: lifetime may not live long enough\n-  --> $DIR/projection-type-lifetime-mismatch.rs:17:5\n+  --> $DIR/projection-type-lifetime-mismatch.rs:21:5\n    |\n LL | fn f(x: &impl for<'a> X<Y<'a> = &'a ()>) -> &'static () {\n    |         - let's call the lifetime of this reference `'1`\n LL |     x.m()\n    |     ^^^^^ returning this value requires that `'1` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/projection-type-lifetime-mismatch.rs:22:5\n+  --> $DIR/projection-type-lifetime-mismatch.rs:27:5\n    |\n LL | fn g<T: for<'a> X<Y<'a> = &'a ()>>(x: &T) -> &'static () {\n    |                                       - let's call the lifetime of this reference `'1`\n LL |     x.m()\n    |     ^^^^^ returning this value requires that `'1` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/projection-type-lifetime-mismatch.rs:27:5\n+  --> $DIR/projection-type-lifetime-mismatch.rs:33:5\n    |\n LL | fn h(x: &()) -> &'static () {\n    |         - let's call the lifetime of this reference `'1`"}, {"sha": "9f14c6f3dc03e5184e16151ef733ffaa60e906d1", "filename": "src/test/ui/generic-associated-types/projection-type-lifetime-mismatch.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0fbb315be70aaaa19bd38801ad894657332f9fc3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbb315be70aaaa19bd38801ad894657332f9fc3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.rs?ref=0fbb315be70aaaa19bd38801ad894657332f9fc3", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n #![feature(generic_associated_types)]\n \n pub trait X {\n@@ -15,17 +19,20 @@ impl X for () {\n \n fn f(x: &impl for<'a> X<Y<'a> = &'a ()>) -> &'static () {\n     x.m()\n-    //~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n+    //[base]~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn g<T: for<'a> X<Y<'a> = &'a ()>>(x: &T) -> &'static () {\n     x.m()\n-    //~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n+    //[base]~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn h(x: &()) -> &'static () {\n     x.m()\n-    //~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n+    //[base]~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n+    //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "eed12f56be23a8c6d3468cf2fdac0bd6215956bf", "filename": "src/test/ui/generic-associated-types/trait-objects.base.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0fbb315be70aaaa19bd38801ad894657332f9fc3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fbb315be70aaaa19bd38801ad894657332f9fc3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.base.stderr?ref=0fbb315be70aaaa19bd38801ad894657332f9fc3", "patch": "@@ -1,11 +1,11 @@\n error[E0038]: the trait `StreamingIterator` cannot be made into an object\n-  --> $DIR/trait-objects.rs:14:21\n+  --> $DIR/trait-objects.rs:16:21\n    |\n LL | fn min_size(x: &mut dyn for<'a> StreamingIterator<Item<'a> = &'a i32>) -> usize {\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `StreamingIterator` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/trait-objects.rs:8:10\n+  --> $DIR/trait-objects.rs:10:10\n    |\n LL | trait StreamingIterator {\n    |       ----------------- this trait cannot be made into an object..."}, {"sha": "52d48d57859f473749889611528d3c5713c18f60", "filename": "src/test/ui/generic-associated-types/trait-objects.extended.nll.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/62806f75369f810ddde1b28e6aca7b8a2792aac3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.extended.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62806f75369f810ddde1b28e6aca7b8a2792aac3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.extended.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.extended.nll.stderr?ref=62806f75369f810ddde1b28e6aca7b8a2792aac3", "patch": "@@ -1,17 +0,0 @@\n-error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/trait-objects.rs:16:5\n-   |\n-LL | fn min_size(x: &mut dyn for<'a> StreamingIterator<Item<'a> = &'a i32>) -> usize {\n-   |             -  - let's call the lifetime of this reference `'1`\n-   |             |\n-   |             `x` is a reference that is only valid in the function body\n-LL |\n-LL |     x.size_hint().0\n-   |     ^^^^^^^^^^^^^\n-   |     |\n-   |     `x` escapes the function body here\n-   |     argument requires that `'1` must outlive `'static`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0521`."}, {"sha": "c7b072256addc588f2c89125dab751799364aa3e", "filename": "src/test/ui/generic-associated-types/trait-objects.extended.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fbb315be70aaaa19bd38801ad894657332f9fc3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.extended.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fbb315be70aaaa19bd38801ad894657332f9fc3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.extended.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.extended.stderr?ref=0fbb315be70aaaa19bd38801ad894657332f9fc3", "patch": "@@ -1,5 +1,5 @@\n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/trait-objects.rs:16:7\n+  --> $DIR/trait-objects.rs:18:7\n    |\n LL | fn min_size(x: &mut dyn for<'a> StreamingIterator<Item<'a> = &'a i32>) -> usize {\n    |                ------------------------------------------------------ help: add explicit lifetime `'a` to the type of `x`: `&'a mut (dyn StreamingIterator<for<'a> Item = &'a i32> + 'a)`"}, {"sha": "d742d2051beccf2f7a716df30ef6044f25cded20", "filename": "src/test/ui/generic-associated-types/trait-objects.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fbb315be70aaaa19bd38801ad894657332f9fc3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbb315be70aaaa19bd38801ad894657332f9fc3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Ftrait-objects.rs?ref=0fbb315be70aaaa19bd38801ad894657332f9fc3", "patch": "@@ -1,3 +1,5 @@\n+// FIXME(nll): this is experimental anyways, don't really care about the output\n+// ignore-compare-mode-nll\n // revisions: base extended\n \n #![feature(generic_associated_types)]"}]}