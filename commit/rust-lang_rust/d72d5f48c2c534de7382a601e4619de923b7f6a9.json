{"sha": "d72d5f48c2c534de7382a601e4619de923b7f6a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MmQ1ZjQ4YzJjNTM0ZGU3MzgyYTYwMWU0NjE5ZGU5MjNiN2Y2YTk=", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2020-10-22T00:56:09Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2020-10-22T03:03:56Z"}, "message": "Dogfood Duration API in std::time tests\n\nThis expands time's test suite to use more and in more places the\nrange of methods and constants added to Duration in recent\nproposals for the sake of testing more API surface area and\nimproving legibility.", "tree": {"sha": "f12106f173e97d683684bce98fe6db92722ab6ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f12106f173e97d683684bce98fe6db92722ab6ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d72d5f48c2c534de7382a601e4619de923b7f6a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d72d5f48c2c534de7382a601e4619de923b7f6a9", "html_url": "https://github.com/rust-lang/rust/commit/d72d5f48c2c534de7382a601e4619de923b7f6a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d72d5f48c2c534de7382a601e4619de923b7f6a9/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22e6b9c68941996daa45786b4145e6196e51f0f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/22e6b9c68941996daa45786b4145e6196e51f0f4", "html_url": "https://github.com/rust-lang/rust/commit/22e6b9c68941996daa45786b4145e6196e51f0f4"}], "stats": {"total": 123, "additions": 62, "deletions": 61}, "files": [{"sha": "6508e78429c0ecadcc978f787863b7ba9bc4d043", "filename": "library/core/tests/time.rs", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/d72d5f48c2c534de7382a601e4619de923b7f6a9/library%2Fcore%2Ftests%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72d5f48c2c534de7382a601e4619de923b7f6a9/library%2Fcore%2Ftests%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Ftime.rs?ref=d72d5f48c2c534de7382a601e4619de923b7f6a9", "patch": "@@ -108,24 +108,26 @@ fn sub() {\n \n #[test]\n fn checked_sub() {\n-    let zero = Duration::new(0, 0);\n-    let one_nano = Duration::new(0, 1);\n-    let one_sec = Duration::new(1, 0);\n-    assert_eq!(one_nano.checked_sub(zero), Some(Duration::new(0, 1)));\n-    assert_eq!(one_sec.checked_sub(one_nano), Some(Duration::new(0, 999_999_999)));\n-    assert_eq!(zero.checked_sub(one_nano), None);\n-    assert_eq!(zero.checked_sub(one_sec), None);\n+    let zero = Duration::zero();\n+    assert_eq!(Duration::NANOSECOND.checked_sub(zero), Some(Duration::NANOSECOND));\n+    assert_eq!(\n+        Duration::SECOND.checked_sub(Duration::NANOSECOND),\n+        Some(Duration::new(0, 999_999_999))\n+    );\n+    assert_eq!(zero.checked_sub(Duration::NANOSECOND), None);\n+    assert_eq!(zero.checked_sub(Duration::SECOND), None);\n }\n \n #[test]\n fn saturating_sub() {\n     let zero = Duration::new(0, 0);\n-    let one_nano = Duration::new(0, 1);\n-    let one_sec = Duration::new(1, 0);\n-    assert_eq!(one_nano.saturating_sub(zero), Duration::new(0, 1));\n-    assert_eq!(one_sec.saturating_sub(one_nano), Duration::new(0, 999_999_999));\n-    assert_eq!(zero.saturating_sub(one_nano), Duration::MIN);\n-    assert_eq!(zero.saturating_sub(one_sec), Duration::MIN);\n+    assert_eq!(Duration::NANOSECOND.saturating_sub(zero), Duration::NANOSECOND);\n+    assert_eq!(\n+        Duration::SECOND.saturating_sub(Duration::NANOSECOND),\n+        Duration::new(0, 999_999_999)\n+    );\n+    assert_eq!(zero.saturating_sub(Duration::NANOSECOND), Duration::MIN);\n+    assert_eq!(zero.saturating_sub(Duration::SECOND), Duration::MIN);\n }\n \n #[test]\n@@ -343,80 +345,78 @@ fn duration_const() {\n     const IS_ZERO: bool = ZERO.is_zero();\n     assert!(IS_ZERO);\n \n-    const ONE: Duration = Duration::new(1, 0);\n-\n-    const SECONDS: u64 = ONE.as_secs();\n+    const SECONDS: u64 = Duration::SECOND.as_secs();\n     assert_eq!(SECONDS, 1);\n \n     const FROM_SECONDS: Duration = Duration::from_secs(1);\n-    assert_eq!(FROM_SECONDS, ONE);\n+    assert_eq!(FROM_SECONDS, Duration::SECOND);\n \n-    const SECONDS_F32: f32 = ONE.as_secs_f32();\n+    const SECONDS_F32: f32 = Duration::SECOND.as_secs_f32();\n     assert_eq!(SECONDS_F32, 1.0);\n \n     const FROM_SECONDS_F32: Duration = Duration::from_secs_f32(1.0);\n-    assert_eq!(FROM_SECONDS_F32, ONE);\n+    assert_eq!(FROM_SECONDS_F32, Duration::SECOND);\n \n-    const SECONDS_F64: f64 = ONE.as_secs_f64();\n+    const SECONDS_F64: f64 = Duration::SECOND.as_secs_f64();\n     assert_eq!(SECONDS_F64, 1.0);\n \n     const FROM_SECONDS_F64: Duration = Duration::from_secs_f64(1.0);\n-    assert_eq!(FROM_SECONDS_F64, ONE);\n+    assert_eq!(FROM_SECONDS_F64, Duration::SECOND);\n \n-    const MILLIS: u128 = ONE.as_millis();\n+    const MILLIS: u128 = Duration::SECOND.as_millis();\n     assert_eq!(MILLIS, 1_000);\n \n     const FROM_MILLIS: Duration = Duration::from_millis(1_000);\n-    assert_eq!(FROM_MILLIS, ONE);\n+    assert_eq!(FROM_MILLIS, Duration::SECOND);\n \n-    const MICROS: u128 = ONE.as_micros();\n+    const MICROS: u128 = Duration::SECOND.as_micros();\n     assert_eq!(MICROS, 1_000_000);\n \n     const FROM_MICROS: Duration = Duration::from_micros(1_000_000);\n-    assert_eq!(FROM_MICROS, ONE);\n+    assert_eq!(FROM_MICROS, Duration::SECOND);\n \n-    const NANOS: u128 = ONE.as_nanos();\n+    const NANOS: u128 = Duration::SECOND.as_nanos();\n     assert_eq!(NANOS, 1_000_000_000);\n \n     const FROM_NANOS: Duration = Duration::from_nanos(1_000_000_000);\n-    assert_eq!(FROM_NANOS, ONE);\n+    assert_eq!(FROM_NANOS, Duration::SECOND);\n \n     const MAX: Duration = Duration::new(u64::MAX, 999_999_999);\n \n-    const CHECKED_ADD: Option<Duration> = MAX.checked_add(ONE);\n+    const CHECKED_ADD: Option<Duration> = MAX.checked_add(Duration::SECOND);\n     assert_eq!(CHECKED_ADD, None);\n \n-    const CHECKED_SUB: Option<Duration> = ZERO.checked_sub(ONE);\n+    const CHECKED_SUB: Option<Duration> = ZERO.checked_sub(Duration::SECOND);\n     assert_eq!(CHECKED_SUB, None);\n \n-    const CHECKED_MUL: Option<Duration> = ONE.checked_mul(1);\n-    assert_eq!(CHECKED_MUL, Some(ONE));\n+    const CHECKED_MUL: Option<Duration> = Duration::SECOND.checked_mul(1);\n+    assert_eq!(CHECKED_MUL, Some(Duration::SECOND));\n \n-    const MUL_F32: Duration = ONE.mul_f32(1.0);\n-    assert_eq!(MUL_F32, ONE);\n+    const MUL_F32: Duration = Duration::SECOND.mul_f32(1.0);\n+    assert_eq!(MUL_F32, Duration::SECOND);\n \n-    const MUL_F64: Duration = ONE.mul_f64(1.0);\n-    assert_eq!(MUL_F64, ONE);\n+    const MUL_F64: Duration = Duration::SECOND.mul_f64(1.0);\n+    assert_eq!(MUL_F64, Duration::SECOND);\n \n-    const CHECKED_DIV: Option<Duration> = ONE.checked_div(1);\n-    assert_eq!(CHECKED_DIV, Some(ONE));\n+    const CHECKED_DIV: Option<Duration> = Duration::SECOND.checked_div(1);\n+    assert_eq!(CHECKED_DIV, Some(Duration::SECOND));\n \n-    const DIV_F32: Duration = ONE.div_f32(1.0);\n-    assert_eq!(DIV_F32, ONE);\n+    const DIV_F32: Duration = Duration::SECOND.div_f32(1.0);\n+    assert_eq!(DIV_F32, Duration::SECOND);\n \n-    const DIV_F64: Duration = ONE.div_f64(1.0);\n-    assert_eq!(DIV_F64, ONE);\n+    const DIV_F64: Duration = Duration::SECOND.div_f64(1.0);\n+    assert_eq!(DIV_F64, Duration::SECOND);\n \n-    const DIV_DURATION_F32: f32 = ONE.div_duration_f32(ONE);\n+    const DIV_DURATION_F32: f32 = Duration::SECOND.div_duration_f32(Duration::SECOND);\n     assert_eq!(DIV_DURATION_F32, 1.0);\n \n-    const DIV_DURATION_F64: f64 = ONE.div_duration_f64(ONE);\n+    const DIV_DURATION_F64: f64 = Duration::SECOND.div_duration_f64(Duration::SECOND);\n     assert_eq!(DIV_DURATION_F64, 1.0);\n \n-    const SATURATING_ADD: Duration = MAX.saturating_add(ONE);\n+    const SATURATING_ADD: Duration = MAX.saturating_add(Duration::SECOND);\n     assert_eq!(SATURATING_ADD, MAX);\n \n-    const SATURATING_SUB: Duration = ZERO.saturating_sub(ONE);\n+    const SATURATING_SUB: Duration = ZERO.saturating_sub(Duration::SECOND);\n     assert_eq!(SATURATING_SUB, ZERO);\n \n     const SATURATING_MUL: Duration = MAX.saturating_mul(2);"}, {"sha": "881e387c7c81d057c569f751ab2ec1ec2718a425", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d72d5f48c2c534de7382a601e4619de923b7f6a9/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72d5f48c2c534de7382a601e4619de923b7f6a9/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=d72d5f48c2c534de7382a601e4619de923b7f6a9", "patch": "@@ -255,6 +255,7 @@\n #![feature(doc_spotlight)]\n #![feature(dropck_eyepatch)]\n #![feature(duration_constants)]\n+#![feature(duration_zero)]\n #![feature(exact_size_is_empty)]\n #![feature(exhaustive_patterns)]\n #![feature(extend_one)]"}, {"sha": "44c06bac9507cff1798bb28d5b051bd75f349fe2", "filename": "library/std/src/time/tests.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d72d5f48c2c534de7382a601e4619de923b7f6a9/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d72d5f48c2c534de7382a601e4619de923b7f6a9/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs?ref=d72d5f48c2c534de7382a601e4619de923b7f6a9", "patch": "@@ -5,7 +5,7 @@ macro_rules! assert_almost_eq {\n         let (a, b) = ($a, $b);\n         if a != b {\n             let (a, b) = if a > b { (a, b) } else { (b, a) };\n-            assert!(a - Duration::new(0, 1000) <= b, \"{:?} is not almost equal to {:?}\", a, b);\n+            assert!(a - Duration::from_micros(1) <= b, \"{:?} is not almost equal to {:?}\", a, b);\n         }\n     }};\n }\n@@ -34,7 +34,7 @@ fn instant_math() {\n     assert_almost_eq!(b - dur, a);\n     assert_almost_eq!(a + dur, b);\n \n-    let second = Duration::new(1, 0);\n+    let second = Duration::SECOND;\n     assert_almost_eq!(a - second + second, a);\n     assert_almost_eq!(a.checked_sub(second).unwrap().checked_add(second).unwrap(), a);\n \n@@ -65,32 +65,32 @@ fn instant_math_is_associative() {\n #[should_panic]\n fn instant_duration_since_panic() {\n     let a = Instant::now();\n-    (a - Duration::new(1, 0)).duration_since(a);\n+    (a - Duration::SECOND).duration_since(a);\n }\n \n #[test]\n fn instant_checked_duration_since_nopanic() {\n     let now = Instant::now();\n-    let earlier = now - Duration::new(1, 0);\n-    let later = now + Duration::new(1, 0);\n+    let earlier = now - Duration::SECOND;\n+    let later = now + Duration::SECOND;\n     assert_eq!(earlier.checked_duration_since(now), None);\n-    assert_eq!(later.checked_duration_since(now), Some(Duration::new(1, 0)));\n-    assert_eq!(now.checked_duration_since(now), Some(Duration::new(0, 0)));\n+    assert_eq!(later.checked_duration_since(now), Some(Duration::SECOND));\n+    assert_eq!(now.checked_duration_since(now), Some(Duration::zero()));\n }\n \n #[test]\n fn instant_saturating_duration_since_nopanic() {\n     let a = Instant::now();\n-    let ret = (a - Duration::new(1, 0)).saturating_duration_since(a);\n-    assert_eq!(ret, Duration::new(0, 0));\n+    let ret = (a - Duration::SECOND).saturating_duration_since(a);\n+    assert_eq!(ret, Duration::zero());\n }\n \n #[test]\n fn system_time_math() {\n     let a = SystemTime::now();\n     let b = SystemTime::now();\n     match b.duration_since(a) {\n-        Ok(dur) if dur == Duration::new(0, 0) => {\n+        Ok(dur) if dur == Duration::zero() => {\n             assert_almost_eq!(a, b);\n         }\n         Ok(dur) => {\n@@ -106,16 +106,16 @@ fn system_time_math() {\n         }\n     }\n \n-    let second = Duration::new(1, 0);\n+    let second = Duration::SECOND;\n     assert_almost_eq!(a.duration_since(a - second).unwrap(), second);\n     assert_almost_eq!(a.duration_since(a + second).unwrap_err().duration(), second);\n \n     assert_almost_eq!(a - second + second, a);\n     assert_almost_eq!(a.checked_sub(second).unwrap().checked_add(second).unwrap(), a);\n \n-    let one_second_from_epoch = UNIX_EPOCH + Duration::new(1, 0);\n+    let one_second_from_epoch = UNIX_EPOCH + Duration::SECOND;\n     let one_second_from_epoch2 =\n-        UNIX_EPOCH + Duration::new(0, 500_000_000) + Duration::new(0, 500_000_000);\n+        UNIX_EPOCH + Duration::from_millis(500) + Duration::from_millis(500);\n     assert_eq!(one_second_from_epoch, one_second_from_epoch2);\n \n     // checked_add_duration will not panic on overflow\n@@ -141,12 +141,12 @@ fn system_time_elapsed() {\n #[test]\n fn since_epoch() {\n     let ts = SystemTime::now();\n-    let a = ts.duration_since(UNIX_EPOCH + Duration::new(1, 0)).unwrap();\n+    let a = ts.duration_since(UNIX_EPOCH + Duration::SECOND).unwrap();\n     let b = ts.duration_since(UNIX_EPOCH).unwrap();\n     assert!(b > a);\n-    assert_eq!(b - a, Duration::new(1, 0));\n+    assert_eq!(b - a, Duration::SECOND);\n \n-    let thirty_years = Duration::new(1, 0) * 60 * 60 * 24 * 365 * 30;\n+    let thirty_years = Duration::SECOND * 60 * 60 * 24 * 365 * 30;\n \n     // Right now for CI this test is run in an emulator, and apparently the\n     // aarch64 emulator's sense of time is that we're still living in the"}]}