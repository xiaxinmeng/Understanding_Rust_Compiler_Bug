{"sha": "888a968139986847623bc40b5a7dc308cf44f988", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4OGE5NjgxMzk5ODY4NDc2MjNiYzQwYjVhN2RjMzA4Y2Y0NGY5ODg=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-05T05:27:58Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-06T03:43:46Z"}, "message": "Add field `used: Cell<bool>` to variant `NameBindingKind::Import`.", "tree": {"sha": "add376422a3649c54891b428b0d1aba48fccc9c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/add376422a3649c54891b428b0d1aba48fccc9c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/888a968139986847623bc40b5a7dc308cf44f988", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/888a968139986847623bc40b5a7dc308cf44f988", "html_url": "https://github.com/rust-lang/rust/commit/888a968139986847623bc40b5a7dc308cf44f988", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/888a968139986847623bc40b5a7dc308cf44f988/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07f8cb28dc713b8754ed8b51fd9eb07a2f6325ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/07f8cb28dc713b8754ed8b51fd9eb07a2f6325ba", "html_url": "https://github.com/rust-lang/rust/commit/07f8cb28dc713b8754ed8b51fd9eb07a2f6325ba"}], "stats": {"total": 39, "additions": 17, "deletions": 22}, "files": [{"sha": "f3044e1847d1b6f430f02c1880092b41da90816e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/888a968139986847623bc40b5a7dc308cf44f988/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888a968139986847623bc40b5a7dc308cf44f988/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=888a968139986847623bc40b5a7dc308cf44f988", "patch": "@@ -871,6 +871,7 @@ enum NameBindingKind<'a> {\n     Import {\n         binding: &'a NameBinding<'a>,\n         directive: &'a ImportDirective<'a>,\n+        used: Cell<bool>,\n     },\n     Ambiguity {\n         b1: &'a NameBinding<'a>,\n@@ -938,14 +939,6 @@ impl<'a> NameBinding<'a> {\n             _ => true,\n         }\n     }\n-\n-    fn ambiguity(&self) -> Option<(&'a NameBinding<'a>, &'a NameBinding<'a>)> {\n-        match self.kind {\n-            NameBindingKind::Ambiguity { b1, b2 } => Some((b1, b2)),\n-            NameBindingKind::Import { binding, .. } => binding.ambiguity(),\n-            _ => None,\n-        }\n-    }\n }\n \n /// Interns the names of the primitive types.\n@@ -1064,7 +1057,7 @@ pub struct Resolver<'a> {\n     pub maybe_unused_trait_imports: NodeSet,\n \n     privacy_errors: Vec<PrivacyError<'a>>,\n-    ambiguity_errors: Vec<(Span, Name, &'a NameBinding<'a>)>,\n+    ambiguity_errors: Vec<(Span, Name, &'a NameBinding<'a>, &'a NameBinding<'a>)>,\n \n     arenas: &'a ResolverArenas<'a>,\n     dummy_binding: &'a NameBinding<'a>,\n@@ -1276,18 +1269,20 @@ impl<'a> Resolver<'a> {\n             self.used_crates.insert(krate);\n         }\n \n-        if binding.ambiguity().is_some() {\n-            self.ambiguity_errors.push((span, name, binding));\n-            return true;\n-        }\n-\n-        if let NameBindingKind::Import { directive, binding } = binding.kind {\n-            self.used_imports.insert((directive.id, ns));\n-            self.add_to_glob_map(directive.id, name);\n-            self.record_use(name, ns, binding, span);\n+        match binding.kind {\n+            NameBindingKind::Import { directive, binding, ref used } if !used.get() => {\n+                used.set(true);\n+                self.used_imports.insert((directive.id, ns));\n+                self.add_to_glob_map(directive.id, name);\n+                self.record_use(name, ns, binding, span)\n+            }\n+            NameBindingKind::Import { .. } => false,\n+            NameBindingKind::Ambiguity { b1, b2 } => {\n+                self.ambiguity_errors.push((span, name, b1, b2));\n+                true\n+            }\n+            _ => false\n         }\n-\n-        false\n     }\n \n     fn add_to_glob_map(&mut self, id: NodeId, name: Name) {\n@@ -3307,9 +3302,8 @@ impl<'a> Resolver<'a> {\n     fn report_errors(&self) {\n         let mut reported_spans = FnvHashSet();\n \n-        for &(span, name, binding) in &self.ambiguity_errors {\n+        for &(span, name, b1, b2) in &self.ambiguity_errors {\n             if !reported_spans.insert(span) { continue }\n-            let (b1, b2) = binding.ambiguity().unwrap();\n             let msg1 = format!(\"`{}` could resolve to the name imported here\", name);\n             let msg2 = format!(\"`{}` could also resolve to the name imported here\", name);\n             self.session.struct_span_err(span, &format!(\"`{}` is ambiguous\", name))"}, {"sha": "85c03683c8dc77ce1600d72b9b329f6093f85dd8", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/888a968139986847623bc40b5a7dc308cf44f988/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/888a968139986847623bc40b5a7dc308cf44f988/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=888a968139986847623bc40b5a7dc308cf44f988", "patch": "@@ -308,6 +308,7 @@ impl<'a> Resolver<'a> {\n             kind: NameBindingKind::Import {\n                 binding: binding,\n                 directive: directive,\n+                used: Cell::new(false),\n             },\n             span: directive.span,\n             vis: vis,"}]}