{"sha": "e21624dc80a455ecbd7de6d45524becf20b35ed2", "node_id": "C_kwDOAAsO6NoAKGUyMTYyNGRjODBhNDU1ZWNiZDdkZTZkNDU1MjRiZWNmMjBiMzVlZDI", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-08-03T02:44:08Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-08-03T02:44:08Z"}, "message": "Add bound_predicates_of and bound_explicit_predicates_of", "tree": {"sha": "f02c2b8c424e92d606b79eb6ef4edd706064effe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f02c2b8c424e92d606b79eb6ef4edd706064effe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e21624dc80a455ecbd7de6d45524becf20b35ed2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e21624dc80a455ecbd7de6d45524becf20b35ed2", "html_url": "https://github.com/rust-lang/rust/commit/e21624dc80a455ecbd7de6d45524becf20b35ed2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e21624dc80a455ecbd7de6d45524becf20b35ed2/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4493a0f4724c0bae1436242d76cccc9c0a287b80", "url": "https://api.github.com/repos/rust-lang/rust/commits/4493a0f4724c0bae1436242d76cccc9c0a287b80", "html_url": "https://github.com/rust-lang/rust/commit/4493a0f4724c0bae1436242d76cccc9c0a287b80"}], "stats": {"total": 100, "additions": 58, "deletions": 42}, "files": [{"sha": "994a4d7d3c129f9dd62191664cf8bfacba1ae35f", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e21624dc80a455ecbd7de6d45524becf20b35ed2/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e21624dc80a455ecbd7de6d45524becf20b35ed2/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=e21624dc80a455ecbd7de6d45524becf20b35ed2", "patch": "@@ -16,9 +16,7 @@ use rustc_middle::mir::{\n     FakeReadCause, LocalDecl, LocalInfo, LocalKind, Location, Operand, Place, PlaceRef,\n     ProjectionElem, Rvalue, Statement, StatementKind, Terminator, TerminatorKind, VarBindingForm,\n };\n-use rustc_middle::ty::{\n-    self, subst::Subst, suggest_constraining_type_params, EarlyBinder, PredicateKind, Ty,\n-};\n+use rustc_middle::ty::{self, subst::Subst, suggest_constraining_type_params, PredicateKind, Ty};\n use rustc_mir_dataflow::move_paths::{InitKind, MoveOutIndex, MovePathIndex};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::hygiene::DesugaringKind;\n@@ -461,35 +459,37 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let tcx = self.infcx.tcx;\n \n         // Find out if the predicates show that the type is a Fn or FnMut\n-        let find_fn_kind_from_did = |predicates: &[(ty::Predicate<'tcx>, Span)], substs| {\n-            predicates.iter().find_map(|(pred, _)| {\n-                let pred = if let Some(substs) = substs {\n-                    EarlyBinder(*pred).subst(tcx, substs).kind().skip_binder()\n-                } else {\n-                    pred.kind().skip_binder()\n-                };\n-                if let ty::PredicateKind::Trait(pred) = pred && pred.self_ty() == ty {\n+        let find_fn_kind_from_did =\n+            |predicates: ty::EarlyBinder<&[(ty::Predicate<'tcx>, Span)]>, substs| {\n+                predicates.0.iter().find_map(|(pred, _)| {\n+                    let pred = if let Some(substs) = substs {\n+                        predicates.rebind(*pred).subst(tcx, substs).kind().skip_binder()\n+                    } else {\n+                        pred.kind().skip_binder()\n+                    };\n+                    if let ty::PredicateKind::Trait(pred) = pred && pred.self_ty() == ty {\n                     if Some(pred.def_id()) == tcx.lang_items().fn_trait() {\n                         return Some(hir::Mutability::Not);\n                     } else if Some(pred.def_id()) == tcx.lang_items().fn_mut_trait() {\n                         return Some(hir::Mutability::Mut);\n                     }\n                 }\n-                None\n-            })\n-        };\n+                    None\n+                })\n+            };\n \n         // If the type is opaque/param/closure, and it is Fn or FnMut, let's suggest (mutably)\n         // borrowing the type, since `&mut F: FnMut` iff `F: FnMut` and similarly for `Fn`.\n         // These types seem reasonably opaque enough that they could be substituted with their\n         // borrowed variants in a function body when we see a move error.\n         let borrow_level = match ty.kind() {\n             ty::Param(_) => find_fn_kind_from_did(\n-                tcx.explicit_predicates_of(self.mir_def_id().to_def_id()).predicates,\n+                tcx.bound_explicit_predicates_of(self.mir_def_id().to_def_id())\n+                    .map_bound(|p| p.predicates),\n                 None,\n             ),\n             ty::Opaque(did, substs) => {\n-                find_fn_kind_from_did(tcx.explicit_item_bounds(*did), Some(*substs))\n+                find_fn_kind_from_did(tcx.bound_explicit_item_bounds(*did), Some(*substs))\n             }\n             ty::Closure(_, substs) => match substs.as_closure().kind() {\n                 ty::ClosureKind::Fn => Some(hir::Mutability::Not),"}, {"sha": "77c789116277937821f660f9c98362fa591f7fcb", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e21624dc80a455ecbd7de6d45524becf20b35ed2/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e21624dc80a455ecbd7de6d45524becf20b35ed2/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=e21624dc80a455ecbd7de6d45524becf20b35ed2", "patch": "@@ -680,6 +680,20 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn bound_const_param_default(self, def_id: DefId) -> ty::EarlyBinder<ty::Const<'tcx>> {\n         ty::EarlyBinder(self.const_param_default(def_id))\n     }\n+\n+    pub fn bound_predicates_of(\n+        self,\n+        def_id: DefId,\n+    ) -> ty::EarlyBinder<ty::generics::GenericPredicates<'tcx>> {\n+        ty::EarlyBinder(self.predicates_of(def_id))\n+    }\n+\n+    pub fn bound_explicit_predicates_of(\n+        self,\n+        def_id: DefId,\n+    ) -> ty::EarlyBinder<ty::generics::GenericPredicates<'tcx>> {\n+        ty::EarlyBinder(self.explicit_predicates_of(def_id))\n+    }\n }\n \n struct OpaqueTypeExpander<'tcx> {"}, {"sha": "155c1289876016ea0700e6f47c8e445dd11f5e5c", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e21624dc80a455ecbd7de6d45524becf20b35ed2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e21624dc80a455ecbd7de6d45524becf20b35ed2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=e21624dc80a455ecbd7de6d45524becf20b35ed2", "patch": "@@ -2356,11 +2356,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // obligation will normalize to `<$0 as Iterator>::Item = $1` and\n         // `$1: Copy`, so we must ensure the obligations are emitted in\n         // that order.\n-        let predicates = tcx.predicates_of(def_id);\n+        let predicates = tcx.bound_predicates_of(def_id);\n         debug!(?predicates);\n-        assert_eq!(predicates.parent, None);\n-        let mut obligations = Vec::with_capacity(predicates.predicates.len());\n-        for (predicate, span) in predicates.predicates {\n+        assert_eq!(predicates.0.parent, None);\n+        let mut obligations = Vec::with_capacity(predicates.0.predicates.len());\n+        for (predicate, span) in predicates.0.predicates {\n             let span = *span;\n             let cause = cause.clone().derived_cause(parent_trait_pred, |derived| {\n                 ImplDerivedObligation(Box::new(ImplDerivedObligationCause {\n@@ -2374,7 +2374,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 param_env,\n                 cause.clone(),\n                 recursion_depth,\n-                EarlyBinder(*predicate).subst(tcx, substs),\n+                predicates.rebind(*predicate).subst(tcx, substs),\n                 &mut obligations,\n             );\n             obligations.push(Obligation { cause, recursion_depth, param_env, predicate });"}, {"sha": "ff5ca0cbcb7b134bf8a7e3aa73d82d9223089ca5", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e21624dc80a455ecbd7de6d45524becf20b35ed2/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e21624dc80a455ecbd7de6d45524becf20b35ed2/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=e21624dc80a455ecbd7de6d45524becf20b35ed2", "patch": "@@ -51,11 +51,11 @@ impl<'tcx> RustIrDatabase<'tcx> {\n     where\n         ty::Predicate<'tcx>: LowerInto<'tcx, std::option::Option<T>>,\n     {\n-        self.interner\n-            .tcx\n-            .explicit_item_bounds(def_id)\n+        let bounds = self.interner.tcx.bound_explicit_item_bounds(def_id);\n+        bounds\n+            .0\n             .iter()\n-            .map(|(bound, _)| EarlyBinder(*bound).subst(self.interner.tcx, &bound_vars))\n+            .map(|(bound, _)| bounds.rebind(*bound).subst(self.interner.tcx, &bound_vars))\n             .filter_map(|bound| LowerInto::<Option<_>>::lower_into(bound, self.interner))\n             .collect()\n     }\n@@ -268,21 +268,20 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n         let where_clauses = self.where_clauses_for(def_id, bound_vars);\n \n-        let sig = self.interner.tcx.fn_sig(def_id);\n+        let sig = self.interner.tcx.bound_fn_sig(def_id);\n         let (inputs_and_output, iobinders, _) = crate::chalk::lowering::collect_bound_vars(\n             self.interner,\n             self.interner.tcx,\n-            EarlyBinder(sig.inputs_and_output()).subst(self.interner.tcx, bound_vars),\n+            sig.map_bound(|s| s.inputs_and_output()).subst(self.interner.tcx, bound_vars),\n         );\n \n         let argument_types = inputs_and_output[..inputs_and_output.len() - 1]\n             .iter()\n-            .map(|t| {\n-                EarlyBinder(*t).subst(self.interner.tcx, &bound_vars).lower_into(self.interner)\n-            })\n+            .map(|t| sig.rebind(*t).subst(self.interner.tcx, &bound_vars).lower_into(self.interner))\n             .collect();\n \n-        let return_type = EarlyBinder(inputs_and_output[inputs_and_output.len() - 1])\n+        let return_type = sig\n+            .rebind(inputs_and_output[inputs_and_output.len() - 1])\n             .subst(self.interner.tcx, &bound_vars)\n             .lower_into(self.interner);\n \n@@ -295,7 +294,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         };\n         Arc::new(chalk_solve::rust_ir::FnDefDatum {\n             id: fn_def_id,\n-            sig: sig.lower_into(self.interner),\n+            sig: sig.0.lower_into(self.interner),\n             binders: chalk_ir::Binders::new(binders, bound),\n         })\n     }\n@@ -503,12 +502,14 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n         let identity_substs = InternalSubsts::identity_for_item(self.interner.tcx, opaque_ty_id.0);\n \n+        let explicit_item_bounds = self.interner.tcx.bound_explicit_item_bounds(opaque_ty_id.0);\n         let bounds =\n-            self.interner\n-                .tcx\n-                .explicit_item_bounds(opaque_ty_id.0)\n+            explicit_item_bounds\n+                .0\n                 .iter()\n-                .map(|(bound, _)| EarlyBinder(*bound).subst(self.interner.tcx, &bound_vars))\n+                .map(|(bound, _)| {\n+                    explicit_item_bounds.rebind(*bound).subst(self.interner.tcx, &bound_vars)\n+                })\n                 .map(|bound| {\n                     bound.fold_with(&mut ReplaceOpaqueTyFolder {\n                         tcx: self.interner.tcx,"}, {"sha": "d0334cd0df7bbf97f1818038469215160b5c4a3a", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e21624dc80a455ecbd7de6d45524becf20b35ed2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e21624dc80a455ecbd7de6d45524becf20b35ed2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=e21624dc80a455ecbd7de6d45524becf20b35ed2", "patch": "@@ -15,8 +15,8 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts, Subst};\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n use rustc_middle::ty::{\n-    self, AdtKind, DefIdTree, EarlyBinder, GenericParamDefKind, ToPredicate, Ty, TyCtxt,\n-    TypeFoldable, TypeSuperVisitable, TypeVisitable, TypeVisitor,\n+    self, AdtKind, DefIdTree, GenericParamDefKind, ToPredicate, Ty, TyCtxt, TypeFoldable,\n+    TypeSuperVisitable, TypeVisitable, TypeVisitor,\n };\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::{sym, Ident, Symbol};\n@@ -1295,7 +1295,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n     let infcx = wfcx.infcx;\n     let tcx = wfcx.tcx();\n \n-    let predicates = tcx.predicates_of(def_id);\n+    let predicates = tcx.bound_predicates_of(def_id.to_def_id());\n     let generics = tcx.generics_of(def_id);\n \n     let is_our_default = |def: &ty::GenericParamDef| match def.kind {\n@@ -1392,6 +1392,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n \n     // Now we build the substituted predicates.\n     let default_obligations = predicates\n+        .0\n         .predicates\n         .iter()\n         .flat_map(|&(pred, sp)| {\n@@ -1422,15 +1423,15 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n             }\n             let mut param_count = CountParams::default();\n             let has_region = pred.visit_with(&mut param_count).is_break();\n-            let substituted_pred = EarlyBinder(pred).subst(tcx, substs);\n+            let substituted_pred = predicates.rebind(pred).subst(tcx, substs);\n             // Don't check non-defaulted params, dependent defaults (including lifetimes)\n             // or preds with multiple params.\n             if substituted_pred.has_param_types_or_consts()\n                 || param_count.params.len() > 1\n                 || has_region\n             {\n                 None\n-            } else if predicates.predicates.iter().any(|&(p, _)| p == substituted_pred) {\n+            } else if predicates.0.predicates.iter().any(|&(p, _)| p == substituted_pred) {\n                 // Avoid duplication of predicates that contain no parameters, for example.\n                 None\n             } else {\n@@ -1456,7 +1457,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n             traits::Obligation::new(cause, wfcx.param_env, pred)\n         });\n \n-    let predicates = predicates.instantiate_identity(tcx);\n+    let predicates = predicates.0.instantiate_identity(tcx);\n \n     let predicates = wfcx.normalize(span, None, predicates);\n "}]}