{"sha": "e33e20824ff7b69bc053b8843883652c9692c5c1", "node_id": "C_kwDOAAsO6NoAKGUzM2UyMDgyNGZmN2I2OWJjMDUzYjg4NDM4ODM2NTJjOTY5MmM1YzE", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-05-29T17:54:53Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-05-29T17:54:53Z"}, "message": "Rename `tcx.mk_re_*` => `Region::new_*`", "tree": {"sha": "cfe09f08337b4c2b03d065fc8b587de17f9363e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfe09f08337b4c2b03d065fc8b587de17f9363e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e33e20824ff7b69bc053b8843883652c9692c5c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e33e20824ff7b69bc053b8843883652c9692c5c1", "html_url": "https://github.com/rust-lang/rust/commit/e33e20824ff7b69bc053b8843883652c9692c5c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e33e20824ff7b69bc053b8843883652c9692c5c1/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "498553fc04f6a3fdc53412320f4e913bc53bc267", "url": "https://api.github.com/repos/rust-lang/rust/commits/498553fc04f6a3fdc53412320f4e913bc53bc267", "html_url": "https://github.com/rust-lang/rust/commit/498553fc04f6a3fdc53412320f4e913bc53bc267"}], "stats": {"total": 526, "additions": 292, "deletions": 234}, "files": [{"sha": "cfcf31fce32bd128ad320aa6b8e96cc07c15f169", "filename": "compiler/rustc_borrowck/src/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -180,24 +180,25 @@ trait TypeOpInfo<'tcx> {\n             return;\n         };\n \n-        let placeholder_region = tcx.mk_re_placeholder(ty::Placeholder {\n-            universe: adjusted_universe.into(),\n-            bound: placeholder.bound,\n-        });\n-\n-        let error_region =\n-            if let RegionElement::PlaceholderRegion(error_placeholder) = error_element {\n-                let adjusted_universe =\n-                    error_placeholder.universe.as_u32().checked_sub(base_universe.as_u32());\n-                adjusted_universe.map(|adjusted| {\n-                    tcx.mk_re_placeholder(ty::Placeholder {\n-                        universe: adjusted.into(),\n-                        bound: error_placeholder.bound,\n-                    })\n-                })\n-            } else {\n-                None\n-            };\n+        let placeholder_region = ty::Region::new_placeholder(\n+            tcx,\n+            ty::Placeholder { universe: adjusted_universe.into(), bound: placeholder.bound },\n+        );\n+\n+        let error_region = if let RegionElement::PlaceholderRegion(error_placeholder) =\n+            error_element\n+        {\n+            let adjusted_universe =\n+                error_placeholder.universe.as_u32().checked_sub(base_universe.as_u32());\n+            adjusted_universe.map(|adjusted| {\n+                ty::Region::new_placeholder(\n+                    tcx,\n+                    ty::Placeholder { universe: adjusted.into(), bound: error_placeholder.bound },\n+                )\n+            })\n+        } else {\n+            None\n+        };\n \n         debug!(?placeholder_region);\n \n@@ -390,7 +391,7 @@ fn try_extract_error_from_fulfill_cx<'tcx>(\n         error_region,\n         &region_constraints,\n         |vid| ocx.infcx.region_var_origin(vid),\n-        |vid| ocx.infcx.universe_of_region(ocx.infcx.tcx.mk_re_var(vid)),\n+        |vid| ocx.infcx.universe_of_region(ty::Region::new_var(ocx.infcx.tcx, vid)),\n     )\n }\n \n@@ -411,7 +412,7 @@ fn try_extract_error_from_region_constraints<'tcx>(\n                 }\n                 // FIXME: Should this check the universe of the var?\n                 Constraint::VarSubReg(vid, sup) if sup == placeholder_region => {\n-                    Some((infcx.tcx.mk_re_var(vid), cause.clone()))\n+                    Some((ty::Region::new_var(infcx.tcx, vid), cause.clone()))\n                 }\n                 _ => None,\n             }"}, {"sha": "b5014a3f479c70a1dec9f6612cfb892b031da263", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -441,7 +441,7 @@ fn for_each_region_constraint<'tcx>(\n         let subject = match req.subject {\n             ClosureOutlivesSubject::Region(subject) => format!(\"{:?}\", subject),\n             ClosureOutlivesSubject::Ty(ty) => {\n-                format!(\"{:?}\", ty.instantiate(tcx, |vid| tcx.mk_re_var(vid)))\n+                format!(\"{:?}\", ty.instantiate(tcx, |vid| ty::Region::new_var(tcx, vid)))\n             }\n         };\n         with_msg(format!(\"where {}: {:?}\", subject, req.outlived_free_region,))?;"}, {"sha": "2a0cb49672b8359299a00cffeba0eacd9ee501c7", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -1158,7 +1158,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 .universal_regions_outlived_by(r_scc)\n                 .filter(|&u_r| !self.universal_regions.is_local_free_region(u_r))\n                 .find(|&u_r| self.eval_equal(u_r, r_vid))\n-                .map(|u_r| tcx.mk_re_var(u_r))\n+                .map(|u_r| ty::Region::new_var(tcx, u_r))\n                 // In the case of a failure, use `ReErased`. We will eventually\n                 // return `None` in this case.\n                 .unwrap_or(tcx.lifetimes.re_erased)\n@@ -1355,7 +1355,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             let vid = self.to_region_vid(r);\n             let scc = self.constraint_sccs.scc(vid);\n             let repr = self.scc_representatives[scc];\n-            tcx.mk_re_var(repr)\n+            ty::Region::new_var(tcx, repr)\n         })\n     }\n \n@@ -1779,7 +1779,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             }\n \n             // If not, report an error.\n-            let member_region = infcx.tcx.mk_re_var(member_region_vid);\n+            let member_region = ty::Region::new_var(infcx.tcx, member_region_vid);\n             errors_buffer.push(RegionErrorKind::UnexpectedHiddenRegion {\n                 span: m_c.definition_span,\n                 hidden_ty: m_c.hidden_ty,"}, {"sha": "33f07c1d8fc419cf23fbfa7a3097e6c39c448ed8", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -92,7 +92,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     }\n                     None => {\n                         subst_regions.push(vid);\n-                        infcx.tcx.mk_re_error_with_message(\n+                        ty::Region::new_error_with_message(\n+                            infcx.tcx,\n                             concrete_type.span,\n                             \"opaque type with non-universal region substs\",\n                         )"}, {"sha": "03f933681bc242767e567fefbaed05a41af256c0", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -139,7 +139,7 @@ pub(crate) fn type_check<'mir, 'tcx>(\n     upvars: &[Upvar<'tcx>],\n     use_polonius: bool,\n ) -> MirTypeckResults<'tcx> {\n-    let implicit_region_bound = infcx.tcx.mk_re_var(universal_regions.fr_fn_body);\n+    let implicit_region_bound = ty::Region::new_var(infcx.tcx, universal_regions.fr_fn_body);\n     let mut constraints = MirTypeckRegionConstraints {\n         placeholder_indices: PlaceholderIndices::default(),\n         placeholder_index_to_region: IndexVec::default(),"}, {"sha": "c871703429a5e83dfb4721265c862b66d921e87c", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -500,7 +500,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                     .next_nll_region_var(FR, || RegionCtxt::Free(Symbol::intern(\"c-variadic\")))\n                     .as_var();\n \n-                let region = self.infcx.tcx.mk_re_var(reg_vid);\n+                let region = ty::Region::new_var(self.infcx.tcx, reg_vid);\n                 let va_list_ty =\n                     self.infcx.tcx.type_of(va_list_did).subst(self.infcx.tcx, &[region.into()]);\n \n@@ -660,7 +660,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                     var: ty::BoundVar::from_usize(bound_vars.len() - 1),\n                     kind: ty::BrEnv,\n                 };\n-                let env_region = tcx.mk_re_late_bound(ty::INNERMOST, br);\n+                let env_region = ty::Region::new_late_bound(tcx, ty::INNERMOST, br);\n                 let closure_ty = tcx.closure_env_ty(def_id, substs, env_region).unwrap();\n \n                 // The \"inputs\" of the closure in the\n@@ -778,7 +778,8 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for BorrowckInferCtxt<'cx, 'tcx> {\n     {\n         let (value, _map) = self.tcx.replace_late_bound_regions(value, |br| {\n             debug!(?br);\n-            let liberated_region = self.tcx.mk_re_free(all_outlive_scope.to_def_id(), br.kind);\n+            let liberated_region =\n+                ty::Region::new_free(self.tcx, all_outlive_scope.to_def_id(), br.kind);\n             let region_vid = {\n                 let name = match br.kind.get_name() {\n                     Some(name) => name,\n@@ -889,7 +890,7 @@ impl<'tcx> UniversalRegionIndices<'tcx> {\n     where\n         T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n-        tcx.fold_regions(value, |region, _| tcx.mk_re_var(self.to_region_vid(region)))\n+        tcx.fold_regions(value, |region, _| ty::Region::new_var(tcx, self.to_region_vid(region)))\n     }\n }\n \n@@ -929,7 +930,7 @@ fn for_each_late_bound_region_in_item<'tcx>(\n \n     for bound_var in tcx.late_bound_vars(tcx.hir().local_def_id_to_hir_id(mir_def_id)) {\n         let ty::BoundVariableKind::Region(bound_region) = bound_var else { continue; };\n-        let liberated_region = tcx.mk_re_free(mir_def_id.to_def_id(), bound_region);\n+        let liberated_region = ty::Region::new_free(tcx, mir_def_id.to_def_id(), bound_region);\n         f(liberated_region);\n     }\n }"}, {"sha": "d9796e8ffe0b6f619c02d6c3f6d20a45af433327", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -239,20 +239,20 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     var: ty::BoundVar::from_u32(index),\n                     kind: ty::BrNamed(def_id, name),\n                 };\n-                tcx.mk_re_late_bound(debruijn, br)\n+                ty::Region::new_late_bound(tcx, debruijn, br)\n             }\n \n             Some(rbv::ResolvedArg::EarlyBound(def_id)) => {\n                 let name = tcx.hir().ty_param_name(def_id.expect_local());\n                 let item_def_id = tcx.hir().ty_param_owner(def_id.expect_local());\n                 let generics = tcx.generics_of(item_def_id);\n                 let index = generics.param_def_id_to_index[&def_id];\n-                tcx.mk_re_early_bound(ty::EarlyBoundRegion { def_id, index, name })\n+                ty::Region::new_early_bound(tcx, ty::EarlyBoundRegion { def_id, index, name })\n             }\n \n             Some(rbv::ResolvedArg::Free(scope, id)) => {\n                 let name = lifetime_name(id.expect_local());\n-                tcx.mk_re_free(scope, ty::BrNamed(id, name))\n+                ty::Region::new_free(tcx, scope, ty::BrNamed(id, name))\n \n                 // (*) -- not late-bound, won't change\n             }\n@@ -269,7 +269,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     // elision. `resolve_lifetime` should have\n                     // reported an error in this case -- but if\n                     // not, let's error out.\n-                    tcx.mk_re_error_with_message(\n+                    ty::Region::new_error_with_message(\n+                        tcx,\n                         lifetime.ident.span,\n                         \"unelided lifetime in signature\",\n                     )\n@@ -485,7 +486,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             debug!(?param, \"unelided lifetime in signature\");\n \n                             // This indicates an illegal lifetime in a non-assoc-trait position\n-                            tcx.mk_re_error_with_message(\n+                            ty::Region::new_error_with_message(\n+                                tcx,\n                                 self.span,\n                                 \"unelided lifetime in signature\",\n                             )\n@@ -1219,15 +1221,15 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             let substs =\n                 candidate.skip_binder().substs.extend_to(tcx, assoc_item.def_id, |param, _| {\n                     let subst = match param.kind {\n-                        GenericParamDefKind::Lifetime => tcx\n-                            .mk_re_late_bound(\n-                                ty::INNERMOST,\n-                                ty::BoundRegion {\n-                                    var: ty::BoundVar::from_usize(num_bound_vars),\n-                                    kind: ty::BoundRegionKind::BrNamed(param.def_id, param.name),\n-                                },\n-                            )\n-                            .into(),\n+                        GenericParamDefKind::Lifetime => ty::Region::new_late_bound(\n+                            tcx,\n+                            ty::INNERMOST,\n+                            ty::BoundRegion {\n+                                var: ty::BoundVar::from_usize(num_bound_vars),\n+                                kind: ty::BoundRegionKind::BrNamed(param.def_id, param.name),\n+                            },\n+                        )\n+                        .into(),\n                         GenericParamDefKind::Type { .. } => tcx\n                             .mk_bound(\n                                 ty::INNERMOST,\n@@ -1804,7 +1806,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         } else {\n                             err.emit()\n                         };\n-                        tcx.mk_re_error(e)\n+                        ty::Region::new_error(tcx, e)\n                     })\n                 }\n             })"}, {"sha": "bd7cb5a30ec6136ed089896c583bb201e5295608", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -472,7 +472,8 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for RemapLateBound<'_, 'tcx> {\n \n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         if let ty::ReFree(fr) = *r {\n-            self.tcx.mk_re_free(\n+            ty::Region::new_free(\n+                self.tcx,\n                 fr.scope,\n                 self.mapping.get(&fr.bound_region).copied().unwrap_or(fr.bound_region),\n             )\n@@ -786,9 +787,9 @@ pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n                     }\n                     let Some(ty::ReEarlyBound(e)) = map.get(&region.into()).map(|r| r.expect_region().kind())\n                     else {\n-                        return tcx.mk_re_error_with_message(return_span, \"expected ReFree to map to ReEarlyBound\")\n+                        return ty::Region::new_error_with_message(tcx, return_span, \"expected ReFree to map to ReEarlyBound\")\n                     };\n-                    tcx.mk_re_early_bound(ty::EarlyBoundRegion {\n+                    ty::Region::new_early_bound(tcx, ty::EarlyBoundRegion {\n                         def_id: e.def_id,\n                         name: e.name,\n                         index: (e.index as usize - num_trait_substs + num_impl_substs) as u32,\n@@ -1933,7 +1934,8 @@ pub(super) fn check_type_bounds<'tcx>(\n                 let kind = ty::BoundRegionKind::BrNamed(param.def_id, param.name);\n                 let bound_var = ty::BoundVariableKind::Region(kind);\n                 bound_vars.push(bound_var);\n-                tcx.mk_re_late_bound(\n+                ty::Region::new_late_bound(\n+                    tcx,\n                     ty::INNERMOST,\n                     ty::BoundRegion { var: ty::BoundVar::from_usize(bound_vars.len() - 1), kind },\n                 )"}, {"sha": "897e4135fa03890744bcc70070de6c4fc82af4e4", "filename": "compiler/rustc_hir_analysis/src/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -183,7 +183,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n                 }\n                 RegionResolutionError::SubSupConflict(_, _, _, a, _, b, _) => format!(\"{b}: {a}\"),\n                 RegionResolutionError::UpperBoundUniverseConflict(a, _, _, _, b) => {\n-                    format!(\"{b}: {a}\", a = tcx.mk_re_var(a))\n+                    format!(\"{b}: {a}\", a = ty::Region::new_var(tcx, a))\n                 }\n             };\n             guar = Some("}, {"sha": "1f18017f00b9d3454913cce636e2a7046a08ae9b", "filename": "compiler/rustc_hir_analysis/src/check/intrinsic.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -145,11 +145,13 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n     ]);\n     let mk_va_list_ty = |mutbl| {\n         tcx.lang_items().va_list().map(|did| {\n-            let region = tcx.mk_re_late_bound(\n+            let region = ty::Region::new_late_bound(\n+                tcx,\n                 ty::INNERMOST,\n                 ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind: ty::BrAnon(None) },\n             );\n-            let env_region = tcx.mk_re_late_bound(\n+            let env_region = ty::Region::new_late_bound(\n+                tcx,\n                 ty::INNERMOST,\n                 ty::BoundRegion { var: ty::BoundVar::from_u32(1), kind: ty::BrEnv },\n             );\n@@ -393,7 +395,12 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n                 let br = ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind: ty::BrAnon(None) };\n                 (\n                     1,\n-                    vec![tcx.mk_imm_ref(tcx.mk_re_late_bound(ty::INNERMOST, br), param(0))],\n+                    vec![\n+                        tcx.mk_imm_ref(\n+                            ty::Region::new_late_bound(tcx, ty::INNERMOST, br),\n+                            param(0),\n+                        ),\n+                    ],\n                     tcx.mk_projection(discriminant_def_id, tcx.mk_substs(&[param(0).into()])),\n                 )\n             }\n@@ -443,7 +450,8 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n \n             sym::raw_eq => {\n                 let br = ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind: ty::BrAnon(None) };\n-                let param_ty = tcx.mk_imm_ref(tcx.mk_re_late_bound(ty::INNERMOST, br), param(0));\n+                let param_ty =\n+                    tcx.mk_imm_ref(ty::Region::new_late_bound(tcx, ty::INNERMOST, br), param(0));\n                 (1, vec![param_ty; 2], tcx.types.bool)\n             }\n "}, {"sha": "7295d1dc0fdc6567157b715b1deb9d908a899b33", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -556,11 +556,14 @@ fn gather_gat_bounds<'tcx, T: TypeFoldable<TyCtxt<'tcx>>>(\n                 // Same for the region. In our example, 'a corresponds\n                 // to the 'me parameter.\n                 let region_param = gat_generics.param_at(*region_a_idx, tcx);\n-                let region_param = tcx.mk_re_early_bound(ty::EarlyBoundRegion {\n-                    def_id: region_param.def_id,\n-                    index: region_param.index,\n-                    name: region_param.name,\n-                });\n+                let region_param = ty::Region::new_early_bound(\n+                    tcx,\n+                    ty::EarlyBoundRegion {\n+                        def_id: region_param.def_id,\n+                        index: region_param.index,\n+                        name: region_param.name,\n+                    },\n+                );\n                 // The predicate we expect to see. (In our example,\n                 // `Self: 'me`.)\n                 let clause = ty::PredicateKind::Clause(ty::Clause::TypeOutlives(\n@@ -593,18 +596,24 @@ fn gather_gat_bounds<'tcx, T: TypeFoldable<TyCtxt<'tcx>>>(\n                 debug!(\"required clause: {region_a} must outlive {region_b}\");\n                 // Translate into the generic parameters of the GAT.\n                 let region_a_param = gat_generics.param_at(*region_a_idx, tcx);\n-                let region_a_param = tcx.mk_re_early_bound(ty::EarlyBoundRegion {\n-                    def_id: region_a_param.def_id,\n-                    index: region_a_param.index,\n-                    name: region_a_param.name,\n-                });\n+                let region_a_param = ty::Region::new_early_bound(\n+                    tcx,\n+                    ty::EarlyBoundRegion {\n+                        def_id: region_a_param.def_id,\n+                        index: region_a_param.index,\n+                        name: region_a_param.name,\n+                    },\n+                );\n                 // Same for the region.\n                 let region_b_param = gat_generics.param_at(*region_b_idx, tcx);\n-                let region_b_param = tcx.mk_re_early_bound(ty::EarlyBoundRegion {\n-                    def_id: region_b_param.def_id,\n-                    index: region_b_param.index,\n-                    name: region_b_param.name,\n-                });\n+                let region_b_param = ty::Region::new_early_bound(\n+                    tcx,\n+                    ty::EarlyBoundRegion {\n+                        def_id: region_b_param.def_id,\n+                        index: region_b_param.index,\n+                        name: region_b_param.name,\n+                    },\n+                );\n                 // The predicate we expect to see.\n                 let clause = ty::PredicateKind::Clause(ty::Clause::RegionOutlives(\n                     ty::OutlivesPredicate(region_a_param, region_b_param),"}, {"sha": "e7a8fd8ffd79f68ade3abbfe2e64199c7df9ee0b", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -440,7 +440,7 @@ impl<'tcx> AstConv<'tcx> for ItemCtxt<'tcx> {\n                                     self.tcx.replace_late_bound_regions_uncached(\n                                         poly_trait_ref,\n                                         |_| {\n-                                            self.tcx.mk_re_early_bound(ty::EarlyBoundRegion {\n+                                            ty::Region::new_early_bound(self.tcx, ty::EarlyBoundRegion {\n                                                 def_id: item_def_id,\n                                                 index: 0,\n                                                 name: Symbol::intern(&lt_name),"}, {"sha": "70d950eddd8a749da2a287083ede727edb7020d8", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -306,11 +306,14 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Gen\n \n             let Some(dup_index) = generics.param_def_id_to_index(tcx, dup_def) else { bug!() };\n \n-            let dup_region = tcx.mk_re_early_bound(ty::EarlyBoundRegion {\n-                def_id: dup_def,\n-                index: dup_index,\n-                name: duplicate.name.ident().name,\n-            });\n+            let dup_region = ty::Region::new_early_bound(\n+                tcx,\n+                ty::EarlyBoundRegion {\n+                    def_id: dup_def,\n+                    index: dup_index,\n+                    name: duplicate.name.ident().name,\n+                },\n+            );\n             predicates.push((\n                 ty::Binder::dummy(ty::PredicateKind::Clause(ty::Clause::RegionOutlives(\n                     ty::OutlivesPredicate(orig_region, dup_region),"}, {"sha": "fb28233bfb1c251b063a585360e1efedb79e4ce0", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -269,7 +269,7 @@ pub fn resolve_interior<'a, 'tcx>(\n                     },\n                     _ => mk_bound_region(ty::BrAnon(None)),\n                 };\n-                let r = fcx.tcx.mk_re_late_bound(current_depth, br);\n+                let r = ty::Region::new_late_bound(fcx.tcx, current_depth, br);\n                 r\n             });\n             captured_tys.insert(ty).then(|| {\n@@ -295,7 +295,11 @@ pub fn resolve_interior<'a, 'tcx>(\n                     let var = ty::BoundVar::from_usize(bound_vars.len());\n                     bound_vars.push(ty::BoundVariableKind::Region(kind));\n                     counter += 1;\n-                    fcx.tcx.mk_re_late_bound(ty::INNERMOST, ty::BoundRegion { var, kind })\n+                    ty::Region::new_late_bound(\n+                        fcx.tcx,\n+                        ty::INNERMOST,\n+                        ty::BoundRegion { var, kind },\n+                    )\n                 },\n                 types: &mut |b| bug!(\"unexpected bound ty in binder: {b:?}\"),\n                 consts: &mut |b, ty| bug!(\"unexpected bound ct in binder: {b:?} {ty}\"),"}, {"sha": "bf53a73f3983c2bd5bcc82a5982de69fdf5b73fc", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -771,7 +771,7 @@ impl<'cx, 'tcx> Canonicalizer<'cx, 'tcx> {\n     ) -> ty::Region<'tcx> {\n         let var = self.canonical_var(info, r.into());\n         let br = ty::BoundRegion { var, kind: ty::BrAnon(None) };\n-        self.interner().mk_re_late_bound(self.binder_index, br)\n+        ty::Region::new_late_bound(self.interner(), self.binder_index, br)\n     }\n \n     /// Given a type variable `ty_var` of the given kind, first check"}, {"sha": "c8c318c3f02448bbe8fa5d2c8b35588d74b852df", "filename": "compiler/rustc_infer/src/infer/canonical/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -141,7 +141,7 @@ impl<'tcx> InferCtxt<'tcx> {\n             CanonicalVarKind::PlaceholderRegion(ty::PlaceholderRegion { universe, bound }) => {\n                 let universe_mapped = universe_map(universe);\n                 let placeholder_mapped = ty::PlaceholderRegion { universe: universe_mapped, bound };\n-                self.tcx.mk_re_placeholder(placeholder_mapped).into()\n+                ty::Region::new_placeholder(self.tcx, placeholder_mapped).into()\n             }\n \n             CanonicalVarKind::Const(ui, ty) => self"}, {"sha": "2cf8d8c702d46305c94ba4a345ad8529cc8a950a", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -668,14 +668,15 @@ pub fn make_query_region_constraints<'tcx>(\n             let constraint = match *k {\n                 // Swap regions because we are going from sub (<=) to outlives\n                 // (>=).\n-                Constraint::VarSubVar(v1, v2) => {\n-                    ty::OutlivesPredicate(tcx.mk_re_var(v2).into(), tcx.mk_re_var(v1))\n-                }\n+                Constraint::VarSubVar(v1, v2) => ty::OutlivesPredicate(\n+                    ty::Region::new_var(tcx, v2).into(),\n+                    ty::Region::new_var(tcx, v1),\n+                ),\n                 Constraint::VarSubReg(v1, r2) => {\n-                    ty::OutlivesPredicate(r2.into(), tcx.mk_re_var(v1))\n+                    ty::OutlivesPredicate(r2.into(), ty::Region::new_var(tcx, v1))\n                 }\n                 Constraint::RegSubVar(r1, v2) => {\n-                    ty::OutlivesPredicate(tcx.mk_re_var(v2).into(), r1)\n+                    ty::OutlivesPredicate(ty::Region::new_var(tcx, v2).into(), r1)\n                 }\n                 Constraint::RegSubReg(r1, r2) => ty::OutlivesPredicate(r2.into(), r1),\n             };\n@@ -719,7 +720,7 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for QueryTypeRelatingDelegate<'_, 'tcx> {\n     }\n \n     fn next_placeholder_region(&mut self, placeholder: ty::PlaceholderRegion) -> ty::Region<'tcx> {\n-        self.infcx.tcx.mk_re_placeholder(placeholder)\n+        ty::Region::new_placeholder(self.infcx.tcx, placeholder)\n     }\n \n     fn generalize_existential(&mut self, universe: ty::UniverseIndex) -> ty::Region<'tcx> {"}, {"sha": "0b3bc1ce6b38d7451ea1acda3eb7f08772ca0038", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -79,7 +79,7 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n                 sup_placeholder @ Region(Interned(RePlaceholder(_), _)),\n                 _,\n             )) => self.try_report_trait_placeholder_mismatch(\n-                Some(self.tcx().mk_re_var(*vid)),\n+                Some(ty::Region::new_var(self.tcx(), *vid)),\n                 cause,\n                 Some(*sub_placeholder),\n                 Some(*sup_placeholder),\n@@ -95,7 +95,7 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n                 _,\n                 _,\n             )) => self.try_report_trait_placeholder_mismatch(\n-                Some(self.tcx().mk_re_var(*vid)),\n+                Some(ty::Region::new_var(self.tcx(), *vid)),\n                 cause,\n                 Some(*sub_placeholder),\n                 None,\n@@ -111,7 +111,7 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n                 sup_placeholder @ Region(Interned(RePlaceholder(_), _)),\n                 _,\n             )) => self.try_report_trait_placeholder_mismatch(\n-                Some(self.tcx().mk_re_var(*vid)),\n+                Some(ty::Region::new_var(self.tcx(), *vid)),\n                 cause,\n                 None,\n                 Some(*sup_placeholder),\n@@ -127,7 +127,7 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n                 sup_placeholder @ Region(Interned(RePlaceholder(_), _)),\n                 _,\n             )) => self.try_report_trait_placeholder_mismatch(\n-                Some(self.tcx().mk_re_var(*vid)),\n+                Some(ty::Region::new_var(self.tcx(), *vid)),\n                 cause,\n                 None,\n                 Some(*sup_placeholder),\n@@ -141,7 +141,7 @@ impl<'tcx> NiceRegionError<'_, 'tcx> {\n                 SubregionOrigin::Subtype(box TypeTrace { cause, values }),\n                 sup_placeholder @ Region(Interned(RePlaceholder(_), _)),\n             )) => self.try_report_trait_placeholder_mismatch(\n-                Some(self.tcx().mk_re_var(*vid)),\n+                Some(ty::Region::new_var(self.tcx(), *vid)),\n                 cause,\n                 None,\n                 Some(*sup_placeholder),"}, {"sha": "1c298e7d4ecd075ceb6acfa256e433e2abb93fe7", "filename": "compiler/rustc_infer/src/infer/higher_ranked/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -82,8 +82,10 @@ impl<'tcx> InferCtxt<'tcx> {\n \n         let delegate = FnMutDelegate {\n             regions: &mut |br: ty::BoundRegion| {\n-                self.tcx\n-                    .mk_re_placeholder(ty::PlaceholderRegion { universe: next_universe, bound: br })\n+                ty::Region::new_placeholder(\n+                    self.tcx,\n+                    ty::PlaceholderRegion { universe: next_universe, bound: br },\n+                )\n             },\n             types: &mut |bound_ty: ty::BoundTy| {\n                 self.tcx.mk_placeholder(ty::PlaceholderType {"}, {"sha": "485e34fe2bf99d255f45015a34f83935c53285f9", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -347,7 +347,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                     // name the placeholder, then the placeholder is\n                     // larger; otherwise, the only ancestor is `'static`.\n                     Err(placeholder) if empty_ui.can_name(placeholder.universe) => {\n-                        self.tcx().mk_re_placeholder(placeholder)\n+                        ty::Region::new_placeholder(self.tcx(), placeholder)\n                     }\n                     Err(_) => self.tcx().lifetimes.re_static,\n                 };"}, {"sha": "b49282726fd22a165c98e3cbc858ac121f6e9d11", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -1065,7 +1065,7 @@ impl<'tcx> InferCtxt<'tcx> {\n     ) -> ty::Region<'tcx> {\n         let region_var =\n             self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);\n-        self.tcx.mk_re_var(region_var)\n+        ty::Region::new_var(self.tcx, region_var)\n     }\n \n     /// Return the universe that the region `r` was created in. For"}, {"sha": "5f4093c1c3c1227867a55ef67696be13edc5401c", "filename": "compiler/rustc_infer/src/infer/region_constraints/leak_check.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -280,7 +280,7 @@ impl<'me, 'tcx> LeakCheck<'me, 'tcx> {\n         placeholder1: ty::PlaceholderRegion,\n         placeholder2: ty::PlaceholderRegion,\n     ) -> TypeError<'tcx> {\n-        self.error(placeholder1, self.tcx.mk_re_placeholder(placeholder2))\n+        self.error(placeholder1, ty::Region::new_placeholder(self.tcx, placeholder2))\n     }\n \n     fn error(\n@@ -413,13 +413,13 @@ impl<'tcx> MiniGraph<'tcx> {\n         for undo_entry in undo_log {\n             match undo_entry {\n                 &AddConstraint(Constraint::VarSubVar(a, b)) => {\n-                    each_edge(tcx.mk_re_var(a), tcx.mk_re_var(b));\n+                    each_edge(ty::Region::new_var(tcx, a), ty::Region::new_var(tcx, b));\n                 }\n                 &AddConstraint(Constraint::RegSubVar(a, b)) => {\n-                    each_edge(a, tcx.mk_re_var(b));\n+                    each_edge(a, ty::Region::new_var(tcx, b));\n                 }\n                 &AddConstraint(Constraint::VarSubReg(a, b)) => {\n-                    each_edge(tcx.mk_re_var(a), b);\n+                    each_edge(ty::Region::new_var(tcx, a), b);\n                 }\n                 &AddConstraint(Constraint::RegSubReg(a, b)) => {\n                     each_edge(a, b);"}, {"sha": "cd8d23bf635c23e453598246ea228e87d8679bc5", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -610,13 +610,13 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         let resolved = ut\n             .probe_value(root_vid)\n             .get_value_ignoring_universes()\n-            .unwrap_or_else(|| tcx.mk_re_var(root_vid));\n+            .unwrap_or_else(|| ty::Region::new_var(tcx, root_vid));\n \n         // Don't resolve a variable to a region that it cannot name.\n         if self.var_universe(vid).can_name(self.universe(resolved)) {\n             resolved\n         } else {\n-            tcx.mk_re_var(vid)\n+            ty::Region::new_var(tcx, vid)\n         }\n     }\n \n@@ -637,15 +637,15 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n     ) -> Region<'tcx> {\n         let vars = TwoRegions { a, b };\n         if let Some(&c) = self.combine_map(t).get(&vars) {\n-            return tcx.mk_re_var(c);\n+            return ty::Region::new_var(tcx, c);\n         }\n         let a_universe = self.universe(a);\n         let b_universe = self.universe(b);\n         let c_universe = cmp::max(a_universe, b_universe);\n         let c = self.new_region_var(c_universe, MiscVariable(origin.span()));\n         self.combine_map(t).insert(vars, c);\n         self.undo_log.push(AddCombination(t, vars));\n-        let new_r = tcx.mk_re_var(c);\n+        let new_r = ty::Region::new_var(tcx, c);\n         for old_r in [a, b] {\n             match t {\n                 Glb => self.make_subregion(origin.clone(), new_r, old_r),"}, {"sha": "29dae67bfca721038f024892e081ad67f552082b", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -415,7 +415,7 @@ impl<'tcx> CanonicalVarValues<'tcx> {\n                                 var: ty::BoundVar::from_usize(i),\n                                 kind: ty::BrAnon(None),\n                             };\n-                            tcx.mk_re_late_bound(ty::INNERMOST, br).into()\n+                            ty::Region::new_late_bound(tcx, ty::INNERMOST, br).into()\n                         }\n                         CanonicalVarKind::Const(_, ty)\n                         | CanonicalVarKind::PlaceholderConst(_, ty) => tcx"}, {"sha": "a15c419da7acaa9cbcac7ffb64484244b30d7777", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -413,7 +413,7 @@ impl<'tcx> ClosureOutlivesSubjectTy<'tcx> {\n             ty::ReVar(vid) => {\n                 let br =\n                     ty::BoundRegion { var: ty::BoundVar::new(vid.index()), kind: ty::BrAnon(None) };\n-                tcx.mk_re_late_bound(depth, br)\n+                ty::Region::new_late_bound(tcx, depth, br)\n             }\n             _ => bug!(\"unexpected region in ClosureOutlivesSubjectTy: {r:?}\"),\n         });"}, {"sha": "76f52bc34ed1425ec741c6b4eb27d3332114d3f3", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -264,7 +264,7 @@ impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> Decodable<D> for mir::Place<'tcx> {\n \n impl<'tcx, D: TyDecoder<I = TyCtxt<'tcx>>> Decodable<D> for ty::Region<'tcx> {\n     fn decode(decoder: &mut D) -> Self {\n-        decoder.interner().mk_region_from_kind(Decodable::decode(decoder))\n+        ty::Region::new_from_kind(decoder.interner(), Decodable::decode(decoder))\n     }\n }\n "}, {"sha": "8bbe0c98e9f2a18bb06c73eed7aa5398c0ab2680", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 3, "deletions": 90, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -713,34 +713,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_ty_from_kind(Error(reported))\n     }\n \n-    /// Constructs a `RegionKind::ReError` lifetime.\n-    #[track_caller]\n-    pub fn mk_re_error(self, reported: ErrorGuaranteed) -> Region<'tcx> {\n-        self.intern_region(ty::ReError(reported))\n-    }\n-\n-    /// Constructs a `RegionKind::ReError` lifetime and registers a `delay_span_bug` to ensure it\n-    /// gets used.\n-    #[track_caller]\n-    pub fn mk_re_error_misc(self) -> Region<'tcx> {\n-        self.mk_re_error_with_message(\n-            DUMMY_SP,\n-            \"RegionKind::ReError constructed but no error reported\",\n-        )\n-    }\n-\n-    /// Constructs a `RegionKind::ReError` lifetime and registers a `delay_span_bug` with the given\n-    /// `msg` to ensure it gets used.\n-    #[track_caller]\n-    pub fn mk_re_error_with_message<S: Into<MultiSpan>>(\n-        self,\n-        span: S,\n-        msg: &'static str,\n-    ) -> Region<'tcx> {\n-        let reported = self.sess.delay_span_bug(span, msg);\n-        self.mk_re_error(reported)\n-    }\n-\n     /// Like [TyCtxt::ty_error] but for constants, with current `ErrorGuaranteed`\n     #[track_caller]\n     pub fn const_error(self, ty: Ty<'tcx>, reported: ErrorGuaranteed) -> Const<'tcx> {\n@@ -1519,9 +1491,9 @@ macro_rules! direct_interners {\n \n // Functions with a `mk_` prefix are intended for use outside this file and\n // crate. Functions with an `intern_` prefix are intended for use within this\n-// file only, and have a corresponding `mk_` function.\n+// crate only, and have a corresponding `mk_` function.\n direct_interners! {\n-    region: intern_region(RegionKind<'tcx>): Region -> Region<'tcx>,\n+    region: pub(crate) intern_region(RegionKind<'tcx>): Region -> Region<'tcx>,\n     const_: intern_const(ConstData<'tcx>): Const -> Const<'tcx>,\n     const_allocation: pub mk_const_alloc(Allocation): ConstAllocation -> ConstAllocation<'tcx>,\n     layout: pub mk_layout(LayoutS): Layout -> Layout<'tcx>,\n@@ -1996,7 +1968,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {\n         match param.kind {\n             GenericParamDefKind::Lifetime => {\n-                self.mk_re_early_bound(param.to_early_bound_region_data()).into()\n+                ty::Region::new_early_bound(self, param.to_early_bound_region_data()).into()\n             }\n             GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),\n             GenericParamDefKind::Const { .. } => self\n@@ -2036,65 +2008,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.mk_alias(ty::Opaque, self.mk_alias_ty(def_id, substs))\n     }\n \n-    #[inline]\n-    pub fn mk_re_early_bound(self, early_bound_region: ty::EarlyBoundRegion) -> Region<'tcx> {\n-        self.intern_region(ty::ReEarlyBound(early_bound_region))\n-    }\n-\n-    #[inline]\n-    pub fn mk_re_late_bound(\n-        self,\n-        debruijn: ty::DebruijnIndex,\n-        bound_region: ty::BoundRegion,\n-    ) -> Region<'tcx> {\n-        // Use a pre-interned one when possible.\n-        if let ty::BoundRegion { var, kind: ty::BrAnon(None) } = bound_region\n-            && let Some(inner) = self.lifetimes.re_late_bounds.get(debruijn.as_usize())\n-            && let Some(re) = inner.get(var.as_usize()).copied()\n-        {\n-            re\n-        } else {\n-            self.intern_region(ty::ReLateBound(debruijn, bound_region))\n-        }\n-    }\n-\n-    #[inline]\n-    pub fn mk_re_free(self, scope: DefId, bound_region: ty::BoundRegionKind) -> Region<'tcx> {\n-        self.intern_region(ty::ReFree(ty::FreeRegion { scope, bound_region }))\n-    }\n-\n-    #[inline]\n-    pub fn mk_re_var(self, v: ty::RegionVid) -> Region<'tcx> {\n-        // Use a pre-interned one when possible.\n-        self.lifetimes\n-            .re_vars\n-            .get(v.as_usize())\n-            .copied()\n-            .unwrap_or_else(|| self.intern_region(ty::ReVar(v)))\n-    }\n-\n-    #[inline]\n-    pub fn mk_re_placeholder(self, placeholder: ty::PlaceholderRegion) -> Region<'tcx> {\n-        self.intern_region(ty::RePlaceholder(placeholder))\n-    }\n-\n-    // Avoid this in favour of more specific `mk_re_*` methods, where possible,\n-    // to avoid the cost of the `match`.\n-    pub fn mk_region_from_kind(self, kind: ty::RegionKind<'tcx>) -> Region<'tcx> {\n-        match kind {\n-            ty::ReEarlyBound(region) => self.mk_re_early_bound(region),\n-            ty::ReLateBound(debruijn, region) => self.mk_re_late_bound(debruijn, region),\n-            ty::ReFree(ty::FreeRegion { scope, bound_region }) => {\n-                self.mk_re_free(scope, bound_region)\n-            }\n-            ty::ReStatic => self.lifetimes.re_static,\n-            ty::ReVar(vid) => self.mk_re_var(vid),\n-            ty::RePlaceholder(region) => self.mk_re_placeholder(region),\n-            ty::ReErased => self.lifetimes.re_erased,\n-            ty::ReError(reported) => self.mk_re_error(reported),\n-        }\n-    }\n-\n     pub fn mk_place_field(self, place: Place<'tcx>, f: FieldIdx, ty: Ty<'tcx>) -> Place<'tcx> {\n         self.mk_place_elem(place, PlaceElem::Field(f, ty))\n     }"}, {"sha": "149ce29b8d943f423a23287c57019719594e67f3", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -213,7 +213,7 @@ where\n                     // debruijn index. Then we adjust it to the\n                     // correct depth.\n                     assert_eq!(debruijn1, ty::INNERMOST);\n-                    self.tcx.mk_re_late_bound(debruijn, br)\n+                    ty::Region::new_late_bound(self.tcx, debruijn, br)\n                 } else {\n                     region\n                 }\n@@ -328,7 +328,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         T: TypeFoldable<TyCtxt<'tcx>>,\n     {\n         self.replace_late_bound_regions_uncached(value, |br| {\n-            self.mk_re_free(all_outlive_scope, br.kind)\n+            ty::Region::new_free(self, all_outlive_scope, br.kind)\n         })\n     }\n \n@@ -341,7 +341,8 @@ impl<'tcx> TyCtxt<'tcx> {\n             value,\n             FnMutDelegate {\n                 regions: &mut |r: ty::BoundRegion| {\n-                    self.mk_re_late_bound(\n+                    ty::Region::new_late_bound(\n+                        self,\n                         ty::INNERMOST,\n                         ty::BoundRegion { var: shift_bv(r.var), kind: r.kind },\n                     )\n@@ -383,7 +384,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     .or_insert_with(|| ty::BoundVariableKind::Region(ty::BrAnon(None)))\n                     .expect_region();\n                 let br = ty::BoundRegion { var, kind };\n-                self.tcx.mk_re_late_bound(ty::INNERMOST, br)\n+                ty::Region::new_late_bound(self.tcx, ty::INNERMOST, br)\n             }\n             fn replace_ty(&mut self, bt: ty::BoundTy) -> Ty<'tcx> {\n                 let entry = self.map.entry(bt.var);\n@@ -451,7 +452,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for Shifter<'tcx> {\n         match *r {\n             ty::ReLateBound(debruijn, br) if debruijn >= self.current_index => {\n                 let debruijn = debruijn.shifted_in(self.amount);\n-                self.tcx.mk_re_late_bound(debruijn, br)\n+                ty::Region::new_late_bound(self.tcx, debruijn, br)\n             }\n             _ => r,\n         }\n@@ -492,7 +493,7 @@ pub fn shift_region<'tcx>(\n ) -> ty::Region<'tcx> {\n     match *region {\n         ty::ReLateBound(debruijn, br) if amount > 0 => {\n-            tcx.mk_re_late_bound(debruijn.shifted_in(amount), br)\n+            ty::Region::new_late_bound(tcx, debruijn.shifted_in(amount), br)\n         }\n         _ => region,\n     }"}, {"sha": "76a6a421282e18f91013368e713267b91b3cc5c7", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -100,7 +100,7 @@ impl GenericParamDef {\n         preceding_substs: &[ty::GenericArg<'tcx>],\n     ) -> ty::GenericArg<'tcx> {\n         match &self.kind {\n-            ty::GenericParamDefKind::Lifetime => tcx.mk_re_error_misc().into(),\n+            ty::GenericParamDefKind::Lifetime => ty::Region::new_error_misc(tcx).into(),\n             ty::GenericParamDefKind::Type { .. } => tcx.ty_error_misc().into(),\n             ty::GenericParamDefKind::Const { .. } => {\n                 tcx.const_error_misc(tcx.type_of(self.def_id).subst(tcx, preceding_substs)).into()"}, {"sha": "d1ed7be3d2e4369d1b56cbd4ad1ffbe63a114f7a", "filename": "compiler/rustc_middle/src/ty/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -141,7 +141,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ReverseMapper<'tcx> {\n                     )\n                     .emit();\n \n-                self.interner().mk_re_error(e)\n+                ty::Region::new_error(self.interner(), e)\n             }\n         }\n     }"}, {"sha": "3e698ce54ad92f1a52a90a10ad1116249932db10", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -184,7 +184,7 @@ impl<'tcx> RegionHighlightMode<'tcx> {\n \n     /// Convenience wrapper for `highlighting_region`.\n     pub fn highlighting_region_vid(&mut self, vid: ty::RegionVid, number: usize) {\n-        self.highlighting_region(self.tcx.mk_re_var(vid), number)\n+        self.highlighting_region(ty::Region::new_var(self.tcx, vid), number)\n     }\n \n     /// Returns `Some(n)` with the number to use for the given region, if any.\n@@ -2303,7 +2303,7 @@ impl<'a, 'tcx> ty::TypeFolder<TyCtxt<'tcx>> for RegionFolder<'a, 'tcx> {\n         };\n         if let ty::ReLateBound(debruijn1, br) = *region {\n             assert_eq!(debruijn1, ty::INNERMOST);\n-            self.tcx.mk_re_late_bound(self.current_index, br)\n+            ty::Region::new_late_bound(self.tcx, self.current_index, br)\n         } else {\n             region\n         }\n@@ -2415,7 +2415,8 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n                         if let Some(lt_idx) = lifetime_idx {\n                             if lt_idx > binder_level_idx {\n                                 let kind = ty::BrNamed(CRATE_DEF_ID.to_def_id(), name);\n-                                return tcx.mk_re_late_bound(\n+                                return ty::Region::new_late_bound(\n+                                    tcx,\n                                     ty::INNERMOST,\n                                     ty::BoundRegion { var: br.var, kind },\n                                 );\n@@ -2430,7 +2431,8 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n                         if let Some(lt_idx) = lifetime_idx {\n                             if lt_idx > binder_level_idx {\n                                 let kind = ty::BrNamed(def_id, name);\n-                                return tcx.mk_re_late_bound(\n+                                return ty::Region::new_late_bound(\n+                                    tcx,\n                                     ty::INNERMOST,\n                                     ty::BoundRegion { var: br.var, kind },\n                                 );\n@@ -2443,7 +2445,8 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n                         if let Some(lt_idx) = lifetime_idx {\n                             if lt_idx > binder_level_idx {\n                                 let kind = br.kind;\n-                                return tcx.mk_re_late_bound(\n+                                return ty::Region::new_late_bound(\n+                                    tcx,\n                                     ty::INNERMOST,\n                                     ty::BoundRegion { var: br.var, kind },\n                                 );\n@@ -2458,7 +2461,11 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n                     start_or_continue(&mut self, \"for<\", \", \");\n                     do_continue(&mut self, name);\n                 }\n-                tcx.mk_re_late_bound(ty::INNERMOST, ty::BoundRegion { var: br.var, kind })\n+                ty::Region::new_late_bound(\n+                    tcx,\n+                    ty::INNERMOST,\n+                    ty::BoundRegion { var: br.var, kind },\n+                )\n             };\n             let mut folder = RegionFolder {\n                 tcx,"}, {"sha": "421163acb5410675682f8879b112c8b987ac1b74", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 99, "deletions": 2, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -15,14 +15,14 @@ use hir::def::DefKind;\n use polonius_engine::Atom;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::intern::Interned;\n-use rustc_errors::{DiagnosticArgValue, IntoDiagnosticArg};\n+use rustc_errors::{DiagnosticArgValue, ErrorGuaranteed, IntoDiagnosticArg, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::LangItem;\n use rustc_index::Idx;\n use rustc_macros::HashStable;\n use rustc_span::symbol::{kw, sym, Symbol};\n-use rustc_span::Span;\n+use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::{FieldIdx, VariantIdx, FIRST_VARIANT};\n use rustc_target::spec::abi::{self, Abi};\n use std::borrow::Cow;\n@@ -1459,6 +1459,103 @@ impl ParamConst {\n #[rustc_pass_by_value]\n pub struct Region<'tcx>(pub Interned<'tcx, RegionKind<'tcx>>);\n \n+impl<'tcx> Region<'tcx> {\n+    #[inline]\n+    pub fn new_early_bound(\n+        tcx: TyCtxt<'tcx>,\n+        early_bound_region: ty::EarlyBoundRegion,\n+    ) -> Region<'tcx> {\n+        tcx.intern_region(ty::ReEarlyBound(early_bound_region))\n+    }\n+\n+    #[inline]\n+    pub fn new_late_bound(\n+        tcx: TyCtxt<'tcx>,\n+        debruijn: ty::DebruijnIndex,\n+        bound_region: ty::BoundRegion,\n+    ) -> Region<'tcx> {\n+        // Use a pre-interned one when possible.\n+        if let ty::BoundRegion { var, kind: ty::BrAnon(None) } = bound_region\n+            && let Some(inner) = tcx.lifetimes.re_late_bounds.get(debruijn.as_usize())\n+            && let Some(re) = inner.get(var.as_usize()).copied()\n+        {\n+            re\n+        } else {\n+            tcx.intern_region(ty::ReLateBound(debruijn, bound_region))\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn new_free(\n+        tcx: TyCtxt<'tcx>,\n+        scope: DefId,\n+        bound_region: ty::BoundRegionKind,\n+    ) -> Region<'tcx> {\n+        tcx.intern_region(ty::ReFree(ty::FreeRegion { scope, bound_region }))\n+    }\n+\n+    #[inline]\n+    pub fn new_var(tcx: TyCtxt<'tcx>, v: ty::RegionVid) -> Region<'tcx> {\n+        // Use a pre-interned one when possible.\n+        tcx.lifetimes\n+            .re_vars\n+            .get(v.as_usize())\n+            .copied()\n+            .unwrap_or_else(|| tcx.intern_region(ty::ReVar(v)))\n+    }\n+\n+    #[inline]\n+    pub fn new_placeholder(tcx: TyCtxt<'tcx>, placeholder: ty::PlaceholderRegion) -> Region<'tcx> {\n+        tcx.intern_region(ty::RePlaceholder(placeholder))\n+    }\n+\n+    /// Constructs a `RegionKind::ReError` region.\n+    #[track_caller]\n+    pub fn new_error(tcx: TyCtxt<'tcx>, reported: ErrorGuaranteed) -> Region<'tcx> {\n+        tcx.intern_region(ty::ReError(reported))\n+    }\n+\n+    /// Constructs a `RegionKind::ReError` region and registers a `delay_span_bug` to ensure it\n+    /// gets used.\n+    #[track_caller]\n+    pub fn new_error_misc(tcx: TyCtxt<'tcx>) -> Region<'tcx> {\n+        Region::new_error_with_message(\n+            tcx,\n+            DUMMY_SP,\n+            \"RegionKind::ReError constructed but no error reported\",\n+        )\n+    }\n+\n+    /// Constructs a `RegionKind::ReError` region and registers a `delay_span_bug` with the given\n+    /// `msg` to ensure it gets used.\n+    #[track_caller]\n+    pub fn new_error_with_message<S: Into<MultiSpan>>(\n+        tcx: TyCtxt<'tcx>,\n+        span: S,\n+        msg: &'static str,\n+    ) -> Region<'tcx> {\n+        let reported = tcx.sess.delay_span_bug(span, msg);\n+        Region::new_error(tcx, reported)\n+    }\n+\n+    /// Avoid this in favour of more specific `new_*` methods, where possible,\n+    /// to avoid the cost of the `match`.\n+    pub fn new_from_kind(tcx: TyCtxt<'tcx>, kind: RegionKind<'tcx>) -> Region<'tcx> {\n+        match kind {\n+            ty::ReEarlyBound(region) => Region::new_early_bound(tcx, region),\n+            ty::ReLateBound(debruijn, region) => Region::new_late_bound(tcx, debruijn, region),\n+            ty::ReFree(ty::FreeRegion { scope, bound_region }) => {\n+                Region::new_free(tcx, scope, bound_region)\n+            }\n+            ty::ReStatic => tcx.lifetimes.re_static,\n+            ty::ReVar(vid) => Region::new_var(tcx, vid),\n+            ty::RePlaceholder(region) => Region::new_placeholder(tcx, region),\n+            ty::ReErased => tcx.lifetimes.re_erased,\n+            ty::ReError(reported) => Region::new_error(tcx, reported),\n+        }\n+    }\n+}\n+\n impl<'tcx> Deref for Region<'tcx> {\n     type Target = RegionKind<'tcx>;\n "}, {"sha": "d00fb754c6415a60878e7211b5644d2062837f40", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -142,7 +142,7 @@ impl<'tcx> Cx<'tcx> {\n                     var: ty::BoundVar::from_usize(bound_vars.len() - 1),\n                     kind: ty::BrEnv,\n                 };\n-                let env_region = self.tcx.mk_re_late_bound(ty::INNERMOST, br);\n+                let env_region = ty::Region::new_late_bound(self.tcx, ty::INNERMOST, br);\n                 let closure_env_ty =\n                     self.tcx.closure_env_ty(closure_def_id, closure_substs, env_region).unwrap();\n                 let liberated_closure_env_ty = self.tcx.erase_late_bound_regions("}, {"sha": "0f3f8f1ac2cbb5eda7bacc954a9ea9113c58ae01", "filename": "compiler/rustc_trait_selection/src/solve/assembly/structural_traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly%2Fstructural_traits.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -96,7 +96,7 @@ pub(in crate::solve) fn replace_erased_lifetimes_with_bound_vars<'tcx>(\n             let br =\n                 ty::BoundRegion { var: ty::BoundVar::from_u32(counter), kind: ty::BrAnon(None) };\n             counter += 1;\n-            tcx.mk_re_late_bound(current_depth, br)\n+            ty::Region::new_late_bound(tcx, current_depth, br)\n         }\n         // All free regions should be erased here.\n         r => bug!(\"unexpected region: {r:?}\"),"}, {"sha": "29bdb5ff67da8c908c7c5d1d0107945f1efe7f5a", "filename": "compiler/rustc_trait_selection/src/solve/canonicalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonicalize.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -255,7 +255,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'_, 'tcx> {\n             }),\n         );\n         let br = ty::BoundRegion { var, kind: BrAnon(None) };\n-        self.interner().mk_re_late_bound(self.binder_index, br)\n+        ty::Region::new_late_bound(self.interner(), self.binder_index, br)\n     }\n \n     fn fold_ty(&mut self, mut t: Ty<'tcx>) -> Ty<'tcx> {"}, {"sha": "65af0bb1c4e1f059bd1499e19dd83d5a53b7e7e5", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -824,7 +824,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for BoundVarReplacer<'_, 'tcx> {\n                 let universe = self.universe_for(debruijn);\n                 let p = ty::PlaceholderRegion { universe, bound: br };\n                 self.mapped_regions.insert(p, br);\n-                self.infcx.tcx.mk_re_placeholder(p)\n+                ty::Region::new_placeholder(self.infcx.tcx, p)\n             }\n             _ => r,\n         }\n@@ -945,7 +945,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for PlaceholderReplacer<'_, 'tcx> {\n                         let db = ty::DebruijnIndex::from_usize(\n                             self.universe_indices.len() - index + self.current_index.as_usize() - 1,\n                         );\n-                        self.interner().mk_re_late_bound(db, *replace_var)\n+                        ty::Region::new_late_bound(self.interner(), db, *replace_var)\n                     }\n                     None => r1,\n                 }"}, {"sha": "4e961c3ee733c56f5afcc1e9900b9c1d35245825", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -550,7 +550,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                 let kind = ty::BoundRegionKind::BrNamed(param.def_id, param.name);\n                                 let bound_var = ty::BoundVariableKind::Region(kind);\n                                 bound_vars.push(bound_var);\n-                                tcx.mk_re_late_bound(\n+                                ty::Region::new_late_bound(\n+                                    tcx,\n                                     ty::INNERMOST,\n                                     ty::BoundRegion {\n                                         var: ty::BoundVar::from_usize(bound_vars.len() - 1),"}, {"sha": "ac4f845a0052fec41167e1af493377908ce32d24", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -3027,7 +3027,7 @@ fn bind_generator_hidden_types_above<'tcx>(\n                             kind: ty::BrAnon(None),\n                         };\n                         counter += 1;\n-                        tcx.mk_re_late_bound(current_depth, br)\n+                        ty::Region::new_late_bound(tcx, current_depth, br)\n                     }\n                     r => bug!(\"unexpected region: {r:?}\"),\n                 })"}, {"sha": "38f94c38861880a1ed4c94b620d33224506f4cab", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -727,7 +727,7 @@ fn bound_vars_for_item(tcx: TyCtxt<'_>, def_id: DefId) -> SubstsRef<'_> {\n                 var: ty::BoundVar::from_usize(substs.len()),\n                 kind: ty::BrAnon(None),\n             };\n-            tcx.mk_re_late_bound(ty::INNERMOST, br).into()\n+            ty::Region::new_late_bound(tcx, ty::INNERMOST, br).into()\n         }\n \n         ty::GenericParamDefKind::Const { .. } => tcx"}, {"sha": "e6c6e0f13df318d8b9e0cdaee684b81fcdfb94a6", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -542,21 +542,25 @@ impl<'tcx> LowerInto<'tcx, Region<'tcx>> for &chalk_ir::Lifetime<RustInterner<'t\n     fn lower_into(self, interner: RustInterner<'tcx>) -> Region<'tcx> {\n         let tcx = interner.tcx;\n         match self.data(interner) {\n-            chalk_ir::LifetimeData::BoundVar(var) => tcx.mk_re_late_bound(\n+            chalk_ir::LifetimeData::BoundVar(var) => ty::Region::new_late_bound(\n+                tcx,\n                 ty::DebruijnIndex::from_u32(var.debruijn.depth()),\n                 ty::BoundRegion {\n                     var: ty::BoundVar::from_usize(var.index),\n                     kind: ty::BrAnon(None),\n                 },\n             ),\n             chalk_ir::LifetimeData::InferenceVar(_var) => unimplemented!(),\n-            chalk_ir::LifetimeData::Placeholder(p) => tcx.mk_re_placeholder(ty::Placeholder {\n-                universe: ty::UniverseIndex::from_usize(p.ui.counter),\n-                bound: ty::BoundRegion {\n-                    var: ty::BoundVar::from_usize(p.idx),\n-                    kind: ty::BoundRegionKind::BrAnon(None),\n+            chalk_ir::LifetimeData::Placeholder(p) => ty::Region::new_placeholder(\n+                tcx,\n+                ty::Placeholder {\n+                    universe: ty::UniverseIndex::from_usize(p.ui.counter),\n+                    bound: ty::BoundRegion {\n+                        var: ty::BoundVar::from_usize(p.idx),\n+                        kind: ty::BoundRegionKind::BrAnon(None),\n+                    },\n                 },\n-            }),\n+            ),\n             chalk_ir::LifetimeData::Static => tcx.lifetimes.re_static,\n             chalk_ir::LifetimeData::Erased => tcx.lifetimes.re_erased,\n             chalk_ir::LifetimeData::Phantom(void, _) => match *void {},\n@@ -1051,7 +1055,7 @@ impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for NamedBoundVarSubstitutor<'a, 'tcx> {\n                 ty::BrNamed(def_id, _name) => match self.named_parameters.get(&def_id) {\n                     Some(_) => {\n                         let new_br = ty::BoundRegion { var: br.var, kind: ty::BrAnon(None) };\n-                        return self.tcx.mk_re_late_bound(index, new_br);\n+                        return ty::Region::new_late_bound(self.tcx, index, new_br);\n                     }\n                     None => panic!(\"Missing `BrNamed`.\"),\n                 },\n@@ -1142,7 +1146,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ParamsSubstitutor<'tcx> {\n                         var: ty::BoundVar::from_u32(*idx),\n                         kind: ty::BrAnon(None),\n                     };\n-                    self.tcx.mk_re_late_bound(self.binder_index, br)\n+                    ty::Region::new_late_bound(self.tcx, self.binder_index, br)\n                 }\n                 None => {\n                     let idx = self.named_regions.len() as u32;\n@@ -1151,7 +1155,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ParamsSubstitutor<'tcx> {\n                         kind: ty::BrAnon(None),\n                     };\n                     self.named_regions.insert(_re.def_id, idx);\n-                    self.tcx.mk_re_late_bound(self.binder_index, br)\n+                    ty::Region::new_late_bound(self.tcx, self.binder_index, br)\n                 }\n             },\n "}, {"sha": "5b3ffc9fc36d22e84792490c339b6af1a45079af", "filename": "compiler/rustc_ty_utils/src/abi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -81,7 +81,7 @@ fn fn_sig_for_fn_abi<'tcx>(\n                 var: ty::BoundVar::from_usize(bound_vars.len() - 1),\n                 kind: ty::BoundRegionKind::BrEnv,\n             };\n-            let env_region = tcx.mk_re_late_bound(ty::INNERMOST, br);\n+            let env_region = ty::Region::new_late_bound(tcx, ty::INNERMOST, br);\n             let env_ty = tcx.closure_env_ty(def_id, substs, env_region).unwrap();\n \n             let sig = sig.skip_binder();\n@@ -106,7 +106,7 @@ fn fn_sig_for_fn_abi<'tcx>(\n                 var: ty::BoundVar::from_usize(bound_vars.len() - 1),\n                 kind: ty::BoundRegionKind::BrEnv,\n             };\n-            let env_ty = tcx.mk_mut_ref(tcx.mk_re_late_bound(ty::INNERMOST, br), ty);\n+            let env_ty = tcx.mk_mut_ref(ty::Region::new_late_bound(tcx, ty::INNERMOST, br), ty);\n \n             let pin_did = tcx.require_lang_item(LangItem::Pin, None);\n             let pin_adt_ref = tcx.adt_def(pin_did);"}, {"sha": "190a7765ff11b706f6d6a099c45335e3d7ecbb3c", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e33e20824ff7b69bc053b8843883652c9692c5c1/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=e33e20824ff7b69bc053b8843883652c9692c5c1", "patch": "@@ -287,12 +287,13 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ImplTraitInTraitFinder<'_, 'tcx> {\n             let shifted_alias_ty = self.tcx.fold_regions(unshifted_alias_ty, |re, depth| {\n                 if let ty::ReLateBound(index, bv) = re.kind() {\n                     if depth != ty::INNERMOST {\n-                        return self.tcx.mk_re_error_with_message(\n+                        return ty::Region::new_error_with_message(\n+                            self.tcx,\n                             DUMMY_SP,\n                             \"we shouldn't walk non-predicate binders with `impl Trait`...\",\n                         );\n                     }\n-                    self.tcx.mk_re_late_bound(index.shifted_out_to_binder(self.depth), bv)\n+                    ty::Region::new_late_bound(self.tcx, index.shifted_out_to_binder(self.depth), bv)\n                 } else {\n                     re\n                 }"}]}