{"sha": "de940fc72553065cdf213a55c2d8bc7059e414ff", "node_id": "C_kwDOAAsO6NoAKGRlOTQwZmM3MjU1MzA2NWNkZjIxM2E1NWMyZDhiYzcwNTllNDE0ZmY", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-10-02T18:02:22Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-10-11T17:19:54Z"}, "message": "Use Ancestory to check default fn in const impl instead of comparing idents", "tree": {"sha": "6fa2fbc37b0f4cd887be34fca7d5046a697d6dcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fa2fbc37b0f4cd887be34fca7d5046a697d6dcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de940fc72553065cdf213a55c2d8bc7059e414ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de940fc72553065cdf213a55c2d8bc7059e414ff", "html_url": "https://github.com/rust-lang/rust/commit/de940fc72553065cdf213a55c2d8bc7059e414ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de940fc72553065cdf213a55c2d8bc7059e414ff/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073", "html_url": "https://github.com/rust-lang/rust/commit/6ae8912a3e7d2c4c775024f58a7ba4b1aedc4073"}], "stats": {"total": 44, "additions": 26, "deletions": 18}, "files": [{"sha": "a0ceb567f25a6f8d13b6d04bc860153e86a3c478", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/de940fc72553065cdf213a55c2d8bc7059e414ff/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de940fc72553065cdf213a55c2d8bc7059e414ff/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=de940fc72553065cdf213a55c2d8bc7059e414ff", "patch": "@@ -8,7 +8,6 @@\n //! through, but errors for structured control flow in a `const` should be emitted here.\n \n use rustc_attr as attr;\n-use rustc_data_structures::stable_set::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n@@ -83,30 +82,39 @@ impl<'tcx> hir::itemlikevisit::ItemLikeVisitor<'tcx> for CheckConstTraitVisitor<\n         let _: Option<_> = try {\n             if let hir::ItemKind::Impl(ref imp) = item.kind {\n                 if let hir::Constness::Const = imp.constness {\n-                    let did = imp.of_trait.as_ref()?.trait_def_id()?;\n-                    let mut to_implement = FxHashSet::default();\n-\n-                    for did in self.tcx.associated_item_def_ids(did) {\n+                    let trait_def_id = imp.of_trait.as_ref()?.trait_def_id()?;\n+                    let ancestors = self\n+                        .tcx\n+                        .trait_def(trait_def_id)\n+                        .ancestors(self.tcx, item.def_id.to_def_id())\n+                        .ok()?;\n+                    let mut to_implement = Vec::new();\n+\n+                    for trait_item in self.tcx.associated_items(trait_def_id).in_definition_order()\n+                    {\n                         if let ty::AssocItem {\n                             kind: ty::AssocKind::Fn, ident, defaultness, ..\n-                        } = self.tcx.associated_item(*did)\n+                        } = trait_item\n                         {\n                             // we can ignore functions that do not have default bodies:\n                             // if those are unimplemented it will be catched by typeck.\n-                            if defaultness.has_value()\n-                                && !self.tcx.has_attr(*did, sym::default_method_body_is_const)\n+                            if !defaultness.has_value()\n+                                || self\n+                                    .tcx\n+                                    .has_attr(trait_item.def_id, sym::default_method_body_is_const)\n                             {\n-                                to_implement.insert(ident);\n+                                continue;\n                             }\n-                        }\n-                    }\n \n-                    for it in imp\n-                        .items\n-                        .iter()\n-                        .filter(|it| matches!(it.kind, hir::AssocItemKind::Fn { .. }))\n-                    {\n-                        to_implement.remove(&it.ident);\n+                            let is_implemented = ancestors\n+                                .leaf_def(self.tcx, trait_item.ident, trait_item.kind)\n+                                .map(|node_item| !node_item.defining_node.is_from_trait())\n+                                .unwrap_or(false);\n+\n+                            if !is_implemented {\n+                                to_implement.push(ident.to_string());\n+                            }\n+                        }\n                     }\n \n                     // all nonconst trait functions (not marked with #[default_method_body_is_const])\n@@ -118,7 +126,7 @@ impl<'tcx> hir::itemlikevisit::ItemLikeVisitor<'tcx> for CheckConstTraitVisitor<\n                                 item.span,\n                                 \"const trait implementations may not use non-const default functions\",\n                             )\n-                            .note(&format!(\"`{}` not implemented\", to_implement.into_iter().map(|id| id.to_string()).collect::<Vec<_>>().join(\"`, `\")))\n+                            .note(&format!(\"`{}` not implemented\", to_implement.join(\"`, `\")))\n                             .emit();\n                     }\n                 }"}]}