{"sha": "28eefb37974df9a70fdfd1853f541cb950c8068e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZWVmYjM3OTc0ZGY5YTcwZmRmZDE4NTNmNTQxY2I5NTBjODA2OGU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-29T09:48:52Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-31T09:21:32Z"}, "message": "Move resolve_lifetimes query in librustc_resolve.", "tree": {"sha": "ed0f75ab61e40bc374c6ea2632fd8ea1c63cebd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed0f75ab61e40bc374c6ea2632fd8ea1c63cebd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28eefb37974df9a70fdfd1853f541cb950c8068e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28eefb37974df9a70fdfd1853f541cb950c8068e", "html_url": "https://github.com/rust-lang/rust/commit/28eefb37974df9a70fdfd1853f541cb950c8068e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28eefb37974df9a70fdfd1853f541cb950c8068e/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2675765a1ea562000e785e100974efb9a7aaec08", "url": "https://api.github.com/repos/rust-lang/rust/commits/2675765a1ea562000e785e100974efb9a7aaec08", "html_url": "https://github.com/rust-lang/rust/commit/2675765a1ea562000e785e100974efb9a7aaec08"}], "stats": {"total": 290, "additions": 188, "deletions": 102}, "files": [{"sha": "8e55e067513f2aa4f8aa6152d77d75ab43f9ce3a", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/28eefb37974df9a70fdfd1853f541cb950c8068e/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28eefb37974df9a70fdfd1853f541cb950c8068e/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=28eefb37974df9a70fdfd1853f541cb950c8068e", "patch": "@@ -0,0 +1,132 @@\n+//! Name resolution for lifetimes.\n+//!\n+//! Name resolution for lifetimes follows *much* simpler rules than the\n+//! full resolve. For example, lifetime names are never exported or\n+//! used between functions, and they operate in a purely top-down\n+//! way. Therefore, we break lifetime name resolution into a separate pass.\n+\n+use crate::hir::def_id::{DefId, LocalDefId};\n+use crate::hir::{GenericParam, ItemLocalId};\n+use crate::hir::{GenericParamKind, LifetimeParamKind};\n+use crate::ty;\n+\n+use crate::util::nodemap::{FxHashMap, FxHashSet, HirIdMap, HirIdSet};\n+use rustc_macros::HashStable;\n+\n+/// The origin of a named lifetime definition.\n+///\n+/// This is used to prevent the usage of in-band lifetimes in `Fn`/`fn` syntax.\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug, HashStable)]\n+pub enum LifetimeDefOrigin {\n+    // Explicit binders like `fn foo<'a>(x: &'a u8)` or elided like `impl Foo<&u32>`\n+    ExplicitOrElided,\n+    // In-band declarations like `fn foo(x: &'a u8)`\n+    InBand,\n+    // Some kind of erroneous origin\n+    Error,\n+}\n+\n+impl LifetimeDefOrigin {\n+    pub fn from_param(param: &GenericParam<'_>) -> Self {\n+        match param.kind {\n+            GenericParamKind::Lifetime { kind } => match kind {\n+                LifetimeParamKind::InBand => LifetimeDefOrigin::InBand,\n+                LifetimeParamKind::Explicit => LifetimeDefOrigin::ExplicitOrElided,\n+                LifetimeParamKind::Elided => LifetimeDefOrigin::ExplicitOrElided,\n+                LifetimeParamKind::Error => LifetimeDefOrigin::Error,\n+            },\n+            _ => bug!(\"expected a lifetime param\"),\n+        }\n+    }\n+}\n+\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug, HashStable)]\n+pub enum Region {\n+    Static,\n+    EarlyBound(/* index */ u32, /* lifetime decl */ DefId, LifetimeDefOrigin),\n+    LateBound(ty::DebruijnIndex, /* lifetime decl */ DefId, LifetimeDefOrigin),\n+    LateBoundAnon(ty::DebruijnIndex, /* anon index */ u32),\n+    Free(DefId, /* lifetime decl */ DefId),\n+}\n+\n+/// A set containing, at most, one known element.\n+/// If two distinct values are inserted into a set, then it\n+/// becomes `Many`, which can be used to detect ambiguities.\n+#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Debug, HashStable)]\n+pub enum Set1<T> {\n+    Empty,\n+    One(T),\n+    Many,\n+}\n+\n+impl<T: PartialEq> Set1<T> {\n+    pub fn insert(&mut self, value: T) {\n+        *self = match self {\n+            Set1::Empty => Set1::One(value),\n+            Set1::One(old) if *old == value => return,\n+            _ => Set1::Many,\n+        };\n+    }\n+}\n+\n+pub type ObjectLifetimeDefault = Set1<Region>;\n+\n+/// Maps the id of each lifetime reference to the lifetime decl\n+/// that it corresponds to.\n+#[derive(HashStable)]\n+pub struct ResolveLifetimes {\n+    defs: FxHashMap<LocalDefId, FxHashMap<ItemLocalId, Region>>,\n+    late_bound: FxHashMap<LocalDefId, FxHashSet<ItemLocalId>>,\n+    object_lifetime_defaults:\n+        FxHashMap<LocalDefId, FxHashMap<ItemLocalId, Vec<ObjectLifetimeDefault>>>,\n+}\n+\n+impl ResolveLifetimes {\n+    pub fn new(\n+        defs: HirIdMap<Region>,\n+        late_bound: HirIdSet,\n+        object_lifetime_defaults: HirIdMap<Vec<ObjectLifetimeDefault>>,\n+    ) -> Self {\n+        let defs = {\n+            let mut map = FxHashMap::<_, FxHashMap<_, _>>::default();\n+            for (hir_id, v) in defs {\n+                let map = map.entry(hir_id.owner_local_def_id()).or_default();\n+                map.insert(hir_id.local_id, v);\n+            }\n+            map\n+        };\n+        let late_bound = {\n+            let mut map = FxHashMap::<_, FxHashSet<_>>::default();\n+            for hir_id in late_bound {\n+                let map = map.entry(hir_id.owner_local_def_id()).or_default();\n+                map.insert(hir_id.local_id);\n+            }\n+            map\n+        };\n+        let object_lifetime_defaults = {\n+            let mut map = FxHashMap::<_, FxHashMap<_, _>>::default();\n+            for (hir_id, v) in object_lifetime_defaults {\n+                let map = map.entry(hir_id.owner_local_def_id()).or_default();\n+                map.insert(hir_id.local_id, v);\n+            }\n+            map\n+        };\n+\n+        Self { defs, late_bound, object_lifetime_defaults }\n+    }\n+\n+    pub fn named_region_map(&self, id: &LocalDefId) -> Option<&FxHashMap<ItemLocalId, Region>> {\n+        self.defs.get(id)\n+    }\n+\n+    pub fn is_late_bound_map(&self, id: &LocalDefId) -> Option<&FxHashSet<ItemLocalId>> {\n+        self.late_bound.get(id)\n+    }\n+\n+    pub fn object_lifetime_defaults_map(\n+        &self,\n+        id: &LocalDefId,\n+    ) -> Option<&FxHashMap<ItemLocalId, Vec<ObjectLifetimeDefault>>> {\n+        self.object_lifetime_defaults.get(id)\n+    }\n+}"}, {"sha": "f519d5ab50a40b174126af18a919f884818e8bfe", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28eefb37974df9a70fdfd1853f541cb950c8068e/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28eefb37974df9a70fdfd1853f541cb950c8068e/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=28eefb37974df9a70fdfd1853f541cb950c8068e", "patch": "@@ -10,7 +10,7 @@ use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc::hir::lowering::lower_crate;\n use rustc::lint;\n use rustc::middle::cstore::{CrateStore, MetadataLoader, MetadataLoaderDyn};\n-use rustc::middle::{self, resolve_lifetime, stability};\n+use rustc::middle::{self, stability};\n use rustc::session::config::{self, CrateType, Input, OutputFilenames, OutputType};\n use rustc::session::config::{PpMode, PpSourceMode};\n use rustc::session::search_paths::PathKind;\n@@ -678,13 +678,13 @@ pub fn default_provide(providers: &mut ty::query::Providers<'_>) {\n     plugin::build::provide(providers);\n     hir::provide(providers);\n     mir::provide(providers);\n-    resolve_lifetime::provide(providers);\n     rustc_privacy::provide(providers);\n     typeck::provide(providers);\n     ty::provide(providers);\n     traits::provide(providers);\n     stability::provide(providers);\n     rustc_passes::provide(providers);\n+    rustc_resolve::provide(providers);\n     rustc_traits::provide(providers);\n     middle::region::provide(providers);\n     rustc_metadata::provide(providers);"}, {"sha": "4daf22d1b2bb2635267ca9186a2818cbf9fac3c1", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/28eefb37974df9a70fdfd1853f541cb950c8068e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28eefb37974df9a70fdfd1853f541cb950c8068e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=28eefb37974df9a70fdfd1853f541cb950c8068e", "patch": "@@ -16,6 +16,13 @@\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n \n+#[macro_use]\n+extern crate rustc;\n+#[macro_use]\n+extern crate log;\n+#[macro_use]\n+extern crate syntax;\n+\n pub use rustc::hir::def::{Namespace, PerNS};\n \n use Determinacy::*;\n@@ -30,6 +37,7 @@ use rustc::lint;\n use rustc::middle::cstore::{CrateStore, MetadataLoaderDyn};\n use rustc::session::Session;\n use rustc::span_bug;\n+use rustc::ty::query::Providers;\n use rustc::ty::{self, DefIdTree, ResolverOutputs};\n use rustc::util::nodemap::{DefIdMap, FxHashMap, FxHashSet, NodeMap, NodeSet};\n \n@@ -74,6 +82,7 @@ mod def_collector;\n mod diagnostics;\n mod imports;\n mod late;\n+mod lifetimes;\n mod macros;\n \n enum Weak {\n@@ -3089,3 +3098,7 @@ impl CrateLint {\n         }\n     }\n }\n+\n+pub fn provide(providers: &mut Providers<'_>) {\n+    lifetimes::provide(providers);\n+}"}, {"sha": "3bcd104246d066b1567850917ab5efdd5371d6d2", "filename": "src/librustc_resolve/lifetimes.rs", "status": "modified", "additions": 41, "deletions": 100, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/28eefb37974df9a70fdfd1853f541cb950c8068e/src%2Flibrustc_resolve%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28eefb37974df9a70fdfd1853f541cb950c8068e/src%2Flibrustc_resolve%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flifetimes.rs?ref=28eefb37974df9a70fdfd1853f541cb950c8068e", "patch": "@@ -5,17 +5,16 @@\n //! used between functions, and they operate in a purely top-down\n //! way. Therefore, we break lifetime name resolution into a separate pass.\n \n-use crate::hir::def::{DefKind, Res};\n-use crate::hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n-use crate::hir::map::Map;\n-use crate::hir::{GenericArg, GenericParam, ItemLocalId, LifetimeName, Node, ParamName, QPath};\n-use crate::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n-\n-use crate::rustc::lint;\n-use crate::session::Session;\n-use crate::util::nodemap::{DefIdMap, FxHashMap, FxHashSet, HirIdMap, HirIdSet};\n+use rustc::hir::def::{DefKind, Res};\n+use rustc::hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n+use rustc::hir::map::Map;\n+use rustc::hir::{GenericArg, GenericParam, LifetimeName, Node, ParamName, QPath};\n+use rustc::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n+\n use errors::{pluralize, Applicability, DiagnosticBuilder};\n-use rustc_macros::HashStable;\n+use rustc::lint;\n+use rustc::session::Session;\n+use rustc::util::nodemap::{DefIdMap, FxHashMap, FxHashSet, HirIdMap, HirIdSet};\n use std::borrow::Cow;\n use std::cell::Cell;\n use std::mem::{replace, take};\n@@ -24,55 +23,38 @@ use syntax::attr;\n use syntax::symbol::{kw, sym};\n use syntax_pos::Span;\n \n-use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use crate::hir::{self, GenericParamKind, LifetimeParamKind};\n+use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::{self, GenericParamKind, LifetimeParamKind};\n \n+use rustc::middle::resolve_lifetime::*;\n use rustc_error_codes::*;\n \n-/// The origin of a named lifetime definition.\n-///\n-/// This is used to prevent the usage of in-band lifetimes in `Fn`/`fn` syntax.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug, HashStable)]\n-pub enum LifetimeDefOrigin {\n-    // Explicit binders like `fn foo<'a>(x: &'a u8)` or elided like `impl Foo<&u32>`\n-    ExplicitOrElided,\n-    // In-band declarations like `fn foo(x: &'a u8)`\n-    InBand,\n-    // Some kind of erroneous origin\n-    Error,\n-}\n-\n-impl LifetimeDefOrigin {\n-    fn from_param(param: &GenericParam<'_>) -> Self {\n-        match param.kind {\n-            GenericParamKind::Lifetime { kind } => match kind {\n-                LifetimeParamKind::InBand => LifetimeDefOrigin::InBand,\n-                LifetimeParamKind::Explicit => LifetimeDefOrigin::ExplicitOrElided,\n-                LifetimeParamKind::Elided => LifetimeDefOrigin::ExplicitOrElided,\n-                LifetimeParamKind::Error => LifetimeDefOrigin::Error,\n-            },\n-            _ => bug!(\"expected a lifetime param\"),\n-        }\n-    }\n-}\n-\n // This counts the no of times a lifetime is used\n #[derive(Clone, Copy, Debug)]\n pub enum LifetimeUseSet<'tcx> {\n     One(&'tcx hir::Lifetime),\n     Many,\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug, HashStable)]\n-pub enum Region {\n-    Static,\n-    EarlyBound(/* index */ u32, /* lifetime decl */ DefId, LifetimeDefOrigin),\n-    LateBound(ty::DebruijnIndex, /* lifetime decl */ DefId, LifetimeDefOrigin),\n-    LateBoundAnon(ty::DebruijnIndex, /* anon index */ u32),\n-    Free(DefId, /* lifetime decl */ DefId),\n+trait RegionExt {\n+    fn early(hir_map: &Map<'_>, index: &mut u32, param: &GenericParam<'_>) -> (ParamName, Region);\n+\n+    fn late(hir_map: &Map<'_>, param: &GenericParam<'_>) -> (ParamName, Region);\n+\n+    fn late_anon(index: &Cell<u32>) -> Region;\n+\n+    fn id(&self) -> Option<DefId>;\n+\n+    fn shifted(self, amount: u32) -> Region;\n+\n+    fn shifted_out_to_binder(self, binder: ty::DebruijnIndex) -> Region;\n+\n+    fn subst<'a, L>(self, params: L, map: &NamedRegionMap) -> Option<Region>\n+    where\n+        L: Iterator<Item = &'a hir::Lifetime>;\n }\n \n-impl Region {\n+impl RegionExt for Region {\n     fn early(hir_map: &Map<'_>, index: &mut u32, param: &GenericParam<'_>) -> (ParamName, Region) {\n         let i = *index;\n         *index += 1;\n@@ -146,28 +128,6 @@ impl Region {\n     }\n }\n \n-/// A set containing, at most, one known element.\n-/// If two distinct values are inserted into a set, then it\n-/// becomes `Many`, which can be used to detect ambiguities.\n-#[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Debug, HashStable)]\n-pub enum Set1<T> {\n-    Empty,\n-    One(T),\n-    Many,\n-}\n-\n-impl<T: PartialEq> Set1<T> {\n-    pub fn insert(&mut self, value: T) {\n-        *self = match self {\n-            Set1::Empty => Set1::One(value),\n-            Set1::One(old) if *old == value => return,\n-            _ => Set1::Many,\n-        };\n-    }\n-}\n-\n-pub type ObjectLifetimeDefault = Set1<Region>;\n-\n /// Maps the id of each lifetime reference to the lifetime decl\n /// that it corresponds to.\n ///\n@@ -178,25 +138,16 @@ pub type ObjectLifetimeDefault = Set1<Region>;\n struct NamedRegionMap {\n     // maps from every use of a named (not anonymous) lifetime to a\n     // `Region` describing how that region is bound\n-    pub defs: HirIdMap<Region>,\n+    defs: HirIdMap<Region>,\n \n     // the set of lifetime def ids that are late-bound; a region can\n     // be late-bound if (a) it does NOT appear in a where-clause and\n     // (b) it DOES appear in the arguments.\n-    pub late_bound: HirIdSet,\n+    late_bound: HirIdSet,\n \n     // For each type and trait definition, maps type parameters\n     // to the trait object lifetime defaults computed from them.\n-    pub object_lifetime_defaults: HirIdMap<Vec<ObjectLifetimeDefault>>,\n-}\n-\n-/// See [`NamedRegionMap`].\n-#[derive(Default, HashStable)]\n-pub struct ResolveLifetimes {\n-    defs: FxHashMap<LocalDefId, FxHashMap<ItemLocalId, Region>>,\n-    late_bound: FxHashMap<LocalDefId, FxHashSet<ItemLocalId>>,\n-    object_lifetime_defaults:\n-        FxHashMap<LocalDefId, FxHashMap<ItemLocalId, Vec<ObjectLifetimeDefault>>>,\n+    object_lifetime_defaults: HirIdMap<Vec<ObjectLifetimeDefault>>,\n }\n \n struct LifetimeContext<'a, 'tcx> {\n@@ -323,17 +274,17 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n \n         named_region_map: |tcx, id| {\n             let id = LocalDefId::from_def_id(DefId::local(id)); // (*)\n-            tcx.resolve_lifetimes(LOCAL_CRATE).defs.get(&id)\n+            tcx.resolve_lifetimes(LOCAL_CRATE).named_region_map(&id)\n         },\n \n         is_late_bound_map: |tcx, id| {\n             let id = LocalDefId::from_def_id(DefId::local(id)); // (*)\n-            tcx.resolve_lifetimes(LOCAL_CRATE).late_bound.get(&id)\n+            tcx.resolve_lifetimes(LOCAL_CRATE).is_late_bound_map(&id)\n         },\n \n         object_lifetime_defaults_map: |tcx, id| {\n             let id = LocalDefId::from_def_id(DefId::local(id)); // (*)\n-            tcx.resolve_lifetimes(LOCAL_CRATE).object_lifetime_defaults.get(&id)\n+            tcx.resolve_lifetimes(LOCAL_CRATE).object_lifetime_defaults_map(&id)\n         },\n \n         ..*providers\n@@ -351,21 +302,11 @@ fn resolve_lifetimes(tcx: TyCtxt<'_>, for_krate: CrateNum) -> &ResolveLifetimes\n \n     let named_region_map = krate(tcx);\n \n-    let mut rl = ResolveLifetimes::default();\n-\n-    for (hir_id, v) in named_region_map.defs {\n-        let map = rl.defs.entry(hir_id.owner_local_def_id()).or_default();\n-        map.insert(hir_id.local_id, v);\n-    }\n-    for hir_id in named_region_map.late_bound {\n-        let map = rl.late_bound.entry(hir_id.owner_local_def_id()).or_default();\n-        map.insert(hir_id.local_id);\n-    }\n-    for (hir_id, v) in named_region_map.object_lifetime_defaults {\n-        let map = rl.object_lifetime_defaults.entry(hir_id.owner_local_def_id()).or_default();\n-        map.insert(hir_id.local_id, v);\n-    }\n-\n+    let rl = ResolveLifetimes::new(\n+        named_region_map.defs,\n+        named_region_map.late_bound,\n+        named_region_map.object_lifetime_defaults,\n+    );\n     tcx.arena.alloc(rl)\n }\n \n@@ -2899,7 +2840,7 @@ fn insert_late_bound_lifetimes(\n     }\n }\n \n-pub fn report_missing_lifetime_specifiers(\n+fn report_missing_lifetime_specifiers(\n     sess: &Session,\n     span: Span,\n     count: usize,"}]}