{"sha": "31f532092c4172ba2f3764d3ef63a790ea1387e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxZjUzMjA5MmM0MTcyYmEyZjM3NjRkM2VmNjNhNzkwZWExMzg3ZTM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-02T17:57:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-02T17:57:30Z"}, "message": "Rollup merge of #83478 - jyn514:fine-grained-files, r=Mark-Simulacrum\n\nrustdoc: Add unstable option to only emit shared/crate-specific files\n\nThe intended use case is for docs.rs, which can now copy exactly the\nfiles it cares about, rather than having to guess based on whether they\nhave a resource suffix or not. In particular, some files have a resource\nsuffix but cannot be shared between crates: https://github.com/rust-lang/docs.rs/pull/1312#issuecomment-798783688\n\nThe end goal is to fix rust-lang/docs.rs#1327 by reverting rust-lang/docs.rs#1324.\n\nThis obsoletes `--print=unversioned-files`, which I plan to remove as\nsoon as docs.rs stops using it.\n\nI recommend reviewing this one commit at a time.\n\nr? ``@GuillaumeGomez`` cc ``@Nemo157`` ``@pietroalbini``", "tree": {"sha": "8cdf1e3c47e3aa2795b1ce4c1db951ee2b15d3e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cdf1e3c47e3aa2795b1ce4c1db951ee2b15d3e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31f532092c4172ba2f3764d3ef63a790ea1387e3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgZ1sKCRBK7hj4Ov3rIwAAdHIIAK6ZkNMT4BcnLRUMTB2ypuXC\nOh/QxBXGaMoFQIHUaia2kzT30KxZkF5A0tDJsM79BESIlu/Ecwa0Nf9BjjWqoUrt\n9pdjax2ANU6l4X8hfO5oYN2xKkHokO4l/xRJwSqc9PlR0bSAYgkSyi8SIfYom1ng\nZ0DId8tz3f08qc4kH0GU/LB6dm3eIJoi1quZCq2x8HFmw/HsRpnykYMV321HMlOL\nZDUKecoIsZU2jLkaKHmeAntQszWHxwAXPhRSnYR97HstxHjyoTfmYdwvkhzBDE2o\nMDgautWEhlK4BR30esw3UcmwppJDAs3xjE27uVnYFIxc1RTH7yBkPD8/+gEK/NU=\n=rG1Q\n-----END PGP SIGNATURE-----\n", "payload": "tree 8cdf1e3c47e3aa2795b1ce4c1db951ee2b15d3e9\nparent 48ebad58b2d1c07769d8bcaae076f760151fefd5\nparent 413938d7a9df4efe800552fa03ce1a5866539cbc\nauthor Dylan DPC <dylan.dpc@gmail.com> 1617386250 +0200\ncommitter GitHub <noreply@github.com> 1617386250 +0200\n\nRollup merge of #83478 - jyn514:fine-grained-files, r=Mark-Simulacrum\n\nrustdoc: Add unstable option to only emit shared/crate-specific files\n\nThe intended use case is for docs.rs, which can now copy exactly the\nfiles it cares about, rather than having to guess based on whether they\nhave a resource suffix or not. In particular, some files have a resource\nsuffix but cannot be shared between crates: https://github.com/rust-lang/docs.rs/pull/1312#issuecomment-798783688\n\nThe end goal is to fix rust-lang/docs.rs#1327 by reverting rust-lang/docs.rs#1324.\n\nThis obsoletes `--print=unversioned-files`, which I plan to remove as\nsoon as docs.rs stops using it.\n\nI recommend reviewing this one commit at a time.\n\nr? ``@GuillaumeGomez`` cc ``@Nemo157`` ``@pietroalbini``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31f532092c4172ba2f3764d3ef63a790ea1387e3", "html_url": "https://github.com/rust-lang/rust/commit/31f532092c4172ba2f3764d3ef63a790ea1387e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31f532092c4172ba2f3764d3ef63a790ea1387e3/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48ebad58b2d1c07769d8bcaae076f760151fefd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/48ebad58b2d1c07769d8bcaae076f760151fefd5", "html_url": "https://github.com/rust-lang/rust/commit/48ebad58b2d1c07769d8bcaae076f760151fefd5"}, {"sha": "413938d7a9df4efe800552fa03ce1a5866539cbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/413938d7a9df4efe800552fa03ce1a5866539cbc", "html_url": "https://github.com/rust-lang/rust/commit/413938d7a9df4efe800552fa03ce1a5866539cbc"}], "stats": {"total": 415, "additions": 281, "deletions": 134}, "files": [{"sha": "246e0ebbb2ba0a1daa060781a1cf5fc5e715ca29", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/31f532092c4172ba2f3764d3ef63a790ea1387e3/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f532092c4172ba2f3764d3ef63a790ea1387e3/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=31f532092c4172ba2f3764d3ef63a790ea1387e3", "patch": "@@ -3,6 +3,7 @@ use std::convert::TryFrom;\n use std::ffi::OsStr;\n use std::fmt;\n use std::path::PathBuf;\n+use std::str::FromStr;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_session::config::{self, parse_crate_types_from_list, parse_externs, CrateType};\n@@ -266,6 +267,34 @@ crate struct RenderOptions {\n     /// If `true`, generate a JSON file in the crate folder instead of HTML redirection files.\n     crate generate_redirect_map: bool,\n     crate unstable_features: rustc_feature::UnstableFeatures,\n+    crate emit: Vec<EmitType>,\n+}\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+crate enum EmitType {\n+    Unversioned,\n+    Toolchain,\n+    InvocationSpecific,\n+}\n+\n+impl FromStr for EmitType {\n+    type Err = ();\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        use EmitType::*;\n+        match s {\n+            \"unversioned-shared-resources\" => Ok(Unversioned),\n+            \"toolchain-shared-resources\" => Ok(Toolchain),\n+            \"invocation-specific\" => Ok(InvocationSpecific),\n+            _ => Err(()),\n+        }\n+    }\n+}\n+\n+impl RenderOptions {\n+    crate fn should_emit_crate(&self) -> bool {\n+        self.emit.is_empty() || self.emit.contains(&EmitType::InvocationSpecific)\n+    }\n }\n \n impl Options {\n@@ -334,6 +363,19 @@ impl Options {\n         // check for deprecated options\n         check_deprecated_options(&matches, &diag);\n \n+        let mut emit = Vec::new();\n+        for list in matches.opt_strs(\"emit\") {\n+            for kind in list.split(',') {\n+                match kind.parse() {\n+                    Ok(kind) => emit.push(kind),\n+                    Err(()) => {\n+                        diag.err(&format!(\"unrecognized emission type: {}\", kind));\n+                        return Err(1);\n+                    }\n+                }\n+            }\n+        }\n+\n         let to_check = matches.opt_strs(\"check-theme\");\n         if !to_check.is_empty() {\n             let paths = theme::load_css_paths(static_files::themes::LIGHT.as_bytes());\n@@ -641,6 +683,7 @@ impl Options {\n                 unstable_features: rustc_feature::UnstableFeatures::from_environment(\n                     crate_name.as_deref(),\n                 ),\n+                emit,\n             },\n             crate_name,\n             output_format,"}, {"sha": "ae97cd64fb5fbe5010f7878f2d77ee3a66a48113", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/31f532092c4172ba2f3764d3ef63a790ea1387e3/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f532092c4172ba2f3764d3ef63a790ea1387e3/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=31f532092c4172ba2f3764d3ef63a790ea1387e3", "patch": "@@ -63,10 +63,15 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n ) -> Result<(), Error> {\n     let prof = &tcx.sess.prof;\n \n+    let emit_crate = options.should_emit_crate();\n     let (mut format_renderer, krate) = prof\n         .extra_verbose_generic_activity(\"create_renderer\", T::descr())\n         .run(|| T::init(krate, options, edition, cache, tcx))?;\n \n+    if !emit_crate {\n+        return Ok(());\n+    }\n+\n     // Render the crate documentation\n     let crate_name = krate.name;\n     let mut work = vec![(format_renderer.make_child_renderer(), krate.module)];"}, {"sha": "07c850a20a9a42c3c3121d3cec2d2e3bba153c33", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/31f532092c4172ba2f3764d3ef63a790ea1387e3/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f532092c4172ba2f3764d3ef63a790ea1387e3/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=31f532092c4172ba2f3764d3ef63a790ea1387e3", "patch": "@@ -79,17 +79,6 @@ crate struct Context<'tcx> {\n rustc_data_structures::static_assert_size!(Context<'_>, 152);\n \n impl<'tcx> Context<'tcx> {\n-    pub(super) fn path(&self, filename: &str) -> PathBuf {\n-        // We use splitn vs Path::extension here because we might get a filename\n-        // like `style.min.css` and we want to process that into\n-        // `style-suffix.min.css`.  Path::extension would just return `css`\n-        // which would result in `style.min-suffix.css` which isn't what we\n-        // want.\n-        let (base, ext) = filename.split_once('.').unwrap();\n-        let filename = format!(\"{}{}.{}\", base, self.shared.resource_suffix, ext);\n-        self.dst.join(&filename)\n-    }\n-\n     pub(super) fn tcx(&self) -> TyCtxt<'tcx> {\n         self.shared.tcx\n     }\n@@ -301,6 +290,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n     ) -> Result<(Self, clean::Crate), Error> {\n         // need to save a copy of the options for rendering the index page\n         let md_opts = options.clone();\n+        let emit_crate = options.should_emit_crate();\n         let RenderOptions {\n             output,\n             external_html,\n@@ -406,7 +396,9 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n \n         let dst = output;\n         scx.ensure_dir(&dst)?;\n-        krate = sources::render(&dst, &mut scx, krate)?;\n+        if emit_crate {\n+            krate = sources::render(&dst, &mut scx, krate)?;\n+        }\n \n         // Build our search index\n         let index = build_index(&krate, &mut cache, tcx);\n@@ -489,7 +481,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             |buf: &mut Buffer| all.print(buf),\n             &self.shared.style_files,\n         );\n-        self.shared.fs.write(&final_file, v.as_bytes())?;\n+        self.shared.fs.write(final_file, v.as_bytes())?;\n \n         // Generating settings page.\n         page.title = \"Rustdoc settings\";"}, {"sha": "59dc4ef944909c55f7e9b608723404aacc9cfc48", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 173, "deletions": 121, "changes": 294, "blob_url": "https://github.com/rust-lang/rust/blob/31f532092c4172ba2f3764d3ef63a790ea1387e3/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f532092c4172ba2f3764d3ef63a790ea1387e3/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=31f532092c4172ba2f3764d3ef63a790ea1387e3", "patch": "@@ -13,8 +13,8 @@ use serde::Serialize;\n \n use super::{collect_paths_for_type, ensure_trailing_slash, Context, BASIC_KEYWORDS};\n use crate::clean::Crate;\n-use crate::config::RenderOptions;\n-use crate::docfs::{DocFS, PathError};\n+use crate::config::{EmitType, RenderOptions};\n+use crate::docfs::PathError;\n use crate::error::Error;\n use crate::formats::FormatRenderer;\n use crate::html::{layout, static_files};\n@@ -40,6 +40,102 @@ crate static FILES_UNVERSIONED: Lazy<FxHashMap<&str, &[u8]>> = Lazy::new(|| {\n     }\n });\n \n+enum SharedResource<'a> {\n+    /// This file will never change, no matter what toolchain is used to build it.\n+    ///\n+    /// It does not have a resource suffix.\n+    Unversioned { name: &'static str },\n+    /// This file may change depending on the toolchain.\n+    ///\n+    /// It has a resource suffix.\n+    ToolchainSpecific { basename: &'static str },\n+    /// This file may change for any crate within a build, or based on the CLI arguments.\n+    ///\n+    /// This differs from normal invocation-specific files because it has a resource suffix.\n+    InvocationSpecific { basename: &'a str },\n+}\n+\n+impl SharedResource<'_> {\n+    fn extension(&self) -> Option<&OsStr> {\n+        use SharedResource::*;\n+        match self {\n+            Unversioned { name }\n+            | ToolchainSpecific { basename: name }\n+            | InvocationSpecific { basename: name } => Path::new(name).extension(),\n+        }\n+    }\n+\n+    fn path(&self, cx: &Context<'_>) -> PathBuf {\n+        match self {\n+            SharedResource::Unversioned { name } => cx.dst.join(name),\n+            SharedResource::ToolchainSpecific { basename } => cx.suffix_path(basename),\n+            SharedResource::InvocationSpecific { basename } => cx.suffix_path(basename),\n+        }\n+    }\n+\n+    fn should_emit(&self, emit: &[EmitType]) -> bool {\n+        if emit.is_empty() {\n+            return true;\n+        }\n+        let kind = match self {\n+            SharedResource::Unversioned { .. } => EmitType::Unversioned,\n+            SharedResource::ToolchainSpecific { .. } => EmitType::Toolchain,\n+            SharedResource::InvocationSpecific { .. } => EmitType::InvocationSpecific,\n+        };\n+        emit.contains(&kind)\n+    }\n+}\n+\n+impl Context<'_> {\n+    fn suffix_path(&self, filename: &str) -> PathBuf {\n+        // We use splitn vs Path::extension here because we might get a filename\n+        // like `style.min.css` and we want to process that into\n+        // `style-suffix.min.css`.  Path::extension would just return `css`\n+        // which would result in `style.min-suffix.css` which isn't what we\n+        // want.\n+        let (base, ext) = filename.split_once('.').unwrap();\n+        let filename = format!(\"{}{}.{}\", base, self.shared.resource_suffix, ext);\n+        self.dst.join(&filename)\n+    }\n+\n+    fn write_shared<C: AsRef<[u8]>>(\n+        &self,\n+        resource: SharedResource<'_>,\n+        contents: C,\n+        emit: &[EmitType],\n+    ) -> Result<(), Error> {\n+        if resource.should_emit(emit) {\n+            self.shared.fs.write(resource.path(self), contents)\n+        } else {\n+            Ok(())\n+        }\n+    }\n+\n+    fn write_minify(\n+        &self,\n+        resource: SharedResource<'_>,\n+        contents: &str,\n+        minify: bool,\n+        emit: &[EmitType],\n+    ) -> Result<(), Error> {\n+        let tmp;\n+        let contents = if minify {\n+            tmp = if resource.extension() == Some(&OsStr::new(\"css\")) {\n+                minifier::css::minify(contents).map_err(|e| {\n+                    Error::new(format!(\"failed to minify CSS file: {}\", e), resource.path(self))\n+                })?\n+            } else {\n+                minifier::js::minify(contents)\n+            };\n+            tmp.as_bytes()\n+        } else {\n+            contents.as_bytes()\n+        };\n+\n+        self.write_shared(resource, contents, emit)\n+    }\n+}\n+\n pub(super) fn write_shared(\n     cx: &Context<'_>,\n     krate: &Crate,\n@@ -52,27 +148,31 @@ pub(super) fn write_shared(\n     let lock_file = cx.dst.join(\".lock\");\n     let _lock = try_err!(flock::Lock::new(&lock_file, true, true, true), &lock_file);\n \n+    // The weird `: &_` is to work around a borrowck bug: https://github.com/rust-lang/rust/issues/41078#issuecomment-293646723\n+    let write_minify = |p, c: &_| {\n+        cx.write_minify(\n+            SharedResource::ToolchainSpecific { basename: p },\n+            c,\n+            options.enable_minification,\n+            &options.emit,\n+        )\n+    };\n+    // Toolchain resources should never be dynamic.\n+    let write_toolchain = |p: &'static _, c: &'static _| {\n+        cx.write_shared(SharedResource::ToolchainSpecific { basename: p }, c, &options.emit)\n+    };\n+\n+    // Crate resources should always be dynamic.\n+    let write_crate = |p: &_, make_content: &dyn Fn() -> Result<Vec<u8>, Error>| {\n+        let content = make_content()?;\n+        cx.write_shared(SharedResource::InvocationSpecific { basename: p }, content, &options.emit)\n+    };\n+\n     // Add all the static files. These may already exist, but we just\n     // overwrite them anyway to make sure that they're fresh and up-to-date.\n-\n-    write_minify(\n-        &cx.shared.fs,\n-        cx.path(\"rustdoc.css\"),\n-        static_files::RUSTDOC_CSS,\n-        options.enable_minification,\n-    )?;\n-    write_minify(\n-        &cx.shared.fs,\n-        cx.path(\"settings.css\"),\n-        static_files::SETTINGS_CSS,\n-        options.enable_minification,\n-    )?;\n-    write_minify(\n-        &cx.shared.fs,\n-        cx.path(\"noscript.css\"),\n-        static_files::NOSCRIPT_CSS,\n-        options.enable_minification,\n-    )?;\n+    write_minify(\"rustdoc.css\", static_files::RUSTDOC_CSS)?;\n+    write_minify(\"settings.css\", static_files::SETTINGS_CSS)?;\n+    write_minify(\"noscript.css\", static_files::NOSCRIPT_CSS)?;\n \n     // To avoid \"light.css\" to be overwritten, we'll first run over the received themes and only\n     // then we'll run over the \"official\" styles.\n@@ -85,106 +185,73 @@ pub(super) fn write_shared(\n \n         // Handle the official themes\n         match theme {\n-            \"light\" => write_minify(\n-                &cx.shared.fs,\n-                cx.path(\"light.css\"),\n-                static_files::themes::LIGHT,\n-                options.enable_minification,\n-            )?,\n-            \"dark\" => write_minify(\n-                &cx.shared.fs,\n-                cx.path(\"dark.css\"),\n-                static_files::themes::DARK,\n-                options.enable_minification,\n-            )?,\n-            \"ayu\" => write_minify(\n-                &cx.shared.fs,\n-                cx.path(\"ayu.css\"),\n-                static_files::themes::AYU,\n-                options.enable_minification,\n-            )?,\n+            \"light\" => write_minify(\"light.css\", static_files::themes::LIGHT)?,\n+            \"dark\" => write_minify(\"dark.css\", static_files::themes::DARK)?,\n+            \"ayu\" => write_minify(\"ayu.css\", static_files::themes::AYU)?,\n             _ => {\n                 // Handle added third-party themes\n-                let content = try_err!(fs::read(&entry.path), &entry.path);\n-                cx.shared\n-                    .fs\n-                    .write(cx.path(&format!(\"{}.{}\", theme, extension)), content.as_slice())?;\n+                let filename = format!(\"{}.{}\", theme, extension);\n+                write_crate(&filename, &|| Ok(try_err!(fs::read(&entry.path), &entry.path)))?;\n             }\n         };\n \n         themes.insert(theme.to_owned());\n     }\n \n-    let write = |p, c| cx.shared.fs.write(p, c);\n     if (*cx.shared).layout.logo.is_empty() {\n-        write(cx.path(\"rust-logo.png\"), static_files::RUST_LOGO)?;\n+        write_toolchain(\"rust-logo.png\", static_files::RUST_LOGO)?;\n     }\n     if (*cx.shared).layout.favicon.is_empty() {\n-        write(cx.path(\"favicon.svg\"), static_files::RUST_FAVICON_SVG)?;\n-        write(cx.path(\"favicon-16x16.png\"), static_files::RUST_FAVICON_PNG_16)?;\n-        write(cx.path(\"favicon-32x32.png\"), static_files::RUST_FAVICON_PNG_32)?;\n+        write_toolchain(\"favicon.svg\", static_files::RUST_FAVICON_SVG)?;\n+        write_toolchain(\"favicon-16x16.png\", static_files::RUST_FAVICON_PNG_16)?;\n+        write_toolchain(\"favicon-32x32.png\", static_files::RUST_FAVICON_PNG_32)?;\n     }\n-    write(cx.path(\"brush.svg\"), static_files::BRUSH_SVG)?;\n-    write(cx.path(\"wheel.svg\"), static_files::WHEEL_SVG)?;\n-    write(cx.path(\"down-arrow.svg\"), static_files::DOWN_ARROW_SVG)?;\n+    write_toolchain(\"brush.svg\", static_files::BRUSH_SVG)?;\n+    write_toolchain(\"wheel.svg\", static_files::WHEEL_SVG)?;\n+    write_toolchain(\"down-arrow.svg\", static_files::DOWN_ARROW_SVG)?;\n \n     let mut themes: Vec<&String> = themes.iter().collect();\n     themes.sort();\n \n+    // FIXME: this should probably not be a toolchain file since it depends on `--theme`.\n+    // But it seems a shame to copy it over and over when it's almost always the same.\n+    // Maybe we can change the representation to move this out of main.js?\n     write_minify(\n-        &cx.shared.fs,\n-        cx.path(\"main.js\"),\n+        \"main.js\",\n         &static_files::MAIN_JS.replace(\n             \"/* INSERT THEMES HERE */\",\n             &format!(\" = {}\", serde_json::to_string(&themes).unwrap()),\n         ),\n-        options.enable_minification,\n-    )?;\n-    write_minify(\n-        &cx.shared.fs,\n-        cx.path(\"settings.js\"),\n-        static_files::SETTINGS_JS,\n-        options.enable_minification,\n     )?;\n+    write_minify(\"settings.js\", static_files::SETTINGS_JS)?;\n     if cx.shared.include_sources {\n-        write_minify(\n-            &cx.shared.fs,\n-            cx.path(\"source-script.js\"),\n-            static_files::sidebar::SOURCE_SCRIPT,\n-            options.enable_minification,\n-        )?;\n+        write_minify(\"source-script.js\", static_files::sidebar::SOURCE_SCRIPT)?;\n     }\n \n     {\n         write_minify(\n-            &cx.shared.fs,\n-            cx.path(\"storage.js\"),\n+            \"storage.js\",\n             &format!(\n                 \"var resourcesSuffix = \\\"{}\\\";{}\",\n                 cx.shared.resource_suffix,\n                 static_files::STORAGE_JS\n             ),\n-            options.enable_minification,\n         )?;\n     }\n \n     if let Some(ref css) = cx.shared.layout.css_file_extension {\n-        let out = cx.path(\"theme.css\");\n         let buffer = try_err!(fs::read_to_string(css), css);\n-        if !options.enable_minification {\n-            cx.shared.fs.write(&out, &buffer)?;\n-        } else {\n-            write_minify(&cx.shared.fs, out, &buffer, options.enable_minification)?;\n-        }\n+        // This varies based on the invocation, so it can't go through the write_minify wrapper.\n+        cx.write_minify(\n+            SharedResource::InvocationSpecific { basename: \"theme.css\" },\n+            &buffer,\n+            options.enable_minification,\n+            &options.emit,\n+        )?;\n     }\n-    write_minify(\n-        &cx.shared.fs,\n-        cx.path(\"normalize.css\"),\n-        static_files::NORMALIZE_CSS,\n-        options.enable_minification,\n-    )?;\n-    for (file, contents) in &*FILES_UNVERSIONED {\n-        write(cx.dst.join(file), contents)?;\n+    write_minify(\"normalize.css\", static_files::NORMALIZE_CSS)?;\n+    for (name, contents) in &*FILES_UNVERSIONED {\n+        cx.write_shared(SharedResource::Unversioned { name }, contents, &options.emit)?;\n     }\n \n     fn collect(path: &Path, krate: &str, key: &str) -> io::Result<(Vec<String>, Vec<String>)> {\n@@ -312,19 +379,22 @@ pub(super) fn write_shared(\n         }\n \n         let dst = cx.dst.join(&format!(\"source-files{}.js\", cx.shared.resource_suffix));\n-        let (mut all_sources, _krates) =\n-            try_err!(collect(&dst, &krate.name.as_str(), \"sourcesIndex\"), &dst);\n-        all_sources.push(format!(\n-            \"sourcesIndex[\\\"{}\\\"] = {};\",\n-            &krate.name,\n-            hierarchy.to_json_string()\n-        ));\n-        all_sources.sort();\n-        let v = format!(\n-            \"var N = null;var sourcesIndex = {{}};\\n{}\\ncreateSourceSidebar();\\n\",\n-            all_sources.join(\"\\n\")\n-        );\n-        cx.shared.fs.write(&dst, v.as_bytes())?;\n+        let make_sources = || {\n+            let (mut all_sources, _krates) =\n+                try_err!(collect(&dst, &krate.name.as_str(), \"sourcesIndex\"), &dst);\n+            all_sources.push(format!(\n+                \"sourcesIndex[\\\"{}\\\"] = {};\",\n+                &krate.name,\n+                hierarchy.to_json_string()\n+            ));\n+            all_sources.sort();\n+            Ok(format!(\n+                \"var N = null;var sourcesIndex = {{}};\\n{}\\ncreateSourceSidebar();\\n\",\n+                all_sources.join(\"\\n\")\n+            )\n+            .into_bytes())\n+        };\n+        write_crate(\"source-files.js\", &make_sources)?;\n     }\n \n     // Update the search index and crate list.\n@@ -337,17 +407,17 @@ pub(super) fn write_shared(\n     // Sort the indexes by crate so the file will be generated identically even\n     // with rustdoc running in parallel.\n     all_indexes.sort();\n-    {\n+    write_crate(\"search-index.js\", &|| {\n         let mut v = String::from(\"var searchIndex = JSON.parse('{\\\\\\n\");\n         v.push_str(&all_indexes.join(\",\\\\\\n\"));\n         v.push_str(\"\\\\\\n}');\\ninitSearch(searchIndex);\");\n-        cx.shared.fs.write(&dst, &v)?;\n-    }\n+        Ok(v.into_bytes())\n+    })?;\n \n-    let crate_list_dst = cx.dst.join(&format!(\"crates{}.js\", cx.shared.resource_suffix));\n-    let crate_list =\n-        format!(\"window.ALL_CRATES = [{}];\", krates.iter().map(|k| format!(\"\\\"{}\\\"\", k)).join(\",\"));\n-    cx.shared.fs.write(&crate_list_dst, &crate_list)?;\n+    write_crate(\"crates.js\", &|| {\n+        let krates = krates.iter().map(|k| format!(\"\\\"{}\\\"\", k)).join(\",\");\n+        Ok(format!(\"window.ALL_CRATES = [{}];\", krates).into_bytes())\n+    })?;\n \n     if options.enable_index_page {\n         if let Some(index_page) = options.index_page.clone() {\n@@ -481,21 +551,3 @@ pub(super) fn write_shared(\n     }\n     Ok(())\n }\n-\n-fn write_minify(\n-    fs: &DocFS,\n-    dst: PathBuf,\n-    contents: &str,\n-    enable_minification: bool,\n-) -> Result<(), Error> {\n-    if enable_minification {\n-        if dst.extension() == Some(&OsStr::new(\"css\")) {\n-            let res = try_none!(minifier::css::minify(contents).ok(), &dst);\n-            fs.write(dst, res.as_bytes())\n-        } else {\n-            fs.write(dst, minifier::js::minify(contents).as_bytes())\n-        }\n-    } else {\n-        fs.write(dst, contents.as_bytes())\n-    }\n-}"}, {"sha": "54a6fc625a6152f6e55c925436757de9c87452ae", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/31f532092c4172ba2f3764d3ef63a790ea1387e3/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f532092c4172ba2f3764d3ef63a790ea1387e3/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=31f532092c4172ba2f3764d3ef63a790ea1387e3", "patch": "@@ -527,6 +527,14 @@ fn opts() -> Vec<RustcOptGroup> {\n         unstable(\"print\", |o| {\n             o.optmulti(\"\", \"print\", \"Rustdoc information to print on stdout\", \"[unversioned-files]\")\n         }),\n+        unstable(\"emit\", |o| {\n+            o.optmulti(\n+                \"\",\n+                \"emit\",\n+                \"Comma separated list of types of output for rustdoc to emit\",\n+                \"[unversioned-shared-resources,toolchain-shared-resources,invocation-specific]\",\n+            )\n+        }),\n     ]\n }\n "}, {"sha": "5c4825ae66c878a80627e31441288a76d43b18ab", "filename": "src/test/run-make/emit-shared-files/Makefile", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/31f532092c4172ba2f3764d3ef63a790ea1387e3/src%2Ftest%2Frun-make%2Femit-shared-files%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/31f532092c4172ba2f3764d3ef63a790ea1387e3/src%2Ftest%2Frun-make%2Femit-shared-files%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Femit-shared-files%2FMakefile?ref=31f532092c4172ba2f3764d3ef63a790ea1387e3", "patch": "@@ -0,0 +1,46 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+INVOCATION_ONLY = $(TMPDIR)/invocation-only\n+TOOLCHAIN_ONLY = $(TMPDIR)/toolchain-only\n+ALL_SHARED = $(TMPDIR)/all-shared\n+\n+all: invocation-only toolchain-only all-shared\n+\n+invocation-only:\n+\t$(RUSTDOC) -Z unstable-options --emit=invocation-specific --output $(INVOCATION_ONLY) --resource-suffix=-xxx --theme y.css --extend-css z.css x.rs\n+\t[ -e $(INVOCATION_ONLY)/search-index-xxx.js ]\n+\t[ -e $(INVOCATION_ONLY)/settings.html ]\n+\t[ -e $(INVOCATION_ONLY)/x/all.html ]\n+\t[ -e $(INVOCATION_ONLY)/x/index.html ]\n+\t[ -e $(INVOCATION_ONLY)/theme-xxx.css ] # generated from z.css\n+\t! [ -e $(INVOCATION_ONLY)/storage-xxx.js ]\n+\t! [ -e $(INVOCATION_ONLY)/SourceSerifPro-It.ttf.woff ]\n+\n+\t# FIXME: this probably shouldn't have a suffix\n+\t[ -e $(INVOCATION_ONLY)/y-xxx.css ]\n+\t# FIXME: this is technically incorrect (see `write_shared`)\n+\t! [ -e $(INVOCATION_ONLY)/main-xxx.js ]\n+\n+toolchain-only:\n+\t$(RUSTDOC) -Z unstable-options --emit=toolchain-shared-resources --output $(TOOLCHAIN_ONLY) --resource-suffix=-xxx --extend-css z.css x.rs\n+\t[ -e $(TOOLCHAIN_ONLY)/storage-xxx.js ]\n+\t! [ -e $(TOOLCHAIN_ONLY)/SourceSerifPro-It.ttf.woff ]\n+\t! [ -e $(TOOLCHAIN_ONLY)/search-index-xxx.js ]\n+\t! [ -e $(TOOLCHAIN_ONLY)/x/index.html ]\n+\t! [ -e $(TOOLCHAIN_ONLY)/theme.css ]\n+\n+\t[ -e $(TOOLCHAIN_ONLY)/main-xxx.js ]\n+\t! [ -e $(TOOLCHAIN_ONLY)/y-xxx.css ]\n+\n+all-shared:\n+\t$(RUSTDOC) -Z unstable-options --emit=toolchain-shared-resources,unversioned-shared-resources --output $(ALL_SHARED) --resource-suffix=-xxx --extend-css z.css x.rs\n+\t[ -e $(ALL_SHARED)/storage-xxx.js ]\n+\t[ -e $(ALL_SHARED)/SourceSerifPro-It.ttf.woff ]\n+\t! [ -e $(ALL_SHARED)/search-index-xxx.js ]\n+\t! [ -e $(ALL_SHARED)/settings.html ]\n+\t! [ -e $(ALL_SHARED)/x ]\n+\t! [ -e $(ALL_SHARED)/src ]\n+\t! [ -e $(ALL_SHARED)/theme.css ]\n+\n+\t[ -e $(ALL_SHARED)/main-xxx.js ]\n+\t! [ -e $(ALL_SHARED)/y-xxx.css ]"}, {"sha": "5df7576133a684ab8f887f442084e99062eb4886", "filename": "src/test/run-make/emit-shared-files/x.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/31f532092c4172ba2f3764d3ef63a790ea1387e3/src%2Ftest%2Frun-make%2Femit-shared-files%2Fx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31f532092c4172ba2f3764d3ef63a790ea1387e3/src%2Ftest%2Frun-make%2Femit-shared-files%2Fx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Femit-shared-files%2Fx.rs?ref=31f532092c4172ba2f3764d3ef63a790ea1387e3", "patch": "@@ -0,0 +1 @@\n+// nothing to see here"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/run-make/emit-shared-files/y.css", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/31f532092c4172ba2f3764d3ef63a790ea1387e3/src%2Ftest%2Frun-make%2Femit-shared-files%2Fy.css", "raw_url": "https://github.com/rust-lang/rust/raw/31f532092c4172ba2f3764d3ef63a790ea1387e3/src%2Ftest%2Frun-make%2Femit-shared-files%2Fy.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Femit-shared-files%2Fy.css?ref=31f532092c4172ba2f3764d3ef63a790ea1387e3"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "src/test/run-make/emit-shared-files/z.css", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/31f532092c4172ba2f3764d3ef63a790ea1387e3/src%2Ftest%2Frun-make%2Femit-shared-files%2Fz.css", "raw_url": "https://github.com/rust-lang/rust/raw/31f532092c4172ba2f3764d3ef63a790ea1387e3/src%2Ftest%2Frun-make%2Femit-shared-files%2Fz.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Femit-shared-files%2Fz.css?ref=31f532092c4172ba2f3764d3ef63a790ea1387e3"}]}