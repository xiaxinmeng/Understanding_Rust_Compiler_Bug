{"sha": "e3afba5b7bccb4bf1f3a0327aa9ad91f16527250", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYWZiYTViN2JjY2I0YmYxZjNhMDMyN2FhOWFkOTFmMTY1MjcyNTA=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2017-10-15T21:27:17Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2017-10-27T15:38:07Z"}, "message": "Emit crate disambiguators in save-analysis data", "tree": {"sha": "fda673b937328a4c2b899080d4dce5f983d675ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fda673b937328a4c2b899080d4dce5f983d675ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3afba5b7bccb4bf1f3a0327aa9ad91f16527250", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3afba5b7bccb4bf1f3a0327aa9ad91f16527250", "html_url": "https://github.com/rust-lang/rust/commit/e3afba5b7bccb4bf1f3a0327aa9ad91f16527250", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3afba5b7bccb4bf1f3a0327aa9ad91f16527250/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7b080b38e931e9a4b9e724c69f579df326903cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7b080b38e931e9a4b9e724c69f579df326903cb", "html_url": "https://github.com/rust-lang/rust/commit/f7b080b38e931e9a4b9e724c69f579df326903cb"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "a01659f3d46b799fd0ce65769b16a582ac10a0ed", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3afba5b7bccb4bf1f3a0327aa9ad91f16527250/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e3afba5b7bccb4bf1f3a0327aa9ad91f16527250/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=e3afba5b7bccb4bf1f3a0327aa9ad91f16527250", "patch": "@@ -15,7 +15,7 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n-rls-data = \"0.11\"\n+rls-data = { git = \"https://github.com/Xanewok/rls-data\", branch = \"crate-source\" }\n rls-span = \"0.4\"\n # FIXME(#40527) should move rustc serialize out of tree\n rustc-serialize = \"0.3\""}, {"sha": "13787dbadd04a8deff5f6f9fb8ffb135a644df05", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e3afba5b7bccb4bf1f3a0327aa9ad91f16527250/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3afba5b7bccb4bf1f3a0327aa9ad91f16527250/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=e3afba5b7bccb4bf1f3a0327aa9ad91f16527250", "patch": "@@ -46,8 +46,8 @@ use json_dumper::{JsonDumper, DumpOutput};\n use span_utils::SpanUtils;\n use sig;\n \n-use rls_data::{CratePreludeData, Import, ImportKind, SpanData, Ref, RefKind,\n-               Def, DefKind, Relation, RelationKind};\n+use rls_data::{CratePreludeData, GlobalCrateId, Import, ImportKind, SpanData,\n+               Ref, RefKind, Def, DefKind, Relation, RelationKind};\n \n macro_rules! down_cast_data {\n     ($id:ident, $kind:ident, $sp:expr) => {\n@@ -131,7 +131,10 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         });\n \n         let data = CratePreludeData {\n-            crate_name: name.into(),\n+            crate_id: GlobalCrateId {\n+                name: name.into(),\n+                disambiguator: self.tcx.sess.local_crate_disambiguator().to_string(),\n+            },\n             crate_root: crate_root.unwrap_or(\"<no source>\".to_owned()),\n             external_crates: self.save_ctxt.get_external_crates(),\n             span: self.span_from_span(krate.span),"}, {"sha": "886679f77d73e5c3fd3c673c532164126ae7de1c", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e3afba5b7bccb4bf1f3a0327aa9ad91f16527250/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3afba5b7bccb4bf1f3a0327aa9ad91f16527250/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=e3afba5b7bccb4bf1f3a0327aa9ad91f16527250", "patch": "@@ -63,7 +63,7 @@ use dump_visitor::DumpVisitor;\n use span_utils::SpanUtils;\n \n use rls_data::{Ref, RefKind, SpanData, MacroRef, Def, DefKind, Relation, RelationKind,\n-               ExternalCrateData};\n+               ExternalCrateData, GlobalCrateId};\n use rls_data::config::Config;\n \n \n@@ -82,10 +82,6 @@ pub enum Data {\n     RelationData(Relation),\n }\n \n-macro_rules! option_try(\n-    ($e:expr) => (match $e { Some(e) => e, None => return None })\n-);\n-\n impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n     fn span_from_span(&self, span: Span) -> SpanData {\n         use rls_span::{Row, Column};\n@@ -119,9 +115,12 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             };\n             let lo_loc = self.span_utils.sess.codemap().lookup_char_pos(span.lo());\n             result.push(ExternalCrateData {\n-                name: self.tcx.crate_name(n).to_string(),\n-                num: n.as_u32(),\n                 file_name: SpanUtils::make_path_string(&lo_loc.file.name),\n+                num: n.as_u32(),\n+                id: GlobalCrateId {\n+                    name: self.tcx.crate_name(n).to_string(),\n+                    disambiguator: self.tcx.crate_disambiguator(n).to_string(),\n+                },\n             });\n         }\n \n@@ -725,8 +724,8 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         // macro uses.\n         let callsite = span.source_callsite();\n         let callsite_span = self.span_from_span(callsite);\n-        let callee = option_try!(span.source_callee());\n-        let callee_span = option_try!(callee.span);\n+        let callee = span.source_callee()?;\n+        let callee_span = callee.span?;\n \n         // Ignore attribute macros, their spans are usually mangled\n         if let MacroAttribute(_) = callee.format {"}]}