{"sha": "cd5eeb904e6f5096bb1f8b76fba7e568cdbbdc8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNWVlYjkwNGU2ZjUwOTZiYjFmOGI3NmZiYTdlNTY4Y2RiYmRjOGM=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-09-02T15:21:20Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-09-29T12:29:20Z"}, "message": "Add tests", "tree": {"sha": "9541c71a0215e86f9069ba7358592297aabe4cc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9541c71a0215e86f9069ba7358592297aabe4cc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd5eeb904e6f5096bb1f8b76fba7e568cdbbdc8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd5eeb904e6f5096bb1f8b76fba7e568cdbbdc8c", "html_url": "https://github.com/rust-lang/rust/commit/cd5eeb904e6f5096bb1f8b76fba7e568cdbbdc8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd5eeb904e6f5096bb1f8b76fba7e568cdbbdc8c/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1895716c885eba9aae710f80f4c29eb2b424c6f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1895716c885eba9aae710f80f4c29eb2b424c6f0", "html_url": "https://github.com/rust-lang/rust/commit/1895716c885eba9aae710f80f4c29eb2b424c6f0"}], "stats": {"total": 80, "additions": 77, "deletions": 3}, "files": [{"sha": "1989a562bec4d6dd564ad3386eb8a56cfc3037de", "filename": "crates/ide/src/fn_references.rs", "status": "modified", "additions": 77, "deletions": 3, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/cd5eeb904e6f5096bb1f8b76fba7e568cdbbdc8c/crates%2Fide%2Fsrc%2Ffn_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd5eeb904e6f5096bb1f8b76fba7e568cdbbdc8c/crates%2Fide%2Fsrc%2Ffn_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffn_references.rs?ref=cd5eeb904e6f5096bb1f8b76fba7e568cdbbdc8c", "patch": "@@ -1,3 +1,6 @@\n+//! This module implements a methods and free functions search in the specified file.\n+//! We have to skip tests, so cannot reuse file_structure module.\n+\n use hir::Semantics;\n use ide_db::RootDatabase;\n use syntax::{ast, ast::NameOwner, AstNode, SyntaxNode};\n@@ -10,12 +13,83 @@ pub(crate) fn find_all_methods(db: &RootDatabase, file_id: FileId) -> Vec<FileRa\n     source_file.syntax().descendants().filter_map(|it| method_range(it, file_id)).collect()\n }\n \n-pub(crate) fn method_range(item: SyntaxNode, file_id: FileId) -> Option<FileRange> {\n-    ast::Fn::cast(item).and_then(|fn_def|{\n+fn method_range(item: SyntaxNode, file_id: FileId) -> Option<FileRange> {\n+    ast::Fn::cast(item).and_then(|fn_def| {\n         if has_test_related_attribute(&fn_def) {\n             None\n         } else {\n-            fn_def.name().map(|name| FileRange{ file_id, range: name.syntax().text_range() })\n+            fn_def.name().map(|name| FileRange { file_id, range: name.syntax().text_range() })\n         }\n     })\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::mock_analysis::analysis_and_position;\n+    use crate::{FileRange, TextSize};\n+    use std::ops::RangeInclusive;\n+\n+    #[test]\n+    fn test_find_all_methods() {\n+        let (analysis, pos) = analysis_and_position(\n+            r#\"\n+            //- /lib.rs\n+            fn private_fn() {<|>}\n+\n+            pub fn pub_fn() {}\n+\n+            pub fn generic_fn<T>(arg: T) {}\n+        \"#,\n+        );\n+\n+        let refs = analysis.find_all_methods(pos.file_id).unwrap();\n+        check_result(&refs, &[3..=13, 27..=33, 47..=57]);\n+    }\n+\n+    #[test]\n+    fn test_find_trait_methods() {\n+        let (analysis, pos) = analysis_and_position(\n+            r#\"\n+            //- /lib.rs\n+            trait Foo {\n+                fn bar() {<|>}\n+                fn baz() {}\n+            }\n+        \"#,\n+        );\n+\n+        let refs = analysis.find_all_methods(pos.file_id).unwrap();\n+        check_result(&refs, &[19..=22, 35..=38]);\n+    }\n+\n+    #[test]\n+    fn test_skip_tests() {\n+        let (analysis, pos) = analysis_and_position(\n+            r#\"\n+            //- /lib.rs\n+            #[test]\n+            fn foo() {<|>}\n+\n+            pub fn pub_fn() {}\n+\n+            mod tests {\n+                #[test]\n+                fn bar() {}\n+            }\n+        \"#,\n+        );\n+\n+        let refs = analysis.find_all_methods(pos.file_id).unwrap();\n+        check_result(&refs, &[28..=34]);\n+    }\n+\n+    fn check_result(refs: &[FileRange], expected: &[RangeInclusive<u32>]) {\n+        assert_eq!(refs.len(), expected.len());\n+\n+        for (i, item) in refs.iter().enumerate() {\n+            let range = &expected[i];\n+            assert_eq!(TextSize::from(*range.start()), item.range.start());\n+            assert_eq!(TextSize::from(*range.end()), item.range.end());\n+        }\n+    }\n+}"}]}