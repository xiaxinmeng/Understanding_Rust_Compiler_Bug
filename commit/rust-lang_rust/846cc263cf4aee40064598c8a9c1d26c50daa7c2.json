{"sha": "846cc263cf4aee40064598c8a9c1d26c50daa7c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NmNjMjYzY2Y0YWVlNDAwNjQ1OThjOGE5YzFkMjZjNTBkYWE3YzI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-06T14:33:07Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-26T14:31:49Z"}, "message": "make normalize into an op", "tree": {"sha": "483c7293c99562646686c9aeceb4d7082a5d1398", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/483c7293c99562646686c9aeceb4d7082a5d1398"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/846cc263cf4aee40064598c8a9c1d26c50daa7c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/846cc263cf4aee40064598c8a9c1d26c50daa7c2", "html_url": "https://github.com/rust-lang/rust/commit/846cc263cf4aee40064598c8a9c1d26c50daa7c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/846cc263cf4aee40064598c8a9c1d26c50daa7c2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f998628e5c661f07bf0db7985b2949411a23064c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f998628e5c661f07bf0db7985b2949411a23064c", "html_url": "https://github.com/rust-lang/rust/commit/f998628e5c661f07bf0db7985b2949411a23064c"}], "stats": {"total": 85, "additions": 58, "deletions": 27}, "files": [{"sha": "99d8ed85af3a835f2c1ef44ee2fa03b5a9a85ad7", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 6, "deletions": 26, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/846cc263cf4aee40064598c8a9c1d26c50daa7c2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/846cc263cf4aee40064598c8a9c1d26c50daa7c2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=846cc263cf4aee40064598c8a9c1d26c50daa7c2", "patch": "@@ -15,7 +15,6 @@ use borrow_check::location::LocationTable;\n use borrow_check::nll::facts::AllFacts;\n use borrow_check::nll::region_infer::Cause;\n use borrow_check::nll::region_infer::{ClosureRegionRequirementsExt, OutlivesConstraint, TypeTest};\n-use borrow_check::nll::type_check::type_op::{CustomTypeOp, TypeOp};\n use borrow_check::nll::universal_regions::UniversalRegions;\n use dataflow::move_paths::MoveData;\n use dataflow::FlowAtLocation;\n@@ -27,8 +26,7 @@ use rustc::mir::interpret::EvalErrorKind::BoundsCheck;\n use rustc::mir::tcx::PlaceTy;\n use rustc::mir::visit::{PlaceContext, Visitor};\n use rustc::mir::*;\n-use rustc::traits::query::NoSolution;\n-use rustc::traits::{ObligationCause, Normalized, TraitEngine};\n+use rustc::traits::{ObligationCause, TraitEngine};\n use rustc::ty::error::TypeError;\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::{self, ToPolyTraitRef, Ty, TyCtxt, TypeVariants};\n@@ -734,7 +732,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         &mut self,\n         locations: Locations,\n         describe_op: impl Fn() -> String,\n-        op: impl TypeOp<'gcx, 'tcx, Output = R>,\n+        op: impl type_op::TypeOp<'gcx, 'tcx, Output = R>,\n     ) -> Result<R, TypeError<'tcx>> {\n         match op.trivial_noop() {\n             Ok(r) => Ok(r),\n@@ -784,7 +782,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     fn fully_perform_op_and_get_region_constraint_data<R>(\n         &mut self,\n         describe_op: impl Fn() -> String,\n-        op: impl TypeOp<'gcx, 'tcx, Output = R>,\n+        op: impl type_op::TypeOp<'gcx, 'tcx, Output = R>,\n     ) -> Result<(R, Option<Rc<RegionConstraintData<'tcx>>>), TypeError<'tcx>> {\n         if cfg!(debug_assertions) {\n             info!(\n@@ -1649,30 +1647,12 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     where\n         T: fmt::Debug + TypeFoldable<'tcx>,\n     {\n-        // Micro-optimization: avoid work when we don't have to\n-        if !value.has_projections() {\n-            return value.clone();\n-        }\n-\n         debug!(\"normalize(value={:?}, location={:?})\", value, location);\n+        let value1 = value.clone(); // FIXME move describe into type_op\n         self.fully_perform_op(\n             location.to_locations(),\n-            || format!(\"normalize(value={:?})\", value),\n-            CustomTypeOp::new(|this| {\n-                let Normalized { value, obligations } = this\n-                    .infcx\n-                    .at(&ObligationCause::dummy(), this.param_env)\n-                    .normalize(&value)\n-                    .unwrap_or_else(|NoSolution| {\n-                        span_bug!(\n-                            this.last_span,\n-                            \"normalization of `{:?}` failed at {:?}\",\n-                            value,\n-                            location,\n-                        );\n-                    });\n-                Ok(InferOk { value, obligations })\n-            }),\n+            || format!(\"normalize(value={:?})\", value1),\n+            type_op::Normalize::new(value),\n         ).unwrap()\n     }\n }"}, {"sha": "43c11c61eff61915ab3c49775c317d16c4e9a634", "filename": "src/librustc_mir/borrow_check/nll/type_check/type_op.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/846cc263cf4aee40064598c8a9c1d26c50daa7c2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/846cc263cf4aee40064598c8a9c1d26c50daa7c2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ftype_op.rs?ref=846cc263cf4aee40064598c8a9c1d26c50daa7c2", "patch": "@@ -10,8 +10,11 @@\n \n use borrow_check::nll::type_check::TypeChecker;\n use rustc::infer::{InferOk, InferResult};\n-use rustc::traits::{Obligation, ObligationCause, PredicateObligation};\n+use rustc::traits::{Normalized, Obligation, ObligationCause, PredicateObligation};\n+use rustc::traits::query::NoSolution;\n use rustc::ty::{ParamEnv, Predicate, Ty};\n+use rustc::ty::fold::TypeFoldable;\n+use std::fmt;\n \n pub(super) trait TypeOp<'gcx, 'tcx>: Sized {\n     type Output;\n@@ -160,3 +163,51 @@ impl<'gcx, 'tcx> TypeOp<'gcx, 'tcx> for ProvePredicates<'tcx> {\n         })\n     }\n }\n+\n+pub(super) struct Normalize<T> {\n+    value: T\n+}\n+\n+impl<'tcx, T> Normalize<T>\n+where\n+    T: fmt::Debug + TypeFoldable<'tcx>,\n+{\n+    pub(super) fn new(\n+        value: T\n+    ) -> Self {\n+        Self { value }\n+    }\n+}\n+\n+impl<'gcx, 'tcx, T> TypeOp<'gcx, 'tcx> for Normalize<T>\n+where\n+    T: fmt::Debug + TypeFoldable<'tcx>,\n+{\n+    type Output = T;\n+\n+    fn trivial_noop(self) -> Result<Self::Output, Self> {\n+        if !self.value.has_projections() {\n+            Ok(self.value)\n+        } else {\n+            Err(self)\n+        }\n+    }\n+\n+    fn perform(\n+        self,\n+        type_checker: &mut TypeChecker<'_, 'gcx, 'tcx>,\n+    ) -> InferResult<'tcx, Self::Output> {\n+        let Normalized { value, obligations } = type_checker\n+            .infcx\n+            .at(&ObligationCause::dummy(), type_checker.param_env)\n+            .normalize(&self.value)\n+            .unwrap_or_else(|NoSolution| {\n+                span_bug!(\n+                    type_checker.last_span,\n+                    \"normalization of `{:?}` failed\",\n+                    self.value,\n+                );\n+            });\n+        Ok(InferOk { value, obligations })\n+    }\n+}"}]}