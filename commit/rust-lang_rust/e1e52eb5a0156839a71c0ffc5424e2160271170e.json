{"sha": "e1e52eb5a0156839a71c0ffc5424e2160271170e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZTUyZWI1YTAxNTY4MzlhNzFjMGZmYzU0MjRlMjE2MDI3MTE3MGU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-10-18T04:07:31Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-10-22T21:54:29Z"}, "message": "Suggest appropriate syntax on missing lifetime specifier in return type\n\nSuggest using `'static` when a lifetime is missing in the return type\nwith a structured suggestion instead of a note.", "tree": {"sha": "b4399d8a75489c97fbb3a1d101f55ca65643e764", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4399d8a75489c97fbb3a1d101f55ca65643e764"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1e52eb5a0156839a71c0ffc5424e2160271170e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1e52eb5a0156839a71c0ffc5424e2160271170e", "html_url": "https://github.com/rust-lang/rust/commit/e1e52eb5a0156839a71c0ffc5424e2160271170e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1e52eb5a0156839a71c0ffc5424e2160271170e/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a66dc8a1489d2818b5e63f18e1464be79da1f137", "url": "https://api.github.com/repos/rust-lang/rust/commits/a66dc8a1489d2818b5e63f18e1464be79da1f137", "html_url": "https://github.com/rust-lang/rust/commit/a66dc8a1489d2818b5e63f18e1464be79da1f137"}], "stats": {"total": 180, "additions": 146, "deletions": 34}, "files": [{"sha": "04a2308cead34ca21df5fc5967c842bb878f6449", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1e52eb5a0156839a71c0ffc5424e2160271170e/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1e52eb5a0156839a71c0ffc5424e2160271170e/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e1e52eb5a0156839a71c0ffc5424e2160271170e", "patch": "@@ -1152,7 +1152,7 @@ impl<'a> LoweringContext<'a> {\n             TyKind::Slice(ref ty) => hir::TyKind::Slice(self.lower_ty(ty, itctx)),\n             TyKind::Ptr(ref mt) => hir::TyKind::Ptr(self.lower_mt(mt, itctx)),\n             TyKind::Rptr(ref region, ref mt) => {\n-                let span = t.span.shrink_to_lo();\n+                let span = self.sess.source_map().next_point(t.span.shrink_to_lo());\n                 let lifetime = match *region {\n                     Some(ref lt) => self.lower_lifetime(lt),\n                     None => self.elided_ref_lifetime(span),"}, {"sha": "86db74b78b9838155207b4c8f2cbf400b7e696e9", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 48, "deletions": 7, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/e1e52eb5a0156839a71c0ffc5424e2160271170e/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1e52eb5a0156839a71c0ffc5424e2160271170e/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=e1e52eb5a0156839a71c0ffc5424e2160271170e", "patch": "@@ -2238,7 +2238,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n         if let Some(params) = error {\n             if lifetime_refs.len() == 1 {\n-                self.report_elision_failure(&mut err, params);\n+                self.report_elision_failure(&mut err, params, span);\n             }\n         }\n \n@@ -2249,6 +2249,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         &mut self,\n         db: &mut DiagnosticBuilder<'_>,\n         params: &[ElisionFailureInfo],\n+        span: Span,\n     ) {\n         let mut m = String::new();\n         let len = params.len();\n@@ -2304,19 +2305,59 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 \"this function's return type contains a borrowed value, but \\\n                  there is no value for it to be borrowed from\"\n             );\n-            help!(db, \"consider giving it a 'static lifetime\");\n+            let msg = \"consider giving it a 'static lifetime\";\n+            match self.tcx.sess.source_map().span_to_snippet(span) {\n+                Ok(ref snippet) if snippet == \"&\" => db.span_suggestion_with_applicability(\n+                    span,\n+                    msg,\n+                    \"&'static \".to_owned(),\n+                    Applicability::MachineApplicable,\n+                ),\n+                Ok(ref snippet)\n+                if snippet == \"'_\" => db.span_suggestion_with_applicability(\n+                    span,\n+                    msg,\n+                    \"'static\".to_owned(),\n+                    Applicability::MachineApplicable,\n+                ),\n+                Ok(ref snippet) => db.span_suggestion_with_applicability(\n+                    span,\n+                    msg,\n+                    format!(\"{} + 'static\", snippet),\n+                    Applicability::MaybeIncorrect,\n+                ),\n+                Err(_) => db.help(msg),\n+            };\n         } else if elided_len == 0 {\n             help!(\n                 db,\n                 \"this function's return type contains a borrowed value with \\\n                  an elided lifetime, but the lifetime cannot be derived from \\\n                  the arguments\"\n             );\n-            help!(\n-                db,\n-                \"consider giving it an explicit bounded or 'static \\\n-                 lifetime\"\n-            );\n+            let msg = \"consider giving it an explicit bounded or 'static lifetime\";\n+            match self.tcx.sess.source_map().span_to_snippet(span) {\n+                Ok(ref snippet) if snippet == \"&\" => db.span_suggestion_with_applicability(\n+                    span,\n+                    msg,\n+                     \"&'static \".to_owned(),\n+                    Applicability::MachineApplicable,\n+                ),\n+                Ok(ref snippet)\n+                if snippet == \"'_\" => db.span_suggestion_with_applicability(\n+                    span,\n+                    msg,\n+                    \"'static\".to_owned(),\n+                    Applicability::MachineApplicable,\n+                ),\n+                Ok(ref snippet) => db.span_suggestion_with_applicability(\n+                    span,\n+                    msg,\n+                    format!(\"{} + 'static\", snippet),\n+                    Applicability::MaybeIncorrect,\n+                ),\n+                Err(_) => db.help(msg),\n+            };\n         } else if elided_len == 1 {\n             help!(\n                 db,"}, {"sha": "4336aaf71ba0247912990597fc8df247f3420ec9", "filename": "src/test/ui/associated-types/bound-lifetime-in-binding-only.elision.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1e52eb5a0156839a71c0ffc5424e2160271170e/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1e52eb5a0156839a71c0ffc5424e2160271170e/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-binding-only.elision.stderr?ref=e1e52eb5a0156839a71c0ffc5424e2160271170e", "patch": "@@ -2,10 +2,12 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/bound-lifetime-in-binding-only.rs:62:23\n    |\n LL | fn elision<T: Fn() -> &i32>() {\n-   |                       ^ expected lifetime parameter\n+   |                       ^\n+   |                       |\n+   |                       expected lifetime parameter\n+   |                       help: consider giving it a 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-   = help: consider giving it a 'static lifetime\n \n error: aborting due to previous error\n "}, {"sha": "fbc4df54225d54ed23492cb29a40878d324861c6", "filename": "src/test/ui/associated-types/bound-lifetime-in-return-only.elision.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1e52eb5a0156839a71c0ffc5424e2160271170e/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1e52eb5a0156839a71c0ffc5424e2160271170e/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fbound-lifetime-in-return-only.elision.stderr?ref=e1e52eb5a0156839a71c0ffc5424e2160271170e", "patch": "@@ -2,10 +2,12 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/bound-lifetime-in-return-only.rs:44:23\n    |\n LL | fn elision(_: fn() -> &i32) {\n-   |                       ^ expected lifetime parameter\n+   |                       ^\n+   |                       |\n+   |                       expected lifetime parameter\n+   |                       help: consider giving it a 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-   = help: consider giving it a 'static lifetime\n \n error: aborting due to previous error\n "}, {"sha": "9fc35eae7052f694483ade5c2f33d843d6b037fd", "filename": "src/test/ui/foreign-fn-return-lifetime.fixed", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e1e52eb5a0156839a71c0ffc5424e2160271170e/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e1e52eb5a0156839a71c0ffc5424e2160271170e/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.fixed?ref=e1e52eb5a0156839a71c0ffc5424e2160271170e", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+extern \"C\" {\n+    pub fn g(_: &u8) -> &u8; // OK\n+    pub fn f() -> &'static u8; //~ ERROR missing lifetime specifier\n+}\n+\n+fn main() {}"}, {"sha": "941e7e05a3635f47d4f7d381fa42e8e3abc12a0a", "filename": "src/test/ui/foreign-fn-return-lifetime.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1e52eb5a0156839a71c0ffc5424e2160271170e/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1e52eb5a0156839a71c0ffc5424e2160271170e/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.rs?ref=e1e52eb5a0156839a71c0ffc5424e2160271170e", "patch": "@@ -8,9 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-rustfix\n+\n extern \"C\" {\n-    fn g(_: &u8) -> &u8; // OK\n-    fn f() -> &u8; //~ ERROR missing lifetime specifier\n+    pub fn g(_: &u8) -> &u8; // OK\n+    pub fn f() -> &u8; //~ ERROR missing lifetime specifier\n }\n \n fn main() {}"}, {"sha": "4e52d6044c4e938aab609a38028e142817393fc7", "filename": "src/test/ui/foreign-fn-return-lifetime.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e1e52eb5a0156839a71c0ffc5424e2160271170e/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1e52eb5a0156839a71c0ffc5424e2160271170e/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign-fn-return-lifetime.stderr?ref=e1e52eb5a0156839a71c0ffc5424e2160271170e", "patch": "@@ -1,11 +1,13 @@\n error[E0106]: missing lifetime specifier\n-  --> $DIR/foreign-fn-return-lifetime.rs:13:15\n+  --> $DIR/foreign-fn-return-lifetime.rs:15:19\n    |\n-LL |     fn f() -> &u8; //~ ERROR missing lifetime specifier\n-   |               ^ expected lifetime parameter\n+LL |     pub fn f() -> &u8; //~ ERROR missing lifetime specifier\n+   |                   ^\n+   |                   |\n+   |                   expected lifetime parameter\n+   |                   help: consider giving it a 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-   = help: consider giving it a 'static lifetime\n \n error: aborting due to previous error\n "}, {"sha": "88b6a831d7e4121e174ee9cd1515c01eeccbbbef", "filename": "src/test/ui/issues/issue-13497.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1e52eb5a0156839a71c0ffc5424e2160271170e/src%2Ftest%2Fui%2Fissues%2Fissue-13497.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1e52eb5a0156839a71c0ffc5424e2160271170e/src%2Ftest%2Fui%2Fissues%2Fissue-13497.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13497.stderr?ref=e1e52eb5a0156839a71c0ffc5424e2160271170e", "patch": "@@ -2,10 +2,12 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/issue-13497.rs:12:5\n    |\n LL |     &str //~ ERROR missing lifetime specifier\n-   |     ^ expected lifetime parameter\n+   |     ^\n+   |     |\n+   |     expected lifetime parameter\n+   |     help: consider giving it a 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-   = help: consider giving it a 'static lifetime\n \n error: aborting due to previous error\n "}, {"sha": "e4464b2dd313d7658c6d583cc1a1df655c8901bd", "filename": "src/test/ui/issues/issue-26638.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e1e52eb5a0156839a71c0ffc5424e2160271170e/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1e52eb5a0156839a71c0ffc5424e2160271170e/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr?ref=e1e52eb5a0156839a71c0ffc5424e2160271170e", "patch": "@@ -10,19 +10,23 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/issue-26638.rs:14:40\n    |\n LL | fn parse_type_2(iter: fn(&u8)->&u8) -> &str { iter() }\n-   |                                        ^ expected lifetime parameter\n+   |                                        ^\n+   |                                        |\n+   |                                        expected lifetime parameter\n+   |                                        help: consider giving it an explicit bounded or 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n-   = help: consider giving it an explicit bounded or 'static lifetime\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-26638.rs:17:22\n    |\n LL | fn parse_type_3() -> &str { unimplemented!() }\n-   |                      ^ expected lifetime parameter\n+   |                      ^\n+   |                      |\n+   |                      expected lifetime parameter\n+   |                      help: consider giving it a 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-   = help: consider giving it a 'static lifetime\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9962dbc9812bdbcbee2aec4f7a0ded77a85f93a5", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-requires-explicit-lifetime.stderr", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e1e52eb5a0156839a71c0ffc5424e2160271170e/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1e52eb5a0156839a71c0ffc5424e2160271170e/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr?ref=e1e52eb5a0156839a71c0ffc5424e2160271170e", "patch": "@@ -2,10 +2,12 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:12:11\n    |\n LL | fn f() -> &isize {    //~ ERROR missing lifetime specifier\n-   |           ^ expected lifetime parameter\n+   |           ^\n+   |           |\n+   |           expected lifetime parameter\n+   |           help: consider giving it a 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-   = help: consider giving it a 'static lifetime\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:17:33\n@@ -27,28 +29,34 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:31:20\n    |\n LL | fn i(_x: isize) -> &isize { //~ ERROR missing lifetime specifier\n-   |                    ^ expected lifetime parameter\n+   |                    ^\n+   |                    |\n+   |                    expected lifetime parameter\n+   |                    help: consider giving it an explicit bounded or 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n-   = help: consider giving it an explicit bounded or 'static lifetime\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:44:24\n    |\n LL | fn j(_x: StaticStr) -> &isize { //~ ERROR missing lifetime specifier\n-   |                        ^ expected lifetime parameter\n+   |                        ^\n+   |                        |\n+   |                        expected lifetime parameter\n+   |                        help: consider giving it an explicit bounded or 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n-   = help: consider giving it an explicit bounded or 'static lifetime\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:50:49\n    |\n LL | fn k<'a, T: WithLifetime<'a>>(_x: T::Output) -> &isize {\n-   |                                                 ^ expected lifetime parameter\n+   |                                                 ^\n+   |                                                 |\n+   |                                                 expected lifetime parameter\n+   |                                                 help: consider giving it an explicit bounded or 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments\n-   = help: consider giving it an explicit bounded or 'static lifetime\n \n error: aborting due to 6 previous errors\n "}, {"sha": "6b6e263b7fd1afef43425c46b45c6b96d51495cf", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-trait.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e1e52eb5a0156839a71c0ffc5424e2160271170e/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1e52eb5a0156839a71c0ffc5424e2160271170e/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.rs?ref=e1e52eb5a0156839a71c0ffc5424e2160271170e", "patch": "@@ -0,0 +1,10 @@\n+trait Future {\n+    type Item;\n+    type Error;\n+}\n+\n+use std::error::Error;\n+\n+fn foo() -> impl Future<Item=(), Error=Box<Error>> {\n+    Ok(())\n+}"}, {"sha": "426941b949daa495ff6919189d67d6fb02d8e916", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-trait.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e1e52eb5a0156839a71c0ffc5424e2160271170e/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1e52eb5a0156839a71c0ffc5424e2160271170e/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr?ref=e1e52eb5a0156839a71c0ffc5424e2160271170e", "patch": "@@ -0,0 +1,19 @@\n+error[E0601]: `main` function not found in crate `lifetime_elision_return_type_trait`\n+   |\n+   = note: consider adding a `main` function to `$DIR/lifetime-elision-return-type-trait.rs`\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/lifetime-elision-return-type-trait.rs:8:44\n+   |\n+LL | fn foo() -> impl Future<Item=(), Error=Box<Error>> {\n+   |                                            ^^^^^\n+   |                                            |\n+   |                                            expected lifetime parameter\n+   |                                            help: consider giving it a 'static lifetime: `Error + 'static`\n+   |\n+   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0106, E0601.\n+For more information about an error, try `rustc --explain E0106`."}, {"sha": "b0da67a7c346e011434266f78b03e173dc222f42", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-binders.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1e52eb5a0156839a71c0ffc5424e2160271170e/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1e52eb5a0156839a71c0ffc5424e2160271170e/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr?ref=e1e52eb5a0156839a71c0ffc5424e2160271170e", "patch": "@@ -26,10 +26,12 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/underscore-lifetime-binders.rs:24:29\n    |\n LL | fn meh() -> Box<for<'_> Meh<'_>> //~ ERROR cannot be used here\n-   |                             ^^ expected lifetime parameter\n+   |                             ^^\n+   |                             |\n+   |                             expected lifetime parameter\n+   |                             help: consider giving it a 'static lifetime: `'static`\n    |\n    = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n-   = help: consider giving it a 'static lifetime\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/underscore-lifetime-binders.rs:30:35"}]}