{"sha": "a80db258028f8f01076d70fc6d0a59c2b620161a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MGRiMjU4MDI4ZjhmMDEwNzZkNzBmYzZkMGE1OWMyYjYyMDE2MWE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-06-12T20:22:26Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-06-15T08:29:20Z"}, "message": "Add E0614", "tree": {"sha": "ba9e6986d3c22308e7556ae86e8240f69c6dafb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba9e6986d3c22308e7556ae86e8240f69c6dafb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a80db258028f8f01076d70fc6d0a59c2b620161a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a80db258028f8f01076d70fc6d0a59c2b620161a", "html_url": "https://github.com/rust-lang/rust/commit/a80db258028f8f01076d70fc6d0a59c2b620161a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a80db258028f8f01076d70fc6d0a59c2b620161a/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8cbb533096206c3f084712fe7b9ca74758f3178", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8cbb533096206c3f084712fe7b9ca74758f3178", "html_url": "https://github.com/rust-lang/rust/commit/e8cbb533096206c3f084712fe7b9ca74758f3178"}], "stats": {"total": 60, "additions": 47, "deletions": 13}, "files": [{"sha": "484fbe43d5daa8568877b5233b3a428da4ffd49d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a80db258028f8f01076d70fc6d0a59c2b620161a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80db258028f8f01076d70fc6d0a59c2b620161a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a80db258028f8f01076d70fc6d0a59c2b620161a", "patch": "@@ -3217,15 +3217,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                         .join(\", \");\n \n             struct_span_err!(tcx.sess, span, E0063,\n-                        \"missing field{} {}{} in initializer of `{}`\",\n-                        if remaining_fields.len() == 1 {\"\"} else {\"s\"},\n-                        remaining_fields_names,\n-                        truncated_fields_error,\n-                        adt_ty)\n-                        .span_label(span, format!(\"missing {}{}\",\n-                            remaining_fields_names,\n-                            truncated_fields_error))\n-                        .emit();\n+                             \"missing field{} {}{} in initializer of `{}`\",\n+                             if remaining_fields.len() == 1 { \"\" } else { \"s\" },\n+                             remaining_fields_names,\n+                             truncated_fields_error,\n+                             adt_ty)\n+                            .span_label(span, format!(\"missing {}{}\",\n+                                        remaining_fields_names,\n+                                        truncated_fields_error))\n+                            .emit();\n         }\n     }\n \n@@ -3458,10 +3458,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             oprnd_t = self.make_overloaded_lvalue_return_type(method).ty;\n                             self.write_method_call(expr.id, method);\n                         } else {\n-                            self.type_error_message(expr.span, |actual| {\n-                                format!(\"type `{}` cannot be \\\n-                                        dereferenced\", actual)\n-                            }, oprnd_t);\n+                            type_error_struct!(tcx.sess, expr.span, oprnd_t, E0614,\n+                                               \"type `{}` cannot be dereferenced\",\n+                                               oprnd_t).emit();\n                             oprnd_t = tcx.types.err;\n                         }\n                     }"}, {"sha": "f34151b60be09c7e263ff50da272996a02c1ed9f", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a80db258028f8f01076d70fc6d0a59c2b620161a/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80db258028f8f01076d70fc6d0a59c2b620161a/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=a80db258028f8f01076d70fc6d0a59c2b620161a", "patch": "@@ -4286,6 +4286,27 @@ println!(\"x: {} y: {}\", s.x, s.y);\n ```\n \"##,\n \n+E0614: r##\"\n+Attempted to dereference a variable which cannot be dereferenced.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0614\n+let y = 0u32;\n+*y; // error: type `u32` cannot be dereferenced\n+```\n+\n+Only types implementing `std::ops::Deref` can be dereferenced (such as `&T`).\n+Example:\n+\n+```\n+let y = 0u32;\n+let x = &y;\n+// So here, `x` is a `&u32`, so we can dereference it:\n+*x; // ok!\n+```\n+\"##,\n+\n E0617: r##\"\n Attempted to pass an invalid type of variable into a variadic function.\n "}, {"sha": "909f0eb828558446200599035842b198cf86ea3d", "filename": "src/test/compile-fail/E0614.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a80db258028f8f01076d70fc6d0a59c2b620161a/src%2Ftest%2Fcompile-fail%2FE0614.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a80db258028f8f01076d70fc6d0a59c2b620161a/src%2Ftest%2Fcompile-fail%2FE0614.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0614.rs?ref=a80db258028f8f01076d70fc6d0a59c2b620161a", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let y = 0u32;\n+    *y; //~ ERROR E0614\n+}"}]}