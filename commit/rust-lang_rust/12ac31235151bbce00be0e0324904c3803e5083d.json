{"sha": "12ac31235151bbce00be0e0324904c3803e5083d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyYWMzMTIzNTE1MWJiY2UwMGJlMGUwMzI0OTA0YzM4MDNlNTA4M2Q=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-12-28T13:13:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-28T13:13:08Z"}, "message": "Rollup merge of #80284 - ThePuzzlemaker:issue-80179-fix, r=varkor\n\nSuggest fn ptr rather than fn item and suggest to use `Fn` trait bounds rather than the unique closure type in E0121\n\nPreviously, using `_` as a return type in a function that returned a function/closure would provide a diagnostic that would cause a papercut. For example:\n```rust\nfn f() -> i32 { 0 }\nfn fn_ptr() -> _ { f }\nfn closure() -> _ { || 0 }\n```\nwould result in this diagnostic:\n```rust\nerror[E0121]: the type placeholder `_` is not allowed within types on item signatures\n --> <anon>:2:16\n  |\n2 | fn fn_ptr() -> _ { f }\n  |                ^\n  |                |\n  |                not allowed in type signatures\n  |                help: replace with the correct return type: `fn() -> i32 {f}`\n\nerror[E0121]: the type placeholder `_` is not allowed within types on item signatures\n --> <anon>:3:17\n  |\n3 | fn closure() -> _ { || 0 }\n  |                 ^\n  |                 |\n  |                 not allowed in type signatures\n  |                 help: replace with the correct return type: `[closure@<anon>:3:21: 3:25]`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0121`.\n```\nAs can be seen, it was suggested to use the function definition return type `fn() -> i32 { f }` which is not valid syntax as a return type. Additionally, closures cause a papercut as unique closure types (notated in this case as `[closure@<anon>:3:21: 3:25]`) are not valid syntax either.\n\nInstead, this PR implements this version of the diagnostic (this example is for the same code featured above):\n```rust\nerror[E0121]: the type placeholder `_` is not allowed within types on item signatures\n --> <anon>:2:16\n  |\n2 | fn fn_ptr() -> _ { f }\n  |                ^\n  |                |\n  |                not allowed in type signatures\n  |                help: replace with the correct return type: `fn() -> i32`\n\nerror[E0121]: the type placeholder `_` is not allowed within types on item signatures\n --> <anon>:3:17\n  |\n3 | fn closure() -> _ { || 0 }\n  |                 ^ not allowed in type signatures\n  |\n  = help: consider using an `Fn`, `FnMut`, or `FnOnce` trait bound\n  = note: for more information on `Fn` traits and closure types, see https://doc.rust-lang.org/book/ch13-01-closures.html\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0121`.\n```\nAs can be seen in this diagnostic, the papercut for returning a function item is fixed by suggesting the usage of a function pointer as the return type. As for closures, it's suggested to use an `Fn`, `FnMut`, or `FnOnce` trait bound (with further reading on closures and `Fn` traits in *The Book* for beginners). I did not implement a suggestion to use `impl Fn() -> i32` syntax as that was out-of-scope for my abilities at the moment, therefore someone in the future may want to implement that. Also, it's possible to use either `impl Trait` syntax, generics, or generics with a `where` clause, and some users may not want to use `impl Trait` syntax for their own reasons.\n\nThis PR fixes #80179.", "tree": {"sha": "a263538509e02e4c18cf2523941f6f954455a7fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a263538509e02e4c18cf2523941f6f954455a7fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12ac31235151bbce00be0e0324904c3803e5083d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf6dnlCRBK7hj4Ov3rIwAAdHIIAEv0/Lb5hxhpFsXxhLiByKWB\nI1lrM3LMtLKT7M/F1nV67lE0oB7p3MrnSIfcp1KOIDGAWuz8BuVHtzE6v1f43rJh\nGPccyYV9ZIYZHpzMhO+D5Ul/VMRzt7I7FCuUo/U2l5kvno0ulnsVYq/vPTMoKl8d\n8qfb3lY07xSYLtBwp+4pVfR6j0g+pEYpmCUHNQg2jTAa3KWFjr+KautcWBGNDila\nwO5l6cpQZOTqdFf1OJGVduf/DYqY49A0QLfn2dWmSisfxzToG3SkJdagWL4VzNC4\nddPlO70JNVT8Cxtt38eFHjNOdKWAs1cevmKSi7NvltMBG4429px4kFJWlGBh+l4=\n=5GBe\n-----END PGP SIGNATURE-----\n", "payload": "tree a263538509e02e4c18cf2523941f6f954455a7fe\nparent d3c43ac244741221393b685423ce771e88e0ac7e\nparent 5e6dc927f7a935874a08c2c3913f24295711d8f2\nauthor Dylan DPC <dylan.dpc@gmail.com> 1609161188 +0100\ncommitter GitHub <noreply@github.com> 1609161188 +0100\n\nRollup merge of #80284 - ThePuzzlemaker:issue-80179-fix, r=varkor\n\nSuggest fn ptr rather than fn item and suggest to use `Fn` trait bounds rather than the unique closure type in E0121\n\nPreviously, using `_` as a return type in a function that returned a function/closure would provide a diagnostic that would cause a papercut. For example:\n```rust\nfn f() -> i32 { 0 }\nfn fn_ptr() -> _ { f }\nfn closure() -> _ { || 0 }\n```\nwould result in this diagnostic:\n```rust\nerror[E0121]: the type placeholder `_` is not allowed within types on item signatures\n --> <anon>:2:16\n  |\n2 | fn fn_ptr() -> _ { f }\n  |                ^\n  |                |\n  |                not allowed in type signatures\n  |                help: replace with the correct return type: `fn() -> i32 {f}`\n\nerror[E0121]: the type placeholder `_` is not allowed within types on item signatures\n --> <anon>:3:17\n  |\n3 | fn closure() -> _ { || 0 }\n  |                 ^\n  |                 |\n  |                 not allowed in type signatures\n  |                 help: replace with the correct return type: `[closure@<anon>:3:21: 3:25]`\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0121`.\n```\nAs can be seen, it was suggested to use the function definition return type `fn() -> i32 { f }` which is not valid syntax as a return type. Additionally, closures cause a papercut as unique closure types (notated in this case as `[closure@<anon>:3:21: 3:25]`) are not valid syntax either.\n\nInstead, this PR implements this version of the diagnostic (this example is for the same code featured above):\n```rust\nerror[E0121]: the type placeholder `_` is not allowed within types on item signatures\n --> <anon>:2:16\n  |\n2 | fn fn_ptr() -> _ { f }\n  |                ^\n  |                |\n  |                not allowed in type signatures\n  |                help: replace with the correct return type: `fn() -> i32`\n\nerror[E0121]: the type placeholder `_` is not allowed within types on item signatures\n --> <anon>:3:17\n  |\n3 | fn closure() -> _ { || 0 }\n  |                 ^ not allowed in type signatures\n  |\n  = help: consider using an `Fn`, `FnMut`, or `FnOnce` trait bound\n  = note: for more information on `Fn` traits and closure types, see https://doc.rust-lang.org/book/ch13-01-closures.html\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0121`.\n```\nAs can be seen in this diagnostic, the papercut for returning a function item is fixed by suggesting the usage of a function pointer as the return type. As for closures, it's suggested to use an `Fn`, `FnMut`, or `FnOnce` trait bound (with further reading on closures and `Fn` traits in *The Book* for beginners). I did not implement a suggestion to use `impl Fn() -> i32` syntax as that was out-of-scope for my abilities at the moment, therefore someone in the future may want to implement that. Also, it's possible to use either `impl Trait` syntax, generics, or generics with a `where` clause, and some users may not want to use `impl Trait` syntax for their own reasons.\n\nThis PR fixes #80179.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12ac31235151bbce00be0e0324904c3803e5083d", "html_url": "https://github.com/rust-lang/rust/commit/12ac31235151bbce00be0e0324904c3803e5083d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12ac31235151bbce00be0e0324904c3803e5083d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3c43ac244741221393b685423ce771e88e0ac7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c43ac244741221393b685423ce771e88e0ac7e", "html_url": "https://github.com/rust-lang/rust/commit/d3c43ac244741221393b685423ce771e88e0ac7e"}, {"sha": "5e6dc927f7a935874a08c2c3913f24295711d8f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e6dc927f7a935874a08c2c3913f24295711d8f2", "html_url": "https://github.com/rust-lang/rust/commit/5e6dc927f7a935874a08c2c3913f24295711d8f2"}], "stats": {"total": 75, "additions": 69, "deletions": 6}, "files": [{"sha": "caa03f79ca2c5a3bec277762e9a4b296d3247a09", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/12ac31235151bbce00be0e0324904c3803e5083d/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ac31235151bbce00be0e0324904c3803e5083d/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=12ac31235151bbce00be0e0324904c3803e5083d", "patch": "@@ -1544,12 +1544,27 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n                     let mut diag = bad_placeholder_type(tcx, visitor.0);\n                     let ret_ty = fn_sig.output();\n                     if ret_ty != tcx.ty_error() {\n-                        diag.span_suggestion(\n-                            ty.span,\n-                            \"replace with the correct return type\",\n-                            ret_ty.to_string(),\n-                            Applicability::MaybeIncorrect,\n-                        );\n+                        if !ret_ty.is_closure() {\n+                            let ret_ty_str = match ret_ty.kind() {\n+                                // Suggest a function pointer return type instead of a unique function definition\n+                                // (e.g. `fn() -> i32` instead of `fn() -> i32 { f }`, the latter of which is invalid\n+                                // syntax)\n+                                ty::FnDef(..) => ret_ty.fn_sig(tcx).to_string(),\n+                                _ => ret_ty.to_string(),\n+                            };\n+                            diag.span_suggestion(\n+                                ty.span,\n+                                \"replace with the correct return type\",\n+                                ret_ty_str,\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        } else {\n+                            // We're dealing with a closure, so we should suggest using `impl Fn` or trait bounds\n+                            // to prevent the user from getting a papercut while trying to use the unique closure\n+                            // syntax (e.g. `[closure@src/lib.rs:2:5: 2:9]`).\n+                            diag.help(\"consider using an `Fn`, `FnMut`, or `FnOnce` trait bound\");\n+                            diag.note(\"for more information on `Fn` traits and closure types, see https://doc.rust-lang.org/book/ch13-01-closures.html\");\n+                        }\n                     }\n                     diag.emit();\n                     ty::Binder::bind(fn_sig)"}, {"sha": "7609b1525cc90a286922949b75278d6d75e2aee8", "filename": "src/test/ui/fn/issue-80179.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/12ac31235151bbce00be0e0324904c3803e5083d/src%2Ftest%2Fui%2Ffn%2Fissue-80179.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ac31235151bbce00be0e0324904c3803e5083d/src%2Ftest%2Fui%2Ffn%2Fissue-80179.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fissue-80179.rs?ref=12ac31235151bbce00be0e0324904c3803e5083d", "patch": "@@ -0,0 +1,27 @@\n+// Functions with a type placeholder `_` as the return type should\n+// show a function pointer suggestion when given a function item\n+// and suggest how to return closures correctly from a function.\n+// This is a regression test of #80179\n+\n+fn returns_i32() -> i32 {\n+    0\n+}\n+\n+fn returns_fn_ptr() -> _ {\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures [E0121]\n+//~| NOTE not allowed in type signatures\n+//~| HELP replace with the correct return type\n+//~| SUGGESTION fn() -> i32\n+    returns_i32\n+}\n+\n+fn returns_closure() -> _ {\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures [E0121]\n+//~| NOTE not allowed in type signatures\n+//~| HELP consider using an `Fn`, `FnMut`, or `FnOnce` trait bound\n+//~| NOTE for more information on `Fn` traits and closure types, see\n+//        https://doc.rust-lang.org/book/ch13-01-closures.html\n+    || 0\n+}\n+\n+fn main() {}"}, {"sha": "63571e71b34f49415cbbe450c1123f219ef51658", "filename": "src/test/ui/fn/issue-80179.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/12ac31235151bbce00be0e0324904c3803e5083d/src%2Ftest%2Fui%2Ffn%2Fissue-80179.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12ac31235151bbce00be0e0324904c3803e5083d/src%2Ftest%2Fui%2Ffn%2Fissue-80179.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fissue-80179.stderr?ref=12ac31235151bbce00be0e0324904c3803e5083d", "patch": "@@ -0,0 +1,21 @@\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/issue-80179.rs:10:24\n+   |\n+LL | fn returns_fn_ptr() -> _ {\n+   |                        ^\n+   |                        |\n+   |                        not allowed in type signatures\n+   |                        help: replace with the correct return type: `fn() -> i32`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/issue-80179.rs:18:25\n+   |\n+LL | fn returns_closure() -> _ {\n+   |                         ^ not allowed in type signatures\n+   |\n+   = help: consider using an `Fn`, `FnMut`, or `FnOnce` trait bound\n+   = note: for more information on `Fn` traits and closure types, see https://doc.rust-lang.org/book/ch13-01-closures.html\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0121`."}]}