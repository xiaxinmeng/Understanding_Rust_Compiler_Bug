{"sha": "08df35537574d242f5f09b0f21eef14a5d0eb4ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ZGYzNTUzNzU3NGQyNDJmNWYwOWIwZjIxZWVmMTRhNWQwZWI0YWM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-22T13:17:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-22T13:17:31Z"}, "message": "More compact profiling display", "tree": {"sha": "bbb71537c3c45985d1e309f351ed598d9e21498e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbb71537c3c45985d1e309f351ed598d9e21498e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08df35537574d242f5f09b0f21eef14a5d0eb4ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08df35537574d242f5f09b0f21eef14a5d0eb4ac", "html_url": "https://github.com/rust-lang/rust/commit/08df35537574d242f5f09b0f21eef14a5d0eb4ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08df35537574d242f5f09b0f21eef14a5d0eb4ac/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6acef5a7c088bcc1cdf8a64e28b8f20ddf9dcde7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6acef5a7c088bcc1cdf8a64e28b8f20ddf9dcde7", "html_url": "https://github.com/rust-lang/rust/commit/6acef5a7c088bcc1cdf8a64e28b8f20ddf9dcde7"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "f260c40a321c6a6a201c0d93e383ee8595eff3a2", "filename": "crates/ra_prof/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/08df35537574d242f5f09b0f21eef14a5d0eb4ac/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08df35537574d242f5f09b0f21eef14a5d0eb4ac/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=08df35537574d242f5f09b0f21eef14a5d0eb4ac", "patch": "@@ -217,7 +217,7 @@ fn print(\n     total: Option<Duration>,\n ) {\n     let mut last = 0;\n-    let indent = repeat(\"    \").take(lvl + 1).collect::<String>();\n+    let indent = repeat(\"    \").take(lvl).collect::<String>();\n     // We output hierarchy for long calls, but sum up all short calls\n     let mut short = Vec::new();\n     let mut accounted_for = Duration::default();\n@@ -227,7 +227,7 @@ fn print(\n         }\n         accounted_for += duration;\n         if duration >= longer_than {\n-            writeln!(out, \"{} {:6}ms - {}\", indent, duration.as_millis(), msg)\n+            writeln!(out, \"{}{:5}ms - {}\", indent, duration.as_millis(), msg)\n                 .expect(\"printing profiling info to stdout\");\n \n             print(lvl + 1, &msgs[last..i], out, longer_than, Some(duration));\n@@ -245,14 +245,14 @@ fn print(\n             count += 1;\n             total_duration += *time;\n         });\n-        writeln!(out, \"{} {:6}ms - {} ({} calls)\", indent, total_duration.as_millis(), msg, count)\n+        writeln!(out, \"{}{:5}ms - {} ({} calls)\", indent, total_duration.as_millis(), msg, count)\n             .expect(\"printing profiling info to stdout\");\n     }\n \n     if let Some(total) = total {\n         if let Some(unaccounted) = total.checked_sub(accounted_for) {\n             if unaccounted >= longer_than && last > 0 {\n-                writeln!(out, \"{} {:6}ms - ???\", indent, unaccounted.as_millis())\n+                writeln!(out, \"{}{:5}ms - ???\", indent, unaccounted.as_millis())\n                     .expect(\"printing profiling info to stdout\");\n             }\n         }"}]}