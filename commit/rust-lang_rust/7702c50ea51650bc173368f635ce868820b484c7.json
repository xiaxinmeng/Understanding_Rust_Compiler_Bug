{"sha": "7702c50ea51650bc173368f635ce868820b484c7", "node_id": "C_kwDOAAsO6NoAKDc3MDJjNTBlYTUxNjUwYmMxNzMzNjhmNjM1Y2U4Njg4MjBiNDg0Yzc", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-05T05:12:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-05T05:12:57Z"}, "message": "Rollup merge of #98847 - RalfJung:box-is-special, r=oli-obk\n\nfix interpreter validity check on Box\n\nFollow-up to https://github.com/rust-lang/rust/pull/98554: avoid walking over parts of the value twice.\n\nAnd then move all that logic into the general visitor so not each visitor implementation has to deal with it...", "tree": {"sha": "c524dd02abefe04ca2c257b72592057793a1eb42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c524dd02abefe04ca2c257b72592057793a1eb42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7702c50ea51650bc173368f635ce868820b484c7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiw8hZCRBK7hj4Ov3rIwAARHMIAFiXml6cvm6h7vfwlriV+9+D\nrQYEVIUIZSYdhFxWYulGVYNuCEBqWqS2hAQPfjIEHgfUcPdlQmX7/1Vhn7r/FNdP\nbgTqMhA8MDZ4qJ4KA3jyj+l/nZJyJuJhnDJLVBowXeEkbjjvXuSFbHSpI1Xq0FwY\nOJqrx+KLLMxy3BZxXO0E+Mi6kASw+YFCKUFoFD3jq6mWPGEK0eiRZq/rHfSluDsh\nksZN92I7rEYsSUsTr8OtHiKyWN1gzmX3BEmcF41UQTTsPZMvLZs2Yrd2jBtKYFa+\nbTAynVRLpPyMLNvTf2nqx36eR+dWJ3FvEx3TWPCJHAyApydKy1hpFWQoiDufEnA=\n=otD7\n-----END PGP SIGNATURE-----\n", "payload": "tree c524dd02abefe04ca2c257b72592057793a1eb42\nparent 522d52cef72dac365354e12e01e9ffac6c541220\nparent d7edf66a5a92f66672bc9e84d58db170b3ea2d9a\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1656997977 +0530\ncommitter GitHub <noreply@github.com> 1656997977 +0530\n\nRollup merge of #98847 - RalfJung:box-is-special, r=oli-obk\n\nfix interpreter validity check on Box\n\nFollow-up to https://github.com/rust-lang/rust/pull/98554: avoid walking over parts of the value twice.\n\nAnd then move all that logic into the general visitor so not each visitor implementation has to deal with it...\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7702c50ea51650bc173368f635ce868820b484c7", "html_url": "https://github.com/rust-lang/rust/commit/7702c50ea51650bc173368f635ce868820b484c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7702c50ea51650bc173368f635ce868820b484c7/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "522d52cef72dac365354e12e01e9ffac6c541220", "url": "https://api.github.com/repos/rust-lang/rust/commits/522d52cef72dac365354e12e01e9ffac6c541220", "html_url": "https://github.com/rust-lang/rust/commit/522d52cef72dac365354e12e01e9ffac6c541220"}, {"sha": "d7edf66a5a92f66672bc9e84d58db170b3ea2d9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7edf66a5a92f66672bc9e84d58db170b3ea2d9a", "html_url": "https://github.com/rust-lang/rust/commit/d7edf66a5a92f66672bc9e84d58db170b3ea2d9a"}], "stats": {"total": 68, "additions": 56, "deletions": 12}, "files": [{"sha": "0bf78446e37fa0ff27573433cc9bac121a27337b", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7702c50ea51650bc173368f635ce868820b484c7/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7702c50ea51650bc173368f635ce868820b484c7/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=7702c50ea51650bc173368f635ce868820b484c7", "patch": "@@ -593,16 +593,6 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 self.check_safe_pointer(value, \"reference\")?;\n                 Ok(true)\n             }\n-            ty::Adt(def, ..) if def.is_box() => {\n-                let unique = self.ecx.operand_field(value, 0)?;\n-                let nonnull = self.ecx.operand_field(&unique, 0)?;\n-                let ptr = self.ecx.operand_field(&nonnull, 0)?;\n-                self.check_safe_pointer(&ptr, \"box\")?;\n-\n-                // Check other fields of Box\n-                self.walk_value(value)?;\n-                Ok(true)\n-            }\n             ty::FnPtr(_sig) => {\n                 let value = try_validation!(\n                     self.ecx.read_scalar(value).and_then(|v| v.check_init()),\n@@ -813,6 +803,12 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n         Ok(())\n     }\n \n+    #[inline]\n+    fn visit_box(&mut self, op: &OpTy<'tcx, M::PointerTag>) -> InterpResult<'tcx> {\n+        self.check_safe_pointer(op, \"box\")?;\n+        Ok(())\n+    }\n+\n     #[inline]\n     fn visit_value(&mut self, op: &OpTy<'tcx, M::PointerTag>) -> InterpResult<'tcx> {\n         trace!(\"visit_value: {:?}, {:?}\", *op, op.layout);\n@@ -821,8 +817,6 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n         if self.try_visit_primitive(op)? {\n             return Ok(());\n         }\n-        // Sanity check: `builtin_deref` does not know any pointers that are not primitive.\n-        assert!(op.layout.ty.builtin_deref(true).is_none());\n \n         // Special check preventing `UnsafeCell` in the inner part of constants\n         if let Some(def) = op.layout.ty.ty_adt_def() {"}, {"sha": "ded4c6a557a402e77849078c053e1819502ebab3", "filename": "compiler/rustc_const_eval/src/interpret/visitor.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7702c50ea51650bc173368f635ce868820b484c7/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7702c50ea51650bc173368f635ce868820b484c7/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvisitor.rs?ref=7702c50ea51650bc173368f635ce868820b484c7", "patch": "@@ -151,6 +151,14 @@ macro_rules! make_value_visitor {\n             {\n                 Ok(())\n             }\n+            /// Visits the given value as the pointer of a `Box`. There is nothing to recurse into.\n+            /// The type of `v` will be a raw pointer, but this is a field of `Box<T>` and the\n+            /// pointee type is the actual `T`.\n+            #[inline(always)]\n+            fn visit_box(&mut self, _v: &Self::V) -> InterpResult<'tcx>\n+            {\n+                Ok(())\n+            }\n             /// Visits this value as an aggregate, you are getting an iterator yielding\n             /// all the fields (still in an `InterpResult`, you have to do error handling yourself).\n             /// Recurses into the fields.\n@@ -221,6 +229,47 @@ macro_rules! make_value_visitor {\n                     // Slices do not need special handling here: they have `Array` field\n                     // placement with length 0, so we enter the `Array` case below which\n                     // indirectly uses the metadata to determine the actual length.\n+\n+                    // However, `Box`... let's talk about `Box`.\n+                    ty::Adt(def, ..) if def.is_box() => {\n+                        // `Box` is a hybrid primitive-library-defined type that one the one hand is\n+                        // a dereferenceable pointer, on the other hand has *basically arbitrary\n+                        // user-defined layout* since the user controls the 'allocator' field. So it\n+                        // cannot be treated like a normal pointer, since it does not fit into an\n+                        // `Immediate`. Yeah, it is quite terrible. But many visitors want to do\n+                        // something with \"all boxed pointers\", so we handle this mess for them.\n+                        //\n+                        // When we hit a `Box`, we do not do the usual `visit_aggregate`; instead,\n+                        // we (a) call `visit_box` on the pointer value, and (b) recurse on the\n+                        // allocator field. We also assert tons of things to ensure we do not miss\n+                        // any other fields.\n+\n+                        // `Box` has two fields: the pointer we care about, and the allocator.\n+                        assert_eq!(v.layout().fields.count(), 2, \"`Box` must have exactly 2 fields\");\n+                        let (unique_ptr, alloc) =\n+                            (v.project_field(self.ecx(), 0)?, v.project_field(self.ecx(), 1)?);\n+                        // Unfortunately there is some type junk in the way here: `unique_ptr` is a `Unique`...\n+                        // (which means another 2 fields, the second of which is a `PhantomData`)\n+                        assert_eq!(unique_ptr.layout().fields.count(), 2);\n+                        let (nonnull_ptr, phantom) = (\n+                            unique_ptr.project_field(self.ecx(), 0)?,\n+                            unique_ptr.project_field(self.ecx(), 1)?,\n+                        );\n+                        assert!(\n+                            phantom.layout().ty.ty_adt_def().is_some_and(|adt| adt.is_phantom_data()),\n+                            \"2nd field of `Unique` should be PhantomData but is {:?}\",\n+                            phantom.layout().ty,\n+                        );\n+                        // ... that contains a `NonNull`... (gladly, only a single field here)\n+                        assert_eq!(nonnull_ptr.layout().fields.count(), 1);\n+                        let raw_ptr = nonnull_ptr.project_field(self.ecx(), 0)?; // the actual raw ptr\n+                        // ... whose only field finally is a raw ptr we can dereference.\n+                        self.visit_box(&raw_ptr)?;\n+\n+                        // The second `Box` field is the allocator, which we recursively check for validity\n+                        // like in regular structs.\n+                        self.visit_field(v, 1, &alloc)?;\n+                    }\n                     _ => {},\n                 };\n "}, {"sha": "2d42ae236ad9d99344b5f4a55ff7c0c85699f992", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7702c50ea51650bc173368f635ce868820b484c7/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7702c50ea51650bc173368f635ce868820b484c7/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=7702c50ea51650bc173368f635ce868820b484c7", "patch": "@@ -21,6 +21,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(trusted_step)]\n #![feature(try_blocks)]\n #![feature(yeet_expr)]\n+#![feature(is_some_with)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n "}]}