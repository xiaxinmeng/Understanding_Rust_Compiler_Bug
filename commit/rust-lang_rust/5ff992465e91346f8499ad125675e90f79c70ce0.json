{"sha": "5ff992465e91346f8499ad125675e90f79c70ce0", "node_id": "C_kwDOAAsO6NoAKDVmZjk5MjQ2NWU5MTM0NmY4NDk5YWQxMjU2NzVlOTBmNzljNzBjZTA", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-05T22:03:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-05T22:03:23Z"}, "message": "Merge #10447\n\n10447: Add enum variant references CodeLens. r=Veykril a=ericsampson\n\n\n\nCo-authored-by: Eric Sampson <esampson@eaze.com>", "tree": {"sha": "8a42f85f1349476387322391bc14fdeae9ceecac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a42f85f1349476387322391bc14fdeae9ceecac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ff992465e91346f8499ad125675e90f79c70ce0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhXMurCRBK7hj4Ov3rIwAAHW4IAGyaW4I57Ee5OeaB6VvWT/40\njE3GQKgx6fs0m56D6xtA6DO4SSSgYN22sTqawQfhRoEZGN3L70sqQ0A70RT+z8FI\ntqQBeQypTcG8l22vEcP73KFE6bVkt87Oo5aPzUZ0vAuAF/AiwfE8r2MSsU9whrin\nM4E80f5aFVz/ALR1mbaUb0EOFUriJN1SD/22afXAVwPr6Losnwl/eSgrMl85WscB\naKKlFiValXj0HqIYXzxpLOOe8RvNn5myxkTXMWxyGfQsLAEoM2xYNMEC5wFc660Y\nfPxSq/FTnOmSKN7YbvJeUcp9zNKpXp2R57NEKPbpu+aFHKX1vG5srmzkdNgBYXY=\n=ov34\n-----END PGP SIGNATURE-----\n", "payload": "tree 8a42f85f1349476387322391bc14fdeae9ceecac\nparent c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab\nparent 6d05b07f7d64e2dd04bd8704b597d3aaf143964f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1633471403 +0000\ncommitter GitHub <noreply@github.com> 1633471403 +0000\n\nMerge #10447\n\n10447: Add enum variant references CodeLens. r=Veykril a=ericsampson\n\n\n\nCo-authored-by: Eric Sampson <esampson@eaze.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ff992465e91346f8499ad125675e90f79c70ce0", "html_url": "https://github.com/rust-lang/rust/commit/5ff992465e91346f8499ad125675e90f79c70ce0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ff992465e91346f8499ad125675e90f79c70ce0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab", "url": "https://api.github.com/repos/rust-lang/rust/commits/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab", "html_url": "https://github.com/rust-lang/rust/commit/c409cf0e26e035c5c1d94a8ec0da77ec0e1d8bab"}, {"sha": "6d05b07f7d64e2dd04bd8704b597d3aaf143964f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d05b07f7d64e2dd04bd8704b597d3aaf143964f", "html_url": "https://github.com/rust-lang/rust/commit/6d05b07f7d64e2dd04bd8704b597d3aaf143964f"}], "stats": {"total": 74, "additions": 61, "deletions": 13}, "files": [{"sha": "12c6852ea09ca7c1aae59b32dfeec5e96b648a7e", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5ff992465e91346f8499ad125675e90f79c70ce0/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff992465e91346f8499ad125675e90f79c70ce0/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=5ff992465e91346f8499ad125675e90f79c70ce0", "patch": "@@ -40,6 +40,7 @@ pub struct AnnotationConfig {\n     pub annotate_impls: bool,\n     pub annotate_references: bool,\n     pub annotate_method_references: bool,\n+    pub annotate_enum_variant_references: bool,\n }\n \n pub(crate) fn annotations(\n@@ -63,18 +64,33 @@ pub(crate) fn annotations(\n \n     visit_file_defs(&Semantics::new(db), file_id, &mut |def| match def {\n         Either::Left(def) => {\n-            let range = match def {\n+            let (range, ranges_enum_variants) = match def {\n                 hir::ModuleDef::Const(konst) => {\n-                    konst.source(db).and_then(|node| name_range(&node, file_id))\n+                    (konst.source(db).and_then(|node| name_range(&node, file_id)), vec![])\n                 }\n                 hir::ModuleDef::Trait(trait_) => {\n-                    trait_.source(db).and_then(|node| name_range(&node, file_id))\n+                    (trait_.source(db).and_then(|node| name_range(&node, file_id)), vec![])\n                 }\n-                hir::ModuleDef::Adt(adt) => {\n-                    adt.source(db).and_then(|node| name_range(&node, file_id))\n-                }\n-                _ => None,\n+                hir::ModuleDef::Adt(adt) => match adt {\n+                    hir::Adt::Enum(enum_) => (\n+                        enum_.source(db).and_then(|node| name_range(&node, file_id)),\n+                        if config.annotate_enum_variant_references {\n+                            enum_\n+                                .variants(db)\n+                                .into_iter()\n+                                .map(|variant| {\n+                                    variant.source(db).and_then(|node| name_range(&node, file_id))\n+                                })\n+                                .collect()\n+                        } else {\n+                            vec![]\n+                        },\n+                    ),\n+                    _ => (adt.source(db).and_then(|node| name_range(&node, file_id)), vec![]),\n+                },\n+                _ => (None, vec![]),\n             };\n+\n             let (range, offset) = match range {\n                 Some(range) => (range, range.start()),\n                 None => return,\n@@ -99,6 +115,20 @@ pub(crate) fn annotations(\n                 });\n             }\n \n+            if config.annotate_enum_variant_references {\n+                for range_enum_variant in\n+                    ranges_enum_variants.into_iter().filter_map(std::convert::identity)\n+                {\n+                    annotations.push(Annotation {\n+                        range: range_enum_variant,\n+                        kind: AnnotationKind::HasReferences {\n+                            position: FilePosition { file_id, offset: range_enum_variant.start() },\n+                            data: None,\n+                        },\n+                    });\n+                }\n+            }\n+\n             fn name_range<T: HasName>(node: &InFile<T>, file_id: FileId) -> Option<TextRange> {\n                 if node.file_id == file_id.into() {\n                     node.value.name().map(|it| it.syntax().text_range())\n@@ -173,6 +203,7 @@ mod tests {\n                     annotate_impls: true,\n                     annotate_references: true,\n                     annotate_method_references: true,\n+                    annotate_enum_variant_references: true,\n                 },\n                 file_id,\n             )"}, {"sha": "b51234c1532cd44a8e4a2c352af1767461dcd26b", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5ff992465e91346f8499ad125675e90f79c70ce0/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff992465e91346f8499ad125675e90f79c70ce0/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=5ff992465e91346f8499ad125675e90f79c70ce0", "patch": "@@ -227,9 +227,12 @@ config_data! {\n         /// Whether to show `Method References` lens. Only applies when\n         /// `#rust-analyzer.lens.enable#` is set.\n         lens_methodReferences: bool = \"false\",\n-        /// Whether to show `References` lens. Only applies when\n-        /// `#rust-analyzer.lens.enable#` is set.\n+        /// Whether to show `References` lens for Struct, Enum, Union and Trait.\n+        /// Only applies when `#rust-analyzer.lens.enable#` is set.\n         lens_references: bool = \"false\",\n+        /// Whether to show `References` lens for Enum Variants.\n+        /// Only applies when `#rust-analyzer.lens.enable#` is set.\n+        lens_enumVariantReferences: bool = \"false\",\n         /// Internal config: use custom client-side commands even when the\n         /// client doesn't set the corresponding capability.\n         lens_forceCustomCommands: bool = \"true\",\n@@ -326,6 +329,7 @@ pub struct LensConfig {\n     pub implementations: bool,\n     pub method_refs: bool,\n     pub refs: bool, // for Struct, Enum, Union and Trait\n+    pub enum_variant_refs: bool,\n }\n \n impl LensConfig {\n@@ -342,7 +346,7 @@ impl LensConfig {\n     }\n \n     pub fn references(&self) -> bool {\n-        self.method_refs || self.refs\n+        self.method_refs || self.refs || self.enum_variant_refs\n     }\n }\n \n@@ -832,6 +836,7 @@ impl Config {\n             implementations: self.data.lens_enable && self.data.lens_implementations,\n             method_refs: self.data.lens_enable && self.data.lens_methodReferences,\n             refs: self.data.lens_enable && self.data.lens_references,\n+            enum_variant_refs: self.data.lens_enable && self.data.lens_enumVariantReferences,\n         }\n     }\n     pub fn hover_actions(&self) -> HoverActionsConfig {"}, {"sha": "c3583df713dfc886781b4700317a174fe9a320b7", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ff992465e91346f8499ad125675e90f79c70ce0/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff992465e91346f8499ad125675e90f79c70ce0/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=5ff992465e91346f8499ad125675e90f79c70ce0", "patch": "@@ -1135,6 +1135,7 @@ pub(crate) fn handle_code_lens(\n             annotate_impls: lens_config.implementations,\n             annotate_references: lens_config.refs,\n             annotate_method_references: lens_config.method_refs,\n+            annotate_enum_variant_references: lens_config.enum_variant_refs,\n         },\n         file_id,\n     )?;"}, {"sha": "7955bcfba903eb74f6628c6e4269c54c6e9624bf", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5ff992465e91346f8499ad125675e90f79c70ce0/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/5ff992465e91346f8499ad125675e90f79c70ce0/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=5ff992465e91346f8499ad125675e90f79c70ce0", "patch": "@@ -360,8 +360,14 @@ Whether to show `Method References` lens. Only applies when\n [[rust-analyzer.lens.references]]rust-analyzer.lens.references (default: `false`)::\n +\n --\n-Whether to show `References` lens. Only applies when\n-`#rust-analyzer.lens.enable#` is set.\n+Whether to show `References` lens for Struct, Enum, Union and Trait.\n+Only applies when `#rust-analyzer.lens.enable#` is set.\n+--\n+[[rust-analyzer.lens.enumVariantReferences]]rust-analyzer.lens.enumVariantReferences (default: `false`)::\n++\n+--\n+Whether to show `References` lens for Enum Variants.\n+Only applies when `#rust-analyzer.lens.enable#` is set.\n --\n [[rust-analyzer.lens.forceCustomCommands]]rust-analyzer.lens.forceCustomCommands (default: `true`)::\n +"}, {"sha": "b62060c398979d71efff743d37548d86b66a1fb2", "filename": "editors/code/package.json", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5ff992465e91346f8499ad125675e90f79c70ce0/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/5ff992465e91346f8499ad125675e90f79c70ce0/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=5ff992465e91346f8499ad125675e90f79c70ce0", "patch": "@@ -798,7 +798,12 @@\n                     \"type\": \"boolean\"\n                 },\n                 \"rust-analyzer.lens.references\": {\n-                    \"markdownDescription\": \"Whether to show `References` lens. Only applies when\\n`#rust-analyzer.lens.enable#` is set.\",\n+                    \"markdownDescription\": \"Whether to show `References` lens for Struct, Enum, Union and Trait.\\nOnly applies when `#rust-analyzer.lens.enable#` is set.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.lens.enumVariantReferences\": {\n+                    \"markdownDescription\": \"Whether to show `References` lens for Enum Variants.\\nOnly applies when `#rust-analyzer.lens.enable#` is set.\",\n                     \"default\": false,\n                     \"type\": \"boolean\"\n                 },"}]}