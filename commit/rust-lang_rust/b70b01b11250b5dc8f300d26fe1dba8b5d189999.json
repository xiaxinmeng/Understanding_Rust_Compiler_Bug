{"sha": "b70b01b11250b5dc8f300d26fe1dba8b5d189999", "node_id": "C_kwDOAAsO6NoAKGI3MGIwMWIxMTI1MGI1ZGM4ZjMwMGQyNmZlMWRiYThiNWQxODk5OTk", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-04-22T19:11:38Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-04-22T19:11:38Z"}, "message": "Merge commit 'f2cdd4a78d89c009342197cf5844a21f8aa813df' into sync_cg_clif-2022-04-22", "tree": {"sha": "10da27b4f8373f30411e77667b6056fab48239c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10da27b4f8373f30411e77667b6056fab48239c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b70b01b11250b5dc8f300d26fe1dba8b5d189999", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b70b01b11250b5dc8f300d26fe1dba8b5d189999", "html_url": "https://github.com/rust-lang/rust/commit/b70b01b11250b5dc8f300d26fe1dba8b5d189999", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b70b01b11250b5dc8f300d26fe1dba8b5d189999/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41ef7678061dde625bf273ab6b036aebd7153a43", "url": "https://api.github.com/repos/rust-lang/rust/commits/41ef7678061dde625bf273ab6b036aebd7153a43", "html_url": "https://github.com/rust-lang/rust/commit/41ef7678061dde625bf273ab6b036aebd7153a43"}, {"sha": "f2cdd4a78d89c009342197cf5844a21f8aa813df", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2cdd4a78d89c009342197cf5844a21f8aa813df", "html_url": "https://github.com/rust-lang/rust/commit/f2cdd4a78d89c009342197cf5844a21f8aa813df"}], "stats": {"total": 331, "additions": 189, "deletions": 142}, "files": [{"sha": "7b8e43b639f993f97aec41c1da60d8775fdb613a", "filename": "compiler/rustc_codegen_cranelift/Cargo.lock", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FCargo.lock?ref=b70b01b11250b5dc8f300d26fe1dba8b5d189999", "patch": "@@ -33,18 +33,18 @@ checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n \n [[package]]\n name = \"cranelift-bforest\"\n-version = \"0.82.1\"\n+version = \"0.83.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d16922317bd7dd104d509a373887822caa0242fc1def00de66abb538db221db4\"\n+checksum = \"ed44413e7e2fe3260d0ed73e6956ab188b69c10ee92b892e401e0f4f6808c68b\"\n dependencies = [\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen\"\n-version = \"0.82.1\"\n+version = \"0.83.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8b80bf40380256307b68a3dcbe1b91cac92a533e212b5b635abc3e4525781a0a\"\n+checksum = \"0b5d83f0f26bf213f971f45589d17e5b65e4861f9ed22392b0cbb6eaa5bd329c\"\n dependencies = [\n  \"cranelift-bforest\",\n  \"cranelift-codegen-meta\",\n@@ -59,30 +59,30 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-codegen-meta\"\n-version = \"0.82.1\"\n+version = \"0.83.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"703d0ed7d3bc6c7a814ca12858175bf4e93167a3584127858c686e4b5dd6e432\"\n+checksum = \"6800dc386177df6ecc5a32680607ed8ba1fa0d31a2a59c8c61fbf44826b8191d\"\n dependencies = [\n  \"cranelift-codegen-shared\",\n ]\n \n [[package]]\n name = \"cranelift-codegen-shared\"\n-version = \"0.82.1\"\n+version = \"0.83.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"80f52311e1c90de12dcf8c4b9999c6ebfd1ed360373e88c357160936844511f6\"\n+checksum = \"c961f85070985ebc8fcdb81b838a5cf842294d1e6ed4852446161c7e246fd455\"\n \n [[package]]\n name = \"cranelift-entity\"\n-version = \"0.82.1\"\n+version = \"0.83.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"66bc82ef522c1f643baf7d4d40b7c52643ee4549d8960b0e6a047daacb83f897\"\n+checksum = \"2347b2b8d1d5429213668f2a8e36c85ee3c73984a2f6a79007e365d3e575e7ed\"\n \n [[package]]\n name = \"cranelift-frontend\"\n-version = \"0.82.1\"\n+version = \"0.83.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3cc35e4251864b17515845ba47447bca88fec9ca1a4186b19fe42526e36140e8\"\n+checksum = \"4cbcdbf7bed29e363568b778649b69dabc3d727256d5d25236096ef693757654\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"log\",\n@@ -92,9 +92,9 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-jit\"\n-version = \"0.82.1\"\n+version = \"0.83.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"93c66d594ad3bfe4e58b1fbd8d17877a7c6564a5f2d6f78cbbf4b0182af1927f\"\n+checksum = \"7c769d4e0d76f59c8b2a3bf0477d89ee149bb0731b53fbb245ee081d49063095\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -110,19 +110,19 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-module\"\n-version = \"0.82.1\"\n+version = \"0.83.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bf356697c40232aa09e1e3fb8a350ee894e849ccecc4eac56ff0570a4575c325\"\n+checksum = \"0ab57d399a2401074bb0cc40b3031e420f3d66d46ec0cf21eeae53ac04bd73e2\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n ]\n \n [[package]]\n name = \"cranelift-native\"\n-version = \"0.82.1\"\n+version = \"0.83.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b882b2251c9845d509d92aebfdb6c8bb3b3b48e207ac951f21fbd20cfe7f90b3\"\n+checksum = \"8f4cdf93552e5ceb2e3c042829ebb4de4378492705f769eadc6a7c6c5251624c\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"libc\",\n@@ -131,9 +131,9 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-object\"\n-version = \"0.82.1\"\n+version = \"0.83.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2d3f1a88e654e567d2591169239ed157ab290811a729a6468f53999c01001263\"\n+checksum = \"cf8e65f4839c26e6237fc0744911d79b0a2ac5e76b4e4eebd14db2b8d849fd31\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\","}, {"sha": "74f50808a980a7de298a943e74ac3c4301f07473", "filename": "compiler/rustc_codegen_cranelift/Cargo.toml", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FCargo.toml?ref=b70b01b11250b5dc8f300d26fe1dba8b5d189999", "patch": "@@ -8,12 +8,12 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n # These have to be in sync with each other\n-cranelift-codegen = { version = \"0.82.1\", features = [\"unwind\", \"all-arch\"] }\n-cranelift-frontend = \"0.82.1\"\n-cranelift-module = \"0.82.1\"\n-cranelift-native = \"0.82.1\"\n-cranelift-jit = { version = \"0.82.1\", optional = true }\n-cranelift-object = \"0.82.1\"\n+cranelift-codegen = { version = \"0.83.0\", features = [\"unwind\", \"all-arch\"] }\n+cranelift-frontend = \"0.83.0\"\n+cranelift-module = \"0.83.0\"\n+cranelift-native = \"0.83.0\"\n+cranelift-jit = { version = \"0.83.0\", optional = true }\n+cranelift-object = \"0.83.0\"\n target-lexicon = \"0.12.0\"\n gimli = { version = \"0.26.0\", default-features = false, features = [\"write\"]}\n object = { version = \"0.27.0\", default-features = false, features = [\"std\", \"read_core\", \"write\", \"archive\", \"coff\", \"elf\", \"macho\", \"pe\"] }"}, {"sha": "51ba0dbfcc7920e2868531cc897bd70c48a9909b", "filename": "compiler/rustc_codegen_cranelift/build_sysroot/Cargo.lock", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.lock?ref=b70b01b11250b5dc8f300d26fe1dba8b5d189999", "patch": "@@ -56,9 +56,9 @@ dependencies = [\n \n [[package]]\n name = \"compiler_builtins\"\n-version = \"0.1.71\"\n+version = \"0.1.72\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"163437f05ca8f29d7e9128ea728dedf5eb620e445fbca273641d3a3050305f23\"\n+checksum = \"afdbb35d279238cf77f0c9e8d90ad50d6c7bff476ab342baafa29440f0f10bff\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n@@ -134,9 +134,9 @@ dependencies = [\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.121\"\n+version = \"0.2.124\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"efaa7b300f3b5fe8eb6bf21ce3895e1751d9665086af2d64b42f19701015ff4f\"\n+checksum = \"21a41fed9d98f27ab1c6d161da622a4fa35e8a54a8adc24bbf3ddd0ef70b0e50\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n@@ -203,6 +203,7 @@ dependencies = [\n name = \"proc_macro\"\n version = \"0.0.0\"\n dependencies = [\n+ \"core\",\n  \"std\",\n ]\n "}, {"sha": "b8f901d1ba176274185f3f6b6ea0ce427110c673", "filename": "compiler/rustc_codegen_cranelift/example/float-minmax-pass.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fexample%2Ffloat-minmax-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fexample%2Ffloat-minmax-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Ffloat-minmax-pass.rs?ref=b70b01b11250b5dc8f300d26fe1dba8b5d189999", "patch": "@@ -0,0 +1,53 @@\n+// Copied from https://github.com/rust-lang/rust/blob/3fe3b89cd57229343eeca753fdd8c63d9b03c65c/src/test/ui/simd/intrinsic/float-minmax-pass.rs\n+// run-pass\n+// ignore-emscripten\n+\n+// Test that the simd_f{min,max} intrinsics produce the correct results.\n+\n+#![feature(repr_simd, platform_intrinsics)]\n+#![allow(non_camel_case_types)]\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+struct f32x4(pub f32, pub f32, pub f32, pub f32);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_fmin<T>(x: T, y: T) -> T;\n+    fn simd_fmax<T>(x: T, y: T) -> T;\n+}\n+\n+fn main() {\n+    let x = f32x4(1.0, 2.0, 3.0, 4.0);\n+    let y = f32x4(2.0, 1.0, 4.0, 3.0);\n+\n+    #[cfg(not(any(target_arch = \"mips\", target_arch = \"mips64\")))]\n+    let nan = f32::NAN;\n+    // MIPS hardware treats f32::NAN as SNAN. Clear the signaling bit.\n+    // See https://github.com/rust-lang/rust/issues/52746.\n+    #[cfg(any(target_arch = \"mips\", target_arch = \"mips64\"))]\n+    let nan = f32::from_bits(f32::NAN.to_bits() - 1);\n+\n+    let n = f32x4(nan, nan, nan, nan);\n+\n+    unsafe {\n+        let min0 = simd_fmin(x, y);\n+        let min1 = simd_fmin(y, x);\n+        assert_eq!(min0, min1);\n+        let e = f32x4(1.0, 1.0, 3.0, 3.0);\n+        assert_eq!(min0, e);\n+        let minn = simd_fmin(x, n);\n+        assert_eq!(minn, x);\n+        let minn = simd_fmin(y, n);\n+        assert_eq!(minn, y);\n+\n+        let max0 = simd_fmax(x, y);\n+        let max1 = simd_fmax(y, x);\n+        assert_eq!(max0, max1);\n+        let e = f32x4(2.0, 2.0, 4.0, 4.0);\n+        assert_eq!(max0, e);\n+        let maxn = simd_fmax(x, n);\n+        assert_eq!(maxn, x);\n+        let maxn = simd_fmax(y, n);\n+        assert_eq!(maxn, y);\n+    }\n+}"}, {"sha": "8da705e0cb06dbf7f0232bdad8e9ab6f899636d8", "filename": "compiler/rustc_codegen_cranelift/example/mini_core.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core.rs?ref=b70b01b11250b5dc8f300d26fe1dba8b5d189999", "patch": "@@ -16,6 +16,9 @@\n #[lang = \"sized\"]\n pub trait Sized {}\n \n+#[lang = \"destruct\"]\n+pub trait Destruct {}\n+\n #[lang = \"unsize\"]\n pub trait Unsize<T: ?Sized> {}\n \n@@ -491,13 +494,20 @@ pub trait Deref {\n     fn deref(&self) -> &Self::Target;\n }\n \n+#[repr(transparent)]\n+#[rustc_layout_scalar_valid_range_start(1)]\n+#[rustc_nonnull_optimization_guaranteed]\n+pub struct NonNull<T: ?Sized>(pub *mut T);\n+\n+impl<T: ?Sized, U: ?Sized> CoerceUnsized<NonNull<U>> for NonNull<T> where T: Unsize<U> {}\n+impl<T: ?Sized, U: ?Sized> DispatchFromDyn<NonNull<U>> for NonNull<T> where T: Unsize<U> {}\n+\n pub struct Unique<T: ?Sized> {\n-    pub pointer: *const T,\n+    pub pointer: NonNull<T>,\n     pub _marker: PhantomData<T>,\n }\n \n impl<T: ?Sized, U: ?Sized> CoerceUnsized<Unique<U>> for Unique<T> where T: Unsize<U> {}\n-\n impl<T: ?Sized, U: ?Sized> DispatchFromDyn<Unique<U>> for Unique<T> where T: Unsize<U> {}\n \n #[lang = \"owned_box\"]\n@@ -526,7 +536,7 @@ unsafe fn allocate(size: usize, _align: usize) -> *mut u8 {\n \n #[lang = \"box_free\"]\n unsafe fn box_free<T: ?Sized>(ptr: Unique<T>, alloc: ()) {\n-    libc::free(ptr.pointer as *mut u8);\n+    libc::free(ptr.pointer.0 as *mut u8);\n }\n \n #[lang = \"drop\"]"}, {"sha": "85ca908d0a266f2e1012ea4d166d1068d7e538dc", "filename": "compiler/rustc_codegen_cranelift/example/mini_core_hello_world.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs?ref=b70b01b11250b5dc8f300d26fe1dba8b5d189999", "patch": "@@ -122,7 +122,7 @@ fn call_return_u128_pair() {\n #[allow(unreachable_code)] // FIXME false positive\n fn main() {\n     take_unique(Unique {\n-        pointer: 0 as *const (),\n+        pointer: unsafe { NonNull(1 as *mut ()) },\n         _marker: PhantomData,\n     });\n     take_f32(0.1);\n@@ -173,7 +173,7 @@ fn main() {\n         assert!(intrinsics::needs_drop::<NoisyDrop>());\n \n         Unique {\n-            pointer: 0 as *const &str,\n+            pointer: NonNull(1 as *mut &str),\n             _marker: PhantomData,\n         } as Unique<dyn SomeTrait>;\n "}, {"sha": "0a2bce2621d963f1e6d68e173c5f65522c108a89", "filename": "compiler/rustc_codegen_cranelift/example/std_example.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fexample%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fexample%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fstd_example.rs?ref=b70b01b11250b5dc8f300d26fe1dba8b5d189999", "patch": "@@ -1,7 +1,8 @@\n-#![feature(core_intrinsics, generators, generator_trait, is_sorted)]\n+#![feature(core_intrinsics, generators, generator_trait, is_sorted, bench_black_box)]\n \n #[cfg(target_arch = \"x86_64\")]\n use std::arch::x86_64::*;\n+use std::hint::black_box;\n use std::io::Write;\n use std::ops::Generator;\n \n@@ -86,6 +87,9 @@ fn main() {\n     assert_eq!(houndred_f64 as i128, 100);\n     assert_eq!(1u128.rotate_left(2), 4);\n \n+    assert_eq!(black_box(f32::NAN) as i128, 0);\n+    assert_eq!(black_box(f32::NAN) as u128, 0);\n+\n     // Test signed 128bit comparing\n     let max = usize::MAX as i128;\n     if 100i128 < 0i128 || 100i128 > max {"}, {"sha": "54e13b090abda43a8d66147207b16c09c27dae64", "filename": "compiler/rustc_codegen_cranelift/patches/0001-portable-simd-Disable-unsupported-tests.patch", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0001-portable-simd-Disable-unsupported-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0001-portable-simd-Disable-unsupported-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fpatches%2F0001-portable-simd-Disable-unsupported-tests.patch?ref=b70b01b11250b5dc8f300d26fe1dba8b5d189999", "patch": "@@ -102,42 +102,6 @@ index 6a8ecd3..68fcb49 100644\n          }\n      }\n  }\n-diff --git a/crates/core_simd/tests/ops_macros.rs b/crates/core_simd/tests/ops_macros.rs\n-index 31b7ee2..bd04b3c 100644\n---- a/crates/core_simd/tests/ops_macros.rs\n-+++ b/crates/core_simd/tests/ops_macros.rs\n-@@ -567,6 +567,7 @@ macro_rules! impl_float_tests {\n-                     });\n-                 }\n- \n-+                /*\n-                 fn horizontal_max<const LANES: usize>() {\n-                     test_helpers::test_1(&|x| {\n-                         let vmax = Vector::<LANES>::from_array(x).horizontal_max();\n-@@ -590,6 +591,7 @@ macro_rules! impl_float_tests {\n-                         Ok(())\n-                     });\n-                 }\n-+                */\n-             }\n- \n-             #[cfg(feature = \"std\")]\n-@@ -604,6 +606,7 @@ macro_rules! impl_float_tests {\n-                         )\n-                     }\n- \n-+                    /*\n-                     fn mul_add<const LANES: usize>() {\n-                         test_helpers::test_ternary_elementwise(\n-                             &Vector::<LANES>::mul_add,\n-@@ -611,6 +614,7 @@ macro_rules! impl_float_tests {\n-                             &|_, _, _| true,\n-                         )\n-                     }\n-+                    */\n-                 }\n-             }\n-         }\n -- \n 2.26.2.7.g19db9cfb68\n "}, {"sha": "966097c248b6f6c98d6d250a369f5df0b8d797c9", "filename": "compiler/rustc_codegen_cranelift/rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Frust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Frust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Frust-toolchain?ref=b70b01b11250b5dc8f300d26fe1dba8b5d189999", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-03-19\"\n+channel = \"nightly-2022-04-21\"\n components = [\"rust-src\", \"rustc-dev\", \"llvm-tools-preview\"]"}, {"sha": "f4e863e5494b51f34154bfc0730cd9758e73b999", "filename": "compiler/rustc_codegen_cranelift/scripts/filter_profile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ffilter_profile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ffilter_profile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ffilter_profile.rs?ref=b70b01b11250b5dc8f300d26fe1dba8b5d189999", "patch": "@@ -1,4 +1,4 @@\n-#!/bin/bash\n+#!/usr/bin/env bash\n #![forbid(unsafe_code)]/* This line is ignored by bash\n # This block is ignored by rustc\n pushd $(dirname \"$0\")/../"}, {"sha": "cabbaaa8922517351dc70eeb3bb0730f752b0c17", "filename": "compiler/rustc_codegen_cranelift/scripts/setup_rust_fork.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fsetup_rust_fork.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fsetup_rust_fork.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fsetup_rust_fork.sh?ref=b70b01b11250b5dc8f300d26fe1dba8b5d189999", "patch": "@@ -1,4 +1,4 @@\n-#!/bin/bash\n+#!/usr/bin/env bash\n set -e\n \n ./y.rs build --no-unstable-features"}, {"sha": "4cf24c02235df731a81e36def7900d4c9e390afd", "filename": "compiler/rustc_codegen_cranelift/scripts/test_rustc_tests.sh", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_rustc_tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_rustc_tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_rustc_tests.sh?ref=b70b01b11250b5dc8f300d26fe1dba8b5d189999", "patch": "@@ -1,4 +1,4 @@\n-#!/bin/bash\n+#!/usr/bin/env bash\n set -e\n \n cd $(dirname \"$0\")/../\n@@ -11,7 +11,7 @@ pushd rust\n command -v rg >/dev/null 2>&1 || cargo install ripgrep\n \n rm -r src/test/ui/{extern/,unsized-locals/,lto/,linkage*} || true\n-for test in $(rg --files-with-matches \"asm!|lto|// needs-asm-support|// needs-unwind\" src/test/{ui,incremental}); do\n+for test in $(rg --files-with-matches \"lto|// needs-asm-support|// needs-unwind\" src/test/{ui,incremental}); do\n   rm $test\n done\n \n@@ -25,14 +25,8 @@ git checkout -- src/test/ui/issues/auxiliary/issue-3136-a.rs # contains //~ERROR\n # ================\n \n # requires stack unwinding\n-rm src/test/ui/backtrace.rs\n-rm src/test/ui/process/multi-panic.rs\n-rm src/test/ui/numbers-arithmetic/issue-8460.rs\n rm src/test/incremental/change_crate_dep_kind.rs\n rm src/test/incremental/issue-80691-bad-eval-cache.rs # -Cpanic=abort causes abort instead of exit(101)\n-rm src/test/ui/panic-while-printing.rs\n-rm src/test/ui/test-attrs/test-panic-while-printing.rs\n-rm src/test/ui/test-attrs/test-type.rs\n \n # requires compiling with -Cpanic=unwind\n rm src/test/ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs # \"Cannot run dynamic test fn out-of-process\"\n@@ -85,8 +79,6 @@ rm src/test/ui/abi/stack-protector.rs # requires stack protector support\n \n # giving different but possibly correct results\n # =============================================\n-rm src/test/ui/numbers-arithmetic/saturating-float-casts.rs # intrinsic gives different but valid result\n-rm src/test/ui/simd/intrinsic/float-minmax-pass.rs # same\n rm src/test/ui/mir/mir_misc_casts.rs # depends on deduplication of constants\n rm src/test/ui/mir/mir_raw_fat_ptr.rs # same\n rm src/test/ui/consts/issue-33537.rs # same\n@@ -112,9 +104,14 @@ rm src/test/ui/mir/ssa-analysis-regression-50041.rs # produces ICE\n \n rm src/test/ui/simd/intrinsic/generic-reduction-pass.rs # simd_reduce_add_unordered doesn't accept an accumulator for integer vectors\n \n+rm src/test/ui/rfc-2091-track-caller/intrinsic-wrapper.rs # wrong result from `Location::caller()`\n+\n # bugs in the test suite\n # ======================\n-rm src/test/ui/unsafe/union.rs # has UB caught by cg_clif. see rust-lang/rust#95075\n+rm src/test/ui/backtrace.rs # TODO warning\n+rm src/test/ui/empty_global_asm.rs # TODO add needs-asm-support\n+rm src/test/ui/simple_global_asm.rs # TODO add needs-asm-support\n+rm src/test/ui/test-attrs/test-type.rs # TODO panic message on stderr. correct stdout\n \n echo \"[TEST] rustc test suite\"\n RUST_TEST_NOCAPTURE=1 COMPILETEST_FORCE_STAGE0=1 ./x.py test --stage 0 src/test/{codegen-units,run-make,run-pass-valgrind,ui,incremental}"}, {"sha": "aae626081f62be5c93b3e7d92c08c811105c4d8f", "filename": "compiler/rustc_codegen_cranelift/scripts/tests.sh", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftests.sh?ref=b70b01b11250b5dc8f300d26fe1dba8b5d189999", "patch": "@@ -72,6 +72,10 @@ function base_sysroot_tests() {\n     $MY_RUSTC example/track-caller-attribute.rs --crate-type bin -Cpanic=abort --target \"$TARGET_TRIPLE\"\n     $RUN_WRAPPER ./target/out/track-caller-attribute\n \n+    echo \"[AOT] float-minmax-pass\"\n+    $MY_RUSTC example/float-minmax-pass.rs --crate-type bin -Cpanic=abort --target \"$TARGET_TRIPLE\"\n+    $RUN_WRAPPER ./target/out/float-minmax-pass\n+\n     echo \"[AOT] mod_bench\"\n     $MY_RUSTC example/mod_bench.rs --crate-type bin --target \"$TARGET_TRIPLE\"\n     $RUN_WRAPPER ./target/out/mod_bench"}, {"sha": "65346cb39622aa0e7bc2a7de747820af62b3d519", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=b70b01b11250b5dc8f300d26fe1dba8b5d189999", "patch": "@@ -821,7 +821,8 @@ pub(crate) fn codegen_place<'tcx>(\n                 if cplace.layout().ty.is_box() {\n                     cplace = cplace\n                         .place_field(fx, Field::new(0)) // Box<T> -> Unique<T>\n-                        .place_field(fx, Field::new(0)) // Unique<T> -> *const T\n+                        .place_field(fx, Field::new(0)) // Unique<T> -> NonNull<T>\n+                        .place_field(fx, Field::new(0)) // NonNull<T> -> *mut T\n                         .place_deref(fx);\n                 } else {\n                     cplace = cplace.place_deref(fx);"}, {"sha": "e19070774c6e0c246662f55ed06e4cf5a53f17e0", "filename": "compiler/rustc_codegen_cranelift/src/cast.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcast.rs?ref=b70b01b11250b5dc8f300d26fe1dba8b5d189999", "patch": "@@ -84,7 +84,7 @@ pub(crate) fn clif_int_or_float_cast(\n             fx.bcx.ins().fcvt_from_uint(to_ty, from)\n         }\n     } else if from_ty.is_float() && to_ty.is_int() {\n-        if to_ty == types::I128 {\n+        let val = if to_ty == types::I128 {\n             // _____sssf___\n             // __fix   sfti: f32 -> i128\n             // __fix   dfti: f64 -> i128\n@@ -109,13 +109,9 @@ pub(crate) fn clif_int_or_float_cast(\n \n             let to_rust_ty = if to_signed { fx.tcx.types.i128 } else { fx.tcx.types.u128 };\n \n-            return fx\n-                .easy_call(&name, &[CValue::by_val(from, fx.layout_of(from_rust_ty))], to_rust_ty)\n-                .load_scalar(fx);\n-        }\n-\n-        // float -> int-like\n-        if to_ty == types::I8 || to_ty == types::I16 {\n+            fx.easy_call(&name, &[CValue::by_val(from, fx.layout_of(from_rust_ty))], to_rust_ty)\n+                .load_scalar(fx)\n+        } else if to_ty == types::I8 || to_ty == types::I16 {\n             // FIXME implement fcvt_to_*int_sat.i8/i16\n             let val = if to_signed {\n                 fx.bcx.ins().fcvt_to_sint_sat(types::I32, from)\n@@ -146,6 +142,23 @@ pub(crate) fn clif_int_or_float_cast(\n             fx.bcx.ins().fcvt_to_sint_sat(to_ty, from)\n         } else {\n             fx.bcx.ins().fcvt_to_uint_sat(to_ty, from)\n+        };\n+\n+        if let Some(false) = fx.tcx.sess.opts.debugging_opts.saturating_float_casts {\n+            return val;\n+        }\n+\n+        let is_not_nan = fx.bcx.ins().fcmp(FloatCC::Equal, from, from);\n+        if to_ty == types::I128 {\n+            // FIXME(bytecodealliance/wasmtime#3963): select.i128 on fcmp eq miscompiles\n+            let (lsb, msb) = fx.bcx.ins().isplit(val);\n+            let zero = fx.bcx.ins().iconst(types::I64, 0);\n+            let lsb = fx.bcx.ins().select(is_not_nan, lsb, zero);\n+            let msb = fx.bcx.ins().select(is_not_nan, msb, zero);\n+            fx.bcx.ins().iconcat(lsb, msb)\n+        } else {\n+            let zero = fx.bcx.ins().iconst(to_ty, 0);\n+            fx.bcx.ins().select(is_not_nan, val, zero)\n         }\n     } else if from_ty.is_float() && to_ty.is_float() {\n         // float -> float"}, {"sha": "e59a0cb0a23237bfe0b4fd0164909db4d8a98e49", "filename": "compiler/rustc_codegen_cranelift/src/config.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconfig.rs?ref=b70b01b11250b5dc8f300d26fe1dba8b5d189999", "patch": "@@ -48,12 +48,6 @@ pub struct BackendConfig {\n     /// Can be set using `-Cllvm-args=display_cg_time=...`.\n     pub display_cg_time: bool,\n \n-    /// The register allocator to use.\n-    ///\n-    /// Defaults to the value of `CG_CLIF_REGALLOC` or `backtracking` otherwise. Can be set using\n-    /// `-Cllvm-args=regalloc=...`.\n-    pub regalloc: String,\n-\n     /// Enable the Cranelift ir verifier for all compilation passes. If not set it will only run\n     /// once before passing the clif ir to Cranelift for compilation.\n     ///\n@@ -80,8 +74,6 @@ impl Default for BackendConfig {\n                 args.split(' ').map(|arg| arg.to_string()).collect()\n             },\n             display_cg_time: bool_env_var(\"CG_CLIF_DISPLAY_CG_TIME\"),\n-            regalloc: std::env::var(\"CG_CLIF_REGALLOC\")\n-                .unwrap_or_else(|_| \"backtracking\".to_string()),\n             enable_verifier: cfg!(debug_assertions) || bool_env_var(\"CG_CLIF_ENABLE_VERIFIER\"),\n             disable_incr_cache: bool_env_var(\"CG_CLIF_DISABLE_INCR_CACHE\"),\n         }\n@@ -101,7 +93,6 @@ impl BackendConfig {\n                 match name {\n                     \"mode\" => config.codegen_mode = value.parse()?,\n                     \"display_cg_time\" => config.display_cg_time = parse_bool(name, value)?,\n-                    \"regalloc\" => config.regalloc = value.to_string(),\n                     \"enable_verifier\" => config.enable_verifier = parse_bool(name, value)?,\n                     \"disable_incr_cache\" => config.disable_incr_cache = parse_bool(name, value)?,\n                     _ => return Err(format!(\"Unknown option `{}`\", name)),"}, {"sha": "f619bb5ed5e586ae33f5b7711095613bdad14472", "filename": "compiler/rustc_codegen_cranelift/src/discriminant.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdiscriminant.rs?ref=b70b01b11250b5dc8f300d26fe1dba8b5d189999", "patch": "@@ -128,8 +128,16 @@ pub(crate) fn codegen_get_discriminant<'tcx>(\n             let relative_discr = if niche_start == 0 {\n                 tag\n             } else {\n-                // FIXME handle niche_start > i64::MAX\n-                fx.bcx.ins().iadd_imm(tag, -i64::try_from(niche_start).unwrap())\n+                let niche_start = match fx.bcx.func.dfg.value_type(tag) {\n+                    types::I128 => {\n+                        let lsb = fx.bcx.ins().iconst(types::I64, niche_start as u64 as i64);\n+                        let msb =\n+                            fx.bcx.ins().iconst(types::I64, (niche_start >> 64) as u64 as i64);\n+                        fx.bcx.ins().iconcat(lsb, msb)\n+                    }\n+                    ty => fx.bcx.ins().iconst(ty, niche_start as i64),\n+                };\n+                fx.bcx.ins().isub(tag, niche_start)\n             };\n             let relative_max = niche_variants.end().as_u32() - niche_variants.start().as_u32();\n             let is_niche = {"}, {"sha": "d76dfca7960c4a220871c57b8fc1f020f5cab588", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=b70b01b11250b5dc8f300d26fe1dba8b5d189999", "patch": "@@ -1019,39 +1019,23 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             ret.write_cvalue(fx, old);\n         };\n \n-        // In Rust floating point min and max don't propagate NaN. In Cranelift they do however.\n-        // For this reason it is necessary to use `a.is_nan() ? b : (a >= b ? b : a)` for `minnumf*`\n-        // and `a.is_nan() ? b : (a <= b ? b : a)` for `maxnumf*`. NaN checks are done by comparing\n-        // a float against itself. Only in case of NaN is it not equal to itself.\n         minnumf32, (v a, v b) {\n-            let a_is_nan = fx.bcx.ins().fcmp(FloatCC::NotEqual, a, a);\n-            let a_ge_b = fx.bcx.ins().fcmp(FloatCC::GreaterThanOrEqual, a, b);\n-            let temp = fx.bcx.ins().select(a_ge_b, b, a);\n-            let val = fx.bcx.ins().select(a_is_nan, b, temp);\n+            let val = crate::num::codegen_float_min(fx, a, b);\n             let val = CValue::by_val(val, fx.layout_of(fx.tcx.types.f32));\n             ret.write_cvalue(fx, val);\n         };\n         minnumf64, (v a, v b) {\n-            let a_is_nan = fx.bcx.ins().fcmp(FloatCC::NotEqual, a, a);\n-            let a_ge_b = fx.bcx.ins().fcmp(FloatCC::GreaterThanOrEqual, a, b);\n-            let temp = fx.bcx.ins().select(a_ge_b, b, a);\n-            let val = fx.bcx.ins().select(a_is_nan, b, temp);\n+            let val = crate::num::codegen_float_min(fx, a, b);\n             let val = CValue::by_val(val, fx.layout_of(fx.tcx.types.f64));\n             ret.write_cvalue(fx, val);\n         };\n         maxnumf32, (v a, v b) {\n-            let a_is_nan = fx.bcx.ins().fcmp(FloatCC::NotEqual, a, a);\n-            let a_le_b = fx.bcx.ins().fcmp(FloatCC::LessThanOrEqual, a, b);\n-            let temp = fx.bcx.ins().select(a_le_b, b, a);\n-            let val = fx.bcx.ins().select(a_is_nan, b, temp);\n+            let val = crate::num::codegen_float_max(fx, a, b);\n             let val = CValue::by_val(val, fx.layout_of(fx.tcx.types.f32));\n             ret.write_cvalue(fx, val);\n         };\n         maxnumf64, (v a, v b) {\n-            let a_is_nan = fx.bcx.ins().fcmp(FloatCC::NotEqual, a, a);\n-            let a_le_b = fx.bcx.ins().fcmp(FloatCC::LessThanOrEqual, a, b);\n-            let temp = fx.bcx.ins().select(a_le_b, b, a);\n-            let val = fx.bcx.ins().select(a_is_nan, b, temp);\n+            let val = crate::num::codegen_float_max(fx, a, b);\n             let val = CValue::by_val(val, fx.layout_of(fx.tcx.types.f64));\n             ret.write_cvalue(fx, val);\n         };"}, {"sha": "d1ca9edf2e0f1bb578889566bc8384c5bf5bfc1c", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/simd.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs?ref=b70b01b11250b5dc8f300d26fe1dba8b5d189999", "patch": "@@ -322,20 +322,21 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             }\n             assert_eq!(a.layout(), b.layout());\n             assert_eq!(a.layout(), c.layout());\n-            let layout = a.layout();\n+            assert_eq!(a.layout(), ret.layout());\n \n-            let (lane_count, _lane_ty) = layout.ty.simd_size_and_type(fx.tcx);\n-            let (ret_lane_count, ret_lane_ty) = ret.layout().ty.simd_size_and_type(fx.tcx);\n-            assert_eq!(lane_count, ret_lane_count);\n-            let ret_lane_layout = fx.layout_of(ret_lane_ty);\n+            let layout = a.layout();\n+            let (lane_count, lane_ty) = layout.ty.simd_size_and_type(fx.tcx);\n \n             for lane in 0..lane_count {\n-                let a_lane = a.value_lane(fx, lane).load_scalar(fx);\n-                let b_lane = b.value_lane(fx, lane).load_scalar(fx);\n-                let c_lane = c.value_lane(fx, lane).load_scalar(fx);\n+                let a_lane = a.value_lane(fx, lane);\n+                let b_lane = b.value_lane(fx, lane);\n+                let c_lane = c.value_lane(fx, lane);\n \n-                let mul_lane = fx.bcx.ins().fmul(a_lane, b_lane);\n-                let res_lane = CValue::by_val(fx.bcx.ins().fadd(mul_lane, c_lane), ret_lane_layout);\n+                let res_lane = match lane_ty.kind() {\n+                    ty::Float(FloatTy::F32) => fx.easy_call(\"fmaf\", &[a_lane, b_lane, c_lane], lane_ty),\n+                    ty::Float(FloatTy::F64) => fx.easy_call(\"fma\", &[a_lane, b_lane, c_lane], lane_ty),\n+                    _ => unreachable!(),\n+                };\n \n                 ret.place_lane(fx, lane).write_cvalue(fx, res_lane);\n             }\n@@ -354,8 +355,8 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                     _ => unreachable!(\"{:?}\", lane_ty),\n                 }\n                 match intrinsic {\n-                    sym::simd_fmin => fx.bcx.ins().fmin(x_lane, y_lane),\n-                    sym::simd_fmax => fx.bcx.ins().fmax(x_lane, y_lane),\n+                    sym::simd_fmin => crate::num::codegen_float_min(fx, x_lane, y_lane),\n+                    sym::simd_fmax => crate::num::codegen_float_max(fx, x_lane, y_lane),\n                     _ => unreachable!(),\n                 }\n             });\n@@ -495,7 +496,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 let lt = match ty.kind() {\n                     ty::Int(_) => fx.bcx.ins().icmp(IntCC::SignedLessThan, a, b),\n                     ty::Uint(_) => fx.bcx.ins().icmp(IntCC::UnsignedLessThan, a, b),\n-                    ty::Float(_) => fx.bcx.ins().fcmp(FloatCC::LessThan, a, b),\n+                    ty::Float(_) => return crate::num::codegen_float_min(fx, a, b),\n                     _ => unreachable!(),\n                 };\n                 fx.bcx.ins().select(lt, a, b)\n@@ -512,7 +513,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 let gt = match ty.kind() {\n                     ty::Int(_) => fx.bcx.ins().icmp(IntCC::SignedGreaterThan, a, b),\n                     ty::Uint(_) => fx.bcx.ins().icmp(IntCC::UnsignedGreaterThan, a, b),\n-                    ty::Float(_) => fx.bcx.ins().fcmp(FloatCC::GreaterThan, a, b),\n+                    ty::Float(_) => return crate::num::codegen_float_max(fx, a, b),\n                     _ => unreachable!(),\n                 };\n                 fx.bcx.ins().select(gt, a, b)"}, {"sha": "9d2e12f98984ae366b37472015543a0adcee4559", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=b70b01b11250b5dc8f300d26fe1dba8b5d189999", "patch": "@@ -256,8 +256,6 @@ fn build_isa(sess: &Session, backend_config: &BackendConfig) -> Box<dyn isa::Tar\n \n     flags_builder.set(\"enable_llvm_abi_extensions\", \"true\").unwrap();\n \n-    flags_builder.set(\"regalloc\", &backend_config.regalloc).unwrap();\n-\n     use rustc_session::config::OptLevel;\n     match sess.opts.optimize {\n         OptLevel::No => {"}, {"sha": "4ce8adb182e0fab68756d06f3fad196f1bf5a770", "filename": "compiler/rustc_codegen_cranelift/src/num.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b70b01b11250b5dc8f300d26fe1dba8b5d189999/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fnum.rs?ref=b70b01b11250b5dc8f300d26fe1dba8b5d189999", "patch": "@@ -420,3 +420,21 @@ pub(crate) fn codegen_ptr_binop<'tcx>(\n         CValue::by_val(fx.bcx.ins().bint(types::I8, res), fx.layout_of(fx.tcx.types.bool))\n     }\n }\n+\n+// In Rust floating point min and max don't propagate NaN. In Cranelift they do however.\n+// For this reason it is necessary to use `a.is_nan() ? b : (a >= b ? b : a)` for `minnumf*`\n+// and `a.is_nan() ? b : (a <= b ? b : a)` for `maxnumf*`. NaN checks are done by comparing\n+// a float against itself. Only in case of NaN is it not equal to itself.\n+pub(crate) fn codegen_float_min(fx: &mut FunctionCx<'_, '_, '_>, a: Value, b: Value) -> Value {\n+    let a_is_nan = fx.bcx.ins().fcmp(FloatCC::NotEqual, a, a);\n+    let a_ge_b = fx.bcx.ins().fcmp(FloatCC::GreaterThanOrEqual, a, b);\n+    let temp = fx.bcx.ins().select(a_ge_b, b, a);\n+    fx.bcx.ins().select(a_is_nan, b, temp)\n+}\n+\n+pub(crate) fn codegen_float_max(fx: &mut FunctionCx<'_, '_, '_>, a: Value, b: Value) -> Value {\n+    let a_is_nan = fx.bcx.ins().fcmp(FloatCC::NotEqual, a, a);\n+    let a_le_b = fx.bcx.ins().fcmp(FloatCC::LessThanOrEqual, a, b);\n+    let temp = fx.bcx.ins().select(a_le_b, b, a);\n+    fx.bcx.ins().select(a_is_nan, b, temp)\n+}"}]}