{"sha": "ca93bcba5dd0936ce0464483771292335cbccac1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhOTNiY2JhNWRkMDkzNmNlMDQ2NDQ4Mzc3MTI5MjMzNWNiY2NhYzE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-11-18T20:15:43Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-25T13:34:59Z"}, "message": "Improve lane_type_and_count", "tree": {"sha": "8546a2afc0ff9f47429b92caff8d238b9f899243", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8546a2afc0ff9f47429b92caff8d238b9f899243"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca93bcba5dd0936ce0464483771292335cbccac1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca93bcba5dd0936ce0464483771292335cbccac1", "html_url": "https://github.com/rust-lang/rust/commit/ca93bcba5dd0936ce0464483771292335cbccac1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca93bcba5dd0936ce0464483771292335cbccac1/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ff01a4d59779609992aad947264abcc64617917", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ff01a4d59779609992aad947264abcc64617917", "html_url": "https://github.com/rust-lang/rust/commit/7ff01a4d59779609992aad947264abcc64617917"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "a59793637d3dc646cb76800ab0cd31acfc901706", "filename": "src/intrinsics/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca93bcba5dd0936ce0464483771292335cbccac1/src%2Fintrinsics%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca93bcba5dd0936ce0464483771292335cbccac1/src%2Fintrinsics%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm.rs?ref=ca93bcba5dd0936ce0464483771292335cbccac1", "patch": "@@ -36,7 +36,7 @@ pub fn codegen_llvm_intrinsic_call<'tcx>(\n \n         // Used by `_mm_movemask_epi8` and `_mm256_movemask_epi8`\n         llvm.x86.sse2.pmovmskb.128 | llvm.x86.avx2.pmovmskb | llvm.x86.sse2.movmsk.pd, (c a) {\n-            let (lane_layout, lane_count) = lane_type_and_count(fx, a.layout(), intrinsic);\n+            let (lane_layout, lane_count) = lane_type_and_count(fx.tcx, a.layout());\n             let lane_ty = fx.clif_type(lane_layout.ty).unwrap();\n             assert!(lane_count <= 32);\n "}, {"sha": "42eda4b2370a3309db69a8d2fa6cdeccc3a2e1fa", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ca93bcba5dd0936ce0464483771292335cbccac1/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca93bcba5dd0936ce0464483771292335cbccac1/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=ca93bcba5dd0936ce0464483771292335cbccac1", "patch": "@@ -127,20 +127,19 @@ macro atomic_minmax($fx:expr, $cc:expr, <$T:ident> ($ptr:ident, $src:ident) -> $\n     $ret.write_cvalue($fx, ret_val);\n }\n \n-fn lane_type_and_count<'tcx>(\n-    fx: &FunctionCx<'_, 'tcx, impl Backend>,\n+pub fn lane_type_and_count<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n     layout: TyLayout<'tcx>,\n-    intrinsic: &str,\n ) -> (TyLayout<'tcx>, u32) {\n     assert!(layout.ty.is_simd());\n     let lane_count = match layout.fields {\n         layout::FieldPlacement::Array { stride: _, count } => u32::try_from(count).unwrap(),\n-        _ => panic!(\n-            \"Non vector type {:?} passed to or returned from simd_* intrinsic {}\",\n-            layout.ty, intrinsic\n-        ),\n+        _ => unreachable!(\"lane_type_and_count({:?})\", layout),\n     };\n-    let lane_layout = layout.field(fx, 0);\n+    let lane_layout = layout.field(&ty::layout::LayoutCx {\n+        tcx,\n+        param_env: ParamEnv::reveal_all(),\n+    }, 0).unwrap();\n     (lane_layout, lane_count)\n }\n \n@@ -161,8 +160,8 @@ fn simd_for_each_lane<'tcx, B: Backend>(\n     assert_eq!(x.layout(), y.layout());\n     let layout = x.layout();\n \n-    let (lane_layout, lane_count) = lane_type_and_count(fx, layout, intrinsic);\n-    let (ret_lane_layout, ret_lane_count) = lane_type_and_count(fx, ret.layout(), intrinsic);\n+    let (lane_layout, lane_count) = lane_type_and_count(fx.tcx, layout);\n+    let (ret_lane_layout, ret_lane_count) = lane_type_and_count(fx.tcx, ret.layout());\n     assert_eq!(lane_count, ret_lane_count);\n \n     for lane in 0..lane_count {"}, {"sha": "441fa2d8bdbea820ca561848eaf94b47242eb98e", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca93bcba5dd0936ce0464483771292335cbccac1/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca93bcba5dd0936ce0464483771292335cbccac1/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=ca93bcba5dd0936ce0464483771292335cbccac1", "patch": "@@ -21,8 +21,8 @@ pub fn codegen_simd_intrinsic_call<'tcx>(\n         };\n \n         simd_cast, (c a) {\n-            let (lane_layout, lane_count) = lane_type_and_count(fx, a.layout(), intrinsic);\n-            let (ret_lane_layout, ret_lane_count) = lane_type_and_count(fx, ret.layout(), intrinsic);\n+            let (lane_layout, lane_count) = lane_type_and_count(fx.tcx, a.layout());\n+            let (ret_lane_layout, ret_lane_count) = lane_type_and_count(fx.tcx, ret.layout());\n             assert_eq!(lane_count, ret_lane_count);\n \n             let ret_lane_ty = fx.clif_type(ret_lane_layout.ty).unwrap();\n@@ -65,8 +65,8 @@ pub fn codegen_simd_intrinsic_call<'tcx>(\n             assert_eq!(x.layout(), y.layout());\n             let layout = x.layout();\n \n-            let (lane_type, lane_count) = lane_type_and_count(fx, layout, intrinsic);\n-            let (ret_lane_type, ret_lane_count) = lane_type_and_count(fx, ret.layout(), intrinsic);\n+            let (lane_type, lane_count) = lane_type_and_count(fx.tcx, layout);\n+            let (ret_lane_type, ret_lane_count) = lane_type_and_count(fx.tcx, ret.layout());\n \n             assert_eq!(lane_type, ret_lane_type);\n             assert_eq!(n, ret_lane_count);\n@@ -124,7 +124,7 @@ pub fn codegen_simd_intrinsic_call<'tcx>(\n             };\n \n             let idx = idx_const.val.try_to_bits(Size::from_bytes(4 /* u32*/)).expect(&format!(\"kind not scalar: {:?}\", idx_const));\n-            let (_lane_type, lane_count) = lane_type_and_count(fx, v.layout(), intrinsic);\n+            let (_lane_type, lane_count) = lane_type_and_count(fx.tcx, v.layout());\n             if idx >= lane_count.into() {\n                 fx.tcx.sess.span_fatal(fx.mir.span, &format!(\"[simd_extract] idx {} >= lane_count {}\", idx, lane_count));\n             }"}]}