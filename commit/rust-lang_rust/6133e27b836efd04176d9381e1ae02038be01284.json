{"sha": "6133e27b836efd04176d9381e1ae02038be01284", "node_id": "C_kwDOAAsO6NoAKDYxMzNlMjdiODM2ZWZkMDQxNzZkOTM4MWUxYWUwMjAzOGJlMDEyODQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-03T09:41:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-03T09:41:24Z"}, "message": "Auto merge of #14070 - Veykril:proc-macro-api, r=Veykril\n\nImplement proc-macro-api versioning\n\nSo as it stands, we can't really change the proc-macro-api protocol at all without breaking all proc-macro servers again. To somewhat alleviate this we can move the supported ABI mess over to the proc-macro-api now by supporting multiple versions there (versions defined by us at least, not by rustc). Since the proc-macro-api protocol has no versioning scheme at the moment though, the best we can do here is add a new request to query the version from a server. Due to how the server currently works though, if it encounters an unknown request it will exit, meaning we can check if it is a server without support by checking if it exited after our version check request, that way we can support the current circulating server as well.\n\nWe need this since our span type will change from `TokenId` to something else at some point, but for that to work we need to comply with that the server expects. So knowing the version the server is using we can decide whether to send our new span data, or the tokenid (assuming we keep that information with our span data as well, alternatively we send irrelevant tokenids). That way we can keep old servers working while the user installations slowly migrate to newer servers that support the new spandata.", "tree": {"sha": "25b9d74928b1db87570cf41262ff7a02a3ff59cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25b9d74928b1db87570cf41262ff7a02a3ff59cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6133e27b836efd04176d9381e1ae02038be01284", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6133e27b836efd04176d9381e1ae02038be01284", "html_url": "https://github.com/rust-lang/rust/commit/6133e27b836efd04176d9381e1ae02038be01284", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6133e27b836efd04176d9381e1ae02038be01284/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46846eae9710e52584029cc7343c3037278d50fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/46846eae9710e52584029cc7343c3037278d50fe", "html_url": "https://github.com/rust-lang/rust/commit/46846eae9710e52584029cc7343c3037278d50fe"}, {"sha": "8e998c4aa79aab1fa0041bbc929f36b82a6c3aeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e998c4aa79aab1fa0041bbc929f36b82a6c3aeb", "html_url": "https://github.com/rust-lang/rust/commit/8e998c4aa79aab1fa0041bbc929f36b82a6c3aeb"}], "stats": {"total": 59, "additions": 50, "deletions": 9}, "files": [{"sha": "90d06967e8fc0502cee77c38780e4add6b3b7e3d", "filename": "crates/proc-macro-api/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6133e27b836efd04176d9381e1ae02038be01284/crates%2Fproc-macro-api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6133e27b836efd04176d9381e1ae02038be01284/crates%2Fproc-macro-api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-api%2Fsrc%2Flib.rs?ref=6133e27b836efd04176d9381e1ae02038be01284", "patch": "@@ -115,7 +115,7 @@ impl ProcMacroServer {\n     /// Spawns an external process as the proc macro server and returns a client connected to it.\n     pub fn spawn(\n         process_path: AbsPathBuf,\n-        args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n+        args: impl IntoIterator<Item = impl AsRef<OsStr>> + Clone,\n     ) -> io::Result<ProcMacroServer> {\n         let process = ProcMacroProcessSrv::run(process_path, args)?;\n         Ok(ProcMacroServer { process: Arc::new(Mutex::new(process)) })\n@@ -174,7 +174,7 @@ impl ProcMacro {\n         let response = self.process.lock().unwrap_or_else(|e| e.into_inner()).send_task(request)?;\n         match response {\n             msg::Response::ExpandMacro(it) => Ok(it.map(FlatTree::to_subtree)),\n-            msg::Response::ListMacros { .. } => {\n+            msg::Response::ListMacros(..) | msg::Response::ApiVersionCheck(..) => {\n                 Err(ServerError { message: \"unexpected response\".to_string(), io: None })\n             }\n         }"}, {"sha": "4040efe93f093fad5bd84dbc4f53c4ce076c5ff4", "filename": "crates/proc-macro-api/src/msg.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6133e27b836efd04176d9381e1ae02038be01284/crates%2Fproc-macro-api%2Fsrc%2Fmsg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6133e27b836efd04176d9381e1ae02038be01284/crates%2Fproc-macro-api%2Fsrc%2Fmsg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-api%2Fsrc%2Fmsg.rs?ref=6133e27b836efd04176d9381e1ae02038be01284", "patch": "@@ -12,16 +12,21 @@ use crate::ProcMacroKind;\n \n pub use crate::msg::flat::FlatTree;\n \n+pub const NO_VERSION_CHECK_VERSION: u32 = 0;\n+pub const CURRENT_API_VERSION: u32 = 1;\n+\n #[derive(Debug, Serialize, Deserialize)]\n pub enum Request {\n     ListMacros { dylib_path: PathBuf },\n     ExpandMacro(ExpandMacro),\n+    ApiVersionCheck {},\n }\n \n #[derive(Debug, Serialize, Deserialize)]\n pub enum Response {\n     ListMacros(Result<Vec<(String, ProcMacroKind)>, String>),\n     ExpandMacro(Result<FlatTree, PanicMessage>),\n+    ApiVersionCheck(u32),\n }\n \n #[derive(Debug, Serialize, Deserialize)]"}, {"sha": "e70b3850d667d010d15eaaead5ce7c2ed68777d6", "filename": "crates/proc-macro-api/src/process.rs", "status": "modified", "additions": 40, "deletions": 7, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6133e27b836efd04176d9381e1ae02038be01284/crates%2Fproc-macro-api%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6133e27b836efd04176d9381e1ae02038be01284/crates%2Fproc-macro-api%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-api%2Fsrc%2Fprocess.rs?ref=6133e27b836efd04176d9381e1ae02038be01284", "patch": "@@ -10,7 +10,7 @@ use paths::{AbsPath, AbsPathBuf};\n use stdx::JodChild;\n \n use crate::{\n-    msg::{Message, Request, Response},\n+    msg::{Message, Request, Response, CURRENT_API_VERSION},\n     ProcMacroKind, ServerError,\n };\n \n@@ -19,19 +19,52 @@ pub(crate) struct ProcMacroProcessSrv {\n     _process: Process,\n     stdin: ChildStdin,\n     stdout: BufReader<ChildStdout>,\n+    version: u32,\n }\n \n impl ProcMacroProcessSrv {\n     pub(crate) fn run(\n         process_path: AbsPathBuf,\n-        args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n+        args: impl IntoIterator<Item = impl AsRef<OsStr>> + Clone,\n     ) -> io::Result<ProcMacroProcessSrv> {\n-        let mut process = Process::run(process_path, args)?;\n-        let (stdin, stdout) = process.stdio().expect(\"couldn't access child stdio\");\n+        let create_srv = || {\n+            let mut process = Process::run(process_path.clone(), args.clone())?;\n+            let (stdin, stdout) = process.stdio().expect(\"couldn't access child stdio\");\n+\n+            io::Result::Ok(ProcMacroProcessSrv { _process: process, stdin, stdout, version: 0 })\n+        };\n+        let mut srv = create_srv()?;\n+        tracing::info!(\"sending version check\");\n+        match srv.version_check() {\n+            Ok(v) if v > CURRENT_API_VERSION => Err(io::Error::new(\n+                io::ErrorKind::Other,\n+                format!(\n+                    \"proc-macro server's api version ({}) is newer than rust-analyzer's ({})\",\n+                    v, CURRENT_API_VERSION\n+                ),\n+            )),\n+            Ok(v) => {\n+                tracing::info!(\"got version {v}\");\n+                srv.version = v;\n+                Ok(srv)\n+            }\n+            Err(e) => {\n+                tracing::info!(%e, \"proc-macro version check failed, restarting and assuming version 0\");\n+                create_srv()\n+            }\n+        }\n+    }\n \n-        let srv = ProcMacroProcessSrv { _process: process, stdin, stdout };\n+    pub(crate) fn version_check(&mut self) -> Result<u32, ServerError> {\n+        let request = Request::ApiVersionCheck {};\n+        let response = self.send_task(request)?;\n \n-        Ok(srv)\n+        match response {\n+            Response::ApiVersionCheck(version) => Ok(version),\n+            Response::ExpandMacro { .. } | Response::ListMacros { .. } => {\n+                Err(ServerError { message: \"unexpected response\".to_string(), io: None })\n+            }\n+        }\n     }\n \n     pub(crate) fn find_proc_macros(\n@@ -44,7 +77,7 @@ impl ProcMacroProcessSrv {\n \n         match response {\n             Response::ListMacros(it) => Ok(it),\n-            Response::ExpandMacro { .. } => {\n+            Response::ExpandMacro { .. } | Response::ApiVersionCheck { .. } => {\n                 Err(ServerError { message: \"unexpected response\".to_string(), io: None })\n             }\n         }"}, {"sha": "05168feb629f2fc9ec05bbe58f2f8c40abcc7670", "filename": "crates/proc-macro-srv/src/cli.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6133e27b836efd04176d9381e1ae02038be01284/crates%2Fproc-macro-srv%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6133e27b836efd04176d9381e1ae02038be01284/crates%2Fproc-macro-srv%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fcli.rs?ref=6133e27b836efd04176d9381e1ae02038be01284", "patch": "@@ -15,6 +15,9 @@ pub fn run() -> io::Result<()> {\n                 msg::Response::ListMacros(srv.list_macros(&dylib_path))\n             }\n             msg::Request::ExpandMacro(task) => msg::Response::ExpandMacro(srv.expand(task)),\n+            msg::Request::ApiVersionCheck {} => {\n+                msg::Response::ApiVersionCheck(proc_macro_api::msg::CURRENT_API_VERSION)\n+            }\n         };\n         write_response(res)?\n     }"}]}