{"sha": "641fa374edca00e33df51b05ffcbebbbef41cac5", "node_id": "C_kwDOAAsO6NoAKDY0MWZhMzc0ZWRjYTAwZTMzZGY1MWIwNWZmY2JlYmJiZWY0MWNhYzU", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-14T10:47:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-14T10:47:11Z"}, "message": "Merge #10309\n\n10309: use `ControlFlow` in \"extract function\" assist r=Veykril a=dzvon\n\nFixes #10272 \n\nCo-authored-by: Dezhi Wu <wu543065657@163.com>", "tree": {"sha": "aaaa71e5e086858b52b716d1cf3dd6cbba8e0995", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aaaa71e5e086858b52b716d1cf3dd6cbba8e0995"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/641fa374edca00e33df51b05ffcbebbbef41cac5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhaAqvCRBK7hj4Ov3rIwAAEkAIALD3SYnUKuCmUEM9/1Xlrocc\nUhkVoYjMm/e+4/0/+cppBC88FQz1h0bEAPBkBHRaDRI608GTB0tLyPoNhqW3XDlP\nMB9sNgRvjWpy0/fmoZ7O1P7nIF6CgYLowEa51CunVTmGI4izf5PGg2N3yVuvPvJI\ndqS4qREdaNx6wQ8m5TkwqKUoqFnAdARY18oNFGGrxO2mmzhzB96M1MZZBZh+a52X\nbJxOjGePnXRN88zdjHRM6rF0pjesOVZenEahG/6YfZdpc7r9WelprLCL+1z1OHXb\nIk81NI81rvcFqr50iBD4SDH5wdEEdULhEKtU2A4rg7bFw55UNUXs5K3X5yDpB/U=\n=ZW0d\n-----END PGP SIGNATURE-----\n", "payload": "tree aaaa71e5e086858b52b716d1cf3dd6cbba8e0995\nparent 7d1015b8d177a02dff03d2c70bc74e5d4ed34335\nparent 214e7cc69d9f70c084bcc4950259c0ca4cec2764\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1634208431 +0000\ncommitter GitHub <noreply@github.com> 1634208431 +0000\n\nMerge #10309\n\n10309: use `ControlFlow` in \"extract function\" assist r=Veykril a=dzvon\n\nFixes #10272 \n\nCo-authored-by: Dezhi Wu <wu543065657@163.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/641fa374edca00e33df51b05ffcbebbbef41cac5", "html_url": "https://github.com/rust-lang/rust/commit/641fa374edca00e33df51b05ffcbebbbef41cac5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/641fa374edca00e33df51b05ffcbebbbef41cac5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d1015b8d177a02dff03d2c70bc74e5d4ed34335", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d1015b8d177a02dff03d2c70bc74e5d4ed34335", "html_url": "https://github.com/rust-lang/rust/commit/7d1015b8d177a02dff03d2c70bc74e5d4ed34335"}, {"sha": "214e7cc69d9f70c084bcc4950259c0ca4cec2764", "url": "https://api.github.com/repos/rust-lang/rust/commits/214e7cc69d9f70c084bcc4950259c0ca4cec2764", "html_url": "https://github.com/rust-lang/rust/commit/214e7cc69d9f70c084bcc4950259c0ca4cec2764"}], "stats": {"total": 89, "additions": 73, "deletions": 16}, "files": [{"sha": "7ffb5728cc5f2f23942bd73314a3dd81d288fdb7", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 69, "deletions": 16, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/641fa374edca00e33df51b05ffcbebbbef41cac5/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641fa374edca00e33df51b05ffcbebbbef41cac5/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=641fa374edca00e33df51b05ffcbebbbef41cac5", "patch": "@@ -2,10 +2,15 @@ use std::{hash::BuildHasherDefault, iter};\n \n use ast::make;\n use either::Either;\n-use hir::{HirDisplay, InFile, Local, Semantics, TypeInfo};\n+use hir::{HirDisplay, InFile, Local, ModuleDef, Semantics, TypeInfo};\n use ide_db::{\n     defs::{Definition, NameRefClass},\n-    helpers::node_ext::{preorder_expr, walk_expr, walk_pat, walk_patterns_in_expr},\n+    helpers::{\n+        insert_use::{insert_use, ImportScope},\n+        mod_path_to_ast,\n+        node_ext::{preorder_expr, walk_expr, walk_pat, walk_patterns_in_expr},\n+        FamousDefs,\n+    },\n     search::{FileReference, ReferenceCategory, SearchScope},\n     RootDatabase,\n };\n@@ -86,6 +91,8 @@ pub(crate) fn extract_function(acc: &mut Assists, ctx: &AssistContext) -> Option\n \n     let target_range = body.text_range();\n \n+    let scope = ImportScope::find_insert_use_container_with_macros(&node, &ctx.sema)?;\n+\n     acc.add(\n         AssistId(\"extract_function\", crate::AssistKind::RefactorExtract),\n         \"Extract into function\",\n@@ -118,10 +125,34 @@ pub(crate) fn extract_function(acc: &mut Assists, ctx: &AssistContext) -> Option\n \n             let fn_def = format_function(ctx, module, &fun, old_indent, new_indent);\n             let insert_offset = insert_after.text_range().end();\n+\n+            if fn_def.contains(\"ControlFlow\") {\n+                let scope = match scope {\n+                    ImportScope::File(it) => ImportScope::File(builder.make_mut(it)),\n+                    ImportScope::Module(it) => ImportScope::Module(builder.make_mut(it)),\n+                    ImportScope::Block(it) => ImportScope::Block(builder.make_mut(it)),\n+                };\n+\n+                let control_flow_enum =\n+                    FamousDefs(&ctx.sema, Some(module.krate())).core_ops_ControlFlow();\n+\n+                if let Some(control_flow_enum) = control_flow_enum {\n+                    let mod_path = module.find_use_path_prefixed(\n+                        ctx.sema.db,\n+                        ModuleDef::from(control_flow_enum),\n+                        ctx.config.insert_use.prefix_kind,\n+                    );\n+\n+                    if let Some(mod_path) = mod_path {\n+                        insert_use(&scope, mod_path_to_ast(&mod_path), &ctx.config.insert_use);\n+                    }\n+                }\n+            }\n+\n             match ctx.config.snippet_cap {\n                 Some(cap) => builder.insert_snippet(cap, insert_offset, fn_def),\n                 None => builder.insert(insert_offset, fn_def),\n-            }\n+            };\n         },\n     )\n }\n@@ -1184,7 +1215,17 @@ impl FlowHandler {\n                 let action = action.make_result_handler(None);\n                 let stmt = make::expr_stmt(action);\n                 let block = make::block_expr(iter::once(stmt.into()), None);\n-                let condition = make::condition(call_expr, None);\n+                let controlflow_break_path = make::path_from_text(\"ControlFlow::Break\");\n+                let condition = make::condition(\n+                    call_expr,\n+                    Some(\n+                        make::tuple_struct_pat(\n+                            controlflow_break_path,\n+                            iter::once(make::wildcard_pat().into()),\n+                        )\n+                        .into(),\n+                    ),\n+                );\n                 make::expr_if(condition, block, None)\n             }\n             FlowHandler::IfOption { action } => {\n@@ -1326,7 +1367,7 @@ impl Function {\n                     .unwrap_or_else(make::ty_placeholder);\n                 make::ext::ty_result(fun_ty.make_ty(ctx, module), handler_ty)\n             }\n-            FlowHandler::If { .. } => make::ext::ty_bool(),\n+            FlowHandler::If { .. } => make::ty(\"ControlFlow<()>\"),\n             FlowHandler::IfOption { action } => {\n                 let handler_ty = action\n                     .expr_ty(ctx)\n@@ -1461,8 +1502,11 @@ fn make_body(\n             })\n         }\n         FlowHandler::If { .. } => {\n-            let lit_false = make::expr_literal(\"false\");\n-            with_tail_expr(block, lit_false.into())\n+            let controlflow_continue = make::expr_call(\n+                make::expr_path(make::path_from_text(\"ControlFlow::Continue\")),\n+                make::arg_list(iter::once(make::expr_unit())),\n+            );\n+            with_tail_expr(block, controlflow_continue.into())\n         }\n         FlowHandler::IfOption { .. } => {\n             let none = make::expr_path(make::ext::ident_path(\"None\"));\n@@ -1638,7 +1682,10 @@ fn update_external_control_flow(handler: &FlowHandler, syntax: &SyntaxNode) {\n fn make_rewritten_flow(handler: &FlowHandler, arg_expr: Option<ast::Expr>) -> Option<ast::Expr> {\n     let value = match handler {\n         FlowHandler::None | FlowHandler::Try { .. } => return None,\n-        FlowHandler::If { .. } => make::expr_literal(\"true\").into(),\n+        FlowHandler::If { .. } => make::expr_call(\n+            make::expr_path(make::path_from_text(\"ControlFlow::Break\")),\n+            make::arg_list(iter::once(make::expr_unit())),\n+        ),\n         FlowHandler::IfOption { .. } => {\n             let expr = arg_expr.unwrap_or_else(|| make::expr_tuple(Vec::new()));\n             let args = make::arg_list(iter::once(expr));\n@@ -3270,6 +3317,7 @@ fn foo() {\n         check_assist(\n             extract_function,\n             r#\"\n+//- minicore: try\n fn foo() {\n     loop {\n         let mut n = 1;\n@@ -3281,21 +3329,23 @@ fn foo() {\n }\n \"#,\n             r#\"\n+use core::ops::ControlFlow;\n+\n fn foo() {\n     loop {\n         let mut n = 1;\n-        if fun_name(&mut n) {\n+        if let ControlFlow::Break(_) = fun_name(&mut n) {\n             break;\n         }\n         let h = 1 + n;\n     }\n }\n \n-fn $0fun_name(n: &mut i32) -> bool {\n+fn $0fun_name(n: &mut i32) -> ControlFlow<()> {\n     let m = *n + 1;\n-    return true;\n+    return ControlFlow::Break(());\n     *n += m;\n-    false\n+    ControlFlow::Continue(())\n }\n \"#,\n         );\n@@ -3306,6 +3356,7 @@ fn $0fun_name(n: &mut i32) -> bool {\n         check_assist(\n             extract_function,\n             r#\"\n+//- minicore: try\n fn foo() {\n     loop {\n         let mut n = 1;\n@@ -3318,22 +3369,24 @@ fn foo() {\n }\n \"#,\n             r#\"\n+use core::ops::ControlFlow;\n+\n fn foo() {\n     loop {\n         let mut n = 1;\n-        if fun_name(n) {\n+        if let ControlFlow::Break(_) = fun_name(n) {\n             break;\n         }\n         let h = 1;\n     }\n }\n \n-fn $0fun_name(n: i32) -> bool {\n+fn $0fun_name(n: i32) -> ControlFlow<()> {\n     let m = n + 1;\n     if m == 42 {\n-        return true;\n+        return ControlFlow::Break(());\n     }\n-    false\n+    ControlFlow::Continue(())\n }\n \"#,\n         );"}, {"sha": "18524986e2d164826c589327579658deb89327b0", "filename": "crates/ide_db/src/helpers/famous_defs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/641fa374edca00e33df51b05ffcbebbbef41cac5/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641fa374edca00e33df51b05ffcbebbbef41cac5/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs.rs?ref=641fa374edca00e33df51b05ffcbebbbef41cac5", "patch": "@@ -68,6 +68,10 @@ impl FamousDefs<'_, '_> {\n         self.find_trait(\"core:ops:Deref\")\n     }\n \n+    pub fn core_ops_ControlFlow(&self) -> Option<Enum> {\n+        self.find_enum(\"core:ops:ControlFlow\")\n+    }\n+\n     pub fn alloc(&self) -> Option<Crate> {\n         self.find_crate(\"alloc\")\n     }"}]}