{"sha": "c763ebc72f45c0d086875f6acf88b48d7f39eb23", "node_id": "C_kwDOAAsO6NoAKGM3NjNlYmM3MmY0NWMwZDA4Njg3NWY2YWNmODhiNDhkN2YzOWViMjM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-12T16:43:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-12T16:43:25Z"}, "message": "Rollup merge of #102830 - compiler-errors:constness-parity, r=fee1-dead\n\nUnify `tcx.constness` query and param env constness checks\n\nThe checks that we do in the `constness` query seem inconsistent with the checks that we do to determine if an item's param-env is const, so I merged them into the `constness` query and call that from the `param_env` query.\n\nI'm not sure if this totally makes sense -- is there a case where `tcx.param_env()` would return a const param-env for an item whose `tcx.constness()` is `Constness::NotConst`? Because if not, it seems a bit dangerous that these two differ.\n\nLuckily, not many places actually use `tcx.constness()`, and the checks in `tcx.param_env()` seem stricter than the checks in `tcx.constness()` (at least for the types of items we type-check).\n\nAlso, due to the way that `tcx.param_env()` is implemented, it _never_ used to return a const param-env for a item coming from a different crate, which also seems dangerous (though also probably not weaponizable currently, because we seldom actually compute the param-env for a non-local item).", "tree": {"sha": "9c1564eac5dd4372ffe3e995409060bc667f907f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c1564eac5dd4372ffe3e995409060bc667f907f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c763ebc72f45c0d086875f6acf88b48d7f39eb23", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjRu6tCRBK7hj4Ov3rIwAAaaIIAFXBnoU27xbENKSH2Eblx1I2\nch4ZlRpbyaFyKDzu7fnqCOtosZI5aUkusflOgf0oxCwtSgI4mWFGO4Xp2qj8A9rR\nJsStKzp/TLg64rX4V6jsAa8P4fxZwl16lNw7lyFqes4UOaBkHZ/OwjZNd+VgOLML\nXJPsZqpoof5InOS8N6TfOodghKI3wIeZPP25jnXgD2ATxprsCOHRRVQeae8WOjqR\nXty3Y9owlid5Pp6SotICk2AhQHFCAadcIz7HNWB7hb9kNPRIzDH73RytuaH9gBCe\nn1Fj0Mab1AH0msDbf7HieZBFPDj1+zkvgaU/vL+aF/iZCsEiYKOXQ7EY4vRXtrU=\n=Bplf\n-----END PGP SIGNATURE-----\n", "payload": "tree 9c1564eac5dd4372ffe3e995409060bc667f907f\nparent 40deecef0370dec461279e10d5e8b2f4f57d4900\nparent bef8681a1837790f2745c1f6a7f8214af2fd7f5d\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1665593005 +0530\ncommitter GitHub <noreply@github.com> 1665593005 +0530\n\nRollup merge of #102830 - compiler-errors:constness-parity, r=fee1-dead\n\nUnify `tcx.constness` query and param env constness checks\n\nThe checks that we do in the `constness` query seem inconsistent with the checks that we do to determine if an item's param-env is const, so I merged them into the `constness` query and call that from the `param_env` query.\n\nI'm not sure if this totally makes sense -- is there a case where `tcx.param_env()` would return a const param-env for an item whose `tcx.constness()` is `Constness::NotConst`? Because if not, it seems a bit dangerous that these two differ.\n\nLuckily, not many places actually use `tcx.constness()`, and the checks in `tcx.param_env()` seem stricter than the checks in `tcx.constness()` (at least for the types of items we type-check).\n\nAlso, due to the way that `tcx.param_env()` is implemented, it _never_ used to return a const param-env for a item coming from a different crate, which also seems dangerous (though also probably not weaponizable currently, because we seldom actually compute the param-env for a non-local item).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c763ebc72f45c0d086875f6acf88b48d7f39eb23", "html_url": "https://github.com/rust-lang/rust/commit/c763ebc72f45c0d086875f6acf88b48d7f39eb23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c763ebc72f45c0d086875f6acf88b48d7f39eb23/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40deecef0370dec461279e10d5e8b2f4f57d4900", "url": "https://api.github.com/repos/rust-lang/rust/commits/40deecef0370dec461279e10d5e8b2f4f57d4900", "html_url": "https://github.com/rust-lang/rust/commit/40deecef0370dec461279e10d5e8b2f4f57d4900"}, {"sha": "bef8681a1837790f2745c1f6a7f8214af2fd7f5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bef8681a1837790f2745c1f6a7f8214af2fd7f5d", "html_url": "https://github.com/rust-lang/rust/commit/bef8681a1837790f2745c1f6a7f8214af2fd7f5d"}], "stats": {"total": 197, "additions": 98, "deletions": 99}, "files": [{"sha": "cdcebb61c2e8c3a186ad06010a51499d5e410ef0", "filename": "compiler/rustc_const_eval/src/const_eval/fn_queries.rs", "status": "modified", "additions": 56, "deletions": 16, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/c763ebc72f45c0d086875f6acf88b48d7f39eb23/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c763ebc72f45c0d086875f6acf88b48d7f39eb23/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ffn_queries.rs?ref=c763ebc72f45c0d086875f6acf88b48d7f39eb23", "patch": "@@ -25,12 +25,10 @@ pub fn is_parent_const_impl_raw(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n /// report whether said intrinsic has a `rustc_const_{un,}stable` attribute. Otherwise, return\n /// `Constness::NotConst`.\n fn constness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::Constness {\n-    let def_id = def_id.expect_local();\n-    let node = tcx.hir().get_by_def_id(def_id);\n-\n-    match node {\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n+    match tcx.hir().get(hir_id) {\n         hir::Node::Ctor(_) => hir::Constness::Const,\n-        hir::Node::Item(hir::Item { kind: hir::ItemKind::Impl(impl_), .. }) => impl_.constness,\n+\n         hir::Node::ForeignItem(hir::ForeignItem { kind: hir::ForeignItemKind::Fn(..), .. }) => {\n             // Intrinsics use `rustc_const_{un,}stable` attributes to indicate constness. All other\n             // foreign items cannot be evaluated at compile-time.\n@@ -41,20 +39,62 @@ fn constness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::Constness {\n             };\n             if is_const { hir::Constness::Const } else { hir::Constness::NotConst }\n         }\n-        _ => {\n-            if let Some(fn_kind) = node.fn_kind() {\n-                if fn_kind.constness() == hir::Constness::Const {\n-                    return hir::Constness::Const;\n-                }\n \n-                // If the function itself is not annotated with `const`, it may still be a `const fn`\n-                // if it resides in a const trait impl.\n-                let is_const = is_parent_const_impl_raw(tcx, def_id);\n-                if is_const { hir::Constness::Const } else { hir::Constness::NotConst }\n-            } else {\n-                hir::Constness::NotConst\n+        hir::Node::TraitItem(hir::TraitItem { kind: hir::TraitItemKind::Fn(..), .. })\n+            if tcx.is_const_default_method(def_id) =>\n+        {\n+            hir::Constness::Const\n+        }\n+\n+        hir::Node::Item(hir::Item { kind: hir::ItemKind::Const(..), .. })\n+        | hir::Node::Item(hir::Item { kind: hir::ItemKind::Static(..), .. })\n+        | hir::Node::TraitItem(hir::TraitItem { kind: hir::TraitItemKind::Const(..), .. })\n+        | hir::Node::AnonConst(_)\n+        | hir::Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Const(..), .. })\n+        | hir::Node::ImplItem(hir::ImplItem {\n+            kind:\n+                hir::ImplItemKind::Fn(\n+                    hir::FnSig {\n+                        header: hir::FnHeader { constness: hir::Constness::Const, .. },\n+                        ..\n+                    },\n+                    ..,\n+                ),\n+            ..\n+        }) => hir::Constness::Const,\n+\n+        hir::Node::ImplItem(hir::ImplItem {\n+            kind: hir::ImplItemKind::Type(..) | hir::ImplItemKind::Fn(..),\n+            ..\n+        }) => {\n+            let parent_hir_id = tcx.hir().get_parent_node(hir_id);\n+            match tcx.hir().get(parent_hir_id) {\n+                hir::Node::Item(hir::Item {\n+                    kind: hir::ItemKind::Impl(hir::Impl { constness, .. }),\n+                    ..\n+                }) => *constness,\n+                _ => span_bug!(\n+                    tcx.def_span(parent_hir_id.owner),\n+                    \"impl item's parent node is not an impl\",\n+                ),\n             }\n         }\n+\n+        hir::Node::Item(hir::Item {\n+            kind: hir::ItemKind::Fn(hir::FnSig { header: hir::FnHeader { constness, .. }, .. }, ..),\n+            ..\n+        })\n+        | hir::Node::TraitItem(hir::TraitItem {\n+            kind:\n+                hir::TraitItemKind::Fn(hir::FnSig { header: hir::FnHeader { constness, .. }, .. }, ..),\n+            ..\n+        })\n+        | hir::Node::Item(hir::Item {\n+            kind: hir::ItemKind::Impl(hir::Impl { constness, .. }),\n+            ..\n+        }) => *constness,\n+\n+        _ => hir::Constness::NotConst,\n     }\n }\n "}, {"sha": "68119598285c5978421d6ade2ae3081b046cbb07", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 41, "deletions": 15, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c763ebc72f45c0d086875f6acf88b48d7f39eb23/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c763ebc72f45c0d086875f6acf88b48d7f39eb23/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=c763ebc72f45c0d086875f6acf88b48d7f39eb23", "patch": "@@ -1059,6 +1059,43 @@ fn should_encode_const(def_kind: DefKind) -> bool {\n     }\n }\n \n+fn should_encode_constness(def_kind: DefKind) -> bool {\n+    match def_kind {\n+        DefKind::Struct\n+        | DefKind::Union\n+        | DefKind::Enum\n+        | DefKind::Trait\n+        | DefKind::AssocTy\n+        | DefKind::Fn\n+        | DefKind::Const\n+        | DefKind::Static(..)\n+        | DefKind::Ctor(..)\n+        | DefKind::AssocFn\n+        | DefKind::AssocConst\n+        | DefKind::AnonConst\n+        | DefKind::InlineConst\n+        | DefKind::OpaqueTy\n+        | DefKind::ImplTraitPlaceholder\n+        | DefKind::Impl\n+        | DefKind::Closure\n+        | DefKind::Generator\n+        | DefKind::TyAlias => true,\n+        DefKind::Variant\n+        | DefKind::TraitAlias\n+        | DefKind::ForeignTy\n+        | DefKind::Field\n+        | DefKind::TyParam\n+        | DefKind::Mod\n+        | DefKind::ForeignMod\n+        | DefKind::ConstParam\n+        | DefKind::Macro(..)\n+        | DefKind::Use\n+        | DefKind::LifetimeParam\n+        | DefKind::GlobalAsm\n+        | DefKind::ExternCrate => false,\n+    }\n+}\n+\n fn should_encode_trait_impl_trait_tys<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n     if tcx.def_kind(def_id) != DefKind::AssocFn {\n         return false;\n@@ -1165,6 +1202,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             {\n                 record!(self.tables.trait_impl_trait_tys[def_id] <- table);\n             }\n+            if should_encode_constness(def_kind) {\n+                self.tables.constness.set(def_id.index, tcx.constness(def_id));\n+            }\n         }\n         let inherent_impls = tcx.crate_inherent_impls(());\n         for (def_id, implementations) in inherent_impls.inherent_impls.iter() {\n@@ -1192,7 +1232,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         };\n \n         record!(self.tables.variant_data[def_id] <- data);\n-        self.tables.constness.set(def_id.index, hir::Constness::Const);\n         record_array!(self.tables.children[def_id] <- variant.fields.iter().map(|f| {\n             assert!(f.did.is_local());\n             f.did.index\n@@ -1220,7 +1259,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         };\n \n         record!(self.tables.variant_data[def_id] <- data);\n-        self.tables.constness.set(def_id.index, hir::Constness::Const);\n         if variant.ctor_kind == CtorKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n         }\n@@ -1284,7 +1322,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n         record!(self.tables.repr_options[def_id] <- adt_def.repr());\n         record!(self.tables.variant_data[def_id] <- data);\n-        self.tables.constness.set(def_id.index, hir::Constness::Const);\n         if variant.ctor_kind == CtorKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n         }\n@@ -1320,7 +1357,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     }\n                 };\n                 self.tables.asyncness.set(def_id.index, m_sig.header.asyncness);\n-                self.tables.constness.set(def_id.index, hir::Constness::NotConst);\n             }\n             ty::AssocKind::Type => {\n                 self.encode_explicit_item_bounds(def_id);\n@@ -1345,13 +1381,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 let hir::ImplItemKind::Fn(ref sig, body) = ast_item.kind else { bug!() };\n                 self.tables.asyncness.set(def_id.index, sig.header.asyncness);\n                 record_array!(self.tables.fn_arg_names[def_id] <- self.tcx.hir().body_param_names(body));\n-                // Can be inside `impl const Trait`, so using sig.header.constness is not reliable\n-                let constness = if self.tcx.is_const_fn_raw(def_id) {\n-                    hir::Constness::Const\n-                } else {\n-                    hir::Constness::NotConst\n-                };\n-                self.tables.constness.set(def_id.index, constness);\n             }\n             ty::AssocKind::Const | ty::AssocKind::Type => {}\n         }\n@@ -1474,7 +1503,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             hir::ItemKind::Fn(ref sig, .., body) => {\n                 self.tables.asyncness.set(def_id.index, sig.header.asyncness);\n                 record_array!(self.tables.fn_arg_names[def_id] <- self.tcx.hir().body_param_names(body));\n-                self.tables.constness.set(def_id.index, sig.header.constness);\n             }\n             hir::ItemKind::Macro(ref macro_def, _) => {\n                 if macro_def.macro_rules {\n@@ -1495,7 +1523,6 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             hir::ItemKind::Struct(ref struct_def, _) => {\n                 let adt_def = self.tcx.adt_def(def_id);\n                 record!(self.tables.repr_options[def_id] <- adt_def.repr());\n-                self.tables.constness.set(def_id.index, hir::Constness::Const);\n \n                 // Encode def_ids for each field and method\n                 // for methods, write all the stuff get_trait_method\n@@ -1524,9 +1551,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n                 });\n             }\n-            hir::ItemKind::Impl(hir::Impl { defaultness, constness, .. }) => {\n+            hir::ItemKind::Impl(hir::Impl { defaultness, .. }) => {\n                 self.tables.impl_defaultness.set(def_id.index, *defaultness);\n-                self.tables.constness.set(def_id.index, *constness);\n \n                 let trait_ref = self.tcx.impl_trait_ref(def_id);\n                 if let Some(trait_ref) = trait_ref {"}, {"sha": "196d70614e7c93fdffa66a9040011d11e713509f", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 68, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/c763ebc72f45c0d086875f6acf88b48d7f39eb23/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c763ebc72f45c0d086875f6acf88b48d7f39eb23/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=c763ebc72f45c0d086875f6acf88b48d7f39eb23", "patch": "@@ -137,77 +137,10 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     let local_did = def_id.as_local();\n     let hir_id = local_did.map(|def_id| tcx.hir().local_def_id_to_hir_id(def_id));\n \n-    let constness = match hir_id {\n-        Some(hir_id) => match tcx.hir().get(hir_id) {\n-            hir::Node::TraitItem(hir::TraitItem { kind: hir::TraitItemKind::Fn(..), .. })\n-                if tcx.is_const_default_method(def_id) =>\n-            {\n-                hir::Constness::Const\n-            }\n-\n-            hir::Node::Item(hir::Item { kind: hir::ItemKind::Const(..), .. })\n-            | hir::Node::Item(hir::Item { kind: hir::ItemKind::Static(..), .. })\n-            | hir::Node::TraitItem(hir::TraitItem {\n-                kind: hir::TraitItemKind::Const(..), ..\n-            })\n-            | hir::Node::AnonConst(_)\n-            | hir::Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Const(..), .. })\n-            | hir::Node::ImplItem(hir::ImplItem {\n-                kind:\n-                    hir::ImplItemKind::Fn(\n-                        hir::FnSig {\n-                            header: hir::FnHeader { constness: hir::Constness::Const, .. },\n-                            ..\n-                        },\n-                        ..,\n-                    ),\n-                ..\n-            }) => hir::Constness::Const,\n-\n-            hir::Node::ImplItem(hir::ImplItem {\n-                kind: hir::ImplItemKind::Type(..) | hir::ImplItemKind::Fn(..),\n-                ..\n-            }) => {\n-                let parent_hir_id = tcx.hir().get_parent_node(hir_id);\n-                match tcx.hir().get(parent_hir_id) {\n-                    hir::Node::Item(hir::Item {\n-                        kind: hir::ItemKind::Impl(hir::Impl { constness, .. }),\n-                        ..\n-                    }) => *constness,\n-                    _ => span_bug!(\n-                        tcx.def_span(parent_hir_id.owner),\n-                        \"impl item's parent node is not an impl\",\n-                    ),\n-                }\n-            }\n-\n-            hir::Node::Item(hir::Item {\n-                kind:\n-                    hir::ItemKind::Fn(hir::FnSig { header: hir::FnHeader { constness, .. }, .. }, ..),\n-                ..\n-            })\n-            | hir::Node::TraitItem(hir::TraitItem {\n-                kind:\n-                    hir::TraitItemKind::Fn(\n-                        hir::FnSig { header: hir::FnHeader { constness, .. }, .. },\n-                        ..,\n-                    ),\n-                ..\n-            })\n-            | hir::Node::Item(hir::Item {\n-                kind: hir::ItemKind::Impl(hir::Impl { constness, .. }),\n-                ..\n-            }) => *constness,\n-\n-            _ => hir::Constness::NotConst,\n-        },\n-        None => hir::Constness::NotConst,\n-    };\n-\n     let unnormalized_env = ty::ParamEnv::new(\n         tcx.intern_predicates(&predicates),\n         traits::Reveal::UserFacing,\n-        constness,\n+        tcx.constness(def_id),\n     );\n \n     let body_id ="}]}