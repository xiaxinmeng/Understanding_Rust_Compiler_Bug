{"sha": "8384dd93571181047f0461379e7ec49e5305b178", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzODRkZDkzNTcxMTgxMDQ3ZjA0NjEzNzllN2VjNDllNTMwNWIxNzg=", "commit": {"author": {"name": "Brian Koropoff", "email": "bkoropoff@gmail.com", "date": "2014-10-30T04:45:35Z"}, "committer": {"name": "Brian Koropoff", "email": "bkoropoff@gmail.com", "date": "2014-10-30T04:45:35Z"}, "message": "Fix ICE translating array repeat expr of non-Copy type\n\nThe type checker permits an array repeat expression of non-Copy\ntype if the count is 1, but trans asserts on it prior to this\nchange.\n\nCloses #18425", "tree": {"sha": "c239e91aa627eeda4796181ef6a3908527b98c9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c239e91aa627eeda4796181ef6a3908527b98c9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8384dd93571181047f0461379e7ec49e5305b178", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8384dd93571181047f0461379e7ec49e5305b178", "html_url": "https://github.com/rust-lang/rust/commit/8384dd93571181047f0461379e7ec49e5305b178", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8384dd93571181047f0461379e7ec49e5305b178/comments", "author": {"login": "bkoropoff", "id": 2101303, "node_id": "MDQ6VXNlcjIxMDEzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/2101303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkoropoff", "html_url": "https://github.com/bkoropoff", "followers_url": "https://api.github.com/users/bkoropoff/followers", "following_url": "https://api.github.com/users/bkoropoff/following{/other_user}", "gists_url": "https://api.github.com/users/bkoropoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkoropoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkoropoff/subscriptions", "organizations_url": "https://api.github.com/users/bkoropoff/orgs", "repos_url": "https://api.github.com/users/bkoropoff/repos", "events_url": "https://api.github.com/users/bkoropoff/events{/privacy}", "received_events_url": "https://api.github.com/users/bkoropoff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bkoropoff", "id": 2101303, "node_id": "MDQ6VXNlcjIxMDEzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/2101303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkoropoff", "html_url": "https://github.com/bkoropoff", "followers_url": "https://api.github.com/users/bkoropoff/followers", "following_url": "https://api.github.com/users/bkoropoff/following{/other_user}", "gists_url": "https://api.github.com/users/bkoropoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkoropoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkoropoff/subscriptions", "organizations_url": "https://api.github.com/users/bkoropoff/orgs", "repos_url": "https://api.github.com/users/bkoropoff/repos", "events_url": "https://api.github.com/users/bkoropoff/events{/privacy}", "received_events_url": "https://api.github.com/users/bkoropoff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15dd90b6475c7a44c9b95044c91519d9464bbcc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/15dd90b6475c7a44c9b95044c91519d9464bbcc4", "html_url": "https://github.com/rust-lang/rust/commit/15dd90b6475c7a44c9b95044c91519d9464bbcc4"}], "stats": {"total": 35, "additions": 16, "deletions": 19}, "files": [{"sha": "60c38af3e72abc98a5f55748373994082cdde4f1", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8384dd93571181047f0461379e7ec49e5305b178/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8384dd93571181047f0461379e7ec49e5305b178/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=8384dd93571181047f0461379e7ec49e5305b178", "patch": "@@ -310,26 +310,23 @@ pub fn write_content<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                     return expr::trans_into(bcx, &**element, Ignore);\n                 }\n                 SaveIn(lldest) => {\n-                    let count = ty::eval_repeat_count(bcx.tcx(), &**count_expr);\n-                    if count == 0 {\n-                        return bcx;\n+                    match ty::eval_repeat_count(bcx.tcx(), &**count_expr) {\n+                        0 => bcx,\n+                        1 => expr::trans_into(bcx, &**element, SaveIn(lldest)),\n+                        count => {\n+                            let elem = unpack_datum!(bcx, expr::trans(bcx, &**element));\n+                            assert!(!ty::type_moves_by_default(bcx.tcx(), elem.ty));\n+\n+                            let bcx = iter_vec_loop(bcx, lldest, vt,\n+                                                    C_uint(bcx.ccx(), count),\n+                                                    |set_bcx, lleltptr, _| {\n+                                                        elem.shallow_copy(set_bcx, lleltptr)\n+                                                    });\n+\n+                            elem.add_clean_if_rvalue(bcx, element.id);\n+                            bcx\n+                        }\n                     }\n-\n-                    // Some cleanup would be required in the case in which panic happens\n-                    // during a copy. But given that copy constructors are not overridable,\n-                    // this can only happen as a result of OOM. So we just skip out on the\n-                    // cleanup since things would *probably* be broken at that point anyways.\n-\n-                    let elem = unpack_datum!(bcx, expr::trans(bcx, &**element));\n-                    assert!(!ty::type_moves_by_default(bcx.tcx(), elem.ty));\n-\n-                    let bcx = iter_vec_loop(bcx, lldest, vt,\n-                                  C_uint(bcx.ccx(), count), |set_bcx, lleltptr, _| {\n-                        elem.shallow_copy(set_bcx, lleltptr)\n-                    });\n-\n-                    elem.add_clean_if_rvalue(bcx, element.id);\n-                    bcx\n                 }\n             }\n         }"}]}