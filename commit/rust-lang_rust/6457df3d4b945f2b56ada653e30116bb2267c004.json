{"sha": "6457df3d4b945f2b56ada653e30116bb2267c004", "node_id": "C_kwDOAAsO6NoAKDY0NTdkZjNkNGI5NDVmMmI1NmFkYTY1M2UzMDExNmJiMjI2N2MwMDQ", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-10-20T09:35:28Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-10-25T08:41:23Z"}, "message": "ensure that compile-flags arguments are the last in ui tests\n\nBefore this commit, compiletest would add `-L path/to/aux` at the end of\nthe rustc flags, even after the custom ones set with the compile-flags\nheader comment. This made it impossible to check how rustc would behave\nwhen a flag requiring an argument was passed without the argument,\nbecause the argument would become `-L`.\n\nThis PR fixes that by adding the `-L path/to/aux` before the arguments\ndefined in compile-flags, at least for UI tests. Other test suites might\neither be fixed as well by this change, or still present the old\nbehavior.", "tree": {"sha": "f7caca91a2c28cc98e8d3d4fd04180c933053dad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7caca91a2c28cc98e8d3d4fd04180c933053dad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6457df3d4b945f2b56ada653e30116bb2267c004", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmNXoTMACgkQzXazX3c0\ndp4RLg/7BozEtSrRNSFT6YWIz24L1X1OArSFHR3WeMzgySawxeDSpjplgtW/oenr\nKgnKT9g/vr+CBqRcZoldZ4GGue4GwO1GUMF4f6MRPj/eoGZb/xWYVUKLV3ye8UPn\nsj6u6kiKrmX+w2daTGs7KTqdTHLmVxnZsZbF2SdYr2fgw/4qo0Sjg7cJHoERnAUh\nCXYhVMU2Fpwp/oCi89yBzcJn+VA+k2BiWm+DH3lnqngrHVWv7/Yh/hv6OZ86gU7D\nxTbrIGY3m63okjqjPd3RV8y7QaYh3lLvLFL4tl0NslwXTrBoqxDEpBF/v31yHUY8\nI59gPIwQqQfDjCRTREGoNvuZNMWe21AMILgIUmBHjRRsVuFC3YkREGwVpOU0B94b\nUMlMzwQ5Wq1fX9qvhvQhF2dH+/kqPbhfbt8h/0gyCKzWlu66UzPeZlE9VhEK/tNS\nox/6cJGaAXOgMkD83jhAPeQjtIi07sGGoCBFlznP/CDcc8fE8dn6IG3QuLtNE1F9\n8866uJSKsfOBneCVqA3bBuycqIZHUdiY1jYn6KmnYKk+cr6BjNrzG+68C4zQQJhd\nboU9EgwaullU3JhXz/Ro+x8Wg8JGi18fEh7VUP3REpilLpLM50WGyC3c44E8/zWc\nrtrBc3az4ZhgEZQrJpCzJ7AxCkLVp0kb7iUx2xHQvWwXU5EIRm0=\n=m2tk\n-----END PGP SIGNATURE-----", "payload": "tree f7caca91a2c28cc98e8d3d4fd04180c933053dad\nparent 31d754a1dfba4d091a05589459708f286d5a231e\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1666258528 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1666687283 +0200\n\nensure that compile-flags arguments are the last in ui tests\n\nBefore this commit, compiletest would add `-L path/to/aux` at the end of\nthe rustc flags, even after the custom ones set with the compile-flags\nheader comment. This made it impossible to check how rustc would behave\nwhen a flag requiring an argument was passed without the argument,\nbecause the argument would become `-L`.\n\nThis PR fixes that by adding the `-L path/to/aux` before the arguments\ndefined in compile-flags, at least for UI tests. Other test suites might\neither be fixed as well by this change, or still present the old\nbehavior.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6457df3d4b945f2b56ada653e30116bb2267c004", "html_url": "https://github.com/rust-lang/rust/commit/6457df3d4b945f2b56ada653e30116bb2267c004", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6457df3d4b945f2b56ada653e30116bb2267c004/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31d754a1dfba4d091a05589459708f286d5a231e", "url": "https://api.github.com/repos/rust-lang/rust/commits/31d754a1dfba4d091a05589459708f286d5a231e", "html_url": "https://github.com/rust-lang/rust/commit/31d754a1dfba4d091a05589459708f286d5a231e"}], "stats": {"total": 60, "additions": 42, "deletions": 18}, "files": [{"sha": "ab0d568ffa7ab726cdacb1b6e8ae381e0b0c8cd6", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 42, "deletions": 18, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/6457df3d4b945f2b56ada653e30116bb2267c004/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6457df3d4b945f2b56ada653e30116bb2267c004/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=6457df3d4b945f2b56ada653e30116bb2267c004", "patch": "@@ -1499,10 +1499,13 @@ impl<'test> TestCx<'test> {\n             _ => AllowUnused::No,\n         };\n \n-        let mut rustc =\n-            self.make_compile_args(&self.testpaths.file, output_file, emit_metadata, allow_unused);\n-\n-        rustc.arg(\"-L\").arg(&self.aux_output_dir_name());\n+        let rustc = self.make_compile_args(\n+            &self.testpaths.file,\n+            output_file,\n+            emit_metadata,\n+            allow_unused,\n+            LinkToAux::Yes,\n+        );\n \n         self.compose_and_run_compiler(rustc, None)\n     }\n@@ -1729,8 +1732,13 @@ impl<'test> TestCx<'test> {\n         // Create the directory for the stdout/stderr files.\n         create_dir_all(aux_cx.output_base_dir()).unwrap();\n         let input_file = &aux_testpaths.file;\n-        let mut aux_rustc =\n-            aux_cx.make_compile_args(input_file, aux_output, EmitMetadata::No, AllowUnused::No);\n+        let mut aux_rustc = aux_cx.make_compile_args(\n+            input_file,\n+            aux_output,\n+            EmitMetadata::No,\n+            AllowUnused::No,\n+            LinkToAux::No,\n+        );\n \n         for key in &aux_props.unset_rustc_env {\n             aux_rustc.env_remove(key);\n@@ -1869,6 +1877,7 @@ impl<'test> TestCx<'test> {\n         output_file: TargetLocation,\n         emit_metadata: EmitMetadata,\n         allow_unused: AllowUnused,\n+        link_to_aux: LinkToAux,\n     ) -> Command {\n         let is_aux = input_file.components().map(|c| c.as_os_str()).any(|c| c == \"auxiliary\");\n         let is_rustdoc = self.is_rustdoc() && !is_aux;\n@@ -2056,6 +2065,10 @@ impl<'test> TestCx<'test> {\n             rustc.arg(\"-Ctarget-feature=-crt-static\");\n         }\n \n+        if let LinkToAux::Yes = link_to_aux {\n+            rustc.arg(\"-L\").arg(self.aux_output_dir_name());\n+        }\n+\n         rustc.args(&self.props.compile_flags);\n \n         rustc\n@@ -2247,13 +2260,16 @@ impl<'test> TestCx<'test> {\n     // codegen tests (using FileCheck)\n \n     fn compile_test_and_save_ir(&self) -> ProcRes {\n-        let aux_dir = self.aux_output_dir_name();\n-\n         let output_file = TargetLocation::ThisDirectory(self.output_base_dir());\n         let input_file = &self.testpaths.file;\n-        let mut rustc =\n-            self.make_compile_args(input_file, output_file, EmitMetadata::No, AllowUnused::No);\n-        rustc.arg(\"-L\").arg(aux_dir).arg(\"--emit=llvm-ir\");\n+        let mut rustc = self.make_compile_args(\n+            input_file,\n+            output_file,\n+            EmitMetadata::No,\n+            AllowUnused::No,\n+            LinkToAux::Yes,\n+        );\n+        rustc.arg(\"--emit=llvm-ir\");\n \n         self.compose_and_run_compiler(rustc, None)\n     }\n@@ -2265,10 +2281,13 @@ impl<'test> TestCx<'test> {\n \n         let output_file = TargetLocation::ThisFile(output_path.clone());\n         let input_file = &self.testpaths.file;\n-        let mut rustc =\n-            self.make_compile_args(input_file, output_file, EmitMetadata::No, AllowUnused::No);\n-\n-        rustc.arg(\"-L\").arg(self.aux_output_dir_name());\n+        let mut rustc = self.make_compile_args(\n+            input_file,\n+            output_file,\n+            EmitMetadata::No,\n+            AllowUnused::No,\n+            LinkToAux::Yes,\n+        );\n \n         match self.props.assembly_output.as_ref().map(AsRef::as_ref) {\n             Some(\"emit-asm\") => {\n@@ -2409,8 +2428,8 @@ impl<'test> TestCx<'test> {\n             output_file,\n             EmitMetadata::No,\n             AllowUnused::Yes,\n+            LinkToAux::Yes,\n         );\n-        rustc.arg(\"-L\").arg(&new_rustdoc.aux_output_dir_name());\n         new_rustdoc.build_all_auxiliary(&mut rustc);\n \n         let proc_res = new_rustdoc.document(&compare_dir);\n@@ -3354,13 +3373,13 @@ impl<'test> TestCx<'test> {\n         if self.props.run_rustfix && self.config.compare_mode.is_none() {\n             // And finally, compile the fixed code and make sure it both\n             // succeeds and has no diagnostics.\n-            let mut rustc = self.make_compile_args(\n+            let rustc = self.make_compile_args(\n                 &self.testpaths.file.with_extension(UI_FIXED),\n                 TargetLocation::ThisFile(self.make_exe_name()),\n                 emit_metadata,\n                 AllowUnused::No,\n+                LinkToAux::Yes,\n             );\n-            rustc.arg(\"-L\").arg(&self.aux_output_dir_name());\n             let res = self.compose_and_run_compiler(rustc, None);\n             if !res.status.success() {\n                 self.fatal_proc_rec(\"failed to compile fixed code\", &res);\n@@ -3948,3 +3967,8 @@ enum AllowUnused {\n     Yes,\n     No,\n }\n+\n+enum LinkToAux {\n+    Yes,\n+    No,\n+}"}]}