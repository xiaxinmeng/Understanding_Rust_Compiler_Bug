{"sha": "61ffee738d505328fae14ac7c53bc388c69c5938", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxZmZlZTczOGQ1MDUzMjhmYWUxNGFjN2M1M2JjMzg4YzY5YzU5Mzg=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-04-20T17:39:15Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-04-20T20:51:55Z"}, "message": "Added Ascii type", "tree": {"sha": "d772347208e74953fd9da7e9e95263d134116bcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d772347208e74953fd9da7e9e95263d134116bcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61ffee738d505328fae14ac7c53bc388c69c5938", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61ffee738d505328fae14ac7c53bc388c69c5938", "html_url": "https://github.com/rust-lang/rust/commit/61ffee738d505328fae14ac7c53bc388c69c5938", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61ffee738d505328fae14ac7c53bc388c69c5938/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4357cbf2fac1e5a0d9723c1f0f9e94c831dc397c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4357cbf2fac1e5a0d9723c1f0f9e94c831dc397c", "html_url": "https://github.com/rust-lang/rust/commit/4357cbf2fac1e5a0d9723c1f0f9e94c831dc397c"}], "stats": {"total": 246, "additions": 243, "deletions": 3}, "files": [{"sha": "847936945825870f583b26b421bc44b11dfc10b5", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/61ffee738d505328fae14ac7c53bc388c69c5938/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ffee738d505328fae14ac7c53bc388c69c5938/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=61ffee738d505328fae14ac7c53bc388c69c5938", "patch": "@@ -40,9 +40,14 @@ pub use path::Path;\n pub use path::PosixPath;\n pub use path::WindowsPath;\n pub use ptr::Ptr;\n+// NOTE: Remove markers after snapshot\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+#[cfg(stage3)]\n+pub use str::{Ascii, AsciiCast, OwnedAsciiCast, ToStrAscii};\n pub use str::{StrSlice, OwnedStr};\n pub use to_bytes::IterBytes;\n-pub use to_str::ToStr;\n+pub use to_str::{ToStr, ToStrConsume};\n pub use tuple::{CopyableTuple, ImmutableTuple, ExtendedTupleOps};\n pub use vec::{CopyableVector, ImmutableVector};\n pub use vec::{ImmutableEqVector, ImmutableCopyableVector};"}, {"sha": "11301c9f1dbdbf1a0c4f1e4e5ff9b8b492d0b756", "filename": "src/libcore/str.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/61ffee738d505328fae14ac7c53bc388c69c5938/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ffee738d505328fae14ac7c53bc388c69c5938/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=61ffee738d505328fae14ac7c53bc388c69c5938", "patch": "@@ -17,6 +17,12 @@\n  * some heavy-duty uses, try std::rope.\n  */\n \n+// NOTE: Remove markers after snapshot\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+#[cfg(stage3)]\n+pub use self::ascii::{Ascii, AsciiCast, OwnedAsciiCast, ToStrAscii};\n+\n use at_vec;\n use cast;\n use char;\n@@ -34,6 +40,13 @@ use to_str::ToStr;\n \n #[cfg(notest)] use cmp::{Eq, Ord, Equiv, TotalEq};\n \n+// NOTE: Remove markers after snapshot\n+#[cfg(stage1)]\n+#[cfg(stage2)]\n+#[cfg(stage3)]\n+#[path = \"str/ascii.rs\"]\n+mod ascii;\n+\n /*\n Section: Creating a string\n */\n@@ -3347,15 +3360,15 @@ mod tests {\n     #[test]\n     fn test_shift_byte() {\n         let mut s = ~\"ABC\";\n-        let b = raw::shift_byte(&mut s);\n+        let b = unsafe{raw::shift_byte(&mut s)};\n         assert!((s == ~\"BC\"));\n         assert!((b == 65u8));\n     }\n \n     #[test]\n     fn test_pop_byte() {\n         let mut s = ~\"ABC\";\n-        let b = raw::pop_byte(&mut s);\n+        let b = unsafe{raw::pop_byte(&mut s)};\n         assert!((s == ~\"AB\"));\n         assert!((b == 67u8));\n     }"}, {"sha": "1e882daeef99176923849f7e4e4361ce2f3ed12b", "filename": "src/libcore/str/ascii.rs", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/rust-lang/rust/blob/61ffee738d505328fae14ac7c53bc388c69c5938/src%2Flibcore%2Fstr%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ffee738d505328fae14ac7c53bc388c69c5938/src%2Flibcore%2Fstr%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fascii.rs?ref=61ffee738d505328fae14ac7c53bc388c69c5938", "patch": "@@ -0,0 +1,216 @@\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use to_str::{ToStr,ToStrConsume};\n+use str;\n+use cast;\n+\n+#[cfg(test)]\n+pub struct Ascii { priv chr: u8 }\n+\n+/// Datatype to hold one ascii character. It is 8 bit long.\n+#[cfg(notest)]\n+#[deriving(Clone, Eq, Ord)]\n+pub struct Ascii { priv chr: u8 }\n+\n+pub impl Ascii {\n+    /// Converts a ascii character into a `u8`.\n+    fn to_byte(self) -> u8 {\n+        self.chr\n+    }\n+\n+    /// Converts a ascii character into a `char`.\n+    fn to_char(self) -> char {\n+        self.chr as char\n+    }\n+}\n+\n+impl ToStr for Ascii {\n+    fn to_str(&self) -> ~str { str::from_bytes(['\\'' as u8, self.chr, '\\'' as u8]) }\n+}\n+\n+/// Trait for converting into an ascii type.\n+pub trait AsciiCast<T> {\n+    /// Convert to an ascii type\n+    fn to_ascii(&self) -> T;\n+\n+    /// Check if convertible to ascii\n+    fn is_ascii(&self) -> bool;\n+}\n+\n+impl<'self> AsciiCast<&'self[Ascii]> for &'self [u8] {\n+    fn to_ascii(&self) -> &'self[Ascii] {\n+        assert!(self.is_ascii());\n+\n+        unsafe{ cast::transmute(*self) }\n+    }\n+\n+    fn is_ascii(&self) -> bool {\n+        for self.each |b| {\n+            if !b.is_ascii() { return false; }\n+        }\n+        true\n+    }\n+}\n+\n+impl<'self> AsciiCast<&'self[Ascii]> for &'self str {\n+    fn to_ascii(&self) -> &'self[Ascii] {\n+        assert!(self.is_ascii());\n+\n+        let (p,len): (*u8, uint) = unsafe{ cast::transmute(*self) };\n+        unsafe{ cast::transmute((p, len - 1))}\n+    }\n+\n+    fn is_ascii(&self) -> bool {\n+        for self.each |b| {\n+            if !b.is_ascii() { return false; }\n+        }\n+        true\n+    }\n+}\n+\n+impl AsciiCast<Ascii> for u8 {\n+    fn to_ascii(&self) -> Ascii {\n+        assert!(self.is_ascii());\n+        Ascii{ chr: *self }\n+    }\n+\n+    fn is_ascii(&self) -> bool {\n+        *self & 128 == 0u8\n+    }\n+}\n+\n+impl AsciiCast<Ascii> for char {\n+    fn to_ascii(&self) -> Ascii {\n+        assert!(self.is_ascii());\n+        Ascii{ chr: *self as u8 }\n+    }\n+\n+    fn is_ascii(&self) -> bool {\n+        *self - ('\\x7F' & *self) == '\\x00'\n+    }\n+}\n+\n+/// Trait for copyless casting to an ascii vector.\n+pub trait OwnedAsciiCast {\n+    /// Take ownership and cast to an ascii vector without trailing zero element.\n+    fn to_ascii_consume(self) -> ~[Ascii];\n+}\n+\n+impl OwnedAsciiCast for ~[u8] {\n+    fn to_ascii_consume(self) -> ~[Ascii] {\n+        assert!(self.is_ascii());\n+\n+        unsafe {cast::transmute(self)}\n+    }\n+}\n+\n+impl OwnedAsciiCast for ~str {\n+    fn to_ascii_consume(self) -> ~[Ascii] {\n+        let mut s = self;\n+        unsafe {\n+            str::raw::pop_byte(&mut s);\n+            cast::transmute(s)\n+        }\n+    }\n+}\n+\n+/// Trait for converting an ascii type to a string. Needed to convert `&[Ascii]` to `~str`\n+pub trait ToStrAscii {\n+    /// Convert to a string.\n+    fn to_str_ascii(&self) -> ~str;\n+}\n+\n+impl<'self> ToStrAscii for &'self [Ascii] {\n+    fn to_str_ascii(&self) -> ~str {\n+        let mut cpy = self.to_owned();\n+        cpy.push(0u8.to_ascii());\n+        unsafe {cast::transmute(cpy)}\n+    }\n+}\n+\n+impl ToStrConsume for ~[Ascii] {\n+    fn to_str_consume(self) -> ~str {\n+        let mut cpy = self;\n+        cpy.push(0u8.to_ascii());\n+        unsafe {cast::transmute(cpy)}\n+    }\n+}\n+\n+// NOTE: Remove stage0 marker after snapshot\n+#[cfg(and(test, not(stage0)))]\n+mod tests {\n+    use super::*;\n+    use to_str::{ToStr,ToStrConsume};\n+    use str;\n+    use cast;\n+\n+    macro_rules! v2ascii (\n+        ( [$($e:expr),*]) => ( [$(Ascii{chr:$e}),*]);\n+        (~[$($e:expr),*]) => (~[$(Ascii{chr:$e}),*]);\n+    )\n+\n+    #[test]\n+    fn test_ascii() {\n+        assert_eq!(65u8.to_ascii().to_byte(), 65u8);\n+        assert_eq!(65u8.to_ascii().to_char(), 'A');\n+        assert_eq!('A'.to_ascii().to_char(), 'A');\n+        assert_eq!('A'.to_ascii().to_byte(), 65u8);\n+    }\n+\n+    #[test]\n+    fn test_ascii_vec() {\n+        assert_eq!((&[40u8, 32u8, 59u8]).to_ascii(), v2ascii!([40, 32, 59]));\n+        assert_eq!(\"( ;\".to_ascii(),                 v2ascii!([40, 32, 59]));\n+        // FIXME: #5475 borrowchk error, owned vectors do not live long enough\n+        // if chained-from directly\n+        let v = ~[40u8, 32u8, 59u8]; assert_eq!(v.to_ascii(), v2ascii!([40, 32, 59]));\n+        let v = ~\"( ;\";              assert_eq!(v.to_ascii(), v2ascii!([40, 32, 59]));\n+    }\n+\n+    #[test]\n+    fn test_owned_ascii_vec() {\n+        // FIXME: #4318 Compiler crashes on moving self\n+        //assert_eq!(~\"( ;\".to_ascii_consume(), v2ascii!(~[40, 32, 59]));\n+        //assert_eq!(~[40u8, 32u8, 59u8].to_ascii_consume(), v2ascii!(~[40, 32, 59]));\n+        //assert_eq!(~\"( ;\".to_ascii_consume_with_null(), v2ascii!(~[40, 32, 59, 0]));\n+        //assert_eq!(~[40u8, 32u8, 59u8].to_ascii_consume_with_null(),\n+        //           v2ascii!(~[40, 32, 59, 0]));\n+    }\n+\n+    #[test]\n+    fn test_ascii_to_str() { assert_eq!(v2ascii!([40, 32, 59]).to_str_ascii(), ~\"( ;\"); }\n+\n+    #[test]\n+    fn test_ascii_to_str_consume() {\n+        // FIXME: #4318 Compiler crashes on moving self\n+        //assert_eq!(v2ascii!(~[40, 32, 59]).to_str_consume(), ~\"( ;\");\n+    }\n+\n+    #[test] #[should_fail]\n+    fn test_ascii_vec_fail_u8_slice()  { (&[127u8, 128u8, 255u8]).to_ascii(); }\n+\n+    #[test] #[should_fail]\n+    fn test_ascii_vec_fail_str_slice() { \"zo\u00e4\u534e\".to_ascii(); }\n+\n+    #[test] #[should_fail]\n+    fn test_ascii_fail_u8_slice() { 255u8.to_ascii(); }\n+\n+    #[test] #[should_fail]\n+    fn test_ascii_fail_char_slice() { '\u03bb'.to_ascii(); }\n+}\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "7f8e6915add16544423fa3e6592994649b33c221", "filename": "src/libcore/to_str.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/61ffee738d505328fae14ac7c53bc388c69c5938/src%2Flibcore%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61ffee738d505328fae14ac7c53bc388c69c5938/src%2Flibcore%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_str.rs?ref=61ffee738d505328fae14ac7c53bc388c69c5938", "patch": "@@ -20,6 +20,12 @@ pub trait ToStr {\n     fn to_str(&self) -> ~str;\n }\n \n+/// Trait for converting a type to a string, consuming it in the process.\n+pub trait ToStrConsume {\n+    // Cosume and convert to a string.\n+    fn to_str_consume(self) -> ~str;\n+}\n+\n impl ToStr for bool {\n     #[inline(always)]\n     fn to_str(&self) -> ~str { ::bool::to_str(*self) }"}]}