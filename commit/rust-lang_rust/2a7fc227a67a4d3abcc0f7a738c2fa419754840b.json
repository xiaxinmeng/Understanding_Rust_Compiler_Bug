{"sha": "2a7fc227a67a4d3abcc0f7a738c2fa419754840b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhN2ZjMjI3YTY3YTRkM2FiY2MwZjdhNzM4YzJmYTQxOTc1NDg0MGI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-10T21:28:33Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-15T20:24:46Z"}, "message": "introduce `FnDef` and `AdtDef` to `UserTypeAnnotation`", "tree": {"sha": "3b3fc978c60382c8f395b5ef1e297ecf96f8c890", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b3fc978c60382c8f395b5ef1e297ecf96f8c890"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a7fc227a67a4d3abcc0f7a738c2fa419754840b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a7fc227a67a4d3abcc0f7a738c2fa419754840b", "html_url": "https://github.com/rust-lang/rust/commit/2a7fc227a67a4d3abcc0f7a738c2fa419754840b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a7fc227a67a4d3abcc0f7a738c2fa419754840b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aed6e4a0834d11cad0bf5e1ebe065eabff1f405c", "url": "https://api.github.com/repos/rust-lang/rust/commits/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c", "html_url": "https://github.com/rust-lang/rust/commit/aed6e4a0834d11cad0bf5e1ebe065eabff1f405c"}], "stats": {"total": 72, "additions": 32, "deletions": 40}, "files": [{"sha": "b660187945cdbb26cf2298f5a21fd8ab92014ffa", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a7fc227a67a4d3abcc0f7a738c2fa419754840b/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a7fc227a67a4d3abcc0f7a738c2fa419754840b/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=2a7fc227a67a4d3abcc0f7a738c2fa419754840b", "patch": "@@ -597,6 +597,14 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for mir::UserTypeAnnotation<\n             mir::UserTypeAnnotation::Ty(ref ty) => {\n                 ty.hash_stable(hcx, hasher);\n             }\n+            mir::UserTypeAnnotation::FnDef(ref def_id, ref substs) => {\n+                def_id.hash_stable(hcx, hasher);\n+                substs.hash_stable(hcx, hasher);\n+            }\n+            mir::UserTypeAnnotation::AdtDef(ref def_id, ref substs) => {\n+                def_id.hash_stable(hcx, hasher);\n+                substs.hash_stable(hcx, hasher);\n+            }\n         }\n     }\n }"}, {"sha": "278a9bba17809d6ea23ec09ed8f07e7d5178c9bf", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a7fc227a67a4d3abcc0f7a738c2fa419754840b/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a7fc227a67a4d3abcc0f7a738c2fa419754840b/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=2a7fc227a67a4d3abcc0f7a738c2fa419754840b", "patch": "@@ -37,7 +37,7 @@ use syntax::ast::{self, Name};\n use syntax::symbol::InternedString;\n use syntax_pos::{Span, DUMMY_SP};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n-use ty::subst::{Subst, Substs};\n+use ty::subst::{CanonicalSubsts, Subst, Substs};\n use ty::{self, AdtDef, CanonicalTy, ClosureSubsts, GeneratorSubsts, Region, Ty, TyCtxt};\n use util::ppaux;\n \n@@ -2413,11 +2413,15 @@ pub struct Constant<'tcx> {\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub enum UserTypeAnnotation<'tcx> {\n     Ty(CanonicalTy<'tcx>),\n+    FnDef(DefId, CanonicalSubsts<'tcx>),\n+    AdtDef(&'tcx AdtDef, CanonicalSubsts<'tcx>),\n }\n \n EnumTypeFoldableImpl! {\n     impl<'tcx> TypeFoldable<'tcx> for UserTypeAnnotation<'tcx> {\n         (UserTypeAnnotation::Ty)(ty),\n+        (UserTypeAnnotation::FnDef)(def, substs),\n+        (UserTypeAnnotation::AdtDef)(def, substs),\n     }\n }\n "}, {"sha": "21dabd0c1bdba68f7b0437c40b840cd192e624b8", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2a7fc227a67a4d3abcc0f7a738c2fa419754840b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a7fc227a67a4d3abcc0f7a738c2fa419754840b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=2a7fc227a67a4d3abcc0f7a738c2fa419754840b", "patch": "@@ -71,9 +71,21 @@ pub(super) fn relate_type_and_user_type<'tcx>(\n         a, v, user_ty, locations\n     );\n \n-    let (b, _values) = match user_ty {\n+    let b = match user_ty {\n         UserTypeAnnotation::Ty(canonical_ty) => {\n-            infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &canonical_ty)\n+            let (ty, _) =\n+                infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &canonical_ty);\n+            ty\n+        }\n+        UserTypeAnnotation::FnDef(def_id, canonical_substs) => {\n+            let (substs, _) =\n+                infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &canonical_substs);\n+            infcx.tcx.mk_fn_def(def_id, substs)\n+        }\n+        UserTypeAnnotation::AdtDef(adt_def, canonical_substs) => {\n+            let (substs, _) =\n+                infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &canonical_substs);\n+            infcx.tcx.mk_adt(adt_def, substs)\n         }\n     };\n "}, {"sha": "984abb039265c2fd45a1f85c75abb18cae8e18f2", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2a7fc227a67a4d3abcc0f7a738c2fa419754840b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a7fc227a67a4d3abcc0f7a738c2fa419754840b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=2a7fc227a67a4d3abcc0f7a738c2fa419754840b", "patch": "@@ -295,13 +295,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                     let substs = cx.tables().node_substs(fun.hir_id);\n \n                     let user_ty = cx.tables().user_substs(fun.hir_id)\n-                        .map(|user_substs| {\n-                            UserTypeAnnotation::Ty(user_substs.unchecked_map(|user_substs| {\n-                                // Here, we just pair an `AdtDef` with the\n-                                // `user_substs`, so no new types etc are introduced.\n-                                cx.tcx().mk_adt(adt_def, user_substs)\n-                            }))\n-                        });\n+                        .map(|user_substs| UserTypeAnnotation::AdtDef(adt_def, user_substs));\n \n                     let field_refs = args.iter()\n                         .enumerate()\n@@ -774,14 +768,7 @@ fn user_substs_applied_to_def(\n         Def::Method(_) |\n         Def::StructCtor(_, CtorKind::Fn) |\n         Def::VariantCtor(_, CtorKind::Fn) =>\n-            Some(\n-                UserTypeAnnotation::Ty(cx.tables().user_substs(hir_id)?.unchecked_map(|user_substs| {\n-                        // Here, we just pair a `DefId` with the\n-                        // `user_substs`, so no new types etc are introduced.\n-                        cx.tcx().mk_fn_def(def.def_id(), user_substs)\n-                    }),\n-                )\n-            ),\n+            Some(UserTypeAnnotation::FnDef(def.def_id(), cx.tables().user_substs(hir_id)?)),\n \n         Def::Const(_def_id) |\n         Def::AssociatedConst(_def_id) =>"}, {"sha": "71cbac6b7c88e7d4d97b1735112779658f8d7b44", "filename": "src/librustc_mir/hair/util.rs", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2a7fc227a67a4d3abcc0f7a738c2fa419754840b/src%2Flibrustc_mir%2Fhair%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a7fc227a67a4d3abcc0f7a738c2fa419754840b/src%2Flibrustc_mir%2Fhair%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Futil.rs?ref=2a7fc227a67a4d3abcc0f7a738c2fa419754840b", "patch": "@@ -23,13 +23,7 @@ crate trait UserAnnotatedTyHelpers<'gcx: 'tcx, 'tcx> {\n         adt_def: &'tcx AdtDef,\n     ) -> Option<UserTypeAnnotation<'tcx>> {\n         let user_substs = self.tables().user_substs(hir_id)?;\n-        Some(UserTypeAnnotation::Ty(user_substs.unchecked_map(\n-            |user_substs| {\n-                // Here, we just pair an `AdtDef` with the\n-                // `user_substs`, so no new types etc are introduced.\n-                self.tcx().mk_adt(adt_def, user_substs)\n-            },\n-        )))\n+        Some(UserTypeAnnotation::AdtDef(adt_def, user_substs))\n     }\n \n     /// Looks up the type associated with this hir-id and applies the\n@@ -41,21 +35,8 @@ crate trait UserAnnotatedTyHelpers<'gcx: 'tcx, 'tcx> {\n     ) -> Option<UserTypeAnnotation<'tcx>> {\n         let user_substs = self.tables().user_substs(hir_id)?;\n         match &self.tables().node_id_to_type(hir_id).sty {\n-            ty::Adt(adt_def, _) => Some(UserTypeAnnotation::Ty(user_substs.unchecked_map(\n-                |user_substs| {\n-                    // Ok to call `unchecked_map` because we just pair an\n-                    // `AdtDef` with the `user_substs`, so no new types\n-                    // etc are introduced.\n-                    self.tcx().mk_adt(adt_def, user_substs)\n-                },\n-            ))),\n-            ty::FnDef(def_id, _) => Some(UserTypeAnnotation::Ty(user_substs.unchecked_map(\n-                |user_substs| {\n-                    // Here, we just pair a `DefId` with the\n-                    // `user_substs`, so no new types etc are introduced.\n-                    self.tcx().mk_fn_def(*def_id, user_substs)\n-                },\n-            ))),\n+            ty::Adt(adt_def, _) => Some(UserTypeAnnotation::AdtDef(adt_def, user_substs)),\n+            ty::FnDef(def_id, _) => Some(UserTypeAnnotation::FnDef(*def_id, user_substs)),\n             sty => bug!(\n                 \"sty: {:?} should not have user-substs {:?} recorded \",\n                 sty,"}]}