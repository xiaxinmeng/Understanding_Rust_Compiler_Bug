{"sha": "22be60b4f07bcfc8e72976b4d9f2cd1f9cae29d5", "node_id": "C_kwDOAAsO6NoAKDIyYmU2MGI0ZjA3YmNmYzhlNzI5NzZiNGQ5ZjJjZDFmOWNhZTI5ZDU", "commit": {"author": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-10-02T10:35:02Z"}, "committer": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-10-02T13:03:48Z"}, "message": "fix indentation", "tree": {"sha": "03dca895d69faa83dfddbe07dd653312a8222c0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03dca895d69faa83dfddbe07dd653312a8222c0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22be60b4f07bcfc8e72976b4d9f2cd1f9cae29d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22be60b4f07bcfc8e72976b4d9f2cd1f9cae29d5", "html_url": "https://github.com/rust-lang/rust/commit/22be60b4f07bcfc8e72976b4d9f2cd1f9cae29d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22be60b4f07bcfc8e72976b4d9f2cd1f9cae29d5/comments", "author": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a35734c172ba95a6d8758c7c5bb6601bcd3a5485", "url": "https://api.github.com/repos/rust-lang/rust/commits/a35734c172ba95a6d8758c7c5bb6601bcd3a5485", "html_url": "https://github.com/rust-lang/rust/commit/a35734c172ba95a6d8758c7c5bb6601bcd3a5485"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "825ec84b4a81241be619e8d8b5c4e64689b09ed5", "filename": "clippy_lints/src/manual_assert.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22be60b4f07bcfc8e72976b4d9f2cd1f9cae29d5/clippy_lints%2Fsrc%2Fmanual_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22be60b4f07bcfc8e72976b4d9f2cd1f9cae29d5/clippy_lints%2Fsrc%2Fmanual_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_assert.rs?ref=22be60b4f07bcfc8e72976b4d9f2cd1f9cae29d5", "patch": "@@ -56,9 +56,9 @@ impl<'tcx> LateLintPass<'tcx> for ManualAssert {\n                     comments += \"\\n\";\n                 }\n                 let (cond, not) = match cond.kind {\n-                     ExprKind::Unary(UnOp::Not, e) => (e, \"\"),\n-                     _ => (cond, \"!\"),\n-                 };\n+                    ExprKind::Unary(UnOp::Not, e) => (e, \"\"),\n+                    _ => (cond, \"!\"),\n+                };\n                 let cond_sugg = sugg::Sugg::hir_with_applicability(cx, cond, \"..\", &mut applicability).maybe_par();\n                 let sugg = format!(\"assert!({not}{cond_sugg}, {format_args_snip});\");\n                 // we show to the user the suggestion without the comments, but when applicating the fix, include the comments in the block"}]}