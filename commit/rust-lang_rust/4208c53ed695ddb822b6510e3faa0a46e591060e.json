{"sha": "4208c53ed695ddb822b6510e3faa0a46e591060e", "node_id": "C_kwDOAAsO6NoAKDQyMDhjNTNlZDY5NWRkYjgyMmI2NTEwZTNmYWEwYTQ2ZTU5MTA2MGU", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2022-05-05T11:41:43Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2022-05-05T11:41:43Z"}, "message": "exit out of `compare_number_of_generics` early", "tree": {"sha": "6866535b1c1ee6b5c6477f59a968f0b9ada3f6fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6866535b1c1ee6b5c6477f59a968f0b9ada3f6fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4208c53ed695ddb822b6510e3faa0a46e591060e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4208c53ed695ddb822b6510e3faa0a46e591060e", "html_url": "https://github.com/rust-lang/rust/commit/4208c53ed695ddb822b6510e3faa0a46e591060e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4208c53ed695ddb822b6510e3faa0a46e591060e/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6225e980bf0376986c10943216fb0b7779d29e58", "url": "https://api.github.com/repos/rust-lang/rust/commits/6225e980bf0376986c10943216fb0b7779d29e58", "html_url": "https://github.com/rust-lang/rust/commit/6225e980bf0376986c10943216fb0b7779d29e58"}], "stats": {"total": 79, "additions": 48, "deletions": 31}, "files": [{"sha": "c810be16bf846cb8ba89b98aea78b205878d0087", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4208c53ed695ddb822b6510e3faa0a46e591060e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4208c53ed695ddb822b6510e3faa0a46e591060e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=4208c53ed695ddb822b6510e3faa0a46e591060e", "patch": "@@ -579,6 +579,27 @@ fn compare_self_type<'tcx>(\n     Ok(())\n }\n \n+/// Checks that the number of generics on a given assoc item in a trait impl is the same\n+/// as the number of generics on the respective assoc item in the trait definition.\n+///\n+/// For example this code emits the errors in the following code:\n+/// ```\n+/// trait Trait {\n+///     fn foo();\n+///     type Assoc<T>;\n+/// }\n+///\n+/// impl Trait for () {\n+///     fn foo<T>() {}\n+///     //~^ error\n+///     type Assoc = u32;\n+///     //~^ error\n+/// }\n+/// ```\n+///\n+/// Notably this does not error on `foo<T>` implemented as `foo<const N: u8>` or\n+/// `foo<const N: u8>` implemented as `foo<const N: u32>`. This is handled in\n+/// [`compare_generic_param_kinds`]. This function also does not handle lifetime parameters\n fn compare_number_of_generics<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     impl_: &ty::AssocItem,\n@@ -589,6 +610,15 @@ fn compare_number_of_generics<'tcx>(\n     let trait_own_counts = tcx.generics_of(trait_.def_id).own_counts();\n     let impl_own_counts = tcx.generics_of(impl_.def_id).own_counts();\n \n+    // This avoids us erroring on `foo<T>` implemented as `foo<const N: u8>` as this is implemented\n+    // in `compare_generic_param_kinds` which will give a nicer error message than something like:\n+    // \"expected 1 type parameter, found 0 type parameters\"\n+    if (trait_own_counts.types + trait_own_counts.consts)\n+        == (impl_own_counts.types + impl_own_counts.consts)\n+    {\n+        return Ok(());\n+    }\n+\n     let matchings = [\n         (\"type\", trait_own_counts.types, impl_own_counts.types),\n         (\"const\", trait_own_counts.consts, impl_own_counts.consts),"}, {"sha": "fd57060d5e7c43dd6c083a2aa30393ec641dac42", "filename": "src/test/ui/const-generics/defaults/mismatched_ty_const_in_trait_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4208c53ed695ddb822b6510e3faa0a46e591060e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatched_ty_const_in_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4208c53ed695ddb822b6510e3faa0a46e591060e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatched_ty_const_in_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatched_ty_const_in_trait_impl.rs?ref=4208c53ed695ddb822b6510e3faa0a46e591060e", "patch": "@@ -3,7 +3,7 @@ trait Trait {\n }\n impl Trait for () {\n     fn foo<const M: u64>() {}\n-    //~^ error: method `foo` has an incompatble generic parameter for trait\n+    //~^ error: method `foo` has an incompatible generic parameter for trait\n }\n \n trait Other {\n@@ -19,7 +19,7 @@ trait Uwu {\n }\n impl Uwu for () {\n     fn baz<const N: i32>() {}\n-    //~^ error: method `baz` has an incompatible generic parameter for trait\n+    //~^ error: method `baz` has an incompatible const parameter type for trait\n }\n \n fn main() {}"}, {"sha": "cea8f4e50b0675b38955326531dec957be747cfc", "filename": "src/test/ui/const-generics/defaults/mismatched_ty_const_in_trait_impl.stderr", "status": "modified", "additions": 14, "deletions": 27, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4208c53ed695ddb822b6510e3faa0a46e591060e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatched_ty_const_in_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4208c53ed695ddb822b6510e3faa0a46e591060e/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatched_ty_const_in_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatched_ty_const_in_trait_impl.stderr?ref=4208c53ed695ddb822b6510e3faa0a46e591060e", "patch": "@@ -1,38 +1,26 @@\n-error[E0049]: method `foo` has 0 type parameters but its trait declaration has 1 type parameter\n+error[E0053]: method `foo` has an incompatible generic parameter for trait\n   --> $DIR/mismatched_ty_const_in_trait_impl.rs:5:12\n    |\n-LL |     fn foo<U>() {}\n-   |            - expected 1 type parameter\n-...\n LL |     fn foo<const M: u64>() {}\n-   |            ^^^^^^^^^^^^ found 0 type parameters\n-\n-error[E0049]: method `foo` has 1 const parameter but its trait declaration has 0 const parameters\n-  --> $DIR/mismatched_ty_const_in_trait_impl.rs:5:12\n+   |            ^^^^^^^^^^^^\n+   |\n+note: the trait impl specifies `M` is a const parameter of type `u64`, but the declaration in trait `Trait::foo` requires it is a type parameter\n+  --> $DIR/mismatched_ty_const_in_trait_impl.rs:2:12\n    |\n LL |     fn foo<U>() {}\n-   |            - expected 0 const parameters\n-...\n-LL |     fn foo<const M: u64>() {}\n-   |            ^^^^^^^^^^^^ found 1 const parameter\n+   |            ^\n \n-error[E0049]: method `bar` has 1 type parameter but its trait declaration has 0 type parameters\n+error[E0053]: method `bar` has an incompatible generic parameter for trait\n   --> $DIR/mismatched_ty_const_in_trait_impl.rs:13:12\n    |\n-LL |     fn bar<const M: u8>() {}\n-   |            ----------- expected 0 type parameters\n-...\n LL |     fn bar<T>() {}\n-   |            ^ found 1 type parameter\n-\n-error[E0049]: method `bar` has 0 const parameters but its trait declaration has 1 const parameter\n-  --> $DIR/mismatched_ty_const_in_trait_impl.rs:13:12\n+   |            ^\n+   |\n+note: the trait impl specifies `T` is a type parameter, but the declaration in trait `Other::bar` requires it is a const parameter of type `u8`\n+  --> $DIR/mismatched_ty_const_in_trait_impl.rs:10:12\n    |\n LL |     fn bar<const M: u8>() {}\n-   |            ----------- expected 1 const parameter\n-...\n-LL |     fn bar<T>() {}\n-   |            ^ found 0 const parameters\n+   |            ^^^^^^^^^^^\n \n error[E0053]: method `baz` has an incompatible const parameter type for trait\n   --> $DIR/mismatched_ty_const_in_trait_impl.rs:21:12\n@@ -46,7 +34,6 @@ note: the const parameter `N` has type `i32`, but the declaration in trait `Uwu:\n LL |     fn baz<const N: u32>() {}\n    |            ^^^^^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0049, E0053.\n-For more information about an error, try `rustc --explain E0049`.\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "138d332eed432e5ab6d1e04c07e2dcda64462948", "filename": "src/test/ui/generic-associated-types/const_params_have_right_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4208c53ed695ddb822b6510e3faa0a46e591060e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4208c53ed695ddb822b6510e3faa0a46e591060e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.rs?ref=4208c53ed695ddb822b6510e3faa0a46e591060e", "patch": "@@ -6,7 +6,7 @@ trait Trait {\n \n impl Trait for () {\n     type Foo<const N: u64> = u32;\n-    //~^ error: associated type `Foo` has an incompatible const parameter type\n+    //~^ error: type `Foo` has an incompatible const parameter type\n }\n \n fn main() {}"}, {"sha": "4ec6c19f54bcf214bb971a166d8ab572e32fcec5", "filename": "src/test/ui/generic-associated-types/const_params_have_right_type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4208c53ed695ddb822b6510e3faa0a46e591060e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4208c53ed695ddb822b6510e3faa0a46e591060e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.stderr?ref=4208c53ed695ddb822b6510e3faa0a46e591060e", "patch": "@@ -1,4 +1,4 @@\n-error[E0053]: associated type `Foo` has an incompatible const parameter type for trait\n+error[E0053]: type `Foo` has an incompatible const parameter type for trait\n   --> $DIR/const_params_have_right_type.rs:8:14\n    |\n LL |     type Foo<const N: u64> = u32;"}]}