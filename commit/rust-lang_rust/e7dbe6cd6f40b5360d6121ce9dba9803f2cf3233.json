{"sha": "e7dbe6cd6f40b5360d6121ce9dba9803f2cf3233", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZGJlNmNkNmY0MGI1MzYwZDYxMjFjZTlkYmE5ODAzZjJjZjMyMzM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-22T01:10:20Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-22T01:10:20Z"}, "message": "librustc: Register new snapshots", "tree": {"sha": "8cf121930f905b8b15af982773a7a3a35f93e502", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cf121930f905b8b15af982773a7a3a35f93e502"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7dbe6cd6f40b5360d6121ce9dba9803f2cf3233", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7dbe6cd6f40b5360d6121ce9dba9803f2cf3233", "html_url": "https://github.com/rust-lang/rust/commit/e7dbe6cd6f40b5360d6121ce9dba9803f2cf3233", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7dbe6cd6f40b5360d6121ce9dba9803f2cf3233/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec8345b18abef2fba6153ae999446e3f05b8275a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec8345b18abef2fba6153ae999446e3f05b8275a", "html_url": "https://github.com/rust-lang/rust/commit/ec8345b18abef2fba6153ae999446e3f05b8275a"}], "stats": {"total": 107, "additions": 8, "deletions": 99}, "files": [{"sha": "692a7947e200cce91d66f8844ff0004f80ba091f", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e7dbe6cd6f40b5360d6121ce9dba9803f2cf3233/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7dbe6cd6f40b5360d6121ce9dba9803f2cf3233/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=e7dbe6cd6f40b5360d6121ce9dba9803f2cf3233", "patch": "@@ -108,9 +108,6 @@ pub fn stream<T:Owned>() -> (Port<T>, Chan<T>) {\n \n // Add an inherent method so that imports of GenericChan are not\n // required.\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-#[cfg(stage3)]\n pub impl<T: Owned> Chan<T> {\n     fn send(&self, x: T) { chan_send(self, x) }\n     fn try_send(&self, x: T) -> bool { chan_try_send(self, x) }\n@@ -148,9 +145,6 @@ fn chan_try_send<T:Owned>(self: &Chan<T>, x: T) -> bool {\n }\n \n // Use an inherent impl so that imports are not required:\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-#[cfg(stage3)]\n pub impl<T: Owned> Port<T> {\n     fn recv(&self) -> T { port_recv(self) }\n     fn try_recv(&self) -> Option<T> { port_try_recv(self) }\n@@ -226,9 +220,6 @@ pub fn PortSet<T: Owned>() -> PortSet<T>{\n }\n \n // Use an inherent impl so that imports are not required:\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-#[cfg(stage3)]\n pub impl<T:Owned> PortSet<T> {\n     fn recv(&self) -> T { port_set_recv(self) }\n     fn try_recv(&self) -> Option<T> { port_set_try_recv(self) }\n@@ -302,9 +293,6 @@ pure fn port_set_peek<T:Owned>(self: &PortSet<T>) -> bool {\n /// A channel that can be shared between many senders.\n pub type SharedChan<T> = unstable::Exclusive<Chan<T>>;\n \n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-#[cfg(stage3)]\n pub impl<T: Owned> SharedChan<T> {\n     fn send(&self, x: T) { shared_chan_send(self, x) }\n     fn try_send(&self, x: T) -> bool { shared_chan_try_send(self, x) }"}, {"sha": "96457f76bb946d46df0dbfcec3201babbcef029c", "filename": "src/libcore/core.rc", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e7dbe6cd6f40b5360d6121ce9dba9803f2cf3233/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/e7dbe6cd6f40b5360d6121ce9dba9803f2cf3233/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=e7dbe6cd6f40b5360d6121ce9dba9803f2cf3233", "patch": "@@ -212,34 +212,10 @@ pub use to_str::ToStr;\n pub use clone::Clone;\n \n \n-/*\n- * Export the log levels as global constants. Higher levels mean\n- * more-verbosity. Error is the bottom level, default logging level is\n- * warn-and-below.\n- */\n-/// The error log level\n-#[cfg(stage0)]\n-pub const error : u32 = 1_u32;\n-/// The warning log level\n-#[cfg(stage0)]\n-pub const warn : u32 = 2_u32;\n-/// The info log level\n-#[cfg(stage0)]\n-pub const info : u32 = 3_u32;\n-/// The debug log level\n-#[cfg(stage0)]\n-pub const debug : u32 = 4_u32;\n-\n-\n /* Unsupported interfaces */\n \n // Private APIs\n pub mod unstable;\n-// NOTE: Remove after snapshot\n-#[cfg(stage0)]\n-pub mod private {\n-    pub use super::unstable::extfmt;\n-}\n \n /* For internal use, not exported */\n \n@@ -255,15 +231,6 @@ pub mod rt;\n // can be resolved within libcore.\n #[doc(hidden)]\n pub mod core {\n-    #[cfg(stage0)]\n-    pub const error : u32 = 1_u32;\n-    #[cfg(stage0)]\n-    pub const warn : u32 = 2_u32;\n-    #[cfg(stage0)]\n-    pub const info : u32 = 3_u32;\n-    #[cfg(stage0)]\n-    pub const debug : u32 = 4_u32;\n-\n     pub use cmp;\n     pub use condition;\n     pub use option;"}, {"sha": "ffa278bb8f28f9cb47ac63f855b60ea57eb4f043", "filename": "src/libcore/io.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7dbe6cd6f40b5360d6121ce9dba9803f2cf3233/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7dbe6cd6f40b5360d6121ce9dba9803f2cf3233/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=e7dbe6cd6f40b5360d6121ce9dba9803f2cf3233", "patch": "@@ -75,9 +75,6 @@ pub trait Reader {\n     fn tell(&self) -> uint;\n }\n \n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-#[cfg(stage3)]\n impl Reader for @Reader {\n     fn read(&self, bytes: &mut [u8], len: uint) -> uint {\n         self.read(bytes, len)\n@@ -658,9 +655,6 @@ pub trait Writer {\n     fn get_type(&self) -> WriterType;\n }\n \n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-#[cfg(stage3)]\n impl Writer for @Writer {\n     fn write(&self, v: &[const u8]) { self.write(v) }\n     fn seek(&self, a: int, b: SeekStyle) { self.seek(a, b) }"}, {"sha": "d7c1bc9b2d32dfa68306365afb6f8c99d2e249ef", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e7dbe6cd6f40b5360d6121ce9dba9803f2cf3233/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7dbe6cd6f40b5360d6121ce9dba9803f2cf3233/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=e7dbe6cd6f40b5360d6121ce9dba9803f2cf3233", "patch": "@@ -352,24 +352,6 @@ fn path_node_global(+ids: ~[ast::ident]) -> @ast::path {\n                  types: ~[] }\n }\n \n-#[cfg(stage0)]\n-fn mk_tests(cx: &TestCtxt) -> @ast::item {\n-\n-    let ext_cx = cx.ext_cx;\n-\n-    // The vector of test_descs for this crate\n-    let test_descs = mk_test_descs(cx);\n-\n-    (quote_item!(\n-        pub const tests : &static/[self::std::test::TestDescAndFn] =\n-            $test_descs\n-        ;\n-    )).get()\n-}\n-\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-#[cfg(stage3)]\n fn mk_tests(cx: &TestCtxt) -> @ast::item {\n \n     let ext_cx = cx.ext_cx;"}, {"sha": "af3464c94a8aef88e48ae1f1bca39cc27d742ca1", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e7dbe6cd6f40b5360d6121ce9dba9803f2cf3233/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7dbe6cd6f40b5360d6121ce9dba9803f2cf3233/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=e7dbe6cd6f40b5360d6121ce9dba9803f2cf3233", "patch": "@@ -1085,15 +1085,6 @@ fn trans_lvalue_unadjusted(bcx: block, expr: @ast::expr) -> DatumBlock {\n             ast::def_const(did) => {\n                 let const_ty = expr_ty(bcx, ref_expr);\n \n-                #[cfg(stage0)]\n-                fn get_did(_ccx: @CrateContext, did: ast::def_id)\n-                    -> ast::def_id {\n-                    did\n-                }\n-\n-                #[cfg(stage1)]\n-                #[cfg(stage2)]\n-                #[cfg(stage3)]\n                 fn get_did(ccx: @CrateContext, did: ast::def_id)\n                     -> ast::def_id {\n                     if did.crate != ast::local_crate {\n@@ -1103,24 +1094,6 @@ fn trans_lvalue_unadjusted(bcx: block, expr: @ast::expr) -> DatumBlock {\n                     }\n                 }\n \n-                #[cfg(stage0)]\n-                fn get_val(bcx: block, did: ast::def_id, const_ty: ty::t)\n-                    -> ValueRef {\n-                    let ccx = bcx.ccx();\n-                    if did.crate == ast::local_crate {\n-                        // The LLVM global has the type of its initializer,\n-                        // which may not be equal to the enum's type for\n-                        // non-C-like enums.\n-                        PointerCast(bcx, base::get_item_val(ccx, did.node),\n-                                    T_ptr(type_of(bcx.ccx(), const_ty)))\n-                    } else {\n-                        base::trans_external_path(ccx, did, const_ty)\n-                    }\n-                }\n-\n-                #[cfg(stage1)]\n-                #[cfg(stage2)]\n-                #[cfg(stage3)]\n                 fn get_val(bcx: block, did: ast::def_id, const_ty: ty::t)\n                     -> ValueRef {\n                     // The LLVM global has the type of its initializer,"}, {"sha": "314a601fb61acebf2c245240977b419349a0d5a9", "filename": "src/libstd/comm.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e7dbe6cd6f40b5360d6121ce9dba9803f2cf3233/src%2Flibstd%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7dbe6cd6f40b5360d6121ce9dba9803f2cf3233/src%2Flibstd%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm.rs?ref=e7dbe6cd6f40b5360d6121ce9dba9803f2cf3233", "patch": "@@ -26,9 +26,6 @@ pub struct DuplexStream<T, U> {\n }\n \n // Allow these methods to be used without import:\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-#[cfg(stage3)]\n pub impl<T:Owned,U:Owned> DuplexStream<T, U> {\n     fn send(&self, x: T) {\n         self.chan.send(x)"}, {"sha": "7116e32b28390effbfa4ff45764434214469f92a", "filename": "src/snapshots.txt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e7dbe6cd6f40b5360d6121ce9dba9803f2cf3233/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e7dbe6cd6f40b5360d6121ce9dba9803f2cf3233/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=e7dbe6cd6f40b5360d6121ce9dba9803f2cf3233", "patch": "@@ -1,3 +1,11 @@\n+S 2013-03-21 ed25a67\n+  freebsd-x86_64 5f0b08839ae3d1207808f0d57cbfdb00eff9c883\n+  linux-i386 54765a17c6b6d04a7013cada2a51d190462979b8\n+  linux-x86_64 c6cae795aecb8c4d5f17c73bfdd01d2b0ff32126\n+  macos-i386 bc05e17fc93187a1906f118ecdb258f09317f220\n+  macos-x86_64 c39838814f45e343d4f5754390aad22c41a34ba6\n+  winnt-i386 c4a858ef45ab2c9319e607640b2bbb3bc4b48093\n+\n S 2013-02-27 a6d9689\n   freebsd-x86_64 683f329fe589af854f9a375405468691d98015ac\n   linux-i386 22f5c2a91941735007ed804586fc0f0e82fc3601"}]}