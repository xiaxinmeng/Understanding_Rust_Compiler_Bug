{"sha": "eb6b6a877efe765c77700a30cd45f5b1e6365d62", "node_id": "C_kwDOAAsO6NoAKGViNmI2YTg3N2VmZTc2NWM3NzcwMGEzMGNkNDVmNWIxZTYzNjVkNjI", "commit": {"author": {"name": "David Koloski", "email": "dkoloski@google.com", "date": "2022-04-18T22:22:32Z"}, "committer": {"name": "David Koloski", "email": "dkoloski@google.com", "date": "2022-04-19T20:50:24Z"}, "message": "[fuchsia] Add implementation for `current_exe`\n\nThis implementation returns a best attempt at the current exe path. On\nfuchsia, fdio will always use `argv[0]` as the process name and if it is\nnot set then an error will be returned. Because this is not guaranteed\nto be the case, this implementation returns an error if `argv` does not\ncontain any elements.", "tree": {"sha": "cb145412311315434564d4193c207753850b162b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb145412311315434564d4193c207753850b162b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb6b6a877efe765c77700a30cd45f5b1e6365d62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb6b6a877efe765c77700a30cd45f5b1e6365d62", "html_url": "https://github.com/rust-lang/rust/commit/eb6b6a877efe765c77700a30cd45f5b1e6365d62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb6b6a877efe765c77700a30cd45f5b1e6365d62/comments", "author": null, "committer": null, "parents": [{"sha": "8305398d7ae6128811ec2b3223939bcd067530c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8305398d7ae6128811ec2b3223939bcd067530c2", "html_url": "https://github.com/rust-lang/rust/commit/8305398d7ae6128811ec2b3223939bcd067530c2"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "92bea9346d8f8ea888515778589c5d42c66d8ea8", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/eb6b6a877efe765c77700a30cd45f5b1e6365d62/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb6b6a877efe765c77700a30cd45f5b1e6365d62/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=eb6b6a877efe765c77700a30cd45f5b1e6365d62", "patch": "@@ -427,7 +427,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     crate::fs::read_to_string(\"sys:exe\").map(PathBuf::from)\n }\n \n-#[cfg(any(target_os = \"fuchsia\", target_os = \"l4re\"))]\n+#[cfg(target_os = \"l4re\")]\n pub fn current_exe() -> io::Result<PathBuf> {\n     use crate::io::ErrorKind;\n     Err(io::const_io_error!(ErrorKind::Unsupported, \"Not yet implemented!\"))\n@@ -451,6 +451,26 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     super::unsupported::unsupported()\n }\n \n+#[cfg(target_os = \"fuchsia\")]\n+pub fn current_exe() -> io::Result<PathBuf> {\n+    use crate::io::ErrorKind;\n+\n+    #[cfg(test)]\n+    use realstd::env;\n+\n+    #[cfg(not(test))]\n+    use crate::env;\n+\n+    let exe_path = env::args().next().ok_or(io::const_io_error!(\n+        ErrorKind::Uncategorized,\n+        \"an executable path was not found because no arguments were provided through argv\"\n+    ))?;\n+    let path = PathBuf::from(exe_path);\n+\n+    // Prepend the current working directory to the path if it's not absolute.\n+    if !path.is_absolute() { getcwd().map(|cwd| cwd.join(path)) } else { Ok(path) }\n+}\n+\n pub struct Env {\n     iter: vec::IntoIter<(OsString, OsString)>,\n }"}]}