{"sha": "5ff3299dd61ea5c5790c01819994c9d8fa6afc09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZjMyOTlkZDYxZWE1YzU3OTBjMDE4MTk5OTRjOWQ4ZmE2YWZjMDk=", "commit": {"author": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-03-26T17:30:59Z"}, "committer": {"name": "cynecx", "email": "me@cynecx.net", "date": "2021-03-26T17:30:59Z"}, "message": "syntax: return owned string instead of leaking string", "tree": {"sha": "e691982730fe01802f874066927b2ebbe8badc75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e691982730fe01802f874066927b2ebbe8badc75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ff3299dd61ea5c5790c01819994c9d8fa6afc09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ff3299dd61ea5c5790c01819994c9d8fa6afc09", "html_url": "https://github.com/rust-lang/rust/commit/5ff3299dd61ea5c5790c01819994c9d8fa6afc09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/comments", "author": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cynecx", "id": 5961244, "node_id": "MDQ6VXNlcjU5NjEyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5961244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cynecx", "html_url": "https://github.com/cynecx", "followers_url": "https://api.github.com/users/cynecx/followers", "following_url": "https://api.github.com/users/cynecx/following{/other_user}", "gists_url": "https://api.github.com/users/cynecx/gists{/gist_id}", "starred_url": "https://api.github.com/users/cynecx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cynecx/subscriptions", "organizations_url": "https://api.github.com/users/cynecx/orgs", "repos_url": "https://api.github.com/users/cynecx/repos", "events_url": "https://api.github.com/users/cynecx/events{/privacy}", "received_events_url": "https://api.github.com/users/cynecx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ecaad98e074c42dbf637a11afcb630aafffd7b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ecaad98e074c42dbf637a11afcb630aafffd7b3", "html_url": "https://github.com/rust-lang/rust/commit/4ecaad98e074c42dbf637a11afcb630aafffd7b3"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "3ff135f411d2317c01e403ccacc8608bc11f62fb", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=5ff3299dd61ea5c5790c01819994c9d8fa6afc09", "patch": "@@ -445,7 +445,7 @@ impl<'db> SemanticsImpl<'db> {\n                 }\n             };\n             gpl.lifetime_params()\n-                .find(|tp| tp.lifetime().as_ref().map(|lt| lt.text()) == Some(text))\n+                .find(|tp| tp.lifetime().as_ref().map(|lt| lt.text()).as_ref() == Some(&text))\n         })?;\n         let src = self.find_file(lifetime_param.syntax().clone()).with_value(lifetime_param);\n         ToDef::to_def(self, src)"}, {"sha": "cd691b1d2c4874d1d57e29869d5fbaa91087167d", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=5ff3299dd61ea5c5790c01819994c9d8fa6afc09", "patch": "@@ -75,14 +75,14 @@ impl AsName for ast::NameRef {\n     fn as_name(&self) -> Name {\n         match self.as_tuple_field() {\n             Some(idx) => Name::new_tuple_field(idx),\n-            None => Name::resolve(self.text()),\n+            None => Name::resolve(&self.text()),\n         }\n     }\n }\n \n impl AsName for ast::Name {\n     fn as_name(&self) -> Name {\n-        Name::resolve(self.text())\n+        Name::resolve(&self.text())\n     }\n }\n "}, {"sha": "5fb3e2d91c2917ae8fd6553a0b662a57b2fa357b", "filename": "crates/ide/src/diagnostics/fixes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs?ref=5ff3299dd61ea5c5790c01819994c9d8fa6afc09", "patch": "@@ -210,7 +210,7 @@ fn missing_record_expr_field_fix(\n     }\n     let new_field = make::record_field(\n         None,\n-        make::name(record_expr_field.field_name()?.text()),\n+        make::name(&record_expr_field.field_name()?.text()),\n         make::ty(&new_field_type.display_source_code(sema.db, module.into()).ok()?),\n     );\n "}, {"sha": "25f96222cd880aac00d4a6e660ad0755fac31220", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=5ff3299dd61ea5c5790c01819994c9d8fa6afc09", "patch": "@@ -416,7 +416,7 @@ fn get_string_representation(expr: &ast::Expr) -> Option<String> {\n     match expr {\n         ast::Expr::MethodCallExpr(method_call_expr) => {\n             let name_ref = method_call_expr.name_ref()?;\n-            match name_ref.text() {\n+            match name_ref.text().as_str() {\n                 \"clone\" => method_call_expr.receiver().map(|rec| rec.to_string()),\n                 name_ref => Some(name_ref.to_owned()),\n             }"}, {"sha": "5bbadb0f45bf50fd32e205c0c6151e55b1bdeadf", "filename": "crates/ide/src/syntax_highlighting/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs?ref=5ff3299dd61ea5c5790c01819994c9d8fa6afc09", "patch": "@@ -31,7 +31,7 @@ fn is_format_string(string: &ast::String) -> Option<()> {\n     let parent = string.syntax().parent()?;\n \n     let name = parent.parent().and_then(ast::MacroCall::cast)?.path()?.segment()?.name_ref()?;\n-    if !matches!(name.text(), \"format_args\" | \"format_args_nl\") {\n+    if !matches!(name.text().as_str(), \"format_args\" | \"format_args_nl\") {\n         return None;\n     }\n "}, {"sha": "a8d6355bdd2ff6f84b43e7245005e76c61dad17b", "filename": "crates/ide_assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=5ff3299dd61ea5c5790c01819994c9d8fa6afc09", "patch": "@@ -195,7 +195,7 @@ fn extract_struct_def(\n \n fn update_variant(rewriter: &mut SyntaxRewriter, variant: &ast::Variant) -> Option<()> {\n     let name = variant.name()?;\n-    let tuple_field = make::tuple_field(None, make::ty(name.text()));\n+    let tuple_field = make::tuple_field(None, make::ty(&name.text()));\n     let replacement = make::variant(\n         name,\n         Some(ast::FieldList::TupleFieldList(make::tuple_field_list(iter::once(tuple_field)))),"}, {"sha": "a9f71a70329ea4a6f00b9f1285db5dfa576efa1b", "filename": "crates/ide_assists/src/handlers/generate_enum_is_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_is_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_is_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_is_method.rs?ref=5ff3299dd61ea5c5790c01819994c9d8fa6afc09", "patch": "@@ -44,7 +44,7 @@ pub(crate) fn generate_enum_is_method(acc: &mut Assists, ctx: &AssistContext) ->\n     };\n \n     let enum_lowercase_name = to_lower_snake_case(&parent_enum.name()?.to_string());\n-    let fn_name = format!(\"is_{}\", &to_lower_snake_case(variant_name.text()));\n+    let fn_name = format!(\"is_{}\", &to_lower_snake_case(&variant_name.text()));\n \n     // Return early if we've found an existing new fn\n     let impl_def = find_struct_impl(&ctx, &parent_enum, &fn_name)?;"}, {"sha": "e2f572ba371608f4a11ea0cc4cad3b7d80c8f0a0", "filename": "crates/ide_assists/src/handlers/generate_enum_projection_method.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_projection_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_projection_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_enum_projection_method.rs?ref=5ff3299dd61ea5c5790c01819994c9d8fa6afc09", "patch": "@@ -132,7 +132,8 @@ fn generate_enum_projection_method(\n         ast::StructKind::Unit => return None,\n     };\n \n-    let fn_name = format!(\"{}_{}\", props.fn_name_prefix, &to_lower_snake_case(variant_name.text()));\n+    let fn_name =\n+        format!(\"{}_{}\", props.fn_name_prefix, &to_lower_snake_case(&variant_name.text()));\n \n     // Return early if we've found an existing new fn\n     let impl_def = find_struct_impl(&ctx, &parent_enum, &fn_name)?;"}, {"sha": "f872d20c8449c479d6d5721d9507372b1ba5019c", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=5ff3299dd61ea5c5790c01819994c9d8fa6afc09", "patch": "@@ -165,7 +165,7 @@ fn impl_def_from_trait(\n     }\n     let impl_def = make::impl_trait(\n         trait_path.clone(),\n-        make::path_unqualified(make::path_segment(make::name_ref(annotated_name.text()))),\n+        make::path_unqualified(make::path_segment(make::name_ref(&annotated_name.text()))),\n     );\n     let (impl_def, first_assoc_item) =\n         add_trait_assoc_items_to_impl(sema, trait_items, trait_, impl_def, target_scope);\n@@ -178,12 +178,13 @@ fn update_attribute(\n     trait_name: &ast::NameRef,\n     attr: &ast::Attr,\n ) {\n+    let trait_name = trait_name.text();\n     let new_attr_input = input\n         .syntax()\n         .descendants_with_tokens()\n         .filter(|t| t.kind() == IDENT)\n         .filter_map(|t| t.into_token().map(|t| t.text().to_string()))\n-        .filter(|t| t != trait_name.text())\n+        .filter(|t| t != &trait_name)\n         .collect::<Vec<_>>();\n     let has_more_derives = !new_attr_input.is_empty();\n "}, {"sha": "9de9e4dbd3d753bad5f992298d1753312476a447", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=5ff3299dd61ea5c5790c01819994c9d8fa6afc09", "patch": "@@ -246,7 +246,7 @@ fn invert_special_case(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Opti\n             let method = mce.name_ref()?;\n             let arg_list = mce.arg_list()?;\n \n-            let method = match method.text() {\n+            let method = match method.text().as_str() {\n                 \"is_some\" => \"is_none\",\n                 \"is_none\" => \"is_some\",\n                 \"is_ok\" => \"is_err\",\n@@ -442,7 +442,7 @@ fn generate_impl_text_inner(adt: &ast::Adt, trait_text: Option<&str>, code: &str\n         buf.push_str(trait_text);\n         buf.push_str(\" for \");\n     }\n-    buf.push_str(adt.name().unwrap().text());\n+    buf.push_str(&adt.name().unwrap().text());\n     if let Some(generic_params) = generic_params {\n         let lifetime_params = generic_params\n             .lifetime_params()"}, {"sha": "ab23dd7ac8704d89268a6ab3ee0b0d704916e69d", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=5ff3299dd61ea5c5790c01819994c9d8fa6afc09", "patch": "@@ -343,7 +343,7 @@ impl NameRefClass {\n                         hir::AssocItem::TypeAlias(it) => Some(*it),\n                         _ => None,\n                     })\n-                    .find(|alias| &alias.name(sema.db).to_string() == name_ref.text())\n+                    .find(|alias| &alias.name(sema.db).to_string() == &name_ref.text())\n                 {\n                     return Some(NameRefClass::Definition(Definition::ModuleDef(\n                         ModuleDef::TypeAlias(ty),"}, {"sha": "3deb0d159de5e426007f7368c3685b34512c8f41", "filename": "crates/ide_db/src/helpers/import_assets.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs?ref=5ff3299dd61ea5c5790c01819994c9d8fa6afc09", "patch": "@@ -288,7 +288,7 @@ fn path_applicable_imports(\n                 import_for_item(\n                     sema.db,\n                     mod_path,\n-                    unresolved_first_segment,\n+                    &unresolved_first_segment,\n                     &unresolved_qualifier,\n                     item,\n                 )"}, {"sha": "e681ced801e383262285652f5803d44bbbd8c51b", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=5ff3299dd61ea5c5790c01819994c9d8fa6afc09", "patch": "@@ -509,7 +509,7 @@ impl ImportGroup {\n             PathSegmentKind::SelfKw => ImportGroup::ThisModule,\n             PathSegmentKind::SuperKw => ImportGroup::SuperModule,\n             PathSegmentKind::CrateKw => ImportGroup::ThisCrate,\n-            PathSegmentKind::Name(name) => match name.text() {\n+            PathSegmentKind::Name(name) => match name.text().as_str() {\n                 \"std\" => ImportGroup::Std,\n                 \"core\" => ImportGroup::Std,\n                 _ => ImportGroup::ExternCrate,"}, {"sha": "541da4122f7a68bc0fad64f96580e4e85b1afa4d", "filename": "crates/ide_ssr/src/resolving.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fide_ssr%2Fsrc%2Fresolving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fide_ssr%2Fsrc%2Fresolving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_ssr%2Fsrc%2Fresolving.rs?ref=5ff3299dd61ea5c5790c01819994c9d8fa6afc09", "patch": "@@ -150,7 +150,7 @@ impl Resolver<'_, '_> {\n     fn path_contains_placeholder(&self, path: &ast::Path) -> bool {\n         if let Some(segment) = path.segment() {\n             if let Some(name_ref) = segment.name_ref() {\n-                if self.placeholders_by_stand_in.contains_key(name_ref.text()) {\n+                if self.placeholders_by_stand_in.contains_key(name_ref.text().as_str()) {\n                     return true;\n                 }\n             }"}, {"sha": "c6a7b99b7c9ab37f2a37b424836690dd31d448c1", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=5ff3299dd61ea5c5790c01819994c9d8fa6afc09", "patch": "@@ -268,14 +268,14 @@ pub fn arg_list(args: impl IntoIterator<Item = ast::Expr>) -> ast::ArgList {\n }\n \n pub fn ident_pat(name: ast::Name) -> ast::IdentPat {\n-    return from_text(name.text());\n+    return from_text(&name.text());\n \n     fn from_text(text: &str) -> ast::IdentPat {\n         ast_from_text(&format!(\"fn f({}: ())\", text))\n     }\n }\n pub fn ident_mut_pat(name: ast::Name) -> ast::IdentPat {\n-    return from_text(name.text());\n+    return from_text(&name.text());\n \n     fn from_text(text: &str) -> ast::IdentPat {\n         ast_from_text(&format!(\"fn f(mut {}: ())\", text))"}, {"sha": "6d7db5fb26ca8cd7fe033fa662b28780ee90ac2f", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ff3299dd61ea5c5790c01819994c9d8fa6afc09/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=5ff3299dd61ea5c5790c01819994c9d8fa6afc09", "patch": "@@ -12,19 +12,19 @@ use crate::{\n };\n \n impl ast::Lifetime {\n-    pub fn text(&self) -> &str {\n+    pub fn text(&self) -> SmolStr {\n         text_of_first_token(self.syntax())\n     }\n }\n \n impl ast::Name {\n-    pub fn text(&self) -> &str {\n+    pub fn text(&self) -> SmolStr {\n         text_of_first_token(self.syntax())\n     }\n }\n \n impl ast::NameRef {\n-    pub fn text(&self) -> &str {\n+    pub fn text(&self) -> SmolStr {\n         text_of_first_token(self.syntax())\n     }\n \n@@ -33,10 +33,8 @@ impl ast::NameRef {\n     }\n }\n \n-fn text_of_first_token(node: &SyntaxNode) -> &str {\n-    let t =\n-        node.green().children().next().and_then(|it| it.into_token()).unwrap().text().to_string();\n-    Box::leak(Box::new(t))\n+fn text_of_first_token(node: &SyntaxNode) -> SmolStr {\n+    node.green().children().next().and_then(|it| it.into_token()).unwrap().text().into()\n }\n \n pub enum Macro {\n@@ -378,7 +376,7 @@ impl fmt::Display for NameOrNameRef {\n }\n \n impl NameOrNameRef {\n-    pub fn text(&self) -> &str {\n+    pub fn text(&self) -> SmolStr {\n         match self {\n             NameOrNameRef::Name(name) => name.text(),\n             NameOrNameRef::NameRef(name_ref) => name_ref.text(),"}]}