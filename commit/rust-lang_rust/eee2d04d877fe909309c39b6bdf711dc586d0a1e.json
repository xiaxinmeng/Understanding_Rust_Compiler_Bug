{"sha": "eee2d04d877fe909309c39b6bdf711dc586d0a1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlZTJkMDRkODc3ZmU5MDkzMDljMzliNmJkZjcxMWRjNTg2ZDBhMWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-29T01:31:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-29T01:31:07Z"}, "message": "Auto merge of #36395 - durka:rangeinclusive-no-esi, r=alexcrichton\n\nremove ExactSizeIterator from RangeInclusive<{u,i}{32,size}>\n\nFixes #36386.\n\nThis is a [breaking-change] for nightly users of `#![feature(inclusive_range_syntax)]` and/or `#![feature(inclusive_range)]`.", "tree": {"sha": "22a6509d6a61cab58cf5b054e9bcc37d7c8e3736", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22a6509d6a61cab58cf5b054e9bcc37d7c8e3736"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eee2d04d877fe909309c39b6bdf711dc586d0a1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eee2d04d877fe909309c39b6bdf711dc586d0a1e", "html_url": "https://github.com/rust-lang/rust/commit/eee2d04d877fe909309c39b6bdf711dc586d0a1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eee2d04d877fe909309c39b6bdf711dc586d0a1e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86affcdf6c622278a89b73bb7f1b8ac00e970888", "url": "https://api.github.com/repos/rust-lang/rust/commits/86affcdf6c622278a89b73bb7f1b8ac00e970888", "html_url": "https://github.com/rust-lang/rust/commit/86affcdf6c622278a89b73bb7f1b8ac00e970888"}, {"sha": "bd1ae637f8c9ecb94614831c4e6642d09f508dfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd1ae637f8c9ecb94614831c4e6642d09f508dfb", "html_url": "https://github.com/rust-lang/rust/commit/bd1ae637f8c9ecb94614831c4e6642d09f508dfb"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "38afcb6a65e82f4029c328de62531cb3b769c7a0", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eee2d04d877fe909309c39b6bdf711dc586d0a1e/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eee2d04d877fe909309c39b6bdf711dc586d0a1e/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=eee2d04d877fe909309c39b6bdf711dc586d0a1e", "patch": "@@ -466,7 +466,11 @@ macro_rules! range_exact_iter_impl {\n     ($($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl ExactSizeIterator for ops::Range<$t> { }\n+    )*)\n+}\n \n+macro_rules! range_incl_exact_iter_impl {\n+    ($($t:ty)*) => ($(\n         #[unstable(feature = \"inclusive_range\",\n                    reason = \"recently added, follows RFC\",\n                    issue = \"28237\")]\n@@ -500,9 +504,12 @@ impl<A: Step> Iterator for ops::Range<A> where\n     }\n }\n \n-// Ranges of u64 and i64 are excluded because they cannot guarantee having\n-// a length <= usize::MAX, which is required by ExactSizeIterator.\n+// These macros generate `ExactSizeIterator` impls for various range types.\n+// Range<{u,i}64> and RangeInclusive<{u,i}{32,64,size}> are excluded\n+// because they cannot guarantee having a length <= usize::MAX, which is\n+// required by ExactSizeIterator.\n range_exact_iter_impl!(usize u8 u16 u32 isize i8 i16 i32);\n+range_incl_exact_iter_impl!(u8 u16 i8 i16);\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A: Step + Clone> DoubleEndedIterator for ops::Range<A> where"}, {"sha": "cfa9f6e36e9bcb37fce6b735ed61b6e3d925ff08", "filename": "src/test/run-pass/range_inclusive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eee2d04d877fe909309c39b6bdf711dc586d0a1e/src%2Ftest%2Frun-pass%2Frange_inclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eee2d04d877fe909309c39b6bdf711dc586d0a1e/src%2Ftest%2Frun-pass%2Frange_inclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frange_inclusive.rs?ref=eee2d04d877fe909309c39b6bdf711dc586d0a1e", "patch": "@@ -75,7 +75,7 @@ pub fn main() {\n \n     // test the size hints and emptying\n     let mut long = 0...255u8;\n-    let mut short = 42...42;\n+    let mut short = 42...42u8;\n     assert_eq!(long.size_hint(), (256, Some(256)));\n     assert_eq!(short.size_hint(), (1, Some(1)));\n     long.next();"}]}