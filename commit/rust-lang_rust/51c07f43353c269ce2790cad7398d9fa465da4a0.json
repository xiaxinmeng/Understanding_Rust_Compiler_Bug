{"sha": "51c07f43353c269ce2790cad7398d9fa465da4a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxYzA3ZjQzMzUzYzI2OWNlMjc5MGNhZDczOThkOWZhNDY1ZGE0YTA=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-05-06T07:17:09Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-05-06T07:17:09Z"}, "message": "Fix up lines exceeding max width", "tree": {"sha": "216841026917d6de9a3ed4d2d2f6a2d3779542ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/216841026917d6de9a3ed4d2d2f6a2d3779542ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51c07f43353c269ce2790cad7398d9fa465da4a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51c07f43353c269ce2790cad7398d9fa465da4a0", "html_url": "https://github.com/rust-lang/rust/commit/51c07f43353c269ce2790cad7398d9fa465da4a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51c07f43353c269ce2790cad7398d9fa465da4a0/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f05987211a76ea549f9d163f9084f88e4a52f8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f05987211a76ea549f9d163f9084f88e4a52f8f", "html_url": "https://github.com/rust-lang/rust/commit/5f05987211a76ea549f9d163f9084f88e4a52f8f"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "382e7e7cc92488806eb75e46758cb8a6c305679f", "filename": "src/config/mod.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/51c07f43353c269ce2790cad7398d9fa465da4a0/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51c07f43353c269ce2790cad7398d9fa465da4a0/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=51c07f43353c269ce2790cad7398d9fa465da4a0", "patch": "@@ -50,7 +50,8 @@ create_config! {\n     comment_width: usize, 80, false,\n         \"Maximum length of comments. No effect unless wrap_comments = true\";\n     normalize_comments: bool, false, true, \"Convert /* */ comments to // comments where possible\";\n-    license_template_path: String, String::default(), false, \"Beginning of file must match license template\";\n+    license_template_path: String, String::default(), false,\n+        \"Beginning of file must match license template\";\n     format_strings: bool, false, false, \"Format string literals where necessary\";\n \n     // Single line expressions and items\n@@ -239,16 +240,21 @@ mod test {\n         create_config! {\n             // Options that are used by the generated functions\n             max_width: usize, 100, true, \"Maximum width of each line\";\n-            use_small_heuristics: bool, true, false, \"Whether to use different formatting for items and \\\n-                expressions if they satisfy a heuristic notion of 'small'.\";\n-            license_template_path: String, String::default(), false, \"Beginning of file must match license template\";\n-            required_version: String, env!(\"CARGO_PKG_VERSION\").to_owned(), false, \"Require a specific version of rustfmt.\";\n-            ignore: IgnoreList, IgnoreList::default(), false, \"Skip formatting the specified files and directories.\";\n+            use_small_heuristics: bool, true, false,\n+                \"Whether to use different formatting for items and \\\n+                 expressions if they satisfy a heuristic notion of 'small'.\";\n+            license_template_path: String, String::default(), false,\n+                \"Beginning of file must match license template\";\n+            required_version: String, env!(\"CARGO_PKG_VERSION\").to_owned(), false,\n+                \"Require a specific version of rustfmt.\";\n+            ignore: IgnoreList, IgnoreList::default(), false,\n+                \"Skip formatting the specified files and directories.\";\n             verbose: bool, false, false, \"Use verbose output\";\n             file_lines: FileLines, FileLines::all(), false,\n                 \"Lines to format; this is not supported in rustfmt.toml, and can only be specified \\\n                     via the --file-lines option\";\n-            width_heuristics: WidthHeuristics, WidthHeuristics::scaled(100), false, \"'small' heuristic values\";\n+            width_heuristics: WidthHeuristics, WidthHeuristics::scaled(100), false,\n+                \"'small' heuristic values\";\n \n             // Options that are used by the tests\n             stable_option: bool, false, true, \"A stable option\";"}, {"sha": "272acef2b3a3cb1fba5de0b5a06af9645694f471", "filename": "src/config/options.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/51c07f43353c269ce2790cad7398d9fa465da4a0/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51c07f43353c269ce2790cad7398d9fa465da4a0/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=51c07f43353c269ce2790cad7398d9fa465da4a0", "patch": "@@ -191,7 +191,8 @@ configuration_option_enum! { WriteMode:\n     // Output the changed lines (for internal value only)\n     Modified,\n     // Checks if a diff can be generated. If so, rustfmt outputs a diff and quits with exit code 1.\n-    // This option is designed to be run in CI where a non-zero exit signifies non-standard code formatting.\n+    // This option is designed to be run in CI where a non-zero exit signifies non-standard code\n+    // formatting.\n     Check,\n     // Rustfmt shouldn't output anything formatting-like (e.g., emit a help message).\n     None,"}, {"sha": "bae548a4b2a587d6e73fde5de835cdc4d5988b5d", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/51c07f43353c269ce2790cad7398d9fa465da4a0/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51c07f43353c269ce2790cad7398d9fa465da4a0/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=51c07f43353c269ce2790cad7398d9fa465da4a0", "patch": "@@ -116,7 +116,8 @@ pub(crate) type FileRecord = (FileName, String);\n pub enum ErrorKind {\n     // Line has exceeded character limit (found, maximum)\n     #[fail(\n-        display = \"line formatted, but exceeded maximum width (maximum: {} (see `max_width` option), found: {})\",\n+        display = \"line formatted, but exceeded maximum width \\\n+                   (maximum: {} (see `max_width` option), found: {})\",\n         _0,\n         _1\n     )]"}, {"sha": "cbc42dae0a9b1a6c01e6dafe4a659f7a4e59db77", "filename": "src/macros.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51c07f43353c269ce2790cad7398d9fa465da4a0/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51c07f43353c269ce2790cad7398d9fa465da4a0/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=51c07f43353c269ce2790cad7398d9fa465da4a0", "patch": "@@ -1296,7 +1296,9 @@ impl MacroBranch {\n fn format_lazy_static(context: &RewriteContext, shape: Shape, ts: &TokenStream) -> Option<String> {\n     let mut result = String::with_capacity(1024);\n     let mut parser = new_parser_from_tts(context.parse_session, ts.trees().collect());\n-    let nested_shape = shape.block_indent(context.config.tab_spaces());\n+    let nested_shape = shape\n+        .block_indent(context.config.tab_spaces())\n+        .with_max_width(context.config);\n \n     result.push_str(\"lazy_static! {\");\n     result.push_str(&nested_shape.indent.to_string_with_newline(context.config));"}, {"sha": "06fd1e5a98f386e7a3a63a5bf620fab8319b96e8", "filename": "src/test/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/51c07f43353c269ce2790cad7398d9fa465da4a0/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51c07f43353c269ce2790cad7398d9fa465da4a0/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=51c07f43353c269ce2790cad7398d9fa465da4a0", "patch": "@@ -618,8 +618,9 @@ impl ConfigurationSection {\n         lazy_static! {\n             static ref CONFIG_NAME_REGEX: regex::Regex =\n                 regex::Regex::new(r\"^## `([^`]+)`\").expect(\"Failed creating configuration pattern\");\n-            static ref CONFIG_VALUE_REGEX: regex::Regex = regex::Regex::new(r#\"^#### `\"?([^`\"]+)\"?`\"#)\n-                .expect(\"Failed creating configuration value pattern\");\n+            static ref CONFIG_VALUE_REGEX: regex::Regex =\n+                regex::Regex::new(r#\"^#### `\"?([^`\"]+)\"?`\"#)\n+                    .expect(\"Failed creating configuration value pattern\");\n         }\n \n         loop {"}]}