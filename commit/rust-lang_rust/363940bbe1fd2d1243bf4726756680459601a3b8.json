{"sha": "363940bbe1fd2d1243bf4726756680459601a3b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2Mzk0MGJiZTFmZDJkMTI0M2JmNDcyNjc1NjY4MDQ1OTYwMWEzYjg=", "commit": {"author": {"name": "Aaron Kutch", "email": "aaronkutch@att.net", "date": "2019-06-14T17:24:38Z"}, "committer": {"name": "Aaron Kutch", "email": "aaronkutch@att.net", "date": "2019-06-14T17:24:38Z"}, "message": "Change `...` to `..=` where applicable", "tree": {"sha": "ab781f1bc4d470fe3b57d9a2886a44e1252ff558", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab781f1bc4d470fe3b57d9a2886a44e1252ff558"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/363940bbe1fd2d1243bf4726756680459601a3b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/363940bbe1fd2d1243bf4726756680459601a3b8", "html_url": "https://github.com/rust-lang/rust/commit/363940bbe1fd2d1243bf4726756680459601a3b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/363940bbe1fd2d1243bf4726756680459601a3b8/comments", "author": {"login": "AaronKutch", "id": 32419308, "node_id": "MDQ6VXNlcjMyNDE5MzA4", "avatar_url": "https://avatars.githubusercontent.com/u/32419308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AaronKutch", "html_url": "https://github.com/AaronKutch", "followers_url": "https://api.github.com/users/AaronKutch/followers", "following_url": "https://api.github.com/users/AaronKutch/following{/other_user}", "gists_url": "https://api.github.com/users/AaronKutch/gists{/gist_id}", "starred_url": "https://api.github.com/users/AaronKutch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AaronKutch/subscriptions", "organizations_url": "https://api.github.com/users/AaronKutch/orgs", "repos_url": "https://api.github.com/users/AaronKutch/repos", "events_url": "https://api.github.com/users/AaronKutch/events{/privacy}", "received_events_url": "https://api.github.com/users/AaronKutch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AaronKutch", "id": 32419308, "node_id": "MDQ6VXNlcjMyNDE5MzA4", "avatar_url": "https://avatars.githubusercontent.com/u/32419308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AaronKutch", "html_url": "https://github.com/AaronKutch", "followers_url": "https://api.github.com/users/AaronKutch/followers", "following_url": "https://api.github.com/users/AaronKutch/following{/other_user}", "gists_url": "https://api.github.com/users/AaronKutch/gists{/gist_id}", "starred_url": "https://api.github.com/users/AaronKutch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AaronKutch/subscriptions", "organizations_url": "https://api.github.com/users/AaronKutch/orgs", "repos_url": "https://api.github.com/users/AaronKutch/repos", "events_url": "https://api.github.com/users/AaronKutch/events{/privacy}", "received_events_url": "https://api.github.com/users/AaronKutch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc550d4295a654f9e7c621d957d81fbf1426c70b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc550d4295a654f9e7c621d957d81fbf1426c70b", "html_url": "https://github.com/rust-lang/rust/commit/fc550d4295a654f9e7c621d957d81fbf1426c70b"}], "stats": {"total": 90, "additions": 45, "deletions": 45}, "files": [{"sha": "a337c467131335cdbafe1f60951f31743f317ff4", "filename": "src/libcore/benches/ascii.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/363940bbe1fd2d1243bf4726756680459601a3b8/src%2Flibcore%2Fbenches%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/363940bbe1fd2d1243bf4726756680459601a3b8/src%2Flibcore%2Fbenches%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fascii.rs?ref=363940bbe1fd2d1243bf4726756680459601a3b8", "patch": "@@ -191,7 +191,7 @@ benches! {\n     fn case11_mask_mult_bool_match_range(bytes: &mut [u8]) {\n         fn is_ascii_lowercase(b: u8) -> bool {\n             match b {\n-                b'a'...b'z' => true,\n+                b'a'..=b'z' => true,\n                 _ => false\n             }\n         }\n@@ -203,7 +203,7 @@ benches! {\n     fn case12_mask_shifted_bool_match_range(bytes: &mut [u8]) {\n         fn is_ascii_lowercase(b: u8) -> bool {\n             match b {\n-                b'a'...b'z' => true,\n+                b'a'..=b'z' => true,\n                 _ => false\n             }\n         }\n@@ -215,7 +215,7 @@ benches! {\n     fn case13_subtract_shifted_bool_match_range(bytes: &mut [u8]) {\n         fn is_ascii_lowercase(b: u8) -> bool {\n             match b {\n-                b'a'...b'z' => true,\n+                b'a'..=b'z' => true,\n                 _ => false\n             }\n         }\n@@ -227,7 +227,7 @@ benches! {\n     fn case14_subtract_multiplied_bool_match_range(bytes: &mut [u8]) {\n         fn is_ascii_lowercase(b: u8) -> bool {\n             match b {\n-                b'a'...b'z' => true,\n+                b'a'..=b'z' => true,\n                 _ => false\n             }\n         }"}, {"sha": "0a870c67518c73a8fd4361971b1c35fc099db0f7", "filename": "src/libcore/char/convert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/363940bbe1fd2d1243bf4726756680459601a3b8/src%2Flibcore%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/363940bbe1fd2d1243bf4726756680459601a3b8/src%2Flibcore%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fconvert.rs?ref=363940bbe1fd2d1243bf4726756680459601a3b8", "patch": "@@ -123,7 +123,7 @@ impl From<char> for u32 {\n     }\n }\n \n-/// Maps a byte in 0x00...0xFF to a `char` whose code point has the same value, in U+0000 to U+00FF.\n+/// Maps a byte in 0x00..=0xFF to a `char` whose code point has the same value, in U+0000..=U+00FF.\n ///\n /// Unicode is designed such that this effectively decodes bytes\n /// with the character encoding that IANA calls ISO-8859-1."}, {"sha": "722c4c805168ffbb7682da6ab09da72c3a351714", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/363940bbe1fd2d1243bf4726756680459601a3b8/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/363940bbe1fd2d1243bf4726756680459601a3b8/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=363940bbe1fd2d1243bf4726756680459601a3b8", "patch": "@@ -1042,8 +1042,8 @@ impl char {\n \n     /// Checks if the value is an ASCII alphabetic character:\n     ///\n-    /// - U+0041 'A' ... U+005A 'Z', or\n-    /// - U+0061 'a' ... U+007A 'z'.\n+    /// - U+0041 'A' ..= U+005A 'Z', or\n+    /// - U+0061 'a' ..= U+007A 'z'.\n     ///\n     /// # Examples\n     ///\n@@ -1075,7 +1075,7 @@ impl char {\n     }\n \n     /// Checks if the value is an ASCII uppercase character:\n-    /// U+0041 'A' ... U+005A 'Z'.\n+    /// U+0041 'A' ..= U+005A 'Z'.\n     ///\n     /// # Examples\n     ///\n@@ -1107,7 +1107,7 @@ impl char {\n     }\n \n     /// Checks if the value is an ASCII lowercase character:\n-    /// U+0061 'a' ... U+007A 'z'.\n+    /// U+0061 'a' ..= U+007A 'z'.\n     ///\n     /// # Examples\n     ///\n@@ -1140,9 +1140,9 @@ impl char {\n \n     /// Checks if the value is an ASCII alphanumeric character:\n     ///\n-    /// - U+0041 'A' ... U+005A 'Z', or\n-    /// - U+0061 'a' ... U+007A 'z', or\n-    /// - U+0030 '0' ... U+0039 '9'.\n+    /// - U+0041 'A' ..= U+005A 'Z', or\n+    /// - U+0061 'a' ..= U+007A 'z', or\n+    /// - U+0030 '0' ..= U+0039 '9'.\n     ///\n     /// # Examples\n     ///\n@@ -1174,7 +1174,7 @@ impl char {\n     }\n \n     /// Checks if the value is an ASCII decimal digit:\n-    /// U+0030 '0' ... U+0039 '9'.\n+    /// U+0030 '0' ..= U+0039 '9'.\n     ///\n     /// # Examples\n     ///\n@@ -1207,9 +1207,9 @@ impl char {\n \n     /// Checks if the value is an ASCII hexadecimal digit:\n     ///\n-    /// - U+0030 '0' ... U+0039 '9', or\n-    /// - U+0041 'A' ... U+0046 'F', or\n-    /// - U+0061 'a' ... U+0066 'f'.\n+    /// - U+0030 '0' ..= U+0039 '9', or\n+    /// - U+0041 'A' ..= U+0046 'F', or\n+    /// - U+0061 'a' ..= U+0066 'f'.\n     ///\n     /// # Examples\n     ///\n@@ -1242,10 +1242,10 @@ impl char {\n \n     /// Checks if the value is an ASCII punctuation character:\n     ///\n-    /// - U+0021 ... U+002F `! \" # $ % & ' ( ) * + , - . /`, or\n-    /// - U+003A ... U+0040 `: ; < = > ? @`, or\n-    /// - U+005B ... U+0060 ``[ \\ ] ^ _ ` ``, or\n-    /// - U+007B ... U+007E `{ | } ~`\n+    /// - U+0021 ..= U+002F `! \" # $ % & ' ( ) * + , - . /`, or\n+    /// - U+003A ..= U+0040 `: ; < = > ? @`, or\n+    /// - U+005B ..= U+0060 ``[ \\ ] ^ _ ` ``, or\n+    /// - U+007B ..= U+007E `{ | } ~`\n     ///\n     /// # Examples\n     ///\n@@ -1277,7 +1277,7 @@ impl char {\n     }\n \n     /// Checks if the value is an ASCII graphic character:\n-    /// U+0021 '!' ... U+007E '~'.\n+    /// U+0021 '!' ..= U+007E '~'.\n     ///\n     /// # Examples\n     ///\n@@ -1358,7 +1358,7 @@ impl char {\n     }\n \n     /// Checks if the value is an ASCII control character:\n-    /// U+0000 NUL ... U+001F UNIT SEPARATOR, or U+007F DELETE.\n+    /// U+0000 NUL ..= U+001F UNIT SEPARATOR, or U+007F DELETE.\n     /// Note that most ASCII whitespace characters are control\n     /// characters, but SPACE is not.\n     ///"}, {"sha": "d70f55670116c9c0c662830d749b6e9763acecc4", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/363940bbe1fd2d1243bf4726756680459601a3b8/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/363940bbe1fd2d1243bf4726756680459601a3b8/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=363940bbe1fd2d1243bf4726756680459601a3b8", "patch": "@@ -4166,8 +4166,8 @@ impl u8 {\n \n     /// Checks if the value is an ASCII alphabetic character:\n     ///\n-    /// - U+0041 'A' ... U+005A 'Z', or\n-    /// - U+0061 'a' ... U+007A 'z'.\n+    /// - U+0041 'A' ..= U+005A 'Z', or\n+    /// - U+0061 'a' ..= U+007A 'z'.\n     ///\n     /// # Examples\n     ///\n@@ -4202,7 +4202,7 @@ impl u8 {\n     }\n \n     /// Checks if the value is an ASCII uppercase character:\n-    /// U+0041 'A' ... U+005A 'Z'.\n+    /// U+0041 'A' ..= U+005A 'Z'.\n     ///\n     /// # Examples\n     ///\n@@ -4237,7 +4237,7 @@ impl u8 {\n     }\n \n     /// Checks if the value is an ASCII lowercase character:\n-    /// U+0061 'a' ... U+007A 'z'.\n+    /// U+0061 'a' ..= U+007A 'z'.\n     ///\n     /// # Examples\n     ///\n@@ -4273,9 +4273,9 @@ impl u8 {\n \n     /// Checks if the value is an ASCII alphanumeric character:\n     ///\n-    /// - U+0041 'A' ... U+005A 'Z', or\n-    /// - U+0061 'a' ... U+007A 'z', or\n-    /// - U+0030 '0' ... U+0039 '9'.\n+    /// - U+0041 'A' ..= U+005A 'Z', or\n+    /// - U+0061 'a' ..= U+007A 'z', or\n+    /// - U+0030 '0' ..= U+0039 '9'.\n     ///\n     /// # Examples\n     ///\n@@ -4310,7 +4310,7 @@ impl u8 {\n     }\n \n     /// Checks if the value is an ASCII decimal digit:\n-    /// U+0030 '0' ... U+0039 '9'.\n+    /// U+0030 '0' ..= U+0039 '9'.\n     ///\n     /// # Examples\n     ///\n@@ -4346,9 +4346,9 @@ impl u8 {\n \n     /// Checks if the value is an ASCII hexadecimal digit:\n     ///\n-    /// - U+0030 '0' ... U+0039 '9', or\n-    /// - U+0041 'A' ... U+0046 'F', or\n-    /// - U+0061 'a' ... U+0066 'f'.\n+    /// - U+0030 '0' ..= U+0039 '9', or\n+    /// - U+0041 'A' ..= U+0046 'F', or\n+    /// - U+0061 'a' ..= U+0066 'f'.\n     ///\n     /// # Examples\n     ///\n@@ -4384,10 +4384,10 @@ impl u8 {\n \n     /// Checks if the value is an ASCII punctuation character:\n     ///\n-    /// - U+0021 ... U+002F `! \" # $ % & ' ( ) * + , - . /`, or\n-    /// - U+003A ... U+0040 `: ; < = > ? @`, or\n-    /// - U+005B ... U+0060 ``[ \\ ] ^ _ ` ``, or\n-    /// - U+007B ... U+007E `{ | } ~`\n+    /// - U+0021 ..= U+002F `! \" # $ % & ' ( ) * + , - . /`, or\n+    /// - U+003A ..= U+0040 `: ; < = > ? @`, or\n+    /// - U+005B ..= U+0060 ``[ \\ ] ^ _ ` ``, or\n+    /// - U+007B ..= U+007E `{ | } ~`\n     ///\n     /// # Examples\n     ///\n@@ -4422,7 +4422,7 @@ impl u8 {\n     }\n \n     /// Checks if the value is an ASCII graphic character:\n-    /// U+0021 '!' ... U+007E '~'.\n+    /// U+0021 '!' ..= U+007E '~'.\n     ///\n     /// # Examples\n     ///\n@@ -4509,7 +4509,7 @@ impl u8 {\n     }\n \n     /// Checks if the value is an ASCII control character:\n-    /// U+0000 NUL ... U+001F UNIT SEPARATOR, or U+007F DELETE.\n+    /// U+0000 NUL ..= U+001F UNIT SEPARATOR, or U+007F DELETE.\n     /// Note that most ASCII whitespace characters are control\n     /// characters, but SPACE is not.\n     ///"}, {"sha": "6ace4c4174b56b39821d29864c700851acd48fd9", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/363940bbe1fd2d1243bf4726756680459601a3b8/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/363940bbe1fd2d1243bf4726756680459601a3b8/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=363940bbe1fd2d1243bf4726756680459601a3b8", "patch": "@@ -994,7 +994,7 @@ pub enum PatKind {\n     /// A literal.\n     Lit(P<Expr>),\n \n-    /// A range pattern (e.g., `1...2` or `1..2`).\n+    /// A range pattern (e.g., `1..=2` or `1..2`).\n     Range(P<Expr>, P<Expr>, RangeEnd),\n \n     /// `[a, b, ..i, y, z]` is represented as:"}, {"sha": "07523825bb407e2e14d4b6c3370e52d9799c202d", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/363940bbe1fd2d1243bf4726756680459601a3b8/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/363940bbe1fd2d1243bf4726756680459601a3b8/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=363940bbe1fd2d1243bf4726756680459601a3b8", "patch": "@@ -428,7 +428,7 @@ enum Constructor<'tcx> {\n     Variant(DefId),\n     /// Literal values.\n     ConstantValue(&'tcx ty::Const<'tcx>),\n-    /// Ranges of literal values (`2...5` and `2..5`).\n+    /// Ranges of literal values (`2..=5` and `2..5`).\n     ConstantRange(u128, u128, Ty<'tcx>, RangeEnd),\n     /// Array patterns of length n.\n     Slice(u64),\n@@ -816,7 +816,7 @@ fn max_slice_length<'p, 'a: 'p, 'tcx: 'a, I>(\n /// `IntRange`s always store a contiguous range. This means that values are\n /// encoded such that `0` encodes the minimum value for the integer,\n /// regardless of the signedness.\n-/// For example, the pattern `-128...127i8` is encoded as `0..=255`.\n+/// For example, the pattern `-128..=127i8` is encoded as `0..=255`.\n /// This makes comparisons and arithmetic on interval endpoints much more\n /// straightforward. See `signed_bias` for details.\n ///"}, {"sha": "b7ad5d8ffabedda248e2b779e35775ed8a2a74d9", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/363940bbe1fd2d1243bf4726756680459601a3b8/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/363940bbe1fd2d1243bf4726756680459601a3b8/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=363940bbe1fd2d1243bf4726756680459601a3b8", "patch": "@@ -136,7 +136,7 @@ impl TargetDataLayout {\n                     }\n                     if bits >= i128_align_src && bits <= 128 {\n                         // Default alignment for i128 is decided by taking the alignment of\n-                        // largest-sized i{64...128}.\n+                        // largest-sized i{64..=128}.\n                         i128_align_src = bits;\n                         dl.i128_align = a;\n                     }"}, {"sha": "54cd4035a7ba41d19fb59f1102d2b8e43625e6e1", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/363940bbe1fd2d1243bf4726756680459601a3b8/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/363940bbe1fd2d1243bf4726756680459601a3b8/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=363940bbe1fd2d1243bf4726756680459601a3b8", "patch": "@@ -1181,7 +1181,7 @@ pub enum ExprKind {\n     Field(P<Expr>, Ident),\n     /// An indexing operation (e.g., `foo[2]`).\n     Index(P<Expr>, P<Expr>),\n-    /// A range (e.g., `1..2`, `1..`, `..2`, `1...2`, `1...`, `...2`).\n+    /// A range (e.g., `1..2`, `1..`, `..2`, `1..=2`, `..=2`).\n     Range(Option<P<Expr>>, Option<P<Expr>>, RangeLimits),\n \n     /// Variable reference, possibly containing `::` and/or type"}, {"sha": "fcecee8c57fc92b855fb675457466eb25d412bb7", "filename": "src/libsyntax/util/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/363940bbe1fd2d1243bf4726756680459601a3b8/src%2Flibsyntax%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/363940bbe1fd2d1243bf4726756680459601a3b8/src%2Flibsyntax%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser.rs?ref=363940bbe1fd2d1243bf4726756680459601a3b8", "patch": "@@ -234,7 +234,7 @@ pub const PREC_RESET: i8 = -100;\n pub const PREC_CLOSURE: i8 = -40;\n pub const PREC_JUMP: i8 = -30;\n pub const PREC_RANGE: i8 = -10;\n-// The range 2 ... 14 is reserved for AssocOp binary operator precedences.\n+// The range 2..=14 is reserved for AssocOp binary operator precedences.\n pub const PREC_PREFIX: i8 = 50;\n pub const PREC_POSTFIX: i8 = 60;\n pub const PREC_PAREN: i8 = 99;"}]}