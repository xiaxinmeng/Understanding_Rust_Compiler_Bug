{"sha": "ecdb7bcee855107f5edaf29a00dadeed3a23caaa", "node_id": "C_kwDOAAsO6NoAKGVjZGI3YmNlZTg1NTEwN2Y1ZWRhZjI5YTAwZGFkZWVkM2EyM2NhYWE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-16T23:19:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-16T23:19:37Z"}, "message": "Rollup merge of #108136 - eggyal:unmet_trait_alias_bound_on_generic_impl, r=compiler-errors\n\nDo not ICE on unmet trait alias impl bounds\n\nFixes #108132\n\nI've also added some documentation to the `impl_def_id` field of `DerivedObligationCause` to try and minimise the risk of such errors in future.\n\nr? `@compiler-errors`", "tree": {"sha": "3559ee59456ce51b06f653e5af93c35c56d8653b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3559ee59456ce51b06f653e5af93c35c56d8653b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecdb7bcee855107f5edaf29a00dadeed3a23caaa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj7roJCRBK7hj4Ov3rIwAAnhQIAGXJP5ispaJcVQq4q4oGmY7X\nxGJGHjj+baCtey3Z4eKgXqGpEJW2KiBuloaK6WQOWbvpW4Vm3rDuuGfL4ixahQbH\nZBe22TgD1X1gBwUjGjWSWiUOXEMJDYNEazb8FsHTKBVh7SQ373WsbkELP5Fw/s15\ns7lZy9qr9mxzrejXPGEg+xRxdUDFKbmYBU/5xU0bMDx7LSYeyTfZPSzR0ObY2Tlu\n3mfLKsQd//riO62VzXWQppp9atGS9bO34i9t772rxjywCgVXIXEMewpqaJz7lHxw\n9opcgOhvd4cwFmz2z2ANECn1dd2+c9GV1cVjZf9k89FD633izfX+xyzsnLx0TT8=\n=J5iR\n-----END PGP SIGNATURE-----\n", "payload": "tree 3559ee59456ce51b06f653e5af93c35c56d8653b\nparent e1e58fc1d3ba5d3de5b356f14722518f33f05028\nparent 55d449fe0ac07f1462bd62e062054cde310e7883\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1676589577 +0100\ncommitter GitHub <noreply@github.com> 1676589577 +0100\n\nRollup merge of #108136 - eggyal:unmet_trait_alias_bound_on_generic_impl, r=compiler-errors\n\nDo not ICE on unmet trait alias impl bounds\n\nFixes #108132\n\nI've also added some documentation to the `impl_def_id` field of `DerivedObligationCause` to try and minimise the risk of such errors in future.\n\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecdb7bcee855107f5edaf29a00dadeed3a23caaa", "html_url": "https://github.com/rust-lang/rust/commit/ecdb7bcee855107f5edaf29a00dadeed3a23caaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecdb7bcee855107f5edaf29a00dadeed3a23caaa/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1e58fc1d3ba5d3de5b356f14722518f33f05028", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1e58fc1d3ba5d3de5b356f14722518f33f05028", "html_url": "https://github.com/rust-lang/rust/commit/e1e58fc1d3ba5d3de5b356f14722518f33f05028"}, {"sha": "55d449fe0ac07f1462bd62e062054cde310e7883", "url": "https://api.github.com/repos/rust-lang/rust/commits/55d449fe0ac07f1462bd62e062054cde310e7883", "html_url": "https://github.com/rust-lang/rust/commit/55d449fe0ac07f1462bd62e062054cde310e7883"}], "stats": {"total": 72, "additions": 59, "deletions": 13}, "files": [{"sha": "0aa5b075d19741a57ee1d2f98d8f4b92ab768bff", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/adjust_fulfillment_errors.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ecdb7bcee855107f5edaf29a00dadeed3a23caaa/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecdb7bcee855107f5edaf29a00dadeed3a23caaa/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fadjust_fulfillment_errors.rs?ref=ecdb7bcee855107f5edaf29a00dadeed3a23caaa", "patch": "@@ -477,14 +477,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // This is the \"trait\" (meaning, the predicate \"proved\" by this `impl`) which provides the `Self` type we care about.\n         // For the purposes of this function, we hope that it is a `struct` type, and that our current `expr` is a literal of\n         // that struct type.\n-        let impl_trait_self_ref = if self.tcx.is_trait_alias(obligation.impl_def_id) {\n+        let impl_trait_self_ref = if self.tcx.is_trait_alias(obligation.impl_or_alias_def_id) {\n             self.tcx.mk_trait_ref(\n-                obligation.impl_def_id,\n-                ty::InternalSubsts::identity_for_item(self.tcx, obligation.impl_def_id),\n+                obligation.impl_or_alias_def_id,\n+                ty::InternalSubsts::identity_for_item(self.tcx, obligation.impl_or_alias_def_id),\n             )\n         } else {\n             self.tcx\n-                .impl_trait_ref(obligation.impl_def_id)\n+                .impl_trait_ref(obligation.impl_or_alias_def_id)\n                 .map(|impl_def| impl_def.skip_binder())\n                 // It is possible that this is absent. In this case, we make no progress.\n                 .ok_or(expr)?\n@@ -494,7 +494,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let impl_self_ty: Ty<'tcx> = impl_trait_self_ref.self_ty();\n \n         let impl_predicates: ty::GenericPredicates<'tcx> =\n-            self.tcx.predicates_of(obligation.impl_def_id);\n+            self.tcx.predicates_of(obligation.impl_or_alias_def_id);\n         let Some(impl_predicate_index) = obligation.impl_def_predicate_index else {\n             // We don't have the index, so we can only guess.\n             return Err(expr);"}, {"sha": "a805dad062eb7f317fc236aad0c665b8b8d81593", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecdb7bcee855107f5edaf29a00dadeed3a23caaa/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecdb7bcee855107f5edaf29a00dadeed3a23caaa/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=ecdb7bcee855107f5edaf29a00dadeed3a23caaa", "patch": "@@ -1576,7 +1576,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                                 traits::ImplDerivedObligation(Box::new(\n                                     traits::ImplDerivedObligationCause {\n                                         derived,\n-                                        impl_def_id,\n+                                        impl_or_alias_def_id: impl_def_id,\n                                         impl_def_predicate_index: None,\n                                         span,\n                                     },"}, {"sha": "ef30cd55c0ed086d8c0b6dfa00223b10ee425aac", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ecdb7bcee855107f5edaf29a00dadeed3a23caaa/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecdb7bcee855107f5edaf29a00dadeed3a23caaa/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=ecdb7bcee855107f5edaf29a00dadeed3a23caaa", "patch": "@@ -616,7 +616,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ObligationCauseCode::ImplDerivedObligation(data)\n                         if matches!(p.kind().skip_binder(), ty::PredicateKind::Clause(_)) =>\n                     {\n-                        Some((p, parent, data.impl_def_id, data))\n+                        Some((p, parent, data.impl_or_alias_def_id, data))\n                     }\n                     _ => None,\n                 })\n@@ -714,7 +714,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         );\n                     }\n                     Some(Node::Item(hir::Item {\n-                        ident, kind: hir::ItemKind::Trait(..), ..\n+                        ident,\n+                        kind: hir::ItemKind::Trait(..) | hir::ItemKind::TraitAlias(..),\n+                        ..\n                     })) => {\n                         skip_list.insert(p);\n                         let entry = spanned_predicates.entry(ident.span);"}, {"sha": "68b39c5f00fb181d4d797135bfee37a46331d425", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecdb7bcee855107f5edaf29a00dadeed3a23caaa/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecdb7bcee855107f5edaf29a00dadeed3a23caaa/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=ecdb7bcee855107f5edaf29a00dadeed3a23caaa", "patch": "@@ -158,7 +158,7 @@ impl<'tcx> Elaborator<'tcx> {\n                                 traits::ImplDerivedObligation(Box::new(\n                                     traits::ImplDerivedObligationCause {\n                                         derived,\n-                                        impl_def_id: data.def_id(),\n+                                        impl_or_alias_def_id: data.def_id(),\n                                         impl_def_predicate_index: Some(index),\n                                         span,\n                                     },"}, {"sha": "6231dd9b6f54a245e2b21f99805a23f0f806f204", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ecdb7bcee855107f5edaf29a00dadeed3a23caaa/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecdb7bcee855107f5edaf29a00dadeed3a23caaa/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=ecdb7bcee855107f5edaf29a00dadeed3a23caaa", "patch": "@@ -474,7 +474,11 @@ pub enum WellFormedLoc {\n #[derive(TypeVisitable, TypeFoldable)]\n pub struct ImplDerivedObligationCause<'tcx> {\n     pub derived: DerivedObligationCause<'tcx>,\n-    pub impl_def_id: DefId,\n+    /// The `DefId` of the `impl` that gave rise to the `derived` obligation.\n+    /// If the `derived` obligation arose from a trait alias, which conceptually has a synthetic impl,\n+    /// then this will be the `DefId` of that trait alias. Care should therefore be taken to handle\n+    /// that exceptional case where appropriate.\n+    pub impl_or_alias_def_id: DefId,\n     /// The index of the derived predicate in the parent impl's predicates.\n     pub impl_def_predicate_index: Option<usize>,\n     pub span: Span,"}, {"sha": "a0c67f480d0247650ed384204762f5682cd7c326", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecdb7bcee855107f5edaf29a00dadeed3a23caaa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecdb7bcee855107f5edaf29a00dadeed3a23caaa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=ecdb7bcee855107f5edaf29a00dadeed3a23caaa", "patch": "@@ -3143,7 +3143,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     parent_trait_pred.print_modifiers_and_trait_path()\n                 );\n                 let mut is_auto_trait = false;\n-                match self.tcx.hir().get_if_local(data.impl_def_id) {\n+                match self.tcx.hir().get_if_local(data.impl_or_alias_def_id) {\n                     Some(Node::Item(hir::Item {\n                         kind: hir::ItemKind::Trait(is_auto, ..),\n                         ident,"}, {"sha": "0167f4026102e5ca072952ae70df9ecce43d479f", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecdb7bcee855107f5edaf29a00dadeed3a23caaa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecdb7bcee855107f5edaf29a00dadeed3a23caaa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=ecdb7bcee855107f5edaf29a00dadeed3a23caaa", "patch": "@@ -1189,7 +1189,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             let cause = obligation.derived_cause(|derived| {\n                 ImplDerivedObligation(Box::new(ImplDerivedObligationCause {\n                     derived,\n-                    impl_def_id,\n+                    impl_or_alias_def_id: impl_def_id,\n                     impl_def_predicate_index: None,\n                     span: obligation.cause.span,\n                 }))"}, {"sha": "26f869ac1fef6b5cd9874a98081304db0ab2c328", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ecdb7bcee855107f5edaf29a00dadeed3a23caaa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecdb7bcee855107f5edaf29a00dadeed3a23caaa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=ecdb7bcee855107f5edaf29a00dadeed3a23caaa", "patch": "@@ -2657,7 +2657,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             let cause = cause.clone().derived_cause(parent_trait_pred, |derived| {\n                 ImplDerivedObligation(Box::new(ImplDerivedObligationCause {\n                     derived,\n-                    impl_def_id: def_id,\n+                    impl_or_alias_def_id: def_id,\n                     impl_def_predicate_index: Some(index),\n                     span,\n                 }))"}, {"sha": "0b1f9ab57c987d499b711922747100fbd1fa024b", "filename": "tests/ui/traits/alias/issue-108132-unmet-trait-alias-bound-on-generic-impl.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ecdb7bcee855107f5edaf29a00dadeed3a23caaa/tests%2Fui%2Ftraits%2Falias%2Fissue-108132-unmet-trait-alias-bound-on-generic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecdb7bcee855107f5edaf29a00dadeed3a23caaa/tests%2Fui%2Ftraits%2Falias%2Fissue-108132-unmet-trait-alias-bound-on-generic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Falias%2Fissue-108132-unmet-trait-alias-bound-on-generic-impl.rs?ref=ecdb7bcee855107f5edaf29a00dadeed3a23caaa", "patch": "@@ -0,0 +1,15 @@\n+// Regression test for #108132: do not ICE upon unmet trait alias constraint in generic impl\n+\n+#![feature(trait_alias)]\n+\n+trait IteratorAlias = Iterator;\n+\n+struct Foo<I>(I);\n+\n+impl<I: IteratorAlias> Foo<I> {\n+    fn f() {}\n+}\n+\n+fn main() {\n+    Foo::<()>::f() //~ trait bounds were not satisfied\n+}"}, {"sha": "f1b259d5a652d7656fd76e0c8b1a3fbfe524d4c4", "filename": "tests/ui/traits/alias/issue-108132-unmet-trait-alias-bound-on-generic-impl.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ecdb7bcee855107f5edaf29a00dadeed3a23caaa/tests%2Fui%2Ftraits%2Falias%2Fissue-108132-unmet-trait-alias-bound-on-generic-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ecdb7bcee855107f5edaf29a00dadeed3a23caaa/tests%2Fui%2Ftraits%2Falias%2Fissue-108132-unmet-trait-alias-bound-on-generic-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Falias%2Fissue-108132-unmet-trait-alias-bound-on-generic-impl.stderr?ref=ecdb7bcee855107f5edaf29a00dadeed3a23caaa", "patch": "@@ -0,0 +1,25 @@\n+error[E0599]: the function or associated item `f` exists for struct `Foo<()>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-108132-unmet-trait-alias-bound-on-generic-impl.rs:14:16\n+   |\n+LL | struct Foo<I>(I);\n+   | ------------- function or associated item `f` not found for this struct\n+...\n+LL |     Foo::<()>::f()\n+   |                ^ function or associated item cannot be called on `Foo<()>` due to unsatisfied trait bounds\n+   |\n+note: trait bound `(): Iterator` was not satisfied\n+  --> $DIR/issue-108132-unmet-trait-alias-bound-on-generic-impl.rs:5:23\n+   |\n+LL | trait IteratorAlias = Iterator;\n+   |       -------------   ^^^^^^^^ unsatisfied trait bound introduced here\n+note: trait bound `(): IteratorAlias` was not satisfied\n+  --> $DIR/issue-108132-unmet-trait-alias-bound-on-generic-impl.rs:9:9\n+   |\n+LL | impl<I: IteratorAlias> Foo<I> {\n+   |         ^^^^^^^^^^^^^  ------\n+   |         |\n+   |         unsatisfied trait bound introduced here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}]}