{"sha": "10b2083a6d3de2dad2a41639bfe5a90c4d87bf31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwYjIwODNhNmQzZGUyZGFkMmE0MTYzOWJmZTVhOTBjNGQ4N2JmMzE=", "commit": {"author": {"name": "kenta7777", "email": "k.hasegw7@gmail.com", "date": "2018-09-11T13:18:49Z"}, "committer": {"name": "kenta7777", "email": "k.hasegw7@gmail.com", "date": "2018-09-11T13:18:49Z"}, "message": "Revert \"renamed is_nil to is_unit\"\n\nThis reverts commit 6f685ffad42a2d12dd1fad5ccb0471e7fa260826.", "tree": {"sha": "67fb119f88e98ba26d6862484b15fdf3e06c3d3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67fb119f88e98ba26d6862484b15fdf3e06c3d3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10b2083a6d3de2dad2a41639bfe5a90c4d87bf31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10b2083a6d3de2dad2a41639bfe5a90c4d87bf31", "html_url": "https://github.com/rust-lang/rust/commit/10b2083a6d3de2dad2a41639bfe5a90c4d87bf31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10b2083a6d3de2dad2a41639bfe5a90c4d87bf31/comments", "author": {"login": "kenta7777", "id": 16369171, "node_id": "MDQ6VXNlcjE2MzY5MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/16369171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kenta7777", "html_url": "https://github.com/kenta7777", "followers_url": "https://api.github.com/users/kenta7777/followers", "following_url": "https://api.github.com/users/kenta7777/following{/other_user}", "gists_url": "https://api.github.com/users/kenta7777/gists{/gist_id}", "starred_url": "https://api.github.com/users/kenta7777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kenta7777/subscriptions", "organizations_url": "https://api.github.com/users/kenta7777/orgs", "repos_url": "https://api.github.com/users/kenta7777/repos", "events_url": "https://api.github.com/users/kenta7777/events{/privacy}", "received_events_url": "https://api.github.com/users/kenta7777/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kenta7777", "id": 16369171, "node_id": "MDQ6VXNlcjE2MzY5MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/16369171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kenta7777", "html_url": "https://github.com/kenta7777", "followers_url": "https://api.github.com/users/kenta7777/followers", "following_url": "https://api.github.com/users/kenta7777/following{/other_user}", "gists_url": "https://api.github.com/users/kenta7777/gists{/gist_id}", "starred_url": "https://api.github.com/users/kenta7777/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kenta7777/subscriptions", "organizations_url": "https://api.github.com/users/kenta7777/orgs", "repos_url": "https://api.github.com/users/kenta7777/repos", "events_url": "https://api.github.com/users/kenta7777/events{/privacy}", "received_events_url": "https://api.github.com/users/kenta7777/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7ebc20e7783133310a65a1555465292fd5cd84e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7ebc20e7783133310a65a1555465292fd5cd84e", "html_url": "https://github.com/rust-lang/rust/commit/d7ebc20e7783133310a65a1555465292fd5cd84e"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "962b115f1877a8abd8a4d024d7bf86417b53a0da", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b2083a6d3de2dad2a41639bfe5a90c4d87bf31/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b2083a6d3de2dad2a41639bfe5a90c4d87bf31/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=10b2083a6d3de2dad2a41639bfe5a90c4d87bf31", "patch": "@@ -1458,7 +1458,7 @@ impl RegionKind {\n \n /// Type utilities\n impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n-    pub fn is_unit(&self) -> bool {\n+    pub fn is_nil(&self) -> bool {\n         match self.sty {\n             Tuple(ref tys) => tys.is_empty(),\n             _ => false,"}, {"sha": "ddcc0fa9c9280d0ed609e2e93fe8eb05ae9cb822", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b2083a6d3de2dad2a41639bfe5a90c4d87bf31/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b2083a6d3de2dad2a41639bfe5a90c4d87bf31/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=10b2083a6d3de2dad2a41639bfe5a90c4d87bf31", "patch": "@@ -234,7 +234,7 @@ impl PrintContext {\n             }\n         }\n         write!(f, \")\")?;\n-        if !output.is_unit() {\n+        if !output.is_nil() {\n             print!(f, self, write(\" -> \"), print_display(output))?;\n         }\n "}, {"sha": "95a094bf909e1a3bc01451ec2f44ec4f3264d673", "filename": "src/librustc_codegen_llvm/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b2083a6d3de2dad2a41639bfe5a90c4d87bf31/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b2083a6d3de2dad2a41639bfe5a90c4d87bf31/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs?ref=10b2083a6d3de2dad2a41639bfe5a90c4d87bf31", "patch": "@@ -160,7 +160,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n \n             output.push(')');\n \n-            if !sig.output().is_unit() {\n+            if !sig.output().is_nil() {\n                 output.push_str(\" -> \");\n                 push_debuginfo_type_name(cx, sig.output(), true, output);\n             }"}, {"sha": "e301e5ae70be8a9723634bf56220f1d88badc838", "filename": "src/librustc_codegen_llvm/mir/rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10b2083a6d3de2dad2a41639bfe5a90c4d87bf31/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b2083a6d3de2dad2a41639bfe5a90c4d87bf31/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Frvalue.rs?ref=10b2083a6d3de2dad2a41639bfe5a90c4d87bf31", "patch": "@@ -566,7 +566,7 @@ impl FunctionCx<'a, 'll, 'tcx> {\n     ) -> &'ll Value {\n         let is_float = input_ty.is_fp();\n         let is_signed = input_ty.is_signed();\n-        let is_unit = input_ty.is_unit();\n+        let is_nil = input_ty.is_nil();\n         match op {\n             mir::BinOp::Add => if is_float {\n                 bx.fadd(lhs, rhs)\n@@ -604,7 +604,7 @@ impl FunctionCx<'a, 'll, 'tcx> {\n             mir::BinOp::Shl => common::build_unchecked_lshift(bx, lhs, rhs),\n             mir::BinOp::Shr => common::build_unchecked_rshift(bx, input_ty, lhs, rhs),\n             mir::BinOp::Ne | mir::BinOp::Lt | mir::BinOp::Gt |\n-            mir::BinOp::Eq | mir::BinOp::Le | mir::BinOp::Ge => if is_unit {\n+            mir::BinOp::Eq | mir::BinOp::Le | mir::BinOp::Ge => if is_nil {\n                 C_bool(bx.cx, match op {\n                     mir::BinOp::Ne | mir::BinOp::Lt | mir::BinOp::Gt => false,\n                     mir::BinOp::Eq | mir::BinOp::Le | mir::BinOp::Ge => true,"}, {"sha": "33181bd80e9374799400dea020e17a14ca1b6412", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10b2083a6d3de2dad2a41639bfe5a90c4d87bf31/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b2083a6d3de2dad2a41639bfe5a90c4d87bf31/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=10b2083a6d3de2dad2a41639bfe5a90c4d87bf31", "patch": "@@ -691,7 +691,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                 }\n \n                 let sig = cx.erase_late_bound_regions(&sig);\n-                if !sig.output().is_unit() {\n+                if !sig.output().is_nil() {\n                     let r = self.check_type_for_ffi(cache, sig.output());\n                     match r {\n                         FfiSafe => {}\n@@ -767,7 +767,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n         if let hir::Return(ref ret_hir) = decl.output {\n             let ret_ty = sig.output();\n-            if !ret_ty.is_unit() {\n+            if !ret_ty.is_nil() {\n                 self.check_type_for_ffi_and_report_errors(ret_hir.span, ret_ty);\n             }\n         }"}, {"sha": "c3637a5abebdc4e31f9624dd722d0f34d234fbdf", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b2083a6d3de2dad2a41639bfe5a90c4d87bf31/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b2083a6d3de2dad2a41639bfe5a90c4d87bf31/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=10b2083a6d3de2dad2a41639bfe5a90c4d87bf31", "patch": "@@ -177,7 +177,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             // the case of `!`, no return value is required, as the block will never return.\n             let tcx = this.hir.tcx();\n             let ty = destination.ty(&this.local_decls, tcx).to_ty(tcx);\n-            if ty.is_unit() {\n+            if ty.is_nil() {\n                 // We only want to assign an implicit `()` as the return value of the block if the\n                 // block does not diverge. (Otherwise, we may try to assign a unit to a `!`-type.)\n                 this.cfg.push_assign_unit(block, source_info, destination);"}, {"sha": "dc437ee8510d7c46a7f1929dbe388878669a66e1", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10b2083a6d3de2dad2a41639bfe5a90c4d87bf31/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b2083a6d3de2dad2a41639bfe5a90c4d87bf31/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=10b2083a6d3de2dad2a41639bfe5a90c4d87bf31", "patch": "@@ -368,7 +368,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n \n                 output.push(')');\n \n-                if !sig.output().is_unit() {\n+                if !sig.output().is_nil() {\n                     output.push_str(\" -> \");\n                     self.push_type_name(sig.output(), output);\n                 }"}, {"sha": "60da6e1d72a88884191bca1ec480dad9ad41a269", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10b2083a6d3de2dad2a41639bfe5a90c4d87bf31/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b2083a6d3de2dad2a41639bfe5a90c4d87bf31/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=10b2083a6d3de2dad2a41639bfe5a90c4d87bf31", "patch": "@@ -677,14 +677,14 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n             // Handle the fallback arm of a desugared if-let like a missing else.\n             let is_if_let_fallback = match match_src {\n                 hir::MatchSource::IfLetDesugar { contains_else_clause: false } => {\n-                    i == arms.len() - 1 && arm_ty.is_unit()\n+                    i == arms.len() - 1 && arm_ty.is_nil()\n                 }\n                 _ => false\n             };\n \n             if is_if_let_fallback {\n                 let cause = self.cause(expr.span, ObligationCauseCode::IfExpressionWithNoElse);\n-                assert!(arm_ty.is_unit());\n+                assert!(arm_ty.is_nil());\n                 coercion.coerce_forced_unit(self, &cause, &mut |_| (), true);\n             } else {\n                 let cause = self.cause(expr.span, ObligationCauseCode::MatchExpressionArm {"}, {"sha": "47c3cf4dfa00149c083644c14037bdfcabd31993", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10b2083a6d3de2dad2a41639bfe5a90c4d87bf31/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b2083a6d3de2dad2a41639bfe5a90c4d87bf31/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=10b2083a6d3de2dad2a41639bfe5a90c4d87bf31", "patch": "@@ -1146,8 +1146,8 @@ impl<'gcx, 'tcx, 'exprs, E> CoerceMany<'gcx, 'tcx, 'exprs, E>\n             // `expression_ty` will be unit).\n             //\n             // Another example is `break` with no argument expression.\n-            assert!(expression_ty.is_unit());\n-            assert!(expression_ty.is_unit(), \"if let hack without unit type\");\n+            assert!(expression_ty.is_nil());\n+            assert!(expression_ty.is_nil(), \"if let hack without unit type\");\n             fcx.at(cause, fcx.param_env)\n                .eq_exp(label_expression_as_expected, expression_ty, self.merged_ty())\n                .map(|infer_ok| {"}, {"sha": "f884a3513d121e735bbb125ac2bc928a413595a8", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/10b2083a6d3de2dad2a41639bfe5a90c4d87bf31/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b2083a6d3de2dad2a41639bfe5a90c4d87bf31/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=10b2083a6d3de2dad2a41639bfe5a90c4d87bf31", "patch": "@@ -2808,9 +2808,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         } else {\n             // is the missing argument of type `()`?\n             let sugg_unit = if expected_arg_tys.len() == 1 && supplied_arg_count == 0 {\n-                self.resolve_type_vars_if_possible(&expected_arg_tys[0]).is_unit()\n+                self.resolve_type_vars_if_possible(&expected_arg_tys[0]).is_nil()\n             } else if fn_inputs.len() == 1 && supplied_arg_count == 0 {\n-                self.resolve_type_vars_if_possible(&fn_inputs[0]).is_unit()\n+                self.resolve_type_vars_if_possible(&fn_inputs[0]).is_nil()\n             } else {\n                 false\n             };\n@@ -3958,7 +3958,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         if let Some(ref e) = *expr_opt {\n                             coerce.coerce(self, &cause, e, e_ty);\n                         } else {\n-                            assert!(e_ty.is_unit());\n+                            assert!(e_ty.is_nil());\n                             coerce.coerce_forced_unit(self, &cause, &mut |_| (), true);\n                         }\n                     } else {\n@@ -4752,7 +4752,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                  expression: &'gcx hir::Expr,\n                                  expected: Ty<'tcx>,\n                                  cause_span: Span) {\n-        if expected.is_unit() {\n+        if expected.is_nil() {\n             // `BlockTailExpression` only relevant if the tail expr would be\n             // useful on its own.\n             match expression.node {\n@@ -4795,7 +4795,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                    can_suggest: bool) {\n         // Only suggest changing the return type for methods that\n         // haven't set a return type at all (and aren't `fn main()` or an impl).\n-        match (&fn_decl.output, found.is_suggestable(), can_suggest, expected.is_unit()) {\n+        match (&fn_decl.output, found.is_suggestable(), can_suggest, expected.is_nil()) {\n             (&hir::FunctionRetTy::DefaultReturn(span), true, true, true) => {\n                 err.span_suggestion_with_applicability(\n                     span,"}]}