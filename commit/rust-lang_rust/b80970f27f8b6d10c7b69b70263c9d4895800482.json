{"sha": "b80970f27f8b6d10c7b69b70263c9d4895800482", "node_id": "C_kwDOAAsO6NoAKGI4MDk3MGYyN2Y4YjZkMTBjN2I2OWI3MDI2M2M5ZDQ4OTU4MDA0ODI", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-04T11:24:20Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-04T11:24:20Z"}, "message": "Sync from rust 8521a8c92da6c0c845d4f6394e903651a227946a", "tree": {"sha": "5469478f3537d03876ba8429530f5c67c51f6cca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5469478f3537d03876ba8429530f5c67c51f6cca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b80970f27f8b6d10c7b69b70263c9d4895800482", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b80970f27f8b6d10c7b69b70263c9d4895800482", "html_url": "https://github.com/rust-lang/rust/commit/b80970f27f8b6d10c7b69b70263c9d4895800482", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b80970f27f8b6d10c7b69b70263c9d4895800482/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9054e66703dbcac8b7ba12d2ebceeecdb676ec5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9054e66703dbcac8b7ba12d2ebceeecdb676ec5a", "html_url": "https://github.com/rust-lang/rust/commit/9054e66703dbcac8b7ba12d2ebceeecdb676ec5a"}, {"sha": "b8169a6da07f123cda26b5903e3d6032dd00efb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8169a6da07f123cda26b5903e3d6032dd00efb9", "html_url": "https://github.com/rust-lang/rust/commit/b8169a6da07f123cda26b5903e3d6032dd00efb9"}], "stats": {"total": 35, "additions": 22, "deletions": 13}, "files": [{"sha": "0497c2570e6228b3984b639805ebbdef0bd6d07b", "filename": "src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b80970f27f8b6d10c7b69b70263c9d4895800482/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80970f27f8b6d10c7b69b70263c9d4895800482/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=b80970f27f8b6d10c7b69b70263c9d4895800482", "patch": "@@ -342,7 +342,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n \n     let ret_place = codegen_place(fx, destination);\n \n-    // Handle special calls like instrinsics and empty drop glue.\n+    // Handle special calls like intrinsics and empty drop glue.\n     let instance = if let ty::FnDef(def_id, substs) = *fn_ty.kind() {\n         let instance = ty::Instance::resolve(fx.tcx, ty::ParamEnv::reveal_all(), def_id, substs)\n             .unwrap()"}, {"sha": "c412e451a033e9619f2630e5362b5e0c12b4e08c", "filename": "src/base.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b80970f27f8b6d10c7b69b70263c9d4895800482/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80970f27f8b6d10c7b69b70263c9d4895800482/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=b80970f27f8b6d10c7b69b70263c9d4895800482", "patch": "@@ -925,8 +925,11 @@ pub(crate) fn codegen_panic_inner<'tcx>(\n     args: &[Value],\n     span: Span,\n ) {\n-    let def_id =\n-        fx.tcx.lang_items().require(lang_item).unwrap_or_else(|s| fx.tcx.sess.span_fatal(span, &s));\n+    let def_id = fx\n+        .tcx\n+        .lang_items()\n+        .require(lang_item)\n+        .unwrap_or_else(|e| fx.tcx.sess.span_fatal(span, e.to_string()));\n \n     let instance = Instance::mono(fx.tcx, def_id).polymorphize(fx.tcx);\n     let symbol_name = fx.tcx.symbol_name(instance).name;"}, {"sha": "f02cff4dada5512c9ee6c4bca24fac12b75b8917", "filename": "src/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b80970f27f8b6d10c7b69b70263c9d4895800482/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80970f27f8b6d10c7b69b70263c9d4895800482/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=b80970f27f8b6d10c7b69b70263c9d4895800482", "patch": "@@ -59,7 +59,7 @@ pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n                         ErrorHandled::TooGeneric => {\n                             span_bug!(\n                                 constant.span,\n-                                \"codgen encountered polymorphic constant: {:?}\",\n+                                \"codegen encountered polymorphic constant: {:?}\",\n                                 err\n                             );\n                         }\n@@ -430,7 +430,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n         let bytes = alloc.inspect_with_uninit_and_ptr_outside_interpreter(0..alloc.len()).to_vec();\n         data_ctx.define(bytes.into_boxed_slice());\n \n-        for &(offset, alloc_id) in alloc.relocations().iter() {\n+        for &(offset, alloc_id) in alloc.provenance().iter() {\n             let addend = {\n                 let endianness = tcx.data_layout.endian;\n                 let offset = offset.bytes() as usize;"}, {"sha": "b0863e096540defb4b27766c47929191f29961e5", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b80970f27f8b6d10c7b69b70263c9d4895800482/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80970f27f8b6d10c7b69b70263c9d4895800482/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=b80970f27f8b6d10c7b69b70263c9d4895800482", "patch": "@@ -203,7 +203,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n             sym::transmute => {\n                 crate::base::codegen_panic(fx, \"Transmuting to uninhabited type.\", source_info);\n             }\n-            _ => unimplemented!(\"unsupported instrinsic {}\", intrinsic),\n+            _ => unimplemented!(\"unsupported intrinsic {}\", intrinsic),\n         }\n         return;\n     };"}, {"sha": "1f358b1bbb96edb89a2893cf9bc526f6dbcc79b9", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b80970f27f8b6d10c7b69b70263c9d4895800482/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80970f27f8b6d10c7b69b70263c9d4895800482/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=b80970f27f8b6d10c7b69b70263c9d4895800482", "patch": "@@ -186,7 +186,10 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                         let size = Size::from_bytes(\n                             4 * ret_lane_count, /* size_of([u32; ret_lane_count]) */\n                         );\n-                        alloc.inner().get_bytes(fx, alloc_range(offset, size)).unwrap()\n+                        alloc\n+                            .inner()\n+                            .get_bytes_strip_provenance(fx, alloc_range(offset, size))\n+                            .unwrap()\n                     }\n                     _ => unreachable!(\"{:?}\", idx_const),\n                 };"}, {"sha": "cae6312a607351d93dc5101562c1760dbdb392a5", "filename": "src/main_shim.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b80970f27f8b6d10c7b69b70263c9d4895800482/src%2Fmain_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80970f27f8b6d10c7b69b70263c9d4895800482/src%2Fmain_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain_shim.rs?ref=b80970f27f8b6d10c7b69b70263c9d4895800482", "patch": "@@ -1,7 +1,7 @@\n use rustc_hir::LangItem;\n use rustc_middle::ty::subst::GenericArg;\n use rustc_middle::ty::AssocKind;\n-use rustc_session::config::EntryFnType;\n+use rustc_session::config::{sigpipe, EntryFnType};\n use rustc_span::symbol::Ident;\n \n use crate::prelude::*;\n@@ -15,12 +15,12 @@ pub(crate) fn maybe_create_entry_wrapper(\n     is_jit: bool,\n     is_primary_cgu: bool,\n ) {\n-    let (main_def_id, is_main_fn) = match tcx.entry_fn(()) {\n+    let (main_def_id, (is_main_fn, sigpipe)) = match tcx.entry_fn(()) {\n         Some((def_id, entry_ty)) => (\n             def_id,\n             match entry_ty {\n-                EntryFnType::Main => true,\n-                EntryFnType::Start => false,\n+                EntryFnType::Main { sigpipe } => (true, sigpipe),\n+                EntryFnType::Start => (false, sigpipe::DEFAULT),\n             },\n         ),\n         None => return,\n@@ -35,7 +35,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n         return;\n     }\n \n-    create_entry_fn(tcx, module, unwind_context, main_def_id, is_jit, is_main_fn);\n+    create_entry_fn(tcx, module, unwind_context, main_def_id, is_jit, is_main_fn, sigpipe);\n \n     fn create_entry_fn(\n         tcx: TyCtxt<'_>,\n@@ -44,6 +44,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n         rust_main_def_id: DefId,\n         ignore_lang_start_wrapper: bool,\n         is_main_fn: bool,\n+        sigpipe: u8,\n     ) {\n         let main_ret_ty = tcx.fn_sig(rust_main_def_id).output();\n         // Given that `main()` has no arguments,\n@@ -83,6 +84,7 @@ pub(crate) fn maybe_create_entry_wrapper(\n             bcx.switch_to_block(block);\n             let arg_argc = bcx.append_block_param(block, m.target_config().pointer_type());\n             let arg_argv = bcx.append_block_param(block, m.target_config().pointer_type());\n+            let arg_sigpipe = bcx.ins().iconst(types::I8, sigpipe as i64);\n \n             let main_func_ref = m.declare_func_in_func(main_func_id, &mut bcx.func);\n \n@@ -143,7 +145,8 @@ pub(crate) fn maybe_create_entry_wrapper(\n                 let main_val = bcx.ins().func_addr(m.target_config().pointer_type(), main_func_ref);\n \n                 let func_ref = m.declare_func_in_func(start_func_id, &mut bcx.func);\n-                let call_inst = bcx.ins().call(func_ref, &[main_val, arg_argc, arg_argv]);\n+                let call_inst =\n+                    bcx.ins().call(func_ref, &[main_val, arg_argc, arg_argv, arg_sigpipe]);\n                 bcx.inst_results(call_inst)[0]\n             } else {\n                 // using user-defined start fn"}]}