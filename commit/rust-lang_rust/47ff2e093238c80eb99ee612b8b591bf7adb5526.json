{"sha": "47ff2e093238c80eb99ee612b8b591bf7adb5526", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3ZmYyZTA5MzIzOGM4MGViOTllZTYxMmI4YjU5MWJmN2FkYjU1MjY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-11-23T10:21:15Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-11-23T10:21:15Z"}, "message": "Implement float simd comparisons", "tree": {"sha": "6b58705f606c2c7d1f8bee6de10fcb1014490aa3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b58705f606c2c7d1f8bee6de10fcb1014490aa3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47ff2e093238c80eb99ee612b8b591bf7adb5526", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47ff2e093238c80eb99ee612b8b591bf7adb5526", "html_url": "https://github.com/rust-lang/rust/commit/47ff2e093238c80eb99ee612b8b591bf7adb5526", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47ff2e093238c80eb99ee612b8b591bf7adb5526/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22c9623604c6366e4783614244372cf1b31f7ca7", "url": "https://api.github.com/repos/rust-lang/rust/commits/22c9623604c6366e4783614244372cf1b31f7ca7", "html_url": "https://github.com/rust-lang/rust/commit/22c9623604c6366e4783614244372cf1b31f7ca7"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "f9d721785249cb8913d8697f602595720a527d94", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47ff2e093238c80eb99ee612b8b591bf7adb5526/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ff2e093238c80eb99ee612b8b591bf7adb5526/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=47ff2e093238c80eb99ee612b8b591bf7adb5526", "patch": "@@ -287,7 +287,7 @@ fn bool_to_zero_or_max_uint<'tcx>(\n }\n \n macro simd_cmp {\n-    ($fx:expr, $cc:ident($x:ident, $y:ident) -> $ret:ident) => {\n+    ($fx:expr, $cc:ident|$cc_f:ident($x:ident, $y:ident) -> $ret:ident) => {\n         let vector_ty = clif_vector_type($fx.tcx, $x.layout());\n \n         if let Some(vector_ty) = vector_ty {\n@@ -308,14 +308,15 @@ macro simd_cmp {\n                 |fx, lane_layout, res_lane_layout, x_lane, y_lane| {\n                     let res_lane = match lane_layout.ty.kind() {\n                         ty::Uint(_) | ty::Int(_) => fx.bcx.ins().icmp(IntCC::$cc, x_lane, y_lane),\n+                        ty::Float(_) => fx.bcx.ins().fcmp(FloatCC::$cc_f, x_lane, y_lane),\n                         _ => unreachable!(\"{:?}\", lane_layout.ty),\n                     };\n                     bool_to_zero_or_max_uint(fx, res_lane_layout, res_lane)\n                 },\n             );\n         }\n     },\n-    ($fx:expr, $cc_u:ident|$cc_s:ident($x:ident, $y:ident) -> $ret:ident) => {\n+    ($fx:expr, $cc_u:ident|$cc_s:ident|$cc_f:ident($x:ident, $y:ident) -> $ret:ident) => {\n         // FIXME use vector icmp when possible\n         simd_pair_for_each_lane(\n             $fx,\n@@ -326,6 +327,7 @@ macro simd_cmp {\n                 let res_lane = match lane_layout.ty.kind() {\n                     ty::Uint(_) => fx.bcx.ins().icmp(IntCC::$cc_u, x_lane, y_lane),\n                     ty::Int(_) => fx.bcx.ins().icmp(IntCC::$cc_s, x_lane, y_lane),\n+                    ty::Float(_) => fx.bcx.ins().fcmp(FloatCC::$cc_f, x_lane, y_lane),\n                     _ => unreachable!(\"{:?}\", lane_layout.ty),\n                 };\n                 bool_to_zero_or_max_uint(fx, res_lane_layout, res_lane)"}, {"sha": "20a02e14bb29cffb27291ebb4541099a82e5d2a9", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/47ff2e093238c80eb99ee612b8b591bf7adb5526/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47ff2e093238c80eb99ee612b8b591bf7adb5526/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=47ff2e093238c80eb99ee612b8b591bf7adb5526", "patch": "@@ -35,30 +35,33 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             });\n         };\n \n-        // FIXME support float comparisons\n         simd_eq, (c x, c y) {\n             validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n-            simd_cmp!(fx, Equal(x, y) -> ret);\n+            simd_cmp!(fx, Equal|Equal(x, y) -> ret);\n         };\n         simd_ne, (c x, c y) {\n             validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n-            simd_cmp!(fx, NotEqual(x, y) -> ret);\n+            simd_cmp!(fx, NotEqual|NotEqual(x, y) -> ret);\n         };\n         simd_lt, (c x, c y) {\n             validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n-            simd_cmp!(fx, UnsignedLessThan|SignedLessThan(x, y) -> ret);\n+            simd_cmp!(fx, UnsignedLessThan|SignedLessThan|LessThan(x, y) -> ret);\n         };\n         simd_le, (c x, c y) {\n             validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n-            simd_cmp!(fx, UnsignedLessThanOrEqual|SignedLessThanOrEqual(x, y) -> ret);\n+            simd_cmp!(fx, UnsignedLessThanOrEqual|SignedLessThanOrEqual|LessThanOrEqual(x, y) -> ret);\n         };\n         simd_gt, (c x, c y) {\n             validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n-            simd_cmp!(fx, UnsignedGreaterThan|SignedGreaterThan(x, y) -> ret);\n+            simd_cmp!(fx, UnsignedGreaterThan|SignedGreaterThan|GreaterThan(x, y) -> ret);\n         };\n         simd_ge, (c x, c y) {\n             validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n-            simd_cmp!(fx, UnsignedGreaterThanOrEqual|SignedGreaterThanOrEqual(x, y) -> ret);\n+            simd_cmp!(\n+                fx,\n+                UnsignedGreaterThanOrEqual|SignedGreaterThanOrEqual|GreaterThanOrEqual\n+                (x, y) -> ret\n+            );\n         };\n \n         // simd_shuffle32<T, U>(x: T, y: T, idx: [u32; 32]) -> U"}]}