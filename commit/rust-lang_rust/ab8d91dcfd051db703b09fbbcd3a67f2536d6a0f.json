{"sha": "ab8d91dcfd051db703b09fbbcd3a67f2536d6a0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiOGQ5MWRjZmQwNTFkYjcwM2IwOWZiYmNkM2E2N2YyNTM2ZDZhMGY=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-07-26T23:03:46Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-07-27T21:28:07Z"}, "message": "Make trand_bind_1 use create_real_fn_pair.", "tree": {"sha": "9323b063a250b31b44963e14484c9056c8677d64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9323b063a250b31b44963e14484c9056c8677d64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab8d91dcfd051db703b09fbbcd3a67f2536d6a0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab8d91dcfd051db703b09fbbcd3a67f2536d6a0f", "html_url": "https://github.com/rust-lang/rust/commit/ab8d91dcfd051db703b09fbbcd3a67f2536d6a0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab8d91dcfd051db703b09fbbcd3a67f2536d6a0f/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73e8e49897c2a92d5908e89f392bd40386219aab", "url": "https://api.github.com/repos/rust-lang/rust/commits/73e8e49897c2a92d5908e89f392bd40386219aab", "html_url": "https://github.com/rust-lang/rust/commit/73e8e49897c2a92d5908e89f392bd40386219aab"}], "stats": {"total": 32, "additions": 11, "deletions": 21}, "files": [{"sha": "af1c737bc6f6c20bc0f7864f3eaba2a12f6b51f0", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ab8d91dcfd051db703b09fbbcd3a67f2536d6a0f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab8d91dcfd051db703b09fbbcd3a67f2536d6a0f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=ab8d91dcfd051db703b09fbbcd3a67f2536d6a0f", "patch": "@@ -4350,7 +4350,7 @@ fn trans_cast(cx: &@block_ctxt, e: &@ast::expr, id: ast::node_id) -> result {\n fn trans_bind_thunk(cx: &@local_ctxt, sp: &span, incoming_fty: &ty::t,\n                     outgoing_fty: &ty::t, args: &(option::t[@ast::expr])[],\n                     closure_ty: &ty::t, bound_tys: &ty::t[],\n-                    ty_param_count: uint) -> ValueRef {\n+                    ty_param_count: uint) -> {val: ValueRef, ty: TypeRef} {\n \n     // Here we're not necessarily constructing a thunk in the sense of\n     // \"function with no arguments\".  The result of compiling 'bind f(foo,\n@@ -4520,7 +4520,7 @@ fn trans_bind_thunk(cx: &@local_ctxt, sp: &span, incoming_fty: &ty::t,\n     bcx.build.FastCall(lltargetfn, llargs);\n     bcx.build.RetVoid();\n     finish_fn(fcx, lltop);\n-    ret llthunk;\n+    ret {val: llthunk, ty: llthunk_ty};\n }\n \n fn trans_bind(cx: &@block_ctxt, f: &@ast::expr,\n@@ -4552,15 +4552,13 @@ fn trans_bind_1(cx: &@block_ctxt, f: &@ast::expr, f_res: &lval_result,\n         lltydescs = ginfo.tydescs;\n       }\n     }\n-    let ty_param_count = std::ivec::len[ValueRef](lltydescs);\n-    if std::ivec::len[@ast::expr](bound) == 0u && ty_param_count == 0u {\n \n+    let ty_param_count = std::ivec::len(lltydescs);\n+    if std::ivec::len(bound) == 0u && ty_param_count == 0u {\n         // Trivial 'binding': just return the static pair-ptr.\n         ret f_res.res;\n     }\n     let bcx = f_res.res.bcx;\n-    let pair_t = node_type(bcx_ccx(cx), cx.sp, id);\n-    let pair_v = alloca(bcx, pair_t);\n \n     // Translate the bound expressions.\n     let bound_tys: ty::t[] = ~[];\n@@ -4675,23 +4673,15 @@ fn trans_bind_1(cx: &@block_ctxt, f: &@ast::expr, f_res: &lval_result,\n       }\n     }\n \n-    // Make thunk and store thunk-ptr in outer pair's code slot.\n-    let pair_code =\n-        bcx.build.GEP(pair_v, ~[C_int(0), C_int(abi::fn_field_code)]);\n+    // Make thunk\n     // The type of the entire bind expression.\n-    let pair_ty: ty::t = node_id_type(bcx_ccx(cx), id);\n+    let pair_ty = node_id_type(bcx_ccx(cx), id);\n+    let llthunk =\n+        trans_bind_thunk(cx.fcx.lcx, cx.sp, pair_ty, outgoing_fty,\n+                         args, closure_ty, bound_tys, ty_param_count);\n \n-    let llthunk: ValueRef =\n-        trans_bind_thunk(cx.fcx.lcx, cx.sp, pair_ty, outgoing_fty, args,\n-                         closure_ty, bound_tys, ty_param_count);\n-    bcx.build.Store(llthunk, pair_code);\n-\n-    // Store box ptr in outer pair's box slot.\n-    let ccx = *bcx_ccx(bcx);\n-    let pair_box =\n-        bcx.build.GEP(pair_v, ~[C_int(0), C_int(abi::fn_field_box)]);\n-    bcx.build.Store(bcx.build.PointerCast(box, T_opaque_closure_ptr(ccx)),\n-                    pair_box);\n+    // Construct the function pair\n+    let pair_v = create_real_fn_pair(bcx, llthunk.ty, llthunk.val, box);\n     add_clean_temp(cx, pair_v, pair_ty);\n     ret rslt(bcx, pair_v);\n }"}]}