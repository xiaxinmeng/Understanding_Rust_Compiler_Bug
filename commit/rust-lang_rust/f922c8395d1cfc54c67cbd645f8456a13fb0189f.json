{"sha": "f922c8395d1cfc54c67cbd645f8456a13fb0189f", "node_id": "C_kwDOAAsO6NoAKGY5MjJjODM5NWQxY2ZjNTRjNjdjYmQ2NDVmODQ1NmExM2ZiMDE4OWY", "commit": {"author": {"name": "Mads Ravn", "email": "madsravn@gmail.com", "date": "2023-01-08T22:48:41Z"}, "committer": {"name": "Mads Ravn", "email": "madsravn@gmail.com", "date": "2023-02-02T11:56:04Z"}, "message": "PR fixing wrong order of format parameters in strings. Issue #106572\n\nAdding\n\nAdding\n\nFixing small issues for PR\n\nAdding tests\n\nRemoving unused binding\n\nChanging the wording on note\n\nFixing PR comment", "tree": {"sha": "11ab41d3aab60117dcd09e23365bb362dabfb5ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11ab41d3aab60117dcd09e23365bb362dabfb5ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f922c8395d1cfc54c67cbd645f8456a13fb0189f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f922c8395d1cfc54c67cbd645f8456a13fb0189f", "html_url": "https://github.com/rust-lang/rust/commit/f922c8395d1cfc54c67cbd645f8456a13fb0189f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f922c8395d1cfc54c67cbd645f8456a13fb0189f/comments", "author": {"login": "madsravn", "id": 399452, "node_id": "MDQ6VXNlcjM5OTQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/399452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/madsravn", "html_url": "https://github.com/madsravn", "followers_url": "https://api.github.com/users/madsravn/followers", "following_url": "https://api.github.com/users/madsravn/following{/other_user}", "gists_url": "https://api.github.com/users/madsravn/gists{/gist_id}", "starred_url": "https://api.github.com/users/madsravn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/madsravn/subscriptions", "organizations_url": "https://api.github.com/users/madsravn/orgs", "repos_url": "https://api.github.com/users/madsravn/repos", "events_url": "https://api.github.com/users/madsravn/events{/privacy}", "received_events_url": "https://api.github.com/users/madsravn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "madsravn", "id": 399452, "node_id": "MDQ6VXNlcjM5OTQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/399452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/madsravn", "html_url": "https://github.com/madsravn", "followers_url": "https://api.github.com/users/madsravn/followers", "following_url": "https://api.github.com/users/madsravn/following{/other_user}", "gists_url": "https://api.github.com/users/madsravn/gists{/gist_id}", "starred_url": "https://api.github.com/users/madsravn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/madsravn/subscriptions", "organizations_url": "https://api.github.com/users/madsravn/orgs", "repos_url": "https://api.github.com/users/madsravn/repos", "events_url": "https://api.github.com/users/madsravn/events{/privacy}", "received_events_url": "https://api.github.com/users/madsravn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b90256ada21c6a81b4c18f2c7a23151ab5fc232", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b90256ada21c6a81b4c18f2c7a23151ab5fc232", "html_url": "https://github.com/rust-lang/rust/commit/0b90256ada21c6a81b4c18f2c7a23151ab5fc232"}], "stats": {"total": 98, "additions": 97, "deletions": 1}, "files": [{"sha": "099cbd31917f95eb0a0f87f667c41f022e73843e", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f922c8395d1cfc54c67cbd645f8456a13fb0189f/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f922c8395d1cfc54c67cbd645f8456a13fb0189f/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=f922c8395d1cfc54c67cbd645f8456a13fb0189f", "patch": "@@ -271,7 +271,13 @@ impl<'a> Iterator for Parser<'a> {\n                                 );\n                             }\n                         } else {\n-                            self.suggest_positional_arg_instead_of_captured_arg(arg);\n+                            if let Some(&(_, maybe)) = self.cur.peek() {\n+                                if maybe == '?' {\n+                                    self.suggest_format();\n+                                } else {\n+                                    self.suggest_positional_arg_instead_of_captured_arg(arg);\n+                                }\n+                            }\n                         }\n                         Some(NextArgument(Box::new(arg)))\n                     }\n@@ -823,6 +829,27 @@ impl<'a> Parser<'a> {\n         if found { Some(cur) } else { None }\n     }\n \n+    fn suggest_format(&mut self) {\n+        if let (Some(pos), Some(_)) = (self.consume_pos('?'), self.consume_pos(':')) {\n+            let word = self.word();\n+            let _end = self.current_pos();\n+            let pos = self.to_span_index(pos);\n+            self.errors.insert(\n+                0,\n+                ParseError {\n+                    description: \"expected format parameter to occur after `:`\".to_owned(),\n+                    note: Some(\n+                        format!(\"`?` comes after `:`, try `{}:{}` instead\", word, \"?\").to_owned(),\n+                    ),\n+                    label: \"expected `?` to occur after `:`\".to_owned(),\n+                    span: pos.to(pos),\n+                    secondary_label: None,\n+                    should_be_replaced_with_positional_argument: false,\n+                },\n+            );\n+        }\n+    }\n+\n     fn suggest_positional_arg_instead_of_captured_arg(&mut self, arg: Argument<'a>) {\n         if let Some(end) = self.consume_pos('.') {\n             let byte_pos = self.to_span_index(end);"}, {"sha": "0bad54023965fecbf8f0b5ddd90b8b56f8bd3d6c", "filename": "tests/ui/fmt/format-string-wrong-order.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f922c8395d1cfc54c67cbd645f8456a13fb0189f/tests%2Fui%2Ffmt%2Fformat-string-wrong-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f922c8395d1cfc54c67cbd645f8456a13fb0189f/tests%2Fui%2Ffmt%2Fformat-string-wrong-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffmt%2Fformat-string-wrong-order.rs?ref=f922c8395d1cfc54c67cbd645f8456a13fb0189f", "patch": "@@ -0,0 +1,15 @@\n+fn main() {\n+    let bar = 3;\n+    format!(\"{?:}\", bar);\n+    //~^ ERROR invalid format string: expected format parameter to occur after `:`\n+    format!(\"{?:bar}\");\n+    //~^ ERROR invalid format string: expected format parameter to occur after `:`\n+    format!(\"{?:?}\", bar);\n+    //~^ ERROR invalid format string: expected format parameter to occur after `:`\n+    format!(\"{??}\", bar);\n+    //~^ ERROR invalid format string: expected `'}'`, found `'?'`\n+    format!(\"{?;bar}\");\n+    //~^ ERROR invalid format string: expected `'}'`, found `'?'`\n+    format!(\"{?:#?}\", bar);\n+    //~^ ERROR invalid format string: expected format parameter to occur after `:`\n+}"}, {"sha": "461af354a4e15c274d20f3fc46ad8bd979724d7f", "filename": "tests/ui/fmt/format-string-wrong-order.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f922c8395d1cfc54c67cbd645f8456a13fb0189f/tests%2Fui%2Ffmt%2Fformat-string-wrong-order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f922c8395d1cfc54c67cbd645f8456a13fb0189f/tests%2Fui%2Ffmt%2Fformat-string-wrong-order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffmt%2Fformat-string-wrong-order.stderr?ref=f922c8395d1cfc54c67cbd645f8456a13fb0189f", "patch": "@@ -0,0 +1,54 @@\n+error: invalid format string: expected format parameter to occur after `:`\n+  --> $DIR/format-string-wrong-order.rs:3:15\n+   |\n+LL |     format!(\"{?:}\", bar);\n+   |               ^ expected `?` to occur after `:` in format string\n+   |\n+   = note: `?` comes after `:`, try `:?` instead\n+\n+error: invalid format string: expected format parameter to occur after `:`\n+  --> $DIR/format-string-wrong-order.rs:5:15\n+   |\n+LL |     format!(\"{?:bar}\");\n+   |               ^ expected `?` to occur after `:` in format string\n+   |\n+   = note: `?` comes after `:`, try `bar:?` instead\n+\n+error: invalid format string: expected format parameter to occur after `:`\n+  --> $DIR/format-string-wrong-order.rs:7:15\n+   |\n+LL |     format!(\"{?:?}\", bar);\n+   |               ^ expected `?` to occur after `:` in format string\n+   |\n+   = note: `?` comes after `:`, try `:?` instead\n+\n+error: invalid format string: expected `'}'`, found `'?'`\n+  --> $DIR/format-string-wrong-order.rs:9:15\n+   |\n+LL |     format!(\"{??}\", bar);\n+   |              -^ expected `}` in format string\n+   |              |\n+   |              because of this opening brace\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+\n+error: invalid format string: expected `'}'`, found `'?'`\n+  --> $DIR/format-string-wrong-order.rs:11:15\n+   |\n+LL |     format!(\"{?;bar}\");\n+   |              -^ expected `}` in format string\n+   |              |\n+   |              because of this opening brace\n+   |\n+   = note: if you intended to print `{`, you can escape it using `{{`\n+\n+error: invalid format string: expected format parameter to occur after `:`\n+  --> $DIR/format-string-wrong-order.rs:13:15\n+   |\n+LL |     format!(\"{?:#?}\", bar);\n+   |               ^ expected `?` to occur after `:` in format string\n+   |\n+   = note: `?` comes after `:`, try `:?` instead\n+\n+error: aborting due to 6 previous errors\n+"}]}