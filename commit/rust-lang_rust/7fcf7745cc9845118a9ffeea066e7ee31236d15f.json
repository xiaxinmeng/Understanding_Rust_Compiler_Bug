{"sha": "7fcf7745cc9845118a9ffeea066e7ee31236d15f", "node_id": "C_kwDOAAsO6NoAKDdmY2Y3NzQ1Y2M5ODQ1MTE4YTlmZmVlYTA2NmU3ZWUzMTIzNmQxNWY", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-01-27T09:49:32Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-02-01T08:55:19Z"}, "message": "update `FutureIncompatibilityReason`", "tree": {"sha": "c38b25ac3550314f2d61e4cc32a4631dcbce07bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c38b25ac3550314f2d61e4cc32a4631dcbce07bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fcf7745cc9845118a9ffeea066e7ee31236d15f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fcf7745cc9845118a9ffeea066e7ee31236d15f", "html_url": "https://github.com/rust-lang/rust/commit/7fcf7745cc9845118a9ffeea066e7ee31236d15f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fcf7745cc9845118a9ffeea066e7ee31236d15f/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25862ffc8d360b34dd8ec82a2f01750aaab976b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/25862ffc8d360b34dd8ec82a2f01750aaab976b7", "html_url": "https://github.com/rust-lang/rust/commit/25862ffc8d360b34dd8ec82a2f01750aaab976b7"}], "stats": {"total": 60, "additions": 35, "deletions": 25}, "files": [{"sha": "d5a5fcece0cd8658bb24e826c909ed980c061745", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7fcf7745cc9845118a9ffeea066e7ee31236d15f/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fcf7745cc9845118a9ffeea066e7ee31236d15f/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=7fcf7745cc9845118a9ffeea066e7ee31236d15f", "patch": "@@ -1793,6 +1793,10 @@ declare_lint! {\n     Warn,\n     \"detects name collision with an existing but unstable method\",\n     @future_incompatible = FutureIncompatibleInfo {\n+        reason: FutureIncompatibilityReason::Custom(\n+            \"once this associated item is added to the standard library, \\\n+             the ambiguity may cause an error or change in behavior!\"\n+        ),\n         reference: \"issue #48919 <https://github.com/rust-lang/rust/issues/48919>\",\n         // Note: this item represents future incompatibility of all unstable functions in the\n         //       standard library, and thus should never be removed or changed to an error.\n@@ -2335,6 +2339,10 @@ declare_lint! {\n     Warn,\n     \"reservation of a two-phased borrow conflicts with other shared borrows\",\n     @future_incompatible = FutureIncompatibleInfo {\n+        reason: FutureIncompatibilityReason::Custom(\n+            \"this borrowing pattern was not meant to be accepted, \\\n+            and may become a hard error in the future\"\n+        ),\n         reference: \"issue #59159 <https://github.com/rust-lang/rust/issues/59159>\",\n     };\n }"}, {"sha": "1f834b7212fe58c697561b8e505b80e05c44c979", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7fcf7745cc9845118a9ffeea066e7ee31236d15f/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fcf7745cc9845118a9ffeea066e7ee31236d15f/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=7fcf7745cc9845118a9ffeea066e7ee31236d15f", "patch": "@@ -163,12 +163,17 @@ pub enum FutureIncompatibilityReason {\n     /// This will be an error in a future release, and\n     /// Cargo should create a report even for dependencies\n     FutureReleaseErrorReportNow,\n+    /// Code that changes meaning in some way in a\n+    /// future release.\n+    FutureReleaseSemanticsChange,\n     /// Previously accepted code that will become an\n     /// error in the provided edition\n     EditionError(Edition),\n     /// Code that changes meaning in some way in\n     /// the provided edition\n     EditionSemanticsChange(Edition),\n+    /// A custom reason.\n+    Custom(&'static str),\n }\n \n impl FutureIncompatibilityReason {"}, {"sha": "17c77c1bbd891367b458576610f7c86d96b046b2", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7fcf7745cc9845118a9ffeea066e7ee31236d15f/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fcf7745cc9845118a9ffeea066e7ee31236d15f/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=7fcf7745cc9845118a9ffeea066e7ee31236d15f", "patch": "@@ -221,7 +221,6 @@ pub fn struct_lint_level<'s, 'd>(\n         decorate: Box<dyn for<'b> FnOnce(LintDiagnosticBuilder<'b>) + 'd>,\n     ) {\n         // Check for future incompatibility lints and issue a stronger warning.\n-        let lint_id = LintId::of(lint);\n         let future_incompatible = lint.future_incompatible;\n \n         let has_future_breakage = future_incompatible.map_or(\n@@ -345,31 +344,29 @@ pub fn struct_lint_level<'s, 'd>(\n         err.code(DiagnosticId::Lint { name, has_future_breakage, is_force_warn });\n \n         if let Some(future_incompatible) = future_incompatible {\n-            let explanation = if lint_id == LintId::of(builtin::UNSTABLE_NAME_COLLISIONS) {\n-                \"once this associated item is added to the standard library, the ambiguity may \\\n-                 cause an error or change in behavior!\"\n-                    .to_owned()\n-            } else if lint_id == LintId::of(builtin::MUTABLE_BORROW_RESERVATION_CONFLICT) {\n-                \"this borrowing pattern was not meant to be accepted, and may become a hard error \\\n-                 in the future\"\n-                    .to_owned()\n-            } else if let FutureIncompatibilityReason::EditionError(edition) =\n-                future_incompatible.reason\n-            {\n-                let current_edition = sess.edition();\n-                format!(\n-                    \"this is accepted in the current edition (Rust {}) but is a hard error in Rust {}!\",\n-                    current_edition, edition\n-                )\n-            } else if let FutureIncompatibilityReason::EditionSemanticsChange(edition) =\n-                future_incompatible.reason\n-            {\n-                format!(\"this changes meaning in Rust {}\", edition)\n-            } else {\n-                \"this was previously accepted by the compiler but is being phased out; \\\n-                 it will become a hard error in a future release!\"\n-                    .to_owned()\n+            let explanation = match future_incompatible.reason {\n+                FutureIncompatibilityReason::FutureReleaseError\n+                | FutureIncompatibilityReason::FutureReleaseErrorReportNow => {\n+                    \"this was previously accepted by the compiler but is being phased out; \\\n+                         it will become a hard error in a future release!\"\n+                        .to_owned()\n+                }\n+                FutureIncompatibilityReason::FutureReleaseSemanticsChange => {\n+                    \"this will change its meaning in a future release!\".to_owned()\n+                }\n+                FutureIncompatibilityReason::EditionError(edition) => {\n+                    let current_edition = sess.edition();\n+                    format!(\n+                        \"this is accepted in the current edition (Rust {}) but is a hard error in Rust {}!\",\n+                        current_edition, edition\n+                    )\n+                }\n+                FutureIncompatibilityReason::EditionSemanticsChange(edition) => {\n+                    format!(\"this changes meaning in Rust {}\", edition)\n+                }\n+                FutureIncompatibilityReason::Custom(reason) => reason.to_owned(),\n             };\n+\n             if future_incompatible.explain_reason {\n                 err.warn(&explanation);\n             }"}]}