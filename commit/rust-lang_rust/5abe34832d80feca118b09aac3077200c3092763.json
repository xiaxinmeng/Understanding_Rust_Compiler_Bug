{"sha": "5abe34832d80feca118b09aac3077200c3092763", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYmUzNDgzMmQ4MGZlY2ExMThiMDlhYWMzMDc3MjAwYzMwOTI3NjM=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-04-07T08:23:27Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-04-07T08:23:27Z"}, "message": "Split up match_bool UI tests", "tree": {"sha": "9faad55df5a0360e223ec897aa111dac723a861e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9faad55df5a0360e223ec897aa111dac723a861e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5abe34832d80feca118b09aac3077200c3092763", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQItBAABCAAXBQJayIAsEBxkZXZAcGhhbnNjaC5uZXQACgkQk/szRZ0xHl4Q8w/+\nJecG+3wVjevtS1eOr3r1NGl9hBbbXj+RndhhpAus1zwhJG1wwgp7fo2ZUqBnlY1C\nLEoen6UATf8twrLQm4ib626h5En6i5GVD14yicdtbewUvE78TgDvFv9B/feKf5hs\ncDuzdveowYYp2n1mvIu278o7HWMiOCpdPvAIIwLeqd/0cIx8uhhsPd6yaUkQcxU4\n6B2pznsi8ekT3imNZIoCWfcKA9MDvRlI/morTJCb/lTrHXrajpzjyBix2wq2d4D4\nj/sfHUbBoeJaDoAshnIDMqlAHHt3ZmfMvObjg4hrUocG7WYt/SMvhK1R6Mj4BV1t\nZfH5s6kLgxzvZUr3b8vJX/Hg/XQ6qqnyW8/i5l7Py2LwKZACW2w+AU13I4/EC2uJ\ntxj7D3GfPRzakA+iLK+99K+8mptvipFQXKldNG4zH5y8NDwAv63zaJ2m7aSKBSR4\nqvoUG/fywK1/XQYlrOJhQj/LcAW+oQP3UpSvBi6XOkRYlAV3hgkxX5LqJgfegM5C\nYXZ0a7eigyBsFVal9NCheiAr3jAsS8cFjUS/TyqPxQ4FSAvF3ubgfMc/gh6k24Bl\nNck2CHMfCrbZpd8ovWBA9Th8cFTUmHvUk19UQpmZhJrRsNnE6scsUVbi7Fqjf7DF\nihqcM3CXtWHz1mSJce+UW0ay2d2jANn6PyXlE/uMXrE=\n=J1dS\n-----END PGP SIGNATURE-----", "payload": "tree 9faad55df5a0360e223ec897aa111dac723a861e\nparent fbb5050d820e2f8109e0d15bc27d5069374e356b\nauthor Philipp Hansch <dev@phansch.net> 1523089407 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1523089407 +0200\n\nSplit up match_bool UI tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5abe34832d80feca118b09aac3077200c3092763", "html_url": "https://github.com/rust-lang/rust/commit/5abe34832d80feca118b09aac3077200c3092763", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5abe34832d80feca118b09aac3077200c3092763/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbb5050d820e2f8109e0d15bc27d5069374e356b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbb5050d820e2f8109e0d15bc27d5069374e356b", "html_url": "https://github.com/rust-lang/rust/commit/fbb5050d820e2f8109e0d15bc27d5069374e356b"}], "stats": {"total": 538, "additions": 271, "deletions": 267}, "files": [{"sha": "07efe2c68084e1b033fb40eff465a13223eae090", "filename": "tests/ui/match_bool.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5abe34832d80feca118b09aac3077200c3092763/tests%2Fui%2Fmatch_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5abe34832d80feca118b09aac3077200c3092763/tests%2Fui%2Fmatch_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_bool.rs?ref=5abe34832d80feca118b09aac3077200c3092763", "patch": "@@ -0,0 +1,44 @@\n+fn match_bool() {\n+    let test: bool = true;\n+\n+    match test {\n+        true => 0,\n+        false => 42,\n+    };\n+\n+    let option = 1;\n+    match option == 1 {\n+        true => 1,\n+        false => 0,\n+    };\n+\n+    match test {\n+        true => (),\n+        false => { println!(\"Noooo!\"); }\n+    };\n+\n+    match test {\n+        false => { println!(\"Noooo!\"); }\n+        _ => (),\n+    };\n+\n+    match test && test {\n+        false => { println!(\"Noooo!\"); }\n+        _ => (),\n+    };\n+\n+    match test {\n+        false => { println!(\"Noooo!\"); }\n+        true => { println!(\"Yes!\"); }\n+    };\n+\n+    // Not linted\n+    match option {\n+        1 ... 10 => 1,\n+        11 ... 20 => 2,\n+        _ => 3,\n+    };\n+}\n+\n+fn main() {\n+}"}, {"sha": "89378f438b0249af78d93c939730efa85c655f93", "filename": "tests/ui/match_bool.stderr", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/5abe34832d80feca118b09aac3077200c3092763/tests%2Fui%2Fmatch_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5abe34832d80feca118b09aac3077200c3092763/tests%2Fui%2Fmatch_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_bool.stderr?ref=5abe34832d80feca118b09aac3077200c3092763", "patch": "@@ -0,0 +1,74 @@\n+error: this boolean expression can be simplified\n+  --> $DIR/match_bool.rs:25:11\n+   |\n+25 |     match test && test {\n+   |           ^^^^^^^^^^^^ help: try: `test`\n+   |\n+   = note: `-D nonminimal-bool` implied by `-D warnings`\n+\n+error: you seem to be trying to match on a boolean expression\n+ --> $DIR/match_bool.rs:4:5\n+  |\n+4 | /     match test {\n+5 | |         true => 0,\n+6 | |         false => 42,\n+7 | |     };\n+  | |_____^ help: consider using an if/else expression: `if test { 0 } else { 42 }`\n+  |\n+  = note: `-D match-bool` implied by `-D warnings`\n+\n+error: you seem to be trying to match on a boolean expression\n+  --> $DIR/match_bool.rs:10:5\n+   |\n+10 | /     match option == 1 {\n+11 | |         true => 1,\n+12 | |         false => 0,\n+13 | |     };\n+   | |_____^ help: consider using an if/else expression: `if option == 1 { 1 } else { 0 }`\n+\n+error: you seem to be trying to match on a boolean expression\n+  --> $DIR/match_bool.rs:15:5\n+   |\n+15 | /     match test {\n+16 | |         true => (),\n+17 | |         false => { println!(\"Noooo!\"); }\n+18 | |     };\n+   | |_____^ help: consider using an if/else expression: `if !test { println!(\"Noooo!\"); }`\n+\n+error: you seem to be trying to match on a boolean expression\n+  --> $DIR/match_bool.rs:20:5\n+   |\n+20 | /     match test {\n+21 | |         false => { println!(\"Noooo!\"); }\n+22 | |         _ => (),\n+23 | |     };\n+   | |_____^ help: consider using an if/else expression: `if !test { println!(\"Noooo!\"); }`\n+\n+error: you seem to be trying to match on a boolean expression\n+  --> $DIR/match_bool.rs:25:5\n+   |\n+25 | /     match test && test {\n+26 | |         false => { println!(\"Noooo!\"); }\n+27 | |         _ => (),\n+28 | |     };\n+   | |_____^ help: consider using an if/else expression: `if !(test && test) { println!(\"Noooo!\"); }`\n+\n+error: equal expressions as operands to `&&`\n+  --> $DIR/match_bool.rs:25:11\n+   |\n+25 |     match test && test {\n+   |           ^^^^^^^^^^^^\n+   |\n+   = note: #[deny(eq_op)] on by default\n+\n+error: you seem to be trying to match on a boolean expression\n+  --> $DIR/match_bool.rs:30:5\n+   |\n+30 | /     match test {\n+31 | |         false => { println!(\"Noooo!\"); }\n+32 | |         true => { println!(\"Yes!\"); }\n+33 | |     };\n+   | |_____^ help: consider using an if/else expression: `if test { println!(\"Yes!\"); } else { println!(\"Noooo!\"); }`\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "e339aeb9c6a6043c1b460a576f9c8de9909b9bcc", "filename": "tests/ui/matches.rs", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5abe34832d80feca118b09aac3077200c3092763/tests%2Fui%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5abe34832d80feca118b09aac3077200c3092763/tests%2Fui%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.rs?ref=5abe34832d80feca118b09aac3077200c3092763", "patch": "@@ -24,48 +24,6 @@ fn unwrap_addr() -> Option<&'static ExprNode> {\n     }\n }\n \n-fn match_bool() {\n-    let test: bool = true;\n-\n-    match test {\n-        true => 0,\n-        false => 42,\n-    };\n-\n-    let option = 1;\n-    match option == 1 {\n-        true => 1,\n-        false => 0,\n-    };\n-\n-    match test {\n-        true => (),\n-        false => { println!(\"Noooo!\"); }\n-    };\n-\n-    match test {\n-        false => { println!(\"Noooo!\"); }\n-        _ => (),\n-    };\n-\n-    match test && test {\n-        false => { println!(\"Noooo!\"); }\n-        _ => (),\n-    };\n-\n-    match test {\n-        false => { println!(\"Noooo!\"); }\n-        true => { println!(\"Yes!\"); }\n-    };\n-\n-    // Not linted\n-    match option {\n-        1 ... 10 => 1,\n-        11 ... 20 => 2,\n-        _ => 3,\n-    };\n-}\n-\n fn ref_pats() {\n     {\n         let v = &Some(0);"}, {"sha": "cc43cdb25fcfa2f8276c0d72f9fbcaaacc798d66", "filename": "tests/ui/matches.stderr", "status": "modified", "additions": 153, "deletions": 225, "changes": 378, "blob_url": "https://github.com/rust-lang/rust/blob/5abe34832d80feca118b09aac3077200c3092763/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5abe34832d80feca118b09aac3077200c3092763/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=5abe34832d80feca118b09aac3077200c3092763", "patch": "@@ -9,418 +9,346 @@ error: you seem to be trying to use match for destructuring a single pattern. Co\n    |\n    = note: `-D single-match-else` implied by `-D warnings`\n \n-error: this boolean expression can be simplified\n-  --> $DIR/matches.rs:51:11\n-   |\n-51 |     match test && test {\n-   |           ^^^^^^^^^^^^ help: try: `test`\n-   |\n-   = note: `-D nonminimal-bool` implied by `-D warnings`\n-\n-error: you seem to be trying to match on a boolean expression\n-  --> $DIR/matches.rs:30:5\n-   |\n-30 | /     match test {\n-31 | |         true => 0,\n-32 | |         false => 42,\n-33 | |     };\n-   | |_____^ help: consider using an if/else expression: `if test { 0 } else { 42 }`\n-   |\n-   = note: `-D match-bool` implied by `-D warnings`\n-\n-error: you seem to be trying to match on a boolean expression\n-  --> $DIR/matches.rs:36:5\n-   |\n-36 | /     match option == 1 {\n-37 | |         true => 1,\n-38 | |         false => 0,\n-39 | |     };\n-   | |_____^ help: consider using an if/else expression: `if option == 1 { 1 } else { 0 }`\n-\n-error: you seem to be trying to match on a boolean expression\n-  --> $DIR/matches.rs:41:5\n-   |\n-41 | /     match test {\n-42 | |         true => (),\n-43 | |         false => { println!(\"Noooo!\"); }\n-44 | |     };\n-   | |_____^ help: consider using an if/else expression: `if !test { println!(\"Noooo!\"); }`\n-\n-error: you seem to be trying to match on a boolean expression\n-  --> $DIR/matches.rs:46:5\n-   |\n-46 | /     match test {\n-47 | |         false => { println!(\"Noooo!\"); }\n-48 | |         _ => (),\n-49 | |     };\n-   | |_____^ help: consider using an if/else expression: `if !test { println!(\"Noooo!\"); }`\n-\n-error: you seem to be trying to match on a boolean expression\n-  --> $DIR/matches.rs:51:5\n-   |\n-51 | /     match test && test {\n-52 | |         false => { println!(\"Noooo!\"); }\n-53 | |         _ => (),\n-54 | |     };\n-   | |_____^ help: consider using an if/else expression: `if !(test && test) { println!(\"Noooo!\"); }`\n-\n-error: equal expressions as operands to `&&`\n-  --> $DIR/matches.rs:51:11\n-   |\n-51 |     match test && test {\n-   |           ^^^^^^^^^^^^\n-   |\n-   = note: `-D eq-op` implied by `-D warnings`\n-\n-error: you seem to be trying to match on a boolean expression\n-  --> $DIR/matches.rs:56:5\n-   |\n-56 | /     match test {\n-57 | |         false => { println!(\"Noooo!\"); }\n-58 | |         true => { println!(\"Yes!\"); }\n-59 | |     };\n-   | |_____^ help: consider using an if/else expression: `if test { println!(\"Yes!\"); } else { println!(\"Noooo!\"); }`\n-\n error: you don't need to add `&` to all patterns\n-  --> $DIR/matches.rs:72:9\n+  --> $DIR/matches.rs:30:9\n    |\n-72 | /         match v {\n-73 | |             &Some(v) => println!(\"{:?}\", v),\n-74 | |             &None => println!(\"none\"),\n-75 | |         }\n+30 | /         match v {\n+31 | |             &Some(v) => println!(\"{:?}\", v),\n+32 | |             &None => println!(\"none\"),\n+33 | |         }\n    | |_________^\n    |\n    = note: `-D match-ref-pats` implied by `-D warnings`\n help: instead of prefixing all patterns with `&`, you can dereference the expression\n    |\n-72 |         match *v {\n-73 |             Some(v) => println!(\"{:?}\", v),\n-74 |             None => println!(\"none\"),\n+30 |         match *v {\n+31 |             Some(v) => println!(\"{:?}\", v),\n+32 |             None => println!(\"none\"),\n    |\n \n error: you don't need to add `&` to all patterns\n-  --> $DIR/matches.rs:82:5\n+  --> $DIR/matches.rs:40:5\n    |\n-82 | /     match tup {\n-83 | |         &(v, 1) => println!(\"{}\", v),\n-84 | |         _ => println!(\"none\"),\n-85 | |     }\n+40 | /     match tup {\n+41 | |         &(v, 1) => println!(\"{}\", v),\n+42 | |         _ => println!(\"none\"),\n+43 | |     }\n    | |_____^\n help: instead of prefixing all patterns with `&`, you can dereference the expression\n    |\n-82 |     match *tup {\n-83 |         (v, 1) => println!(\"{}\", v),\n+40 |     match *tup {\n+41 |         (v, 1) => println!(\"{}\", v),\n    |\n \n error: you don't need to add `&` to both the expression and the patterns\n-  --> $DIR/matches.rs:88:5\n+  --> $DIR/matches.rs:46:5\n    |\n-88 | /     match &w {\n-89 | |         &Some(v) => println!(\"{:?}\", v),\n-90 | |         &None => println!(\"none\"),\n-91 | |     }\n+46 | /     match &w {\n+47 | |         &Some(v) => println!(\"{:?}\", v),\n+48 | |         &None => println!(\"none\"),\n+49 | |     }\n    | |_____^\n help: try\n    |\n-88 |     match w {\n-89 |         Some(v) => println!(\"{:?}\", v),\n-90 |         None => println!(\"none\"),\n+46 |     match w {\n+47 |         Some(v) => println!(\"{:?}\", v),\n+48 |         None => println!(\"none\"),\n    |\n \n error: you don't need to add `&` to all patterns\n-   --> $DIR/matches.rs:99:5\n-    |\n-99  | /     if let &None = a {\n-100 | |         println!(\"none\");\n-101 | |     }\n-    | |_____^\n+  --> $DIR/matches.rs:57:5\n+   |\n+57 | /     if let &None = a {\n+58 | |         println!(\"none\");\n+59 | |     }\n+   | |_____^\n help: instead of prefixing all patterns with `&`, you can dereference the expression\n-    |\n-99  |     if let None = *a {\n-    |\n+   |\n+57 |     if let None = *a {\n+   |\n \n error: you don't need to add `&` to both the expression and the patterns\n-   --> $DIR/matches.rs:104:5\n-    |\n-104 | /     if let &None = &b {\n-105 | |         println!(\"none\");\n-106 | |     }\n-    | |_____^\n+  --> $DIR/matches.rs:62:5\n+   |\n+62 | /     if let &None = &b {\n+63 | |         println!(\"none\");\n+64 | |     }\n+   | |_____^\n help: try\n-    |\n-104 |     if let None = b {\n-    |\n+   |\n+62 |     if let None = b {\n+   |\n \n error: some ranges overlap\n-   --> $DIR/matches.rs:113:9\n-    |\n-113 |         0 ... 10 => println!(\"0 ... 10\"),\n-    |         ^^^^^^^^\n-    |\n-    = note: `-D match-overlapping-arm` implied by `-D warnings`\n+  --> $DIR/matches.rs:71:9\n+   |\n+71 |         0 ... 10 => println!(\"0 ... 10\"),\n+   |         ^^^^^^^^\n+   |\n+   = note: `-D match-overlapping-arm` implied by `-D warnings`\n note: overlaps with this\n-   --> $DIR/matches.rs:114:9\n-    |\n-114 |         0 ... 11 => println!(\"0 ... 11\"),\n-    |         ^^^^^^^^\n+  --> $DIR/matches.rs:72:9\n+   |\n+72 |         0 ... 11 => println!(\"0 ... 11\"),\n+   |         ^^^^^^^^\n \n error: some ranges overlap\n-   --> $DIR/matches.rs:119:9\n-    |\n-119 |         0 ... 5 => println!(\"0 ... 5\"),\n-    |         ^^^^^^^\n-    |\n+  --> $DIR/matches.rs:77:9\n+   |\n+77 |         0 ... 5 => println!(\"0 ... 5\"),\n+   |         ^^^^^^^\n+   |\n note: overlaps with this\n-   --> $DIR/matches.rs:121:9\n-    |\n-121 |         FOO ... 11 => println!(\"0 ... 11\"),\n-    |         ^^^^^^^^^^\n+  --> $DIR/matches.rs:79:9\n+   |\n+79 |         FOO ... 11 => println!(\"0 ... 11\"),\n+   |         ^^^^^^^^^^\n \n error: some ranges overlap\n-   --> $DIR/matches.rs:127:9\n-    |\n-127 |         0 ... 5 => println!(\"0 ... 5\"),\n-    |         ^^^^^^^\n-    |\n+  --> $DIR/matches.rs:85:9\n+   |\n+85 |         0 ... 5 => println!(\"0 ... 5\"),\n+   |         ^^^^^^^\n+   |\n note: overlaps with this\n-   --> $DIR/matches.rs:126:9\n-    |\n-126 |         2 => println!(\"2\"),\n-    |         ^\n+  --> $DIR/matches.rs:84:9\n+   |\n+84 |         2 => println!(\"2\"),\n+   |         ^\n \n error: some ranges overlap\n-   --> $DIR/matches.rs:133:9\n-    |\n-133 |         0 ... 2 => println!(\"0 ... 2\"),\n-    |         ^^^^^^^\n-    |\n+  --> $DIR/matches.rs:91:9\n+   |\n+91 |         0 ... 2 => println!(\"0 ... 2\"),\n+   |         ^^^^^^^\n+   |\n note: overlaps with this\n-   --> $DIR/matches.rs:132:9\n-    |\n-132 |         2 => println!(\"2\"),\n-    |         ^\n+  --> $DIR/matches.rs:90:9\n+   |\n+90 |         2 => println!(\"2\"),\n+   |         ^\n \n error: some ranges overlap\n-   --> $DIR/matches.rs:156:9\n+   --> $DIR/matches.rs:114:9\n     |\n-156 |         0 .. 11 => println!(\"0 .. 11\"),\n+114 |         0 .. 11 => println!(\"0 .. 11\"),\n     |         ^^^^^^^\n     |\n note: overlaps with this\n-   --> $DIR/matches.rs:157:9\n+   --> $DIR/matches.rs:115:9\n     |\n-157 |         0 ... 11 => println!(\"0 ... 11\"),\n+115 |         0 ... 11 => println!(\"0 ... 11\"),\n     |         ^^^^^^^^\n \n error: Err(_) will match all errors, maybe not a good idea\n-   --> $DIR/matches.rs:174:9\n+   --> $DIR/matches.rs:132:9\n     |\n-174 |         Err(_) => panic!(\"err\")\n+132 |         Err(_) => panic!(\"err\")\n     |         ^^^^^^\n     |\n     = note: `-D match-wild-err-arm` implied by `-D warnings`\n     = note: to remove this warning, match each error seperately or use unreachable macro\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:173:18\n+   --> $DIR/matches.rs:131:18\n     |\n-173 |         Ok(_) => println!(\"ok\"),\n+131 |         Ok(_) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     |\n     = note: `-D match-same-arms` implied by `-D warnings`\n note: same as this\n-   --> $DIR/matches.rs:172:18\n+   --> $DIR/matches.rs:130:18\n     |\n-172 |         Ok(3) => println!(\"ok\"),\n+130 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:172:18\n+   --> $DIR/matches.rs:130:18\n     |\n-172 |         Ok(3) => println!(\"ok\"),\n+130 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: Err(_) will match all errors, maybe not a good idea\n-   --> $DIR/matches.rs:180:9\n+   --> $DIR/matches.rs:138:9\n     |\n-180 |         Err(_) => {panic!()}\n+138 |         Err(_) => {panic!()}\n     |         ^^^^^^\n     |\n     = note: to remove this warning, match each error seperately or use unreachable macro\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:179:18\n+   --> $DIR/matches.rs:137:18\n     |\n-179 |         Ok(_) => println!(\"ok\"),\n+137 |         Ok(_) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     |\n note: same as this\n-   --> $DIR/matches.rs:178:18\n+   --> $DIR/matches.rs:136:18\n     |\n-178 |         Ok(3) => println!(\"ok\"),\n+136 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:178:18\n+   --> $DIR/matches.rs:136:18\n     |\n-178 |         Ok(3) => println!(\"ok\"),\n+136 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: Err(_) will match all errors, maybe not a good idea\n-   --> $DIR/matches.rs:186:9\n+   --> $DIR/matches.rs:144:9\n     |\n-186 |         Err(_) => {panic!();}\n+144 |         Err(_) => {panic!();}\n     |         ^^^^^^\n     |\n     = note: to remove this warning, match each error seperately or use unreachable macro\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:185:18\n+   --> $DIR/matches.rs:143:18\n     |\n-185 |         Ok(_) => println!(\"ok\"),\n+143 |         Ok(_) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     |\n note: same as this\n-   --> $DIR/matches.rs:184:18\n+   --> $DIR/matches.rs:142:18\n     |\n-184 |         Ok(3) => println!(\"ok\"),\n+142 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:184:18\n+   --> $DIR/matches.rs:142:18\n     |\n-184 |         Ok(3) => println!(\"ok\"),\n+142 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:192:18\n+   --> $DIR/matches.rs:150:18\n     |\n-192 |         Ok(_) => println!(\"ok\"),\n+150 |         Ok(_) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     |\n note: same as this\n-   --> $DIR/matches.rs:191:18\n+   --> $DIR/matches.rs:149:18\n     |\n-191 |         Ok(3) => println!(\"ok\"),\n+149 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:191:18\n+   --> $DIR/matches.rs:149:18\n     |\n-191 |         Ok(3) => println!(\"ok\"),\n+149 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:199:18\n+   --> $DIR/matches.rs:157:18\n     |\n-199 |         Ok(_) => println!(\"ok\"),\n+157 |         Ok(_) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     |\n note: same as this\n-   --> $DIR/matches.rs:198:18\n+   --> $DIR/matches.rs:156:18\n     |\n-198 |         Ok(3) => println!(\"ok\"),\n+156 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:198:18\n+   --> $DIR/matches.rs:156:18\n     |\n-198 |         Ok(3) => println!(\"ok\"),\n+156 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:205:18\n+   --> $DIR/matches.rs:163:18\n     |\n-205 |         Ok(_) => println!(\"ok\"),\n+163 |         Ok(_) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     |\n note: same as this\n-   --> $DIR/matches.rs:204:18\n+   --> $DIR/matches.rs:162:18\n     |\n-204 |         Ok(3) => println!(\"ok\"),\n+162 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:204:18\n+   --> $DIR/matches.rs:162:18\n     |\n-204 |         Ok(3) => println!(\"ok\"),\n+162 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:211:18\n+   --> $DIR/matches.rs:169:18\n     |\n-211 |         Ok(_) => println!(\"ok\"),\n+169 |         Ok(_) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     |\n note: same as this\n-   --> $DIR/matches.rs:210:18\n+   --> $DIR/matches.rs:168:18\n     |\n-210 |         Ok(3) => println!(\"ok\"),\n+168 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:210:18\n+   --> $DIR/matches.rs:168:18\n     |\n-210 |         Ok(3) => println!(\"ok\"),\n+168 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:232:29\n+   --> $DIR/matches.rs:190:29\n     |\n-232 |         (Ok(_), Some(x)) => println!(\"ok {}\", x),\n+190 |         (Ok(_), Some(x)) => println!(\"ok {}\", x),\n     |                             ^^^^^^^^^^^^^^^^^^^^\n     |\n note: same as this\n-   --> $DIR/matches.rs:231:29\n+   --> $DIR/matches.rs:189:29\n     |\n-231 |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n+189 |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n     |                             ^^^^^^^^^^^^^^^^^^^^\n note: consider refactoring into `(Ok(x), Some(_)) | (Ok(_), Some(x))`\n-   --> $DIR/matches.rs:231:29\n+   --> $DIR/matches.rs:189:29\n     |\n-231 |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n+189 |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n     |                             ^^^^^^^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:247:18\n+   --> $DIR/matches.rs:205:18\n     |\n-247 |         Ok(_) => println!(\"ok\"),\n+205 |         Ok(_) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     |\n note: same as this\n-   --> $DIR/matches.rs:246:18\n+   --> $DIR/matches.rs:204:18\n     |\n-246 |         Ok(3) => println!(\"ok\"),\n+204 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:246:18\n+   --> $DIR/matches.rs:204:18\n     |\n-246 |         Ok(3) => println!(\"ok\"),\n+204 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: use as_ref() instead\n-   --> $DIR/matches.rs:254:33\n+   --> $DIR/matches.rs:212:33\n     |\n-254 |       let borrowed: Option<&()> = match owned {\n+212 |       let borrowed: Option<&()> = match owned {\n     |  _________________________________^\n-255 | |         None => None,\n-256 | |         Some(ref v) => Some(v),\n-257 | |     };\n+213 | |         None => None,\n+214 | |         Some(ref v) => Some(v),\n+215 | |     };\n     | |_____^ help: try this: `owned.as_ref()`\n     |\n     = note: `-D match-as-ref` implied by `-D warnings`\n \n error: use as_mut() instead\n-   --> $DIR/matches.rs:260:39\n+   --> $DIR/matches.rs:218:39\n     |\n-260 |       let borrow_mut: Option<&mut ()> = match mut_owned {\n+218 |       let borrow_mut: Option<&mut ()> = match mut_owned {\n     |  _______________________________________^\n-261 | |         None => None,\n-262 | |         Some(ref mut v) => Some(v),\n-263 | |     };\n+219 | |         None => None,\n+220 | |         Some(ref mut v) => Some(v),\n+221 | |     };\n     | |_____^ help: try this: `mut_owned.as_mut()`\n \n-error: aborting due to 33 previous errors\n+error: aborting due to 25 previous errors\n "}]}