{"sha": "b8c0a01b2b651416f5e7461209ff1a93a98619e4", "node_id": "C_kwDOAAsO6NoAKGI4YzBhMDFiMmI2NTE0MTZmNWU3NDYxMjA5ZmYxYTkzYTk4NjE5ZTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-14T21:35:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-14T21:35:16Z"}, "message": "Auto merge of #100540 - matthiaskrgr:rollup-734hkpt, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #100249 (Fix HorizonOS regression in FileTimes)\n - #100253 (Recover from mutable variable declaration where `mut` is placed before `let`)\n - #100482 (Add Duration rounding change to release note)\n - #100523 ([rustdoc] remove Clean trait)\n - #100524 (Impl `Debug` for some structs of rustbuild)\n - #100526 (Add tests for the drop behavior of some control flow constructs)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "6e77649de55a0a57466b0827cb4963fb5d9ecfaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e77649de55a0a57466b0827cb4963fb5d9ecfaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8c0a01b2b651416f5e7461209ff1a93a98619e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8c0a01b2b651416f5e7461209ff1a93a98619e4", "html_url": "https://github.com/rust-lang/rust/commit/b8c0a01b2b651416f5e7461209ff1a93a98619e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8c0a01b2b651416f5e7461209ff1a93a98619e4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "801821d1560f84e4716fcbd9244ec959320a13d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/801821d1560f84e4716fcbd9244ec959320a13d5", "html_url": "https://github.com/rust-lang/rust/commit/801821d1560f84e4716fcbd9244ec959320a13d5"}, {"sha": "59795d0cb275aef6c9bce021492e56f2a218b5b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/59795d0cb275aef6c9bce021492e56f2a218b5b9", "html_url": "https://github.com/rust-lang/rust/commit/59795d0cb275aef6c9bce021492e56f2a218b5b9"}], "stats": {"total": 215, "additions": 196, "deletions": 19}, "files": [{"sha": "147ff3561a30bbac29174727bfb3b5a189e05b6b", "filename": "RELEASES.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8c0a01b2b651416f5e7461209ff1a93a98619e4/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/b8c0a01b2b651416f5e7461209ff1a93a98619e4/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=b8c0a01b2b651416f5e7461209ff1a93a98619e4", "patch": "@@ -27,6 +27,7 @@ Libraries\n - [Extend `ptr::null` and `null_mut` to all thin (including extern) types.][94954]\n - [`impl Read and Write for VecDeque<u8>`.][95632]\n - [STD support for the Nintendo 3DS.][95897]\n+- [Use rounding in float to Duration conversion methods.][96051]\n - [Make write/print macros eagerly drop temporaries.][96455]\n - [Implement internal traits that enable `[OsStr]::join`.][96881]\n - [Implement `Hash` for `core::alloc::Layout`.][97034]\n@@ -99,6 +100,8 @@ Compatibility Notes\n \n - [`#[link]` attributes are now checked more strictly,][96885] which may introduce\n   errors for invalid attribute arguments that were previously ignored.\n+- [Rounding is now used when converting a float to a `Duration`.][96051] The converted\n+  duration can differ slightly from what it was.\n \n Internal Changes\n ----------------\n@@ -118,6 +121,7 @@ and related tools.\n [95818]: https://github.com/rust-lang/rust/pull/95818/\n [95897]: https://github.com/rust-lang/rust/pull/95897/\n [95953]: https://github.com/rust-lang/rust/pull/95953/\n+[96051]: https://github.com/rust-lang/rust/pull/96051/\n [96296]: https://github.com/rust-lang/rust/pull/96296/\n [96455]: https://github.com/rust-lang/rust/pull/96455/\n [96737]: https://github.com/rust-lang/rust/pull/96737/"}, {"sha": "d8b39a406ccc7937c192bdc091852973640dbfdd", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b8c0a01b2b651416f5e7461209ff1a93a98619e4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c0a01b2b651416f5e7461209ff1a93a98619e4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=b8c0a01b2b651416f5e7461209ff1a93a98619e4", "patch": "@@ -55,6 +55,19 @@ impl<'a> Parser<'a> {\n             return Ok(Some(stmt.into_inner()));\n         }\n \n+        if self.token.is_keyword(kw::Mut) && self.is_keyword_ahead(1, &[kw::Let]) {\n+            self.bump();\n+            let mut_let_span = lo.to(self.token.span);\n+            self.struct_span_err(mut_let_span, \"invalid variable declaration\")\n+                .span_suggestion(\n+                    mut_let_span,\n+                    \"switch the order of `mut` and `let`\",\n+                    \"let mut\",\n+                    Applicability::MaybeIncorrect,\n+                )\n+                .emit();\n+        }\n+\n         Ok(Some(if self.token.is_keyword(kw::Let) {\n             self.parse_local_mk(lo, attrs, capture_semi, force_collect)?\n         } else if self.is_kw_followed_by_ident(kw::Mut) {"}, {"sha": "7778033eaa98c6d1bd5e460b174a54e49f0ef4cb", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8c0a01b2b651416f5e7461209ff1a93a98619e4/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c0a01b2b651416f5e7461209ff1a93a98619e4/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=b8c0a01b2b651416f5e7461209ff1a93a98619e4", "patch": "@@ -544,11 +544,11 @@ impl Default for FileTimes {\n     fn default() -> Self {\n         // Redox doesn't appear to support `UTIME_OMIT`, so we stub it out here, and always return\n         // an error in `set_times`.\n-        // ESP-IDF does not support `futimens` at all and the behavior for that OS is therefore\n+        // ESP-IDF and HorizonOS do not support `futimens` at all and the behavior for those OS is therefore\n         // the same as for Redox.\n-        #[cfg(any(target_os = \"redox\", target_os = \"espidf\"))]\n+        #[cfg(any(target_os = \"redox\", target_os = \"espidf\", target_os = \"horizon\"))]\n         let omit = libc::timespec { tv_sec: 0, tv_nsec: 0 };\n-        #[cfg(not(any(target_os = \"redox\", target_os = \"espidf\")))]\n+        #[cfg(not(any(target_os = \"redox\", target_os = \"espidf\", target_os = \"horizon\")))]\n         let omit = libc::timespec { tv_sec: 0, tv_nsec: libc::UTIME_OMIT as _ };\n         Self([omit; 2])\n     }\n@@ -1083,9 +1083,9 @@ impl File {\n \n     pub fn set_times(&self, times: FileTimes) -> io::Result<()> {\n         cfg_if::cfg_if! {\n-            if #[cfg(any(target_os = \"redox\", target_os = \"espidf\"))] {\n+            if #[cfg(any(target_os = \"redox\", target_os = \"espidf\", target_os = \"horizon\"))] {\n                 // Redox doesn't appear to support `UTIME_OMIT`.\n-                // ESP-IDF does not support `futimens` at all and the behavior for that OS is therefore\n+                // ESP-IDF and HorizonOS do not support `futimens` at all and the behavior for those OS is therefore\n                 // the same as for Redox.\n                 drop(times);\n                 Err(io::const_io_error!("}, {"sha": "1edb513f0b62da6cc9ee440d4c2d7d72f1b9721d", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8c0a01b2b651416f5e7461209ff1a93a98619e4/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c0a01b2b651416f5e7461209ff1a93a98619e4/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=b8c0a01b2b651416f5e7461209ff1a93a98619e4", "patch": "@@ -80,6 +80,7 @@ pub struct Flags {\n     pub llvm_profile_generate: bool,\n }\n \n+#[derive(Debug)]\n #[cfg_attr(test, derive(Clone))]\n pub enum Subcommand {\n     Build {"}, {"sha": "eb7da1bda73cb19d98fde4ca406a28883acb9a29", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8c0a01b2b651416f5e7461209ff1a93a98619e4/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c0a01b2b651416f5e7461209ff1a93a98619e4/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=b8c0a01b2b651416f5e7461209ff1a93a98619e4", "patch": "@@ -11,7 +11,7 @@ use std::{\n     io::{self, Write},\n };\n \n-#[derive(Clone, Copy, Eq, PartialEq)]\n+#[derive(Clone, Copy, Debug, Eq, PartialEq)]\n pub enum Profile {\n     Compiler,\n     Codegen,"}, {"sha": "971617a8400366d732e86d9d614870289b295234", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b8c0a01b2b651416f5e7461209ff1a93a98619e4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c0a01b2b651416f5e7461209ff1a93a98619e4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b8c0a01b2b651416f5e7461209ff1a93a98619e4", "patch": "@@ -44,10 +44,6 @@ use utils::*;\n pub(crate) use self::types::*;\n pub(crate) use self::utils::{get_auto_trait_and_blanket_impls, krate, register_res};\n \n-pub(crate) trait Clean<'tcx, T> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> T;\n-}\n-\n pub(crate) fn clean_doc_module<'tcx>(doc: &DocModule<'tcx>, cx: &mut DocContext<'tcx>) -> Item {\n     let mut items: Vec<Item> = vec![];\n     let mut inserted = FxHashSet::default();\n@@ -1925,7 +1921,7 @@ fn clean_maybe_renamed_item<'tcx>(\n                 }))\n             }\n             ItemKind::Enum(ref def, generics) => EnumItem(Enum {\n-                variants: def.variants.iter().map(|v| v.clean(cx)).collect(),\n+                variants: def.variants.iter().map(|v| clean_variant(v, cx)).collect(),\n                 generics: clean_generics(generics, cx),\n             }),\n             ItemKind::TraitAlias(generics, bounds) => TraitAliasItem(TraitAlias {\n@@ -1978,14 +1974,12 @@ fn clean_maybe_renamed_item<'tcx>(\n     })\n }\n \n-impl<'tcx> Clean<'tcx, Item> for hir::Variant<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Item {\n-        let kind = VariantItem(clean_variant_data(&self.data, cx));\n-        let what_rustc_thinks =\n-            Item::from_hir_id_and_parts(self.id, Some(self.ident.name), kind, cx);\n-        // don't show `pub` for variants, which are always public\n-        Item { visibility: Inherited, ..what_rustc_thinks }\n-    }\n+fn clean_variant<'tcx>(variant: &hir::Variant<'tcx>, cx: &mut DocContext<'tcx>) -> Item {\n+    let kind = VariantItem(clean_variant_data(&variant.data, cx));\n+    let what_rustc_thinks =\n+        Item::from_hir_id_and_parts(variant.id, Some(variant.ident.name), kind, cx);\n+    // don't show `pub` for variants, which are always public\n+    Item { visibility: Inherited, ..what_rustc_thinks }\n }\n \n fn clean_impl<'tcx>("}, {"sha": "e42150dcc09d289a7d366504709af51233004b36", "filename": "src/test/ui/drop/drop_order.rs", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/b8c0a01b2b651416f5e7461209ff1a93a98619e4/src%2Ftest%2Fui%2Fdrop%2Fdrop_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c0a01b2b651416f5e7461209ff1a93a98619e4/src%2Ftest%2Fui%2Fdrop%2Fdrop_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdrop_order.rs?ref=b8c0a01b2b651416f5e7461209ff1a93a98619e4", "patch": "@@ -0,0 +1,145 @@\n+// run-pass\n+\n+use std::cell::RefCell;\n+use std::convert::TryInto;\n+\n+#[derive(Default)]\n+struct DropOrderCollector(RefCell<Vec<u32>>);\n+\n+struct LoudDrop<'a>(&'a DropOrderCollector, u32);\n+\n+impl Drop for LoudDrop<'_> {\n+    fn drop(&mut self) {\n+        println!(\"{}\", self.1);\n+        self.0.0.borrow_mut().push(self.1);\n+    }\n+}\n+\n+impl DropOrderCollector {\n+    fn option_loud_drop(&self, n: u32) -> Option<LoudDrop> {\n+        Some(LoudDrop(self, n))\n+    }\n+\n+    fn loud_drop(&self, n: u32) -> LoudDrop {\n+        LoudDrop(self, n)\n+    }\n+\n+    fn print(&self, n: u32) {\n+        println!(\"{}\", n);\n+        self.0.borrow_mut().push(n)\n+    }\n+\n+    fn if_(&self) {\n+        if self.option_loud_drop(1).is_some() {\n+            self.print(2);\n+        }\n+\n+        if self.option_loud_drop(3).is_none() {\n+            unreachable!();\n+        } else if self.option_loud_drop(4).is_some() {\n+            self.print(5);\n+        }\n+\n+        if {\n+            if self.option_loud_drop(7).is_some() && self.option_loud_drop(6).is_some() {\n+                self.loud_drop(8);\n+                true\n+            } else {\n+                false\n+            }\n+        } {\n+            self.print(9);\n+        }\n+    }\n+\n+    fn if_let(&self) {\n+        if let None = self.option_loud_drop(2) {\n+            unreachable!();\n+        } else {\n+            self.print(1);\n+        }\n+\n+        if let Some(_) = self.option_loud_drop(4) {\n+            self.print(3);\n+        }\n+\n+        if let Some(_d) = self.option_loud_drop(6) {\n+            self.print(5);\n+        }\n+    }\n+\n+    fn match_(&self) {\n+        match self.option_loud_drop(2) {\n+            _any => self.print(1),\n+        }\n+\n+        match self.option_loud_drop(4) {\n+            _ => self.print(3),\n+        }\n+\n+        match self.option_loud_drop(6) {\n+            Some(_) => self.print(5),\n+            _ => unreachable!(),\n+        }\n+\n+        match {\n+            let _ = self.loud_drop(7);\n+            let _d = self.loud_drop(9);\n+            self.print(8);\n+            ()\n+        } {\n+            () => self.print(10),\n+        }\n+\n+        match {\n+            match self.option_loud_drop(14) {\n+                _ => {\n+                    self.print(11);\n+                    self.option_loud_drop(13)\n+                }\n+            }\n+        } {\n+            _ => self.print(12),\n+        }\n+\n+        match {\n+            loop {\n+                break match self.option_loud_drop(16) {\n+                    _ => {\n+                        self.print(15);\n+                        self.option_loud_drop(18)\n+                    }\n+                };\n+            }\n+        } {\n+            _ => self.print(17),\n+        }\n+    }\n+\n+    fn assert_sorted(self) {\n+        assert!(\n+            self.0\n+                .into_inner()\n+                .into_iter()\n+                .enumerate()\n+                .all(|(idx, item)| idx + 1 == item.try_into().unwrap())\n+        );\n+    }\n+}\n+\n+fn main() {\n+    println!(\"-- if --\");\n+    let collector = DropOrderCollector::default();\n+    collector.if_();\n+    collector.assert_sorted();\n+\n+    println!(\"-- if let --\");\n+    let collector = DropOrderCollector::default();\n+    collector.if_let();\n+    collector.assert_sorted();\n+\n+    println!(\"-- match --\");\n+    let collector = DropOrderCollector::default();\n+    collector.match_();\n+    collector.assert_sorted();\n+}"}, {"sha": "5a895622200056c9c42da144fb4f6a4aadc29be2", "filename": "src/test/ui/parser/issue-100197-mut-let.fixed", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8c0a01b2b651416f5e7461209ff1a93a98619e4/src%2Ftest%2Fui%2Fparser%2Fissue-100197-mut-let.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b8c0a01b2b651416f5e7461209ff1a93a98619e4/src%2Ftest%2Fui%2Fparser%2Fissue-100197-mut-let.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-100197-mut-let.fixed?ref=b8c0a01b2b651416f5e7461209ff1a93a98619e4", "patch": "@@ -0,0 +1,6 @@\n+// run-rustfix\n+\n+fn main() {\n+    let mut _x = 123;\n+    //~^ ERROR invalid variable declaration\n+}"}, {"sha": "71103813a6ed39f282c6d0d3182fe03f31fa1aa3", "filename": "src/test/ui/parser/issue-100197-mut-let.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8c0a01b2b651416f5e7461209ff1a93a98619e4/src%2Ftest%2Fui%2Fparser%2Fissue-100197-mut-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8c0a01b2b651416f5e7461209ff1a93a98619e4/src%2Ftest%2Fui%2Fparser%2Fissue-100197-mut-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-100197-mut-let.rs?ref=b8c0a01b2b651416f5e7461209ff1a93a98619e4", "patch": "@@ -0,0 +1,6 @@\n+// run-rustfix\n+\n+fn main() {\n+    mut let _x = 123;\n+    //~^ ERROR invalid variable declaration\n+}"}, {"sha": "86658e4f39f1f7bd0b109c4eddbe86a76a44395f", "filename": "src/test/ui/parser/issue-100197-mut-let.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8c0a01b2b651416f5e7461209ff1a93a98619e4/src%2Ftest%2Fui%2Fparser%2Fissue-100197-mut-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8c0a01b2b651416f5e7461209ff1a93a98619e4/src%2Ftest%2Fui%2Fparser%2Fissue-100197-mut-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-100197-mut-let.stderr?ref=b8c0a01b2b651416f5e7461209ff1a93a98619e4", "patch": "@@ -0,0 +1,8 @@\n+error: invalid variable declaration\n+  --> $DIR/issue-100197-mut-let.rs:4:5\n+   |\n+LL |     mut let _x = 123;\n+   |     ^^^^^^^ help: switch the order of `mut` and `let`: `let mut`\n+\n+error: aborting due to previous error\n+"}]}