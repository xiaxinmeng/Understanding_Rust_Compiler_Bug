{"sha": "97fe64a5c7d68a40adf7b88d5cc992f9f3066537", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZmU2NGE1YzdkNjhhNDBhZGY3Yjg4ZDVjYzk5MmY5ZjMwNjY1Mzc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-22T17:56:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-22T17:56:18Z"}, "message": "Merge #8154 #8155\n\n8154: rewrite merge use trees assist to use muatable syntax trees r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\n8155: Fix confusion between parameters and the function r=jonas-schievink a=jonas-schievink\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/8152\r\n\r\nbors r+\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>", "tree": {"sha": "6f678b5d5f1841caecb1dc2c93f1fd2cbb5567ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f678b5d5f1841caecb1dc2c93f1fd2cbb5567ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97fe64a5c7d68a40adf7b88d5cc992f9f3066537", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgWNpCCRBK7hj4Ov3rIwAAdHIIACwkmr8Jwgab+3Bh4wkW2WhE\np/gnt/EtRlFtL7fKSihUcVQNFz7x0xxhrew9Cqm7hIC8Ln8ifH45+TTTOUFUav9S\nIzC0XrMY/6eGB9qWxUBCKrBQ2vTIkudMFgTnKwxh/0GZsHg+8e4Lr4ok+e25aumC\ntdGEmTWH+9dWkSNkRDyxDf985TpdDyVehyrNjdp+QSlSP5fq3i/NDfU8vGnBKUdr\nHnIeTp36fXC2r9jIH0/I5tUbacs5+oUD73h4Qnu7Qa3KTt/808GRla8A4r+TAFRY\np4YGHE3qNGVPChz4wXGWpjDCMkdDQaXwXE77RLV3yLfHIG5rWmfwgBqk0njfqwA=\n=OaJV\n-----END PGP SIGNATURE-----\n", "payload": "tree 6f678b5d5f1841caecb1dc2c93f1fd2cbb5567ea\nparent d834306e7cf85fe0b07e4979d2ff39bf4ef1f6be\nparent 9cbf09ec4f24aa30af1d9855a909a6cfc67188f7\nparent 2633e23f2bf0649031b887309cda1fecae063084\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1616435778 +0000\ncommitter GitHub <noreply@github.com> 1616435778 +0000\n\nMerge #8154 #8155\n\n8154: rewrite merge use trees assist to use muatable syntax trees r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\n8155: Fix confusion between parameters and the function r=jonas-schievink a=jonas-schievink\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/8152\r\n\r\nbors r+\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\nCo-authored-by: Jonas Schievink <jonas.schievink@ferrous-systems.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97fe64a5c7d68a40adf7b88d5cc992f9f3066537", "html_url": "https://github.com/rust-lang/rust/commit/97fe64a5c7d68a40adf7b88d5cc992f9f3066537", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97fe64a5c7d68a40adf7b88d5cc992f9f3066537/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d834306e7cf85fe0b07e4979d2ff39bf4ef1f6be", "url": "https://api.github.com/repos/rust-lang/rust/commits/d834306e7cf85fe0b07e4979d2ff39bf4ef1f6be", "html_url": "https://github.com/rust-lang/rust/commit/d834306e7cf85fe0b07e4979d2ff39bf4ef1f6be"}, {"sha": "9cbf09ec4f24aa30af1d9855a909a6cfc67188f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cbf09ec4f24aa30af1d9855a909a6cfc67188f7", "html_url": "https://github.com/rust-lang/rust/commit/9cbf09ec4f24aa30af1d9855a909a6cfc67188f7"}, {"sha": "2633e23f2bf0649031b887309cda1fecae063084", "url": "https://api.github.com/repos/rust-lang/rust/commits/2633e23f2bf0649031b887309cda1fecae063084", "html_url": "https://github.com/rust-lang/rust/commit/2633e23f2bf0649031b887309cda1fecae063084"}], "stats": {"total": 253, "additions": 163, "deletions": 90}, "files": [{"sha": "9e8e4e9ec67479ac9a49be101aa5dc4d0f66e7e8", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/97fe64a5c7d68a40adf7b88d5cc992f9f3066537/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fe64a5c7d68a40adf7b88d5cc992f9f3066537/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=97fe64a5c7d68a40adf7b88d5cc992f9f3066537", "patch": "@@ -322,6 +322,23 @@ impl DefMap {\n         (res.resolved_def, res.segment_index)\n     }\n \n+    pub(crate) fn resolve_path_locally(\n+        &self,\n+        db: &dyn DefDatabase,\n+        original_module: LocalModuleId,\n+        path: &ModPath,\n+        shadow: BuiltinShadowMode,\n+    ) -> (PerNs, Option<usize>) {\n+        let res = self.resolve_path_fp_with_macro_single(\n+            db,\n+            ResolveMode::Other,\n+            original_module,\n+            path,\n+            shadow,\n+        );\n+        (res.resolved_def, res.segment_index)\n+    }\n+\n     /// Ascends the `DefMap` hierarchy and calls `f` with every `DefMap` and containing module.\n     ///\n     /// If `f` returns `Some(val)`, iteration is stopped and `Some(val)` is returned. If `f` returns"}, {"sha": "60471937c0c3a6276fd6c374ea4077cb49d6730d", "filename": "crates/hir_def/src/nameres/path_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97fe64a5c7d68a40adf7b88d5cc992f9f3066537/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fe64a5c7d68a40adf7b88d5cc992f9f3066537/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=97fe64a5c7d68a40adf7b88d5cc992f9f3066537", "patch": "@@ -156,7 +156,7 @@ impl DefMap {\n         }\n     }\n \n-    fn resolve_path_fp_with_macro_single(\n+    pub(super) fn resolve_path_fp_with_macro_single(\n         &self,\n         db: &dyn DefDatabase,\n         mode: ResolveMode,"}, {"sha": "a73585ee798ff459645f03342326a1aa4a693d3e", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/97fe64a5c7d68a40adf7b88d5cc992f9f3066537/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fe64a5c7d68a40adf7b88d5cc992f9f3066537/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=97fe64a5c7d68a40adf7b88d5cc992f9f3066537", "patch": "@@ -548,7 +548,7 @@ impl ModuleItemMap {\n         path: &ModPath,\n     ) -> Option<ResolveValueResult> {\n         let (module_def, idx) =\n-            self.def_map.resolve_path(db, self.module_id, &path, BuiltinShadowMode::Other);\n+            self.def_map.resolve_path_locally(db, self.module_id, &path, BuiltinShadowMode::Other);\n         match idx {\n             None => {\n                 let value = to_value_ns(module_def)?;\n@@ -578,7 +578,7 @@ impl ModuleItemMap {\n         path: &ModPath,\n     ) -> Option<(TypeNs, Option<usize>)> {\n         let (module_def, idx) =\n-            self.def_map.resolve_path(db, self.module_id, &path, BuiltinShadowMode::Other);\n+            self.def_map.resolve_path_locally(db, self.module_id, &path, BuiltinShadowMode::Other);\n         let res = to_type_ns(module_def)?;\n         Some((res, idx))\n     }\n@@ -627,8 +627,18 @@ pub trait HasResolver: Copy {\n \n impl HasResolver for ModuleId {\n     fn resolver(self, db: &dyn DefDatabase) -> Resolver {\n-        let def_map = self.def_map(db);\n-        Resolver::default().push_module_scope(def_map, self.local_id)\n+        let mut def_map = self.def_map(db);\n+        let mut modules = Vec::new();\n+        modules.push((def_map.clone(), self.local_id));\n+        while let Some(parent) = def_map.parent() {\n+            def_map = parent.def_map(db);\n+            modules.push((def_map.clone(), parent.local_id));\n+        }\n+        let mut resolver = Resolver::default();\n+        for (def_map, module) in modules.into_iter().rev() {\n+            resolver = resolver.push_module_scope(def_map, module);\n+        }\n+        resolver\n     }\n }\n "}, {"sha": "b69f860502daabd6f741f8ee0725ae88031e576e", "filename": "crates/hir_ty/src/tests/regression.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/97fe64a5c7d68a40adf7b88d5cc992f9f3066537/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fe64a5c7d68a40adf7b88d5cc992f9f3066537/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=97fe64a5c7d68a40adf7b88d5cc992f9f3066537", "patch": "@@ -961,3 +961,16 @@ fn issue_6852() {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn param_overrides_fn() {\n+    check_types(\n+        r#\"\n+        fn example(example: i32) {\n+            fn f() {}\n+            example;\n+          //^^^^^^^ i32\n+        }\n+        \"#,\n+    )\n+}"}, {"sha": "cfc472a3258f133cc3217cef57b30fcf9c1ab404", "filename": "crates/ide_assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/97fe64a5c7d68a40adf7b88d5cc992f9f3066537/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fe64a5c7d68a40adf7b88d5cc992f9f3066537/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=97fe64a5c7d68a40adf7b88d5cc992f9f3066537", "patch": "@@ -1,8 +1,5 @@\n use ide_db::helpers::insert_use::{try_merge_imports, try_merge_trees, MergeBehavior};\n-use syntax::{\n-    algo::{neighbor, SyntaxRewriter},\n-    ast, AstNode,\n-};\n+use syntax::{algo::neighbor, ast, ted, AstNode};\n \n use crate::{\n     assist_context::{AssistContext, Assists},\n@@ -24,33 +21,29 @@ use crate::{\n // ```\n pub(crate) fn merge_imports(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let tree: ast::UseTree = ctx.find_node_at_offset()?;\n-    let mut rewriter = SyntaxRewriter::default();\n+    let original_parent = tree.syntax().ancestors().last()?;\n+\n+    let tree = tree.clone_for_update();\n+    let new_parent = tree.syntax().ancestors().last()?;\n+\n     let mut offset = ctx.offset();\n \n+    let mut imports = None;\n+    let mut uses = None;\n     if let Some(use_item) = tree.syntax().parent().and_then(ast::Use::cast) {\n-        let (merged, to_delete) =\n+        let (merged, to_remove) =\n             next_prev().filter_map(|dir| neighbor(&use_item, dir)).find_map(|use_item2| {\n                 try_merge_imports(&use_item, &use_item2, MergeBehavior::Full).zip(Some(use_item2))\n             })?;\n \n-        rewriter.replace_ast(&use_item, &merged);\n-        rewriter += to_delete.remove();\n-\n-        if to_delete.syntax().text_range().end() < offset {\n-            offset -= to_delete.syntax().text_range().len();\n-        }\n+        imports = Some((use_item, merged, to_remove));\n     } else {\n-        let (merged, to_delete) =\n+        let (merged, to_remove) =\n             next_prev().filter_map(|dir| neighbor(&tree, dir)).find_map(|use_tree| {\n                 try_merge_trees(&tree, &use_tree, MergeBehavior::Full).zip(Some(use_tree))\n             })?;\n \n-        rewriter.replace_ast(&tree, &merged);\n-        rewriter += to_delete.remove();\n-\n-        if to_delete.syntax().text_range().end() < offset {\n-            offset -= to_delete.syntax().text_range().len();\n-        }\n+        uses = Some((tree.clone(), merged, to_remove))\n     };\n \n     let target = tree.syntax().text_range();\n@@ -59,7 +52,23 @@ pub(crate) fn merge_imports(acc: &mut Assists, ctx: &AssistContext) -> Option<()\n         \"Merge imports\",\n         target,\n         |builder| {\n-            builder.rewrite(rewriter);\n+            if let Some((to_replace, replacement, to_remove)) = imports {\n+                if to_remove.syntax().text_range().end() < offset {\n+                    offset -= to_remove.syntax().text_range().len();\n+                }\n+                ted::replace(to_replace.syntax().clone(), replacement.syntax().clone());\n+                to_remove.remove();\n+            }\n+\n+            if let Some((to_replace, replacement, to_remove)) = uses {\n+                if to_remove.syntax().text_range().end() < offset {\n+                    offset -= to_remove.syntax().text_range().len();\n+                }\n+                ted::replace(to_replace.syntax().clone(), replacement.syntax().clone());\n+                to_remove.remove()\n+            }\n+\n+            builder.replace(original_parent.text_range(), new_parent.to_string())\n         },\n     )\n }"}, {"sha": "8d271e056f597ace5104e47ac4adf4c5fc5c45ab", "filename": "crates/ide_assists/src/handlers/unmerge_use.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/97fe64a5c7d68a40adf7b88d5cc992f9f3066537/crates%2Fide_assists%2Fsrc%2Fhandlers%2Funmerge_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fe64a5c7d68a40adf7b88d5cc992f9f3066537/crates%2Fide_assists%2Fsrc%2Fhandlers%2Funmerge_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Funmerge_use.rs?ref=97fe64a5c7d68a40adf7b88d5cc992f9f3066537", "patch": "@@ -1,6 +1,6 @@\n use syntax::{\n-    algo::SyntaxRewriter,\n-    ast::{self, edit::AstNodeEdit, VisibilityOwner},\n+    ast::{self, VisibilityOwner},\n+    ted::{self, Position},\n     AstNode, SyntaxKind,\n };\n \n@@ -22,7 +22,7 @@ use crate::{\n // use std::fmt::Display;\n // ```\n pub(crate) fn unmerge_use(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let tree: ast::UseTree = ctx.find_node_at_offset()?;\n+    let tree: ast::UseTree = ctx.find_node_at_offset::<ast::UseTree>()?.clone_for_update();\n \n     let tree_list = tree.syntax().parent().and_then(ast::UseTreeList::cast)?;\n     if tree_list.use_trees().count() < 2 {\n@@ -33,6 +33,9 @@ pub(crate) fn unmerge_use(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     let use_: ast::Use = tree_list.syntax().ancestors().find_map(ast::Use::cast)?;\n     let path = resolve_full_path(&tree)?;\n \n+    let old_parent_range = use_.syntax().parent()?.text_range();\n+    let new_parent = use_.syntax().parent()?;\n+\n     let target = tree.syntax().text_range();\n     acc.add(\n         AssistId(\"unmerge_use\", AssistKind::RefactorRewrite),\n@@ -47,20 +50,13 @@ pub(crate) fn unmerge_use(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n                     tree.rename(),\n                     tree.star_token().is_some(),\n                 ),\n-            );\n-\n-            let mut rewriter = SyntaxRewriter::default();\n-            rewriter += tree.remove();\n-            rewriter.insert_after(use_.syntax(), &ast::make::tokens::single_newline());\n-            if let ident_level @ 1..=usize::MAX = use_.indent_level().0 as usize {\n-                rewriter.insert_after(\n-                    use_.syntax(),\n-                    &ast::make::tokens::whitespace(&\" \".repeat(4 * ident_level)),\n-                );\n-            }\n-            rewriter.insert_after(use_.syntax(), new_use.syntax());\n-\n-            builder.rewrite(rewriter);\n+            )\n+            .clone_for_update();\n+\n+            tree.remove();\n+            ted::insert(Position::after(use_.syntax()), new_use.syntax());\n+\n+            builder.replace(old_parent_range, new_parent.to_string());\n         },\n     )\n }"}, {"sha": "20c195f82519bc4a4532e710681255ada13ded24", "filename": "crates/ide_db/src/helpers/insert_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97fe64a5c7d68a40adf7b88d5cc992f9f3066537/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fe64a5c7d68a40adf7b88d5cc992f9f3066537/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use.rs?ref=97fe64a5c7d68a40adf7b88d5cc992f9f3066537", "patch": "@@ -213,7 +213,7 @@ pub fn try_merge_imports(\n     let lhs_tree = lhs.use_tree()?;\n     let rhs_tree = rhs.use_tree()?;\n     let merged = try_merge_trees(&lhs_tree, &rhs_tree, merge_behavior)?;\n-    Some(lhs.with_use_tree(merged))\n+    Some(lhs.with_use_tree(merged).clone_for_update())\n }\n \n pub fn try_merge_trees(\n@@ -234,7 +234,7 @@ pub fn try_merge_trees(\n     } else {\n         (lhs.split_prefix(&lhs_prefix), rhs.split_prefix(&rhs_prefix))\n     };\n-    recursive_merge(&lhs, &rhs, merge)\n+    recursive_merge(&lhs, &rhs, merge).map(|it| it.clone_for_update())\n }\n \n /// Recursively \"zips\" together lhs and rhs."}, {"sha": "18820786a5cfea4269dabd7fbdacee4b03a028ef", "filename": "crates/syntax/src/ast/edit.rs", "status": "modified", "additions": 8, "deletions": 38, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/97fe64a5c7d68a40adf7b88d5cc992f9f3066537/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fe64a5c7d68a40adf7b88d5cc992f9f3066537/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs?ref=97fe64a5c7d68a40adf7b88d5cc992f9f3066537", "patch": "@@ -9,7 +9,7 @@ use std::{\n use arrayvec::ArrayVec;\n \n use crate::{\n-    algo::{self, neighbor, SyntaxRewriter},\n+    algo::{self, SyntaxRewriter},\n     ast::{\n         self,\n         make::{self, tokens},\n@@ -322,27 +322,6 @@ impl ast::Use {\n         }\n         self.clone()\n     }\n-\n-    pub fn remove(&self) -> SyntaxRewriter<'static> {\n-        let mut res = SyntaxRewriter::default();\n-        res.delete(self.syntax());\n-        let next_ws = self\n-            .syntax()\n-            .next_sibling_or_token()\n-            .and_then(|it| it.into_token())\n-            .and_then(ast::Whitespace::cast);\n-        if let Some(next_ws) = next_ws {\n-            let ws_text = next_ws.syntax().text();\n-            if let Some(rest) = ws_text.strip_prefix('\\n') {\n-                if rest.is_empty() {\n-                    res.delete(next_ws.syntax())\n-                } else {\n-                    res.replace(next_ws.syntax(), &make::tokens::whitespace(rest));\n-                }\n-            }\n-        }\n-        res\n-    }\n }\n \n impl ast::UseTree {\n@@ -396,22 +375,6 @@ impl ast::UseTree {\n             Some(res)\n         }\n     }\n-\n-    pub fn remove(&self) -> SyntaxRewriter<'static> {\n-        let mut res = SyntaxRewriter::default();\n-        res.delete(self.syntax());\n-        for &dir in [Direction::Next, Direction::Prev].iter() {\n-            if let Some(nb) = neighbor(self, dir) {\n-                self.syntax()\n-                    .siblings_with_tokens(dir)\n-                    .skip(1)\n-                    .take_while(|it| it.as_node() != Some(nb.syntax()))\n-                    .for_each(|el| res.delete(&el));\n-                return res;\n-            }\n-        }\n-        res\n-    }\n }\n \n impl ast::MatchArmList {\n@@ -592,6 +555,13 @@ impl ops::Add<u8> for IndentLevel {\n }\n \n impl IndentLevel {\n+    pub fn from_element(element: &SyntaxElement) -> IndentLevel {\n+        match element {\n+            rowan::NodeOrToken::Node(it) => IndentLevel::from_node(it),\n+            rowan::NodeOrToken::Token(it) => IndentLevel::from_token(it),\n+        }\n+    }\n+\n     pub fn from_node(node: &SyntaxNode) -> IndentLevel {\n         match node.first_token() {\n             Some(it) => Self::from_token(&it),"}, {"sha": "529bd0eb14c34b2979e2ee9ea93c8a99976b937a", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/97fe64a5c7d68a40adf7b88d5cc992f9f3066537/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fe64a5c7d68a40adf7b88d5cc992f9f3066537/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=97fe64a5c7d68a40adf7b88d5cc992f9f3066537", "patch": "@@ -2,13 +2,13 @@\n \n use std::iter::empty;\n \n-use ast::{edit::AstNodeEdit, make, GenericParamsOwner, WhereClause};\n use parser::T;\n \n use crate::{\n-    ast,\n+    algo::neighbor,\n+    ast::{self, edit::AstNodeEdit, make, GenericParamsOwner, WhereClause},\n     ted::{self, Position},\n-    AstNode, Direction,\n+    AstNode, AstToken, Direction,\n };\n \n use super::NameOwner;\n@@ -126,3 +126,41 @@ impl ast::TypeBoundList {\n         }\n     }\n }\n+\n+impl ast::UseTree {\n+    pub fn remove(&self) {\n+        for &dir in [Direction::Next, Direction::Prev].iter() {\n+            if let Some(next_use_tree) = neighbor(self, dir) {\n+                let separators = self\n+                    .syntax()\n+                    .siblings_with_tokens(dir)\n+                    .skip(1)\n+                    .take_while(|it| it.as_node() != Some(next_use_tree.syntax()));\n+                ted::remove_all_iter(separators);\n+                break;\n+            }\n+        }\n+        ted::remove(self.syntax())\n+    }\n+}\n+\n+impl ast::Use {\n+    pub fn remove(&self) {\n+        let next_ws = self\n+            .syntax()\n+            .next_sibling_or_token()\n+            .and_then(|it| it.into_token())\n+            .and_then(ast::Whitespace::cast);\n+        if let Some(next_ws) = next_ws {\n+            let ws_text = next_ws.syntax().text();\n+            if let Some(rest) = ws_text.strip_prefix('\\n') {\n+                if rest.is_empty() {\n+                    ted::remove(next_ws.syntax())\n+                } else {\n+                    ted::replace(next_ws.syntax(), make::tokens::whitespace(rest))\n+                }\n+            }\n+        }\n+        ted::remove(self.syntax())\n+    }\n+}"}, {"sha": "c08f2c14f565ec2c14fd388cdac838c0294f6328", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97fe64a5c7d68a40adf7b88d5cc992f9f3066537/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fe64a5c7d68a40adf7b88d5cc992f9f3066537/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=97fe64a5c7d68a40adf7b88d5cc992f9f3066537", "patch": "@@ -560,7 +560,7 @@ pub mod tokens {\n     pub fn whitespace(text: &str) -> SyntaxToken {\n         assert!(text.trim().is_empty());\n         let sf = SourceFile::parse(text).ok().unwrap();\n-        sf.syntax().first_child_or_token().unwrap().into_token().unwrap()\n+        sf.syntax().clone_for_update().first_child_or_token().unwrap().into_token().unwrap()\n     }\n \n     pub fn doc_comment(text: &str) -> SyntaxToken {"}, {"sha": "177d4ff67a0080eb1a8b9e508320fcf509c71c2f", "filename": "crates/syntax/src/ted.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/97fe64a5c7d68a40adf7b88d5cc992f9f3066537/crates%2Fsyntax%2Fsrc%2Fted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97fe64a5c7d68a40adf7b88d5cc992f9f3066537/crates%2Fsyntax%2Fsrc%2Fted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fted.rs?ref=97fe64a5c7d68a40adf7b88d5cc992f9f3066537", "patch": "@@ -2,11 +2,14 @@\n //!\n //! The `_raw`-suffixed functions insert elements as is, unsuffixed versions fix\n //! up elements around the edges.\n-use std::ops::RangeInclusive;\n+use std::{mem, ops::RangeInclusive};\n \n use parser::T;\n \n-use crate::{ast::make, SyntaxElement, SyntaxKind, SyntaxNode, SyntaxToken};\n+use crate::{\n+    ast::{edit::IndentLevel, make},\n+    SyntaxElement, SyntaxKind, SyntaxNode, SyntaxToken,\n+};\n \n /// Utility trait to allow calling `ted` functions with references or owned\n /// nodes. Do not use outside of this module.\n@@ -101,12 +104,25 @@ pub fn insert_all_raw(position: Position, elements: Vec<SyntaxElement>) {\n }\n \n pub fn remove(elem: impl Element) {\n-    let elem = elem.syntax_element();\n-    remove_all(elem.clone()..=elem)\n+    elem.syntax_element().detach()\n }\n pub fn remove_all(range: RangeInclusive<SyntaxElement>) {\n     replace_all(range, Vec::new())\n }\n+pub fn remove_all_iter(range: impl IntoIterator<Item = SyntaxElement>) {\n+    let mut it = range.into_iter();\n+    if let Some(mut first) = it.next() {\n+        match it.last() {\n+            Some(mut last) => {\n+                if first.index() > last.index() {\n+                    mem::swap(&mut first, &mut last)\n+                }\n+                remove_all(first..=last)\n+            }\n+            None => remove(first),\n+        }\n+    }\n+}\n \n pub fn replace(old: impl Element, new: impl Element) {\n     let old = old.syntax_element();\n@@ -149,5 +165,9 @@ fn ws_between(left: &SyntaxElement, right: &SyntaxElement) -> Option<SyntaxToken\n     if right.kind() == T![;] || right.kind() == T![,] {\n         return None;\n     }\n+    if right.kind() == SyntaxKind::USE {\n+        let indent = IndentLevel::from_element(left);\n+        return Some(make::tokens::whitespace(&format!(\"\\n{}\", indent)));\n+    }\n     Some(make::tokens::single_space())\n }"}]}