{"sha": "7098cfda2e1476cb502511ab8a55c6e787035237", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwOThjZmRhMmUxNDc2Y2I1MDI1MTFhYjhhNTVjNmU3ODcwMzUyMzc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-12T18:49:43Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-12T18:49:43Z"}, "message": "Fix test cases accordingly", "tree": {"sha": "d025269eab193db8ff2d3efaee7a71f39e80fc44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d025269eab193db8ff2d3efaee7a71f39e80fc44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7098cfda2e1476cb502511ab8a55c6e787035237", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7098cfda2e1476cb502511ab8a55c6e787035237", "html_url": "https://github.com/rust-lang/rust/commit/7098cfda2e1476cb502511ab8a55c6e787035237", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7098cfda2e1476cb502511ab8a55c6e787035237/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "259379426cebf2c66e67076e6214b9e3e8c920df", "url": "https://api.github.com/repos/rust-lang/rust/commits/259379426cebf2c66e67076e6214b9e3e8c920df", "html_url": "https://github.com/rust-lang/rust/commit/259379426cebf2c66e67076e6214b9e3e8c920df"}], "stats": {"total": 44, "additions": 43, "deletions": 1}, "files": [{"sha": "d90e9c40ea42ed0998003168acba546d1451cf8a", "filename": "src/test/compile-fail/empty-struct-unit-pat.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7098cfda2e1476cb502511ab8a55c6e787035237/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7098cfda2e1476cb502511ab8a55c6e787035237/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs?ref=7098cfda2e1476cb502511ab8a55c6e787035237", "patch": "@@ -32,12 +32,14 @@ fn main() { //~ ERROR: compilation successful\n     // }\n     match e1 {\n         Empty1(..) => () //~ WARN `Empty1` does not name a tuple variant or a tuple struct\n+            //~^ WARN HARD ERROR\n     }\n     // Rejected by parser as yet\n     // match e2 {\n     //     E::Empty2() => () // ERROR `E::Empty2` does not name a tuple variant or a tuple struct\n     // }\n     match e2 {\n         E::Empty2(..) => () //~ WARN `E::Empty2` does not name a tuple variant or a tuple struct\n+            //~^ WARN HARD ERROR\n     }\n }"}, {"sha": "3af6bad1d61614b4779e24bc34b2b39e0ff9b362", "filename": "src/test/compile-fail/private-in-public-warn.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7098cfda2e1476cb502511ab8a55c6e787035237/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7098cfda2e1476cb502511ab8a55c6e787035237/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs?ref=7098cfda2e1476cb502511ab8a55c6e787035237", "patch": "@@ -26,23 +26,34 @@ mod types {\n     }\n \n     pub type Alias = Priv; //~ WARN private type in public interface\n+    //~^ WARNING HARD ERROR\n     pub enum E {\n         V1(Priv), //~ WARN private type in public interface\n+        //~^ WARNING HARD ERROR\n         V2 { field: Priv }, //~ WARN private type in public interface\n+        //~^ WARNING HARD ERROR\n     }\n     pub trait Tr {\n         const C: Priv = Priv; //~ WARN private type in public interface\n+        //~^ WARNING HARD ERROR\n         type Alias = Priv; //~ WARN private type in public interface\n+        //~^ WARNING HARD ERROR\n         fn f1(arg: Priv) {} //~ WARN private type in public interface\n+        //~^ WARNING HARD ERROR\n         fn f2() -> Priv { panic!() } //~ WARN private type in public interface\n+        //~^ WARNING HARD ERROR\n     }\n     extern {\n         pub static ES: Priv; //~ WARN private type in public interface\n+        //~^ WARNING HARD ERROR\n         pub fn ef1(arg: Priv); //~ WARN private type in public interface\n+        //~^ WARNING HARD ERROR\n         pub fn ef2() -> Priv; //~ WARN private type in public interface\n+        //~^ WARNING HARD ERROR\n     }\n     impl PubTr for Pub {\n         type Alias = Priv; //~ WARN private type in public interface\n+        //~^ WARNING HARD ERROR\n     }\n }\n \n@@ -53,14 +64,21 @@ mod traits {\n \n     pub type Alias<T: PrivTr> = T; //~ WARN private trait in public interface\n     //~^ WARN trait bounds are not (yet) enforced in type definitions\n+    //~| WARNING HARD ERROR\n     pub trait Tr1: PrivTr {} //~ WARN private trait in public interface\n+    //~^ WARNING HARD ERROR\n     pub trait Tr2<T: PrivTr> {} //~ WARN private trait in public interface\n+        //~^ WARNING HARD ERROR\n     pub trait Tr3 {\n         type Alias: PrivTr; //~ WARN private trait in public interface\n+        //~^ WARNING HARD ERROR\n         fn f<T: PrivTr>(arg: T) {} //~ WARN private trait in public interface\n+        //~^ WARNING HARD ERROR\n     }\n     impl<T: PrivTr> Pub<T> {} //~ WARN private trait in public interface\n+        //~^ WARNING HARD ERROR\n     impl<T: PrivTr> PubTr for Pub<T> {} //~ WARN private trait in public interface\n+        //~^ WARNING HARD ERROR\n }\n \n mod traits_where {\n@@ -69,12 +87,17 @@ mod traits_where {\n     pub trait PubTr {}\n \n     pub type Alias<T> where T: PrivTr = T; //~ WARN private trait in public interface\n+        //~^ WARNING HARD ERROR\n     pub trait Tr2<T> where T: PrivTr {} //~ WARN private trait in public interface\n+        //~^ WARNING HARD ERROR\n     pub trait Tr3 {\n         fn f<T>(arg: T) where T: PrivTr {} //~ WARN private trait in public interface\n+        //~^ WARNING HARD ERROR\n     }\n     impl<T> Pub<T> where T: PrivTr {} //~ WARN private trait in public interface\n+        //~^ WARNING HARD ERROR\n     impl<T> PubTr for Pub<T> where T: PrivTr {} //~ WARN private trait in public interface\n+        //~^ WARNING HARD ERROR\n }\n \n mod generics {\n@@ -84,9 +107,13 @@ mod generics {\n     pub trait PubTr<T> {}\n \n     pub trait Tr1: PrivTr<Pub> {} //~ WARN private trait in public interface\n+        //~^ WARNING HARD ERROR\n     pub trait Tr2: PubTr<Priv> {} //~ WARN private type in public interface\n+        //~^ WARNING HARD ERROR\n     pub trait Tr3: PubTr<[Priv; 1]> {} //~ WARN private type in public interface\n+        //~^ WARNING HARD ERROR\n     pub trait Tr4: PubTr<Pub<Priv>> {} //~ WARN private type in public interface\n+        //~^ WARNING HARD ERROR\n }\n \n mod impls {\n@@ -113,6 +140,7 @@ mod impls {\n     }\n     impl PubTr for Pub {\n         type Alias = Priv; //~ WARN private type in public interface\n+        //~^ WARNING HARD ERROR\n     }\n }\n \n@@ -179,22 +207,27 @@ mod aliases_pub {\n     pub trait Tr1: PrivUseAliasTr {} // OK\n     // This should be OK, if type aliases are substituted\n     pub trait Tr2: PrivUseAliasTr<PrivAlias> {} //~ WARN private type in public interface\n+        //~^ WARNING HARD ERROR\n \n     impl PrivAlias {\n         pub fn f(arg: Priv) {} //~ WARN private type in public interface\n+        //~^ WARNING HARD ERROR\n     }\n     // This doesn't even parse\n     // impl <Priv as PrivTr>::AssocAlias {\n     //     pub fn f(arg: Priv) {} // WARN private type in public interface\n     // }\n     impl PrivUseAliasTr for PrivUseAlias {\n         type Check = Priv; //~ WARN private type in public interface\n+        //~^ WARNING HARD ERROR\n     }\n     impl PrivUseAliasTr for PrivAlias {\n         type Check = Priv; //~ WARN private type in public interface\n+        //~^ WARNING HARD ERROR\n     }\n     impl PrivUseAliasTr for <Priv as PrivTr>::AssocAlias {\n         type Check = Priv; //~ WARN private type in public interface\n+        //~^ WARNING HARD ERROR\n     }\n }\n \n@@ -217,8 +250,11 @@ mod aliases_priv {\n     impl PrivTr for Priv {}\n \n     pub trait Tr1: PrivUseAliasTr {} //~ WARN private trait in public interface\n+        //~^ WARNING HARD ERROR\n     pub trait Tr2: PrivUseAliasTr<PrivAlias> {} //~ WARN private trait in public interface\n      //~^ WARN private type in public interface\n+        //~| WARNING HARD ERROR\n+        //~| WARNING HARD ERROR\n \n     impl PrivUseAlias {\n         pub fn f(arg: Priv) {} // OK"}, {"sha": "0e8f92de6589e7046cc6cd3d980d20bec8d31b37", "filename": "src/test/compile-fail/private-variant-reexport.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7098cfda2e1476cb502511ab8a55c6e787035237/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7098cfda2e1476cb502511ab8a55c6e787035237/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs?ref=7098cfda2e1476cb502511ab8a55c6e787035237", "patch": "@@ -13,18 +13,22 @@\n \n mod m1 {\n     pub use ::E::V; //~ WARN variant `V` is private, and cannot be reexported\n+    //~^ WARNING HARD ERROR\n }\n \n mod m2 {\n     pub use ::E::{V}; //~ WARN variant `V` is private, and cannot be reexported\n+    //~^ WARNING HARD ERROR\n }\n \n mod m3 {\n     pub use ::E::V::{self}; //~ WARN variant `V` is private, and cannot be reexported\n+    //~^ WARNING HARD ERROR\n }\n \n mod m4 {\n     pub use ::E::*; //~ WARN variant `V` is private, and cannot be reexported\n+    //~^ WARNING HARD ERROR\n }\n \n enum E { V }"}, {"sha": "af97156a771349bef765eace7c7f6b14aba28176", "filename": "src/test/compile-fail/type-parameter-invalid-lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7098cfda2e1476cb502511ab8a55c6e787035237/src%2Ftest%2Fcompile-fail%2Ftype-parameter-invalid-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7098cfda2e1476cb502511ab8a55c6e787035237/src%2Ftest%2Fcompile-fail%2Ftype-parameter-invalid-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-parameter-invalid-lint.rs?ref=7098cfda2e1476cb502511ab8a55c6e787035237", "patch": "@@ -13,5 +13,5 @@\n \n fn avg<T=i32>(_: T) {}\n //~^ ERROR defaults for type parameters are only allowed\n-//~| NOTE HARD ERROR\n+//~| WARNING HARD ERROR\n fn main() {}"}]}