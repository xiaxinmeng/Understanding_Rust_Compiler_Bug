{"sha": "72d7b9c097f5c9299a83ed7ec7ea97093400f92e", "node_id": "C_kwDOAAsO6NoAKDcyZDdiOWMwOTdmNWM5Mjk5YTgzZWQ3ZWM3ZWE5NzA5MzQwMGY5MmU", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-11-10T21:59:49Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-11-10T22:37:55Z"}, "message": "author: Remove needless `ref`s", "tree": {"sha": "e7127354dbf7e72f3c23f96d3f36367ede2bbc05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7127354dbf7e72f3c23f96d3f36367ede2bbc05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72d7b9c097f5c9299a83ed7ec7ea97093400f92e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72d7b9c097f5c9299a83ed7ec7ea97093400f92e", "html_url": "https://github.com/rust-lang/rust/commit/72d7b9c097f5c9299a83ed7ec7ea97093400f92e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72d7b9c097f5c9299a83ed7ec7ea97093400f92e/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a806ce79b63c74ad5f4225a1c27a03d418a85af4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a806ce79b63c74ad5f4225a1c27a03d418a85af4", "html_url": "https://github.com/rust-lang/rust/commit/a806ce79b63c74ad5f4225a1c27a03d418a85af4"}], "stats": {"total": 320, "additions": 151, "deletions": 169}, "files": [{"sha": "79186fbe0355d3ce69dcaf6a775588045172f25b", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 66, "deletions": 84, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/72d7b9c097f5c9299a83ed7ec7ea97093400f92e/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d7b9c097f5c9299a83ed7ec7ea97093400f92e/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=72d7b9c097f5c9299a83ed7ec7ea97093400f92e", "patch": "@@ -196,7 +196,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n         if let Some(label) = label {\n             let label_bind = self.next(\"label\");\n \n-            println!(\"    if let Some(ref {}) = {};\", label_bind, self.current);\n+            println!(\"    if let Some({}) = {};\", label_bind, self.current);\n \n             let label_name_bind = self.next(\"label_name\");\n             let label_name = label.ident.name;\n@@ -242,10 +242,10 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 println!(\"    if let LitKind::ByteStr(ref {}) = {}.node;\", vec_pat, lit_pat);\n                 println!(\"    if let [{:?}] = **{};\", vec, vec_pat);\n             },\n-            LitKind::Str(ref text, _) => {\n+            LitKind::Str(text, _) => {\n                 let str_pat = self.next(\"s\");\n \n-                println!(\"    if let LitKind::Str(ref {}, _) = {}.node;\", str_pat, lit_pat);\n+                println!(\"    if let LitKind::Str({}, _) = {}.node;\", str_pat, lit_pat);\n                 println!(\"    if {}.as_str() == {:?};\", str_pat, &*text.as_str());\n             },\n         }\n@@ -256,7 +256,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n         let arms_pat = self.next(\"arms\");\n \n         println!(\n-            \"Match(ref {}, ref {}, MatchSource::{:?}) = {};\",\n+            \"Match({}, {}, MatchSource::{:?}) = {};\",\n             expr_pat, arms_pat, des, current\n         );\n \n@@ -269,16 +269,16 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n             self.current = format!(\"{}[{}].pat\", arms_pat, i);\n             self.visit_pat(arm.pat);\n \n-            if let Some(ref guard) = arm.guard {\n+            if let Some(guard) = &arm.guard {\n                 let guard_pat = self.next(\"guard\");\n \n-                println!(\"    if let Some(ref {}) = {}[{}].guard;\", guard_pat, arms_pat, i);\n+                println!(\"    if let Some({}) = &{}[{}].guard;\", guard_pat, arms_pat, i);\n \n                 match guard {\n                     hir::Guard::If(if_expr) => {\n                         let if_expr_pat = self.next(\"expr\");\n \n-                        println!(\"    if let Guard::If(ref {}) = {};\", if_expr_pat, guard_pat);\n+                        println!(\"    if let Guard::If({}) = {};\", if_expr_pat, guard_pat);\n \n                         self.current = if_expr_pat;\n                         self.visit_expr(if_expr);\n@@ -288,7 +288,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                         let if_let_expr_pat = self.next(\"expr\");\n \n                         println!(\n-                            \"    if let Guard::IfLet(ref {}, ref {}) = {};\",\n+                            \"    if let Guard::IfLet({}, {}) = {};\",\n                             if_let_pat_pat, if_let_expr_pat, guard_pat\n                         );\n \n@@ -461,7 +461,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n                 let let_pat = self.next(\"pat\");\n                 let let_expr = self.next(\"expr\");\n \n-                println!(\"Let(ref {}, ref {}, _) = {};\", let_pat, let_expr, current);\n+                println!(\"Let({}, {}, _) = {};\", let_pat, let_expr, current);\n \n                 self.current = let_expr;\n                 self.visit_expr(expr);\n@@ -472,15 +472,15 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n             ExprKind::Box(inner) => {\n                 let inner_pat = self.next(\"inner\");\n \n-                println!(\"Box(ref {}) = {};\", inner_pat, current);\n+                println!(\"Box({}) = {};\", inner_pat, current);\n \n                 self.current = inner_pat;\n                 self.visit_expr(inner);\n             },\n             ExprKind::Array(elements) => {\n                 let elements_pat = self.next(\"elements\");\n \n-                println!(\"Array(ref {}) = {};\", elements_pat, current);\n+                println!(\"Array({}) = {};\", elements_pat, current);\n \n                 println!(\"    if {}.len() == {};\", elements_pat, elements.len());\n \n@@ -493,7 +493,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n                 let func_pat = self.next(\"func\");\n                 let args_pat = self.next(\"args\");\n \n-                println!(\"Call(ref {}, ref {}) = {};\", func_pat, args_pat, current);\n+                println!(\"Call({}, {}) = {};\", func_pat, args_pat, current);\n \n                 self.current = func_pat;\n                 self.visit_expr(func);\n@@ -509,10 +509,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n                 let method_name_pat = self.next(\"method_name\");\n                 let args_pat = self.next(\"args\");\n \n-                println!(\n-                    \"MethodCall(ref {}, ref {}, _) = {};\",\n-                    method_name_pat, args_pat, current\n-                );\n+                println!(\"MethodCall({}, _, {}, _) = {};\", method_name_pat, args_pat, current);\n \n                 println!(\n                     \"    if {}.ident.name.as_str() == {};\",\n@@ -530,7 +527,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n             ExprKind::Tup(elements) => {\n                 let elements_pat = self.next(\"elements\");\n \n-                println!(\"Tup(ref {}) = {};\", elements_pat, current);\n+                println!(\"Tup({}) = {};\", elements_pat, current);\n \n                 println!(\"    if {}.len() == {};\", elements_pat, elements.len());\n \n@@ -539,15 +536,12 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n                     self.visit_expr(element);\n                 }\n             },\n-            ExprKind::Binary(ref op, left, right) => {\n+            ExprKind::Binary(op, left, right) => {\n                 let op_pat = self.next(\"op\");\n                 let left_pat = self.next(\"left\");\n                 let right_pat = self.next(\"right\");\n \n-                println!(\n-                    \"Binary(ref {}, ref {}, ref {}) = {};\",\n-                    op_pat, left_pat, right_pat, current\n-                );\n+                println!(\"Binary({}, {}, {}) = {};\", op_pat, left_pat, right_pat, current);\n \n                 println!(\"    if BinOpKind::{:?} == {}.node;\", op.node, op_pat);\n \n@@ -557,10 +551,10 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n                 self.current = right_pat;\n                 self.visit_expr(right);\n             },\n-            ExprKind::Unary(ref op, inner) => {\n+            ExprKind::Unary(op, inner) => {\n                 let inner_pat = self.next(\"inner\");\n \n-                println!(\"Unary(UnOp::{:?}, ref {}) = {};\", op, inner_pat, current);\n+                println!(\"Unary(UnOp::{:?}, {}) = {};\", op, inner_pat, current);\n \n                 self.current = inner_pat;\n                 self.visit_expr(inner);\n@@ -571,7 +565,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n                 let cast_ty = self.next(\"cast_ty\");\n                 let qp_label = self.next(\"qpath\");\n \n-                println!(\"Cast(ref {}, ref {}) = {};\", cast_pat, cast_ty, current);\n+                println!(\"Cast({}, {}) = {};\", cast_pat, cast_ty, current);\n \n                 if let TyKind::Path(ref qp) = ty.kind {\n                     println!(\"    if let TyKind::Path(ref {}) = {}.kind;\", qp_label, cast_ty);\n@@ -586,7 +580,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n             ExprKind::Type(expr, _ty) => {\n                 let cast_pat = self.next(\"expr\");\n \n-                println!(\"Type(ref {}, _) = {};\", cast_pat, current);\n+                println!(\"Type({}, _) = {};\", cast_pat, current);\n \n                 self.current = cast_pat;\n                 self.visit_expr(expr);\n@@ -596,7 +590,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n                 let label_pat = self.next(\"label\");\n \n                 println!(\n-                    \"Loop(ref {}, ref {}, LoopSource::{:?}, _) = {};\",\n+                    \"Loop({}, {}, LoopSource::{:?}, _) = {};\",\n                     body_pat, label_pat, des, current\n                 );\n \n@@ -626,7 +620,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n                 let body_id_pat = self.next(\"body_id\");\n \n                 println!(\n-                    \"Closure({}, ref {}, ref {}, _, {}) = {};\",\n+                    \"Closure({}, {}, {}, _, {}) = {};\",\n                     capture_by, fn_decl_pat, body_id_pat, movability, current\n                 );\n                 println!(\"    if let {} = {}.output;\", ret_ty, fn_decl_pat);\n@@ -644,7 +638,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n             ExprKind::Yield(sub, source) => {\n                 let sub_pat = self.next(\"sub\");\n \n-                println!(\"Yield(ref sub, YieldSource::{:?}) = {};\", source, current);\n+                println!(\"Yield(sub, YieldSource::{:?}) = {};\", source, current);\n \n                 self.current = sub_pat;\n                 self.visit_expr(sub);\n@@ -653,7 +647,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n                 let block_pat = self.next(\"block\");\n                 let label_pat = self.next(\"label\");\n \n-                println!(\"Block(ref {}, ref {}) = {};\", block_pat, label_pat, current);\n+                println!(\"Block({}, {}) = {};\", block_pat, label_pat, current);\n \n                 self.current = block_pat;\n                 self.visit_block(block);\n@@ -665,26 +659,20 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n                 let target_pat = self.next(\"target\");\n                 let value_pat = self.next(\"value\");\n \n-                println!(\n-                    \"Assign(ref {}, ref {}, ref _span) = {};\",\n-                    target_pat, value_pat, current\n-                );\n+                println!(\"Assign({}, {}, _span) = {};\", target_pat, value_pat, current);\n \n                 self.current = target_pat;\n                 self.visit_expr(target);\n \n                 self.current = value_pat;\n                 self.visit_expr(value);\n             },\n-            ExprKind::AssignOp(ref op, target, value) => {\n+            ExprKind::AssignOp(op, target, value) => {\n                 let op_pat = self.next(\"op\");\n                 let target_pat = self.next(\"target\");\n                 let value_pat = self.next(\"value\");\n \n-                println!(\n-                    \"AssignOp(ref {}, ref {}, ref {}) = {};\",\n-                    op_pat, target_pat, value_pat, current\n-                );\n+                println!(\"AssignOp({}, {}, {}) = {};\", op_pat, target_pat, value_pat, current);\n \n                 println!(\"    if BinOpKind::{:?} == {}.node;\", op.node, op_pat);\n \n@@ -694,11 +682,11 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n                 self.current = value_pat;\n                 self.visit_expr(value);\n             },\n-            ExprKind::Field(object, ref field_ident) => {\n+            ExprKind::Field(object, field_ident) => {\n                 let obj_pat = self.next(\"object\");\n                 let field_name_pat = self.next(\"field_name\");\n \n-                println!(\"Field(ref {}, ref {}) = {};\", obj_pat, field_name_pat, current);\n+                println!(\"Field({}, {}) = {};\", obj_pat, field_name_pat, current);\n                 println!(\"    if {}.as_str() == {:?};\", field_name_pat, field_ident.as_str());\n \n                 self.current = obj_pat;\n@@ -708,7 +696,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n                 let object_pat = self.next(\"object\");\n                 let index_pat = self.next(\"index\");\n \n-                println!(\"Index(ref {}, ref {}) = {};\", object_pat, index_pat, current);\n+                println!(\"Index({}, {}) = {};\", object_pat, index_pat, current);\n \n                 self.current = object_pat;\n                 self.visit_expr(object);\n@@ -728,42 +716,42 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n                 let inner_pat = self.next(\"inner\");\n \n                 println!(\n-                    \"AddrOf(BorrowKind::{:?}, Mutability::{:?}, ref {}) = {};\",\n+                    \"AddrOf(BorrowKind::{:?}, Mutability::{:?}, {}) = {};\",\n                     kind, mutability, inner_pat, current\n                 );\n \n                 self.current = inner_pat;\n                 self.visit_expr(inner);\n             },\n-            ExprKind::Break(ref destination, ref opt_value) => {\n+            ExprKind::Break(destination, opt_value) => {\n                 let destination_pat = self.next(\"destination\");\n \n-                if let Some(value) = *opt_value {\n+                if let Some(value) = opt_value {\n                     let value_pat = self.next(\"value\");\n \n-                    println!(\"Break(ref {}, Some(ref {})) = {};\", destination_pat, value_pat, current);\n+                    println!(\"Break({}, Some({})) = {};\", destination_pat, value_pat, current);\n \n                     self.current = value_pat;\n                     self.visit_expr(value);\n                 } else {\n-                    println!(\"Break(ref {}, None) = {};\", destination_pat, current);\n+                    println!(\"Break({}, None) = {};\", destination_pat, current);\n                 }\n \n                 self.current = format!(\"{}.label\", destination_pat);\n                 self.print_label(destination.label);\n             },\n-            ExprKind::Continue(ref destination) => {\n+            ExprKind::Continue(destination) => {\n                 let destination_pat = self.next(\"destination\");\n-                println!(\"Continue(ref {}) = {};\", destination_pat, current);\n+                println!(\"Continue({}) = {};\", destination_pat, current);\n \n                 self.current = format!(\"{}.label\", destination_pat);\n                 self.print_label(destination.label);\n             },\n-            ExprKind::Ret(ref opt_value) => {\n-                if let Some(value) = *opt_value {\n+            ExprKind::Ret(opt_value) => {\n+                if let Some(value) = opt_value {\n                     let value_pat = self.next(\"value\");\n \n-                    println!(\"Ret(Some(ref {})) = {};\", value_pat, current);\n+                    println!(\"Ret(Some({})) = {};\", value_pat, current);\n \n                     self.current = value_pat;\n                     self.visit_expr(value);\n@@ -779,22 +767,22 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n                 println!(\"LlvmInlineAsm(_) = {};\", current);\n                 println!(\"    // unimplemented: `ExprKind::LlvmInlineAsm` is not further destructured at the moment\");\n             },\n-            ExprKind::Struct(path, fields, ref opt_base) => {\n+            ExprKind::Struct(path, fields, opt_base) => {\n                 let path_pat = self.next(\"qpath\");\n                 let fields_pat = self.next(\"fields\");\n \n-                if let Some(base) = *opt_base {\n+                if let Some(base) = opt_base {\n                     let base_pat = self.next(\"base\");\n \n                     println!(\n-                        \"Struct(ref {}, ref {}, Some(ref {})) = {};\",\n+                        \"Struct({}, {}, Some({})) = {};\",\n                         path_pat, fields_pat, base_pat, current\n                     );\n \n                     self.current = base_pat;\n                     self.visit_expr(base);\n                 } else {\n-                    println!(\"Struct(ref {}, ref {}, None) = {};\", path_pat, fields_pat, current);\n+                    println!(\"Struct({}, {}, None) = {};\", path_pat, fields_pat, current);\n                 }\n \n                 self.current = path_pat;\n@@ -823,7 +811,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n                 let value_pat = self.next(\"value\");\n                 let length_pat = self.next(\"length\");\n \n-                println!(\"Repeat(ref {}, ref {}) = {};\", value_pat, length_pat, current);\n+                println!(\"Repeat({}, {}) = {};\", value_pat, length_pat, current);\n \n                 self.current = value_pat;\n                 self.visit_expr(value);\n@@ -840,7 +828,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n             ExprKind::DropTemps(expr) => {\n                 let expr_pat = self.next(\"expr\");\n \n-                println!(\"DropTemps(ref {}) = {};\", expr_pat, current);\n+                println!(\"DropTemps({}) = {};\", expr_pat, current);\n \n                 self.current = expr_pat;\n                 self.visit_expr(expr);\n@@ -860,7 +848,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n \n         if let Some(expr) = block.expr {\n             self.current = self.next(\"trailing_expr\");\n-            println!(\"    if let Some({}) = &{}.expr;\", self.current, block_name);\n+            println!(\"    if let Some({}) = {}.expr;\", self.current, block_name);\n             self.visit_expr(expr);\n         } else {\n             println!(\"    if {}.expr.is_none();\", block_name);\n@@ -874,15 +862,15 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n \n         match pat.kind {\n             PatKind::Wild => println!(\"Wild = {};\", current),\n-            PatKind::Binding(anno, .., ident, ref sub) => {\n+            PatKind::Binding(anno, .., ident, sub) => {\n                 let anno_pat = &format!(\"BindingAnnotation::{:?}\", anno);\n                 let name_pat = self.next(\"name\");\n \n-                if let Some(sub) = *sub {\n+                if let Some(sub) = sub {\n                     let sub_pat = self.next(\"sub\");\n \n                     println!(\n-                        \"Binding({}, _, {}, Some(ref {})) = {};\",\n+                        \"Binding({}, _, {}, Some({})) = {};\",\n                         anno_pat, name_pat, sub_pat, current\n                     );\n \n@@ -897,10 +885,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n             PatKind::Struct(ref path, fields, ignore) => {\n                 let path_pat = self.next(\"qpath\");\n                 let fields_pat = self.next(\"fields\");\n-                println!(\n-                    \"Struct(ref {}, ref {}, {}) = {};\",\n-                    path_pat, fields_pat, ignore, current\n-                );\n+                println!(\"Struct(ref {}, {}, {}) = {};\", path_pat, fields_pat, ignore, current);\n \n                 self.current = path_pat;\n                 self.print_qpath(path);\n@@ -921,7 +906,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n             },\n             PatKind::Or(fields) => {\n                 let fields_pat = self.next(\"fields\");\n-                println!(\"Or(ref {}) = {};\", fields_pat, current);\n+                println!(\"Or({}) = {};\", fields_pat, current);\n                 println!(\"    if {}.len() == {};\", fields_pat, fields.len());\n \n                 for (i, field) in fields.iter().enumerate() {\n@@ -934,7 +919,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n                 let fields_pat = self.next(\"fields\");\n \n                 println!(\n-                    \"TupleStruct(ref {}, ref {}, {:?}) = {};\",\n+                    \"TupleStruct(ref {}, {}, {:?}) = {};\",\n                     path_pat, fields_pat, skip_pos, current\n                 );\n \n@@ -957,7 +942,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n             },\n             PatKind::Tuple(fields, skip_pos) => {\n                 let fields_pat = self.next(\"fields\");\n-                println!(\"Tuple(ref {}, {:?}) = {};\", fields_pat, skip_pos, current);\n+                println!(\"Tuple({}, {:?}) = {};\", fields_pat, skip_pos, current);\n                 println!(\"    if {}.len() == {};\", fields_pat, fields.len());\n \n                 for (i, field) in fields.iter().enumerate() {\n@@ -967,31 +952,31 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n             },\n             PatKind::Box(pat) => {\n                 let pat_pat = self.next(\"pat\");\n-                println!(\"Box(ref {}) = {};\", pat_pat, current);\n+                println!(\"Box({}) = {};\", pat_pat, current);\n \n                 self.current = pat_pat;\n                 self.visit_pat(pat);\n             },\n             PatKind::Ref(pat, muta) => {\n                 let pat_pat = self.next(\"pat\");\n-                println!(\"Ref(ref {}, Mutability::{:?}) = {};\", pat_pat, muta, current);\n+                println!(\"Ref({}, Mutability::{:?}) = {};\", pat_pat, muta, current);\n \n                 self.current = pat_pat;\n                 self.visit_pat(pat);\n             },\n             PatKind::Lit(lit_expr) => {\n                 let lit_expr_pat = self.next(\"lit_expr\");\n-                println!(\"Lit(ref {}) = {};\", lit_expr_pat, current);\n+                println!(\"Lit({}) = {};\", lit_expr_pat, current);\n \n                 self.current = lit_expr_pat;\n                 self.visit_expr(lit_expr);\n             },\n-            PatKind::Range(ref start, ref end, end_kind) => {\n+            PatKind::Range(start, end, end_kind) => {\n                 let start_pat = self.next(\"start\");\n                 let end_pat = self.next(\"end\");\n \n                 println!(\n-                    \"Range(ref {}, ref {}, RangeEnd::{:?}) = {};\",\n+                    \"Range({}, {}, RangeEnd::{:?}) = {};\",\n                     start_pat, end_pat, end_kind, current\n                 );\n \n@@ -1001,20 +986,17 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n                 self.current = end_pat;\n                 walk_list!(self, visit_expr, end);\n             },\n-            PatKind::Slice(start, ref middle, end) => {\n+            PatKind::Slice(start, middle, end) => {\n                 let start_pat = self.next(\"start\");\n                 let end_pat = self.next(\"end\");\n \n                 if let Some(middle) = middle {\n                     let middle_pat = self.next(\"middle\");\n-                    println!(\n-                        \"Slice(ref {}, Some(ref {}), ref {}) = {};\",\n-                        start_pat, middle_pat, end_pat, current\n-                    );\n+                    println!(\"Slice({}, Some({}), {}) = {};\", start_pat, middle_pat, end_pat, current);\n                     self.current = middle_pat;\n                     self.visit_pat(middle);\n                 } else {\n-                    println!(\"Slice(ref {}, None, ref {}) = {};\", start_pat, end_pat, current);\n+                    println!(\"Slice({}, None, {}) = {};\", start_pat, end_pat, current);\n                 }\n \n                 println!(\"    if {}.len() == {};\", start_pat, start.len());\n@@ -1042,11 +1024,11 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n             // A local (let) binding:\n             StmtKind::Local(local) => {\n                 let local_pat = self.next(\"local\");\n-                println!(\"Local(ref {}) = {};\", local_pat, current);\n+                println!(\"Local({}) = {};\", local_pat, current);\n \n                 if let Some(init) = local.init {\n                     let init_pat = self.next(\"init\");\n-                    println!(\"    if let Some(ref {}) = {}.init;\", init_pat, local_pat);\n+                    println!(\"    if let Some({}) = {}.init;\", init_pat, local_pat);\n \n                     self.current = init_pat;\n                     self.visit_expr(init);\n@@ -1063,7 +1045,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n             // Expr without trailing semi-colon (must have unit type):\n             StmtKind::Expr(e) => {\n                 let e_pat = self.next(\"e\");\n-                println!(\"Expr(ref {}, _) = {};\", e_pat, current);\n+                println!(\"Expr({}, _) = {};\", e_pat, current);\n \n                 self.current = e_pat;\n                 self.visit_expr(e);\n@@ -1072,7 +1054,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrintVisitor<'a, '_> {\n             // Expr with trailing semi-colon (may have any type):\n             StmtKind::Semi(e) => {\n                 let e_pat = self.next(\"e\");\n-                println!(\"Semi(ref {}) = {};\", e_pat, current);\n+                println!(\"Semi({}) = {};\", e_pat, current);\n \n                 self.current = e_pat;\n                 self.visit_expr(e);"}, {"sha": "3125863036bb798a820f58864850fbe3ca567aad", "filename": "tests/ui/author.stdout", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72d7b9c097f5c9299a83ed7ec7ea97093400f92e/tests%2Fui%2Fauthor.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/72d7b9c097f5c9299a83ed7ec7ea97093400f92e/tests%2Fui%2Fauthor.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor.stdout?ref=72d7b9c097f5c9299a83ed7ec7ea97093400f92e", "patch": "@@ -1,7 +1,7 @@\n if_chain! {\n-    if let StmtKind::Local(ref local) = stmt.kind;\n-    if let Some(ref init) = local.init;\n-    if let ExprKind::Cast(ref expr, ref cast_ty) = init.kind;\n+    if let StmtKind::Local(local) = stmt.kind;\n+    if let Some(init) = local.init;\n+    if let ExprKind::Cast(expr, cast_ty) = init.kind;\n     if let TyKind::Path(ref qpath) = cast_ty.kind;\n     if match_qpath(qpath, &[\"char\"]);\n     if let ExprKind::Lit(ref lit) = expr.kind;"}, {"sha": "b1b387367257bf13b5e0c4ae5ac88be99979410c", "filename": "tests/ui/author/blocks.stdout", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/72d7b9c097f5c9299a83ed7ec7ea97093400f92e/tests%2Fui%2Fauthor%2Fblocks.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/72d7b9c097f5c9299a83ed7ec7ea97093400f92e/tests%2Fui%2Fauthor%2Fblocks.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fblocks.stdout?ref=72d7b9c097f5c9299a83ed7ec7ea97093400f92e", "patch": "@@ -1,20 +1,20 @@\n if_chain! {\n-    if let ExprKind::Block(ref block, ref label) = expr.kind;\n+    if let ExprKind::Block(block, label) = expr.kind;\n     if block.stmts.len() == 3;\n-    if let StmtKind::Local(ref local) = block.stmts[0].kind;\n-    if let Some(ref init) = local.init;\n+    if let StmtKind::Local(local) = block.stmts[0].kind;\n+    if let Some(init) = local.init;\n     if let ExprKind::Lit(ref lit) = init.kind;\n     if let LitKind::Int(42, LitIntType::Signed(IntTy::I32)) = lit.node;\n     if let PatKind::Binding(BindingAnnotation::Unannotated, _, name, None) = local.pat.kind;\n     if name.as_str() == \"x\";\n-    if let StmtKind::Local(ref local1) = block.stmts[1].kind;\n-    if let Some(ref init1) = local1.init;\n+    if let StmtKind::Local(local1) = block.stmts[1].kind;\n+    if let Some(init1) = local1.init;\n     if let ExprKind::Lit(ref lit1) = init1.kind;\n     if let LitKind::Float(_, LitFloatType::Suffixed(FloatTy::F32)) = lit1.node;\n     if let PatKind::Binding(BindingAnnotation::Unannotated, _, name1, None) = local1.pat.kind;\n     if name1.as_str() == \"_t\";\n-    if let StmtKind::Semi(ref e) = block.stmts[2].kind;\n-    if let ExprKind::Unary(UnOp::Neg, ref inner) = e.kind;\n+    if let StmtKind::Semi(e) = block.stmts[2].kind;\n+    if let ExprKind::Unary(UnOp::Neg, inner) = e.kind;\n     if let ExprKind::Path(ref qpath) = inner.kind;\n     if match_qpath(qpath, &[\"x\"]);\n     if block.expr.is_none();\n@@ -23,18 +23,18 @@ if_chain! {\n     }\n }\n if_chain! {\n-    if let ExprKind::Block(ref block, ref label) = expr.kind;\n+    if let ExprKind::Block(block, label) = expr.kind;\n     if block.stmts.len() == 1;\n-    if let StmtKind::Local(ref local) = block.stmts[0].kind;\n-    if let Some(ref init) = local.init;\n-    if let ExprKind::Call(ref func, ref args) = init.kind;\n+    if let StmtKind::Local(local) = block.stmts[0].kind;\n+    if let Some(init) = local.init;\n+    if let ExprKind::Call(func, args) = init.kind;\n     if let ExprKind::Path(ref qpath) = func.kind;\n     if match_qpath(qpath, &[\"String\", \"new\"]);\n     if args.len() == 0;\n     if let PatKind::Binding(BindingAnnotation::Unannotated, _, name, None) = local.pat.kind;\n     if name.as_str() == \"expr\";\n-    if let Some(trailing_expr) = &block.expr;\n-    if let ExprKind::Call(ref func1, ref args1) = trailing_expr.kind;\n+    if let Some(trailing_expr) = block.expr;\n+    if let ExprKind::Call(func1, args1) = trailing_expr.kind;\n     if let ExprKind::Path(ref qpath1) = func1.kind;\n     if match_qpath(qpath1, &[\"drop\"]);\n     if args1.len() == 1;\n@@ -45,17 +45,17 @@ if_chain! {\n     }\n }\n if_chain! {\n-    if let ExprKind::Closure(CaptureBy::Value, ref fn_decl, ref body_id, _, None) = expr.kind;\n+    if let ExprKind::Closure(CaptureBy::Value, fn_decl, body_id, _, None) = expr.kind;\n     if let FnRetTy::DefaultReturn(_) = fn_decl.output;\n     let body = cx.tcx.hir().body(body_id);\n-    if let ExprKind::Call(ref func, ref args) = body.value.kind;\n+    if let ExprKind::Call(func, args) = body.value.kind;\n     if let ExprKind::Path(ref qpath) = func.kind;\n     if matches!(qpath, QPath::LangItem(LangItem::FromGenerator, _));\n     if args.len() == 1;\n-    if let ExprKind::Closure(CaptureBy::Value, ref fn_decl1, ref body_id1, _, Some(Movability::Static)) = args[0].kind;\n+    if let ExprKind::Closure(CaptureBy::Value, fn_decl1, body_id1, _, Some(Movability::Static)) = args[0].kind;\n     if let FnRetTy::DefaultReturn(_) = fn_decl1.output;\n     let body1 = cx.tcx.hir().body(body_id1);\n-    if let ExprKind::Block(ref block, ref label) = body1.value.kind;\n+    if let ExprKind::Block(block, label) = body1.value.kind;\n     if block.stmts.len() == 0;\n     if block.expr.is_none();\n     then {"}, {"sha": "266312d63e50d57815e9aab022a45e884ae327bd", "filename": "tests/ui/author/call.stdout", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72d7b9c097f5c9299a83ed7ec7ea97093400f92e/tests%2Fui%2Fauthor%2Fcall.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/72d7b9c097f5c9299a83ed7ec7ea97093400f92e/tests%2Fui%2Fauthor%2Fcall.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fcall.stdout?ref=72d7b9c097f5c9299a83ed7ec7ea97093400f92e", "patch": "@@ -1,7 +1,7 @@\n if_chain! {\n-    if let StmtKind::Local(ref local) = stmt.kind;\n-    if let Some(ref init) = local.init;\n-    if let ExprKind::Call(ref func, ref args) = init.kind;\n+    if let StmtKind::Local(local) = stmt.kind;\n+    if let Some(init) = local.init;\n+    if let ExprKind::Call(func, args) = init.kind;\n     if let ExprKind::Path(ref qpath) = func.kind;\n     if match_qpath(qpath, &[\"{{root}}\", \"std\", \"cmp\", \"min\"]);\n     if args.len() == 2;"}, {"sha": "504f2c38fbb4fe877719c537a5a4c17d707bc849", "filename": "tests/ui/author/if.stdout", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/72d7b9c097f5c9299a83ed7ec7ea97093400f92e/tests%2Fui%2Fauthor%2Fif.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/72d7b9c097f5c9299a83ed7ec7ea97093400f92e/tests%2Fui%2Fauthor%2Fif.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fif.stdout?ref=72d7b9c097f5c9299a83ed7ec7ea97093400f92e", "patch": "@@ -1,23 +1,23 @@\n if_chain! {\n-    if let StmtKind::Local(ref local) = stmt.kind;\n-    if let Some(ref init) = local.init;\n+    if let StmtKind::Local(local) = stmt.kind;\n+    if let Some(init) = local.init;\n     if let Some(higher::If { cond: cond, then: then, r#else: else_expr}) = higher::If::hir(init);\n     if let ExprKind::Lit(ref lit) = cond.kind;\n     if let LitKind::Bool(true) = lit.node;\n-    if let ExprKind::Block(ref block, ref label) = then.kind;\n+    if let ExprKind::Block(block, label) = then.kind;\n     if block.stmts.len() == 1;\n-    if let StmtKind::Semi(ref e) = block.stmts[0].kind;\n-    if let ExprKind::Binary(ref op, ref left, ref right) = e.kind;\n+    if let StmtKind::Semi(e) = block.stmts[0].kind;\n+    if let ExprKind::Binary(op, left, right) = e.kind;\n     if BinOpKind::Eq == op.node;\n     if let ExprKind::Lit(ref lit1) = left.kind;\n     if let LitKind::Int(1, LitIntType::Unsuffixed) = lit1.node;\n     if let ExprKind::Lit(ref lit2) = right.kind;\n     if let LitKind::Int(1, LitIntType::Unsuffixed) = lit2.node;\n     if block.expr.is_none();\n-    if let ExprKind::Block(ref block1, ref label1) = else_expr.kind;\n+    if let ExprKind::Block(block1, label1) = else_expr.kind;\n     if block1.stmts.len() == 1;\n-    if let StmtKind::Semi(ref e1) = block1.stmts[0].kind;\n-    if let ExprKind::Binary(ref op1, ref left1, ref right1) = e1.kind;\n+    if let StmtKind::Semi(e1) = block1.stmts[0].kind;\n+    if let ExprKind::Binary(op1, left1, right1) = e1.kind;\n     if BinOpKind::Eq == op1.node;\n     if let ExprKind::Lit(ref lit3) = left1.kind;\n     if let LitKind::Int(2, LitIntType::Unsuffixed) = lit3.node;\n@@ -31,15 +31,15 @@ if_chain! {\n }\n if_chain! {\n     if let Some(higher::IfLet { let_pat: let_pat, let_expr: let_expr, if_then: if_then, if_else: else_expr}) = higher::IfLet::hir(expr);\n-    if let PatKind::Lit(ref lit_expr) = let_pat.kind;\n+    if let PatKind::Lit(lit_expr) = let_pat.kind;\n     if let ExprKind::Lit(ref lit) = lit_expr.kind;\n     if let LitKind::Bool(true) = lit.node;\n     if let ExprKind::Path(ref qpath) = let_expr.kind;\n     if match_qpath(qpath, &[\"a\"]);\n-    if let ExprKind::Block(ref block, ref label) = if_then.kind;\n+    if let ExprKind::Block(block, label) = if_then.kind;\n     if block.stmts.len() == 0;\n     if block.expr.is_none();\n-    if let ExprKind::Block(ref block1, ref label1) = else_expr.kind;\n+    if let ExprKind::Block(block1, label1) = else_expr.kind;\n     if block1.stmts.len() == 0;\n     if block1.expr.is_none();\n     then {"}, {"sha": "bce4bc702733f206e11fc99e4585316dea805594", "filename": "tests/ui/author/issue_3849.stdout", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72d7b9c097f5c9299a83ed7ec7ea97093400f92e/tests%2Fui%2Fauthor%2Fissue_3849.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/72d7b9c097f5c9299a83ed7ec7ea97093400f92e/tests%2Fui%2Fauthor%2Fissue_3849.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fissue_3849.stdout?ref=72d7b9c097f5c9299a83ed7ec7ea97093400f92e", "patch": "@@ -1,7 +1,7 @@\n if_chain! {\n-    if let StmtKind::Local(ref local) = stmt.kind;\n-    if let Some(ref init) = local.init;\n-    if let ExprKind::Call(ref func, ref args) = init.kind;\n+    if let StmtKind::Local(local) = stmt.kind;\n+    if let Some(init) = local.init;\n+    if let ExprKind::Call(func, args) = init.kind;\n     if let ExprKind::Path(ref qpath) = func.kind;\n     if match_qpath(qpath, &[\"std\", \"mem\", \"transmute\"]);\n     if args.len() == 1;"}, {"sha": "57c932ee6c0a68591a88af8dddb4439325e13f6d", "filename": "tests/ui/author/loop.stdout", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/72d7b9c097f5c9299a83ed7ec7ea97093400f92e/tests%2Fui%2Fauthor%2Floop.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/72d7b9c097f5c9299a83ed7ec7ea97093400f92e/tests%2Fui%2Fauthor%2Floop.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Floop.stdout?ref=72d7b9c097f5c9299a83ed7ec7ea97093400f92e", "patch": "@@ -1,9 +1,9 @@\n if_chain! {\n-    if let ExprKind::DropTemps(ref expr) = expr.kind;\n+    if let ExprKind::DropTemps(expr) = expr.kind;\n     if let Some(higher::ForLoop { pat: pat, arg: arg, body: body, ..}) = higher::ForLoop::hir(expr);\n     if let PatKind::Binding(BindingAnnotation::Unannotated, _, name, None) = pat.kind;\n     if name.as_str() == \"y\";\n-    if let ExprKind::Struct(ref qpath, ref fields, None) = arg.kind;\n+    if let ExprKind::Struct(qpath, fields, None) = arg.kind;\n     if matches!(qpath, QPath::LangItem(LangItem::Range, _));\n     if fields.len() == 2;\n     if fields[0].ident.name.as_str() == \"start\";\n@@ -12,10 +12,10 @@ if_chain! {\n     if fields[1].ident.name.as_str() == \"end\";\n     if let ExprKind::Lit(ref lit1) = fields[1].expr.kind;\n     if let LitKind::Int(10, LitIntType::Unsuffixed) = lit1.node;\n-    if let ExprKind::Block(ref block, ref label) = body.kind;\n+    if let ExprKind::Block(block, label) = body.kind;\n     if block.stmts.len() == 1;\n-    if let StmtKind::Local(ref local) = block.stmts[0].kind;\n-    if let Some(ref init) = local.init;\n+    if let StmtKind::Local(local) = block.stmts[0].kind;\n+    if let Some(init) = local.init;\n     if let ExprKind::Path(ref qpath1) = init.kind;\n     if match_qpath(qpath1, &[\"y\"]);\n     if let PatKind::Binding(BindingAnnotation::Unannotated, _, name1, None) = local.pat.kind;\n@@ -26,10 +26,10 @@ if_chain! {\n     }\n }\n if_chain! {\n-    if let ExprKind::DropTemps(ref expr) = expr.kind;\n+    if let ExprKind::DropTemps(expr) = expr.kind;\n     if let Some(higher::ForLoop { pat: pat, arg: arg, body: body, ..}) = higher::ForLoop::hir(expr);\n     if let PatKind::Wild = pat.kind;\n-    if let ExprKind::Struct(ref qpath, ref fields, None) = arg.kind;\n+    if let ExprKind::Struct(qpath, fields, None) = arg.kind;\n     if matches!(qpath, QPath::LangItem(LangItem::Range, _));\n     if fields.len() == 2;\n     if fields[0].ident.name.as_str() == \"start\";\n@@ -38,20 +38,20 @@ if_chain! {\n     if fields[1].ident.name.as_str() == \"end\";\n     if let ExprKind::Lit(ref lit1) = fields[1].expr.kind;\n     if let LitKind::Int(10, LitIntType::Unsuffixed) = lit1.node;\n-    if let ExprKind::Block(ref block, ref label) = body.kind;\n+    if let ExprKind::Block(block, label) = body.kind;\n     if block.stmts.len() == 1;\n-    if let StmtKind::Semi(ref e) = block.stmts[0].kind;\n-    if let ExprKind::Break(ref destination, None) = e.kind;\n+    if let StmtKind::Semi(e) = block.stmts[0].kind;\n+    if let ExprKind::Break(destination, None) = e.kind;\n     if block.expr.is_none();\n     then {\n         // report your lint here\n     }\n }\n if_chain! {\n-    if let ExprKind::DropTemps(ref expr) = expr.kind;\n+    if let ExprKind::DropTemps(expr) = expr.kind;\n     if let Some(higher::ForLoop { pat: pat, arg: arg, body: body, ..}) = higher::ForLoop::hir(expr);\n     if let PatKind::Wild = pat.kind;\n-    if let ExprKind::Struct(ref qpath, ref fields, None) = arg.kind;\n+    if let ExprKind::Struct(qpath, fields, None) = arg.kind;\n     if matches!(qpath, QPath::LangItem(LangItem::Range, _));\n     if fields.len() == 2;\n     if fields[0].ident.name.as_str() == \"start\";\n@@ -60,11 +60,11 @@ if_chain! {\n     if fields[1].ident.name.as_str() == \"end\";\n     if let ExprKind::Lit(ref lit1) = fields[1].expr.kind;\n     if let LitKind::Int(10, LitIntType::Unsuffixed) = lit1.node;\n-    if let ExprKind::Block(ref block, ref label) = body.kind;\n+    if let ExprKind::Block(block, label) = body.kind;\n     if block.stmts.len() == 1;\n-    if let StmtKind::Semi(ref e) = block.stmts[0].kind;\n-    if let ExprKind::Break(ref destination, None) = e.kind;\n-    if let Some(ref label1) = destination.label;\n+    if let StmtKind::Semi(e) = block.stmts[0].kind;\n+    if let ExprKind::Break(destination, None) = e.kind;\n+    if let Some(label1) = destination.label;\n     if label_name.ident.name.as_str() == \"'label\";\n     if block.expr.is_none();\n     then {\n@@ -75,36 +75,36 @@ if_chain! {\n     if let Some(higher::While { condition: condition, body: body }) = higher::While::hir(expr);\n     if let ExprKind::Path(ref qpath) = condition.kind;\n     if match_qpath(qpath, &[\"a\"]);\n-    if let ExprKind::Block(ref block, ref label) = body.kind;\n+    if let ExprKind::Block(block, label) = body.kind;\n     if block.stmts.len() == 1;\n-    if let StmtKind::Semi(ref e) = block.stmts[0].kind;\n-    if let ExprKind::Break(ref destination, None) = e.kind;\n+    if let StmtKind::Semi(e) = block.stmts[0].kind;\n+    if let ExprKind::Break(destination, None) = e.kind;\n     if block.expr.is_none();\n     then {\n         // report your lint here\n     }\n }\n if_chain! {\n     if let Some(higher::WhileLet { let_pat: let_pat, let_expr: let_expr, if_then: if_then }) = higher::WhileLet::hir(expr);\n-    if let PatKind::Lit(ref lit_expr) = let_pat.kind;\n+    if let PatKind::Lit(lit_expr) = let_pat.kind;\n     if let ExprKind::Lit(ref lit) = lit_expr.kind;\n     if let LitKind::Bool(true) = lit.node;\n     if let ExprKind::Path(ref qpath) = let_expr.kind;\n     if match_qpath(qpath, &[\"a\"]);\n-    if let ExprKind::Block(ref block, ref label) = if_then.kind;\n+    if let ExprKind::Block(block, label) = if_then.kind;\n     if block.stmts.len() == 1;\n-    if let StmtKind::Semi(ref e) = block.stmts[0].kind;\n-    if let ExprKind::Break(ref destination, None) = e.kind;\n+    if let StmtKind::Semi(e) = block.stmts[0].kind;\n+    if let ExprKind::Break(destination, None) = e.kind;\n     if block.expr.is_none();\n     then {\n         // report your lint here\n     }\n }\n if_chain! {\n-    if let ExprKind::Loop(ref body, ref label, LoopSource::Loop, _) = expr.kind;\n+    if let ExprKind::Loop(body, label, LoopSource::Loop, _) = expr.kind;\n     if body.stmts.len() == 1;\n-    if let StmtKind::Semi(ref e) = body.stmts[0].kind;\n-    if let ExprKind::Break(ref destination, None) = e.kind;\n+    if let StmtKind::Semi(e) = body.stmts[0].kind;\n+    if let ExprKind::Break(destination, None) = e.kind;\n     if body.expr.is_none();\n     then {\n         // report your lint here"}, {"sha": "397be11659bbed2ad0a5668f09fd85535dc7ab7a", "filename": "tests/ui/author/matches.stdout", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/72d7b9c097f5c9299a83ed7ec7ea97093400f92e/tests%2Fui%2Fauthor%2Fmatches.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/72d7b9c097f5c9299a83ed7ec7ea97093400f92e/tests%2Fui%2Fauthor%2Fmatches.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fmatches.stdout?ref=72d7b9c097f5c9299a83ed7ec7ea97093400f92e", "patch": "@@ -1,27 +1,27 @@\n if_chain! {\n-    if let StmtKind::Local(ref local) = stmt.kind;\n-    if let Some(ref init) = local.init;\n-    if let ExprKind::Match(ref scrutinee, ref arms, MatchSource::Normal) = init.kind;\n+    if let StmtKind::Local(local) = stmt.kind;\n+    if let Some(init) = local.init;\n+    if let ExprKind::Match(scrutinee, arms, MatchSource::Normal) = init.kind;\n     if let ExprKind::Lit(ref lit) = scrutinee.kind;\n     if let LitKind::Int(42, LitIntType::Unsuffixed) = lit.node;\n     if arms.len() == 3;\n-    if let PatKind::Lit(ref lit_expr) = arms[0].pat.kind;\n+    if let PatKind::Lit(lit_expr) = arms[0].pat.kind;\n     if let ExprKind::Lit(ref lit1) = lit_expr.kind;\n     if let LitKind::Int(16, LitIntType::Unsuffixed) = lit1.node;\n     if let ExprKind::Lit(ref lit2) = arms[0].body.kind;\n     if let LitKind::Int(5, LitIntType::Unsuffixed) = lit2.node;\n-    if let PatKind::Lit(ref lit_expr1) = arms[1].pat.kind;\n+    if let PatKind::Lit(lit_expr1) = arms[1].pat.kind;\n     if let ExprKind::Lit(ref lit3) = lit_expr1.kind;\n     if let LitKind::Int(17, LitIntType::Unsuffixed) = lit3.node;\n-    if let ExprKind::Block(ref block, ref label) = arms[1].body.kind;\n+    if let ExprKind::Block(block, label) = arms[1].body.kind;\n     if block.stmts.len() == 1;\n-    if let StmtKind::Local(ref local1) = block.stmts[0].kind;\n-    if let Some(ref init1) = local1.init;\n+    if let StmtKind::Local(local1) = block.stmts[0].kind;\n+    if let Some(init1) = local1.init;\n     if let ExprKind::Lit(ref lit4) = init1.kind;\n     if let LitKind::Int(3, LitIntType::Unsuffixed) = lit4.node;\n     if let PatKind::Binding(BindingAnnotation::Unannotated, _, name, None) = local1.pat.kind;\n     if name.as_str() == \"x\";\n-    if let Some(trailing_expr) = &block.expr;\n+    if let Some(trailing_expr) = block.expr;\n     if let ExprKind::Path(ref qpath) = trailing_expr.kind;\n     if match_qpath(qpath, &[\"x\"]);\n     if let PatKind::Wild = arms[2].pat.kind;"}, {"sha": "af66bb480227b210f010112381257d0ffb036060", "filename": "tests/ui/author/repeat.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72d7b9c097f5c9299a83ed7ec7ea97093400f92e/tests%2Fui%2Fauthor%2Frepeat.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/72d7b9c097f5c9299a83ed7ec7ea97093400f92e/tests%2Fui%2Fauthor%2Frepeat.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Frepeat.stdout?ref=72d7b9c097f5c9299a83ed7ec7ea97093400f92e", "patch": "@@ -1,5 +1,5 @@\n if_chain! {\n-    if let ExprKind::Repeat(ref value, ref length) = expr.kind;\n+    if let ExprKind::Repeat(value, length) = expr.kind;\n     if let ExprKind::Lit(ref lit) = value.kind;\n     if let LitKind::Int(1, LitIntType::Unsigned(UintTy::U8)) = lit.node;\n     if let ExprKind::Lit(ref lit1) = length.value.kind;"}, {"sha": "ffedd87625d19a4297390583a51444f46e8efe63", "filename": "tests/ui/author/struct.stdout", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/72d7b9c097f5c9299a83ed7ec7ea97093400f92e/tests%2Fui%2Fauthor%2Fstruct.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/72d7b9c097f5c9299a83ed7ec7ea97093400f92e/tests%2Fui%2Fauthor%2Fstruct.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fstruct.stdout?ref=72d7b9c097f5c9299a83ed7ec7ea97093400f92e", "patch": "@@ -1,56 +1,56 @@\n if_chain! {\n-    if let ExprKind::Struct(ref qpath, ref fields, None) = expr.kind;\n+    if let ExprKind::Struct(qpath, fields, None) = expr.kind;\n     if match_qpath(qpath, &[\"Test\"]);\n     if fields.len() == 1;\n     if fields[0].ident.name.as_str() == \"field\";\n     if let Some(higher::If { cond: cond, then: then, r#else: else_expr}) = higher::If::hir(fields[0].expr);\n     if let ExprKind::Lit(ref lit) = cond.kind;\n     if let LitKind::Bool(true) = lit.node;\n-    if let ExprKind::Block(ref block, ref label) = then.kind;\n+    if let ExprKind::Block(block, label) = then.kind;\n     if block.stmts.len() == 0;\n-    if let Some(trailing_expr) = &block.expr;\n+    if let Some(trailing_expr) = block.expr;\n     if let ExprKind::Lit(ref lit1) = trailing_expr.kind;\n     if let LitKind::Int(1, LitIntType::Unsuffixed) = lit1.node;\n-    if let ExprKind::Block(ref block1, ref label1) = else_expr.kind;\n+    if let ExprKind::Block(block1, label1) = else_expr.kind;\n     if block1.stmts.len() == 0;\n-    if let Some(trailing_expr1) = &block1.expr;\n+    if let Some(trailing_expr1) = block1.expr;\n     if let ExprKind::Lit(ref lit2) = trailing_expr1.kind;\n     if let LitKind::Int(0, LitIntType::Unsuffixed) = lit2.node;\n     then {\n         // report your lint here\n     }\n }\n if_chain! {\n-    if let PatKind::Struct(ref qpath, ref fields, false) = arm.kind;\n+    if let PatKind::Struct(ref qpath, fields, false) = arm.kind;\n     if match_qpath(qpath, &[\"Test\"]);\n     if fields.len() == 1;\n     if fields[0].ident.name.as_str() == \"field\";\n-    if let PatKind::Lit(ref lit_expr) = fields[0].kind;\n+    if let PatKind::Lit(lit_expr) = fields[0].kind;\n     if let ExprKind::Lit(ref lit) = lit_expr.kind;\n     if let LitKind::Int(1, LitIntType::Unsuffixed) = lit.node;\n-    if let ExprKind::Block(ref block, ref label) = lit_expr.kind;\n+    if let ExprKind::Block(block, label) = lit_expr.kind;\n     if block.stmts.len() == 0;\n     if block.expr.is_none();\n     then {\n         // report your lint here\n     }\n }\n if_chain! {\n-    if let PatKind::TupleStruct(ref qpath, ref fields, None) = arm.kind;\n+    if let PatKind::TupleStruct(ref qpath, fields, None) = arm.kind;\n     if match_qpath(qpath, &[\"TestTuple\"]);\n     if fields.len() == 1;\n-    if let PatKind::Lit(ref lit_expr) = fields[0].kind;\n+    if let PatKind::Lit(lit_expr) = fields[0].kind;\n     if let ExprKind::Lit(ref lit) = lit_expr.kind;\n     if let LitKind::Int(1, LitIntType::Unsuffixed) = lit.node;\n-    if let ExprKind::Block(ref block, ref label) = lit_expr.kind;\n+    if let ExprKind::Block(block, label) = lit_expr.kind;\n     if block.stmts.len() == 0;\n     if block.expr.is_none();\n     then {\n         // report your lint here\n     }\n }\n if_chain! {\n-    if let ExprKind::MethodCall(ref method_name, ref args, _) = expr.kind;\n+    if let ExprKind::MethodCall(method_name, _, args, _) = expr.kind;\n     if method_name.ident.name.as_str() == test;\n     if args.len() == 1;\n     if let ExprKind::Path(ref qpath) = args[0].kind;"}]}