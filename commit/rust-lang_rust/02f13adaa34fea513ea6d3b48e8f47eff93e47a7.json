{"sha": "02f13adaa34fea513ea6d3b48e8f47eff93e47a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyZjEzYWRhYTM0ZmVhNTEzZWE2ZDNiNDhlOGY0N2VmZjkzZTQ3YTc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-18T23:56:12Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:22Z"}, "message": "librustc: De-`@mut` the `trait_methods_cache`", "tree": {"sha": "987787a83920a1a9b2202cd1b5080ea75734f979", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/987787a83920a1a9b2202cd1b5080ea75734f979"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02f13adaa34fea513ea6d3b48e8f47eff93e47a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02f13adaa34fea513ea6d3b48e8f47eff93e47a7", "html_url": "https://github.com/rust-lang/rust/commit/02f13adaa34fea513ea6d3b48e8f47eff93e47a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02f13adaa34fea513ea6d3b48e8f47eff93e47a7/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "214d6bc34aa0d581a504c906b88b9bcb8583a3c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/214d6bc34aa0d581a504c906b88b9bcb8583a3c0", "html_url": "https://github.com/rust-lang/rust/commit/214d6bc34aa0d581a504c906b88b9bcb8583a3c0"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "e0de6872476901fbda39fa282add4ddd937d0b35", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02f13adaa34fea513ea6d3b48e8f47eff93e47a7/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02f13adaa34fea513ea6d3b48e8f47eff93e47a7/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=02f13adaa34fea513ea6d3b48e8f47eff93e47a7", "patch": "@@ -463,7 +463,8 @@ fn encode_reexported_static_trait_methods(ecx: &EncodeContext,\n                                           ebml_w: &mut writer::Encoder,\n                                           exp: &middle::resolve::Export2)\n                                           -> bool {\n-    match ecx.tcx.trait_methods_cache.find(&exp.def_id) {\n+    let trait_methods_cache = ecx.tcx.trait_methods_cache.borrow();\n+    match trait_methods_cache.get().find(&exp.def_id) {\n         Some(methods) => {\n             for &m in methods.iter() {\n                 if m.explicit_self == ast::sty_static {"}, {"sha": "eee00943d021be83aafc28ce65077cef6995d58c", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/02f13adaa34fea513ea6d3b48e8f47eff93e47a7/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02f13adaa34fea513ea6d3b48e8f47eff93e47a7/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=02f13adaa34fea513ea6d3b48e8f47eff93e47a7", "patch": "@@ -293,7 +293,7 @@ struct ctxt_ {\n     trait_method_def_ids: RefCell<HashMap<DefId, @~[DefId]>>,\n \n     // A cache for the trait_methods() routine\n-    trait_methods_cache: @mut HashMap<DefId, @~[@Method]>,\n+    trait_methods_cache: RefCell<HashMap<DefId, @~[@Method]>>,\n \n     impl_trait_cache: @mut HashMap<ast::DefId, Option<@ty::TraitRef>>,\n \n@@ -1000,7 +1000,7 @@ pub fn mk_ctxt(s: session::Session,\n         enum_var_cache: @mut HashMap::new(),\n         methods: RefCell::new(HashMap::new()),\n         trait_method_def_ids: RefCell::new(HashMap::new()),\n-        trait_methods_cache: @mut HashMap::new(),\n+        trait_methods_cache: RefCell::new(HashMap::new()),\n         impl_trait_cache: @mut HashMap::new(),\n         ty_param_defs: @mut HashMap::new(),\n         adjustments: @mut HashMap::new(),\n@@ -3591,12 +3591,13 @@ pub fn trait_method(cx: ctxt, trait_did: ast::DefId, idx: uint) -> @Method {\n \n \n pub fn trait_methods(cx: ctxt, trait_did: ast::DefId) -> @~[@Method] {\n-    match cx.trait_methods_cache.find(&trait_did) {\n+    let mut trait_methods_cache = cx.trait_methods_cache.borrow_mut();\n+    match trait_methods_cache.get().find(&trait_did) {\n         Some(&methods) => methods,\n         None => {\n             let def_ids = ty::trait_method_def_ids(cx, trait_did);\n             let methods = @def_ids.map(|d| ty::method(cx, *d));\n-            cx.trait_methods_cache.insert(trait_did, methods);\n+            trait_methods_cache.get().insert(trait_did, methods);\n             methods\n         }\n     }"}]}