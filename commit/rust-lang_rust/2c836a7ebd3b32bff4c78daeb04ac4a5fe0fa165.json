{"sha": "2c836a7ebd3b32bff4c78daeb04ac4a5fe0fa165", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjODM2YTdlYmQzYjMyYmZmNGM3OGRhZWIwNGFjNGE1ZmUwZmExNjU=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-08-01T13:29:13Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-08-01T13:30:29Z"}, "message": "Fallout from fixing `try_read_value` to work with enums", "tree": {"sha": "f85b2591f11881a2148202160cdb7dc1c8b8e2a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f85b2591f11881a2148202160cdb7dc1c8b8e2a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c836a7ebd3b32bff4c78daeb04ac4a5fe0fa165", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c836a7ebd3b32bff4c78daeb04ac4a5fe0fa165", "html_url": "https://github.com/rust-lang/rust/commit/2c836a7ebd3b32bff4c78daeb04ac4a5fe0fa165", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c836a7ebd3b32bff4c78daeb04ac4a5fe0fa165/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "551df459357cb812443a5467f95bed4536b5b3ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/551df459357cb812443a5467f95bed4536b5b3ad", "html_url": "https://github.com/rust-lang/rust/commit/551df459357cb812443a5467f95bed4536b5b3ad"}], "stats": {"total": 91, "additions": 35, "deletions": 56}, "files": [{"sha": "121812e8713849987694b161ce98d755d42b8a0b", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 17, "deletions": 34, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/2c836a7ebd3b32bff4c78daeb04ac4a5fe0fa165/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c836a7ebd3b32bff4c78daeb04ac4a5fe0fa165/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=2c836a7ebd3b32bff4c78daeb04ac4a5fe0fa165", "patch": "@@ -5,7 +5,7 @@ use rustc::hir;\n use rustc::mir::interpret::{ConstEvalErr, ScalarMaybeUndef};\n use rustc::mir;\n use rustc::ty::{self, TyCtxt, Ty, Instance};\n-use rustc::ty::layout::{self, LayoutOf, Primitive, TyLayout, Size};\n+use rustc::ty::layout::{self, LayoutOf, Primitive, TyLayout};\n use rustc::ty::subst::Subst;\n use rustc_data_structures::indexed_vec::IndexVec;\n \n@@ -77,46 +77,29 @@ pub fn value_to_const_value<'tcx>(\n     ecx: &EvalContext<'_, '_, 'tcx, CompileTimeEvaluator>,\n     val: Value,\n     layout: TyLayout<'tcx>,\n-) -> &'tcx ty::Const<'tcx> {\n+) -> EvalResult<'tcx, &'tcx ty::Const<'tcx>> {\n     match (val, &layout.abi) {\n         (Value::Scalar(ScalarMaybeUndef::Scalar(Scalar::Bits { size: 0, ..})), _) if layout.is_zst() => {},\n         (Value::ByRef(..), _) |\n         (Value::Scalar(_), &layout::Abi::Scalar(_)) |\n         (Value::ScalarPair(..), &layout::Abi::ScalarPair(..)) => {},\n         _ => bug!(\"bad value/layout combo: {:#?}, {:#?}\", val, layout),\n     }\n-    let val = (|| {\n-        match val {\n-            Value::Scalar(val) => Ok(ConstValue::Scalar(val.unwrap_or_err()?)),\n-            Value::ScalarPair(a, b) => Ok(ConstValue::ScalarPair(a.unwrap_or_err()?, b.unwrap_or_err()?)),\n-            Value::ByRef(ptr, align) => {\n-                let ptr = ptr.to_ptr().unwrap();\n-                let alloc = ecx.memory.get(ptr.alloc_id)?;\n-                assert!(alloc.align.abi() >= align.abi());\n-                assert!(alloc.bytes.len() as u64 - ptr.offset.bytes() >= layout.size.bytes());\n-                let mut alloc = alloc.clone();\n-                alloc.align = align;\n-                let alloc = ecx.tcx.intern_const_alloc(alloc);\n-                Ok(ConstValue::ByRef(alloc, ptr.offset))\n-            }\n-        }\n-    })();\n-    match val {\n-        Ok(val) => ty::Const::from_const_value(ecx.tcx.tcx, val, layout.ty),\n-        Err(error) => {\n-            let (stacktrace, span) = ecx.generate_stacktrace(None);\n-            let err = ConstEvalErr { span, error, stacktrace };\n-            if let Some(mut err) = err.struct_error(ecx.tcx, \"failed to convert Value to ConstValue\") {\n-                err.delay_as_bug();\n-            } else {\n-                span_bug!(span, \"failed to convert Value to ConstValue\")\n-            }\n-            let alloc = Allocation::undef(layout.size, layout.align);\n+    let val = match val {\n+        Value::Scalar(val) => ConstValue::Scalar(val.unwrap_or_err()?),\n+        Value::ScalarPair(a, b) => ConstValue::ScalarPair(a.unwrap_or_err()?, b.unwrap_or_err()?),\n+        Value::ByRef(ptr, align) => {\n+            let ptr = ptr.to_ptr().unwrap();\n+            let alloc = ecx.memory.get(ptr.alloc_id)?;\n+            assert!(alloc.align.abi() >= align.abi());\n+            assert!(alloc.bytes.len() as u64 - ptr.offset.bytes() >= layout.size.bytes());\n+            let mut alloc = alloc.clone();\n+            alloc.align = align;\n             let alloc = ecx.tcx.intern_const_alloc(alloc);\n-            let val = ConstValue::ByRef(alloc, Size::ZERO);\n-            ty::Const::from_const_value(ecx.tcx.tcx, val, layout.ty)\n+            ConstValue::ByRef(alloc, ptr.offset)\n         }\n-    }\n+    };\n+    Ok(ty::Const::from_const_value(ecx.tcx.tcx, val, layout.ty))\n }\n \n fn eval_body_and_ecx<'a, 'mir, 'tcx>(\n@@ -454,7 +437,7 @@ pub fn const_val_field<'a, 'tcx>(\n             ),\n             _ => {},\n         }\n-        Ok(value_to_const_value(&ecx, new_value, layout))\n+        value_to_const_value(&ecx, new_value, layout)\n     })();\n     result.map_err(|err| {\n         let (trace, span) = ecx.generate_stacktrace(None);\n@@ -555,7 +538,7 @@ pub fn const_eval_provider<'a, 'tcx>(\n         if tcx.is_static(def_id).is_none() && cid.promoted.is_none() {\n             val = ecx.try_read_by_ref(val, layout.ty)?;\n         }\n-        Ok(value_to_const_value(&ecx, val, layout))\n+        value_to_const_value(&ecx, val, layout)\n     }).map_err(|err| {\n         let (trace, span) = ecx.generate_stacktrace(None);\n         let err = ConstEvalErr {"}, {"sha": "66eda13a7344a3f882c4273bfe92df6c0d362ed2", "filename": "src/test/ui/const-eval/ub-enum-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c836a7ebd3b32bff4c78daeb04ac4a5fe0fa165/src%2Ftest%2Fui%2Fconst-eval%2Fub-enum-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c836a7ebd3b32bff4c78daeb04ac4a5fe0fa165/src%2Ftest%2Fui%2Fconst-eval%2Fub-enum-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fub-enum-ptr.rs?ref=2c836a7ebd3b32bff4c78daeb04ac4a5fe0fa165", "patch": "@@ -21,7 +21,7 @@ union Foo {\n \n // A pointer is guaranteed non-null\n const BAD_ENUM: Enum = unsafe { Foo { a: &1 }.b};\n-//~^ ERROR this constant likely exhibits undefined behavior\n+//~^ ERROR this constant cannot be used\n \n fn main() {\n }"}, {"sha": "a0aa459db3f9145ee8ac673f52b18c0bf1e13084", "filename": "src/test/ui/const-eval/ub-enum-ptr.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2c836a7ebd3b32bff4c78daeb04ac4a5fe0fa165/src%2Ftest%2Fui%2Fconst-eval%2Fub-enum-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c836a7ebd3b32bff4c78daeb04ac4a5fe0fa165/src%2Ftest%2Fui%2Fconst-eval%2Fub-enum-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fub-enum-ptr.stderr?ref=2c836a7ebd3b32bff4c78daeb04ac4a5fe0fa165", "patch": "@@ -1,11 +1,10 @@\n-error[E0080]: this constant likely exhibits undefined behavior\n+error: this constant cannot be used\n   --> $DIR/ub-enum-ptr.rs:23:1\n    |\n LL | const BAD_ENUM: Enum = unsafe { Foo { a: &1 }.b};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer at .TAG, but expected something in the range 0..=0\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a raw memory access tried to access part of a pointer value as raw bytes\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: #[deny(const_err)] on by default\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0080`."}, {"sha": "5723f4a4159aa5170a8020efe2404afd09398fd8", "filename": "src/test/ui/const-eval/union-const-eval-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c836a7ebd3b32bff4c78daeb04ac4a5fe0fa165/src%2Ftest%2Fui%2Fconst-eval%2Funion-const-eval-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c836a7ebd3b32bff4c78daeb04ac4a5fe0fa165/src%2Ftest%2Fui%2Fconst-eval%2Funion-const-eval-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Funion-const-eval-field.rs?ref=2c836a7ebd3b32bff4c78daeb04ac4a5fe0fa165", "patch": "@@ -34,7 +34,7 @@ const fn read_field2() -> Field2 {\n }\n \n const fn read_field3() -> Field3 {\n-    const FIELD3: Field3 = unsafe { UNION.field3 }; //~ ERROR exhibits undefined behavior\n+    const FIELD3: Field3 = unsafe { UNION.field3 }; //~ ERROR cannot be used\n     FIELD3\n }\n "}, {"sha": "811450c8cba4757afc3b52765633e357a00aec7c", "filename": "src/test/ui/const-eval/union-const-eval-field.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2c836a7ebd3b32bff4c78daeb04ac4a5fe0fa165/src%2Ftest%2Fui%2Fconst-eval%2Funion-const-eval-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c836a7ebd3b32bff4c78daeb04ac4a5fe0fa165/src%2Ftest%2Fui%2Fconst-eval%2Funion-const-eval-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Funion-const-eval-field.stderr?ref=2c836a7ebd3b32bff4c78daeb04ac4a5fe0fa165", "patch": "@@ -1,11 +1,10 @@\n-error[E0080]: this constant likely exhibits undefined behavior\n+error: this constant cannot be used\n   --> $DIR/union-const-eval-field.rs:37:5\n    |\n-LL |     const FIELD3: Field3 = unsafe { UNION.field3 }; //~ ERROR exhibits undefined behavior\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered undefined bytes\n+LL |     const FIELD3: Field3 = unsafe { UNION.field3 }; //~ ERROR cannot be used\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempted to read undefined bytes\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: #[deny(const_err)] on by default\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0080`."}, {"sha": "0cdb78c97803c7f80cf3ef89614173154971812f", "filename": "src/test/ui/const-eval/union-ice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c836a7ebd3b32bff4c78daeb04ac4a5fe0fa165/src%2Ftest%2Fui%2Fconst-eval%2Funion-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c836a7ebd3b32bff4c78daeb04ac4a5fe0fa165/src%2Ftest%2Fui%2Fconst-eval%2Funion-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Funion-ice.rs?ref=2c836a7ebd3b32bff4c78daeb04ac4a5fe0fa165", "patch": "@@ -20,9 +20,9 @@ union DummyUnion {\n \n const UNION: DummyUnion = DummyUnion { field1: 1065353216 };\n \n-const FIELD3: Field3 = unsafe { UNION.field3 }; //~ ERROR this constant likely exhibits undefined\n+const FIELD3: Field3 = unsafe { UNION.field3 }; //~ ERROR this constant cannot be used\n \n-const FIELD_PATH: Struct = Struct { //~ ERROR this constant likely exhibits undefined behavior\n+const FIELD_PATH: Struct = Struct { //~ ERROR this constant cannot be used\n     a: 42,\n     b: unsafe { UNION.field3 },\n };"}, {"sha": "e8a7b2f500561e31cbee5926bd8b7d8893e1d003", "filename": "src/test/ui/const-eval/union-ice.stderr", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2c836a7ebd3b32bff4c78daeb04ac4a5fe0fa165/src%2Ftest%2Fui%2Fconst-eval%2Funion-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c836a7ebd3b32bff4c78daeb04ac4a5fe0fa165/src%2Ftest%2Fui%2Fconst-eval%2Funion-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Funion-ice.stderr?ref=2c836a7ebd3b32bff4c78daeb04ac4a5fe0fa165", "patch": "@@ -1,21 +1,19 @@\n-error[E0080]: this constant likely exhibits undefined behavior\n+error: this constant cannot be used\n   --> $DIR/union-ice.rs:23:1\n    |\n-LL | const FIELD3: Field3 = unsafe { UNION.field3 }; //~ ERROR this constant likely exhibits undefined\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered undefined bytes\n+LL | const FIELD3: Field3 = unsafe { UNION.field3 }; //~ ERROR this constant cannot be used\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempted to read undefined bytes\n    |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   = note: #[deny(const_err)] on by default\n \n-error[E0080]: this constant likely exhibits undefined behavior\n+error: this constant cannot be used\n   --> $DIR/union-ice.rs:25:1\n    |\n-LL | / const FIELD_PATH: Struct = Struct { //~ ERROR this constant likely exhibits undefined behavior\n+LL | / const FIELD_PATH: Struct = Struct { //~ ERROR this constant cannot be used\n LL | |     a: 42,\n LL | |     b: unsafe { UNION.field3 },\n LL | | };\n-   | |__^ type validation failed: encountered undefined bytes at .b\n-   |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+   | |__^ attempted to read undefined bytes\n \n error[E0080]: this constant likely exhibits undefined behavior\n   --> $DIR/union-ice.rs:35:1"}]}