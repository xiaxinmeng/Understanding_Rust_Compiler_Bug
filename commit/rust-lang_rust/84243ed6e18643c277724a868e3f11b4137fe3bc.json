{"sha": "84243ed6e18643c277724a868e3f11b4137fe3bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0MjQzZWQ2ZTE4NjQzYzI3NzcyNGE4NjhlM2YxMWI0MTM3ZmUzYmM=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-05-25T04:22:52Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-06-09T21:29:30Z"}, "message": "Use phase(plugin) in other crates", "tree": {"sha": "34e42be0f2736be1a2d893d7221092f574c8a90f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34e42be0f2736be1a2d893d7221092f574c8a90f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84243ed6e18643c277724a868e3f11b4137fe3bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84243ed6e18643c277724a868e3f11b4137fe3bc", "html_url": "https://github.com/rust-lang/rust/commit/84243ed6e18643c277724a868e3f11b4137fe3bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84243ed6e18643c277724a868e3f11b4137fe3bc/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffb2f12ed89213f96561dfbece0751ac870e2c40", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffb2f12ed89213f96561dfbece0751ac870e2c40", "html_url": "https://github.com/rust-lang/rust/commit/ffb2f12ed89213f96561dfbece0751ac870e2c40"}], "stats": {"total": 66, "additions": 33, "deletions": 33}, "files": [{"sha": "38883118114450c963479d7e71e6a0ec44f5efe4", "filename": "src/doc/rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84243ed6e18643c277724a868e3f11b4137fe3bc/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/84243ed6e18643c277724a868e3f11b4137fe3bc/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=84243ed6e18643c277724a868e3f11b4137fe3bc", "patch": "@@ -4098,7 +4098,7 @@ that demonstrates all four of them:\n \n ~~~~\n #![feature(phase)]\n-#[phase(syntax, link)] extern crate log;\n+#[phase(plugin, link)] extern crate log;\n \n fn main() {\n     error!(\"This is an error log\")"}, {"sha": "9cd62fcdd23c7568efbb6b2ced7af94b7d5e7ac1", "filename": "src/libfourcc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84243ed6e18643c277724a868e3f11b4137fe3bc/src%2Flibfourcc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84243ed6e18643c277724a868e3f11b4137fe3bc/src%2Flibfourcc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfourcc%2Flib.rs?ref=84243ed6e18643c277724a868e3f11b4137fe3bc", "patch": "@@ -22,7 +22,7 @@ to be `big`, i.e. left-to-right order. It returns a u32.\n To load the extension and use it:\n \n ```rust,ignore\n-#[phase(syntax)]\n+#[phase(plugin)]\n extern crate fourcc;\n \n fn main() {"}, {"sha": "9748dfbae33f0dc8f744797f43e695cea15f4068", "filename": "src/libgreen/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84243ed6e18643c277724a868e3f11b4137fe3bc/src%2Flibgreen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84243ed6e18643c277724a868e3f11b4137fe3bc/src%2Flibgreen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Flib.rs?ref=84243ed6e18643c277724a868e3f11b4137fe3bc", "patch": "@@ -148,7 +148,7 @@\n //!\n //! ```\n //! #![feature(phase)]\n-//! #[phase(syntax)] extern crate green;\n+//! #[phase(plugin)] extern crate green;\n //!\n //! green_start!(main)\n //!\n@@ -211,7 +211,7 @@\n #![allow(visible_private_types)]\n #![deny(deprecated_owned_vector)]\n \n-#[cfg(test)] #[phase(syntax, link)] extern crate log;\n+#[cfg(test)] #[phase(plugin, link)] extern crate log;\n #[cfg(test)] extern crate rustuv;\n extern crate libc;\n extern crate alloc;\n@@ -249,7 +249,7 @@ pub mod task;\n ///\n /// ```\n /// #![feature(phase)]\n-/// #[phase(syntax)] extern crate green;\n+/// #[phase(plugin)] extern crate green;\n ///\n /// green_start!(main)\n ///"}, {"sha": "448f23eaedbb15191156283c3902d5c6946a2e0e", "filename": "src/libhexfloat/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84243ed6e18643c277724a868e3f11b4137fe3bc/src%2Flibhexfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84243ed6e18643c277724a868e3f11b4137fe3bc/src%2Flibhexfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibhexfloat%2Flib.rs?ref=84243ed6e18643c277724a868e3f11b4137fe3bc", "patch": "@@ -21,7 +21,7 @@ literal.\n To load the extension and use it:\n \n ```rust,ignore\n-#[phase(syntax)]\n+#[phase(plugin)]\n extern crate hexfloat;\n \n fn main() {"}, {"sha": "254f9aaf55e4399a9ff06816d6e512494caed3cd", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84243ed6e18643c277724a868e3f11b4137fe3bc/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84243ed6e18643c277724a868e3f11b4137fe3bc/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=84243ed6e18643c277724a868e3f11b4137fe3bc", "patch": "@@ -16,7 +16,7 @@ Utilities for program-wide and customizable logging\n \n ```\n #![feature(phase)]\n-#[phase(syntax, link)] extern crate log;\n+#[phase(plugin, link)] extern crate log;\n \n fn main() {\n     debug!(\"this is a debug {}\", \"message\");"}, {"sha": "dba34c42a7e15997a7f9afa039a30be880b2f217", "filename": "src/liblog/macros.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/84243ed6e18643c277724a868e3f11b4137fe3bc/src%2Fliblog%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84243ed6e18643c277724a868e3f11b4137fe3bc/src%2Fliblog%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Fmacros.rs?ref=84243ed6e18643c277724a868e3f11b4137fe3bc", "patch": "@@ -22,7 +22,7 @@\n ///\n /// ```\n /// #![feature(phase)]\n-/// #[phase(syntax, link)] extern crate log;\n+/// #[phase(plugin, link)] extern crate log;\n ///\n /// # fn main() {\n /// log!(log::DEBUG, \"this is a debug message\");\n@@ -51,7 +51,7 @@ macro_rules! log(\n ///\n /// ```\n /// #![feature(phase)]\n-/// #[phase(syntax, link)] extern crate log;\n+/// #[phase(plugin, link)] extern crate log;\n ///\n /// # fn main() {\n /// # let error = 3;\n@@ -69,7 +69,7 @@ macro_rules! error(\n ///\n /// ```\n /// #![feature(phase)]\n-/// #[phase(syntax, link)] extern crate log;\n+/// #[phase(plugin, link)] extern crate log;\n ///\n /// # fn main() {\n /// # let code = 3;\n@@ -87,7 +87,7 @@ macro_rules! warn(\n ///\n /// ```\n /// #![feature(phase)]\n-/// #[phase(syntax, link)] extern crate log;\n+/// #[phase(plugin, link)] extern crate log;\n ///\n /// # fn main() {\n /// # let ret = 3;\n@@ -107,7 +107,7 @@ macro_rules! info(\n ///\n /// ```\n /// #![feature(phase)]\n-/// #[phase(syntax, link)] extern crate log;\n+/// #[phase(plugin, link)] extern crate log;\n ///\n /// # fn main() {\n /// debug!(\"x = {x}, y = {y}\", x=10, y=20);\n@@ -124,7 +124,7 @@ macro_rules! debug(\n ///\n /// ```\n /// #![feature(phase)]\n-/// #[phase(syntax, link)] extern crate log;\n+/// #[phase(plugin, link)] extern crate log;\n ///\n /// # fn main() {\n /// # struct Point { x: int, y: int }"}, {"sha": "61e62a0d1053e960bd905310144fb9fbfe8bbe7c", "filename": "src/libregex/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/84243ed6e18643c277724a868e3f11b4137fe3bc/src%2Flibregex%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84243ed6e18643c277724a868e3f11b4137fe3bc/src%2Flibregex%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Flib.rs?ref=84243ed6e18643c277724a868e3f11b4137fe3bc", "patch": "@@ -65,7 +65,7 @@\n //!\n //! ```rust\n //! #![feature(phase)]\n-//! #[phase(syntax)]\n+//! #[phase(plugin)]\n //! extern crate regex_macros;\n //! extern crate regex;\n //!\n@@ -95,7 +95,7 @@\n //!\n //! ```rust\n //! # #![feature(phase)]\n-//! # extern crate regex; #[phase(syntax)] extern crate regex_macros;\n+//! # extern crate regex; #[phase(plugin)] extern crate regex_macros;\n //! # fn main() {\n //! let re = regex!(r\"(\\d{4})-(\\d{2})-(\\d{2})\");\n //! let text = \"2012-03-14, 2013-01-01 and 2014-07-05\";\n@@ -121,7 +121,7 @@\n //!\n //! ```rust\n //! # #![feature(phase)]\n-//! # extern crate regex; #[phase(syntax)] extern crate regex_macros;\n+//! # extern crate regex; #[phase(plugin)] extern crate regex_macros;\n //! # fn main() {\n //! let re = regex!(r\"(?P<y>\\d{4})-(?P<m>\\d{2})-(?P<d>\\d{2})\");\n //! let before = \"2012-03-14, 2013-01-01 and 2014-07-05\";\n@@ -168,7 +168,7 @@\n //!\n //! ```rust\n //! # #![feature(phase)]\n-//! # extern crate regex; #[phase(syntax)] extern crate regex_macros;\n+//! # extern crate regex; #[phase(plugin)] extern crate regex_macros;\n //! # fn main() {\n //! let re = regex!(r\"(?i)\u0394+\");\n //! assert_eq!(re.find(\"\u0394\u03b4\u0394\"), Some((0, 6)));\n@@ -181,7 +181,7 @@\n //!\n //! ```rust\n //! # #![feature(phase)]\n-//! # extern crate regex; #[phase(syntax)] extern crate regex_macros;\n+//! # extern crate regex; #[phase(plugin)] extern crate regex_macros;\n //! # fn main() {\n //! let re = regex!(r\"[\\pN\\p{Greek}\\p{Cherokee}]+\");\n //! assert_eq!(re.find(\"abc\u0394\u13a0\u03b2\u2160\u13f4\u03b3\u03b4\u2161xyz\"), Some((3, 23)));\n@@ -278,7 +278,7 @@\n //!\n //! ```rust\n //! # #![feature(phase)]\n-//! # extern crate regex; #[phase(syntax)] extern crate regex_macros;\n+//! # extern crate regex; #[phase(plugin)] extern crate regex_macros;\n //! # fn main() {\n //! let re = regex!(r\"(?i)a+(?-i)b+\");\n //! let cap = re.captures(\"AaAaAbbBBBb\").unwrap();"}, {"sha": "054cbb0fcd63dfa2c518f793bdeb3fd80f4599aa", "filename": "src/libregex/re.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/84243ed6e18643c277724a868e3f11b4137fe3bc/src%2Flibregex%2Fre.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84243ed6e18643c277724a868e3f11b4137fe3bc/src%2Flibregex%2Fre.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fre.rs?ref=84243ed6e18643c277724a868e3f11b4137fe3bc", "patch": "@@ -87,7 +87,7 @@ pub fn is_match(regex: &str, text: &str) -> Result<bool, parse::Error> {\n /// ```rust\n /// #![feature(phase)]\n /// extern crate regex;\n-/// #[phase(syntax)] extern crate regex_macros;\n+/// #[phase(plugin)] extern crate regex_macros;\n ///\n /// fn main() {\n ///     let re = regex!(r\"\\d+\");\n@@ -172,7 +172,7 @@ impl Regex {\n     ///\n     /// ```rust\n     /// # #![feature(phase)]\n-    /// # extern crate regex; #[phase(syntax)] extern crate regex_macros;\n+    /// # extern crate regex; #[phase(plugin)] extern crate regex_macros;\n     /// # fn main() {\n     /// let text = \"I categorically deny having triskaidekaphobia.\";\n     /// let matched = regex!(r\"\\b\\w{13}\\b\").is_match(text);\n@@ -197,7 +197,7 @@ impl Regex {\n     ///\n     /// ```rust\n     /// # #![feature(phase)]\n-    /// # extern crate regex; #[phase(syntax)] extern crate regex_macros;\n+    /// # extern crate regex; #[phase(plugin)] extern crate regex_macros;\n     /// # fn main() {\n     /// let text = \"I categorically deny having triskaidekaphobia.\";\n     /// let pos = regex!(r\"\\b\\w{13}\\b\").find(text);\n@@ -224,7 +224,7 @@ impl Regex {\n     ///\n     /// ```rust\n     /// # #![feature(phase)]\n-    /// # extern crate regex; #[phase(syntax)] extern crate regex_macros;\n+    /// # extern crate regex; #[phase(plugin)] extern crate regex_macros;\n     /// # fn main() {\n     /// let text = \"Retroactively relinquishing remunerations is reprehensible.\";\n     /// for pos in regex!(r\"\\b\\w{13}\\b\").find_iter(text) {\n@@ -263,7 +263,7 @@ impl Regex {\n     ///\n     /// ```rust\n     /// # #![feature(phase)]\n-    /// # extern crate regex; #[phase(syntax)] extern crate regex_macros;\n+    /// # extern crate regex; #[phase(plugin)] extern crate regex_macros;\n     /// # fn main() {\n     /// let re = regex!(r\"'([^']+)'\\s+\\((\\d{4})\\)\");\n     /// let text = \"Not my favorite movie: 'Citizen Kane' (1941).\";\n@@ -281,7 +281,7 @@ impl Regex {\n     ///\n     /// ```rust\n     /// # #![feature(phase)]\n-    /// # extern crate regex; #[phase(syntax)] extern crate regex_macros;\n+    /// # extern crate regex; #[phase(plugin)] extern crate regex_macros;\n     /// # fn main() {\n     /// let re = regex!(r\"'(?P<title>[^']+)'\\s+\\((?P<year>\\d{4})\\)\");\n     /// let text = \"Not my favorite movie: 'Citizen Kane' (1941).\";\n@@ -314,7 +314,7 @@ impl Regex {\n     ///\n     /// ```rust\n     /// # #![feature(phase)]\n-    /// # extern crate regex; #[phase(syntax)] extern crate regex_macros;\n+    /// # extern crate regex; #[phase(plugin)] extern crate regex_macros;\n     /// # fn main() {\n     /// let re = regex!(r\"'(?P<title>[^']+)'\\s+\\((?P<year>\\d{4})\\)\");\n     /// let text = \"'Citizen Kane' (1941), 'The Wizard of Oz' (1939), 'M' (1931).\";\n@@ -350,7 +350,7 @@ impl Regex {\n     ///\n     /// ```rust\n     /// # #![feature(phase)]\n-    /// # extern crate regex; #[phase(syntax)] extern crate regex_macros;\n+    /// # extern crate regex; #[phase(plugin)] extern crate regex_macros;\n     /// # fn main() {\n     /// let re = regex!(r\"[ \\t]+\");\n     /// let fields: Vec<&str> = re.split(\"a b \\t  c\\td    e\").collect();\n@@ -380,7 +380,7 @@ impl Regex {\n     ///\n     /// ```rust\n     /// # #![feature(phase)]\n-    /// # extern crate regex; #[phase(syntax)] extern crate regex_macros;\n+    /// # extern crate regex; #[phase(plugin)] extern crate regex_macros;\n     /// # fn main() {\n     /// let re = regex!(r\"\\W+\");\n     /// let fields: Vec<&str> = re.splitn(\"Hey! How are you?\", 3).collect();\n@@ -410,7 +410,7 @@ impl Regex {\n     ///\n     /// ```rust\n     /// # #![feature(phase)]\n-    /// # extern crate regex; #[phase(syntax)] extern crate regex_macros;\n+    /// # extern crate regex; #[phase(plugin)] extern crate regex_macros;\n     /// # fn main() {\n     /// let re = regex!(\"[^01]+\");\n     /// assert_eq!(re.replace(\"1078910\", \"\").as_slice(), \"1010\");\n@@ -424,7 +424,7 @@ impl Regex {\n     ///\n     /// ```rust\n     /// # #![feature(phase)]\n-    /// # extern crate regex; #[phase(syntax)] extern crate regex_macros;\n+    /// # extern crate regex; #[phase(plugin)] extern crate regex_macros;\n     /// # use regex::Captures; fn main() {\n     /// let re = regex!(r\"([^,\\s]+),\\s+(\\S+)\");\n     /// let result = re.replace(\"Springsteen, Bruce\", |caps: &Captures| {\n@@ -441,7 +441,7 @@ impl Regex {\n     ///\n     /// ```rust\n     /// # #![feature(phase)]\n-    /// # extern crate regex; #[phase(syntax)] extern crate regex_macros;\n+    /// # extern crate regex; #[phase(plugin)] extern crate regex_macros;\n     /// # fn main() {\n     /// let re = regex!(r\"(?P<last>[^,\\s]+),\\s+(?P<first>\\S+)\");\n     /// let result = re.replace(\"Springsteen, Bruce\", \"$first $last\");\n@@ -458,7 +458,7 @@ impl Regex {\n     ///\n     /// ```rust\n     /// # #![feature(phase)]\n-    /// # extern crate regex; #[phase(syntax)] extern crate regex_macros;\n+    /// # extern crate regex; #[phase(plugin)] extern crate regex_macros;\n     /// # fn main() {\n     /// use regex::NoExpand;\n     ///"}, {"sha": "96c600b0fda3a4a50f0a5dc04345b1b604d322c1", "filename": "src/libregex/test/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84243ed6e18643c277724a868e3f11b4137fe3bc/src%2Flibregex%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84243ed6e18643c277724a868e3f11b4137fe3bc/src%2Flibregex%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Ftest%2Fmod.rs?ref=84243ed6e18643c277724a868e3f11b4137fe3bc", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #[cfg(not(stage1))]\n-#[phase(syntax)]\n+#[phase(plugin)]\n extern crate regex_macros;\n \n #[cfg(not(stage1))]"}]}