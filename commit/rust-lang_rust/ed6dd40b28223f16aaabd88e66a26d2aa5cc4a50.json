{"sha": "ed6dd40b28223f16aaabd88e66a26d2aa5cc4a50", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNmRkNDBiMjgyMjNmMTZhYWFiZDg4ZTY2YTI2ZDJhYTVjYzRhNTA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2021-04-23T15:59:49Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2021-04-23T15:59:49Z"}, "message": "Update wasm test assertions", "tree": {"sha": "266d53170e3242fb51d3b917e067b6195a07977b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/266d53170e3242fb51d3b917e067b6195a07977b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed6dd40b28223f16aaabd88e66a26d2aa5cc4a50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed6dd40b28223f16aaabd88e66a26d2aa5cc4a50", "html_url": "https://github.com/rust-lang/rust/commit/ed6dd40b28223f16aaabd88e66a26d2aa5cc4a50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed6dd40b28223f16aaabd88e66a26d2aa5cc4a50/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35ae752231dd8ea1abd2a1a970c358eda28b8ebd", "url": "https://api.github.com/repos/rust-lang/rust/commits/35ae752231dd8ea1abd2a1a970c358eda28b8ebd", "html_url": "https://github.com/rust-lang/rust/commit/35ae752231dd8ea1abd2a1a970c358eda28b8ebd"}], "stats": {"total": 185, "additions": 12, "deletions": 173}, "files": [{"sha": "bd6073d8c204a7eb0b099a8ae792f5478f0eb746", "filename": "src/test/codegen/wasm_casts_nontrapping.rs", "status": "removed", "additions": 0, "deletions": 162, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/35ae752231dd8ea1abd2a1a970c358eda28b8ebd/src%2Ftest%2Fcodegen%2Fwasm_casts_nontrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35ae752231dd8ea1abd2a1a970c358eda28b8ebd/src%2Ftest%2Fcodegen%2Fwasm_casts_nontrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fwasm_casts_nontrapping.rs?ref=35ae752231dd8ea1abd2a1a970c358eda28b8ebd", "patch": "@@ -1,162 +0,0 @@\n-// only-wasm32\n-// compile-flags: -C target-feature=+nontrapping-fptoint\n-#![crate_type = \"lib\"]\n-\n-// CHECK-LABEL: @cast_f64_i64\n-#[no_mangle]\n-pub fn cast_f64_i64(a: f64) -> i64 {\n-    // CHECK: tail call i64 @llvm.wasm.trunc.saturate.signed.i64.f64(double {{.*}})\n-    // CHECK-NEXT: ret i64 {{.*}}\n-    a as _\n-}\n-\n-// CHECK-LABEL: @cast_f64_i32\n-#[no_mangle]\n-pub fn cast_f64_i32(a: f64) -> i32 {\n-    // CHECK: tail call i32 @llvm.wasm.trunc.saturate.signed.i32.f64(double {{.*}})\n-    // CHECK-NEXT: ret i32 {{.*}}\n-    a as _\n-}\n-\n-// CHECK-LABEL: @cast_f32_i64\n-#[no_mangle]\n-pub fn cast_f32_i64(a: f32) -> i64 {\n-    // CHECK: tail call i64 @llvm.wasm.trunc.saturate.signed.i64.f32(float {{.*}})\n-    // CHECK-NEXT: ret i64 {{.*}}\n-    a as _\n-}\n-\n-// CHECK-LABEL: @cast_f32_i32\n-#[no_mangle]\n-pub fn cast_f32_i32(a: f32) -> i32 {\n-    // CHECK: tail call i32 @llvm.wasm.trunc.saturate.signed.i32.f32(float {{.*}})\n-    // CHECK-NEXT: ret i32 {{.*}}\n-    a as _\n-}\n-\n-\n-// CHECK-LABEL: @cast_f64_u64\n-#[no_mangle]\n-pub fn cast_f64_u64(a: f64) -> u64 {\n-    // CHECK: tail call i64 @llvm.wasm.trunc.saturate.unsigned.i64.f64(double {{.*}})\n-    // CHECK-NEXT: ret i64 {{.*}}\n-    a as _\n-}\n-\n-// CHECK-LABEL: @cast_f64_u32\n-#[no_mangle]\n-pub fn cast_f64_u32(a: f64) -> u32 {\n-    // CHECK: tail call i32 @llvm.wasm.trunc.saturate.unsigned.i32.f64(double {{.*}})\n-    // CHECK-NEXT: ret i32 {{.*}}\n-    a as _\n-}\n-\n-// CHECK-LABEL: @cast_f32_u64\n-#[no_mangle]\n-pub fn cast_f32_u64(a: f32) -> u64 {\n-    // CHECK: tail call i64 @llvm.wasm.trunc.saturate.unsigned.i64.f32(float {{.*}})\n-    // CHECK-NEXT: ret i64 {{.*}}\n-    a as _\n-}\n-\n-// CHECK-LABEL: @cast_f32_u32\n-#[no_mangle]\n-pub fn cast_f32_u32(a: f32) -> u32 {\n-    // CHECK: tail call i32 @llvm.wasm.trunc.saturate.unsigned.i32.f32(float {{.*}})\n-    // CHECK-NEXT: ret i32 {{.*}}\n-    a as _\n-}\n-\n-// CHECK-LABEL: @cast_f32_u8\n-#[no_mangle]\n-pub fn cast_f32_u8(a: f32) -> u8 {\n-    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n-    // CHECK: fptoui float {{.*}} to i8\n-    // CHECK-NEXT: select i1 {{.*}}, i8 {{.*}}, i8 {{.*}}\n-    // CHECK-NEXT: ret i8 {{.*}}\n-    a as _\n-}\n-\n-\n-\n-// CHECK-LABEL: @cast_unchecked_f64_i64\n-#[no_mangle]\n-pub unsafe fn cast_unchecked_f64_i64(a: f64) -> i64 {\n-    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n-    // CHECK: fptosi double {{.*}} to i64\n-    // CHECK-NEXT: ret i64 {{.*}}\n-    a.to_int_unchecked()\n-}\n-\n-// CHECK-LABEL: @cast_unchecked_f64_i32\n-#[no_mangle]\n-pub unsafe fn cast_unchecked_f64_i32(a: f64) -> i32 {\n-    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n-    // CHECK: fptosi double {{.*}} to i32\n-    // CHECK-NEXT: ret i32 {{.*}}\n-    a.to_int_unchecked()\n-}\n-\n-// CHECK-LABEL: @cast_unchecked_f32_i64\n-#[no_mangle]\n-pub unsafe fn cast_unchecked_f32_i64(a: f32) -> i64 {\n-    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n-    // CHECK: fptosi float {{.*}} to i64\n-    // CHECK-NEXT: ret i64 {{.*}}\n-    a.to_int_unchecked()\n-}\n-\n-// CHECK-LABEL: @cast_unchecked_f32_i32\n-#[no_mangle]\n-pub unsafe fn cast_unchecked_f32_i32(a: f32) -> i32 {\n-    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n-    // CHECK: fptosi float {{.*}} to i32\n-    // CHECK-NEXT: ret i32 {{.*}}\n-    a.to_int_unchecked()\n-}\n-\n-\n-// CHECK-LABEL: @cast_unchecked_f64_u64\n-#[no_mangle]\n-pub unsafe fn cast_unchecked_f64_u64(a: f64) -> u64 {\n-    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n-    // CHECK: fptoui double {{.*}} to i64\n-    // CHECK-NEXT: ret i64 {{.*}}\n-    a.to_int_unchecked()\n-}\n-\n-// CHECK-LABEL: @cast_unchecked_f64_u32\n-#[no_mangle]\n-pub unsafe fn cast_unchecked_f64_u32(a: f64) -> u32 {\n-    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n-    // CHECK: fptoui double {{.*}} to i32\n-    // CHECK-NEXT: ret i32 {{.*}}\n-    a.to_int_unchecked()\n-}\n-\n-// CHECK-LABEL: @cast_unchecked_f32_u64\n-#[no_mangle]\n-pub unsafe fn cast_unchecked_f32_u64(a: f32) -> u64 {\n-    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n-    // CHECK: fptoui float {{.*}} to i64\n-    // CHECK-NEXT: ret i64 {{.*}}\n-    a.to_int_unchecked()\n-}\n-\n-// CHECK-LABEL: @cast_unchecked_f32_u32\n-#[no_mangle]\n-pub unsafe fn cast_unchecked_f32_u32(a: f32) -> u32 {\n-    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n-    // CHECK: fptoui float {{.*}} to i32\n-    // CHECK-NEXT: ret i32 {{.*}}\n-    a.to_int_unchecked()\n-}\n-\n-// CHECK-LABEL: @cast_unchecked_f32_u8\n-#[no_mangle]\n-pub unsafe fn cast_unchecked_f32_u8(a: f32) -> u8 {\n-    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n-    // CHECK: fptoui float {{.*}} to i8\n-    // CHECK-NEXT: ret i8 {{.*}}\n-    a.to_int_unchecked()\n-}"}, {"sha": "baf130a87917972c569e8b17edda7d95c282a58e", "filename": "src/test/codegen/wasm_casts_trapping.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ed6dd40b28223f16aaabd88e66a26d2aa5cc4a50/src%2Ftest%2Fcodegen%2Fwasm_casts_trapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed6dd40b28223f16aaabd88e66a26d2aa5cc4a50/src%2Ftest%2Fcodegen%2Fwasm_casts_trapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fwasm_casts_trapping.rs?ref=ed6dd40b28223f16aaabd88e66a26d2aa5cc4a50", "patch": "@@ -1,13 +1,14 @@\n // only-wasm32\n // compile-flags: -C target-feature=-nontrapping-fptoint\n+// min-llvm-version: 12.0\n #![crate_type = \"lib\"]\n \n // CHECK-LABEL: @cast_f64_i64\n #[no_mangle]\n pub fn cast_f64_i64(a: f64) -> i64 {\n     // CHECK-NOT: fptosi double {{.*}} to i64\n     // CHECK-NOT: select i1 {{.*}}, i64 {{.*}}, i64 {{.*}}\n-    // CHECK: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: {{.*}} call {{.*}} @llvm.fptosi.sat.i64.f64{{.*}}\n     a as _\n }\n \n@@ -16,7 +17,7 @@ pub fn cast_f64_i64(a: f64) -> i64 {\n pub fn cast_f64_i32(a: f64) -> i32 {\n     // CHECK-NOT: fptosi double {{.*}} to i32\n     // CHECK-NOT: select i1 {{.*}}, i32 {{.*}}, i32 {{.*}}\n-    // CHECK: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: {{.*}} call {{.*}} @llvm.fptosi.sat.i32.f64{{.*}}\n     a as _\n }\n \n@@ -25,7 +26,7 @@ pub fn cast_f64_i32(a: f64) -> i32 {\n pub fn cast_f32_i64(a: f32) -> i64 {\n     // CHECK-NOT: fptosi float {{.*}} to i64\n     // CHECK-NOT: select i1 {{.*}}, i64 {{.*}}, i64 {{.*}}\n-    // CHECK: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: {{.*}} call {{.*}} @llvm.fptosi.sat.i64.f32{{.*}}\n     a as _\n }\n \n@@ -34,7 +35,7 @@ pub fn cast_f32_i64(a: f32) -> i64 {\n pub fn cast_f32_i32(a: f32) -> i32 {\n     // CHECK-NOT: fptosi float {{.*}} to i32\n     // CHECK-NOT: select i1 {{.*}}, i32 {{.*}}, i32 {{.*}}\n-    // CHECK: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: {{.*}} call {{.*}} @llvm.fptosi.sat.i32.f32{{.*}}\n     a as _\n }\n \n@@ -43,7 +44,7 @@ pub fn cast_f32_i32(a: f32) -> i32 {\n pub fn cast_f64_u64(a: f64) -> u64 {\n     // CHECK-NOT: fptoui double {{.*}} to i64\n     // CHECK-NOT: select i1 {{.*}}, i64 {{.*}}, i64 {{.*}}\n-    // CHECK: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: {{.*}} call {{.*}} @llvm.fptoui.sat.i64.f64{{.*}}\n     a as _\n }\n \n@@ -52,7 +53,7 @@ pub fn cast_f64_u64(a: f64) -> u64 {\n pub fn cast_f64_u32(a: f64) -> u32 {\n     // CHECK-NOT: fptoui double {{.*}} to i32\n     // CHECK-NOT: select i1 {{.*}}, i32 {{.*}}, i32 {{.*}}\n-    // CHECK: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: {{.*}} call {{.*}} @llvm.fptoui.sat.i32.f64{{.*}}\n     a as _\n }\n \n@@ -61,7 +62,7 @@ pub fn cast_f64_u32(a: f64) -> u32 {\n pub fn cast_f32_u64(a: f32) -> u64 {\n     // CHECK-NOT: fptoui float {{.*}} to i64\n     // CHECK-NOT: select i1 {{.*}}, i64 {{.*}}, i64 {{.*}}\n-    // CHECK: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: {{.*}} call {{.*}} @llvm.fptoui.sat.i64.f32{{.*}}\n     a as _\n }\n \n@@ -70,16 +71,16 @@ pub fn cast_f32_u64(a: f32) -> u64 {\n pub fn cast_f32_u32(a: f32) -> u32 {\n     // CHECK-NOT: fptoui float {{.*}} to i32\n     // CHECK-NOT: select i1 {{.*}}, i32 {{.*}}, i32 {{.*}}\n-    // CHECK: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n+    // CHECK: {{.*}} call {{.*}} @llvm.fptoui.sat.i32.f32{{.*}}\n     a as _\n }\n \n // CHECK-LABEL: @cast_f32_u8\n #[no_mangle]\n pub fn cast_f32_u8(a: f32) -> u8 {\n-    // CHECK-NOT: {{.*}} call {{.*}} @llvm.wasm.trunc.{{.*}}\n-    // CHECK: fptoui float {{.*}} to i8\n-    // CHECK-NEXT: select i1 {{.*}}, i8 {{.*}}, i8 {{.*}}\n+    // CHECK-NOT: fptoui float {{.*}} to i8\n+    // CHECK-NOT: select i1 {{.*}}, i8 {{.*}}, i8 {{.*}}\n+    // CHECK: {{.*}} call {{.*}} @llvm.fptoui.sat.i8.f32{{.*}}\n     a as _\n }\n "}]}