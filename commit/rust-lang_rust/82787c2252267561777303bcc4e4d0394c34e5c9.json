{"sha": "82787c2252267561777303bcc4e4d0394c34e5c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNzg3YzIyNTIyNjc1NjE3NzczMDNiY2M0ZTRkMDM5NGMzNGU1Yzk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-26T08:31:58Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-30T14:36:21Z"}, "message": "Convert to use `Rc<TraitRef>` in object types (finally!).", "tree": {"sha": "835d7dc142041e2f3b85afe01a01b8ccf5c4a092", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/835d7dc142041e2f3b85afe01a01b8ccf5c4a092"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82787c2252267561777303bcc4e4d0394c34e5c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82787c2252267561777303bcc4e4d0394c34e5c9", "html_url": "https://github.com/rust-lang/rust/commit/82787c2252267561777303bcc4e4d0394c34e5c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82787c2252267561777303bcc4e4d0394c34e5c9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4404592f3631233c2f160c3f9a315764a4fcfba9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4404592f3631233c2f160c3f9a315764a4fcfba9", "html_url": "https://github.com/rust-lang/rust/commit/4404592f3631233c2f160c3f9a315764a4fcfba9"}], "stats": {"total": 122, "additions": 43, "deletions": 79}, "files": [{"sha": "c189aed05abf14e60295138e1c649dd165836ad7", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/82787c2252267561777303bcc4e4d0394c34e5c9/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82787c2252267561777303bcc4e4d0394c34e5c9/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=82787c2252267561777303bcc4e4d0394c34e5c9", "patch": "@@ -245,13 +245,13 @@ pub fn item_type<'tcx>(_item_id: ast::DefId, item: rbml::Doc,\n }\n \n fn doc_trait_ref<'tcx>(doc: rbml::Doc, tcx: &ty::ctxt<'tcx>, cdata: Cmd)\n-                       -> ty::TraitRef<'tcx> {\n+                       -> Rc<ty::TraitRef<'tcx>> {\n     parse_trait_ref_data(doc.data, cdata.cnum, doc.start, tcx,\n                          |_, did| translate_def_id(cdata, did))\n }\n \n fn item_trait_ref<'tcx>(doc: rbml::Doc, tcx: &ty::ctxt<'tcx>, cdata: Cmd)\n-                        -> ty::TraitRef<'tcx> {\n+                        -> Rc<ty::TraitRef<'tcx>> {\n     let tp = reader::get_doc(doc, tag_item_trait_ref);\n     doc_trait_ref(tp, tcx, cdata)\n }\n@@ -394,7 +394,7 @@ pub fn get_trait_def<'tcx>(cdata: Cmd,\n         unsafety: unsafety,\n         generics: generics,\n         bounds: bounds,\n-        trait_ref: Rc::new(item_trait_ref(item_doc, tcx, cdata)),\n+        trait_ref: item_trait_ref(item_doc, tcx, cdata),\n         associated_type_names: associated_type_names,\n     }\n }\n@@ -441,7 +441,7 @@ pub fn get_impl_trait<'tcx>(cdata: Cmd,\n {\n     let item_doc = lookup_item(id, cdata.data());\n     reader::maybe_get_doc(item_doc, tag_item_trait_ref).map(|tp| {\n-        Rc::new(doc_trait_ref(tp, tcx, cdata))\n+        doc_trait_ref(tp, tcx, cdata)\n     })\n }\n \n@@ -937,7 +937,7 @@ pub fn get_supertraits<'tcx>(cdata: Cmd, id: ast::NodeId, tcx: &ty::ctxt<'tcx>)\n         // FIXME(#8559): The builtin bounds shouldn't be encoded in the first place.\n         let trait_ref = doc_trait_ref(trait_doc, tcx, cdata);\n         if tcx.lang_items.to_builtin_kind(trait_ref.def_id).is_none() {\n-            results.push(Rc::new(trait_ref));\n+            results.push(trait_ref);\n         }\n         true\n     });"}, {"sha": "2a4d5f36a17c9532c06d715876a1780b944c3536", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/82787c2252267561777303bcc4e4d0394c34e5c9/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82787c2252267561777303bcc4e4d0394c34e5c9/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=82787c2252267561777303bcc4e4d0394c34e5c9", "patch": "@@ -180,7 +180,7 @@ pub fn parse_bare_fn_ty_data<'tcx>(data: &[u8], crate_num: ast::CrateNum, pos: u\n \n pub fn parse_trait_ref_data<'tcx>(data: &[u8], crate_num: ast::CrateNum, pos: uint,\n                                   tcx: &ty::ctxt<'tcx>, conv: conv_did)\n-                                  -> ty::TraitRef<'tcx> {\n+                                  -> Rc<ty::TraitRef<'tcx>> {\n     debug!(\"parse_trait_ref_data {}\", data_log_string(data, pos));\n     let mut st = parse_state_from_data(data, crate_num, pos, tcx);\n     parse_trait_ref(&mut st, conv)\n@@ -377,10 +377,10 @@ fn parse_str(st: &mut PState, term: char) -> String {\n }\n \n fn parse_trait_ref<'a, 'tcx>(st: &mut PState<'a, 'tcx>, conv: conv_did)\n-                             -> ty::TraitRef<'tcx> {\n+                             -> Rc<ty::TraitRef<'tcx>> {\n     let def = parse_def(st, NominalType, |x,y| conv(x,y));\n-    let substs = parse_substs(st, |x,y| conv(x,y));\n-    ty::TraitRef {def_id: def, substs: st.tcx.mk_substs(substs)}\n+    let substs = st.tcx.mk_substs(parse_substs(st, |x,y| conv(x,y)));\n+    Rc::new(ty::TraitRef {def_id: def, substs: substs})\n }\n \n fn parse_ty<'a, 'tcx>(st: &mut PState<'a, 'tcx>, conv: conv_did) -> Ty<'tcx> {\n@@ -689,7 +689,7 @@ pub fn parse_predicate<'a,'tcx>(st: &mut PState<'a, 'tcx>,\n                                 -> ty::Predicate<'tcx>\n {\n     match next(st) {\n-        't' => ty::Binder(Rc::new(parse_trait_ref(st, conv))).as_predicate(),\n+        't' => ty::Binder(parse_trait_ref(st, conv)).as_predicate(),\n         'e' => ty::Binder(ty::EquatePredicate(parse_ty(st, |x,y| conv(x,y)),\n                                               parse_ty(st, |x,y| conv(x,y)))).as_predicate(),\n         'r' => ty::Binder(ty::OutlivesPredicate(parse_region(st, |x,y| conv(x,y)),\n@@ -708,7 +708,7 @@ fn parse_projection_predicate<'a,'tcx>(\n {\n     ty::ProjectionPredicate {\n         projection_ty: ty::ProjectionTy {\n-            trait_ref: Rc::new(parse_trait_ref(st, |x,y| conv(x,y))),\n+            trait_ref: parse_trait_ref(st, |x,y| conv(x,y)),\n             item_name: token::str_to_ident(parse_str(st, '|').as_slice()).name,\n         },\n         ty: parse_ty(st, |x,y| conv(x,y)),\n@@ -795,7 +795,7 @@ fn parse_bounds<'a, 'tcx>(st: &mut PState<'a, 'tcx>, conv: conv_did)\n             }\n             'I' => {\n                 param_bounds.trait_bounds.push(\n-                    ty::Binder(Rc::new(parse_trait_ref(st, |x,y| conv(x,y)))));\n+                    ty::Binder(parse_trait_ref(st, |x,y| conv(x,y))));\n             }\n             'P' => {\n                 param_bounds.projection_bounds.push("}, {"sha": "015724d38eee6d6f670ce993106c896debd99fe8", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82787c2252267561777303bcc4e4d0394c34e5c9/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82787c2252267561777303bcc4e4d0394c34e5c9/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=82787c2252267561777303bcc4e4d0394c34e5c9", "patch": "@@ -91,7 +91,7 @@ pub fn enc_ty<'a, 'tcx>(w: &mut SeekableMemWriter, cx: &ctxt<'a, 'tcx>, t: Ty<'t\n         ty::ty_trait(box ty::TyTrait { ref principal,\n                                        ref bounds }) => {\n             mywrite!(w, \"x[\");\n-            enc_trait_ref(w, cx, &principal.0);\n+            enc_trait_ref(w, cx, &*principal.0);\n             enc_existential_bounds(w, cx, bounds);\n             mywrite!(w, \"]\");\n         }\n@@ -151,7 +151,7 @@ pub fn enc_ty<'a, 'tcx>(w: &mut SeekableMemWriter, cx: &ctxt<'a, 'tcx>, t: Ty<'t\n         }\n         ty::ty_projection(ref data) => {\n             mywrite!(w, \"P[\");\n-            enc_trait_ref(w, cx, &data.trait_ref);\n+            enc_trait_ref(w, cx, &*data.trait_ref);\n             mywrite!(w, \"{}]\", token::get_name(data.item_name));\n         }\n         ty::ty_err => {"}, {"sha": "4dee3ee471365bc8c40e1283ab8a4fa4b162ab85", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82787c2252267561777303bcc4e4d0394c34e5c9/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82787c2252267561777303bcc4e4d0394c34e5c9/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=82787c2252267561777303bcc4e4d0394c34e5c9", "patch": "@@ -1120,7 +1120,7 @@ impl<'a, 'tcx> rbml_writer_helpers<'tcx> for Encoder<'a> {\n                     this.emit_enum_variant(\"UnsizeVtable\", 2, 4, |this| {\n                         this.emit_enum_variant_arg(0, |this| {\n                             try!(this.emit_struct_field(\"principal\", 0, |this| {\n-                                Ok(this.emit_trait_ref(ecx, &principal.0))\n+                                Ok(this.emit_trait_ref(ecx, &*principal.0))\n                             }));\n                             this.emit_struct_field(\"bounds\", 1, |this| {\n                                 Ok(this.emit_existential_bounds(ecx, b))\n@@ -1546,28 +1546,28 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n \n     fn read_trait_ref<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)\n                               -> Rc<ty::TraitRef<'tcx>> {\n-        Rc::new(self.read_opaque(|this, doc| {\n+        self.read_opaque(|this, doc| {\n             let ty = tydecode::parse_trait_ref_data(\n                 doc.data,\n                 dcx.cdata.cnum,\n                 doc.start,\n                 dcx.tcx,\n                 |s, a| this.convert_def_id(dcx, s, a));\n             Ok(ty)\n-        }).unwrap())\n+        }).unwrap()\n     }\n \n     fn read_poly_trait_ref<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)\n                                    -> ty::PolyTraitRef<'tcx> {\n-        ty::Binder(Rc::new(self.read_opaque(|this, doc| {\n+        ty::Binder(self.read_opaque(|this, doc| {\n             let ty = tydecode::parse_trait_ref_data(\n                 doc.data,\n                 dcx.cdata.cnum,\n                 doc.start,\n                 dcx.tcx,\n                 |s, a| this.convert_def_id(dcx, s, a));\n             Ok(ty)\n-        }).unwrap()))\n+        }).unwrap())\n     }\n \n     fn read_type_param_def<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)\n@@ -1786,7 +1786,7 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n                                 Ok(this.read_poly_trait_ref(dcx))\n                             }));\n                             Ok(ty::TyTrait {\n-                                principal: ty::Binder((*principal.0).clone()),\n+                                principal: principal,\n                                 bounds: try!(this.read_struct_field(\"bounds\", 1, |this| {\n                                     Ok(this.read_existential_bounds(dcx))\n                                 })),"}, {"sha": "4114394041dc36c6aaabca4445ad1849aa9bcc78", "filename": "src/librustc/middle/infer/combine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82787c2252267561777303bcc4e4d0394c34e5c9/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82787c2252267561777303bcc4e4d0394c34e5c9/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs?ref=82787c2252267561777303bcc4e4d0394c34e5c9", "patch": "@@ -596,8 +596,8 @@ pub fn super_tys<'tcx, C: Combine<'tcx>>(this: &C,\n \n       (&ty::ty_projection(ref a_data), &ty::ty_projection(ref b_data)) => {\n           if a_data.item_name == b_data.item_name {\n-              let trait_ref = try!(this.trait_refs(&a_data.trait_ref, &b_data.trait_ref));\n-              Ok(ty::mk_projection(tcx, trait_ref, a_data.item_name))\n+              let trait_ref = try!(this.trait_refs(&*a_data.trait_ref, &*b_data.trait_ref));\n+              Ok(ty::mk_projection(tcx, Rc::new(trait_ref), a_data.item_name))\n           } else {\n               Err(ty::terr_sorts(expected_found(this, a, b)))\n           }"}, {"sha": "9cd1725e4df88b9e22b234ddfa8410f320f96220", "filename": "src/librustc/middle/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82787c2252267561777303bcc4e4d0394c34e5c9/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82787c2252267561777303bcc4e4d0394c34e5c9/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs?ref=82787c2252267561777303bcc4e4d0394c34e5c9", "patch": "@@ -422,8 +422,8 @@ fn process_predicate<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,\n                         // somewhat constrained, and we cannot verify\n                         // that constraint, so yield an error.\n                         let ty_projection = ty::mk_projection(tcx,\n-                                                             (*trait_ref.0).clone(),\n-                                                             data.0.projection_ty.item_name);\n+                                                              trait_ref.0.clone(),\n+                                                              data.0.projection_ty.item_name);\n \n                         debug!(\"process_predicate: falling back to projection {}\",\n                                ty_projection.repr(selcx.tcx()));"}, {"sha": "6b2ac04f5ce2ad982804a89f538499812ef029d9", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 8, "deletions": 33, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/82787c2252267561777303bcc4e4d0394c34e5c9/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82787c2252267561777303bcc4e4d0394c34e5c9/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=82787c2252267561777303bcc4e4d0394c34e5c9", "patch": "@@ -1352,13 +1352,13 @@ pub enum sty<'tcx> {\n \n     ty_closure(Box<ClosureTy<'tcx>>),\n     ty_trait(Box<TyTrait<'tcx>>),\n-    ty_struct(DefId, &'tcx Substs<'tcx>),\n+    ty_struct(DefId, Substs<'tcx>),\n \n     ty_unboxed_closure(DefId, &'tcx Region, &'tcx Substs<'tcx>),\n \n     ty_tup(Vec<Ty<'tcx>>),\n \n-    ty_projection(Box<TyProjection<'tcx>>),\n+    ty_projection(ProjectionTy<'tcx>),\n     ty_param(ParamTy), // type parameter\n \n     ty_open(Ty<'tcx>), // A deref'ed fat pointer, i.e., a dynamically sized value\n@@ -1375,8 +1375,7 @@ pub enum sty<'tcx> {\n \n #[deriving(Clone, PartialEq, Eq, Hash, Show)]\n pub struct TyTrait<'tcx> {\n-    // Principal trait reference.\n-    pub principal: ty::Binder<TraitRef<'tcx>>,\n+    pub principal: ty::PolyTraitRef<'tcx>,\n     pub bounds: ExistentialBounds\n }\n \n@@ -1448,12 +1447,6 @@ impl<'tcx> PolyTraitRef<'tcx> {\n         // Note that we preserve binding levels\n         Binder(TraitPredicate { trait_ref: self.0.clone() })\n     }\n-\n-    pub fn remove_rc(&self) -> ty::Binder<ty::TraitRef<'tcx>> {\n-        // Annoyingly, we can't easily put a `Rc` into a `sty` structure,\n-        // and hence we have to remove the rc to put this into a `TyTrait`.\n-        ty::Binder((*self.0).clone())\n-    }\n }\n \n /// Binder is a binder for higher-ranked lifetimes. It is part of the\n@@ -1833,15 +1826,6 @@ pub struct ProjectionTy<'tcx> {\n     pub item_name: ast::Name,\n }\n \n-// Annoying: a version of `ProjectionTy` that avoids the `Rc`, because\n-// it is difficult to place an `Rc` in the `sty` struct. Eventually\n-// these two types ought to be unified.\n-#[deriving(Clone, PartialEq, Eq, Hash, Show)]\n-pub struct TyProjection<'tcx> {\n-    pub trait_ref: ty::TraitRef<'tcx>,\n-    pub item_name: ast::Name,\n-}\n-\n pub trait ToPolyTraitRef<'tcx> {\n     fn to_poly_trait_ref(&self) -> PolyTraitRef<'tcx>;\n }\n@@ -2690,10 +2674,9 @@ pub fn mk_ctor_fn<'tcx>(cx: &ctxt<'tcx>,\n }\n \n pub fn mk_trait<'tcx>(cx: &ctxt<'tcx>,\n-                      principal: ty::Binder<ty::TraitRef<'tcx>>,\n+                      principal: ty::PolyTraitRef<'tcx>,\n                       bounds: ExistentialBounds)\n                       -> Ty<'tcx> {\n-    // take a copy of substs so that we own the vectors inside\n     let inner = box TyTrait {\n         principal: principal,\n         bounds: bounds\n@@ -2702,11 +2685,11 @@ pub fn mk_trait<'tcx>(cx: &ctxt<'tcx>,\n }\n \n pub fn mk_projection<'tcx>(cx: &ctxt<'tcx>,\n-                           trait_ref: ty::TraitRef<'tcx>,\n+                           trait_ref: Rc<ty::TraitRef<'tcx>>,\n                            item_name: ast::Name)\n                            -> Ty<'tcx> {\n     // take a copy of substs so that we own the vectors inside\n-    let inner = box TyProjection { trait_ref: trait_ref, item_name: item_name };\n+    let inner = ProjectionTy { trait_ref: trait_ref, item_name: item_name };\n     mk_t(cx, ty_projection(inner))\n }\n \n@@ -2776,7 +2759,7 @@ pub fn maybe_walk_ty<'tcx>(ty: Ty<'tcx>, f: |Ty<'tcx>| -> bool) {\n                 maybe_walk_ty(*subty, |x| f(x));\n             }\n         }\n-        ty_projection(box TyProjection { ref trait_ref, .. }) => {\n+        ty_projection(ProjectionTy { ref trait_ref, .. }) => {\n             for subty in trait_ref.substs.types.iter() {\n                 maybe_walk_ty(*subty, |x| f(x));\n             }\n@@ -5783,7 +5766,7 @@ pub fn each_bound_trait_and_supertraits<'tcx, F>(tcx: &ctxt<'tcx>,\n \n pub fn object_region_bounds<'tcx>(\n     tcx: &ctxt<'tcx>,\n-    opt_principal: Option<&Binder<TraitRef<'tcx>>>, // None for closures\n+    opt_principal: Option<&PolyTraitRef<'tcx>>, // None for closures\n     others: BuiltinBounds)\n     -> Vec<ty::Region>\n {\n@@ -6913,14 +6896,6 @@ impl<'tcx> Repr<'tcx> for ty::ProjectionPredicate<'tcx> {\n     }\n }\n \n-impl<'tcx> Repr<'tcx> for ty::TyProjection<'tcx> {\n-    fn repr(&self, tcx: &ctxt<'tcx>) -> String {\n-        format!(\"TyProjection({}, {})\",\n-                self.trait_ref.repr(tcx),\n-                self.item_name.repr(tcx))\n-    }\n-}\n-\n pub trait HasProjectionTypes {\n     fn has_projection_types(&self) -> bool;\n }"}, {"sha": "4ef597d21081e2a0fd0c246a9f45e3e5e4e81ed1", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/82787c2252267561777303bcc4e4d0394c34e5c9/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82787c2252267561777303bcc4e4d0394c34e5c9/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=82787c2252267561777303bcc4e4d0394c34e5c9", "patch": "@@ -436,15 +436,6 @@ impl<'tcx> TypeFoldable<'tcx> for ty::ProjectionTy<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ty::TyProjection<'tcx> {\n-    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::TyProjection<'tcx> {\n-        ty::TyProjection {\n-            trait_ref: self.trait_ref.fold_with(folder),\n-            item_name: self.item_name,\n-        }\n-    }\n-}\n-\n impl<'tcx> TypeFoldable<'tcx> for ty::GenericBounds<'tcx> {\n     fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> ty::GenericBounds<'tcx> {\n         ty::GenericBounds {"}, {"sha": "26959dfd1d524c1e68876dcb0581da8a30df84be", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/82787c2252267561777303bcc4e4d0394c34e5c9/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82787c2252267561777303bcc4e4d0394c34e5c9/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=82787c2252267561777303bcc4e4d0394c34e5c9", "patch": "@@ -881,15 +881,15 @@ fn ast_ty_to_trait_ref<'tcx,AC,RS>(this: &AC,\n fn trait_ref_to_object_type<'tcx,AC,RS>(this: &AC,\n                                         rscope: &RS,\n                                         span: Span,\n-                                        trait_ref: ty::Binder<ty::TraitRef<'tcx>>,\n+                                        trait_ref: ty::PolyTraitRef<'tcx>,\n                                         bounds: &[ast::TyParamBound])\n                                         -> Ty<'tcx>\n     where AC : AstConv<'tcx>, RS : RegionScope\n {\n     let existential_bounds = conv_existential_bounds(this,\n                                                      rscope,\n                                                      span,\n-                                                     Some(&trait_ref),\n+                                                     Some(trait_ref.clone()),\n                                                      bounds);\n \n     let result = ty::mk_trait(this.tcx(), trait_ref, existential_bounds);\n@@ -1020,7 +1020,6 @@ pub fn ast_ty_to_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n             ast::TyObjectSum(ref ty, ref bounds) => {\n                 match ast_ty_to_trait_ref(this, rscope, &**ty, bounds[]) {\n                     Ok(trait_ref) => {\n-                        let trait_ref = trait_ref.remove_rc();\n                         trait_ref_to_object_type(this, rscope, ast_ty.span,\n                                                  trait_ref, bounds[])\n                     }\n@@ -1100,7 +1099,6 @@ pub fn ast_ty_to_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n                                                               None,\n                                                               path,\n                                                               Some(&mut projections));\n-                        let trait_ref = (*trait_ref).clone();\n                         let trait_ref = ty::Binder(trait_ref);\n                         trait_ref_to_object_type(this, rscope, path.span, trait_ref, &[])\n                     }\n@@ -1501,7 +1499,7 @@ pub fn conv_existential_bounds<'tcx, AC: AstConv<'tcx>, RS:RegionScope>(\n     this: &AC,\n     rscope: &RS,\n     span: Span,\n-    principal_trait_ref: Option<&ty::Binder<ty::TraitRef<'tcx>>>, // None for boxed closures\n+    principal_trait_ref: Option<ty::PolyTraitRef<'tcx>>, // None for boxed closures\n     ast_bounds: &[ast::TyParamBound])\n     -> ty::ExistentialBounds\n {\n@@ -1530,7 +1528,7 @@ fn conv_ty_poly_trait_ref<'tcx, AC, RS>(\n                                                  trait_bound,\n                                                  None,\n                                                  &mut projections);\n-            Some(ptr.remove_rc())\n+            Some(ptr)\n         }\n         None => {\n             this.tcx().sess.span_err(\n@@ -1546,7 +1544,7 @@ fn conv_ty_poly_trait_ref<'tcx, AC, RS>(\n         conv_existential_bounds_from_partitioned_bounds(this,\n                                                         rscope,\n                                                         span,\n-                                                        main_trait_bound.as_ref(),\n+                                                        main_trait_bound.clone(),\n                                                         partitioned_bounds);\n \n     match main_trait_bound {\n@@ -1559,7 +1557,7 @@ pub fn conv_existential_bounds_from_partitioned_bounds<'tcx, AC, RS>(\n     this: &AC,\n     rscope: &RS,\n     span: Span,\n-    principal_trait_ref: Option<&ty::Binder<ty::TraitRef<'tcx>>>, // None for boxed closures\n+    principal_trait_ref: Option<ty::PolyTraitRef<'tcx>>, // None for boxed closures\n     partitioned_bounds: PartitionedBounds)\n     -> ty::ExistentialBounds\n     where AC: AstConv<'tcx>, RS:RegionScope\n@@ -1597,7 +1595,7 @@ pub fn conv_existential_bounds_from_partitioned_bounds<'tcx, AC, RS>(\n fn compute_opt_region_bound<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                   span: Span,\n                                   explicit_region_bounds: &[&ast::Lifetime],\n-                                  principal_trait_ref: Option<&ty::Binder<ty::TraitRef<'tcx>>>,\n+                                  principal_trait_ref: Option<ty::PolyTraitRef<'tcx>>,\n                                   builtin_bounds: ty::BuiltinBounds)\n                                   -> Option<ty::Region>\n {\n@@ -1622,7 +1620,7 @@ fn compute_opt_region_bound<'tcx>(tcx: &ty::ctxt<'tcx>,\n     // No explicit region bound specified. Therefore, examine trait\n     // bounds and see if we can derive region bounds from those.\n     let derived_region_bounds =\n-        ty::object_region_bounds(tcx, principal_trait_ref, builtin_bounds);\n+        ty::object_region_bounds(tcx, principal_trait_ref.as_ref(), builtin_bounds);\n \n     // If there are no derived region bounds, then report back that we\n     // can find no region bound.\n@@ -1657,7 +1655,7 @@ fn compute_region_bound<'tcx, AC: AstConv<'tcx>, RS:RegionScope>(\n     rscope: &RS,\n     span: Span,\n     region_bounds: &[&ast::Lifetime],\n-    principal_trait_ref: Option<&ty::Binder<ty::TraitRef<'tcx>>>, // None for closures\n+    principal_trait_ref: Option<ty::PolyTraitRef<'tcx>>, // None for closures\n     builtin_bounds: ty::BuiltinBounds)\n     -> ty::Region\n {"}, {"sha": "fbc6d49d6e9a87e65579c2ba0a93f0ac83cf0727", "filename": "src/librustc_typeck/check/assoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82787c2252267561777303bcc4e4d0394c34e5c9/src%2Flibrustc_typeck%2Fcheck%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82787c2252267561777303bcc4e4d0394c34e5c9/src%2Flibrustc_typeck%2Fcheck%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fassoc.rs?ref=82787c2252267561777303bcc4e4d0394c34e5c9", "patch": "@@ -58,7 +58,7 @@ impl<'a,'tcx> TypeFolder<'tcx> for AssociatedTypeNormalizer<'a,'tcx> {\n                         self.span,\n                         self.body_id,\n                         ObligationCauseCode::MiscObligation);\n-                let trait_ref = Rc::new(data.trait_ref.clone());\n+                let trait_ref = data.trait_ref.clone();\n                 self.fulfillment_cx\n                     .normalize_associated_type(self.infcx,\n                                                trait_ref,"}, {"sha": "dfe54674d63ec403aa7f68bc56b14af7129c2e66", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82787c2252267561777303bcc4e4d0394c34e5c9/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82787c2252267561777303bcc4e4d0394c34e5c9/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=82787c2252267561777303bcc4e4d0394c34e5c9", "patch": "@@ -177,7 +177,7 @@ impl<'a, 'tcx> AstConv<'tcx> for CrateCtxt<'a, 'tcx> {\n                     item_name: ast::Name)\n                     -> Ty<'tcx>\n     {\n-        ty::mk_projection(self.tcx, (*trait_ref).clone(), item_name)\n+        ty::mk_projection(self.tcx, trait_ref, item_name)\n     }\n }\n "}]}