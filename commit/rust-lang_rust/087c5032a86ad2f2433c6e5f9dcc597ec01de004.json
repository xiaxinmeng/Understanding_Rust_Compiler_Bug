{"sha": "087c5032a86ad2f2433c6e5f9dcc597ec01de004", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4N2M1MDMyYTg2YWQyZjI0MzNjNmU1ZjlkY2M1OTdlYzAxZGUwMDQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-02T22:37:15Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-02T22:38:18Z"}, "message": "core: deny(vecs_implicity_copyable)", "tree": {"sha": "c397c9d080854d4be94730f2e9a7ce31ff067dc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c397c9d080854d4be94730f2e9a7ce31ff067dc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/087c5032a86ad2f2433c6e5f9dcc597ec01de004", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/087c5032a86ad2f2433c6e5f9dcc597ec01de004", "html_url": "https://github.com/rust-lang/rust/commit/087c5032a86ad2f2433c6e5f9dcc597ec01de004", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/087c5032a86ad2f2433c6e5f9dcc597ec01de004/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fb1a4e2d1606f444d1ac40654b3ad11b081a07c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fb1a4e2d1606f444d1ac40654b3ad11b081a07c", "html_url": "https://github.com/rust-lang/rust/commit/7fb1a4e2d1606f444d1ac40654b3ad11b081a07c"}], "stats": {"total": 64, "additions": 37, "deletions": 27}, "files": [{"sha": "0dcba1d202e0a68f328223d81624e459f3b555b6", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/087c5032a86ad2f2433c6e5f9dcc597ec01de004/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/087c5032a86ad2f2433c6e5f9dcc597ec01de004/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=087c5032a86ad2f2433c6e5f9dcc597ec01de004", "patch": "@@ -31,7 +31,7 @@\n // Don't link to core. We are core.\n #[no_core];\n \n-#[allow(vecs_implicitly_copyable)];\n+#[deny(vecs_implicitly_copyable)];\n \n export int, i8, i16, i32, i64;\n export uint, u8, u16, u32, u64;"}, {"sha": "8b92e7c183f372cd99cddf0e871e8e9566538339", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/087c5032a86ad2f2433c6e5f9dcc597ec01de004/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087c5032a86ad2f2433c6e5f9dcc597ec01de004/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=087c5032a86ad2f2433c6e5f9dcc597ec01de004", "patch": "@@ -86,7 +86,7 @@ mod ct {\n         let mut pieces: ~[piece] = ~[];\n         let lim = str::len(s);\n         let mut buf = ~\"\";\n-        fn flush_buf(buf: ~str, &pieces: ~[piece]) -> ~str {\n+        fn flush_buf(+buf: ~str, &pieces: ~[piece]) -> ~str {\n             if str::len(buf) > 0u {\n                 let piece = piece_string(buf);\n                 vec::push(pieces, piece);\n@@ -109,7 +109,7 @@ mod ct {\n                 } else {\n                     buf = flush_buf(buf, pieces);\n                     let rs = parse_conversion(s, i, lim, error);\n-                    vec::push(pieces, rs.piece);\n+                    vec::push(pieces, copy rs.piece);\n                     i = rs.next;\n                 }\n             } else { buf += curr; i += size; }\n@@ -148,7 +148,7 @@ mod ct {\n         let ty = parse_type(s, prec.next, lim, error);\n         return {piece:\n                  piece_conv({param: parm.param,\n-                             flags: flags.flags,\n+                             flags: copy flags.flags,\n                              width: width.count,\n                              precision: prec.count,\n                              ty: ty.ty}),\n@@ -177,12 +177,12 @@ mod ct {\n         fn more_(f: flag, s: ~str, i: uint, lim: uint) ->\n            {flags: ~[flag], next: uint} {\n             let next = parse_flags(s, i + 1u, lim);\n-            let rest = next.flags;\n+            let rest = copy next.flags;\n             let j = next.next;\n             let curr: ~[flag] = ~[f];\n             return {flags: vec::append(curr, rest), next: j};\n         }\n-        let more = |x| more_(x, s, i, lim);\n+        let more = |x, copy s| more_(x, copy s, i, lim);\n         let f = s[i];\n         return if f == '-' as u8 {\n                 more(flag_left_justify)\n@@ -404,14 +404,14 @@ mod rt {\n \n     fn pad(cv: conv, &s: ~str, mode: pad_mode) -> ~str {\n         let uwidth : uint = match cv.width {\n-          count_implied => return s,\n+          count_implied => return copy s,\n           count_is(width) => {\n               // FIXME: width should probably be uint (see Issue #1996)\n               width as uint\n           }\n         };\n         let strlen = str::char_len(s);\n-        if uwidth <= strlen { return s; }\n+        if uwidth <= strlen { return copy s; }\n         let mut padchar = ' ';\n         let diff = uwidth - strlen;\n         if have_flag(cv.flags, flag_left_justify) {"}, {"sha": "757a64d0d79746324c8d76e68a5883749a22390a", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/087c5032a86ad2f2433c6e5f9dcc597ec01de004/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087c5032a86ad2f2433c6e5f9dcc597ec01de004/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=087c5032a86ad2f2433c6e5f9dcc597ec01de004", "patch": "@@ -137,7 +137,7 @@ impl T: iter::TimesIx {\n  * * buf - A byte buffer\n  * * radix - The base of the number\n  */\n-fn parse_buf(buf: ~[u8], radix: uint) -> Option<T> {\n+fn parse_buf(buf: &[u8], radix: uint) -> Option<T> {\n     if vec::len(buf) == 0u { return None; }\n     let mut i = vec::len(buf) - 1u;\n     let mut start = 0u;"}, {"sha": "f5c4106c060ee9dd4ea918cbc3a4265a8b51aa21", "filename": "src/libcore/io.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/087c5032a86ad2f2433c6e5f9dcc597ec01de004/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087c5032a86ad2f2433c6e5f9dcc597ec01de004/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=087c5032a86ad2f2433c6e5f9dcc597ec01de004", "patch": "@@ -633,6 +633,7 @@ impl<T: Writer> T : WriterUtil {\n     fn write_u8(n: u8) { self.write(&[n]) }\n }\n \n+#[allow(non_implicitly_copyable_typarams)]\n fn file_writer(path: &Path, flags: ~[FileFlag]) -> Result<Writer, ~str> {\n     result::chain(mk_file_writer(path, flags), |w| result::Ok(w))\n }\n@@ -726,6 +727,7 @@ fn seek_in_buf(offset: int, pos: uint, len: uint, whence: SeekStyle) ->\n     return bpos as uint;\n }\n \n+#[allow(non_implicitly_copyable_typarams)]\n fn read_whole_file_str(file: &Path) -> Result<~str, ~str> {\n     result::chain(read_whole_file(file), |bytes| {\n         if str::is_utf8(bytes) {\n@@ -738,6 +740,7 @@ fn read_whole_file_str(file: &Path) -> Result<~str, ~str> {\n \n // FIXME (#2004): implement this in a low-level way. Going through the\n // abstractions is pointless.\n+#[allow(non_implicitly_copyable_typarams)]\n fn read_whole_file(file: &Path) -> Result<~[u8], ~str> {\n     result::chain(file_reader(file), |rdr| {\n         result::Ok(rdr.read_whole_stream())"}, {"sha": "e21c9b3c1bb4d0d056f1a9e6cbbee37a004e09f0", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/087c5032a86ad2f2433c6e5f9dcc597ec01de004/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087c5032a86ad2f2433c6e5f9dcc597ec01de004/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=087c5032a86ad2f2433c6e5f9dcc597ec01de004", "patch": "@@ -121,7 +121,7 @@ pure fn foldl<A,B,IA:BaseIter<A>>(self: IA, +b0: B, blk: fn(B, A) -> B) -> B {\n }\n \n pure fn to_vec<A:copy,IA:BaseIter<A>>(self: IA) -> ~[A] {\n-    foldl::<A,~[A],IA>(self, ~[], |r, a| vec::append(r, ~[a]))\n+    foldl::<A,~[A],IA>(self, ~[], |r, a| vec::append(copy r, ~[a]))\n }\n \n pure fn contains<A:Eq,IA:BaseIter<A>>(self: IA, x: A) -> bool {"}, {"sha": "2c5ad29116763e26cd70d92d58628c34a9aa3228", "filename": "src/libcore/os.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/087c5032a86ad2f2433c6e5f9dcc597ec01de004/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087c5032a86ad2f2433c6e5f9dcc597ec01de004/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=087c5032a86ad2f2433c6e5f9dcc597ec01de004", "patch": "@@ -213,7 +213,7 @@ mod global_env {\n             for vec::each(rustrt::rust_env_pairs()) |p| {\n                 let vs = str::splitn_char(p, '=', 1u);\n                 assert vec::len(vs) == 2u;\n-                vec::push(pairs, (vs[0], vs[1]));\n+                vec::push(pairs, (copy vs[0], copy vs[1]));\n             }\n             return pairs;\n         }\n@@ -504,12 +504,14 @@ fn tmpdir() -> Path {\n     }\n \n     #[cfg(unix)]\n+    #[allow(non_implicitly_copyable_typarams)]\n     fn lookup() -> Path {\n         option::get_default(getenv_nonempty(\"TMPDIR\"),\n                             Path(\"/tmp\"))\n     }\n \n     #[cfg(windows)]\n+    #[allow(non_implicitly_copyable_typarams)]\n     fn lookup() -> Path {\n         option::get_default(\n                     option::or(getenv_nonempty(\"TMP\"),\n@@ -609,6 +611,7 @@ fn make_dir(p: &Path, mode: c_int) -> bool {\n }\n \n /// Lists the contents of a directory\n+#[allow(non_implicitly_copyable_typarams)]\n fn list_dir(p: &Path) -> ~[~str] {\n \n     #[cfg(unix)]"}, {"sha": "2151fc599e6cf459eeb9cc811746e4181493d709", "filename": "src/libcore/path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/087c5032a86ad2f2433c6e5f9dcc597ec01de004/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087c5032a86ad2f2433c6e5f9dcc597ec01de004/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=087c5032a86ad2f2433c6e5f9dcc597ec01de004", "patch": "@@ -200,7 +200,7 @@ impl PosixPath : GenericPath {\n     }\n \n     pure fn push(s: &str) -> PosixPath {\n-        let mut cs = self.components;\n+        let mut cs = copy self.components;\n         unchecked { vec::push(cs, move str::from_slice(s)); }\n         return PosixPath { components: move cs,\n                            ..self }\n@@ -389,7 +389,7 @@ impl WindowsPath : GenericPath {\n     }\n \n     pure fn push(s: &str) -> WindowsPath {\n-        let mut cs = self.components;\n+        let mut cs = copy self.components;\n         unchecked { vec::push(cs, move str::from_slice(s)); }\n         return WindowsPath { components: move cs,\n                              ..self }"}, {"sha": "9b9d5d81e0ee5eaa0e4de87cf1c1063dad74351c", "filename": "src/libcore/run.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/087c5032a86ad2f2433c6e5f9dcc597ec01de004/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087c5032a86ad2f2433c6e5f9dcc597ec01de004/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=087c5032a86ad2f2433c6e5f9dcc597ec01de004", "patch": "@@ -87,7 +87,7 @@ fn with_argv<T>(prog: &str, args: &[~str],\n     let mut argptrs = str::as_c_str(prog, |b| ~[b]);\n     let mut tmps = ~[];\n     for vec::each(args) |arg| {\n-        let t = @arg;\n+        let t = @copy arg;\n         vec::push(tmps, t);\n         vec::push_all(argptrs, str::as_c_str(*t, |b| ~[b]));\n     }\n@@ -106,7 +106,7 @@ fn with_envp<T>(env: &Option<~[(~str,~str)]>,\n         let mut ptrs = ~[];\n \n         for vec::each(es) |e| {\n-            let (k,v) = e;\n+            let (k,v) = copy e;\n             let t = @(fmt!(\"%s=%s\", k, v));\n             vec::push(tmps, t);\n             vec::push_all(ptrs, str::as_c_str(*t, |b| ~[b]));\n@@ -315,10 +315,10 @@ fn program_output(prog: &str, args: &[~str]) ->\n         let stream = comm::recv(p);\n         match stream {\n             (1, s) => {\n-                outs = s;\n+                outs = copy s;\n             }\n             (2, s) => {\n-                errs = s;\n+                errs = copy s;\n             }\n             (n, _) => {\n                 fail(fmt!(\"program_output received an unexpected file \\"}, {"sha": "861a603e1706d1949df6135bc7d8177272076697", "filename": "src/libcore/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/087c5032a86ad2f2433c6e5f9dcc597ec01de004/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087c5032a86ad2f2433c6e5f9dcc597ec01de004/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=087c5032a86ad2f2433c6e5f9dcc597ec01de004", "patch": "@@ -605,7 +605,7 @@ pure fn lines(s: &str) -> ~[~str] { split_char(s, '\\n') }\n pure fn lines_any(s: &str) -> ~[~str] {\n     vec::map(lines(s), |s| {\n         let l = len(s);\n-        let mut cp = s;\n+        let mut cp = copy s;\n         if l > 0u && s[l - 1u] == '\\r' as u8 {\n             unsafe { unsafe::set_len(cp, l - 1u); }\n         }\n@@ -2068,7 +2068,7 @@ impl ~str: UniqueStr {\n impl ~str: add<&str,~str> {\n     #[inline(always)]\n     pure fn add(rhs: &str) -> ~str {\n-        append(self, rhs)\n+        append(copy self, rhs)\n     }\n }\n "}, {"sha": "63e0f366c5365250f48425f75612ddd26616e913", "filename": "src/libcore/to_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/087c5032a86ad2f2433c6e5f9dcc597ec01de004/src%2Flibcore%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087c5032a86ad2f2433c6e5f9dcc597ec01de004/src%2Flibcore%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_str.rs?ref=087c5032a86ad2f2433c6e5f9dcc597ec01de004", "patch": "@@ -44,7 +44,7 @@ impl (): ToStr {\n     fn to_str() -> ~str { ~\"()\" }\n }\n impl ~str: ToStr {\n-    fn to_str() -> ~str { self }\n+    fn to_str() -> ~str { copy self }\n }\n impl &str: ToStr {\n     fn to_str() -> ~str { str::from_slice(self) }"}, {"sha": "d764f188be2d6bbbf735bf60479cb67da24431d9", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/087c5032a86ad2f2433c6e5f9dcc597ec01de004/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087c5032a86ad2f2433c6e5f9dcc597ec01de004/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=087c5032a86ad2f2433c6e5f9dcc597ec01de004", "patch": "@@ -55,12 +55,14 @@ impl<A: copy, B: copy> (&[A], &[B]): ExtendedTupleOps<A,B> {\n impl<A: copy, B: copy> (~[A], ~[B]): ExtendedTupleOps<A,B> {\n \n     fn zip() -> ~[(A, B)] {\n-        let (a, b) = self;\n+        // XXX: Bad copy\n+        let (a, b) = copy self;\n         vec::zip(a, b)\n     }\n \n     fn map<C>(f: fn(A, B) -> C) -> ~[C] {\n-        let (a, b) = self;\n+        // XXX: Bad copy\n+        let (a, b) = copy self;\n         vec::map2(a, b, f)\n     }\n }"}, {"sha": "0f99ec2a227e1932126ef183eb1eb938aed79823", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/087c5032a86ad2f2433c6e5f9dcc597ec01de004/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/087c5032a86ad2f2433c6e5f9dcc597ec01de004/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=087c5032a86ad2f2433c6e5f9dcc597ec01de004", "patch": "@@ -419,7 +419,7 @@ fn rsplit<T: copy>(v: &[T], f: fn(T) -> bool) -> ~[~[T]] {\n     if (ln == 0u) { return ~[] }\n \n     let mut end = ln;\n-    let mut result = ~[];\n+    let mut result = ~[mut ];\n     while end > 0u {\n         match rposition_between(v, 0u, end, f) {\n           None => break,\n@@ -430,7 +430,8 @@ fn rsplit<T: copy>(v: &[T], f: fn(T) -> bool) -> ~[~[T]] {\n         }\n     }\n     push(result, slice(v, 0u, end));\n-    reversed(result)\n+    reverse(result);\n+    return from_mut(move result);\n }\n \n /**\n@@ -443,7 +444,7 @@ fn rsplitn<T: copy>(v: &[T], n: uint, f: fn(T) -> bool) -> ~[~[T]] {\n \n     let mut end = ln;\n     let mut count = n;\n-    let mut result = ~[];\n+    let mut result = ~[mut ];\n     while end > 0u && count > 0u {\n         match rposition_between(v, 0u, end, f) {\n           None => break,\n@@ -456,7 +457,8 @@ fn rsplitn<T: copy>(v: &[T], n: uint, f: fn(T) -> bool) -> ~[~[T]] {\n         }\n     }\n     push(result, slice(v, 0u, end));\n-    reversed(result)\n+    reverse(result);\n+    return from_mut(result);\n }\n \n // Mutators\n@@ -1481,7 +1483,7 @@ impl<T: Ord> @[T]: Ord {\n impl<T: copy> ~[T]: add<&[const T],~[T]> {\n     #[inline(always)]\n     pure fn add(rhs: &[const T]) -> ~[T] {\n-        append(self, rhs)\n+        append(copy self, rhs)\n     }\n }\n "}]}