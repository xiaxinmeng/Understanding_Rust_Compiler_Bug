{"sha": "f5e0a31eaf9ddd7788e6261d49f4d18e8463a719", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ZTBhMzFlYWY5ZGRkNzc4OGU2MjYxZDQ5ZjRkMThlODQ2M2E3MTk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-24T15:05:12Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-24T15:05:12Z"}, "message": "Cleanup nameres", "tree": {"sha": "fcaa2b8feb899c16a49fcf87c709327653a3ec2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcaa2b8feb899c16a49fcf87c709327653a3ec2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5e0a31eaf9ddd7788e6261d49f4d18e8463a719", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5e0a31eaf9ddd7788e6261d49f4d18e8463a719", "html_url": "https://github.com/rust-lang/rust/commit/f5e0a31eaf9ddd7788e6261d49f4d18e8463a719", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5e0a31eaf9ddd7788e6261d49f4d18e8463a719/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "855a629b1436e7d3f2a9ae47d242d69d1fd7327e", "url": "https://api.github.com/repos/rust-lang/rust/commits/855a629b1436e7d3f2a9ae47d242d69d1fd7327e", "html_url": "https://github.com/rust-lang/rust/commit/855a629b1436e7d3f2a9ae47d242d69d1fd7327e"}], "stats": {"total": 54, "additions": 19, "deletions": 35}, "files": [{"sha": "9f06b147cf6287cd5efcfa4c55285845b48b20ed", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5e0a31eaf9ddd7788e6261d49f4d18e8463a719/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e0a31eaf9ddd7788e6261d49f4d18e8463a719/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=f5e0a31eaf9ddd7788e6261d49f4d18e8463a719", "patch": "@@ -62,7 +62,7 @@ impl Crate {\n     }\n \n     pub fn root_module(self, db: &impl DefDatabase) -> Option<Module> {\n-        let module_id = db.crate_def_map(self.crate_id).root();\n+        let module_id = db.crate_def_map(self.crate_id).root;\n         Some(Module::new(self, module_id))\n     }\n \n@@ -195,7 +195,7 @@ impl Module {\n     /// in the module tree of any target in `Cargo.toml`.\n     pub fn crate_root(self, db: &impl DefDatabase) -> Module {\n         let def_map = db.crate_def_map(self.id.krate);\n-        self.with_module_id(def_map.root())\n+        self.with_module_id(def_map.root)\n     }\n \n     /// Finds a child module with the specified name."}, {"sha": "f15c23db9df815dab2aa2b0dc89f3162049d8a26", "filename": "crates/ra_hir_def/src/lang_item.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f5e0a31eaf9ddd7788e6261d49f4d18e8463a719/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e0a31eaf9ddd7788e6261d49f4d18e8463a719/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs?ref=f5e0a31eaf9ddd7788e6261d49f4d18e8463a719", "patch": "@@ -39,8 +39,9 @@ impl LangItems {\n         let crate_def_map = db.crate_def_map(krate);\n \n         crate_def_map\n-            .modules()\n-            .filter_map(|module_id| db.module_lang_items(ModuleId { krate, module_id }))\n+            .modules\n+            .iter()\n+            .filter_map(|(module_id, _)| db.module_lang_items(ModuleId { krate, module_id }))\n             .for_each(|it| lang_items.items.extend(it.items.iter().map(|(k, v)| (k.clone(), *v))));\n \n         Arc::new(lang_items)"}, {"sha": "9476fb1ad3c56ae66c93c6ec3e54cb31fec13b51", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 6, "deletions": 26, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f5e0a31eaf9ddd7788e6261d49f4d18e8463a719/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e0a31eaf9ddd7788e6261d49f4d18e8463a719/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=f5e0a31eaf9ddd7788e6261d49f4d18e8463a719", "patch": "@@ -80,16 +80,16 @@ use crate::{\n /// Contains all top-level defs from a macro-expanded crate\n #[derive(Debug, PartialEq, Eq)]\n pub struct CrateDefMap {\n-    krate: CrateId,\n-    edition: Edition,\n+    pub root: LocalModuleId,\n+    pub(crate) krate: CrateId,\n     /// The prelude module for this crate. This either comes from an import\n     /// marked with the `prelude_import` attribute, or (in the normal case) from\n     /// a dependency (`std` or `core`).\n-    prelude: Option<ModuleId>,\n-    extern_prelude: FxHashMap<Name, ModuleDefId>,\n-    root: LocalModuleId,\n-    modules: Arena<LocalModuleId, ModuleData>,\n+    pub(crate) prelude: Option<ModuleId>,\n+    pub(crate) extern_prelude: FxHashMap<Name, ModuleDefId>,\n+    pub(crate) modules: Arena<LocalModuleId, ModuleData>,\n \n+    edition: Edition,\n     diagnostics: Vec<DefDiagnostic>,\n }\n \n@@ -229,22 +229,6 @@ impl CrateDefMap {\n         Arc::new(def_map)\n     }\n \n-    pub fn krate(&self) -> CrateId {\n-        self.krate\n-    }\n-\n-    pub fn root(&self) -> LocalModuleId {\n-        self.root\n-    }\n-\n-    pub fn prelude(&self) -> Option<ModuleId> {\n-        self.prelude\n-    }\n-\n-    pub fn extern_prelude(&self) -> &FxHashMap<Name, ModuleDefId> {\n-        &self.extern_prelude\n-    }\n-\n     pub fn add_diagnostics(\n         &self,\n         db: &impl DefDatabase,\n@@ -254,10 +238,6 @@ impl CrateDefMap {\n         self.diagnostics.iter().for_each(|it| it.add_to(db, module, sink))\n     }\n \n-    pub fn modules(&self) -> impl Iterator<Item = LocalModuleId> + '_ {\n-        self.modules.iter().map(|(id, _data)| id)\n-    }\n-\n     pub fn modules_for_file(&self, file_id: FileId) -> impl Iterator<Item = LocalModuleId> + '_ {\n         self.modules\n             .iter()"}, {"sha": "41becf8dffd22bab59f4f1563a7721f32a33c01a", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f5e0a31eaf9ddd7788e6261d49f4d18e8463a719/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e0a31eaf9ddd7788e6261d49f4d18e8463a719/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=f5e0a31eaf9ddd7788e6261d49f4d18e8463a719", "patch": "@@ -1,4 +1,7 @@\n-//! FIXME: write short doc here\n+//! The core of the module-level name resolution algorithm.\n+//!\n+//! `DefCollector::collect` contains the fixed-point iteration loop which\n+//! resolves imports and expands macros.\n \n use hir_expand::{\n     builtin_macro::find_builtin_macro,"}, {"sha": "c24a9b165e616945b70e8f66296c466204f51aa0", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f5e0a31eaf9ddd7788e6261d49f4d18e8463a719/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5e0a31eaf9ddd7788e6261d49f4d18e8463a719/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=f5e0a31eaf9ddd7788e6261d49f4d18e8463a719", "patch": "@@ -321,7 +321,7 @@ impl Resolver {\n         let mut traits = FxHashSet::default();\n         for scope in &self.scopes {\n             if let Scope::ModuleScope(m) = scope {\n-                if let Some(prelude) = m.crate_def_map.prelude() {\n+                if let Some(prelude) = m.crate_def_map.prelude {\n                     let prelude_def_map = db.crate_def_map(prelude.krate);\n                     traits.extend(prelude_def_map[prelude.module_id].scope.traits());\n                 }\n@@ -340,7 +340,7 @@ impl Resolver {\n     }\n \n     pub fn krate(&self) -> Option<CrateId> {\n-        self.module().map(|t| t.0.krate())\n+        self.module().map(|t| t.0.krate)\n     }\n \n     pub fn where_predicates_in_scope<'a>(\n@@ -395,10 +395,10 @@ impl Scope {\n                 m.crate_def_map[m.module_id].scope.legacy_macros().for_each(|(name, macro_)| {\n                     f(name.clone(), ScopeDef::PerNs(PerNs::macros(macro_)));\n                 });\n-                m.crate_def_map.extern_prelude().iter().for_each(|(name, &def)| {\n+                m.crate_def_map.extern_prelude.iter().for_each(|(name, &def)| {\n                     f(name.clone(), ScopeDef::PerNs(PerNs::types(def.into())));\n                 });\n-                if let Some(prelude) = m.crate_def_map.prelude() {\n+                if let Some(prelude) = m.crate_def_map.prelude {\n                     let prelude_def_map = db.crate_def_map(prelude.krate);\n                     prelude_def_map[prelude.module_id].scope.entries().for_each(|(name, res)| {\n                         f(name.clone(), ScopeDef::PerNs(res.def));"}]}