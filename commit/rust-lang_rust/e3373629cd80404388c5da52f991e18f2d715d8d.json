{"sha": "e3373629cd80404388c5da52f991e18f2d715d8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMzczNjI5Y2Q4MDQwNDM4OGM1ZGE1MmY5OTFlMThmMmQ3MTVkOGQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-20T11:03:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-20T11:03:18Z"}, "message": "Merge #4520\n\n4520: Marks 2.0 r=matklad a=matklad\n\nThe main benefit here is that we no longer need to declare marks. The main drawback is that this is ~~glorious~~ horrible. WDYT? \n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "f916c9d90a5b1817db4aed2c60db2ce4809dab1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f916c9d90a5b1817db4aed2c60db2ce4809dab1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3373629cd80404388c5da52f991e18f2d715d8d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJexQ52CRBK7hj4Ov3rIwAAdHIIAKKJZIjCK7faA10Io85ntBa3\nF8WmJcZGQ6sA4YFEpoyFajoc1tF05aabA3ILp5g6/UDhQaNm9pfReNk7SsGPZ3FC\naINUJw7W7b5EcSaubOh9xg4nT5+c+CxLLzt03qFV8LKzDZJF8zV932Wm87qQAXgF\n8Vm18Z/4L5fqf7dhaBIhPz/UcNxe0Z+M+ZYC/5r1mlkDvSSSprbJSHelrHHbuDgi\nm/akcdzt8vlL0kfhuNPgh+Wa/f+SmvSV4GvV3+skx78ENRd2ZrxZ8qbs9xLHg7+o\nDYKkTB+cbE3NY3KdAGWKboXovSDwoe045HoRnaC5Wg1wBU0GKSgIGxJRgpFDQWk=\n=WoIb\n-----END PGP SIGNATURE-----\n", "payload": "tree f916c9d90a5b1817db4aed2c60db2ce4809dab1f\nparent 4d3fd62f897da50db1b203b86f45b9d2cd272b4d\nparent ecac5d7de2192873c24b7b06d4964d188d8abe6a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1589972598 +0000\ncommitter GitHub <noreply@github.com> 1589972598 +0000\n\nMerge #4520\n\n4520: Marks 2.0 r=matklad a=matklad\n\nThe main benefit here is that we no longer need to declare marks. The main drawback is that this is ~~glorious~~ horrible. WDYT? \n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3373629cd80404388c5da52f991e18f2d715d8d", "html_url": "https://github.com/rust-lang/rust/commit/e3373629cd80404388c5da52f991e18f2d715d8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3373629cd80404388c5da52f991e18f2d715d8d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d3fd62f897da50db1b203b86f45b9d2cd272b4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d3fd62f897da50db1b203b86f45b9d2cd272b4d", "html_url": "https://github.com/rust-lang/rust/commit/4d3fd62f897da50db1b203b86f45b9d2cd272b4d"}, {"sha": "ecac5d7de2192873c24b7b06d4964d188d8abe6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecac5d7de2192873c24b7b06d4964d188d8abe6a", "html_url": "https://github.com/rust-lang/rust/commit/ecac5d7de2192873c24b7b06d4964d188d8abe6a"}], "stats": {"total": 467, "additions": 179, "deletions": 288}, "files": [{"sha": "5f6c8b19a3f514ba0ace50b9322daa51d319806a", "filename": "crates/ra_assists/src/handlers/add_from_impl_for_enum.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_from_impl_for_enum.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -1,6 +1,6 @@\n use ra_ide_db::RootDatabase;\n use ra_syntax::ast::{self, AstNode, NameOwner};\n-use test_utils::tested_by;\n+use test_utils::mark;\n \n use crate::{utils::FamousDefs, AssistContext, AssistId, Assists};\n \n@@ -39,7 +39,7 @@ pub(crate) fn add_from_impl_for_enum(acc: &mut Assists, ctx: &AssistContext) ->\n     };\n \n     if existing_from_impl(&ctx.sema, &variant).is_some() {\n-        tested_by!(test_add_from_impl_already_exists);\n+        mark::hit!(test_add_from_impl_already_exists);\n         return None;\n     }\n \n@@ -90,7 +90,7 @@ fn existing_from_impl(\n \n #[cfg(test)]\n mod tests {\n-    use test_utils::covers;\n+    use test_utils::mark;\n \n     use crate::tests::{check_assist, check_assist_not_applicable};\n \n@@ -149,7 +149,7 @@ impl From<foo::bar::baz::Boo> for A {\n \n     #[test]\n     fn test_add_from_impl_already_exists() {\n-        covers!(test_add_from_impl_already_exists);\n+        mark::check!(test_add_from_impl_already_exists);\n         check_not_applicable(\n             r#\"\n enum A { <|>One(u32), }"}, {"sha": "26acf81f284bedf453899dde13478df1e63c8c85", "filename": "crates/ra_assists/src/handlers/add_turbo_fish.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -1,11 +1,11 @@\n use ra_ide_db::defs::{classify_name_ref, Definition, NameRefClass};\n use ra_syntax::{ast, AstNode, SyntaxKind, T};\n+use test_utils::mark;\n \n use crate::{\n     assist_context::{AssistContext, Assists},\n     AssistId,\n };\n-use test_utils::tested_by;\n \n // Assist: add_turbo_fish\n //\n@@ -28,7 +28,7 @@ pub(crate) fn add_turbo_fish(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n     let ident = ctx.find_token_at_offset(SyntaxKind::IDENT)?;\n     let next_token = ident.next_token()?;\n     if next_token.kind() == T![::] {\n-        tested_by!(add_turbo_fish_one_fish_is_enough);\n+        mark::hit!(add_turbo_fish_one_fish_is_enough);\n         return None;\n     }\n     let name_ref = ast::NameRef::cast(ident.parent())?;\n@@ -42,7 +42,7 @@ pub(crate) fn add_turbo_fish(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n     };\n     let generics = hir::GenericDef::Function(fun).params(ctx.sema.db);\n     if generics.is_empty() {\n-        tested_by!(add_turbo_fish_non_generic);\n+        mark::hit!(add_turbo_fish_non_generic);\n         return None;\n     }\n     acc.add(AssistId(\"add_turbo_fish\"), \"Add `::<>`\", ident.text_range(), |builder| {\n@@ -58,7 +58,7 @@ mod tests {\n     use crate::tests::{check_assist, check_assist_not_applicable};\n \n     use super::*;\n-    use test_utils::covers;\n+    use test_utils::mark;\n \n     #[test]\n     fn add_turbo_fish_function() {\n@@ -106,7 +106,7 @@ fn main() {\n \n     #[test]\n     fn add_turbo_fish_one_fish_is_enough() {\n-        covers!(add_turbo_fish_one_fish_is_enough);\n+        mark::check!(add_turbo_fish_one_fish_is_enough);\n         check_assist_not_applicable(\n             add_turbo_fish,\n             r#\"\n@@ -120,7 +120,7 @@ fn main() {\n \n     #[test]\n     fn add_turbo_fish_non_generic() {\n-        covers!(add_turbo_fish_non_generic);\n+        mark::check!(add_turbo_fish_non_generic);\n         check_assist_not_applicable(\n             add_turbo_fish,\n             r#\""}, {"sha": "71d55e0c30004ea24708cf669cc7f06fd706e12a", "filename": "crates/ra_assists/src/handlers/change_visibility.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -9,7 +9,7 @@ use ra_syntax::{\n };\n \n use hir::{db::HirDatabase, HasSource, HasVisibility, PathResolution};\n-use test_utils::tested_by;\n+use test_utils::mark;\n \n use crate::{AssistContext, AssistId, Assists};\n use ra_db::FileId;\n@@ -55,7 +55,7 @@ fn add_vis(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     } else if let Some(field_name) = ctx.find_node_at_offset::<ast::Name>() {\n         let field = field_name.syntax().ancestors().find_map(ast::RecordFieldDef::cast)?;\n         if field.name()? != field_name {\n-            tested_by!(change_visibility_field_false_positive);\n+            mark::hit!(change_visibility_field_false_positive);\n             return None;\n         }\n         if field.visibility().is_some() {\n@@ -255,7 +255,7 @@ fn change_vis(acc: &mut Assists, vis: ast::Visibility) -> Option<()> {\n \n #[cfg(test)]\n mod tests {\n-    use test_utils::covers;\n+    use test_utils::mark;\n \n     use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n@@ -288,7 +288,7 @@ mod tests {\n \n     #[test]\n     fn change_visibility_field_false_positive() {\n-        covers!(change_visibility_field_false_positive);\n+        mark::check!(change_visibility_field_false_positive);\n         check_assist_not_applicable(\n             change_visibility,\n             r\"struct S { field: [(); { let <|>x = ();}] }\","}, {"sha": "bbdcdc626334305c244c28f9d20ce1837074b371", "filename": "crates/ra_assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -4,7 +4,7 @@ use hir::{Adt, HasSource, ModuleDef, Semantics};\n use itertools::Itertools;\n use ra_ide_db::RootDatabase;\n use ra_syntax::ast::{self, make, AstNode, MatchArm, NameOwner, Pat};\n-use test_utils::tested_by;\n+use test_utils::mark;\n \n use crate::{utils::FamousDefs, AssistContext, AssistId, Assists};\n \n@@ -58,7 +58,7 @@ pub(crate) fn fill_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option<\n             .collect::<Vec<_>>();\n         if Some(enum_def) == FamousDefs(&ctx.sema, module.krate()).core_option_Option() {\n             // Match `Some` variant first.\n-            tested_by!(option_order);\n+            mark::hit!(option_order);\n             variants.reverse()\n         }\n         variants\n@@ -174,13 +174,14 @@ fn build_pat(db: &RootDatabase, module: hir::Module, var: hir::EnumVariant) -> O\n \n #[cfg(test)]\n mod tests {\n+    use test_utils::mark;\n+\n     use crate::{\n         tests::{check_assist, check_assist_not_applicable, check_assist_target},\n         utils::FamousDefs,\n     };\n \n     use super::fill_match_arms;\n-    use test_utils::covers;\n \n     #[test]\n     fn all_match_arms_provided() {\n@@ -750,7 +751,7 @@ mod tests {\n \n     #[test]\n     fn option_order() {\n-        covers!(option_order);\n+        mark::check!(option_order);\n         let before = r#\"\n fn foo(opt: Option<i32>) {\n     match opt<|> {"}, {"sha": "46d675a4e8c36084605561d4dd01241d744b97b4", "filename": "crates/ra_assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -3,7 +3,7 @@ use ra_syntax::{\n     ast::{self, AstNode, AstToken},\n     TextRange,\n };\n-use test_utils::tested_by;\n+use test_utils::mark;\n \n use crate::{\n     assist_context::{AssistContext, Assists},\n@@ -33,11 +33,11 @@ pub(crate) fn inline_local_variable(acc: &mut Assists, ctx: &AssistContext) -> O\n         _ => return None,\n     };\n     if bind_pat.mut_token().is_some() {\n-        tested_by!(test_not_inline_mut_variable);\n+        mark::hit!(test_not_inline_mut_variable);\n         return None;\n     }\n     if !bind_pat.syntax().text_range().contains_inclusive(ctx.offset()) {\n-        tested_by!(not_applicable_outside_of_bind_pat);\n+        mark::hit!(not_applicable_outside_of_bind_pat);\n         return None;\n     }\n     let initializer_expr = let_stmt.initializer()?;\n@@ -46,7 +46,7 @@ pub(crate) fn inline_local_variable(acc: &mut Assists, ctx: &AssistContext) -> O\n     let def = Definition::Local(def);\n     let refs = def.find_usages(ctx.db, None);\n     if refs.is_empty() {\n-        tested_by!(test_not_applicable_if_variable_unused);\n+        mark::hit!(test_not_applicable_if_variable_unused);\n         return None;\n     };\n \n@@ -122,7 +122,7 @@ pub(crate) fn inline_local_variable(acc: &mut Assists, ctx: &AssistContext) -> O\n \n #[cfg(test)]\n mod tests {\n-    use test_utils::covers;\n+    use test_utils::mark;\n \n     use crate::tests::{check_assist, check_assist_not_applicable};\n \n@@ -330,7 +330,7 @@ fn foo() {\n \n     #[test]\n     fn test_not_inline_mut_variable() {\n-        covers!(test_not_inline_mut_variable);\n+        mark::check!(test_not_inline_mut_variable);\n         check_assist_not_applicable(\n             inline_local_variable,\n             r\"\n@@ -663,7 +663,7 @@ fn foo() {\n \n     #[test]\n     fn test_not_applicable_if_variable_unused() {\n-        covers!(test_not_applicable_if_variable_unused);\n+        mark::check!(test_not_applicable_if_variable_unused);\n         check_assist_not_applicable(\n             inline_local_variable,\n             r\"\n@@ -676,7 +676,7 @@ fn foo() {\n \n     #[test]\n     fn not_applicable_outside_of_bind_pat() {\n-        covers!(not_applicable_outside_of_bind_pat);\n+        mark::check!(not_applicable_outside_of_bind_pat);\n         check_assist_not_applicable(\n             inline_local_variable,\n             r\""}, {"sha": "56c610fedd9651275695e4209a68cb7021a07ed0", "filename": "crates/ra_assists/src/handlers/introduce_variable.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -7,7 +7,7 @@ use ra_syntax::{\n     SyntaxNode, TextSize,\n };\n use stdx::format_to;\n-use test_utils::tested_by;\n+use test_utils::mark;\n \n use crate::{AssistContext, AssistId, Assists};\n \n@@ -33,7 +33,7 @@ pub(crate) fn introduce_variable(acc: &mut Assists, ctx: &AssistContext) -> Opti\n     }\n     let node = ctx.covering_element();\n     if node.kind() == COMMENT {\n-        tested_by!(introduce_var_in_comment_is_not_applicable);\n+        mark::hit!(introduce_var_in_comment_is_not_applicable);\n         return None;\n     }\n     let expr = node.ancestors().find_map(valid_target_expr)?;\n@@ -61,7 +61,7 @@ pub(crate) fn introduce_variable(acc: &mut Assists, ctx: &AssistContext) -> Opti\n             false\n         };\n         if is_full_stmt {\n-            tested_by!(test_introduce_var_expr_stmt);\n+            mark::hit!(test_introduce_var_expr_stmt);\n             if full_stmt.unwrap().semicolon_token().is_none() {\n                 buf.push_str(\";\");\n             }\n@@ -113,7 +113,7 @@ fn anchor_stmt(expr: ast::Expr) -> Option<(SyntaxNode, bool)> {\n     expr.syntax().ancestors().find_map(|node| {\n         if let Some(expr) = node.parent().and_then(ast::BlockExpr::cast).and_then(|it| it.expr()) {\n             if expr.syntax() == &node {\n-                tested_by!(test_introduce_var_last_expr);\n+                mark::hit!(test_introduce_var_last_expr);\n                 return Some((node, false));\n             }\n         }\n@@ -134,7 +134,7 @@ fn anchor_stmt(expr: ast::Expr) -> Option<(SyntaxNode, bool)> {\n \n #[cfg(test)]\n mod tests {\n-    use test_utils::covers;\n+    use test_utils::mark;\n \n     use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n@@ -158,13 +158,13 @@ fn foo() {\n \n     #[test]\n     fn introduce_var_in_comment_is_not_applicable() {\n-        covers!(introduce_var_in_comment_is_not_applicable);\n+        mark::check!(introduce_var_in_comment_is_not_applicable);\n         check_assist_not_applicable(introduce_variable, \"fn main() { 1 + /* <|>comment<|> */ 1; }\");\n     }\n \n     #[test]\n     fn test_introduce_var_expr_stmt() {\n-        covers!(test_introduce_var_expr_stmt);\n+        mark::check!(test_introduce_var_expr_stmt);\n         check_assist(\n             introduce_variable,\n             \"\n@@ -209,7 +209,7 @@ fn foo() {\n \n     #[test]\n     fn test_introduce_var_last_expr() {\n-        covers!(test_introduce_var_last_expr);\n+        mark::check!(test_introduce_var_last_expr);\n         check_assist(\n             introduce_variable,\n             \""}, {"sha": "a4a497c73601ea77caf84f78f1f2ecf2a64d5adc", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -12,7 +12,6 @@ macro_rules! eprintln {\n \n mod assist_config;\n mod assist_context;\n-mod marks;\n #[cfg(test)]\n mod tests;\n pub mod utils;"}, {"sha": "722f3c6a4b7b543bf816a09478c8188c754e4de0", "filename": "crates/ra_assists/src/marks.rs", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4d3fd62f897da50db1b203b86f45b9d2cd272b4d/crates%2Fra_assists%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3fd62f897da50db1b203b86f45b9d2cd272b4d/crates%2Fra_assists%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fmarks.rs?ref=4d3fd62f897da50db1b203b86f45b9d2cd272b4d", "patch": "@@ -1,15 +0,0 @@\n-//! See test_utils/src/marks.rs\n-\n-test_utils::marks![\n-    option_order\n-    introduce_var_in_comment_is_not_applicable\n-    test_introduce_var_expr_stmt\n-    test_introduce_var_last_expr\n-    not_applicable_outside_of_bind_pat\n-    test_not_inline_mut_variable\n-    test_not_applicable_if_variable_unused\n-    change_visibility_field_false_positive\n-    test_add_from_impl_already_exists\n-    add_turbo_fish_one_fish_is_enough\n-    add_turbo_fish_non_generic\n-];"}, {"sha": "e08d62dd6869d66703312cb1b98adf478dd47b96", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -15,7 +15,7 @@ use ra_syntax::{\n     },\n     AstNode, AstPtr,\n };\n-use test_utils::tested_by;\n+use test_utils::mark;\n \n use crate::{\n     adt::StructKind,\n@@ -226,7 +226,7 @@ impl ExprCollector<'_> {\n                         None => self.collect_expr_opt(condition.expr()),\n                         // if let -- desugar to match\n                         Some(pat) => {\n-                            tested_by!(infer_resolve_while_let);\n+                            mark::hit!(infer_resolve_while_let);\n                             let pat = self.collect_pat(pat);\n                             let match_expr = self.collect_expr_opt(condition.expr());\n                             let placeholder_pat = self.missing_pat();"}, {"sha": "09e92b74e1ab43bc59e050d7247a35cb2b0b96ce", "filename": "crates/ra_hir_def/src/body/scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -174,7 +174,7 @@ mod tests {\n     use hir_expand::{name::AsName, InFile};\n     use ra_db::{fixture::WithFixture, FileId, SourceDatabase};\n     use ra_syntax::{algo::find_node_at_offset, ast, AstNode};\n-    use test_utils::{assert_eq_text, covers, extract_offset};\n+    use test_utils::{assert_eq_text, extract_offset, mark};\n \n     use crate::{db::DefDatabase, test_db::TestDB, FunctionId, ModuleDefId};\n \n@@ -388,7 +388,7 @@ mod tests {\n \n     #[test]\n     fn while_let_desugaring() {\n-        covers!(infer_resolve_while_let);\n+        mark::check!(infer_resolve_while_let);\n         do_check_local_name(\n             r#\"\n fn test() {"}, {"sha": "68d3cde08a4fcd470ee48fe5a8481b646d3ed2f4", "filename": "crates/ra_hir_def/src/find_path.rs", "status": "modified", "additions": 30, "deletions": 27, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -4,7 +4,7 @@ use std::sync::Arc;\n \n use hir_expand::name::{known, AsName, Name};\n use ra_prof::profile;\n-use test_utils::tested_by;\n+use test_utils::mark;\n \n use crate::{\n     db::DefDatabase,\n@@ -164,17 +164,19 @@ fn find_path_inner(\n \n fn select_best_path(old_path: ModPath, new_path: ModPath, prefer_no_std: bool) -> ModPath {\n     if old_path.starts_with_std() && new_path.can_start_with_std() {\n-        tested_by!(prefer_std_paths);\n         if prefer_no_std {\n+            mark::hit!(prefer_no_std_paths);\n             new_path\n         } else {\n+            mark::hit!(prefer_std_paths);\n             old_path\n         }\n     } else if new_path.starts_with_std() && old_path.can_start_with_std() {\n-        tested_by!(prefer_std_paths);\n         if prefer_no_std {\n+            mark::hit!(prefer_no_std_paths);\n             old_path\n         } else {\n+            mark::hit!(prefer_std_paths);\n             new_path\n         }\n     } else if new_path.len() < old_path.len() {\n@@ -251,12 +253,14 @@ pub(crate) fn importable_locations_of_query(\n \n #[cfg(test)]\n mod tests {\n-    use super::*;\n-    use crate::test_db::TestDB;\n     use hir_expand::hygiene::Hygiene;\n     use ra_db::fixture::WithFixture;\n     use ra_syntax::ast::AstNode;\n-    use test_utils::covers;\n+    use test_utils::mark;\n+\n+    use crate::test_db::TestDB;\n+\n+    use super::*;\n \n     /// `code` needs to contain a cursor marker; checks that `find_path` for the\n     /// item the `path` refers to returns that same path when called from the\n@@ -511,7 +515,7 @@ mod tests {\n \n     #[test]\n     fn prefer_std_paths_over_alloc() {\n-        covers!(prefer_std_paths);\n+        mark::check!(prefer_std_paths);\n         let code = r#\"\n         //- /main.rs crate:main deps:alloc,std\n         <|>\n@@ -530,51 +534,50 @@ mod tests {\n     }\n \n     #[test]\n-    fn prefer_alloc_paths_over_std() {\n-        covers!(prefer_std_paths);\n+    fn prefer_core_paths_over_std() {\n+        mark::check!(prefer_no_std_paths);\n         let code = r#\"\n-        //- /main.rs crate:main deps:alloc,std\n+        //- /main.rs crate:main deps:core,std\n         #![no_std]\n \n         <|>\n \n-        //- /std.rs crate:std deps:alloc\n+        //- /std.rs crate:std deps:core\n \n-        pub mod sync {\n-            pub use alloc::sync::Arc;\n+        pub mod fmt {\n+            pub use core::fmt::Error;\n         }\n \n-        //- /zzz.rs crate:alloc\n+        //- /zzz.rs crate:core\n \n-        pub mod sync {\n-            pub struct Arc;\n+        pub mod fmt {\n+            pub struct Error;\n         }\n         \"#;\n-        check_found_path(code, \"alloc::sync::Arc\");\n+        check_found_path(code, \"core::fmt::Error\");\n     }\n \n     #[test]\n-    fn prefer_core_paths_over_std() {\n-        covers!(prefer_std_paths);\n+    fn prefer_alloc_paths_over_std() {\n         let code = r#\"\n-        //- /main.rs crate:main deps:core,std\n+        //- /main.rs crate:main deps:alloc,std\n         #![no_std]\n \n         <|>\n \n-        //- /std.rs crate:std deps:core\n+        //- /std.rs crate:std deps:alloc\n \n-        pub mod fmt {\n-            pub use core::fmt::Error;\n+        pub mod sync {\n+            pub use alloc::sync::Arc;\n         }\n \n-        //- /zzz.rs crate:core\n+        //- /zzz.rs crate:alloc\n \n-        pub mod fmt {\n-            pub struct Error;\n+        pub mod sync {\n+            pub struct Arc;\n         }\n         \"#;\n-        check_found_path(code, \"core::fmt::Error\");\n+        check_found_path(code, \"alloc::sync::Arc\");\n     }\n \n     #[test]"}, {"sha": "5325a27608eab95ddbda832651c3dab35909c26f", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -46,8 +46,6 @@ pub mod find_path;\n \n #[cfg(test)]\n mod test_db;\n-#[cfg(test)]\n-mod marks;\n \n use std::hash::Hash;\n "}, {"sha": "daa49d5f1040b6e792127d3299261fe685b76322", "filename": "crates/ra_hir_def/src/marks.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4d3fd62f897da50db1b203b86f45b9d2cd272b4d/crates%2Fra_hir_def%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3fd62f897da50db1b203b86f45b9d2cd272b4d/crates%2Fra_hir_def%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fmarks.rs?ref=4d3fd62f897da50db1b203b86f45b9d2cd272b4d", "patch": "@@ -1,17 +0,0 @@\n-//! See test_utils/src/marks.rs\n-\n-test_utils::marks!(\n-    bogus_paths\n-    name_res_works_for_broken_modules\n-    can_import_enum_variant\n-    glob_enum\n-    glob_enum_group\n-    glob_across_crates\n-    std_prelude\n-    macro_rules_from_other_crates_are_visible_with_macro_use\n-    prelude_is_macro_use\n-    macro_dollar_crate_self\n-    macro_dollar_crate_other\n-    infer_resolve_while_let\n-    prefer_std_paths\n-);"}, {"sha": "353a31ad47a153cc6b717de468deb9e4b20594f9", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -14,7 +14,7 @@ use ra_cfg::CfgOptions;\n use ra_db::{CrateId, FileId, ProcMacroId};\n use ra_syntax::ast;\n use rustc_hash::FxHashMap;\n-use test_utils::tested_by;\n+use test_utils::mark;\n \n use crate::{\n     attr::Attrs,\n@@ -302,7 +302,7 @@ impl DefCollector<'_> {\n         );\n \n         if let Some(ModuleDefId::ModuleId(m)) = res.take_types() {\n-            tested_by!(macro_rules_from_other_crates_are_visible_with_macro_use);\n+            mark::hit!(macro_rules_from_other_crates_are_visible_with_macro_use);\n             self.import_all_macros_exported(current_module_id, m.krate);\n         }\n     }\n@@ -412,10 +412,10 @@ impl DefCollector<'_> {\n             match def.take_types() {\n                 Some(ModuleDefId::ModuleId(m)) => {\n                     if import.is_prelude {\n-                        tested_by!(std_prelude);\n+                        mark::hit!(std_prelude);\n                         self.def_map.prelude = Some(m);\n                     } else if m.krate != self.def_map.krate {\n-                        tested_by!(glob_across_crates);\n+                        mark::hit!(glob_across_crates);\n                         // glob import from other crate => we can just import everything once\n                         let item_map = self.db.crate_def_map(m.krate);\n                         let scope = &item_map[m.local_id].scope;\n@@ -461,7 +461,7 @@ impl DefCollector<'_> {\n                     }\n                 }\n                 Some(ModuleDefId::AdtId(AdtId::EnumId(e))) => {\n-                    tested_by!(glob_enum);\n+                    mark::hit!(glob_enum);\n                     // glob import from enum => just import all the variants\n \n                     // XXX: urgh, so this works by accident! Here, we look at\n@@ -510,7 +510,7 @@ impl DefCollector<'_> {\n \n                     self.update(module_id, &[(name, def)], vis);\n                 }\n-                None => tested_by!(bogus_paths),\n+                None => mark::hit!(bogus_paths),\n             }\n         }\n     }\n@@ -683,7 +683,7 @@ impl ModCollector<'_, '_> {\n         // Prelude module is always considered to be `#[macro_use]`.\n         if let Some(prelude_module) = self.def_collector.def_map.prelude {\n             if prelude_module.krate != self.def_collector.def_map.krate {\n-                tested_by!(prelude_is_macro_use);\n+                mark::hit!(prelude_is_macro_use);\n                 self.def_collector.import_all_macros_exported(self.module_id, prelude_module.krate);\n             }\n         }"}, {"sha": "19692e70cf4564f97a17f817c60c9b8280c2baa5", "filename": "crates/ra_hir_def/src/nameres/path_resolution.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -14,7 +14,7 @@ use std::iter::successors;\n \n use hir_expand::name::Name;\n use ra_db::Edition;\n-use test_utils::tested_by;\n+use test_utils::mark;\n \n use crate::{\n     db::DefDatabase,\n@@ -108,15 +108,15 @@ impl CrateDefMap {\n         let mut curr_per_ns: PerNs = match path.kind {\n             PathKind::DollarCrate(krate) => {\n                 if krate == self.krate {\n-                    tested_by!(macro_dollar_crate_self);\n+                    mark::hit!(macro_dollar_crate_self);\n                     PerNs::types(\n                         ModuleId { krate: self.krate, local_id: self.root }.into(),\n                         Visibility::Public,\n                     )\n                 } else {\n                     let def_map = db.crate_def_map(krate);\n                     let module = ModuleId { krate, local_id: def_map.root };\n-                    tested_by!(macro_dollar_crate_other);\n+                    mark::hit!(macro_dollar_crate_other);\n                     PerNs::types(module.into(), Visibility::Public)\n                 }\n             }\n@@ -221,7 +221,7 @@ impl CrateDefMap {\n                 }\n                 ModuleDefId::AdtId(AdtId::EnumId(e)) => {\n                     // enum variant\n-                    tested_by!(can_import_enum_variant);\n+                    mark::hit!(can_import_enum_variant);\n                     let enum_data = db.enum_data(e);\n                     match enum_data.variant(&segment) {\n                         Some(local_id) => {"}, {"sha": "4e628b14d921424662c11fe2d50a4a3141a739ce", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -18,7 +18,7 @@ use ra_syntax::{\n     ast::{self, AttrsOwner, NameOwner, VisibilityOwner},\n     AstNode,\n };\n-use test_utils::tested_by;\n+use test_utils::mark;\n \n use crate::{\n     attr::Attrs,\n@@ -346,7 +346,7 @@ impl RawItemsCollector {\n             self.push_item(current_module, attrs, RawItemKind::Module(item));\n             return;\n         }\n-        tested_by!(name_res_works_for_broken_modules);\n+        mark::hit!(name_res_works_for_broken_modules);\n     }\n \n     fn add_use_item(&mut self, current_module: Option<Idx<ModuleData>>, use_item: ast::UseItem) {"}, {"sha": "05cd0297d1ed27faecc500b3b03c898f62284991", "filename": "crates/ra_hir_def/src/nameres/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -8,7 +8,7 @@ use std::sync::Arc;\n \n use insta::assert_snapshot;\n use ra_db::{fixture::WithFixture, SourceDatabase};\n-use test_utils::covers;\n+use test_utils::mark;\n \n use crate::{db::DefDatabase, nameres::*, test_db::TestDB};\n \n@@ -132,7 +132,7 @@ fn crate_def_map_fn_mod_same_name() {\n \n #[test]\n fn bogus_paths() {\n-    covers!(bogus_paths);\n+    mark::check!(bogus_paths);\n     let map = def_map(\n         \"\n         //- /lib.rs\n@@ -247,7 +247,7 @@ fn re_exports() {\n \n #[test]\n fn std_prelude() {\n-    covers!(std_prelude);\n+    mark::check!(std_prelude);\n     let map = def_map(\n         \"\n         //- /main.rs crate:main deps:test_crate\n@@ -271,7 +271,7 @@ fn std_prelude() {\n \n #[test]\n fn can_import_enum_variant() {\n-    covers!(can_import_enum_variant);\n+    mark::check!(can_import_enum_variant);\n     let map = def_map(\n         \"\n         //- /lib.rs"}, {"sha": "2b12c0daad5afcbb9ebe39af92c252e40056c265", "filename": "crates/ra_hir_def/src/nameres/tests/globs.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fglobs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fglobs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fglobs.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -152,7 +152,7 @@ fn glob_privacy_2() {\n \n #[test]\n fn glob_across_crates() {\n-    covers!(glob_across_crates);\n+    mark::check!(glob_across_crates);\n     let map = def_map(\n         r\"\n         //- /main.rs crate:main deps:test_crate\n@@ -171,7 +171,6 @@ fn glob_across_crates() {\n \n #[test]\n fn glob_privacy_across_crates() {\n-    covers!(glob_across_crates);\n     let map = def_map(\n         r\"\n         //- /main.rs crate:main deps:test_crate\n@@ -191,7 +190,7 @@ fn glob_privacy_across_crates() {\n \n #[test]\n fn glob_enum() {\n-    covers!(glob_enum);\n+    mark::check!(glob_enum);\n     let map = def_map(\n         \"\n         //- /lib.rs\n@@ -212,7 +211,7 @@ fn glob_enum() {\n \n #[test]\n fn glob_enum_group() {\n-    covers!(glob_enum_group);\n+    mark::check!(glob_enum_group);\n     let map = def_map(\n         r\"\n         //- /lib.rs"}, {"sha": "84480d9f6c4b2356769b5e7b529b28c38c735b00", "filename": "crates/ra_hir_def/src/nameres/tests/macros.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -212,7 +212,7 @@ fn unexpanded_macro_should_expand_by_fixedpoint_loop() {\n \n #[test]\n fn macro_rules_from_other_crates_are_visible_with_macro_use() {\n-    covers!(macro_rules_from_other_crates_are_visible_with_macro_use);\n+    mark::check!(macro_rules_from_other_crates_are_visible_with_macro_use);\n     let map = def_map(\n         \"\n         //- /main.rs crate:main deps:foo\n@@ -262,7 +262,7 @@ fn macro_rules_from_other_crates_are_visible_with_macro_use() {\n \n #[test]\n fn prelude_is_macro_use() {\n-    covers!(prelude_is_macro_use);\n+    mark::check!(prelude_is_macro_use);\n     let map = def_map(\n         \"\n         //- /main.rs crate:main deps:foo\n@@ -544,8 +544,7 @@ fn path_qualified_macros() {\n \n #[test]\n fn macro_dollar_crate_is_correct_in_item() {\n-    covers!(macro_dollar_crate_self);\n-    covers!(macro_dollar_crate_other);\n+    mark::check!(macro_dollar_crate_self);\n     let map = def_map(\n         \"\n         //- /main.rs crate:main deps:foo\n@@ -603,7 +602,7 @@ fn macro_dollar_crate_is_correct_in_item() {\n \n #[test]\n fn macro_dollar_crate_is_correct_in_indirect_deps() {\n-    covers!(macro_dollar_crate_other);\n+    mark::check!(macro_dollar_crate_other);\n     // From std\n     let map = def_map(\n         r#\""}, {"sha": "b43b294cab7c631ed736eac563e78a6f1bc6f542", "filename": "crates/ra_hir_def/src/nameres/tests/mod_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -2,7 +2,7 @@ use super::*;\n \n #[test]\n fn name_res_works_for_broken_modules() {\n-    covers!(name_res_works_for_broken_modules);\n+    mark::check!(name_res_works_for_broken_modules);\n     let map = def_map(\n         r\"\n         //- /lib.rs"}, {"sha": "7cc655487e78293b6341e9931c79cf26f2661fe7", "filename": "crates/ra_hir_def/src/path/lower/lower_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -6,7 +6,7 @@ use std::iter;\n use either::Either;\n use hir_expand::{hygiene::Hygiene, name::AsName};\n use ra_syntax::ast::{self, NameOwner};\n-use test_utils::tested_by;\n+use test_utils::mark;\n \n use crate::path::{ImportAlias, ModPath, PathKind};\n \n@@ -54,7 +54,7 @@ pub(crate) fn lower_use_tree(\n         // FIXME: report errors somewhere\n         // We get here if we do\n         } else if is_glob {\n-            tested_by!(glob_enum_group);\n+            mark::hit!(glob_enum_group);\n             if let Some(prefix) = prefix {\n                 cb(prefix, &tree, is_glob, None)\n             }"}, {"sha": "2ee9adb16425c8063a1c44831193bcced58cc46d", "filename": "crates/ra_hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -5,7 +5,7 @@\n //! See: https://doc.rust-lang.org/nomicon/coercions.html\n \n use hir_def::{lang_item::LangItemTarget, type_ref::Mutability};\n-use test_utils::tested_by;\n+use test_utils::mark;\n \n use crate::{autoderef, traits::Solution, Obligation, Substs, TraitRef, Ty, TypeCtor};\n \n@@ -34,7 +34,7 @@ impl<'a> InferenceContext<'a> {\n             ty1.clone()\n         } else {\n             if let (ty_app!(TypeCtor::FnDef(_)), ty_app!(TypeCtor::FnDef(_))) = (ty1, ty2) {\n-                tested_by!(coerce_fn_reification);\n+                mark::hit!(coerce_fn_reification);\n                 // Special case: two function types. Try to coerce both to\n                 // pointers to have a chance at getting a match. See\n                 // https://github.com/rust-lang/rust/blob/7b805396bf46dce972692a6846ce2ad8481c5f85/src/librustc_typeck/check/coercion.rs#L877-L916\n@@ -44,7 +44,7 @@ impl<'a> InferenceContext<'a> {\n                 let ptr_ty2 = Ty::fn_ptr(sig2);\n                 self.coerce_merge_branch(&ptr_ty1, &ptr_ty2)\n             } else {\n-                tested_by!(coerce_merge_fail_fallback);\n+                mark::hit!(coerce_merge_fail_fallback);\n                 // For incompatible types, we use the latter one as result\n                 // to be better recovery for `if` without `else`.\n                 ty2.clone()"}, {"sha": "4006f595d18eeab0dd0f3414f06727d982f28390", "filename": "crates/ra_hir_ty/src/infer/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -10,7 +10,7 @@ use hir_def::{\n     FieldId,\n };\n use hir_expand::name::Name;\n-use test_utils::tested_by;\n+use test_utils::mark;\n \n use super::{BindingMode, Expectation, InferenceContext};\n use crate::{utils::variant_data, Substs, Ty, TypeCtor};\n@@ -111,7 +111,7 @@ impl<'a> InferenceContext<'a> {\n                 }\n             }\n         } else if let Pat::Ref { .. } = &body[pat] {\n-            tested_by!(match_ergonomics_ref);\n+            mark::hit!(match_ergonomics_ref);\n             // When you encounter a `&pat` pattern, reset to Move.\n             // This is so that `w` is by value: `let (_, &w) = &(1, &2);`\n             default_bm = BindingMode::Move;"}, {"sha": "269495ca0bd25d29008f18a0d7f9855dd95986fe", "filename": "crates/ra_hir_ty/src/infer/unify.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Funify.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -4,7 +4,7 @@ use std::borrow::Cow;\n \n use ena::unify::{InPlaceUnificationTable, NoError, UnifyKey, UnifyValue};\n \n-use test_utils::tested_by;\n+use test_utils::mark;\n \n use super::{InferenceContext, Obligation};\n use crate::{\n@@ -313,7 +313,7 @@ impl InferenceTable {\n         // more than once\n         for i in 0..3 {\n             if i > 0 {\n-                tested_by!(type_var_resolves_to_int_var);\n+                mark::hit!(type_var_resolves_to_int_var);\n             }\n             match &*ty {\n                 Ty::Infer(tv) => {\n@@ -342,7 +342,7 @@ impl InferenceTable {\n             Ty::Infer(tv) => {\n                 let inner = tv.to_inner();\n                 if tv_stack.contains(&inner) {\n-                    tested_by!(type_var_cycles_resolve_as_possible);\n+                    mark::hit!(type_var_cycles_resolve_as_possible);\n                     // recursive type\n                     return tv.fallback_value();\n                 }\n@@ -369,7 +369,7 @@ impl InferenceTable {\n             Ty::Infer(tv) => {\n                 let inner = tv.to_inner();\n                 if tv_stack.contains(&inner) {\n-                    tested_by!(type_var_cycles_resolve_completely);\n+                    mark::hit!(type_var_cycles_resolve_completely);\n                     // recursive type\n                     return tv.fallback_value();\n                 }"}, {"sha": "c87ee06ce88cb5c6b078de11ba57b1e799a4aea8", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -42,7 +42,6 @@ pub mod expr;\n mod tests;\n #[cfg(test)]\n mod test_db;\n-mod marks;\n mod _match;\n \n use std::ops::Deref;"}, {"sha": "35ac86a461eb0a6ff5cde7483f47642e4a40b821", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -812,7 +812,7 @@ impl TraitEnvironment {\n                 // add `Self: Trait<T1, T2, ...>` to the environment in trait\n                 // function default implementations (and hypothetical code\n                 // inside consts or type aliases)\n-                test_utils::tested_by!(trait_self_implements_self);\n+                test_utils::mark::hit!(trait_self_implements_self);\n                 let substs = Substs::type_params(db, trait_id);\n                 let trait_ref = TraitRef { trait_: trait_id, substs };\n                 let pred = GenericPredicate::Implemented(trait_ref);"}, {"sha": "a397401434bfc4e3c07ee404b64d08056112fb01", "filename": "crates/ra_hir_ty/src/marks.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4d3fd62f897da50db1b203b86f45b9d2cd272b4d/crates%2Fra_hir_ty%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3fd62f897da50db1b203b86f45b9d2cd272b4d/crates%2Fra_hir_ty%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmarks.rs?ref=4d3fd62f897da50db1b203b86f45b9d2cd272b4d", "patch": "@@ -1,12 +0,0 @@\n-//! See test_utils/src/marks.rs\n-\n-test_utils::marks!(\n-    type_var_cycles_resolve_completely\n-    type_var_cycles_resolve_as_possible\n-    type_var_resolves_to_int_var\n-    impl_self_type_match_without_receiver\n-    match_ergonomics_ref\n-    coerce_merge_fail_fallback\n-    coerce_fn_reification\n-    trait_self_implements_self\n-);"}, {"sha": "e19628fdf728a772dbea5231dd2a9fe068a733c9", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -469,7 +469,7 @@ fn iterate_inherent_methods<T>(\n                 // already happens in `is_valid_candidate` above; if not, we\n                 // check it here\n                 if receiver_ty.is_none() && inherent_impl_substs(db, impl_def, self_ty).is_none() {\n-                    test_utils::tested_by!(impl_self_type_match_without_receiver);\n+                    test_utils::mark::hit!(impl_self_type_match_without_receiver);\n                     continue;\n                 }\n                 if let Some(result) = callback(&self_ty.value, item) {"}, {"sha": "2cc4f4bf964c3168503c0b9af68501b4349b3815", "filename": "crates/ra_hir_ty/src/tests/coercion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fcoercion.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -1,6 +1,6 @@\n use super::infer_with_mismatches;\n use insta::assert_snapshot;\n-use test_utils::covers;\n+use test_utils::mark;\n \n // Infer with some common definitions and impls.\n fn infer(source: &str) -> String {\n@@ -339,7 +339,7 @@ fn test(i: i32) {\n \n #[test]\n fn coerce_merge_one_by_one1() {\n-    covers!(coerce_merge_fail_fallback);\n+    mark::check!(coerce_merge_fail_fallback);\n \n     assert_snapshot!(\n         infer(r#\"\n@@ -547,7 +547,7 @@ fn test() {\n \n #[test]\n fn coerce_fn_items_in_match_arms() {\n-    covers!(coerce_fn_reification);\n+    mark::check!(coerce_fn_reification);\n     assert_snapshot!(\n         infer_with_mismatches(r#\"\n fn foo1(x: u32) -> isize { 1 }"}, {"sha": "558a70022dce6ecb39ae37d6b77d498576c43818", "filename": "crates/ra_hir_ty/src/tests/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -984,7 +984,7 @@ fn test() { S2.into()<|>; }\n \n #[test]\n fn method_resolution_overloaded_method() {\n-    test_utils::covers!(impl_self_type_match_without_receiver);\n+    test_utils::mark::check!(impl_self_type_match_without_receiver);\n     let t = type_at(\n         r#\"\n //- main.rs"}, {"sha": "0c5f972a2c6eaa7eeb750be86773887b95f9942b", "filename": "crates/ra_hir_ty/src/tests/patterns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -1,5 +1,5 @@\n use insta::assert_snapshot;\n-use test_utils::covers;\n+use test_utils::mark;\n \n use super::{infer, infer_with_mismatches};\n \n@@ -197,7 +197,7 @@ fn test() {\n \n #[test]\n fn infer_pattern_match_ergonomics_ref() {\n-    covers!(match_ergonomics_ref);\n+    mark::check!(match_ergonomics_ref);\n     assert_snapshot!(\n         infer(r#\"\n fn test() {"}, {"sha": "1f004bd6301466fc60502b45f84bd43e707f39a5", "filename": "crates/ra_hir_ty/src/tests/regression.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -1,9 +1,10 @@\n use insta::assert_snapshot;\n-use test_utils::covers;\n+use ra_db::fixture::WithFixture;\n+use test_utils::mark;\n \n-use super::infer;\n use crate::test_db::TestDB;\n-use ra_db::fixture::WithFixture;\n+\n+use super::infer;\n \n #[test]\n fn bug_484() {\n@@ -89,8 +90,8 @@ fn quux() {\n \n #[test]\n fn recursive_vars() {\n-    covers!(type_var_cycles_resolve_completely);\n-    covers!(type_var_cycles_resolve_as_possible);\n+    mark::check!(type_var_cycles_resolve_completely);\n+    mark::check!(type_var_cycles_resolve_as_possible);\n     assert_snapshot!(\n         infer(r#\"\n fn test() {\n@@ -112,8 +113,6 @@ fn test() {\n \n #[test]\n fn recursive_vars_2() {\n-    covers!(type_var_cycles_resolve_completely);\n-    covers!(type_var_cycles_resolve_as_possible);\n     assert_snapshot!(\n         infer(r#\"\n fn test() {\n@@ -170,7 +169,7 @@ fn write() {\n \n #[test]\n fn infer_std_crash_2() {\n-    covers!(type_var_resolves_to_int_var);\n+    mark::check!(type_var_resolves_to_int_var);\n     // caused \"equating two type variables, ...\", taken from std\n     assert_snapshot!(\n         infer(r#\""}, {"sha": "34f4b9039cc3b44a53a15ce8651cbb37af773a86", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -1,10 +1,11 @@\n use insta::assert_snapshot;\n-\n use ra_db::fixture::WithFixture;\n+use test_utils::mark;\n \n-use super::{infer, infer_with_mismatches, type_at, type_at_pos};\n use crate::test_db::TestDB;\n \n+use super::{infer, infer_with_mismatches, type_at, type_at_pos};\n+\n #[test]\n fn infer_await() {\n     let (db, pos) = TestDB::with_position(\n@@ -301,7 +302,7 @@ fn test() {\n \n #[test]\n fn trait_default_method_self_bound_implements_trait() {\n-    test_utils::covers!(trait_self_implements_self);\n+    mark::check!(trait_self_implements_self);\n     assert_snapshot!(\n         infer(r#\"\n trait Trait {\n@@ -324,7 +325,6 @@ trait Trait {\n \n #[test]\n fn trait_default_method_self_bound_implements_super_trait() {\n-    test_utils::covers!(trait_self_implements_self);\n     assert_snapshot!(\n         infer(r#\"\n trait SuperTrait {"}, {"sha": "aa039e6fcdb23ce06ac024df338da684440764c5", "filename": "crates/ra_ide/src/call_info.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcall_info.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -5,7 +5,7 @@ use ra_syntax::{\n     ast::{self, ArgListOwner},\n     match_ast, AstNode, SyntaxNode, SyntaxToken,\n };\n-use test_utils::tested_by;\n+use test_utils::mark;\n \n use crate::{CallInfo, FilePosition, FunctionSignature};\n \n@@ -84,7 +84,7 @@ fn call_info_for_token(sema: &Semantics<RootDatabase>, token: SyntaxToken) -> Op\n \n                 let arg_list_range = arg_list.syntax().text_range();\n                 if !arg_list_range.contains_inclusive(token.text_range().start()) {\n-                    tested_by!(call_info_bad_offset);\n+                    mark::hit!(call_info_bad_offset);\n                     return None;\n                 }\n \n@@ -213,7 +213,7 @@ impl CallInfo {\n \n #[cfg(test)]\n mod tests {\n-    use test_utils::covers;\n+    use test_utils::mark;\n \n     use crate::mock_analysis::single_file_with_position;\n \n@@ -529,7 +529,7 @@ By default this method stops actor's `Context`.\"#\n \n     #[test]\n     fn call_info_bad_offset() {\n-        covers!(call_info_bad_offset);\n+        mark::check!(call_info_bad_offset);\n         let (analysis, position) = single_file_with_position(\n             r#\"fn foo(x: u32, y: u32) -> u32 {x + y}\n                fn bar() { foo <|> (3, ); }\"#,"}, {"sha": "02ac0166b6e12ee9c016045648151d66555f4d65", "filename": "crates/ra_ide/src/completion/complete_qualified_path.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -3,7 +3,7 @@\n use hir::{Adt, HasVisibility, PathResolution, ScopeDef};\n use ra_syntax::AstNode;\n use rustc_hash::FxHashSet;\n-use test_utils::tested_by;\n+use test_utils::mark;\n \n use crate::completion::{CompletionContext, Completions};\n \n@@ -40,7 +40,7 @@ pub(super) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                         if let Some(name_ref) = ctx.name_ref_syntax.as_ref() {\n                             if name_ref.syntax().text() == name.to_string().as_str() {\n                                 // for `use self::foo<|>`, don't suggest `foo` as a completion\n-                                tested_by!(dont_complete_current_use);\n+                                mark::hit!(dont_complete_current_use);\n                                 continue;\n                             }\n                         }\n@@ -147,7 +147,7 @@ pub(super) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n \n #[cfg(test)]\n mod tests {\n-    use test_utils::covers;\n+    use test_utils::mark;\n \n     use crate::completion::{test_utils::do_completion, CompletionItem, CompletionKind};\n     use insta::assert_debug_snapshot;\n@@ -158,7 +158,7 @@ mod tests {\n \n     #[test]\n     fn dont_complete_current_use() {\n-        covers!(dont_complete_current_use);\n+        mark::check!(dont_complete_current_use);\n         let completions = do_completion(r\"use self::foo<|>;\", CompletionKind::Reference);\n         assert!(completions.is_empty());\n     }"}, {"sha": "db791660a18a756727200f7aca1b57896de82f11", "filename": "crates/ra_ide/src/completion/complete_unqualified_path.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_unqualified_path.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -1,7 +1,7 @@\n //! Completion of names from the current scope, e.g. locals and imported items.\n \n use hir::ScopeDef;\n-use test_utils::tested_by;\n+use test_utils::mark;\n \n use crate::completion::{CompletionContext, Completions};\n use hir::{Adt, ModuleDef, Type};\n@@ -30,7 +30,7 @@ pub(super) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n         if ctx.use_item_syntax.is_some() {\n             if let (ScopeDef::Unknown, Some(name_ref)) = (&res, &ctx.name_ref_syntax) {\n                 if name_ref.syntax().text() == name.to_string().as_str() {\n-                    tested_by!(self_fulfilling_completion);\n+                    mark::hit!(self_fulfilling_completion);\n                     return;\n                 }\n             }\n@@ -66,7 +66,7 @@ fn complete_enum_variants(acc: &mut Completions, ctx: &CompletionContext, ty: &T\n #[cfg(test)]\n mod tests {\n     use insta::assert_debug_snapshot;\n-    use test_utils::covers;\n+    use test_utils::mark;\n \n     use crate::completion::{test_utils::do_completion, CompletionItem, CompletionKind};\n \n@@ -76,7 +76,7 @@ mod tests {\n \n     #[test]\n     fn self_fulfilling_completion() {\n-        covers!(self_fulfilling_completion);\n+        mark::check!(self_fulfilling_completion);\n         assert_debug_snapshot!(\n             do_reference_completion(\n                 r#\""}, {"sha": "440ffa31d4e0c9db6a10a0ee1b4c4d6c6e619294", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -3,7 +3,7 @@\n use hir::{Docs, HasAttrs, HasSource, HirDisplay, ModPath, ScopeDef, StructKind, Type};\n use ra_syntax::ast::NameOwner;\n use stdx::SepBy;\n-use test_utils::tested_by;\n+use test_utils::mark;\n \n use crate::{\n     completion::{\n@@ -121,7 +121,7 @@ impl Completions {\n                     _ => false,\n                 };\n                 if has_non_default_type_params {\n-                    tested_by!(inserts_angle_brackets_for_generics);\n+                    mark::hit!(inserts_angle_brackets_for_generics);\n                     completion_item = completion_item\n                         .lookup_by(local_name.clone())\n                         .label(format!(\"{}<\u2026>\", local_name))\n@@ -176,7 +176,7 @@ impl Completions {\n             }\n             None if needs_bang => builder.insert_text(format!(\"{}!\", name)),\n             _ => {\n-                tested_by!(dont_insert_macro_call_parens_unncessary);\n+                mark::hit!(dont_insert_macro_call_parens_unncessary);\n                 builder.insert_text(name)\n             }\n         };\n@@ -330,14 +330,14 @@ pub(crate) fn compute_score(\n     // FIXME: this should not fall back to string equality.\n     let ty = &ty.display(ctx.db).to_string();\n     let (active_name, active_type) = if let Some(record_field) = &ctx.record_field_syntax {\n-        tested_by!(test_struct_field_completion_in_record_lit);\n+        mark::hit!(test_struct_field_completion_in_record_lit);\n         let (struct_field, _local) = ctx.sema.resolve_record_field(record_field)?;\n         (\n             struct_field.name(ctx.db).to_string(),\n             struct_field.signature_ty(ctx.db).display(ctx.db).to_string(),\n         )\n     } else if let Some(active_parameter) = &ctx.active_parameter {\n-        tested_by!(test_struct_field_completion_in_func_call);\n+        mark::hit!(test_struct_field_completion_in_func_call);\n         (active_parameter.name.clone(), active_parameter.ty.clone())\n     } else {\n         return None;\n@@ -398,7 +398,7 @@ impl Builder {\n             None => return self,\n         };\n         // If not an import, add parenthesis automatically.\n-        tested_by!(inserts_parens_for_function_calls);\n+        mark::hit!(inserts_parens_for_function_calls);\n \n         let (snippet, label) = if params.is_empty() {\n             (format!(\"{}()$0\", name), format!(\"{}()\", name))\n@@ -457,7 +457,7 @@ fn guess_macro_braces(macro_name: &str, docs: &str) -> (&'static str, &'static s\n #[cfg(test)]\n mod tests {\n     use insta::assert_debug_snapshot;\n-    use test_utils::covers;\n+    use test_utils::mark;\n \n     use crate::completion::{\n         test_utils::{do_completion, do_completion_with_options},\n@@ -607,7 +607,7 @@ mod tests {\n \n     #[test]\n     fn inserts_parens_for_function_calls() {\n-        covers!(inserts_parens_for_function_calls);\n+        mark::check!(inserts_parens_for_function_calls);\n         assert_debug_snapshot!(\n             do_reference_completion(\n                 r\"\n@@ -992,7 +992,7 @@ mod tests {\n \n     #[test]\n     fn inserts_angle_brackets_for_generics() {\n-        covers!(inserts_angle_brackets_for_generics);\n+        mark::check!(inserts_angle_brackets_for_generics);\n         assert_debug_snapshot!(\n             do_reference_completion(\n                 r\"\n@@ -1115,7 +1115,7 @@ mod tests {\n \n     #[test]\n     fn dont_insert_macro_call_parens_unncessary() {\n-        covers!(dont_insert_macro_call_parens_unncessary);\n+        mark::check!(dont_insert_macro_call_parens_unncessary);\n         assert_debug_snapshot!(\n             do_reference_completion(\n                 r\"\n@@ -1181,7 +1181,7 @@ mod tests {\n \n     #[test]\n     fn test_struct_field_completion_in_func_call() {\n-        covers!(test_struct_field_completion_in_func_call);\n+        mark::check!(test_struct_field_completion_in_func_call);\n         assert_debug_snapshot!(\n         do_reference_completion(\n                 r\"\n@@ -1271,7 +1271,7 @@ mod tests {\n \n     #[test]\n     fn test_struct_field_completion_in_record_lit() {\n-        covers!(test_struct_field_completion_in_record_lit);\n+        mark::check!(test_struct_field_completion_in_record_lit);\n         assert_debug_snapshot!(\n         do_reference_completion(\n                 r\""}, {"sha": "90e85d4197126f12f0aba169c477a15b2e2a8978", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -93,7 +93,7 @@ pub(crate) fn reference_definition(\n \n #[cfg(test)]\n mod tests {\n-    use test_utils::{assert_eq_text, covers};\n+    use test_utils::assert_eq_text;\n \n     use crate::mock_analysis::analysis_and_position;\n \n@@ -208,7 +208,6 @@ mod tests {\n \n     #[test]\n     fn goto_def_for_macros() {\n-        covers!(ra_ide_db::goto_def_for_macros);\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -225,7 +224,6 @@ mod tests {\n \n     #[test]\n     fn goto_def_for_macros_from_other_crates() {\n-        covers!(ra_ide_db::goto_def_for_macros);\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -245,7 +243,6 @@ mod tests {\n \n     #[test]\n     fn goto_def_for_use_alias() {\n-        covers!(ra_ide_db::goto_def_for_use_alias);\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -370,7 +367,6 @@ mod tests {\n \n     #[test]\n     fn goto_def_for_methods() {\n-        covers!(ra_ide_db::goto_def_for_methods);\n         check_goto(\n             \"\n             //- /lib.rs\n@@ -390,7 +386,6 @@ mod tests {\n \n     #[test]\n     fn goto_def_for_fields() {\n-        covers!(ra_ide_db::goto_def_for_fields);\n         check_goto(\n             r\"\n             //- /lib.rs\n@@ -409,7 +404,6 @@ mod tests {\n \n     #[test]\n     fn goto_def_for_record_fields() {\n-        covers!(ra_ide_db::goto_def_for_record_fields);\n         check_goto(\n             r\"\n             //- /lib.rs\n@@ -430,7 +424,6 @@ mod tests {\n \n     #[test]\n     fn goto_def_for_record_pat_fields() {\n-        covers!(ra_ide_db::goto_def_for_record_field_pats);\n         check_goto(\n             r\"\n             //- /lib.rs\n@@ -873,7 +866,6 @@ mod tests {\n \n     #[test]\n     fn goto_def_for_field_init_shorthand() {\n-        covers!(ra_ide_db::goto_def_for_field_init_shorthand);\n         check_goto(\n             \"\n             //- /lib.rs"}, {"sha": "83cb498f79ede436cdb8fdf0ffeffdf8855c1632", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -42,8 +42,6 @@ mod inlay_hints;\n mod expand_macro;\n mod ssr;\n \n-#[cfg(test)]\n-mod marks;\n #[cfg(test)]\n mod test_utils;\n "}, {"sha": "51ca4dde3f0017f19b5c338af1a11d7b78b6ee8f", "filename": "crates/ra_ide/src/marks.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4d3fd62f897da50db1b203b86f45b9d2cd272b4d/crates%2Fra_ide%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3fd62f897da50db1b203b86f45b9d2cd272b4d/crates%2Fra_ide%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fmarks.rs?ref=4d3fd62f897da50db1b203b86f45b9d2cd272b4d", "patch": "@@ -1,16 +0,0 @@\n-//! See test_utils/src/marks.rs\n-\n-test_utils::marks!(\n-    inserts_angle_brackets_for_generics\n-    inserts_parens_for_function_calls\n-    call_info_bad_offset\n-    dont_complete_current_use\n-    test_resolve_parent_module_on_module_decl\n-    search_filters_by_range\n-    dont_insert_macro_call_parens_unncessary\n-    self_fulfilling_completion\n-    test_struct_field_completion_in_func_call\n-    test_struct_field_completion_in_record_lit\n-    test_rename_struct_field_for_shorthand\n-    test_rename_local_for_field_shorthand\n-);"}, {"sha": "a083fb1eb35890f0cd460357b3b13c6b7b3bdda7", "filename": "crates/ra_ide/src/parent_module.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_ide%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_ide%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fparent_module.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -7,7 +7,7 @@ use ra_syntax::{\n     algo::find_node_at_offset,\n     ast::{self, AstNode},\n };\n-use test_utils::tested_by;\n+use test_utils::mark;\n \n use crate::NavigationTarget;\n \n@@ -25,7 +25,7 @@ pub(crate) fn parent_module(db: &RootDatabase, position: FilePosition) -> Vec<Na\n             .item_list()\n             .map_or(false, |it| it.syntax().text_range().contains_inclusive(position.offset))\n         {\n-            tested_by!(test_resolve_parent_module_on_module_decl);\n+            mark::hit!(test_resolve_parent_module_on_module_decl);\n             module = m.syntax().ancestors().skip(1).find_map(ast::Module::cast);\n         }\n     }\n@@ -57,7 +57,7 @@ pub(crate) fn crate_for(db: &RootDatabase, file_id: FileId) -> Vec<CrateId> {\n mod tests {\n     use ra_cfg::CfgOptions;\n     use ra_db::Env;\n-    use test_utils::covers;\n+    use test_utils::mark;\n \n     use crate::{\n         mock_analysis::{analysis_and_position, MockAnalysis},\n@@ -81,7 +81,7 @@ mod tests {\n \n     #[test]\n     fn test_resolve_parent_module_on_module_decl() {\n-        covers!(test_resolve_parent_module_on_module_decl);\n+        mark::check!(test_resolve_parent_module_on_module_decl);\n         let (analysis, pos) = analysis_and_position(\n             \"\n             //- /lib.rs"}, {"sha": "96444bf6a52d2f8a72767d4deb322dc924d084ac", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -190,8 +190,6 @@ fn get_struct_def_name_for_struct_literal_search(\n \n #[cfg(test)]\n mod tests {\n-    use test_utils::covers;\n-\n     use crate::{\n         mock_analysis::{analysis_and_position, single_file_with_position, MockAnalysis},\n         Declaration, Reference, ReferenceSearchResult, SearchScope,\n@@ -301,7 +299,6 @@ mod tests {\n \n     #[test]\n     fn search_filters_by_range() {\n-        covers!(ra_ide_db::search_filters_by_range);\n         let code = r#\"\n             fn foo() {\n                 let spam<|> = 92;"}, {"sha": "62ec8d85dd2a4af6dbb7d143dbdae6f66254c279", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -9,7 +9,7 @@ use ra_syntax::{\n };\n use ra_text_edit::TextEdit;\n use std::convert::TryInto;\n-use test_utils::tested_by;\n+use test_utils::mark;\n \n use crate::{\n     references::find_all_refs, FilePosition, FileSystemEdit, RangeInfo, Reference, ReferenceKind,\n@@ -57,13 +57,13 @@ fn source_edit_from_reference(reference: Reference, new_name: &str) -> SourceFil\n     let file_id = reference.file_range.file_id;\n     let range = match reference.kind {\n         ReferenceKind::FieldShorthandForField => {\n-            tested_by!(test_rename_struct_field_for_shorthand);\n+            mark::hit!(test_rename_struct_field_for_shorthand);\n             replacement_text.push_str(new_name);\n             replacement_text.push_str(\": \");\n             TextRange::new(reference.file_range.range.start(), reference.file_range.range.start())\n         }\n         ReferenceKind::FieldShorthandForLocal => {\n-            tested_by!(test_rename_local_for_field_shorthand);\n+            mark::hit!(test_rename_local_for_field_shorthand);\n             replacement_text.push_str(\": \");\n             replacement_text.push_str(new_name);\n             TextRange::new(reference.file_range.range.end(), reference.file_range.range.end())\n@@ -260,7 +260,7 @@ fn rename_reference(\n mod tests {\n     use insta::assert_debug_snapshot;\n     use ra_text_edit::TextEditBuilder;\n-    use test_utils::{assert_eq_text, covers};\n+    use test_utils::{assert_eq_text, mark};\n \n     use crate::{\n         mock_analysis::analysis_and_position, mock_analysis::single_file_with_position, FileId,\n@@ -492,7 +492,7 @@ mod tests {\n \n     #[test]\n     fn test_rename_struct_field_for_shorthand() {\n-        covers!(test_rename_struct_field_for_shorthand);\n+        mark::check!(test_rename_struct_field_for_shorthand);\n         test_rename(\n             r#\"\n     struct Foo {\n@@ -522,7 +522,7 @@ mod tests {\n \n     #[test]\n     fn test_rename_local_for_field_shorthand() {\n-        covers!(test_rename_local_for_field_shorthand);\n+        mark::check!(test_rename_local_for_field_shorthand);\n         test_rename(\n             r#\"\n     struct Foo {"}, {"sha": "8b06cbfc54b7ca8681708f783e216ff77cad68b4", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -14,7 +14,6 @@ use ra_syntax::{\n     ast::{self, AstNode},\n     match_ast,\n };\n-use test_utils::tested_by;\n \n use crate::RootDatabase;\n \n@@ -118,7 +117,6 @@ fn classify_name_inner(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Opti\n     match_ast! {\n         match parent {\n             ast::Alias(it) => {\n-                tested_by!(goto_def_for_use_alias; force);\n                 let use_tree = it.syntax().parent().and_then(ast::UseTree::cast)?;\n                 let path = use_tree.path()?;\n                 let path_segment = path.segment()?;\n@@ -203,6 +201,8 @@ impl NameRefClass {\n     }\n }\n \n+// Note: we don't have unit-tests for this rather important function.\n+// It is primarily exercised via goto definition tests in `ra_ide`.\n pub fn classify_name_ref(\n     sema: &Semantics<RootDatabase>,\n     name_ref: &ast::NameRef,\n@@ -212,22 +212,18 @@ pub fn classify_name_ref(\n     let parent = name_ref.syntax().parent()?;\n \n     if let Some(method_call) = ast::MethodCallExpr::cast(parent.clone()) {\n-        tested_by!(goto_def_for_methods; force);\n         if let Some(func) = sema.resolve_method_call(&method_call) {\n             return Some(NameRefClass::Definition(Definition::ModuleDef(func.into())));\n         }\n     }\n \n     if let Some(field_expr) = ast::FieldExpr::cast(parent.clone()) {\n-        tested_by!(goto_def_for_fields; force);\n         if let Some(field) = sema.resolve_field(&field_expr) {\n             return Some(NameRefClass::Definition(Definition::Field(field)));\n         }\n     }\n \n     if let Some(record_field) = ast::RecordField::for_field_name(name_ref) {\n-        tested_by!(goto_def_for_record_fields; force);\n-        tested_by!(goto_def_for_field_init_shorthand; force);\n         if let Some((field, local)) = sema.resolve_record_field(&record_field) {\n             let field = Definition::Field(field);\n             let res = match local {\n@@ -239,15 +235,13 @@ pub fn classify_name_ref(\n     }\n \n     if let Some(record_field_pat) = ast::RecordFieldPat::cast(parent.clone()) {\n-        tested_by!(goto_def_for_record_field_pats; force);\n         if let Some(field) = sema.resolve_record_field_pat(&record_field_pat) {\n             let field = Definition::Field(field);\n             return Some(NameRefClass::Definition(field));\n         }\n     }\n \n     if let Some(macro_call) = parent.ancestors().find_map(ast::MacroCall::cast) {\n-        tested_by!(goto_def_for_macros; force);\n         if let Some(macro_def) = sema.resolve_macro_call(&macro_call) {\n             return Some(NameRefClass::Definition(Definition::Macro(macro_def)));\n         }"}, {"sha": "4f37954bf7f09e4d354f2cc55d43412a9f9aac2c", "filename": "crates/ra_ide_db/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Flib.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -2,7 +2,6 @@\n //!\n //! It is mainly a `HirDatabase` for semantic analysis, plus a `SymbolsDatabase`, for fuzzy search.\n \n-pub mod marks;\n pub mod line_index;\n pub mod line_index_utils;\n pub mod symbol_index;"}, {"sha": "386fe605c74884c7ee29657b7443c0ddb48ff74a", "filename": "crates/ra_ide_db/src/marks.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4d3fd62f897da50db1b203b86f45b9d2cd272b4d/crates%2Fra_ide_db%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3fd62f897da50db1b203b86f45b9d2cd272b4d/crates%2Fra_ide_db%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fmarks.rs?ref=4d3fd62f897da50db1b203b86f45b9d2cd272b4d", "patch": "@@ -1,12 +0,0 @@\n-//! See test_utils/src/marks.rs\n-\n-test_utils::marks![\n-    goto_def_for_macros\n-    goto_def_for_use_alias\n-    goto_def_for_methods\n-    goto_def_for_fields\n-    goto_def_for_record_fields\n-    goto_def_for_field_init_shorthand\n-    goto_def_for_record_field_pats\n-    search_filters_by_range\n-];"}, {"sha": "589f4477192609a13f94807bf3ecf384ad77754a", "filename": "crates/ra_ide_db/src/search.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsearch.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -12,7 +12,6 @@ use ra_db::{FileId, FileRange, SourceDatabaseExt};\n use ra_prof::profile;\n use ra_syntax::{ast, match_ast, AstNode, TextRange, TextSize};\n use rustc_hash::FxHashMap;\n-use test_utils::tested_by;\n \n use crate::{\n     defs::{classify_name_ref, Definition, NameRefClass},\n@@ -209,7 +208,6 @@ impl Definition {\n             for (idx, _) in text.match_indices(pat) {\n                 let offset: TextSize = idx.try_into().unwrap();\n                 if !search_range.contains_inclusive(offset) {\n-                    tested_by!(search_filters_by_range; force);\n                     continue;\n                 }\n "}, {"sha": "be2cfbaa24d0db32bac6eeefcd2ccf8e6c243d6c", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -7,7 +7,7 @@\n //! * marks (see the eponymous module).\n \n #[macro_use]\n-pub mod marks;\n+pub mod mark;\n \n use std::{\n     fs,"}, {"sha": "7c309a89458994f03207e9a71ced529bcc2eedbf", "filename": "crates/test_utils/src/mark.rs", "status": "renamed", "additions": 17, "deletions": 29, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Ftest_utils%2Fsrc%2Fmark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3373629cd80404388c5da52f991e18f2d715d8d/crates%2Ftest_utils%2Fsrc%2Fmark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fmark.rs?ref=e3373629cd80404388c5da52f991e18f2d715d8d", "patch": "@@ -7,18 +7,18 @@\n //! ```\n //! #[test]\n //! fn test_foo() {\n-//!     covers!(test_foo);\n+//!     mark::check!(test_foo);\n //! }\n //! ```\n //!\n //! and in the code under test you write\n //!\n //! ```\n-//! # use test_utils::tested_by;\n+//! # use test_utils::mark;\n //! # fn some_condition() -> bool { true }\n //! fn foo() {\n //!     if some_condition() {\n-//!         tested_by!(test_foo);\n+//!         mark::hit!(test_foo);\n //!     }\n //! }\n //! ```\n@@ -29,43 +29,31 @@\n use std::sync::atomic::{AtomicUsize, Ordering};\n \n #[macro_export]\n-macro_rules! tested_by {\n-    ($ident:ident; force) => {{\n-        {\n-            // sic! use call-site crate\n-            crate::marks::$ident.fetch_add(1, std::sync::atomic::Ordering::SeqCst);\n-        }\n-    }};\n+macro_rules! _hit {\n     ($ident:ident) => {{\n         #[cfg(test)]\n         {\n-            // sic! use call-site crate\n-            crate::marks::$ident.fetch_add(1, std::sync::atomic::Ordering::SeqCst);\n+            extern \"C\" {\n+                #[no_mangle]\n+                static $ident: std::sync::atomic::AtomicUsize;\n+            }\n+            unsafe {\n+                $ident.fetch_add(1, std::sync::atomic::Ordering::SeqCst);\n+            }\n         }\n     }};\n }\n+pub use _hit as hit;\n \n #[macro_export]\n-macro_rules! covers {\n-    // sic! use call-site crate\n+macro_rules! _check {\n     ($ident:ident) => {\n-        $crate::covers!(crate::$ident)\n-    };\n-    ($krate:ident :: $ident:ident) => {\n-        let _checker = $crate::marks::MarkChecker::new(&$krate::marks::$ident);\n-    };\n-}\n-\n-#[macro_export]\n-macro_rules! marks {\n-    ($($ident:ident)*) => {\n-        $(\n-        #[allow(bad_style)]\n-        pub static $ident: std::sync::atomic::AtomicUsize =\n-            std::sync::atomic::AtomicUsize::new(0);\n-        )*\n+        #[no_mangle]\n+        static $ident: std::sync::atomic::AtomicUsize = std::sync::atomic::AtomicUsize::new(0);\n+        let _checker = $crate::mark::MarkChecker::new(&$ident);\n     };\n }\n+pub use _check as check;\n \n pub struct MarkChecker {\n     mark: &'static AtomicUsize,", "previous_filename": "crates/test_utils/src/marks.rs"}]}