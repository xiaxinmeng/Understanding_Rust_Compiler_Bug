{"sha": "279a229414bea59804548f8c7606c518a15261e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3OWEyMjk0MTRiZWE1OTgwNDU0OGY4Yzc2MDZjNTE4YTE1MjYxZTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-27T21:54:59Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-27T23:30:27Z"}, "message": "Move metadata tag definition to metadata::defs", "tree": {"sha": "a4430141415968c28c2aa06e1974a98e32f94cb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4430141415968c28c2aa06e1974a98e32f94cb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/279a229414bea59804548f8c7606c518a15261e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/279a229414bea59804548f8c7606c518a15261e2", "html_url": "https://github.com/rust-lang/rust/commit/279a229414bea59804548f8c7606c518a15261e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/279a229414bea59804548f8c7606c518a15261e2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c23e09454e994ba7b2d2d75ca73a163e0fff998", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c23e09454e994ba7b2d2d75ca73a163e0fff998", "html_url": "https://github.com/rust-lang/rust/commit/6c23e09454e994ba7b2d2d75ca73a163e0fff998"}], "stats": {"total": 169, "additions": 77, "deletions": 92}, "files": [{"sha": "5b4fe44fe1684023c10c80e75f156114d177c895", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/279a229414bea59804548f8c7606c518a15261e2/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279a229414bea59804548f8c7606c518a15261e2/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=279a229414bea59804548f8c7606c518a15261e2", "patch": "@@ -30,6 +30,7 @@ import std::option::none;\n import std::option::some;\n import std::os;\n import std::map::hashmap;\n+import defs::*;\n \n export get_symbol;\n export get_tag_variants;\n@@ -404,15 +405,15 @@ fn parse_def_id(vec[u8] buf) -> ast::def_id {\n \n fn lookup_hash(&ebml::doc d, fn(vec[u8]) -> bool  eq_fn, uint hash) ->\n    vec[ebml::doc] {\n-    auto index = ebml::get_doc(d, cwriter::tag_index);\n-    auto table = ebml::get_doc(index, cwriter::tag_index_table);\n+    auto index = ebml::get_doc(d, tag_index);\n+    auto table = ebml::get_doc(index, tag_index_table);\n     auto hash_pos = table.start + hash % 256u * 4u;\n     auto pos = ebml::be_uint_from_bytes(d.data, hash_pos, 4u);\n     auto bucket = ebml::doc_at(d.data, pos);\n     // Awkward logic because we can't ret from foreach yet\n \n     let vec[ebml::doc] result = [];\n-    auto belt = cwriter::tag_index_buckets_bucket_elt;\n+    auto belt = tag_index_buckets_bucket_elt;\n     for each (ebml::doc elt in ebml::tagged_docs(bucket, belt)) {\n         auto pos = ebml::be_uint_from_bytes(elt.data, elt.start, 4u);\n         if (eq_fn(vec::slice[u8](elt.data, elt.start + 4u, elt.end))) {\n@@ -431,11 +432,11 @@ fn resolve_path(vec[ast::ident] path, vec[u8] data) -> vec[ast::def_id] {\n     }\n     auto s = str::connect(path, \"::\");\n     auto md = ebml::new_doc(data);\n-    auto paths = ebml::get_doc(md, cwriter::tag_paths);\n+    auto paths = ebml::get_doc(md, tag_paths);\n     auto eqer = bind eq_item(_, s);\n     let vec[ast::def_id] result = [];\n     for (ebml::doc doc in lookup_hash(paths, eqer, cwriter::hash_path(s))) {\n-        auto did_doc = ebml::get_doc(doc, cwriter::tag_def_id);\n+        auto did_doc = ebml::get_doc(doc, tag_def_id);\n         vec::push(result, parse_def_id(ebml::doc_data(did_doc)));\n     }\n     ret result;\n@@ -460,22 +461,22 @@ fn find_item(int item_id, &ebml::doc items) -> ebml::doc {\n // Looks up an item in the given metadata and returns an ebml doc pointing\n // to the item data.\n fn lookup_item(int item_id, vec[u8] data) -> ebml::doc {\n-    auto items = ebml::get_doc(ebml::new_doc(data), cwriter::tag_items);\n+    auto items = ebml::get_doc(ebml::new_doc(data), tag_items);\n     ret find_item(item_id, items);\n }\n \n fn item_kind(&ebml::doc item) -> u8 {\n-    auto kind = ebml::get_doc(item, cwriter::tag_items_data_item_kind);\n+    auto kind = ebml::get_doc(item, tag_items_data_item_kind);\n     ret ebml::doc_as_uint(kind) as u8;\n }\n \n fn item_symbol(&ebml::doc item) -> str {\n-    auto sym = ebml::get_doc(item, cwriter::tag_items_data_item_symbol);\n+    auto sym = ebml::get_doc(item, tag_items_data_item_symbol);\n     ret str::unsafe_from_bytes(ebml::doc_data(sym));\n }\n \n fn variant_tag_id(&ebml::doc d) -> ast::def_id {\n-    auto tagdoc = ebml::get_doc(d, cwriter::tag_items_data_item_tag_id);\n+    auto tagdoc = ebml::get_doc(d, tag_items_data_item_tag_id);\n     ret parse_def_id(ebml::doc_data(tagdoc));\n }\n \n@@ -490,15 +491,15 @@ fn item_type(&ebml::doc item, int this_cnum, ty::ctxt tcx) -> ty::t {\n         auto external_def_id = parse_def_id(buf);\n         ret tup(this_cnum, external_def_id._1);\n     }\n-    auto tp = ebml::get_doc(item, cwriter::tag_items_data_item_type);\n+    auto tp = ebml::get_doc(item, tag_items_data_item_type);\n     auto s = str::unsafe_from_bytes(ebml::doc_data(tp));\n     ret parse_ty_data(item.data, this_cnum, tp.start, tp.end - tp.start,\n                       bind parse_external_def_id(this_cnum, _), tcx);\n }\n \n fn item_ty_param_count(&ebml::doc item, int this_cnum) -> uint {\n     let uint ty_param_count = 0u;\n-    auto tp = cwriter::tag_items_data_item_ty_param_count;\n+    auto tp = tag_items_data_item_ty_param_count;\n     for each (ebml::doc p in ebml::tagged_docs(item, tp)) {\n         ty_param_count = ebml::vint_at(ebml::doc_data(p), 0u)._0;\n     }\n@@ -507,7 +508,7 @@ fn item_ty_param_count(&ebml::doc item, int this_cnum) -> uint {\n \n fn tag_variant_ids(&ebml::doc item, int this_cnum) -> vec[ast::def_id] {\n     let vec[ast::def_id] ids = [];\n-    auto v = cwriter::tag_items_data_item_variant;\n+    auto v = tag_items_data_item_variant;\n     for each (ebml::doc p in ebml::tagged_docs(item, v)) {\n         auto ext = parse_def_id(ebml::doc_data(p));\n         vec::push[ast::def_id](ids, tup(this_cnum, ext._1));\n@@ -538,12 +539,12 @@ fn get_metadata_section(str filename) -> option::t[vec[u8]] {\n fn get_exported_metadata(&session::session sess, &str path, &vec[u8] data) ->\n    hashmap[str, str] {\n     auto meta_items =\n-        ebml::get_doc(ebml::new_doc(data), cwriter::tag_meta_export);\n+        ebml::get_doc(ebml::new_doc(data), tag_meta_export);\n     auto mm = common::new_str_hash[str]();\n     for each (ebml::doc m in\n-             ebml::tagged_docs(meta_items, cwriter::tag_meta_item)) {\n-        auto kd = ebml::get_doc(m, cwriter::tag_meta_item_key);\n-        auto vd = ebml::get_doc(m, cwriter::tag_meta_item_value);\n+             ebml::tagged_docs(meta_items, tag_meta_item)) {\n+        auto kd = ebml::get_doc(m, tag_meta_item_key);\n+        auto vd = ebml::get_doc(m, tag_meta_item_value);\n         auto k = str::unsafe_from_bytes(ebml::doc_data(kd));\n         auto v = str::unsafe_from_bytes(ebml::doc_data(vd));\n         log #fmt(\"metadata in %s: %s = %s\", path, k, v);\n@@ -807,7 +808,7 @@ fn get_symbol(session::session sess, ast::def_id def) -> str {\n fn get_tag_variants(ty::ctxt tcx, ast::def_id def) -> vec[ty::variant_info] {\n     auto external_crate_id = def._0;\n     auto data = tcx.sess.get_external_crate(external_crate_id).data;\n-    auto items = ebml::get_doc(ebml::new_doc(data), cwriter::tag_items);\n+    auto items = ebml::get_doc(ebml::new_doc(data), tag_items);\n     auto item = find_item(def._1, items);\n     let vec[ty::variant_info] infos = [];\n     auto variant_ids = tag_variant_ids(item, external_crate_id);\n@@ -848,17 +849,17 @@ fn read_path(&ebml::doc d) -> tup(str, uint) {\n \n fn list_crate_metadata(vec[u8] bytes, io::writer out) {\n     auto md = ebml::new_doc(bytes);\n-    auto paths = ebml::get_doc(md, cwriter::tag_paths);\n-    auto items = ebml::get_doc(md, cwriter::tag_items);\n-    auto index = ebml::get_doc(paths, cwriter::tag_index);\n-    auto bs = ebml::get_doc(index, cwriter::tag_index_buckets);\n+    auto paths = ebml::get_doc(md, tag_paths);\n+    auto items = ebml::get_doc(md, tag_items);\n+    auto index = ebml::get_doc(paths, tag_index);\n+    auto bs = ebml::get_doc(index, tag_index_buckets);\n     for each (ebml::doc bucket in\n-             ebml::tagged_docs(bs, cwriter::tag_index_buckets_bucket)) {\n-        auto et = cwriter::tag_index_buckets_bucket_elt;\n+             ebml::tagged_docs(bs, tag_index_buckets_bucket)) {\n+        auto et = tag_index_buckets_bucket_elt;\n         for each (ebml::doc elt in ebml::tagged_docs(bucket, et)) {\n             auto data = read_path(elt);\n             auto def = ebml::doc_at(bytes, data._1);\n-            auto did_doc = ebml::get_doc(def, cwriter::tag_def_id);\n+            auto did_doc = ebml::get_doc(def, tag_def_id);\n             auto did = parse_def_id(ebml::doc_data(did_doc));\n             out.write_str(#fmt(\"%s (%s)\\n\", data._0,\n                                describe_def(items, did)));"}, {"sha": "ef605da77ce4a0eb2ed67978e9fc498dbf7852cd", "filename": "src/comp/metadata/cwriter.rs", "status": "modified", "additions": 1, "deletions": 68, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/279a229414bea59804548f8c7606c518a15261e2/src%2Fcomp%2Fmetadata%2Fcwriter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279a229414bea59804548f8c7606c518a15261e2/src%2Fcomp%2Fmetadata%2Fcwriter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcwriter.rs?ref=279a229414bea59804548f8c7606c518a15261e2", "patch": "@@ -19,83 +19,16 @@ import pretty::ppaux::lit_to_str;\n import lib::llvm::llvm;\n import lib::llvm::llvm::ValueRef;\n import lib::llvm::False;\n+import defs::*;\n \n export ac_no_abbrevs;\n export def_to_str;\n export encode;\n export hash_def_id;\n export hash_path;\n-export tag_def_id;\n-export tag_index;\n-export tag_index_table;\n-export tag_index_buckets;\n-export tag_index_buckets_bucket;\n-export tag_index_buckets_bucket_elt;\n-export tag_items;\n-export tag_items_data_item_kind;\n-export tag_items_data_item_symbol;\n-export tag_items_data_item_tag_id;\n-export tag_items_data_item_type;\n-export tag_items_data_item_ty_param_count;\n-export tag_items_data_item_variant;\n-export tag_meta_export;\n-export tag_meta_item;\n-export tag_meta_item_key;\n-export tag_meta_item_value;\n-export tag_paths;\n export ty_abbrev;\n export write_metadata;\n \n-const uint tag_paths = 0x01u;\n-\n-const uint tag_items = 0x02u;\n-\n-const uint tag_paths_data = 0x03u;\n-\n-const uint tag_paths_data_name = 0x04u;\n-\n-const uint tag_paths_data_item = 0x05u;\n-\n-const uint tag_paths_data_mod = 0x06u;\n-\n-const uint tag_def_id = 0x07u;\n-\n-const uint tag_items_data = 0x08u;\n-\n-const uint tag_items_data_item = 0x09u;\n-\n-const uint tag_items_data_item_kind = 0x0au;\n-\n-const uint tag_items_data_item_ty_param_count = 0x0bu;\n-\n-const uint tag_items_data_item_type = 0x0cu;\n-\n-const uint tag_items_data_item_symbol = 0x0du;\n-\n-const uint tag_items_data_item_variant = 0x0eu;\n-\n-const uint tag_items_data_item_tag_id = 0x0fu;\n-\n-const uint tag_index = 0x11u;\n-\n-const uint tag_index_buckets = 0x12u;\n-\n-const uint tag_index_buckets_bucket = 0x13u;\n-\n-const uint tag_index_buckets_bucket_elt = 0x14u;\n-\n-const uint tag_index_table = 0x15u;\n-\n-const uint tag_meta_export = 0x16u;\n-\n-const uint tag_meta_local = 0x17u;\n-\n-const uint tag_meta_item = 0x18u;\n-\n-const uint tag_meta_item_key = 0x19u;\n-\n-const uint tag_meta_item_value = 0x20u;\n-\n \n // Returns a Plain Old LLVM String:\n fn C_postr(&str s) -> ValueRef {"}, {"sha": "1584ee46c5b500f709912eefd71823a2db4dc11e", "filename": "src/comp/metadata/defs.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/279a229414bea59804548f8c7606c518a15261e2/src%2Fcomp%2Fmetadata%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279a229414bea59804548f8c7606c518a15261e2/src%2Fcomp%2Fmetadata%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdefs.rs?ref=279a229414bea59804548f8c7606c518a15261e2", "patch": "@@ -0,0 +1,50 @@\n+\n+const uint tag_paths = 0x01u;\n+\n+const uint tag_items = 0x02u;\n+\n+const uint tag_paths_data = 0x03u;\n+\n+const uint tag_paths_data_name = 0x04u;\n+\n+const uint tag_paths_data_item = 0x05u;\n+\n+const uint tag_paths_data_mod = 0x06u;\n+\n+const uint tag_def_id = 0x07u;\n+\n+const uint tag_items_data = 0x08u;\n+\n+const uint tag_items_data_item = 0x09u;\n+\n+const uint tag_items_data_item_kind = 0x0au;\n+\n+const uint tag_items_data_item_ty_param_count = 0x0bu;\n+\n+const uint tag_items_data_item_type = 0x0cu;\n+\n+const uint tag_items_data_item_symbol = 0x0du;\n+\n+const uint tag_items_data_item_variant = 0x0eu;\n+\n+const uint tag_items_data_item_tag_id = 0x0fu;\n+\n+const uint tag_index = 0x11u;\n+\n+const uint tag_index_buckets = 0x12u;\n+\n+const uint tag_index_buckets_bucket = 0x13u;\n+\n+const uint tag_index_buckets_bucket_elt = 0x14u;\n+\n+const uint tag_index_table = 0x15u;\n+\n+const uint tag_meta_export = 0x16u;\n+\n+const uint tag_meta_local = 0x17u;\n+\n+const uint tag_meta_item = 0x18u;\n+\n+const uint tag_meta_item_key = 0x19u;\n+\n+const uint tag_meta_item_value = 0x20u;"}, {"sha": "8310bee8123f34e0eb4bd1c0d7cdcd1a1969ff21", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/279a229414bea59804548f8c7606c518a15261e2/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/279a229414bea59804548f8c7606c518a15261e2/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=279a229414bea59804548f8c7606c518a15261e2", "patch": "@@ -63,6 +63,7 @@ mod back {\n }\n \n mod metadata {\n+    mod defs;\n     mod tyencode;\n     mod creader;\n     mod cwriter;"}]}