{"sha": "7d56131e831baf6053b5ae3021d11f3b622c3862", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNTYxMzFlODMxYmFmNjA1M2I1YWUzMDIxZDExZjNiNjIyYzM4NjI=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2017-11-29T11:38:07Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-13T11:03:27Z"}, "message": "Mir typeck Cast for ReifyFnPtr value", "tree": {"sha": "304871634b334ca24cef11e592d4cdc7bc1873a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/304871634b334ca24cef11e592d4cdc7bc1873a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d56131e831baf6053b5ae3021d11f3b622c3862", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d56131e831baf6053b5ae3021d11f3b622c3862", "html_url": "https://github.com/rust-lang/rust/commit/7d56131e831baf6053b5ae3021d11f3b622c3862", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d56131e831baf6053b5ae3021d11f3b622c3862/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86355480bd965c519cab418794fdc0f5e8202888", "url": "https://api.github.com/repos/rust-lang/rust/commits/86355480bd965c519cab418794fdc0f5e8202888", "html_url": "https://github.com/rust-lang/rust/commit/86355480bd965c519cab418794fdc0f5e8202888"}], "stats": {"total": 71, "additions": 70, "deletions": 1}, "files": [{"sha": "dcd97f2a7be44f2e4dbe494976b945639bcd1d42", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7d56131e831baf6053b5ae3021d11f3b622c3862/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d56131e831baf6053b5ae3021d11f3b622c3862/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=7d56131e831baf6053b5ae3021d11f3b622c3862", "patch": "@@ -1186,11 +1186,28 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 self.prove_trait_ref(trait_ref, location);\n             }\n \n+            Rvalue::Cast(cast_kind, op, ty) => {\n+                match cast_kind {\n+                    CastKind::ReifyFnPointer => {\n+                        let ty_fn_ptr_from = tcx.mk_fn_ptr(op.ty(mir, tcx).fn_sig(tcx));\n+\n+                        if let Err(terr) = self.eq_types(ty_fn_ptr_from, ty, location.at_self()) {\n+                            span_mirbug!(self, \"\", \"casting {:?}\", terr);\n+                        }\n+                    }\n+\n+                    CastKind::ClosureFnPointer |\n+                    CastKind::UnsafeFnPointer |\n+                    CastKind::Misc |\n+                    CastKind::Unsize => {}\n+\n+                }\n+            }\n+\n             // FIXME: These other cases have to be implemented in future PRs\n             Rvalue::Use(..) |\n             Rvalue::Ref(..) |\n             Rvalue::Len(..) |\n-            Rvalue::Cast(..) |\n             Rvalue::BinaryOp(..) |\n             Rvalue::CheckedBinaryOp(..) |\n             Rvalue::UnaryOp(..) |"}, {"sha": "a253243bad7896ed3a8cdd9731f92130c08930ec", "filename": "src/test/compile-fail/mir_check_cast_reify.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7d56131e831baf6053b5ae3021d11f3b622c3862/src%2Ftest%2Fcompile-fail%2Fmir_check_cast_reify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d56131e831baf6053b5ae3021d11f3b622c3862/src%2Ftest%2Fcompile-fail%2Fmir_check_cast_reify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmir_check_cast_reify.rs?ref=7d56131e831baf6053b5ae3021d11f3b622c3862", "patch": "@@ -0,0 +1,52 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z borrowck=mir -Z nll\n+\n+#![allow(dead_code)]\n+\n+// Test that we relate the type of the fn type to the type of the fn\n+// ptr when doing a `ReifyFnPointer` cast.\n+//\n+// This test is a bit tortured, let me explain:\n+//\n+\n+// The `where 'a: 'a` clause here ensures that `'a` is early bound,\n+// which is needed below to ensure that this test hits the path we are\n+// concerned with.\n+fn foo<'a>(x: &'a u32) -> &'a u32\n+where\n+    'a: 'a,\n+{\n+    panic!()\n+}\n+\n+fn bar<'a>(x: &'a u32) -> &'static u32 {\n+    // Here, the type of `foo` is `typeof(foo::<'x>)` for some fresh variable `'x`.\n+    // During NLL region analysis, this will get renumbered to `typeof(foo::<'?0>)`\n+    // where `'?0` is a new region variable.\n+    //\n+    // (Note that if `'a` on `foo` were early-bound, the type would be\n+    // `typeof(foo)`, which would interact differently with because\n+    // the renumbering later.)\n+    //\n+    // This type is then coerced to a fn type `fn(&'?1 u32) -> &'?2\n+    // u32`. Here, the `'?1` and `'?2` will have been created during\n+    // the NLL region renumbering.\n+    //\n+    // The MIR type checker must therefore relate `'?0` to `'?1` and `'?2`\n+    // as part of checking the `ReifyFnPointer`.\n+    let f: fn(_) -> _ = foo;\n+    //~^ WARNING not reporting region error due to -Znll\n+    f(x)\n+    //~^ ERROR free region `'_#1r` does not outlive free region `'static`\n+}\n+\n+fn main() {}"}]}