{"sha": "f511360fd29e426c4a24ebde038f5bfbfcf93f88", "node_id": "C_kwDOAAsO6NoAKGY1MTEzNjBmZDI5ZTQyNmM0YTI0ZWJkZTAzOGY1YmZiZmNmOTNmODg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-15T10:28:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-15T10:28:22Z"}, "message": "Rollup merge of #92747 - swenson:bignum-bit-length-optimization, r=scottmcm\n\nSimplification of BigNum::bit_length\n\nAs indicated in the comment, the BigNum::bit_length function could be\noptimized by using CLZ, which is often a single instruction instead a\nloop.\n\nI think the code is also simpler now without the loop.\n\nI added some additional tests for Big8x3 and Big32x40 to ensure that\nthere were no regressions.", "tree": {"sha": "bdb41b553f0998d6a77ff21c7877a7546477b74b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdb41b553f0998d6a77ff21c7877a7546477b74b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f511360fd29e426c4a24ebde038f5bfbfcf93f88", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh4qHGCRBK7hj4Ov3rIwAAwv0IAFyQcEcg+WTnI6+RhtivuQHm\ni7nG+PMLITqlYbhnHlV8t0RH8aTJW2SDyOMxj3zBIMfkmpRVWRJig36prFssDhd5\n+iS2uCfLh/wsNv+je/luGklzLH+xrHOiwY1CJ3Eebx9a1W/0M8Tv+aMNx6SS3Q35\nyYAJktjjVW6mFq61LmbV45RzM2E1+BWIsBR4BOR8pmEiTt8HU6/eh/lvB2IMqIRG\nHmE3iFbWi6xHi9dCq7EDamVLFhnJp8i1uyxFfKoxYPkMQMbWErU6iA0wsWLFnAqN\n0yCtzKitYC4XZZqy8PXtEtY4EC+MJxHQZEGzHKX7NqmzKRBNr+7c0GaT5oiwrkc=\n=ENFh\n-----END PGP SIGNATURE-----\n", "payload": "tree bdb41b553f0998d6a77ff21c7877a7546477b74b\nparent 38c22af0153cf8f920c01ef04493e8878401fd18\nparent 0589cace8c943d40a60b7356d8c772baf2879cee\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642242502 +0100\ncommitter GitHub <noreply@github.com> 1642242502 +0100\n\nRollup merge of #92747 - swenson:bignum-bit-length-optimization, r=scottmcm\n\nSimplification of BigNum::bit_length\n\nAs indicated in the comment, the BigNum::bit_length function could be\noptimized by using CLZ, which is often a single instruction instead a\nloop.\n\nI think the code is also simpler now without the loop.\n\nI added some additional tests for Big8x3 and Big32x40 to ensure that\nthere were no regressions.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f511360fd29e426c4a24ebde038f5bfbfcf93f88", "html_url": "https://github.com/rust-lang/rust/commit/f511360fd29e426c4a24ebde038f5bfbfcf93f88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f511360fd29e426c4a24ebde038f5bfbfcf93f88/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38c22af0153cf8f920c01ef04493e8878401fd18", "url": "https://api.github.com/repos/rust-lang/rust/commits/38c22af0153cf8f920c01ef04493e8878401fd18", "html_url": "https://github.com/rust-lang/rust/commit/38c22af0153cf8f920c01ef04493e8878401fd18"}, {"sha": "0589cace8c943d40a60b7356d8c772baf2879cee", "url": "https://api.github.com/repos/rust-lang/rust/commits/0589cace8c943d40a60b7356d8c772baf2879cee", "html_url": "https://github.com/rust-lang/rust/commit/0589cace8c943d40a60b7356d8c772baf2879cee"}], "stats": {"total": 56, "additions": 41, "deletions": 15}, "files": [{"sha": "98d8a8a1d74aebd822326df20390147d4e099d47", "filename": "library/core/src/num/bignum.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f511360fd29e426c4a24ebde038f5bfbfcf93f88/library%2Fcore%2Fsrc%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f511360fd29e426c4a24ebde038f5bfbfcf93f88/library%2Fcore%2Fsrc%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fbignum.rs?ref=f511360fd29e426c4a24ebde038f5bfbfcf93f88", "patch": "@@ -158,24 +158,15 @@ macro_rules! define_bignum {\n             /// Returns the number of bits necessary to represent this value. Note that zero\n             /// is considered to need 0 bits.\n             pub fn bit_length(&self) -> usize {\n-                // Skip over the most significant digits which are zero.\n+                let digitbits = <$ty>::BITS as usize;\n                 let digits = self.digits();\n-                let zeros = digits.iter().rev().take_while(|&&x| x == 0).count();\n-                let end = digits.len() - zeros;\n-                let nonzero = &digits[..end];\n-\n-                if nonzero.is_empty() {\n+                // Find the most significant non-zero digit.\n+                let msd = digits.iter().rposition(|&x| x != 0);\n+                match msd {\n+                    Some(msd) => msd * digitbits + digits[msd].log2() as usize + 1,\n                     // There are no non-zero digits, i.e., the number is zero.\n-                    return 0;\n-                }\n-                // This could be optimized with leading_zeros() and bit shifts, but that's\n-                // probably not worth the hassle.\n-                let digitbits = <$ty>::BITS as usize;\n-                let mut i = nonzero.len() * digitbits - 1;\n-                while self.get_bit(i) == 0 {\n-                    i -= 1;\n+                    _ => 0,\n                 }\n-                i + 1\n             }\n \n             /// Adds `other` to itself and returns its own mutable reference."}, {"sha": "416e7cea7a67bcf040206dbcc777f1d6a6838aeb", "filename": "library/core/tests/num/bignum.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f511360fd29e426c4a24ebde038f5bfbfcf93f88/library%2Fcore%2Ftests%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f511360fd29e426c4a24ebde038f5bfbfcf93f88/library%2Fcore%2Ftests%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fbignum.rs?ref=f511360fd29e426c4a24ebde038f5bfbfcf93f88", "patch": "@@ -1,4 +1,5 @@\n use core::num::bignum::tests::Big8x3 as Big;\n+use core::num::bignum::Big32x40;\n \n #[test]\n #[should_panic]\n@@ -215,6 +216,16 @@ fn test_get_bit_out_of_range() {\n \n #[test]\n fn test_bit_length() {\n+    for i in 0..8 * 3 {\n+        // 010000...000\n+        assert_eq!(Big::from_small(1).mul_pow2(i).bit_length(), i + 1);\n+    }\n+    for i in 1..8 * 3 - 1 {\n+        // 010000...001\n+        assert_eq!(Big::from_small(1).mul_pow2(i).add(&Big::from_small(1)).bit_length(), i + 1);\n+        // 110000...000\n+        assert_eq!(Big::from_small(3).mul_pow2(i).bit_length(), i + 2);\n+    }\n     assert_eq!(Big::from_small(0).bit_length(), 0);\n     assert_eq!(Big::from_small(1).bit_length(), 1);\n     assert_eq!(Big::from_small(5).bit_length(), 3);\n@@ -223,6 +234,30 @@ fn test_bit_length() {\n     assert_eq!(Big::from_u64(0xffffff).bit_length(), 24);\n }\n \n+#[test]\n+fn test_bit_length_32x40() {\n+    for i in 0..32 * 40 {\n+        // 010000...000\n+        assert_eq!(Big32x40::from_small(1).mul_pow2(i).bit_length(), i + 1);\n+    }\n+    for i in 1..32 * 40 - 1 {\n+        // 010000...001\n+        assert_eq!(\n+            Big32x40::from_small(1).mul_pow2(i).add(&Big32x40::from_small(1)).bit_length(),\n+            i + 1\n+        );\n+        // 110000...000\n+        assert_eq!(Big32x40::from_small(3).mul_pow2(i).bit_length(), i + 2);\n+    }\n+    assert_eq!(Big32x40::from_small(0).bit_length(), 0);\n+    assert_eq!(Big32x40::from_small(1).bit_length(), 1);\n+    assert_eq!(Big32x40::from_small(5).bit_length(), 3);\n+    assert_eq!(Big32x40::from_small(0x18).bit_length(), 5);\n+    assert_eq!(Big32x40::from_u64(0x4073).bit_length(), 15);\n+    assert_eq!(Big32x40::from_u64(0xffffff).bit_length(), 24);\n+    assert_eq!(Big32x40::from_u64(0xffffffffffffffff).bit_length(), 64);\n+}\n+\n #[test]\n fn test_ord() {\n     assert!(Big::from_u64(0) < Big::from_u64(0xffffff));"}]}