{"sha": "c15f86b4b35a260b105dc472fc6e3556af8a8db0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNWY4NmI0YjM1YTI2MGIxMDVkYzQ3MmZjNmUzNTU2YWY4YThkYjA=", "commit": {"author": {"name": "Russell Cohen", "email": "russell.r.cohen@gmail.com", "date": "2020-03-29T15:12:48Z"}, "committer": {"name": "Russell Cohen", "email": "russell.r.cohen@gmail.com", "date": "2020-03-29T15:12:48Z"}, "message": "Cleanup error messages, improve docstrings", "tree": {"sha": "e443a3ca5dcb215a8ff27887c5cb19da2b83201d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e443a3ca5dcb215a8ff27887c5cb19da2b83201d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c15f86b4b35a260b105dc472fc6e3556af8a8db0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c15f86b4b35a260b105dc472fc6e3556af8a8db0", "html_url": "https://github.com/rust-lang/rust/commit/c15f86b4b35a260b105dc472fc6e3556af8a8db0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c15f86b4b35a260b105dc472fc6e3556af8a8db0/comments", "author": {"login": "rcoh", "id": 492903, "node_id": "MDQ6VXNlcjQ5MjkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/492903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcoh", "html_url": "https://github.com/rcoh", "followers_url": "https://api.github.com/users/rcoh/followers", "following_url": "https://api.github.com/users/rcoh/following{/other_user}", "gists_url": "https://api.github.com/users/rcoh/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcoh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcoh/subscriptions", "organizations_url": "https://api.github.com/users/rcoh/orgs", "repos_url": "https://api.github.com/users/rcoh/repos", "events_url": "https://api.github.com/users/rcoh/events{/privacy}", "received_events_url": "https://api.github.com/users/rcoh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rcoh", "id": 492903, "node_id": "MDQ6VXNlcjQ5MjkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/492903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rcoh", "html_url": "https://github.com/rcoh", "followers_url": "https://api.github.com/users/rcoh/followers", "following_url": "https://api.github.com/users/rcoh/following{/other_user}", "gists_url": "https://api.github.com/users/rcoh/gists{/gist_id}", "starred_url": "https://api.github.com/users/rcoh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rcoh/subscriptions", "organizations_url": "https://api.github.com/users/rcoh/orgs", "repos_url": "https://api.github.com/users/rcoh/repos", "events_url": "https://api.github.com/users/rcoh/events{/privacy}", "received_events_url": "https://api.github.com/users/rcoh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "629e97a5a02edb3d8dc63c5157962c093217d441", "url": "https://api.github.com/repos/rust-lang/rust/commits/629e97a5a02edb3d8dc63c5157962c093217d441", "html_url": "https://github.com/rust-lang/rust/commit/629e97a5a02edb3d8dc63c5157962c093217d441"}], "stats": {"total": 78, "additions": 48, "deletions": 30}, "files": [{"sha": "ed0911379c4b3ccf79204a7c97706ba531186ace", "filename": "src/librustc_lexer/src/cursor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c15f86b4b35a260b105dc472fc6e3556af8a8db0/src%2Flibrustc_lexer%2Fsrc%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c15f86b4b35a260b105dc472fc6e3556af8a8db0/src%2Flibrustc_lexer%2Fsrc%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Fcursor.rs?ref=c15f86b4b35a260b105dc472fc6e3556af8a8db0", "patch": "@@ -41,7 +41,7 @@ impl<'a> Cursor<'a> {\n     /// If requested position doesn't exist, `EOF_CHAR` is returned.\n     /// However, getting `EOF_CHAR` doesn't always mean actual end of file,\n     /// it should be checked with `is_eof` method.\n-    pub(crate) fn nth_char(&self, n: usize) -> char {\n+    fn nth_char(&self, n: usize) -> char {\n         self.chars().nth(n).unwrap_or(EOF_CHAR)\n     }\n "}, {"sha": "132607031ce6512713f55d1c6b099b03f4e9bd7d", "filename": "src/librustc_lexer/src/lib.rs", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/c15f86b4b35a260b105dc472fc6e3556af8a8db0/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c15f86b4b35a260b105dc472fc6e3556af8a8db0/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Flib.rs?ref=c15f86b4b35a260b105dc472fc6e3556af8a8db0", "patch": "@@ -141,25 +141,41 @@ pub enum LiteralKind {\n     RawByteStr(UnvalidatedRawStr),\n }\n \n+/// Represents something that looks like a raw string, but may have some\n+/// problems. Use `.validate()` to convert it into something\n+/// usable.\n #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]\n pub struct UnvalidatedRawStr {\n+    /// The prefix (`r###\"`) is valid\n     valid_start: bool,\n+    /// The number of leading `#`\n     n_start_hashes: usize,\n+    /// The number of trailing `#`. `n_end_hashes` <= `n_start_hashes`\n     n_end_hashes: usize,\n+    /// The offset starting at `r` or `br` where the user may have intended to end the string.\n+    /// Currently, it is the longest sequence of pattern `\"#+\"`.\n     possible_terminator_offset: Option<usize>,\n }\n \n+/// Error produced validating a raw string. Represents cases like:\n+/// - `r##~\"abcde\"##`: `LexRawStrError::InvalidStarter`\n+/// - `r###\"abcde\"##`: `LexRawStrError::NoTerminator { expected: 3, found: 2, possible_terminator_offset: Some(11)`\n+/// - Too many `#`s (>65536): `TooManyDelimiters`\n #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]\n pub enum LexRawStrError {\n-    /// Non # characters between `r` and `\"` eg. `r#~\"..`\n+    /// Non `#` characters exist between `r` and `\"` eg. `r#~\"..`\n     InvalidStarter,\n-    /// The string was never terminated. `possible_terminator_offset` is the best guess of where they\n+    /// The string was never terminated. `possible_terminator_offset` is the number of characters after `r` or `br` where they\n     /// may have intended to terminate it.\n     NoTerminator { expected: usize, found: usize, possible_terminator_offset: Option<usize> },\n-    /// More than 65536 # signs\n+    /// More than 65536 `#`s exist.\n     TooManyDelimiters,\n }\n \n+/// Raw String that contains a valid prefix (`#+\"`) and postfix (`\"#+`) where\n+/// there are a matching number of `#` characters in both. Note that this will\n+/// not consume extra trailing `#` characters: `r###\"abcde\"####` is lexed as a\n+/// `ValidatedRawString { n_hashes: 3 }` followed by a `#` token.\n #[derive(Debug, Eq, PartialEq, Copy, Clone)]\n pub struct ValidatedRawStr {\n     n_hashes: u16,\n@@ -172,27 +188,26 @@ impl ValidatedRawStr {\n }\n \n impl UnvalidatedRawStr {\n-    pub fn started(&self) -> bool {\n-        self.valid_start\n-    }\n-\n     pub fn validate(self) -> Result<ValidatedRawStr, LexRawStrError> {\n         if !self.valid_start {\n             return Err(LexRawStrError::InvalidStarter);\n         }\n \n+        // Only up to 65535 `#`s are allowed in raw strings\n         let n_start_safe: u16 =\n             self.n_start_hashes.try_into().map_err(|_| LexRawStrError::TooManyDelimiters)?;\n-        match (self.n_start_hashes, self.n_end_hashes) {\n-            (n_start, n_end) if n_start > n_end => Err(LexRawStrError::NoTerminator {\n-                expected: n_start,\n+\n+        if self.n_start_hashes > self.n_end_hashes {\n+            Err(LexRawStrError::NoTerminator {\n+                expected: self.n_start_hashes,\n                 found: self.n_end_hashes,\n                 possible_terminator_offset: self.possible_terminator_offset,\n-            }),\n-            (n_start, n_end) => {\n-                debug_assert_eq!(n_start, n_end);\n-                Ok(ValidatedRawStr { n_hashes: n_start_safe })\n-            }\n+            })\n+        } else {\n+            // Since the lexer should never produce a literal with n_end > n_start, if n_start <= n_end,\n+            // they must be equal.\n+            debug_assert_eq!(self.n_start_hashes, self.n_end_hashes);\n+            Ok(ValidatedRawStr { n_hashes: n_start_safe })\n         }\n     }\n }\n@@ -656,7 +671,7 @@ impl Cursor<'_> {\n         false\n     }\n \n-    /// Eats the double-quoted string an UnvalidatedRawStr\n+    /// Eats the double-quoted string and returns an `UnvalidatedRawStr`.\n     fn raw_double_quoted_string(&mut self, prefix_len: usize) -> UnvalidatedRawStr {\n         debug_assert!(self.prev() == 'r');\n         let mut valid_start: bool = false;"}, {"sha": "a367131b3f309b82db9c862c39b4f8edff34a258", "filename": "src/librustc_parse/lexer/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c15f86b4b35a260b105dc472fc6e3556af8a8db0/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c15f86b4b35a260b105dc472fc6e3556af8a8db0/src%2Flibrustc_parse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Fmod.rs?ref=c15f86b4b35a260b105dc472fc6e3556af8a8db0", "patch": "@@ -533,13 +533,12 @@ impl<'a> StringReader<'a> {\n         }\n \n         if let Some(possible_offset) = possible_offset {\n-            let span = self.mk_sp(\n-                start + BytePos(possible_offset as u32),\n-                start + BytePos(possible_offset as u32) + BytePos(found_terminators as u32),\n-            );\n+            let lo = start + BytePos(possible_offset as u32);\n+            let hi = lo + BytePos(found_terminators as u32);\n+            let span = self.mk_sp(lo, hi);\n             err.span_suggestion(\n                 span,\n-                \"you might have intended to terminate the string here\",\n+                \"consider terminating the string here\",\n                 \"#\".repeat(n_hashes),\n                 Applicability::MaybeIncorrect,\n             );"}, {"sha": "8e2a9513d6b829dffa8c962f4b47556f3fae703d", "filename": "src/librustc_parse/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c15f86b4b35a260b105dc472fc6e3556af8a8db0/src%2Flibrustc_parse%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c15f86b4b35a260b105dc472fc6e3556af8a8db0/src%2Flibrustc_parse%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flib.rs?ref=c15f86b4b35a260b105dc472fc6e3556af8a8db0", "patch": "@@ -4,6 +4,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(bindings_after_at)]\n #![feature(try_blocks)]\n+#![feature(or_patterns)]\n \n use rustc_ast::ast;\n use rustc_ast::token::{self, Nonterminal};"}, {"sha": "2fc20e15c5aca8b893f332ec28faf8e153c3cd18", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c15f86b4b35a260b105dc472fc6e3556af8a8db0/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c15f86b4b35a260b105dc472fc6e3556af8a8db0/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=c15f86b4b35a260b105dc472fc6e3556af8a8db0", "patch": "@@ -288,9 +288,12 @@ impl<'a> Parser<'a> {\n \n     fn check_too_many_raw_str_terminators(&mut self, err: &mut DiagnosticBuilder<'_>) -> bool {\n         let prev_token_raw_str = match self.prev_token {\n-            Token { kind: TokenKind::Literal(Lit { kind: LitKind::StrRaw(n), .. }), .. } => Some(n),\n             Token {\n-                kind: TokenKind::Literal(Lit { kind: LitKind::ByteStrRaw(n), .. }), ..\n+                kind:\n+                    TokenKind::Literal(Lit {\n+                        kind: LitKind::StrRaw(n) | LitKind::ByteStrRaw(n), ..\n+                    }),\n+                ..\n             } => Some(n),\n             _ => None,\n         };\n@@ -300,11 +303,11 @@ impl<'a> Parser<'a> {\n                 err.set_primary_message(\"too many `#` when terminating raw string\");\n                 err.span_suggestion(\n                     self.token.span,\n-                    \"Remove the extra `#`\",\n+                    \"remove the extra `#`\",\n                     String::new(),\n                     Applicability::MachineApplicable,\n                 );\n-                err.note(&format!(\"The raw string started with {} `#`s\", n_hashes));\n+                err.note(&format!(\"the raw string started with {} `#`s\", n_hashes));\n                 return true;\n             }\n         }"}, {"sha": "a76668e8051b52c75daf1df79f3c8060611d8ddd", "filename": "src/test/ui/parser/raw/raw-byte-string-eof.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c15f86b4b35a260b105dc472fc6e3556af8a8db0/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-byte-string-eof.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c15f86b4b35a260b105dc472fc6e3556af8a8db0/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-byte-string-eof.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-byte-string-eof.stderr?ref=c15f86b4b35a260b105dc472fc6e3556af8a8db0", "patch": "@@ -2,7 +2,7 @@ error[E0748]: unterminated raw string\n   --> $DIR/raw-byte-string-eof.rs:2:5\n    |\n LL |     br##\"a\"#;\n-   |     ^      - help: you might have intended to terminate the string here: `##`\n+   |     ^      - help: consider terminating the string here: `##`\n    |     |\n    |     unterminated raw string\n    |"}, {"sha": "bf8f3a7a5a4bd833cc012ec8f3cc23d5831945df", "filename": "src/test/ui/parser/raw/raw-str-unbalanced.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c15f86b4b35a260b105dc472fc6e3556af8a8db0/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-str-unbalanced.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c15f86b4b35a260b105dc472fc6e3556af8a8db0/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-str-unbalanced.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw-str-unbalanced.stderr?ref=c15f86b4b35a260b105dc472fc6e3556af8a8db0", "patch": "@@ -2,9 +2,9 @@ error: too many `#` when terminating raw string\n   --> $DIR/raw-str-unbalanced.rs:3:9\n    |\n LL |       \"##\n-   |         ^ help: Remove the extra `#`\n+   |         ^ help: remove the extra `#`\n    |\n-   = note: The raw string started with 1 `#`s\n+   = note: the raw string started with 1 `#`s\n \n error: aborting due to previous error\n "}, {"sha": "cc0eb4927003de772e3917144a70936a601170e7", "filename": "src/test/ui/parser/raw/raw_string.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c15f86b4b35a260b105dc472fc6e3556af8a8db0/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c15f86b4b35a260b105dc472fc6e3556af8a8db0/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fraw%2Fraw_string.stderr?ref=c15f86b4b35a260b105dc472fc6e3556af8a8db0", "patch": "@@ -2,7 +2,7 @@ error[E0748]: unterminated raw string\n   --> $DIR/raw_string.rs:2:13\n    |\n LL |     let x = r##\"lol\"#;\n-   |             ^       - help: you might have intended to terminate the string here: `##`\n+   |             ^       - help: consider terminating the string here: `##`\n    |             |\n    |             unterminated raw string\n    |"}]}