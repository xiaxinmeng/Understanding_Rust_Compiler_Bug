{"sha": "74d03d57e77b791b6973497f17a35136ddc295ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZDAzZDU3ZTc3Yjc5MWI2OTczNDk3ZjE3YTM1MTM2ZGRjMjk1YWI=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-13T08:26:34Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-13T08:26:34Z"}, "message": "Merge #814\n\n814: auto_import: import in enclosing module by default r=matklad a=eulerdisk\n\nSimpler version of #795 \n\nCo-authored-by: Andrea Pretto <eulerdisk@gmail.com>", "tree": {"sha": "d5cd2211bb6d0ea6b98ede08ea4e5cd0e276f5da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5cd2211bb6d0ea6b98ede08ea4e5cd0e276f5da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74d03d57e77b791b6973497f17a35136ddc295ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74d03d57e77b791b6973497f17a35136ddc295ab", "html_url": "https://github.com/rust-lang/rust/commit/74d03d57e77b791b6973497f17a35136ddc295ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74d03d57e77b791b6973497f17a35136ddc295ab/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "92faa2225ae2c508c605b8d6f53381a2cc330d32", "url": "https://api.github.com/repos/rust-lang/rust/commits/92faa2225ae2c508c605b8d6f53381a2cc330d32", "html_url": "https://github.com/rust-lang/rust/commit/92faa2225ae2c508c605b8d6f53381a2cc330d32"}, {"sha": "6518fb2bf8d970995f517ca222b11894edd61139", "url": "https://api.github.com/repos/rust-lang/rust/commits/6518fb2bf8d970995f517ca222b11894edd61139", "html_url": "https://github.com/rust-lang/rust/commit/6518fb2bf8d970995f517ca222b11894edd61139"}], "stats": {"total": 96, "additions": 82, "deletions": 14}, "files": [{"sha": "52c2a0b2b9505874318bf5b9dfa6c160dd5f648a", "filename": "crates/ra_assists/src/auto_import.rs", "status": "modified", "additions": 82, "deletions": 14, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/74d03d57e77b791b6973497f17a35136ddc295ab/crates%2Fra_assists%2Fsrc%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d03d57e77b791b6973497f17a35136ddc295ab/crates%2Fra_assists%2Fsrc%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fauto_import.rs?ref=74d03d57e77b791b6973497f17a35136ddc295ab", "patch": "@@ -1,6 +1,6 @@\n use hir::db::HirDatabase;\n use ra_syntax::{\n-    ast, AstNode, SyntaxNode, Direction, TextRange,\n+    ast::{ self, NameOwner }, AstNode, SyntaxNode, Direction, TextRange,\n     SyntaxKind::{ PATH, PATH_SEGMENT, COLONCOLON, COMMA }\n };\n use crate::assist_ctx::{AssistCtx, Assist, AssistBuilder};\n@@ -345,9 +345,9 @@ fn best_action_for_target<'b, 'a: 'b>(\n     match best_action {\n         Some(action) => return action,\n         None => {\n-            // We have no action we no use item was found in container so we find\n+            // We have no action and no UseItem was found in container so we find\n             // another item and we use it as anchor.\n-            // If there are not items, we choose the target path itself as anchor.\n+            // If there are no items, we choose the target path itself as anchor.\n             let anchor = container\n                 .children()\n                 .find_map(ast::ModuleItem::cast)\n@@ -480,6 +480,24 @@ fn make_assist_add_nested_import(\n     }\n }\n \n+fn apply_auto_import<'a>(\n+    container: &SyntaxNode,\n+    path: &ast::Path,\n+    target: &[&'a ast::PathSegment],\n+    edit: &mut AssistBuilder,\n+) {\n+    let action = best_action_for_target(container, path, target);\n+    make_assist(&action, target, edit);\n+    if let (Some(first), Some(last)) = (target.first(), target.last()) {\n+        // Here we are assuming the assist will provide a  correct use statement\n+        // so we can delete the path qualifier\n+        edit.delete(TextRange::from_to(\n+            first.syntax().range().start(),\n+            last.syntax().range().start(),\n+        ));\n+    }\n+}\n+\n pub(crate) fn auto_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let node = ctx.covering_node();\n     let current_file = node.ancestors().find_map(ast::SourceFile::cast)?;\n@@ -495,18 +513,20 @@ pub(crate) fn auto_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist\n         return None;\n     }\n \n-    ctx.add_action(format!(\"import {} in the current file\", fmt_segments(&segments)), |edit| {\n-        let action = best_action_for_target(current_file.syntax(), path, &segments);\n-        make_assist(&action, segments.as_slice(), edit);\n-        if let Some(last_segment) = path.segment() {\n-            // Here we are assuming the assist will provide a  correct use statement\n-            // so we can delete the path qualifier\n-            edit.delete(TextRange::from_to(\n-                path.syntax().range().start(),\n-                last_segment.syntax().range().start(),\n-            ));\n+    if let Some(module) = path.syntax().ancestors().find_map(ast::Module::cast) {\n+        if let (Some(item_list), Some(name)) = (module.item_list(), module.name()) {\n+            ctx.add_action(\n+                format!(\"import {} in mod {}\", fmt_segments(&segments), name.text()),\n+                |edit| {\n+                    apply_auto_import(item_list.syntax(), path, &segments, edit);\n+                },\n+            );\n         }\n-    });\n+    } else {\n+        ctx.add_action(format!(\"import {} in the current file\", fmt_segments(&segments)), |edit| {\n+            apply_auto_import(current_file.syntax(), path, &segments, edit);\n+        });\n+    }\n \n     ctx.build()\n }\n@@ -531,6 +551,21 @@ Debug<|>\n         );\n     }\n \n+    #[test]\n+    fn test_auto_import_file_add_use_no_anchor_2seg() {\n+        check_assist(\n+            auto_import,\n+            \"\n+std::fmt<|>::Debug\n+    \",\n+            \"\n+use std::fmt;\n+\n+fmt<|>::Debug\n+    \",\n+        );\n+    }\n+\n     #[test]\n     fn test_auto_import_file_add_use() {\n         check_assist(\n@@ -728,4 +763,37 @@ impl foo<|> for Foo {\n \",\n         );\n     }\n+\n+    #[test]\n+    fn test_auto_import_not_applicable_in_use() {\n+        check_assist_not_applicable(\n+            auto_import,\n+            \"\n+use std::fmt<|>;\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn test_auto_import_file_add_use_no_anchor_in_mod_mod() {\n+        check_assist(\n+            auto_import,\n+            \"\n+mod foo {\n+    mod bar {\n+        std::fmt::Debug<|>\n+    }\n+}\n+    \",\n+            \"\n+mod foo {\n+    mod bar {\n+        use std::fmt::Debug;\n+\n+        Debug<|>\n+    }\n+}\n+    \",\n+        );\n+    }\n }"}]}