{"sha": "f6c2add0ed76cf2723168f76989b1704eface686", "node_id": "C_kwDOAAsO6NoAKGY2YzJhZGQwZWQ3NmNmMjcyMzE2OGY3Njk4OWIxNzA0ZWZhY2U2ODY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-10T08:24:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-10T08:24:45Z"}, "message": "Rollup merge of #105522 - est31:remove_or_and_note, r=scottmcm\n\nRemove wrong note for short circuiting operators\n\nThey *are* representable by traits, even if the short-circuiting behaviour requires a different approach than the non-short-circuiting operators. For an example proposal, see the postponed [RFC 2722](https://github.com/rust-lang/rfcs/pull/2722). As it is not accurate, remove most of the note.", "tree": {"sha": "3f2525cc7464fa2d95fcae72c14fa5960be583fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f2525cc7464fa2d95fcae72c14fa5960be583fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6c2add0ed76cf2723168f76989b1704eface686", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjlEJNCRBK7hj4Ov3rIwAAYzoIAI2TU0C5JcjZnPb334g9kcBp\nODPZ2CaZlAFHQLde9oi/opZl1eXxQ4AJt78XmjRPB/+ogvHzLZrSD0GZ6W1dHSpW\ns0LL1ePvpulHcdejjxhdAGq8o1pxF+V5udFi+ucOVPHiL45TAVJk6PJ6OQLM6ESe\n4tw8gtHSaDA/pC3nTmOdFVQcZCr918an5wL3HSmICTub8RJhKzGNkCSGikKBwFOR\n6ptKuxymMIyJJgs4bf9qNvtq0hfc6g+XDJ8t0HsA6s/9b/MVMb5iI5RXZgH7ud0Y\nW7fg0UfZJCAfgQDOd3tJmALbsZvtxOn523wpHQwtiuj1CIOnwNv1WZiilvwzelQ=\n=AS6G\n-----END PGP SIGNATURE-----\n", "payload": "tree 3f2525cc7464fa2d95fcae72c14fa5960be583fe\nparent 6d7e3dfc6f4bcc97d0dc8fb5cd16493797c9dcb9\nparent f069e7159f1c6532a4c011cc192ff45cc96e5cdc\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670660685 +0100\ncommitter GitHub <noreply@github.com> 1670660685 +0100\n\nRollup merge of #105522 - est31:remove_or_and_note, r=scottmcm\n\nRemove wrong note for short circuiting operators\n\nThey *are* representable by traits, even if the short-circuiting behaviour requires a different approach than the non-short-circuiting operators. For an example proposal, see the postponed [RFC 2722](https://github.com/rust-lang/rfcs/pull/2722). As it is not accurate, remove most of the note.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6c2add0ed76cf2723168f76989b1704eface686", "html_url": "https://github.com/rust-lang/rust/commit/f6c2add0ed76cf2723168f76989b1704eface686", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6c2add0ed76cf2723168f76989b1704eface686/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d7e3dfc6f4bcc97d0dc8fb5cd16493797c9dcb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d7e3dfc6f4bcc97d0dc8fb5cd16493797c9dcb9", "html_url": "https://github.com/rust-lang/rust/commit/6d7e3dfc6f4bcc97d0dc8fb5cd16493797c9dcb9"}, {"sha": "f069e7159f1c6532a4c011cc192ff45cc96e5cdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f069e7159f1c6532a4c011cc192ff45cc96e5cdc", "html_url": "https://github.com/rust-lang/rust/commit/f069e7159f1c6532a4c011cc192ff45cc96e5cdc"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "eb2a92f4644d11e8bc903cceb47ac527afbde4eb", "filename": "library/core/src/ops/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6c2add0ed76cf2723168f76989b1704eface686/library%2Fcore%2Fsrc%2Fops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6c2add0ed76cf2723168f76989b1704eface686/library%2Fcore%2Fsrc%2Fops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fmod.rs?ref=f6c2add0ed76cf2723168f76989b1704eface686", "patch": "@@ -17,10 +17,10 @@\n //! should have some resemblance to multiplication (and share expected\n //! properties like associativity).\n //!\n-//! Note that the `&&` and `||` operators short-circuit, i.e., they only\n-//! evaluate their second operand if it contributes to the result. Since this\n-//! behavior is not enforceable by traits, `&&` and `||` are not supported as\n-//! overloadable operators.\n+//! Note that the `&&` and `||` operators are currently not supported for\n+//! overloading. Due to their short circuiting nature, they require a different\n+//! design from traits for other operators like [`BitAnd`]. Designs for them are\n+//! under discussion.\n //!\n //! Many of the operators take their operands by value. In non-generic\n //! contexts involving built-in types, this is usually not a problem."}]}