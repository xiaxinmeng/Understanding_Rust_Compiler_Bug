{"sha": "845a3a061c541a4c2b2293022113cbfd3e6e9cb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NWEzYTA2MWM1NDFhNGMyYjIyOTMwMjIxMTNjYmZkM2U2ZTljYjI=", "commit": {"author": {"name": "nahuakang", "email": "kangnahua@gmail.com", "date": "2021-02-22T15:24:25Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-02T09:14:20Z"}, "message": "Include loops.rs changes from PR#6698", "tree": {"sha": "c61d5b2af22b3ae1821bf7a86ddc6154784a64f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c61d5b2af22b3ae1821bf7a86ddc6154784a64f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/845a3a061c541a4c2b2293022113cbfd3e6e9cb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/845a3a061c541a4c2b2293022113cbfd3e6e9cb2", "html_url": "https://github.com/rust-lang/rust/commit/845a3a061c541a4c2b2293022113cbfd3e6e9cb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/845a3a061c541a4c2b2293022113cbfd3e6e9cb2/comments", "author": {"login": "nahuakang", "id": 18533347, "node_id": "MDQ6VXNlcjE4NTMzMzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/18533347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nahuakang", "html_url": "https://github.com/nahuakang", "followers_url": "https://api.github.com/users/nahuakang/followers", "following_url": "https://api.github.com/users/nahuakang/following{/other_user}", "gists_url": "https://api.github.com/users/nahuakang/gists{/gist_id}", "starred_url": "https://api.github.com/users/nahuakang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nahuakang/subscriptions", "organizations_url": "https://api.github.com/users/nahuakang/orgs", "repos_url": "https://api.github.com/users/nahuakang/repos", "events_url": "https://api.github.com/users/nahuakang/events{/privacy}", "received_events_url": "https://api.github.com/users/nahuakang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2229a0839efe52a3014133db5e469770000341c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2229a0839efe52a3014133db5e469770000341c4", "html_url": "https://github.com/rust-lang/rust/commit/2229a0839efe52a3014133db5e469770000341c4"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "a5aaf082dd87a6ecff189e9d100987cd8c6f3a6d", "filename": "clippy_lints/src/loops/for_kv_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/845a3a061c541a4c2b2293022113cbfd3e6e9cb2/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/845a3a061c541a4c2b2293022113cbfd3e6e9cb2/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs?ref=845a3a061c541a4c2b2293022113cbfd3e6e9cb2", "patch": "@@ -20,8 +20,8 @@ pub(super) fn check_for_loop_over_map_kv<'tcx>(\n             let arg_span = arg.span;\n             let (new_pat_span, kind, ty, mutbl) = match *cx.typeck_results().expr_ty(arg).kind() {\n                 ty::Ref(_, ty, mutbl) => match (&pat[0].kind, &pat[1].kind) {\n-                    (key, _) if pat_is_wild(key, body) => (pat[1].span, \"value\", ty, mutbl),\n-                    (_, value) if pat_is_wild(value, body) => (pat[0].span, \"key\", ty, Mutability::Not),\n+                    (key, _) if pat_is_wild(cx, key, body) => (pat[1].span, \"value\", ty, mutbl),\n+                    (_, value) if pat_is_wild(cx, value, body) => (pat[0].span, \"key\", ty, Mutability::Not),\n                     _ => return,\n                 },\n                 _ => return,\n@@ -59,11 +59,11 @@ pub(super) fn check_for_loop_over_map_kv<'tcx>(\n }\n \n /// Returns `true` if the pattern is a `PatWild` or an ident prefixed with `_`.\n-fn pat_is_wild<'tcx>(pat: &'tcx PatKind<'_>, body: &'tcx Expr<'_>) -> bool {\n+fn pat_is_wild<'tcx>(cx: &LateContext<'tcx>, pat: &'tcx PatKind<'_>, body: &'tcx Expr<'_>) -> bool {\n     match *pat {\n         PatKind::Wild => true,\n         PatKind::Binding(_, id, ident, None) if ident.as_str().starts_with('_') => {\n-            !LocalUsedVisitor::new(id).check_expr(body)\n+            !LocalUsedVisitor::new(cx, id).check_expr(body)\n         },\n         _ => false,\n     }"}, {"sha": "ee275bc5bd6653eabe246dc5b9f183df2e107ac8", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/845a3a061c541a4c2b2293022113cbfd3e6e9cb2/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/845a3a061c541a4c2b2293022113cbfd3e6e9cb2/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=845a3a061c541a4c2b2293022113cbfd3e6e9cb2", "patch": "@@ -257,7 +257,7 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n             then {\n                 let index_used_directly = path_to_local_id(idx, self.var);\n                 let indexed_indirectly = {\n-                    let mut used_visitor = LocalUsedVisitor::new(self.var);\n+                    let mut used_visitor = LocalUsedVisitor::new(self.cx, self.var);\n                     walk_expr(&mut used_visitor, idx);\n                     used_visitor.used\n                 };"}]}