{"sha": "d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NmE0ZGQwNGJmNmZjMzAxN2YzMmNkNGE2YjQzNzVjNTJlNjZhOWM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-28T23:04:36Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-29T19:38:44Z"}, "message": "rustdoc: Move enum docs into the item tag", "tree": {"sha": "d3c0c08a0bb3efc532278f14543b11f06e500ed9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3c0c08a0bb3efc532278f14543b11f06e500ed9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c", "html_url": "https://github.com/rust-lang/rust/commit/d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40cbc89b6fc8c1d0c61689b9b0507d534a576d9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/40cbc89b6fc8c1d0c61689b9b0507d534a576d9d", "html_url": "https://github.com/rust-lang/rust/commit/40cbc89b6fc8c1d0c61689b9b0507d534a576d9d"}], "stats": {"total": 219, "additions": 103, "deletions": 116}, "files": [{"sha": "bb24e4e06fd600e853b5555a56ee7a2f18c687b8", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c", "patch": "@@ -294,7 +294,7 @@ fn fold_enum_should_extract_docs() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let fold = fold::default_seq_fold(srv);\n-    let doc = fold_enum(fold, doc.topmod.enums[0]);\n+    let doc = fold_enum(fold, doc.topmod.enums()[0]);\n     assert doc.brief == some(\"a\");\n     assert doc.desc == some(\"b\");\n }\n@@ -305,7 +305,7 @@ fn fold_enum_should_extract_variant_docs() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let fold = fold::default_seq_fold(srv);\n-    let doc = fold_enum(fold, doc.topmod.enums[0]);\n+    let doc = fold_enum(fold, doc.topmod.enums()[0]);\n     assert doc.variants[0].desc == some(\"c\");\n }\n "}, {"sha": "2e5cf259835dd82434697c4bfdffd1f4b187a05c", "filename": "src/rustdoc/desc_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c/src%2Frustdoc%2Fdesc_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c/src%2Frustdoc%2Fdesc_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_pass.rs?ref=d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c", "patch": "@@ -106,7 +106,7 @@ fn should_execute_op_on_enum_brief() {\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = mk_pass(str::trim)(srv, doc);\n-    assert doc.topmod.enums[0].brief == some(\"a\");\n+    assert doc.topmod.enums()[0].brief == some(\"a\");\n }\n \n #[test]\n@@ -116,7 +116,7 @@ fn should_execute_op_on_enum_desc() {\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = mk_pass(str::trim)(srv, doc);\n-    assert doc.topmod.enums[0].desc == some(\"a\");\n+    assert doc.topmod.enums()[0].desc == some(\"a\");\n }\n \n #[test]\n@@ -126,7 +126,7 @@ fn should_execute_op_on_variant_desc() {\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = mk_pass(str::trim)(srv, doc);\n-    assert doc.topmod.enums[0].variants[0].desc == some(\"a\");\n+    assert doc.topmod.enums()[0].variants[0].desc == some(\"a\");\n }\n \n #[test]"}, {"sha": "3bf0ad6d4c576a41403ea9c62814807cbd137990", "filename": "src/rustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_to_brief_pass.rs?ref=d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c", "patch": "@@ -123,8 +123,8 @@ fn should_promote_enum_desc() {\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = run(srv, doc);\n-    assert doc.topmod.enums[0].brief == some(\"desc\");\n-    assert doc.topmod.enums[0].desc == none;\n+    assert doc.topmod.enums()[0].brief == some(\"desc\");\n+    assert doc.topmod.enums()[0].desc == none;\n }\n \n #[test]"}, {"sha": "48d173ae70ad4f6bef496b6d70c07f26d0ac466e", "filename": "src/rustdoc/doc.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c/src%2Frustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c/src%2Frustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdoc.rs?ref=d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c", "patch": "@@ -23,8 +23,7 @@ type moddoc = ~{\n     items: [itemtag],\n     mods: modlist,\n     fns: fnlist,\n-    consts: constlist,\n-    enums: enumlist\n+    consts: constlist\n };\n \n type constdoc = ~{\n@@ -84,9 +83,18 @@ type resdoc = ~{\n enum modlist = [moddoc];\n enum constlist = [constdoc];\n enum fnlist = [fndoc];\n-enum enumlist = [enumdoc];\n \n impl util for moddoc {\n+\n+    fn enums() -> [enumdoc] {\n+        vec::filter_map(self.items) {|itemtag|\n+            alt itemtag {\n+              enumtag(enumdoc) { some(enumdoc) }\n+              _ { none }\n+            }\n+        }\n+    }\n+\n     fn resources() -> [resdoc] {\n         vec::filter_map(self.items) {|itemtag|\n             alt itemtag {"}, {"sha": "6e48f107201996378be1a34bc52243fbd5c5fd25", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c", "patch": "@@ -45,6 +45,11 @@ fn moddoc_from_mod(\n         desc: none,\n         items: vec::filter_map(module.items) {|item|\n             alt item.node {\n+              ast::item_enum(variants, _) {\n+                some(doc::enumtag(\n+                    enumdoc_from_enum(item.ident, item.id, variants)\n+                ))\n+              }\n               ast::item_res(decl, _, _, _, _) {\n                 some(doc::restag(\n                     resdoc_from_resource(decl, item.ident, item.id)\n@@ -88,17 +93,6 @@ fn moddoc_from_mod(\n                     none\n                   }\n                 }\n-            }),\n-        enums: doc::enumlist(\n-            vec::filter_map(module.items) {|item|\n-                alt item.node {\n-                  ast::item_enum(variants, _) {\n-                    some(enumdoc_from_enum(item.ident, item.id, variants))\n-                  }\n-                  _ {\n-                    none\n-                  }\n-                }\n             })\n     }\n }\n@@ -200,16 +194,16 @@ fn should_extract_enums() {\n     let source = \"enum e { v }\";\n     let ast = parse::from_str(source);\n     let doc = extract(ast, \"\");\n-    assert doc.topmod.enums[0].id != 0;\n-    assert doc.topmod.enums[0].name == \"e\";\n+    assert doc.topmod.enums()[0].id != 0;\n+    assert doc.topmod.enums()[0].name == \"e\";\n }\n \n #[test]\n fn should_extract_enum_variants() {\n     let source = \"enum e { v }\";\n     let ast = parse::from_str(source);\n     let doc = extract(ast, \"\");\n-    assert doc.topmod.enums[0].variants[0].name == \"v\";\n+    assert doc.topmod.enums()[0].variants[0].name == \"v\";\n }\n \n fn resdoc_from_resource("}, {"sha": "254193a881ee6b58ff9b2e4741eba61fe5476f43", "filename": "src/rustdoc/fold.rs", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c/src%2Frustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c/src%2Frustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ffold.rs?ref=d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c", "patch": "@@ -24,8 +24,6 @@ type fold_modlist<T> = fn~(fold: fold<T>, list: doc::modlist) -> doc::modlist;\n type fold_fnlist<T> = fn~(fold: fold<T>, list: doc::fnlist) -> doc::fnlist;\n type fold_constlist<T> = fn~(\n     fold: fold<T>, list: doc::constlist) -> doc::constlist;\n-type fold_enumlist<T> = fn~(\n-    fold: fold<T>, list: doc::enumlist) -> doc::enumlist;\n \n type t<T> = {\n     ctxt: T,\n@@ -37,8 +35,7 @@ type t<T> = {\n     fold_res: fold_res<T>,\n     fold_modlist: fold_modlist<T>,\n     fold_fnlist: fold_fnlist<T>,\n-    fold_constlist: fold_constlist<T>,\n-    fold_enumlist: fold_enumlist<T>,\n+    fold_constlist: fold_constlist<T>\n };\n \n \n@@ -54,8 +51,7 @@ fn mk_fold<T:copy>(\n     fold_res: fold_res<T>,\n     fold_modlist: fold_modlist<T>,\n     fold_fnlist: fold_fnlist<T>,\n-    fold_constlist: fold_constlist<T>,\n-    fold_enumlist: fold_enumlist<T>\n+    fold_constlist: fold_constlist<T>\n ) -> fold<T> {\n     fold({\n         ctxt: ctxt,\n@@ -67,8 +63,7 @@ fn mk_fold<T:copy>(\n         fold_res: fold_res,\n         fold_modlist: fold_modlist,\n         fold_fnlist: fold_fnlist,\n-        fold_constlist: fold_constlist,\n-        fold_enumlist: fold_enumlist\n+        fold_constlist: fold_constlist\n     })\n }\n \n@@ -83,8 +78,7 @@ fn default_seq_fold<T:copy>(ctxt: T) -> fold<T> {\n         {|f, d| default_seq_fold_res(f, d)},\n         {|f, d| default_seq_fold_modlist(f, d)},\n         {|f, d| default_seq_fold_fnlist(f, d)},\n-        {|f, d| default_seq_fold_constlist(f, d)},\n-        {|f, d| default_seq_fold_enumlist(f, d)}\n+        {|f, d| default_seq_fold_constlist(f, d)}\n     )\n }\n \n@@ -104,15 +98,17 @@ fn default_seq_fold_mod<T>(\n     ~{\n         items: vec::map(doc.items) {|itemtag|\n             alt itemtag {\n+              doc::enumtag(enumdoc) {\n+                doc::enumtag(fold.fold_enum(fold, enumdoc))\n+              }\n               doc::restag(resdoc) {\n                 doc::restag(fold.fold_res(fold, resdoc))\n               }\n             }\n         },\n         mods: fold.fold_modlist(fold, doc.mods),\n         fns: fold.fold_fnlist(fold, doc.fns),\n-        consts: fold.fold_constlist(fold, doc.consts),\n-        enums: fold.fold_enumlist(fold, doc.enums)\n+        consts: fold.fold_constlist(fold, doc.consts)\n         with *doc\n     }\n }\n@@ -172,15 +168,6 @@ fn default_seq_fold_constlist<T>(\n     })\n }\n \n-fn default_seq_fold_enumlist<T>(\n-    fold: fold<T>,\n-    list: doc::enumlist\n-) -> doc::enumlist {\n-    doc::enumlist(vec::map(*list) {|doc|\n-        fold.fold_enum(fold, doc)\n-    })\n-}\n-\n #[test]\n fn default_fold_should_produce_same_doc() {\n     let source = \"mod a { fn b() { } mod c { fn d() { } } }\";"}, {"sha": "ae94e4f7cfdd9256795669a369d887fef245f373", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c", "patch": "@@ -85,10 +85,6 @@ fn write_mod_contents(\n         write_const(ctxt, constdoc);\n     }\n \n-    for enumdoc in *doc.enums {\n-        write_enum(ctxt, enumdoc);\n-    }\n-\n     for fndoc in *doc.fns {\n         write_fn(ctxt, fndoc);\n     }\n@@ -99,6 +95,7 @@ fn write_mod_contents(\n \n     for itemtag in doc.items {\n         alt itemtag {\n+          doc::enumtag(enumdoc) { write_enum(ctxt, enumdoc) }\n           doc::restag(resdoc) { write_res(ctxt, resdoc) }\n         }\n     }"}, {"sha": "8c4a11b5ad1ae8ad97e7277b98ce06079b9112df", "filename": "src/rustdoc/prune_undoc_pass.rs", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c/src%2Frustdoc%2Fprune_undoc_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c/src%2Frustdoc%2Fprune_undoc_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_undoc_pass.rs?ref=d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c", "patch": "@@ -25,8 +25,7 @@ fn run(\n         fold_res: fold_res,\n         fold_modlist: fold_modlist,\n         fold_fnlist: fold_fnlist,\n-        fold_constlist: fold_constlist,\n-        fold_enumlist: fold_enumlist\n+        fold_constlist: fold_constlist\n         with *fold::default_seq_fold(ctxt)\n     });\n     fold.fold_crate(fold, doc)\n@@ -39,6 +38,14 @@ fn fold_mod(\n     let doc = ~{\n         items: vec::filter_map(doc.items) {|itemtag|\n             alt itemtag {\n+              doc::enumtag(enumdoc) {\n+                let doc = fold.fold_enum(fold, enumdoc);\n+                if fold.ctxt.have_docs {\n+                    some(doc::enumtag(doc))\n+                } else {\n+                    none\n+                }\n+              }\n               doc::restag(resdoc) {\n                 let doc = fold.fold_res(fold, resdoc);\n                 if fold.ctxt.have_docs {\n@@ -253,28 +260,14 @@ fn fold_enum(fold: fold::fold<ctxt>, doc: doc::enumdoc) -> doc::enumdoc {\n     ret doc;\n }\n \n-fn fold_enumlist(\n-    fold: fold::fold<ctxt>,\n-    list: doc::enumlist\n-) -> doc::enumlist {\n-    doc::enumlist(vec::filter_map(*list) {|doc|\n-        let doc = fold.fold_enum(fold, doc);\n-        if fold.ctxt.have_docs {\n-            some(doc)\n-        } else {\n-            none\n-        }\n-    })\n-}\n-\n #[test]\n fn should_elide_undocumented_enums() {\n     let source = \"enum a { b }\";\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = run(srv, doc);\n-    assert vec::is_empty(*doc.topmod.enums);\n+    assert vec::is_empty(doc.topmod.enums());\n }\n \n #[test]\n@@ -284,7 +277,7 @@ fn should_elide_undocumented_variants() {\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = run(srv, doc);\n-    assert vec::is_empty(doc.topmod.enums[0].variants);\n+    assert vec::is_empty(doc.topmod.enums()[0].variants);\n }\n \n #[test]\n@@ -294,7 +287,7 @@ fn should_not_elide_enums_with_documented_variants() {\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = run(srv, doc);\n-    assert vec::is_not_empty(*doc.topmod.enums);\n+    assert vec::is_not_empty(doc.topmod.enums());\n }\n \n fn fold_res(fold: fold::fold<ctxt>, doc: doc::resdoc) -> doc::resdoc {"}, {"sha": "f0080fd5329c0f84b4776c0d4a55370942c4d645", "filename": "src/rustdoc/prune_unexported_pass.rs", "status": "modified", "additions": 53, "deletions": 43, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c/src%2Frustdoc%2Fprune_unexported_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c/src%2Frustdoc%2Fprune_unexported_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_unexported_pass.rs?ref=d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c", "patch": "@@ -21,14 +21,22 @@ fn run(srv: astsrv::srv, doc: doc::cratedoc) -> doc::cratedoc {\n fn fold_mod(fold: fold::fold<astsrv::srv>, doc: doc::moddoc) -> doc::moddoc {\n     let doc = fold::default_seq_fold_mod(fold, doc);\n     ~{\n+        items: exported_items(fold.ctxt, doc),\n         mods: doc::modlist(exported_mods(fold.ctxt, doc)),\n         fns: doc::fnlist(exported_fns(fold.ctxt, doc)),\n-        consts: doc::constlist(exported_consts(fold.ctxt, doc)),\n-        enums: doc::enumlist(exported_enums(fold.ctxt, doc))\n+        consts: doc::constlist(exported_consts(fold.ctxt, doc))\n         with *doc\n     }\n }\n \n+fn exported_items(srv: astsrv::srv, doc: doc::moddoc) -> [doc::itemtag] {\n+    exported_things(\n+        srv, doc,\n+        exported_items_from_crate,\n+        exported_items_from_mod\n+    )\n+}\n+\n fn exported_mods(srv: astsrv::srv, doc: doc::moddoc) -> [doc::moddoc] {\n     exported_things(\n         srv, doc,\n@@ -53,14 +61,6 @@ fn exported_consts(srv: astsrv::srv, doc: doc::moddoc) -> [doc::constdoc] {\n     )\n }\n \n-fn exported_enums(srv: astsrv::srv, doc: doc::moddoc) -> [doc::enumdoc] {\n-    exported_things(\n-        srv, doc,\n-        exported_enums_from_crate,\n-        exported_enums_from_mod\n-    )\n-}\n-\n fn exported_things<T>(\n     srv: astsrv::srv,\n     doc: doc::moddoc,\n@@ -74,6 +74,20 @@ fn exported_things<T>(\n     }\n }\n \n+fn exported_items_from_crate(\n+    srv: astsrv::srv,\n+    doc: doc::moddoc\n+) -> [doc::itemtag] {\n+    exported_items_from(srv, doc, is_exported_from_crate)\n+}\n+\n+fn exported_items_from_mod(\n+    srv: astsrv::srv,\n+    doc: doc::moddoc\n+) -> [doc::itemtag] {\n+    exported_items_from(srv, doc, bind is_exported_from_mod(_, doc.id, _))\n+}\n+\n fn exported_mods_from_crate(\n     srv: astsrv::srv,\n     doc: doc::moddoc\n@@ -116,18 +130,32 @@ fn exported_consts_from_mod(\n     exported_consts_from(srv, doc, bind is_exported_from_mod(_, doc.id, _))\n }\n \n-fn exported_enums_from_crate(\n-    srv: astsrv::srv,\n-    doc: doc::moddoc\n-) -> [doc::enumdoc] {\n-    exported_enums_from(srv, doc, is_exported_from_crate)\n-}\n-\n-fn exported_enums_from_mod(\n+fn exported_items_from(\n     srv: astsrv::srv,\n-    doc: doc::moddoc\n-) -> [doc::enumdoc] {\n-    exported_enums_from(srv, doc, bind is_exported_from_mod(_, doc.id, _))\n+    doc: doc::moddoc,\n+    is_exported: fn(astsrv::srv, str) -> bool\n+) -> [doc::itemtag] {\n+    vec::filter_map(doc.items) { |itemtag|\n+        let name = alt itemtag {\n+          doc::enumtag(~{name, _}) { name }\n+          doc::restag(~{name, _}) { \"FIXME\" }\n+        };\n+        let itemtag = alt itemtag {\n+          doc::enumtag(enumdoc) {\n+            // Also need to check variant exportedness\n+            doc::enumtag(~{\n+                variants: exported_variants_from(srv, enumdoc, is_exported)\n+                with *enumdoc\n+            })\n+          }\n+          _ { itemtag }\n+        };\n+        if is_exported(srv, name) {\n+            some(itemtag)\n+        } else {\n+            none\n+        }\n+    }\n }\n \n fn exported_fns_from(\n@@ -172,24 +200,6 @@ fn exported_consts_from(\n     }\n }\n \n-fn exported_enums_from(\n-    srv: astsrv::srv,\n-    doc: doc::moddoc,\n-    is_exported: fn(astsrv::srv, str) -> bool\n-) -> [doc::enumdoc] {\n-    vec::filter_map(*doc.enums) { |doc|\n-        if is_exported(srv, doc.name) {\n-            some(~{\n-                variants: exported_variants_from(\n-                    srv, doc, is_exported)\n-                with *doc\n-            })\n-        } else {\n-            none\n-        }\n-    }\n-}\n-\n fn exported_variants_from(\n     srv: astsrv::srv,\n     doc: doc::enumdoc,\n@@ -293,7 +303,7 @@ fn should_prune_unexported_enums_from_top_mod() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    assert vec::len(*doc.topmod.enums) == 0u;\n+    assert vec::len(doc.topmod.enums()) == 0u;\n }\n \n #[test]\n@@ -302,7 +312,7 @@ fn should_prune_unexported_enums() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    assert vec::len(*doc.topmod.mods[0].enums) == 0u;\n+    assert vec::len(doc.topmod.mods[0].enums()) == 0u;\n }\n \n #[test]\n@@ -311,7 +321,7 @@ fn should_prune_unexported_variants_from_top_mod() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    assert vec::len(doc.topmod.enums[0].variants) == 0u;\n+    assert vec::len(doc.topmod.enums()[0].variants) == 0u;\n }\n \n #[test]\n@@ -320,5 +330,5 @@ fn should_prune_unexported_variants() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    assert vec::len(doc.topmod.mods[0].enums[0].variants) == 0u;\n+    assert vec::len(doc.topmod.mods[0].enums()[0].variants) == 0u;\n }"}, {"sha": "f65b2f789e21f1ea02bf3230028b94bc4c5a290e", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c", "patch": "@@ -54,8 +54,7 @@ fn test_run_passes() {\n                 items: [],\n                 mods: doc::modlist([]),\n                 fns: doc::fnlist([]),\n-                consts: doc::constlist([]),\n-                enums: doc::enumlist([])\n+                consts: doc::constlist([])\n             }\n         }\n     }\n@@ -73,8 +72,7 @@ fn test_run_passes() {\n                 items: [],\n                 mods: doc::modlist([]),\n                 fns: doc::fnlist([]),\n-                consts: doc::constlist([]),\n-                enums: doc::enumlist([])\n+                consts: doc::constlist([])\n             }\n         }\n     }"}, {"sha": "bc2e35e2622c6d8464f28fe01909863efb8d29a2", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=d56a4dd04bf6fc3017f32cd4a6b4375c52e66a9c", "patch": "@@ -224,7 +224,7 @@ fn should_add_variant_sigs() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    assert doc.topmod.enums[0].variants[0].sig == some(\"b(int)\");\n+    assert doc.topmod.enums()[0].variants[0].sig == some(\"b(int)\");\n }\n \n fn fold_res("}]}