{"sha": "23d3ff1b9756c768c4412dcd1d80cff0617fd5c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZDNmZjFiOTc1NmM3NjhjNDQxMmRjZDFkODBjZmYwNjE3ZmQ1YzU=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-10-06T21:45:25Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-10-06T21:48:55Z"}, "message": "Fix zero-size uninitialized boxes\n\nRequesting a zero-size allocation is not allowed,\nreturn a dangling pointer instead.\n\nCC https://github.com/rust-lang/rust/issues/63291#issuecomment-538692745", "tree": {"sha": "3dfa942bea1445703fc9873ffccdf3282c44d023", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3dfa942bea1445703fc9873ffccdf3282c44d023"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23d3ff1b9756c768c4412dcd1d80cff0617fd5c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23d3ff1b9756c768c4412dcd1d80cff0617fd5c5", "html_url": "https://github.com/rust-lang/rust/commit/23d3ff1b9756c768c4412dcd1d80cff0617fd5c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23d3ff1b9756c768c4412dcd1d80cff0617fd5c5/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "421bd77f42c2fe8a2596dbcc1580ec97fb89009f", "url": "https://api.github.com/repos/rust-lang/rust/commits/421bd77f42c2fe8a2596dbcc1580ec97fb89009f", "html_url": "https://github.com/rust-lang/rust/commit/421bd77f42c2fe8a2596dbcc1580ec97fb89009f"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "2693a64e13ba1e9814fda6170cef2dacf1dc940c", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/23d3ff1b9756c768c4412dcd1d80cff0617fd5c5/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d3ff1b9756c768c4412dcd1d80cff0617fd5c5/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=23d3ff1b9756c768c4412dcd1d80cff0617fd5c5", "patch": "@@ -141,6 +141,9 @@ impl<T> Box<T> {\n     /// ```\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_uninit() -> Box<mem::MaybeUninit<T>> {\n+        if mem::size_of::<T>() == 0 {\n+            return Box(NonNull::dangling().into())\n+        }\n         let layout = alloc::Layout::new::<mem::MaybeUninit<T>>();\n         let ptr = unsafe {\n             Global.alloc(layout)\n@@ -181,10 +184,17 @@ impl<T> Box<[T]> {\n     /// ```\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_uninit_slice(len: usize) -> Box<[mem::MaybeUninit<T>]> {\n-        let layout = alloc::Layout::array::<mem::MaybeUninit<T>>(len).unwrap();\n-        let ptr = unsafe { alloc::alloc(layout) };\n-        let unique = Unique::new(ptr).unwrap_or_else(|| alloc::handle_alloc_error(layout));\n-        let slice = unsafe { slice::from_raw_parts_mut(unique.cast().as_ptr(), len) };\n+        let ptr = if mem::size_of::<T>() == 0 || len == 0 {\n+            NonNull::dangling()\n+        } else {\n+            let layout = alloc::Layout::array::<mem::MaybeUninit<T>>(len).unwrap();\n+            unsafe {\n+                Global.alloc(layout)\n+                    .unwrap_or_else(|_| alloc::handle_alloc_error(layout))\n+                    .cast()\n+            }\n+        };\n+        let slice = unsafe { slice::from_raw_parts_mut(ptr.as_ptr(), len) };\n         Box(Unique::from(slice))\n     }\n }"}]}