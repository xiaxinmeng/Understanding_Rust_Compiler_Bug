{"sha": "85c42fba1291f1cc41fb7bfec63117895b394fc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1YzQyZmJhMTI5MWYxY2M0MWZiN2JmZWM2MzExNzg5NWIzOTRmYzU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-02-04T13:46:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-02-04T13:46:26Z"}, "message": "Support contextual tokens", "tree": {"sha": "cda942a62d244f6352dd870cf4c4e68f739909b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cda942a62d244f6352dd870cf4c4e68f739909b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85c42fba1291f1cc41fb7bfec63117895b394fc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85c42fba1291f1cc41fb7bfec63117895b394fc5", "html_url": "https://github.com/rust-lang/rust/commit/85c42fba1291f1cc41fb7bfec63117895b394fc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85c42fba1291f1cc41fb7bfec63117895b394fc5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "852543212ba5c68b3428a80187087cc641de612c", "url": "https://api.github.com/repos/rust-lang/rust/commits/852543212ba5c68b3428a80187087cc641de612c", "html_url": "https://github.com/rust-lang/rust/commit/852543212ba5c68b3428a80187087cc641de612c"}], "stats": {"total": 227, "additions": 155, "deletions": 72}, "files": [{"sha": "e97ef0c2ca5284b4b9405f9bad52487db5270082", "filename": "grammar.ron", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/85c42fba1291f1cc41fb7bfec63117895b394fc5/grammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/85c42fba1291f1cc41fb7bfec63117895b394fc5/grammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/grammar.ron?ref=85c42fba1291f1cc41fb7bfec63117895b394fc5", "patch": "@@ -27,6 +27,11 @@ Grammar(\n         \"mut\",\n         \"unsafe\",\n     ],\n+    contextual_keywords: [\n+        \"auto\",\n+        \"default\",\n+        \"union\",\n+    ],\n     tokens: [\n         \"ERROR\",\n         \"IDENT\","}, {"sha": "64d751d639fa3e1412362a4d3118c8e82ea02cb6", "filename": "src/parser/event.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/85c42fba1291f1cc41fb7bfec63117895b394fc5/src%2Fparser%2Fevent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c42fba1291f1cc41fb7bfec63117895b394fc5/src%2Fparser%2Fevent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent.rs?ref=85c42fba1291f1cc41fb7bfec63117895b394fc5", "patch": "@@ -1,4 +1,4 @@\n-use {File, FileBuilder, Sink, SyntaxKind, Token};\n+use {File, FileBuilder, Sink, SyntaxKind, Token, TextUnit};\n use syntax_kinds::TOMBSTONE;\n use super::is_insignificant;\n \n@@ -120,18 +120,25 @@ pub(super) fn to_file(text: String, tokens: &[Token], events: Vec<Event>) -> Fil\n                 builder.finish_internal()\n             }\n             &Event::Token {\n-                kind: _,\n+                kind,\n                 mut n_raw_tokens,\n-            } => loop {\n-                let token = tokens[idx];\n-                if !is_insignificant(token.kind) {\n-                    n_raw_tokens -= 1;\n+            } => {\n+                // FIXME: currently, we attach whitespace to some random node\n+                // this should be done in a sensible manner instead\n+                loop {\n+                    let token = tokens[idx];\n+                    if !is_insignificant(token.kind) {\n+                        break;\n+                    }\n+                    builder.leaf(token.kind, token.len);\n+                    idx += 1\n                 }\n-                idx += 1;\n-                builder.leaf(token.kind, token.len);\n-                if n_raw_tokens == 0 {\n-                    break;\n+                let mut len = TextUnit::new(0);\n+                for _ in 0..n_raw_tokens {\n+                    len += tokens[idx].len;\n+                    idx += 1;\n                 }\n+                builder.leaf(kind, len);\n             },\n             &Event::Error { ref message } => builder.error().message(message.clone()).emit(),\n         }"}, {"sha": "4afe2e4186404ebc58d60ca402f16aa706a44826", "filename": "src/parser/grammar/items/mod.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/85c42fba1291f1cc41fb7bfec63117895b394fc5/src%2Fparser%2Fgrammar%2Fitems%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c42fba1291f1cc41fb7bfec63117895b394fc5/src%2Fparser%2Fgrammar%2Fitems%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fitems%2Fmod.rs?ref=85c42fba1291f1cc41fb7bfec63117895b394fc5", "patch": "@@ -81,22 +81,40 @@ fn item(p: &mut Parser) {\n                 CONST_ITEM\n             }\n         },\n-        // TODO: auto trait\n         // test unsafe_trait\n         // unsafe trait T {}\n         UNSAFE_KW if la == TRAIT_KW => {\n             p.bump();\n             traits::trait_item(p);\n             TRAIT_ITEM\n         }\n-        // TODO: default impl\n+\n+        // test unsafe_auto_trait\n+        // unsafe auto trait T {}\n+        UNSAFE_KW if p.at_kw(1, \"auto\") && p.nth(2) == TRAIT_KW => {\n+            p.bump();\n+            p.bump_remap(AUTO_KW);\n+            traits::trait_item(p);\n+            TRAIT_ITEM\n+        }\n+\n         // test unsafe_impl\n         // unsafe impl Foo {}\n         UNSAFE_KW if la == IMPL_KW => {\n             p.bump();\n             traits::impl_item(p);\n             IMPL_ITEM\n         }\n+\n+        // test unsafe_default_impl\n+        // unsafe default impl Foo {}\n+        UNSAFE_KW if p.at_kw(1, \"default\") && p.nth(2) == IMPL_KW => {\n+            p.bump();\n+            p.bump_remap(DEFAULT_KW);\n+            traits::impl_item(p);\n+            IMPL_ITEM\n+        }\n+\n         MOD_KW => {\n             mod_item(p);\n             MOD_ITEM"}, {"sha": "2ad62116685e19f444427f478f850f8504bdef25", "filename": "src/parser/input.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/85c42fba1291f1cc41fb7bfec63117895b394fc5/src%2Fparser%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c42fba1291f1cc41fb7bfec63117895b394fc5/src%2Fparser%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Finput.rs?ref=85c42fba1291f1cc41fb7bfec63117895b394fc5", "patch": "@@ -46,9 +46,10 @@ impl<'t> ParserInput<'t> {\n         if !(idx < self.tokens.len()) {\n             return \"\";\n         }\n-        let start_offset = self.start_offsets[idx];\n-        let end_offset = self.tokens[idx].len;\n-        let range = TextRange::from_to(start_offset, end_offset);\n+        let range = TextRange::from_len(\n+            self.start_offsets[idx],\n+            self.tokens[idx].len\n+        );\n         &self.text[range]\n     }\n }"}, {"sha": "7e1b22ee5955f4f248a5ef97d85e4a96683a4fb2", "filename": "src/parser/parser.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/85c42fba1291f1cc41fb7bfec63117895b394fc5/src%2Fparser%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c42fba1291f1cc41fb7bfec63117895b394fc5/src%2Fparser%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fparser.rs?ref=85c42fba1291f1cc41fb7bfec63117895b394fc5", "patch": "@@ -1,6 +1,6 @@\n use super::Event;\n use super::input::{InputPosition, ParserInput};\n-use SyntaxKind::{self, EOF, TOMBSTONE};\n+use SyntaxKind::{self, EOF, TOMBSTONE, IDENT};\n \n pub(crate) struct Marker {\n     pos: u32,\n@@ -145,14 +145,31 @@ impl<'t> Parser<'t> {\n         });\n     }\n \n+    pub(crate) fn bump_remap(&mut self, kind: SyntaxKind) {\n+        if self.current() == EOF {\n+            // TODO: panic!?\n+            return;\n+        }\n+        self.pos += 1;\n+        self.event(Event::Token {\n+            kind,\n+            n_raw_tokens: 1,\n+        });\n+    }\n+\n     pub(crate) fn nth(&self, n: u32) -> SyntaxKind {\n         self.inp.kind(self.pos + n)\n     }\n \n+    pub(crate) fn at_kw(&self, n: u32, t: &str) -> bool {\n+        self.nth(n) == IDENT && self.inp.text(self.pos + n) == t\n+    }\n+\n     pub(crate) fn current(&self) -> SyntaxKind {\n         self.nth(0)\n     }\n \n+\n     fn event(&mut self, event: Event) {\n         self.events.push(event)\n     }"}, {"sha": "27bc1cafa530c5067872f554bc0f0c367adb28a5", "filename": "src/syntax_kinds.rs", "status": "modified", "additions": 58, "deletions": 52, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/85c42fba1291f1cc41fb7bfec63117895b394fc5/src%2Fsyntax_kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c42fba1291f1cc41fb7bfec63117895b394fc5/src%2Fsyntax_kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds.rs?ref=85c42fba1291f1cc41fb7bfec63117895b394fc5", "patch": "@@ -6,32 +6,6 @@ use tree::SyntaxInfo;\n /// The kind of syntax node, e.g. `IDENT`, `USE_KW`, or `STRUCT_DEF`.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub enum SyntaxKind {\n-    USE_KW,\n-    FN_KW,\n-    STRUCT_KW,\n-    ENUM_KW,\n-    TRAIT_KW,\n-    IMPL_KW,\n-    TRUE_KW,\n-    FALSE_KW,\n-    AS_KW,\n-    EXTERN_KW,\n-    CRATE_KW,\n-    MOD_KW,\n-    PUB_KW,\n-    SELF_KW,\n-    SUPER_KW,\n-    IN_KW,\n-    WHERE_KW,\n-    FOR_KW,\n-    LOOP_KW,\n-    WHILE_KW,\n-    IF_KW,\n-    MATCH_KW,\n-    CONST_KW,\n-    STATIC_KW,\n-    MUT_KW,\n-    UNSAFE_KW,\n     ERROR,\n     IDENT,\n     UNDERSCORE,\n@@ -83,6 +57,35 @@ pub enum SyntaxKind {\n     COMMENT,\n     DOC_COMMENT,\n     SHEBANG,\n+    USE_KW,\n+    FN_KW,\n+    STRUCT_KW,\n+    ENUM_KW,\n+    TRAIT_KW,\n+    IMPL_KW,\n+    TRUE_KW,\n+    FALSE_KW,\n+    AS_KW,\n+    EXTERN_KW,\n+    CRATE_KW,\n+    MOD_KW,\n+    PUB_KW,\n+    SELF_KW,\n+    SUPER_KW,\n+    IN_KW,\n+    WHERE_KW,\n+    FOR_KW,\n+    LOOP_KW,\n+    WHILE_KW,\n+    IF_KW,\n+    MATCH_KW,\n+    CONST_KW,\n+    STATIC_KW,\n+    MUT_KW,\n+    UNSAFE_KW,\n+    AUTO_KW,\n+    DEFAULT_KW,\n+    UNION_KW,\n     FILE,\n     STRUCT_ITEM,\n     ENUM_ITEM,\n@@ -123,32 +126,6 @@ pub(crate) use self::SyntaxKind::*;\n impl SyntaxKind {\n     pub(crate) fn info(self) -> &'static SyntaxInfo {\n         match self {\n-            USE_KW => &SyntaxInfo { name: \"USE_KW\" },\n-            FN_KW => &SyntaxInfo { name: \"FN_KW\" },\n-            STRUCT_KW => &SyntaxInfo { name: \"STRUCT_KW\" },\n-            ENUM_KW => &SyntaxInfo { name: \"ENUM_KW\" },\n-            TRAIT_KW => &SyntaxInfo { name: \"TRAIT_KW\" },\n-            IMPL_KW => &SyntaxInfo { name: \"IMPL_KW\" },\n-            TRUE_KW => &SyntaxInfo { name: \"TRUE_KW\" },\n-            FALSE_KW => &SyntaxInfo { name: \"FALSE_KW\" },\n-            AS_KW => &SyntaxInfo { name: \"AS_KW\" },\n-            EXTERN_KW => &SyntaxInfo { name: \"EXTERN_KW\" },\n-            CRATE_KW => &SyntaxInfo { name: \"CRATE_KW\" },\n-            MOD_KW => &SyntaxInfo { name: \"MOD_KW\" },\n-            PUB_KW => &SyntaxInfo { name: \"PUB_KW\" },\n-            SELF_KW => &SyntaxInfo { name: \"SELF_KW\" },\n-            SUPER_KW => &SyntaxInfo { name: \"SUPER_KW\" },\n-            IN_KW => &SyntaxInfo { name: \"IN_KW\" },\n-            WHERE_KW => &SyntaxInfo { name: \"WHERE_KW\" },\n-            FOR_KW => &SyntaxInfo { name: \"FOR_KW\" },\n-            LOOP_KW => &SyntaxInfo { name: \"LOOP_KW\" },\n-            WHILE_KW => &SyntaxInfo { name: \"WHILE_KW\" },\n-            IF_KW => &SyntaxInfo { name: \"IF_KW\" },\n-            MATCH_KW => &SyntaxInfo { name: \"MATCH_KW\" },\n-            CONST_KW => &SyntaxInfo { name: \"CONST_KW\" },\n-            STATIC_KW => &SyntaxInfo { name: \"STATIC_KW\" },\n-            MUT_KW => &SyntaxInfo { name: \"MUT_KW\" },\n-            UNSAFE_KW => &SyntaxInfo { name: \"UNSAFE_KW\" },\n             ERROR => &SyntaxInfo { name: \"ERROR\" },\n             IDENT => &SyntaxInfo { name: \"IDENT\" },\n             UNDERSCORE => &SyntaxInfo { name: \"UNDERSCORE\" },\n@@ -200,6 +177,35 @@ impl SyntaxKind {\n             COMMENT => &SyntaxInfo { name: \"COMMENT\" },\n             DOC_COMMENT => &SyntaxInfo { name: \"DOC_COMMENT\" },\n             SHEBANG => &SyntaxInfo { name: \"SHEBANG\" },\n+            USE_KW => &SyntaxInfo { name: \"USE_KW\" },\n+            FN_KW => &SyntaxInfo { name: \"FN_KW\" },\n+            STRUCT_KW => &SyntaxInfo { name: \"STRUCT_KW\" },\n+            ENUM_KW => &SyntaxInfo { name: \"ENUM_KW\" },\n+            TRAIT_KW => &SyntaxInfo { name: \"TRAIT_KW\" },\n+            IMPL_KW => &SyntaxInfo { name: \"IMPL_KW\" },\n+            TRUE_KW => &SyntaxInfo { name: \"TRUE_KW\" },\n+            FALSE_KW => &SyntaxInfo { name: \"FALSE_KW\" },\n+            AS_KW => &SyntaxInfo { name: \"AS_KW\" },\n+            EXTERN_KW => &SyntaxInfo { name: \"EXTERN_KW\" },\n+            CRATE_KW => &SyntaxInfo { name: \"CRATE_KW\" },\n+            MOD_KW => &SyntaxInfo { name: \"MOD_KW\" },\n+            PUB_KW => &SyntaxInfo { name: \"PUB_KW\" },\n+            SELF_KW => &SyntaxInfo { name: \"SELF_KW\" },\n+            SUPER_KW => &SyntaxInfo { name: \"SUPER_KW\" },\n+            IN_KW => &SyntaxInfo { name: \"IN_KW\" },\n+            WHERE_KW => &SyntaxInfo { name: \"WHERE_KW\" },\n+            FOR_KW => &SyntaxInfo { name: \"FOR_KW\" },\n+            LOOP_KW => &SyntaxInfo { name: \"LOOP_KW\" },\n+            WHILE_KW => &SyntaxInfo { name: \"WHILE_KW\" },\n+            IF_KW => &SyntaxInfo { name: \"IF_KW\" },\n+            MATCH_KW => &SyntaxInfo { name: \"MATCH_KW\" },\n+            CONST_KW => &SyntaxInfo { name: \"CONST_KW\" },\n+            STATIC_KW => &SyntaxInfo { name: \"STATIC_KW\" },\n+            MUT_KW => &SyntaxInfo { name: \"MUT_KW\" },\n+            UNSAFE_KW => &SyntaxInfo { name: \"UNSAFE_KW\" },\n+            AUTO_KW => &SyntaxInfo { name: \"AUTO_KW\" },\n+            DEFAULT_KW => &SyntaxInfo { name: \"DEFAULT_KW\" },\n+            UNION_KW => &SyntaxInfo { name: \"UNION_KW\" },\n             FILE => &SyntaxInfo { name: \"FILE\" },\n             STRUCT_ITEM => &SyntaxInfo { name: \"STRUCT_ITEM\" },\n             ENUM_ITEM => &SyntaxInfo { name: \"ENUM_ITEM\" },"}, {"sha": "03d29f3241db2ba7b0f34d5ca7c8ded348f0d92d", "filename": "tests/data/parser/inline/0009_unsafe_auto_trait.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85c42fba1291f1cc41fb7bfec63117895b394fc5/tests%2Fdata%2Fparser%2Finline%2F0009_unsafe_auto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c42fba1291f1cc41fb7bfec63117895b394fc5/tests%2Fdata%2Fparser%2Finline%2F0009_unsafe_auto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0009_unsafe_auto_trait.rs?ref=85c42fba1291f1cc41fb7bfec63117895b394fc5", "patch": "@@ -0,0 +1 @@\n+unsafe auto trait T {}"}, {"sha": "0a9a1e11747c6c0a8241c22b69a38b2963e8ab94", "filename": "tests/data/parser/inline/0009_unsafe_auto_trait.txt", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/85c42fba1291f1cc41fb7bfec63117895b394fc5/tests%2Fdata%2Fparser%2Finline%2F0009_unsafe_auto_trait.txt", "raw_url": "https://github.com/rust-lang/rust/raw/85c42fba1291f1cc41fb7bfec63117895b394fc5/tests%2Fdata%2Fparser%2Finline%2F0009_unsafe_auto_trait.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0009_unsafe_auto_trait.txt?ref=85c42fba1291f1cc41fb7bfec63117895b394fc5", "patch": "@@ -0,0 +1,13 @@\n+FILE@[0; 23)\n+  TRAIT_ITEM@[0; 23)\n+    UNSAFE_KW@[0; 6)\n+    WHITESPACE@[6; 7)\n+    AUTO_KW@[7; 11)\n+    WHITESPACE@[11; 12)\n+    TRAIT_KW@[12; 17)\n+    WHITESPACE@[17; 18)\n+    IDENT@[18; 19) \"T\"\n+    WHITESPACE@[19; 20)\n+    L_CURLY@[20; 21)\n+    R_CURLY@[21; 22)\n+    WHITESPACE@[22; 23)"}, {"sha": "9cd6c57bd89975906e2ee92d871694049450f2b3", "filename": "tests/data/parser/inline/0010_unsafe_default_impl.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85c42fba1291f1cc41fb7bfec63117895b394fc5/tests%2Fdata%2Fparser%2Finline%2F0010_unsafe_default_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c42fba1291f1cc41fb7bfec63117895b394fc5/tests%2Fdata%2Fparser%2Finline%2F0010_unsafe_default_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0010_unsafe_default_impl.rs?ref=85c42fba1291f1cc41fb7bfec63117895b394fc5", "patch": "@@ -0,0 +1 @@\n+unsafe default impl Foo {}"}, {"sha": "7450381cbc93e28bf88e3b2fe454ce3a294a9133", "filename": "tests/data/parser/inline/0010_unsafe_default_impl.txt", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/85c42fba1291f1cc41fb7bfec63117895b394fc5/tests%2Fdata%2Fparser%2Finline%2F0010_unsafe_default_impl.txt", "raw_url": "https://github.com/rust-lang/rust/raw/85c42fba1291f1cc41fb7bfec63117895b394fc5/tests%2Fdata%2Fparser%2Finline%2F0010_unsafe_default_impl.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0010_unsafe_default_impl.txt?ref=85c42fba1291f1cc41fb7bfec63117895b394fc5", "patch": "@@ -0,0 +1,13 @@\n+FILE@[0; 27)\n+  IMPL_ITEM@[0; 27)\n+    UNSAFE_KW@[0; 6)\n+    WHITESPACE@[6; 7)\n+    DEFAULT_KW@[7; 14)\n+    WHITESPACE@[14; 15)\n+    IMPL_KW@[15; 19)\n+    WHITESPACE@[19; 20)\n+    IDENT@[20; 23) \"Foo\"\n+    WHITESPACE@[23; 24)\n+    L_CURLY@[24; 25)\n+    R_CURLY@[25; 26)\n+    WHITESPACE@[26; 27)"}, {"sha": "c71e6da7376bb907375983fc9217e5e87a7e9d16", "filename": "tools/src/bin/gen.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/85c42fba1291f1cc41fb7bfec63117895b394fc5/tools%2Fsrc%2Fbin%2Fgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c42fba1291f1cc41fb7bfec63117895b394fc5/tools%2Fsrc%2Fbin%2Fgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tools%2Fsrc%2Fbin%2Fgen.rs?ref=85c42fba1291f1cc41fb7bfec63117895b394fc5", "patch": "@@ -20,6 +20,7 @@ fn main() {\n #[derive(Deserialize)]\n struct Grammar {\n     keywords: Vec<String>,\n+    contextual_keywords: Vec<String>,\n     tokens: Vec<String>,\n     nodes: Vec<String>,\n }\n@@ -38,10 +39,9 @@ impl Grammar {\n         acc.push_str(\"use tree::SyntaxInfo;\\n\");\n         acc.push_str(\"\\n\");\n \n-        let syntax_kinds: Vec<String> = self.keywords\n-            .iter()\n-            .map(|kw| kw_token(kw))\n-            .chain(self.tokens.iter().cloned())\n+        let syntax_kinds: Vec<String> =self.tokens.iter().cloned()\n+            .chain(self.keywords.iter().map(|kw| kw_token(kw)))\n+            .chain(self.contextual_keywords.iter().map(|kw| kw_token(kw)))\n             .chain(self.nodes.iter().cloned())\n             .collect();\n \n@@ -86,6 +86,7 @@ impl Grammar {\n         // fn ident_to_keyword\n         acc.push_str(\"pub(crate) fn ident_to_keyword(ident: &str) -> Option<SyntaxKind> {\\n\");\n         acc.push_str(\"    match ident {\\n\");\n+        // NB: no contextual_keywords here!\n         for kw in self.keywords.iter() {\n             write!(acc, \"        {:?} => Some({}),\\n\", kw, kw_token(kw)).unwrap();\n         }"}]}