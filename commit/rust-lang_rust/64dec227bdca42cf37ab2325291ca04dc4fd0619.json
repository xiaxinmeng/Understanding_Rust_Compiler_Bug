{"sha": "64dec227bdca42cf37ab2325291ca04dc4fd0619", "node_id": "C_kwDOAAsO6NoAKDY0ZGVjMjI3YmRjYTQyY2YzN2FiMjMyNTI5MWNhMDRkYzRmZDA2MTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-07T02:55:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-07T02:55:28Z"}, "message": "Auto merge of #2314 - RalfJung:unsized, r=RalfJung\n\nadjust for removed unsized_locals\n\nThe Miri side of https://github.com/rust-lang/rust/pull/98831", "tree": {"sha": "c8270c1bed92f8e83b5c93e1769b9218a57fcb12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8270c1bed92f8e83b5c93e1769b9218a57fcb12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64dec227bdca42cf37ab2325291ca04dc4fd0619", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64dec227bdca42cf37ab2325291ca04dc4fd0619", "html_url": "https://github.com/rust-lang/rust/commit/64dec227bdca42cf37ab2325291ca04dc4fd0619", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64dec227bdca42cf37ab2325291ca04dc4fd0619/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e4607bffc00f3ed92ef77d4277a2c074ed6a038", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e4607bffc00f3ed92ef77d4277a2c074ed6a038", "html_url": "https://github.com/rust-lang/rust/commit/4e4607bffc00f3ed92ef77d4277a2c074ed6a038"}, {"sha": "b6602f5d11fb9da3de05eefc856d7ec102c23139", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6602f5d11fb9da3de05eefc856d7ec102c23139", "html_url": "https://github.com/rust-lang/rust/commit/b6602f5d11fb9da3de05eefc856d7ec102c23139"}], "stats": {"total": 154, "additions": 129, "deletions": 25}, "files": [{"sha": "37d1eb0fbdecacff8f8bb0eedf74459f3e0a0821", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64dec227bdca42cf37ab2325291ca04dc4fd0619/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/64dec227bdca42cf37ab2325291ca04dc4fd0619/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=64dec227bdca42cf37ab2325291ca04dc4fd0619", "patch": "@@ -1 +1 @@\n-7665c3543079ebc3710b676d0fd6951bedfd4b29\n+8824d131619e58a38bde8bcf56401629b91a204a"}, {"sha": "12df9e271fb961d9d91c62b4194fc189dcdab2ad", "filename": "src/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64dec227bdca42cf37ab2325291ca04dc4fd0619/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64dec227bdca42cf37ab2325291ca04dc4fd0619/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=64dec227bdca42cf37ab2325291ca04dc4fd0619", "patch": "@@ -169,7 +169,7 @@ impl Provenance for Tag {\n                 write!(f, \"{:?}\", sb)?;\n             }\n             Tag::Wildcard => {\n-                write!(f, \"[Wildcard]\")?;\n+                write!(f, \"[wildcard]\")?;\n             }\n         }\n "}, {"sha": "2c77830a6d14524015f1db49badf6bf436a0c74a", "filename": "src/operator.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64dec227bdca42cf37ab2325291ca04dc4fd0619/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64dec227bdca42cf37ab2325291ca04dc4fd0619/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=64dec227bdca42cf37ab2325291ca04dc4fd0619", "patch": "@@ -35,11 +35,13 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n                     Immediate::Scalar(l) => (l.check_init()?.to_bits(size)?, 0),\n                     Immediate::ScalarPair(l1, l2) =>\n                         (l1.check_init()?.to_bits(size)?, l2.check_init()?.to_bits(size)?),\n+                    Immediate::Uninit => throw_ub!(InvalidUninitBytes(None)),\n                 };\n                 let right = match **right {\n                     Immediate::Scalar(r) => (r.check_init()?.to_bits(size)?, 0),\n                     Immediate::ScalarPair(r1, r2) =>\n                         (r1.check_init()?.to_bits(size)?, r2.check_init()?.to_bits(size)?),\n+                    Immediate::Uninit => throw_ub!(InvalidUninitBytes(None)),\n                 };\n                 let res = match bin_op {\n                     Eq => left == right,"}, {"sha": "ab79438c734de429bb79a1075d6087c75fbb4e54", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64dec227bdca42cf37ab2325291ca04dc4fd0619/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64dec227bdca42cf37ab2325291ca04dc4fd0619/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=64dec227bdca42cf37ab2325291ca04dc4fd0619", "patch": "@@ -68,12 +68,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"volatile_load\" => {\n                 let [place] = check_arg_count(args)?;\n                 let place = this.deref_operand(place)?;\n-                this.copy_op(&place.into(), dest)?;\n+                this.copy_op(&place.into(), dest, /*allow_transmute*/ false)?;\n             }\n             \"volatile_store\" => {\n                 let [place, dest] = check_arg_count(args)?;\n                 let place = this.deref_operand(place)?;\n-                this.copy_op(dest, &place.into())?;\n+                this.copy_op(dest, &place.into(), /*allow_transmute*/ false)?;\n             }\n \n             \"write_bytes\" | \"volatile_set_memory\" => {"}, {"sha": "bae8856001428c025f739f694c648a511c1015ee", "filename": "tests/fail/data_race/stack_pop_race.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/64dec227bdca42cf37ab2325291ca04dc4fd0619/tests%2Ffail%2Fdata_race%2Fstack_pop_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64dec227bdca42cf37ab2325291ca04dc4fd0619/tests%2Ffail%2Fdata_race%2Fstack_pop_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fstack_pop_race.rs?ref=64dec227bdca42cf37ab2325291ca04dc4fd0619", "patch": "@@ -0,0 +1,25 @@\n+// ignore-windows: Concurrency on Windows is not supported yet.\n+// compile-flags: -Zmiri-preemption-rate=0\n+use std::thread;\n+\n+#[derive(Copy, Clone)]\n+struct MakeSend(*const i32);\n+unsafe impl Send for MakeSend {}\n+\n+fn main() {\n+    race(0);\n+}\n+\n+// Using an argument for the ptr to point to, since those do not get StorageDead.\n+fn race(local: i32) {\n+    let ptr = MakeSend(&local as *const i32);\n+    thread::spawn(move || {\n+        let ptr = ptr;\n+        let _val = unsafe { *ptr.0 };\n+    });\n+    // Make the other thread go first so that it does not UAF.\n+    thread::yield_now();\n+    // Deallocating the local (when `main` returns)\n+    // races with the read in the other thread.\n+    // Make sure the error points at this function's end, not just the call site.\n+} //~ERROR Data race detected between Deallocate on thread `main` and Read on thread `<unnamed>`"}, {"sha": "ba830753f6eeae910323ceef03994a239f55ae95", "filename": "tests/fail/data_race/stack_pop_race.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/64dec227bdca42cf37ab2325291ca04dc4fd0619/tests%2Ffail%2Fdata_race%2Fstack_pop_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64dec227bdca42cf37ab2325291ca04dc4fd0619/tests%2Ffail%2Fdata_race%2Fstack_pop_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fstack_pop_race.stderr?ref=64dec227bdca42cf37ab2325291ca04dc4fd0619", "patch": "@@ -0,0 +1,20 @@\n+error: Undefined Behavior: Data race detected between Deallocate on thread `main` and Read on thread `<unnamed>` at ALLOC\n+  --> $DIR/stack_pop_race.rs:LL:CC\n+   |\n+LL | }\n+   |  ^ Data race detected between Deallocate on thread `main` and Read on thread `<unnamed>` at ALLOC\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+   = note: backtrace:\n+   = note: inside `race` at $DIR/stack_pop_race.rs:LL:CC\n+note: inside `main` at $DIR/stack_pop_race.rs:LL:CC\n+  --> $DIR/stack_pop_race.rs:LL:CC\n+   |\n+LL |     race(0);\n+   |     ^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "8dd07c585c627a3f68c773755bc458d4dc042889", "filename": "tests/fail/unsized-local.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/64dec227bdca42cf37ab2325291ca04dc4fd0619/tests%2Ffail%2Funsized-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64dec227bdca42cf37ab2325291ca04dc4fd0619/tests%2Ffail%2Funsized-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funsized-local.rs?ref=64dec227bdca42cf37ab2325291ca04dc4fd0619", "patch": "@@ -0,0 +1,23 @@\n+#![feature(unsized_locals)]\n+#![allow(incomplete_features)]\n+\n+fn main() {\n+    pub trait Foo {\n+        fn foo(self) -> String;\n+    }\n+\n+    struct A;\n+\n+    impl Foo for A {\n+        fn foo(self) -> String {\n+            format!(\"hello\")\n+        }\n+    }\n+\n+    let x = *(Box::new(A) as Box<dyn Foo>); //~ERROR unsized locals are not supported\n+    assert_eq!(x.foo(), format!(\"hello\"));\n+\n+    // I'm not sure whether we want this to work\n+    let x = Box::new(A) as Box<dyn Foo>;\n+    assert_eq!(x.foo(), format!(\"hello\"));\n+}"}, {"sha": "8277bc4546cb197dc7010657eebc90bd81d37025", "filename": "tests/fail/unsized-local.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/64dec227bdca42cf37ab2325291ca04dc4fd0619/tests%2Ffail%2Funsized-local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64dec227bdca42cf37ab2325291ca04dc4fd0619/tests%2Ffail%2Funsized-local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funsized-local.stderr?ref=64dec227bdca42cf37ab2325291ca04dc4fd0619", "patch": "@@ -0,0 +1,14 @@\n+error: unsupported operation: unsized locals are not supported\n+  --> $DIR/unsized-local.rs:LL:CC\n+   |\n+LL |     let x = *(Box::new(A) as Box<dyn Foo>);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unsized locals are not supported\n+   |\n+   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n+   = note: backtrace:\n+   = note: inside `main` at $DIR/unsized-local.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "908d521a0d8163a1568c67d6a0bf1ef90b6d6dd5", "filename": "tests/pass/dyn-traits.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/64dec227bdca42cf37ab2325291ca04dc4fd0619/tests%2Fpass%2Fdyn-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64dec227bdca42cf37ab2325291ca04dc4fd0619/tests%2Fpass%2Fdyn-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fdyn-traits.rs?ref=64dec227bdca42cf37ab2325291ca04dc4fd0619", "patch": "@@ -1,6 +1,3 @@\n-#![feature(unsized_locals, unsized_fn_params)]\n-#![allow(incomplete_features)]\n-\n fn ref_box_dyn() {\n     struct Struct(i32);\n \n@@ -75,6 +72,9 @@ fn box_box_trait() {\n     assert!(unsafe { DROPPED });\n }\n \n+// Disabled for now: unsized locals are not supported,\n+// their current MIR encoding is just not great.\n+/*\n fn unsized_dyn() {\n     pub trait Foo {\n         fn foo(self) -> String;\n@@ -95,7 +95,6 @@ fn unsized_dyn() {\n     let x = Box::new(A) as Box<dyn Foo>;\n     assert_eq!(x.foo(), format!(\"hello\"));\n }\n-\n fn unsized_dyn_autoderef() {\n     pub trait Foo {\n         fn foo(self) -> String;\n@@ -140,12 +139,9 @@ fn unsized_dyn_autoderef() {\n     let x = Box::new(|| \"hello\".to_owned()) as Box<dyn FnMut() -> String>;\n     assert_eq!(&x.foo() as &str, \"hello\");\n }\n+*/\n \n fn main() {\n     ref_box_dyn();\n     box_box_trait();\n-\n-    // \"exotic\" receivers\n-    unsized_dyn();\n-    unsized_dyn_autoderef();\n }"}, {"sha": "b752e5504d4c922ef838f1614dca74a9d6fe981d", "filename": "tests/pass/transmute_fat.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/64dec227bdca42cf37ab2325291ca04dc4fd0619/tests%2Fpass%2Ftransmute_fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64dec227bdca42cf37ab2325291ca04dc4fd0619/tests%2Fpass%2Ftransmute_fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Ftransmute_fat.rs?ref=64dec227bdca42cf37ab2325291ca04dc4fd0619", "patch": "@@ -3,6 +3,7 @@\n \n fn main() {\n     // If we are careful, we can exploit data layout...\n+    // This is a tricky case since we are transmuting a ScalarPair type to a non-ScalarPair type.\n     let raw = unsafe { std::mem::transmute::<&[u8], [*const u8; 2]>(&[42]) };\n     let ptr: *const u8 = unsafe { std::mem::transmute_copy(&raw) };\n     assert_eq!(unsafe { *ptr }, 42);"}, {"sha": "bbab1125a0afdc38dae846dda160081d993c4540", "filename": "tests/pass/unsized-tuple-impls.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4e4607bffc00f3ed92ef77d4277a2c074ed6a038/tests%2Fpass%2Funsized-tuple-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4607bffc00f3ed92ef77d4277a2c074ed6a038/tests%2Fpass%2Funsized-tuple-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Funsized-tuple-impls.rs?ref=4e4607bffc00f3ed92ef77d4277a2c074ed6a038", "patch": "@@ -1,13 +0,0 @@\n-#![feature(unsized_tuple_coercion)]\n-use std::mem;\n-\n-fn main() {\n-    let x: &(i32, i32, [i32]) = &(0, 1, [2, 3]);\n-    let y: &(i32, i32, [i32]) = &(0, 1, [2, 3, 4]);\n-    let mut a = [y, x];\n-    a.sort();\n-    assert_eq!(a, [x, y]);\n-\n-    assert_eq!(&format!(\"{:?}\", a), \"[(0, 1, [2, 3]), (0, 1, [2, 3, 4])]\");\n-    assert_eq!(mem::size_of_val(x), 16);\n-}"}, {"sha": "d9beac4327d7f2fd1651273f9ec62fa34e6a6cab", "filename": "tests/pass/unsized.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/64dec227bdca42cf37ab2325291ca04dc4fd0619/tests%2Fpass%2Funsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64dec227bdca42cf37ab2325291ca04dc4fd0619/tests%2Fpass%2Funsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Funsized.rs?ref=64dec227bdca42cf37ab2325291ca04dc4fd0619", "patch": "@@ -0,0 +1,36 @@\n+#![feature(unsized_tuple_coercion)]\n+#![feature(unsized_fn_params)]\n+\n+use std::mem;\n+\n+fn unsized_tuple() {\n+    let x: &(i32, i32, [i32]) = &(0, 1, [2, 3]);\n+    let y: &(i32, i32, [i32]) = &(0, 1, [2, 3, 4]);\n+    let mut a = [y, x];\n+    a.sort();\n+    assert_eq!(a, [x, y]);\n+\n+    assert_eq!(&format!(\"{:?}\", a), \"[(0, 1, [2, 3]), (0, 1, [2, 3, 4])]\");\n+    assert_eq!(mem::size_of_val(x), 16);\n+}\n+\n+fn unsized_params() {\n+    pub fn f0(_f: dyn FnOnce()) {}\n+    pub fn f1(_s: str) {}\n+    pub fn f2(_x: i32, _y: [i32]) {}\n+    pub fn f3(_p: dyn Send) {}\n+\n+    let c: Box<dyn FnOnce()> = Box::new(|| {});\n+    f0(*c);\n+    let foo = \"foo\".to_string().into_boxed_str();\n+    f1(*foo);\n+    let sl: Box<[i32]> = [0, 1, 2].to_vec().into_boxed_slice();\n+    f2(5, *sl);\n+    let p: Box<dyn Send> = Box::new((1, 2));\n+    f3(*p);\n+}\n+\n+fn main() {\n+    unsized_tuple();\n+    unsized_params();\n+}"}]}