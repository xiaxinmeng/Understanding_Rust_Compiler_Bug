{"sha": "d6385631f4d8d911039287bc4ca5ff2f1f2f0cec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2Mzg1NjMxZjRkOGQ5MTEwMzkyODdiYzRjYTVmZjJmMWYyZjBjZWM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-09-17T22:25:50Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-10-09T14:47:12Z"}, "message": "Add lint for doc without codeblocks", "tree": {"sha": "ded8f86989a987d9f84781d33961be1d4574ca35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ded8f86989a987d9f84781d33961be1d4574ca35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6385631f4d8d911039287bc4ca5ff2f1f2f0cec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6385631f4d8d911039287bc4ca5ff2f1f2f0cec", "html_url": "https://github.com/rust-lang/rust/commit/d6385631f4d8d911039287bc4ca5ff2f1f2f0cec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6385631f4d8d911039287bc4ca5ff2f1f2f0cec/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "607243b6f9b3890b01d5aa4bbea75be728a371be", "url": "https://api.github.com/repos/rust-lang/rust/commits/607243b6f9b3890b01d5aa4bbea75be728a371be", "html_url": "https://github.com/rust-lang/rust/commit/607243b6f9b3890b01d5aa4bbea75be728a371be"}], "stats": {"total": 123, "additions": 94, "deletions": 29}, "files": [{"sha": "66cb6f2b52acff46569999965cfa2b1577a4cf29", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d6385631f4d8d911039287bc4ca5ff2f1f2f0cec/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6385631f4d8d911039287bc4ca5ff2f1f2f0cec/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=d6385631f4d8d911039287bc4ca5ff2f1f2f0cec", "patch": "@@ -312,6 +312,12 @@ declare_lint! {\n     \"warn about documentation intra links resolution failure\"\n }\n \n+declare_lint! {\n+    pub MISSING_DOC_ITEM_CODE_EXAMPLE,\n+    Allow,\n+    \"warn about missing code example in an item's documentation\"\n+}\n+\n declare_lint! {\n     pub WHERE_CLAUSES_OBJECT_SAFETY,\n     Warn,\n@@ -408,6 +414,7 @@ impl LintPass for HardwiredLints {\n             DUPLICATE_ASSOCIATED_TYPE_BINDINGS,\n             DUPLICATE_MACRO_EXPORTS,\n             INTRA_DOC_LINK_RESOLUTION_FAILURE,\n+            MISSING_DOC_CODE_EXAMPLES,\n             WHERE_CLAUSES_OBJECT_SAFETY,\n             PROC_MACRO_DERIVE_RESOLUTION_FALLBACK,\n             MACRO_USE_EXTERN_CRATE,"}, {"sha": "fdd6929d98aedcb1b83a9187955ce1a8667d8ddb", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6385631f4d8d911039287bc4ca5ff2f1f2f0cec/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6385631f4d8d911039287bc4ca5ff2f1f2f0cec/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=d6385631f4d8d911039287bc4ca5ff2f1f2f0cec", "patch": "@@ -348,12 +348,14 @@ pub fn run_core(search_paths: SearchPaths,\n     let intra_link_resolution_failure_name = lint::builtin::INTRA_DOC_LINK_RESOLUTION_FAILURE.name;\n     let warnings_lint_name = lint::builtin::WARNINGS.name;\n     let missing_docs = rustc_lint::builtin::MISSING_DOCS.name;\n+    let missing_doc_example = rustc_lint::builtin::MISSING_DOC_ITEM_CODE_EXAMPLE.name;\n \n     // In addition to those specific lints, we also need to whitelist those given through\n     // command line, otherwise they'll get ignored and we don't want that.\n     let mut whitelisted_lints = vec![warnings_lint_name.to_owned(),\n                                      intra_link_resolution_failure_name.to_owned(),\n-                                     missing_docs.to_owned()];\n+                                     missing_docs.to_owned(),\n+                                     missing_doc_example.to_owned()];\n \n     whitelisted_lints.extend(cmd_lints.iter().map(|(lint, _)| lint).cloned());\n "}, {"sha": "22fa887c358145865fc03c5ece73b93eb2644472", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d6385631f4d8d911039287bc4ca5ff2f1f2f0cec/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6385631f4d8d911039287bc4ca5ff2f1f2f0cec/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=d6385631f4d8d911039287bc4ca5ff2f1f2f0cec", "patch": "@@ -532,8 +532,10 @@ impl fmt::Display for TestableCodeError {\n     }\n }\n \n-pub fn find_testable_code(\n-    doc: &str, tests: &mut test::Collector, error_codes: ErrorCodes,\n+pub fn find_testable_code<T: test::Tester>(\n+    doc: &str,\n+    tests: &mut T,\n+    error_codes: ErrorCodes,\n ) -> Result<(), TestableCodeError> {\n     let mut parser = Parser::new(doc);\n     let mut prev_offset = 0;"}, {"sha": "f97300357153b0f833372c57e931250ea773e8e2", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d6385631f4d8d911039287bc4ca5ff2f1f2f0cec/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6385631f4d8d911039287bc4ca5ff2f1f2f0cec/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=d6385631f4d8d911039287bc4ca5ff2f1f2f0cec", "patch": "@@ -24,7 +24,8 @@ use std::ops::Range;\n \n use core::DocContext;\n use fold::DocFolder;\n-use html::markdown::markdown_links;\n+use html::markdown::{find_testable_code, markdown_links, ErrorCodes, LangString};\n+\n use passes::Pass;\n \n pub const COLLECT_INTRA_DOC_LINKS: Pass =\n@@ -211,6 +212,43 @@ impl<'a, 'tcx, 'rcx, 'cstore> LinkCollector<'a, 'tcx, 'rcx, 'cstore> {\n     }\n }\n \n+fn look_for_tests<'a, 'tcx: 'a, 'rcx: 'a, 'cstore: 'rcx>(\n+    cx: &'a DocContext<'a, 'tcx, 'rcx, 'cstore>,\n+    dox: &str,\n+    item: &Item,\n+) {\n+    if (item.is_mod() && cx.tcx.hir.as_local_node_id(item.def_id).is_none()) ||\n+       cx.as_local_node_id(item.def_id).is_none() {\n+        // If non-local, no need to check anything.\n+        return;\n+    }\n+\n+    struct Tests {\n+        found_tests: usize,\n+    }\n+\n+    impl ::test::Tester for Tests {\n+        fn add_test(&mut self, _: String, _: LangString, _: usize) {\n+            self.found_tests += 1;\n+        }\n+    }\n+\n+    let mut tests = Tests {\n+        found_tests: 0,\n+    };\n+\n+    if find_testable_code(&dox, &mut tests, ErrorCodes::No).is_ok() {\n+        if tests.found_tests == 0 {\n+            let mut diag = cx.tcx.struct_span_lint_node(\n+                lint::builtin::MISSING_DOC_ITEM_CODE_EXAMPLE,\n+                NodeId::new(0),\n+                span_of_attrs(&item.attrs),\n+                \"Missing code example in this documentation\");\n+            diag.emit();\n+        }\n+    }\n+}\n+\n impl<'a, 'tcx, 'rcx, 'cstore> DocFolder for LinkCollector<'a, 'tcx, 'rcx, 'cstore> {\n     fn fold_item(&mut self, mut item: Item) -> Option<Item> {\n         let item_node_id = if item.is_mod() {\n@@ -273,6 +311,12 @@ impl<'a, 'tcx, 'rcx, 'cstore> DocFolder for LinkCollector<'a, 'tcx, 'rcx, 'cstor\n         let cx = self.cx;\n         let dox = item.attrs.collapsed_doc_value().unwrap_or_else(String::new);\n \n+        look_for_tests(&cx, &dox, &item);\n+\n+        if !UnstableFeatures::from_environment().is_nightly_build() {\n+            return None;\n+        }\n+\n         for (ori_link, link_range) in markdown_links(&dox) {\n             // bail early for real links\n             if ori_link.contains('/') {"}, {"sha": "1a7a3f4478e741bc9509c9839f164947bace0363", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 35, "deletions": 25, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d6385631f4d8d911039287bc4ca5ff2f1f2f0cec/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6385631f4d8d911039287bc4ca5ff2f1f2f0cec/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=d6385631f4d8d911039287bc4ca5ff2f1f2f0cec", "patch": "@@ -466,6 +466,14 @@ fn partition_source(s: &str) -> (String, String) {\n     (before, after)\n }\n \n+pub trait Tester {\n+    fn add_test(&mut self, test: String, config: LangString, line: usize);\n+    fn get_line(&self) -> usize {\n+        0\n+    }\n+    fn register_header(&mut self, _name: &str, _level: u32) {}\n+}\n+\n pub struct Collector {\n     pub tests: Vec<testing::TestDescAndFn>,\n \n@@ -534,7 +542,31 @@ impl Collector {\n         format!(\"{} - {} (line {})\", filename, self.names.join(\"::\"), line)\n     }\n \n-    pub fn add_test(&mut self, test: String, config: LangString, line: usize) {\n+    pub fn set_position(&mut self, position: Span) {\n+        self.position = position;\n+    }\n+\n+    fn get_filename(&self) -> FileName {\n+        if let Some(ref source_map) = self.source_map {\n+            let filename = source_map.span_to_filename(self.position);\n+            if let FileName::Real(ref filename) = filename {\n+                if let Ok(cur_dir) = env::current_dir() {\n+                    if let Ok(path) = filename.strip_prefix(&cur_dir) {\n+                        return path.to_owned().into();\n+                    }\n+                }\n+            }\n+            filename\n+        } else if let Some(ref filename) = self.filename {\n+            filename.clone().into()\n+        } else {\n+            FileName::Custom(\"input\".to_owned())\n+        }\n+    }\n+}\n+\n+impl Tester for Collector {\n+    fn add_test(&mut self, test: String, config: LangString, line: usize) {\n         let filename = self.get_filename();\n         let name = self.generate_name(line, &filename);\n         let cfgs = self.cfgs.clone();\n@@ -588,7 +620,7 @@ impl Collector {\n         });\n     }\n \n-    pub fn get_line(&self) -> usize {\n+    fn get_line(&self) -> usize {\n         if let Some(ref source_map) = self.source_map {\n             let line = self.position.lo().to_usize();\n             let line = source_map.lookup_char_pos(BytePos(line as u32)).line;\n@@ -598,29 +630,7 @@ impl Collector {\n         }\n     }\n \n-    pub fn set_position(&mut self, position: Span) {\n-        self.position = position;\n-    }\n-\n-    fn get_filename(&self) -> FileName {\n-        if let Some(ref source_map) = self.source_map {\n-            let filename = source_map.span_to_filename(self.position);\n-            if let FileName::Real(ref filename) = filename {\n-                if let Ok(cur_dir) = env::current_dir() {\n-                    if let Ok(path) = filename.strip_prefix(&cur_dir) {\n-                        return path.to_owned().into();\n-                    }\n-                }\n-            }\n-            filename\n-        } else if let Some(ref filename) = self.filename {\n-            filename.clone().into()\n-        } else {\n-            FileName::Custom(\"input\".to_owned())\n-        }\n-    }\n-\n-    pub fn register_header(&mut self, name: &str, level: u32) {\n+    fn register_header(&mut self, name: &str, level: u32) {\n         if self.use_headers {\n             // we use these headings as test names, so it's good if\n             // they're valid identifiers."}]}