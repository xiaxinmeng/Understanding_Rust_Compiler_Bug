{"sha": "88f5e110db438d6e69a4493e21bd5a99cefdb46d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZjVlMTEwZGI0MzhkNmU2OWE0NDkzZTIxYmQ1YTk5Y2VmZGI0NmQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-10-20T00:57:18Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-10-20T16:26:15Z"}, "message": "review comments", "tree": {"sha": "fbf57bd48525a84901062c3062c2e254849cbe0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbf57bd48525a84901062c3062c2e254849cbe0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88f5e110db438d6e69a4493e21bd5a99cefdb46d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88f5e110db438d6e69a4493e21bd5a99cefdb46d", "html_url": "https://github.com/rust-lang/rust/commit/88f5e110db438d6e69a4493e21bd5a99cefdb46d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88f5e110db438d6e69a4493e21bd5a99cefdb46d/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae0e3d051178193aec39cb7ea8110301339b3e44", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae0e3d051178193aec39cb7ea8110301339b3e44", "html_url": "https://github.com/rust-lang/rust/commit/ae0e3d051178193aec39cb7ea8110301339b3e44"}], "stats": {"total": 265, "additions": 133, "deletions": 132}, "files": [{"sha": "835f75ec8ef06e3e68caad708ba542863783678b", "filename": "compiler/rustc_infer/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -54,7 +54,7 @@ pub fn report_object_safety_error(\n         \"the trait `{}` cannot be made into an object\",\n         trait_str\n     );\n-    err.span_label(span, format!(\"the trait `{}` cannot be made into an object\", trait_str));\n+    err.span_label(span, format!(\"`{}` cannot be made into an object\", trait_str));\n \n     let mut reported_violations = FxHashSet::default();\n     let mut multi_span = vec![];"}, {"sha": "26962aa108342f0b17a366ca4b1407756feac2f4", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -647,7 +647,7 @@ impl ObjectSafetyViolation {\n             ObjectSafetyViolation::SizedSelf(_) => \"it requires `Self: Sized`\".into(),\n             ObjectSafetyViolation::SupertraitSelf(ref spans) => {\n                 if spans.iter().any(|sp| *sp != DUMMY_SP) {\n-                    \"it uses `Self` as a type parameter in this\".into()\n+                    \"it uses `Self` as a type parameter\".into()\n                 } else {\n                     \"it cannot use `Self` as a type parameter in a supertrait or `where`-clause\"\n                         .into()"}, {"sha": "d1647e686a84f9b225acf62c4104157c96f4a87f", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 46, "deletions": 45, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -100,51 +100,7 @@ fn object_safety_violations_for_trait(\n                 span,\n             ) = violation\n             {\n-                // Using `CRATE_NODE_ID` is wrong, but it's hard to get a more precise id.\n-                // It's also hard to get a use site span, so we use the method definition span.\n-                tcx.struct_span_lint_hir(\n-                    WHERE_CLAUSES_OBJECT_SAFETY,\n-                    hir::CRATE_HIR_ID,\n-                    *span,\n-                    |lint| {\n-                        let mut err = lint.build(&format!(\n-                            \"the trait `{}` cannot be made into an object\",\n-                            tcx.def_path_str(trait_def_id)\n-                        ));\n-                        let node = tcx.hir().get_if_local(trait_def_id);\n-                        let mut spans = MultiSpan::from_span(*span);\n-                        if let Some(hir::Node::Item(item)) = node {\n-                            spans.push_span_label(\n-                                item.ident.span,\n-                                \"this trait cannot be made into an object...\".into(),\n-                            );\n-                            spans.push_span_label(\n-                                *span,\n-                                format!(\"...because {}\", violation.error_msg()),\n-                            );\n-                        } else {\n-                            spans.push_span_label(\n-                                *span,\n-                                format!(\n-                                    \"the trait cannot be made into an object because {}\",\n-                                    violation.error_msg()\n-                                ),\n-                            );\n-                        };\n-                        err.span_note(\n-                            spans,\n-                            \"for a trait to be \\\"object safe\\\" it needs to allow building a vtable \\\n-                             to allow the call to be resolvable dynamically; for more information \\\n-                             visit <https://doc.rust-lang.org/reference/items/traits.html\\\n-                             #object-safety>\",\n-                        );\n-                        if node.is_some() {\n-                            // Only provide the help if its a local trait, otherwise it's not\n-                            violation.solution(&mut err);\n-                        }\n-                        err.emit();\n-                    },\n-                );\n+                lint_object_unsafe_trait(tcx, *span, trait_def_id, violation);\n                 false\n             } else {\n                 true\n@@ -182,6 +138,51 @@ fn object_safety_violations_for_trait(\n     violations\n }\n \n+/// Lint object-unsafe trait.\n+fn lint_object_unsafe_trait(\n+    tcx: TyCtxt<'_>,\n+    span: Span,\n+    trait_def_id: DefId,\n+    violation: &ObjectSafetyViolation,\n+) {\n+    // Using `CRATE_NODE_ID` is wrong, but it's hard to get a more precise id.\n+    // It's also hard to get a use site span, so we use the method definition span.\n+    tcx.struct_span_lint_hir(WHERE_CLAUSES_OBJECT_SAFETY, hir::CRATE_HIR_ID, span, |lint| {\n+        let mut err = lint.build(&format!(\n+            \"the trait `{}` cannot be made into an object\",\n+            tcx.def_path_str(trait_def_id)\n+        ));\n+        let node = tcx.hir().get_if_local(trait_def_id);\n+        let mut spans = MultiSpan::from_span(span);\n+        if let Some(hir::Node::Item(item)) = node {\n+            spans.push_span_label(\n+                item.ident.span,\n+                \"this trait cannot be made into an object...\".into(),\n+            );\n+            spans.push_span_label(span, format!(\"...because {}\", violation.error_msg()));\n+        } else {\n+            spans.push_span_label(\n+                span,\n+                format!(\n+                    \"the trait cannot be made into an object because {}\",\n+                    violation.error_msg()\n+                ),\n+            );\n+        };\n+        err.span_note(\n+            spans,\n+            \"for a trait to be \\\"object safe\\\" it needs to allow building a vtable to allow the \\\n+             call to be resolvable dynamically; for more information visit \\\n+             <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\",\n+        );\n+        if node.is_some() {\n+            // Only provide the help if its a local trait, otherwise it's not\n+            violation.solution(&mut err);\n+        }\n+        err.emit();\n+    });\n+}\n+\n fn sized_trait_bound_spans<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     bounds: hir::GenericBounds<'tcx>,"}, {"sha": "7b4594108246b9b1eec19431cf5cd22ac97f7435", "filename": "src/test/ui/associated-consts/associated-const-in-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-in-trait.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/associated-const-in-trait.rs:9:6\n    |\n LL | impl dyn Trait {\n-   |      ^^^^^^^^^ the trait `Trait` cannot be made into an object\n+   |      ^^^^^^^^^ `Trait` cannot be made into an object\n    |\n    = help: consider moving `N` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>"}, {"sha": "92d74e38cfa8db81a4164e62c0a3374b293a02df", "filename": "src/test/ui/associated-item/issue-48027.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-48027.rs:6:6\n    |\n LL | impl dyn Bar {}\n-   |      ^^^^^^^ the trait `Bar` cannot be made into an object\n+   |      ^^^^^^^ `Bar` cannot be made into an object\n    |\n    = help: consider moving `X` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>"}, {"sha": "a2b779e29540b8f4353604b7d044a4426f13057e", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n   --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:7:24\n    |\n LL | impl NotObjectSafe for dyn NotObjectSafe { }\n-   |                        ^^^^^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n+   |                        ^^^^^^^^^^^^^^^^^ `NotObjectSafe` cannot be made into an object\n    |\n    = help: consider moving `eq` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>"}, {"sha": "68734cd4ccd6b1b1c2cbe76e915a07fabb3f555b", "filename": "src/test/ui/did_you_mean/trait-object-reference-without-parens-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Ftrait-object-reference-without-parens-suggestion.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -14,7 +14,7 @@ error[E0038]: the trait `Copy` cannot be made into an object\n   --> $DIR/trait-object-reference-without-parens-suggestion.rs:4:12\n    |\n LL |     let _: &Copy + 'static;\n-   |            ^^^^^ the trait `Copy` cannot be made into an object\n+   |            ^^^^^ `Copy` cannot be made into an object\n    |\n    = note: the trait cannot be made into an object because it requires `Self: Sized`\n    = note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>"}, {"sha": "513fda3097c145feadadf69c43375a228ba8673c", "filename": "src/test/ui/error-codes/E0033-teach.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -8,7 +8,7 @@ error[E0038]: the trait `SomeTrait` cannot be made into an object\n   --> $DIR/E0033-teach.rs:8:20\n    |\n LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n-   |                    ^^^^^^^^^^^^^^ the trait `SomeTrait` cannot be made into an object\n+   |                    ^^^^^^^^^^^^^^ `SomeTrait` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/E0033-teach.rs:4:8"}, {"sha": "fc1248440d0437354f912022a0c13157576af237", "filename": "src/test/ui/error-codes/E0033.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -8,7 +8,7 @@ error[E0038]: the trait `SomeTrait` cannot be made into an object\n   --> $DIR/E0033.rs:6:20\n    |\n LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n-   |                    ^^^^^^^^^^^^^^ the trait `SomeTrait` cannot be made into an object\n+   |                    ^^^^^^^^^^^^^^ `SomeTrait` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/E0033.rs:2:8"}, {"sha": "eb68a6298d1ac1217a3deca57ec8d270478359df", "filename": "src/test/ui/error-codes/E0038.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/E0038.rs:5:16\n    |\n LL | fn call_foo(x: Box<dyn Trait>) {\n-   |                ^^^^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n+   |                ^^^^^^^^^^^^^^ `Trait` cannot be made into an object\n    |\n    = help: consider moving `foo` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>"}, {"sha": "b61d5604455827c9752b70992bd52ee9d6dc894c", "filename": "src/test/ui/feature-gates/feature-gate-object_safe_for_dispatch.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `NonObjectSafe1` cannot be made into an object\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:18:38\n    |\n LL | fn takes_non_object_safe_ref<T>(obj: &dyn NonObjectSafe1) {\n-   |                                      ^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe1` cannot be made into an object\n+   |                                      ^^^^^^^^^^^^^^^^^^^ `NonObjectSafe1` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:4:23\n@@ -16,7 +16,7 @@ error[E0038]: the trait `NonObjectSafe2` cannot be made into an object\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:22:36\n    |\n LL | fn return_non_object_safe_ref() -> &'static dyn NonObjectSafe2 {\n-   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe2` cannot be made into an object\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `NonObjectSafe2` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:7:8\n@@ -38,7 +38,7 @@ error[E0038]: the trait `NonObjectSafe3` cannot be made into an object\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:27:35\n    |\n LL | fn takes_non_object_safe_box(obj: Box<dyn NonObjectSafe3>) {\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe3` cannot be made into an object\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^ `NonObjectSafe3` cannot be made into an object\n    |\n    = help: consider moving `foo` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n@@ -53,7 +53,7 @@ error[E0038]: the trait `NonObjectSafe4` cannot be made into an object\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:31:35\n    |\n LL | fn return_non_object_safe_rc() -> std::rc::Rc<dyn NonObjectSafe4> {\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe4` cannot be made into an object\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `NonObjectSafe4` cannot be made into an object\n    |\n    = help: consider moving `foo` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n@@ -68,7 +68,7 @@ error[E0038]: the trait `NonObjectSafe1` cannot be made into an object\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:38:16\n    |\n LL | impl Trait for dyn NonObjectSafe1 {}\n-   |                ^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe1` cannot be made into an object\n+   |                ^^^^^^^^^^^^^^^^^^ `NonObjectSafe1` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:4:23"}, {"sha": "2f3726bdb33a825dffb2ad4408414ca749d34242", "filename": "src/test/ui/impl-trait/object-unsafe-trait-in-return-position-dyn-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-dyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-dyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-dyn-trait.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n   --> $DIR/object-unsafe-trait-in-return-position-dyn-trait.rs:21:13\n    |\n LL | fn car() -> dyn NotObjectSafe {\n-   |             ^^^^^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n+   |             ^^^^^^^^^^^^^^^^^ `NotObjectSafe` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-unsafe-trait-in-return-position-dyn-trait.rs:3:8\n@@ -24,7 +24,7 @@ error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n   --> $DIR/object-unsafe-trait-in-return-position-dyn-trait.rs:28:13\n    |\n LL | fn cat() -> Box<dyn NotObjectSafe> {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ `NotObjectSafe` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-unsafe-trait-in-return-position-dyn-trait.rs:3:8"}, {"sha": "86b530e85a80ac8091e6d411ab9d1bf7fb9d5e34", "filename": "src/test/ui/issues/issue-18959.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18959.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-18959.rs:11:11\n    |\n LL | fn foo(b: &dyn Bar) {\n-   |           ^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |           ^^^^^^^^ `Bar` cannot be made into an object\n    |\n    = help: consider moving `foo` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>"}, {"sha": "c3a5d3dfeee7ddcfd68ce29bafba5aeef6acf117", "filename": "src/test/ui/issues/issue-19380.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `Qiz` cannot be made into an object\n   --> $DIR/issue-19380.rs:11:9\n    |\n LL |   foos: &'static [&'static (dyn Qiz + 'static)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Qiz` cannot be made into an object\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Qiz` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-19380.rs:2:6"}, {"sha": "555d0ff0dc787c71f92fce52d3dea6df749bf055", "filename": "src/test/ui/issues/issue-19538.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19538.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-19538.rs:17:15\n    |\n LL |     let test: &mut dyn Bar = &mut thing;\n-   |               ^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |               ^^^^^^^^^^^^ `Bar` cannot be made into an object\n    |\n    = help: consider moving `foo` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n@@ -18,7 +18,7 @@ error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-19538.rs:17:30\n    |\n LL |     let test: &mut dyn Bar = &mut thing;\n-   |                              ^^^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |                              ^^^^^^^^^^ `Bar` cannot be made into an object\n    |\n    = help: consider moving `foo` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>"}, {"sha": "1d7f252e5566ddc1d5475dbf60e27653bd95a605", "filename": "src/test/ui/issues/issue-20692.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fissues%2Fissue-20692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fissues%2Fissue-20692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20692.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `Array` cannot be made into an object\n   --> $DIR/issue-20692.rs:7:5\n    |\n LL |     &dyn Array;\n-   |     ^^^^^^^^^^ the trait `Array` cannot be made into an object\n+   |     ^^^^^^^^^^ `Array` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-20692.rs:1:14\n@@ -17,7 +17,7 @@ error[E0038]: the trait `Array` cannot be made into an object\n   --> $DIR/issue-20692.rs:4:13\n    |\n LL |     let _ = x\n-   |             ^ the trait `Array` cannot be made into an object\n+   |             ^ `Array` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-20692.rs:1:14"}, {"sha": "2c873243fe9e4d97fa35996962fdd525cd23b7f9", "filename": "src/test/ui/issues/issue-26056.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fissues%2Fissue-26056.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fissues%2Fissue-26056.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26056.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,13 +2,13 @@ error[E0038]: the trait `Map` cannot be made into an object\n   --> $DIR/issue-26056.rs:20:13\n    |\n LL |         as &dyn Map<Key=u32,MapValue=u32>;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Map` cannot be made into an object\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Map` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-26056.rs:9:12\n    |\n LL | trait Map: MapLookup<<Self as Map>::Key> {\n-   |       ---  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because it uses `Self` as a type parameter in this\n+   |       ---  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because it uses `Self` as a type parameter\n    |       |\n    |       this trait cannot be made into an object...\n "}, {"sha": "203cd0630ebd006af0c87b6c7b83e54c1aec7964", "filename": "src/test/ui/issues/issue-28576.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fissues%2Fissue-28576.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fissues%2Fissue-28576.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28576.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -3,16 +3,16 @@ error[E0038]: the trait `Bar` cannot be made into an object\n    |\n LL | /            dyn Bar\n LL | |               <Assoc=()>\n-   | |________________________^ the trait `Bar` cannot be made into an object\n+   | |________________________^ `Bar` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-28576.rs:5:16\n    |\n LL | pub trait Bar: Foo<Assoc=()> {\n    |           ---  ^^^^^^^^^^^^^\n    |           |    |   |\n-   |           |    |   ...because it uses `Self` as a type parameter in this\n-   |           |    ...because it uses `Self` as a type parameter in this\n+   |           |    |   ...because it uses `Self` as a type parameter\n+   |           |    ...because it uses `Self` as a type parameter\n    |           this trait cannot be made into an object...\n \n error: aborting due to previous error"}, {"sha": "d7721d7e69cd47539e9123c999c7f510b37f5915", "filename": "src/test/ui/issues/issue-38404.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fissues%2Fissue-38404.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fissues%2Fissue-38404.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38404.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,13 +2,13 @@ error[E0038]: the trait `B` cannot be made into an object\n   --> $DIR/issue-38404.rs:3:15\n    |\n LL | trait C<T>: A<dyn B<T, Output=usize>> {}\n-   |               ^^^^^^^^^^^^^^^^^^^^^^ the trait `B` cannot be made into an object\n+   |               ^^^^^^^^^^^^^^^^^^^^^^ `B` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-38404.rs:1:13\n    |\n LL | trait A<T>: std::ops::Add<Self> + Sized {}\n-   |             ^^^^^^^^^^^^^^^^^^^ ...because it uses `Self` as a type parameter in this\n+   |             ^^^^^^^^^^^^^^^^^^^ ...because it uses `Self` as a type parameter\n LL | trait B<T>: A<T> {}\n    |       - this trait cannot be made into an object...\n "}, {"sha": "d41488c15f737b9b524396fe220c780fa3ad4f28", "filename": "src/test/ui/issues/issue-38604.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fissues%2Fissue-38604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fissues%2Fissue-38604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38604.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,27 +2,27 @@ error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/issue-38604.rs:14:13\n    |\n LL |     let _f: Box<dyn Foo> =\n-   |             ^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n+   |             ^^^^^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-38604.rs:2:22\n    |\n LL | trait Foo where u32: Q<Self> {\n-   |       ---            ^^^^^^^ ...because it uses `Self` as a type parameter in this\n+   |       ---            ^^^^^^^ ...because it uses `Self` as a type parameter\n    |       |\n    |       this trait cannot be made into an object...\n \n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/issue-38604.rs:15:9\n    |\n LL |         Box::new(());\n-   |         ^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n+   |         ^^^^^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-38604.rs:2:22\n    |\n LL | trait Foo where u32: Q<Self> {\n-   |       ---            ^^^^^^^ ...because it uses `Self` as a type parameter in this\n+   |       ---            ^^^^^^^ ...because it uses `Self` as a type parameter\n    |       |\n    |       this trait cannot be made into an object...\n    = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn Foo>>` for `Box<()>`"}, {"sha": "64e56f8c7904340075e79b0c3c273fb9618e98f9", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.curr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -13,7 +13,7 @@ error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/kindck-inherited-copy-bound.rs:28:19\n    |\n LL |     let z = &x as &dyn Foo;\n-   |                   ^^^^^^^^ the trait `Foo` cannot be made into an object\n+   |                   ^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/kindck-inherited-copy-bound.rs:10:13\n@@ -27,7 +27,7 @@ error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/kindck-inherited-copy-bound.rs:28:13\n    |\n LL |     let z = &x as &dyn Foo;\n-   |             ^^ the trait `Foo` cannot be made into an object\n+   |             ^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/kindck-inherited-copy-bound.rs:10:13"}, {"sha": "57f7551fd4018a6b8de5dc2542d6625822901b51", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -13,7 +13,7 @@ error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/kindck-inherited-copy-bound.rs:28:13\n    |\n LL |     let z = &x as &dyn Foo;\n-   |             ^^ the trait `Foo` cannot be made into an object\n+   |             ^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/kindck-inherited-copy-bound.rs:10:13"}, {"sha": "35ec586892c05b13e2934aba8465dfee635f9a2e", "filename": "src/test/ui/object-safety/object-safety-associated-consts.curr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.curr.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-associated-consts.rs:12:30\n    |\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n-   |                              ^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |                              ^^^^^^^^ `Bar` cannot be made into an object\n    |\n    = help: consider moving `X` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>"}, {"sha": "d51734ed2316bbf1627a665e82fd338801617f28", "filename": "src/test/ui/object-safety/object-safety-associated-consts.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-associated-consts.object_safe_for_dispatch.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-associated-consts.rs:14:5\n    |\n LL |     t\n-   |     ^ the trait `Bar` cannot be made into an object\n+   |     ^ `Bar` cannot be made into an object\n    |\n    = help: consider moving `X` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>"}, {"sha": "89c4f8ced79f6ce77c9ee6fd5fb5eb1939566329", "filename": "src/test/ui/object-safety/object-safety-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-bounds.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,15 +2,15 @@ error[E0038]: the trait `X` cannot be made into an object\n   --> $DIR/object-safety-bounds.rs:7:11\n    |\n LL | fn f() -> Box<dyn X<U = u32>> {\n-   |           ^^^^^^^^^^^^^^^^^^^ the trait `X` cannot be made into an object\n+   |           ^^^^^^^^^^^^^^^^^^^ `X` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-bounds.rs:4:13\n    |\n LL | trait X {\n    |       - this trait cannot be made into an object...\n LL |     type U: PartialEq<Self>;\n-   |             ^^^^^^^^^^^^^^^ ...because it uses `Self` as a type parameter in this\n+   |             ^^^^^^^^^^^^^^^ ...because it uses `Self` as a type parameter\n \n error: aborting due to previous error\n "}, {"sha": "8d6094c5144290c68ca2bc0def7f61368b4fa25f", "filename": "src/test/ui/object-safety/object-safety-generics.curr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.curr.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-generics.rs:18:30\n    |\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n-   |                              ^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |                              ^^^^^^^^ `Bar` cannot be made into an object\n    |\n    = help: consider moving `bar` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n@@ -17,7 +17,7 @@ error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-generics.rs:24:39\n    |\n LL | fn make_bar_explicit<T:Bar>(t: &T) -> &dyn Bar {\n-   |                                       ^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |                                       ^^^^^^^^ `Bar` cannot be made into an object\n    |\n    = help: consider moving `bar` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>"}, {"sha": "3d2b2bb228cb529395c185dc71bbaf897a77d2ea", "filename": "src/test/ui/object-safety/object-safety-generics.object_safe_for_dispatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-generics.object_safe_for_dispatch.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-generics.rs:20:5\n    |\n LL |     t\n-   |     ^ the trait `Bar` cannot be made into an object\n+   |     ^ `Bar` cannot be made into an object\n    |\n    = help: consider moving `bar` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n@@ -19,7 +19,7 @@ error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-generics.rs:26:5\n    |\n LL |     t as &dyn Bar\n-   |     ^ the trait `Bar` cannot be made into an object\n+   |     ^ `Bar` cannot be made into an object\n    |\n    = help: consider moving `bar` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>"}, {"sha": "0262d536246dc16ccd4b09fbe9ce670ab7f734f9", "filename": "src/test/ui/object-safety/object-safety-issue-22040.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-issue-22040.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-issue-22040.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-issue-22040.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,13 +2,13 @@ error[E0038]: the trait `Expr` cannot be made into an object\n   --> $DIR/object-safety-issue-22040.rs:12:23\n    |\n LL |     elements: Vec<Box<dyn Expr + 'x>>,\n-   |                       ^^^^^^^^^^^^^ the trait `Expr` cannot be made into an object\n+   |                       ^^^^^^^^^^^^^ `Expr` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-issue-22040.rs:5:21\n    |\n LL | trait Expr: Debug + PartialEq {\n-   |       ----          ^^^^^^^^^ ...because it uses `Self` as a type parameter in this\n+   |       ----          ^^^^^^^^^ ...because it uses `Self` as a type parameter\n    |       |\n    |       this trait cannot be made into an object...\n "}, {"sha": "336929702e6cd3d032a9f24efa3cbd7356df1d41", "filename": "src/test/ui/object-safety/object-safety-mentions-Self.curr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.curr.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-mentions-Self.rs:22:30\n    |\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n-   |                              ^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |                              ^^^^^^^^ `Bar` cannot be made into an object\n    |\n    = help: consider moving `bar` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n@@ -17,7 +17,7 @@ error[E0038]: the trait `Baz` cannot be made into an object\n   --> $DIR/object-safety-mentions-Self.rs:28:30\n    |\n LL | fn make_baz<T:Baz>(t: &T) -> &dyn Baz {\n-   |                              ^^^^^^^^ the trait `Baz` cannot be made into an object\n+   |                              ^^^^^^^^ `Baz` cannot be made into an object\n    |\n    = help: consider moving `baz` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>"}, {"sha": "6e7896e309cc691ec9b20182800625b587f2e29a", "filename": "src/test/ui/object-safety/object-safety-mentions-Self.object_safe_for_dispatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-mentions-Self.rs:24:5\n    |\n LL |     t\n-   |     ^ the trait `Bar` cannot be made into an object\n+   |     ^ `Bar` cannot be made into an object\n    |\n    = help: consider moving `bar` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n@@ -19,7 +19,7 @@ error[E0038]: the trait `Baz` cannot be made into an object\n   --> $DIR/object-safety-mentions-Self.rs:30:5\n    |\n LL |     t\n-   |     ^ the trait `Baz` cannot be made into an object\n+   |     ^ `Baz` cannot be made into an object\n    |\n    = help: consider moving `baz` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>"}, {"sha": "e00d6bb2f4a36bc5eda071146ad32a44309c1705", "filename": "src/test/ui/object-safety/object-safety-no-static.curr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.curr.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/object-safety-no-static.rs:12:18\n    |\n LL | fn diverges() -> Box<dyn Foo> {\n-   |                  ^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n+   |                  ^^^^^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-no-static.rs:9:8"}, {"sha": "91a071f567813c8e4978c03485b1380576b8c1b2", "filename": "src/test/ui/object-safety/object-safety-no-static.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.object_safe_for_dispatch.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/object-safety-no-static.rs:22:27\n    |\n LL |     let b: Box<dyn Foo> = Box::new(Bar);\n-   |                           ^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n+   |                           ^^^^^^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-no-static.rs:9:8"}, {"sha": "71236c8e3843805cc6980a4a65d8284f4a0d59a3", "filename": "src/test/ui/object-safety/object-safety-sized-2.curr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.curr.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-sized-2.rs:14:30\n    |\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n-   |                              ^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |                              ^^^^^^^^ `Bar` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-sized-2.rs:9:18"}, {"sha": "b6e4903b0790ba51c28a65a235bb087c33066ba7", "filename": "src/test/ui/object-safety/object-safety-sized-2.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.object_safe_for_dispatch.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-sized-2.rs:16:5\n    |\n LL |     t\n-   |     ^ the trait `Bar` cannot be made into an object\n+   |     ^ `Bar` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-sized-2.rs:9:18"}, {"sha": "94b06ee934d44bf69368786b98bbb12c66d9f918", "filename": "src/test/ui/object-safety/object-safety-sized.curr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.curr.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-sized.rs:12:30\n    |\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n-   |                              ^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |                              ^^^^^^^^ `Bar` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-sized.rs:8:13"}, {"sha": "645852c7e71c2f1536d2bce6d2ffcf937dfe72e4", "filename": "src/test/ui/object-safety/object-safety-sized.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized.object_safe_for_dispatch.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-sized.rs:14:5\n    |\n LL |     t\n-   |     ^ the trait `Bar` cannot be made into an object\n+   |     ^ `Bar` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-sized.rs:8:13"}, {"sha": "a106ab995b0a5160106a82680a6bdd47794a51c0", "filename": "src/test/ui/object-safety/object-safety-supertrait-mentions-Self.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-Self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-Self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-supertrait-mentions-Self.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,13 +2,13 @@ error[E0038]: the trait `Baz` cannot be made into an object\n   --> $DIR/object-safety-supertrait-mentions-Self.rs:15:31\n    |\n LL | fn make_baz<T:Baz>(t: &T) -> &dyn Baz {\n-   |                               ^^^^^^^ the trait `Baz` cannot be made into an object\n+   |                               ^^^^^^^ `Baz` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-safety-supertrait-mentions-Self.rs:8:13\n    |\n LL | trait Baz : Bar<Self> {\n-   |       ---   ^^^^^^^^^ ...because it uses `Self` as a type parameter in this\n+   |       ---   ^^^^^^^^^ ...because it uses `Self` as a type parameter\n    |       |\n    |       this trait cannot be made into an object...\n "}, {"sha": "782cfeec4bcaf3f2e0a82d131f114f485e5db819", "filename": "src/test/ui/resolve/issue-3907-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `issue_3907::Foo` cannot be made into an object\n   --> $DIR/issue-3907-2.rs:11:12\n    |\n LL | fn bar(_x: Foo) {}\n-   |            ^^^ the trait `issue_3907::Foo` cannot be made into an object\n+   |            ^^^ `issue_3907::Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/auxiliary/issue-3907.rs:2:8"}, {"sha": "35a65facb57e62ddff0474c4851b8a009d544bfb", "filename": "src/test/ui/self/arbitrary-self-types-not-object-safe.curr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -5,7 +5,7 @@ LL |     fn foo(self: &Rc<Self>) -> usize;\n    |                  --------- help: consider changing method `foo`'s `self` parameter to be `&self`: `&Self`\n ...\n LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n-   |                                ^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n+   |                                ^^^^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/arbitrary-self-types-not-object-safe.rs:8:18\n@@ -22,7 +22,7 @@ LL |     fn foo(self: &Rc<Self>) -> usize;\n    |                  --------- help: consider changing method `foo`'s `self` parameter to be `&self`: `&Self`\n ...\n LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n-   |             ^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n+   |             ^^^^^^^^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/arbitrary-self-types-not-object-safe.rs:8:18"}, {"sha": "a74752cf840f22a96c2170ed6bee691d3ffaf4a1", "filename": "src/test/ui/self/arbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -5,7 +5,7 @@ LL |     fn foo(self: &Rc<Self>) -> usize;\n    |                  --------- help: consider changing method `foo`'s `self` parameter to be `&self`: `&Self`\n ...\n LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n-   |             ^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n+   |             ^^^^^^^^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/arbitrary-self-types-not-object-safe.rs:8:18"}, {"sha": "797406f869fe6b6b149b6e228a5352638ec64499", "filename": "src/test/ui/suggestions/object-unsafe-trait-references-self.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-references-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-references-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-references-self.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/object-unsafe-trait-references-self.rs:6:11\n    |\n LL | fn bar(x: &dyn Trait) {}\n-   |           ^^^^^^^^^^ the trait `Trait` cannot be made into an object\n+   |           ^^^^^^^^^^ `Trait` cannot be made into an object\n    |\n    = help: consider moving `baz` to another trait\n    = help: consider moving `bat` to another trait\n@@ -20,7 +20,7 @@ error[E0038]: the trait `Other` cannot be made into an object\n   --> $DIR/object-unsafe-trait-references-self.rs:10:11\n    |\n LL | fn foo(x: &dyn Other) {}\n-   |           ^^^^^^^^^^ the trait `Other` cannot be made into an object\n+   |           ^^^^^^^^^^ `Other` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-unsafe-trait-references-self.rs:8:14"}, {"sha": "67491b0446f90d7ba2f39bd4da78331ef53d3048", "filename": "src/test/ui/suggestions/object-unsafe-trait-should-use-self.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-self.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -15,7 +15,7 @@ error[E0038]: the trait `A` cannot be made into an object\n   --> $DIR/object-unsafe-trait-should-use-self.rs:3:13\n    |\n LL |     fn f(a: A) -> A;\n-   |             ^ the trait `A` cannot be made into an object\n+   |             ^ `A` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-unsafe-trait-should-use-self.rs:2:10\n@@ -42,7 +42,7 @@ error[E0038]: the trait `B` cannot be made into an object\n   --> $DIR/object-unsafe-trait-should-use-self.rs:8:13\n    |\n LL |     fn f(a: B) -> B;\n-   |             ^ the trait `B` cannot be made into an object\n+   |             ^ `B` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-unsafe-trait-should-use-self.rs:8:8"}, {"sha": "a2caf846cc5febe6a3a4e7ea5650b39a9a54ae1d", "filename": "src/test/ui/suggestions/object-unsafe-trait-should-use-where-sized.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/object-unsafe-trait-should-use-where-sized.rs:9:11\n    |\n LL | fn bar(x: &dyn Trait) {}\n-   |           ^^^^^^^^^^ the trait `Trait` cannot be made into an object\n+   |           ^^^^^^^^^^ `Trait` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/object-unsafe-trait-should-use-where-sized.rs:5:8"}, {"sha": "c91d1db4d764abc0ddba1a1bf711d17e0b336ed6", "filename": "src/test/ui/traits/issue-72410.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Ftraits%2Fissue-72410.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Ftraits%2Fissue-72410.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-72410.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-72410.rs:14:19\n    |\n LL |     where for<'a> &'a mut [dyn Bar]: ;\n-   |                   ^^^^^^^^^^^^^^^^^ the trait `Bar` cannot be made into an object\n+   |                   ^^^^^^^^^^^^^^^^^ `Bar` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/issue-72410.rs:13:8"}, {"sha": "1118a75e0850e764613238ae30ba908c23e98cb5", "filename": "src/test/ui/traits/trait-alias/trait-alias-object-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,13 +2,13 @@ error[E0038]: the trait `Eq` cannot be made into an object\n   --> $DIR/trait-alias-object-fail.rs:7:13\n    |\n LL |     let _: &dyn EqAlias = &123;\n-   |             ^^^^^^^^^^^ the trait `Eq` cannot be made into an object\n+   |             ^^^^^^^^^^^ `Eq` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $SRC_DIR/core/src/cmp.rs:LL:COL\n    |\n LL | pub trait Eq: PartialEq<Self> {\n-   |               ^^^^^^^^^^^^^^^ the trait cannot be made into an object because it uses `Self` as a type parameter in this\n+   |               ^^^^^^^^^^^^^^^ the trait cannot be made into an object because it uses `Self` as a type parameter\n \n error[E0191]: the value of the associated type `Item` (from trait `Iterator`) must be specified\n   --> $DIR/trait-alias-object-fail.rs:9:17"}, {"sha": "4d97d934376bfd6a9b266bd2448489e705539770", "filename": "src/test/ui/traits/trait-item-privacy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -113,7 +113,7 @@ error[E0038]: the trait `assoc_const::C` cannot be made into an object\n   --> $DIR/trait-item-privacy.rs:101:5\n    |\n LL |     C::A;\n-   |     ^^^^ the trait `assoc_const::C` cannot be made into an object\n+   |     ^^^^ `assoc_const::C` cannot be made into an object\n    |\n    = help: consider moving `C` to another trait\n    = help: consider moving `B` to another trait"}, {"sha": "335eeb8f1515be3259d2fd16395f526dd7c840e1", "filename": "src/test/ui/traits/trait-object-macro-matcher.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-macro-matcher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-macro-matcher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-macro-matcher.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -8,7 +8,7 @@ error[E0038]: the trait `Copy` cannot be made into an object\n   --> $DIR/trait-object-macro-matcher.rs:8:8\n    |\n LL |     m!(dyn Copy + Send + 'static);\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` cannot be made into an object\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^ `Copy` cannot be made into an object\n    |\n    = note: the trait cannot be made into an object because it requires `Self: Sized`\n    = note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>"}, {"sha": "16f60962cc1d7e08d76b257cde29d27441f5ea82", "filename": "src/test/ui/traits/trait-object-safety.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `Tr` cannot be made into an object\n   --> $DIR/trait-object-safety.rs:15:22\n    |\n LL |     let _: &dyn Tr = &St;\n-   |                      ^^^ the trait `Tr` cannot be made into an object\n+   |                      ^^^ `Tr` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/trait-object-safety.rs:4:8\n@@ -26,7 +26,7 @@ error[E0038]: the trait `Tr` cannot be made into an object\n   --> $DIR/trait-object-safety.rs:15:12\n    |\n LL |     let _: &dyn Tr = &St;\n-   |            ^^^^^^^ the trait `Tr` cannot be made into an object\n+   |            ^^^^^^^ `Tr` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/trait-object-safety.rs:4:8"}, {"sha": "a06f6a49194ffa9dcd97e29b35f16ab6198f2e7b", "filename": "src/test/ui/traits/trait-test-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -14,7 +14,7 @@ error[E0038]: the trait `bar` cannot be made into an object\n   --> $DIR/trait-test-2.rs:11:16\n    |\n LL |     (box 10 as Box<dyn bar>).dup();\n-   |                ^^^^^^^^^^^^ the trait `bar` cannot be made into an object\n+   |                ^^^^^^^^^^^^ `bar` cannot be made into an object\n    |\n    = help: consider moving `dup` to another trait\n    = help: consider moving `blah` to another trait\n@@ -31,7 +31,7 @@ error[E0038]: the trait `bar` cannot be made into an object\n   --> $DIR/trait-test-2.rs:11:6\n    |\n LL |     (box 10 as Box<dyn bar>).dup();\n-   |      ^^^^^^ the trait `bar` cannot be made into an object\n+   |      ^^^^^^ `bar` cannot be made into an object\n    |\n    = help: consider moving `dup` to another trait\n    = help: consider moving `blah` to another trait"}, {"sha": "2de5f6eb0f03aa25ed69a9d7971d3248bc1d201a", "filename": "src/test/ui/type/type-parameter-defaults-referencing-Self-ppaux.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -14,7 +14,7 @@ error[E0038]: the trait `MyAdd` cannot be made into an object\n   --> $DIR/type-parameter-defaults-referencing-Self-ppaux.rs:14:18\n    |\n LL |     let y = x as dyn MyAdd<i32>;\n-   |                  ^^^^^^^^^^^^^^ the trait `MyAdd` cannot be made into an object\n+   |                  ^^^^^^^^^^^^^^ `MyAdd` cannot be made into an object\n    |\n    = help: consider moving `add` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>"}, {"sha": "29dfb585ac68290dc9e5a4cd54ef567b71add190", "filename": "src/test/ui/wf/wf-convert-unsafe-trait-obj-box.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj-box.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj-box.rs:16:33\n    |\n LL |     let t_box: Box<dyn Trait> = Box::new(S);\n-   |                                 ^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n+   |                                 ^^^^^^^^^^^ `Trait` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/wf-convert-unsafe-trait-obj-box.rs:6:14\n@@ -18,7 +18,7 @@ error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj-box.rs:17:15\n    |\n LL |     takes_box(Box::new(S));\n-   |               ^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n+   |               ^^^^^^^^^^^ `Trait` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/wf-convert-unsafe-trait-obj-box.rs:6:14\n@@ -34,7 +34,7 @@ error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj-box.rs:15:5\n    |\n LL |     Box::new(S) as Box<dyn Trait>;\n-   |     ^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n+   |     ^^^^^^^^^^^ `Trait` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/wf-convert-unsafe-trait-obj-box.rs:6:14"}, {"sha": "02169f26f903466967b37676d7e2078a3970cab2", "filename": "src/test/ui/wf/wf-convert-unsafe-trait-obj.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-convert-unsafe-trait-obj.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj.rs:16:25\n    |\n LL |     let t: &dyn Trait = &S;\n-   |                         ^^ the trait `Trait` cannot be made into an object\n+   |                         ^^ `Trait` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/wf-convert-unsafe-trait-obj.rs:6:14\n@@ -18,7 +18,7 @@ error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj.rs:17:17\n    |\n LL |     takes_trait(&S);\n-   |                 ^^ the trait `Trait` cannot be made into an object\n+   |                 ^^ `Trait` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/wf-convert-unsafe-trait-obj.rs:6:14\n@@ -34,7 +34,7 @@ error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-convert-unsafe-trait-obj.rs:15:5\n    |\n LL |     &S as &dyn Trait;\n-   |     ^^ the trait `Trait` cannot be made into an object\n+   |     ^^ `Trait` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/wf-convert-unsafe-trait-obj.rs:6:14"}, {"sha": "988cb2fa5480c75dbbc3c31e56345cb16f00920f", "filename": "src/test/ui/wf/wf-fn-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-fn-where-clause.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -34,7 +34,7 @@ error[E0038]: the trait `Copy` cannot be made into an object\n   --> $DIR/wf-fn-where-clause.rs:12:16\n    |\n LL | fn bar() where Vec<dyn Copy>:, {}\n-   |                ^^^^^^^^^^^^^ the trait `Copy` cannot be made into an object\n+   |                ^^^^^^^^^^^^^ `Copy` cannot be made into an object\n    |\n    = note: the trait cannot be made into an object because it requires `Self: Sized`\n    = note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>"}, {"sha": "9b749f88fb810e173271052f63cddd6118da9771", "filename": "src/test/ui/wf/wf-object-safe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `A` cannot be made into an object\n   --> $DIR/wf-object-safe.rs:9:13\n    |\n LL |     let _x: &dyn A;\n-   |             ^^^^^^ the trait `A` cannot be made into an object\n+   |             ^^^^^^ `A` cannot be made into an object\n    |\n    = help: consider moving `foo` to another trait\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>"}, {"sha": "9dbd41ca368a18a123b8a745fb520dc4ddf12bc4", "filename": "src/test/ui/wf/wf-unsafe-trait-obj-match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/88f5e110db438d6e69a4493e21bd5a99cefdb46d/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-unsafe-trait-obj-match.stderr?ref=88f5e110db438d6e69a4493e21bd5a99cefdb46d", "patch": "@@ -16,7 +16,7 @@ error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-unsafe-trait-obj-match.rs:26:21\n    |\n LL |         Some(()) => &S,\n-   |                     ^^ the trait `Trait` cannot be made into an object\n+   |                     ^^ `Trait` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/wf-unsafe-trait-obj-match.rs:6:14\n@@ -32,7 +32,7 @@ error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/wf-unsafe-trait-obj-match.rs:25:25\n    |\n LL |     let t: &dyn Trait = match opt() {\n-   |                         ^^^^^^^^^^^ the trait `Trait` cannot be made into an object\n+   |                         ^^^^^^^^^^^ `Trait` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n   --> $DIR/wf-unsafe-trait-obj-match.rs:6:14"}]}