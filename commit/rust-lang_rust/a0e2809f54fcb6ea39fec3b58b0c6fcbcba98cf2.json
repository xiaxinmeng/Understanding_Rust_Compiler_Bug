{"sha": "a0e2809f54fcb6ea39fec3b58b0c6fcbcba98cf2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwZTI4MDlmNTRmY2I2ZWEzOWZlYzNiNThiMGM2ZmNiY2JhOThjZjI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-02T13:32:37Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-02T13:56:59Z"}, "message": "Remove remaining evec support from trans", "tree": {"sha": "62557f80d8f4ccd6600b40cb2d8ce83ad20c2bc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62557f80d8f4ccd6600b40cb2d8ce83ad20c2bc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0e2809f54fcb6ea39fec3b58b0c6fcbcba98cf2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0e2809f54fcb6ea39fec3b58b0c6fcbcba98cf2", "html_url": "https://github.com/rust-lang/rust/commit/a0e2809f54fcb6ea39fec3b58b0c6fcbcba98cf2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0e2809f54fcb6ea39fec3b58b0c6fcbcba98cf2/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c173f17c0fb10a3923da890c1204e0a71d3c9c7", "html_url": "https://github.com/rust-lang/rust/commit/9c173f17c0fb10a3923da890c1204e0a71d3c9c7"}], "stats": {"total": 149, "additions": 8, "deletions": 141}, "files": [{"sha": "4aaaf1e60509cdf24fed89014fcaf750cb9a2979", "filename": "src/comp/back/upcall.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a0e2809f54fcb6ea39fec3b58b0c6fcbcba98cf2/src%2Fcomp%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e2809f54fcb6ea39fec3b58b0c6fcbcba98cf2/src%2Fcomp%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fupcall.rs?ref=a0e2809f54fcb6ea39fec3b58b0c6fcbcba98cf2", "patch": "@@ -15,10 +15,8 @@ import middle::trans_common::T_nil;\n import middle::trans_common::T_opaque_chan_ptr;\n import middle::trans_common::T_opaque_ivec;\n import middle::trans_common::T_opaque_port_ptr;\n-import middle::trans_common::T_opaque_vec_ptr;\n import middle::trans_common::T_ptr;\n import middle::trans_common::T_size_t;\n-import middle::trans_common::T_str;\n import middle::trans_common::T_void;\n import lib::llvm::type_names;\n import lib::llvm::llvm::ModuleRef;\n@@ -37,8 +35,6 @@ type upcalls =\n      shared_malloc: ValueRef,\n      shared_free: ValueRef,\n      mark: ValueRef,\n-     new_str: ValueRef,\n-     evec_append: ValueRef,\n      get_type_desc: ValueRef,\n      ivec_grow: ValueRef,\n      ivec_push: ValueRef,\n@@ -82,12 +78,6 @@ fn declare_upcalls(_tn: type_names, tydesc_type: TypeRef,\n                 T_ptr(T_i8())),\n           shared_free: dv(~\"shared_free\", [T_ptr(T_i8())]),\n           mark: d(~\"mark\", [T_ptr(T_i8())], T_int()),\n-          new_str: d(~\"new_str\", [T_ptr(T_i8()), T_size_t()], T_ptr(T_str())),\n-          evec_append:\n-              d(~\"evec_append\",\n-                [T_ptr(tydesc_type), T_ptr(tydesc_type),\n-                 T_ptr(T_opaque_vec_ptr()), T_opaque_vec_ptr(), T_bool()],\n-                T_void()),\n           get_type_desc:\n               d(~\"get_type_desc\",\n                 [T_ptr(T_nil()), T_size_t(), T_size_t(), T_size_t(),"}, {"sha": "7aa98712065bad117259fd4bdbf051ef978943a1", "filename": "src/comp/middle/shape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0e2809f54fcb6ea39fec3b58b0c6fcbcba98cf2/src%2Fcomp%2Fmiddle%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e2809f54fcb6ea39fec3b58b0c6fcbcba98cf2/src%2Fcomp%2Fmiddle%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fshape.rs?ref=a0e2809f54fcb6ea39fec3b58b0c6fcbcba98cf2", "patch": "@@ -55,7 +55,7 @@ const shape_i32: u8 = 6u8;\n const shape_i64: u8 = 7u8;\n const shape_f32: u8 = 8u8;\n const shape_f64: u8 = 9u8;\n-const shape_evec: u8 = 10u8;\n+// (10 is currently unused, was evec)\n const shape_ivec: u8 = 11u8;\n const shape_tag: u8 = 12u8;\n const shape_box: u8 = 13u8;"}, {"sha": "afa74e334cbbe62748ea948499c8ceece9fc2786", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 7, "deletions": 84, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/a0e2809f54fcb6ea39fec3b58b0c6fcbcba98cf2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e2809f54fcb6ea39fec3b58b0c6fcbcba98cf2/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=a0e2809f54fcb6ea39fec3b58b0c6fcbcba98cf2", "patch": "@@ -2334,39 +2334,6 @@ fn trans_compare(cx: &@block_ctxt, op: ast::binop, lhs: ValueRef,\n     }\n }\n \n-fn trans_evec_append(cx: &@block_ctxt, t: ty::t, lhs: ValueRef,\n-                     rhs: ValueRef) -> result {\n-    let elt_ty = ty::sequence_element_type(bcx_tcx(cx), t);\n-    let skip_null = C_bool(false);\n-    let bcx = cx;\n-    let ti = none::<@tydesc_info>;\n-    let llvec_tydesc = get_tydesc(bcx, t, false, tps_normal, ti).result;\n-    bcx = llvec_tydesc.bcx;\n-    ti = none::<@tydesc_info>;\n-    let llelt_tydesc = get_tydesc(bcx, elt_ty, false, tps_normal, ti).result;\n-    lazily_emit_tydesc_glue(cx, abi::tydesc_field_take_glue, ti);\n-    lazily_emit_tydesc_glue(cx, abi::tydesc_field_drop_glue, ti);\n-    lazily_emit_tydesc_glue(cx, abi::tydesc_field_free_glue, ti);\n-    bcx = llelt_tydesc.bcx;\n-    let dst = PointerCast(bcx, lhs, T_ptr(T_opaque_vec_ptr()));\n-    let src = PointerCast(bcx, rhs, T_opaque_vec_ptr());\n-    ret rslt(bcx,\n-             Call(bcx, bcx_ccx(cx).upcalls.evec_append,\n-                            [cx.fcx.lltaskptr, llvec_tydesc.val,\n-                             llelt_tydesc.val, dst, src, skip_null]));\n-}\n-\n-fn trans_evec_add(cx: &@block_ctxt, t: ty::t, lhs: ValueRef, rhs: ValueRef)\n-   -> result {\n-    let r = alloc_ty(cx, t);\n-    let tmp = r.val;\n-    let bcx = copy_val(r.bcx, INIT, tmp, lhs, t);\n-    let bcx = trans_evec_append(bcx, t, tmp, rhs).bcx;\n-    tmp = load_if_immediate(bcx, tmp, t);\n-    add_clean_temp(cx, tmp, t);\n-    ret rslt(bcx, tmp);\n-}\n-\n // Important to get types for both lhs and rhs, because one might be _|_\n // and the other not.\n fn trans_eager_binop(cx: &@block_ctxt, op: ast::binop, lhs: ValueRef,\n@@ -2390,10 +2357,7 @@ fn trans_eager_binop(cx: &@block_ctxt, op: ast::binop, lhs: ValueRef,\n     alt op {\n       ast::add. {\n         if ty::type_is_sequence(bcx_tcx(cx), intype) {\n-            if ty::sequence_is_interior(bcx_tcx(cx), intype) {\n-                ret ivec::trans_add(cx, intype, lhs, rhs);\n-            }\n-            ret trans_evec_add(cx, intype, lhs, rhs);\n+            ret ivec::trans_add(cx, intype, lhs, rhs);\n         }\n         if is_float {\n             ret rslt(cx, FAdd(cx, lhs, rhs));\n@@ -3185,8 +3149,6 @@ fn trans_index(cx: &@block_ctxt, sp: &span, base: &@ast::expr,\n     let base_ty = ty::expr_ty(bcx_tcx(cx), base);\n     let exp = trans_expr(cx, base);\n     let lv = autoderef(exp.bcx, exp.val, base_ty);\n-    let base_ty_no_boxes = lv.ty;\n-    let is_interior = ty::sequence_is_interior(bcx_tcx(cx), base_ty_no_boxes);\n     let ix = trans_expr(lv.bcx, idx);\n     let v = lv.val;\n     let bcx = ix.bcx;\n@@ -3206,36 +3168,15 @@ fn trans_index(cx: &@block_ctxt, sp: &span, base: &@ast::expr,\n     maybe_name_value(bcx_ccx(cx), unit_sz.val, ~\"unit_sz\");\n     let scaled_ix = Mul(bcx, ix_val, unit_sz.val);\n     maybe_name_value(bcx_ccx(cx), scaled_ix, ~\"scaled_ix\");\n-    let interior_len_and_data;\n-    if is_interior {\n-        let len = ivec::get_fill(bcx, v);\n-        let data = ivec::get_dataptr(bcx, v, type_of_or_i8(bcx, unit_ty));\n-        interior_len_and_data = some({len: len, data: data});\n-    } else { interior_len_and_data = none; }\n-    let lim;\n-    alt interior_len_and_data {\n-      some(lad) { lim = lad.len; }\n-      none. {\n-        lim = GEP(bcx, v, [C_int(0), C_int(abi::vec_elt_fill)]);\n-        lim = Load(bcx, lim);\n-      }\n-    }\n+    let lim = ivec::get_fill(bcx, v);\n+    let body = ivec::get_dataptr(bcx, v, type_of_or_i8(bcx, unit_ty));\n     let bounds_check = ICmp(bcx, lib::llvm::LLVMIntULT, scaled_ix, lim);\n     let fail_cx = new_sub_block_ctxt(bcx, ~\"fail\");\n     let next_cx = new_sub_block_ctxt(bcx, ~\"next\");\n     CondBr(bcx, bounds_check, next_cx.llbb, fail_cx.llbb);\n     // fail: bad bounds check.\n \n     trans_fail(fail_cx, some::<span>(sp), ~\"bounds check\");\n-    let body;\n-    alt interior_len_and_data {\n-      some(lad) { body = lad.data; }\n-      none. {\n-        body =\n-            GEP(next_cx, v,\n-                              [C_int(0), C_int(abi::vec_elt_data), C_int(0)]);\n-      }\n-    }\n     let elt;\n     if ty::type_has_dynamic_size(bcx_tcx(cx), unit_ty) {\n         body = PointerCast(next_cx, body, T_ptr(T_i8()));\n@@ -3683,18 +3624,7 @@ fn trans_arg_expr(cx: &@block_ctxt, arg: &ty::arg, lldestty0: TypeRef,\n         // to have type lldestty0 (the callee's expected type).\n         val = llvm::LLVMGetUndef(lldestty0);\n     } else if arg.mode == ty::mo_val {\n-        // Eliding take/drop for appending of external vectors currently\n-        // corrupts memory. I can't figure out why, and external vectors\n-        // are on the way out anyway, so this simply turns off the\n-        // optimization for that case.\n-        let is_ext_vec_plus = alt e.node {\n-          ast::expr_binary(_, _, _) {\n-            ty::type_is_sequence(ccx.tcx, e_ty) &&\n-                !ty::sequence_is_interior(ccx.tcx, e_ty)\n-          }\n-          _ { false }\n-        };\n-        if !lv.is_mem && !is_ext_vec_plus {\n+        if !lv.is_mem {\n             // Do nothing for temporaries, just give them to callee\n         } else if type_is_structural_or_param(ccx.tcx, e_ty) {\n             let dst = alloc_ty(bcx, e_ty);\n@@ -3706,12 +3636,9 @@ fn trans_arg_expr(cx: &@block_ctxt, arg: &ty::arg, lldestty0: TypeRef,\n                 let arg_copy = do_spill(bcx, Load(bcx, val));\n                 bcx = take_ty(bcx, arg_copy, e_ty);\n                 val = Load(bcx, arg_copy);\n-            } else if lv.is_mem {\n+            } else {\n                 bcx = take_ty(bcx, val, e_ty);\n                 val = load_if_immediate(bcx, val, e_ty);\n-            } else if is_ext_vec_plus {\n-                let spilled = do_spill(bcx, val);\n-                bcx = take_ty(bcx, spilled, e_ty);\n             }\n             add_clean_temp(bcx, val, e_ty);\n         }\n@@ -4144,12 +4071,8 @@ fn trans_expr_out(cx: &@block_ctxt, e: &@ast::expr, output: out_method) ->\n         if ty::type_is_sequence(tcx, t) {\n             alt op {\n               ast::add. {\n-                if ty::sequence_is_interior(tcx, t) {\n-                    ret ivec::trans_append(rhs_res.bcx, t, lhs_res.res.val,\n-                                           rhs_res.val);\n-                }\n-                ret trans_evec_append(rhs_res.bcx, t, lhs_res.res.val,\n-                                      rhs_res.val);\n+                ret ivec::trans_append(rhs_res.bcx, t, lhs_res.res.val,\n+                                       rhs_res.val);\n               }\n               _ { }\n             }"}, {"sha": "1874cb11d1be57f440b03ee38e7a29db0f9035b4", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a0e2809f54fcb6ea39fec3b58b0c6fcbcba98cf2/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e2809f54fcb6ea39fec3b58b0c6fcbcba98cf2/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=a0e2809f54fcb6ea39fec3b58b0c6fcbcba98cf2", "patch": "@@ -639,18 +639,6 @@ fn T_tydesc(taskptr_type: TypeRef) -> TypeRef {\n \n fn T_array(t: TypeRef, n: uint) -> TypeRef { ret llvm::LLVMArrayType(t, n); }\n \n-fn T_evec(t: TypeRef) -> TypeRef {\n-    ret T_struct([T_int(), // Refcount\n-                  T_int(), // Alloc\n-                  T_int(), // Fill\n-\n-                  T_int(), // Pad\n-                           // Body elements\n-                            T_array(t, 0u)]);\n-}\n-\n-fn T_opaque_vec_ptr() -> TypeRef { ret T_ptr(T_evec(T_int())); }\n-\n \n // Interior vector.\n //\n@@ -666,8 +654,6 @@ fn T_opaque_ivec() -> TypeRef {\n     ret T_ivec(T_i8());\n }\n \n-fn T_str() -> TypeRef { ret T_evec(T_i8()); }\n-\n fn T_box(t: TypeRef) -> TypeRef { ret T_struct([T_int(), t]); }\n \n fn T_port(_t: TypeRef) -> TypeRef {\n@@ -812,29 +798,6 @@ fn C_cstr(cx: &@crate_ctxt, s: &istr) -> ValueRef {\n     ret g;\n }\n \n-\n-// A rust boxed-and-length-annotated string.\n-fn C_str(cx: &@crate_ctxt, s: &istr) -> ValueRef {\n-    let len =\n-        str::byte_len(s); // 'alloc'\n-                          // 'fill'\n-                          // 'pad'\n-\n-    let cstr = str::as_buf(s, { |buf|\n-        llvm::LLVMConstString(buf, len, False)\n-    });\n-    let box =\n-        C_struct([C_int(abi::const_refcount as int), C_int(len + 1u as int),\n-                  C_int(len + 1u as int), C_int(0), cstr]);\n-    let g = str::as_buf(cx.names.next(~\"str\"), { |buf|\n-        llvm::LLVMAddGlobal(cx.llmod, val_ty(box), buf)\n-    });\n-    llvm::LLVMSetInitializer(g, box);\n-    llvm::LLVMSetGlobalConstant(g, True);\n-    llvm::LLVMSetLinkage(g, lib::llvm::LLVMInternalLinkage as llvm::Linkage);\n-    ret llvm::LLVMConstPointerCast(g, T_ptr(T_str()));\n-}\n-\n // Returns a Plain Old LLVM String:\n fn C_postr(s: &istr) -> ValueRef {\n     ret str::as_buf(s, { |buf|"}, {"sha": "eca22d168c5b144c54e4f7a42337f3b759f3f582", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a0e2809f54fcb6ea39fec3b58b0c6fcbcba98cf2/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0e2809f54fcb6ea39fec3b58b0c6fcbcba98cf2/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=a0e2809f54fcb6ea39fec3b58b0c6fcbcba98cf2", "patch": "@@ -97,7 +97,6 @@ export rename;\n export ret_ty_of_fn;\n export ret_ty_of_fn_ty;\n export sequence_element_type;\n-export sequence_is_interior;\n export struct;\n export sort_methods;\n export stmt_node_id;\n@@ -833,14 +832,6 @@ fn type_is_str(cx: &ctxt, ty: t) -> bool {\n     }\n }\n \n-fn sequence_is_interior(cx: &ctxt, ty: t) -> bool {\n-    alt struct(cx, ty) {\n-      ty::ty_vec(_) { ret true; }\n-      ty::ty_istr. { ret true; }\n-      _ { cx.sess.bug(~\"sequence_is_interior called on non-sequence type\"); }\n-    }\n-}\n-\n fn sequence_element_type(cx: &ctxt, ty: t) -> t {\n     alt struct(cx, ty) {\n       ty_istr. { ret mk_mach(cx, ast::ty_u8); }"}]}