{"sha": "c768f3c03c5768337bce80c9629dd32a957c8983", "node_id": "C_kwDOAAsO6NoAKGM3NjhmM2MwM2M1NzY4MzM3YmNlODBjOTYyOWRkMzJhOTU3Yzg5ODM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-01T16:26:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-01T16:26:25Z"}, "message": "Auto merge of #2297 - RalfJung:rustup, r=RalfJung\n\nrustup", "tree": {"sha": "71bc1999074e1c1f3c1a4600fc226d0838b78b29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71bc1999074e1c1f3c1a4600fc226d0838b78b29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c768f3c03c5768337bce80c9629dd32a957c8983", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c768f3c03c5768337bce80c9629dd32a957c8983", "html_url": "https://github.com/rust-lang/rust/commit/c768f3c03c5768337bce80c9629dd32a957c8983", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c768f3c03c5768337bce80c9629dd32a957c8983/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5815d8d81cbe9b5db3d70dca1cee87d17e259afe", "url": "https://api.github.com/repos/rust-lang/rust/commits/5815d8d81cbe9b5db3d70dca1cee87d17e259afe", "html_url": "https://github.com/rust-lang/rust/commit/5815d8d81cbe9b5db3d70dca1cee87d17e259afe"}, {"sha": "12d04ac4c4291c031b7d1cd63707a6cd59c895a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/12d04ac4c4291c031b7d1cd63707a6cd59c895a8", "html_url": "https://github.com/rust-lang/rust/commit/12d04ac4c4291c031b7d1cd63707a6cd59c895a8"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "4198e8cf3c0868f4536832baf9cb6a9305a31804", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c768f3c03c5768337bce80c9629dd32a957c8983/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/c768f3c03c5768337bce80c9629dd32a957c8983/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=c768f3c03c5768337bce80c9629dd32a957c8983", "patch": "@@ -1 +1 @@\n-bf45371f262e184b4a77adea88c8ac01ac79759b\n+ca1e68b3229e710c3948a361ee770d846a88e6da"}, {"sha": "36178269e025eb1b84cf5331e74ea2893ff3c25d", "filename": "src/concurrency/data_race.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c768f3c03c5768337bce80c9629dd32a957c8983/src%2Fconcurrency%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c768f3c03c5768337bce80c9629dd32a957c8983/src%2Fconcurrency%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency%2Fdata_race.rs?ref=c768f3c03c5768337bce80c9629dd32a957c8983", "patch": "@@ -535,7 +535,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n         this.validate_overlapping_atomic(dest)?;\n-        this.allow_data_races_mut(move |this| this.write_scalar(val, &(*dest).into()))?;\n+        this.allow_data_races_mut(move |this| this.write_scalar(val, &dest.into()))?;\n         this.validate_atomic_store(dest, atomic)?;\n         // FIXME: it's not possible to get the value before write_scalar. A read_scalar will cause\n         // side effects from a read the program did not perform. So we have to initialise\n@@ -562,7 +562,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n         // Atomics wrap around on overflow.\n         let val = this.binary_op(op, &old, rhs)?;\n         let val = if neg { this.unary_op(mir::UnOp::Not, &val)? } else { val };\n-        this.allow_data_races_mut(|this| this.write_immediate(*val, &(*place).into()))?;\n+        this.allow_data_races_mut(|this| this.write_immediate(*val, &place.into()))?;\n \n         this.validate_atomic_rmw(place, atomic)?;\n \n@@ -587,7 +587,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n \n         this.validate_overlapping_atomic(place)?;\n         let old = this.allow_data_races_mut(|this| this.read_scalar(&place.into()))?;\n-        this.allow_data_races_mut(|this| this.write_scalar(new, &(*place).into()))?;\n+        this.allow_data_races_mut(|this| this.write_scalar(new, &place.into()))?;\n \n         this.validate_atomic_rmw(place, atomic)?;\n \n@@ -616,7 +616,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n             if lt { &rhs } else { &old }\n         };\n \n-        this.allow_data_races_mut(|this| this.write_immediate(**new_val, &(*place).into()))?;\n+        this.allow_data_races_mut(|this| this.write_immediate(**new_val, &place.into()))?;\n \n         this.validate_atomic_rmw(place, atomic)?;\n \n@@ -675,7 +675,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n         // if successful, perform a full rw-atomic validation\n         // otherwise treat this as an atomic load with the fail ordering.\n         if cmpxchg_success {\n-            this.allow_data_races_mut(|this| this.write_scalar(new, &(*place).into()))?;\n+            this.allow_data_races_mut(|this| this.write_scalar(new, &place.into()))?;\n             this.validate_atomic_rmw(place, success)?;\n             this.buffered_atomic_rmw(new, place, success, old.to_scalar_or_uninit())?;\n         } else {\n@@ -964,7 +964,7 @@ impl VClockAlloc {\n             let (index, clocks) = global.current_thread_state();\n             let mut alloc_ranges = self.alloc_ranges.borrow_mut();\n             for (offset, range) in alloc_ranges.iter_mut(range.start, range.size) {\n-                if let Err(DataRace) = range.read_race_detect(&*clocks, index) {\n+                if let Err(DataRace) = range.read_race_detect(&clocks, index) {\n                     // Report data-race.\n                     return Self::report_data_race(\n                         global,\n@@ -992,7 +992,7 @@ impl VClockAlloc {\n         if global.race_detecting() {\n             let (index, clocks) = global.current_thread_state();\n             for (offset, range) in self.alloc_ranges.get_mut().iter_mut(range.start, range.size) {\n-                if let Err(DataRace) = range.write_race_detect(&*clocks, index, write_type) {\n+                if let Err(DataRace) = range.write_race_detect(&clocks, index, write_type) {\n                     // Report data-race\n                     return Self::report_data_race(\n                         global,\n@@ -1072,7 +1072,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n                     for (offset, range) in\n                         alloc_meta.alloc_ranges.borrow_mut().iter_mut(base_offset, size)\n                     {\n-                        if let Err(DataRace) = op(range, &mut *clocks, index, atomic) {\n+                        if let Err(DataRace) = op(range, &mut clocks, index, atomic) {\n                             mem::drop(clocks);\n                             return VClockAlloc::report_data_race(\n                                 data_race,"}, {"sha": "1536b826ac46647ad4e2b1bd6c40d2713c310fff", "filename": "src/eval.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c768f3c03c5768337bce80c9629dd32a957c8983/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c768f3c03c5768337bce80c9629dd32a957c8983/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=c768f3c03c5768337bce80c9629dd32a957c8983", "patch": "@@ -215,7 +215,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n             let arg_place =\n                 ecx.allocate(ecx.layout_of(arg_type)?, MiriMemoryKind::Machine.into())?;\n             ecx.write_os_str_to_c_str(OsStr::new(arg), arg_place.ptr, size)?;\n-            ecx.mark_immutable(&*arg_place);\n+            ecx.mark_immutable(&arg_place);\n             argvs.push(arg_place.to_ref(&ecx));\n         }\n         // Make an array with all these pointers, in the Miri memory.\n@@ -227,23 +227,23 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n             let place = ecx.mplace_field(&argvs_place, idx)?;\n             ecx.write_immediate(arg, &place.into())?;\n         }\n-        ecx.mark_immutable(&*argvs_place);\n+        ecx.mark_immutable(&argvs_place);\n         // A pointer to that place is the 3rd argument for main.\n         let argv = argvs_place.to_ref(&ecx);\n         // Store `argc` and `argv` for macOS `_NSGetArg{c,v}`.\n         {\n             let argc_place =\n                 ecx.allocate(ecx.machine.layouts.isize, MiriMemoryKind::Machine.into())?;\n             ecx.write_scalar(argc, &argc_place.into())?;\n-            ecx.mark_immutable(&*argc_place);\n+            ecx.mark_immutable(&argc_place);\n             ecx.machine.argc = Some(*argc_place);\n \n             let argv_place = ecx.allocate(\n                 ecx.layout_of(tcx.mk_imm_ptr(tcx.types.unit))?,\n                 MiriMemoryKind::Machine.into(),\n             )?;\n             ecx.write_immediate(argv, &argv_place.into())?;\n-            ecx.mark_immutable(&*argv_place);\n+            ecx.mark_immutable(&argv_place);\n             ecx.machine.argv = Some(*argv_place);\n         }\n         // Store command line as UTF-16 for Windows `GetCommandLineW`.\n@@ -260,7 +260,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n                 let place = ecx.mplace_field(&cmd_place, idx)?;\n                 ecx.write_scalar(Scalar::from_u16(c), &place.into())?;\n             }\n-            ecx.mark_immutable(&*cmd_place);\n+            ecx.mark_immutable(&cmd_place);\n         }\n         argv\n     };"}, {"sha": "2cf5eb70c171f8de22b4bc1c4704ce5a2dc127ad", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c768f3c03c5768337bce80c9629dd32a957c8983/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c768f3c03c5768337bce80c9629dd32a957c8983/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=c768f3c03c5768337bce80c9629dd32a957c8983", "patch": "@@ -928,7 +928,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                             orig_tag,\n                             item,\n                             (alloc_id, range, offset),\n-                            &mut *global,\n+                            &mut global,\n                             current_span,\n                             history,\n                             exposed_tags,\n@@ -1090,14 +1090,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             #[inline(always)]\n             fn ecx(&mut self) -> &mut MiriEvalContext<'mir, 'tcx> {\n-                &mut self.ecx\n+                self.ecx\n             }\n \n             fn visit_value(&mut self, place: &MPlaceTy<'tcx, Tag>) -> InterpResult<'tcx> {\n                 if let Some((mutbl, protector)) = qualify(place.layout.ty, self.kind) {\n                     let val = self.ecx.read_immediate(&place.into())?;\n                     let val = self.ecx.retag_reference(&val, mutbl, protector)?;\n-                    self.ecx.write_immediate(*val, &(*place).into())?;\n+                    self.ecx.write_immediate(*val, &place.into())?;\n                 } else {\n                     // Maybe we need to go deeper.\n                     self.walk_value(place)?;"}]}