{"sha": "3a58309798e39ab48e4cb85c1013ad7e7410ace8", "node_id": "C_kwDOAAsO6NoAKDNhNTgzMDk3OThlMzlhYjQ4ZTRjYjg1YzEwMTNhZDdlNzQxMGFjZTg", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-12-02T14:14:49Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-12-02T14:19:30Z"}, "message": "Add StableOrd trait as proposed in MCP 533.\n\nThe StableOrd trait can be used to mark types as having a stable\nsort order across compilation sessions. Collections that sort their\nitems in a stable way can safely implement HashStable by\nhashing items in sort order.", "tree": {"sha": "ccd3701f75e5d908530e5646265353f2aef5b3ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccd3701f75e5d908530e5646265353f2aef5b3ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a58309798e39ab48e4cb85c1013ad7e7410ace8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a58309798e39ab48e4cb85c1013ad7e7410ace8", "html_url": "https://github.com/rust-lang/rust/commit/3a58309798e39ab48e4cb85c1013ad7e7410ace8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a58309798e39ab48e4cb85c1013ad7e7410ace8/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11663b1b4857ffeafbd85a9a36c234d117373b76", "url": "https://api.github.com/repos/rust-lang/rust/commits/11663b1b4857ffeafbd85a9a36c234d117373b76", "html_url": "https://github.com/rust-lang/rust/commit/11663b1b4857ffeafbd85a9a36c234d117373b76"}], "stats": {"total": 132, "additions": 96, "deletions": 36}, "files": [{"sha": "e14c9ea9a5d1a913d1af20f97776f5a7a43f4b9f", "filename": "compiler/rustc_abi/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3a58309798e39ab48e4cb85c1013ad7e7410ace8/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a58309798e39ab48e4cb85c1013ad7e7410ace8/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flib.rs?ref=3a58309798e39ab48e4cb85c1013ad7e7410ace8", "patch": "@@ -9,6 +9,8 @@ use std::ops::{Add, AddAssign, Mul, RangeInclusive, Sub};\n use std::str::FromStr;\n \n use bitflags::bitflags;\n+#[cfg(feature = \"nightly\")]\n+use rustc_data_structures::stable_hasher::StableOrd;\n use rustc_index::vec::{Idx, IndexVec};\n #[cfg(feature = \"nightly\")]\n use rustc_macros::HashStable_Generic;\n@@ -403,6 +405,11 @@ pub struct Size {\n     raw: u64,\n }\n \n+// Safety: Ord is implement as just comparing numerical values and numerical values\n+// are not changed by (de-)serialization.\n+#[cfg(feature = \"nightly\")]\n+unsafe impl StableOrd for Size {}\n+\n // This is debug-printed a lot in larger structs, don't waste too much space there\n impl fmt::Debug for Size {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {"}, {"sha": "6f0b9bff90a7f9737f34c07c61aa51e455f11ca2", "filename": "compiler/rustc_data_structures/src/fingerprint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a58309798e39ab48e4cb85c1013ad7e7410ace8/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a58309798e39ab48e4cb85c1013ad7e7410ace8/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs?ref=3a58309798e39ab48e4cb85c1013ad7e7410ace8", "patch": "@@ -140,7 +140,7 @@ impl stable_hasher::StableHasherResult for Fingerprint {\n     }\n }\n \n-impl_stable_hash_via_hash!(Fingerprint);\n+impl_stable_ord_and_stable_hash_via_hash!(Fingerprint);\n \n impl<E: Encoder> Encodable<E> for Fingerprint {\n     #[inline]"}, {"sha": "d13313dfd0ebfc4c145ad4a8756141a9f62c7a7c", "filename": "compiler/rustc_data_structures/src/sorted_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a58309798e39ab48e4cb85c1013ad7e7410ace8/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a58309798e39ab48e4cb85c1013ad7e7410ace8/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs?ref=3a58309798e39ab48e4cb85c1013ad7e7410ace8", "patch": "@@ -1,4 +1,4 @@\n-use crate::stable_hasher::{HashStable, StableHasher};\n+use crate::stable_hasher::{HashStable, StableHasher, StableOrd};\n use std::borrow::Borrow;\n use std::cmp::Ordering;\n use std::iter::FromIterator;\n@@ -308,7 +308,7 @@ impl<K: Ord, V> FromIterator<(K, V)> for SortedMap<K, V> {\n     }\n }\n \n-impl<K: HashStable<CTX>, V: HashStable<CTX>, CTX> HashStable<CTX> for SortedMap<K, V> {\n+impl<K: HashStable<CTX> + StableOrd, V: HashStable<CTX>, CTX> HashStable<CTX> for SortedMap<K, V> {\n     #[inline]\n     fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n         self.data.hash_stable(ctx, hasher);"}, {"sha": "c2f0ae328962be15a9ac787fd62f51dd2f464b19", "filename": "compiler/rustc_data_structures/src/sorted_map/index_map.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3a58309798e39ab48e4cb85c1013ad7e7410ace8/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a58309798e39ab48e4cb85c1013ad7e7410ace8/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs?ref=3a58309798e39ab48e4cb85c1013ad7e7410ace8", "patch": "@@ -120,13 +120,20 @@ where\n         self.items.hash(hasher)\n     }\n }\n+\n impl<I: Idx, K, V, C> HashStable<C> for SortedIndexMultiMap<I, K, V>\n where\n     K: HashStable<C>,\n     V: HashStable<C>,\n {\n     fn hash_stable(&self, ctx: &mut C, hasher: &mut StableHasher) {\n-        self.items.hash_stable(ctx, hasher)\n+        let SortedIndexMultiMap {\n+            items,\n+            // We can ignore this field because it is not observable from the outside.\n+            idx_sorted_by_item_key: _,\n+        } = self;\n+\n+        items.hash_stable(ctx, hasher)\n     }\n }\n "}, {"sha": "d43b74c2740ce3aef3fe8a674b9ae034ee9ce536", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 69, "deletions": 30, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/3a58309798e39ab48e4cb85c1013ad7e7410ace8/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a58309798e39ab48e4cb85c1013ad7e7410ace8/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=3a58309798e39ab48e4cb85c1013ad7e7410ace8", "patch": "@@ -219,42 +219,72 @@ pub trait ToStableHashKey<HCX> {\n     fn to_stable_hash_key(&self, hcx: &HCX) -> Self::KeyType;\n }\n \n-/// Implement HashStable by just calling `Hash::hash()`.\n+/// Trait for marking a type as having a sort order that is\n+/// stable across compilation session boundaries. More formally:\n+///\n+/// ```txt\n+/// Ord::cmp(a1, b1) == Ord:cmp(a2, b2)\n+///    where a2 = decode(encode(a1, context1), context2)\n+///          b2 = decode(encode(b1, context1), context2)\n+/// ```\n+///\n+/// i.e. the result of `Ord::cmp` is not influenced by encoding\n+/// the values in one session and then decoding them in another\n+/// session.\n+///\n+/// This is trivially true for types where encoding and decoding\n+/// don't change the bytes of the values that are used during\n+/// comparison and comparison only depends on these bytes (as\n+/// opposed to some non-local state). Examples are u32, String,\n+/// Path, etc.\n+///\n+/// But it is not true for:\n+///  - `*const T` and `*mut T` because the values of these pointers\n+///    will change between sessions.\n+///  - `DefIndex`, `CrateNum`, `LocalDefId`, because their concrete\n+///    values depend on state that might be different between\n+///    compilation sessions.\n+pub unsafe trait StableOrd: Ord {}\n+\n+/// Implement HashStable by just calling `Hash::hash()`. Also implement `StableOrd` for the type since\n+/// that has the same requirements.\n ///\n /// **WARNING** This is only valid for types that *really* don't need any context for fingerprinting.\n /// But it is easy to misuse this macro (see [#96013](https://github.com/rust-lang/rust/issues/96013)\n /// for examples). Therefore this macro is not exported and should only be used in the limited cases\n /// here in this module.\n ///\n /// Use `#[derive(HashStable_Generic)]` instead.\n-macro_rules! impl_stable_hash_via_hash {\n+macro_rules! impl_stable_ord_and_stable_hash_via_hash {\n     ($t:ty) => {\n         impl<CTX> $crate::stable_hasher::HashStable<CTX> for $t {\n             #[inline]\n             fn hash_stable(&self, _: &mut CTX, hasher: &mut $crate::stable_hasher::StableHasher) {\n                 ::std::hash::Hash::hash(self, hasher);\n             }\n         }\n+\n+        unsafe impl $crate::stable_hasher::StableOrd for $t {}\n     };\n }\n \n-impl_stable_hash_via_hash!(i8);\n-impl_stable_hash_via_hash!(i16);\n-impl_stable_hash_via_hash!(i32);\n-impl_stable_hash_via_hash!(i64);\n-impl_stable_hash_via_hash!(isize);\n+impl_stable_ord_and_stable_hash_via_hash!(i8);\n+impl_stable_ord_and_stable_hash_via_hash!(i16);\n+impl_stable_ord_and_stable_hash_via_hash!(i32);\n+impl_stable_ord_and_stable_hash_via_hash!(i64);\n+impl_stable_ord_and_stable_hash_via_hash!(isize);\n \n-impl_stable_hash_via_hash!(u8);\n-impl_stable_hash_via_hash!(u16);\n-impl_stable_hash_via_hash!(u32);\n-impl_stable_hash_via_hash!(u64);\n-impl_stable_hash_via_hash!(usize);\n+impl_stable_ord_and_stable_hash_via_hash!(u8);\n+impl_stable_ord_and_stable_hash_via_hash!(u16);\n+impl_stable_ord_and_stable_hash_via_hash!(u32);\n+impl_stable_ord_and_stable_hash_via_hash!(u64);\n+impl_stable_ord_and_stable_hash_via_hash!(usize);\n \n-impl_stable_hash_via_hash!(u128);\n-impl_stable_hash_via_hash!(i128);\n+impl_stable_ord_and_stable_hash_via_hash!(u128);\n+impl_stable_ord_and_stable_hash_via_hash!(i128);\n \n-impl_stable_hash_via_hash!(char);\n-impl_stable_hash_via_hash!(());\n+impl_stable_ord_and_stable_hash_via_hash!(char);\n+impl_stable_ord_and_stable_hash_via_hash!(());\n \n impl<CTX> HashStable<CTX> for ! {\n     fn hash_stable(&self, _ctx: &mut CTX, _hasher: &mut StableHasher) {\n@@ -444,6 +474,10 @@ impl<CTX> HashStable<CTX> for String {\n     }\n }\n \n+// Safety: String comparison only depends on their contents and the\n+// contents are not changed by (de-)serialization.\n+unsafe impl StableOrd for String {}\n+\n impl<HCX> ToStableHashKey<HCX> for String {\n     type KeyType = String;\n     #[inline]\n@@ -459,6 +493,9 @@ impl<CTX> HashStable<CTX> for bool {\n     }\n }\n \n+// Safety: sort order of bools is not changed by (de-)serialization.\n+unsafe impl StableOrd for bool {}\n+\n impl<T, CTX> HashStable<CTX> for Option<T>\n where\n     T: HashStable<CTX>,\n@@ -474,6 +511,9 @@ where\n     }\n }\n \n+// Safety: the Option wrapper does not add instability to comparison.\n+unsafe impl<T: StableOrd> StableOrd for Option<T> {}\n+\n impl<T1, T2, CTX> HashStable<CTX> for Result<T1, T2>\n where\n     T1: HashStable<CTX>,\n@@ -550,8 +590,8 @@ where\n     }\n }\n \n-impl_stable_hash_via_hash!(::std::path::Path);\n-impl_stable_hash_via_hash!(::std::path::PathBuf);\n+impl_stable_ord_and_stable_hash_via_hash!(::std::path::Path);\n+impl_stable_ord_and_stable_hash_via_hash!(::std::path::PathBuf);\n \n impl<K, V, R, HCX> HashStable<HCX> for ::std::collections::HashMap<K, V, R>\n where\n@@ -584,27 +624,26 @@ where\n \n impl<K, V, HCX> HashStable<HCX> for ::std::collections::BTreeMap<K, V>\n where\n-    K: ToStableHashKey<HCX>,\n+    K: HashStable<HCX> + StableOrd,\n     V: HashStable<HCX>,\n {\n     fn hash_stable(&self, hcx: &mut HCX, hasher: &mut StableHasher) {\n-        stable_hash_reduce(hcx, hasher, self.iter(), self.len(), |hasher, hcx, (key, value)| {\n-            let key = key.to_stable_hash_key(hcx);\n-            key.hash_stable(hcx, hasher);\n-            value.hash_stable(hcx, hasher);\n-        });\n+        self.len().hash_stable(hcx, hasher);\n+        for entry in self.iter() {\n+            entry.hash_stable(hcx, hasher);\n+        }\n     }\n }\n \n-impl<K, HCX> HashStable<HCX> for ::std::collections::BTreeSet<K>\n+impl<K: StableOrd, HCX> HashStable<HCX> for ::std::collections::BTreeSet<K>\n where\n-    K: ToStableHashKey<HCX>,\n+    K: HashStable<HCX> + StableOrd,\n {\n     fn hash_stable(&self, hcx: &mut HCX, hasher: &mut StableHasher) {\n-        stable_hash_reduce(hcx, hasher, self.iter(), self.len(), |hasher, hcx, key| {\n-            let key = key.to_stable_hash_key(hcx);\n-            key.hash_stable(hcx, hasher);\n-        });\n+        self.len().hash_stable(hcx, hasher);\n+        for entry in self.iter() {\n+            entry.hash_stable(hcx, hasher);\n+        }\n     }\n }\n "}, {"sha": "9f7e79596e943e511144a4cf2d8a88b7514d1c3d", "filename": "compiler/rustc_hir/src/hir_id.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a58309798e39ab48e4cb85c1013ad7e7410ace8/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a58309798e39ab48e4cb85c1013ad7e7410ace8/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs?ref=3a58309798e39ab48e4cb85c1013ad7e7410ace8", "patch": "@@ -1,5 +1,5 @@\n use crate::def_id::{DefId, DefIndex, LocalDefId, CRATE_DEF_ID};\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher, ToStableHashKey};\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher, StableOrd, ToStableHashKey};\n use rustc_span::{def_id::DefPathHash, HashStableContext};\n use std::fmt;\n \n@@ -146,6 +146,10 @@ impl ItemLocalId {\n     pub const INVALID: ItemLocalId = ItemLocalId::MAX;\n }\n \n+// Safety: Ord is implement as just comparing the LocalItemId's numerical\n+// values and these are not changed by (de-)serialization.\n+unsafe impl StableOrd for ItemLocalId {}\n+\n /// The `HirId` corresponding to `CRATE_NODE_ID` and `CRATE_DEF_ID`.\n pub const CRATE_HIR_ID: HirId =\n     HirId { owner: OwnerId { def_id: CRATE_DEF_ID }, local_id: ItemLocalId::from_u32(0) };"}, {"sha": "5dcd53e8e5166c5a281dbd75bc8e17ab0b4eafdf", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3a58309798e39ab48e4cb85c1013ad7e7410ace8/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a58309798e39ab48e4cb85c1013ad7e7410ace8/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=3a58309798e39ab48e4cb85c1013ad7e7410ace8", "patch": "@@ -10,7 +10,7 @@ use crate::{lint, HashStableContext};\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n \n-use rustc_data_structures::stable_hasher::ToStableHashKey;\n+use rustc_data_structures::stable_hasher::{StableOrd, ToStableHashKey};\n use rustc_target::abi::Align;\n use rustc_target::spec::{PanicStrategy, SanitizerSet, SplitDebuginfo};\n use rustc_target::spec::{Target, TargetTriple, TargetWarnings, TARGETS};\n@@ -288,6 +288,9 @@ pub enum OutputType {\n     DepInfo,\n }\n \n+// Safety: Trivial C-Style enums have a stable sort order across compilation sessions.\n+unsafe impl StableOrd for OutputType {}\n+\n impl<HCX: HashStableContext> ToStableHashKey<HCX> for OutputType {\n     type KeyType = Self;\n "}]}