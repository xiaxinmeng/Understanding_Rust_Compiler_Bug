{"sha": "03c7d7074d4870588769707a1a8775489d29280a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzYzdkNzA3NGQ0ODcwNTg4NzY5NzA3YTFhODc3NTQ4OWQyOTI4MGE=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-16T13:56:09Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-16T13:56:09Z"}, "message": "With working test now", "tree": {"sha": "3e4ec5a962ea6c5cd624b70ccf3733aa36103b33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e4ec5a962ea6c5cd624b70ccf3733aa36103b33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03c7d7074d4870588769707a1a8775489d29280a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03c7d7074d4870588769707a1a8775489d29280a", "html_url": "https://github.com/rust-lang/rust/commit/03c7d7074d4870588769707a1a8775489d29280a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03c7d7074d4870588769707a1a8775489d29280a/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f23af0cfd5cb25b1988d628fc41ad4515693c91d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f23af0cfd5cb25b1988d628fc41ad4515693c91d", "html_url": "https://github.com/rust-lang/rust/commit/f23af0cfd5cb25b1988d628fc41ad4515693c91d"}], "stats": {"total": 42, "additions": 28, "deletions": 14}, "files": [{"sha": "fd6479df299bd91e9477b48459d96a5643e5537c", "filename": "src/consts.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/03c7d7074d4870588769707a1a8775489d29280a/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03c7d7074d4870588769707a1a8775489d29280a/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=03c7d7074d4870588769707a1a8775489d29280a", "patch": "@@ -1,6 +1,4 @@\n-#[cfg(test)]\n use rustc::lint::Context;\n-\n use rustc::middle::const_eval::lookup_const_by_id;\n use rustc::middle::def::PathResolution;\n use rustc::middle::def::Def::*;\n@@ -12,9 +10,6 @@ use std::ops::Deref;\n use self::ConstantVariant::*;\n use self::FloatWidth::*;\n \n-#[cfg(not(test))]\n-pub struct Context;\n-\n #[derive(PartialEq, Eq, Debug, Copy, Clone)]\n pub enum FloatWidth {\n     Fw32,\n@@ -33,8 +28,8 @@ impl From<FloatTy> for FloatWidth {\n \n #[derive(PartialEq, Eq, Debug, Clone)]\n pub struct Constant {\n-    constant: ConstantVariant,\n-    needed_resolution: bool\n+    pub constant: ConstantVariant,\n+    pub needed_resolution: bool\n }\n \n impl Constant {\n@@ -187,11 +182,7 @@ fn constant_tup<E: Deref<Target=Expr> + Sized>(cx: &Context, tup: &[E]) -> Optio\n     })\n }\n \n-#[cfg(test)]\n-fn fetch_path(_cx: &Context, _expr: &Expr) -> Option<Constant> { None }\n-\n /// lookup a possibly constant expression from a ExprPath\n-#[cfg(not(test))]\n fn fetch_path(cx: &Context, e: &Expr) -> Option<Constant> {\n     if let Some(&PathResolution { base_def: DefConst(id), ..}) =\n             cx.tcx.def_map.borrow().get(&e.id) {"}, {"sha": "db309952be43bbe7370fde518bc85850a0cc2af8", "filename": "tests/consts.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/03c7d7074d4870588769707a1a8775489d29280a/tests%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03c7d7074d4870588769707a1a8775489d29280a/tests%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconsts.rs?ref=03c7d7074d4870588769707a1a8775489d29280a", "patch": "@@ -1,11 +1,34 @@\n+#![allow(plugin_as_library)]\n+#![feature(rustc_private)]\n \n extern crate clippy;\n+extern crate syntax;\n+extern crate rustc;\n \n-use clippy::consts;\n+use clippy::consts::constant;\n+use clippy::consts::ConstantVariant::*;\n use syntax::ast::*;\n+use syntax::ptr::P;\n+use syntax::codemap::{Spanned, COMMAND_LINE_SP};\n+use std::mem;\n+use rustc::lint::Context;\n+\n+fn ctx() -> &'static Context<'static, 'static> {\n+\tunsafe { \n+\t\tlet x : *const Context<'static, 'static> = std::ptr::null();\n+\t\tmem::transmute(x)\n+\t}\n+}\n \n #[test]\n fn test_lit() {\n-    assert_eq!(ConstantBool(true), constant(&Context,\n-        Expr{ node_id: 1, node: ExprLit(LitBool(true)), span: default() }));\n+    assert_eq!(Some(ConstantBool(true)), constant(ctx(),\n+        &Expr{ \n+\t\t\tid: 1, \n+\t\t\tnode: ExprLit(P(Spanned{ \n+\t\t\t\tnode: LitBool(true), \n+\t\t\t\tspan: COMMAND_LINE_SP,\n+\t\t\t})), \n+\t\t\tspan: COMMAND_LINE_SP,\n+\t\t}).map(|x| x.constant));\n }"}]}