{"sha": "30b6c59f24cfb0e451e3df14ef536e4e40fe2672", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwYjZjNTlmMjRjZmIwZTQ1MWUzZGYxNGVmNTM2ZTRlNDBmZTI2NzI=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-06-22T11:44:03Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-06-22T14:36:24Z"}, "message": "Prefer to use `has_errors` to `err_count`", "tree": {"sha": "3ccccdaa0ac46bb15ce6331c114f70a0ddbc05f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ccccdaa0ac46bb15ce6331c114f70a0ddbc05f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30b6c59f24cfb0e451e3df14ef536e4e40fe2672", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30b6c59f24cfb0e451e3df14ef536e4e40fe2672", "html_url": "https://github.com/rust-lang/rust/commit/30b6c59f24cfb0e451e3df14ef536e4e40fe2672", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30b6c59f24cfb0e451e3df14ef536e4e40fe2672/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f693d339f175b3aa23a91c62632c5f0c86886059", "url": "https://api.github.com/repos/rust-lang/rust/commits/f693d339f175b3aa23a91c62632c5f0c86886059", "html_url": "https://github.com/rust-lang/rust/commit/f693d339f175b3aa23a91c62632c5f0c86886059"}], "stats": {"total": 44, "additions": 19, "deletions": 25}, "files": [{"sha": "bb4ef2d7bd4268cf63b027f22559ea6190297970", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/30b6c59f24cfb0e451e3df14ef536e4e40fe2672/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30b6c59f24cfb0e451e3df14ef536e4e40fe2672/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=30b6c59f24cfb0e451e3df14ef536e4e40fe2672", "patch": "@@ -320,8 +320,13 @@ impl Session {\n         self.diagnostic().abort_if_errors();\n     }\n     pub fn compile_status(&self) -> Result<(), ErrorReported> {\n-        compile_result_from_err_count(self.err_count())\n+        if self.has_errors() {\n+            Err(ErrorReported)\n+        } else {\n+            Ok(())\n+        }\n     }\n+    // FIXME(matthewjasper) Remove this method, it should never be needed.\n     pub fn track_errors<F, T>(&self, f: F) -> Result<T, ErrorReported>\n     where\n         F: FnOnce() -> T,\n@@ -1388,11 +1393,3 @@ pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n }\n \n pub type CompileResult = Result<(), ErrorReported>;\n-\n-pub fn compile_result_from_err_count(err_count: usize) -> CompileResult {\n-    if err_count == 0 {\n-        Ok(())\n-    } else {\n-        Err(ErrorReported)\n-    }\n-}"}, {"sha": "082f981338a6c9d2992d2caa1a1ab093034bac31", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/30b6c59f24cfb0e451e3df14ef536e4e40fe2672/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30b6c59f24cfb0e451e3df14ef536e4e40fe2672/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=30b6c59f24cfb0e451e3df14ef536e4e40fe2672", "patch": "@@ -352,7 +352,7 @@ pub struct HandlerFlags {\n \n impl Drop for Handler {\n     fn drop(&mut self) {\n-        if self.err_count() == 0 {\n+        if !self.has_errors() {\n             let mut bugs = self.delayed_span_bugs.borrow_mut();\n             let has_bugs = !bugs.is_empty();\n             for bug in bugs.drain(..) {\n@@ -705,10 +705,9 @@ impl Handler {\n     }\n \n     pub fn abort_if_errors(&self) {\n-        if self.err_count() == 0 {\n-            return;\n+        if self.has_errors() {\n+            FatalError.raise();\n         }\n-        FatalError.raise();\n     }\n     pub fn emit(&self, msp: &MultiSpan, msg: &str, lvl: Level) {\n         if lvl == Warning && !self.flags.can_emit_warnings {"}, {"sha": "c1b6e3409c9159f1918d9c79088e094b893817e4", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30b6c59f24cfb0e451e3df14ef536e4e40fe2672/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30b6c59f24cfb0e451e3df14ef536e4e40fe2672/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=30b6c59f24cfb0e451e3df14ef536e4e40fe2672", "patch": "@@ -959,7 +959,7 @@ fn analysis<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> Result<()> {\n     // lot of annoying errors in the compile-fail tests (basically,\n     // lint warnings and so on -- kindck used to do this abort, but\n     // kindck is gone now). -nmatsakis\n-    if sess.err_count() > 0 {\n+    if sess.has_errors() {\n         return Err(ErrorReported);\n     }\n "}, {"sha": "85da3251971430ddbe47228718a5f5c4380bdf4e", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30b6c59f24cfb0e451e3df14ef536e4e40fe2672/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30b6c59f24cfb0e451e3df14ef536e4e40fe2672/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=30b6c59f24cfb0e451e3df14ef536e4e40fe2672", "patch": "@@ -565,7 +565,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // else an error would have been flagged by the\n                 // `loops` pass for using break with an expression\n                 // where you are not supposed to.\n-                assert!(expr_opt.is_none() || self.tcx.sess.err_count() > 0);\n+                assert!(expr_opt.is_none() || self.tcx.sess.has_errors());\n             }\n \n             ctxt.may_break = true;\n@@ -577,10 +577,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // this can only happen if the `break` was not\n             // inside a loop at all, which is caught by the\n             // loop-checking pass.\n-            if self.tcx.sess.err_count() == 0 {\n-                self.tcx.sess.delay_span_bug(expr.span,\n-                    \"break was outside loop, but no error was emitted\");\n-            }\n+            self.tcx.sess.delay_span_bug(expr.span,\n+                \"break was outside loop, but no error was emitted\");\n \n             // We still need to assign a type to the inner expression to\n             // prevent the ICE in #43162."}, {"sha": "40812b6a952d97b2145a61f12b3753b998f916bf", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30b6c59f24cfb0e451e3df14ef536e4e40fe2672/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30b6c59f24cfb0e451e3df14ef536e4e40fe2672/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=30b6c59f24cfb0e451e3df14ef536e4e40fe2672", "patch": "@@ -2129,8 +2129,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self.tcx.sess\n     }\n \n-    pub fn err_count_since_creation(&self) -> usize {\n-        self.tcx.sess.err_count() - self.err_count_on_creation\n+    pub fn errors_reported_since_creation(&self) -> bool {\n+        self.tcx.sess.err_count() > self.err_count_on_creation\n     }\n \n     /// Produces warning on the given node, if the current point in the\n@@ -4376,7 +4376,7 @@ pub fn check_bounds_are_used<'tcx>(tcx: TyCtxt<'tcx>, generics: &ty::Generics, t\n         } else if let ty::Error = leaf_ty.sty {\n             // If there is already another error, do not emit\n             // an error for not using a type Parameter.\n-            assert!(tcx.sess.err_count() > 0);\n+            assert!(tcx.sess.has_errors());\n             return;\n         }\n     }"}, {"sha": "5313e1d0f73a34099c6835c155c8e0133a8ef5b1", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30b6c59f24cfb0e451e3df14ef536e4e40fe2672/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30b6c59f24cfb0e451e3df14ef536e4e40fe2672/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=30b6c59f24cfb0e451e3df14ef536e4e40fe2672", "patch": "@@ -123,7 +123,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // standalone expr (e.g., the `E` in a type like `[u32; E]`).\n         rcx.outlives_environment.save_implied_bounds(id);\n \n-        if self.err_count_since_creation() == 0 {\n+        if !self.errors_reported_since_creation() {\n             // regionck assumes typeck succeeded\n             rcx.visit_body(body);\n             rcx.visit_region_obligations(id);\n@@ -173,7 +173,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.param_env,\n         );\n \n-        if self.err_count_since_creation() == 0 {\n+        if !self.errors_reported_since_creation() {\n             // regionck assumes typeck succeeded\n             rcx.visit_fn_body(fn_id, body, self.tcx.hir().span(fn_id));\n         }"}, {"sha": "621292a13c83a8d2c510eac1720dfe595251ab07", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30b6c59f24cfb0e451e3df14ef536e4e40fe2672/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30b6c59f24cfb0e451e3df14ef536e4e40fe2672/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=30b6c59f24cfb0e451e3df14ef536e4e40fe2672", "patch": "@@ -346,7 +346,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         // current architecture.\n         let resolver = abort_on_err(compiler.expansion(), sess).peek().1.clone();\n \n-        if sess.err_count() > 0 {\n+        if sess.has_errors() {\n             sess.fatal(\"Compilation failed, aborting rustdoc\");\n         }\n "}]}