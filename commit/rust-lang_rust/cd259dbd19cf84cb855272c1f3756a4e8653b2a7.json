{"sha": "cd259dbd19cf84cb855272c1f3756a4e8653b2a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMjU5ZGJkMTljZjg0Y2I4NTUyNzJjMWYzNzU2YTRlODY1M2IyYTc=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-10-26T23:56:22Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-10-27T00:42:46Z"}, "message": "Do not ICE on invalid input", "tree": {"sha": "4ef4086041b5dac40c690860e8f9e390d7aa9217", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ef4086041b5dac40c690860e8f9e390d7aa9217"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd259dbd19cf84cb855272c1f3756a4e8653b2a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd259dbd19cf84cb855272c1f3756a4e8653b2a7", "html_url": "https://github.com/rust-lang/rust/commit/cd259dbd19cf84cb855272c1f3756a4e8653b2a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd259dbd19cf84cb855272c1f3756a4e8653b2a7/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f6c670c4b4273b2c7c0af07a524d4240c926bfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f6c670c4b4273b2c7c0af07a524d4240c926bfc", "html_url": "https://github.com/rust-lang/rust/commit/9f6c670c4b4273b2c7c0af07a524d4240c926bfc"}], "stats": {"total": 96, "additions": 89, "deletions": 7}, "files": [{"sha": "c2f7b863e11d1020d55798a01a8b21de42c65541", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cd259dbd19cf84cb855272c1f3756a4e8653b2a7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd259dbd19cf84cb855272c1f3756a4e8653b2a7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=cd259dbd19cf84cb855272c1f3756a4e8653b2a7", "patch": "@@ -463,10 +463,17 @@ fn virtual_call_violation_for_method<'tcx>(\n \n             let param_env = tcx.param_env(method.def_id);\n \n-            let abi_of_ty = |ty: Ty<'tcx>| -> &Abi {\n+            let abi_of_ty = |ty: Ty<'tcx>| -> Option<&Abi> {\n                 match tcx.layout_of(param_env.and(ty)) {\n-                    Ok(layout) => &layout.abi,\n-                    Err(err) => bug!(\"error: {}\\n while computing layout for type {:?}\", err, ty),\n+                    Ok(layout) => Some(&layout.abi),\n+                    Err(err) => {\n+                        // #78372\n+                        tcx.sess.delay_span_bug(\n+                            tcx.def_span(method.def_id),\n+                            &format!(\"error: {}\\n while computing layout for type {:?}\", err, ty),\n+                        );\n+                        None\n+                    }\n                 }\n             };\n \n@@ -475,7 +482,7 @@ fn virtual_call_violation_for_method<'tcx>(\n                 receiver_for_self_ty(tcx, receiver_ty, tcx.mk_unit(), method.def_id);\n \n             match abi_of_ty(unit_receiver_ty) {\n-                &Abi::Scalar(..) => (),\n+                Some(Abi::Scalar(..)) => (),\n                 abi => {\n                     tcx.sess.delay_span_bug(\n                         tcx.def_span(method.def_id),\n@@ -495,13 +502,12 @@ fn virtual_call_violation_for_method<'tcx>(\n                 receiver_for_self_ty(tcx, receiver_ty, trait_object_ty, method.def_id);\n \n             match abi_of_ty(trait_object_receiver) {\n-                &Abi::ScalarPair(..) => (),\n+                Some(Abi::ScalarPair(..)) => (),\n                 abi => {\n                     tcx.sess.delay_span_bug(\n                         tcx.def_span(method.def_id),\n                         &format!(\n-                            \"receiver when `Self = {}` should have a ScalarPair ABI; \\\n-                                 found {:?}\",\n+                            \"receiver when `Self = {}` should have a ScalarPair ABI; found {:?}\",\n                             trait_object_ty, abi\n                         ),\n                     );"}, {"sha": "77a8c92c81c7eb0b4fb036f6a57ea566bad80daa", "filename": "src/test/ui/issues/issue-78372.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cd259dbd19cf84cb855272c1f3756a4e8653b2a7/src%2Ftest%2Fui%2Fissues%2Fissue-78372.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd259dbd19cf84cb855272c1f3756a4e8653b2a7/src%2Ftest%2Fui%2Fissues%2Fissue-78372.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-78372.rs?ref=cd259dbd19cf84cb855272c1f3756a4e8653b2a7", "patch": "@@ -0,0 +1,14 @@\n+use std::ops::DispatchFromDyn; //~ ERROR use of unstable library feature 'dispatch_from_dyn'\n+struct Smaht<T, MISC>(PhantomData); //~ ERROR cannot find type `PhantomData` in this scope\n+impl<T> DispatchFromDyn<Smaht<U, MISC>> for T {} //~ ERROR cannot find type `U` in this scope\n+//~^ ERROR cannot find type `MISC` in this scope\n+//~| ERROR use of unstable library feature 'dispatch_from_dyn'\n+//~| ERROR the trait `DispatchFromDyn` may only be implemented for a coercion between structures\n+//~| ERROR type parameter `T` must be covered by another type when it appears before the first\n+trait Foo: X<u32> {}\n+trait X<T> {\n+    fn foo(self: Smaht<Self, T>);\n+}\n+trait Marker {}\n+impl Marker for dyn Foo {}\n+fn main() {}"}, {"sha": "9267e838ceae917f839578f08d9396950f904381", "filename": "src/test/ui/issues/issue-78372.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/cd259dbd19cf84cb855272c1f3756a4e8653b2a7/src%2Ftest%2Fui%2Fissues%2Fissue-78372.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd259dbd19cf84cb855272c1f3756a4e8653b2a7/src%2Ftest%2Fui%2Fissues%2Fissue-78372.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-78372.stderr?ref=cd259dbd19cf84cb855272c1f3756a4e8653b2a7", "patch": "@@ -0,0 +1,62 @@\n+error[E0412]: cannot find type `PhantomData` in this scope\n+  --> $DIR/issue-78372.rs:2:23\n+   |\n+LL | struct Smaht<T, MISC>(PhantomData);\n+   |                       ^^^^^^^^^^^ not found in this scope\n+   |\n+help: consider importing this struct\n+   |\n+LL | use std::marker::PhantomData;\n+   |\n+\n+error[E0412]: cannot find type `U` in this scope\n+  --> $DIR/issue-78372.rs:3:31\n+   |\n+LL | impl<T> DispatchFromDyn<Smaht<U, MISC>> for T {}\n+   |      -                        ^ help: a type parameter with a similar name exists: `T`\n+   |      |\n+   |      similarly named type parameter `T` defined here\n+\n+error[E0412]: cannot find type `MISC` in this scope\n+  --> $DIR/issue-78372.rs:3:34\n+   |\n+LL | impl<T> DispatchFromDyn<Smaht<U, MISC>> for T {}\n+   |       -                          ^^^^ not found in this scope\n+   |       |\n+   |       help: you might be missing a type parameter: `, MISC`\n+\n+error[E0658]: use of unstable library feature 'dispatch_from_dyn'\n+  --> $DIR/issue-78372.rs:1:5\n+   |\n+LL | use std::ops::DispatchFromDyn;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(dispatch_from_dyn)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'dispatch_from_dyn'\n+  --> $DIR/issue-78372.rs:3:9\n+   |\n+LL | impl<T> DispatchFromDyn<Smaht<U, MISC>> for T {}\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(dispatch_from_dyn)]` to the crate attributes to enable\n+\n+error[E0378]: the trait `DispatchFromDyn` may only be implemented for a coercion between structures\n+  --> $DIR/issue-78372.rs:3:1\n+   |\n+LL | impl<T> DispatchFromDyn<Smaht<U, MISC>> for T {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0210]: type parameter `T` must be covered by another type when it appears before the first local type (`Smaht<[type error], [type error]>`)\n+  --> $DIR/issue-78372.rs:3:6\n+   |\n+LL | impl<T> DispatchFromDyn<Smaht<U, MISC>> for T {}\n+   |      ^ type parameter `T` must be covered by another type when it appears before the first local type (`Smaht<[type error], [type error]>`)\n+   |\n+   = note: implementing a foreign trait is only possible if at least one of the types for which it is implemented is local, and no uncovered type parameters appear before that first local type\n+   = note: in this case, 'before' refers to the following order: `impl<..> ForeignTrait<T1, ..., Tn> for T0`, where `T0` is the first and `Tn` is the last\n+\n+error: aborting due to 7 previous errors\n+\n+Some errors have detailed explanations: E0210, E0378, E0412, E0658.\n+For more information about an error, try `rustc --explain E0210`."}]}