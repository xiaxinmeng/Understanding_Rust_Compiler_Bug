{"sha": "604176cc105fda9deebc053d478f0e89bbf5e61b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNDE3NmNjMTA1ZmRhOWRlZWJjMDUzZDQ3OGYwZTg5YmJmNWU2MWI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-01T06:29:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-01T06:29:14Z"}, "message": "Rollup merge of #60369 - TimDiekmann:dispatch-zst, r=eddyb\n\nSupport ZSTs in DispatchFromDyn\n\nAllows to use ZSTs with 1 byte alignment in `DispatchFromDyn` implementation. This is required for `Box<T, A: Alloc>`\n\ncc #58457", "tree": {"sha": "e61437dce63d192cc17a34f09c6c1ea9c36b1c47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e61437dce63d192cc17a34f09c6c1ea9c36b1c47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/604176cc105fda9deebc053d478f0e89bbf5e61b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcyTy6CRBK7hj4Ov3rIwAAdHIIAA2qoI/JP7HETjr983P7zTig\nUoTkZXcLDt52v1XoY2WrITx3lSfzowvfSYGIrSHxB8z/6tATMD3VKE3kOXBM2Nn2\nZSFItUoG/MAFCacd2TRVrxqJOSSiGQpvp9wU+On83OZiR/2avqr/ns1ERVdRKaoe\nltCLn0kl3CvRQBGQOUTnpcl/MAZjWhsqQeQqJHLxLB5WqdUsQJ94uyhKV1qXBEit\nbqvSgIRDRHk4O6s1kN/iqGIY4+0jtEhHqEMdKb5hsq66bTneJvP2ugs+X92OpNGR\nvCkYZ/Qp56Ik9GK3lTjwSVmLgkA5/Q39eUH7du7dLk7aQuP038Pk/4VhW3oP+n4=\n=K7Ls\n-----END PGP SIGNATURE-----\n", "payload": "tree e61437dce63d192cc17a34f09c6c1ea9c36b1c47\nparent edb3cf57dcca77f31a019a8453d591c867b14eee\nparent 1b679e74f050bc3ff40452e4d4c82d3fc4b03cf4\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1556692154 +0200\ncommitter GitHub <noreply@github.com> 1556692154 +0200\n\nRollup merge of #60369 - TimDiekmann:dispatch-zst, r=eddyb\n\nSupport ZSTs in DispatchFromDyn\n\nAllows to use ZSTs with 1 byte alignment in `DispatchFromDyn` implementation. This is required for `Box<T, A: Alloc>`\n\ncc #58457\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/604176cc105fda9deebc053d478f0e89bbf5e61b", "html_url": "https://github.com/rust-lang/rust/commit/604176cc105fda9deebc053d478f0e89bbf5e61b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/604176cc105fda9deebc053d478f0e89bbf5e61b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edb3cf57dcca77f31a019a8453d591c867b14eee", "url": "https://api.github.com/repos/rust-lang/rust/commits/edb3cf57dcca77f31a019a8453d591c867b14eee", "html_url": "https://github.com/rust-lang/rust/commit/edb3cf57dcca77f31a019a8453d591c867b14eee"}, {"sha": "1b679e74f050bc3ff40452e4d4c82d3fc4b03cf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b679e74f050bc3ff40452e4d4c82d3fc4b03cf4", "html_url": "https://github.com/rust-lang/rust/commit/1b679e74f050bc3ff40452e4d4c82d3fc4b03cf4"}], "stats": {"total": 88, "additions": 80, "deletions": 8}, "files": [{"sha": "1be0248727d0110fc4924a97f0d353f45bcb9357", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/604176cc105fda9deebc053d478f0e89bbf5e61b/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604176cc105fda9deebc053d478f0e89bbf5e61b/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=604176cc105fda9deebc053d478f0e89bbf5e61b", "patch": "@@ -223,19 +223,22 @@ fn visit_implementation_of_dispatch_from_dyn<'a, 'tcx>(\n                     let fields = &def_a.non_enum_variant().fields;\n \n                     let coerced_fields = fields.iter().filter_map(|field| {\n-                        if tcx.type_of(field.did).is_phantom_data() {\n-                            // ignore PhantomData fields\n-                            return None\n-                        }\n-\n                         let ty_a = field.ty(tcx, substs_a);\n                         let ty_b = field.ty(tcx, substs_b);\n+\n+                        if let Ok(layout) = tcx.layout_of(param_env.and(ty_a)) {\n+                            if layout.is_zst() && layout.details.align.abi.bytes() == 1 {\n+                                // ignore ZST fields with alignment of 1 byte\n+                                return None;\n+                            }\n+                        }\n+\n                         if let Ok(ok) = infcx.at(&cause, param_env).eq(ty_a, ty_b) {\n                             if ok.obligations.is_empty() {\n                                 create_err(\n                                     \"the trait `DispatchFromDyn` may only be implemented \\\n                                      for structs containing the field being coerced, \\\n-                                     `PhantomData` fields, and nothing else\"\n+                                     ZST fields with 1 byte alignment, and nothing else\"\n                                 ).note(\n                                     &format!(\n                                         \"extra field `{}` of type `{}` is not allowed\","}, {"sha": "a2181336e00f518d9332b1369217790008e7c53a", "filename": "src/test/run-pass/dispatch_from_dyn_zst.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/604176cc105fda9deebc053d478f0e89bbf5e61b/src%2Ftest%2Frun-pass%2Fdispatch_from_dyn_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604176cc105fda9deebc053d478f0e89bbf5e61b/src%2Ftest%2Frun-pass%2Fdispatch_from_dyn_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdispatch_from_dyn_zst.rs?ref=604176cc105fda9deebc053d478f0e89bbf5e61b", "patch": "@@ -0,0 +1,49 @@\n+#![feature(unsize, dispatch_from_dyn, never_type)]\n+\n+#![allow(dead_code)]\n+\n+use std::{\n+    ops::DispatchFromDyn,\n+    marker::{Unsize, PhantomData},\n+};\n+\n+struct Zst;\n+struct NestedZst(PhantomData<()>, Zst);\n+\n+\n+struct WithUnit<T: ?Sized>(Box<T>, ());\n+impl<T: ?Sized, U: ?Sized> DispatchFromDyn<WithUnit<U>> for WithUnit<T>\n+    where T: Unsize<U> {}\n+\n+struct WithPhantom<T: ?Sized>(Box<T>, PhantomData<()>);\n+impl<T: ?Sized, U: ?Sized> DispatchFromDyn<WithPhantom<U>> for WithPhantom<T>\n+    where T: Unsize<U> {}\n+\n+struct WithNever<T: ?Sized>(Box<T>, !);\n+impl<T: ?Sized, U: ?Sized> DispatchFromDyn<WithNever<U>> for WithNever<T>\n+    where T: Unsize<U> {}\n+\n+struct WithZst<T: ?Sized>(Box<T>, Zst);\n+impl<T: ?Sized, U: ?Sized> DispatchFromDyn<WithZst<U>> for WithZst<T>\n+    where T: Unsize<U> {}\n+\n+struct WithNestedZst<T: ?Sized>(Box<T>, NestedZst);\n+impl<T: ?Sized, U: ?Sized> DispatchFromDyn<WithNestedZst<U>> for WithNestedZst<T>\n+    where T: Unsize<U> {}\n+\n+\n+struct Generic<T: ?Sized, A>(Box<T>, A);\n+impl<T: ?Sized, U: ?Sized> DispatchFromDyn<Generic<U, ()>> for Generic<T, ()>\n+    where T: Unsize<U> {}\n+impl<T: ?Sized, U: ?Sized> DispatchFromDyn<Generic<U, PhantomData<()>>>\n+    for Generic<T, PhantomData<()>>\n+    where T: Unsize<U> {}\n+impl<T: ?Sized, U: ?Sized> DispatchFromDyn<Generic<U, !>> for Generic<T, !>\n+    where T: Unsize<U> {}\n+impl<T: ?Sized, U: ?Sized> DispatchFromDyn<Generic<U, Zst>> for Generic<T, Zst>\n+    where T: Unsize<U> {}\n+impl<T: ?Sized, U: ?Sized> DispatchFromDyn<Generic<U, NestedZst>> for Generic<T, NestedZst>\n+    where T: Unsize<U> {}\n+\n+\n+fn main() {}"}, {"sha": "b7bc766fbe020c84174fe48a4e4241a237d4ecb4", "filename": "src/test/ui/invalid_dispatch_from_dyn_impls.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/604176cc105fda9deebc053d478f0e89bbf5e61b/src%2Ftest%2Fui%2Finvalid_dispatch_from_dyn_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604176cc105fda9deebc053d478f0e89bbf5e61b/src%2Ftest%2Fui%2Finvalid_dispatch_from_dyn_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid_dispatch_from_dyn_impls.rs?ref=604176cc105fda9deebc053d478f0e89bbf5e61b", "patch": "@@ -39,4 +39,13 @@ where\n     T: Unsize<U>,\n {} //~^^^ ERROR [E0378]\n \n+#[repr(align(64))]\n+struct OverAlignedZst;\n+struct OverAligned<T: ?Sized>(Box<T>, OverAlignedZst);\n+\n+impl<T: ?Sized, U: ?Sized> DispatchFromDyn<OverAligned<U>> for OverAligned<T>\n+    where\n+        T: Unsize<U>,\n+{} //~^^^ ERROR [E0378]\n+\n fn main() {}"}, {"sha": "6d62d4fd0711ddaa6e3042634bbbc18d9dbfd7b8", "filename": "src/test/ui/invalid_dispatch_from_dyn_impls.stderr", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/604176cc105fda9deebc053d478f0e89bbf5e61b/src%2Ftest%2Fui%2Finvalid_dispatch_from_dyn_impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/604176cc105fda9deebc053d478f0e89bbf5e61b/src%2Ftest%2Fui%2Finvalid_dispatch_from_dyn_impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid_dispatch_from_dyn_impls.stderr?ref=604176cc105fda9deebc053d478f0e89bbf5e61b", "patch": "@@ -1,4 +1,4 @@\n-error[E0378]: the trait `DispatchFromDyn` may only be implemented for structs containing the field being coerced, `PhantomData` fields, and nothing else\n+error[E0378]: the trait `DispatchFromDyn` may only be implemented for structs containing the field being coerced, ZST fields with 1 byte alignment, and nothing else\n   --> $DIR/invalid_dispatch_from_dyn_impls.rs:10:1\n    |\n LL | / impl<T, U> DispatchFromDyn<WrapperWithExtraField<U>> for WrapperWithExtraField<T>\n@@ -36,6 +36,17 @@ LL | |     T: Unsize<U>,\n LL | | {}\n    | |__^\n \n-error: aborting due to 4 previous errors\n+error[E0378]: the trait `DispatchFromDyn` may only be implemented for structs containing the field being coerced, ZST fields with 1 byte alignment, and nothing else\n+  --> $DIR/invalid_dispatch_from_dyn_impls.rs:46:1\n+   |\n+LL | / impl<T: ?Sized, U: ?Sized> DispatchFromDyn<OverAligned<U>> for OverAligned<T>\n+LL | |     where\n+LL | |         T: Unsize<U>,\n+LL | | {}\n+   | |__^\n+   |\n+   = note: extra field `1` of type `OverAlignedZst` is not allowed\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0378`."}]}