{"sha": "4c35df47e84b0eff51faa95b4c9636bb5f3da5eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMzVkZjQ3ZTg0YjBlZmY1MWZhYTk1YjRjOTYzNmJiNWYzZGE1ZWI=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-07T18:08:50Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-07T18:08:50Z"}, "message": "Move `equals_ctor` to `TyExt`\n\nI'd prefer getting rid of it, but it's used in the impl search and not\nsuper easy to replace there (I think ideally the impl search would do\nproper unification, but that's a bit more complicated).", "tree": {"sha": "5c8162da0bd04ddf319ca27226b5f55c4665d5e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c8162da0bd04ddf319ca27226b5f55c4665d5e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c35df47e84b0eff51faa95b4c9636bb5f3da5eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c35df47e84b0eff51faa95b4c9636bb5f3da5eb", "html_url": "https://github.com/rust-lang/rust/commit/4c35df47e84b0eff51faa95b4c9636bb5f3da5eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c35df47e84b0eff51faa95b4c9636bb5f3da5eb/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb248d85a0eb91bae7bafcd69ffe4dfed3e32fce", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb248d85a0eb91bae7bafcd69ffe4dfed3e32fce", "html_url": "https://github.com/rust-lang/rust/commit/eb248d85a0eb91bae7bafcd69ffe4dfed3e32fce"}], "stats": {"total": 70, "additions": 37, "deletions": 33}, "files": [{"sha": "6a353423a715fb2eb4b71ed9ad8ef179f96f0f4a", "filename": "crates/hir_ty/src/chalk_ext.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4c35df47e84b0eff51faa95b4c9636bb5f3da5eb/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c35df47e84b0eff51faa95b4c9636bb5f3da5eb/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs?ref=4c35df47e84b0eff51faa95b4c9636bb5f3da5eb", "patch": "@@ -8,7 +8,7 @@ use hir_def::{\n use crate::{\n     db::HirDatabase, from_assoc_type_id, from_chalk_trait_id, from_foreign_def_id,\n     from_placeholder_idx, to_chalk_trait_id, AdtId, AliasEq, AliasTy, Binders, CallableDefId,\n-    CallableSig, ImplTraitId, Interner, Lifetime, ProjectionTy, QuantifiedWhereClause,\n+    CallableSig, FnPointer, ImplTraitId, Interner, Lifetime, ProjectionTy, QuantifiedWhereClause,\n     Substitution, TraitRef, Ty, TyBuilder, TyKind, WhereClause,\n };\n \n@@ -34,6 +34,9 @@ pub trait TyExt {\n \n     fn impl_trait_bounds(&self, db: &dyn HirDatabase) -> Option<Vec<QuantifiedWhereClause>>;\n     fn associated_type_parent_trait(&self, db: &dyn HirDatabase) -> Option<TraitId>;\n+\n+    /// FIXME: Get rid of this, it's not a good abstraction\n+    fn equals_ctor(&self, other: &Ty) -> bool;\n }\n \n impl TyExt for Ty {\n@@ -238,6 +241,36 @@ impl TyExt for Ty {\n             _ => None,\n         }\n     }\n+\n+    fn equals_ctor(&self, other: &Ty) -> bool {\n+        match (self.kind(&Interner), other.kind(&Interner)) {\n+            (TyKind::Adt(adt, ..), TyKind::Adt(adt2, ..)) => adt == adt2,\n+            (TyKind::Slice(_), TyKind::Slice(_)) | (TyKind::Array(_, _), TyKind::Array(_, _)) => {\n+                true\n+            }\n+            (TyKind::FnDef(def_id, ..), TyKind::FnDef(def_id2, ..)) => def_id == def_id2,\n+            (TyKind::OpaqueType(ty_id, ..), TyKind::OpaqueType(ty_id2, ..)) => ty_id == ty_id2,\n+            (TyKind::AssociatedType(ty_id, ..), TyKind::AssociatedType(ty_id2, ..)) => {\n+                ty_id == ty_id2\n+            }\n+            (TyKind::Foreign(ty_id, ..), TyKind::Foreign(ty_id2, ..)) => ty_id == ty_id2,\n+            (TyKind::Closure(id1, _), TyKind::Closure(id2, _)) => id1 == id2,\n+            (TyKind::Ref(mutability, ..), TyKind::Ref(mutability2, ..))\n+            | (TyKind::Raw(mutability, ..), TyKind::Raw(mutability2, ..)) => {\n+                mutability == mutability2\n+            }\n+            (\n+                TyKind::Function(FnPointer { num_binders, sig, .. }),\n+                TyKind::Function(FnPointer { num_binders: num_binders2, sig: sig2, .. }),\n+            ) => num_binders == num_binders2 && sig == sig2,\n+            (TyKind::Tuple(cardinality, _), TyKind::Tuple(cardinality2, _)) => {\n+                cardinality == cardinality2\n+            }\n+            (TyKind::Str, TyKind::Str) | (TyKind::Never, TyKind::Never) => true,\n+            (TyKind::Scalar(scalar), TyKind::Scalar(scalar2)) => scalar == scalar2,\n+            _ => false,\n+        }\n+    }\n }\n \n pub trait ProjectionTyExt {"}, {"sha": "2ea9dd920991d8065a44ff7e4fb231815697e865", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c35df47e84b0eff51faa95b4c9636bb5f3da5eb/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c35df47e84b0eff51faa95b4c9636bb5f3da5eb/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=4c35df47e84b0eff51faa95b4c9636bb5f3da5eb", "patch": "@@ -8,7 +8,8 @@ use ena::unify::{InPlaceUnificationTable, NoError, UnifyKey, UnifyValue};\n use super::{DomainGoal, InferenceContext};\n use crate::{\n     AliasEq, AliasTy, BoundVar, Canonical, CanonicalVarKinds, DebruijnIndex, FnPointer, FnSubst,\n-    InEnvironment, InferenceVar, Interner, Scalar, Substitution, Ty, TyKind, TypeWalk, WhereClause,\n+    InEnvironment, InferenceVar, Interner, Scalar, Substitution, Ty, TyExt, TyKind, TypeWalk,\n+    WhereClause,\n };\n \n impl<'a> InferenceContext<'a> {"}, {"sha": "2e851d3e0c29200089ef587b5bd50e30cfdf733d", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4c35df47e84b0eff51faa95b4c9636bb5f3da5eb/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c35df47e84b0eff51faa95b4c9636bb5f3da5eb/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=4c35df47e84b0eff51faa95b4c9636bb5f3da5eb", "patch": "@@ -168,37 +168,7 @@ impl CallableSig {\n     }\n }\n \n-impl Ty {\n-    pub fn equals_ctor(&self, other: &Ty) -> bool {\n-        match (self.kind(&Interner), other.kind(&Interner)) {\n-            (TyKind::Adt(adt, ..), TyKind::Adt(adt2, ..)) => adt == adt2,\n-            (TyKind::Slice(_), TyKind::Slice(_)) | (TyKind::Array(_, _), TyKind::Array(_, _)) => {\n-                true\n-            }\n-            (TyKind::FnDef(def_id, ..), TyKind::FnDef(def_id2, ..)) => def_id == def_id2,\n-            (TyKind::OpaqueType(ty_id, ..), TyKind::OpaqueType(ty_id2, ..)) => ty_id == ty_id2,\n-            (TyKind::AssociatedType(ty_id, ..), TyKind::AssociatedType(ty_id2, ..)) => {\n-                ty_id == ty_id2\n-            }\n-            (TyKind::Foreign(ty_id, ..), TyKind::Foreign(ty_id2, ..)) => ty_id == ty_id2,\n-            (TyKind::Closure(id1, _), TyKind::Closure(id2, _)) => id1 == id2,\n-            (TyKind::Ref(mutability, ..), TyKind::Ref(mutability2, ..))\n-            | (TyKind::Raw(mutability, ..), TyKind::Raw(mutability2, ..)) => {\n-                mutability == mutability2\n-            }\n-            (\n-                TyKind::Function(FnPointer { num_binders, sig, .. }),\n-                TyKind::Function(FnPointer { num_binders: num_binders2, sig: sig2, .. }),\n-            ) => num_binders == num_binders2 && sig == sig2,\n-            (TyKind::Tuple(cardinality, _), TyKind::Tuple(cardinality2, _)) => {\n-                cardinality == cardinality2\n-            }\n-            (TyKind::Str, TyKind::Str) | (TyKind::Never, TyKind::Never) => true,\n-            (TyKind::Scalar(scalar), TyKind::Scalar(scalar2)) => scalar == scalar2,\n-            _ => false,\n-        }\n-    }\n-}\n+impl Ty {}\n \n #[derive(Copy, Clone, PartialEq, Eq, Debug, Hash)]\n pub enum ImplTraitId {"}]}