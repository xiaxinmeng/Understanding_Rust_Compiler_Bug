{"sha": "99ecf4e2c94a72a68294111ecdf6a82c150c378a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZWNmNGUyYzk0YTcyYTY4Mjk0MTExZWNkZjZhODJjMTUwYzM3OGE=", "commit": {"author": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2015-10-27T13:41:55Z"}, "committer": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2015-10-28T22:32:07Z"}, "message": "libsyntax: improve error message when a statement is prefixed with a match keyword", "tree": {"sha": "ec1bceda822241a263a3929e09dc051bfa2ae8d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec1bceda822241a263a3929e09dc051bfa2ae8d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99ecf4e2c94a72a68294111ecdf6a82c150c378a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99ecf4e2c94a72a68294111ecdf6a82c150c378a", "html_url": "https://github.com/rust-lang/rust/commit/99ecf4e2c94a72a68294111ecdf6a82c150c378a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99ecf4e2c94a72a68294111ecdf6a82c150c378a/comments", "author": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65623dba0d0c39de0e7cc66a31bce45328c3caa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/65623dba0d0c39de0e7cc66a31bce45328c3caa8", "html_url": "https://github.com/rust-lang/rust/commit/65623dba0d0c39de0e7cc66a31bce45328c3caa8"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "d1fc8ac2002056e6bd2551e3ee09ae809b83e91b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99ecf4e2c94a72a68294111ecdf6a82c150c378a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99ecf4e2c94a72a68294111ecdf6a82c150c378a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=99ecf4e2c94a72a68294111ecdf6a82c150c378a", "patch": "@@ -2941,9 +2941,15 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_match_expr(&mut self) -> PResult<P<Expr>> {\n+        let match_span = self.last_span;\n         let lo = self.last_span.lo;\n         let discriminant = try!(self.parse_expr_res(Restrictions::RESTRICTION_NO_STRUCT_LITERAL));\n-        try!(self.commit_expr_expecting(&*discriminant, token::OpenDelim(token::Brace)));\n+        if let Err(e) = self.commit_expr_expecting(&*discriminant, token::OpenDelim(token::Brace)) {\n+            if self.token == token::Token::Semi {\n+                self.span_note(match_span, \"did you mean to remove this `match` keyword?\");\n+            }\n+            return Err(e)\n+        }\n         let mut arms: Vec<Arm> = Vec::new();\n         while self.token != token::CloseDelim(token::Brace) {\n             arms.push(try!(self.parse_arm_nopanic()));"}, {"sha": "e85fb3c9dd53d9c655e419246304696911fc3386", "filename": "src/test/parse-fail/match-refactor-to-expr.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/99ecf4e2c94a72a68294111ecdf6a82c150c378a/src%2Ftest%2Fparse-fail%2Fmatch-refactor-to-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99ecf4e2c94a72a68294111ecdf6a82c150c378a/src%2Ftest%2Fparse-fail%2Fmatch-refactor-to-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fmatch-refactor-to-expr.rs?ref=99ecf4e2c94a72a68294111ecdf6a82c150c378a", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let foo =\n+        match //~ NOTE did you mean to remove this `match` keyword?\n+        Some(4).unwrap_or_else(5)\n+        ; //~ ERROR expected one of `.`, `{`, or an operator, found `;`\n+\n+    println!(\"{}\", foo)\n+}"}]}