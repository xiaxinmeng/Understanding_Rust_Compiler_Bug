{"sha": "fc48f3e824333f1dc8166f9760795a8b67c84714", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNDhmM2U4MjQzMzNmMWRjODE2NmY5NzYwNzk1YThiNjdjODQ3MTQ=", "commit": {"author": {"name": "Saleem Jaffer", "email": "ssaleem1992@gmail.com", "date": "2019-07-26T09:58:27Z"}, "committer": {"name": "Saleem Jaffer", "email": "ssaleem1992@gmail.com", "date": "2019-07-29T08:03:54Z"}, "message": "more grouping of the variants in InterpError", "tree": {"sha": "bfd8fbf38b3f042b506ae1a5a5c2a3858b4df4ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfd8fbf38b3f042b506ae1a5a5c2a3858b4df4ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc48f3e824333f1dc8166f9760795a8b67c84714", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc48f3e824333f1dc8166f9760795a8b67c84714", "html_url": "https://github.com/rust-lang/rust/commit/fc48f3e824333f1dc8166f9760795a8b67c84714", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc48f3e824333f1dc8166f9760795a8b67c84714/comments", "author": {"login": "saleemjaffer", "id": 19221716, "node_id": "MDQ6VXNlcjE5MjIxNzE2", "avatar_url": "https://avatars.githubusercontent.com/u/19221716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saleemjaffer", "html_url": "https://github.com/saleemjaffer", "followers_url": "https://api.github.com/users/saleemjaffer/followers", "following_url": "https://api.github.com/users/saleemjaffer/following{/other_user}", "gists_url": "https://api.github.com/users/saleemjaffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/saleemjaffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saleemjaffer/subscriptions", "organizations_url": "https://api.github.com/users/saleemjaffer/orgs", "repos_url": "https://api.github.com/users/saleemjaffer/repos", "events_url": "https://api.github.com/users/saleemjaffer/events{/privacy}", "received_events_url": "https://api.github.com/users/saleemjaffer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saleemjaffer", "id": 19221716, "node_id": "MDQ6VXNlcjE5MjIxNzE2", "avatar_url": "https://avatars.githubusercontent.com/u/19221716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saleemjaffer", "html_url": "https://github.com/saleemjaffer", "followers_url": "https://api.github.com/users/saleemjaffer/followers", "following_url": "https://api.github.com/users/saleemjaffer/following{/other_user}", "gists_url": "https://api.github.com/users/saleemjaffer/gists{/gist_id}", "starred_url": "https://api.github.com/users/saleemjaffer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saleemjaffer/subscriptions", "organizations_url": "https://api.github.com/users/saleemjaffer/orgs", "repos_url": "https://api.github.com/users/saleemjaffer/repos", "events_url": "https://api.github.com/users/saleemjaffer/events{/privacy}", "received_events_url": "https://api.github.com/users/saleemjaffer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01859bb1602c486a1df1eec9e6884d4bdae60fed", "url": "https://api.github.com/repos/rust-lang/rust/commits/01859bb1602c486a1df1eec9e6884d4bdae60fed", "html_url": "https://github.com/rust-lang/rust/commit/01859bb1602c486a1df1eec9e6884d4bdae60fed"}], "stats": {"total": 86, "additions": 44, "deletions": 42}, "files": [{"sha": "2897c70d71d25066466f4b0d8f41f3de7a5762f6", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 44, "deletions": 42, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/fc48f3e824333f1dc8166f9760795a8b67c84714/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc48f3e824333f1dc8166f9760795a8b67c84714/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=fc48f3e824333f1dc8166f9760795a8b67c84714", "patch": "@@ -137,12 +137,13 @@ impl<'tcx> ConstEvalErr<'tcx> {\n         message: &str,\n         lint_root: Option<hir::HirId>,\n     ) -> Result<DiagnosticBuilder<'tcx>, ErrorHandled> {\n+        use InvalidProgramInfo::*;\n         match self.error {\n-            InterpError::Layout(LayoutError::Unknown(_)) |\n-            InterpError::InvalidProgram(InvalidProgramMessage::TooGeneric) =>\n+            InterpError::InvalidProgram(Layout(LayoutError::Unknown(_))) |\n+            InterpError::InvalidProgram(TooGeneric) =>\n                 return Err(ErrorHandled::TooGeneric),\n             InterpError::Layout(LayoutError::SizeOverflow(_)) |\n-            InterpError::InvalidProgram(InvalidProgramMessage::TypeckError) =>\n+            InterpError::InvalidProgram(TypeckError) =>\n                 return Err(ErrorHandled::Reported),\n             _ => {},\n         }\n@@ -312,42 +313,74 @@ impl<O: fmt::Debug> fmt::Debug for PanicMessage<O> {\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n-pub enum InvalidProgramMessage {\n+pub enum InvalidProgramInfo<'tcx> {\n     /// Resolution can fail if we are in a too generic context\n     TooGeneric,\n     /// Cannot compute this constant because it depends on another one\n     /// which already produced an error\n     ReferencedConstant,\n     /// Abort in case type errors are reached\n     TypeckError,\n+    Layout(layout::LayoutError<'tcx>),\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n-pub enum UndefinedBehaviourMessage {\n+pub enum UndefinedBehaviourInfo {\n+    Unreachable,\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n-pub enum UnsupportedMessage {\n+pub enum UnsupportedInfo<'tcx> {\n+    FunctionAbiMismatch(Abi, Abi),\n+    FunctionArgMismatch(Ty<'tcx>, Ty<'tcx>),\n+    FunctionRetMismatch(Ty<'tcx>, Ty<'tcx>),\n+    FunctionArgCountMismatch,\n+    UnterminatedCString(Pointer),\n+    DanglingPointerDeref,\n+    DoubleFree,\n+    InvalidMemoryAccess,\n+    InvalidFunctionPointer,\n+    InvalidBool,\n+    InvalidDiscriminant(ScalarMaybeUndef),\n+    PointerOutOfBounds {\n+        ptr: Pointer,\n+        msg: CheckInAllocMsg,\n+        allocation_size: Size,\n+    },\n+    InvalidNullPointerUsage,\n+    ReadPointerAsBytes,\n+    ReadBytesAsPointer,\n+    ReadForeignStatic,\n+    InvalidPointerMath,\n+    ReadUndefBytes(Size),\n+    DeadLocal,\n+    InvalidBoolOp(mir::BinOp),\n+    InlineAsm,\n+    UnimplementedTraitSelection,\n+    CalledClosureAsFunction,\n+    NoMirFor(String),\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n-pub enum ResourceExhaustionMessage {\n+pub enum ResourceExhaustionInfo {\n+    StackFrameLimitReached,\n+    InfiniteLoop,\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, HashStable)]\n pub enum InterpError<'tcx> {\n     /// The program panicked.\n     Panic(PanicMessage<u64>),\n     /// The program caused undefined behavior.\n-    UndefinedBehaviour(UndefinedBehaviourMessage),\n+    UndefinedBehaviour(UndefinedBehaviourInfo),\n     /// The program did something the interpreter does not support (some of these *might* be UB\n     /// but the interpreter is not sure).\n-    Unsupported(UnsupportedMessage),\n+    Unsupported(UnsupportedInfo<'tcx>),\n     /// The program was invalid (ill-typed, not sufficiently monomorphized, ...).\n-    InvalidProgram(InvalidProgramMessage),\n+    InvalidProgram(InvalidProgramInfo<'tcx>),\n     /// The program exhausted the interpreter's resources (stack/heap too big,\n     /// execution takes too long, ..).\n-    ResourceExhaustion(ResourceExhaustionMessage),\n+    ResourceExhaustion(ResourceExhaustionInfo),\n \n     /// THe above 5 variants are what we want to group all the remaining InterpError variants into\n \n@@ -359,37 +392,11 @@ pub enum InterpError<'tcx> {\n     /// with the given status code.  Used by Miri, but not by CTFE.\n     Exit(i32),\n \n-    FunctionAbiMismatch(Abi, Abi),\n-    FunctionArgMismatch(Ty<'tcx>, Ty<'tcx>),\n-    FunctionRetMismatch(Ty<'tcx>, Ty<'tcx>),\n-    FunctionArgCountMismatch,\n-    NoMirFor(String),\n-    UnterminatedCString(Pointer),\n-    DanglingPointerDeref,\n-    DoubleFree,\n-    InvalidMemoryAccess,\n-    InvalidFunctionPointer,\n-    InvalidBool,\n-    InvalidDiscriminant(ScalarMaybeUndef),\n-    PointerOutOfBounds {\n-        ptr: Pointer,\n-        msg: CheckInAllocMsg,\n-        allocation_size: Size,\n-    },\n-    InvalidNullPointerUsage,\n-    ReadPointerAsBytes,\n-    ReadBytesAsPointer,\n-    ReadForeignStatic,\n-    InvalidPointerMath,\n-    ReadUndefBytes(Size),\n-    DeadLocal,\n-    InvalidBoolOp(mir::BinOp),\n     Unimplemented(String),\n     DerefFunctionPointer,\n     ExecuteMemory,\n     Intrinsic(String),\n     InvalidChar(u128),\n-    StackFrameLimitReached,\n     OutOfTls,\n     TlsOutOfBounds,\n     AbiViolation(String),\n@@ -398,25 +405,20 @@ pub enum InterpError<'tcx> {\n         has: Align,\n     },\n     ValidationFailure(String),\n-    CalledClosureAsFunction,\n     VtableForArgumentlessMethod,\n     ModifiedConstantMemory,\n     ModifiedStatic,\n     AssumptionNotHeld,\n-    InlineAsm,\n     TypeNotPrimitive(Ty<'tcx>),\n     ReallocatedWrongMemoryKind(String, String),\n     DeallocatedWrongMemoryKind(String, String),\n     ReallocateNonBasePtr,\n     DeallocateNonBasePtr,\n     IncorrectAllocationInformation(Size, Size, Align, Align),\n-    Layout(layout::LayoutError<'tcx>),\n     HeapAllocZeroBytes,\n     HeapAllocNonPowerOfTwoAlignment(u64),\n-    Unreachable,\n     ReadFromReturnPointer,\n     PathNotFound(Vec<String>),\n-    UnimplementedTraitSelection,\n }\n \n pub type InterpResult<'tcx, T = ()> = Result<T, InterpErrorInfo<'tcx>>;"}]}