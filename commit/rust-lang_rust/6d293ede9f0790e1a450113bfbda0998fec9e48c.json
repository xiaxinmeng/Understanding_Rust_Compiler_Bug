{"sha": "6d293ede9f0790e1a450113bfbda0998fec9e48c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMjkzZWRlOWYwNzkwZTFhNDUwMTEzYmZiZGEwOTk4ZmVjOWU0OGM=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-07-31T02:44:29Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-07-31T02:44:29Z"}, "message": "Update tests", "tree": {"sha": "9ef974c29ad644ece0264ff3684e988c48155e14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ef974c29ad644ece0264ff3684e988c48155e14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d293ede9f0790e1a450113bfbda0998fec9e48c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d293ede9f0790e1a450113bfbda0998fec9e48c", "html_url": "https://github.com/rust-lang/rust/commit/6d293ede9f0790e1a450113bfbda0998fec9e48c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d293ede9f0790e1a450113bfbda0998fec9e48c/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c25f25f7f18728eef288c45f77477232b9c5d203", "url": "https://api.github.com/repos/rust-lang/rust/commits/c25f25f7f18728eef288c45f77477232b9c5d203", "html_url": "https://github.com/rust-lang/rust/commit/c25f25f7f18728eef288c45f77477232b9c5d203"}], "stats": {"total": 127, "additions": 9, "deletions": 118}, "files": [{"sha": "caa2d916cd7a8c542e80f6b99c092aeafa9da545", "filename": "library/core/tests/result.rs", "status": "modified", "additions": 9, "deletions": 118, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/6d293ede9f0790e1a450113bfbda0998fec9e48c/library%2Fcore%2Ftests%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d293ede9f0790e1a450113bfbda0998fec9e48c/library%2Fcore%2Ftests%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fresult.rs?ref=6d293ede9f0790e1a450113bfbda0998fec9e48c", "patch": "@@ -250,24 +250,11 @@ fn test_result_as_deref() {\n     let expected_result = Result::Ok::<&[i32], &u32>([1, 2, 3, 4, 5].as_slice());\n     assert_eq!(ref_ok.as_deref(), expected_result);\n \n-    // &Result<T, E: Deref>::Err(T).as_deref_err() ->\n-    //      Result<&T, &E::Deref::Target>::Err(&*E)\n-    let ref_err = &Result::Err::<u8, &i32>(&41);\n-    let expected_result = Result::Err::<&u8, &i32>(&41);\n-    assert_eq!(ref_err.as_deref_err(), expected_result);\n-\n-    let ref_err = &Result::Err::<u32, String>(String::from(\"an error\"));\n-    let expected_result = Result::Err::<&u32, &str>(\"an error\");\n-    assert_eq!(ref_err.as_deref_err(), expected_result);\n-\n-    let ref_err = &Result::Err::<u32, Vec<i32>>(vec![5, 4, 3, 2, 1]);\n-    let expected_result = Result::Err::<&u32, &[i32]>([5, 4, 3, 2, 1].as_slice());\n-    assert_eq!(ref_err.as_deref_err(), expected_result);\n-\n-    // &Result<T: Deref, E: Deref>::Err(T).as_deref_err() ->\n-    //      Result<&T, &E::Deref::Target>::Err(&*E)\n-    let ref_err = &Result::Err::<&u8, &i32>(&41);\n-    let expected_result = Result::Err::<&u8, &&i32>(&&41);\n+    // &Result<T: Deref, E>::Err(T).as_deref() ->\n+    //      Result<&T::Deref::Target, &E>::Err(&*E)\n+    let val = 41;\n+    let ref_err = &Result::Err::<&u8, i32>(val);\n+    let expected_result = Result::Err::<&u8, &i32>(&val);\n     assert_eq!(ref_err.as_deref(), expected_result);\n \n     let s = String::from(\"an error\");\n@@ -279,46 +266,12 @@ fn test_result_as_deref() {\n     let ref_err = &Result::Err::<&u32, Vec<i32>>(v.clone());\n     let expected_result = Result::Err::<&u32, &Vec<i32>>(&v);\n     assert_eq!(ref_err.as_deref(), expected_result);\n-\n-    // The following cases test calling `as_deref_*` with the wrong variant (i.e.\n-    // `as_deref()` with a `Result::Err()`, or `as_deref_err()` with a `Result::Ok()`.\n-    // While uncommon, these cases are supported to ensure that an `as_deref_*`\n-    // call can still be made even when one of the Result types does not implement\n-    // `Deref` (for example, std::io::Error).\n-\n-    // &Result<T, E: Deref>::Ok(T).as_deref_err() ->\n-    //      Result<&T, &E::Deref::Target>::Ok(&T)\n-    let ref_ok = &Result::Ok::<i32, &u8>(42);\n-    let expected_result = Result::Ok::<&i32, &u8>(&42);\n-    assert_eq!(ref_ok.as_deref_err(), expected_result);\n-\n-    let ref_ok = &Result::Ok::<&str, &u32>(\"a result\");\n-    let expected_result = Result::Ok::<&&str, &u32>(&\"a result\");\n-    assert_eq!(ref_ok.as_deref_err(), expected_result);\n-\n-    let ref_ok = &Result::Ok::<[i32; 5], &u32>([1, 2, 3, 4, 5]);\n-    let expected_result = Result::Ok::<&[i32; 5], &u32>(&[1, 2, 3, 4, 5]);\n-    assert_eq!(ref_ok.as_deref_err(), expected_result);\n-\n-    // &Result<T: Deref, E>::Err(E).as_deref() ->\n-    //      Result<&T::Deref::Target, &E>::Err(&E)\n-    let ref_err = &Result::Err::<&u8, i32>(41);\n-    let expected_result = Result::Err::<&u8, &i32>(&41);\n-    assert_eq!(ref_err.as_deref(), expected_result);\n-\n-    let ref_err = &Result::Err::<&u32, &str>(\"an error\");\n-    let expected_result = Result::Err::<&u32, &&str>(&\"an error\");\n-    assert_eq!(ref_err.as_deref(), expected_result);\n-\n-    let ref_err = &Result::Err::<&u32, [i32; 5]>([5, 4, 3, 2, 1]);\n-    let expected_result = Result::Err::<&u32, &[i32; 5]>(&[5, 4, 3, 2, 1]);\n-    assert_eq!(ref_err.as_deref(), expected_result);\n }\n \n #[test]\n fn test_result_as_deref_mut() {\n-    // &mut Result<T: Deref, E>::Ok(T).as_deref_mut() ->\n-    //      Result<&mut T::Deref::Target, &mut E>::Ok(&mut *T)\n+    // &mut Result<T: DerefMut, E>::Ok(T).as_deref_mut() ->\n+    //      Result<&mut T::DerefMut::Target, &mut E>::Ok(&mut *T)\n     let mut val = 42;\n     let mut expected_val = 42;\n     let mut_ok = &mut Result::Ok::<&mut i32, u8>(&mut val);\n@@ -335,26 +288,8 @@ fn test_result_as_deref_mut() {\n     let expected_result = Result::Ok::<&mut [i32], &mut u32>(expected_vec.as_mut_slice());\n     assert_eq!(mut_ok.as_deref_mut(), expected_result);\n \n-    // &mut Result<T, E: Deref>::Err(T).as_deref_mut_err() ->\n-    //      Result<&mut T, &mut E::Deref::Target>::Err(&mut *E)\n-    let mut val = 41;\n-    let mut expected_val = 41;\n-    let mut_err = &mut Result::Err::<u8, &mut i32>(&mut val);\n-    let expected_result = Result::Err::<&mut u8, &mut i32>(&mut expected_val);\n-    assert_eq!(mut_err.as_deref_mut_err(), expected_result);\n-\n-    let mut expected_string = String::from(\"an error\");\n-    let mut_err = &mut Result::Err::<u32, String>(expected_string.clone());\n-    let expected_result = Result::Err::<&mut u32, &mut str>(expected_string.deref_mut());\n-    assert_eq!(mut_err.as_deref_mut_err(), expected_result);\n-\n-    let mut expected_vec = vec![5, 4, 3, 2, 1];\n-    let mut_err = &mut Result::Err::<u32, Vec<i32>>(expected_vec.clone());\n-    let expected_result = Result::Err::<&mut u32, &mut [i32]>(expected_vec.as_mut_slice());\n-    assert_eq!(mut_err.as_deref_mut_err(), expected_result);\n-\n-    // &mut Result<T: Deref, E: Deref>::Err(T).as_deref_mut_err() ->\n-    //      Result<&mut T, &mut E::Deref::Target>::Err(&mut *E)\n+    // &mut Result<T: DerefMut, E>::Err(T).as_deref_mut() ->\n+    //      Result<&mut T, &mut E>::Err(&mut *E)\n     let mut val = 41;\n     let mut_err = &mut Result::Err::<&mut u8, i32>(val);\n     let expected_result = Result::Err::<&mut u8, &mut i32>(&mut val);\n@@ -369,48 +304,4 @@ fn test_result_as_deref_mut() {\n     let mut_err = &mut Result::Err::<&mut u32, Vec<i32>>(expected_vec.clone());\n     let expected_result = Result::Err::<&mut u32, &mut Vec<i32>>(&mut expected_vec);\n     assert_eq!(mut_err.as_deref_mut(), expected_result);\n-\n-    // The following cases test calling `as_deref_mut_*` with the wrong variant (i.e.\n-    // `as_deref_mut()` with a `Result::Err()`, or `as_deref_mut_err()` with a `Result::Ok()`.\n-    // While uncommon, these cases are supported to ensure that an `as_deref_mut_*`\n-    // call can still be made even when one of the Result types does not implement\n-    // `Deref` (for example, std::io::Error).\n-\n-    // &mut Result<T, E: Deref>::Ok(T).as_deref_mut_err() ->\n-    //      Result<&mut T, &mut E::Deref::Target>::Ok(&mut T)\n-    let mut expected_val = 42;\n-    let mut_ok = &mut Result::Ok::<i32, &mut u8>(expected_val.clone());\n-    let expected_result = Result::Ok::<&mut i32, &mut u8>(&mut expected_val);\n-    assert_eq!(mut_ok.as_deref_mut_err(), expected_result);\n-\n-    let string = String::from(\"a result\");\n-    let expected_string = string.clone();\n-    let mut ref_str = expected_string.as_ref();\n-    let mut_ok = &mut Result::Ok::<&str, &mut u32>(string.as_str());\n-    let expected_result = Result::Ok::<&mut &str, &mut u32>(&mut ref_str);\n-    assert_eq!(mut_ok.as_deref_mut_err(), expected_result);\n-\n-    let mut expected_arr = [1, 2, 3, 4, 5];\n-    let mut_ok = &mut Result::Ok::<[i32; 5], &mut u32>(expected_arr.clone());\n-    let expected_result = Result::Ok::<&mut [i32; 5], &mut u32>(&mut expected_arr);\n-    assert_eq!(mut_ok.as_deref_mut_err(), expected_result);\n-\n-    // &mut Result<T: Deref, E>::Err(E).as_deref_mut() ->\n-    //      Result<&mut T::Deref::Target, &mut E>::Err(&mut E)\n-    let mut expected_val = 41;\n-    let mut_err = &mut Result::Err::<&mut u8, i32>(expected_val.clone());\n-    let expected_result = Result::Err::<&mut u8, &mut i32>(&mut expected_val);\n-    assert_eq!(mut_err.as_deref_mut(), expected_result);\n-\n-    let string = String::from(\"an error\");\n-    let expected_string = string.clone();\n-    let mut ref_str = expected_string.as_ref();\n-    let mut_err = &mut Result::Err::<&mut u32, &str>(string.as_str());\n-    let expected_result = Result::Err::<&mut u32, &mut &str>(&mut ref_str);\n-    assert_eq!(mut_err.as_deref_mut(), expected_result);\n-\n-    let mut expected_arr = [5, 4, 3, 2, 1];\n-    let mut_err = &mut Result::Err::<&mut u32, [i32; 5]>(expected_arr.clone());\n-    let expected_result = Result::Err::<&mut u32, &mut [i32; 5]>(&mut expected_arr);\n-    assert_eq!(mut_err.as_deref_mut(), expected_result);\n }"}]}