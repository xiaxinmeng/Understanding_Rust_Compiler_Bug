{"sha": "3191d27f48d1434877303357ab1ae5b5128d0f6a", "node_id": "C_kwDOAAsO6NoAKDMxOTFkMjdmNDhkMTQzNDg3NzMwMzM1N2FiMWFlNWI1MTI4ZDBmNmE", "commit": {"author": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2022-04-07T11:13:41Z"}, "committer": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2022-04-07T11:13:41Z"}, "message": "Kickstart the inner usage of macro_metavar_expr", "tree": {"sha": "62e5b8f7b66b4a1c73c62bf43caa8bb44347e14c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62e5b8f7b66b4a1c73c62bf43caa8bb44347e14c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3191d27f48d1434877303357ab1ae5b5128d0f6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3191d27f48d1434877303357ab1ae5b5128d0f6a", "html_url": "https://github.com/rust-lang/rust/commit/3191d27f48d1434877303357ab1ae5b5128d0f6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3191d27f48d1434877303357ab1ae5b5128d0f6a/comments", "author": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "committer": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f565016eddc3cb812e647d54b06cfe74bdee2900", "url": "https://api.github.com/repos/rust-lang/rust/commits/f565016eddc3cb812e647d54b06cfe74bdee2900", "html_url": "https://github.com/rust-lang/rust/commit/f565016eddc3cb812e647d54b06cfe74bdee2900"}], "stats": {"total": 148, "additions": 28, "deletions": 120}, "files": [{"sha": "9b224a733568bc0d544c4118c7103bc7093b7fe3", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3191d27f48d1434877303357ab1ae5b5128d0f6a/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3191d27f48d1434877303357ab1ae5b5128d0f6a/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=3191d27f48d1434877303357ab1ae5b5128d0f6a", "patch": "@@ -83,9 +83,7 @@ macro_rules! ast_fragments {\n                 }\n                 match self {\n                     $($(AstFragment::$Kind(ast) => ast.extend(placeholders.iter().flat_map(|id| {\n-                        // We are repeating through arguments with `many`, to do that we have to\n-                        // mention some macro variable from those arguments even if it's not used.\n-                        macro _repeating($flat_map_ast_elt) {}\n+                        ${ignore(flat_map_ast_elt)}\n                         placeholder(AstFragmentKind::$Kind, *id, None).$make_ast()\n                     })),)?)*\n                     _ => panic!(\"unexpected AST fragment kind\")"}, {"sha": "21078f79f634a950ddb6e3765b800270dfc6d082", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3191d27f48d1434877303357ab1ae5b5128d0f6a/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3191d27f48d1434877303357ab1ae5b5128d0f6a/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=3191d27f48d1434877303357ab1ae5b5128d0f6a", "patch": "@@ -1,16 +1,17 @@\n+#![allow(rustc::potential_query_instability)]\n #![feature(associated_type_bounds)]\n #![feature(associated_type_defaults)]\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n #![feature(if_let_guard)]\n #![feature(let_chains)]\n #![feature(let_else)]\n+#![feature(macro_metavar_expr)]\n #![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_span)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n-#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "6546a5244fd03cb4818c1866d51132d34043099b", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3191d27f48d1434877303357ab1ae5b5128d0f6a/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3191d27f48d1434877303357ab1ae5b5128d0f6a/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=3191d27f48d1434877303357ab1ae5b5128d0f6a", "patch": "@@ -181,6 +181,7 @@\n #![feature(intrinsics)]\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]\n+#![feature(macro_metavar_expr)]\n #![feature(min_specialization)]\n #![feature(mixed_integer_ops)]\n #![feature(must_not_suspend)]"}, {"sha": "fdf58c50e4863e336da9a038fbe3fe0e65192930", "filename": "library/core/src/tuple.rs", "status": "modified", "additions": 24, "deletions": 116, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/3191d27f48d1434877303357ab1ae5b5128d0f6a/library%2Fcore%2Fsrc%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3191d27f48d1434877303357ab1ae5b5128d0f6a/library%2Fcore%2Fsrc%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftuple.rs?ref=3191d27f48d1434877303357ab1ae5b5128d0f6a", "patch": "@@ -5,21 +5,17 @@ use crate::cmp::*;\n \n // macro for implementing n-ary tuple functions and operations\n macro_rules! tuple_impls {\n-    ($(\n-        $Tuple:ident {\n-            $(($idx:tt) -> $T:ident)+\n-        }\n-    )+) => {\n+    ( $( $Tuple:ident( $( $T:ident )+ ) )+ ) => {\n         $(\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl<$($T:PartialEq),+> PartialEq for ($($T,)+) where last_type!($($T,)+): ?Sized {\n                 #[inline]\n                 fn eq(&self, other: &($($T,)+)) -> bool {\n-                    $(self.$idx == other.$idx)&&+\n+                    $( ${ignore(T)} self.${index()} == other.${index()} )&&+\n                 }\n                 #[inline]\n                 fn ne(&self, other: &($($T,)+)) -> bool {\n-                    $(self.$idx != other.$idx)||+\n+                    $( ${ignore(T)} self.${index()} != other.${index()} )||+\n                 }\n             }\n \n@@ -28,34 +24,36 @@ macro_rules! tuple_impls {\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl<$($T:PartialOrd + PartialEq),+> PartialOrd for ($($T,)+)\n-                    where last_type!($($T,)+): ?Sized {\n+            where\n+                last_type!($($T,)+): ?Sized\n+            {\n                 #[inline]\n                 fn partial_cmp(&self, other: &($($T,)+)) -> Option<Ordering> {\n-                    lexical_partial_cmp!($(self.$idx, other.$idx),+)\n+                    lexical_partial_cmp!($( ${ignore(T)} self.${index()}, other.${index()} ),+)\n                 }\n                 #[inline]\n                 fn lt(&self, other: &($($T,)+)) -> bool {\n-                    lexical_ord!(lt, $(self.$idx, other.$idx),+)\n+                    lexical_ord!(lt, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n                 }\n                 #[inline]\n                 fn le(&self, other: &($($T,)+)) -> bool {\n-                    lexical_ord!(le, $(self.$idx, other.$idx),+)\n+                    lexical_ord!(le, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n                 }\n                 #[inline]\n                 fn ge(&self, other: &($($T,)+)) -> bool {\n-                    lexical_ord!(ge, $(self.$idx, other.$idx),+)\n+                    lexical_ord!(ge, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n                 }\n                 #[inline]\n                 fn gt(&self, other: &($($T,)+)) -> bool {\n-                    lexical_ord!(gt, $(self.$idx, other.$idx),+)\n+                    lexical_ord!(gt, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n                 }\n             }\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl<$($T:Ord),+> Ord for ($($T,)+) where last_type!($($T,)+): ?Sized {\n                 #[inline]\n                 fn cmp(&self, other: &($($T,)+)) -> Ordering {\n-                    lexical_cmp!($(self.$idx, other.$idx),+)\n+                    lexical_cmp!($( ${ignore(T)} self.${index()}, other.${index()} ),+)\n                 }\n             }\n \n@@ -108,106 +106,16 @@ macro_rules! last_type {\n }\n \n tuple_impls! {\n-    Tuple1 {\n-        (0) -> A\n-    }\n-    Tuple2 {\n-        (0) -> A\n-        (1) -> B\n-    }\n-    Tuple3 {\n-        (0) -> A\n-        (1) -> B\n-        (2) -> C\n-    }\n-    Tuple4 {\n-        (0) -> A\n-        (1) -> B\n-        (2) -> C\n-        (3) -> D\n-    }\n-    Tuple5 {\n-        (0) -> A\n-        (1) -> B\n-        (2) -> C\n-        (3) -> D\n-        (4) -> E\n-    }\n-    Tuple6 {\n-        (0) -> A\n-        (1) -> B\n-        (2) -> C\n-        (3) -> D\n-        (4) -> E\n-        (5) -> F\n-    }\n-    Tuple7 {\n-        (0) -> A\n-        (1) -> B\n-        (2) -> C\n-        (3) -> D\n-        (4) -> E\n-        (5) -> F\n-        (6) -> G\n-    }\n-    Tuple8 {\n-        (0) -> A\n-        (1) -> B\n-        (2) -> C\n-        (3) -> D\n-        (4) -> E\n-        (5) -> F\n-        (6) -> G\n-        (7) -> H\n-    }\n-    Tuple9 {\n-        (0) -> A\n-        (1) -> B\n-        (2) -> C\n-        (3) -> D\n-        (4) -> E\n-        (5) -> F\n-        (6) -> G\n-        (7) -> H\n-        (8) -> I\n-    }\n-    Tuple10 {\n-        (0) -> A\n-        (1) -> B\n-        (2) -> C\n-        (3) -> D\n-        (4) -> E\n-        (5) -> F\n-        (6) -> G\n-        (7) -> H\n-        (8) -> I\n-        (9) -> J\n-    }\n-    Tuple11 {\n-        (0) -> A\n-        (1) -> B\n-        (2) -> C\n-        (3) -> D\n-        (4) -> E\n-        (5) -> F\n-        (6) -> G\n-        (7) -> H\n-        (8) -> I\n-        (9) -> J\n-        (10) -> K\n-    }\n-    Tuple12 {\n-        (0) -> A\n-        (1) -> B\n-        (2) -> C\n-        (3) -> D\n-        (4) -> E\n-        (5) -> F\n-        (6) -> G\n-        (7) -> H\n-        (8) -> I\n-        (9) -> J\n-        (10) -> K\n-        (11) -> L\n-    }\n+    Tuple1(A)\n+    Tuple2(A B)\n+    Tuple3(A B C)\n+    Tuple4(A B C D)\n+    Tuple5(A B C D E)\n+    Tuple6(A B C D E F)\n+    Tuple7(A B C D E F G)\n+    Tuple8(A B C D E F G H)\n+    Tuple9(A B C D E F G H I)\n+    Tuple10(A B C D E F G H I J)\n+    Tuple11(A B C D E F G H I J K)\n+    Tuple12(A B C D E F G H I J K L)\n }"}]}