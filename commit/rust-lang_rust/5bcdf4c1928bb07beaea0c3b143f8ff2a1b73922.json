{"sha": "5bcdf4c1928bb07beaea0c3b143f8ff2a1b73922", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViY2RmNGMxOTI4YmIwN2JlYWVhMGMzYjE0M2Y4ZmYyYTFiNzM5MjI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-04-22T19:47:14Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-18T14:11:35Z"}, "message": "add a MetaData node and trigger reads from it\n\nConflicts:\n\tsrc/librustc_metadata/csearch.rs", "tree": {"sha": "4e4ade1e17b23bf469a166ffda245de5f92ffe38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e4ade1e17b23bf469a166ffda245de5f92ffe38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bcdf4c1928bb07beaea0c3b143f8ff2a1b73922", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bcdf4c1928bb07beaea0c3b143f8ff2a1b73922", "html_url": "https://github.com/rust-lang/rust/commit/5bcdf4c1928bb07beaea0c3b143f8ff2a1b73922", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bcdf4c1928bb07beaea0c3b143f8ff2a1b73922/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7734308f895eb415c92365fab883ecbb5419fb27", "url": "https://api.github.com/repos/rust-lang/rust/commits/7734308f895eb415c92365fab883ecbb5419fb27", "html_url": "https://github.com/rust-lang/rust/commit/7734308f895eb415c92365fab883ecbb5419fb27"}], "stats": {"total": 64, "additions": 56, "deletions": 8}, "files": [{"sha": "f2c9d0b122016a0155baff4415e6d5885f58f62e", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5bcdf4c1928bb07beaea0c3b143f8ff2a1b73922/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bcdf4c1928bb07beaea0c3b143f8ff2a1b73922/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=5bcdf4c1928bb07beaea0c3b143f8ff2a1b73922", "patch": "@@ -32,6 +32,10 @@ pub enum DepNode<D: Clone + Debug> {\n     // Represents the HIR node with the given node-id\n     Hir(D),\n \n+    // Represents the metadata for a given HIR node, typically found\n+    // in an extern crate.\n+    MetaData(D),\n+\n     // Represents different phases in the compiler.\n     CrateReader,\n     CollectLanguageItems,\n@@ -175,6 +179,7 @@ impl<D: Clone + Debug> DepNode<D> {\n             TransCrate => Some(TransCrate),\n             TransWriteMetadata => Some(TransWriteMetadata),\n             Hir(ref d) => op(d).map(Hir),\n+            MetaData(ref d) => op(d).map(MetaData),\n             CollectItem(ref d) => op(d).map(CollectItem),\n             CoherenceCheckImpl(ref d) => op(d).map(CoherenceCheckImpl),\n             CoherenceOverlapCheck(ref d) => op(d).map(CoherenceOverlapCheck),"}, {"sha": "ac094676ae8a892bea9a6779fa7ecd5bd1dd6be0", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 49, "deletions": 6, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/5bcdf4c1928bb07beaea0c3b143f8ff2a1b73922/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bcdf4c1928bb07beaea0c3b143f8ff2a1b73922/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=5bcdf4c1928bb07beaea0c3b143f8ff2a1b73922", "patch": "@@ -20,6 +20,7 @@ use middle::lang_items;\n use rustc::ty::{self, Ty, TyCtxt, VariantKind};\n use rustc::hir::def_id::{DefId, DefIndex, CRATE_DEF_INDEX};\n \n+use rustc::dep_graph::DepNode;\n use rustc::hir::map as hir_map;\n use rustc::mir::repr::Mir;\n use rustc::mir::mir_map::MirMap;\n@@ -37,106 +38,120 @@ use rustc_back::target::Target;\n use rustc::hir;\n \n impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n-    fn stability(&self, def: DefId) -> Option<attr::Stability>\n-    {\n+    fn stability(&self, def: DefId) -> Option<attr::Stability> {\n+        self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n         decoder::get_stability(&cdata, def.index)\n     }\n \n-    fn deprecation(&self, def: DefId) -> Option<attr::Deprecation>\n-    {\n+    fn deprecation(&self, def: DefId) -> Option<attr::Deprecation> {\n+        self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n         decoder::get_deprecation(&cdata, def.index)\n     }\n \n     fn visibility(&self, def: DefId) -> ty::Visibility {\n+        self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n         decoder::get_visibility(&cdata, def.index)\n     }\n \n     fn closure_kind(&self, def_id: DefId) -> ty::ClosureKind\n     {\n         assert!(!def_id.is_local());\n+        self.dep_graph.read(DepNode::MetaData(def_id));\n         let cdata = self.get_crate_data(def_id.krate);\n         decoder::closure_kind(&cdata, def_id.index)\n     }\n \n-    fn closure_ty<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> ty::ClosureTy<'tcx>\n-    {\n+    fn closure_ty(&self, tcx: &TyCtxt<'tcx>, def_id: DefId) -> ty::ClosureTy<'tcx> {\n         assert!(!def_id.is_local());\n+        self.dep_graph.read(DepNode::MetaData(def_id));\n         let cdata = self.get_crate_data(def_id.krate);\n         decoder::closure_ty(&cdata, def_id.index, tcx)\n     }\n \n     fn item_variances(&self, def: DefId) -> ty::ItemVariances {\n+        self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n         decoder::get_item_variances(&cdata, def.index)\n     }\n \n     fn repr_attrs(&self, def: DefId) -> Vec<attr::ReprAttr> {\n+        self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n         decoder::get_repr_attrs(&cdata, def.index)\n     }\n \n     fn item_type<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n                      -> ty::TypeScheme<'tcx>\n     {\n+        self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n         decoder::get_type(&cdata, def.index, tcx)\n     }\n \n     fn item_predicates<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n                            -> ty::GenericPredicates<'tcx>\n     {\n+        self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n         decoder::get_predicates(&cdata, def.index, tcx)\n     }\n \n     fn item_super_predicates<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n                                  -> ty::GenericPredicates<'tcx>\n     {\n+        self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n         decoder::get_super_predicates(&cdata, def.index, tcx)\n     }\n \n     fn item_attrs(&self, def_id: DefId) -> Vec<ast::Attribute>\n     {\n+        self.dep_graph.read(DepNode::MetaData(def_id));\n         let cdata = self.get_crate_data(def_id.krate);\n         decoder::get_item_attrs(&cdata, def_id.index)\n     }\n \n     fn item_symbol(&self, def: DefId) -> String\n     {\n+        self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n         decoder::get_symbol(&cdata, def.index)\n     }\n \n     fn trait_def<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId) -> ty::TraitDef<'tcx>\n     {\n+        self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n         decoder::get_trait_def(&cdata, def.index, tcx)\n     }\n \n     fn adt_def<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId) -> ty::AdtDefMaster<'tcx>\n     {\n+        self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n         decoder::get_adt_def(&self.intr, &cdata, def.index, tcx)\n     }\n \n     fn method_arg_names(&self, did: DefId) -> Vec<String>\n     {\n+        self.dep_graph.read(DepNode::MetaData(did));\n         let cdata = self.get_crate_data(did.krate);\n         decoder::get_method_arg_names(&cdata, did.index)\n     }\n \n     fn item_name(&self, def: DefId) -> ast::Name {\n+        self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n         decoder::get_item_name(&self.intr, &cdata, def.index)\n     }\n \n \n     fn inherent_implementations_for_type(&self, def_id: DefId) -> Vec<DefId>\n     {\n+        self.dep_graph.read(DepNode::MetaData(def_id));\n         let mut result = vec![];\n         let cdata = self.get_crate_data(def_id.krate);\n         decoder::each_inherent_implementation_for_type(&cdata, def_id.index,\n@@ -146,6 +161,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n \n     fn implementations_of_trait(&self, def_id: DefId) -> Vec<DefId>\n     {\n+        self.dep_graph.read(DepNode::MetaData(def_id));\n         let mut result = vec![];\n         self.iter_crate_data(|_, cdata| {\n             decoder::each_implementation_for_trait(cdata, def_id, &mut |iid| {\n@@ -158,64 +174,74 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n     fn provided_trait_methods<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n                                   -> Vec<Rc<ty::Method<'tcx>>>\n     {\n+        self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n         decoder::get_provided_trait_methods(self.intr.clone(), &cdata, def.index, tcx)\n     }\n \n     fn trait_item_def_ids(&self, def: DefId)\n                           -> Vec<ty::ImplOrTraitItemId>\n     {\n+        self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n         decoder::get_trait_item_def_ids(&cdata, def.index)\n     }\n \n     fn impl_items(&self, impl_def_id: DefId) -> Vec<ty::ImplOrTraitItemId>\n     {\n+        self.dep_graph.read(DepNode::MetaData(impl_def_id));\n         let cdata = self.get_crate_data(impl_def_id.krate);\n         decoder::get_impl_items(&cdata, impl_def_id.index)\n     }\n \n     fn impl_polarity(&self, def: DefId) -> Option<hir::ImplPolarity>\n     {\n+        self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n         decoder::get_impl_polarity(&cdata, def.index)\n     }\n \n     fn impl_trait_ref<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n                           -> Option<ty::TraitRef<'tcx>>\n     {\n+        self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n         decoder::get_impl_trait(&cdata, def.index, tcx)\n     }\n \n     fn custom_coerce_unsized_kind(&self, def: DefId)\n                                   -> Option<ty::adjustment::CustomCoerceUnsized>\n     {\n+        self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n         decoder::get_custom_coerce_unsized_kind(&cdata, def.index)\n     }\n \n     // FIXME: killme\n     fn associated_consts<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n                              -> Vec<Rc<ty::AssociatedConst<'tcx>>> {\n+        self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n         decoder::get_associated_consts(self.intr.clone(), &cdata, def.index, tcx)\n     }\n \n     fn impl_parent(&self, impl_def: DefId) -> Option<DefId> {\n+        self.dep_graph.read(DepNode::MetaData(impl_def));\n         let cdata = self.get_crate_data(impl_def.krate);\n         decoder::get_parent_impl(&*cdata, impl_def.index)\n     }\n \n     fn trait_of_item<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Option<DefId>\n     {\n+        self.dep_graph.read(DepNode::MetaData(def_id));\n         let cdata = self.get_crate_data(def_id.krate);\n         decoder::get_trait_of_item(&cdata, def_id.index, tcx)\n     }\n \n     fn impl_or_trait_item<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n                               -> Option<ty::ImplOrTraitItem<'tcx>>\n     {\n+        self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n         decoder::get_impl_or_trait_item(\n             self.intr.clone(),\n@@ -226,34 +252,40 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n \n     fn is_const_fn(&self, did: DefId) -> bool\n     {\n+        self.dep_graph.read(DepNode::MetaData(did));\n         let cdata = self.get_crate_data(did.krate);\n         decoder::is_const_fn(&cdata, did.index)\n     }\n \n     fn is_defaulted_trait(&self, trait_def_id: DefId) -> bool\n     {\n+        self.dep_graph.read(DepNode::MetaData(trait_def_id));\n         let cdata = self.get_crate_data(trait_def_id.krate);\n         decoder::is_defaulted_trait(&cdata, trait_def_id.index)\n     }\n \n     fn is_impl(&self, did: DefId) -> bool\n     {\n+        self.dep_graph.read(DepNode::MetaData(did));\n         let cdata = self.get_crate_data(did.krate);\n         decoder::is_impl(&cdata, did.index)\n     }\n \n     fn is_default_impl(&self, impl_did: DefId) -> bool {\n+        self.dep_graph.read(DepNode::MetaData(impl_did));\n         let cdata = self.get_crate_data(impl_did.krate);\n         decoder::is_default_impl(&cdata, impl_did.index)\n     }\n \n     fn is_extern_item<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, did: DefId) -> bool {\n+        self.dep_graph.read(DepNode::MetaData(did));\n         let cdata = self.get_crate_data(did.krate);\n         decoder::is_extern_item(&cdata, did.index, tcx)\n     }\n \n     fn is_static_method(&self, def: DefId) -> bool\n     {\n+        self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n         decoder::is_static_method(&cdata, def.index)\n     }\n@@ -264,6 +296,7 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n     }\n \n     fn is_typedef(&self, did: DefId) -> bool {\n+        self.dep_graph.read(DepNode::MetaData(did));\n         let cdata = self.get_crate_data(did.krate);\n         decoder::is_typedef(&cdata, did.index)\n     }\n@@ -379,40 +412,47 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n     /// parent `DefId` as well as some idea of what kind of data the\n     /// `DefId` refers to.\n     fn def_key(&self, def: DefId) -> hir_map::DefKey {\n+        self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n         decoder::def_key(&cdata, def.index)\n     }\n \n     fn relative_def_path(&self, def: DefId) -> hir_map::DefPath {\n+        self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n         decoder::def_path(&cdata, def.index)\n     }\n \n     fn variant_kind(&self, def_id: DefId) -> Option<VariantKind> {\n+        self.dep_graph.read(DepNode::MetaData(def_id));\n         let cdata = self.get_crate_data(def_id.krate);\n         decoder::get_variant_kind(&cdata, def_id.index)\n     }\n \n     fn struct_ctor_def_id(&self, struct_def_id: DefId) -> Option<DefId>\n     {\n+        self.dep_graph.read(DepNode::MetaData(struct_def_id));\n         let cdata = self.get_crate_data(struct_def_id.krate);\n         decoder::get_struct_ctor_def_id(&cdata, struct_def_id.index)\n     }\n \n     fn tuple_struct_definition_if_ctor(&self, did: DefId) -> Option<DefId>\n     {\n+        self.dep_graph.read(DepNode::MetaData(did));\n         let cdata = self.get_crate_data(did.krate);\n         decoder::get_tuple_struct_definition_if_ctor(&cdata, did.index)\n     }\n \n     fn struct_field_names(&self, def: DefId) -> Vec<ast::Name>\n     {\n+        self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n         decoder::get_struct_field_names(&self.intr, &cdata, def.index)\n     }\n \n     fn item_children(&self, def_id: DefId) -> Vec<ChildItem>\n     {\n+        self.dep_graph.read(DepNode::MetaData(def_id));\n         let mut result = vec![];\n         let crate_data = self.get_crate_data(def_id.krate);\n         let get_crate_data = |cnum| self.get_crate_data(cnum);\n@@ -445,17 +485,20 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n     fn maybe_get_item_ast<'a>(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n                               -> FoundAst<'tcx>\n     {\n+        self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n         decoder::maybe_get_item_ast(&cdata, tcx, def.index)\n     }\n \n     fn maybe_get_item_mir<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n                               -> Option<Mir<'tcx>> {\n+        self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n         decoder::maybe_get_item_mir(&cdata, tcx, def.index)\n     }\n \n     fn is_item_mir_available(&self, def: DefId) -> bool {\n+        self.dep_graph.read(DepNode::MetaData(def));\n         let cdata = self.get_crate_data(def.krate);\n         decoder::is_item_mir_available(&cdata, def.index)\n     }"}, {"sha": "d3c4c5b02920ab4907c37b2415d76b0ec9e599de", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bcdf4c1928bb07beaea0c3b143f8ff2a1b73922/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bcdf4c1928bb07beaea0c3b143f8ff2a1b73922/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=5bcdf4c1928bb07beaea0c3b143f8ff2a1b73922", "patch": "@@ -87,7 +87,7 @@ pub struct crate_metadata {\n }\n \n pub struct CStore {\n-    _dep_graph: DepGraph,\n+    pub dep_graph: DepGraph,\n     metas: RefCell<FnvHashMap<ast::CrateNum, Rc<crate_metadata>>>,\n     /// Map from NodeId's of local extern crate statements to crate numbers\n     extern_mod_crate_map: RefCell<NodeMap<ast::CrateNum>>,\n@@ -103,7 +103,7 @@ impl CStore {\n     pub fn new(dep_graph: &DepGraph,\n                intr: Rc<IdentInterner>) -> CStore {\n         CStore {\n-            _dep_graph: dep_graph.clone(),\n+            dep_graph: dep_graph.clone(),\n             metas: RefCell::new(FnvHashMap()),\n             extern_mod_crate_map: RefCell::new(FnvHashMap()),\n             used_crate_sources: RefCell::new(Vec::new()),"}]}