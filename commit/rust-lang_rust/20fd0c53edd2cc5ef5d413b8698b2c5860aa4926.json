{"sha": "20fd0c53edd2cc5ef5d413b8698b2c5860aa4926", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwZmQwYzUzZWRkMmNjNWVmNWQ0MTNiODY5OGIyYzU4NjBhYTQ5MjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-15T02:27:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-15T02:27:54Z"}, "message": "auto merge of #4938 : thestinger/rust/no_zero, r=brson\n\nI removed the unused wrappers methods named `calloc` because they relied on the malloc wrapper having a `bool zero = true` default parameter (which resulted in some accidental zeroing). Perhaps wrapping the actual calloc function would be useful, but I don't know of an existing use case that could use it so I just removed these.\r\n\r\nThis gives an ~1% performance improvement for TreeMap, which does a lot of small allocations. Vectors use `realloc` which didn't zero before these changes so there's no measurable change in performance.", "tree": {"sha": "6b3d2071563a7d64e8bd2bb24bc988f480cd8f08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b3d2071563a7d64e8bd2bb24bc988f480cd8f08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20fd0c53edd2cc5ef5d413b8698b2c5860aa4926", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20fd0c53edd2cc5ef5d413b8698b2c5860aa4926", "html_url": "https://github.com/rust-lang/rust/commit/20fd0c53edd2cc5ef5d413b8698b2c5860aa4926", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20fd0c53edd2cc5ef5d413b8698b2c5860aa4926/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af2f0ef0888d05209bddd16ab210ae0e8400b7de", "url": "https://api.github.com/repos/rust-lang/rust/commits/af2f0ef0888d05209bddd16ab210ae0e8400b7de", "html_url": "https://github.com/rust-lang/rust/commit/af2f0ef0888d05209bddd16ab210ae0e8400b7de"}, {"sha": "1a41b484bf05514f469e69efd56fcd7039d34db9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a41b484bf05514f469e69efd56fcd7039d34db9", "html_url": "https://github.com/rust-lang/rust/commit/1a41b484bf05514f469e69efd56fcd7039d34db9"}], "stats": {"total": 56, "additions": 12, "deletions": 44}, "files": [{"sha": "f7fcf3bdd5ebc7fa3c76aafc4934026505b2b6cd", "filename": "src/libcore/private/exchange_alloc.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20fd0c53edd2cc5ef5d413b8698b2c5860aa4926/src%2Flibcore%2Fprivate%2Fexchange_alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fd0c53edd2cc5ef5d413b8698b2c5860aa4926/src%2Flibcore%2Fprivate%2Fexchange_alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate%2Fexchange_alloc.rs?ref=20fd0c53edd2cc5ef5d413b8698b2c5860aa4926", "patch": "@@ -14,7 +14,7 @@ use c_malloc = libc::malloc;\n use c_free = libc::free;\n use managed::raw::{BoxHeaderRepr, BoxRepr};\n use cast::transmute;\n-use ptr::{set_memory, null};\n+use ptr::null;\n use intrinsic::TyDesc;\n \n pub unsafe fn malloc(td: *TypeDesc, size: uint) -> *c_void {\n@@ -25,10 +25,6 @@ pub unsafe fn malloc(td: *TypeDesc, size: uint) -> *c_void {\n         let p = c_malloc(total_size as size_t);\n         assert p.is_not_null();\n \n-        // FIXME #4761: Would be very nice to not memset all allocations\n-        let p: *mut u8 = transmute(p);\n-        set_memory(p, 0, total_size);\n-\n         // FIXME #3475: Converting between our two different tydesc types\n         let td: *TyDesc = transmute(td);\n "}, {"sha": "f99b2a62f4750ce671ba515499d5f29cf204c252", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20fd0c53edd2cc5ef5d413b8698b2c5860aa4926/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20fd0c53edd2cc5ef5d413b8698b2c5860aa4926/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=20fd0c53edd2cc5ef5d413b8698b2c5860aa4926", "patch": "@@ -1253,7 +1253,7 @@ pub mod test {\n                       as *request_wrapper;\n                 let buf_base = get_base_from_buf(buf);\n                 let buf_len = get_len_from_buf(buf);\n-                let bytes = vec::from_buf(buf_base, buf_len as uint);\n+                let bytes = vec::from_buf(buf_base, nread as uint);\n                 let read_chan = (*client_data).read_chan.clone();\n                 let msg_from_server = str::from_bytes(bytes);\n                 read_chan.send(msg_from_server);\n@@ -1445,15 +1445,15 @@ pub mod test {\n                                 buf_base as uint,\n                                 buf_len as uint,\n                                 nread));\n-                let bytes = vec::from_buf(buf_base, buf_len);\n+                let bytes = vec::from_buf(buf_base, nread as uint);\n                 let request_str = str::from_bytes(bytes);\n \n                 let client_data = get_data_for_uv_handle(\n                     client_stream_ptr as *libc::c_void) as *tcp_server_data;\n \n                 let server_kill_msg = (*client_data).server_kill_msg;\n                 let write_req = (*client_data).server_write_req;\n-                if (str::contains(request_str, server_kill_msg)) {\n+                if str::contains(request_str, server_kill_msg) {\n                     log(debug, ~\"SERVER: client req contains kill_msg!\");\n                     log(debug, ~\"SERVER: sending response to client\");\n                     read_stop(client_stream_ptr);"}, {"sha": "6de9d5a1df4a27a71ec375a6481c21b17247eb8e", "filename": "src/rt/memory_region.cpp", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/20fd0c53edd2cc5ef5d413b8698b2c5860aa4926/src%2Frt%2Fmemory_region.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/20fd0c53edd2cc5ef5d413b8698b2c5860aa4926/src%2Frt%2Fmemory_region.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory_region.cpp?ref=20fd0c53edd2cc5ef5d413b8698b2c5860aa4926", "patch": "@@ -121,8 +121,10 @@ memory_region::realloc(void *mem, size_t orig_size) {\n }\n \n void *\n-memory_region::malloc(size_t size, const char *tag, bool zero) {\n+memory_region::malloc(size_t size, const char *tag) {\n+#   if RUSTRT_TRACK_ALLOCATIONS >= 1\n     size_t old_size = size;\n+#   endif\n     size += HEADER_SIZE;\n     alloc_header *mem = (alloc_header *)::malloc(size);\n     if (mem == NULL) {\n@@ -143,18 +145,9 @@ memory_region::malloc(size_t size, const char *tag, bool zero) {\n     void *data = get_data(mem);\n     claim_alloc(data);\n \n-    if(zero) {\n-        memset(data, 0, old_size);\n-    }\n-\n     return data;\n }\n \n-void *\n-memory_region::calloc(size_t size, const char *tag) {\n-    return malloc(size, tag, true);\n-}\n-\n memory_region::~memory_region() {\n     if (_synchronized) { _lock.lock(); }\n     if (_live_allocations == 0 && !_detailed_leaks) {"}, {"sha": "999a992eefaea8a593eed515348f08cd59c69c24", "filename": "src/rt/memory_region.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/20fd0c53edd2cc5ef5d413b8698b2c5860aa4926/src%2Frt%2Fmemory_region.h", "raw_url": "https://github.com/rust-lang/rust/raw/20fd0c53edd2cc5ef5d413b8698b2c5860aa4926/src%2Frt%2Fmemory_region.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemory_region.h?ref=20fd0c53edd2cc5ef5d413b8698b2c5860aa4926", "patch": "@@ -77,8 +77,7 @@ class memory_region {\n public:\n     memory_region(rust_env *env, bool synchronized);\n     memory_region(memory_region *parent);\n-    void *malloc(size_t size, const char *tag, bool zero = true);\n-    void *calloc(size_t size, const char *tag);\n+    void *malloc(size_t size, const char *tag);\n     void *realloc(void *mem, size_t size);\n     void free(void *mem);\n     ~memory_region();"}, {"sha": "a92bc4edd411a01a7d7b4c7ec253e420e805ec3a", "filename": "src/rt/rust_exchange_alloc.cpp", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/20fd0c53edd2cc5ef5d413b8698b2c5860aa4926/src%2Frt%2Frust_exchange_alloc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/20fd0c53edd2cc5ef5d413b8698b2c5860aa4926/src%2Frt%2Frust_exchange_alloc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_exchange_alloc.cpp?ref=20fd0c53edd2cc5ef5d413b8698b2c5860aa4926", "patch": "@@ -18,23 +18,15 @@\n uintptr_t exchange_count = 0;\n \n void *\n-rust_exchange_alloc::malloc(size_t size, bool zero) {\n+rust_exchange_alloc::malloc(size_t size) {\n   void *value = ::malloc(size);\n   assert(value);\n-  if (zero) {\n-    memset(value, 0, size);\n-  }\n \n   sync::increment(exchange_count);\n \n   return value;\n }\n \n-void *\n-rust_exchange_alloc::calloc(size_t size) {\n-  return this->malloc(size);\n-}\n-\n void *\n rust_exchange_alloc::realloc(void *ptr, size_t size) {\n   void *new_ptr = ::realloc(ptr, size);"}, {"sha": "767caf0132345c41cc373bc3d31ac9030fa2227e", "filename": "src/rt/rust_exchange_alloc.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/20fd0c53edd2cc5ef5d413b8698b2c5860aa4926/src%2Frt%2Frust_exchange_alloc.h", "raw_url": "https://github.com/rust-lang/rust/raw/20fd0c53edd2cc5ef5d413b8698b2c5860aa4926/src%2Frt%2Frust_exchange_alloc.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_exchange_alloc.h?ref=20fd0c53edd2cc5ef5d413b8698b2c5860aa4926", "patch": "@@ -16,8 +16,7 @@\n \n class rust_exchange_alloc {\n  public:\n-    void *malloc(size_t size, bool zero = true);\n-    void *calloc(size_t size);\n+    void *malloc(size_t size);\n     void *realloc(void *mem, size_t size);\n     void free(void *mem);\n };"}, {"sha": "4d2d6ad344cc935cddc881ea25635095dce7181a", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/20fd0c53edd2cc5ef5d413b8698b2c5860aa4926/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/20fd0c53edd2cc5ef5d413b8698b2c5860aa4926/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=20fd0c53edd2cc5ef5d413b8698b2c5860aa4926", "patch": "@@ -79,11 +79,6 @@ rust_kernel::malloc(size_t size, const char *tag) {\n     return exchange_alloc.malloc(size);\n }\n \n-void *\n-rust_kernel::calloc(size_t size, const char *tag) {\n-    return exchange_alloc.calloc(size);\n-}\n-\n void *\n rust_kernel::realloc(void *mem, size_t size) {\n     return exchange_alloc.realloc(mem, size);"}, {"sha": "e65a0bd9289f324294628688c44d66a1665682a6", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/20fd0c53edd2cc5ef5d413b8698b2c5860aa4926/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/20fd0c53edd2cc5ef5d413b8698b2c5860aa4926/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=20fd0c53edd2cc5ef5d413b8698b2c5860aa4926", "patch": "@@ -133,7 +133,6 @@ class rust_kernel {\n     void fatal(char const *fmt, ...);\n \n     void *malloc(size_t size, const char *tag);\n-    void *calloc(size_t size, const char *tag);\n     void *realloc(void *mem, size_t size);\n     void free(void *mem);\n     rust_exchange_alloc *region() { return &exchange_alloc; }"}, {"sha": "64ca256ff4611d9da315f44325f0ad4936ee7085", "filename": "src/rt/rust_stack.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20fd0c53edd2cc5ef5d413b8698b2c5860aa4926/src%2Frt%2Frust_stack.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/20fd0c53edd2cc5ef5d413b8698b2c5860aa4926/src%2Frt%2Frust_stack.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_stack.cpp?ref=20fd0c53edd2cc5ef5d413b8698b2c5860aa4926", "patch": "@@ -58,7 +58,7 @@ check_stack_canary(stk_seg *stk) {\n stk_seg *\n create_stack(memory_region *region, size_t sz) {\n     size_t total_sz = sizeof(stk_seg) + sz;\n-    stk_seg *stk = (stk_seg *)region->malloc(total_sz, \"stack\", false);\n+    stk_seg *stk = (stk_seg *)region->malloc(total_sz, \"stack\");\n     memset(stk, 0, sizeof(stk_seg));\n     stk->end = (uintptr_t) &stk->data[sz];\n     add_stack_canary(stk);\n@@ -75,7 +75,7 @@ destroy_stack(memory_region *region, stk_seg *stk) {\n stk_seg *\n create_exchange_stack(rust_exchange_alloc *exchange, size_t sz) {\n     size_t total_sz = sizeof(stk_seg) + sz;\n-    stk_seg *stk = (stk_seg *)exchange->malloc(total_sz, false);\n+    stk_seg *stk = (stk_seg *)exchange->malloc(total_sz);\n     memset(stk, 0, sizeof(stk_seg));\n     stk->end = (uintptr_t) &stk->data[sz];\n     add_stack_canary(stk);"}, {"sha": "63dc1c9833e213cda61ee3fc3aee5cd4256ead2e", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/20fd0c53edd2cc5ef5d413b8698b2c5860aa4926/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/20fd0c53edd2cc5ef5d413b8698b2c5860aa4926/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=20fd0c53edd2cc5ef5d413b8698b2c5860aa4926", "patch": "@@ -450,11 +450,6 @@ rust_task::backtrace() {\n #endif\n }\n \n-void *\n-rust_task::calloc(size_t size, const char *tag) {\n-    return local_region.calloc(size, tag);\n-}\n-\n size_t\n rust_task::get_next_stack_size(size_t min, size_t current, size_t requested) {\n     LOG(this, mem, \"calculating new stack size for 0x%\" PRIxPTR, this);"}]}