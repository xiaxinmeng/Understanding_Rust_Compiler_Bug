{"sha": "35590b5cc8135b21e8cbb50d059febba5136d41b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NTkwYjVjYzgxMzViMjFlOGNiYjUwZDA1OWZlYmJhNTEzNmQ0MWI=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-10-28T02:45:02Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-12-02T13:37:23Z"}, "message": "Fix typos caused during rebase", "tree": {"sha": "ecb4da752e9be28cc19637d3238188f93153280a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecb4da752e9be28cc19637d3238188f93153280a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35590b5cc8135b21e8cbb50d059febba5136d41b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35590b5cc8135b21e8cbb50d059febba5136d41b", "html_url": "https://github.com/rust-lang/rust/commit/35590b5cc8135b21e8cbb50d059febba5136d41b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35590b5cc8135b21e8cbb50d059febba5136d41b/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4de31b26d1d4a1c20456fc9ca1d39d284c79f64c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c", "html_url": "https://github.com/rust-lang/rust/commit/4de31b26d1d4a1c20456fc9ca1d39d284c79f64c"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "d9686ac21929beeaee2d7212c0b46b63bc4cbdfa", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35590b5cc8135b21e8cbb50d059febba5136d41b/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35590b5cc8135b21e8cbb50d059febba5136d41b/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=35590b5cc8135b21e8cbb50d059febba5136d41b", "patch": "@@ -244,7 +244,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     );\n                 }\n                 let span = if let Some(local) = place.as_local() {\n-                    let decl = &self.body.local_decls[local];\n+                    let decl = &self.body_cache.local_decls[local];\n                     Some(decl.source_info.span)\n                 } else {\n                     None"}, {"sha": "426c019059645007a1037b2794104279be3bc8e0", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35590b5cc8135b21e8cbb50d059febba5136d41b/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35590b5cc8135b21e8cbb50d059febba5136d41b/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=35590b5cc8135b21e8cbb50d059febba5136d41b", "patch": "@@ -1152,7 +1152,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         // (e.g., `x = ...`) so long as it has never been initialized\n         // before (at this point in the flow).\n         if let Some(local) = place_span.0.as_local() {\n-            if let Mutability::Not = self.body+cache.local_decls[local].mutability {\n+            if let Mutability::Not = self.body_cache.local_decls[local].mutability {\n                 // check for reassignments to immutable local variables\n                 self.check_if_reassignment_to_immutable_state(\n                     location,\n@@ -1306,7 +1306,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             Operand::Move(ref place) | Operand::Copy(ref place) => {\n                 match place.as_local() {\n                     Some(local) if !self.body_cache.local_decls[local].is_user_variable() => {\n-                        if self.body.local_decls[local].ty.is_mutable_ptr() {\n+                        if self.body_cache.local_decls[local].ty.is_mutable_ptr() {\n                             // The variable will be marked as mutable by the borrow.\n                             return;\n                         }"}, {"sha": "ddd9ccbe64a5a66dcbe22fdc1688517797926c76", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35590b5cc8135b21e8cbb50d059febba5136d41b/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35590b5cc8135b21e8cbb50d059febba5136d41b/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=35590b5cc8135b21e8cbb50d059febba5136d41b", "patch": "@@ -8,7 +8,7 @@ use rustc::hir::def::DefKind;\n use rustc::hir::def_id::DefId;\n use rustc::mir::{\n     AggregateKind, Constant, Location, Place, PlaceBase, Body, BodyCache, Operand, Local, UnOp,\n-    Rvalue. StatementKind, Statement, LocalKind, TerminatorKind, Terminator,  ClearCrossCrate,\n+    Rvalue, StatementKind, Statement, LocalKind, TerminatorKind, Terminator,  ClearCrossCrate,\n     SourceInfo, BinOp, SourceScope, SourceScopeData, LocalDecl, BasicBlock, ReadOnlyBodyCache,\n     read_only, RETURN_PLACE\n };"}, {"sha": "4f290f487b9c7adcd4ce48708cdc20f0e41b72ad", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35590b5cc8135b21e8cbb50d059febba5136d41b/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35590b5cc8135b21e8cbb50d059febba5136d41b/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=35590b5cc8135b21e8cbb50d059febba5136d41b", "patch": "@@ -18,7 +18,7 @@ impl<'tcx> NoLandingPads<'tcx> {\n \n impl<'tcx> MirPass<'tcx> for NoLandingPads<'tcx> {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body_cache: &mut BodyCache<'tcx>) {\n-        no_landing_pads(tcx, body)\n+        no_landing_pads(tcx, body_cache)\n     }\n }\n "}, {"sha": "3b4b50c657be27cb26a92c63ef9b718b13e65ca5", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35590b5cc8135b21e8cbb50d059febba5136d41b/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35590b5cc8135b21e8cbb50d059febba5136d41b/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=35590b5cc8135b21e8cbb50d059febba5136d41b", "patch": "@@ -831,7 +831,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n             self.temps[temp] = TempState::PromotedOut;\n         }\n \n-        let num_stmts = self.source_cacje[loc.block].statements.len();\n+        let num_stmts = self.source_cache[loc.block].statements.len();\n         let new_temp = self.promoted_cache.local_decls.push(\n             LocalDecl::new_temp(self.source_cache.local_decls[temp].ty,\n                                 self.source_cache.local_decls[temp].source_info.span));"}]}