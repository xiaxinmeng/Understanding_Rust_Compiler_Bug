{"sha": "a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMzdmZjE3MDY5ZmViNjdhMmVmNWEwZjNkZGJlMDk3MDdjMmQ2Y2Q=", "commit": {"author": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2021-01-03T13:45:16Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2021-01-03T13:45:16Z"}, "message": "Update now-more-precise operation with a preciser message", "tree": {"sha": "1bf6d5ae1442a4a771ce3ad596816a5256f07d55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bf6d5ae1442a4a771ce3ad596816a5256f07d55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd", "html_url": "https://github.com/rust-lang/rust/commit/a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5330a4f52fcf9de8112f3dd0abb094640b668e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5330a4f52fcf9de8112f3dd0abb094640b668e3", "html_url": "https://github.com/rust-lang/rust/commit/e5330a4f52fcf9de8112f3dd0abb094640b668e3"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "cf81b69fedef680b00cea43cd2030680ce439260", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd", "patch": "@@ -242,8 +242,8 @@ impl NonConstOp for CellBorrow {\n             ccx.tcx.sess,\n             span,\n             E0492,\n-            \"cannot borrow a constant which may contain \\\n-            interior mutability, create a static instead\"\n+            \"this borrow to an interior mutable value may end up in the final value of this {}\",\n+            ccx.const_kind(),\n         )\n     }\n }"}, {"sha": "4aacdec7c5117f32af35b264e20e4de604558ec8", "filename": "src/test/ui/consts/partial_qualif.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.rs?ref=a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd", "patch": "@@ -3,7 +3,7 @@ use std::cell::Cell;\n const FOO: &(Cell<usize>, bool) = {\n     let mut a = (Cell::new(0), false);\n     a.1 = true; // sets `qualif(a)` to `qualif(a) | qualif(true)`\n-    &{a} //~ ERROR cannot borrow a constant which may contain interior mutability\n+    &{a} //~ ERROR borrow to an interior mutable value may end up in the final value\n };\n \n fn main() {}"}, {"sha": "5ea0cbc4f7c1afa33600db5865151e1b884bfe77", "filename": "src/test/ui/consts/partial_qualif.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpartial_qualif.stderr?ref=a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd", "patch": "@@ -1,4 +1,4 @@\n-error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n+error[E0492]: this borrow to an interior mutable value may end up in the final value of this constant\n   --> $DIR/partial_qualif.rs:6:5\n    |\n LL |     &{a}"}, {"sha": "485a4a2fcc3bce62b5e3e8b569a55d3056406085", "filename": "src/test/ui/consts/qualif_overwrite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.rs?ref=a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd", "patch": "@@ -7,7 +7,7 @@ use std::cell::Cell;\n const FOO: &Option<Cell<usize>> = {\n     let mut a = Some(Cell::new(0));\n     a = None; // sets `qualif(a)` to `qualif(a) | qualif(None)`\n-    &{a}//~ ERROR cannot borrow a constant which may contain interior mutability\n+    &{a} //~ ERROR borrow to an interior mutable value may end up in the final value\n };\n \n fn main() {}"}, {"sha": "995f8600587f501b5c501ec46a303dbe50c4126d", "filename": "src/test/ui/consts/qualif_overwrite.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite.stderr?ref=a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd", "patch": "@@ -1,4 +1,4 @@\n-error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n+error[E0492]: this borrow to an interior mutable value may end up in the final value of this constant\n   --> $DIR/qualif_overwrite.rs:10:5\n    |\n LL |     &{a}"}, {"sha": "6b90988869d3b01a129598bf2db7f84a9dc19cac", "filename": "src/test/ui/consts/qualif_overwrite_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.rs?ref=a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd", "patch": "@@ -5,7 +5,7 @@ use std::cell::Cell;\n const FOO: &Option<Cell<usize>> = {\n     let mut a = (Some(Cell::new(0)),);\n     a.0 = None; // sets `qualif(a)` to `qualif(a) | qualif(None)`\n-    &{a.0} //~ ERROR cannot borrow a constant which may contain interior mutability\n+    &{a.0} //~ ERROR borrow to an interior mutable value may end up in the final value\n };\n \n fn main() {}"}, {"sha": "006199514fcac761dd29c694d00b4bfc41c8fe9d", "filename": "src/test/ui/consts/qualif_overwrite_2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif_overwrite_2.stderr?ref=a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd", "patch": "@@ -1,4 +1,4 @@\n-error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n+error[E0492]: this borrow to an interior mutable value may end up in the final value of this constant\n   --> $DIR/qualif_overwrite_2.rs:8:5\n    |\n LL |     &{a.0}"}, {"sha": "9aa84c2bff36bb68654753d38a0060304973f7fb", "filename": "src/test/ui/error-codes/E0492.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd/src%2Ftest%2Fui%2Ferror-codes%2FE0492.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd/src%2Ftest%2Fui%2Ferror-codes%2FE0492.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0492.stderr?ref=a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd", "patch": "@@ -1,10 +1,10 @@\n-error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n+error[E0492]: this borrow to an interior mutable value may end up in the final value of this constant\n   --> $DIR/E0492.rs:4:33\n    |\n LL | const B: &'static AtomicUsize = &A;\n    |                                 ^^\n \n-error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n+error[E0492]: this borrow to an interior mutable value may end up in the final value of this static\n   --> $DIR/E0492.rs:5:34\n    |\n LL | static C: &'static AtomicUsize = &A;"}, {"sha": "4b13c0f0c15aff240db331b1e0a2901fdc715fbf", "filename": "src/test/ui/issues/issue-17718-const-borrow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-borrow.rs?ref=a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd", "patch": "@@ -2,13 +2,13 @@ use std::cell::UnsafeCell;\n \n const A: UnsafeCell<usize> = UnsafeCell::new(1);\n const B: &'static UnsafeCell<usize> = &A;\n-//~^ ERROR: may contain interior mutability\n+//~^ ERROR: borrow to an interior mutable value\n \n struct C { a: UnsafeCell<usize> }\n const D: C = C { a: UnsafeCell::new(1) };\n const E: &'static UnsafeCell<usize> = &D.a;\n-//~^ ERROR: may contain interior mutability\n+//~^ ERROR: borrow to an interior mutable value\n const F: &'static C = &D;\n-//~^ ERROR: may contain interior mutability\n+//~^ ERROR: borrow to an interior mutable value\n \n fn main() {}"}, {"sha": "c94ae2a3a18f60ab67fab0c5761b0882946c5659", "filename": "src/test/ui/issues/issue-17718-const-borrow.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-borrow.stderr?ref=a137ff17069feb67a2ef5a0f3ddbe09707c2d6cd", "patch": "@@ -1,16 +1,16 @@\n-error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n+error[E0492]: this borrow to an interior mutable value may end up in the final value of this constant\n   --> $DIR/issue-17718-const-borrow.rs:4:39\n    |\n LL | const B: &'static UnsafeCell<usize> = &A;\n    |                                       ^^\n \n-error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n+error[E0492]: this borrow to an interior mutable value may end up in the final value of this constant\n   --> $DIR/issue-17718-const-borrow.rs:9:39\n    |\n LL | const E: &'static UnsafeCell<usize> = &D.a;\n    |                                       ^^^^\n \n-error[E0492]: cannot borrow a constant which may contain interior mutability, create a static instead\n+error[E0492]: this borrow to an interior mutable value may end up in the final value of this constant\n   --> $DIR/issue-17718-const-borrow.rs:11:23\n    |\n LL | const F: &'static C = &D;"}]}