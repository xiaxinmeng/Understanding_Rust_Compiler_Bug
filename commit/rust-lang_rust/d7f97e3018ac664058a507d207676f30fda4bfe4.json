{"sha": "d7f97e3018ac664058a507d207676f30fda4bfe4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3Zjk3ZTMwMThhYzY2NDA1OGE1MDdkMjA3Njc2ZjMwZmRhNGJmZTQ=", "commit": {"author": {"name": "xales", "email": "xales@naveria.com", "date": "2014-01-29T00:29:10Z"}, "committer": {"name": "xales", "email": "xales@naveria.com", "date": "2014-01-30T01:31:03Z"}, "message": "Rename std::borrow to std::reference.\n\nFixes #11814", "tree": {"sha": "8e2e3d3983954b0976003d00139963da1a7614d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e2e3d3983954b0976003d00139963da1a7614d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7f97e3018ac664058a507d207676f30fda4bfe4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7f97e3018ac664058a507d207676f30fda4bfe4", "html_url": "https://github.com/rust-lang/rust/commit/d7f97e3018ac664058a507d207676f30fda4bfe4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7f97e3018ac664058a507d207676f30fda4bfe4/comments", "author": {"login": "xales", "id": 341605, "node_id": "MDQ6VXNlcjM0MTYwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/341605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xales", "html_url": "https://github.com/xales", "followers_url": "https://api.github.com/users/xales/followers", "following_url": "https://api.github.com/users/xales/following{/other_user}", "gists_url": "https://api.github.com/users/xales/gists{/gist_id}", "starred_url": "https://api.github.com/users/xales/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xales/subscriptions", "organizations_url": "https://api.github.com/users/xales/orgs", "repos_url": "https://api.github.com/users/xales/repos", "events_url": "https://api.github.com/users/xales/events{/privacy}", "received_events_url": "https://api.github.com/users/xales/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xales", "id": 341605, "node_id": "MDQ6VXNlcjM0MTYwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/341605?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xales", "html_url": "https://github.com/xales", "followers_url": "https://api.github.com/users/xales/followers", "following_url": "https://api.github.com/users/xales/following{/other_user}", "gists_url": "https://api.github.com/users/xales/gists{/gist_id}", "starred_url": "https://api.github.com/users/xales/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xales/subscriptions", "organizations_url": "https://api.github.com/users/xales/orgs", "repos_url": "https://api.github.com/users/xales/repos", "events_url": "https://api.github.com/users/xales/events{/privacy}", "received_events_url": "https://api.github.com/users/xales/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f84b7291e7606b35e800070bd826e4c2e2154228", "url": "https://api.github.com/repos/rust-lang/rust/commits/f84b7291e7606b35e800070bd826e4c2e2154228", "html_url": "https://github.com/rust-lang/rust/commit/f84b7291e7606b35e800070bd826e4c2e2154228"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "709382358f1cb4eb29845c4e59efff4dee169ee1", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7f97e3018ac664058a507d207676f30fda4bfe4/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f97e3018ac664058a507d207676f30fda4bfe4/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=d7f97e3018ac664058a507d207676f30fda4bfe4", "patch": "@@ -47,7 +47,7 @@ use sync::{Mutex, RWLock};\n use std::cast;\n use std::sync::arc::UnsafeArc;\n use std::task;\n-use std::borrow;\n+use std::reference;\n \n /// As sync::condvar, a mechanism for unlock-and-descheduling and signaling.\n pub struct Condvar<'a> {\n@@ -465,7 +465,7 @@ impl<T:Freeze + Send> RWArc<T> {\n             // of this cast is removing the mutability.)\n             let new_data = data;\n             // Downgrade ensured the token belonged to us. Just a sanity check.\n-            assert!(borrow::ref_eq(&(*state).data, new_data));\n+            assert!(reference::ref_eq(&(*state).data, new_data));\n             // Produce new token\n             RWReadMode {\n                 data: new_data,"}, {"sha": "742b7831202b55c311206d400f42cdbbe27cff9d", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7f97e3018ac664058a507d207676f30fda4bfe4/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f97e3018ac664058a507d207676f30fda4bfe4/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=d7f97e3018ac664058a507d207676f30fda4bfe4", "patch": "@@ -18,7 +18,7 @@\n  */\n \n \n-use std::borrow;\n+use std::reference;\n use std::comm;\n use std::unstable::sync::Exclusive;\n use std::sync::arc::UnsafeArc;\n@@ -634,7 +634,7 @@ impl RWLock {\n     /// To be called inside of the write_downgrade block.\n     pub fn downgrade<'a>(&self, token: RWLockWriteMode<'a>)\n                          -> RWLockReadMode<'a> {\n-        if !borrow::ref_eq(self, token.lock) {\n+        if !reference::ref_eq(self, token.lock) {\n             fail!(\"Can't downgrade() with a different rwlock's write_mode!\");\n         }\n         unsafe {"}, {"sha": "ac95fbd1fb1e78bd841deef887987a21baa7f142", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f97e3018ac664058a507d207676f30fda4bfe4/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f97e3018ac664058a507d207676f30fda4bfe4/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=d7f97e3018ac664058a507d207676f30fda4bfe4", "patch": "@@ -123,7 +123,7 @@ pub mod send_str;\n pub mod ptr;\n pub mod owned;\n pub mod managed;\n-pub mod borrow;\n+pub mod reference;\n pub mod rc;\n pub mod gc;\n "}, {"sha": "66df4334adcb9dbf4aeca0af6212033537836804", "filename": "src/libstd/reference.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d7f97e3018ac664058a507d207676f30fda4bfe4/src%2Flibstd%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f97e3018ac664058a507d207676f30fda4bfe4/src%2Flibstd%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freference.rs?ref=d7f97e3018ac664058a507d207676f30fda4bfe4", "previous_filename": "src/libstd/borrow.rs"}, {"sha": "09b91c138bcc98326013b11e10bcdaa9f99f1378", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7f97e3018ac664058a507d207676f30fda4bfe4/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f97e3018ac664058a507d207676f30fda4bfe4/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=d7f97e3018ac664058a507d207676f30fda4bfe4", "patch": "@@ -14,7 +14,7 @@\n //! to implement this.\n \n use any::AnyOwnExt;\n-use borrow;\n+use reference;\n use cast;\n use cleanup;\n use clone::Clone;\n@@ -287,7 +287,7 @@ impl Task {\n \n impl Drop for Task {\n     fn drop(&mut self) {\n-        rtdebug!(\"called drop for a task: {}\", borrow::to_uint(self));\n+        rtdebug!(\"called drop for a task: {}\", reference::to_uint(self));\n         rtassert!(self.destroyed);\n     }\n }"}, {"sha": "569acd3c7c6ae616aa32b6294cd2f0b2deeb2a4f", "filename": "src/test/run-pass/borrowck-borrow-from-expr-block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7f97e3018ac664058a507d207676f30fda4bfe4/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f97e3018ac664058a507d207676f30fda4bfe4/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs?ref=d7f97e3018ac664058a507d207676f30fda4bfe4", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,7 +10,7 @@\n \n #[feature(managed_boxes)];\n \n-use std::borrow;\n+use std::reference;\n use std::ptr;\n \n fn borrow(x: &int, f: |x: &int|) {\n@@ -20,7 +20,7 @@ fn borrow(x: &int, f: |x: &int|) {\n fn test1(x: @~int) {\n     borrow(&*(*x).clone(), |p| {\n         let x_a = ptr::to_unsafe_ptr(&**x);\n-        assert!((x_a as uint) != borrow::to_uint(p));\n+        assert!((x_a as uint) != reference::to_uint(p));\n         assert_eq!(unsafe{*x_a}, *p);\n     })\n }"}, {"sha": "150e0abe2ebddcbab7bee305c8a58b324c2f0e58", "filename": "src/test/run-pass/cast-region-to-uint.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7f97e3018ac664058a507d207676f30fda4bfe4/src%2Ftest%2Frun-pass%2Fcast-region-to-uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f97e3018ac664058a507d207676f30fda4bfe4/src%2Ftest%2Frun-pass%2Fcast-region-to-uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-region-to-uint.rs?ref=d7f97e3018ac664058a507d207676f30fda4bfe4", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::borrow;\n+use std::reference;\n \n pub fn main() {\n     let x = 3;\n-    info!(\"&x={:x}\", borrow::to_uint(&x));\n+    info!(\"&x={:x}\", reference::to_uint(&x));\n }"}]}