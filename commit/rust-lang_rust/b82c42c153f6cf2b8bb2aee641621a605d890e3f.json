{"sha": "b82c42c153f6cf2b8bb2aee641621a605d890e3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MmM0MmMxNTNmNmNmMmI4YmIyYWVlNjQxNjIxYTYwNWQ4OTBlM2Y=", "commit": {"author": {"name": "Eli Friedman", "email": "eli.friedman@gmail.com", "date": "2015-09-01T05:38:34Z"}, "committer": {"name": "Eli Friedman", "email": "eli.friedman@gmail.com", "date": "2015-09-01T08:22:57Z"}, "message": "Add missing stability markings to BinaryHeap.", "tree": {"sha": "05128f92402a60d15350e74ec1e17c7aff2b5547", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05128f92402a60d15350e74ec1e17c7aff2b5547"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b82c42c153f6cf2b8bb2aee641621a605d890e3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b82c42c153f6cf2b8bb2aee641621a605d890e3f", "html_url": "https://github.com/rust-lang/rust/commit/b82c42c153f6cf2b8bb2aee641621a605d890e3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b82c42c153f6cf2b8bb2aee641621a605d890e3f/comments", "author": {"login": "eefriedman", "id": 12769964, "node_id": "MDQ6VXNlcjEyNzY5OTY0", "avatar_url": "https://avatars.githubusercontent.com/u/12769964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eefriedman", "html_url": "https://github.com/eefriedman", "followers_url": "https://api.github.com/users/eefriedman/followers", "following_url": "https://api.github.com/users/eefriedman/following{/other_user}", "gists_url": "https://api.github.com/users/eefriedman/gists{/gist_id}", "starred_url": "https://api.github.com/users/eefriedman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eefriedman/subscriptions", "organizations_url": "https://api.github.com/users/eefriedman/orgs", "repos_url": "https://api.github.com/users/eefriedman/repos", "events_url": "https://api.github.com/users/eefriedman/events{/privacy}", "received_events_url": "https://api.github.com/users/eefriedman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eefriedman", "id": 12769964, "node_id": "MDQ6VXNlcjEyNzY5OTY0", "avatar_url": "https://avatars.githubusercontent.com/u/12769964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eefriedman", "html_url": "https://github.com/eefriedman", "followers_url": "https://api.github.com/users/eefriedman/followers", "following_url": "https://api.github.com/users/eefriedman/following{/other_user}", "gists_url": "https://api.github.com/users/eefriedman/gists{/gist_id}", "starred_url": "https://api.github.com/users/eefriedman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eefriedman/subscriptions", "organizations_url": "https://api.github.com/users/eefriedman/orgs", "repos_url": "https://api.github.com/users/eefriedman/repos", "events_url": "https://api.github.com/users/eefriedman/events{/privacy}", "received_events_url": "https://api.github.com/users/eefriedman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09dd65c2f60ba635378d2e9afdb1ca4775d8e76c", "url": "https://api.github.com/repos/rust-lang/rust/commits/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c", "html_url": "https://github.com/rust-lang/rust/commit/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "3ca6973612633aca8c0fca3bd722e3fc938cc869", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b82c42c153f6cf2b8bb2aee641621a605d890e3f/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b82c42c153f6cf2b8bb2aee641621a605d890e3f/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=b82c42c153f6cf2b8bb2aee641621a605d890e3f", "patch": "@@ -214,11 +214,14 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(collections)]\n+    /// #![feature(binary_heap_extras)]\n     ///\n     /// use std::collections::BinaryHeap;\n     /// let heap = BinaryHeap::from_vec(vec![9, 1, 2, 7, 3, 2]);\n     /// ```\n+    #[unstable(feature = \"binary_heap_extras\",\n+               reason = \"needs to be audited\",\n+               issue = \"28147\")]\n     pub fn from_vec(vec: Vec<T>) -> BinaryHeap<T> {\n         let mut heap = BinaryHeap { data: vec };\n         let mut n = heap.len() / 2;\n@@ -235,7 +238,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(collections)]\n+    /// #![feature(binary_heap_extras)]\n     ///\n     /// use std::collections::BinaryHeap;\n     /// let heap = BinaryHeap::from_vec(vec![1, 2, 3, 4]);\n@@ -341,7 +344,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(collections)]\n+    /// #![feature(binary_heap_extras)]\n     ///\n     /// use std::collections::BinaryHeap;\n     /// let mut heap = BinaryHeap::from_vec(vec![1, 3]);\n@@ -388,7 +391,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(collections)]\n+    /// #![feature(binary_heap_extras)]\n     ///\n     /// use std::collections::BinaryHeap;\n     /// let mut heap = BinaryHeap::new();\n@@ -400,6 +403,9 @@ impl<T: Ord> BinaryHeap<T> {\n     /// assert_eq!(heap.len(), 2);\n     /// assert_eq!(heap.peek(), Some(&3));\n     /// ```\n+    #[unstable(feature = \"binary_heap_extras\",\n+               reason = \"needs to be audited\",\n+               issue = \"28147\")]\n     pub fn push_pop(&mut self, mut item: T) -> T {\n         match self.data.get_mut(0) {\n             None => return item,\n@@ -421,7 +427,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(collections)]\n+    /// #![feature(binary_heap_extras)]\n     ///\n     /// use std::collections::BinaryHeap;\n     /// let mut heap = BinaryHeap::new();\n@@ -431,6 +437,9 @@ impl<T: Ord> BinaryHeap<T> {\n     /// assert_eq!(heap.len(), 1);\n     /// assert_eq!(heap.peek(), Some(&3));\n     /// ```\n+    #[unstable(feature = \"binary_heap_extras\",\n+               reason = \"needs to be audited\",\n+               issue = \"28147\")]\n     pub fn replace(&mut self, mut item: T) -> Option<T> {\n         if !self.is_empty() {\n             swap(&mut item, &mut self.data[0]);\n@@ -448,7 +457,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(collections)]\n+    /// #![feature(binary_heap_extras)]\n     ///\n     /// use std::collections::BinaryHeap;\n     /// let heap = BinaryHeap::from_vec(vec![1, 2, 3, 4, 5, 6, 7]);\n@@ -459,6 +468,9 @@ impl<T: Ord> BinaryHeap<T> {\n     ///     println!(\"{}\", x);\n     /// }\n     /// ```\n+    #[unstable(feature = \"binary_heap_extras\",\n+               reason = \"needs to be audited\",\n+               issue = \"28147\")]\n     pub fn into_vec(self) -> Vec<T> { self.data }\n \n     /// Consumes the `BinaryHeap` and returns a vector in sorted\n@@ -467,7 +479,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(collections)]\n+    /// #![feature(binary_heap_extras)]\n     ///\n     /// use std::collections::BinaryHeap;\n     ///\n@@ -478,6 +490,9 @@ impl<T: Ord> BinaryHeap<T> {\n     /// let vec = heap.into_sorted_vec();\n     /// assert_eq!(vec, [1, 2, 3, 4, 5, 6, 7]);\n     /// ```\n+    #[unstable(feature = \"binary_heap_extras\",\n+               reason = \"needs to be audited\",\n+               issue = \"28147\")]\n     pub fn into_sorted_vec(mut self) -> Vec<T> {\n         let mut end = self.len();\n         while end > 1 {\n@@ -730,7 +745,7 @@ impl<T: Ord> IntoIterator for BinaryHeap<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(collections)]\n+    /// #![feature(binary_heap_extras)]\n     ///\n     /// use std::collections::BinaryHeap;\n     /// let heap = BinaryHeap::from_vec(vec![1, 2, 3, 4]);"}, {"sha": "d84f5bdf10785557410b72dd726a036b992d3d64", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b82c42c153f6cf2b8bb2aee641621a605d890e3f/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b82c42c153f6cf2b8bb2aee641621a605d890e3f/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=b82c42c153f6cf2b8bb2aee641621a605d890e3f", "patch": "@@ -10,6 +10,7 @@\n \n #![feature(ascii)]\n #![feature(append)]\n+#![feature(binary_heap_extras)]\n #![feature(box_syntax)]\n #![feature(btree_range)]\n #![feature(collections)]"}, {"sha": "8bdac6808d089eb28c54d6bacca4362d0535fd8a", "filename": "src/test/run-pass/binary-heap-panic-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b82c42c153f6cf2b8bb2aee641621a605d890e3f/src%2Ftest%2Frun-pass%2Fbinary-heap-panic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b82c42c153f6cf2b8bb2aee641621a605d890e3f/src%2Ftest%2Frun-pass%2Fbinary-heap-panic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinary-heap-panic-safe.rs?ref=b82c42c153f6cf2b8bb2aee641621a605d890e3f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(std_misc, collections, catch_panic, rand, sync_poison)]\n+#![feature(std_misc, binary_heap_extras, catch_panic, rand, sync_poison)]\n \n use std::__rand::{thread_rng, Rng};\n use std::thread;"}, {"sha": "efccff75a49dd080ea0992ee7ef14b93bda85692", "filename": "src/test/run-pass/while-let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b82c42c153f6cf2b8bb2aee641621a605d890e3f/src%2Ftest%2Frun-pass%2Fwhile-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b82c42c153f6cf2b8bb2aee641621a605d890e3f/src%2Ftest%2Frun-pass%2Fwhile-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-let.rs?ref=b82c42c153f6cf2b8bb2aee641621a605d890e3f", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-#![feature(collections)]\n+#![feature(binary_heap_extras)]\n \n use std::collections::BinaryHeap;\n "}]}