{"sha": "54eb0d992a824da4579f7e8db252cba18f7f6f0d", "node_id": "C_kwDOAAsO6NoAKDU0ZWIwZDk5MmE4MjRkYTQ1NzlmN2U4ZGIyNTJjYmExOGY3ZjZmMGQ", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-07-26T15:14:22Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-07-26T16:09:41Z"}, "message": "Fully remove the intrinsic_match macro", "tree": {"sha": "f2ce04ccf9789fd1c242df8297910a541ceadadb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2ce04ccf9789fd1c242df8297910a541ceadadb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54eb0d992a824da4579f7e8db252cba18f7f6f0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54eb0d992a824da4579f7e8db252cba18f7f6f0d", "html_url": "https://github.com/rust-lang/rust/commit/54eb0d992a824da4579f7e8db252cba18f7f6f0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54eb0d992a824da4579f7e8db252cba18f7f6f0d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e151964a70d64b5f58f436f49cae82c22222ee64", "url": "https://api.github.com/repos/rust-lang/rust/commits/e151964a70d64b5f58f436f49cae82c22222ee64", "html_url": "https://github.com/rust-lang/rust/commit/e151964a70d64b5f58f436f49cae82c22222ee64"}], "stats": {"total": 610, "additions": 360, "deletions": 250}, "files": [{"sha": "49c0fa3434081c34eec3150857cc69b829fe5049", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 360, "deletions": 250, "changes": 610, "blob_url": "https://github.com/rust-lang/rust/blob/54eb0d992a824da4579f7e8db252cba18f7f6f0d/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54eb0d992a824da4579f7e8db252cba18f7f6f0d/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=54eb0d992a824da4579f7e8db252cba18f7f6f0d", "patch": "@@ -1,28 +1,6 @@\n //! Codegen of intrinsics. This includes `extern \"rust-intrinsic\"`, `extern \"platform-intrinsic\"`\n //! and LLVM intrinsics that have symbol names starting with `llvm.`.\n \n-macro_rules! intrinsic_pat {\n-    (_) => {\n-        _\n-    };\n-    ($name:ident) => {\n-        sym::$name\n-    };\n-    (kw.$name:ident) => {\n-        kw::$name\n-    };\n-}\n-\n-macro_rules! intrinsic_arg {\n-    (o $fx:expr, $arg:ident) => {};\n-    (c $fx:expr, $arg:ident) => {\n-        let $arg = codegen_operand($fx, $arg);\n-    };\n-    (v $fx:expr, $arg:ident) => {\n-        let $arg = codegen_operand($fx, $arg).load_scalar($fx);\n-    };\n-}\n-\n macro_rules! intrinsic_args {\n     ($fx:expr, $args:expr => ($($arg:tt),*); $intrinsic:expr) => {\n         #[allow(unused_parens)]\n@@ -34,28 +12,6 @@ macro_rules! intrinsic_args {\n     }\n }\n \n-macro_rules! intrinsic_match {\n-    ($fx:expr, $intrinsic:expr, $args:expr,\n-    _ => $unknown:block;\n-    $(\n-        $($($name:tt).*)|+ $(if $cond:expr)?, ($($a:ident $arg:ident),*) $content:block;\n-    )*) => {\n-        match $intrinsic {\n-            $(\n-                $(intrinsic_pat!($($name).*))|* $(if $cond)? => {\n-                    if let [$($arg),*] = $args {\n-                        $(intrinsic_arg!($a $fx, $arg);)*\n-                        $content\n-                    } else {\n-                        bug!(\"wrong number of args for intrinsic {:?}\", $intrinsic);\n-                    }\n-                }\n-            )*\n-            _ => $unknown,\n-        }\n-    }\n-}\n-\n mod cpuid;\n mod llvm;\n mod simd;\n@@ -359,28 +315,31 @@ fn codegen_regular_intrinsic_call<'tcx>(\n ) {\n     let usize_layout = fx.layout_of(fx.tcx.types.usize);\n \n-    intrinsic_match! {\n-        fx, intrinsic, args,\n-        _ => {\n-            fx.tcx.sess.span_fatal(source_info.span, &format!(\"unsupported intrinsic {}\", intrinsic));\n-        };\n+    match intrinsic {\n+        sym::assume => {\n+            intrinsic_args!(fx, args => (_a); intrinsic);\n+        }\n+        sym::likely | sym::unlikely => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n \n-        assume, (c _a) {};\n-        likely | unlikely, (c a) {\n             ret.write_cvalue(fx, a);\n-        };\n-        breakpoint, () {\n+        }\n+        sym::breakpoint => {\n+            intrinsic_args!(fx, args => (); intrinsic);\n+\n             fx.bcx.ins().debugtrap();\n-        };\n-        copy | copy_nonoverlapping, (v src, v dst, v count) {\n+        }\n+        sym::copy | sym::copy_nonoverlapping => {\n+            intrinsic_args!(fx, args => (src, dst, count); intrinsic);\n+            let src = src.load_scalar(fx);\n+            let dst = dst.load_scalar(fx);\n+            let count = count.load_scalar(fx);\n+\n             let elem_ty = substs.type_at(0);\n             let elem_size: u64 = fx.layout_of(elem_ty).size.bytes();\n             assert_eq!(args.len(), 3);\n-            let byte_amount = if elem_size != 1 {\n-                fx.bcx.ins().imul_imm(count, elem_size as i64)\n-            } else {\n-                count\n-            };\n+            let byte_amount =\n+                if elem_size != 1 { fx.bcx.ins().imul_imm(count, elem_size as i64) } else { count };\n \n             if intrinsic == sym::copy_nonoverlapping {\n                 // FIXME emit_small_memcpy\n@@ -389,17 +348,19 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 // FIXME emit_small_memmove\n                 fx.bcx.call_memmove(fx.target_config, dst, src, byte_amount);\n             }\n-        };\n-        // NOTE: the volatile variants have src and dst swapped\n-        volatile_copy_memory | volatile_copy_nonoverlapping_memory, (v dst, v src, v count) {\n+        }\n+        sym::volatile_copy_memory | sym::volatile_copy_nonoverlapping_memory => {\n+            // NOTE: the volatile variants have src and dst swapped\n+            intrinsic_args!(fx, args => (dst, src, count); intrinsic);\n+            let dst = dst.load_scalar(fx);\n+            let src = src.load_scalar(fx);\n+            let count = count.load_scalar(fx);\n+\n             let elem_ty = substs.type_at(0);\n             let elem_size: u64 = fx.layout_of(elem_ty).size.bytes();\n             assert_eq!(args.len(), 3);\n-            let byte_amount = if elem_size != 1 {\n-                fx.bcx.ins().imul_imm(count, elem_size as i64)\n-            } else {\n-                count\n-            };\n+            let byte_amount =\n+                if elem_size != 1 { fx.bcx.ins().imul_imm(count, elem_size as i64) } else { count };\n \n             // FIXME make the copy actually volatile when using emit_small_mem{cpy,move}\n             if intrinsic == sym::volatile_copy_nonoverlapping_memory {\n@@ -409,8 +370,10 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 // FIXME emit_small_memmove\n                 fx.bcx.call_memmove(fx.target_config, dst, src, byte_amount);\n             }\n-        };\n-        size_of_val, (c ptr) {\n+        }\n+        sym::size_of_val => {\n+            intrinsic_args!(fx, args => (ptr); intrinsic);\n+\n             let layout = fx.layout_of(substs.type_at(0));\n             // Note: Can't use is_unsized here as truly unsized types need to take the fixed size\n             // branch\n@@ -419,14 +382,13 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 let (size, _align) = crate::unsize::size_and_align_of_dst(fx, layout, info);\n                 size\n             } else {\n-                fx\n-                    .bcx\n-                    .ins()\n-                    .iconst(fx.pointer_type, layout.size.bytes() as i64)\n+                fx.bcx.ins().iconst(fx.pointer_type, layout.size.bytes() as i64)\n             };\n             ret.write_cvalue(fx, CValue::by_val(size, usize_layout));\n-        };\n-        min_align_of_val, (c ptr) {\n+        }\n+        sym::min_align_of_val => {\n+            intrinsic_args!(fx, args => (ptr); intrinsic);\n+\n             let layout = fx.layout_of(substs.type_at(0));\n             // Note: Can't use is_unsized here as truly unsized types need to take the fixed size\n             // branch\n@@ -435,26 +397,37 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 let (_size, align) = crate::unsize::size_and_align_of_dst(fx, layout, info);\n                 align\n             } else {\n-                fx\n-                    .bcx\n-                    .ins()\n-                    .iconst(fx.pointer_type, layout.align.abi.bytes() as i64)\n+                fx.bcx.ins().iconst(fx.pointer_type, layout.align.abi.bytes() as i64)\n             };\n             ret.write_cvalue(fx, CValue::by_val(align, usize_layout));\n-        };\n+        }\n+\n+        sym::vtable_size => {\n+            intrinsic_args!(fx, args => (vtable); intrinsic);\n+            let vtable = vtable.load_scalar(fx);\n \n-        vtable_size, (v vtable) {\n             let size = crate::vtable::size_of_obj(fx, vtable);\n             ret.write_cvalue(fx, CValue::by_val(size, usize_layout));\n-        };\n+        }\n+\n+        sym::vtable_align => {\n+            intrinsic_args!(fx, args => (vtable); intrinsic);\n+            let vtable = vtable.load_scalar(fx);\n \n-        vtable_align, (v vtable) {\n             let align = crate::vtable::min_align_of_obj(fx, vtable);\n             ret.write_cvalue(fx, CValue::by_val(align, usize_layout));\n-        };\n+        }\n+\n+        sym::unchecked_add\n+        | sym::unchecked_sub\n+        | sym::unchecked_mul\n+        | sym::unchecked_div\n+        | sym::exact_div\n+        | sym::unchecked_rem\n+        | sym::unchecked_shl\n+        | sym::unchecked_shr => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n \n-        unchecked_add | unchecked_sub | unchecked_mul | unchecked_div | exact_div | unchecked_rem\n-        | unchecked_shl | unchecked_shr, (c x, c y) {\n             // FIXME trap on overflow\n             let bin_op = match intrinsic {\n                 sym::unchecked_add => BinOp::Add,\n@@ -468,8 +441,10 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             };\n             let res = crate::num::codegen_int_binop(fx, bin_op, x, y);\n             ret.write_cvalue(fx, res);\n-        };\n-        add_with_overflow | sub_with_overflow | mul_with_overflow, (c x, c y) {\n+        }\n+        sym::add_with_overflow | sym::sub_with_overflow | sym::mul_with_overflow => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n+\n             assert_eq!(x.layout().ty, y.layout().ty);\n             let bin_op = match intrinsic {\n                 sym::add_with_overflow => BinOp::Add,\n@@ -478,15 +453,12 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 _ => unreachable!(),\n             };\n \n-            let res = crate::num::codegen_checked_int_binop(\n-                fx,\n-                bin_op,\n-                x,\n-                y,\n-            );\n+            let res = crate::num::codegen_checked_int_binop(fx, bin_op, x, y);\n             ret.write_cvalue(fx, res);\n-        };\n-        saturating_add | saturating_sub, (c lhs, c rhs) {\n+        }\n+        sym::saturating_add | sym::saturating_sub => {\n+            intrinsic_args!(fx, args => (lhs, rhs); intrinsic);\n+\n             assert_eq!(lhs.layout().ty, rhs.layout().ty);\n             let bin_op = match intrinsic {\n                 sym::saturating_add => BinOp::Add,\n@@ -496,12 +468,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let signed = type_sign(lhs.layout().ty);\n \n-            let checked_res = crate::num::codegen_checked_int_binop(\n-                fx,\n-                bin_op,\n-                lhs,\n-                rhs,\n-            );\n+            let checked_res = crate::num::codegen_checked_int_binop(fx, bin_op, lhs, rhs);\n \n             let (val, has_overflow) = checked_res.load_scalar_pair(fx);\n             let clif_ty = fx.clif_type(lhs.layout().ty).unwrap();\n@@ -513,13 +480,15 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 (sym::saturating_sub, false) => fx.bcx.ins().select(has_overflow, min, val),\n                 (sym::saturating_add, true) => {\n                     let rhs = rhs.load_scalar(fx);\n-                    let rhs_ge_zero = fx.bcx.ins().icmp_imm(IntCC::SignedGreaterThanOrEqual, rhs, 0);\n+                    let rhs_ge_zero =\n+                        fx.bcx.ins().icmp_imm(IntCC::SignedGreaterThanOrEqual, rhs, 0);\n                     let sat_val = fx.bcx.ins().select(rhs_ge_zero, max, min);\n                     fx.bcx.ins().select(has_overflow, sat_val, val)\n                 }\n                 (sym::saturating_sub, true) => {\n                     let rhs = rhs.load_scalar(fx);\n-                    let rhs_ge_zero = fx.bcx.ins().icmp_imm(IntCC::SignedGreaterThanOrEqual, rhs, 0);\n+                    let rhs_ge_zero =\n+                        fx.bcx.ins().icmp_imm(IntCC::SignedGreaterThanOrEqual, rhs, 0);\n                     let sat_val = fx.bcx.ins().select(rhs_ge_zero, min, max);\n                     fx.bcx.ins().select(has_overflow, sat_val, val)\n                 }\n@@ -529,23 +498,32 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             let res = CValue::by_val(val, lhs.layout());\n \n             ret.write_cvalue(fx, res);\n-        };\n-        rotate_left, (c x, v y) {\n+        }\n+        sym::rotate_left => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n+            let y = y.load_scalar(fx);\n+\n             let layout = x.layout();\n             let x = x.load_scalar(fx);\n             let res = fx.bcx.ins().rotl(x, y);\n             ret.write_cvalue(fx, CValue::by_val(res, layout));\n-        };\n-        rotate_right, (c x, v y) {\n+        }\n+        sym::rotate_right => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n+            let y = y.load_scalar(fx);\n+\n             let layout = x.layout();\n             let x = x.load_scalar(fx);\n             let res = fx.bcx.ins().rotr(x, y);\n             ret.write_cvalue(fx, CValue::by_val(res, layout));\n-        };\n+        }\n \n         // The only difference between offset and arith_offset is regarding UB. Because Cranelift\n         // doesn't have UB both are codegen'ed the same way\n-        offset | arith_offset, (c base, v offset) {\n+        sym::offset | sym::arith_offset => {\n+            intrinsic_args!(fx, args => (base, offset); intrinsic);\n+            let offset = offset.load_scalar(fx);\n+\n             let pointee_ty = base.layout().ty.builtin_deref(true).unwrap().ty;\n             let pointee_size = fx.layout_of(pointee_ty).size.bytes();\n             let ptr_diff = if pointee_size != 1 {\n@@ -556,12 +534,18 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             let base_val = base.load_scalar(fx);\n             let res = fx.bcx.ins().iadd(base_val, ptr_diff);\n             ret.write_cvalue(fx, CValue::by_val(res, base.layout()));\n-        };\n+        }\n+\n+        sym::transmute => {\n+            intrinsic_args!(fx, args => (from); intrinsic);\n \n-        transmute, (c from) {\n             ret.write_cvalue_transmute(fx, from);\n-        };\n-        write_bytes | volatile_set_memory, (c dst, v val, v count) {\n+        }\n+        sym::write_bytes | sym::volatile_set_memory => {\n+            intrinsic_args!(fx, args => (dst, val, count); intrinsic);\n+            let val = val.load_scalar(fx);\n+            let count = count.load_scalar(fx);\n+\n             let pointee_ty = dst.layout().ty.builtin_deref(true).unwrap().ty;\n             let pointee_size = fx.layout_of(pointee_ty).size.bytes();\n             let count = if pointee_size != 1 {\n@@ -573,34 +557,42 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             // FIXME make the memset actually volatile when switching to emit_small_memset\n             // FIXME use emit_small_memset\n             fx.bcx.call_memset(fx.target_config, dst_ptr, val, count);\n-        };\n-        ctlz | ctlz_nonzero, (c arg) {\n+        }\n+        sym::ctlz | sym::ctlz_nonzero => {\n+            intrinsic_args!(fx, args => (arg); intrinsic);\n             let val = arg.load_scalar(fx);\n+\n             // FIXME trap on `ctlz_nonzero` with zero arg.\n             let res = fx.bcx.ins().clz(val);\n             let res = CValue::by_val(res, arg.layout());\n             ret.write_cvalue(fx, res);\n-        };\n-        cttz | cttz_nonzero, (c arg) {\n+        }\n+        sym::cttz | sym::cttz_nonzero => {\n+            intrinsic_args!(fx, args => (arg); intrinsic);\n             let val = arg.load_scalar(fx);\n+\n             // FIXME trap on `cttz_nonzero` with zero arg.\n             let res = fx.bcx.ins().ctz(val);\n             let res = CValue::by_val(res, arg.layout());\n             ret.write_cvalue(fx, res);\n-        };\n-        ctpop, (c arg) {\n+        }\n+        sym::ctpop => {\n+            intrinsic_args!(fx, args => (arg); intrinsic);\n             let val = arg.load_scalar(fx);\n+\n             let res = fx.bcx.ins().popcnt(val);\n             let res = CValue::by_val(res, arg.layout());\n             ret.write_cvalue(fx, res);\n-        };\n-        bitreverse, (c arg) {\n+        }\n+        sym::bitreverse => {\n+            intrinsic_args!(fx, args => (arg); intrinsic);\n             let val = arg.load_scalar(fx);\n+\n             let res = fx.bcx.ins().bitrev(val);\n             let res = CValue::by_val(res, arg.layout());\n             ret.write_cvalue(fx, res);\n-        };\n-        bswap, (c arg) {\n+        }\n+        sym::bswap => {\n             // FIXME(CraneStation/cranelift#794) add bswap instruction to cranelift\n             fn swap(bcx: &mut FunctionBuilder<'_>, v: Value) -> Value {\n                 match bcx.func.dfg.value_type(v) {\n@@ -676,11 +668,15 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                     ty => unreachable!(\"bswap {}\", ty),\n                 }\n             }\n+            intrinsic_args!(fx, args => (arg); intrinsic);\n             let val = arg.load_scalar(fx);\n+\n             let res = CValue::by_val(swap(&mut fx.bcx, val), arg.layout());\n             ret.write_cvalue(fx, res);\n-        };\n-        assert_inhabited | assert_zero_valid | assert_uninit_valid, () {\n+        }\n+        sym::assert_inhabited | sym::assert_zero_valid | sym::assert_uninit_valid => {\n+            intrinsic_args!(fx, args => (); intrinsic);\n+\n             let layout = fx.layout_of(substs.type_at(0));\n             if layout.abi.is_uninhabited() {\n                 with_no_trimmed_paths!({\n@@ -697,7 +693,10 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 with_no_trimmed_paths!({\n                     crate::base::codegen_panic(\n                         fx,\n-                        &format!(\"attempted to zero-initialize type `{}`, which is invalid\", layout.ty),\n+                        &format!(\n+                            \"attempted to zero-initialize type `{}`, which is invalid\",\n+                            layout.ty\n+                        ),\n                         source_info,\n                     );\n                 });\n@@ -708,41 +707,53 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 with_no_trimmed_paths!({\n                     crate::base::codegen_panic(\n                         fx,\n-                        &format!(\"attempted to leave type `{}` uninitialized, which is invalid\", layout.ty),\n+                        &format!(\n+                            \"attempted to leave type `{}` uninitialized, which is invalid\",\n+                            layout.ty\n+                        ),\n                         source_info,\n                     )\n                 });\n                 return;\n             }\n-        };\n+        }\n+\n+        sym::volatile_load | sym::unaligned_volatile_load => {\n+            intrinsic_args!(fx, args => (ptr); intrinsic);\n \n-        volatile_load | unaligned_volatile_load, (c ptr) {\n             // Cranelift treats loads as volatile by default\n             // FIXME correctly handle unaligned_volatile_load\n-            let inner_layout =\n-                fx.layout_of(ptr.layout().ty.builtin_deref(true).unwrap().ty);\n+            let inner_layout = fx.layout_of(ptr.layout().ty.builtin_deref(true).unwrap().ty);\n             let val = CValue::by_ref(Pointer::new(ptr.load_scalar(fx)), inner_layout);\n             ret.write_cvalue(fx, val);\n-        };\n-        volatile_store | unaligned_volatile_store, (v ptr, c val) {\n+        }\n+        sym::volatile_store | sym::unaligned_volatile_store => {\n+            intrinsic_args!(fx, args => (ptr, val); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             // Cranelift treats stores as volatile by default\n             // FIXME correctly handle unaligned_volatile_store\n             let dest = CPlace::for_ptr(Pointer::new(ptr), val.layout());\n             dest.write_cvalue(fx, val);\n-        };\n+        }\n+\n+        sym::pref_align_of\n+        | sym::needs_drop\n+        | sym::type_id\n+        | sym::type_name\n+        | sym::variant_count => {\n+            intrinsic_args!(fx, args => (); intrinsic);\n \n-        pref_align_of | needs_drop | type_id | type_name | variant_count, () {\n             let const_val =\n                 fx.tcx.const_eval_instance(ParamEnv::reveal_all(), instance, None).unwrap();\n-            let val = crate::constant::codegen_const_value(\n-                fx,\n-                const_val,\n-                ret.layout().ty,\n-            );\n+            let val = crate::constant::codegen_const_value(fx, const_val, ret.layout().ty);\n             ret.write_cvalue(fx, val);\n-        };\n+        }\n \n-        ptr_offset_from | ptr_offset_from_unsigned, (v ptr, v base) {\n+        sym::ptr_offset_from | sym::ptr_offset_from_unsigned => {\n+            intrinsic_args!(fx, args => (ptr, base); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+            let base = base.load_scalar(fx);\n             let ty = substs.type_at(0);\n \n             let pointee_size: u64 = fx.layout_of(ty).size.bytes();\n@@ -758,31 +769,44 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 CValue::by_val(fx.bcx.ins().sdiv_imm(diff_bytes, pointee_size as i64), isize_layout)\n             };\n             ret.write_cvalue(fx, val);\n-        };\n+        }\n+\n+        sym::ptr_guaranteed_eq => {\n+            intrinsic_args!(fx, args => (a, b); intrinsic);\n \n-        ptr_guaranteed_eq, (c a, c b) {\n             let val = crate::num::codegen_ptr_binop(fx, BinOp::Eq, a, b);\n             ret.write_cvalue(fx, val);\n-        };\n+        }\n+\n+        sym::ptr_guaranteed_ne => {\n+            intrinsic_args!(fx, args => (a, b); intrinsic);\n \n-        ptr_guaranteed_ne, (c a, c b) {\n             let val = crate::num::codegen_ptr_binop(fx, BinOp::Ne, a, b);\n             ret.write_cvalue(fx, val);\n-        };\n+        }\n+\n+        sym::caller_location => {\n+            intrinsic_args!(fx, args => (); intrinsic);\n \n-        caller_location, () {\n             let caller_location = fx.get_caller_location(source_info);\n             ret.write_cvalue(fx, caller_location);\n-        };\n+        }\n+\n+        _ if intrinsic.as_str().starts_with(\"atomic_fence\") => {\n+            intrinsic_args!(fx, args => (); intrinsic);\n \n-        _ if intrinsic.as_str().starts_with(\"atomic_fence\"), () {\n             fx.bcx.ins().fence();\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_singlethreadfence\"), () {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_singlethreadfence\") => {\n+            intrinsic_args!(fx, args => (); intrinsic);\n+\n             // FIXME use a compiler fence once Cranelift supports it\n             fx.bcx.ins().fence();\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_load\"), (v ptr) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_load\") => {\n+            intrinsic_args!(fx, args => (ptr); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let ty = substs.type_at(0);\n             match ty.kind() {\n                 ty::Uint(UintTy::U128) | ty::Int(IntTy::I128) => {\n@@ -794,7 +818,9 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                         fx.bcx.ins().jump(ret_block, &[]);\n                         return;\n                     } else {\n-                        fx.tcx.sess.span_fatal(source_info.span, \"128bit atomics not yet supported\");\n+                        fx.tcx\n+                            .sess\n+                            .span_fatal(source_info.span, \"128bit atomics not yet supported\");\n                     }\n                 }\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -809,8 +835,11 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let val = CValue::by_val(val, fx.layout_of(ty));\n             ret.write_cvalue(fx, val);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_store\"), (v ptr, c val) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_store\") => {\n+            intrinsic_args!(fx, args => (ptr, val); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let ty = substs.type_at(0);\n             match ty.kind() {\n                 ty::Uint(UintTy::U128) | ty::Int(IntTy::I128) => {\n@@ -822,7 +851,9 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                         fx.bcx.ins().jump(ret_block, &[]);\n                         return;\n                     } else {\n-                        fx.tcx.sess.span_fatal(source_info.span, \"128bit atomics not yet supported\");\n+                        fx.tcx\n+                            .sess\n+                            .span_fatal(source_info.span, \"128bit atomics not yet supported\");\n                     }\n                 }\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -835,8 +866,11 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             let val = val.load_scalar(fx);\n \n             fx.bcx.ins().atomic_store(MemFlags::trusted(), val, ptr);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_xchg\"), (v ptr, c new) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_xchg\") => {\n+            intrinsic_args!(fx, args => (ptr, new); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = new.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -853,8 +887,12 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_cxchg\"), (v ptr, c test_old, c new) { // both atomic_cxchg_* and atomic_cxchgweak_*\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_cxchg\") => {\n+            // both atomic_cxchg_* and atomic_cxchgweak_*\n+            intrinsic_args!(fx, args => (ptr, test_old, new); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = new.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -870,11 +908,15 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             let old = fx.bcx.ins().atomic_cas(MemFlags::trusted(), ptr, test_old, new);\n             let is_eq = fx.bcx.ins().icmp(IntCC::Equal, old, test_old);\n \n-            let ret_val = CValue::by_val_pair(old, fx.bcx.ins().bint(types::I8, is_eq), ret.layout());\n+            let ret_val =\n+                CValue::by_val_pair(old, fx.bcx.ins().bint(types::I8, is_eq), ret.layout());\n             ret.write_cvalue(fx, ret_val)\n-        };\n+        }\n+\n+        _ if intrinsic.as_str().starts_with(\"atomic_xadd\") => {\n+            intrinsic_args!(fx, args => (ptr, amount); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n \n-        _ if intrinsic.as_str().starts_with(\"atomic_xadd\"), (v ptr, c amount) {\n             let layout = amount.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -887,12 +929,16 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let amount = amount.load_scalar(fx);\n \n-            let old = fx.bcx.ins().atomic_rmw(ty, MemFlags::trusted(), AtomicRmwOp::Add, ptr, amount);\n+            let old =\n+                fx.bcx.ins().atomic_rmw(ty, MemFlags::trusted(), AtomicRmwOp::Add, ptr, amount);\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_xsub\"), (v ptr, c amount) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_xsub\") => {\n+            intrinsic_args!(fx, args => (ptr, amount); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = amount.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -905,12 +951,16 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let amount = amount.load_scalar(fx);\n \n-            let old = fx.bcx.ins().atomic_rmw(ty, MemFlags::trusted(), AtomicRmwOp::Sub, ptr, amount);\n+            let old =\n+                fx.bcx.ins().atomic_rmw(ty, MemFlags::trusted(), AtomicRmwOp::Sub, ptr, amount);\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_and\"), (v ptr, c src) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_and\") => {\n+            intrinsic_args!(fx, args => (ptr, src); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = src.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -927,8 +977,11 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_or\"), (v ptr, c src) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_or\") => {\n+            intrinsic_args!(fx, args => (ptr, src); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = src.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -945,8 +998,11 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_xor\"), (v ptr, c src) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_xor\") => {\n+            intrinsic_args!(fx, args => (ptr, src); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = src.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -963,8 +1019,11 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_nand\"), (v ptr, c src) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_nand\") => {\n+            intrinsic_args!(fx, args => (ptr, src); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = src.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -981,8 +1040,11 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_max\"), (v ptr, c src) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_max\") => {\n+            intrinsic_args!(fx, args => (ptr, src); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = src.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -999,8 +1061,11 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_umax\"), (v ptr, c src) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_umax\") => {\n+            intrinsic_args!(fx, args => (ptr, src); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = src.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -1017,8 +1082,11 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_min\"), (v ptr, c src) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_min\") => {\n+            intrinsic_args!(fx, args => (ptr, src); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = src.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -1035,8 +1103,11 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n-        _ if intrinsic.as_str().starts_with(\"atomic_umin\"), (v ptr, c src) {\n+        }\n+        _ if intrinsic.as_str().starts_with(\"atomic_umin\") => {\n+            intrinsic_args!(fx, args => (ptr, src); intrinsic);\n+            let ptr = ptr.load_scalar(fx);\n+\n             let layout = src.layout();\n             match layout.ty.kind() {\n                 ty::Uint(_) | ty::Int(_) | ty::RawPtr(..) => {}\n@@ -1053,30 +1124,51 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             let old = CValue::by_val(old, layout);\n             ret.write_cvalue(fx, old);\n-        };\n+        }\n+\n+        sym::minnumf32 => {\n+            intrinsic_args!(fx, args => (a, b); intrinsic);\n+            let a = a.load_scalar(fx);\n+            let b = b.load_scalar(fx);\n \n-        minnumf32, (v a, v b) {\n             let val = crate::num::codegen_float_min(fx, a, b);\n             let val = CValue::by_val(val, fx.layout_of(fx.tcx.types.f32));\n             ret.write_cvalue(fx, val);\n-        };\n-        minnumf64, (v a, v b) {\n+        }\n+        sym::minnumf64 => {\n+            intrinsic_args!(fx, args => (a, b); intrinsic);\n+            let a = a.load_scalar(fx);\n+            let b = b.load_scalar(fx);\n+\n             let val = crate::num::codegen_float_min(fx, a, b);\n             let val = CValue::by_val(val, fx.layout_of(fx.tcx.types.f64));\n             ret.write_cvalue(fx, val);\n-        };\n-        maxnumf32, (v a, v b) {\n+        }\n+        sym::maxnumf32 => {\n+            intrinsic_args!(fx, args => (a, b); intrinsic);\n+            let a = a.load_scalar(fx);\n+            let b = b.load_scalar(fx);\n+\n             let val = crate::num::codegen_float_max(fx, a, b);\n             let val = CValue::by_val(val, fx.layout_of(fx.tcx.types.f32));\n             ret.write_cvalue(fx, val);\n-        };\n-        maxnumf64, (v a, v b) {\n+        }\n+        sym::maxnumf64 => {\n+            intrinsic_args!(fx, args => (a, b); intrinsic);\n+            let a = a.load_scalar(fx);\n+            let b = b.load_scalar(fx);\n+\n             let val = crate::num::codegen_float_max(fx, a, b);\n             let val = CValue::by_val(val, fx.layout_of(fx.tcx.types.f64));\n             ret.write_cvalue(fx, val);\n-        };\n+        }\n+\n+        kw::Try => {\n+            intrinsic_args!(fx, args => (f, data, catch_fn); intrinsic);\n+            let f = f.load_scalar(fx);\n+            let data = data.load_scalar(fx);\n+            let _catch_fn = catch_fn.load_scalar(fx);\n \n-        kw.Try, (v f, v data, v _catch_fn) {\n             // FIXME once unwinding is supported, change this to actually catch panics\n             let f_sig = fx.bcx.func.import_signature(Signature {\n                 call_conv: fx.target_config.default_call_conv,\n@@ -1089,20 +1181,30 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             let layout = ret.layout();\n             let ret_val = CValue::const_val(fx, layout, ty::ScalarInt::null(layout.size));\n             ret.write_cvalue(fx, ret_val);\n-        };\n+        }\n \n-        fadd_fast | fsub_fast | fmul_fast | fdiv_fast | frem_fast, (c x, c y) {\n-            let res = crate::num::codegen_float_binop(fx, match intrinsic {\n-                sym::fadd_fast => BinOp::Add,\n-                sym::fsub_fast => BinOp::Sub,\n-                sym::fmul_fast => BinOp::Mul,\n-                sym::fdiv_fast => BinOp::Div,\n-                sym::frem_fast => BinOp::Rem,\n-                _ => unreachable!(),\n-            }, x, y);\n+        sym::fadd_fast | sym::fsub_fast | sym::fmul_fast | sym::fdiv_fast | sym::frem_fast => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n+\n+            let res = crate::num::codegen_float_binop(\n+                fx,\n+                match intrinsic {\n+                    sym::fadd_fast => BinOp::Add,\n+                    sym::fsub_fast => BinOp::Sub,\n+                    sym::fmul_fast => BinOp::Mul,\n+                    sym::fdiv_fast => BinOp::Div,\n+                    sym::frem_fast => BinOp::Rem,\n+                    _ => unreachable!(),\n+                },\n+                x,\n+                y,\n+            );\n             ret.write_cvalue(fx, res);\n-        };\n-        float_to_int_unchecked, (v f) {\n+        }\n+        sym::float_to_int_unchecked => {\n+            intrinsic_args!(fx, args => (f); intrinsic);\n+            let f = f.load_scalar(fx);\n+\n             let res = crate::cast::clif_int_or_float_cast(\n                 fx,\n                 f,\n@@ -1111,66 +1213,74 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 type_sign(ret.layout().ty),\n             );\n             ret.write_cvalue(fx, CValue::by_val(res, ret.layout()));\n-        };\n+        }\n+\n+        sym::raw_eq => {\n+            intrinsic_args!(fx, args => (lhs_ref, rhs_ref); intrinsic);\n+            let lhs_ref = lhs_ref.load_scalar(fx);\n+            let rhs_ref = rhs_ref.load_scalar(fx);\n \n-        raw_eq, (v lhs_ref, v rhs_ref) {\n             let size = fx.layout_of(substs.type_at(0)).layout.size();\n             // FIXME add and use emit_small_memcmp\n-            let is_eq_value =\n-                if size == Size::ZERO {\n-                    // No bytes means they're trivially equal\n-                    fx.bcx.ins().iconst(types::I8, 1)\n-                } else if let Some(clty) = size.bits().try_into().ok().and_then(Type::int) {\n-                    // Can't use `trusted` for these loads; they could be unaligned.\n-                    let mut flags = MemFlags::new();\n-                    flags.set_notrap();\n-                    let lhs_val = fx.bcx.ins().load(clty, flags, lhs_ref, 0);\n-                    let rhs_val = fx.bcx.ins().load(clty, flags, rhs_ref, 0);\n-                    let eq = fx.bcx.ins().icmp(IntCC::Equal, lhs_val, rhs_val);\n-                    fx.bcx.ins().bint(types::I8, eq)\n-                } else {\n-                    // Just call `memcmp` (like slices do in core) when the\n-                    // size is too large or it's not a power-of-two.\n-                    let signed_bytes = i64::try_from(size.bytes()).unwrap();\n-                    let bytes_val = fx.bcx.ins().iconst(fx.pointer_type, signed_bytes);\n-                    let params = vec![AbiParam::new(fx.pointer_type); 3];\n-                    let returns = vec![AbiParam::new(types::I32)];\n-                    let args = &[lhs_ref, rhs_ref, bytes_val];\n-                    let cmp = fx.lib_call(\"memcmp\", params, returns, args)[0];\n-                    let eq = fx.bcx.ins().icmp_imm(IntCC::Equal, cmp, 0);\n-                    fx.bcx.ins().bint(types::I8, eq)\n-                };\n+            let is_eq_value = if size == Size::ZERO {\n+                // No bytes means they're trivially equal\n+                fx.bcx.ins().iconst(types::I8, 1)\n+            } else if let Some(clty) = size.bits().try_into().ok().and_then(Type::int) {\n+                // Can't use `trusted` for these loads; they could be unaligned.\n+                let mut flags = MemFlags::new();\n+                flags.set_notrap();\n+                let lhs_val = fx.bcx.ins().load(clty, flags, lhs_ref, 0);\n+                let rhs_val = fx.bcx.ins().load(clty, flags, rhs_ref, 0);\n+                let eq = fx.bcx.ins().icmp(IntCC::Equal, lhs_val, rhs_val);\n+                fx.bcx.ins().bint(types::I8, eq)\n+            } else {\n+                // Just call `memcmp` (like slices do in core) when the\n+                // size is too large or it's not a power-of-two.\n+                let signed_bytes = i64::try_from(size.bytes()).unwrap();\n+                let bytes_val = fx.bcx.ins().iconst(fx.pointer_type, signed_bytes);\n+                let params = vec![AbiParam::new(fx.pointer_type); 3];\n+                let returns = vec![AbiParam::new(types::I32)];\n+                let args = &[lhs_ref, rhs_ref, bytes_val];\n+                let cmp = fx.lib_call(\"memcmp\", params, returns, args)[0];\n+                let eq = fx.bcx.ins().icmp_imm(IntCC::Equal, cmp, 0);\n+                fx.bcx.ins().bint(types::I8, eq)\n+            };\n             ret.write_cvalue(fx, CValue::by_val(is_eq_value, ret.layout()));\n-        };\n+        }\n+\n+        sym::const_allocate => {\n+            intrinsic_args!(fx, args => (_size, _align); intrinsic);\n \n-        const_allocate, (c _size, c _align) {\n             // returns a null pointer at runtime.\n             let null = fx.bcx.ins().iconst(fx.pointer_type, 0);\n             ret.write_cvalue(fx, CValue::by_val(null, ret.layout()));\n-        };\n+        }\n \n-        const_deallocate, (c _ptr, c _size, c _align) {\n+        sym::const_deallocate => {\n+            intrinsic_args!(fx, args => (_ptr, _size, _align); intrinsic);\n             // nop at runtime.\n-        };\n+        }\n+\n+        sym::black_box => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n \n-        black_box, (c a) {\n             // FIXME implement black_box semantics\n             ret.write_cvalue(fx, a);\n-        };\n+        }\n \n         // FIXME implement variadics in cranelift\n-        va_copy, (o _dest, o _src) {\n+        sym::va_copy | sym::va_arg | sym::va_end => {\n             fx.tcx.sess.span_fatal(\n                 source_info.span,\n                 \"Defining variadic functions is not yet supported by Cranelift\",\n             );\n-        };\n-        va_arg | va_end, (o _valist) {\n-            fx.tcx.sess.span_fatal(\n-                source_info.span,\n-                \"Defining variadic functions is not yet supported by Cranelift\",\n-            );\n-        };\n+        }\n+\n+        _ => {\n+            fx.tcx\n+                .sess\n+                .span_fatal(source_info.span, &format!(\"unsupported intrinsic {}\", intrinsic));\n+        }\n     }\n \n     let ret_block = fx.get_block(destination.unwrap());"}]}