{"sha": "dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkNmFhMDU2ZmM0OTk3ZmNhMGYwMmYyMGJkNGVjZWVlZWZmZmMxYjU=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "github@kazlauskas.me", "date": "2016-01-11T19:17:52Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "github@kazlauskas.me", "date": "2016-01-11T19:17:52Z"}, "message": "Rollup merge of #30538 - oli-obk:kill_unsigned_unary_negation, r=pnkfelix\n\nfixes  #29645", "tree": {"sha": "2b370298c6a314eff4e54e7a8d0a2b5f64fb7083", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b370298c6a314eff4e54e7a8d0a2b5f64fb7083"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5", "html_url": "https://github.com/rust-lang/rust/commit/dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0672ed4e82abb562660c8a6d7183288c15e4526a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0672ed4e82abb562660c8a6d7183288c15e4526a", "html_url": "https://github.com/rust-lang/rust/commit/0672ed4e82abb562660c8a6d7183288c15e4526a"}, {"sha": "bac3eec67c367718c05585b72974c58a66f6abd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/bac3eec67c367718c05585b72974c58a66f6abd0", "html_url": "https://github.com/rust-lang/rust/commit/bac3eec67c367718c05585b72974c58a66f6abd0"}], "stats": {"total": 269, "additions": 179, "deletions": 90}, "files": [{"sha": "825dee9f659f5cad64306b9f2221e00de18e7ff4", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5", "patch": "@@ -38,6 +38,7 @@\n #![feature(staged_api)]\n #![feature(str_char)]\n \n+#[macro_use]\n extern crate syntax;\n #[macro_use]\n extern crate rustc;\n@@ -154,4 +155,5 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     store.register_renamed(\"unknown_features\", \"unused_features\");\n \n     store.register_removed(\"unsigned_negation\", \"replaced by negate_unsigned feature gate\");\n+    store.register_removed(\"negate_unsigned\", \"cast a signed value instead\");\n }"}, {"sha": "891c1aebcdf30704afa57221a73bfaf68c4fb7cb", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 51, "deletions": 33, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(non_snake_case)]\n+\n use middle::{infer};\n use middle::def_id::DefId;\n use middle::subst::Substs;\n@@ -24,13 +26,39 @@ use std::{i8, i16, i32, i64, u8, u16, u32, u64, f32, f64};\n use syntax::{abi, ast};\n use syntax::attr::{self, AttrMetaMethods};\n use syntax::codemap::{self, Span};\n-use syntax::feature_gate::{emit_feature_err, GateIssue};\n use syntax::ast::{TyIs, TyUs, TyI8, TyU8, TyI16, TyU16, TyI32, TyU32, TyI64, TyU64};\n \n use rustc_front::hir;\n use rustc_front::intravisit::{self, Visitor};\n use rustc_front::util::is_shift_binop;\n \n+register_long_diagnostics! {\n+E0519: r##\"\n+It is not allowed to negate an unsigned integer.\n+You can negate a signed integer and cast it to an\n+unsigned integer or use the `!` operator.\n+\n+```\n+let x: usize = -1isize as usize;\n+let y: usize = !0;\n+assert_eq!(x, y);\n+```\n+\n+Alternatively you can use the `Wrapping` newtype\n+or the `wrapping_neg` operation that all\n+integral types support:\n+\n+```\n+use std::num::Wrapping;\n+let x: Wrapping<usize> = -Wrapping(1);\n+let Wrapping(x) = x;\n+let y: usize = 1.wrapping_neg();\n+assert_eq!(x, y);\n+```\n+\n+\"##\n+}\n+\n declare_lint! {\n     UNUSED_COMPARISONS,\n     Warn,\n@@ -73,30 +101,24 @@ impl LateLintPass for TypeLimits {\n     fn check_expr(&mut self, cx: &LateContext, e: &hir::Expr) {\n         match e.node {\n             hir::ExprUnary(hir::UnNeg, ref expr) => {\n-                match expr.node  {\n-                    hir::ExprLit(ref lit) => {\n-                        match lit.node {\n-                            ast::LitInt(_, ast::UnsignedIntLit(_)) => {\n-                                check_unsigned_negation_feature(cx, e.span);\n-                            },\n-                            ast::LitInt(_, ast::UnsuffixedIntLit(_)) => {\n-                                if let ty::TyUint(_) = cx.tcx.node_id_to_type(e.id).sty {\n-                                    check_unsigned_negation_feature(cx, e.span);\n-                                }\n-                            },\n-                            _ => ()\n-                        }\n-                    },\n-                    _ => {\n-                        let t = cx.tcx.node_id_to_type(expr.id);\n-                        match t.sty {\n-                            ty::TyUint(_) => {\n-                                check_unsigned_negation_feature(cx, e.span);\n-                            },\n-                            _ => ()\n-                        }\n+                if let hir::ExprLit(ref lit) = expr.node {\n+                    match lit.node {\n+                        ast::LitInt(_, ast::UnsignedIntLit(_)) => {\n+                            forbid_unsigned_negation(cx, e.span);\n+                        },\n+                        ast::LitInt(_, ast::UnsuffixedIntLit(_)) => {\n+                            if let ty::TyUint(_) = cx.tcx.node_id_to_type(e.id).sty {\n+                                forbid_unsigned_negation(cx, e.span);\n+                            }\n+                        },\n+                        _ => ()\n                     }\n-                };\n+                } else {\n+                    let t = cx.tcx.node_id_to_type(expr.id);\n+                    if let ty::TyUint(_) = t.sty {\n+                        forbid_unsigned_negation(cx, e.span);\n+                    }\n+                }\n                 // propagate negation, if the negation itself isn't negated\n                 if self.negated_expr_id != e.id {\n                     self.negated_expr_id = expr.id;\n@@ -322,15 +344,11 @@ impl LateLintPass for TypeLimits {\n             }\n         }\n \n-        fn check_unsigned_negation_feature(cx: &LateContext, span: Span) {\n-            if !cx.sess().features.borrow().negate_unsigned {\n-                emit_feature_err(\n-                    &cx.sess().parse_sess.span_diagnostic,\n-                    \"negate_unsigned\",\n-                    span,\n-                    GateIssue::Language,\n-                    \"unary negation of unsigned integers may be removed in the future\");\n-            }\n+        fn forbid_unsigned_negation(cx: &LateContext, span: Span) {\n+            cx.sess()\n+              .struct_span_err_with_code(span, \"unary negation of unsigned integer\", \"E0519\")\n+              .span_help(span, \"use a cast or the `!` operator\")\n+              .emit();\n         }\n     }\n }"}, {"sha": "3054c307f36d95cfed856979318c8539571d5883", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5", "patch": "@@ -170,7 +170,7 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Option<u32>, Status\n     (\"slice_patterns\", \"1.0.0\", Some(23121), Active),\n \n     // Allows use of unary negate on unsigned integers, e.g. -e for e: u8\n-    (\"negate_unsigned\", \"1.0.0\", Some(29645), Active),\n+    (\"negate_unsigned\", \"1.0.0\", Some(29645), Removed),\n \n     // Allows the definition of associated constants in `trait` or `impl`\n     // blocks.\n@@ -548,7 +548,6 @@ pub struct Features {\n     pub allow_pushpop_unsafe: bool,\n     pub simd_ffi: bool,\n     pub unmarked_api: bool,\n-    pub negate_unsigned: bool,\n     /// spans of #![feature] attrs for stable language features. for error reporting\n     pub declared_stable_lang_features: Vec<Span>,\n     /// #![feature] attrs for non-language (library) features\n@@ -585,7 +584,6 @@ impl Features {\n             allow_pushpop_unsafe: false,\n             simd_ffi: false,\n             unmarked_api: false,\n-            negate_unsigned: false,\n             declared_stable_lang_features: Vec::new(),\n             declared_lib_features: Vec::new(),\n             const_fn: false,\n@@ -1174,7 +1172,6 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &Handler,\n         allow_pushpop_unsafe: cx.has_feature(\"pushpop_unsafe\"),\n         simd_ffi: cx.has_feature(\"simd_ffi\"),\n         unmarked_api: cx.has_feature(\"unmarked_api\"),\n-        negate_unsigned: cx.has_feature(\"negate_unsigned\"),\n         declared_stable_lang_features: accepted_features,\n         declared_lib_features: unknown_features,\n         const_fn: cx.has_feature(\"const_fn\"),"}, {"sha": "2a2fc2ef080dbf30cacd440ff6d482e0c7eda65d", "filename": "src/test/compile-fail/const-eval-overflow.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow.rs?ref=dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![allow(unused_imports)]\n-#![feature(negate_unsigned)]\n \n // Note: the relevant lint pass here runs before some of the constant\n // evaluation below (e.g. that performed by trans and llvm), so if you\n@@ -65,7 +64,7 @@ const VALS_I64: (i64, i64, i64, i64) =\n      );\n \n const VALS_U8: (u8, u8, u8, u8) =\n-    (-u8::MIN,\n+    (-(u8::MIN as i8) as u8,\n      u8::MIN - 1,\n      //~^ ERROR attempted to sub with overflow\n      u8::MAX + 1,\n@@ -75,7 +74,7 @@ const VALS_U8: (u8, u8, u8, u8) =\n      );\n \n const VALS_U16: (u16, u16, u16, u16) =\n-    (-u16::MIN,\n+    (-(u16::MIN as i16) as u16,\n      u16::MIN - 1,\n      //~^ ERROR attempted to sub with overflow\n      u16::MAX + 1,\n@@ -85,7 +84,7 @@ const VALS_U16: (u16, u16, u16, u16) =\n      );\n \n const VALS_U32: (u32, u32, u32, u32) =\n-    (-u32::MIN,\n+    (-(u32::MIN as i32) as u32,\n      u32::MIN - 1,\n      //~^ ERROR attempted to sub with overflow\n      u32::MAX + 1,\n@@ -95,7 +94,7 @@ const VALS_U32: (u32, u32, u32, u32) =\n      );\n \n const VALS_U64: (u64, u64, u64, u64) =\n-    (-u64::MIN,\n+    (-(u64::MIN as i64) as u64,\n      u64::MIN - 1,\n      //~^ ERROR attempted to sub with overflow\n      u64::MAX + 1,"}, {"sha": "7db7de9cee30cb70d13bdc39ec07c6e7c08eee28", "filename": "src/test/compile-fail/const-eval-overflow0.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-eval-overflow0.rs?ref=dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5", "patch": "@@ -0,0 +1,100 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(unused_imports)]\n+\n+// Note: the relevant lint pass here runs before some of the constant\n+// evaluation below (e.g. that performed by trans and llvm), so if you\n+// change this warn to a deny, then the compiler will exit before\n+// those errors are detected.\n+\n+use std::fmt;\n+use std::{i8, i16, i32, i64, isize};\n+use std::{u8, u16, u32, u64, usize};\n+\n+const VALS_I8: (i8, i8, i8, i8) =\n+    (-i8::MIN,\n+     i8::MIN - 1,\n+     i8::MAX + 1,\n+     i8::MIN * 2,\n+     );\n+\n+const VALS_I16: (i16, i16, i16, i16) =\n+    (-i16::MIN,\n+     i16::MIN - 1,\n+     i16::MAX + 1,\n+     i16::MIN * 2,\n+     );\n+\n+const VALS_I32: (i32, i32, i32, i32) =\n+    (-i32::MIN,\n+     i32::MIN - 1,\n+     i32::MAX + 1,\n+     i32::MIN * 2,\n+     );\n+\n+const VALS_I64: (i64, i64, i64, i64) =\n+    (-i64::MIN,\n+     i64::MIN - 1,\n+     i64::MAX + 1,\n+     i64::MAX * 2,\n+     );\n+\n+const VALS_U8: (u8, u8, u8, u8) =\n+    (-u8::MIN,\n+     //~^ ERROR unary negation of unsigned integer\n+     //~| HELP use a cast or the `!` operator\n+     u8::MIN - 1,\n+     u8::MAX + 1,\n+     u8::MAX * 2,\n+     );\n+\n+const VALS_U16: (u16, u16, u16, u16) =\n+    (-u16::MIN,\n+     //~^ ERROR unary negation of unsigned integer\n+     //~| HELP use a cast or the `!` operator\n+     u16::MIN - 1,\n+     u16::MAX + 1,\n+     u16::MAX * 2,\n+     );\n+\n+const VALS_U32: (u32, u32, u32, u32) =\n+    (-u32::MIN,\n+     //~^ ERROR unary negation of unsigned integer\n+     //~| HELP use a cast or the `!` operator\n+     u32::MIN - 1,\n+     u32::MAX + 1,\n+     u32::MAX * 2,\n+     );\n+\n+const VALS_U64: (u64, u64, u64, u64) =\n+    (-u64::MIN,\n+     //~^ ERROR unary negation of unsigned integer\n+     //~| HELP use a cast or the `!` operator\n+     u64::MIN - 1,\n+     u64::MAX + 1,\n+     u64::MAX * 2,\n+     );\n+\n+fn main() {\n+    foo(VALS_I8);\n+    foo(VALS_I16);\n+    foo(VALS_I32);\n+    foo(VALS_I64);\n+\n+    foo(VALS_U8);\n+    foo(VALS_U16);\n+    foo(VALS_U32);\n+    foo(VALS_U64);\n+}\n+\n+fn foo<T:fmt::Debug>(x: T) {\n+    println!(\"{:?}\", x);\n+}"}, {"sha": "84a27a382006988820be6dac882733a5b7b3c9f0", "filename": "src/test/compile-fail/enum-discrim-too-small.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5/src%2Ftest%2Fcompile-fail%2Fenum-discrim-too-small.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5/src%2Ftest%2Fcompile-fail%2Fenum-discrim-too-small.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-discrim-too-small.rs?ref=dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(negate_unsigned)]\n \n #[repr(u8)] //~ NOTE discriminant type specified here\n enum Eu8 {"}, {"sha": "15cc17b19db33bfc9bb1b2695d95fa6bdfb3df20", "filename": "src/test/compile-fail/feature-gate-negate-unsigned.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-negate-unsigned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-negate-unsigned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-negate-unsigned.rs?ref=dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test that negating unsigned integers is gated by `negate_unsigned` feature\n-// gate\n+// Test that negating unsigned integers doesn't compile\n \n struct S;\n impl std::ops::Neg for S {\n@@ -18,21 +17,26 @@ impl std::ops::Neg for S {\n }\n \n const _MAX: usize = -1;\n-//~^ ERROR unary negation of unsigned integers may be removed in the future\n+//~^ ERROR unary negation of unsigned integer\n+//~| HELP use a cast or the `!` operator\n \n fn main() {\n     let a = -1;\n-    //~^ ERROR unary negation of unsigned integers may be removed in the future\n+    //~^ ERROR unary negation of unsigned integer\n+    //~| HELP use a cast or the `!` operator\n     let _b : u8 = a; // for infering variable a to u8.\n \n     -a;\n-    //~^ ERROR unary negation of unsigned integers may be removed in the future\n+    //~^ ERROR unary negation of unsigned integer\n+    //~| HELP use a cast or the `!` operator\n \n     let _d = -1u8;\n-    //~^ ERROR unary negation of unsigned integers may be removed in the future\n+    //~^ ERROR unary negation of unsigned integer\n+    //~| HELP use a cast or the `!` operator\n \n     for _ in -10..10u8 {}\n-    //~^ ERROR unary negation of unsigned integers may be removed in the future\n+    //~^ ERROR unary negation of unsigned integer\n+    //~| HELP use a cast or the `!` operator\n \n     -S; // should not trigger the gate; issue 26840\n }"}, {"sha": "0b414ad73db6f9109bd33fc5106102bae088e7e5", "filename": "src/test/compile-fail/lint-type-limits.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs?ref=dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(negate_unsigned)]\n #![allow(dead_code)]\n-#![feature(negate_unsigned)]\n \n // compile-flags: -D unused-comparisons\n fn main() { }"}, {"sha": "ac24ed8d9160482dd16b583ae006eb512cd477ab", "filename": "src/test/run-pass/bitwise.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5/src%2Ftest%2Frun-pass%2Fbitwise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5/src%2Ftest%2Frun-pass%2Fbitwise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitwise.rs?ref=dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5", "patch": "@@ -8,16 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(negate_unsigned)]\n-\n #[cfg(any(target_arch = \"x86\", target_arch = \"arm\"))]\n fn target() {\n-    assert_eq!(-1000 as usize >> 3_usize, 536870787_usize);\n+    assert_eq!(-1000isize as usize >> 3_usize, 536870787_usize);\n }\n \n #[cfg(any(target_arch = \"x86_64\", target_arch = \"aarch64\"))]\n fn target() {\n-    assert_eq!(-1000 as usize >> 3_usize, 2305843009213693827_usize);\n+    assert_eq!(-1000isize as usize >> 3_usize, 2305843009213693827_usize);\n }\n \n fn general() {"}, {"sha": "759dc515456de1784a2421661821f348a7b4a16d", "filename": "src/test/run-pass/intrinsics-integer.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs?ref=dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(negate_unsigned)]\n #![feature(intrinsics)]\n \n mod rusti {\n@@ -45,10 +43,10 @@ pub fn main() {\n         assert_eq!(ctpop(100u32), 3); assert_eq!(ctpop(100i32), 3);\n         assert_eq!(ctpop(100u64), 3); assert_eq!(ctpop(100i64), 3);\n \n-        assert_eq!(ctpop(-1u8), 8); assert_eq!(ctpop(-1i8), 8);\n-        assert_eq!(ctpop(-1u16), 16); assert_eq!(ctpop(-1i16), 16);\n-        assert_eq!(ctpop(-1u32), 32); assert_eq!(ctpop(-1i32), 32);\n-        assert_eq!(ctpop(-1u64), 64); assert_eq!(ctpop(-1i64), 64);\n+        assert_eq!(ctpop(-1i8 as u8), 8); assert_eq!(ctpop(-1i8), 8);\n+        assert_eq!(ctpop(-1i16 as u16), 16); assert_eq!(ctpop(-1i16), 16);\n+        assert_eq!(ctpop(-1i32 as u32), 32); assert_eq!(ctpop(-1i32), 32);\n+        assert_eq!(ctpop(-1i64 as u64), 64); assert_eq!(ctpop(-1i64), 64);\n \n         assert_eq!(ctlz(0u8), 8); assert_eq!(ctlz(0i8), 8);\n         assert_eq!(ctlz(0u16), 16); assert_eq!(ctlz(0i16), 16);\n@@ -70,10 +68,10 @@ pub fn main() {\n         assert_eq!(ctlz(100u32), 25); assert_eq!(ctlz(100i32), 25);\n         assert_eq!(ctlz(100u64), 57); assert_eq!(ctlz(100i64), 57);\n \n-        assert_eq!(cttz(-1u8), 0); assert_eq!(cttz(-1i8), 0);\n-        assert_eq!(cttz(-1u16), 0); assert_eq!(cttz(-1i16), 0);\n-        assert_eq!(cttz(-1u32), 0); assert_eq!(cttz(-1i32), 0);\n-        assert_eq!(cttz(-1u64), 0); assert_eq!(cttz(-1i64), 0);\n+        assert_eq!(cttz(-1i8 as u8), 0); assert_eq!(cttz(-1i8), 0);\n+        assert_eq!(cttz(-1i16 as u16), 0); assert_eq!(cttz(-1i16), 0);\n+        assert_eq!(cttz(-1i32 as u32), 0); assert_eq!(cttz(-1i32), 0);\n+        assert_eq!(cttz(-1i64 as u64), 0); assert_eq!(cttz(-1i64), 0);\n \n         assert_eq!(cttz(0u8), 8); assert_eq!(cttz(0i8), 8);\n         assert_eq!(cttz(0u16), 16); assert_eq!(cttz(0i16), 16);"}, {"sha": "cff260c3ba63e01f9cafd8dbeffb53d5fe6122f8", "filename": "src/test/run-pass/unary-minus-suffix-inference.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5/src%2Ftest%2Frun-pass%2Funary-minus-suffix-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5/src%2Ftest%2Frun-pass%2Funary-minus-suffix-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funary-minus-suffix-inference.rs?ref=dd6aa056fc4997fca0f02f20bd4eceeeefffc1b5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(negate_unsigned)]\n-\n pub fn main() {\n     let a = 1;\n     let a_neg: i8 = -a;\n@@ -30,26 +28,4 @@ pub fn main() {\n     let e = 1;\n     let e_neg: isize = -e;\n     println!(\"{}\", e_neg);\n-\n-    // intentional overflows\n-\n-    let f = 1;\n-    let f_neg: u8 = -f;\n-    println!(\"{}\", f_neg);\n-\n-    let g = 1;\n-    let g_neg: u16 = -g;\n-    println!(\"{}\", g_neg);\n-\n-    let h = 1;\n-    let h_neg: u32 = -h;\n-    println!(\"{}\", h_neg);\n-\n-    let i = 1;\n-    let i_neg: u64 = -i;\n-    println!(\"{}\", i_neg);\n-\n-    let j = 1;\n-    let j_neg: usize = -j;\n-    println!(\"{}\", j_neg);\n }"}]}