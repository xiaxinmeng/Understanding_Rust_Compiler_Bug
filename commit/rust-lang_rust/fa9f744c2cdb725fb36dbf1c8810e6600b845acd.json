{"sha": "fa9f744c2cdb725fb36dbf1c8810e6600b845acd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhOWY3NDRjMmNkYjcyNWZiMzZkYmYxYzg4MTBlNjYwMGI4NDVhY2Q=", "commit": {"author": {"name": "Vincent Dal Maso", "email": "vincent.dalmaso.ext@delair-tech.com", "date": "2019-05-20T08:22:13Z"}, "committer": {"name": "Vincent Dal Maso", "email": "vincent.dalmaso.ext@delair-tech.com", "date": "2019-05-21T11:08:19Z"}, "message": "Add the common case search\n\nChanges:\n- Refactor the common case search into a function.\n- Fix the useless Option around the vec in the search_same_list.", "tree": {"sha": "7b880dae77775891de044be54f42716a3a080097", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b880dae77775891de044be54f42716a3a080097"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa9f744c2cdb725fb36dbf1c8810e6600b845acd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa9f744c2cdb725fb36dbf1c8810e6600b845acd", "html_url": "https://github.com/rust-lang/rust/commit/fa9f744c2cdb725fb36dbf1c8810e6600b845acd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa9f744c2cdb725fb36dbf1c8810e6600b845acd/comments", "author": null, "committer": null, "parents": [{"sha": "bfb230369e53a3959698a5e3ef1ff75d17ac4a41", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfb230369e53a3959698a5e3ef1ff75d17ac4a41", "html_url": "https://github.com/rust-lang/rust/commit/bfb230369e53a3959698a5e3ef1ff75d17ac4a41"}], "stats": {"total": 269, "additions": 172, "deletions": 97}, "files": [{"sha": "c1e06be7d6bce81caa1f8a2f24387e1d85577cbf", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 52, "deletions": 74, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/fa9f744c2cdb725fb36dbf1c8810e6600b845acd/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9f744c2cdb725fb36dbf1c8810e6600b845acd/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=fa9f744c2cdb725fb36dbf1c8810e6600b845acd", "patch": "@@ -152,7 +152,7 @@ fn lint_same_cond(cx: &LateContext<'_, '_>, conds: &[&Expr]) {\n     let eq: &dyn Fn(&&Expr, &&Expr) -> bool =\n         &|&lhs, &rhs| -> bool { SpanlessEq::new(cx).ignore_fn().eq_expr(lhs, rhs) };\n \n-    if let Some((i, j)) = search_same(conds, hash, eq) {\n+    for (i, j) in search_same(conds, hash, eq) {\n         span_note_and_lint(\n             cx,\n             IFS_SAME_COND,\n@@ -185,48 +185,47 @@ fn lint_match_arms(cx: &LateContext<'_, '_>, expr: &Expr) {\n         };\n \n         let indexed_arms: Vec<(usize, &Arm)> = arms.iter().enumerate().collect();\n-        search_same_list(&indexed_arms, hash, eq).map(|item| {\n-            for match_expr in item {\n-                let (&(_, i), &(_, j)) = match_expr;\n-\n-                span_lint_and_then(\n-                    cx,\n-                    MATCH_SAME_ARMS,\n-                    j.body.span,\n-                    \"this `match` has identical arm bodies\",\n-                    |db| {\n-                        db.span_note(i.body.span, \"same as this\");\n-\n-                        // Note: this does not use `span_suggestion` on purpose:\n-                        // there is no clean way\n-                        // to remove the other arm. Building a span and suggest to replace it to \"\"\n-                        // makes an even more confusing error message. Also in order not to make up a\n-                        // span for the whole pattern, the suggestion is only shown when there is only\n-                        // one pattern. The user should know about `|` if they are already using it\u2026\n-\n-                        if i.pats.len() == 1 && j.pats.len() == 1 {\n-                            let lhs = snippet(cx, i.pats[0].span, \"<pat1>\");\n-                            let rhs = snippet(cx, j.pats[0].span, \"<pat2>\");\n-\n-                            if let PatKind::Wild = j.pats[0].node {\n-                                // if the last arm is _, then i could be integrated into _\n-                                // note that i.pats[0] cannot be _, because that would mean that we're\n-                                // hiding all the subsequent arms, and rust won't compile\n-                                db.span_note(\n-                                    i.body.span,\n-                                    &format!(\n-                                        \"`{}` has the same arm body as the `_` wildcard, consider removing it`\",\n-                                        lhs\n-                                    ),\n-                                );\n-                            } else {\n-                                db.span_note(i.body.span, &format!(\"consider refactoring into `{} | {}`\", lhs, rhs));\n-                            }\n+        for (&(_, i), &(_, j)) in search_same(&indexed_arms, hash, eq) {\n+            span_lint_and_then(\n+                cx,\n+                MATCH_SAME_ARMS,\n+                j.body.span,\n+                \"this `match` has identical arm bodies\",\n+                |db| {\n+                    db.span_note(i.body.span, \"same as this\");\n+\n+                    // Note: this does not use `span_suggestion` on purpose:\n+                    // there is no clean way\n+                    // to remove the other arm. Building a span and suggest to replace it to \"\"\n+                    // makes an even more confusing error message. Also in order not to make up a\n+                    // span for the whole pattern, the suggestion is only shown when there is only\n+                    // one pattern. The user should know about `|` if they are already using it\u2026\n+\n+                    if i.pats.len() == 1 && j.pats.len() == 1 {\n+                        let lhs = snippet(cx, i.pats[0].span, \"<pat1>\");\n+                        let rhs = snippet(cx, j.pats[0].span, \"<pat2>\");\n+\n+                        if let PatKind::Wild = j.pats[0].node {\n+                            // if the last arm is _, then i could be integrated into _\n+                            // note that i.pats[0] cannot be _, because that would mean that we're\n+                            // hiding all the subsequent arms, and rust won't compile\n+                            db.span_note(\n+                                i.body.span,\n+                                &format!(\n+                                    \"`{}` has the same arm body as the `_` wildcard, consider removing it`\",\n+                                    lhs\n+                                ),\n+                            );\n+                        } else {\n+                            db.span_help(\n+                                i.pats[0].span,\n+                                &format!(\"consider refactoring into `{} | {}`\", lhs, rhs),\n+                            );\n                         }\n-                    },\n-                );\n-            }\n-        });\n+                    }\n+                },\n+            );\n+        }\n     }\n }\n \n@@ -327,49 +326,32 @@ where\n     None\n }\n \n-fn search_same<T, Hash, Eq>(exprs: &[T], hash: Hash, eq: Eq) -> Option<(&T, &T)>\n+fn search_common_cases<'a, T, Eq>(exprs: &'a [T], eq: &Eq) -> Option<(&'a T, &'a T)>\n where\n-    Hash: Fn(&T) -> u64,\n     Eq: Fn(&T, &T) -> bool,\n {\n-    // common cases\n     if exprs.len() < 2 {\n-        return None;\n+        None\n     } else if exprs.len() == 2 {\n-        return if eq(&exprs[0], &exprs[1]) {\n+        if eq(&exprs[0], &exprs[1]) {\n             Some((&exprs[0], &exprs[1]))\n         } else {\n             None\n-        };\n-    }\n-\n-    let mut map: FxHashMap<_, Vec<&_>> =\n-        FxHashMap::with_capacity_and_hasher(exprs.len(), BuildHasherDefault::default());\n-\n-    for expr in exprs {\n-        match map.entry(hash(expr)) {\n-            Entry::Occupied(mut o) => {\n-                for o in o.get() {\n-                    if eq(o, expr) {\n-                        return Some((o, expr));\n-                    }\n-                }\n-                o.get_mut().push(expr);\n-            },\n-            Entry::Vacant(v) => {\n-                v.insert(vec![expr]);\n-            },\n         }\n+    } else {\n+        None\n     }\n-\n-    None\n }\n \n-fn search_same_list<T, Hash, Eq>(exprs: &[T], hash: Hash, eq: Eq) -> Option<Vec<(&T, &T)>>\n+fn search_same<T, Hash, Eq>(exprs: &[T], hash: Hash, eq: Eq) -> Vec<(&T, &T)>\n where\n     Hash: Fn(&T) -> u64,\n     Eq: Fn(&T, &T) -> bool,\n {\n+    if let Some(expr) = search_common_cases(&exprs, &eq) {\n+        return vec![expr];\n+    }\n+\n     let mut match_expr_list: Vec<(&T, &T)> = Vec::new();\n \n     let mut map: FxHashMap<_, Vec<&_>> =\n@@ -391,9 +373,5 @@ where\n         }\n     }\n \n-    if match_expr_list.is_empty() {\n-        None\n-    } else {\n-        Some(match_expr_list)\n-    }\n+    match_expr_list\n }"}, {"sha": "baba4367fb407619400b9f3a6f61db3635bd7d9d", "filename": "tests/ui/match_same_arms.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa9f744c2cdb725fb36dbf1c8810e6600b845acd/tests%2Fui%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa9f744c2cdb725fb36dbf1c8810e6600b845acd/tests%2Fui%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms.rs?ref=fa9f744c2cdb725fb36dbf1c8810e6600b845acd", "patch": "@@ -116,6 +116,14 @@ fn match_same_arms() {\n         52 => 2, //~ ERROR match arms have same body\n         _ => 0,\n     };\n+\n+    let _ = match 42 {\n+        1 => 2,\n+        2 => 2, //~ ERROR 2rd matched arms have same body\n+        3 => 2, //~ ERROR 3rd matched arms have same body\n+        4 => 3,\n+        _ => 0,\n+    };\n }\n \n fn main() {}"}, {"sha": "d7545fed586c25fa1eb0a4fc4c0a92c5e6704a91", "filename": "tests/ui/match_same_arms.stderr", "status": "modified", "additions": 112, "deletions": 23, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/fa9f744c2cdb725fb36dbf1c8810e6600b845acd/tests%2Fui%2Fmatch_same_arms.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa9f744c2cdb725fb36dbf1c8810e6600b845acd/tests%2Fui%2Fmatch_same_arms.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms.stderr?ref=fa9f744c2cdb725fb36dbf1c8810e6600b845acd", "patch": "@@ -1,10 +1,48 @@\n+error: this `match` has identical arm bodies\n+  --> $DIR/match_same_arms.rs:37:14\n+   |\n+LL |           _ => {\n+   |  ______________^\n+LL | |             //~ ERROR match arms have same body\n+LL | |             foo();\n+LL | |             let mut a = 42 + [23].len() as i32;\n+...  |\n+LL | |             a\n+LL | |         },\n+   | |_________^\n+   |\n+   = note: `-D clippy::match-same-arms` implied by `-D warnings`\n+note: same as this\n+  --> $DIR/match_same_arms.rs:28:15\n+   |\n+LL |           42 => {\n+   |  _______________^\n+LL | |             foo();\n+LL | |             let mut a = 42 + [23].len() as i32;\n+LL | |             if true {\n+...  |\n+LL | |             a\n+LL | |         },\n+   | |_________^\n+note: `42` has the same arm body as the `_` wildcard, consider removing it`\n+  --> $DIR/match_same_arms.rs:28:15\n+   |\n+LL |           42 => {\n+   |  _______________^\n+LL | |             foo();\n+LL | |             let mut a = 42 + [23].len() as i32;\n+LL | |             if true {\n+...  |\n+LL | |             a\n+LL | |         },\n+   | |_________^\n+\n error: this `match` has identical arm bodies\n   --> $DIR/match_same_arms.rs:52:14\n    |\n LL |         _ => 0, //~ ERROR match arms have same body\n    |              ^\n    |\n-   = note: `-D clippy::match-same-arms` implied by `-D warnings`\n note: same as this\n   --> $DIR/match_same_arms.rs:50:19\n    |\n@@ -27,11 +65,11 @@ note: same as this\n    |\n LL |         42 => foo(),\n    |               ^^^^^\n-note: consider refactoring into `42 | 51`\n-  --> $DIR/match_same_arms.rs:56:15\n+help: consider refactoring into `42 | 51`\n+  --> $DIR/match_same_arms.rs:56:9\n    |\n LL |         42 => foo(),\n-   |               ^^^^^\n+   |         ^^\n \n error: this `match` has identical arm bodies\n   --> $DIR/match_same_arms.rs:63:17\n@@ -44,11 +82,11 @@ note: same as this\n    |\n LL |         Some(_) => 24,\n    |                    ^^\n-note: consider refactoring into `Some(_) | None`\n-  --> $DIR/match_same_arms.rs:62:20\n+help: consider refactoring into `Some(_) | None`\n+  --> $DIR/match_same_arms.rs:62:9\n    |\n LL |         Some(_) => 24,\n-   |                    ^^\n+   |         ^^^^^^^\n \n error: this `match` has identical arm bodies\n   --> $DIR/match_same_arms.rs:85:28\n@@ -61,11 +99,11 @@ note: same as this\n    |\n LL |         (Some(a), None) => bar(a),\n    |                            ^^^^^^\n-note: consider refactoring into `(Some(a), None) | (None, Some(a))`\n-  --> $DIR/match_same_arms.rs:84:28\n+help: consider refactoring into `(Some(a), None) | (None, Some(a))`\n+  --> $DIR/match_same_arms.rs:84:9\n    |\n LL |         (Some(a), None) => bar(a),\n-   |                            ^^^^^^\n+   |         ^^^^^^^^^^^^^^^\n \n error: this `match` has identical arm bodies\n   --> $DIR/match_same_arms.rs:91:26\n@@ -78,11 +116,11 @@ note: same as this\n    |\n LL |         (Some(a), ..) => bar(a),\n    |                          ^^^^^^\n-note: consider refactoring into `(Some(a), ..) | (.., Some(a))`\n-  --> $DIR/match_same_arms.rs:90:26\n+help: consider refactoring into `(Some(a), ..) | (.., Some(a))`\n+  --> $DIR/match_same_arms.rs:90:9\n    |\n LL |         (Some(a), ..) => bar(a),\n-   |                          ^^^^^^\n+   |         ^^^^^^^^^^^^^\n \n error: this `match` has identical arm bodies\n   --> $DIR/match_same_arms.rs:97:20\n@@ -95,11 +133,11 @@ note: same as this\n    |\n LL |         (1, .., 3) => 42,\n    |                       ^^\n-note: consider refactoring into `(1, .., 3) | (.., 3)`\n-  --> $DIR/match_same_arms.rs:96:23\n+help: consider refactoring into `(1, .., 3) | (.., 3)`\n+  --> $DIR/match_same_arms.rs:96:9\n    |\n LL |         (1, .., 3) => 42,\n-   |                       ^^\n+   |         ^^^^^^^^^^\n \n error: this `match` has identical arm bodies\n   --> $DIR/match_same_arms.rs:114:15\n@@ -112,11 +150,11 @@ note: same as this\n    |\n LL |         42 => 1,\n    |               ^\n-note: consider refactoring into `42 | 51`\n-  --> $DIR/match_same_arms.rs:113:15\n+help: consider refactoring into `42 | 51`\n+  --> $DIR/match_same_arms.rs:113:9\n    |\n LL |         42 => 1,\n-   |               ^\n+   |         ^^\n \n error: this `match` has identical arm bodies\n   --> $DIR/match_same_arms.rs:116:15\n@@ -129,11 +167,62 @@ note: same as this\n    |\n LL |         41 => 2,\n    |               ^\n-note: consider refactoring into `41 | 52`\n-  --> $DIR/match_same_arms.rs:115:15\n+help: consider refactoring into `41 | 52`\n+  --> $DIR/match_same_arms.rs:115:9\n    |\n LL |         41 => 2,\n-   |               ^\n+   |         ^^\n+\n+error: this `match` has identical arm bodies\n+  --> $DIR/match_same_arms.rs:122:14\n+   |\n+LL |         2 => 2, //~ ERROR 2rd matched arms have same body\n+   |              ^\n+   |\n+note: same as this\n+  --> $DIR/match_same_arms.rs:121:14\n+   |\n+LL |         1 => 2,\n+   |              ^\n+help: consider refactoring into `1 | 2`\n+  --> $DIR/match_same_arms.rs:121:9\n+   |\n+LL |         1 => 2,\n+   |         ^\n+\n+error: this `match` has identical arm bodies\n+  --> $DIR/match_same_arms.rs:123:14\n+   |\n+LL |         3 => 2, //~ ERROR 3rd matched arms have same body\n+   |              ^\n+   |\n+note: same as this\n+  --> $DIR/match_same_arms.rs:121:14\n+   |\n+LL |         1 => 2,\n+   |              ^\n+help: consider refactoring into `1 | 3`\n+  --> $DIR/match_same_arms.rs:121:9\n+   |\n+LL |         1 => 2,\n+   |         ^\n+\n+error: this `match` has identical arm bodies\n+  --> $DIR/match_same_arms.rs:123:14\n+   |\n+LL |         3 => 2, //~ ERROR 3rd matched arms have same body\n+   |              ^\n+   |\n+note: same as this\n+  --> $DIR/match_same_arms.rs:122:14\n+   |\n+LL |         2 => 2, //~ ERROR 2rd matched arms have same body\n+   |              ^\n+help: consider refactoring into `2 | 3`\n+  --> $DIR/match_same_arms.rs:122:9\n+   |\n+LL |         2 => 2, //~ ERROR 2rd matched arms have same body\n+   |         ^\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 12 previous errors\n "}]}