{"sha": "a93bcdc30771340dfff914a1cf48556886ad33a6", "node_id": "C_kwDOAAsO6NoAKGE5M2JjZGMzMDc3MTM0MGRmZmY5MTRhMWNmNDg1NTY4ODZhZDMzYTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-02T21:40:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-02T21:40:29Z"}, "message": "Auto merge of #109849 - scottmcm:more-fieldidx-rebase, r=oli-obk\n\nUse `FieldIdx` in various things related to aggregates\n\nShrank `AggregateKind` by 8 bytes on x64, since the active field of a union is tracked as an `Option<FieldIdx>` instead of `Option<usize>`.\n\nPart 3/? of https://github.com/rust-lang/compiler-team/issues/606\n\n[`IndexSlice`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_index/vec/struct.IndexVec.html#deref-methods-IndexSlice%3CI,+T%3E) was added in https://github.com/rust-lang/rust/pull/109787", "tree": {"sha": "af18945bacc5061e824a46c8dfa5dce862c9657b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af18945bacc5061e824a46c8dfa5dce862c9657b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a93bcdc30771340dfff914a1cf48556886ad33a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a93bcdc30771340dfff914a1cf48556886ad33a6", "html_url": "https://github.com/rust-lang/rust/commit/a93bcdc30771340dfff914a1cf48556886ad33a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a93bcdc30771340dfff914a1cf48556886ad33a6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a8a131e9509c478ece1c58fe0ea2d49463d2300", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a8a131e9509c478ece1c58fe0ea2d49463d2300", "html_url": "https://github.com/rust-lang/rust/commit/3a8a131e9509c478ece1c58fe0ea2d49463d2300"}, {"sha": "b5b6def021d37c5f1cb7e06c1cf6915bcbcd53b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5b6def021d37c5f1cb7e06c1cf6915bcbcd53b1", "html_url": "https://github.com/rust-lang/rust/commit/b5b6def021d37c5f1cb7e06c1cf6915bcbcd53b1"}], "stats": {"total": 97, "additions": 51, "deletions": 46}, "files": [{"sha": "7bd4331c5ed92b79130535a45e05b7b6a665b565", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a93bcdc30771340dfff914a1cf48556886ad33a6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93bcdc30771340dfff914a1cf48556886ad33a6/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=a93bcdc30771340dfff914a1cf48556886ad33a6", "patch": "@@ -6,6 +6,7 @@ use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, Namespace};\n use rustc_hir::GeneratorKind;\n+use rustc_index::vec::IndexSlice;\n use rustc_infer::infer::{LateBoundRegionConversionTime, TyCtxtInferExt};\n use rustc_middle::mir::tcx::PlaceTy;\n use rustc_middle::mir::{\n@@ -825,7 +826,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     debug!(\"move_spans: def_id={:?} place={:?}\", closure_def_id, place);\n                     let places = &[Operand::Move(place)];\n                     if let Some((args_span, generator_kind, capture_kind_span, path_span)) =\n-                        self.closure_span(closure_def_id, moved_place, places)\n+                        self.closure_span(closure_def_id, moved_place, IndexSlice::from_raw(places))\n                     {\n                         return ClosureUse {\n                             generator_kind,\n@@ -975,7 +976,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         &self,\n         def_id: LocalDefId,\n         target_place: PlaceRef<'tcx>,\n-        places: &[Operand<'tcx>],\n+        places: &IndexSlice<FieldIdx, Operand<'tcx>>,\n     ) -> Option<(Span, Option<GeneratorKind>, Span, Span)> {\n         debug!(\n             \"closure_span: def_id={:?} target_place={:?} places={:?}\","}, {"sha": "ba322425089a3e68281e5ce5e0d1c477d708adcf", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a93bcdc30771340dfff914a1cf48556886ad33a6/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93bcdc30771340dfff914a1cf48556886ad33a6/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=a93bcdc30771340dfff914a1cf48556886ad33a6", "patch": "@@ -1343,7 +1343,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             self.infcx.tcx.mir_borrowck(def_id);\n                         debug!(\"{:?} used_mut_upvars={:?}\", def_id, used_mut_upvars);\n                         for field in used_mut_upvars {\n-                            self.propagate_closure_used_mut_upvar(&operands[field.index()]);\n+                            self.propagate_closure_used_mut_upvar(&operands[*field]);\n                         }\n                     }\n                     AggregateKind::Adt(..)"}, {"sha": "f3fe5a6cada16029101376cf5304e997b8e8665f", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a93bcdc30771340dfff914a1cf48556886ad33a6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93bcdc30771340dfff914a1cf48556886ad33a6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=a93bcdc30771340dfff914a1cf48556886ad33a6", "patch": "@@ -14,7 +14,7 @@ use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::lang_items::LangItem;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::{IndexSlice, IndexVec};\n use rustc_infer::infer::canonical::QueryRegionConstraints;\n use rustc_infer::infer::outlives::env::RegionBoundPairs;\n use rustc_infer::infer::region_constraints::RegionConstraintData;\n@@ -1716,7 +1716,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     fn aggregate_field_ty(\n         &mut self,\n         ak: &AggregateKind<'tcx>,\n-        field_index: usize,\n+        field_index: FieldIdx,\n         location: Location,\n     ) -> Result<Ty<'tcx>, FieldAccessError> {\n         let tcx = self.tcx();\n@@ -1725,16 +1725,15 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             AggregateKind::Adt(adt_did, variant_index, substs, _, active_field_index) => {\n                 let def = tcx.adt_def(adt_did);\n                 let variant = &def.variant(variant_index);\n-                let adj_field_index =\n-                    FieldIdx::from_usize(active_field_index.unwrap_or(field_index));\n+                let adj_field_index = active_field_index.unwrap_or(field_index);\n                 if let Some(field) = variant.fields.get(adj_field_index) {\n                     Ok(self.normalize(field.ty(tcx, substs), location))\n                 } else {\n                     Err(FieldAccessError::OutOfRange { field_count: variant.fields.len() })\n                 }\n             }\n             AggregateKind::Closure(_, substs) => {\n-                match substs.as_closure().upvar_tys().nth(field_index) {\n+                match substs.as_closure().upvar_tys().nth(field_index.as_usize()) {\n                     Some(ty) => Ok(ty),\n                     None => Err(FieldAccessError::OutOfRange {\n                         field_count: substs.as_closure().upvar_tys().count(),\n@@ -1745,7 +1744,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 // It doesn't make sense to look at a field beyond the prefix;\n                 // these require a variant index, and are not initialized in\n                 // aggregate rvalues.\n-                match substs.as_generator().prefix_tys().nth(field_index) {\n+                match substs.as_generator().prefix_tys().nth(field_index.as_usize()) {\n                     Some(ty) => Ok(ty),\n                     None => Err(FieldAccessError::OutOfRange {\n                         field_count: substs.as_generator().prefix_tys().count(),\n@@ -2350,7 +2349,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         body: &Body<'tcx>,\n         rvalue: &Rvalue<'tcx>,\n         aggregate_kind: &AggregateKind<'tcx>,\n-        operands: &[Operand<'tcx>],\n+        operands: &IndexSlice<FieldIdx, Operand<'tcx>>,\n         location: Location,\n     ) {\n         let tcx = self.tcx();\n@@ -2362,16 +2361,16 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             return;\n         }\n \n-        for (i, operand) in operands.iter().enumerate() {\n+        for (i, operand) in operands.iter_enumerated() {\n             let field_ty = match self.aggregate_field_ty(aggregate_kind, i, location) {\n                 Ok(field_ty) => field_ty,\n                 Err(FieldAccessError::OutOfRange { field_count }) => {\n                     span_mirbug!(\n                         self,\n                         rvalue,\n                         \"accessed field #{} but variant only has {}\",\n-                        i,\n-                        field_count\n+                        i.as_u32(),\n+                        field_count,\n                     );\n                     continue;\n                 }"}, {"sha": "2630f02e6eb317102d6d5b70c873c6ca1d9811f6", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a93bcdc30771340dfff914a1cf48556886ad33a6/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93bcdc30771340dfff914a1cf48556886ad33a6/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=a93bcdc30771340dfff914a1cf48556886ad33a6", "patch": "@@ -802,14 +802,15 @@ fn codegen_stmt<'tcx>(\n                     if active_field_index.is_some() {\n                         assert_eq!(operands.len(), 1);\n                     }\n-                    for (i, operand) in operands.iter().enumerate() {\n+                    for (i, operand) in operands.iter_enumerated() {\n                         let operand = codegen_operand(fx, operand);\n                         let field_index = active_field_index.unwrap_or(i);\n                         let to = if let mir::AggregateKind::Array(_) = **kind {\n-                            let index = fx.bcx.ins().iconst(fx.pointer_type, field_index as i64);\n+                            let array_index = i64::from(field_index.as_u32());\n+                            let index = fx.bcx.ins().iconst(fx.pointer_type, array_index);\n                             variant_dest.place_index(fx, index)\n                         } else {\n-                            variant_dest.place_field(fx, FieldIdx::new(field_index))\n+                            variant_dest.place_field(fx, field_index)\n                         };\n                         to.write_cvalue(fx, operand);\n                     }"}, {"sha": "c5ca7936a2b458cbb9aa5af2d5f71c94c7d7c934", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a93bcdc30771340dfff914a1cf48556886ad33a6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93bcdc30771340dfff914a1cf48556886ad33a6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=a93bcdc30771340dfff914a1cf48556886ad33a6", "patch": "@@ -306,9 +306,9 @@ pub fn coerce_unsized_into<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         (&ty::Adt(def_a, _), &ty::Adt(def_b, _)) => {\n             assert_eq!(def_a, def_b);\n \n-            for i in 0..def_a.variant(FIRST_VARIANT).fields.len() {\n-                let src_f = src.project_field(bx, i);\n-                let dst_f = dst.project_field(bx, i);\n+            for i in def_a.variant(FIRST_VARIANT).fields.indices() {\n+                let src_f = src.project_field(bx, i.as_usize());\n+                let dst_f = dst.project_field(bx, i.as_usize());\n \n                 if dst_f.layout.is_zst() {\n                     continue;"}, {"sha": "d49d23afe513487b0ef431894de0a42a7f37d7ca", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a93bcdc30771340dfff914a1cf48556886ad33a6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93bcdc30771340dfff914a1cf48556886ad33a6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=a93bcdc30771340dfff914a1cf48556886ad33a6", "patch": "@@ -123,16 +123,16 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 if active_field_index.is_some() {\n                     assert_eq!(operands.len(), 1);\n                 }\n-                for (i, operand) in operands.iter().enumerate() {\n+                for (i, operand) in operands.iter_enumerated() {\n                     let op = self.codegen_operand(bx, operand);\n                     // Do not generate stores and GEPis for zero-sized fields.\n                     if !op.layout.is_zst() {\n                         let field_index = active_field_index.unwrap_or(i);\n                         let field = if let mir::AggregateKind::Array(_) = **kind {\n-                            let llindex = bx.cx().const_usize(field_index as u64);\n+                            let llindex = bx.cx().const_usize(field_index.as_u32().into());\n                             variant_dest.project_index(bx, llindex)\n                         } else {\n-                            variant_dest.project_field(bx, field_index)\n+                            variant_dest.project_field(bx, field_index.as_usize())\n                         };\n                         op.val.store(bx, field);\n                     }"}, {"sha": "03b09cf830b71dd7c2f172125e8d5fd203b7d19e", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a93bcdc30771340dfff914a1cf48556886ad33a6/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93bcdc30771340dfff914a1cf48556886ad33a6/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=a93bcdc30771340dfff914a1cf48556886ad33a6", "patch": "@@ -5,10 +5,11 @@\n use either::{Either, Left, Right};\n \n use rustc_ast::Mutability;\n+use rustc_index::vec::IndexSlice;\n use rustc_middle::mir;\n use rustc_middle::ty;\n use rustc_middle::ty::layout::{LayoutOf, TyAndLayout};\n-use rustc_target::abi::{self, Abi, Align, HasDataLayout, Size, FIRST_VARIANT};\n+use rustc_target::abi::{self, Abi, Align, FieldIdx, HasDataLayout, Size, FIRST_VARIANT};\n \n use super::{\n     alloc_range, mir_assign_valid_types, AllocId, AllocRef, AllocRefMut, CheckInAllocMsg,\n@@ -787,7 +788,7 @@ where\n     pub fn write_aggregate(\n         &mut self,\n         kind: &mir::AggregateKind<'tcx>,\n-        operands: &[mir::Operand<'tcx>],\n+        operands: &IndexSlice<FieldIdx, mir::Operand<'tcx>>,\n         dest: &PlaceTy<'tcx, M::Provenance>,\n     ) -> InterpResult<'tcx> {\n         self.write_uninit(&dest)?;\n@@ -801,9 +802,9 @@ where\n         if active_field_index.is_some() {\n             assert_eq!(operands.len(), 1);\n         }\n-        for (field_index, operand) in operands.iter().enumerate() {\n+        for (field_index, operand) in operands.iter_enumerated() {\n             let field_index = active_field_index.unwrap_or(field_index);\n-            let field_dest = self.place_field(&variant_dest, field_index)?;\n+            let field_dest = self.place_field(&variant_dest, field_index.as_usize())?;\n             let op = self.eval_operand(operand, Some(field_dest.layout))?;\n             self.copy_op(&op, &field_dest, /*allow_transmute*/ false)?;\n         }"}, {"sha": "6caae059f4ad63c9f604f1c95fb08454b3d74a37", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a93bcdc30771340dfff914a1cf48556886ad33a6/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93bcdc30771340dfff914a1cf48556886ad33a6/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=a93bcdc30771340dfff914a1cf48556886ad33a6", "patch": "@@ -93,6 +93,12 @@ impl<I: Idx, T: fmt::Debug> fmt::Debug for IndexVec<I, T> {\n     }\n }\n \n+impl<I: Idx, T: fmt::Debug> fmt::Debug for IndexSlice<I, T> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        fmt::Debug::fmt(&self.raw, fmt)\n+    }\n+}\n+\n impl<I: Idx, T> IndexVec<I, T> {\n     #[inline]\n     pub fn new() -> Self {"}, {"sha": "cc35e6106e29402c4092e90e50a926bc7028e253", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a93bcdc30771340dfff914a1cf48556886ad33a6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93bcdc30771340dfff914a1cf48556886ad33a6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=a93bcdc30771340dfff914a1cf48556886ad33a6", "patch": "@@ -16,6 +16,7 @@ use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{self as hir};\n use rustc_hir::{self, GeneratorKind};\n+use rustc_index::vec::IndexVec;\n use rustc_target::abi::{FieldIdx, VariantIdx};\n \n use rustc_ast::Mutability;\n@@ -1125,7 +1126,7 @@ pub enum Rvalue<'tcx> {\n     ///\n     /// Disallowed after deaggregation for all aggregate kinds except `Array` and `Generator`. After\n     /// generator lowering, `Generator` aggregate kinds are disallowed too.\n-    Aggregate(Box<AggregateKind<'tcx>>, Vec<Operand<'tcx>>),\n+    Aggregate(Box<AggregateKind<'tcx>>, IndexVec<FieldIdx, Operand<'tcx>>),\n \n     /// Transmutes a `*mut u8` into shallow-initialized `Box<T>`.\n     ///\n@@ -1186,7 +1187,7 @@ pub enum AggregateKind<'tcx> {\n     /// active field number and is present only for union expressions\n     /// -- e.g., for a union expression `SomeUnion { c: .. }`, the\n     /// active field index would identity the field `c`\n-    Adt(DefId, VariantIdx, SubstsRef<'tcx>, Option<UserTypeAnnotationIndex>, Option<usize>),\n+    Adt(DefId, VariantIdx, SubstsRef<'tcx>, Option<UserTypeAnnotationIndex>, Option<FieldIdx>),\n \n     Closure(DefId, SubstsRef<'tcx>),\n     Generator(DefId, SubstsRef<'tcx>, hir::Movability),\n@@ -1263,7 +1264,7 @@ pub enum BinOp {\n mod size_asserts {\n     use super::*;\n     // tidy-alphabetical-start\n-    static_assert_size!(AggregateKind<'_>, 40);\n+    static_assert_size!(AggregateKind<'_>, 32);\n     static_assert_size!(Operand<'_>, 24);\n     static_assert_size!(Place<'_>, 16);\n     static_assert_size!(PlaceElem<'_>, 24);"}, {"sha": "33b73928704a0e23936780a99881477d34d26688", "filename": "compiler/rustc_mir_build/src/build/custom/parse/instruction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a93bcdc30771340dfff914a1cf48556886ad33a6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93bcdc30771340dfff914a1cf48556886ad33a6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs?ref=a93bcdc30771340dfff914a1cf48556886ad33a6", "patch": "@@ -185,7 +185,7 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n             },\n             ExprKind::Adt(box AdtExpr{ adt_def, variant_index, substs, fields, .. }) => {\n                 let is_union = adt_def.is_union();\n-                let active_field_index = is_union.then(|| fields[0].name.index());\n+                let active_field_index = is_union.then(|| fields[0].name);\n \n                 Ok(Rvalue::Aggregate(\n                     Box::new(AggregateKind::Adt(adt_def.did(), *variant_index, substs, None, active_field_index)),"}, {"sha": "baa12ec11c3217994f68f794ef8a1510153bc409", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a93bcdc30771340dfff914a1cf48556886ad33a6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93bcdc30771340dfff914a1cf48556886ad33a6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=a93bcdc30771340dfff914a1cf48556886ad33a6", "patch": "@@ -1,8 +1,8 @@\n //! See docs in `build/expr/mod.rs`.\n \n-use rustc_index::vec::Idx;\n+use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::ty::util::IntTypeExt;\n-use rustc_target::abi::{Abi, Primitive};\n+use rustc_target::abi::{Abi, FieldIdx, Primitive};\n \n use crate::build::expr::as_place::PlaceBase;\n use crate::build::expr::category::{Category, RvalueFunc};\n@@ -17,7 +17,6 @@ use rustc_middle::thir::*;\n use rustc_middle::ty::cast::{mir_cast_kind, CastTy};\n use rustc_middle::ty::{self, Ty, UpvarSubsts};\n use rustc_span::Span;\n-use rustc_target::abi::FieldIdx;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Returns an rvalue suitable for use until the end of the current\n@@ -327,7 +326,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                 // first process the set of fields\n                 let el_ty = expr.ty.sequence_element_type(this.tcx);\n-                let fields: Vec<_> = fields\n+                let fields: IndexVec<FieldIdx, _> = fields\n                     .into_iter()\n                     .copied()\n                     .map(|f| {\n@@ -348,7 +347,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             ExprKind::Tuple { ref fields } => {\n                 // see (*) above\n                 // first process the set of fields\n-                let fields: Vec<_> = fields\n+                let fields: IndexVec<FieldIdx, _> = fields\n                     .into_iter()\n                     .copied()\n                     .map(|f| {\n@@ -402,7 +401,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 }\n \n                 // see (*) above\n-                let operands: Vec<_> = upvars\n+                let operands: IndexVec<FieldIdx, _> = upvars\n                     .into_iter()\n                     .copied()\n                     .map(|upvar| {\n@@ -710,7 +709,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             this.record_operands_moved(&[value_operand]);\n         }\n-        block.and(Rvalue::Aggregate(Box::new(AggregateKind::Array(elem_ty)), Vec::new()))\n+        block.and(Rvalue::Aggregate(Box::new(AggregateKind::Array(elem_ty)), IndexVec::new()))\n     }\n \n     fn limit_capture_mutability("}, {"sha": "8efaba1f602e0d96846de48ce95647e693be8b76", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a93bcdc30771340dfff914a1cf48556886ad33a6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93bcdc30771340dfff914a1cf48556886ad33a6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=a93bcdc30771340dfff914a1cf48556886ad33a6", "patch": "@@ -6,11 +6,9 @@ use rustc_ast::InlineAsmOptions;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_hir as hir;\n-use rustc_index::vec::Idx;\n use rustc_middle::mir::*;\n use rustc_middle::thir::*;\n use rustc_middle::ty::CanonicalUserTypeAnnotation;\n-use rustc_target::abi::FieldIdx;\n use std::iter;\n \n impl<'a, 'tcx> Builder<'a, 'tcx> {\n@@ -320,7 +318,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // See the notes for `ExprKind::Array` in `as_rvalue` and for\n                 // `ExprKind::Borrow` above.\n                 let is_union = adt_def.is_union();\n-                let active_field_index = is_union.then(|| fields[0].name.index());\n+                let active_field_index = is_union.then(|| fields[0].name);\n \n                 let scope = this.local_scope();\n \n@@ -344,10 +342,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     })\n                     .collect();\n \n-                let field_names: Vec<_> =\n-                    (0..adt_def.variant(variant_index).fields.len()).map(FieldIdx::new).collect();\n+                let field_names = adt_def.variant(variant_index).fields.indices();\n \n-                let fields: Vec<_> = if let Some(FruInfo { base, field_types }) = base {\n+                let fields = if let Some(FruInfo { base, field_types }) = base {\n                     let place_builder =\n                         unpack!(block = this.as_place_builder(block, &this.thir[*base]));\n \n@@ -364,7 +361,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         })\n                         .collect()\n                 } else {\n-                    field_names.iter().filter_map(|n| fields_map.get(n).cloned()).collect()\n+                    field_names.filter_map(|n| fields_map.get(&n).cloned()).collect()\n                 };\n \n                 let inferred_ty = expr.ty;"}, {"sha": "af6422c724647551abe6c5c3a7dd2ec660e87d13", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a93bcdc30771340dfff914a1cf48556886ad33a6/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a93bcdc30771340dfff914a1cf48556886ad33a6/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=a93bcdc30771340dfff914a1cf48556886ad33a6", "patch": "@@ -274,7 +274,7 @@ impl<'tcx> TransformVisitor<'tcx> {\n             statements.push(Statement {\n                 kind: StatementKind::Assign(Box::new((\n                     Place::return_place(),\n-                    Rvalue::Aggregate(Box::new(kind), vec![]),\n+                    Rvalue::Aggregate(Box::new(kind), IndexVec::new()),\n                 ))),\n                 source_info,\n             });\n@@ -287,7 +287,7 @@ impl<'tcx> TransformVisitor<'tcx> {\n         statements.push(Statement {\n             kind: StatementKind::Assign(Box::new((\n                 Place::return_place(),\n-                Rvalue::Aggregate(Box::new(kind), vec![val]),\n+                Rvalue::Aggregate(Box::new(kind), IndexVec::from_iter([val])),\n             ))),\n             source_info,\n         });"}]}