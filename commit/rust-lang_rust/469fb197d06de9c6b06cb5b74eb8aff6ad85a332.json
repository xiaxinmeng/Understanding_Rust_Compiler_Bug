{"sha": "469fb197d06de9c6b06cb5b74eb8aff6ad85a332", "node_id": "C_kwDOAAsO6NoAKDQ2OWZiMTk3ZDA2ZGU5YzZiMDZjYjViNzRlYjhhZmY2YWQ4NWEzMzI", "commit": {"author": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-09-01T13:25:24Z"}, "committer": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-11-07T09:35:12Z"}, "message": "Update other test results", "tree": {"sha": "0e8cfcc1b49777b43657126d468c9af3d935efb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e8cfcc1b49777b43657126d468c9af3d935efb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/469fb197d06de9c6b06cb5b74eb8aff6ad85a332", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/469fb197d06de9c6b06cb5b74eb8aff6ad85a332", "html_url": "https://github.com/rust-lang/rust/commit/469fb197d06de9c6b06cb5b74eb8aff6ad85a332", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/469fb197d06de9c6b06cb5b74eb8aff6ad85a332/comments", "author": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a789ce0090a5e959ef45f0ac962b165a9b1ab28", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a789ce0090a5e959ef45f0ac962b165a9b1ab28", "html_url": "https://github.com/rust-lang/rust/commit/8a789ce0090a5e959ef45f0ac962b165a9b1ab28"}], "stats": {"total": 242, "additions": 238, "deletions": 4}, "files": [{"sha": "be8e86a832cb6af8dff995304fd13afdb17e3146", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.32bit.diff", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/469fb197d06de9c6b06cb5b74eb8aff6ad85a332/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/469fb197d06de9c6b06cb5b74eb8aff6ad85a332/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff?ref=469fb197d06de9c6b06cb5b74eb8aff6ad85a332", "patch": "@@ -0,0 +1,117 @@\n+- // MIR for `main` before PreCodegen\n++ // MIR for `main` after PreCodegen\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue-73223.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/issue-73223.rs:+1:9: +1:14\n+      let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n+      let _3: i32;                         // in scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n+      let mut _5: (&i32, &i32);            // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _6: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _7: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _10: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _11: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _12: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _14: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _15: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _16: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _17: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _18: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _19: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      scope 1 {\n+          debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:+1:9: +1:14\n+          let _4: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:+6:9: +6:14\n+          scope 3 {\n+              debug _prev => _4;           // in scope 3 at $DIR/issue-73223.rs:+6:9: +6:14\n+              let _8: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+              let _9: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+              let mut _20: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+              scope 4 {\n+                  debug left_val => _8;    // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  debug right_val => _9;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  let _13: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  scope 5 {\n+                      debug kind => _13;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  }\n+              }\n+          }\n+      }\n+      scope 2 {\n+          debug v => _3;                   // in scope 2 at $DIR/issue-73223.rs:+2:14: +2:15\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:+1:9: +1:14\n+          StorageLive(_2);                 // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n+          Deinit(_2);                      // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n+          ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n+          discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n+          StorageLive(_3);                 // scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n+          _3 = ((_2 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n+          _1 = _3;                         // scope 2 at $DIR/issue-73223.rs:+2:20: +2:21\n+          StorageDead(_3);                 // scope 0 at $DIR/issue-73223.rs:+2:20: +2:21\n+          StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:+4:6: +4:7\n+          StorageLive(_4);                 // scope 1 at $DIR/issue-73223.rs:+6:9: +6:14\n+          StorageLive(_5);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_6);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _6 = &_1;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _20 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n+          _7 = _20;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_5);                      // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_5.0: &i32) = move _6;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_5.1: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_6);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _8 = (_5.0: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _9 = (_5.1: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_12);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _12 = (*_8);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _11 = Eq(move _12, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_12);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _10 = Not(move _11);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          switchInt(move _10) -> [false: bb2, otherwise: bb1]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      }\n+  \n+      bb1: {\n+          StorageLive(_13);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_14);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_15);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_16);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _16 = _8;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _15 = _16;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_17);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_18);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _18 = _9;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _17 = _18;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_19);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_19);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_19) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _14 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _15, move _17, move _19); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }\n+      }\n+  \n+      bb2: {\n+          StorageDead(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_5);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_4);                 // scope 1 at $DIR/issue-73223.rs:+8:1: +8:2\n+          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:+8:1: +8:2\n+          return;                          // scope 0 at $DIR/issue-73223.rs:+8:2: +8:2\n+      }\n+  }\n+  "}, {"sha": "be8e86a832cb6af8dff995304fd13afdb17e3146", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.64bit.diff", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/469fb197d06de9c6b06cb5b74eb8aff6ad85a332/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/469fb197d06de9c6b06cb5b74eb8aff6ad85a332/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff?ref=469fb197d06de9c6b06cb5b74eb8aff6ad85a332", "patch": "@@ -0,0 +1,117 @@\n+- // MIR for `main` before PreCodegen\n++ // MIR for `main` after PreCodegen\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue-73223.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/issue-73223.rs:+1:9: +1:14\n+      let mut _2: std::option::Option<i32>; // in scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n+      let _3: i32;                         // in scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n+      let mut _5: (&i32, &i32);            // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _6: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _7: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _10: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _11: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _12: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _14: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _15: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _16: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _17: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _18: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _19: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      scope 1 {\n+          debug split => _1;               // in scope 1 at $DIR/issue-73223.rs:+1:9: +1:14\n+          let _4: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:+6:9: +6:14\n+          scope 3 {\n+              debug _prev => _4;           // in scope 3 at $DIR/issue-73223.rs:+6:9: +6:14\n+              let _8: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+              let _9: &i32;                // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+              let mut _20: &i32;           // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+              scope 4 {\n+                  debug left_val => _8;    // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  debug right_val => _9;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  let _13: core::panicking::AssertKind; // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  scope 5 {\n+                      debug kind => _13;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  }\n+              }\n+          }\n+      }\n+      scope 2 {\n+          debug v => _3;                   // in scope 2 at $DIR/issue-73223.rs:+2:14: +2:15\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/issue-73223.rs:+1:9: +1:14\n+          StorageLive(_2);                 // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n+          Deinit(_2);                      // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n+          ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n+          discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:+1:23: +1:30\n+          StorageLive(_3);                 // scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n+          _3 = ((_2 as Some).0: i32);      // scope 0 at $DIR/issue-73223.rs:+2:14: +2:15\n+          _1 = _3;                         // scope 2 at $DIR/issue-73223.rs:+2:20: +2:21\n+          StorageDead(_3);                 // scope 0 at $DIR/issue-73223.rs:+2:20: +2:21\n+          StorageDead(_2);                 // scope 0 at $DIR/issue-73223.rs:+4:6: +4:7\n+          StorageLive(_4);                 // scope 1 at $DIR/issue-73223.rs:+6:9: +6:14\n+          StorageLive(_5);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_6);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _6 = &_1;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _20 = const main::promoted[0];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n+          _7 = _20;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_5);                      // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_5.0: &i32) = move _6;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_5.1: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_6);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _8 = (_5.0: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _9 = (_5.1: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_12);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _12 = (*_8);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _11 = Eq(move _12, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_12);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _10 = Not(move _11);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          switchInt(move _10) -> [false: bb2, otherwise: bb1]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      }\n+  \n+      bb1: {\n+          StorageLive(_13);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_14);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_15);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_16);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _16 = _8;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _15 = _16;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_17);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_18);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _18 = _9;                        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _17 = _18;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_19);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_19);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          discriminant(_19) = 0;           // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _14 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _15, move _17, move _19); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }\n+      }\n+  \n+      bb2: {\n+          StorageDead(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_5);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_4);                 // scope 1 at $DIR/issue-73223.rs:+8:1: +8:2\n+          StorageDead(_1);                 // scope 0 at $DIR/issue-73223.rs:+8:1: +8:2\n+          return;                          // scope 0 at $DIR/issue-73223.rs:+8:2: +8:2\n+      }\n+  }\n+  "}, {"sha": "c9a9511586d78ea9befb6994c320c85c1cacc5ee", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/469fb197d06de9c6b06cb5b74eb8aff6ad85a332/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/469fb197d06de9c6b06cb5b74eb8aff6ad85a332/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff?ref=469fb197d06de9c6b06cb5b74eb8aff6ad85a332", "patch": "@@ -104,15 +104,15 @@\n           StorageLive(_15);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_16);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_17);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _17 = const 1_i32;               // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _17 = (*_13);                    // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_18);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _18 = const 1_i32;               // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _16 = const true;                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _16 = Eq(move _17, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_18);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_17);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _15 = const false;               // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _15 = Not(move _16);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_16);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          goto -> bb5;                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          switchInt(move _15) -> [false: bb5, otherwise: bb4]; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   \n       bb4: {"}]}