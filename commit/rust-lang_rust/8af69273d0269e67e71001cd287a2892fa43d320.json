{"sha": "8af69273d0269e67e71001cd287a2892fa43d320", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZjY5MjczZDAyNjllNjdlNzEwMDFjZDI4N2EyODkyZmE0M2QzMjA=", "commit": {"author": {"name": "Oliver S\u0336c\u0336h\u0336n\u0336e\u0336i\u0336d\u0336e\u0336r Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-09-06T15:41:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-06T15:41:23Z"}, "message": "Merge pull request #3138 from matthiaskrgr/3126__no_warn_multi_newline\n\nprint_with_newline / write_with_newline: don't warn about string with several `\\n`s in them.", "tree": {"sha": "833fc0d536da0f9d1ea55c082f6388558eea2b99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/833fc0d536da0f9d1ea55c082f6388558eea2b99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8af69273d0269e67e71001cd287a2892fa43d320", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbkUqjCRBK7hj4Ov3rIwAAdHIIAKPnCgjJju51ijbL/osHH9fO\nC/RlYLY1gZf75n2rXQ/ragFlp3o/84tDqaJKEYDjNRiiY+Xw42xTeieZujA80IzC\ni8rY44lhlehw5hhYkOrVY/bMdeKe44djbBaS/S4wXMvhjQRQA+PTijr1fdanx3QM\nhYK5P73kXQR/X1K2illIVJiBgNfYIqXpJ/8ZSgaI9mmGv0cwkJIc9opHeO5lqyDY\nNw7dvLOIYtLIGqx7CMv+3/FaicR3rTDAajZxDsF7JN1N8EU4nsjnaj5HxK3hkzV2\nJPdgQhmJqcugjYt3t9BxApXxL1XxkTO1Ze+Qe82p1TRmEXkAeWS5z47whD58jOQ=\n=INx1\n-----END PGP SIGNATURE-----\n", "payload": "tree 833fc0d536da0f9d1ea55c082f6388558eea2b99\nparent 3262f9283fd8753873545e2ebeb40dc49f351e18\nparent a0f56edfc316d642785efc5ccaf0d1c6c457b057\nauthor Oliver S\u0336c\u0336h\u0336n\u0336e\u0336i\u0336d\u0336e\u0336r Scherer <github35764891676564198441@oli-obk.de> 1536248483 +0200\ncommitter GitHub <noreply@github.com> 1536248483 +0200\n\nMerge pull request #3138 from matthiaskrgr/3126__no_warn_multi_newline\n\nprint_with_newline / write_with_newline: don't warn about string with several `\\n`s in them."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8af69273d0269e67e71001cd287a2892fa43d320", "html_url": "https://github.com/rust-lang/rust/commit/8af69273d0269e67e71001cd287a2892fa43d320", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8af69273d0269e67e71001cd287a2892fa43d320/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3262f9283fd8753873545e2ebeb40dc49f351e18", "url": "https://api.github.com/repos/rust-lang/rust/commits/3262f9283fd8753873545e2ebeb40dc49f351e18", "html_url": "https://github.com/rust-lang/rust/commit/3262f9283fd8753873545e2ebeb40dc49f351e18"}, {"sha": "a0f56edfc316d642785efc5ccaf0d1c6c457b057", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0f56edfc316d642785efc5ccaf0d1c6c457b057", "html_url": "https://github.com/rust-lang/rust/commit/a0f56edfc316d642785efc5ccaf0d1c6c457b057"}], "stats": {"total": 66, "additions": 36, "deletions": 30}, "files": [{"sha": "7ddae1c81c7e145c453b9bd4f3b3a103c59565ed", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 32, "deletions": 30, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/8af69273d0269e67e71001cd287a2892fa43d320/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af69273d0269e67e71001cd287a2892fa43d320/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=8af69273d0269e67e71001cd287a2892fa43d320", "patch": "@@ -1,10 +1,10 @@\n+use crate::utils::{snippet, span_lint, span_lint_and_sugg};\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, lint_array};\n+use std::borrow::Cow;\n use syntax::ast::*;\n+use syntax::parse::{parser, token};\n use syntax::tokenstream::{ThinTokenStream, TokenStream};\n-use syntax::parse::{token, parser};\n-use std::borrow::Cow;\n-use crate::utils::{span_lint, span_lint_and_sugg, snippet};\n \n /// **What it does:** This lint warns when you use `println!(\"\")` to\n /// print a newline.\n@@ -195,25 +195,41 @@ impl EarlyLintPass for Pass {\n         } else if mac.node.path == \"print\" {\n             span_lint(cx, PRINT_STDOUT, mac.span, \"use of `print!`\");\n             if let Some(fmtstr) = check_tts(cx, &mac.node.tts, false).0 {\n-                if fmtstr.ends_with(\"\\\\n\") && !fmtstr.ends_with(\"\\\\n\\\\n\") {\n-                    span_lint(cx, PRINT_WITH_NEWLINE, mac.span,\n-                            \"using `print!()` with a format string that ends in a \\\n-                            single newline, consider using `println!()` instead\");\n+                if fmtstr.ends_with(\"\\\\n\") &&\n+                   // don't warn about strings with several `\\n`s (#3126)\n+                   fmtstr.matches(\"\\\\n\").count() == 1\n+                {\n+                    span_lint(\n+                        cx,\n+                        PRINT_WITH_NEWLINE,\n+                        mac.span,\n+                        \"using `print!()` with a format string that ends in a \\\n+                         single newline, consider using `println!()` instead\",\n+                    );\n                 }\n             }\n         } else if mac.node.path == \"write\" {\n             if let Some(fmtstr) = check_tts(cx, &mac.node.tts, true).0 {\n-                if fmtstr.ends_with(\"\\\\n\") && !fmtstr.ends_with(\"\\\\n\\\\n\") {\n-                    span_lint(cx, WRITE_WITH_NEWLINE, mac.span,\n-                            \"using `write!()` with a format string that ends in a \\\n-                            single newline, consider using `writeln!()` instead\");\n+                if fmtstr.ends_with(\"\\\\n\") &&\n+                   // don't warn about strings with several `\\n`s (#3126)\n+                   fmtstr.matches(\"\\\\n\").count() == 1\n+                {\n+                    span_lint(\n+                        cx,\n+                        WRITE_WITH_NEWLINE,\n+                        mac.span,\n+                        \"using `write!()` with a format string that ends in a \\\n+                         single newline, consider using `writeln!()` instead\",\n+                    );\n                 }\n             }\n         } else if mac.node.path == \"writeln\" {\n             let check_tts = check_tts(cx, &mac.node.tts, true);\n             if let Some(fmtstr) = check_tts.0 {\n                 if fmtstr == \"\" {\n-                    let suggestion = check_tts.1.map_or(Cow::Borrowed(\"v\"), |expr| snippet(cx, expr.span, \"v\"));\n+                    let suggestion = check_tts\n+                        .1\n+                        .map_or(Cow::Borrowed(\"v\"), |expr| snippet(cx, expr.span, \"v\"));\n \n                     span_lint_and_sugg(\n                         cx,\n@@ -231,13 +247,7 @@ impl EarlyLintPass for Pass {\n \n fn check_tts<'a>(cx: &EarlyContext<'a>, tts: &ThinTokenStream, is_write: bool) -> (Option<String>, Option<Expr>) {\n     let tts = TokenStream::from(tts.clone());\n-    let mut parser = parser::Parser::new(\n-        &cx.sess.parse_sess,\n-        tts,\n-        None,\n-        false,\n-        false,\n-    );\n+    let mut parser = parser::Parser::new(&cx.sess.parse_sess, tts, None, false, false);\n     let mut expr: Option<Expr> = None;\n     if is_write {\n         expr = match parser.parse_expr().map_err(|mut err| err.cancel()) {\n@@ -270,11 +280,7 @@ fn check_tts<'a>(cx: &EarlyContext<'a>, tts: &ThinTokenStream, is_write: bool) -\n             args.push(arg);\n         }\n     }\n-    let lint = if is_write {\n-        WRITE_LITERAL\n-    } else {\n-        PRINT_LITERAL\n-    };\n+    let lint = if is_write { WRITE_LITERAL } else { PRINT_LITERAL };\n     let mut idx = 0;\n     loop {\n         if !parser.eat(&token::Comma) {\n@@ -299,9 +305,7 @@ fn check_tts<'a>(cx: &EarlyContext<'a>, tts: &ThinTokenStream, is_write: bool) -\n                 let mut seen = false;\n                 for arg in &args {\n                     match arg.position {\n-                        | ArgumentImplicitlyIs(n)\n-                        | ArgumentIs(n)\n-                        => if n == idx {\n+                        ArgumentImplicitlyIs(n) | ArgumentIs(n) => if n == idx {\n                             all_simple &= arg.format == SIMPLE;\n                             seen = true;\n                         },\n@@ -320,9 +324,7 @@ fn check_tts<'a>(cx: &EarlyContext<'a>, tts: &ThinTokenStream, is_write: bool) -\n                         let mut seen = false;\n                         for arg in &args {\n                             match arg.position {\n-                                | ArgumentImplicitlyIs(_)\n-                                | ArgumentIs(_)\n-                                => {},\n+                                ArgumentImplicitlyIs(_) | ArgumentIs(_) => {},\n                                 ArgumentNamed(name) => if *p == name {\n                                     seen = true;\n                                     all_simple &= arg.format == SIMPLE;"}, {"sha": "c2c79c726e8a67f6306e9f4647a146c3ffa1ac88", "filename": "tests/ui/print_with_newline.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8af69273d0269e67e71001cd287a2892fa43d320/tests%2Fui%2Fprint_with_newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af69273d0269e67e71001cd287a2892fa43d320/tests%2Fui%2Fprint_with_newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_with_newline.rs?ref=8af69273d0269e67e71001cd287a2892fa43d320", "patch": "@@ -21,4 +21,6 @@ fn main() {\n     print!(\"\\n\\n\");\n     print!(\"like eof\\n\\n\");\n     print!(\"Hello {} {}\\n\\n\", \"world\", \"#2\");\n+    println!(\"\\ndon't\\nwarn\\nfor\\nmultiple\\nnewlines\\n\"); // #3126\n+    println!(\"\\nbla\\n\\n\"); // #3126\n }"}, {"sha": "58e6002fa6a1e1994a34df6ebae858ff4173c280", "filename": "tests/ui/write_with_newline.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8af69273d0269e67e71001cd287a2892fa43d320/tests%2Fui%2Fwrite_with_newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8af69273d0269e67e71001cd287a2892fa43d320/tests%2Fui%2Fwrite_with_newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_with_newline.rs?ref=8af69273d0269e67e71001cd287a2892fa43d320", "patch": "@@ -26,4 +26,6 @@ fn main() {\n     write!(&mut v, \"\\n\\n\");\n     write!(&mut v, \"like eof\\n\\n\");\n     write!(&mut v, \"Hello {} {}\\n\\n\", \"world\", \"#2\");\n+    writeln!(&mut v, \"\\ndon't\\nwarn\\nfor\\nmultiple\\nnewlines\\n\"); // #3126\n+    writeln!(&mut v, \"\\nbla\\n\\n\"); // #3126\n }"}]}