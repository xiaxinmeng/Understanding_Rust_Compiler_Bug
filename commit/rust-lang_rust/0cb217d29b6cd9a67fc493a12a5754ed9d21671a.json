{"sha": "0cb217d29b6cd9a67fc493a12a5754ed9d21671a", "node_id": "C_kwDOAAsO6NoAKDBjYjIxN2QyOWI2Y2Q5YTY3ZmM0OTNhMTJhNTc1NGVkOWQyMTY3MWE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-14T23:42:25Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-14T05:47:09Z"}, "message": "Remove CastCheckResult since it's unused", "tree": {"sha": "734ae08fd95a4c18333f7b2a20da9781a57ade4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/734ae08fd95a4c18333f7b2a20da9781a57ade4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cb217d29b6cd9a67fc493a12a5754ed9d21671a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cb217d29b6cd9a67fc493a12a5754ed9d21671a", "html_url": "https://github.com/rust-lang/rust/commit/0cb217d29b6cd9a67fc493a12a5754ed9d21671a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cb217d29b6cd9a67fc493a12a5754ed9d21671a/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "feb4244f54c4ecf828ba8e0ae3d8c23d80b64646", "url": "https://api.github.com/repos/rust-lang/rust/commits/feb4244f54c4ecf828ba8e0ae3d8c23d80b64646", "html_url": "https://github.com/rust-lang/rust/commit/feb4244f54c4ecf828ba8e0ae3d8c23d80b64646"}], "stats": {"total": 60, "additions": 22, "deletions": 38}, "files": [{"sha": "51abdd2e059d71b11664d1dbe27968362cb7cf99", "filename": "compiler/rustc_hir_analysis/src/check/cast.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0cb217d29b6cd9a67fc493a12a5754ed9d21671a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb217d29b6cd9a67fc493a12a5754ed9d21671a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcast.rs?ref=0cb217d29b6cd9a67fc493a12a5754ed9d21671a", "patch": "@@ -203,28 +203,8 @@ fn make_invalid_casting_error<'a, 'tcx>(\n     )\n }\n \n-pub enum CastCheckResult<'tcx> {\n-    Ok,\n-    Deferred(CastCheck<'tcx>),\n-    Err(ErrorGuaranteed),\n-}\n-\n-pub fn check_cast<'tcx>(\n-    fcx: &FnCtxt<'_, 'tcx>,\n-    expr: &'tcx hir::Expr<'tcx>,\n-    expr_ty: Ty<'tcx>,\n-    cast_ty: Ty<'tcx>,\n-    cast_span: Span,\n-    span: Span,\n-) -> CastCheckResult<'tcx> {\n-    match CastCheck::new(fcx, expr, expr_ty, cast_ty, cast_span, span) {\n-        Ok(check) => CastCheckResult::Deferred(check),\n-        Err(e) => CastCheckResult::Err(e),\n-    }\n-}\n-\n impl<'a, 'tcx> CastCheck<'tcx> {\n-    fn new(\n+    pub fn new(\n         fcx: &FnCtxt<'a, 'tcx>,\n         expr: &'tcx hir::Expr<'tcx>,\n         expr_ty: Ty<'tcx>,"}, {"sha": "71c6da862c94b6907a4ede11f7c9050a4cc46cfe", "filename": "compiler/rustc_hir_analysis/src/check/expr.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0cb217d29b6cd9a67fc493a12a5754ed9d21671a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb217d29b6cd9a67fc493a12a5754ed9d21671a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fexpr.rs?ref=0cb217d29b6cd9a67fc493a12a5754ed9d21671a", "patch": "@@ -3,7 +3,7 @@\n //! See `mod.rs` for more context on type checking in general.\n \n use crate::astconv::AstConv as _;\n-use crate::check::cast::{self, CastCheckResult};\n+use crate::check::cast;\n use crate::check::coercion::CoerceMany;\n use crate::check::fatally_break_rust;\n use crate::check::method::SelfSource;\n@@ -1270,17 +1270,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         } else {\n             // Defer other checks until we're done type checking.\n             let mut deferred_cast_checks = self.deferred_cast_checks.borrow_mut();\n-            match cast::check_cast(self, e, t_expr, t_cast, t.span, expr.span) {\n-                CastCheckResult::Ok => t_cast,\n-                CastCheckResult::Deferred(cast_check) => {\n+            match cast::CastCheck::new(self, e, t_expr, t_cast, t.span, expr.span) {\n+                Ok(cast_check) => {\n                     debug!(\n                         \"check_expr_cast: deferring cast from {:?} to {:?}: {:?}\",\n                         t_cast, t_expr, cast_check,\n                     );\n                     deferred_cast_checks.push(cast_check);\n                     t_cast\n                 }\n-                CastCheckResult::Err(ErrorGuaranteed { .. }) => self.tcx.ty_error(),\n+                Err(_) => self.tcx.ty_error(),\n             }\n         }\n     }"}, {"sha": "102f7541c8ce13853190069a112c8a4ee3e14a9f", "filename": "src/tools/clippy/clippy_lints/src/transmute/utils.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0cb217d29b6cd9a67fc493a12a5754ed9d21671a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb217d29b6cd9a67fc493a12a5754ed9d21671a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Futils.rs?ref=0cb217d29b6cd9a67fc493a12a5754ed9d21671a", "patch": "@@ -1,15 +1,16 @@\n use rustc_hir::Expr;\n-use rustc_hir_analysis::check::{\n-    cast::{self, CastCheckResult},\n-    FnCtxt, Inherited,\n-};\n+use rustc_hir_analysis::check::{cast, FnCtxt, Inherited};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{cast::CastKind, Ty};\n use rustc_span::DUMMY_SP;\n \n // check if the component types of the transmuted collection and the result have different ABI,\n // size or alignment\n-pub(super) fn is_layout_incompatible<'tcx>(cx: &LateContext<'tcx>, from: Ty<'tcx>, to: Ty<'tcx>) -> bool {\n+pub(super) fn is_layout_incompatible<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    from: Ty<'tcx>,\n+    to: Ty<'tcx>,\n+) -> bool {\n     if let Ok(from) = cx.tcx.try_normalize_erasing_regions(cx.param_env, from)\n         && let Ok(to) = cx.tcx.try_normalize_erasing_regions(cx.param_env, to)\n         && let Ok(from_layout) = cx.tcx.layout_of(cx.param_env.and(from))\n@@ -32,7 +33,9 @@ pub(super) fn can_be_expressed_as_pointer_cast<'tcx>(\n     from_ty: Ty<'tcx>,\n     to_ty: Ty<'tcx>,\n ) -> bool {\n-    use CastKind::{AddrPtrCast, ArrayPtrCast, FnPtrAddrCast, FnPtrPtrCast, PtrAddrCast, PtrPtrCast};\n+    use CastKind::{\n+        AddrPtrCast, ArrayPtrCast, FnPtrAddrCast, FnPtrPtrCast, PtrAddrCast, PtrPtrCast,\n+    };\n     matches!(\n         check_cast(cx, e, from_ty, to_ty),\n         Some(PtrPtrCast | PtrAddrCast | AddrPtrCast | ArrayPtrCast | FnPtrPtrCast | FnPtrAddrCast)\n@@ -43,20 +46,22 @@ pub(super) fn can_be_expressed_as_pointer_cast<'tcx>(\n /// the cast. In certain cases, including some invalid casts from array references\n /// to pointers, this may cause additional errors to be emitted and/or ICE error\n /// messages. This function will panic if that occurs.\n-fn check_cast<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty<'tcx>, to_ty: Ty<'tcx>) -> Option<CastKind> {\n+fn check_cast<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    e: &'tcx Expr<'_>,\n+    from_ty: Ty<'tcx>,\n+    to_ty: Ty<'tcx>,\n+) -> Option<CastKind> {\n     let hir_id = e.hir_id;\n     let local_def_id = hir_id.owner.def_id;\n \n     Inherited::build(cx.tcx, local_def_id).enter(|inherited| {\n         let fn_ctxt = FnCtxt::new(&inherited, cx.param_env, hir_id);\n \n         // If we already have errors, we can't be sure we can pointer cast.\n-        assert!(\n-            !fn_ctxt.errors_reported_since_creation(),\n-            \"Newly created FnCtxt contained errors\"\n-        );\n+        assert!(!fn_ctxt.errors_reported_since_creation(), \"Newly created FnCtxt contained errors\");\n \n-        if let CastCheckResult::Deferred(check) = cast::check_cast(\n+        if let Ok(check) = cast::CastCheck::new(\n             &fn_ctxt, e, from_ty, to_ty,\n             // We won't show any error to the user, so we don't care what the span is here.\n             DUMMY_SP, DUMMY_SP,"}]}