{"sha": "7f822e742d96d250355ada92c52c5a1b755f73c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmODIyZTc0MmQ5NmQyNTAzNTVhZGE5MmM1MmM1YTFiNzU1ZjczYzE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-09-25T12:19:09Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2019-09-25T21:45:18Z"}, "message": "needless_borrowed_ref: fix false positive, make rustfixable", "tree": {"sha": "e57707c7f19372a552903f9af730054b9cc5e22c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e57707c7f19372a552903f9af730054b9cc5e22c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f822e742d96d250355ada92c52c5a1b755f73c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f822e742d96d250355ada92c52c5a1b755f73c1", "html_url": "https://github.com/rust-lang/rust/commit/7f822e742d96d250355ada92c52c5a1b755f73c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f822e742d96d250355ada92c52c5a1b755f73c1/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "622b167eb86b197c7e7085558c29f4637f34ff23", "url": "https://api.github.com/repos/rust-lang/rust/commits/622b167eb86b197c7e7085558c29f4637f34ff23", "html_url": "https://github.com/rust-lang/rust/commit/622b167eb86b197c7e7085558c29f4637f34ff23"}], "stats": {"total": 86, "additions": 62, "deletions": 24}, "files": [{"sha": "9afa67dadd140ea58061684bb2890408954c36fe", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7f822e742d96d250355ada92c52c5a1b755f73c1/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f822e742d96d250355ada92c52c5a1b755f73c1/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=7f822e742d96d250355ada92c52c5a1b755f73c1", "patch": "@@ -2,9 +2,9 @@\n //!\n //! This lint is **warn** by default\n \n-use crate::utils::{snippet, span_lint_and_then};\n+use crate::utils::{snippet_with_applicability, span_lint_and_then};\n use if_chain::if_chain;\n-use rustc::hir::{BindingAnnotation, MutImmutable, Pat, PatKind};\n+use rustc::hir::{BindingAnnotation, MutImmutable, Node, Pat, PatKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n@@ -65,16 +65,25 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBorrowedRef {\n \n             // Check sub_pat got a `ref` keyword (excluding `ref mut`).\n             if let PatKind::Binding(BindingAnnotation::Ref, .., spanned_name, _) = sub_pat.node;\n+            let parent_id = cx.tcx.hir().get_parent_node(pat.hir_id);\n+            if let Some(parent_node) = cx.tcx.hir().find(parent_id);\n             then {\n+                // do not recurse within patterns, as they may have other references\n+                // XXXManishearth we can relax this constraint if we only check patterns\n+                // with a single ref pattern inside them\n+                if let Node::Pat(_) = parent_node {\n+                    return;\n+                }\n+                let mut applicability = Applicability::MachineApplicable;\n                 span_lint_and_then(cx, NEEDLESS_BORROWED_REFERENCE, pat.span,\n                                    \"this pattern takes a reference on something that is being de-referenced\",\n                                    |db| {\n-                                       let hint = snippet(cx, spanned_name.span, \"..\").into_owned();\n+                                       let hint = snippet_with_applicability(cx, spanned_name.span, \"..\", &mut applicability).into_owned();\n                                        db.span_suggestion(\n                                            pat.span,\n                                            \"try removing the `&ref` part and just keep\",\n                                            hint,\n-                                           Applicability::MachineApplicable, // snippet\n+                                           applicability,\n                                        );\n                                    });\n             }"}, {"sha": "a0937a2c5f62f5d3ffa28e9c2328d311e10a7833", "filename": "tests/ui/needless_borrowed_ref.fixed", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/7f822e742d96d250355ada92c52c5a1b755f73c1/tests%2Fui%2Fneedless_borrowed_ref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7f822e742d96d250355ada92c52c5a1b755f73c1/tests%2Fui%2Fneedless_borrowed_ref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrowed_ref.fixed?ref=7f822e742d96d250355ada92c52c5a1b755f73c1", "patch": "@@ -0,0 +1,45 @@\n+// run-rustfix\n+\n+#[warn(clippy::needless_borrowed_reference)]\n+#[allow(unused_variables)]\n+fn main() {\n+    let mut v = Vec::<String>::new();\n+    let _ = v.iter_mut().filter(|a| a.is_empty());\n+    //                            ^ should be linted\n+\n+    let var = 3;\n+    let thingy = Some(&var);\n+    if let Some(&ref v) = thingy {\n+        //          ^ should be linted\n+    }\n+\n+    let mut var2 = 5;\n+    let thingy2 = Some(&mut var2);\n+    if let Some(&mut ref mut v) = thingy2 {\n+        //          ^ should **not** be linted\n+        // v is borrowed as mutable.\n+        *v = 10;\n+    }\n+    if let Some(&mut ref v) = thingy2 {\n+        //          ^ should **not** be linted\n+        // here, v is borrowed as immutable.\n+        // can't do that:\n+        //*v = 15;\n+    }\n+}\n+\n+#[allow(dead_code)]\n+enum Animal {\n+    Cat(u64),\n+    Dog(u64),\n+}\n+\n+#[allow(unused_variables)]\n+#[allow(dead_code)]\n+fn foo(a: &Animal, b: &Animal) {\n+    match (a, b) {\n+        (&Animal::Cat(v), &ref k) | (&ref k, &Animal::Cat(v)) => (), // lifetime mismatch error if there is no '&ref'\n+        //                  ^    and   ^ should **not** be linted\n+        (&Animal::Dog(ref a), &Animal::Dog(_)) => (), //              ^ should **not** be linted\n+    }\n+}"}, {"sha": "500ac448f0d58c4da01ed449101803ba0d702f2f", "filename": "tests/ui/needless_borrowed_ref.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f822e742d96d250355ada92c52c5a1b755f73c1/tests%2Fui%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f822e742d96d250355ada92c52c5a1b755f73c1/tests%2Fui%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrowed_ref.rs?ref=7f822e742d96d250355ada92c52c5a1b755f73c1", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+\n #[warn(clippy::needless_borrowed_reference)]\n #[allow(unused_variables)]\n fn main() {"}, {"sha": "0a5cfb3db0b116fad26040dc10b589be15d19b4b", "filename": "tests/ui/needless_borrowed_ref.stderr", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7f822e742d96d250355ada92c52c5a1b755f73c1/tests%2Fui%2Fneedless_borrowed_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f822e742d96d250355ada92c52c5a1b755f73c1/tests%2Fui%2Fneedless_borrowed_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrowed_ref.stderr?ref=7f822e742d96d250355ada92c52c5a1b755f73c1", "patch": "@@ -1,28 +1,10 @@\n error: this pattern takes a reference on something that is being de-referenced\n-  --> $DIR/needless_borrowed_ref.rs:5:34\n+  --> $DIR/needless_borrowed_ref.rs:7:34\n    |\n LL |     let _ = v.iter_mut().filter(|&ref a| a.is_empty());\n    |                                  ^^^^^^ help: try removing the `&ref` part and just keep: `a`\n    |\n    = note: `-D clippy::needless-borrowed-reference` implied by `-D warnings`\n \n-error: this pattern takes a reference on something that is being de-referenced\n-  --> $DIR/needless_borrowed_ref.rs:10:17\n-   |\n-LL |     if let Some(&ref v) = thingy {\n-   |                 ^^^^^^ help: try removing the `&ref` part and just keep: `v`\n-\n-error: this pattern takes a reference on something that is being de-referenced\n-  --> $DIR/needless_borrowed_ref.rs:39:27\n-   |\n-LL |         (&Animal::Cat(v), &ref k) | (&ref k, &Animal::Cat(v)) => (), // lifetime mismatch error if there is no '&ref'\n-   |                           ^^^^^^ help: try removing the `&ref` part and just keep: `k`\n-\n-error: this pattern takes a reference on something that is being de-referenced\n-  --> $DIR/needless_borrowed_ref.rs:39:38\n-   |\n-LL |         (&Animal::Cat(v), &ref k) | (&ref k, &Animal::Cat(v)) => (), // lifetime mismatch error if there is no '&ref'\n-   |                                      ^^^^^^ help: try removing the `&ref` part and just keep: `k`\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to previous error\n "}]}