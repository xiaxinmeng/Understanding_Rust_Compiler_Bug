{"sha": "bd8e312d73f07517e24a58a201e8524ebe4da8da", "node_id": "C_kwDOAAsO6NoAKGJkOGUzMTJkNzNmMDc1MTdlMjRhNThhMjAxZTg1MjRlYmU0ZGE4ZGE", "commit": {"author": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-08-23T23:16:04Z"}, "committer": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-08-31T16:56:42Z"}, "message": "port fs.rs to SessionDiagnostics", "tree": {"sha": "ca4e2b14433bece9b597e46fba3690d46f08ea0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca4e2b14433bece9b597e46fba3690d46f08ea0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd8e312d73f07517e24a58a201e8524ebe4da8da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd8e312d73f07517e24a58a201e8524ebe4da8da", "html_url": "https://github.com/rust-lang/rust/commit/bd8e312d73f07517e24a58a201e8524ebe4da8da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd8e312d73f07517e24a58a201e8524ebe4da8da/comments", "author": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "committer": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "parents": [{"sha": "32e1823b2275cf55a598e65c5093a28122b4039f", "url": "https://api.github.com/repos/rust-lang/rust/commits/32e1823b2275cf55a598e65c5093a28122b4039f", "html_url": "https://github.com/rust-lang/rust/commit/32e1823b2275cf55a598e65c5093a28122b4039f"}], "stats": {"total": 64, "additions": 55, "deletions": 9}, "files": [{"sha": "a4881dbc764552471f49aa357d57eb3faaad91fe", "filename": "compiler/rustc_error_messages/locales/en-US/metadata.ftl", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bd8e312d73f07517e24a58a201e8524ebe4da8da/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmetadata.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/bd8e312d73f07517e24a58a201e8524ebe4da8da/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmetadata.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmetadata.ftl?ref=bd8e312d73f07517e24a58a201e8524ebe4da8da", "patch": "@@ -158,3 +158,15 @@ metadata_global_alloc_required =\n \n metadata_no_transitive_needs_dep =\n     the crate `{$crate_name}` cannot depend on a crate that needs {$needs_crate_name}, but it depends on `{$deps_crate_name}`\n+\n+metadata_failed_write_error =\n+    failed to write {$filename}: {$err}\n+\n+metadata_failed_create_tempdir =\n+    couldn't create a temp dir: {$err}\n+\n+metadata_failed_create_file =\n+    failed to create the file {$filename}: {$err}\n+\n+metadata_failed_create_encoded_metadata =\n+    failed to create encoded metadata from file: {$err}"}, {"sha": "c373e49ba49589308d9b8235084fd6e9a7581a3f", "filename": "compiler/rustc_metadata/src/errors.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bd8e312d73f07517e24a58a201e8524ebe4da8da/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8e312d73f07517e24a58a201e8524ebe4da8da/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs?ref=bd8e312d73f07517e24a58a201e8524ebe4da8da", "patch": "@@ -352,3 +352,29 @@ pub struct NoTransitiveNeedsDep {\n     pub needs_crate_name: String,\n     pub deps_crate_name: String,\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(metadata::failed_write_error)]\n+pub struct FailedWriteError {\n+    pub filename: String,\n+    pub err: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(metadata::failed_create_tempdir)]\n+pub struct FailedCreateTempdir {\n+    pub err: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(metadata::failed_create_file)]\n+pub struct FailedCreateFile {\n+    pub filename: String,\n+    pub err: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(metadata::failed_create_encoded_metadata)]\n+pub struct FailedCreateEncodedMetadata {\n+    pub err: String,\n+}"}, {"sha": "67c18766c5959ac186c7021e85ee3aa393f55c95", "filename": "compiler/rustc_metadata/src/fs.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bd8e312d73f07517e24a58a201e8524ebe4da8da/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8e312d73f07517e24a58a201e8524ebe4da8da/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs?ref=bd8e312d73f07517e24a58a201e8524ebe4da8da", "patch": "@@ -1,3 +1,6 @@\n+use crate::errors::{\n+    FailedCreateEncodedMetadata, FailedCreateFile, FailedCreateTempdir, FailedWriteError,\n+};\n use crate::{encode_metadata, EncodedMetadata};\n \n use rustc_data_structures::temp_dir::MaybeTempDir;\n@@ -24,7 +27,10 @@ pub fn emit_metadata(sess: &Session, metadata: &[u8], tmpdir: &MaybeTempDir) ->\n     let result = fs::write(&out_filename, metadata);\n \n     if let Err(e) = result {\n-        sess.fatal(&format!(\"failed to write {}: {}\", out_filename.display(), e));\n+        sess.emit_fatal(FailedWriteError {\n+            filename: out_filename.display().to_string(),\n+            err: e.to_string(),\n+        });\n     }\n \n     out_filename\n@@ -65,7 +71,7 @@ pub fn encode_and_write_metadata(\n     let metadata_tmpdir = TempFileBuilder::new()\n         .prefix(\"rmeta\")\n         .tempdir_in(out_filename.parent().unwrap_or_else(|| Path::new(\"\")))\n-        .unwrap_or_else(|err| tcx.sess.fatal(&format!(\"couldn't create a temp dir: {}\", err)));\n+        .unwrap_or_else(|err| tcx.sess.emit_fatal(FailedCreateTempdir { err: err.to_string() }));\n     let metadata_tmpdir = MaybeTempDir::new(metadata_tmpdir, tcx.sess.opts.cg.save_temps);\n     let metadata_filename = metadata_tmpdir.as_ref().join(METADATA_FILENAME);\n \n@@ -74,11 +80,10 @@ pub fn encode_and_write_metadata(\n     match metadata_kind {\n         MetadataKind::None => {\n             std::fs::File::create(&metadata_filename).unwrap_or_else(|e| {\n-                tcx.sess.fatal(&format!(\n-                    \"failed to create the file {}: {}\",\n-                    metadata_filename.display(),\n-                    e\n-                ))\n+                tcx.sess.emit_fatal(FailedCreateFile {\n+                    filename: metadata_filename.display().to_string(),\n+                    err: e.to_string(),\n+                });\n             });\n         }\n         MetadataKind::Uncompressed | MetadataKind::Compressed => {\n@@ -94,7 +99,10 @@ pub fn encode_and_write_metadata(\n     let need_metadata_file = tcx.sess.opts.output_types.contains_key(&OutputType::Metadata);\n     let (metadata_filename, metadata_tmpdir) = if need_metadata_file {\n         if let Err(e) = non_durable_rename(&metadata_filename, &out_filename) {\n-            tcx.sess.fatal(&format!(\"failed to write {}: {}\", out_filename.display(), e));\n+            tcx.sess.emit_fatal(FailedWriteError {\n+                filename: out_filename.display().to_string(),\n+                err: e.to_string(),\n+            });\n         }\n         if tcx.sess.opts.json_artifact_notifications {\n             tcx.sess\n@@ -110,7 +118,7 @@ pub fn encode_and_write_metadata(\n     // Load metadata back to memory: codegen may need to include it in object files.\n     let metadata =\n         EncodedMetadata::from_path(metadata_filename, metadata_tmpdir).unwrap_or_else(|e| {\n-            tcx.sess.fatal(&format!(\"failed to create encoded metadata from file: {}\", e))\n+            tcx.sess.emit_fatal(FailedCreateEncodedMetadata { err: e.to_string() });\n         });\n \n     let need_metadata_module = metadata_kind == MetadataKind::Compressed;"}]}