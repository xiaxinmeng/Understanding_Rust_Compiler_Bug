{"sha": "eb75d4ee6295fdb34a87b1b9eb5494e7eaf5712d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNzVkNGVlNjI5NWZkYjM0YTg3YjFiOWViNTQ5NGU3ZWFmNTcxMmQ=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-10T12:07:13Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-10T12:20:38Z"}, "message": "Fix suggestions for `NEW_WITHOUT_DEFAULT`", "tree": {"sha": "1ce9fbd179bf4a76d6cd498908f60d4382df3513", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ce9fbd179bf4a76d6cd498908f60d4382df3513"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb75d4ee6295fdb34a87b1b9eb5494e7eaf5712d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXgj2YAAoJEF5CfHlMukXoHV8P/R46nUxN52eREEpT7SpDgAG3\nZV0JODNxKbx0GMwsoRdIq1VCnduN6F6YeIsKr9zQDFb3vgY6ILOTkpwR3tTgllsz\nYy9Y9ZvEU9SBuYQL9iD/pVebg3ASPS+x7pNMxU0LP00XwGV7+WOQ7m9YxKgoBCUM\ncIz0wbZM3eDlUGrWHla94jYCb7gBzZ+hJq0GgAHLy/p9mBo2+lDy5cx0ENE1ZunD\nASDZlaCo76B7JhwGxRPbMuKJrj63WdgpUUQIoM+WH5ggNs1V7QHWnqw7WYSmU6W+\nCTQ0ZichfSbzLF85txpUh+neCDe3JTuyd9GyEQRerD+VeX6KiqEdmnR5aIdv5XI1\n40dlr1UsX6KJwDEOoKTrmMsbaHUlglz60INum/v9gbuXz0YSQXmhXo3EyIADJGX5\n9I4ChL1PWVIgRWRAZh982HuaeYDmHvOeG2J7rWvawn3C/piaqkDlqJGqvuk/UNIy\n/2oyRL/r22N/1VzMETLHY9xH7tnvB3B1aY1OGoB1ZU/pUsL9Q8dML0R9HXp479oM\n/n8/8lkY/F5JjEgp3PZD5fL1vLhtE+1s9brz69vuXaWLoUZeKQF8pswA+W6Kg7YA\ndWXIT9Pt3xUe/ACZk3sDLKPA5YxCo4ZTzt3Z24QPwCEGr5ybKCtHeOXCuvn6LH69\nTeVNwIzdDnqyhoo1JZhO\n=olMy\n-----END PGP SIGNATURE-----", "payload": "tree 1ce9fbd179bf4a76d6cd498908f60d4382df3513\nparent 3a7402a6d20d308e6c09ffa0101aab108bc2cad7\nauthor mcarton <cartonmartin+git@gmail.com> 1468152433 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1468153238 +0200\n\nFix suggestions for `NEW_WITHOUT_DEFAULT`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb75d4ee6295fdb34a87b1b9eb5494e7eaf5712d", "html_url": "https://github.com/rust-lang/rust/commit/eb75d4ee6295fdb34a87b1b9eb5494e7eaf5712d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb75d4ee6295fdb34a87b1b9eb5494e7eaf5712d/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a7402a6d20d308e6c09ffa0101aab108bc2cad7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a7402a6d20d308e6c09ffa0101aab108bc2cad7", "html_url": "https://github.com/rust-lang/rust/commit/3a7402a6d20d308e6c09ffa0101aab108bc2cad7"}], "stats": {"total": 141, "additions": 123, "deletions": 18}, "files": [{"sha": "053e423336ef0d7a5de19ac19a503c6a28ce3a5b", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eb75d4ee6295fdb34a87b1b9eb5494e7eaf5712d/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb75d4ee6295fdb34a87b1b9eb5494e7eaf5712d/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=eb75d4ee6295fdb34a87b1b9eb5494e7eaf5712d", "patch": "@@ -7,15 +7,15 @@ use syntax::ast;\n use syntax::codemap::Span;\n use utils::paths;\n use utils::{get_trait_def_id, implements_trait, in_external_macro, return_ty, same_tys, span_lint_and_then};\n+use utils::sugg::DiagnosticBuilderExt;\n \n /// **What it does:** This lints about type with a `fn new() -> Self` method\n /// and no implementation of\n /// [`Default`](https://doc.rust-lang.org/std/default/trait.Default.html)\n ///\n /// **Why is this bad?** User might expect to be able to use\n /// [`Default`](https://doc.rust-lang.org/std/default/trait.Default.html)\n-/// as the type can be\n-/// constructed without arguments.\n+/// as the type can be constructed without arguments.\n ///\n /// **Known problems:** Hopefully none.\n ///\n@@ -118,20 +118,26 @@ impl LateLintPass for NewWithoutDefault {\n                                                      `Default` implementation for `{}`\",\n                                                     self_ty),\n                                            |db| {\n-                                               db.span_suggestion(span, \"try this\", \"#[derive(Default)]\".into());\n-                                           });\n+                            db.suggest_item_with_attr(cx, span, \"try this\", \"#[derive(Default)]\");\n+                        });\n                     } else {\n                         span_lint_and_then(cx,\n                                            NEW_WITHOUT_DEFAULT, span,\n                                            &format!(\"you should consider adding a \\\n                                                     `Default` implementation for `{}`\",\n                                                     self_ty),\n                                            |db| {\n-                                               db.span_suggestion(span,\n-                                                                  \"try this\",\n-                                                                  format!(\"impl Default for {} {{ fn default() -> \\\n-                                                                          Self {{ {}::new() }} }}\", self_ty, self_ty));\n-                                           });\n+                        db.suggest_prepend_item(cx,\n+                                                  span,\n+                                                  \"try this\",\n+                                                  &format!(\n+\"impl Default for {} {{\n+    fn default() -> Self {{\n+        Self::new()\n+    }}\n+}}\",\n+                                                           self_ty));\n+                        });\n                     }\n                 }}\n             }"}, {"sha": "b6ed9071c0a08611b72250d882498fe83942c217", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 89, "deletions": 6, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/eb75d4ee6295fdb34a87b1b9eb5494e7eaf5712d/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb75d4ee6295fdb34a87b1b9eb5494e7eaf5712d/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=eb75d4ee6295fdb34a87b1b9eb5494e7eaf5712d", "patch": "@@ -1,11 +1,14 @@\n use rustc::hir;\n-use rustc::lint::{EarlyContext, LateContext};\n+use rustc::lint::{EarlyContext, LateContext, LintContext};\n+use rustc_errors;\n use std::borrow::Cow;\n+use std::fmt::Display;\n use std;\n-use syntax::ast;\n+use syntax::codemap::{CharPos, Span};\n+use syntax::print::pprust::binop_to_string;\n use syntax::util::parser::AssocOp;\n+use syntax::ast;\n use utils::{higher, snippet, snippet_opt};\n-use syntax::print::pprust::binop_to_string;\n \n /// A helper type to build suggestion correctly handling parenthesis.\n pub enum Sugg<'a> {\n@@ -20,7 +23,7 @@ pub enum Sugg<'a> {\n /// Literal constant `1`, for convenience.\n pub const ONE: Sugg<'static> = Sugg::NonParen(Cow::Borrowed(\"1\"));\n \n-impl<'a> std::fmt::Display for Sugg<'a> {\n+impl<'a> Display for Sugg<'a> {\n     fn fmt(&self, f: &mut std::fmt::Formatter) -> Result<(), std::fmt::Error> {\n         match *self {\n             Sugg::NonParen(ref s) | Sugg::MaybeParen(ref s) | Sugg::BinOp(_, ref s) => {\n@@ -126,7 +129,7 @@ impl<'a> Sugg<'a> {\n     }\n \n     /// Convenience method to create the `<lhs> as <rhs>` suggestion.\n-    pub fn as_ty<R: std::fmt::Display>(self, rhs: R) -> Sugg<'static> {\n+    pub fn as_ty<R: Display>(self, rhs: R) -> Sugg<'static> {\n         make_assoc(AssocOp::As, &self, &Sugg::NonParen(rhs.to_string().into()))\n     }\n \n@@ -198,7 +201,7 @@ impl<T> ParenHelper<T> {\n     }\n }\n \n-impl<T: std::fmt::Display> std::fmt::Display for ParenHelper<T> {\n+impl<T: Display> Display for ParenHelper<T> {\n     fn fmt(&self, f: &mut std::fmt::Formatter) -> Result<(), std::fmt::Error> {\n         if self.paren {\n             write!(f, \"({})\", self.wrapped)\n@@ -354,3 +357,83 @@ fn astbinop2assignop(op: ast::BinOp) -> AssocOp {\n         And | Eq | Ge | Gt | Le | Lt | Ne | Or => panic!(\"This operator does not exist\"),\n     })\n }\n+\n+/// Return the indentation before `span` if there are nothing but `[ \\t]` before it on its line.\n+fn indentation<T: LintContext>(cx: &T, span: Span) -> Option<String> {\n+    let lo = cx.sess().codemap().lookup_char_pos(span.lo);\n+    if let Some(line) = lo.file.get_line(lo.line - 1 /* line numbers in `Loc` are 1-based */) {\n+        if let Some((pos, _)) = line.char_indices().find(|&(_, c)| c != ' ' && c != '\\t') {\n+            // we can mix char and byte positions here because we only consider `[ \\t]`\n+            if lo.col == CharPos(pos) {\n+                Some(line[..pos].into())\n+            } else {\n+                None\n+            }\n+        } else {\n+            None\n+        }\n+    } else {\n+        None\n+    }\n+}\n+\n+pub trait DiagnosticBuilderExt<T: LintContext> {\n+    /// Suggests to add an attribute to an item.\n+    ///\n+    /// Correctly handles indentation of the attribute and item.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// db.suggest_item_with_attr(cx, item, \"#[derive(Default)]\");\n+    /// ```\n+    fn suggest_item_with_attr<D: Display+?Sized>(&mut self, cx: &T, item: Span, msg: &str, attr: &D);\n+\n+    /// Suggest to add an item before another.\n+    ///\n+    /// The item should not be indented (expect for inner indentation).\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// db.suggest_prepend_item(cx, item,\n+    /// \"fn foo() {\n+    ///     bar();\n+    /// }\");\n+    /// ```\n+    fn suggest_prepend_item(&mut self, cx: &T, item: Span, msg: &str, new_item: &str);\n+}\n+\n+impl<'a, 'b, T: LintContext> DiagnosticBuilderExt<T> for rustc_errors::DiagnosticBuilder<'b> {\n+    fn suggest_item_with_attr<D: Display+?Sized>(&mut self, cx: &T, item: Span, msg: &str, attr: &D) {\n+        if let Some(indent) = indentation(cx, item) {\n+            let span = Span {\n+                hi: item.lo,\n+                ..item\n+            };\n+\n+            self.span_suggestion(span, msg, format!(\"{}\\n{}\", attr, indent));\n+        }\n+    }\n+\n+    fn suggest_prepend_item(&mut self, cx: &T, item: Span, msg: &str, new_item: &str) {\n+        if let Some(indent) = indentation(cx, item) {\n+            let span = Span {\n+                hi: item.lo,\n+                ..item\n+            };\n+\n+            let mut first = true;\n+            let new_item = new_item.lines().map(|l| {\n+                if first {\n+                    first = false;\n+                    format!(\"{}\\n\", l)\n+                } else {\n+                    format!(\"{}{}\\n\", indent, l)\n+                }\n+            }).collect::<String>();\n+\n+            self.span_suggestion(span, msg, format!(\"{}\\n{}\", new_item, indent));\n+        }\n+    }\n+}"}, {"sha": "cad675275db92a0d842f5616d0ebf996bafb2791", "filename": "tests/compile-fail/new_without_default.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/eb75d4ee6295fdb34a87b1b9eb5494e7eaf5712d/tests%2Fcompile-fail%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb75d4ee6295fdb34a87b1b9eb5494e7eaf5712d/tests%2Fcompile-fail%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnew_without_default.rs?ref=eb75d4ee6295fdb34a87b1b9eb5494e7eaf5712d", "patch": "@@ -7,13 +7,21 @@\n pub struct Foo;\n \n impl Foo {\n-    pub fn new() -> Foo { Foo } //~ERROR: you should consider deriving a `Default` implementation for `Foo`\n+    pub fn new() -> Foo { Foo }\n+    //~^ERROR: you should consider deriving a `Default` implementation for `Foo`\n+    //~|HELP try this\n+    //~^^^SUGGESTION #[derive(Default)]\n+    //~^^^SUGGESTION pub fn new\n }\n \n pub struct Bar;\n \n impl Bar {\n-    pub fn new() -> Self { Bar } //~ERROR: you should consider deriving a `Default` implementation for `Bar`\n+    pub fn new() -> Self { Bar }\n+    //~^ERROR: you should consider deriving a `Default` implementation for `Bar`\n+    //~|HELP try this\n+    //~^^^SUGGESTION #[derive(Default)]\n+    //~^^^SUGGESTION pub fn new\n }\n \n pub struct Ok;\n@@ -61,7 +69,15 @@ pub struct LtKo<'a> {\n }\n \n impl<'c> LtKo<'c> {\n-    pub fn new() -> LtKo<'c> { unimplemented!() } //~ERROR: you should consider adding a `Default` implementation for\n+    pub fn new() -> LtKo<'c> { unimplemented!() }\n+    //~^ERROR: you should consider adding a `Default` implementation for\n+    //~^^HELP try\n+    //~^^^SUGGESTION impl Default for LtKo<'c> {\n+    //~^^^SUGGESTION     fn default() -> Self {\n+    //~^^^SUGGESTION         Self::new()\n+    //~^^^SUGGESTION     }\n+    //~^^^SUGGESTION }\n+    // FIXME: that suggestion is missing lifetimes\n }\n \n struct Private;"}]}