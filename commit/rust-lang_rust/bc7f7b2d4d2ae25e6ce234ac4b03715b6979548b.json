{"sha": "bc7f7b2d4d2ae25e6ce234ac4b03715b6979548b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjN2Y3YjJkNGQyYWUyNWU2Y2UyMzRhYzRiMDM3MTViNjk3OTU0OGI=", "commit": {"author": {"name": "Markus Westerlind", "email": "markus.westerlind@distilnetworks.com", "date": "2020-02-25T15:41:29Z"}, "committer": {"name": "Markus Westerlind", "email": "markus.westerlind@distilnetworks.com", "date": "2020-05-05T09:24:36Z"}, "message": "refactor: Rename Logs to InferCtxtUndoLogs", "tree": {"sha": "c02240559d35a1c72a945e302cdd7c08d82206dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c02240559d35a1c72a945e302cdd7c08d82206dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc7f7b2d4d2ae25e6ce234ac4b03715b6979548b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc7f7b2d4d2ae25e6ce234ac4b03715b6979548b", "html_url": "https://github.com/rust-lang/rust/commit/bc7f7b2d4d2ae25e6ce234ac4b03715b6979548b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc7f7b2d4d2ae25e6ce234ac4b03715b6979548b/comments", "author": null, "committer": null, "parents": [{"sha": "e6d7f1584d3107ae1de210619d05f3be0d023ae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6d7f1584d3107ae1de210619d05f3be0d023ae3", "html_url": "https://github.com/rust-lang/rust/commit/e6d7f1584d3107ae1de210619d05f3be0d023ae3"}], "stats": {"total": 77, "additions": 53, "deletions": 24}, "files": [{"sha": "45c298ea8bfcde783128aa4f746b20365364824e", "filename": "Cargo.lock", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc7f7b2d4d2ae25e6ce234ac4b03715b6979548b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/bc7f7b2d4d2ae25e6ce234ac4b03715b6979548b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=bc7f7b2d4d2ae25e6ce234ac4b03715b6979548b", "patch": "@@ -485,7 +485,7 @@ version = \"0.0.212\"\n dependencies = [\n  \"cargo_metadata 0.9.1\",\n  \"if_chain\",\n- \"itertools 0.8.0\",\n+ \"itertools 0.9.0\",\n  \"lazy_static 1.4.0\",\n  \"pulldown-cmark 0.7.1\",\n  \"quine-mc_cluskey\",\n@@ -1629,6 +1629,15 @@ dependencies = [\n  \"either\",\n ]\n \n+[[package]]\n+name = \"itertools\"\n+version = \"0.9.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"284f18f85651fe11e8a991b2adb42cb078325c996ed026d994719efcfca1d54b\"\n+dependencies = [\n+ \"either\",\n+]\n+\n [[package]]\n name = \"itoa\"\n version = \"0.4.4\"\n@@ -2179,6 +2188,7 @@ dependencies = [\n  \"rustc-workspace-hack\",\n  \"rustc_version\",\n  \"serde\",\n+ \"serde_json\",\n  \"shell-escape\",\n  \"vergen\",\n ]"}, {"sha": "90bc1ddc3eb6318833e5052b0f1ab0cf6d4a1892", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bc7f7b2d4d2ae25e6ce234ac4b03715b6979548b/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7f7b2d4d2ae25e6ce234ac4b03715b6979548b/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=bc7f7b2d4d2ae25e6ce234ac4b03715b6979548b", "patch": "@@ -147,7 +147,6 @@ pub struct InferCtxtInner<'tcx> {\n     /// that might instantiate a general type variable have an order,\n     /// represented by its upper and lower bounds.\n     type_variables: type_variable::TypeVariableStorage<'tcx>,\n-    undo_log: Logs<'tcx>,\n \n     /// Map from const parameter variable to the kind of const it represents.\n     const_unification_table: ut::UnificationStorage<ty::ConstVid<'tcx>>,\n@@ -197,14 +196,16 @@ pub struct InferCtxtInner<'tcx> {\n     /// obligations within. This is expected to be done 'late enough'\n     /// that all type inference variables have been bound and so forth.\n     region_obligations: Vec<(hir::HirId, RegionObligation<'tcx>)>,\n+\n+    undo_log: InferCtxtUndoLogs<'tcx>,\n }\n \n impl<'tcx> InferCtxtInner<'tcx> {\n     fn new() -> InferCtxtInner<'tcx> {\n         InferCtxtInner {\n             projection_cache: Default::default(),\n             type_variables: type_variable::TypeVariableStorage::new(),\n-            undo_log: Logs::default(),\n+            undo_log: InferCtxtUndoLogs::default(),\n             const_unification_table: ut::UnificationStorage::new(),\n             int_unification_table: ut::UnificationStorage::new(),\n             float_unification_table: ut::UnificationStorage::new(),\n@@ -228,15 +229,23 @@ impl<'tcx> InferCtxtInner<'tcx> {\n     fn int_unification_table(\n         &mut self,\n     ) -> ut::UnificationTable<\n-        ut::InPlace<ty::IntVid, &mut ut::UnificationStorage<ty::IntVid>, &mut Logs<'tcx>>,\n+        ut::InPlace<\n+            ty::IntVid,\n+            &mut ut::UnificationStorage<ty::IntVid>,\n+            &mut InferCtxtUndoLogs<'tcx>,\n+        >,\n     > {\n         ut::UnificationTable::with_log(&mut self.int_unification_table, &mut self.undo_log)\n     }\n \n     fn float_unification_table(\n         &mut self,\n     ) -> ut::UnificationTable<\n-        ut::InPlace<ty::FloatVid, &mut ut::UnificationStorage<ty::FloatVid>, &mut Logs<'tcx>>,\n+        ut::InPlace<\n+            ty::FloatVid,\n+            &mut ut::UnificationStorage<ty::FloatVid>,\n+            &mut InferCtxtUndoLogs<'tcx>,\n+        >,\n     > {\n         ut::UnificationTable::with_log(&mut self.float_unification_table, &mut self.undo_log)\n     }\n@@ -247,7 +256,7 @@ impl<'tcx> InferCtxtInner<'tcx> {\n         ut::InPlace<\n             ty::ConstVid<'tcx>,\n             &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,\n-            &mut Logs<'tcx>,\n+            &mut InferCtxtUndoLogs<'tcx>,\n         >,\n     > {\n         ut::UnificationTable::with_log(&mut self.const_unification_table, &mut self.undo_log)\n@@ -343,8 +352,9 @@ impl<'tcx> From<traits::UndoLog<'tcx>> for UndoLog<'tcx> {\n     }\n }\n \n-pub(crate) type UnificationTable<'a, 'tcx, T> =\n-    ut::UnificationTable<ut::InPlace<T, &'a mut ut::UnificationStorage<T>, &'a mut Logs<'tcx>>>;\n+pub(crate) type UnificationTable<'a, 'tcx, T> = ut::UnificationTable<\n+    ut::InPlace<T, &'a mut ut::UnificationStorage<T>, &'a mut InferCtxtUndoLogs<'tcx>>,\n+>;\n \n struct RollbackView<'tcx, 'a> {\n     type_variables: &'a mut type_variable::TypeVariableStorage<'tcx>,\n@@ -375,18 +385,18 @@ impl<'tcx> Rollback<UndoLog<'tcx>> for RollbackView<'tcx, '_> {\n     }\n }\n \n-pub(crate) struct Logs<'tcx> {\n+pub(crate) struct InferCtxtUndoLogs<'tcx> {\n     logs: Vec<UndoLog<'tcx>>,\n     num_open_snapshots: usize,\n }\n \n-impl Default for Logs<'_> {\n+impl Default for InferCtxtUndoLogs<'_> {\n     fn default() -> Self {\n         Self { logs: Default::default(), num_open_snapshots: Default::default() }\n     }\n }\n \n-impl<'tcx, T> UndoLogs<T> for Logs<'tcx>\n+impl<'tcx, T> UndoLogs<T> for InferCtxtUndoLogs<'tcx>\n where\n     UndoLog<'tcx>: From<T>,\n {\n@@ -413,7 +423,7 @@ where\n     }\n }\n \n-impl<'tcx> Snapshots<UndoLog<'tcx>> for Logs<'tcx> {\n+impl<'tcx> Snapshots<UndoLog<'tcx>> for InferCtxtUndoLogs<'tcx> {\n     type Snapshot = Snapshot<'tcx>;\n     fn actions_since_snapshot(&self, snapshot: &Self::Snapshot) -> &[UndoLog<'tcx>] {\n         &self.logs[snapshot.undo_len..]\n@@ -464,7 +474,7 @@ impl<'tcx> Snapshots<UndoLog<'tcx>> for Logs<'tcx> {\n     }\n }\n \n-impl<'tcx> Logs<'tcx> {\n+impl<'tcx> InferCtxtUndoLogs<'tcx> {\n     pub(crate) fn region_constraints(\n         &self,\n         after: usize,"}, {"sha": "5f6f82ddaf98021f7ac43ac19f85c0748cb93b4e", "filename": "src/librustc_infer/infer/region_constraints/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bc7f7b2d4d2ae25e6ce234ac4b03715b6979548b/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7f7b2d4d2ae25e6ce234ac4b03715b6979548b/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs?ref=bc7f7b2d4d2ae25e6ce234ac4b03715b6979548b", "patch": "@@ -4,7 +4,9 @@ use self::CombineMapType::*;\n use self::UndoLog::*;\n \n use super::unify_key;\n-use super::{Logs, MiscVariable, RegionVariableOrigin, Rollback, Snapshot, SubregionOrigin};\n+use super::{\n+    InferCtxtUndoLogs, MiscVariable, RegionVariableOrigin, Rollback, Snapshot, SubregionOrigin,\n+};\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n@@ -61,7 +63,7 @@ pub struct RegionConstraintStorage<'tcx> {\n \n pub struct RegionConstraintCollector<'tcx, 'a> {\n     storage: &'a mut RegionConstraintStorage<'tcx>,\n-    undo_log: &'a mut Logs<'tcx>,\n+    undo_log: &'a mut InferCtxtUndoLogs<'tcx>,\n }\n \n impl std::ops::Deref for RegionConstraintCollector<'tcx, '_> {\n@@ -346,7 +348,7 @@ impl<'tcx> RegionConstraintStorage<'tcx> {\n \n     pub(crate) fn with_log<'a>(\n         &'a mut self,\n-        undo_log: &'a mut Logs<'tcx>,\n+        undo_log: &'a mut InferCtxtUndoLogs<'tcx>,\n     ) -> RegionConstraintCollector<'tcx, 'a> {\n         RegionConstraintCollector { storage: self, undo_log }\n     }"}, {"sha": "69afb605b344fb7336ed36f141b30385cfeca4a1", "filename": "src/librustc_infer/infer/type_variable.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bc7f7b2d4d2ae25e6ce234ac4b03715b6979548b/src%2Flibrustc_infer%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7f7b2d4d2ae25e6ce234ac4b03715b6979548b/src%2Flibrustc_infer%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ftype_variable.rs?ref=bc7f7b2d4d2ae25e6ce234ac4b03715b6979548b", "patch": "@@ -3,7 +3,7 @@ use rustc_middle::ty::{self, Ty, TyVid};\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n \n-use crate::infer::Logs;\n+use crate::infer::InferCtxtUndoLogs;\n \n use rustc_data_structures::snapshot_vec as sv;\n use rustc_data_structures::unify as ut;\n@@ -88,7 +88,7 @@ pub struct TypeVariableTable<'tcx, 'a> {\n \n     sub_relations: &'a mut ut::UnificationStorage<ty::TyVid>,\n \n-    undo_log: &'a mut Logs<'tcx>,\n+    undo_log: &'a mut InferCtxtUndoLogs<'tcx>,\n }\n \n #[derive(Copy, Clone, Debug)]\n@@ -167,7 +167,7 @@ impl<'tcx> TypeVariableStorage<'tcx> {\n \n     pub(crate) fn with_log<'a>(\n         &'a mut self,\n-        undo_log: &'a mut Logs<'tcx>,\n+        undo_log: &'a mut InferCtxtUndoLogs<'tcx>,\n     ) -> TypeVariableTable<'tcx, 'a> {\n         let TypeVariableStorage { values, eq_relations, sub_relations } = self;\n         TypeVariableTable { values, eq_relations, sub_relations, undo_log }\n@@ -327,7 +327,9 @@ impl<'tcx> TypeVariableTable<'tcx, '_> {\n         Snapshot { value_count: self.eq_relations().len() as u32, _marker: PhantomData }\n     }\n \n-    fn values(&mut self) -> sv::SnapshotVec<Delegate, &mut Vec<TypeVariableData>, &mut Logs<'tcx>> {\n+    fn values(\n+        &mut self,\n+    ) -> sv::SnapshotVec<Delegate, &mut Vec<TypeVariableData>, &mut InferCtxtUndoLogs<'tcx>> {\n         sv::SnapshotVec::with_log(self.values, self.undo_log)\n     }\n "}, {"sha": "8cf3987b902ee5cf9e913c87bdbf47e875b0f17f", "filename": "src/librustc_infer/traits/project.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bc7f7b2d4d2ae25e6ce234ac4b03715b6979548b/src%2Flibrustc_infer%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7f7b2d4d2ae25e6ce234ac4b03715b6979548b/src%2Flibrustc_infer%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fproject.rs?ref=bc7f7b2d4d2ae25e6ce234ac4b03715b6979548b", "patch": "@@ -2,7 +2,7 @@\n \n use super::PredicateObligation;\n \n-use rustc_data_structures::snapshot_map::{Snapshot, SnapshotMap};\n+use rustc_data_structures::snapshot_map::{self, SnapshotMapRef, SnapshotMapStorage};\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::{self, Ty};\n \n@@ -63,7 +63,7 @@ impl<'tcx, T> Normalized<'tcx, T> {\n // reduce the amount of duplication. Let's see what we get with the Chalk reforms.\n pub struct ProjectionCache<'tcx, 'a> {\n     map: &'a mut SnapshotMapStorage<ProjectionCacheKey<'tcx>, ProjectionCacheEntry<'tcx>>,\n-    undo_log: &'a mut Logs<'tcx>,\n+    undo_log: &'a mut InferCtxtUndoLogs<'tcx>,\n }\n \n #[derive(Default)]\n@@ -93,7 +93,7 @@ pub enum ProjectionCacheEntry<'tcx> {\n impl<'tcx> ProjectionCacheStorage<'tcx> {\n     pub(crate) fn with_log<'a>(\n         &'a mut self,\n-        undo_log: &'a mut Logs<'tcx>,\n+        undo_log: &'a mut InferCtxtUndoLogs<'tcx>,\n     ) -> ProjectionCache<'tcx, 'a> {\n         ProjectionCache { map: &mut self.map, undo_log }\n     }\n@@ -102,7 +102,12 @@ impl<'tcx> ProjectionCacheStorage<'tcx> {\n impl<'tcx> ProjectionCache<'tcx, '_> {\n     fn map(\n         &mut self,\n-    ) -> SnapshotMapRef<'_, ProjectionCacheKey<'tcx>, ProjectionCacheEntry<'tcx>, Logs<'tcx>> {\n+    ) -> SnapshotMapRef<\n+        '_,\n+        ProjectionCacheKey<'tcx>,\n+        ProjectionCacheEntry<'tcx>,\n+        InferCtxtUndoLogs<'tcx>,\n+    > {\n         self.map.with_log(self.undo_log)\n     }\n "}]}