{"sha": "2cf0a4ad4690c587d755dc6e5383779dddb9b178", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZjBhNGFkNDY5MGM1ODdkNzU1ZGM2ZTUzODM3NzlkZGRiOWIxNzg=", "commit": {"author": {"name": "Sebastian Humenda", "email": "shumenda@gmx.de", "date": "2017-08-17T11:23:00Z"}, "committer": {"name": "Tobias Schaffner", "email": "tschaff@genua.de", "date": "2017-09-08T12:36:56Z"}, "message": "Match c_char definitions and enable signal reset for L4Re\n\n*   Match definition of c_char in os/raw.rs with the libc definition\n\n    Due to historic reasons, os/raw.rs redefines types for c_char from\n    libc, but these didn't match. Now they do :).\n\n*   Enable signal reset on exec for L4Re\n\n    L4Re has full signal emulation and hence it needs to reset the\n    signal set of the child with sigemptyset. However, gid and uid\n    should *not* be set.", "tree": {"sha": "4bcbae74c880377bbf96b952041ae9f3b70ed8d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bcbae74c880377bbf96b952041ae9f3b70ed8d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cf0a4ad4690c587d755dc6e5383779dddb9b178", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cf0a4ad4690c587d755dc6e5383779dddb9b178", "html_url": "https://github.com/rust-lang/rust/commit/2cf0a4ad4690c587d755dc6e5383779dddb9b178", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cf0a4ad4690c587d755dc6e5383779dddb9b178/comments", "author": {"login": "humenda", "id": 4473821, "node_id": "MDQ6VXNlcjQ0NzM4MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/4473821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/humenda", "html_url": "https://github.com/humenda", "followers_url": "https://api.github.com/users/humenda/followers", "following_url": "https://api.github.com/users/humenda/following{/other_user}", "gists_url": "https://api.github.com/users/humenda/gists{/gist_id}", "starred_url": "https://api.github.com/users/humenda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/humenda/subscriptions", "organizations_url": "https://api.github.com/users/humenda/orgs", "repos_url": "https://api.github.com/users/humenda/repos", "events_url": "https://api.github.com/users/humenda/events{/privacy}", "received_events_url": "https://api.github.com/users/humenda/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d6ad402a644d9e57f1a6d6c579fe04acf00e0e2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6ad402a644d9e57f1a6d6c579fe04acf00e0e2e", "html_url": "https://github.com/rust-lang/rust/commit/d6ad402a644d9e57f1a6d6c579fe04acf00e0e2e"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "95439640f7cc5c5000fbf98091a29cdf84b733a7", "filename": "src/libstd/os/raw.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cf0a4ad4690c587d755dc6e5383779dddb9b178/src%2Flibstd%2Fos%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf0a4ad4690c587d755dc6e5383779dddb9b178/src%2Flibstd%2Fos%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw.rs?ref=2cf0a4ad4690c587d755dc6e5383779dddb9b178", "patch": "@@ -21,6 +21,7 @@ use fmt;\n                                        target_arch = \"s390x\")),\n           all(target_os = \"android\", any(target_arch = \"aarch64\",\n                                          target_arch = \"arm\")),\n+          all(target_os = \"l4re\", target_arch = \"x86_64\"),\n           all(target_os = \"fuchsia\", target_arch = \"aarch64\")))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = u8;\n #[cfg(not(any(all(target_os = \"linux\", any(target_arch = \"aarch64\",\n@@ -30,6 +31,7 @@ use fmt;\n                                            target_arch = \"s390x\")),\n               all(target_os = \"android\", any(target_arch = \"aarch64\",\n                                              target_arch = \"arm\")),\n+              all(target_os = \"l4re\", target_arch = \"x86_64\"),\n               all(target_os = \"fuchsia\", target_arch = \"aarch64\"))))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = i8;\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_schar = i8;"}, {"sha": "63b81c4f4c27ae91776aa48f6b5c855b4d9207f9", "filename": "src/libstd/sys/unix/ext/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2cf0a4ad4690c587d755dc6e5383779dddb9b178/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf0a4ad4690c587d755dc6e5383779dddb9b178/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fmod.rs?ref=2cf0a4ad4690c587d755dc6e5383779dddb9b178", "patch": "@@ -36,6 +36,7 @@ pub mod fs;\n pub mod process;\n pub mod raw;\n pub mod thread;\n+#[cfg(not(target_os = \"l4re\"))]\n pub mod net;\n \n /// A prelude for conveniently writing platform-specific code."}, {"sha": "efa149646048ea35c201563aa0199668a9ed40fe", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2cf0a4ad4690c587d755dc6e5383779dddb9b178/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf0a4ad4690c587d755dc6e5383779dddb9b178/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=2cf0a4ad4690c587d755dc6e5383779dddb9b178", "patch": "@@ -44,6 +44,7 @@ pub mod fd;\n pub mod fs;\n pub mod memchr;\n pub mod mutex;\n+#[cfg(not(target_os = \"l4re\"))]\n pub mod net;\n pub mod os;\n pub mod os_str;"}, {"sha": "870db8200273eb84e543bbda841519eada1f46b3", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2cf0a4ad4690c587d755dc6e5383779dddb9b178/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf0a4ad4690c587d755dc6e5383779dddb9b178/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=2cf0a4ad4690c587d755dc6e5383779dddb9b178", "patch": "@@ -160,20 +160,22 @@ impl Command {\n             t!(cvt_r(|| libc::dup2(fd, libc::STDERR_FILENO)));\n         }\n \n-        if let Some(u) = self.get_gid() {\n-            t!(cvt(libc::setgid(u as gid_t)));\n-        }\n-        if let Some(u) = self.get_uid() {\n-            // When dropping privileges from root, the `setgroups` call\n-            // will remove any extraneous groups. If we don't call this,\n-            // then even though our uid has dropped, we may still have\n-            // groups that enable us to do super-user things. This will\n-            // fail if we aren't root, so don't bother checking the\n-            // return value, this is just done as an optimistic\n-            // privilege dropping function.\n-            let _ = libc::setgroups(0, ptr::null());\n+        if cfg!(not(any(target_os = \"l4re\"))) {\n+            if let Some(u) = self.get_gid() {\n+                t!(cvt(libc::setgid(u as gid_t)));\n+            }\n+            if let Some(u) = self.get_uid() {\n+                // When dropping privileges from root, the `setgroups` call\n+                // will remove any extraneous groups. If we don't call this,\n+                // then even though our uid has dropped, we may still have\n+                // groups that enable us to do super-user things. This will\n+                // fail if we aren't root, so don't bother checking the\n+                // return value, this is just done as an optimistic\n+                // privilege dropping function.\n+                let _ = libc::setgroups(0, ptr::null());\n \n-            t!(cvt(libc::setuid(u as uid_t)));\n+                t!(cvt(libc::setuid(u as uid_t)));\n+            }\n         }\n         if let Some(ref cwd) = *self.get_cwd() {\n             t!(cvt(libc::chdir(cwd.as_ptr())));"}]}