{"sha": "ce014be0b9d0325ad9e6ecb8c93b3c8186b18089", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMDE0YmUwYjlkMDMyNWFkOWU2ZWNiOGM5M2IzYzgxODZiMTgwODk=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-09-11T15:55:59Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-09-13T15:48:03Z"}, "message": "Link rustdoc lint docs to the rustdoc book.", "tree": {"sha": "9af4c5e58eaed788e9af39f201a144317a6d9e4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9af4c5e58eaed788e9af39f201a144317a6d9e4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce014be0b9d0325ad9e6ecb8c93b3c8186b18089", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce014be0b9d0325ad9e6ecb8c93b3c8186b18089", "html_url": "https://github.com/rust-lang/rust/commit/ce014be0b9d0325ad9e6ecb8c93b3c8186b18089", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce014be0b9d0325ad9e6ecb8c93b3c8186b18089/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45c1e0ae07b9581d8c2d2b39315ac7cc79475d75", "url": "https://api.github.com/repos/rust-lang/rust/commits/45c1e0ae07b9581d8c2d2b39315ac7cc79475d75", "html_url": "https://github.com/rust-lang/rust/commit/45c1e0ae07b9581d8c2d2b39315ac7cc79475d75"}], "stats": {"total": 246, "additions": 88, "deletions": 158}, "files": [{"sha": "22030a842dbb81329f46f2cd016feb20f2b16fd3", "filename": "compiler/rustc_session/src/lint/builtin.rs", "status": "modified", "additions": 13, "deletions": 125, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/ce014be0b9d0325ad9e6ecb8c93b3c8186b18089/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce014be0b9d0325ad9e6ecb8c93b3c8186b18089/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs?ref=ce014be0b9d0325ad9e6ecb8c93b3c8186b18089", "patch": "@@ -1817,35 +1817,10 @@ declare_lint! {\n \n declare_lint! {\n     /// The `broken_intra_doc_links` lint detects failures in resolving\n-    /// intra-doc link targets. This is a `rustdoc` only lint, and only works\n-    /// on the [**nightly channel**].\n+    /// intra-doc link targets. This is a `rustdoc` only lint, see the\n+    /// documentation in the [rustdoc book].\n     ///\n-    /// [**nightly channel**]: https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\n-    ///\n-    /// ### Example\n-    ///\n-    /// ```rust,rustdoc\n-    /// /// This is a doc comment.\n-    /// ///\n-    /// /// See also [`bar`].\n-    /// pub fn foo() {\n-    /// }\n-    /// ```\n-    ///\n-    /// {{produces}}\n-    ///\n-    /// ### Explanation\n-    ///\n-    /// `rustdoc` allows [linking to items by name][intra] which will\n-    /// automatically generate links in the documentation to the item. This\n-    /// lint is issued when `rustdoc` is unable to find the named item. Check\n-    /// that the name is correct, that it is in scope, or if you need to\n-    /// qualify it with a path. If you intended to have square brackets appear\n-    /// literally in the text, surround the brackets with backticks such as ``\n-    /// `[example]` `` to indicate a code span, or prefix it with a backslash\n-    /// such as `\\[example]`.\n-    ///\n-    /// [intra]: https://doc.rust-lang.org/nightly/rustdoc/unstable-features.html#linking-to-items-by-name\n+    /// [rustdoc book]: ../../../rustdoc/lints.html#broken_intra_doc_links\n     pub BROKEN_INTRA_DOC_LINKS,\n     Warn,\n     \"failures in resolving intra-doc link targets\"\n@@ -1854,52 +1829,20 @@ declare_lint! {\n declare_lint! {\n     /// The `invalid_codeblock_attributes` lint detects code block attributes\n     /// in documentation examples that have potentially mis-typed values. This\n-    /// is a `rustdoc` only lint.\n-    ///\n-    /// ### Example\n+    /// is a `rustdoc` only lint, see the documentation in the [rustdoc book].\n     ///\n-    /// ```rust,rustdoc\n-    /// /// Example.\n-    /// ///\n-    /// /// ```should-panic\n-    /// /// assert_eq!(1, 2);\n-    /// /// ```\n-    /// pub fn foo() {}\n-    /// ```\n-    ///\n-    /// {{produces}}\n-    ///\n-    /// ### Explanation\n-    ///\n-    /// This lint is issued when `rustdoc` detects an example code block\n-    /// attribute that appears similar to a valid one. In the example above,\n-    /// the correct form is `should_panic`. This helps detect typo mistakes\n-    /// for some common attributes.\n+    /// [rustdoc book]: ../../../rustdoc/lints.html#invalid_codeblock_attributes\n     pub INVALID_CODEBLOCK_ATTRIBUTES,\n     Warn,\n     \"codeblock attribute looks a lot like a known one\"\n }\n \n declare_lint! {\n     /// The `missing_crate_level_docs` lint detects if documentation is\n-    /// missing at the crate root. This is a `rustdoc` only lint. This is a\n-    /// `rustdoc` only lint.\n-    ///\n-    /// ### Example\n-    ///\n-    /// ```rust,rustdoc\n-    /// #![deny(missing_crate_level_docs)]\n-    /// ```\n-    ///\n-    /// {{produces}}\n-    ///\n-    /// ### Explanation\n+    /// missing at the crate root. This is a `rustdoc` only lint, see the\n+    /// documentation in the [rustdoc book].\n     ///\n-    /// This lint causes `rustdoc` to check if the crate root is missing\n-    /// documentation. This is currently \"allow\" by default, but it is\n-    /// intended to make this a warning in the future. This is intended as a\n-    /// means to introduce new users on *how* to document their crate by\n-    /// pointing them to some instructions on how to get started.\n+    /// [rustdoc book]: ../../../rustdoc/lints.html#missing_crate_level_docs\n     pub MISSING_CRATE_LEVEL_DOCS,\n     Allow,\n     \"detects crates with no crate-level documentation\"\n@@ -1908,75 +1851,20 @@ declare_lint! {\n declare_lint! {\n     /// The `missing_doc_code_examples` lint detects publicly-exported items\n     /// without code samples in their documentation. This is a `rustdoc` only\n-    /// lint, and only works on the [**nightly channel**].\n+    /// lint, see the documentation in the [rustdoc book].\n     ///\n-    /// [**nightly channel**]: https://doc.rust-lang.org/book/appendix-07-nightly-rust.html\n-    ///\n-    /// ### Example\n-    ///\n-    /// ```rust,rustdoc\n-    /// #![warn(missing_doc_code_examples)]\n-    ///\n-    /// /// There is no code example!\n-    /// pub fn no_code_example() {}\n-    /// ```\n-    ///\n-    /// {{produces}}\n-    ///\n-    /// ### Explanation\n-    ///\n-    /// This lint is to ensure a high level of quality for documentation. Code\n-    /// examples can be very useful to see how to use an API. To add an\n-    /// example, include a markdown code block with an example of how to use\n-    /// the item, such as:\n-    ///\n-    /// ```rust\n-    /// /// Adds one to the number given.\n-    /// ///\n-    /// /// # Examples\n-    /// ///\n-    /// /// ```\n-    /// /// let arg = 5;\n-    /// /// let answer = my_crate::add_one(arg);\n-    /// ///\n-    /// /// assert_eq!(6, answer);\n-    /// /// ```\n-    /// pub fn add_one(x: i32) -> i32 {\n-    ///     x + 1\n-    /// }\n-    /// ```\n+    /// [rustdoc book]: ../../../rustdoc/lints.html#missing_doc_code_examples\n     pub MISSING_DOC_CODE_EXAMPLES,\n     Allow,\n     \"detects publicly-exported items without code samples in their documentation\"\n }\n \n declare_lint! {\n     /// The `private_doc_tests` lint detects code samples in docs of private\n-    /// items not documented by `rustdoc`. This is a `rustdoc` only lint.\n-    ///\n-    /// ### Example\n-    ///\n-    /// ```rust,rustdoc\n-    /// #![deny(private_doc_tests)]\n+    /// items not documented by `rustdoc`. This is a `rustdoc` only lint, see\n+    /// the documentation in the [rustdoc book].\n     ///\n-    /// mod foo {\n-    ///     /// private doc test\n-    ///     ///\n-    ///     /// ```\n-    ///     /// assert!(false);\n-    ///     /// ```\n-    ///     fn bar() {}\n-    /// }\n-    /// ```\n-    ///\n-    /// {{produces}}\n-    ///\n-    /// ### Explanation\n-    ///\n-    /// Because documentation examples link against the public API of the\n-    /// crate, it is not possible for an example to access a private item.\n-    /// This means it was likely a mistake to add a code example to a private\n-    /// item.\n+    /// [rustdoc book]: ../../../rustdoc/lints.html#private_doc_tests\n     pub PRIVATE_DOC_TESTS,\n     Allow,\n     \"detects code samples in docs of private items not documented by rustdoc\""}, {"sha": "98a0119e4df12f8daf4dd2c4c3a6e10c0528ed06", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce014be0b9d0325ad9e6ecb8c93b3c8186b18089/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce014be0b9d0325ad9e6ecb8c93b3c8186b18089/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=ce014be0b9d0325ad9e6ecb8c93b3c8186b18089", "patch": "@@ -756,16 +756,13 @@ impl Step for RustcBook {\n         // The tool runs `rustc` for extracting output examples, so it needs a\n         // functional sysroot.\n         builder.ensure(compile::Std { compiler: self.compiler, target: self.target });\n-        let rustdoc = builder.rustdoc(self.compiler);\n         let mut cmd = builder.tool_cmd(Tool::LintDocs);\n         cmd.arg(\"--src\");\n         cmd.arg(builder.src.join(\"compiler\"));\n         cmd.arg(\"--out\");\n         cmd.arg(&out_listing);\n         cmd.arg(\"--rustc\");\n         cmd.arg(rustc);\n-        cmd.arg(\"--rustdoc\");\n-        cmd.arg(rustdoc);\n         if builder.config.verbose() {\n             cmd.arg(\"--verbose\");\n         }"}, {"sha": "ce292c60460cc87cdcf67724cf71343baf44c8db", "filename": "src/doc/rustdoc/src/lints.md", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/ce014be0b9d0325ad9e6ecb8c93b3c8186b18089/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md", "raw_url": "https://github.com/rust-lang/rust/raw/ce014be0b9d0325ad9e6ecb8c93b3c8186b18089/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md?ref=ce014be0b9d0325ad9e6ecb8c93b3c8186b18089", "patch": "@@ -49,6 +49,30 @@ warning: missing documentation for a function\n    | ^^^^^^^^^^^^^^^^^^^^^\n ```\n \n+## missing_crate_level_docs\n+\n+This lint is **allowed by default**. It detects if there is no documentation\n+at the crate root. For example:\n+\n+```rust\n+#![warn(missing_crate_level_docs)]\n+```\n+\n+This will generate the following warning:\n+\n+```text\n+warning: no documentation found for this crate's top-level module\n+  |\n+  = help: The following guide may be of use:\n+          https://doc.rust-lang.org/nightly/rustdoc/how-to-write-documentation.html\n+```\n+\n+This is currently \"allow\" by default, but it is intended to make this a\n+warning in the future. This is intended as a means to introduce new users on\n+*how* to document their crate by pointing them to some instructions on how to\n+get started, without providing overwhelming warnings like `missing_docs`\n+might.\n+\n ## missing_doc_code_examples\n \n This lint is **allowed by default** and is **nightly-only**. It detects when a documentation block\n@@ -117,3 +141,37 @@ warning: Documentation test in private item\n  8 | |     /// ```\n    | |___________^\n ```\n+\n+## invalid_codeblock_attributes\n+\n+This lint **warns by default**. It detects code block attributes in\n+documentation examples that have potentially mis-typed values. For example:\n+\n+```rust\n+/// Example.\n+///\n+/// ```should-panic\n+/// assert_eq!(1, 2);\n+/// ```\n+pub fn foo() {}\n+```\n+\n+Which will give:\n+\n+```text\n+warning: unknown attribute `should-panic`. Did you mean `should_panic`?\n+ --> src/lib.rs:1:1\n+  |\n+1 | / /// Example.\n+2 | | ///\n+3 | | /// ```should-panic\n+4 | | /// assert_eq!(1, 2);\n+5 | | /// ```\n+  | |_______^\n+  |\n+  = note: `#[warn(invalid_codeblock_attributes)]` on by default\n+  = help: the code block will either not be tested if not marked as a rust one or won't fail if it doesn't panic when running\n+```\n+\n+In the example above, the correct form is `should_panic`. This helps detect\n+typo mistakes for some common attributes."}, {"sha": "a8e3278fc667e125ece85c229c7a7e24f306f1d2", "filename": "src/tools/lint-docs/src/lib.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ce014be0b9d0325ad9e6ecb8c93b3c8186b18089/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce014be0b9d0325ad9e6ecb8c93b3c8186b18089/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs?ref=ce014be0b9d0325ad9e6ecb8c93b3c8186b18089", "patch": "@@ -15,6 +15,12 @@ struct Lint {\n     lineno: usize,\n }\n \n+impl Lint {\n+    fn doc_contains(&self, text: &str) -> bool {\n+        self.doc.iter().any(|line| line.contains(text))\n+    }\n+}\n+\n #[derive(Clone, Copy, PartialEq)]\n enum Level {\n     Allow,\n@@ -37,12 +43,11 @@ pub fn extract_lint_docs(\n     src_path: &Path,\n     out_path: &Path,\n     rustc_path: &Path,\n-    rustdoc_path: &Path,\n     verbose: bool,\n ) -> Result<(), Box<dyn Error>> {\n     let mut lints = gather_lints(src_path)?;\n     for lint in &mut lints {\n-        generate_output_example(lint, rustc_path, rustdoc_path, verbose).map_err(|e| {\n+        generate_output_example(lint, rustc_path, verbose).map_err(|e| {\n             format!(\n                 \"failed to test example in lint docs for `{}` in {}:{}: {}\",\n                 lint.name,\n@@ -197,7 +202,6 @@ fn lint_name(line: &str) -> Result<String, &'static str> {\n fn generate_output_example(\n     lint: &mut Lint,\n     rustc_path: &Path,\n-    rustdoc_path: &Path,\n     verbose: bool,\n ) -> Result<(), Box<dyn Error>> {\n     // Explicit list of lints that are allowed to not have an example. Please\n@@ -214,15 +218,19 @@ fn generate_output_example(\n     ) {\n         return Ok(());\n     }\n+    if lint.doc_contains(\"[rustdoc book]\") && !lint.doc_contains(\"{{produces}}\") {\n+        // Rustdoc lints are documented in the rustdoc book, don't check these.\n+        return Ok(());\n+    }\n     check_style(lint)?;\n-    replace_produces(lint, rustc_path, rustdoc_path, verbose)?;\n+    replace_produces(lint, rustc_path, verbose)?;\n     Ok(())\n }\n \n /// Checks the doc style of the lint.\n fn check_style(lint: &Lint) -> Result<(), Box<dyn Error>> {\n     for expected in &[\"### Example\", \"### Explanation\", \"{{produces}}\"] {\n-        if !lint.doc.iter().any(|line| line.contains(expected)) {\n+        if !lint.doc_contains(expected) {\n             return Err(format!(\"lint docs should contain the line `{}`\", expected).into());\n         }\n     }\n@@ -243,7 +251,6 @@ fn check_style(lint: &Lint) -> Result<(), Box<dyn Error>> {\n fn replace_produces(\n     lint: &mut Lint,\n     rustc_path: &Path,\n-    rustdoc_path: &Path,\n     verbose: bool,\n ) -> Result<(), Box<dyn Error>> {\n     let mut lines = lint.doc.iter_mut();\n@@ -283,14 +290,8 @@ fn replace_produces(\n             match lines.next() {\n                 Some(line) if line.is_empty() => {}\n                 Some(line) if line == \"{{produces}}\" => {\n-                    let output = generate_lint_output(\n-                        &lint.name,\n-                        &example,\n-                        &options,\n-                        rustc_path,\n-                        rustdoc_path,\n-                        verbose,\n-                    )?;\n+                    let output =\n+                        generate_lint_output(&lint.name, &example, &options, rustc_path, verbose)?;\n                     line.replace_range(\n                         ..,\n                         &format!(\n@@ -318,7 +319,6 @@ fn generate_lint_output(\n     example: &[&mut String],\n     options: &[&str],\n     rustc_path: &Path,\n-    rustdoc_path: &Path,\n     verbose: bool,\n ) -> Result<String, Box<dyn Error>> {\n     if verbose {\n@@ -327,8 +327,7 @@ fn generate_lint_output(\n     let tempdir = tempfile::TempDir::new()?;\n     let tempfile = tempdir.path().join(\"lint_example.rs\");\n     let mut source = String::new();\n-    let is_rustdoc = options.contains(&\"rustdoc\");\n-    let needs_main = !example.iter().any(|line| line.contains(\"fn main\")) && !is_rustdoc;\n+    let needs_main = !example.iter().any(|line| line.contains(\"fn main\"));\n     // Remove `# ` prefix for hidden lines.\n     let unhidden =\n         example.iter().map(|line| if line.starts_with(\"# \") { &line[2..] } else { line });\n@@ -354,8 +353,7 @@ fn generate_lint_output(\n     }\n     fs::write(&tempfile, source)\n         .map_err(|e| format!(\"failed to write {}: {}\", tempfile.display(), e))?;\n-    let program = if is_rustdoc { rustdoc_path } else { rustc_path };\n-    let mut cmd = Command::new(program);\n+    let mut cmd = Command::new(rustc_path);\n     if options.contains(&\"edition2015\") {\n         cmd.arg(\"--edition=2015\");\n     } else {"}, {"sha": "45d97bd431791348c77a736c08ce6554fae067c3", "filename": "src/tools/lint-docs/src/main.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ce014be0b9d0325ad9e6ecb8c93b3c8186b18089/src%2Ftools%2Flint-docs%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce014be0b9d0325ad9e6ecb8c93b3c8186b18089/src%2Ftools%2Flint-docs%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flint-docs%2Fsrc%2Fmain.rs?ref=ce014be0b9d0325ad9e6ecb8c93b3c8186b18089", "patch": "@@ -13,7 +13,6 @@ fn doit() -> Result<(), Box<dyn Error>> {\n     let mut src_path = None;\n     let mut out_path = None;\n     let mut rustc_path = None;\n-    let mut rustdoc_path = None;\n     let mut verbose = false;\n     while let Some(arg) = args.next() {\n         match arg.as_str() {\n@@ -35,12 +34,6 @@ fn doit() -> Result<(), Box<dyn Error>> {\n                     None => return Err(\"--rustc requires a value\".into()),\n                 };\n             }\n-            \"--rustdoc\" => {\n-                rustdoc_path = match args.next() {\n-                    Some(s) => Some(PathBuf::from(s)),\n-                    None => return Err(\"--rustdoc requires a value\".into()),\n-                };\n-            }\n             \"-v\" | \"--verbose\" => verbose = true,\n             s => return Err(format!(\"unexpected argument `{}`\", s).into()),\n         }\n@@ -54,14 +47,10 @@ fn doit() -> Result<(), Box<dyn Error>> {\n     if rustc_path.is_none() {\n         return Err(\"--rustc must be specified to the path of rustc\".into());\n     }\n-    if rustdoc_path.is_none() {\n-        return Err(\"--rustdoc must be specified to the path of rustdoc\".into());\n-    }\n     lint_docs::extract_lint_docs(\n         &src_path.unwrap(),\n         &out_path.unwrap(),\n         &rustc_path.unwrap(),\n-        &rustdoc_path.unwrap(),\n         verbose,\n     )\n }"}]}