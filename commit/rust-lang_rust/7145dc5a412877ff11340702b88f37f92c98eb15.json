{"sha": "7145dc5a412877ff11340702b88f37f92c98eb15", "node_id": "C_kwDOAAsO6NoAKDcxNDVkYzVhNDEyODc3ZmYxMTM0MDcwMmI4OGYzN2Y5MmM5OGViMTU", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2022-08-04T03:23:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-04T03:23:19Z"}, "message": "Merge pull request #299 from rust-lang/interleave-one\n\nFix interleave/deinterleave for vectors with only one lane", "tree": {"sha": "d906d09e400b27418282860cc9c86b6a4bedae85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d906d09e400b27418282860cc9c86b6a4bedae85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7145dc5a412877ff11340702b88f37f92c98eb15", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi6zunCRBK7hj4Ov3rIwAA++kIAImRFDLQQHb10mXFyxDZcWdI\n0NH2Z8HWvXk5S81ll8iZQBxLjZAj3TdMJW8K3uyKtuAgel9YAQKAQbByNLzaJhw6\nDJtUJSW80EKAShdTUmt0fjLYdn0cm7/Gm0NgPdOu8+qQ83U26Ys6++Lvs5WWhtus\nhtSUqXcLCpFkvy9wKTwH0aFpfeog7iIBLfztpDfb7zeNqVIGAWz6Qlm8dy3z0GFL\nfdk/8RQZNRTTOgWrKqH7vfjNGQT6RpxglzDPiIh27Wm7xSB7+COKHl+126xj1mce\nJi6pYvlZ9gSug4hNLAf4AwYGpdqykR9Gegs4pv17pCgGgcIdFvIgDe1ADp0Ds1E=\n=fa/2\n-----END PGP SIGNATURE-----\n", "payload": "tree d906d09e400b27418282860cc9c86b6a4bedae85\nparent 691c8b29e619d0e7f19b519bb6a9768345615200\nparent 5f7066430b9239cfe8243ddba4c29416f002ae6b\nauthor Caleb Zulawski <caleb.zulawski@gmail.com> 1659583399 -0400\ncommitter GitHub <noreply@github.com> 1659583399 -0400\n\nMerge pull request #299 from rust-lang/interleave-one\n\nFix interleave/deinterleave for vectors with only one lane"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7145dc5a412877ff11340702b88f37f92c98eb15", "html_url": "https://github.com/rust-lang/rust/commit/7145dc5a412877ff11340702b88f37f92c98eb15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7145dc5a412877ff11340702b88f37f92c98eb15/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "691c8b29e619d0e7f19b519bb6a9768345615200", "url": "https://api.github.com/repos/rust-lang/rust/commits/691c8b29e619d0e7f19b519bb6a9768345615200", "html_url": "https://github.com/rust-lang/rust/commit/691c8b29e619d0e7f19b519bb6a9768345615200"}, {"sha": "5f7066430b9239cfe8243ddba4c29416f002ae6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f7066430b9239cfe8243ddba4c29416f002ae6b", "html_url": "https://github.com/rust-lang/rust/commit/5f7066430b9239cfe8243ddba4c29416f002ae6b"}], "stats": {"total": 86, "additions": 41, "deletions": 45}, "files": [{"sha": "68f20516cf5bca46e4dccbe363fa538ed0dc53a3", "filename": "crates/core_simd/src/swizzle.rs", "status": "modified", "additions": 27, "deletions": 45, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/7145dc5a412877ff11340702b88f37f92c98eb15/crates%2Fcore_simd%2Fsrc%2Fswizzle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7145dc5a412877ff11340702b88f37f92c98eb15/crates%2Fcore_simd%2Fsrc%2Fswizzle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fswizzle.rs?ref=7145dc5a412877ff11340702b88f37f92c98eb15", "patch": "@@ -265,16 +265,13 @@ where\n \n     /// Interleave two vectors.\n     ///\n-    /// Produces two vectors with lanes taken alternately from `self` and `other`.\n+    /// The resulting vectors contain lanes taken alternatively from `self` and `other`, first\n+    /// filling the first result, and then the second.\n     ///\n-    /// The first result contains the first `LANES / 2` lanes from `self` and `other`,\n-    /// alternating, starting with the first lane of `self`.\n-    ///\n-    /// The second result contains the last `LANES / 2` lanes from `self` and `other`,\n-    /// alternating, starting with the lane `LANES / 2` from the start of `self`.\n+    /// The reverse of this operation is [`Simd::deinterleave`].\n     ///\n     /// ```\n-    /// #![feature(portable_simd)]\n+    /// # #![feature(portable_simd)]\n     /// # use core::simd::Simd;\n     /// let a = Simd::from_array([0, 1, 2, 3]);\n     /// let b = Simd::from_array([4, 5, 6, 7]);\n@@ -285,29 +282,17 @@ where\n     #[inline]\n     #[must_use = \"method returns a new vector and does not mutate the original inputs\"]\n     pub fn interleave(self, other: Self) -> (Self, Self) {\n-        const fn lo<const LANES: usize>() -> [Which; LANES] {\n-            let mut idx = [Which::First(0); LANES];\n-            let mut i = 0;\n-            while i < LANES {\n-                let offset = i / 2;\n-                idx[i] = if i % 2 == 0 {\n-                    Which::First(offset)\n-                } else {\n-                    Which::Second(offset)\n-                };\n-                i += 1;\n-            }\n-            idx\n-        }\n-        const fn hi<const LANES: usize>() -> [Which; LANES] {\n+        const fn interleave<const LANES: usize>(high: bool) -> [Which; LANES] {\n             let mut idx = [Which::First(0); LANES];\n             let mut i = 0;\n             while i < LANES {\n-                let offset = (LANES + i) / 2;\n-                idx[i] = if i % 2 == 0 {\n-                    Which::First(offset)\n+                // Treat the source as a concatenated vector\n+                let dst_index = if high { i + LANES } else { i };\n+                let src_index = dst_index / 2 + (dst_index % 2) * LANES;\n+                idx[i] = if src_index < LANES {\n+                    Which::First(src_index)\n                 } else {\n-                    Which::Second(offset)\n+                    Which::Second(src_index % LANES)\n                 };\n                 i += 1;\n             }\n@@ -318,11 +303,11 @@ where\n         struct Hi;\n \n         impl<const LANES: usize> Swizzle2<LANES, LANES> for Lo {\n-            const INDEX: [Which; LANES] = lo::<LANES>();\n+            const INDEX: [Which; LANES] = interleave::<LANES>(false);\n         }\n \n         impl<const LANES: usize> Swizzle2<LANES, LANES> for Hi {\n-            const INDEX: [Which; LANES] = hi::<LANES>();\n+            const INDEX: [Which; LANES] = interleave::<LANES>(true);\n         }\n \n         (Lo::swizzle2(self, other), Hi::swizzle2(self, other))\n@@ -336,8 +321,10 @@ where\n     /// The second result takes every other lane of `self` and then `other`, starting with\n     /// the second lane.\n     ///\n+    /// The reverse of this operation is [`Simd::interleave`].\n+    ///\n     /// ```\n-    /// #![feature(portable_simd)]\n+    /// # #![feature(portable_simd)]\n     /// # use core::simd::Simd;\n     /// let a = Simd::from_array([0, 4, 1, 5]);\n     /// let b = Simd::from_array([2, 6, 3, 7]);\n@@ -348,22 +335,17 @@ where\n     #[inline]\n     #[must_use = \"method returns a new vector and does not mutate the original inputs\"]\n     pub fn deinterleave(self, other: Self) -> (Self, Self) {\n-        const fn even<const LANES: usize>() -> [Which; LANES] {\n-            let mut idx = [Which::First(0); LANES];\n-            let mut i = 0;\n-            while i < LANES / 2 {\n-                idx[i] = Which::First(2 * i);\n-                idx[i + LANES / 2] = Which::Second(2 * i);\n-                i += 1;\n-            }\n-            idx\n-        }\n-        const fn odd<const LANES: usize>() -> [Which; LANES] {\n+        const fn deinterleave<const LANES: usize>(second: bool) -> [Which; LANES] {\n             let mut idx = [Which::First(0); LANES];\n             let mut i = 0;\n-            while i < LANES / 2 {\n-                idx[i] = Which::First(2 * i + 1);\n-                idx[i + LANES / 2] = Which::Second(2 * i + 1);\n+            while i < LANES {\n+                // Treat the source as a concatenated vector\n+                let src_index = i * 2 + second as usize;\n+                idx[i] = if src_index < LANES {\n+                    Which::First(src_index)\n+                } else {\n+                    Which::Second(src_index % LANES)\n+                };\n                 i += 1;\n             }\n             idx\n@@ -373,11 +355,11 @@ where\n         struct Odd;\n \n         impl<const LANES: usize> Swizzle2<LANES, LANES> for Even {\n-            const INDEX: [Which; LANES] = even::<LANES>();\n+            const INDEX: [Which; LANES] = deinterleave::<LANES>(false);\n         }\n \n         impl<const LANES: usize> Swizzle2<LANES, LANES> for Odd {\n-            const INDEX: [Which; LANES] = odd::<LANES>();\n+            const INDEX: [Which; LANES] = deinterleave::<LANES>(true);\n         }\n \n         (Even::swizzle2(self, other), Odd::swizzle2(self, other))"}, {"sha": "33a7becb4212886dfdb6dfd13bab31090c45fe2b", "filename": "crates/core_simd/tests/swizzle.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7145dc5a412877ff11340702b88f37f92c98eb15/crates%2Fcore_simd%2Ftests%2Fswizzle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7145dc5a412877ff11340702b88f37f92c98eb15/crates%2Fcore_simd%2Ftests%2Fswizzle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fswizzle.rs?ref=7145dc5a412877ff11340702b88f37f92c98eb15", "patch": "@@ -60,3 +60,17 @@ fn interleave() {\n     assert_eq!(even, a);\n     assert_eq!(odd, b);\n }\n+\n+// portable-simd#298\n+#[test]\n+#[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n+fn interleave_one() {\n+    let a = Simd::from_array([0]);\n+    let b = Simd::from_array([1]);\n+    let (lo, hi) = a.interleave(b);\n+    assert_eq!(lo.to_array(), [0]);\n+    assert_eq!(hi.to_array(), [1]);\n+    let (even, odd) = lo.deinterleave(hi);\n+    assert_eq!(even, a);\n+    assert_eq!(odd, b);\n+}"}]}