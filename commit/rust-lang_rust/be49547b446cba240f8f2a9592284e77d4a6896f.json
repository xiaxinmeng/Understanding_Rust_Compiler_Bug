{"sha": "be49547b446cba240f8f2a9592284e77d4a6896f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlNDk1NDdiNDQ2Y2JhMjQwZjhmMmE5NTkyMjg0ZTc3ZDRhNjg5NmY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-30T20:19:58Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-30T20:23:12Z"}, "message": "Use split_once polyfill", "tree": {"sha": "de01434050b1fb9437dd519ca0d65229d52156a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de01434050b1fb9437dd519ca0d65229d52156a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be49547b446cba240f8f2a9592284e77d4a6896f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be49547b446cba240f8f2a9592284e77d4a6896f", "html_url": "https://github.com/rust-lang/rust/commit/be49547b446cba240f8f2a9592284e77d4a6896f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be49547b446cba240f8f2a9592284e77d4a6896f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "239dd506f68db0cbe4417b6e5c7f737d8ff8a159", "url": "https://api.github.com/repos/rust-lang/rust/commits/239dd506f68db0cbe4417b6e5c7f737d8ff8a159", "html_url": "https://github.com/rust-lang/rust/commit/239dd506f68db0cbe4417b6e5c7f737d8ff8a159"}], "stats": {"total": 52, "additions": 30, "deletions": 22}, "files": [{"sha": "bd50056c689f8fd95dcf2a8a37d7c7bd0a1bd048", "filename": "crates/ra_project_model/src/cfg_flag.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be49547b446cba240f8f2a9592284e77d4a6896f/crates%2Fra_project_model%2Fsrc%2Fcfg_flag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be49547b446cba240f8f2a9592284e77d4a6896f/crates%2Fra_project_model%2Fsrc%2Fcfg_flag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcfg_flag.rs?ref=be49547b446cba240f8f2a9592284e77d4a6896f", "patch": "@@ -4,7 +4,7 @@\n use std::str::FromStr;\n \n use ra_cfg::CfgOptions;\n-use stdx::split_delim;\n+use stdx::split_once;\n \n #[derive(Clone, Eq, PartialEq, Debug)]\n pub enum CfgFlag {\n@@ -15,7 +15,7 @@ pub enum CfgFlag {\n impl FromStr for CfgFlag {\n     type Err = String;\n     fn from_str(s: &str) -> Result<Self, Self::Err> {\n-        let res = match split_delim(s, '=') {\n+        let res = match split_once(s, '=') {\n             Some((key, value)) => {\n                 if !(value.starts_with('\"') && value.ends_with('\"')) {\n                     return Err(format!(\"Invalid cfg ({:?}), value should be in quotes\", s));"}, {"sha": "13a106638159bfa33d66025184b8b91e344a2721", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/be49547b446cba240f8f2a9592284e77d4a6896f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be49547b446cba240f8f2a9592284e77d4a6896f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=be49547b446cba240f8f2a9592284e77d4a6896f", "patch": "@@ -2,7 +2,7 @@\n \n use std::{env, path::Path, str::FromStr, sync::Arc, time::Instant};\n \n-use anyhow::{format_err, Result};\n+use anyhow::{bail, format_err, Result};\n use ra_db::{\n     salsa::{Database, Durability},\n     FileId,\n@@ -30,19 +30,18 @@ pub struct Position {\n impl FromStr for Position {\n     type Err = anyhow::Error;\n     fn from_str(s: &str) -> Result<Self> {\n-        let (path_line, column) = rsplit_at_char(s, ':')?;\n-        let (path, line) = rsplit_at_char(path_line, ':')?;\n-        let path = env::current_dir().unwrap().join(path);\n-        let path = AbsPathBuf::assert(path);\n-        Ok(Position { path, line: line.parse()?, column: column.parse()? })\n+        let mut split = s.rsplitn(3, ':');\n+        match (split.next(), split.next(), split.next()) {\n+            (Some(column), Some(line), Some(path)) => {\n+                let path = env::current_dir().unwrap().join(path);\n+                let path = AbsPathBuf::assert(path);\n+                Ok(Position { path, line: line.parse()?, column: column.parse()? })\n+            }\n+            _ => bail!(\"position should be in file:line:column format: {:?}\", s),\n+        }\n     }\n }\n \n-fn rsplit_at_char(s: &str, c: char) -> Result<(&str, &str)> {\n-    let idx = s.rfind(c).ok_or_else(|| format_err!(\"no `{}` in {}\", c, s))?;\n-    Ok((&s[..idx], &s[idx + 1..]))\n-}\n-\n pub fn analysis_bench(\n     verbosity: Verbosity,\n     path: &Path,"}, {"sha": "e73b3a2119e65ceb550291a7ef25f0d6cc5e2810", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be49547b446cba240f8f2a9592284e77d4a6896f/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be49547b446cba240f8f2a9592284e77d4a6896f/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=be49547b446cba240f8f2a9592284e77d4a6896f", "patch": "@@ -26,7 +26,7 @@ use ra_project_model::TargetKind;\n use ra_syntax::{algo, ast, AstNode, SyntaxKind, TextRange, TextSize};\n use serde::{Deserialize, Serialize};\n use serde_json::to_value;\n-use stdx::{format_to, split_delim};\n+use stdx::{format_to, split_once};\n \n use crate::{\n     cargo_target_spec::CargoTargetSpec,\n@@ -865,7 +865,7 @@ pub(crate) fn handle_resolve_code_action(\n         .map(|it| it.into_iter().filter_map(from_proto::assist_kind).collect());\n \n     let assists = snap.analysis.resolved_assists(&snap.config.assist, frange)?;\n-    let (id_string, index) = split_delim(&params.id, ':').unwrap();\n+    let (id_string, index) = split_once(&params.id, ':').unwrap();\n     let index = index.parse::<usize>().unwrap();\n     let assist = &assists[index];\n     assert!(assist.assist.id.0 == id_string);"}, {"sha": "b65875c96e03edfaae0d7e1defabefb20dda6054", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/be49547b446cba240f8f2a9592284e77d4a6896f/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be49547b446cba240f8f2a9592284e77d4a6896f/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=be49547b446cba240f8f2a9592284e77d4a6896f", "patch": "@@ -109,9 +109,18 @@ pub fn replace(buf: &mut String, from: char, to: &str) {\n     *buf = buf.replace(from, to)\n }\n \n-pub fn split_delim(haystack: &str, delim: char) -> Option<(&str, &str)> {\n-    let idx = haystack.find(delim)?;\n-    Some((&haystack[..idx], &haystack[idx + delim.len_utf8()..]))\n+// https://github.com/rust-lang/rust/issues/74773\n+pub fn split_once(haystack: &str, delim: char) -> Option<(&str, &str)> {\n+    let mut split = haystack.splitn(2, delim);\n+    let prefix = split.next()?;\n+    let suffix = split.next()?;\n+    Some((prefix, suffix))\n+}\n+pub fn rsplit_once(haystack: &str, delim: char) -> Option<(&str, &str)> {\n+    let mut split = haystack.rsplitn(2, delim);\n+    let suffix = split.next()?;\n+    let prefix = split.next()?;\n+    Some((prefix, suffix))\n }\n \n pub fn trim_indent(mut text: &str) -> String {"}, {"sha": "e40b61a94a4810b3a99a53eebe3cb36bbbd944c7", "filename": "crates/test_utils/src/fixture.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be49547b446cba240f8f2a9592284e77d4a6896f/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be49547b446cba240f8f2a9592284e77d4a6896f/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Ffixture.rs?ref=be49547b446cba240f8f2a9592284e77d4a6896f", "patch": "@@ -2,7 +2,7 @@\n //! rust-analyzer database from a single string.\n \n use rustc_hash::FxHashMap;\n-use stdx::{lines_with_ends, split_delim, trim_indent};\n+use stdx::{lines_with_ends, split_once, trim_indent};\n \n #[derive(Debug, Eq, PartialEq)]\n pub struct Fixture {\n@@ -71,22 +71,22 @@ impl Fixture {\n         let mut cfg_key_values = Vec::new();\n         let mut env = FxHashMap::default();\n         for component in components[1..].iter() {\n-            let (key, value) = split_delim(component, ':').unwrap();\n+            let (key, value) = split_once(component, ':').unwrap();\n             match key {\n                 \"crate\" => krate = Some(value.to_string()),\n                 \"deps\" => deps = value.split(',').map(|it| it.to_string()).collect(),\n                 \"edition\" => edition = Some(value.to_string()),\n                 \"cfg\" => {\n                     for entry in value.split(',') {\n-                        match split_delim(entry, '=') {\n+                        match split_once(entry, '=') {\n                             Some((k, v)) => cfg_key_values.push((k.to_string(), v.to_string())),\n                             None => cfg_atoms.push(entry.to_string()),\n                         }\n                     }\n                 }\n                 \"env\" => {\n                     for key in value.split(',') {\n-                        if let Some((k, v)) = split_delim(key, '=') {\n+                        if let Some((k, v)) = split_once(key, '=') {\n                             env.insert(k.into(), v.into());\n                         }\n                     }"}]}