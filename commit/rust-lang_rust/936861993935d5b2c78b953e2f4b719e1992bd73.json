{"sha": "936861993935d5b2c78b953e2f4b719e1992bd73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNjg2MTk5MzkzNWQ1YjJjNzhiOTUzZTJmNGI3MTllMTk5MmJkNzM=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-08-10T19:53:10Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-08-11T12:09:08Z"}, "message": "Make the fix AST source Optional", "tree": {"sha": "93f3e8392946b8cb7df98faeb96088dcf82c0db8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93f3e8392946b8cb7df98faeb96088dcf82c0db8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/936861993935d5b2c78b953e2f4b719e1992bd73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/936861993935d5b2c78b953e2f4b719e1992bd73", "html_url": "https://github.com/rust-lang/rust/commit/936861993935d5b2c78b953e2f4b719e1992bd73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/936861993935d5b2c78b953e2f4b719e1992bd73/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9963f43d51071ea02f8f6d490b9c49882034b42c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9963f43d51071ea02f8f6d490b9c49882034b42c", "html_url": "https://github.com/rust-lang/rust/commit/9963f43d51071ea02f8f6d490b9c49882034b42c"}], "stats": {"total": 152, "additions": 78, "deletions": 74}, "files": [{"sha": "564f6a5db28c8a45027adcd518836d69361bbb40", "filename": "crates/ra_hir/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/936861993935d5b2c78b953e2f4b719e1992bd73/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936861993935d5b2c78b953e2f4b719e1992bd73/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs?ref=936861993935d5b2c78b953e2f4b719e1992bd73", "patch": "@@ -1,7 +1,7 @@\n //! FIXME: write short doc here\n pub use hir_def::diagnostics::UnresolvedModule;\n pub use hir_expand::diagnostics::{\n-    AstDiagnostic, Diagnostic, DiagnosticSink, DiagnosticSinkBuilder,\n+    Diagnostic, DiagnosticSink, DiagnosticSinkBuilder, DiagnosticWithFix,\n };\n pub use hir_ty::diagnostics::{\n     MismatchedArgCount, MissingFields, MissingMatchArms, MissingOkInTailExpr, NoSuchField,"}, {"sha": "c5bc2baffeef95b4633a1fb4286740b6db7e8970", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/936861993935d5b2c78b953e2f4b719e1992bd73/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936861993935d5b2c78b953e2f4b719e1992bd73/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=936861993935d5b2c78b953e2f4b719e1992bd73", "patch": "@@ -8,7 +8,7 @@ use hir_def::{\n     resolver::{self, HasResolver, Resolver},\n     AsMacroCall, FunctionId, TraitId, VariantId,\n };\n-use hir_expand::{diagnostics::AstDiagnostic, hygiene::Hygiene, name::AsName, ExpansionInfo};\n+use hir_expand::{diagnostics::DiagnosticWithFix, hygiene::Hygiene, name::AsName, ExpansionInfo};\n use hir_ty::associated_type_shorthand_candidates;\n use itertools::Itertools;\n use ra_db::{FileId, FileRange};\n@@ -109,12 +109,12 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.parse(file_id)\n     }\n \n-    pub fn diagnostic_fix_source<T: AstDiagnostic + Diagnostic>(\n+    pub fn diagnostic_fix_source<T: DiagnosticWithFix + Diagnostic>(\n         &self,\n         d: &T,\n-    ) -> <T as AstDiagnostic>::AST {\n+    ) -> Option<<T as DiagnosticWithFix>::AST> {\n         let file_id = d.presentation().file_id;\n-        let root = self.db.parse_or_expand(file_id).unwrap();\n+        let root = self.db.parse_or_expand(file_id)?;\n         self.imp.cache(root, file_id);\n         d.fix_source(self.db.upcast())\n     }"}, {"sha": "033be683c47fac875b37e6edad26e8fb5f80d8b6", "filename": "crates/ra_hir_def/src/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/936861993935d5b2c78b953e2f4b719e1992bd73/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936861993935d5b2c78b953e2f4b719e1992bd73/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdiagnostics.rs?ref=936861993935d5b2c78b953e2f4b719e1992bd73", "patch": "@@ -2,7 +2,7 @@\n \n use std::any::Any;\n \n-use hir_expand::diagnostics::{AstDiagnostic, Diagnostic};\n+use hir_expand::diagnostics::{Diagnostic, DiagnosticWithFix};\n use ra_syntax::{ast, AstPtr, SyntaxNodePtr};\n \n use hir_expand::{HirFileId, InFile};\n@@ -26,10 +26,10 @@ impl Diagnostic for UnresolvedModule {\n     }\n }\n \n-impl AstDiagnostic for UnresolvedModule {\n+impl DiagnosticWithFix for UnresolvedModule {\n     type AST = ast::Module;\n-    fn fix_source(&self, db: &dyn hir_expand::db::AstDatabase) -> Self::AST {\n-        let root = db.parse_or_expand(self.file).unwrap();\n-        self.decl.to_node(&root)\n+    fn fix_source(&self, db: &dyn hir_expand::db::AstDatabase) -> Option<Self::AST> {\n+        let root = db.parse_or_expand(self.file)?;\n+        Some(self.decl.to_node(&root))\n     }\n }"}, {"sha": "62a09a73ae50d034836a2bfc62b976cbed60c5d8", "filename": "crates/ra_hir_expand/src/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/936861993935d5b2c78b953e2f4b719e1992bd73/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936861993935d5b2c78b953e2f4b719e1992bd73/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs?ref=936861993935d5b2c78b953e2f4b719e1992bd73", "patch": "@@ -29,15 +29,9 @@ pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n     }\n }\n \n-pub trait AstDiagnostic {\n+pub trait DiagnosticWithFix {\n     type AST;\n-    fn fix_source(&self, db: &dyn AstDatabase) -> Self::AST;\n-}\n-\n-impl dyn Diagnostic {\n-    pub fn downcast_ref<D: Diagnostic>(&self) -> Option<&D> {\n-        self.as_any().downcast_ref()\n-    }\n+    fn fix_source(&self, db: &dyn AstDatabase) -> Option<Self::AST>;\n }\n \n pub struct DiagnosticSink<'a> {\n@@ -83,12 +77,9 @@ impl<'a> DiagnosticSinkBuilder<'a> {\n         self\n     }\n \n-    pub fn on<D: Diagnostic, F: FnMut(&D) + 'a>(mut self, mut cb: F) -> Self {\n-        let cb = move |diag: &dyn Diagnostic| match diag.downcast_ref::<D>() {\n-            Some(d) => {\n-                cb(d);\n-                Ok(())\n-            }\n+    pub fn on<D: Diagnostic, F: FnMut(&D) -> Option<()> + 'a>(mut self, mut cb: F) -> Self {\n+        let cb = move |diag: &dyn Diagnostic| match diag.as_any().downcast_ref::<D>() {\n+            Some(d) => cb(d).ok_or(()),\n             None => Err(()),\n         };\n         self.callbacks.push(Box::new(cb));"}, {"sha": "b34ba5bfc822e6a54a9d622a43f79f9392467e47", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/936861993935d5b2c78b953e2f4b719e1992bd73/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936861993935d5b2c78b953e2f4b719e1992bd73/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=936861993935d5b2c78b953e2f4b719e1992bd73", "patch": "@@ -6,7 +6,7 @@ mod unsafe_check;\n use std::any::Any;\n \n use hir_def::DefWithBodyId;\n-use hir_expand::diagnostics::{AstDiagnostic, Diagnostic, DiagnosticSink};\n+use hir_expand::diagnostics::{Diagnostic, DiagnosticSink, DiagnosticWithFix};\n use hir_expand::{db::AstDatabase, name::Name, HirFileId, InFile};\n use ra_prof::profile;\n use ra_syntax::{ast, AstPtr, SyntaxNodePtr};\n@@ -46,12 +46,12 @@ impl Diagnostic for NoSuchField {\n     }\n }\n \n-impl AstDiagnostic for NoSuchField {\n+impl DiagnosticWithFix for NoSuchField {\n     type AST = ast::RecordExprField;\n \n-    fn fix_source(&self, db: &dyn AstDatabase) -> Self::AST {\n-        let root = db.parse_or_expand(self.file).unwrap();\n-        self.field.to_node(&root)\n+    fn fix_source(&self, db: &dyn AstDatabase) -> Option<Self::AST> {\n+        let root = db.parse_or_expand(self.file)?;\n+        Some(self.field.to_node(&root))\n     }\n }\n \n@@ -88,12 +88,12 @@ impl Diagnostic for MissingFields {\n     }\n }\n \n-impl AstDiagnostic for MissingFields {\n+impl DiagnosticWithFix for MissingFields {\n     type AST = ast::RecordExpr;\n \n-    fn fix_source(&self, db: &dyn AstDatabase) -> Self::AST {\n-        let root = db.parse_or_expand(self.file).unwrap();\n-        self.field_list_parent.to_node(&root)\n+    fn fix_source(&self, db: &dyn AstDatabase) -> Option<Self::AST> {\n+        let root = db.parse_or_expand(self.file)?;\n+        Some(self.field_list_parent.to_node(&root))\n     }\n }\n \n@@ -163,12 +163,12 @@ impl Diagnostic for MissingOkInTailExpr {\n     }\n }\n \n-impl AstDiagnostic for MissingOkInTailExpr {\n+impl DiagnosticWithFix for MissingOkInTailExpr {\n     type AST = ast::Expr;\n \n-    fn fix_source(&self, db: &dyn AstDatabase) -> Self::AST {\n-        let root = db.parse_or_expand(self.file).unwrap();\n-        self.expr.to_node(&root)\n+    fn fix_source(&self, db: &dyn AstDatabase) -> Option<Self::AST> {\n+        let root = db.parse_or_expand(self.file)?;\n+        Some(self.expr.to_node(&root))\n     }\n }\n "}, {"sha": "043ce357b9353c8f5ce60a32c2881672d0181266", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 50, "deletions": 37, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/936861993935d5b2c78b953e2f4b719e1992bd73/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/936861993935d5b2c78b953e2f4b719e1992bd73/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=936861993935d5b2c78b953e2f4b719e1992bd73", "patch": "@@ -62,12 +62,18 @@ pub(crate) fn diagnostics(\n                 }\n                 .into(),\n             );\n+            let fix = sema\n+                .diagnostic_fix_source(d)\n+                .map(|unresolved_module| unresolved_module.syntax().text_range())\n+                .map(|fix_range| (fix, fix_range));\n+\n             res.borrow_mut().push(Diagnostic {\n                 range: sema.diagnostics_presentation_range(d).range,\n                 message: d.message(),\n                 severity: Severity::Error,\n-                fix: Some((fix, sema.diagnostic_fix_source(d).syntax().text_range())),\n-            })\n+                fix,\n+            });\n+            Some(())\n         })\n         .on::<hir::diagnostics::MissingFields, _>(|d| {\n             // Note that although we could add a diagnostics to\n@@ -78,59 +84,66 @@ pub(crate) fn diagnostics(\n             let fix = if d.missed_fields.iter().any(|it| it.as_tuple_index().is_some()) {\n                 None\n             } else {\n-                let record_expr = sema.diagnostic_fix_source(d);\n-                if let Some(old_field_list) = record_expr.record_expr_field_list() {\n-                    let mut new_field_list = old_field_list.clone();\n-                    for f in d.missed_fields.iter() {\n-                        let field = make::record_expr_field(\n-                            make::name_ref(&f.to_string()),\n-                            Some(make::expr_unit()),\n-                        );\n-                        new_field_list = new_field_list.append_field(&field);\n-                    }\n-\n-                    let edit = {\n-                        let mut builder = TextEditBuilder::default();\n-                        algo::diff(&old_field_list.syntax(), &new_field_list.syntax())\n-                            .into_text_edit(&mut builder);\n-                        builder.finish()\n-                    };\n-                    Some((\n-                        Fix::new(\"Fill struct fields\", SourceFileEdit { file_id, edit }.into()),\n-                        sema.original_range(&old_field_list.syntax()).range,\n-                    ))\n-                } else {\n-                    None\n-                }\n+                sema.diagnostic_fix_source(d)\n+                    .and_then(|record_expr| record_expr.record_expr_field_list())\n+                    .map(|old_field_list| {\n+                        let mut new_field_list = old_field_list.clone();\n+                        for f in d.missed_fields.iter() {\n+                            let field = make::record_expr_field(\n+                                make::name_ref(&f.to_string()),\n+                                Some(make::expr_unit()),\n+                            );\n+                            new_field_list = new_field_list.append_field(&field);\n+                        }\n+\n+                        let edit = {\n+                            let mut builder = TextEditBuilder::default();\n+                            algo::diff(&old_field_list.syntax(), &new_field_list.syntax())\n+                                .into_text_edit(&mut builder);\n+                            builder.finish()\n+                        };\n+                        (\n+                            Fix::new(\"Fill struct fields\", SourceFileEdit { file_id, edit }.into()),\n+                            sema.original_range(&old_field_list.syntax()).range,\n+                        )\n+                    })\n             };\n \n             res.borrow_mut().push(Diagnostic {\n                 range: sema.diagnostics_presentation_range(d).range,\n                 message: d.message(),\n                 severity: Severity::Error,\n                 fix,\n-            })\n+            });\n+            Some(())\n         })\n         .on::<hir::diagnostics::MissingOkInTailExpr, _>(|d| {\n-            let tail_expr = sema.diagnostic_fix_source(d);\n-            let tail_expr_range = tail_expr.syntax().text_range();\n-            let edit = TextEdit::replace(tail_expr_range, format!(\"Ok({})\", tail_expr.syntax()));\n-            let source_change = SourceFileEdit { file_id, edit }.into();\n+            let fix = sema.diagnostic_fix_source(d).map(|tail_expr| {\n+                let tail_expr_range = tail_expr.syntax().text_range();\n+                let edit =\n+                    TextEdit::replace(tail_expr_range, format!(\"Ok({})\", tail_expr.syntax()));\n+                let source_change = SourceFileEdit { file_id, edit }.into();\n+                (Fix::new(\"Wrap with ok\", source_change), tail_expr_range)\n+            });\n+\n             res.borrow_mut().push(Diagnostic {\n                 range: sema.diagnostics_presentation_range(d).range,\n                 message: d.message(),\n                 severity: Severity::Error,\n-                fix: Some((Fix::new(\"Wrap with ok\", source_change), tail_expr_range)),\n-            })\n+                fix,\n+            });\n+            Some(())\n         })\n         .on::<hir::diagnostics::NoSuchField, _>(|d| {\n             res.borrow_mut().push(Diagnostic {\n                 range: sema.diagnostics_presentation_range(d).range,\n                 message: d.message(),\n                 severity: Severity::Error,\n-                fix: missing_struct_field_fix(&sema, file_id, d)\n-                    .map(|fix| (fix, sema.diagnostic_fix_source(d).syntax().text_range())),\n-            })\n+                fix: missing_struct_field_fix(&sema, file_id, d).and_then(|fix| {\n+                    Some((fix, sema.diagnostic_fix_source(d)?.syntax().text_range()))\n+                }),\n+            });\n+            Some(())\n         })\n         // Only collect experimental diagnostics when they're enabled.\n         .filter(|diag| !diag.is_experimental() || enable_experimental)\n@@ -156,7 +169,7 @@ fn missing_struct_field_fix(\n     usage_file_id: FileId,\n     d: &hir::diagnostics::NoSuchField,\n ) -> Option<Fix> {\n-    let record_expr_field = sema.diagnostic_fix_source(d);\n+    let record_expr_field = sema.diagnostic_fix_source(d)?;\n \n     let record_lit = ast::RecordExpr::cast(record_expr_field.syntax().parent()?.parent()?)?;\n     let def_id = sema.resolve_variant(record_lit)?;"}]}