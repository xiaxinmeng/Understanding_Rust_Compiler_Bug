{"sha": "89b3ef3e8eae1a9cf119888341509e10fd7e1b9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5YjNlZjNlOGVhZTFhOWNmMTE5ODg4MzQxNTA5ZTEwZmQ3ZTFiOWE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-02-19T15:49:20Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-02-19T15:49:20Z"}, "message": "Allow for instantiating statics from upstream crates.", "tree": {"sha": "3e37e4e5a911305e1fb2df97f2f9414983268ff1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e37e4e5a911305e1fb2df97f2f9414983268ff1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89b3ef3e8eae1a9cf119888341509e10fd7e1b9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89b3ef3e8eae1a9cf119888341509e10fd7e1b9a", "html_url": "https://github.com/rust-lang/rust/commit/89b3ef3e8eae1a9cf119888341509e10fd7e1b9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89b3ef3e8eae1a9cf119888341509e10fd7e1b9a/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1be7f966e03f41eb299c184a3c0ad98018fb8fc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1be7f966e03f41eb299c184a3c0ad98018fb8fc4", "html_url": "https://github.com/rust-lang/rust/commit/1be7f966e03f41eb299c184a3c0ad98018fb8fc4"}], "stats": {"total": 55, "additions": 27, "deletions": 28}, "files": [{"sha": "1608c4a87bf5c16ca3eab8df49129cb5b5685f56", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/89b3ef3e8eae1a9cf119888341509e10fd7e1b9a/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b3ef3e8eae1a9cf119888341509e10fd7e1b9a/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=89b3ef3e8eae1a9cf119888341509e10fd7e1b9a", "patch": "@@ -226,8 +226,15 @@ pub fn get_static(cx: &CodegenCx, def_id: DefId) -> ValueRef {\n             // statically in the final application, we always mark such symbols as 'dllimport'.\n             // If final linkage happens to be static, we rely on compiler-emitted __imp_ stubs to\n             // make things work.\n-            unsafe {\n-                llvm::LLVMSetDLLStorageClass(g, llvm::DLLStorageClass::DllImport);\n+            //\n+            // However, in some scenarios we defer emission of statics to downstream\n+            // crates, so there are cases where a static with an upstream DefId\n+            // is actually present in the current crate. We can find out via the\n+            // is_translated_item query.\n+            if !cx.tcx.is_translated_item(def_id) {\n+                unsafe {\n+                    llvm::LLVMSetDLLStorageClass(g, llvm::DLLStorageClass::DllImport);\n+                }\n             }\n         }\n         g\n@@ -246,8 +253,8 @@ pub fn get_static(cx: &CodegenCx, def_id: DefId) -> ValueRef {\n }\n \n pub fn trans_static<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n-                              m: hir::Mutability,\n                               def_id: DefId,\n+                              is_mutable: bool,\n                               attrs: &[ast::Attribute])\n                               -> Result<ValueRef, ConstEvalErr<'tcx>> {\n     unsafe {\n@@ -298,7 +305,7 @@ pub fn trans_static<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n \n         // As an optimization, all shared statics which do not have interior\n         // mutability are placed into read-only memory.\n-        if m != hir::MutMutable {\n+        if !is_mutable {\n             if cx.type_is_freeze(ty) {\n                 llvm::LLVMSetGlobalConstant(g, llvm::True);\n             }"}, {"sha": "91c1097fc7f8a5dc733384495effaf6c587440ca", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 16, "deletions": 24, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/89b3ef3e8eae1a9cf119888341509e10fd7e1b9a/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b3ef3e8eae1a9cf119888341509e10fd7e1b9a/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=89b3ef3e8eae1a9cf119888341509e10fd7e1b9a", "patch": "@@ -24,6 +24,7 @@ use llvm;\n use monomorphize::Instance;\n use type_of::LayoutLlvmExt;\n use rustc::hir;\n+use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n use rustc::mir::mono::{Linkage, Visibility};\n use rustc::ty::TypeFoldable;\n@@ -46,24 +47,23 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n         match *self.as_mono_item() {\n             MonoItem::Static(def_id) => {\n                 let tcx = cx.tcx;\n-                let node_id = match tcx.hir.as_local_node_id(def_id) {\n-                    Some(node_id) => node_id,\n+                let is_mutable = match tcx.describe_def(def_id) {\n+                    Some(Def::Static(_, is_mutable)) => is_mutable,\n+                    Some(other) => {\n+                        bug!(\"Expected Def::Static, found {:?}\", other)\n+                    }\n                     None => {\n-                        bug!(\"MonoItemExt::define() called for non-local \\\n-                              static `{:?}`.\", def_id)\n+                        bug!(\"Expected Def::Static for {:?}, found nothing\", def_id)\n+                    }\n+                };\n+                let attrs = tcx.get_attrs(def_id);\n+\n+                match consts::trans_static(&cx, def_id, is_mutable, &attrs) {\n+                    Ok(_) => { /* Cool, everything's alright. */ },\n+                    Err(err) => {\n+                        err.report(tcx, tcx.def_span(def_id), \"static\");\n                     }\n                 };\n-                let item = tcx.hir.expect_item(node_id);\n-                if let hir::ItemStatic(_, m, _) = item.node {\n-                    match consts::trans_static(&cx, m, def_id, &item.attrs) {\n-                        Ok(_) => { /* Cool, everything's alright. */ },\n-                        Err(err) => {\n-                            err.report(tcx, item.span, \"static\");\n-                        }\n-                    };\n-                } else {\n-                    span_bug!(item.span, \"Mismatch between hir::Item type and TransItem type\")\n-                }\n             }\n             MonoItem::GlobalAsm(node_id) => {\n                 let item = cx.tcx.hir.expect_item(node_id);\n@@ -137,20 +137,12 @@ fn predefine_static<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n                               linkage: Linkage,\n                               visibility: Visibility,\n                               symbol_name: &str) {\n-    let node_id = match cx.tcx.hir.as_local_node_id(def_id) {\n-        Some(node_id) => node_id,\n-        None => {\n-            bug!(\"MonoItemExt::predefine() called for non-local static `{:?}`.\",\n-                 def_id)\n-        }\n-    };\n-\n     let instance = Instance::mono(cx.tcx, def_id);\n     let ty = instance.ty(cx.tcx);\n     let llty = cx.layout_of(ty).llvm_type(cx);\n \n     let g = declare::define_global(cx, symbol_name, llty).unwrap_or_else(|| {\n-        cx.sess().span_fatal(cx.tcx.hir.span(node_id),\n+        cx.sess().span_fatal(cx.tcx.def_span(def_id),\n             &format!(\"symbol `{}` is already defined\", symbol_name))\n     });\n "}]}