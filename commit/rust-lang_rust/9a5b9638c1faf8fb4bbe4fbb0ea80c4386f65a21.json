{"sha": "9a5b9638c1faf8fb4bbe4fbb0ea80c4386f65a21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNWI5NjM4YzFmYWY4ZmI0YmJlNGZiYjBlYTgwYzQzODZmNjVhMjE=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-21T20:08:36Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-21T21:04:37Z"}, "message": "Add more information on parse_macro fail", "tree": {"sha": "5afcf0a35738b42669b08341fa198c0fb571fdbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5afcf0a35738b42669b08341fa198c0fb571fdbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a5b9638c1faf8fb4bbe4fbb0ea80c4386f65a21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a5b9638c1faf8fb4bbe4fbb0ea80c4386f65a21", "html_url": "https://github.com/rust-lang/rust/commit/9a5b9638c1faf8fb4bbe4fbb0ea80c4386f65a21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a5b9638c1faf8fb4bbe4fbb0ea80c4386f65a21/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da05bbcfb1da752ef6d07eb1f4d9ac6ba187d573", "url": "https://api.github.com/repos/rust-lang/rust/commits/da05bbcfb1da752ef6d07eb1f4d9ac6ba187d573", "html_url": "https://github.com/rust-lang/rust/commit/da05bbcfb1da752ef6d07eb1f4d9ac6ba187d573"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "e771a311c47f8e3944d662dbc2a9e990e9565758", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9a5b9638c1faf8fb4bbe4fbb0ea80c4386f65a21/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5b9638c1faf8fb4bbe4fbb0ea80c4386f65a21/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=9a5b9638c1faf8fb4bbe4fbb0ea80c4386f65a21", "patch": "@@ -63,11 +63,15 @@ impl HirFileId {\n         match file_id.0 {\n             HirFileIdRepr::File(file_id) => db.parse(file_id),\n             HirFileIdRepr::Macro(macro_call_id) => {\n-                parse_macro(db, macro_call_id).unwrap_or_else(|| {\n+                parse_macro(db, macro_call_id).unwrap_or_else(|err| {\n                     // Note:\n                     // The final goal we would like to make all parse_macro success,\n                     // such that the following log will not call anyway.\n-                    log::warn!(\"fail on macro_parse: {}\", macro_call_id.debug_dump(db));\n+                    log::warn!(\n+                        \"fail on macro_parse: (reason: {}) {}\",\n+                        err,\n+                        macro_call_id.debug_dump(db)\n+                    );\n \n                     // returning an empty string looks fishy...\n                     SourceFile::parse(\"\")\n@@ -77,14 +81,20 @@ impl HirFileId {\n     }\n }\n \n-fn parse_macro(db: &impl DefDatabase, macro_call_id: MacroCallId) -> Option<TreeArc<SourceFile>> {\n+fn parse_macro(\n+    db: &impl DefDatabase,\n+    macro_call_id: MacroCallId,\n+) -> Result<TreeArc<SourceFile>, String> {\n     let loc = macro_call_id.loc(db);\n     let macro_call = loc.ast_id.to_node(db);\n-    let (macro_arg, _) = macro_call.token_tree().and_then(mbe::ast_to_token_tree)?;\n-\n-    let macro_rules = db.macro_def(loc.def)?;\n-    let tt = macro_rules.expand(&macro_arg).ok()?;\n-    Some(mbe::token_tree_to_ast_item_list(&tt))\n+    let (macro_arg, _) = macro_call\n+        .token_tree()\n+        .and_then(mbe::ast_to_token_tree)\n+        .ok_or(\"Fail to args in to tt::TokenTree\")?;\n+\n+    let macro_rules = db.macro_def(loc.def).ok_or(\"Fail to find macro definition\")?;\n+    let tt = macro_rules.expand(&macro_arg).map_err(|err| format!(\"{:?}\", err))?;\n+    Ok(mbe::token_tree_to_ast_item_list(&tt))\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -311,11 +321,18 @@ impl MacroCallId {\n     pub fn debug_dump(&self, db: &impl DefDatabase) -> String {\n         let loc = self.clone().loc(db);\n         let node = loc.ast_id.to_node(db);\n-        let syntax_str = node.syntax().to_string();\n+        let syntax_str = node.syntax().text().chunks().collect::<Vec<_>>().join(\" \");\n \n         // dump the file name\n         let file_id: HirFileId = self.clone().into();\n         let original = file_id.original_file(db);\n-        format!(\"macro call [file: {:#?}] : {}\", db.file_relative_path(original), syntax_str)\n+        let macro_rules = db.macro_def(loc.def);\n+\n+        format!(\n+            \"macro call [file: {:#?}] : {}\\nhas rules: {}\",\n+            db.file_relative_path(original),\n+            syntax_str,\n+            macro_rules.is_some()\n+        )\n     }\n }"}]}