{"sha": "f22b4b169854c8a4ba86c16ee43327d6bcf94562", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMmI0YjE2OTg1NGM4YTRiYTg2YzE2ZWU0MzMyN2Q2YmNmOTQ1NjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-28T03:45:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-28T03:45:40Z"}, "message": "auto merge of #8697 : kballard/rust/rustpkg-no-args, r=catamorphism\n\n`rustpkg build` et al were only checking one directory up to see if it\r\nwas in a dir named \"src\". Ditch that entirely and instead check if the\r\ncwd is descended from any of the workspace paths. Besides being more\r\nintelligent about whether or not something is a workspace, this also\r\nallows for package ids composed of multiple path components.\r\n\r\nr? @catamorphism", "tree": {"sha": "5036a446b9626648a6a253cdd6c0f90bb021d3d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5036a446b9626648a6a253cdd6c0f90bb021d3d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f22b4b169854c8a4ba86c16ee43327d6bcf94562", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f22b4b169854c8a4ba86c16ee43327d6bcf94562", "html_url": "https://github.com/rust-lang/rust/commit/f22b4b169854c8a4ba86c16ee43327d6bcf94562", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f22b4b169854c8a4ba86c16ee43327d6bcf94562/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "578e68047736167239c52fa1aba0347011ff1bc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/578e68047736167239c52fa1aba0347011ff1bc3", "html_url": "https://github.com/rust-lang/rust/commit/578e68047736167239c52fa1aba0347011ff1bc3"}, {"sha": "eafa63f787d04857268743e3941e7caa8c128bc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/eafa63f787d04857268743e3941e7caa8c128bc4", "html_url": "https://github.com/rust-lang/rust/commit/eafa63f787d04857268743e3941e7caa8c128bc4"}], "stats": {"total": 71, "additions": 35, "deletions": 36}, "files": [{"sha": "79836bcc5554bf2819b7242f89dc6e761065f849", "filename": "src/librustpkg/rustpkg.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f22b4b169854c8a4ba86c16ee43327d6bcf94562/src%2Flibrustpkg%2Frustpkg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22b4b169854c8a4ba86c16ee43327d6bcf94562/src%2Flibrustpkg%2Frustpkg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rs?ref=f22b4b169854c8a4ba86c16ee43327d6bcf94562", "patch": "@@ -43,7 +43,7 @@ use path_util::{U_RWX, in_rust_path};\n use path_util::{built_executable_in_workspace, built_library_in_workspace, default_workspace};\n use path_util::{target_executable_in_workspace, target_library_in_workspace};\n use source_control::is_git_dir;\n-use workspace::{each_pkg_parent_workspace, pkg_parent_workspaces, in_workspace, cwd_to_workspace};\n+use workspace::{each_pkg_parent_workspace, pkg_parent_workspaces, cwd_to_workspace};\n use context::Ctx;\n use package_id::PkgId;\n use package_source::PkgSrc;\n@@ -190,11 +190,10 @@ impl CtxMethods for Ctx {\n         match cmd {\n             \"build\" => {\n                 if args.len() < 1 {\n-                    if !in_workspace(|| { usage::build() } ) {\n-                        return;\n+                    match cwd_to_workspace() {\n+                        None => { usage::build(); return }\n+                        Some((ws, pkgid)) => self.build(&ws, &pkgid)\n                     }\n-                    let (workspace, pkgid) = cwd_to_workspace();\n-                    self.build(&workspace, &pkgid);\n                 }\n                 else {\n                     // The package id is presumed to be the first command-line\n@@ -210,13 +209,12 @@ impl CtxMethods for Ctx {\n             }\n             \"clean\" => {\n                 if args.len() < 1 {\n-                    if !in_workspace(|| { usage::clean() } ) {\n-                        return;\n+                    match cwd_to_workspace() {\n+                        None => { usage::clean(); return }\n+                        // tjc: Maybe clean should clean all the packages in the\n+                        // current workspace, though?\n+                        Some((ws, pkgid)) => self.clean(&ws, &pkgid)\n                     }\n-                    // tjc: Maybe clean should clean all the packages in the\n-                    // current workspace, though?\n-                    let (workspace, pkgid) = cwd_to_workspace();\n-                    self.clean(&workspace, &pkgid);\n \n                 }\n                 else {\n@@ -239,11 +237,10 @@ impl CtxMethods for Ctx {\n             }\n             \"install\" => {\n                 if args.len() < 1 {\n-                    if !in_workspace(|| { usage::install() }) {\n-                        return;\n+                    match cwd_to_workspace() {\n+                        None => { usage::install(); return }\n+                        Some((ws, pkgid)) => self.install(&ws, &pkgid)\n                     }\n-                    let (workspace, pkgid) = cwd_to_workspace();\n-                    self.install(&workspace, &pkgid);\n                 }\n                 else {\n                     // The package id is presumed to be the first command-line"}, {"sha": "98999da41c81633bad276bce6142f104889d20fe", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f22b4b169854c8a4ba86c16ee43327d6bcf94562/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22b4b169854c8a4ba86c16ee43327d6bcf94562/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=f22b4b169854c8a4ba86c16ee43327d6bcf94562", "patch": "@@ -695,7 +695,8 @@ fn package_script_with_default_build() {\n \n #[test]\n fn rustpkg_build_no_arg() {\n-    let tmp = mkdtemp(&os::tmpdir(), \"rustpkg_build_no_arg\").expect(\"rustpkg_build_no_arg failed\");\n+    let tmp = mkdtemp(&os::tmpdir(), \"rustpkg_build_no_arg\").expect(\"rustpkg_build_no_arg failed\")\n+              .push(\".rust\");\n     let package_dir = tmp.push(\"src\").push(\"foo\");\n     assert!(os::mkdir_recursive(&package_dir, U_RWX));\n \n@@ -709,7 +710,8 @@ fn rustpkg_build_no_arg() {\n #[test]\n fn rustpkg_install_no_arg() {\n     let tmp = mkdtemp(&os::tmpdir(),\n-                      \"rustpkg_install_no_arg\").expect(\"rustpkg_install_no_arg failed\");\n+                      \"rustpkg_install_no_arg\").expect(\"rustpkg_install_no_arg failed\")\n+              .push(\".rust\");\n     let package_dir = tmp.push(\"src\").push(\"foo\");\n     assert!(os::mkdir_recursive(&package_dir, U_RWX));\n     writeFile(&package_dir.push(\"lib.rs\"),\n@@ -721,7 +723,8 @@ fn rustpkg_install_no_arg() {\n \n #[test]\n fn rustpkg_clean_no_arg() {\n-    let tmp = mkdtemp(&os::tmpdir(), \"rustpkg_clean_no_arg\").expect(\"rustpkg_clean_no_arg failed\");\n+    let tmp = mkdtemp(&os::tmpdir(), \"rustpkg_clean_no_arg\").expect(\"rustpkg_clean_no_arg failed\")\n+              .push(\".rust\");\n     let package_dir = tmp.push(\"src\").push(\"foo\");\n     assert!(os::mkdir_recursive(&package_dir, U_RWX));\n "}, {"sha": "1afe5d513cc14e2496c84e94518200704cb9e66f", "filename": "src/librustpkg/workspace.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f22b4b169854c8a4ba86c16ee43327d6bcf94562/src%2Flibrustpkg%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22b4b169854c8a4ba86c16ee43327d6bcf94562/src%2Flibrustpkg%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fworkspace.rs?ref=f22b4b169854c8a4ba86c16ee43327d6bcf94562", "patch": "@@ -10,12 +10,12 @@\n \n // rustpkg utilities having to do with workspaces\n \n-use std::os;\n+use std::{os,util};\n use std::path::Path;\n use path_util::workspace_contains_package_id;\n use package_id::PkgId;\n \n-use rustc::metadata::filesearch::rust_path;\n+use path_util::rust_path;\n \n pub fn each_pkg_parent_workspace(pkgid: &PkgId, action: &fn(&Path) -> bool) -> bool {\n     // Using the RUST_PATH, find workspaces that contain\n@@ -42,23 +42,22 @@ pub fn pkg_parent_workspaces(pkgid: &PkgId) -> ~[Path] {\n         .collect()\n }\n \n-pub fn in_workspace(complain: &fn()) -> bool {\n-    let dir_part = os::getcwd().pop().components.clone();\n-    if  *(dir_part.last()) != ~\"src\" {\n-        complain();\n-        false\n-    }\n-    else {\n-        true\n-    }\n-}\n-\n /// Construct a workspace and package-ID name based on the current directory.\n /// This gets used when rustpkg gets invoked without a package-ID argument.\n-pub fn cwd_to_workspace() -> (Path, PkgId) {\n+pub fn cwd_to_workspace() -> Option<(Path, PkgId)> {\n     let cwd = os::getcwd();\n-    let ws = cwd.pop().pop();\n-    let cwd_ = cwd.clone();\n-    let pkgid = cwd_.components.last().to_str();\n-    (ws, PkgId::new(pkgid))\n+    for path in rust_path().move_iter() {\n+        let srcpath = path.push(\"src\");\n+        if srcpath.is_ancestor_of(&cwd) {\n+            // I'd love to use srcpath.get_relative_to(cwd) but it behaves wrong\n+            // I'd say broken, but it has tests enforcing the wrong behavior.\n+            // instead, just hack up the components vec\n+            let mut pkgid = cwd;\n+            pkgid.is_absolute = false;\n+            let comps = util::replace(&mut pkgid.components, ~[]);\n+            pkgid.components = comps.move_iter().skip(srcpath.components.len()).collect();\n+            return Some((path, PkgId::new(pkgid.components.connect(\"/\"))))\n+        }\n+    }\n+    None\n }"}]}