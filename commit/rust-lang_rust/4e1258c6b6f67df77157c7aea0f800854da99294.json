{"sha": "4e1258c6b6f67df77157c7aea0f800854da99294", "node_id": "C_kwDOAAsO6NoAKDRlMTI1OGM2YjZmNjdkZjc3MTU3YzdhZWEwZjgwMDg1NGRhOTkyOTQ", "commit": {"author": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2023-01-13T12:39:16Z"}, "committer": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2023-01-13T12:39:16Z"}, "message": "IndexItem.name String -> Symbol", "tree": {"sha": "1bcdf1bc4fa9ccd8c75cad73330cbc71d79c8457", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bcdf1bc4fa9ccd8c75cad73330cbc71d79c8457"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e1258c6b6f67df77157c7aea0f800854da99294", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e1258c6b6f67df77157c7aea0f800854da99294", "html_url": "https://github.com/rust-lang/rust/commit/4e1258c6b6f67df77157c7aea0f800854da99294", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e1258c6b6f67df77157c7aea0f800854da99294/comments", "author": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60cc7783dabeb349c7eacb100f2a454b4546bfca", "url": "https://api.github.com/repos/rust-lang/rust/commits/60cc7783dabeb349c7eacb100f2a454b4546bfca", "html_url": "https://github.com/rust-lang/rust/commit/60cc7783dabeb349c7eacb100f2a454b4546bfca"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "3149c22b8e55ff6fcdd1293ef3594ce85a74d4a5", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4e1258c6b6f67df77157c7aea0f800854da99294/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1258c6b6f67df77157c7aea0f800854da99294/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=4e1258c6b6f67df77157c7aea0f800854da99294", "patch": "@@ -242,7 +242,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n         }\n \n         // Index this method for searching later on.\n-        if let Some(ref s) = item.name.or_else(|| {\n+        if let Some(s) = item.name.or_else(|| {\n             if item.is_stripped() {\n                 None\n             } else if let clean::ImportItem(ref i) = *item.kind &&\n@@ -317,14 +317,15 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                             short_markdown_summary(x.as_str(), &item.link_names(self.cache))\n                         });\n                         let ty = item.type_();\n-                        let name = s.to_string();\n-                        if ty != ItemType::StructField || u16::from_str_radix(&name, 10).is_err() {\n+                        if ty != ItemType::StructField\n+                            || u16::from_str_radix(s.as_str(), 10).is_err()\n+                        {\n                             // In case this is a field from a tuple struct, we don't add it into\n                             // the search index because its name is something like \"0\", which is\n                             // not useful for rustdoc search.\n                             self.cache.search_index.push(IndexItem {\n                                 ty,\n-                                name,\n+                                name: s,\n                                 path: join_with_double_colon(path),\n                                 desc,\n                                 parent,"}, {"sha": "8d018d45c106e41be33f7f91a8d1c03404c47f57", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e1258c6b6f67df77157c7aea0f800854da99294/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1258c6b6f67df77157c7aea0f800854da99294/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=4e1258c6b6f67df77157c7aea0f800854da99294", "patch": "@@ -100,7 +100,7 @@ pub(crate) fn ensure_trailing_slash(v: &str) -> impl fmt::Display + '_ {\n #[derive(Debug)]\n pub(crate) struct IndexItem {\n     pub(crate) ty: ItemType,\n-    pub(crate) name: String,\n+    pub(crate) name: Symbol,\n     pub(crate) path: String,\n     pub(crate) desc: String,\n     pub(crate) parent: Option<DefId>,"}, {"sha": "b0ae0dae0d6d574d19527c539a3487c0bbabaf0b", "filename": "src/librustdoc/html/render/search_index.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e1258c6b6f67df77157c7aea0f800854da99294/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1258c6b6f67df77157c7aea0f800854da99294/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs?ref=4e1258c6b6f67df77157c7aea0f800854da99294", "patch": "@@ -35,7 +35,7 @@ pub(crate) fn build_index<'tcx>(\n                 .map_or_else(String::new, |s| short_markdown_summary(&s, &item.link_names(cache)));\n             cache.search_index.push(IndexItem {\n                 ty: item.type_(),\n-                name: item.name.unwrap().to_string(),\n+                name: item.name.unwrap(),\n                 path: join_with_double_colon(&fqp[..fqp.len() - 1]),\n                 desc,\n                 parent: Some(parent),\n@@ -58,8 +58,8 @@ pub(crate) fn build_index<'tcx>(\n     // Sort search index items. This improves the compressibility of the search index.\n     cache.search_index.sort_unstable_by(|k1, k2| {\n         // `sort_unstable_by_key` produces lifetime errors\n-        let k1 = (&k1.path, &k1.name, &k1.ty, &k1.parent);\n-        let k2 = (&k2.path, &k2.name, &k2.ty, &k2.parent);\n+        let k1 = (&k1.path, k1.name.as_str(), &k1.ty, &k1.parent);\n+        let k2 = (&k2.path, k2.name.as_str(), &k2.ty, &k2.parent);\n         std::cmp::Ord::cmp(&k1, &k2)\n     });\n \n@@ -240,7 +240,7 @@ pub(crate) fn build_index<'tcx>(\n             )?;\n             crate_data.serialize_field(\n                 \"n\",\n-                &self.items.iter().map(|item| &item.name).collect::<Vec<_>>(),\n+                &self.items.iter().map(|item| item.name.as_str()).collect::<Vec<_>>(),\n             )?;\n             crate_data.serialize_field(\n                 \"q\","}]}