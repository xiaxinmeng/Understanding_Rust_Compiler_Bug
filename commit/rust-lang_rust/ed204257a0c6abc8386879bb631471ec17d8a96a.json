{"sha": "ed204257a0c6abc8386879bb631471ec17d8a96a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMjA0MjU3YTBjNmFiYzgzODY4NzliYjYzMTQ3MWVjMTdkOGE5NmE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-08-19T00:11:45Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-08-28T03:46:17Z"}, "message": "Upgrade libuv to the current master + our patches\n\nThere were two main differences with the old libuv and the master version:\n\n1. The uv_last_error function is now gone. The error code returned by each\n   function is the \"last error\" so now a UvError is just a wrapper around a\n   c_int.\n2. The repo no longer includes a makefile, and the build system has change.\n   According to the build directions on joyent/libuv, this now downloads a `gyp`\n   program into the `libuv/build` directory and builds using that. This\n   shouldn't add any dependences on autotools or anything like that.\n\nCloses #8407\nCloses #6567\nCloses #6315", "tree": {"sha": "72e84f91fd63865d0443c0a0e9c46fa9d2ffbbbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72e84f91fd63865d0443c0a0e9c46fa9d2ffbbbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed204257a0c6abc8386879bb631471ec17d8a96a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed204257a0c6abc8386879bb631471ec17d8a96a", "html_url": "https://github.com/rust-lang/rust/commit/ed204257a0c6abc8386879bb631471ec17d8a96a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed204257a0c6abc8386879bb631471ec17d8a96a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "578e68047736167239c52fa1aba0347011ff1bc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/578e68047736167239c52fa1aba0347011ff1bc3", "html_url": "https://github.com/rust-lang/rust/commit/578e68047736167239c52fa1aba0347011ff1bc3"}], "stats": {"total": 179, "additions": 75, "deletions": 104}, "files": [{"sha": "fa979b6d868ef4bebdcc7a79891e4f61e27ce328", "filename": ".gitmodules", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed204257a0c6abc8386879bb631471ec17d8a96a/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/ed204257a0c6abc8386879bb631471ec17d8a96a/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=ed204257a0c6abc8386879bb631471ec17d8a96a", "patch": "@@ -4,5 +4,5 @@\n \tbranch = master\n [submodule \"src/libuv\"]\n \tpath = src/libuv\n-\turl = https://github.com/brson/libuv.git\n+\turl = https://github.com/alexcrichton/libuv.git\n \tbranch = master"}, {"sha": "41d42433aae32a1b8c726d1e198d7b56b0fd7c5a", "filename": "mk/rt.mk", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ed204257a0c6abc8386879bb631471ec17d8a96a/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ed204257a0c6abc8386879bb631471ec17d8a96a/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=ed204257a0c6abc8386879bb631471ec17d8a96a", "patch": "@@ -163,34 +163,44 @@ LIBUV_DEPS := $$(wildcard \\\n               $$(S)src/libuv/*/*/*/*)\n endif\n \n+LIBUV_GYP := $$(S)src/libuv/build/gyp\n+LIBUV_MAKEFILE := $$(S)src/libuv/out/Makefile\n+LIBUV_NO_LOAD = run-benchmarks.target.mk run-tests.target.mk \\\n+\t\tuv_dtrace_header.target.mk uv_dtrace_provider.target.mk\n+\n # XXX: Shouldn't need platform-specific conditions here\n ifdef CFG_WINDOWSY_$(1)\n-$$(LIBUV_LIB_$(1)_$(2)): $$(LIBUV_DEPS)\n+$$(LIBUV_LIB_$(1)_$(2)): $$(LIBUV_DEPS) $$(LIBUV_MAKEFILE)\n \t$$(Q)$$(MAKE) -C $$(S)src/libuv/ \\\n-\t\tbuilddir_name=\"$$(CFG_BUILD_DIR)/rt/$(1)/stage$(2)/libuv\" \\\n+\t\tbuilddir=\"$$(CFG_BUILD_DIR)/rt/$(1)/stage$(2)/libuv\" \\\n \t\tOS=mingw \\\n+\t\tBUILDTYPE=Release \\\n+\t\tNO_LOAD=\"$$(LIBUV_NO_LOAD)\" \\\n \t\tV=$$(VERBOSE)\n else ifeq ($(OSTYPE_$(1)), linux-androideabi)\n-$$(LIBUV_LIB_$(1)_$(2)): $$(LIBUV_DEPS)\n+$$(LIBUV_LIB_$(1)_$(2)): $$(LIBUV_DEPS) $$(LIBUV_MAKEFILE)\n \t$$(Q)$$(MAKE) -C $$(S)src/libuv/ \\\n \t\tCFLAGS=\"$$(CFG_GCCISH_CFLAGS) $$(LIBUV_FLAGS_$$(HOST_$(1))) $$(SNAP_DEFINES)\" \\\n \t\tLDFLAGS=\"$$(CFG_GCCISH_LINK_FLAGS) $$(LIBUV_FLAGS_$$(HOST_$(1)))\" \\\n \t\tCC=\"$$(CC_$(1))\" \\\n \t\tCXX=\"$$(CXX_$(1))\" \\\n \t\tAR=\"$$(AR_$(1))\" \\\n-\t\tBUILDTYPE=Release \\\n-\t\tbuilddir_name=\"$$(CFG_BUILD_DIR)/rt/$(1)/stage$(2)/libuv\" \\\n+\t\tbuilddir=\"$$(CFG_BUILD_DIR)/rt/$(1)/stage$(2)/libuv\" \\\n \t\thost=android OS=linux \\\n+\t\tBUILDTYPE=Release \\\n+\t\tNO_LOAD=\"$$(LIBUV_NO_LOAD)\" \\\n \t\tV=$$(VERBOSE)\n else\n-$$(LIBUV_LIB_$(1)_$(2)): $$(LIBUV_DEPS)\n-\t$$(Q)$$(MAKE) -C $$(S)src/libuv/ \\\n+$$(LIBUV_LIB_$(1)_$(2)): $$(LIBUV_DEPS) $$(LIBUV_MAKEFILE)\n+\t$$(Q)$$(MAKE) -C $$(S)src/libuv/out \\\n \t\tCFLAGS=\"$$(CFG_GCCISH_CFLAGS) $$(LIBUV_FLAGS_$$(HOST_$(1))) $$(SNAP_DEFINES)\" \\\n \t\tLDFLAGS=\"$$(CFG_GCCISH_LINK_FLAGS) $$(LIBUV_FLAGS_$$(HOST_$(1)))\" \\\n \t\tCC=\"$$(CC_$(1))\" \\\n \t\tCXX=\"$$(CXX_$(1))\" \\\n \t\tAR=\"$$(AR_$(1))\" \\\n-\t\tbuilddir_name=\"$$(CFG_BUILD_DIR)/rt/$(1)/stage$(2)/libuv\" \\\n+\t\tbuilddir=\"$$(CFG_BUILD_DIR)/rt/$(1)/stage$(2)/libuv\" \\\n+\t\tBUILDTYPE=Release \\\n+\t\tNO_LOAD=\"$$(LIBUV_NO_LOAD)\" \\\n \t\tV=$$(VERBOSE)\n endif\n \n@@ -250,6 +260,13 @@ endif\n \n endef\n \n+$(LIBUV_GYP):\n+\tmkdir -p $(S)src/libuv/build\n+\tgit clone https://git.chromium.org/external/gyp.git $(S)src/libuv/build/gyp\n+\n+$(LIBUV_MAKEFILE): $(LIBUV_GYP)\n+\t(cd $(S)src/libuv/ && ./gyp_uv -f make)\n+\n # Instantiate template for all stages\n $(foreach stage,$(STAGES), \\\n \t$(foreach target,$(CFG_TARGET_TRIPLES), \\"}, {"sha": "85fb5d08848a9f13bfb9e5c7bd6841c873b4b4b0", "filename": "src/libstd/rt/io/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed204257a0c6abc8386879bb631471ec17d8a96a/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed204257a0c6abc8386879bb631471ec17d8a96a/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs?ref=ed204257a0c6abc8386879bb631471ec17d8a96a", "patch": "@@ -166,7 +166,7 @@ mod test {\n         do run_in_newsched_task {\n             let mut called = false;\n             do io_error::cond.trap(|e| {\n-                assert!(e.kind == ConnectionRefused);\n+                assert_eq!(e.kind, ConnectionRefused);\n                 called = true;\n             }).inside {\n                 let addr = SocketAddr { ip: Ipv4Addr(0, 0, 0, 0), port: 1 };"}, {"sha": "5a592b92a3862c65b1dc9ca52c50fe91851420aa", "filename": "src/libstd/rt/uv/mod.rs", "status": "modified", "additions": 14, "deletions": 39, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/ed204257a0c6abc8386879bb631471ec17d8a96a/src%2Flibstd%2Frt%2Fuv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed204257a0c6abc8386879bb631471ec17d8a96a/src%2Flibstd%2Frt%2Fuv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fmod.rs?ref=ed204257a0c6abc8386879bb631471ec17d8a96a", "patch": "@@ -202,12 +202,12 @@ impl<H, W: Watcher + NativeHandle<*H>> WatcherInterop for W {\n // XXX: Need to define the error constants like EOF so they can be\n // compared to the UvError type\n \n-pub struct UvError(uvll::uv_err_t);\n+pub struct UvError(c_int);\n \n impl UvError {\n     pub fn name(&self) -> ~str {\n         unsafe {\n-            let inner = match self { &UvError(ref a) => a };\n+            let inner = match self { &UvError(a) => a };\n             let name_str = uvll::err_name(inner);\n             assert!(name_str.is_not_null());\n             from_c_str(name_str)\n@@ -216,15 +216,15 @@ impl UvError {\n \n     pub fn desc(&self) -> ~str {\n         unsafe {\n-            let inner = match self { &UvError(ref a) => a };\n+            let inner = match self { &UvError(a) => a };\n             let desc_str = uvll::strerror(inner);\n             assert!(desc_str.is_not_null());\n             from_c_str(desc_str)\n         }\n     }\n \n     pub fn is_eof(&self) -> bool {\n-        self.code == uvll::EOF\n+        **self == uvll::EOF\n     }\n }\n \n@@ -236,38 +236,30 @@ impl ToStr for UvError {\n \n #[test]\n fn error_smoke_test() {\n-    let err = uvll::uv_err_t { code: 1, sys_errno_: 1 };\n-    let err: UvError = UvError(err);\n+    let err: UvError = UvError(uvll::EOF);\n     assert_eq!(err.to_str(), ~\"EOF: end of file\");\n }\n \n-pub fn last_uv_error<H, W: Watcher + NativeHandle<*H>>(watcher: &W) -> UvError {\n-    unsafe {\n-        let loop_ = watcher.event_loop();\n-        UvError(uvll::last_error(loop_.native_handle()))\n-    }\n-}\n-\n pub fn uv_error_to_io_error(uverr: UvError) -> IoError {\n     unsafe {\n         // Importing error constants\n         use rt::uv::uvll::*;\n         use rt::io::*;\n \n         // uv error descriptions are static\n-        let c_desc = uvll::strerror(&*uverr);\n+        let c_desc = uvll::strerror(*uverr);\n         let desc = str::raw::c_str_to_static_slice(c_desc);\n \n-        let kind = match uverr.code {\n+        let kind = match *uverr {\n             UNKNOWN => OtherIoError,\n             OK => OtherIoError,\n             EOF => EndOfFile,\n             EACCES => PermissionDenied,\n             ECONNREFUSED => ConnectionRefused,\n             ECONNRESET => ConnectionReset,\n             EPIPE => BrokenPipe,\n-            _ => {\n-                rtdebug!(\"uverr.code %u\", uverr.code as uint);\n+            err => {\n+                rtdebug!(\"uverr.code %d\", err as int);\n                 // XXX: Need to map remaining uv error types\n                 OtherIoError\n             }\n@@ -282,30 +274,13 @@ pub fn uv_error_to_io_error(uverr: UvError) -> IoError {\n }\n \n /// Given a uv handle, convert a callback status to a UvError\n-pub fn status_to_maybe_uv_error_with_loop(\n-    loop_: *uvll::uv_loop_t,\n-    status: c_int) -> Option<UvError> {\n-    if status != -1 {\n+pub fn status_to_maybe_uv_error<T, U: Watcher + NativeHandle<*T>>(\n+    handle: U, status: c_int) -> Option<UvError>\n+{\n+    if status >= 0 {\n         None\n     } else {\n-        unsafe {\n-            rtdebug!(\"loop: %x\", loop_ as uint);\n-            let err = uvll::last_error(loop_);\n-            Some(UvError(err))\n-        }\n-    }\n-}\n-/// Given a uv handle, convert a callback status to a UvError\n-pub fn status_to_maybe_uv_error<T, U: Watcher + NativeHandle<*T>>(handle: U,\n-                                                                 status: c_int) -> Option<UvError> {\n-    if status != -1 {\n-        None\n-    } else {\n-        unsafe {\n-            rtdebug!(\"handle: %x\", handle.native_handle() as uint);\n-            let loop_ = uvll::get_loop_for_uv_handle(handle.native_handle());\n-            status_to_maybe_uv_error_with_loop(loop_, status)\n-        }\n+        Some(UvError(status))\n     }\n }\n "}, {"sha": "bb3a00ca2431ef27755a91b73ffa2646ff7262f3", "filename": "src/libstd/rt/uv/net.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed204257a0c6abc8386879bb631471ec17d8a96a/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed204257a0c6abc8386879bb631471ec17d8a96a/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fnet.rs?ref=ed204257a0c6abc8386879bb631471ec17d8a96a", "patch": "@@ -16,7 +16,6 @@ use rt::uv::{AllocCallback, ConnectionCallback, ReadCallback, UdpReceiveCallback\n use rt::uv::{Loop, Watcher, Request, UvError, Buf, NativeHandle, NullCallback,\n              status_to_maybe_uv_error};\n use rt::io::net::ip::{SocketAddr, Ipv4Addr, Ipv6Addr};\n-use rt::uv::last_uv_error;\n use vec;\n use str;\n use from_str::{FromStr};\n@@ -232,7 +231,7 @@ impl TcpWatcher {\n             };\n             match result {\n                 0 => Ok(()),\n-                _ => Err(last_uv_error(self)),\n+                _ => Err(UvError(result)),\n             }\n         }\n     }\n@@ -327,7 +326,7 @@ impl UdpWatcher {\n             };\n             match result {\n                 0 => Ok(()),\n-                _ => Err(last_uv_error(self)),\n+                _ => Err(UvError(result)),\n             }\n         }\n     }"}, {"sha": "00c2974cb541c797f87d9bbb040559bc44fe12a2", "filename": "src/libstd/rt/uv/uvll.rs", "status": "modified", "additions": 28, "deletions": 40, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/ed204257a0c6abc8386879bb631471ec17d8a96a/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed204257a0c6abc8386879bb631471ec17d8a96a/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs?ref=ed204257a0c6abc8386879bb631471ec17d8a96a", "patch": "@@ -37,21 +37,34 @@ use libc::{malloc, free};\n use libc;\n use prelude::*;\n use ptr;\n-use str;\n use vec;\n \n-pub static UNKNOWN: c_int = -1;\n+pub use self::errors::*;\n+\n pub static OK: c_int = 0;\n-pub static EOF: c_int = 1;\n-pub static EADDRINFO: c_int = 2;\n-pub static EACCES: c_int = 3;\n-pub static ECONNREFUSED: c_int = 12;\n-pub static ECONNRESET: c_int = 13;\n-pub static EPIPE: c_int = 36;\n+pub static EOF: c_int = -4095;\n+pub static UNKNOWN: c_int = -4094;\n+\n+// uv-errno.h redefines error codes for windows, but not for unix...\n \n-pub struct uv_err_t {\n-    code: c_int,\n-    sys_errno_: c_int\n+#[cfg(windows)]\n+pub mod errors {\n+    use libc::c_int;\n+\n+    pub static EACCES: c_int = -4093;\n+    pub static ECONNREFUSED: c_int = -4079;\n+    pub static ECONNRESET: c_int = -4078;\n+    pub static EPIPE: c_int = -4048;\n+}\n+#[cfg(not(windows))]\n+pub mod errors {\n+    use libc;\n+    use libc::c_int;\n+\n+    pub static EACCES: c_int = -libc::EACCES;\n+    pub static ECONNREFUSED: c_int = -libc::ECONNREFUSED;\n+    pub static ECONNRESET: c_int = -libc::ECONNRESET;\n+    pub static EPIPE: c_int = -libc::EPIPE;\n }\n \n pub struct uv_buf_t {\n@@ -487,20 +500,12 @@ pub unsafe fn read_stop(stream: *uv_stream_t) -> c_int {\n     return rust_uv_read_stop(stream as *c_void);\n }\n \n-pub unsafe fn last_error(loop_handle: *c_void) -> uv_err_t {\n-    #[fixed_stack_segment]; #[inline(never)];\n-\n-    return rust_uv_last_error(loop_handle);\n-}\n-\n-pub unsafe fn strerror(err: *uv_err_t) -> *c_char {\n+pub unsafe fn strerror(err: c_int) -> *c_char {\n     #[fixed_stack_segment]; #[inline(never)];\n-\n     return rust_uv_strerror(err);\n }\n-pub unsafe fn err_name(err: *uv_err_t) -> *c_char {\n+pub unsafe fn err_name(err: c_int) -> *c_char {\n     #[fixed_stack_segment]; #[inline(never)];\n-\n     return rust_uv_err_name(err);\n }\n \n@@ -720,22 +725,6 @@ pub unsafe fn get_len_from_buf(buf: uv_buf_t) -> size_t {\n \n     return rust_uv_get_len_from_buf(buf);\n }\n-pub unsafe fn get_last_err_info(uv_loop: *c_void) -> ~str {\n-    let err = last_error(uv_loop);\n-    let err_ptr = ptr::to_unsafe_ptr(&err);\n-    let err_name = str::raw::from_c_str(err_name(err_ptr));\n-    let err_msg = str::raw::from_c_str(strerror(err_ptr));\n-    return fmt!(\"LIBUV ERROR: name: %s msg: %s\",\n-                    err_name, err_msg);\n-}\n-\n-pub unsafe fn get_last_err_data(uv_loop: *c_void) -> uv_err_data {\n-    let err = last_error(uv_loop);\n-    let err_ptr = ptr::to_unsafe_ptr(&err);\n-    let err_name = str::raw::from_c_str(err_name(err_ptr));\n-    let err_msg = str::raw::from_c_str(strerror(err_ptr));\n-    uv_err_data { err_name: err_name, err_msg: err_msg }\n-}\n \n pub struct uv_err_data {\n     err_name: ~str,\n@@ -768,9 +757,8 @@ extern {\n                           cb: uv_async_cb) -> c_int;\n     fn rust_uv_tcp_init(loop_handle: *c_void, handle_ptr: *uv_tcp_t) -> c_int;\n     fn rust_uv_buf_init(out_buf: *uv_buf_t, base: *u8, len: size_t);\n-    fn rust_uv_last_error(loop_handle: *c_void) -> uv_err_t;\n-    fn rust_uv_strerror(err: *uv_err_t) -> *c_char;\n-    fn rust_uv_err_name(err: *uv_err_t) -> *c_char;\n+    fn rust_uv_strerror(err: c_int) -> *c_char;\n+    fn rust_uv_err_name(err: c_int) -> *c_char;\n     fn rust_uv_ip4_addrp(ip: *u8, port: c_int) -> *sockaddr_in;\n     fn rust_uv_ip6_addrp(ip: *u8, port: c_int) -> *sockaddr_in6;\n     fn rust_uv_free_ip4_addr(addr: *sockaddr_in);"}, {"sha": "fb2fc332dc2bce0c72818a45f3b8c6824d5e046e", "filename": "src/libuv", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuv?ref=ed204257a0c6abc8386879bb631471ec17d8a96a", "patch": "@@ -1 +1 @@\n-Subproject commit dfae9c3e958dc086d9c0ab068cd76d196c95a433\n+Subproject commit fb2fc332dc2bce0c72818a45f3b8c6824d5e046e"}, {"sha": "23b97a4365558263cfb54723b28e9b1f59d3fa52", "filename": "src/rt/rust_uv.cpp", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ed204257a0c6abc8386879bb631471ec17d8a96a/src%2Frt%2Frust_uv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ed204257a0c6abc8386879bb631471ec17d8a96a/src%2Frt%2Frust_uv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_uv.cpp?ref=ed204257a0c6abc8386879bb631471ec17d8a96a", "patch": "@@ -329,20 +329,13 @@ rust_uv_get_len_from_buf(uv_buf_t buf) {\n     return buf.len;\n }\n \n-extern \"C\" uv_err_t\n-rust_uv_last_error(uv_loop_t* loop) {\n-    return uv_last_error(loop);\n-}\n-\n extern \"C\" const char*\n-rust_uv_strerror(uv_err_t* err_ptr) {\n-    uv_err_t err = *err_ptr;\n+rust_uv_strerror(int err) {\n     return uv_strerror(err);\n }\n \n extern \"C\" const char*\n-rust_uv_err_name(uv_err_t* err_ptr) {\n-    uv_err_t err = *err_ptr;\n+rust_uv_err_name(int err) {\n     return uv_err_name(err);\n }\n "}, {"sha": "edc9f494615d4c9d5dbca1df46c44768214a5f99", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed204257a0c6abc8386879bb631471ec17d8a96a/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/ed204257a0c6abc8386879bb631471ec17d8a96a/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=ed204257a0c6abc8386879bb631471ec17d8a96a", "patch": "@@ -47,7 +47,6 @@ rust_uv_timer_start\n rust_uv_timer_stop\n rust_uv_tcp_init\n rust_uv_buf_init\n-rust_uv_last_error\n rust_uv_strerror\n rust_uv_err_name\n rust_uv_ip4_addr\n@@ -191,4 +190,4 @@ rust_drop_global_args_lock\n rust_take_change_dir_lock\n rust_drop_change_dir_lock\n rust_get_test_int\n-rust_get_task\n\\ No newline at end of file\n+rust_get_task"}]}