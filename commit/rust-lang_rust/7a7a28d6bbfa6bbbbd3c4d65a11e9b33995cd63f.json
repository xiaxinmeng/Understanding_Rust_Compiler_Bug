{"sha": "7a7a28d6bbfa6bbbbd3c4d65a11e9b33995cd63f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhN2EyOGQ2YmJmYTZiYmJiZDNjNGQ2NWExMWU5YjMzOTk1Y2Q2M2Y=", "commit": {"author": {"name": "Amjad Alsharafi", "email": "amjadsharafi10@gmail.com", "date": "2020-08-26T11:17:07Z"}, "committer": {"name": "Amjad Alsharafi", "email": "amjadsharafi10@gmail.com", "date": "2020-08-26T11:17:07Z"}, "message": "Fixed file formatting and made `tidy` happy", "tree": {"sha": "5b51443141fd803507e6988ce26b203e67c57bc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b51443141fd803507e6988ce26b203e67c57bc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a7a28d6bbfa6bbbbd3c4d65a11e9b33995cd63f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a7a28d6bbfa6bbbbd3c4d65a11e9b33995cd63f", "html_url": "https://github.com/rust-lang/rust/commit/7a7a28d6bbfa6bbbbd3c4d65a11e9b33995cd63f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a7a28d6bbfa6bbbbd3c4d65a11e9b33995cd63f/comments", "author": {"login": "Amjad50", "id": 26300843, "node_id": "MDQ6VXNlcjI2MzAwODQz", "avatar_url": "https://avatars.githubusercontent.com/u/26300843?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amjad50", "html_url": "https://github.com/Amjad50", "followers_url": "https://api.github.com/users/Amjad50/followers", "following_url": "https://api.github.com/users/Amjad50/following{/other_user}", "gists_url": "https://api.github.com/users/Amjad50/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amjad50/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amjad50/subscriptions", "organizations_url": "https://api.github.com/users/Amjad50/orgs", "repos_url": "https://api.github.com/users/Amjad50/repos", "events_url": "https://api.github.com/users/Amjad50/events{/privacy}", "received_events_url": "https://api.github.com/users/Amjad50/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amjad50", "id": 26300843, "node_id": "MDQ6VXNlcjI2MzAwODQz", "avatar_url": "https://avatars.githubusercontent.com/u/26300843?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amjad50", "html_url": "https://github.com/Amjad50", "followers_url": "https://api.github.com/users/Amjad50/followers", "following_url": "https://api.github.com/users/Amjad50/following{/other_user}", "gists_url": "https://api.github.com/users/Amjad50/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amjad50/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amjad50/subscriptions", "organizations_url": "https://api.github.com/users/Amjad50/orgs", "repos_url": "https://api.github.com/users/Amjad50/repos", "events_url": "https://api.github.com/users/Amjad50/events{/privacy}", "received_events_url": "https://api.github.com/users/Amjad50/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d89d2a972d3174504594ff2eba70423dacaddcfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d89d2a972d3174504594ff2eba70423dacaddcfb", "html_url": "https://github.com/rust-lang/rust/commit/d89d2a972d3174504594ff2eba70423dacaddcfb"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "356652d67aae24cb202e9ed85b1c40b31e0607a8", "filename": "src/test/ui/const-generics/issues/issue-63322-forbid-dyn.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a7a28d6bbfa6bbbbd3c4d65a11e9b33995cd63f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7a28d6bbfa6bbbbd3c4d65a11e9b33995cd63f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs?ref=7a7a28d6bbfa6bbbbd3c4d65a11e9b33995cd63f", "patch": "@@ -9,7 +9,8 @@ impl A for B {}\n \n fn test<const T: &'static dyn A>() {\n     //[full]~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]` to be used\n-    //[min]~^^ ERROR `&'static (dyn A + 'static)` is forbidden as the type of a const generic parameter\n+    //[min]~^^ ERROR `&'static (dyn A + 'static)` is forbidden as the type of\n+    // a const generic parameter\n     //[min]~| ERROR must be annotated with `#[derive(PartialEq, Eq)]` to be used\n     unimplemented!()\n }"}, {"sha": "00edcbc53ce4da21d8359b85b02aa79b745722a6", "filename": "src/test/ui/const-generics/std/const-generics-range.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a7a28d6bbfa6bbbbd3c4d65a11e9b33995cd63f/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a7a28d6bbfa6bbbbd3c4d65a11e9b33995cd63f/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.min.stderr?ref=7a7a28d6bbfa6bbbbd3c4d65a11e9b33995cd63f", "patch": "@@ -35,7 +35,7 @@ LL | struct _RangeInclusive<const R: std::ops::RangeInclusive<usize>>;\n    = note: more complex types are supported with `#[feature(const_generics)]`\n \n error: `std::ops::RangeTo<usize>` is forbidden as the type of a const generic parameter\n-  --> $DIR/const-generics-range.rs:29:26\n+  --> $DIR/const-generics-range.rs:30:26\n    |\n LL | struct _RangeTo<const R: std::ops::RangeTo<usize>>;\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -44,7 +44,7 @@ LL | struct _RangeTo<const R: std::ops::RangeTo<usize>>;\n    = note: more complex types are supported with `#[feature(const_generics)]`\n \n error: `std::ops::RangeToInclusive<usize>` is forbidden as the type of a const generic parameter\n-  --> $DIR/const-generics-range.rs:34:35\n+  --> $DIR/const-generics-range.rs:35:35\n    |\n LL | struct _RangeToInclusive<const R: std::ops::RangeToInclusive<usize>>;\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "209aa39775d7c0e9117120c7ff82f7c9cb5648b0", "filename": "src/test/ui/const-generics/std/const-generics-range.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a7a28d6bbfa6bbbbd3c4d65a11e9b33995cd63f/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a7a28d6bbfa6bbbbd3c4d65a11e9b33995cd63f/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstd%2Fconst-generics-range.rs?ref=7a7a28d6bbfa6bbbbd3c4d65a11e9b33995cd63f", "patch": "@@ -22,7 +22,8 @@ const RANGE_FULL : _RangeFull<{ .. }> = _RangeFull;\n // Regression test for #70155\n // `RangeInclusive` should be usable within const generics:\n struct _RangeInclusive<const R: std::ops::RangeInclusive<usize>>;\n-//[min]~^ ERROR `std::ops::RangeInclusive<usize>` is forbidden as the type of a const generic parameter\n+//[min]~^ ERROR `std::ops::RangeInclusive<usize>` is forbidden as the type of a const generic\n+// parameter\n const RANGE_INCLUSIVE : _RangeInclusive<{ 0 ..= 999 }> = _RangeInclusive;\n \n // `RangeTo` should be usable within const generics:\n@@ -32,7 +33,8 @@ const RANGE_TO : _RangeTo<{ .. 1000 }> = _RangeTo;\n \n // `RangeToInclusive` should be usable within const generics:\n struct _RangeToInclusive<const R: std::ops::RangeToInclusive<usize>>;\n-//[min]~^ ERROR `std::ops::RangeToInclusive<usize>` is forbidden as the type of a const generic parameter\n+//[min]~^ ERROR `std::ops::RangeToInclusive<usize>` is forbidden as the type of a const generic\n+// parameter\n const RANGE_TO_INCLUSIVE : _RangeToInclusive<{ ..= 999 }> = _RangeToInclusive;\n \n pub fn main() {}"}]}