{"sha": "07e1e7b7e5d0cf6962322f035dd204d45106a29f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZTFlN2I3ZTVkMGNmNjk2MjMyMmYwMzVkZDIwNGQ0NTEwNmEyOWY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-02-10T09:27:31Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-02-10T13:34:10Z"}, "message": "move base computation into each projection to allow optimizations and corner cases", "tree": {"sha": "b9ed7d9f549773d4bf48dded53b9544b288c8d2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9ed7d9f549773d4bf48dded53b9544b288c8d2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07e1e7b7e5d0cf6962322f035dd204d45106a29f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlidwVIACgkQpp+NIls6\n19mc0RAAiHNud5xg36wpQsvfE8MsWMPs8C+sjuC9sw3PUicu3vyMP9JRfFzPKQwJ\norqsajkubK/RtSU4kld27SJPbT4mK4yVcunnXk4lNgTbv4Bvp4Q1wLEmKXgpt65o\n10fiacfnlNrzMU+j48kXa/UFiNyOdrjkXt9XncTmiQN9vVos3EXp2fBnAacMd3dL\n4ZH3MTf7g+oDi0cx4qJKNPXZB0uvhD8c37Suy/TbILBQXS6F44+IZh61WGzN3Qlc\nGVtBBHtgs9xDHs1wQtTH2ojGEMLYUP1RY9C92fjZWxPb9U1PpCkXFMCyFA1tev2E\n65QpgIH6lfLVYbqv+gv713ph67BxxGyAqTC6AkYd8etMNB59EemYQagaCFSN4GCv\nQ6RIbtotop386lOWqlMneZtdbFv7KEKVh4eaCVHg33tdXwwS+eliF6LHcugsQ+23\nerQ0PsNyfLGrKE6O26/M3KbFwLqWxE5/q4AAmNawU2CoDvlMwbnRW8PmXCTFFLfB\nwKZN2kIPr8rGvdOOtraSl6yOgdyPM/UMIypkn1QpyS60JBz2HkA9aXkGZjJUQgE6\nvDKltzNLI14iUzYjm5FEevJi66jgfpMJxf1oV/c9AT7YkfCvVyM2vTzwYqgl0DL5\nrib3bpdZ+zEBxQRWSJsf0UOgC3agynEkVZyvrrZQnBoVWUcFl8Y=\n=lgZ1\n-----END PGP SIGNATURE-----", "payload": "tree b9ed7d9f549773d4bf48dded53b9544b288c8d2b\nparent d971a63c4b81340634f17579da0792a7467b8ea0\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1486718851 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1486733650 +0100\n\nmove base computation into each projection to allow optimizations and corner cases"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07e1e7b7e5d0cf6962322f035dd204d45106a29f", "html_url": "https://github.com/rust-lang/rust/commit/07e1e7b7e5d0cf6962322f035dd204d45106a29f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07e1e7b7e5d0cf6962322f035dd204d45106a29f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d971a63c4b81340634f17579da0792a7467b8ea0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d971a63c4b81340634f17579da0792a7467b8ea0", "html_url": "https://github.com/rust-lang/rust/commit/d971a63c4b81340634f17579da0792a7467b8ea0"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "8ba50b324f1b7073e20cf4cb2a2150d003d81748", "filename": "src/lvalue.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/07e1e7b7e5d0cf6962322f035dd204d45106a29f/src%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e1e7b7e5d0cf6962322f035dd204d45106a29f/src%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flvalue.rs?ref=07e1e7b7e5d0cf6962322f035dd204d45106a29f", "patch": "@@ -164,13 +164,12 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         &mut self,\n         proj: &mir::LvalueProjection<'tcx>,\n     ) -> EvalResult<'tcx, Lvalue<'tcx>> {\n-        let base = self.eval_lvalue(&proj.base)?;\n-        let base_ty = self.lvalue_ty(&proj.base);\n-        let base_layout = self.type_layout(base_ty)?;\n-\n         use rustc::mir::ProjectionElem::*;\n         let (ptr, extra) = match proj.elem {\n             Field(field, field_ty) => {\n+                let base = self.eval_lvalue(&proj.base)?;\n+                let base_ty = self.lvalue_ty(&proj.base);\n+                let base_layout = self.type_layout(base_ty)?;\n                 // FIXME(solson)\n                 let base = self.force_allocation(base)?;\n                 let (base_ptr, base_extra) = base.to_ptr_and_extra();\n@@ -246,6 +245,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             Downcast(_, variant) => {\n+                let base = self.eval_lvalue(&proj.base)?;\n+                let base_ty = self.lvalue_ty(&proj.base);\n+                let base_layout = self.type_layout(base_ty)?;\n                 // FIXME(solson)\n                 let base = self.force_allocation(base)?;\n                 let (base_ptr, base_extra) = base.to_ptr_and_extra();\n@@ -260,6 +262,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             Deref => {\n+                let base_ty = self.lvalue_ty(&proj.base);\n                 let val = self.eval_and_read_lvalue(&proj.base)?;\n \n                 let pointee_type = match base_ty.sty {\n@@ -285,6 +288,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             Index(ref operand) => {\n+                let base = self.eval_lvalue(&proj.base)?;\n+                let base_ty = self.lvalue_ty(&proj.base);\n                 // FIXME(solson)\n                 let base = self.force_allocation(base)?;\n                 let (base_ptr, _) = base.to_ptr_and_extra();\n@@ -300,6 +305,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             ConstantIndex { offset, min_length, from_end } => {\n+                let base = self.eval_lvalue(&proj.base)?;\n+                let base_ty = self.lvalue_ty(&proj.base);\n                 // FIXME(solson)\n                 let base = self.force_allocation(base)?;\n                 let (base_ptr, _) = base.to_ptr_and_extra();\n@@ -319,6 +326,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             Subslice { from, to } => {\n+                let base = self.eval_lvalue(&proj.base)?;\n+                let base_ty = self.lvalue_ty(&proj.base);\n                 // FIXME(solson)\n                 let base = self.force_allocation(base)?;\n                 let (base_ptr, _) = base.to_ptr_and_extra();"}]}