{"sha": "1dd207c10f90f490da9396e06228916279c3be7f", "node_id": "C_kwDOAAsO6NoAKDFkZDIwN2MxMGY5MGY0OTBkYTkzOTZlMDYyMjg5MTYyNzljM2JlN2Y", "commit": {"author": {"name": "Gunnlaugur \u00de\u00f3r Briem", "email": "gunnlaugur@gmail.com", "date": "2022-07-14T14:41:22Z"}, "committer": {"name": "Gunnlaugur \u00de\u00f3r Briem", "email": "gunnlaugur@gmail.com", "date": "2022-07-14T14:43:50Z"}, "message": "doc: clearer and more correct Iterator::scan\n\nThe `Iterator::scan` documentation seemed a little misleading to my newcomer\neyes, and this tries to address that.\n\n* I found \u201csimilar to `fold`\u201d unhelpful because (a) the similarity is only that\n  they maintain state between iterations, and (b) the _dissimilarity_ is no less\n  important: one returns a final value and the other an iterator. So this\n  replaces that with \u201cwhich, like `fold`, holds internal state, but unlike\n  `fold`, produces a new iterator.\n\n* I found \u201cthe return value from the closure, an [`Option`], is yielded by the\n  iterator\u201d to be downright incorrect, because \u201cyielded by the iterator\u201d means\n  \u201creturned by the `next` method wrapped in `Some`\u201d, so this implied that `scan`\n  would convert an input iterator of `T` to an output iterator of `Option<T>`.\n  So this replaces \u201cyielded by the iterator\u201d with \u201creturned by the `next`\n  method\u201d and elaborates: \u201cThus the closure can return `Some(value)` to yield\n  `value`, or `None` to end the iteration.\u201d\n\n* This also changes the example to illustrate the latter point by returning\n  `None` to terminate the iteration early based on `state`.", "tree": {"sha": "92c91fb4ff4ead34013b2b9b842bf71c49d5c1eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92c91fb4ff4ead34013b2b9b842bf71c49d5c1eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dd207c10f90f490da9396e06228916279c3be7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dd207c10f90f490da9396e06228916279c3be7f", "html_url": "https://github.com/rust-lang/rust/commit/1dd207c10f90f490da9396e06228916279c3be7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dd207c10f90f490da9396e06228916279c3be7f/comments", "author": {"login": "gthb", "id": 153580, "node_id": "MDQ6VXNlcjE1MzU4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/153580?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gthb", "html_url": "https://github.com/gthb", "followers_url": "https://api.github.com/users/gthb/followers", "following_url": "https://api.github.com/users/gthb/following{/other_user}", "gists_url": "https://api.github.com/users/gthb/gists{/gist_id}", "starred_url": "https://api.github.com/users/gthb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gthb/subscriptions", "organizations_url": "https://api.github.com/users/gthb/orgs", "repos_url": "https://api.github.com/users/gthb/repos", "events_url": "https://api.github.com/users/gthb/events{/privacy}", "received_events_url": "https://api.github.com/users/gthb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gthb", "id": 153580, "node_id": "MDQ6VXNlcjE1MzU4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/153580?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gthb", "html_url": "https://github.com/gthb", "followers_url": "https://api.github.com/users/gthb/followers", "following_url": "https://api.github.com/users/gthb/following{/other_user}", "gists_url": "https://api.github.com/users/gthb/gists{/gist_id}", "starred_url": "https://api.github.com/users/gthb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gthb/subscriptions", "organizations_url": "https://api.github.com/users/gthb/orgs", "repos_url": "https://api.github.com/users/gthb/repos", "events_url": "https://api.github.com/users/gthb/events{/privacy}", "received_events_url": "https://api.github.com/users/gthb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1a8854f9be2e5cad764d630a53d26c7b72f8162", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1a8854f9be2e5cad764d630a53d26c7b72f8162", "html_url": "https://github.com/rust-lang/rust/commit/f1a8854f9be2e5cad764d630a53d26c7b72f8162"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "3e9521713aace646d0de06c65f490c3865d30381", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1dd207c10f90f490da9396e06228916279c3be7f/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd207c10f90f490da9396e06228916279c3be7f/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=1dd207c10f90f490da9396e06228916279c3be7f", "patch": "@@ -1380,8 +1380,8 @@ pub trait Iterator {\n         Take::new(self, n)\n     }\n \n-    /// An iterator adapter similar to [`fold`] that holds internal state and\n-    /// produces a new iterator.\n+    /// An iterator adapter which, like [`fold`], holds internal state, but\n+    /// unlike [`fold`], produces a new iterator.\n     ///\n     /// [`fold`]: Iterator::fold\n     ///\n@@ -1393,20 +1393,25 @@ pub trait Iterator {\n     ///\n     /// On iteration, the closure will be applied to each element of the\n     /// iterator and the return value from the closure, an [`Option`], is\n-    /// yielded by the iterator.\n+    /// returned by the `next` method. Thus the closure can return\n+    /// `Some(value)` to yield `value`, or `None` to end the iteration.\n     ///\n     /// # Examples\n     ///\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let a = [1, 2, 3];\n+    /// let a = [1, 2, 3, 4];\n     ///\n     /// let mut iter = a.iter().scan(1, |state, &x| {\n-    ///     // each iteration, we'll multiply the state by the element\n+    ///     // each iteration, we'll multiply the state by the element ...\n     ///     *state = *state * x;\n     ///\n-    ///     // then, we'll yield the negation of the state\n+    ///     // ... and terminate if the state exceeds 6\n+    ///     if (*state > 6) {\n+    ///         return None;\n+    ///     }\n+    ///     // ... else yield the negation of the state\n     ///     Some(-*state)\n     /// });\n     ///"}]}