{"sha": "6e0c103133b14fbad4803c87da71fd13aec2269f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMGMxMDMxMzNiMTRmYmFkNDgwM2M4N2RhNzFmZDEzYWVjMjI2OWY=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-18T10:26:01Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-18T10:26:01Z"}, "message": "more small const improvements", "tree": {"sha": "a14c1882b5c93e5a8c0aeb778f718d15dce323e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a14c1882b5c93e5a8c0aeb778f718d15dce323e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e0c103133b14fbad4803c87da71fd13aec2269f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e0c103133b14fbad4803c87da71fd13aec2269f", "html_url": "https://github.com/rust-lang/rust/commit/6e0c103133b14fbad4803c87da71fd13aec2269f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e0c103133b14fbad4803c87da71fd13aec2269f/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6182445cf511be9e1c61e6f732e3810fc3708314", "url": "https://api.github.com/repos/rust-lang/rust/commits/6182445cf511be9e1c61e6f732e3810fc3708314", "html_url": "https://github.com/rust-lang/rust/commit/6182445cf511be9e1c61e6f732e3810fc3708314"}], "stats": {"total": 36, "additions": 15, "deletions": 21}, "files": [{"sha": "4d23ce07df2e956b341f9a5832feb37aa3ae6880", "filename": "src/consts.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6e0c103133b14fbad4803c87da71fd13aec2269f/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e0c103133b14fbad4803c87da71fd13aec2269f/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=6e0c103133b14fbad4803c87da71fd13aec2269f", "patch": "@@ -59,7 +59,7 @@ impl Constant {\n     ///\n     /// if the constant could not be converted to u64 losslessly\n     fn as_u64(&self) -> u64 {\n-        if let ConstantInt(val, _) = *self {\n+        if let &ConstantInt(val, _) = self {\n             val // TODO we may want to check the sign if any\n         } else {\n             panic!(\"Could not convert a {:?} to u64\");\n@@ -149,15 +149,15 @@ impl PartialOrd for Constant {\n \n \n fn lit_to_constant(lit: &Lit_) -> Constant {\n-    match *lit {\n-        LitStr(ref is, style) => ConstantStr(is.to_string(), style),\n-        LitBinary(ref blob) => ConstantBinary(blob.clone()),\n-        LitByte(b) => ConstantByte(b),\n-        LitChar(c) => ConstantChar(c),\n-        LitInt(value, ty) => ConstantInt(value, ty),\n-        LitFloat(ref is, ty) => ConstantFloat(is.to_string(), ty.into()),\n-        LitFloatUnsuffixed(ref is) => ConstantFloat(is.to_string(), FwAny),\n-        LitBool(b) => ConstantBool(b),\n+    match lit {\n+        &LitStr(ref is, style) => ConstantStr(is.to_string(), style),\n+        &LitBinary(ref blob) => ConstantBinary(blob.clone()),\n+        &LitByte(b) => ConstantByte(b),\n+        &LitChar(c) => ConstantChar(c),\n+        &LitInt(value, ty) => ConstantInt(value, ty),\n+        &LitFloat(ref is, ty) => ConstantFloat(is.to_string(), ty.into()),\n+        &LitFloatUnsuffixed(ref is) => ConstantFloat(is.to_string(), FwAny),\n+        &LitBool(b) => ConstantBool(b),\n     }\n }\n \n@@ -300,8 +300,8 @@ impl<'c, 'cc> ConstEvalContext<'c, 'cc> {\n             ExprIf(ref cond, ref then, ref otherwise) =>\n                 self.ifthenelse(&*cond, &*then, &*otherwise),\n             ExprLit(ref lit) => Some(lit_to_constant(&lit.node)),\n-            ExprVec(ref vec) => self.vec(&vec),\n-            ExprTup(ref tup) => self.tup(&tup),\n+            ExprVec(ref vec) => self.multi(&vec[..]).map(ConstantVec),\n+            ExprTup(ref tup) => self.multi(&tup[..]).map(ConstantTuple),\n             ExprRepeat(ref value, ref number) =>\n                 self.binop_apply(value, number, |v, n|\n                     Some(ConstantRepeat(Box::new(v), n.as_u64() as usize))),\n@@ -318,18 +318,12 @@ impl<'c, 'cc> ConstEvalContext<'c, 'cc> {\n         }\n     }\n \n-    /// create `Some(ConstantVec(..))` of all constants, unless there is any\n+    /// create `Some(Vec![..])` of all constants, unless there is any\n     /// non-constant part\n-    fn vec<E: Deref<Target=Expr> + Sized>(&mut self, vec: &[E]) -> Option<Constant> {\n+    fn multi<E: Deref<Target=Expr> + Sized>(&mut self, vec: &[E]) -> \n+            Option<Vec<Constant>> {\n         vec.iter().map(|elem| self.expr(elem))\n                   .collect::<Option<_>>()\n-                  .map(ConstantVec)\n-    }\n-\n-    fn tup<E: Deref<Target=Expr> + Sized>(&mut self, tup: &[E]) -> Option<Constant> {\n-        tup.iter().map(|elem| self.expr(elem))\n-                  .collect::<Option<_>>()\n-                  .map(ConstantTuple)\n     }\n \n     /// lookup a possibly constant expression from a ExprPath"}]}