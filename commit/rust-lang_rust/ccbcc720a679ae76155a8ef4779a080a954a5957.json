{"sha": "ccbcc720a679ae76155a8ef4779a080a954a5957", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjYmNjNzIwYTY3OWFlNzYxNTVhOGVmNDc3OWEwODBhOTU0YTU5NTc=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-05-04T16:34:44Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-05-04T18:04:20Z"}, "message": "rustc: Forbid `-Z` flags on stable/beta channels\n\nFirst deprecated in rustc 1.8.0 the intention was to never allow `-Z` flags make\ntheir way to the stable channel (or unstable options). After a year of warnings\nwe've seen one of the main use cases, `-Z no-trans`, stabilized as `cargo\ncheck`. Otherwise while other use cases remain the sentiment is that now's the\ntime to start forbidding `-Z` by default on stable/beta.\n\nCloses #31847", "tree": {"sha": "6f508a3d271a9a0dbe6fba2a9238cb5d200c33a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f508a3d271a9a0dbe6fba2a9238cb5d200c33a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccbcc720a679ae76155a8ef4779a080a954a5957", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccbcc720a679ae76155a8ef4779a080a954a5957", "html_url": "https://github.com/rust-lang/rust/commit/ccbcc720a679ae76155a8ef4779a080a954a5957", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccbcc720a679ae76155a8ef4779a080a954a5957/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "222971f7d2a098b4b8b57520452ab475bc5ea45f", "url": "https://api.github.com/repos/rust-lang/rust/commits/222971f7d2a098b4b8b57520452ab475bc5ea45f", "html_url": "https://github.com/rust-lang/rust/commit/222971f7d2a098b4b8b57520452ab475bc5ea45f"}], "stats": {"total": 84, "additions": 16, "deletions": 68}, "files": [{"sha": "75bc940625d82d58b8701606c7557af5443b820c", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 16, "deletions": 68, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/ccbcc720a679ae76155a8ef4779a080a954a5957/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccbcc720a679ae76155a8ef4779a080a954a5957/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=ccbcc720a679ae76155a8ef4779a080a954a5957", "patch": "@@ -1122,14 +1122,6 @@ pub fn build_target_config(opts: &Options, sp: &Handler) -> Config {\n pub enum OptionStability {\n     Stable,\n \n-    // FIXME: historically there were some options which were either `-Z` or\n-    //        required the `-Z unstable-options` flag, which were all intended\n-    //        to be unstable. Unfortunately we didn't actually gate usage of\n-    //        these options on the stable compiler, so we still allow them there\n-    //        today. There are some warnings printed out about this in the\n-    //        driver.\n-    UnstableButNotReally,\n-\n     Unstable,\n }\n \n@@ -1148,17 +1140,9 @@ impl RustcOptGroup {\n         RustcOptGroup { opt_group: g, stability: OptionStability::Stable }\n     }\n \n-    #[allow(dead_code)] // currently we have no \"truly unstable\" options\n     pub fn unstable(g: getopts::OptGroup) -> RustcOptGroup {\n         RustcOptGroup { opt_group: g, stability: OptionStability::Unstable }\n     }\n-\n-    fn unstable_bnr(g: getopts::OptGroup) -> RustcOptGroup {\n-        RustcOptGroup {\n-            opt_group: g,\n-            stability: OptionStability::UnstableButNotReally,\n-        }\n-    }\n }\n \n // The `opt` local module holds wrappers around the `getopts` API that\n@@ -1180,7 +1164,6 @@ mod opt {\n \n     fn stable(g: getopts::OptGroup) -> R { RustcOptGroup::stable(g) }\n     fn unstable(g: getopts::OptGroup) -> R { RustcOptGroup::unstable(g) }\n-    fn unstable_bnr(g: getopts::OptGroup) -> R { RustcOptGroup::unstable_bnr(g) }\n \n     pub fn opt_s(a: S, b: S, c: S, d: S) -> R {\n         stable(getopts::optopt(a, b, c, d))\n@@ -1213,24 +1196,6 @@ mod opt {\n     pub fn flagmulti(a: S, b: S, c: S) -> R {\n         unstable(getopts::optflagmulti(a, b, c))\n     }\n-\n-    // Do not use these functions for any new options added to the compiler, all\n-    // new options should use the `*_u` variants above to be truly unstable.\n-    pub fn opt_ubnr(a: S, b: S, c: S, d: S) -> R {\n-        unstable_bnr(getopts::optopt(a, b, c, d))\n-    }\n-    pub fn multi_ubnr(a: S, b: S, c: S, d: S) -> R {\n-        unstable_bnr(getopts::optmulti(a, b, c, d))\n-    }\n-    pub fn flag_ubnr(a: S, b: S, c: S) -> R {\n-        unstable_bnr(getopts::optflag(a, b, c))\n-    }\n-    pub fn flagopt_ubnr(a: S, b: S, c: S, d: S) -> R {\n-        unstable_bnr(getopts::optflagopt(a, b, c, d))\n-    }\n-    pub fn flagmulti_ubnr(a: S, b: S, c: S) -> R {\n-        unstable_bnr(getopts::optflagmulti(a, b, c))\n-    }\n }\n \n /// Returns the \"short\" subset of the rustc command line options,\n@@ -1296,7 +1261,7 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n         opt::multi_s(\"\", \"extern\", \"Specify where an external rust library is located\",\n                      \"NAME=PATH\"),\n         opt::opt_s(\"\", \"sysroot\", \"Override the system root\", \"PATH\"),\n-        opt::multi_ubnr(\"Z\", \"\", \"Set internal debugging options\", \"FLAG\"),\n+        opt::multi(\"Z\", \"\", \"Set internal debugging options\", \"FLAG\"),\n         opt::opt_s(\"\", \"error-format\",\n                       \"How errors and other messages are produced\",\n                       \"human|json\"),\n@@ -1305,28 +1270,20 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n                                  always = always colorize output;\n                                  never  = never colorize output\", \"auto|always|never\"),\n \n-        opt::flagopt_ubnr(\"\", \"pretty\",\n-                          \"Pretty-print the input instead of compiling;\n-                           valid types are: `normal` (un-annotated source),\n-                           `expanded` (crates expanded), or\n-                           `expanded,identified` (fully parenthesized, AST nodes with IDs).\",\n-                          \"TYPE\"),\n-        opt::flagopt_ubnr(\"\", \"unpretty\",\n-                          \"Present the input source, unstable (and less-pretty) variants;\n-                           valid types are any of the types for `--pretty`, as well as:\n-                           `flowgraph=<nodeid>` (graphviz formatted flowgraph for node),\n-                           `everybody_loops` (all function bodies replaced with `loop {}`),\n-                           `hir` (the HIR), `hir,identified`, or\n-                           `hir,typed` (HIR with types for each node).\",\n-                          \"TYPE\"),\n-\n-        // new options here should **not** use the `_ubnr` functions, all new\n-        // unstable options should use the short variants to indicate that they\n-        // are truly unstable. All `_ubnr` flags are just that way because they\n-        // were so historically.\n-        //\n-        // You may also wish to keep this comment at the bottom of this list to\n-        // ensure that others see it.\n+        opt::flagopt(\"\", \"pretty\",\n+                     \"Pretty-print the input instead of compiling;\n+                      valid types are: `normal` (un-annotated source),\n+                      `expanded` (crates expanded), or\n+                      `expanded,identified` (fully parenthesized, AST nodes with IDs).\",\n+                     \"TYPE\"),\n+        opt::flagopt(\"\", \"unpretty\",\n+                     \"Present the input source, unstable (and less-pretty) variants;\n+                      valid types are any of the types for `--pretty`, as well as:\n+                      `flowgraph=<nodeid>` (graphviz formatted flowgraph for node),\n+                      `everybody_loops` (all function bodies replaced with `loop {}`),\n+                      `hir` (the HIR), `hir,identified`, or\n+                      `hir,typed` (HIR with types for each node).\",\n+                     \"TYPE\"),\n     ]);\n     opts\n }\n@@ -1704,7 +1661,7 @@ pub mod nightly_options {\n     use getopts;\n     use syntax::feature_gate::UnstableFeatures;\n     use super::{ErrorOutputType, OptionStability, RustcOptGroup};\n-    use session::{early_error, early_warn};\n+    use session::early_error;\n \n     pub fn is_unstable_enabled(matches: &getopts::Matches) -> bool {\n         is_nightly_build() && matches.opt_strs(\"Z\").iter().any(|x| *x == \"unstable-options\")\n@@ -1746,15 +1703,6 @@ pub mod nightly_options {\n                                        nightly compiler\", opt_name);\n                     early_error(ErrorOutputType::default(), &msg);\n                 }\n-                OptionStability::UnstableButNotReally => {\n-                    let msg = format!(\"the option `{}` is unstable and should \\\n-                                       only be used on the nightly compiler, but \\\n-                                       it is currently accepted for backwards \\\n-                                       compatibility; this will soon change, \\\n-                                       see issue #31847 for more details\",\n-                                      opt_name);\n-                    early_warn(ErrorOutputType::default(), &msg);\n-                }\n                 OptionStability::Stable => {}\n             }\n         }"}]}