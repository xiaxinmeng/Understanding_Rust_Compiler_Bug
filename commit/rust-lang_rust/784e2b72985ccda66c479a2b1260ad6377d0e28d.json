{"sha": "784e2b72985ccda66c479a2b1260ad6377d0e28d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4NGUyYjcyOTg1Y2NkYTY2YzQ3OWEyYjEyNjBhZDYzNzdkMGUyOGQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-17T22:46:30Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-18T00:00:39Z"}, "message": "rustdoc: Extract common item fields into itemdoc", "tree": {"sha": "372edbdfe111cd70a6a7153fbc1378247abad3db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/372edbdfe111cd70a6a7153fbc1378247abad3db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/784e2b72985ccda66c479a2b1260ad6377d0e28d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/784e2b72985ccda66c479a2b1260ad6377d0e28d", "html_url": "https://github.com/rust-lang/rust/commit/784e2b72985ccda66c479a2b1260ad6377d0e28d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/784e2b72985ccda66c479a2b1260ad6377d0e28d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d26fc348ef1f39583dfdf2ee5b2fc37fdc67eef5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d26fc348ef1f39583dfdf2ee5b2fc37fdc67eef5", "html_url": "https://github.com/rust-lang/rust/commit/d26fc348ef1f39583dfdf2ee5b2fc37fdc67eef5"}], "stats": {"total": 719, "additions": 423, "deletions": 296}, "files": [{"sha": "f93db2e397af36d70d84d7b0b593a80e9373f8c6", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 70, "deletions": 43, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/784e2b72985ccda66c479a2b1260ad6377d0e28d/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/784e2b72985ccda66c479a2b1260ad6377d0e28d/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=784e2b72985ccda66c479a2b1260ad6377d0e28d", "patch": "@@ -49,7 +49,10 @@ fn fold_crate(\n \n     {\n         topmod: {\n-            name: option::from_maybe(doc.topmod.name, attrs.name)\n+            item: {\n+                name: option::from_maybe(doc.topmod.name(), attrs.name)\n+                with doc.topmod.item\n+            }\n             with doc.topmod\n         }\n     }\n@@ -58,7 +61,7 @@ fn fold_crate(\n #[test]\n fn should_replace_top_module_name_with_crate_name() {\n     let doc = test::mk_doc(\"#[link(name = \\\"bond\\\")];\");\n-    assert doc.topmod.name == \"bond\";\n+    assert doc.topmod.name() == \"bond\";\n }\n \n fn parse_item_attrs<T>(\n@@ -78,13 +81,13 @@ fn parse_item_attrs<T>(\n \n fn fold_mod(fold: fold::fold<astsrv::srv>, doc: doc::moddoc) -> doc::moddoc {\n     let srv = fold.ctxt;\n-    let attrs = if doc.id == ast::crate_node_id {\n+    let attrs = if doc.id() == ast::crate_node_id {\n         // This is the top-level mod, use the crate attributes\n         astsrv::exec(srv) {|ctxt|\n             attr_parser::parse_mod(ctxt.ast.node.attrs)\n         }\n     } else {\n-        parse_item_attrs(srv, doc.id, attr_parser::parse_mod)\n+        parse_item_attrs(srv, doc.id(), attr_parser::parse_mod)\n     };\n     let doc = fold::default_seq_fold_mod(fold, doc);\n     ret merge_mod_attrs(doc, attrs);\n@@ -94,8 +97,11 @@ fn fold_mod(fold: fold::fold<astsrv::srv>, doc: doc::moddoc) -> doc::moddoc {\n         attrs: attr_parser::mod_attrs\n     ) -> doc::moddoc {\n         {\n-            brief: attrs.brief,\n-            desc: attrs.desc\n+            item: {\n+                brief: attrs.brief,\n+                desc: attrs.desc\n+                with doc.item\n+            }\n             with doc\n         }\n     }\n@@ -104,13 +110,13 @@ fn fold_mod(fold: fold::fold<astsrv::srv>, doc: doc::moddoc) -> doc::moddoc {\n #[test]\n fn fold_mod_should_extract_mod_attributes() {\n     let doc = test::mk_doc(\"#[doc = \\\"test\\\"] mod a { }\");\n-    assert doc.topmod.mods()[0].desc == some(\"test\");\n+    assert doc.topmod.mods()[0].desc() == some(\"test\");\n }\n \n #[test]\n fn fold_mod_should_extract_top_mod_attributes() {\n     let doc = test::mk_doc(\"#[doc = \\\"test\\\"];\");\n-    assert doc.topmod.desc == some(\"test\");\n+    assert doc.topmod.desc() == some(\"test\");\n }\n \n fn fold_fn(\n@@ -120,16 +126,19 @@ fn fold_fn(\n \n     let srv = fold.ctxt;\n \n-    let attrs = parse_item_attrs(srv, doc.id, attr_parser::parse_fn);\n+    let attrs = parse_item_attrs(srv, doc.id(), attr_parser::parse_fn);\n     ret merge_fn_attrs(doc, attrs);\n \n     fn merge_fn_attrs(\n         doc: doc::fndoc,\n         attrs: attr_parser::fn_attrs\n     ) -> doc::fndoc {\n         ret {\n-            brief: attrs.brief,\n-            desc: attrs.desc,\n+            item: {\n+                brief: attrs.brief,\n+                desc: attrs.desc\n+                with doc.item\n+            },\n             args: merge_arg_attrs(doc.args, attrs.args),\n             return: merge_ret_attrs(doc.return, attrs.return),\n             failure: attrs.failure\n@@ -172,7 +181,7 @@ fn merge_ret_attrs(\n #[test]\n fn fold_fn_should_extract_fn_attributes() {\n     let doc = test::mk_doc(\"#[doc = \\\"test\\\"] fn a() -> int { }\");\n-    assert doc.topmod.fns()[0].desc == some(\"test\");\n+    assert doc.topmod.fns()[0].desc() == some(\"test\");\n }\n \n #[test]\n@@ -214,11 +223,14 @@ fn fold_const(\n     doc: doc::constdoc\n ) -> doc::constdoc {\n     let srv = fold.ctxt;\n-    let attrs = parse_item_attrs(srv, doc.id, attr_parser::parse_const);\n+    let attrs = parse_item_attrs(srv, doc.id(), attr_parser::parse_const);\n \n     {\n-        brief: attrs.brief,\n-        desc: attrs.desc\n+        item: {\n+            brief: attrs.brief,\n+            desc: attrs.desc\n+            with doc.item\n+        }\n         with doc\n     }\n }\n@@ -227,23 +239,26 @@ fn fold_const(\n fn fold_const_should_extract_docs() {\n     let doc = test::mk_doc(\"#[doc(brief = \\\"foo\\\", desc = \\\"bar\\\")]\\\n                             const a: bool = true;\");\n-    assert doc.topmod.consts()[0].brief == some(\"foo\");\n-    assert doc.topmod.consts()[0].desc == some(\"bar\");\n+    assert doc.topmod.consts()[0].brief() == some(\"foo\");\n+    assert doc.topmod.consts()[0].desc() == some(\"bar\");\n }\n \n fn fold_enum(\n     fold: fold::fold<astsrv::srv>,\n     doc: doc::enumdoc\n ) -> doc::enumdoc {\n     let srv = fold.ctxt;\n-    let attrs = parse_item_attrs(srv, doc.id, attr_parser::parse_enum);\n+    let attrs = parse_item_attrs(srv, doc.id(), attr_parser::parse_enum);\n \n     {\n-        brief: attrs.brief,\n-        desc: attrs.desc,\n+        item: {\n+            brief: attrs.brief,\n+            desc: attrs.desc\n+            with doc.item\n+        },\n         variants: vec::map(doc.variants) {|variant|\n             let attrs = astsrv::exec(srv) {|ctxt|\n-                alt check ctxt.ast_map.get(doc.id) {\n+                alt check ctxt.ast_map.get(doc.id()) {\n                   ast_map::node_item(@{\n                     node: ast::item_enum(ast_variants, _), _\n                   }, _) {\n@@ -270,8 +285,8 @@ fn fold_enum(\n fn fold_enum_should_extract_docs() {\n     let doc = test::mk_doc(\"#[doc(brief = \\\"a\\\", desc = \\\"b\\\")]\\\n                             enum a { v }\");\n-    assert doc.topmod.enums()[0].brief == some(\"a\");\n-    assert doc.topmod.enums()[0].desc == some(\"b\");\n+    assert doc.topmod.enums()[0].brief() == some(\"a\");\n+    assert doc.topmod.enums()[0].desc() == some(\"b\");\n }\n \n #[test]\n@@ -286,11 +301,14 @@ fn fold_res(\n ) -> doc::resdoc {\n \n     let srv = fold.ctxt;\n-    let attrs = parse_item_attrs(srv, doc.id, attr_parser::parse_fn);\n+    let attrs = parse_item_attrs(srv, doc.id(), attr_parser::parse_fn);\n \n     {\n-        brief: attrs.brief,\n-        desc: attrs.desc,\n+        item: {\n+            brief: attrs.brief,\n+            desc: attrs.desc\n+            with doc.item\n+        },\n         args: vec::map(doc.args) {|doc|\n             alt vec::find(attrs.args) {|attr|\n                 attr.name == doc.name\n@@ -312,8 +330,8 @@ fn fold_res(\n fn fold_res_should_extract_docs() {\n     let doc = test::mk_doc(\"#[doc(brief = \\\"a\\\", desc = \\\"b\\\")]\\\n                             resource r(b: bool) { }\");\n-    assert doc.topmod.resources()[0].brief == some(\"a\");\n-    assert doc.topmod.resources()[0].desc == some(\"b\");\n+    assert doc.topmod.resources()[0].brief() == some(\"a\");\n+    assert doc.topmod.resources()[0].desc() == some(\"b\");\n }\n \n #[test]\n@@ -330,12 +348,15 @@ fn fold_iface(\n ) -> doc::ifacedoc {\n     let srv = fold.ctxt;\n     let doc = fold::default_seq_fold_iface(fold, doc);\n-    let attrs = parse_item_attrs(srv, doc.id, attr_parser::parse_iface);\n+    let attrs = parse_item_attrs(srv, doc.id(), attr_parser::parse_iface);\n \n     {\n-        brief: attrs.brief,\n-        desc: attrs.desc,\n-        methods: merge_method_attrs(srv, doc.id, doc.methods)\n+        item: {\n+            brief: attrs.brief,\n+            desc: attrs.desc\n+            with doc.item\n+        },\n+        methods: merge_method_attrs(srv, doc.id(), doc.methods)\n         with doc\n     }\n }\n@@ -384,7 +405,7 @@ fn merge_method_attrs(\n #[test]\n fn should_extract_iface_docs() {\n     let doc = test::mk_doc(\"#[doc = \\\"whatever\\\"] iface i { fn a(); }\");\n-    assert doc.topmod.ifaces()[0].desc == some(\"whatever\");\n+    assert doc.topmod.ifaces()[0].desc() == some(\"whatever\");\n }\n \n #[test]\n@@ -413,12 +434,15 @@ fn fold_impl(\n ) -> doc::impldoc {\n     let srv = fold.ctxt;\n     let doc = fold::default_seq_fold_impl(fold, doc);\n-    let attrs = parse_item_attrs(srv, doc.id, attr_parser::parse_impl);\n+    let attrs = parse_item_attrs(srv, doc.id(), attr_parser::parse_impl);\n \n     {\n-        brief: attrs.brief,\n-        desc: attrs.desc,\n-        methods: merge_method_attrs(srv, doc.id, doc.methods)\n+        item: {\n+            brief: attrs.brief,\n+            desc: attrs.desc\n+            with doc.item\n+        },\n+        methods: merge_method_attrs(srv, doc.id(), doc.methods)\n         with doc\n     }\n }\n@@ -427,7 +451,7 @@ fn fold_impl(\n fn should_extract_impl_docs() {\n     let doc = test::mk_doc(\n         \"#[doc = \\\"whatever\\\"] impl i for int { fn a() { } }\");\n-    assert doc.topmod.impls()[0].desc == some(\"whatever\");\n+    assert doc.topmod.impls()[0].desc() == some(\"whatever\");\n }\n \n #[test]\n@@ -455,11 +479,14 @@ fn fold_type(\n ) -> doc::tydoc {\n     let srv = fold.ctxt;\n     let doc = fold::default_seq_fold_type(fold, doc);\n-    let attrs = parse_item_attrs(srv, doc.id, attr_parser::parse_type);\n+    let attrs = parse_item_attrs(srv, doc.id(), attr_parser::parse_type);\n \n     {\n-        brief: attrs.brief,\n-        desc: attrs.desc\n+        item: {\n+            brief: attrs.brief,\n+            desc: attrs.desc\n+            with doc.item\n+        }\n         with doc\n     }\n }\n@@ -469,8 +496,8 @@ fn should_extract_type_docs() {\n     let doc = test::mk_doc(\n         \"#[doc(brief = \\\"brief\\\", desc = \\\"desc\\\")]\\\n          type t = int;\");\n-    assert doc.topmod.types()[0].brief == some(\"brief\");\n-    assert doc.topmod.types()[0].desc == some(\"desc\");\n+    assert doc.topmod.types()[0].brief() == some(\"brief\");\n+    assert doc.topmod.types()[0].desc() == some(\"desc\");\n }\n \n #[cfg(test)]"}, {"sha": "c8ae4476e949031a15e3762aee4a15c4946d52ca", "filename": "src/rustdoc/desc_pass.rs", "status": "modified", "additions": 50, "deletions": 26, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/784e2b72985ccda66c479a2b1260ad6377d0e28d/src%2Frustdoc%2Fdesc_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/784e2b72985ccda66c479a2b1260ad6377d0e28d/src%2Frustdoc%2Fdesc_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_pass.rs?ref=784e2b72985ccda66c479a2b1260ad6377d0e28d", "patch": "@@ -37,8 +37,11 @@ fn fold_mod(fold: fold::fold<op>, doc: doc::moddoc) -> doc::moddoc {\n     let doc = fold::default_seq_fold_mod(fold, doc);\n \n     {\n-        brief: maybe_apply_op(fold.ctxt, doc.brief),\n-        desc: maybe_apply_op(fold.ctxt, doc.desc)\n+        item: {\n+            brief: maybe_apply_op(fold.ctxt, doc.brief()),\n+            desc: maybe_apply_op(fold.ctxt, doc.desc())\n+            with doc.item\n+        }\n         with doc\n     }\n }\n@@ -47,8 +50,11 @@ fn fold_const(fold: fold::fold<op>, doc: doc::constdoc) -> doc::constdoc {\n     let doc = fold::default_seq_fold_const(fold, doc);\n \n     {\n-        brief: maybe_apply_op(fold.ctxt, doc.brief),\n-        desc: maybe_apply_op(fold.ctxt, doc.desc)\n+        item: {\n+            brief: maybe_apply_op(fold.ctxt, doc.brief()),\n+            desc: maybe_apply_op(fold.ctxt, doc.desc())\n+            with doc.item\n+        }\n         with doc\n     }\n }\n@@ -57,8 +63,11 @@ fn fold_fn(fold: fold::fold<op>, doc: doc::fndoc) -> doc::fndoc {\n     let doc = fold::default_seq_fold_fn(fold, doc);\n \n     {\n-        brief: maybe_apply_op(fold.ctxt, doc.brief),\n-        desc: maybe_apply_op(fold.ctxt, doc.desc),\n+        item: {\n+            brief: maybe_apply_op(fold.ctxt, doc.brief()),\n+            desc: maybe_apply_op(fold.ctxt, doc.desc())\n+            with doc.item\n+        },\n         args: vec::map(doc.args) {|doc|\n             {\n                 desc: maybe_apply_op(fold.ctxt, doc.desc)\n@@ -76,8 +85,11 @@ fn fold_fn(fold: fold::fold<op>, doc: doc::fndoc) -> doc::fndoc {\n \n fn fold_enum(fold: fold::fold<op>, doc: doc::enumdoc) -> doc::enumdoc {\n     {\n-        brief: maybe_apply_op(fold.ctxt, doc.brief),\n-        desc: maybe_apply_op(fold.ctxt, doc.desc),\n+        item: {\n+            brief: maybe_apply_op(fold.ctxt, doc.brief()),\n+            desc: maybe_apply_op(fold.ctxt, doc.desc())\n+            with doc.item\n+        },\n         variants: vec::map(doc.variants) {|variant|\n             {\n                 desc: maybe_apply_op(fold.ctxt, variant.desc)\n@@ -90,8 +102,11 @@ fn fold_enum(fold: fold::fold<op>, doc: doc::enumdoc) -> doc::enumdoc {\n \n fn fold_res(fold: fold::fold<op>, doc: doc::resdoc) -> doc::resdoc {\n     {\n-        brief: maybe_apply_op(fold.ctxt, doc.brief),\n-        desc: maybe_apply_op(fold.ctxt, doc.desc),\n+        item: {\n+            brief: maybe_apply_op(fold.ctxt, doc.brief()),\n+            desc: maybe_apply_op(fold.ctxt, doc.desc())\n+            with doc.item\n+        },\n         args: vec::map(doc.args) {|arg|\n             {\n                 desc: maybe_apply_op(fold.ctxt, arg.desc)\n@@ -104,8 +119,11 @@ fn fold_res(fold: fold::fold<op>, doc: doc::resdoc) -> doc::resdoc {\n \n fn fold_iface(fold: fold::fold<op>, doc: doc::ifacedoc) -> doc::ifacedoc {\n     {\n-        brief: maybe_apply_op(fold.ctxt, doc.brief),\n-        desc: maybe_apply_op(fold.ctxt, doc.desc),\n+        item: {\n+            brief: maybe_apply_op(fold.ctxt, doc.brief()),\n+            desc: maybe_apply_op(fold.ctxt, doc.desc())\n+            with doc.item\n+        },\n         methods: apply_to_methods(fold.ctxt, doc.methods)\n         with doc\n     }\n@@ -134,31 +152,37 @@ fn apply_to_methods(op: op, docs: [doc::methoddoc]) -> [doc::methoddoc] {\n \n fn fold_impl(fold: fold::fold<op>, doc: doc::impldoc) -> doc::impldoc {\n     {\n-        brief: maybe_apply_op(fold.ctxt, doc.brief),\n-        desc: maybe_apply_op(fold.ctxt, doc.desc),\n+        item: {\n+            brief: maybe_apply_op(fold.ctxt, doc.brief()),\n+            desc: maybe_apply_op(fold.ctxt, doc.desc())\n+            with doc.item\n+        },\n         methods: apply_to_methods(fold.ctxt, doc.methods)\n         with doc\n     }\n }\n \n fn fold_type(fold: fold::fold<op>, doc: doc::tydoc) -> doc::tydoc {\n     {\n-        brief: maybe_apply_op(fold.ctxt, doc.brief),\n-        desc: maybe_apply_op(fold.ctxt, doc.desc)\n+        item: {\n+            brief: maybe_apply_op(fold.ctxt, doc.brief()),\n+            desc: maybe_apply_op(fold.ctxt, doc.desc())\n+            with doc.item\n+        }\n         with doc\n     }\n }\n \n #[test]\n fn should_execute_op_on_enum_brief() {\n     let doc = test::mk_doc(\"#[doc(brief = \\\" a \\\")] enum a { b }\");\n-    assert doc.topmod.enums()[0].brief == some(\"a\");\n+    assert doc.topmod.enums()[0].brief() == some(\"a\");\n }\n \n #[test]\n fn should_execute_op_on_enum_desc() {\n     let doc = test::mk_doc(\"#[doc(desc = \\\" a \\\")] enum a { b }\");\n-    assert doc.topmod.enums()[0].desc == some(\"a\");\n+    assert doc.topmod.enums()[0].desc() == some(\"a\");\n }\n \n #[test]\n@@ -170,13 +194,13 @@ fn should_execute_op_on_variant_desc() {\n #[test]\n fn should_execute_op_on_resource_brief() {\n     let doc = test::mk_doc(\"#[doc(brief = \\\" a \\\")] resource r(a: bool) { }\");\n-    assert doc.topmod.resources()[0].brief == some(\"a\");\n+    assert doc.topmod.resources()[0].brief() == some(\"a\");\n }\n \n #[test]\n fn should_execute_op_on_resource_desc() {\n     let doc = test::mk_doc(\"#[doc(desc = \\\" a \\\")] resource r(a: bool) { }\");\n-    assert doc.topmod.resources()[0].desc == some(\"a\");\n+    assert doc.topmod.resources()[0].desc() == some(\"a\");\n }\n \n #[test]\n@@ -190,14 +214,14 @@ fn should_execute_op_on_resource_args() {\n fn should_execute_op_on_iface_brief() {\n     let doc = test::mk_doc(\n         \"#[doc(brief = \\\" a \\\")] iface i { fn a(); }\");\n-    assert doc.topmod.ifaces()[0].brief == some(\"a\");\n+    assert doc.topmod.ifaces()[0].brief() == some(\"a\");\n }\n \n #[test]\n fn should_execute_op_on_iface_desc() {\n     let doc = test::mk_doc(\n         \"#[doc(desc = \\\" a \\\")] iface i { fn a(); }\");\n-    assert doc.topmod.ifaces()[0].desc == some(\"a\");\n+    assert doc.topmod.ifaces()[0].desc() == some(\"a\");\n }\n \n #[test]\n@@ -238,14 +262,14 @@ fn should_execute_op_on_iface_method_failure_condition() {\n fn should_execute_op_on_impl_brief() {\n     let doc = test::mk_doc(\n         \"#[doc(brief = \\\" a \\\")] impl i for int { fn a() { } }\");\n-    assert doc.topmod.impls()[0].brief == some(\"a\");\n+    assert doc.topmod.impls()[0].brief() == some(\"a\");\n }\n \n #[test]\n fn should_execute_op_on_impl_desc() {\n     let doc = test::mk_doc(\n         \"#[doc(desc = \\\" a \\\")] impl i for int { fn a() { } }\");\n-    assert doc.topmod.impls()[0].desc == some(\"a\");\n+    assert doc.topmod.impls()[0].desc() == some(\"a\");\n }\n \n #[test]\n@@ -288,14 +312,14 @@ fn should_execute_op_on_impl_method_failure_condition() {\n fn should_execute_op_on_type_brief() {\n     let doc = test::mk_doc(\n         \"#[doc(brief = \\\" a \\\")] type t = int;\");\n-    assert doc.topmod.types()[0].brief == some(\"a\");\n+    assert doc.topmod.types()[0].brief() == some(\"a\");\n }\n \n #[test]\n fn should_execute_op_on_type_desc() {\n     let doc = test::mk_doc(\n         \"#[doc(desc = \\\" a \\\")] type t = int;\");\n-    assert doc.topmod.types()[0].desc == some(\"a\");\n+    assert doc.topmod.types()[0].desc() == some(\"a\");\n }\n \n #[cfg(test)]"}, {"sha": "3a8dd7b51f60a4e007c315cb646580229dc49d03", "filename": "src/rustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 64, "deletions": 40, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/784e2b72985ccda66c479a2b1260ad6377d0e28d/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/784e2b72985ccda66c479a2b1260ad6377d0e28d/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_to_brief_pass.rs?ref=784e2b72985ccda66c479a2b1260ad6377d0e28d", "patch": "@@ -33,66 +33,84 @@ fn run(\n \n fn fold_mod(fold: fold::fold<()>, doc: doc::moddoc) -> doc::moddoc {\n     let doc = fold::default_seq_fold_mod(fold, doc);\n-    let (brief, desc) = modify(doc.brief, doc.desc);\n+    let (brief, desc) = modify(doc.brief(), doc.desc());\n \n     {\n-        brief: brief,\n-        desc: desc\n+        item: {\n+            brief: brief,\n+            desc: desc\n+            with doc.item\n+        }    \n         with doc\n     }\n }\n \n fn fold_const(fold: fold::fold<()>, doc: doc::constdoc) -> doc::constdoc {\n     let doc = fold::default_seq_fold_const(fold, doc);\n-    let (brief, desc) = modify(doc.brief, doc.desc);\n+    let (brief, desc) = modify(doc.brief(), doc.desc());\n \n     {\n-        brief: brief,\n-        desc: desc\n+        item: {\n+            brief: brief,\n+            desc: desc\n+            with doc.item\n+        }\n         with doc\n     }\n }\n \n fn fold_fn(fold: fold::fold<()>, doc: doc::fndoc) -> doc::fndoc {\n     let doc = fold::default_seq_fold_fn(fold, doc);\n-    let (brief, desc) = modify(doc.brief, doc.desc);\n+    let (brief, desc) = modify(doc.brief(), doc.desc());\n \n     {\n-        brief: brief,\n-        desc: desc\n+        item: {\n+            brief: brief,\n+            desc: desc\n+            with doc.item\n+        }\n         with doc\n     }\n }\n \n fn fold_enum(fold: fold::fold<()>, doc: doc::enumdoc) -> doc::enumdoc {\n     let doc = fold::default_seq_fold_enum(fold, doc);\n-    let (brief, desc) = modify(doc.brief, doc.desc);\n+    let (brief, desc) = modify(doc.brief(), doc.desc());\n \n     {\n-        brief: brief,\n-        desc: desc\n+        item: {\n+            brief: brief,\n+            desc: desc\n+            with doc.item\n+        }\n         with doc\n     }\n }\n \n fn fold_res(fold: fold::fold<()>, doc: doc::resdoc) -> doc::resdoc {\n     let doc = fold::default_seq_fold_res(fold, doc);\n-    let (brief, desc) = modify(doc.brief, doc.desc);\n+    let (brief, desc) = modify(doc.brief(), doc.desc());\n \n     {\n-        brief: brief,\n-        desc: desc\n+        item: {\n+            brief: brief,\n+            desc: desc\n+            with doc.item\n+        }\n         with doc\n     }\n }\n \n fn fold_iface(fold: fold::fold<()>, doc: doc::ifacedoc) -> doc::ifacedoc {\n     let doc =fold::default_seq_fold_iface(fold, doc);\n-    let (brief, desc) = modify(doc.brief, doc.desc);\n+    let (brief, desc) = modify(doc.brief(), doc.desc());\n \n     {\n-        brief: brief,\n-        desc: desc,\n+        item: {\n+            brief: brief,\n+            desc: desc\n+            with doc.item\n+        },\n         methods: vec::map(doc.methods) {|doc|\n             let (brief, desc) = modify(doc.brief, doc.desc);\n \n@@ -108,11 +126,14 @@ fn fold_iface(fold: fold::fold<()>, doc: doc::ifacedoc) -> doc::ifacedoc {\n \n fn fold_impl(fold: fold::fold<()>, doc: doc::impldoc) -> doc::impldoc {\n     let doc =fold::default_seq_fold_impl(fold, doc);\n-    let (brief, desc) = modify(doc.brief, doc.desc);\n+    let (brief, desc) = modify(doc.brief(), doc.desc());\n \n     {\n-        brief: brief,\n-        desc: desc,\n+        item: {\n+            brief: brief,\n+            desc: desc\n+            with doc.item\n+        },\n         methods: vec::map(doc.methods) {|doc|\n             let (brief, desc) = modify(doc.brief, doc.desc);\n \n@@ -128,56 +149,59 @@ fn fold_impl(fold: fold::fold<()>, doc: doc::impldoc) -> doc::impldoc {\n \n fn fold_type(fold: fold::fold<()>, doc: doc::tydoc) -> doc::tydoc {\n     let doc = fold::default_seq_fold_type(fold, doc);\n-    let (brief, desc) = modify(doc.brief, doc.desc);\n+    let (brief, desc) = modify(doc.brief(), doc.desc());\n \n     {\n-        brief: brief,\n-        desc: desc\n+        item: {\n+            brief: brief,\n+            desc: desc\n+            with doc.item\n+        }\n         with doc\n     }\n }\n \n #[test]\n fn should_promote_mod_desc() {\n     let doc = test::mk_doc(\"#[doc(desc = \\\"desc\\\")] mod m { }\");\n-    assert doc.topmod.mods()[0].brief == some(\"desc\");\n-    assert doc.topmod.mods()[0].desc == none;\n+    assert doc.topmod.mods()[0].brief() == some(\"desc\");\n+    assert doc.topmod.mods()[0].desc() == none;\n }\n \n #[test]\n fn should_promote_const_desc() {\n     let doc = test::mk_doc(\"#[doc(desc = \\\"desc\\\")] const a: bool = true;\");\n-    assert doc.topmod.consts()[0].brief == some(\"desc\");\n-    assert doc.topmod.consts()[0].desc == none;\n+    assert doc.topmod.consts()[0].brief() == some(\"desc\");\n+    assert doc.topmod.consts()[0].desc() == none;\n }\n \n #[test]\n fn should_promote_fn_desc() {\n     let doc = test::mk_doc(\"#[doc(desc = \\\"desc\\\")] fn a() { }\");\n-    assert doc.topmod.fns()[0].brief == some(\"desc\");\n-    assert doc.topmod.fns()[0].desc == none;\n+    assert doc.topmod.fns()[0].brief() == some(\"desc\");\n+    assert doc.topmod.fns()[0].desc() == none;\n }\n \n #[test]\n fn should_promote_enum_desc() {\n     let doc = test::mk_doc(\"#[doc(desc = \\\"desc\\\")] enum a { b }\");\n-    assert doc.topmod.enums()[0].brief == some(\"desc\");\n-    assert doc.topmod.enums()[0].desc == none;\n+    assert doc.topmod.enums()[0].brief() == some(\"desc\");\n+    assert doc.topmod.enums()[0].desc() == none;\n }\n \n #[test]\n fn should_promote_resource_desc() {\n     let doc = test::mk_doc(\n         \"#[doc(desc = \\\"desc\\\")] resource r(a: bool) { }\");\n-    assert doc.topmod.resources()[0].brief == some(\"desc\");\n-    assert doc.topmod.resources()[0].desc == none;\n+    assert doc.topmod.resources()[0].brief() == some(\"desc\");\n+    assert doc.topmod.resources()[0].desc() == none;\n }\n \n #[test]\n fn should_promote_iface_desc() {\n     let doc = test::mk_doc(\"#[doc(desc = \\\"desc\\\")] iface i { fn a(); }\");\n-    assert doc.topmod.ifaces()[0].brief == some(\"desc\");\n-    assert doc.topmod.ifaces()[0].desc == none;\n+    assert doc.topmod.ifaces()[0].brief() == some(\"desc\");\n+    assert doc.topmod.ifaces()[0].desc() == none;\n }\n \n #[test]\n@@ -191,8 +215,8 @@ fn should_promote_iface_method_desc() {\n fn should_promote_impl_desc() {\n     let doc = test::mk_doc(\n         \"#[doc(desc = \\\"desc\\\")] impl i for int { fn a() { } }\");\n-    assert doc.topmod.impls()[0].brief == some(\"desc\");\n-    assert doc.topmod.impls()[0].desc == none;\n+    assert doc.topmod.impls()[0].brief() == some(\"desc\");\n+    assert doc.topmod.impls()[0].desc() == none;\n }\n \n #[test]\n@@ -206,8 +230,8 @@ fn should_promote_impl_method_desc() {\n #[test]\n fn should_promote_type_desc() {\n     let doc = test::mk_doc(\"#[doc(desc = \\\"desc\\\")] type t = int;\");\n-    assert doc.topmod.types()[0].brief == some(\"desc\");\n-    assert doc.topmod.types()[0].desc == none;\n+    assert doc.topmod.types()[0].brief() == some(\"desc\");\n+    assert doc.topmod.types()[0].desc() == none;\n }\n \n #[cfg(test)]"}, {"sha": "e8095c54c6e0bb92b21adb36d1e6047fa592fc5c", "filename": "src/rustdoc/doc.rs", "status": "modified", "additions": 80, "deletions": 47, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/784e2b72985ccda66c479a2b1260ad6377d0e28d/src%2Frustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/784e2b72985ccda66c479a2b1260ad6377d0e28d/src%2Frustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdoc.rs?ref=784e2b72985ccda66c479a2b1260ad6377d0e28d", "patch": "@@ -17,31 +17,27 @@ enum itemtag {\n     tytag(tydoc)\n }\n \n-type moddoc = {\n+type itemdoc = {\n     id: ast_id,\n     name: str,\n     path: [str],\n     brief: option<str>,\n     desc: option<str>,\n+};\n+\n+type moddoc = {\n+    item: itemdoc,\n     // This box exists to break the structural recursion\n     items: ~[itemtag]\n };\n \n type constdoc = {\n-    id: ast_id,\n-    name: str,\n-    path: [str],\n-    brief: option<str>,\n-    desc: option<str>,\n+    item: itemdoc,\n     ty: option<str>\n };\n \n type fndoc = {\n-    id: ast_id,\n-    name: str,\n-    path: [str],\n-    brief: option<str>,\n-    desc: option<str>,\n+    item: itemdoc,\n     args: [argdoc],\n     return: retdoc,\n     failure: option<str>,\n@@ -60,11 +56,7 @@ type retdoc = {\n };\n \n type enumdoc = {\n-    id: ast_id,\n-    name: str,\n-    path: [str],\n-    brief: option<str>,\n-    desc: option<str>,\n+    item: itemdoc,\n     variants: [variantdoc]\n };\n \n@@ -75,21 +67,13 @@ type variantdoc = {\n };\n \n type resdoc = {\n-    id: ast_id,\n-    name: str,\n-    path: [str],\n-    brief: option<str>,\n-    desc: option<str>,\n+    item: itemdoc,\n     args: [argdoc],\n     sig: option<str>\n };\n \n type ifacedoc = {\n-    id: ast_id,\n-    name: str,\n-    path: [str],\n-    brief: option<str>,\n-    desc: option<str>,\n+    item: itemdoc,\n     methods: [methoddoc]\n };\n \n@@ -104,22 +88,14 @@ type methoddoc = {\n };\n \n type impldoc = {\n-    id: ast_id,\n-    name: str,\n-    path: [str],\n-    brief: option<str>,\n-    desc: option<str>,\n+    item: itemdoc,\n     iface_ty: option<str>,\n     self_ty: option<str>,\n     methods: [methoddoc]\n };\n \n type tydoc = {\n-    id: ast_id,\n-    name: str,\n-    path: [str],\n-    brief: option<str>,\n-    desc: option<str>,\n+    item: itemdoc,\n     sig: option<str>\n };\n \n@@ -199,18 +175,75 @@ impl util for moddoc {\n     }\n }\n \n-#[doc = \"Helper methods on itemtag\"]\n-impl util for itemtag {\n-    fn name() -> str {\n+iface item {\n+    fn item() -> itemdoc;\n+}\n+\n+impl of item for itemtag {\n+    fn item() -> itemdoc {\n         alt self {\n-          doc::modtag({name, _}) { name }\n-          doc::fntag({name, _}) { name }\n-          doc::consttag({name, _}) { name }\n-          doc::enumtag({name, _}) { name }\n-          doc::restag({name, _}) { name }\n-          doc::ifacetag({name, _}) { name }\n-          doc::impltag({name, _}) { name }\n-          doc::tytag({name, _}) { name }\n+          doc::modtag(doc) { doc.item }\n+          doc::fntag(doc) { doc.item }\n+          doc::consttag(doc) { doc.item }\n+          doc::enumtag(doc) { doc.item }\n+          doc::restag(doc) { doc.item }\n+          doc::ifacetag(doc) { doc.item }\n+          doc::impltag(doc) { doc.item }\n+          doc::tytag(doc) { doc.item }\n         }\n     }\n }\n+\n+impl of item for moddoc {\n+    fn item() -> itemdoc { self.item }\n+}\n+\n+impl of item for fndoc {\n+    fn item() -> itemdoc { self.item }\n+}\n+\n+impl of item for constdoc {\n+    fn item() -> itemdoc { self.item }\n+}\n+\n+impl of item for enumdoc {\n+    fn item() -> itemdoc { self.item }\n+}\n+\n+impl of item for resdoc {\n+    fn item() -> itemdoc { self.item }\n+}\n+\n+impl of item for ifacedoc {\n+    fn item() -> itemdoc { self.item }\n+}\n+\n+impl of item for impldoc {\n+    fn item() -> itemdoc { self.item }\n+}\n+\n+impl of item for tydoc {\n+    fn item() -> itemdoc { self.item }\n+}\n+\n+impl util<A:item> for A {\n+    fn id() -> ast_id {\n+        self.item().id\n+    }\n+\n+    fn name() -> str {\n+        self.item().name\n+    }\n+\n+    fn path() -> [str] {\n+        self.item().path\n+    }\n+\n+    fn brief() -> option<str> {\n+        self.item().brief\n+    }\n+\n+    fn desc() -> option<str> {\n+        self.item().desc\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "06aa61abb6042cefcdf1256dcca2c06f48dd1c70", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 76, "deletions": 60, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/784e2b72985ccda66c479a2b1260ad6377d0e28d/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/784e2b72985ccda66c479a2b1260ad6377d0e28d/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=784e2b72985ccda66c479a2b1260ad6377d0e28d", "patch": "@@ -38,11 +38,13 @@ fn moddoc_from_mod(\n     id: ast::node_id\n ) -> doc::moddoc {\n     {\n-        id: id,\n-        name: name,\n-        path: [],\n-        brief: none,\n-        desc: none,\n+        item: {\n+            id: id,\n+            name: name,\n+            path: [],\n+            brief: none,\n+            desc: none,\n+        },\n         items: ~vec::filter_map(module.items) {|item|\n             alt item.node {\n               ast::item_mod(m) {\n@@ -99,11 +101,13 @@ fn fndoc_from_fn(\n     id: ast::node_id\n ) -> doc::fndoc {\n     {\n-        id: id,\n-        name: name,\n-        path: [],\n-        brief: none,\n-        desc: none,\n+        item: {\n+            id: id,\n+            name: name,\n+            path: [],\n+            brief: none,\n+            desc: none,\n+        },\n         args: argdocs_from_args(decl.inputs),\n         return: {\n             desc: none,\n@@ -141,20 +145,22 @@ fn constdoc_from_const(\n     id: ast::node_id\n ) -> doc::constdoc {\n     {\n-        id: id,\n-        name: name,\n-        path: [],\n-        brief: none,\n-        desc: none,\n+        item: {\n+            id: id,\n+            name: name,\n+            path: [],\n+            brief: none,\n+            desc: none,\n+        },\n         ty: none\n     }\n }\n \n #[test]\n fn should_extract_const_name_and_id() {\n     let doc = test::mk_doc(\"const a: int = 0;\");\n-    assert doc.topmod.consts()[0].id != 0;\n-    assert doc.topmod.consts()[0].name == \"a\";\n+    assert doc.topmod.consts()[0].id() != 0;\n+    assert doc.topmod.consts()[0].name() == \"a\";\n }\n \n fn enumdoc_from_enum(\n@@ -163,11 +169,13 @@ fn enumdoc_from_enum(\n     variants: [ast::variant]\n ) -> doc::enumdoc {\n     {\n-        id: id,\n-        name: name,\n-        path: [],\n-        brief: none,\n-        desc: none,\n+        item: {\n+            id: id,\n+            name: name,\n+            path: [],\n+            brief: none,\n+            desc: none,\n+        },\n         variants: variantdocs_from_variants(variants)\n     }\n }\n@@ -189,8 +197,8 @@ fn variantdoc_from_variant(variant: ast::variant) -> doc::variantdoc {\n #[test]\n fn should_extract_enums() {\n     let doc = test::mk_doc(\"enum e { v }\");\n-    assert doc.topmod.enums()[0].id != 0;\n-    assert doc.topmod.enums()[0].name == \"e\";\n+    assert doc.topmod.enums()[0].id() != 0;\n+    assert doc.topmod.enums()[0].name() == \"e\";\n }\n \n #[test]\n@@ -205,11 +213,13 @@ fn resdoc_from_resource(\n     id: ast::node_id\n ) -> doc::resdoc {\n     {\n-        id: id,\n-        name: name,\n-        path: [],\n-        brief: none,\n-        desc: none,\n+        item: {\n+            id: id,\n+            name: name,\n+            path: [],\n+            brief: none,\n+            desc: none,\n+        },\n         args: argdocs_from_args(decl.inputs),\n         sig: none\n     }\n@@ -218,8 +228,8 @@ fn resdoc_from_resource(\n #[test]\n fn should_extract_resources() {\n     let doc = test::mk_doc(\"resource r(b: bool) { }\");\n-    assert doc.topmod.resources()[0].id != 0;\n-    assert doc.topmod.resources()[0].name == \"r\";\n+    assert doc.topmod.resources()[0].id() != 0;\n+    assert doc.topmod.resources()[0].name() == \"r\";\n }\n \n #[test]\n@@ -234,11 +244,13 @@ fn ifacedoc_from_iface(\n     id: ast::node_id\n ) -> doc::ifacedoc {\n     {\n-        id: id,\n-        name: name,\n-        path: [],\n-        brief: none,\n-        desc: none,\n+        item: {\n+            id: id,\n+            name: name,\n+            path: [],\n+            brief: none,\n+            desc: none,\n+        },\n         methods: vec::map(methods) {|method|\n             {\n                 name: method.ident,\n@@ -259,7 +271,7 @@ fn ifacedoc_from_iface(\n #[test]\n fn should_extract_ifaces() {\n     let doc = test::mk_doc(\"iface i { fn f(); }\");\n-    assert doc.topmod.ifaces()[0].name == \"i\";\n+    assert doc.topmod.ifaces()[0].name() == \"i\";\n }\n \n #[test]\n@@ -280,11 +292,13 @@ fn impldoc_from_impl(\n     id: ast::node_id\n ) -> doc::impldoc {\n     {\n-        id: id,\n-        name: name,\n-        path: [],\n-        brief: none,\n-        desc: none,\n+        item: {\n+            id: id,\n+            name: name,\n+            path: [],\n+            brief: none,\n+            desc: none,\n+        },\n         iface_ty: none,\n         self_ty: none,\n         methods: vec::map(methods) {|method|\n@@ -307,13 +321,13 @@ fn impldoc_from_impl(\n #[test]\n fn should_extract_impls_with_names() {\n     let doc = test::mk_doc(\"impl i for int { fn a() { } }\");\n-    assert doc.topmod.impls()[0].name == \"i\";\n+    assert doc.topmod.impls()[0].name() == \"i\";\n }\n \n #[test]\n fn should_extract_impls_without_names() {\n     let doc = test::mk_doc(\"impl of i for int { fn a() { } }\");\n-    assert doc.topmod.impls()[0].name == \"i\";\n+    assert doc.topmod.impls()[0].name() == \"i\";\n }\n \n #[test]\n@@ -333,19 +347,21 @@ fn tydoc_from_ty(\n     id: ast::node_id\n ) -> doc::tydoc {\n     {\n-        id: id,\n-        name: name,\n-        path: [],\n-        brief: none,\n-        desc: none,\n+        item: {\n+            id: id,\n+            name: name,\n+            path: [],\n+            brief: none,\n+            desc: none,\n+        },\n         sig: none\n     }\n }\n \n #[test]\n fn should_extract_tys() {\n     let doc = test::mk_doc(\"type a = int;\");\n-    assert doc.topmod.types()[0].name == \"a\";\n+    assert doc.topmod.types()[0].name() == \"a\";\n }\n \n #[cfg(test)]\n@@ -366,51 +382,51 @@ mod test {\n     #[test]\n     fn extract_mods() {\n         let doc = mk_doc(\"mod a { mod b { } mod c { } }\");\n-        assert doc.topmod.mods()[0].name == \"a\";\n-        assert doc.topmod.mods()[0].mods()[0].name == \"b\";\n-        assert doc.topmod.mods()[0].mods()[1].name == \"c\";\n+        assert doc.topmod.mods()[0].name() == \"a\";\n+        assert doc.topmod.mods()[0].mods()[0].name() == \"b\";\n+        assert doc.topmod.mods()[0].mods()[1].name() == \"c\";\n     }\n \n     #[test]\n     fn extract_mods_deep() {\n         let doc = mk_doc(\"mod a { mod b { mod c { } } }\");\n-        assert doc.topmod.mods()[0].mods()[0].mods()[0].name == \"c\";\n+        assert doc.topmod.mods()[0].mods()[0].mods()[0].name() == \"c\";\n     }\n \n     #[test]\n     fn extract_should_set_mod_ast_id() {\n         let doc = mk_doc(\"mod a { }\");\n-        assert doc.topmod.mods()[0].id != 0;\n+        assert doc.topmod.mods()[0].id() != 0;\n     }\n \n     #[test]\n     fn extract_fns() {\n         let doc = mk_doc(\n             \"fn a() { } \\\n              mod b { fn c() { } }\");\n-        assert doc.topmod.fns()[0].name == \"a\";\n-        assert doc.topmod.mods()[0].fns()[0].name == \"c\";\n+        assert doc.topmod.fns()[0].name() == \"a\";\n+        assert doc.topmod.mods()[0].fns()[0].name() == \"c\";\n     }\n \n     #[test]\n     fn extract_should_set_fn_ast_id() {\n         let doc = mk_doc(\"fn a() { }\");\n-        assert doc.topmod.fns()[0].id != 0;\n+        assert doc.topmod.fns()[0].id() != 0;\n     }\n \n     #[test]\n     fn extract_should_use_default_crate_name() {\n         let source = \"\";\n         let ast = parse::from_str(source);\n         let doc = extract(ast, \"burp\");\n-        assert doc.topmod.name == \"burp\";\n+        assert doc.topmod.name() == \"burp\";\n     }\n \n     #[test]\n     fn extract_from_seq_srv() {\n         let source = \"\";\n         let srv = astsrv::mk_srv_from_str(source);\n         let doc = from_srv(srv, \"name\");\n-        assert doc.topmod.name == \"name\";\n+        assert doc.topmod.name() == \"name\";\n     }\n }\n\\ No newline at end of file"}, {"sha": "e59382b9d805f6e9eab08590395594b7ac4fdebe", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/784e2b72985ccda66c479a2b1260ad6377d0e28d/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/784e2b72985ccda66c479a2b1260ad6377d0e28d/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=784e2b72985ccda66c479a2b1260ad6377d0e28d", "patch": "@@ -97,7 +97,7 @@ fn write_crate(\n     ctxt: ctxt,\n     doc: doc::cratedoc\n ) {\n-    write_header(ctxt, h1, #fmt(\"Crate %s\", doc.topmod.name));\n+    write_header(ctxt, h1, #fmt(\"Crate %s\", doc.topmod.name()));\n     write_top_module(ctxt, doc.topmod);\n }\n \n@@ -112,7 +112,7 @@ fn write_mod(\n     ctxt: ctxt,\n     moddoc: doc::moddoc\n ) {\n-    let fullpath = str::connect(moddoc.path + [moddoc.name], \"::\");\n+    let fullpath = str::connect(moddoc.path() + [moddoc.name()], \"::\");\n     write_header(ctxt, h1, #fmt(\"Module `%s`\", fullpath));\n     write_mod_contents(ctxt, moddoc);\n }\n@@ -127,8 +127,8 @@ fn write_mod_contents(\n     ctxt: ctxt,\n     doc: doc::moddoc\n ) {\n-    write_brief(ctxt, doc.brief);\n-    write_desc(ctxt, doc.desc);\n+    write_brief(ctxt, doc.brief());\n+    write_desc(ctxt, doc.desc());\n \n     for itemtag in *doc.items {\n         alt itemtag {\n@@ -160,12 +160,12 @@ fn write_fn(\n     ctxt: ctxt,\n     doc: doc::fndoc\n ) {\n-    write_header(ctxt, h2, #fmt(\"Function `%s`\", doc.name));\n+    write_header(ctxt, h2, #fmt(\"Function `%s`\", doc.name()));\n     write_fnlike(\n         ctxt,\n         doc.sig,\n-        doc.brief,\n-        doc.desc,\n+        doc.brief(),\n+        doc.desc(),\n         doc.args,\n         doc.return,\n         doc.failure\n@@ -424,10 +424,10 @@ fn write_const(\n     ctxt: ctxt,\n     doc: doc::constdoc\n ) {\n-    write_header(ctxt, h2, #fmt(\"Const `%s`\", doc.name));\n+    write_header(ctxt, h2, #fmt(\"Const `%s`\", doc.name()));\n     write_sig(ctxt, doc.ty);\n-    write_brief(ctxt, doc.brief);\n-    write_desc(ctxt, doc.desc);\n+    write_brief(ctxt, doc.brief());\n+    write_desc(ctxt, doc.desc());\n }\n \n #[test]\n@@ -448,9 +448,9 @@ fn write_enum(\n     ctxt: ctxt,\n     doc: doc::enumdoc\n ) {\n-    write_header(ctxt, h2, #fmt(\"Enum `%s`\", doc.name));\n-    write_brief(ctxt, doc.brief);\n-    write_desc(ctxt, doc.desc);\n+    write_header(ctxt, h2, #fmt(\"Enum `%s`\", doc.name()));\n+    write_brief(ctxt, doc.brief());\n+    write_desc(ctxt, doc.desc());\n     write_variants(ctxt, doc.variants);\n }\n \n@@ -530,10 +530,10 @@ fn should_write_variant_list_with_signatures() {\n }\n \n fn write_res(ctxt: ctxt, doc: doc::resdoc) {\n-    write_header(ctxt, h2, #fmt(\"Resource `%s`\", doc.name));\n+    write_header(ctxt, h2, #fmt(\"Resource `%s`\", doc.name()));\n     write_sig(ctxt, doc.sig);\n-    write_brief(ctxt, doc.brief);\n-    write_desc(ctxt, doc.desc);\n+    write_brief(ctxt, doc.brief());\n+    write_desc(ctxt, doc.desc());\n     write_args(ctxt, doc.args);\n }\n \n@@ -557,9 +557,9 @@ fn should_write_resource_args() {\n }\n \n fn write_iface(ctxt: ctxt, doc: doc::ifacedoc) {\n-    write_header(ctxt, h2, #fmt(\"Interface `%s`\", doc.name));\n-    write_brief(ctxt, doc.brief);\n-    write_desc(ctxt, doc.desc);\n+    write_header(ctxt, h2, #fmt(\"Interface `%s`\", doc.name()));\n+    write_brief(ctxt, doc.brief());\n+    write_desc(ctxt, doc.desc());\n     write_methods(ctxt, doc.methods);\n }\n \n@@ -656,16 +656,16 @@ fn write_impl(ctxt: ctxt, doc: doc::impldoc) {\n       some(iface_ty) {\n         write_header(ctxt, h2,\n                      #fmt(\"Implementation `%s` of `%s` for `%s`\",\n-                          doc.name, iface_ty, self_ty));\n+                          doc.name(), iface_ty, self_ty));\n       }\n       none {\n         write_header(ctxt, h2,\n                      #fmt(\"Implementation `%s` for `%s`\",\n-                          doc.name, self_ty));\n+                          doc.name(), self_ty));\n       }\n     }\n-    write_brief(ctxt, doc.brief);\n-    write_desc(ctxt, doc.desc);\n+    write_brief(ctxt, doc.brief());\n+    write_desc(ctxt, doc.desc());\n     write_methods(ctxt, doc.methods);\n }\n \n@@ -748,10 +748,10 @@ fn write_type(\n     ctxt: ctxt,\n     doc: doc::tydoc\n ) {\n-    write_header(ctxt, h2, #fmt(\"Type `%s`\", doc.name));\n+    write_header(ctxt, h2, #fmt(\"Type `%s`\", doc.name()));\n     write_sig(ctxt, doc.sig);\n-    write_brief(ctxt, doc.brief);\n-    write_desc(ctxt, doc.desc);\n+    write_brief(ctxt, doc.brief());\n+    write_desc(ctxt, doc.desc());\n }\n \n #[test]"}, {"sha": "2bfa5cfa5b5bda33bf01b3ffb460eb97f6b705ea", "filename": "src/rustdoc/path_pass.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/784e2b72985ccda66c479a2b1260ad6377d0e28d/src%2Frustdoc%2Fpath_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/784e2b72985ccda66c479a2b1260ad6377d0e28d/src%2Frustdoc%2Fpath_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fpath_pass.rs?ref=784e2b72985ccda66c479a2b1260ad6377d0e28d", "patch": "@@ -27,13 +27,16 @@ fn run(srv: astsrv::srv, doc: doc::cratedoc) -> doc::cratedoc {\n }\n \n fn fold_mod(fold: fold::fold<ctxt>, doc: doc::moddoc) -> doc::moddoc {\n-    let is_topmod = doc.id == rustc::syntax::ast::crate_node_id;\n+    let is_topmod = doc.id() == rustc::syntax::ast::crate_node_id;\n \n-    if !is_topmod { vec::push(fold.ctxt.path, doc.name); }\n+    if !is_topmod { vec::push(fold.ctxt.path, doc.name()); }\n     let doc = fold::default_seq_fold_mod(fold, doc);\n     if !is_topmod { vec::pop(fold.ctxt.path); }\n     {\n-        path: fold.ctxt.path\n+        item: {\n+            path: fold.ctxt.path\n+            with doc.item\n+        }\n         with doc\n     }\n }\n@@ -44,6 +47,6 @@ fn should_record_mod_paths() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    assert doc.topmod.mods()[0].mods()[0].mods()[0].path == [\"a\", \"b\"];\n-    assert doc.topmod.mods()[0].mods()[1].mods()[0].path == [\"a\", \"d\"];\n+    assert doc.topmod.mods()[0].mods()[0].mods()[0].path() == [\"a\", \"b\"];\n+    assert doc.topmod.mods()[0].mods()[1].mods()[0].path() == [\"a\", \"d\"];\n }\n\\ No newline at end of file"}, {"sha": "f7985044b12b26628b6fe20680f6355359a08ab4", "filename": "src/rustdoc/prune_undoc_items_pass.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/784e2b72985ccda66c479a2b1260ad6377d0e28d/src%2Frustdoc%2Fprune_undoc_items_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/784e2b72985ccda66c479a2b1260ad6377d0e28d/src%2Frustdoc%2Fprune_undoc_items_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_undoc_items_pass.rs?ref=784e2b72985ccda66c479a2b1260ad6377d0e28d", "patch": "@@ -108,8 +108,8 @@ fn fold_mod(\n         with fold::default_seq_fold_mod(fold, doc)\n     };\n     fold.ctxt.have_docs =\n-        doc.brief != none\n-        || doc.desc != none\n+        doc.brief() != none\n+        || doc.desc() != none\n         || vec::is_not_empty(*doc.items);\n     ret doc;\n }\n@@ -121,8 +121,8 @@ fn fold_fn(\n     let doc = fold::default_seq_fold_fn(fold, doc);\n \n     fold.ctxt.have_docs =\n-        doc.brief != none\n-        || doc.desc != none\n+        doc.brief() != none\n+        || doc.desc() != none\n         || args_have_docs(doc.args)\n         || doc.return.desc != none\n         || doc.failure != none;\n@@ -183,8 +183,8 @@ fn fold_const(\n ) -> doc::constdoc {\n     let doc = fold::default_seq_fold_const(fold, doc);\n     fold.ctxt.have_docs =\n-        doc.brief != none\n-        || doc.desc != none;\n+        doc.brief() != none\n+        || doc.desc() != none;\n     ret doc;\n }\n \n@@ -206,8 +206,8 @@ fn fold_enum(fold: fold::fold<ctxt>, doc: doc::enumdoc) -> doc::enumdoc {\n         with fold::default_seq_fold_enum(fold, doc)\n     };\n     fold.ctxt.have_docs =\n-        doc.brief != none\n-        || doc.desc != none\n+        doc.brief() != none\n+        || doc.desc() != none\n         || vec::is_not_empty(doc.variants);\n     ret doc;\n }\n@@ -234,8 +234,8 @@ fn fold_res(fold: fold::fold<ctxt>, doc: doc::resdoc) -> doc::resdoc {\n     let doc = fold::default_seq_fold_res(fold, doc);\n \n     fold.ctxt.have_docs =\n-        doc.brief != none\n-        || doc.desc != none\n+        doc.brief() != none\n+        || doc.desc() != none\n         || args_have_docs(doc.args);\n     ret doc;\n }\n@@ -260,8 +260,8 @@ fn fold_iface(\n     let doc = fold::default_seq_fold_iface(fold, doc);\n \n     fold.ctxt.have_docs =\n-        doc.brief != none\n-        || doc.desc != none\n+        doc.brief() != none\n+        || doc.desc() != none\n         || methods_have_docs(doc.methods);\n     ret doc;\n }\n@@ -314,8 +314,8 @@ fn fold_impl(\n     let doc = fold::default_seq_fold_impl(fold, doc);\n \n     fold.ctxt.have_docs =\n-        doc.brief != none\n-        || doc.desc != none\n+        doc.brief() != none\n+        || doc.desc() != none\n         || methods_have_docs(doc.methods);\n     ret doc;\n }\n@@ -351,8 +351,8 @@ fn fold_type(\n     let doc = fold::default_seq_fold_type(fold, doc);\n \n     fold.ctxt.have_docs =\n-        doc.brief != none\n-        || doc.desc != none;\n+        doc.brief() != none\n+        || doc.desc() != none;\n     ret doc;\n }\n "}, {"sha": "9bac44d3f9fdd04a81e9a5fa193af739962846c2", "filename": "src/rustdoc/prune_unexported_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/784e2b72985ccda66c479a2b1260ad6377d0e28d/src%2Frustdoc%2Fprune_unexported_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/784e2b72985ccda66c479a2b1260ad6377d0e28d/src%2Frustdoc%2Fprune_unexported_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_unexported_pass.rs?ref=784e2b72985ccda66c479a2b1260ad6377d0e28d", "patch": "@@ -40,7 +40,7 @@ fn exported_things<T>(\n     from_crate: fn(astsrv::srv, doc::moddoc) -> [T],\n     from_mod: fn(astsrv::srv, doc::moddoc) -> [T]\n ) -> [T] {\n-    if doc.id == ast::crate_node_id {\n+    if doc.id() == ast::crate_node_id {\n         from_crate(srv, doc)\n     } else {\n         from_mod(srv, doc)\n@@ -58,7 +58,7 @@ fn exported_items_from_mod(\n     srv: astsrv::srv,\n     doc: doc::moddoc\n ) -> [doc::itemtag] {\n-    exported_items_from(srv, doc, bind is_exported_from_mod(_, doc.id, _))\n+    exported_items_from(srv, doc, bind is_exported_from_mod(_, doc.id(), _))\n }\n \n fn exported_items_from("}, {"sha": "9aa9bb24e0434a3a39286cf0d3e5d6eafed33c47", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/784e2b72985ccda66c479a2b1260ad6377d0e28d/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/784e2b72985ccda66c479a2b1260ad6377d0e28d/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=784e2b72985ccda66c479a2b1260ad6377d0e28d", "patch": "@@ -2,6 +2,8 @@\n  * Copyright 2011 Google Inc.\n  */\n \n+// Some utility interfaces\n+import doc::item;\n import doc::util;\n \n #[doc = \"A single operation on the document model\"]\n@@ -46,11 +48,10 @@ fn test_run_passes() {\n     ) -> doc::cratedoc {\n         {\n             topmod: {\n-                id: 0,\n-                name: doc.topmod.name + \"two\",\n-                path: [],\n-                brief: none,\n-                desc: none,\n+                item: {\n+                    name: doc.topmod.name() + \"two\"\n+                    with doc.topmod.item\n+                },\n                 items: ~[]\n             }\n         }\n@@ -61,11 +62,10 @@ fn test_run_passes() {\n     ) -> doc::cratedoc {\n         {\n             topmod: {\n-                id: 0,\n-                name: doc.topmod.name + \"three\",\n-                path: [],\n-                brief: none,\n-                desc: none,\n+                item: {\n+                    name: doc.topmod.name() + \"three\"\n+                    with doc.topmod.item\n+                },\n                 items: ~[]\n             }\n         }\n@@ -75,7 +75,7 @@ fn test_run_passes() {\n     let passes = [pass1, pass2];\n     let doc = extract::from_srv(srv, \"one\");\n     let doc = run_passes(srv, doc, passes);\n-    assert doc.topmod.name == \"onetwothree\";\n+    assert doc.topmod.name() == \"onetwothree\";\n }\n \n fn main(argv: [str]) {"}, {"sha": "11df208729e56874686f76bab0698144dfe12c62", "filename": "src/rustdoc/sort_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/784e2b72985ccda66c479a2b1260ad6377d0e28d/src%2Frustdoc%2Fsort_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/784e2b72985ccda66c479a2b1260ad6377d0e28d/src%2Frustdoc%2Fsort_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fsort_pass.rs?ref=784e2b72985ccda66c479a2b1260ad6377d0e28d", "patch": "@@ -45,10 +45,10 @@ fn test() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = mk_pass(name_lteq)(srv, doc);\n-    assert doc.topmod.mods()[0].name == \"w\";\n+    assert doc.topmod.mods()[0].name() == \"w\";\n     assert doc.topmod.mods()[1].items[0].name() == \"x\";\n     assert doc.topmod.mods()[1].items[1].name() == \"y\";\n-    assert doc.topmod.mods()[1].name == \"z\";\n+    assert doc.topmod.mods()[1].name() == \"z\";\n }\n \n #[test]"}, {"sha": "9c9fe5f83aecb66a6c082bccbd78b31397a5fd3f", "filename": "src/rustdoc/trim_pass.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/784e2b72985ccda66c479a2b1260ad6377d0e28d/src%2Frustdoc%2Ftrim_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/784e2b72985ccda66c479a2b1260ad6377d0e28d/src%2Frustdoc%2Ftrim_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftrim_pass.rs?ref=784e2b72985ccda66c479a2b1260ad6377d0e28d", "patch": "@@ -18,26 +18,26 @@ fn should_trim_mod() {\n     let doc = test::mk_doc(\"#[doc(brief = \\\"\\nbrief\\n\\\", \\\n                             desc = \\\"\\ndesc\\n\\\")] \\\n                             mod m { }\");\n-    assert doc.topmod.mods()[0].brief == some(\"brief\");\n-    assert doc.topmod.mods()[0].desc == some(\"desc\");\n+    assert doc.topmod.mods()[0].brief() == some(\"brief\");\n+    assert doc.topmod.mods()[0].desc() == some(\"desc\");\n }\n \n #[test]\n fn should_trim_const() {\n     let doc = test::mk_doc(\"#[doc(brief = \\\"\\nbrief\\n\\\", \\\n                             desc = \\\"\\ndesc\\n\\\")] \\\n                             const a: bool = true;\");\n-    assert doc.topmod.consts()[0].brief == some(\"brief\");\n-    assert doc.topmod.consts()[0].desc == some(\"desc\");\n+    assert doc.topmod.consts()[0].brief() == some(\"brief\");\n+    assert doc.topmod.consts()[0].desc() == some(\"desc\");\n }\n \n #[test]\n fn should_trim_fn() {\n     let doc = test::mk_doc(\"#[doc(brief = \\\"\\nbrief\\n\\\", \\\n                             desc = \\\"\\ndesc\\n\\\")] \\\n                             fn a() { }\");\n-    assert doc.topmod.fns()[0].brief == some(\"brief\");\n-    assert doc.topmod.fns()[0].desc == some(\"desc\");\n+    assert doc.topmod.fns()[0].brief() == some(\"brief\");\n+    assert doc.topmod.fns()[0].desc() == some(\"desc\");\n }\n \n #[test]"}, {"sha": "662d2ca838090fcba19481cee3538cb69664c0dc", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/784e2b72985ccda66c479a2b1260ad6377d0e28d/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/784e2b72985ccda66c479a2b1260ad6377d0e28d/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=784e2b72985ccda66c479a2b1260ad6377d0e28d", "patch": "@@ -36,9 +36,9 @@ fn fold_fn(\n     let srv = fold.ctxt;\n \n     {\n-        args: merge_arg_tys(srv, doc.id, doc.args),\n-        return: merge_ret_ty(srv, doc.id, doc.return),\n-        sig: get_fn_sig(srv, doc.id)\n+        args: merge_arg_tys(srv, doc.id(), doc.args),\n+        return: merge_ret_ty(srv, doc.id(), doc.return),\n+        sig: get_fn_sig(srv, doc.id())\n         with doc\n     }\n }\n@@ -164,7 +164,7 @@ fn fold_const(\n \n     {\n         ty: some(astsrv::exec(srv) {|ctxt|\n-            alt check ctxt.ast_map.get(doc.id) {\n+            alt check ctxt.ast_map.get(doc.id()) {\n               ast_map::node_item(@{\n                 node: ast::item_const(ty, _), _\n               }, _) {\n@@ -191,7 +191,7 @@ fn fold_enum(\n     {\n         variants: vec::map(doc.variants) {|variant|\n             let sig = astsrv::exec(srv) {|ctxt|\n-                alt check ctxt.ast_map.get(doc.id) {\n+                alt check ctxt.ast_map.get(doc.id()) {\n                   ast_map::node_item(@{\n                     node: ast::item_enum(ast_variants, _), _\n                   }, _) {\n@@ -227,13 +227,13 @@ fn fold_res(\n     let srv = fold.ctxt;\n \n     {\n-        args: merge_arg_tys(srv, doc.id, doc.args),\n+        args: merge_arg_tys(srv, doc.id(), doc.args),\n         sig: some(astsrv::exec(srv) {|ctxt|\n-            alt check ctxt.ast_map.get(doc.id) {\n+            alt check ctxt.ast_map.get(doc.id()) {\n               ast_map::node_item(@{\n                 node: ast::item_res(decl, _, _, _, _), _\n               }, _) {\n-                pprust::res_to_str(decl, doc.name, [])\n+                pprust::res_to_str(decl, doc.name(), [])\n               }\n             }\n         })\n@@ -258,7 +258,7 @@ fn fold_iface(\n     doc: doc::ifacedoc\n ) -> doc::ifacedoc {\n     {\n-        methods: merge_methods(fold.ctxt, doc.id, doc.methods)\n+        methods: merge_methods(fold.ctxt, doc.id(), doc.methods)\n         with doc\n     }\n }\n@@ -456,7 +456,7 @@ fn fold_impl(\n     let srv = fold.ctxt;\n \n     let (iface_ty, self_ty) = astsrv::exec(srv) {|ctxt|\n-        alt ctxt.ast_map.get(doc.id) {\n+        alt ctxt.ast_map.get(doc.id()) {\n           ast_map::node_item(@{\n             node: ast::item_impl(_, iface_ty, self_ty, _), _\n           }, _) {\n@@ -472,7 +472,7 @@ fn fold_impl(\n     {\n         iface_ty: iface_ty,\n         self_ty: self_ty,\n-        methods: merge_methods(fold.ctxt, doc.id, doc.methods)\n+        methods: merge_methods(fold.ctxt, doc.id(), doc.methods)\n         with doc\n     }\n }\n@@ -530,7 +530,7 @@ fn fold_type(\n \n     {\n         sig: astsrv::exec(srv) {|ctxt|\n-            alt ctxt.ast_map.get(doc.id) {\n+            alt ctxt.ast_map.get(doc.id()) {\n               ast_map::node_item(@{\n                 ident: ident,\n                 node: ast::item_ty(ty, params), _"}]}