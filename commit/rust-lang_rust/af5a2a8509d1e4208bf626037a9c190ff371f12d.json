{"sha": "af5a2a8509d1e4208bf626037a9c190ff371f12d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNWEyYTg1MDlkMWU0MjA4YmY2MjYwMzdhOWMxOTBmZjM3MWYxMmQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-28T17:16:43Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-31T14:56:28Z"}, "message": "Let remove_unused_stack_addr_and_stack_load take OptimizeContext", "tree": {"sha": "08b6c75f0687ddc032bcd728372b27e68e8885c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08b6c75f0687ddc032bcd728372b27e68e8885c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af5a2a8509d1e4208bf626037a9c190ff371f12d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af5a2a8509d1e4208bf626037a9c190ff371f12d", "html_url": "https://github.com/rust-lang/rust/commit/af5a2a8509d1e4208bf626037a9c190ff371f12d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af5a2a8509d1e4208bf626037a9c190ff371f12d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f3eab589e5ee7e7b2a9f473f9879d30a410d669", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f3eab589e5ee7e7b2a9f473f9879d30a410d669", "html_url": "https://github.com/rust-lang/rust/commit/0f3eab589e5ee7e7b2a9f473f9879d30a410d669"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "5cc3e8506b438a19d174919c2b1f533d96a3ef82", "filename": "src/optimize/stack2reg.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/af5a2a8509d1e4208bf626037a9c190ff371f12d/src%2Foptimize%2Fstack2reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af5a2a8509d1e4208bf626037a9c190ff371f12d/src%2Foptimize%2Fstack2reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foptimize%2Fstack2reg.rs?ref=af5a2a8509d1e4208bf626037a9c190ff371f12d", "patch": "@@ -92,7 +92,7 @@ pub(super) fn optimize_function(\n \n     // FIXME Repeat following instructions until fixpoint.\n \n-    remove_unused_stack_addr_and_stack_load(&mut opt_ctx.ctx.func, &mut opt_ctx.stack_slot_usage_map);\n+    remove_unused_stack_addr_and_stack_load(&mut opt_ctx);\n \n     println!(\"stack slot usage: {:?}\", opt_ctx.stack_slot_usage_map);\n \n@@ -224,11 +224,11 @@ fn combine_stack_addr_with_load_store(func: &mut Function) {\n     }\n }\n \n-fn remove_unused_stack_addr_and_stack_load(func: &mut Function, stack_slot_usage_map: &mut BTreeMap<OrdStackSlot, StackSlotUsage>) {\n+fn remove_unused_stack_addr_and_stack_load(opt_ctx: &mut OptimizeContext) {\n     // FIXME incrementally rebuild on each call?\n     let mut stack_addr_load_insts_users = HashMap::<Inst, HashSet<Inst>>::new();\n \n-    let mut cursor = FuncCursor::new(func);\n+    let mut cursor = FuncCursor::new(&mut opt_ctx.ctx.func);\n     while let Some(_ebb) = cursor.next_ebb() {\n         while let Some(inst) = cursor.next_inst() {\n             for &arg in cursor.func.dfg.inst_args(inst) {\n@@ -246,27 +246,27 @@ fn remove_unused_stack_addr_and_stack_load(func: &mut Function, stack_slot_usage\n \n     for inst in stack_addr_load_insts_users.keys() {\n         let mut is_recorded_stack_addr_or_stack_load = false;\n-        for stack_slot_users in stack_slot_usage_map.values() {\n+        for stack_slot_users in opt_ctx.stack_slot_usage_map.values() {\n             is_recorded_stack_addr_or_stack_load |= stack_slot_users.stack_addr.contains(inst) || stack_slot_users.stack_load.contains(inst);\n         }\n         assert!(is_recorded_stack_addr_or_stack_load);\n     }\n \n     // Replace all unused stack_addr and stack_load instructions with nop.\n-    for stack_slot_users in stack_slot_usage_map.values_mut() {\n+    for stack_slot_users in opt_ctx.stack_slot_usage_map.values_mut() {\n         // FIXME remove clone\n         for &inst in stack_slot_users.stack_addr.clone().iter() {\n             if stack_addr_load_insts_users.get(&inst).map(|users| users.is_empty()).unwrap_or(true) {\n-                func.dfg.detach_results(inst);\n-                func.dfg.replace(inst).nop();\n+                opt_ctx.ctx.func.dfg.detach_results(inst);\n+                opt_ctx.ctx.func.dfg.replace(inst).nop();\n                 stack_slot_users.stack_addr.remove(&inst);\n             }\n         }\n \n         for &inst in stack_slot_users.stack_load.clone().iter() {\n             if stack_addr_load_insts_users.get(&inst).map(|users| users.is_empty()).unwrap_or(true) {\n-                func.dfg.detach_results(inst);\n-                func.dfg.replace(inst).nop();\n+                opt_ctx.ctx.func.dfg.detach_results(inst);\n+                opt_ctx.ctx.func.dfg.replace(inst).nop();\n                 stack_slot_users.stack_load.remove(&inst);\n             }\n         }"}]}