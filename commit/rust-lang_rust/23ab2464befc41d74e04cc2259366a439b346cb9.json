{"sha": "23ab2464befc41d74e04cc2259366a439b346cb9", "node_id": "C_kwDOAAsO6NoAKDIzYWIyNDY0YmVmYzQxZDc0ZTA0Y2MyMjU5MzY2YTQzOWIzNDZjYjk", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-02-10T13:43:29Z"}, "committer": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2023-02-10T13:44:46Z"}, "message": "add `AliasEq` to `PredicateKind`", "tree": {"sha": "7a73532d5bbfb10aa812ebdf5dcbb0a0b2ae7ba9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a73532d5bbfb10aa812ebdf5dcbb0a0b2ae7ba9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23ab2464befc41d74e04cc2259366a439b346cb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23ab2464befc41d74e04cc2259366a439b346cb9", "html_url": "https://github.com/rust-lang/rust/commit/23ab2464befc41d74e04cc2259366a439b346cb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23ab2464befc41d74e04cc2259366a439b346cb9/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b8dbd558c1c4b25c55d987e22baba312ae980ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b8dbd558c1c4b25c55d987e22baba312ae980ad", "html_url": "https://github.com/rust-lang/rust/commit/9b8dbd558c1c4b25c55d987e22baba312ae980ad"}], "stats": {"total": 85, "additions": 80, "deletions": 5}, "files": [{"sha": "de50b1ab2135df5d013c0035c30b72f89f9523b2", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=23ab2464befc41d74e04cc2259366a439b346cb9", "patch": "@@ -1328,6 +1328,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     ty::Clause::RegionOutlives(_) => bug!(),\n                 },\n                 ty::PredicateKind::WellFormed(_)\n+                | ty::PredicateKind::AliasEq(..)\n                 | ty::PredicateKind::ObjectSafe(_)\n                 | ty::PredicateKind::ClosureKind(_, _, _)\n                 | ty::PredicateKind::Subtype(_)"}, {"sha": "02f77f9d6afba4793721ff0e0832f11be7df9119", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=23ab2464befc41d74e04cc2259366a439b346cb9", "patch": "@@ -517,6 +517,7 @@ fn trait_predicate_kind<'tcx>(\n         ty::PredicateKind::Clause(ty::Clause::RegionOutlives(_))\n         | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(_))\n         | ty::PredicateKind::Clause(ty::Clause::Projection(_))\n+        | ty::PredicateKind::AliasEq(..)\n         | ty::PredicateKind::WellFormed(_)\n         | ty::PredicateKind::Subtype(_)\n         | ty::PredicateKind::Coerce(_)"}, {"sha": "ecd6849426dbf8dcd089f7bf82b673428ee0b80e", "filename": "compiler/rustc_hir_analysis/src/outlives/explicit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs?ref=23ab2464befc41d74e04cc2259366a439b346cb9", "patch": "@@ -55,6 +55,7 @@ impl<'tcx> ExplicitPredicatesMap<'tcx> {\n                     ty::PredicateKind::Clause(ty::Clause::Trait(..))\n                     | ty::PredicateKind::Clause(ty::Clause::Projection(..))\n                     | ty::PredicateKind::WellFormed(..)\n+                    | ty::PredicateKind::AliasEq(..)\n                     | ty::PredicateKind::ObjectSafe(..)\n                     | ty::PredicateKind::ClosureKind(..)\n                     | ty::PredicateKind::Subtype(..)"}, {"sha": "52c2dabee293e55c4dbf27dc49ed20855ee17e42", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=23ab2464befc41d74e04cc2259366a439b346cb9", "patch": "@@ -669,6 +669,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(..))\n                 | ty::PredicateKind::WellFormed(..)\n                 | ty::PredicateKind::ObjectSafe(..)\n+                | ty::PredicateKind::AliasEq(..)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n                 // N.B., this predicate is created by breaking down a"}, {"sha": "16b0d48002efc157d24c2e0a582ac5f958816eeb", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=23ab2464befc41d74e04cc2259366a439b346cb9", "patch": "@@ -837,6 +837,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n                 | ty::PredicateKind::Ambiguous\n+                | ty::PredicateKind::AliasEq(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => None,\n             }\n         });"}, {"sha": "a8e668d81eae30371927ce582686d65ca354ff2b", "filename": "compiler/rustc_infer/src/infer/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs?ref=23ab2464befc41d74e04cc2259366a439b346cb9", "patch": "@@ -21,6 +21,7 @@ pub fn explicit_outlives_bounds<'tcx>(\n         .filter_map(move |kind| match kind {\n             ty::PredicateKind::Clause(ty::Clause::Projection(..))\n             | ty::PredicateKind::Clause(ty::Clause::Trait(..))\n+            | ty::PredicateKind::AliasEq(..)\n             | ty::PredicateKind::Coerce(..)\n             | ty::PredicateKind::Subtype(..)\n             | ty::PredicateKind::WellFormed(..)"}, {"sha": "e617eb68d477587db3dae0666ad02f52f4fa2481", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=23ab2464befc41d74e04cc2259366a439b346cb9", "patch": "@@ -294,6 +294,9 @@ impl<'tcx> Elaborator<'tcx> {\n                 // Nothing to elaborate\n             }\n             ty::PredicateKind::Ambiguous => {}\n+            ty::PredicateKind::AliasEq(..) => {\n+                // No\n+            }\n         }\n     }\n }"}, {"sha": "7a50b6aec87a65b2b40b7507ecb7c10a66817c69", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=23ab2464befc41d74e04cc2259366a439b346cb9", "patch": "@@ -1594,12 +1594,14 @@ impl<'tcx> LateLintPass<'tcx> for TrivialConstraints {\n                     // Ignore projections, as they can only be global\n                     // if the trait bound is global\n                     Clause(Clause::Projection(..)) |\n+                    AliasEq(..) |\n                     // Ignore bounds that a user can't type\n                     WellFormed(..) |\n                     ObjectSafe(..) |\n                     ClosureKind(..) |\n                     Subtype(..) |\n                     Coerce(..) |\n+                    // FIXME(generic_const_exprs): `ConstEvaluatable` can be written\n                     ConstEvaluatable(..) |\n                     ConstEquate(..) |\n                     Ambiguous |"}, {"sha": "258bc9c3e4188cd7da2a81738de77bd2f696e2a7", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=23ab2464befc41d74e04cc2259366a439b346cb9", "patch": "@@ -264,10 +264,7 @@ impl FlagComputation {\n                 term,\n             })) => {\n                 self.add_projection_ty(projection_ty);\n-                match term.unpack() {\n-                    ty::TermKind::Ty(ty) => self.add_ty(ty),\n-                    ty::TermKind::Const(c) => self.add_const(c),\n-                }\n+                self.add_term(term);\n             }\n             ty::PredicateKind::WellFormed(arg) => {\n                 self.add_substs(slice::from_ref(&arg));\n@@ -287,6 +284,10 @@ impl FlagComputation {\n                 self.add_ty(ty);\n             }\n             ty::PredicateKind::Ambiguous => {}\n+            ty::PredicateKind::AliasEq(t1, t2) => {\n+                self.add_term(t1);\n+                self.add_term(t2);\n+            }\n         }\n     }\n \n@@ -380,4 +381,11 @@ impl FlagComputation {\n             }\n         }\n     }\n+\n+    fn add_term(&mut self, term: ty::Term<'_>) {\n+        match term.unpack() {\n+            ty::TermKind::Ty(ty) => self.add_ty(ty),\n+            ty::TermKind::Const(ct) => self.add_const(ct),\n+        }\n+    }\n }"}, {"sha": "22ccbfd0e3a01f9f2872f3746b5206fb17186493", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=23ab2464befc41d74e04cc2259366a439b346cb9", "patch": "@@ -545,6 +545,7 @@ impl<'tcx> Predicate<'tcx> {\n             | PredicateKind::Clause(Clause::RegionOutlives(_))\n             | PredicateKind::Clause(Clause::TypeOutlives(_))\n             | PredicateKind::Clause(Clause::Projection(_))\n+            | PredicateKind::AliasEq(..)\n             | PredicateKind::ObjectSafe(_)\n             | PredicateKind::ClosureKind(_, _, _)\n             | PredicateKind::Subtype(_)\n@@ -632,6 +633,12 @@ pub enum PredicateKind<'tcx> {\n     /// A marker predicate that is always ambiguous.\n     /// Used for coherence to mark opaque types as possibly equal to each other but ambiguous.\n     Ambiguous,\n+\n+    /// Separate from `Clause::Projection` which is used for normalization in new solver.\n+    /// This predicate requires two terms to be equal to eachother.\n+    ///\n+    /// Only used for new solver\n+    AliasEq(Term<'tcx>, Term<'tcx>),\n }\n \n /// The crate outlives map is computed during typeck and contains the\n@@ -1152,6 +1159,7 @@ impl<'tcx> Predicate<'tcx> {\n         match predicate.skip_binder() {\n             PredicateKind::Clause(Clause::Trait(t)) => Some(predicate.rebind(t)),\n             PredicateKind::Clause(Clause::Projection(..))\n+            | PredicateKind::AliasEq(..)\n             | PredicateKind::Subtype(..)\n             | PredicateKind::Coerce(..)\n             | PredicateKind::Clause(Clause::RegionOutlives(..))\n@@ -1171,6 +1179,7 @@ impl<'tcx> Predicate<'tcx> {\n         match predicate.skip_binder() {\n             PredicateKind::Clause(Clause::Projection(t)) => Some(predicate.rebind(t)),\n             PredicateKind::Clause(Clause::Trait(..))\n+            | PredicateKind::AliasEq(..)\n             | PredicateKind::Subtype(..)\n             | PredicateKind::Coerce(..)\n             | PredicateKind::Clause(Clause::RegionOutlives(..))\n@@ -1191,6 +1200,7 @@ impl<'tcx> Predicate<'tcx> {\n             PredicateKind::Clause(Clause::TypeOutlives(data)) => Some(predicate.rebind(data)),\n             PredicateKind::Clause(Clause::Trait(..))\n             | PredicateKind::Clause(Clause::Projection(..))\n+            | PredicateKind::AliasEq(..)\n             | PredicateKind::Subtype(..)\n             | PredicateKind::Coerce(..)\n             | PredicateKind::Clause(Clause::RegionOutlives(..))"}, {"sha": "3850ac2a6bbf3fdfa9580ec722d63b205783fe8f", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=23ab2464befc41d74e04cc2259366a439b346cb9", "patch": "@@ -2841,6 +2841,7 @@ define_print_and_forward_display! {\n                 p!(\"the type `\", print(ty), \"` is found in the environment\")\n             }\n             ty::PredicateKind::Ambiguous => p!(\"ambiguous\"),\n+            ty::PredicateKind::AliasEq(t1, t2) => p!(print(t1), \" == \", print(t2)),\n         }\n     }\n "}, {"sha": "1ef66b01ea0c6107fffe77dc65b0a329ba59a67c", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=23ab2464befc41d74e04cc2259366a439b346cb9", "patch": "@@ -177,6 +177,7 @@ impl<'tcx> fmt::Debug for ty::PredicateKind<'tcx> {\n                 write!(f, \"TypeWellFormedFromEnv({:?})\", ty)\n             }\n             ty::PredicateKind::Ambiguous => write!(f, \"Ambiguous\"),\n+            ty::PredicateKind::AliasEq(t1, t2) => write!(f, \"AliasEq({t1:?}, {t2:?})\"),\n         }\n     }\n }"}, {"sha": "a55b984fd630dc32e1445c7a331694f4e7b355e2", "filename": "compiler/rustc_trait_selection/src/solve/fulfill.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs?ref=23ab2464befc41d74e04cc2259366a439b346cb9", "patch": "@@ -73,6 +73,11 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentCtxt<'tcx> {\n                                         MismatchedProjectionTypes { err: TypeError::Mismatch },\n                                     )\n                                 }\n+                                ty::PredicateKind::AliasEq(_, _) => {\n+                                    FulfillmentErrorCode::CodeProjectionError(\n+                                        MismatchedProjectionTypes { err: TypeError::Mismatch },\n+                                    )\n+                                }\n                                 ty::PredicateKind::Subtype(pred) => {\n                                     let (a, b) = infcx.instantiate_binder_with_placeholders(\n                                         goal.predicate.kind().rebind((pred.a, pred.b)),"}, {"sha": "edfe95b30592ad1ffc1d78b258e6d8126ce0cb78", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=23ab2464befc41d74e04cc2259366a439b346cb9", "patch": "@@ -302,6 +302,10 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n                 ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n                     bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n                 }\n+                ty::PredicateKind::AliasEq(..) => {\n+                    // FIXME(deferred_projection_equality)\n+                    todo!()\n+                }\n             }\n         } else {\n             let kind = self.infcx.instantiate_binder_with_placeholders(kind);"}, {"sha": "6a840704e8637135eea9d29bc4357c0ba25aed81", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=23ab2464befc41d74e04cc2259366a439b346cb9", "patch": "@@ -823,14 +823,17 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                         _ => return false,\n                     }\n                 }\n+\n                 // There's not really much we can do with these predicates -\n                 // we start out with a `ParamEnv` with no inference variables,\n                 // and these don't correspond to adding any new bounds to\n                 // the `ParamEnv`.\n                 ty::PredicateKind::WellFormed(..)\n+                | ty::PredicateKind::AliasEq(..)\n                 | ty::PredicateKind::ObjectSafe(..)\n                 | ty::PredicateKind::ClosureKind(..)\n                 | ty::PredicateKind::Subtype(..)\n+                // FIXME(generic_const_exprs): you can absolutely add this as a where clauses\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::Coerce(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => {}"}, {"sha": "4867855c2ae95fe0feeef37329c197879f7231e9", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=23ab2464befc41d74e04cc2259366a439b346cb9", "patch": "@@ -1278,6 +1278,11 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         span,\n                         \"TypeWellFormedFromEnv predicate should only exist in the environment\"\n                     ),\n+\n+                    ty::PredicateKind::AliasEq(..) => span_bug!(\n+                        span,\n+                        \"AliasEq predicate should never be the predicate cause of a SelectionError\"\n+                    ),\n                 }\n             }\n "}, {"sha": "19d47d33f671f02787f1e15f74897c19d43a0e21", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=23ab2464befc41d74e04cc2259366a439b346cb9", "patch": "@@ -328,6 +328,9 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                 ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n                     bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n                 }\n+                ty::PredicateKind::AliasEq(..) => {\n+                    bug!(\"AliasEq is only used for new solver\")\n+                }\n             },\n             Some(pred) => match pred {\n                 ty::PredicateKind::Clause(ty::Clause::Trait(data)) => {\n@@ -594,6 +597,9 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                 ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n                     bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n                 }\n+                ty::PredicateKind::AliasEq(..) => {\n+                    bug!(\"AliasEq is only used for new solver\")\n+                }\n             },\n         }\n     }"}, {"sha": "977446894e770b477945baa615e263d75e2a2cb5", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=23ab2464befc41d74e04cc2259366a439b346cb9", "patch": "@@ -327,13 +327,16 @@ fn predicate_references_self<'tcx>(\n             // possible alternatives.\n             if data.projection_ty.substs[1..].iter().any(has_self_ty) { Some(sp) } else { None }\n         }\n+        ty::PredicateKind::AliasEq(..) => bug!(\"`AliasEq` not allowed as assumption\"),\n+\n         ty::PredicateKind::WellFormed(..)\n         | ty::PredicateKind::ObjectSafe(..)\n         | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(..))\n         | ty::PredicateKind::Clause(ty::Clause::RegionOutlives(..))\n         | ty::PredicateKind::ClosureKind(..)\n         | ty::PredicateKind::Subtype(..)\n         | ty::PredicateKind::Coerce(..)\n+        // FIXME(generic_const_exprs): this can mention `Self`\n         | ty::PredicateKind::ConstEvaluatable(..)\n         | ty::PredicateKind::ConstEquate(..)\n         | ty::PredicateKind::Ambiguous\n@@ -368,6 +371,7 @@ fn generics_require_sized_self(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n             | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(..))\n             | ty::PredicateKind::ConstEvaluatable(..)\n             | ty::PredicateKind::ConstEquate(..)\n+            | ty::PredicateKind::AliasEq(..)\n             | ty::PredicateKind::Ambiguous\n             | ty::PredicateKind::TypeWellFormedFromEnv(..) => false,\n         }"}, {"sha": "45c4811321a01fb459067f7a6727dda121fc34ee", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=23ab2464befc41d74e04cc2259366a439b346cb9", "patch": "@@ -991,6 +991,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n                     bug!(\"TypeWellFormedFromEnv is only used for chalk\")\n                 }\n+                ty::PredicateKind::AliasEq(..) => {\n+                    bug!(\"AliasEq is only used for new solver\")\n+                }\n                 ty::PredicateKind::Ambiguous => Ok(EvaluatedToAmbig),\n             }\n         })"}, {"sha": "1136b70a0b91e77ae581d33b5182d7bf2eb3c6a3", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=23ab2464befc41d74e04cc2259366a439b346cb9", "patch": "@@ -187,6 +187,9 @@ pub fn predicate_obligations<'tcx>(\n         ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n             bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n         }\n+        ty::PredicateKind::AliasEq(..) => {\n+            bug!(\"We should only wf check where clauses and `AliasEq` is not a `Clause`\")\n+        }\n     }\n \n     wf.normalize(infcx)\n@@ -928,6 +931,7 @@ pub(crate) fn required_region_bounds<'tcx>(\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n                 | ty::PredicateKind::Ambiguous\n+                | ty::PredicateKind::AliasEq(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => None,\n                 ty::PredicateKind::Clause(ty::Clause::TypeOutlives(ty::OutlivesPredicate(\n                     ref t,"}, {"sha": "3c031b1b5f6a8c2be54fc58ddd41994ea5796f9e", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=23ab2464befc41d74e04cc2259366a439b346cb9", "patch": "@@ -116,6 +116,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::InEnvironment<chalk_ir::Goal<RustInterner<'\n                     )),\n                 },\n                 ty::PredicateKind::ObjectSafe(..)\n+                | ty::PredicateKind::AliasEq(..)\n                 | ty::PredicateKind::ClosureKind(..)\n                 | ty::PredicateKind::Subtype(..)\n                 | ty::PredicateKind::Coerce(..)\n@@ -210,6 +211,7 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predi\n             // We can defer this, but ultimately we'll want to express\n             // some of these in terms of chalk operations.\n             ty::PredicateKind::ClosureKind(..)\n+            | ty::PredicateKind::AliasEq(..)\n             | ty::PredicateKind::Coerce(..)\n             | ty::PredicateKind::ConstEvaluatable(..)\n             | ty::PredicateKind::Ambiguous\n@@ -642,6 +644,7 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_ir::QuantifiedWhereClause<RustInterner<'\n             ty::PredicateKind::WellFormed(_ty) => None,\n \n             ty::PredicateKind::ObjectSafe(..)\n+            | ty::PredicateKind::AliasEq(..)\n             | ty::PredicateKind::ClosureKind(..)\n             | ty::PredicateKind::Subtype(..)\n             | ty::PredicateKind::Coerce(..)\n@@ -775,6 +778,7 @@ impl<'tcx> LowerInto<'tcx, Option<chalk_solve::rust_ir::QuantifiedInlineBound<Ru\n             ty::PredicateKind::WellFormed(_ty) => None,\n \n             ty::PredicateKind::Clause(ty::Clause::RegionOutlives(..))\n+            | ty::PredicateKind::AliasEq(..)\n             | ty::PredicateKind::ObjectSafe(..)\n             | ty::PredicateKind::ClosureKind(..)\n             | ty::PredicateKind::Subtype(..)"}, {"sha": "93f9b66e0f855b577bb358245588ba411655b94d", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=23ab2464befc41d74e04cc2259366a439b346cb9", "patch": "@@ -85,7 +85,8 @@ fn compute_implied_outlives_bounds<'tcx>(\n             // learn anything new from those.\n             if obligation.predicate.has_non_region_infer() {\n                 match obligation.predicate.kind().skip_binder() {\n-                    ty::PredicateKind::Clause(ty::Clause::Projection(..)) => {\n+                    ty::PredicateKind::Clause(ty::Clause::Projection(..))\n+                    | ty::PredicateKind::AliasEq(..) => {\n                         ocx.register_obligation(obligation.clone());\n                     }\n                     _ => {}\n@@ -106,6 +107,7 @@ fn compute_implied_outlives_bounds<'tcx>(\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n                 | ty::PredicateKind::Ambiguous\n+                | ty::PredicateKind::AliasEq(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => {}\n \n                 // We need to search through *all* WellFormed predicates"}, {"sha": "07e716cda42cc486b27498c60a92873e1d4970fc", "filename": "compiler/rustc_traits/src/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ab2464befc41d74e04cc2259366a439b346cb9/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fnormalize_erasing_regions.rs?ref=23ab2464befc41d74e04cc2259366a439b346cb9", "patch": "@@ -60,6 +60,7 @@ fn not_outlives_predicate(p: ty::Predicate<'_>) -> bool {\n         | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(..)) => false,\n         ty::PredicateKind::Clause(ty::Clause::Trait(..))\n         | ty::PredicateKind::Clause(ty::Clause::Projection(..))\n+        | ty::PredicateKind::AliasEq(..)\n         | ty::PredicateKind::WellFormed(..)\n         | ty::PredicateKind::ObjectSafe(..)\n         | ty::PredicateKind::ClosureKind(..)"}, {"sha": "4acc9fb3d62576351ff94ffd15e49fe5fde69336", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23ab2464befc41d74e04cc2259366a439b346cb9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ab2464befc41d74e04cc2259366a439b346cb9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=23ab2464befc41d74e04cc2259366a439b346cb9", "patch": "@@ -310,10 +310,12 @@ pub(crate) fn clean_predicate<'tcx>(\n         ty::PredicateKind::Clause(ty::Clause::Projection(pred)) => {\n             Some(clean_projection_predicate(bound_predicate.rebind(pred), cx))\n         }\n+        // FIXME(generic_const_exprs): should this do something?\n         ty::PredicateKind::ConstEvaluatable(..) => None,\n         ty::PredicateKind::WellFormed(..) => None,\n \n         ty::PredicateKind::Subtype(..)\n+        | ty::PredicateKind::AliasEq(..)\n         | ty::PredicateKind::Coerce(..)\n         | ty::PredicateKind::ObjectSafe(..)\n         | ty::PredicateKind::ClosureKind(..)"}, {"sha": "26b1d01974990449c3a5f22ba782e2e9066a7863", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23ab2464befc41d74e04cc2259366a439b346cb9/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ab2464befc41d74e04cc2259366a439b346cb9/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=23ab2464befc41d74e04cc2259366a439b346cb9", "patch": "@@ -36,6 +36,7 @@ pub fn is_min_const_fn<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, msrv: &Msrv)\n                 | ty::PredicateKind::ConstEvaluatable(..)\n                 | ty::PredicateKind::ConstEquate(..)\n                 | ty::PredicateKind::TypeWellFormedFromEnv(..) => continue,\n+                ty::PredicateKind::AliasEq(..) => panic!(\"alias eq predicate on function: {predicate:#?}\"),\n                 ty::PredicateKind::ObjectSafe(_) => panic!(\"object safe predicate on function: {predicate:#?}\"),\n                 ty::PredicateKind::ClosureKind(..) => panic!(\"closure kind predicate on function: {predicate:#?}\"),\n                 ty::PredicateKind::Subtype(_) => panic!(\"subtype predicate on function: {predicate:#?}\"),"}]}