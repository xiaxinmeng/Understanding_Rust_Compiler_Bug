{"sha": "cb7f9679a63075b3fce2fdc69f7b02fe0f482464", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiN2Y5Njc5YTYzMDc1YjNmY2UyZmRjNjlmN2IwMmZlMGY0ODI0NjQ=", "commit": {"author": {"name": "Aleksei Latyshev", "email": "alex_700_95@mail.ru", "date": "2020-04-25T17:52:00Z"}, "committer": {"name": "Aleksei Latyshev", "email": "alex_700_95@mail.ru", "date": "2020-05-16T21:09:37Z"}, "message": "simplify multispan_sugg interface\n\n- add `multispan_sugg_with_applicability`\n- not it gets `&str` instead of `String`, like in `diag.multispan_suggestion`", "tree": {"sha": "e9f6c14383c9644b21c67f61d65051da20999fbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9f6c14383c9644b21c67f61d65051da20999fbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb7f9679a63075b3fce2fdc69f7b02fe0f482464", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEopQOAF0V9HUfAT+fRv3WL5zBFNsFAl7AVpEACgkQRv3WL5zB\nFNvlhQ//ZtaGouZ1toSQCSQD3Nb0sf4ydgszd3asNCVTcQWj9fUo+papdVq/cja/\nrduJTWeEXz22dz01K9231encVTpEp9fT9yc9QnUvQlV87uVeNpT4Ekr2ehVa34YF\n4xS/vpX4k2yhhis2BEuq1+j6ZYq0Pp+4S6Ft9AqoH9vOhbkZudJyN2BsPowHuw7+\nIccvChCe1Z4UdIZegphf5rGv1kSpYdxcEQzB+39j/2s2mIqMArnInYOEGWStb/SV\n4n7daig26A87DT9+oNkeRfWIfjAJSV/6tcRG5PHAYrsMgSOrffiM3qW7RCCQi9qV\nocuaQ/tmVaACHWSU2dYRQzAukxicMish12XFEwFxkSkGeNWqqqfjlYjEioXXeBFv\n2RDp9KseDdF03Mv4Ky2e8XF9brK62I4F45tXBozmgOvVsH0p6zeZGCajTanWVGac\nEQCasL2gjSzCO69a0eeZe5ZOw65Lidm7npuXh4+OvZtq8ez/+q5HlCK2BJPe3SWX\nBNdMnarth3U/E0RuWbLK9pa7Mi4BZxN5f19uB5h0KOqFM3EzihSd3ar92v6+rrCQ\nytwaCJ+TVKdHFSKtJj/d6MaIIucJUbGcqO2l4VvVGgbXn+9/T4JepZ9WUUSjMonu\nmMGgaG7EMdviEv3onYQXJXSI5k2a5gtBH5E0qX23/9QRIeXYCU0=\n=ttfg\n-----END PGP SIGNATURE-----", "payload": "tree e9f6c14383c9644b21c67f61d65051da20999fbf\nparent cfd720d506bee262130f86db814d840fd1ef2495\nauthor Aleksei Latyshev <alex_700_95@mail.ru> 1587837120 +0300\ncommitter Aleksei Latyshev <alex_700_95@mail.ru> 1589663377 +0300\n\nsimplify multispan_sugg interface\n\n- add `multispan_sugg_with_applicability`\n- not it gets `&str` instead of `String`, like in `diag.multispan_suggestion`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb7f9679a63075b3fce2fdc69f7b02fe0f482464", "html_url": "https://github.com/rust-lang/rust/commit/cb7f9679a63075b3fce2fdc69f7b02fe0f482464", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb7f9679a63075b3fce2fdc69f7b02fe0f482464/comments", "author": {"login": "alex-700", "id": 8705888, "node_id": "MDQ6VXNlcjg3MDU4ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/8705888?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex-700", "html_url": "https://github.com/alex-700", "followers_url": "https://api.github.com/users/alex-700/followers", "following_url": "https://api.github.com/users/alex-700/following{/other_user}", "gists_url": "https://api.github.com/users/alex-700/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex-700/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex-700/subscriptions", "organizations_url": "https://api.github.com/users/alex-700/orgs", "repos_url": "https://api.github.com/users/alex-700/repos", "events_url": "https://api.github.com/users/alex-700/events{/privacy}", "received_events_url": "https://api.github.com/users/alex-700/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alex-700", "id": 8705888, "node_id": "MDQ6VXNlcjg3MDU4ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/8705888?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alex-700", "html_url": "https://github.com/alex-700", "followers_url": "https://api.github.com/users/alex-700/followers", "following_url": "https://api.github.com/users/alex-700/following{/other_user}", "gists_url": "https://api.github.com/users/alex-700/gists{/gist_id}", "starred_url": "https://api.github.com/users/alex-700/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alex-700/subscriptions", "organizations_url": "https://api.github.com/users/alex-700/orgs", "repos_url": "https://api.github.com/users/alex-700/repos", "events_url": "https://api.github.com/users/alex-700/events{/privacy}", "received_events_url": "https://api.github.com/users/alex-700/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfd720d506bee262130f86db814d840fd1ef2495", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfd720d506bee262130f86db814d840fd1ef2495", "html_url": "https://github.com/rust-lang/rust/commit/cfd720d506bee262130f86db814d840fd1ef2495"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "4e1c1f131405f39011b78660d6551e24b521718f", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7f9679a63075b3fce2fdc69f7b02fe0f482464/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7f9679a63075b3fce2fdc69f7b02fe0f482464/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=cb7f9679a63075b3fce2fdc69f7b02fe0f482464", "patch": "@@ -115,7 +115,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                                     let rsnip = snippet(cx, r.span, \"...\").to_string();\n                                     multispan_sugg(\n                                         diag,\n-                                        \"use the values directly\".to_string(),\n+                                        \"use the values directly\",\n                                         vec![(left.span, lsnip), (right.span, rsnip)],\n                                     );\n                                 },"}, {"sha": "4a9c411d7c8a381a51868595e5150a05eb27840e", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb7f9679a63075b3fce2fdc69f7b02fe0f482464/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7f9679a63075b3fce2fdc69f7b02fe0f482464/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=cb7f9679a63075b3fce2fdc69f7b02fe0f482464", "patch": "@@ -1134,7 +1134,7 @@ fn check_for_loop_range<'a, 'tcx>(\n                         |diag| {\n                             multispan_sugg(\n                                 diag,\n-                                \"consider using an iterator\".to_string(),\n+                                \"consider using an iterator\",\n                                 vec![\n                                     (pat.span, format!(\"({}, <item>)\", ident.name)),\n                                     (\n@@ -1163,7 +1163,7 @@ fn check_for_loop_range<'a, 'tcx>(\n                         |diag| {\n                             multispan_sugg(\n                                 diag,\n-                                \"consider using an iterator\".to_string(),\n+                                \"consider using an iterator\",\n                                 vec![(pat.span, \"<item>\".to_string()), (arg.span, repl)],\n                             );\n                         },"}, {"sha": "bbf14374a1f7f0c741fd2336e20900be5e386cf1", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7f9679a63075b3fce2fdc69f7b02fe0f482464/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7f9679a63075b3fce2fdc69f7b02fe0f482464/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=cb7f9679a63075b3fce2fdc69f7b02fe0f482464", "patch": "@@ -820,7 +820,7 @@ fn check_match_ref_pats(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>\n \n         span_lint_and_then(cx, MATCH_REF_PATS, expr.span, title, |diag| {\n             if !expr.span.from_expansion() {\n-                multispan_sugg(diag, msg.to_owned(), suggs);\n+                multispan_sugg(diag, msg, suggs);\n             }\n         });\n     }"}, {"sha": "ed48ab548978c67811c7056c949e38007ca41743", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7f9679a63075b3fce2fdc69f7b02fe0f482464/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7f9679a63075b3fce2fdc69f7b02fe0f482464/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=cb7f9679a63075b3fce2fdc69f7b02fe0f482464", "patch": "@@ -293,7 +293,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                             );\n                             spans.sort_by_key(|&(span, _)| span);\n                         }\n-                        multispan_sugg(diag, \"consider taking a reference instead\".to_string(), spans);\n+                        multispan_sugg(diag, \"consider taking a reference instead\", spans);\n                     };\n \n                     span_lint_and_then("}, {"sha": "f50adbc48ab360bfb454289eb77746d1165aa968", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb7f9679a63075b3fce2fdc69f7b02fe0f482464/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7f9679a63075b3fce2fdc69f7b02fe0f482464/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=cb7f9679a63075b3fce2fdc69f7b02fe0f482464", "patch": "@@ -2206,7 +2206,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n \n             multispan_sugg(\n                 diag,\n-                \"consider adding a type parameter\".to_string(),\n+                \"consider adding a type parameter\",\n                 vec![\n                     (\n                         generics_suggestion_span,"}, {"sha": "f6d87c8532e430357b22a54b825c580fe1f0dc31", "filename": "clippy_lints/src/utils/diagnostics.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cb7f9679a63075b3fce2fdc69f7b02fe0f482464/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb7f9679a63075b3fce2fdc69f7b02fe0f482464/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs?ref=cb7f9679a63075b3fce2fdc69f7b02fe0f482464", "patch": "@@ -1,6 +1,6 @@\n //! Clippy wrappers around rustc's diagnostic functions.\n \n-use rustc_errors::{Applicability, CodeSuggestion, DiagnosticBuilder, Substitution, SubstitutionPart, SuggestionStyle};\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir::HirId;\n use rustc_lint::{LateContext, Lint, LintContext};\n use rustc_span::source_map::{MultiSpan, Span};\n@@ -198,20 +198,20 @@ pub fn span_lint_and_sugg<'a, T: LintContext>(\n /// appear once per\n /// replacement. In human-readable format though, it only appears once before\n /// the whole suggestion.\n-pub fn multispan_sugg<I>(diag: &mut DiagnosticBuilder<'_>, help_msg: String, sugg: I)\n+pub fn multispan_sugg<I>(diag: &mut DiagnosticBuilder<'_>, help_msg: &str, sugg: I)\n where\n     I: IntoIterator<Item = (Span, String)>,\n {\n-    let sugg = CodeSuggestion {\n-        substitutions: vec![Substitution {\n-            parts: sugg\n-                .into_iter()\n-                .map(|(span, snippet)| SubstitutionPart { snippet, span })\n-                .collect(),\n-        }],\n-        msg: help_msg,\n-        style: SuggestionStyle::ShowCode,\n-        applicability: Applicability::Unspecified,\n-    };\n-    diag.suggestions.push(sugg);\n+    multispan_sugg_with_applicability(diag, help_msg, Applicability::Unspecified, sugg)\n+}\n+\n+pub fn multispan_sugg_with_applicability<I>(\n+    diag: &mut DiagnosticBuilder<'_>,\n+    help_msg: &str,\n+    applicability: Applicability,\n+    sugg: I,\n+) where\n+    I: IntoIterator<Item = (Span, String)>,\n+{\n+    diag.multipart_suggestion(help_msg, sugg.into_iter().collect(), applicability);\n }"}]}