{"sha": "1077ff2deca4c80f27596905119a84564fe9813f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNzdmZjJkZWNhNGM4MGYyNzU5NjkwNTExOWE4NDU2NGZlOTgxM2Y=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-12-28T23:40:11Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2016-03-14T22:04:36Z"}, "message": "Add basic specialization tests, including for default item\ninheritance. Updates some of the coherence tests as well.", "tree": {"sha": "645464b95a9dd92dc9c4e90e166a4a6c20d4c195", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/645464b95a9dd92dc9c4e90e166a4a6c20d4c195"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1077ff2deca4c80f27596905119a84564fe9813f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1077ff2deca4c80f27596905119a84564fe9813f", "html_url": "https://github.com/rust-lang/rust/commit/1077ff2deca4c80f27596905119a84564fe9813f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1077ff2deca4c80f27596905119a84564fe9813f/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e42a780161e757ddd7d20925691a861f9d86725", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e42a780161e757ddd7d20925691a861f9d86725", "html_url": "https://github.com/rust-lang/rust/commit/7e42a780161e757ddd7d20925691a861f9d86725"}], "stats": {"total": 589, "additions": 570, "deletions": 19}, "files": [{"sha": "ab1051c56501f62ff0df6b1175cb28d3e54f3620", "filename": "src/test/auxiliary/go_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1077ff2deca4c80f27596905119a84564fe9813f/src%2Ftest%2Fauxiliary%2Fgo_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1077ff2deca4c80f27596905119a84564fe9813f/src%2Ftest%2Fauxiliary%2Fgo_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fgo_trait.rs?ref=1077ff2deca4c80f27596905119a84564fe9813f", "patch": "@@ -37,15 +37,15 @@ pub fn go_once<G:GoOnce>(this: G, arg: isize) {\n impl<G> GoMut for G\n     where G : Go\n {\n-    fn go_mut(&mut self, arg: isize) {\n+    default fn go_mut(&mut self, arg: isize) {\n         go(&*self, arg)\n     }\n }\n \n impl<G> GoOnce for G\n     where G : GoMut\n {\n-    fn go_once(mut self, arg: isize) {\n+    default fn go_once(mut self, arg: isize) {\n         go_mut(&mut self, arg)\n     }\n }"}, {"sha": "92c985a3e1ddeb9db08e01302207d8ca7f00a3db", "filename": "src/test/auxiliary/specialization_cross_crate.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/1077ff2deca4c80f27596905119a84564fe9813f/src%2Ftest%2Fauxiliary%2Fspecialization_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1077ff2deca4c80f27596905119a84564fe9813f/src%2Ftest%2Fauxiliary%2Fspecialization_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fspecialization_cross_crate.rs?ref=1077ff2deca4c80f27596905119a84564fe9813f", "patch": "@@ -0,0 +1,80 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait Foo {\n+    fn foo(&self) -> &'static str;\n+}\n+\n+impl<T> Foo for T {\n+    default fn foo(&self) -> &'static str {\n+        \"generic\"\n+    }\n+}\n+\n+impl<T: Clone> Foo for T {\n+    default fn foo(&self) -> &'static str {\n+        \"generic Clone\"\n+    }\n+}\n+\n+impl<T, U> Foo for (T, U) where T: Clone, U: Clone {\n+    default fn foo(&self) -> &'static str {\n+        \"generic pair\"\n+    }\n+}\n+\n+impl<T: Clone> Foo for (T, T) {\n+    default fn foo(&self) -> &'static str {\n+        \"generic uniform pair\"\n+    }\n+}\n+\n+impl Foo for (u8, u32) {\n+    default fn foo(&self) -> &'static str {\n+        \"(u8, u32)\"\n+    }\n+}\n+\n+impl Foo for (u8, u8) {\n+    default fn foo(&self) -> &'static str {\n+        \"(u8, u8)\"\n+    }\n+}\n+\n+impl<T: Clone> Foo for Vec<T> {\n+    default fn foo(&self) -> &'static str {\n+        \"generic Vec\"\n+    }\n+}\n+\n+impl Foo for Vec<i32> {\n+    fn foo(&self) -> &'static str {\n+        \"Vec<i32>\"\n+    }\n+}\n+\n+impl Foo for String {\n+    fn foo(&self) -> &'static str {\n+        \"String\"\n+    }\n+}\n+\n+impl Foo for i32 {\n+    fn foo(&self) -> &'static str {\n+        \"i32\"\n+    }\n+}\n+\n+pub trait MyMarker {}\n+impl<T: Clone + MyMarker> Foo for T {\n+    default fn foo(&self) -> &'static str {\n+        \"generic Clone + MyMarker\"\n+    }\n+}"}, {"sha": "b62d80b589fda548e3ac21eca0dfc8bcc4a809ac", "filename": "src/test/auxiliary/specialization_cross_crate_defaults.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1077ff2deca4c80f27596905119a84564fe9813f/src%2Ftest%2Fauxiliary%2Fspecialization_cross_crate_defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1077ff2deca4c80f27596905119a84564fe9813f/src%2Ftest%2Fauxiliary%2Fspecialization_cross_crate_defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fspecialization_cross_crate_defaults.rs?ref=1077ff2deca4c80f27596905119a84564fe9813f", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+#![feature(specialization)]\n+\n+// First, test only use of explicit `default` items:\n+\n+pub trait Foo {\n+    fn foo(&self) -> bool;\n+}\n+\n+impl<T> Foo for T {\n+    default fn foo(&self) -> bool { false }\n+}\n+\n+impl Foo for i32 {}\n+\n+impl Foo for i64 {\n+    fn foo(&self) -> bool { true }\n+}\n+\n+// Next, test mixture of explicit `default` and provided methods:\n+\n+pub trait Bar {\n+    fn bar(&self) -> i32 { 0 }\n+}\n+\n+impl<T> Bar for T {} // use the provided method\n+\n+impl Bar for i32 {\n+    fn bar(&self) -> i32 { 1 }\n+}\n+impl<'a> Bar for &'a str {}\n+\n+impl<T> Bar for Vec<T> {\n+    default fn bar(&self) -> i32 { 2 }\n+}\n+impl Bar for Vec<i32> {}\n+impl Bar for Vec<i64> {\n+    fn bar(&self) -> i32 { 3 }\n+}"}, {"sha": "6de338f1db0fae9b781d5ed1e412899dd08d75cc", "filename": "src/test/compile-fail/coherence-no-direct-lifetime-dispatch.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1077ff2deca4c80f27596905119a84564fe9813f/src%2Ftest%2Fcompile-fail%2Fcoherence-no-direct-lifetime-dispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1077ff2deca4c80f27596905119a84564fe9813f/src%2Ftest%2Fcompile-fail%2Fcoherence-no-direct-lifetime-dispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-no-direct-lifetime-dispatch.rs?ref=1077ff2deca4c80f27596905119a84564fe9813f", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that you cannot *directly* dispatch on lifetime requirements\n+\n+trait MyTrait {}\n+\n+impl<T> MyTrait for T {}\n+impl<T: 'static> MyTrait for T {} //~ ERROR E0119\n+\n+fn main() {}"}, {"sha": "2a54ad88055ece6a8b0f2e6f10adec6f44e6fa49", "filename": "src/test/compile-fail/coherence-overlap-messages.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1077ff2deca4c80f27596905119a84564fe9813f/src%2Ftest%2Fcompile-fail%2Fcoherence-overlap-messages.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1077ff2deca4c80f27596905119a84564fe9813f/src%2Ftest%2Fcompile-fail%2Fcoherence-overlap-messages.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-overlap-messages.rs?ref=1077ff2deca4c80f27596905119a84564fe9813f", "patch": "@@ -15,28 +15,18 @@ impl<U> Foo for U {}\n \n trait Bar {}\n \n-impl<T> Bar for T {} //~ ERROR conflicting implementations of trait `Bar` for type `u8`:\n-impl Bar for u8 {}\n+impl<T> Bar for (T, u8) {} //~ ERROR conflicting implementations of trait `Bar` for type `(u8, u8)`:\n+impl<T> Bar for (u8, T) {}\n \n trait Baz<T> {}\n \n-impl<T, U> Baz<U> for T {} //~ ERROR conflicting implementations of trait `Baz<_>` for type `u8`:\n+impl<T> Baz<u8> for T {} //~ ERROR conflicting implementations of trait `Baz<u8>` for type `u8`:\n impl<T> Baz<T> for u8 {}\n \n-trait Quux<T> {}\n+trait Quux<U, V> {}\n \n-impl<T, U> Quux<U> for T {} //~ ERROR conflicting implementations of trait `Quux<_>`:\n-impl<T> Quux<T> for T {}\n-\n-trait Qaar<T> {}\n-\n-impl<T, U> Qaar<U> for T {} //~ ERROR conflicting implementations of trait `Qaar<u8>`:\n-impl<T> Qaar<u8> for T {}\n-\n-trait Qaax<T> {}\n-\n-impl<T, U> Qaax<U> for T {}\n-//~^ ERROR conflicting implementations of trait `Qaax<u8>` for type `u32`:\n-impl Qaax<u8> for u32 {}\n+impl<T, U, V> Quux<U, V> for T {} //~ ERROR conflicting implementations of trait `Quux<_, _>`:\n+impl<T, U> Quux<U, U> for T {}\n+impl<T, V> Quux<T, V> for T {}\n \n fn main() {}"}, {"sha": "d0d698d12e09c792d1248af24dfa3e5338495ba2", "filename": "src/test/compile-fail/specialization-negative-impl.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1077ff2deca4c80f27596905119a84564fe9813f/src%2Ftest%2Fcompile-fail%2Fspecialization-negative-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1077ff2deca4c80f27596905119a84564fe9813f/src%2Ftest%2Fcompile-fail%2Fspecialization-negative-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization-negative-impl.rs?ref=1077ff2deca4c80f27596905119a84564fe9813f", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(optin_builtin_traits)]\n+\n+struct TestType<T>(T);\n+\n+unsafe impl<T> Send for TestType<T> {}\n+impl !Send for TestType<u8> {}\n+\n+fn assert_send<T: Send>() {}\n+\n+fn main() {\n+    assert_send::<TestType<()>>();\n+    assert_send::<TestType<u8>>(); //~ ERROR\n+}"}, {"sha": "cc427b4fed2119964c44c17b917cd4aea3c605f5", "filename": "src/test/compile-fail/specialization-overlap-negative.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1077ff2deca4c80f27596905119a84564fe9813f/src%2Ftest%2Fcompile-fail%2Fspecialization-overlap-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1077ff2deca4c80f27596905119a84564fe9813f/src%2Ftest%2Fcompile-fail%2Fspecialization-overlap-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization-overlap-negative.rs?ref=1077ff2deca4c80f27596905119a84564fe9813f", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(optin_builtin_traits)]\n+\n+trait MyTrait {}\n+\n+struct TestType<T>(::std::marker::PhantomData<T>);\n+\n+unsafe impl<T: Clone> Send for TestType<T> {}\n+impl<T: MyTrait> !Send for TestType<T> {} //~ ERROR E0119\n+\n+fn main() {}"}, {"sha": "7d14e85fba83d2eabfb4e7c9aeef96abe2e83fed", "filename": "src/test/compile-fail/specialization-overlap.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1077ff2deca4c80f27596905119a84564fe9813f/src%2Ftest%2Fcompile-fail%2Fspecialization-overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1077ff2deca4c80f27596905119a84564fe9813f/src%2Ftest%2Fcompile-fail%2Fspecialization-overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization-overlap.rs?ref=1077ff2deca4c80f27596905119a84564fe9813f", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {}\n+impl<T: Clone> Foo for T {}\n+impl<T> Foo for Vec<T> {} //~ ERROR E0119\n+\n+trait Bar {}\n+impl<T> Bar for (T, u8) {}\n+impl<T> Bar for (u8, T) {} //~ ERROR E0119\n+\n+trait Baz<U> {}\n+impl<T> Baz<T> for u8 {}\n+impl<T> Baz<u8> for T {} //~ ERROR E0119\n+\n+fn main() {}"}, {"sha": "139c63d3cdb49660d4b1667fd6d995d10f90af02", "filename": "src/test/run-pass/specialization-allowed-cross-crate.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1077ff2deca4c80f27596905119a84564fe9813f/src%2Ftest%2Frun-pass%2Fspecialization-allowed-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1077ff2deca4c80f27596905119a84564fe9813f/src%2Ftest%2Frun-pass%2Fspecialization-allowed-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization-allowed-cross-crate.rs?ref=1077ff2deca4c80f27596905119a84564fe9813f", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:go_trait.rs\n+\n+extern crate go_trait;\n+\n+use go_trait::{Go,GoMut};\n+use std::fmt::Debug;\n+use std::default::Default;\n+\n+struct MyThingy;\n+\n+impl Go for MyThingy {\n+    fn go(&self, arg: isize) { }\n+}\n+\n+impl GoMut for MyThingy {\n+    fn go_mut(&mut self, arg: isize) { }\n+}\n+\n+fn main() { }"}, {"sha": "750581ffe923420de562d2b7e02cbea3626c84e4", "filename": "src/test/run-pass/specialization-assoc-fns.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1077ff2deca4c80f27596905119a84564fe9813f/src%2Ftest%2Frun-pass%2Fspecialization-assoc-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1077ff2deca4c80f27596905119a84564fe9813f/src%2Ftest%2Frun-pass%2Fspecialization-assoc-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization-assoc-fns.rs?ref=1077ff2deca4c80f27596905119a84564fe9813f", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+    fn mk() -> Self;\n+}\n+\n+impl<T: Default> Foo for T {\n+    default fn mk() -> T {\n+        T::default()\n+    }\n+}\n+\n+impl Foo for Vec<u8> {\n+    fn mk() -> Vec<u8> {\n+        vec![0]\n+    }\n+}\n+\n+fn main() {\n+    let v1: Vec<i32> = Foo::mk();\n+    let v2: Vec<u8> = Foo::mk();\n+\n+    assert!(v1.len() == 0);\n+    assert!(v2.len() == 1);\n+}"}, {"sha": "e585c8e235354a84e7efb877067b4eac2684636a", "filename": "src/test/run-pass/specialization-basics.rs", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/1077ff2deca4c80f27596905119a84564fe9813f/src%2Ftest%2Frun-pass%2Fspecialization-basics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1077ff2deca4c80f27596905119a84564fe9813f/src%2Ftest%2Frun-pass%2Fspecialization-basics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization-basics.rs?ref=1077ff2deca4c80f27596905119a84564fe9813f", "patch": "@@ -0,0 +1,104 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests a variety of basic specialization scenarios and method\n+// dispatch for them.\n+\n+trait Foo {\n+    fn foo(&self) -> &'static str;\n+}\n+\n+impl<T> Foo for T {\n+    default fn foo(&self) -> &'static str {\n+        \"generic\"\n+    }\n+}\n+\n+impl<T: Clone> Foo for T {\n+    default fn foo(&self) -> &'static str {\n+        \"generic Clone\"\n+    }\n+}\n+\n+impl<T, U> Foo for (T, U) where T: Clone, U: Clone {\n+    default fn foo(&self) -> &'static str {\n+        \"generic pair\"\n+    }\n+}\n+\n+impl<T: Clone> Foo for (T, T) {\n+    default fn foo(&self) -> &'static str {\n+        \"generic uniform pair\"\n+    }\n+}\n+\n+impl Foo for (u8, u32) {\n+    default fn foo(&self) -> &'static str {\n+        \"(u8, u32)\"\n+    }\n+}\n+\n+impl Foo for (u8, u8) {\n+    default fn foo(&self) -> &'static str {\n+        \"(u8, u8)\"\n+    }\n+}\n+\n+impl<T: Clone> Foo for Vec<T> {\n+    default fn foo(&self) -> &'static str {\n+        \"generic Vec\"\n+    }\n+}\n+\n+impl Foo for Vec<i32> {\n+    fn foo(&self) -> &'static str {\n+        \"Vec<i32>\"\n+    }\n+}\n+\n+impl Foo for String {\n+    fn foo(&self) -> &'static str {\n+        \"String\"\n+    }\n+}\n+\n+impl Foo for i32 {\n+    fn foo(&self) -> &'static str {\n+        \"i32\"\n+    }\n+}\n+\n+struct NotClone;\n+\n+trait MyMarker {}\n+impl<T: Clone + MyMarker> Foo for T {\n+    default fn foo(&self) -> &'static str {\n+        \"generic Clone + MyMarker\"\n+    }\n+}\n+\n+#[derive(Clone)]\n+struct MarkedAndClone;\n+impl MyMarker for MarkedAndClone {}\n+\n+fn  main() {\n+    assert!(NotClone.foo() == \"generic\");\n+    assert!(0u8.foo() == \"generic Clone\");\n+    assert!(vec![NotClone].foo() == \"generic\");\n+    assert!(vec![0u8].foo() == \"generic Vec\");\n+    assert!(vec![0i32].foo() == \"Vec<i32>\");\n+    assert!(0i32.foo() == \"i32\");\n+    assert!(String::new().foo() == \"String\");\n+    assert!(((), 0).foo() == \"generic pair\");\n+    assert!(((), ()).foo() == \"generic uniform pair\");\n+    assert!((0u8, 0u32).foo() == \"(u8, u32)\");\n+    assert!((0u8, 0u8).foo() == \"(u8, u8)\");\n+    assert!(MarkedAndClone.foo() == \"generic Clone + MyMarker\");\n+}"}, {"sha": "750c3cf8b3ecb3c1d47726f5e965fae26a1a07ac", "filename": "src/test/run-pass/specialization-cross-crate-defaults.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1077ff2deca4c80f27596905119a84564fe9813f/src%2Ftest%2Frun-pass%2Fspecialization-cross-crate-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1077ff2deca4c80f27596905119a84564fe9813f/src%2Ftest%2Frun-pass%2Fspecialization-cross-crate-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization-cross-crate-defaults.rs?ref=1077ff2deca4c80f27596905119a84564fe9813f", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:specialization_cross_crate_defaults.rs\n+\n+#![feature(specialization)]\n+\n+extern crate specialization_cross_crate_defaults;\n+\n+use specialization_cross_crate_defaults::*;\n+\n+fn test_foo() {\n+    assert!(0i8.foo() == false);\n+    assert!(0i32.foo() == false);\n+    assert!(0i64.foo() == true);\n+}\n+\n+fn test_bar() {\n+    assert!(0u8.bar() == 0);\n+    assert!(0i32.bar() == 1);\n+    assert!(\"hello\".bar() == 0);\n+    assert!(vec![()].bar() == 2);\n+    assert!(vec![0i32].bar() == 2);\n+    assert!(vec![0i64].bar() == 3);\n+}\n+\n+fn main() {\n+    test_foo();\n+    test_bar();\n+}"}, {"sha": "c74b1f2e49e4325104bcb157d7f3d788cb290632", "filename": "src/test/run-pass/specialization-cross-crate.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1077ff2deca4c80f27596905119a84564fe9813f/src%2Ftest%2Frun-pass%2Fspecialization-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1077ff2deca4c80f27596905119a84564fe9813f/src%2Ftest%2Frun-pass%2Fspecialization-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization-cross-crate.rs?ref=1077ff2deca4c80f27596905119a84564fe9813f", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:specialization_cross_crate.rs\n+\n+extern crate specialization_cross_crate;\n+\n+use specialization_cross_crate::*;\n+\n+struct NotClone;\n+\n+#[derive(Clone)]\n+struct MarkedAndClone;\n+impl MyMarker for MarkedAndClone {}\n+\n+struct MyType<T>(T);\n+impl<T> Foo for MyType<T> {\n+    default fn foo(&self) -> &'static str {\n+        \"generic MyType\"\n+    }\n+}\n+\n+impl Foo for MyType<u8> {\n+    fn foo(&self) -> &'static str {\n+        \"MyType<u8>\"\n+    }\n+}\n+\n+struct MyOtherType;\n+impl Foo for MyOtherType {}\n+\n+fn  main() {\n+    assert!(NotClone.foo() == \"generic\");\n+    assert!(0u8.foo() == \"generic Clone\");\n+    assert!(vec![NotClone].foo() == \"generic\");\n+    assert!(vec![0u8].foo() == \"generic Vec\");\n+    assert!(vec![0i32].foo() == \"Vec<i32>\");\n+    assert!(0i32.foo() == \"i32\");\n+    assert!(String::new().foo() == \"String\");\n+    assert!(((), 0).foo() == \"generic pair\");\n+    assert!(((), ()).foo() == \"generic uniform pair\");\n+    assert!((0u8, 0u32).foo() == \"(u8, u32)\");\n+    assert!((0u8, 0u8).foo() == \"(u8, u8)\");\n+    assert!(MarkedAndClone.foo() == \"generic Clone + MyMarker\");\n+\n+    assert!(MyType(()).foo() == \"generic MyType\");\n+    assert!(MyType(0u8).foo() == \"MyType<u8>\");\n+    assert!(MyOtherType.foo() == \"generic\");\n+}"}, {"sha": "7482d3acbc1ac9f2961939360078c24f35e1c64d", "filename": "src/test/run-pass/specialization-default-methods.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/1077ff2deca4c80f27596905119a84564fe9813f/src%2Ftest%2Frun-pass%2Fspecialization-default-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1077ff2deca4c80f27596905119a84564fe9813f/src%2Ftest%2Frun-pass%2Fspecialization-default-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization-default-methods.rs?ref=1077ff2deca4c80f27596905119a84564fe9813f", "patch": "@@ -0,0 +1,66 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// First, test only use of explicit `default` items:\n+\n+trait Foo {\n+    fn foo(&self) -> bool;\n+}\n+\n+impl<T> Foo for T {\n+    default fn foo(&self) -> bool { false }\n+}\n+\n+impl Foo for i32 {}\n+\n+impl Foo for i64 {\n+    fn foo(&self) -> bool { true }\n+}\n+\n+fn test_foo() {\n+    assert!(0i8.foo() == false);\n+    assert!(0i32.foo() == false);\n+    assert!(0i64.foo() == true);\n+}\n+\n+// Next, test mixture of explicit `default` and provided methods:\n+\n+trait Bar {\n+    fn bar(&self) -> i32 { 0 }\n+}\n+\n+impl<T> Bar for T {} // use the provided method\n+\n+impl Bar for i32 {\n+    fn bar(&self) -> i32 { 1 }\n+}\n+impl<'a> Bar for &'a str {}\n+\n+impl<T> Bar for Vec<T> {\n+    default fn bar(&self) -> i32 { 2 }\n+}\n+impl Bar for Vec<i32> {}\n+impl Bar for Vec<i64> {\n+    fn bar(&self) -> i32 { 3 }\n+}\n+\n+fn test_bar() {\n+    assert!(0u8.bar() == 0);\n+    assert!(0i32.bar() == 1);\n+    assert!(\"hello\".bar() == 0);\n+    assert!(vec![()].bar() == 2);\n+    assert!(vec![0i32].bar() == 2);\n+    assert!(vec![0i64].bar() == 3);\n+}\n+\n+fn main() {\n+    test_foo();\n+    test_bar();\n+}"}, {"sha": "4a30e6bcd25f897c02c8d2e8922aa910b85bf201", "filename": "src/test/run-pass/specialization-super-traits.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1077ff2deca4c80f27596905119a84564fe9813f/src%2Ftest%2Frun-pass%2Fspecialization-super-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1077ff2deca4c80f27596905119a84564fe9813f/src%2Ftest%2Frun-pass%2Fspecialization-super-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspecialization-super-traits.rs?ref=1077ff2deca4c80f27596905119a84564fe9813f", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that you can specialize via an explicit trait hierarchy\n+\n+// FIXME: this doesn't work yet...\n+\n+trait Parent {}\n+trait Child: Parent {}\n+\n+trait Foo {}\n+\n+impl<T: Parent> Foo for T {}\n+impl<T: Child> Foo for T {}\n+\n+fn main() {}"}]}