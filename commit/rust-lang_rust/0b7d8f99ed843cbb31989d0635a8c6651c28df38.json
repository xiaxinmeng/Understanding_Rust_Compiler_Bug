{"sha": "0b7d8f99ed843cbb31989d0635a8c6651c28df38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiN2Q4Zjk5ZWQ4NDNjYmIzMTk4OWQwNjM1YThjNjY1MWMyOGRmMzg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-14T10:31:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-14T10:31:53Z"}, "message": "Rollup merge of #57477 - euclio:clarify-lev-suggestion, r=zackmdavis\n\nclarify resolve typo suggestion\n\nInclude the kind of the binding that we're suggesting, and use a\nstructured suggestion.\n\nFixes #53445.", "tree": {"sha": "054723885e65e445a82ea145c16c88b77b90589b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/054723885e65e445a82ea145c16c88b77b90589b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b7d8f99ed843cbb31989d0635a8c6651c28df38", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcPGUZCRBK7hj4Ov3rIwAAdHIIAHiTpYQTPukPrgX3WvgZc8cX\npnGs59yNBER6MmMtfpN3KOdhXe//6Iw/biNOQ8RXNG9haoB7kHKKdj4nWFXr8NDt\nj+QwbNLSurlITyPz84O3DuG/7nsWwmcVO0PTSoO7J4HgUXZRhgakwCMIm3fhQIg2\n+1kZRnmM8cclIt/J1NTwnzZT/Cmi4V4Qe7AWYX98wWVl2698sG4H33+2luDJPINe\nCrKgQNmzS6+YtRUGLfboVpjK3Pf5chdqLUoTdbJ02GAyxYbkGroV3F3UccuN7BbT\nGbpE03z5pzcP4ySpv5m75xFGkWsg8nVeU85h7c0VyUkaOOKGq38pIy+WH1oxDok=\n=gejw\n-----END PGP SIGNATURE-----\n", "payload": "tree 054723885e65e445a82ea145c16c88b77b90589b\nparent 74cc0be8f6388aa2fc1ecaf18904c395a2306c40\nparent 404ad50d148af4ea388861d1f9a45dd9f5c43ef7\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1547461913 +0100\ncommitter GitHub <noreply@github.com> 1547461913 +0100\n\nRollup merge of #57477 - euclio:clarify-lev-suggestion, r=zackmdavis\n\nclarify resolve typo suggestion\n\nInclude the kind of the binding that we're suggesting, and use a\nstructured suggestion.\n\nFixes #53445.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b7d8f99ed843cbb31989d0635a8c6651c28df38", "html_url": "https://github.com/rust-lang/rust/commit/0b7d8f99ed843cbb31989d0635a8c6651c28df38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b7d8f99ed843cbb31989d0635a8c6651c28df38/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74cc0be8f6388aa2fc1ecaf18904c395a2306c40", "url": "https://api.github.com/repos/rust-lang/rust/commits/74cc0be8f6388aa2fc1ecaf18904c395a2306c40", "html_url": "https://github.com/rust-lang/rust/commit/74cc0be8f6388aa2fc1ecaf18904c395a2306c40"}, {"sha": "404ad50d148af4ea388861d1f9a45dd9f5c43ef7", "url": "https://api.github.com/repos/rust-lang/rust/commits/404ad50d148af4ea388861d1f9a45dd9f5c43ef7", "html_url": "https://github.com/rust-lang/rust/commit/404ad50d148af4ea388861d1f9a45dd9f5c43ef7"}], "stats": {"total": 374, "additions": 249, "deletions": 125}, "files": [{"sha": "8a74c51d3f723880926ab22118e30d803e7274bc", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -284,7 +284,7 @@ impl Def {\n         }\n     }\n \n-    /// A human readable kind name\n+    /// A human readable name for the def kind (\"function\", \"module\", etc.).\n     pub fn kind_name(&self) -> &'static str {\n         match *self {\n             Def::Fn(..) => \"function\",\n@@ -324,6 +324,7 @@ impl Def {\n         }\n     }\n \n+    /// An English article for the def.\n     pub fn article(&self) -> &'static str {\n         match *self {\n             Def::AssociatedTy(..) | Def::AssociatedConst(..) | Def::AssociatedExistential(..) |"}, {"sha": "c29b639984d816a1a9a24474ff8af62781a15173", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 68, "deletions": 18, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -120,6 +120,16 @@ struct BindingError {\n     target: BTreeSet<Span>,\n }\n \n+struct TypoSuggestion {\n+    candidate: Symbol,\n+\n+    /// The kind of the binding (\"crate\", \"module\", etc.)\n+    kind: &'static str,\n+\n+    /// An appropriate article to refer to the binding (\"a\", \"an\", etc.)\n+    article: &'static str,\n+}\n+\n impl PartialOrd for BindingError {\n     fn partial_cmp(&self, other: &BindingError) -> Option<cmp::Ordering> {\n         Some(self.cmp(other))\n@@ -1448,7 +1458,7 @@ impl PrimitiveTypeTable {\n     }\n }\n \n-#[derive(Default, Clone)]\n+#[derive(Debug, Default, Clone)]\n pub struct ExternPreludeEntry<'a> {\n     extern_crate_item: Option<&'a NameBinding<'a>>,\n     pub introduced_by_item: bool,\n@@ -3291,8 +3301,19 @@ impl<'a> Resolver<'a> {\n             let mut levenshtein_worked = false;\n \n             // Try Levenshtein algorithm.\n-            if let Some(candidate) = this.lookup_typo_candidate(path, ns, is_expected, span) {\n-                err.span_label(ident_span, format!(\"did you mean `{}`?\", candidate));\n+            let suggestion = this.lookup_typo_candidate(path, ns, is_expected, span);\n+            if let Some(suggestion) = suggestion {\n+                let msg = format!(\n+                    \"{} {} with a similar name exists\",\n+                    suggestion.article, suggestion.kind\n+                );\n+                err.span_suggestion_with_applicability(\n+                    ident_span,\n+                    &msg,\n+                    suggestion.candidate.to_string(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+\n                 levenshtein_worked = true;\n             }\n \n@@ -4183,19 +4204,25 @@ impl<'a> Resolver<'a> {\n         None\n     }\n \n-    fn lookup_typo_candidate<FilterFn>(&mut self,\n-                                       path: &[Segment],\n-                                       ns: Namespace,\n-                                       filter_fn: FilterFn,\n-                                       span: Span)\n-                                       -> Option<Symbol>\n-        where FilterFn: Fn(Def) -> bool\n+    fn lookup_typo_candidate<FilterFn>(\n+        &mut self,\n+        path: &[Segment],\n+        ns: Namespace,\n+        filter_fn: FilterFn,\n+        span: Span,\n+    ) -> Option<TypoSuggestion>\n+    where\n+        FilterFn: Fn(Def) -> bool,\n     {\n-        let add_module_candidates = |module: Module, names: &mut Vec<Name>| {\n+        let add_module_candidates = |module: Module, names: &mut Vec<TypoSuggestion>| {\n             for (&(ident, _), resolution) in module.resolutions.borrow().iter() {\n                 if let Some(binding) = resolution.borrow().binding {\n                     if filter_fn(binding.def()) {\n-                        names.push(ident.name);\n+                        names.push(TypoSuggestion {\n+                            candidate: ident.name,\n+                            article: binding.def().article(),\n+                            kind: binding.def().kind_name(),\n+                        });\n                     }\n                 }\n             }\n@@ -4209,7 +4236,11 @@ impl<'a> Resolver<'a> {\n                 // Locals and type parameters\n                 for (ident, def) in &rib.bindings {\n                     if filter_fn(*def) {\n-                        names.push(ident.name);\n+                        names.push(TypoSuggestion {\n+                            candidate: ident.name,\n+                            article: def.article(),\n+                            kind: def.kind_name(),\n+                        });\n                     }\n                 }\n                 // Items in scope\n@@ -4222,7 +4253,13 @@ impl<'a> Resolver<'a> {\n                     } else {\n                         // Items from the prelude\n                         if !module.no_implicit_prelude {\n-                            names.extend(self.extern_prelude.iter().map(|(ident, _)| ident.name));\n+                            names.extend(self.extern_prelude.iter().map(|(ident, _)| {\n+                                TypoSuggestion {\n+                                    candidate: ident.name,\n+                                    article: \"a\",\n+                                    kind: \"crate\",\n+                                }\n+                            }));\n                             if let Some(prelude) = self.prelude {\n                                 add_module_candidates(prelude, &mut names);\n                             }\n@@ -4234,7 +4271,13 @@ impl<'a> Resolver<'a> {\n             // Add primitive types to the mix\n             if filter_fn(Def::PrimTy(Bool)) {\n                 names.extend(\n-                    self.primitive_type_table.primitive_types.iter().map(|(name, _)| name)\n+                    self.primitive_type_table.primitive_types.iter().map(|(name, _)| {\n+                        TypoSuggestion {\n+                            candidate: *name,\n+                            article: \"a\",\n+                            kind: \"primitive type\",\n+                        }\n+                    })\n                 )\n             }\n         } else {\n@@ -4251,9 +4294,16 @@ impl<'a> Resolver<'a> {\n \n         let name = path[path.len() - 1].ident.name;\n         // Make sure error reporting is deterministic.\n-        names.sort_by_cached_key(|name| name.as_str());\n-        match find_best_match_for_name(names.iter(), &name.as_str(), None) {\n-            Some(found) if found != name => Some(found),\n+        names.sort_by_cached_key(|suggestion| suggestion.candidate.as_str());\n+\n+        match find_best_match_for_name(\n+            names.iter().map(|suggestion| &suggestion.candidate),\n+            &name.as_str(),\n+            None,\n+        ) {\n+            Some(found) if found != name => names\n+                .into_iter()\n+                .find(|suggestion| suggestion.candidate == found),\n             _ => None,\n         }\n     }"}, {"sha": "286f9a758830b9a740b8133838e9ff22900ed95e", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -1015,6 +1015,7 @@ impl<'a> Resolver<'a> {\n             };\n             let ident = Ident::new(Symbol::intern(name), span);\n             self.lookup_typo_candidate(&[Segment::from_ident(ident)], MacroNS, is_macro, span)\n+                .map(|suggestion| suggestion.candidate)\n         });\n \n         if let Some(suggestion) = suggestion {"}, {"sha": "0935d6ae3e6110f4dba4f88571f031f7c9561e31", "filename": "src/test/ui/associated-types/associated-types-eq-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-1.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -2,7 +2,7 @@ error[E0412]: cannot find type `A` in this scope\n   --> $DIR/associated-types-eq-1.rs:10:12\n    |\n LL |     let _: A = x.boo(); //~ ERROR cannot find type `A` in this scope\n-   |            ^ did you mean `I`?\n+   |            ^ help: a type parameter with a similar name exists: `I`\n \n error: aborting due to previous error\n "}, {"sha": "e595e0ccb9293278179763a34f3dd21d214eda52", "filename": "src/test/ui/empty/empty-struct-braces-expr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-expr.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -4,17 +4,17 @@ error[E0423]: expected value, found struct `Empty1`\n LL |     let e1 = Empty1; //~ ERROR expected value, found struct `Empty1`\n    |              ^^^^^^\n    |              |\n-   |              did you mean `XEmpty2`?\n    |              did you mean `Empty1 { /* fields */ }`?\n+   |              help: a unit struct with a similar name exists: `XEmpty2`\n \n error[E0423]: expected function, found struct `Empty1`\n   --> $DIR/empty-struct-braces-expr.rs:16:14\n    |\n LL |     let e1 = Empty1(); //~ ERROR expected function, found struct `Empty1`\n    |              ^^^^^^\n    |              |\n-   |              did you mean `XEmpty2`?\n    |              did you mean `Empty1 { /* fields */ }`?\n+   |              help: a unit struct with a similar name exists: `XEmpty2`\n \n error[E0423]: expected value, found struct variant `E::Empty3`\n   --> $DIR/empty-struct-braces-expr.rs:17:14\n@@ -34,17 +34,17 @@ error[E0423]: expected value, found struct `XEmpty1`\n LL |     let xe1 = XEmpty1; //~ ERROR expected value, found struct `XEmpty1`\n    |               ^^^^^^^\n    |               |\n-   |               did you mean `XEmpty2`?\n    |               did you mean `XEmpty1 { /* fields */ }`?\n+   |               help: a unit struct with a similar name exists: `XEmpty2`\n \n error[E0423]: expected function, found struct `XEmpty1`\n   --> $DIR/empty-struct-braces-expr.rs:21:15\n    |\n LL |     let xe1 = XEmpty1(); //~ ERROR expected function, found struct `XEmpty1`\n    |               ^^^^^^^\n    |               |\n-   |               did you mean `XEmpty2`?\n    |               did you mean `XEmpty1 { /* fields */ }`?\n+   |               help: a unit struct with a similar name exists: `XEmpty2`\n \n error[E0599]: no variant named `Empty3` found for type `empty_struct::XE` in the current scope\n   --> $DIR/empty-struct-braces-expr.rs:22:19"}, {"sha": "6c361c703440c1a15cf30f747a6f09c7c9b6094b", "filename": "src/test/ui/empty/empty-struct-braces-pat-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-1.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -10,7 +10,7 @@ error[E0532]: expected unit struct/variant or constant, found struct variant `XE\n LL |         XE::XEmpty3 => ()\n    |         ^^^^-------\n    |         |   |\n-   |         |   did you mean `XEmpty4`?\n+   |         |   help: a unit variant with a similar name exists: `XEmpty4`\n    |         did you mean `XE::XEmpty3 { /* fields */ }`?\n \n error: aborting due to 2 previous errors"}, {"sha": "fc2ed79bb2e053ed4910b7396698c8cfe70529ad", "filename": "src/test/ui/empty/empty-struct-braces-pat-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-2.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -4,35 +4,35 @@ error[E0532]: expected tuple struct/variant, found struct `Empty1`\n LL |         Empty1() => () //~ ERROR expected tuple struct/variant, found struct `Empty1`\n    |         ^^^^^^\n    |         |\n-   |         did you mean `XEmpty6`?\n    |         did you mean `Empty1 { /* fields */ }`?\n+   |         help: a tuple struct with a similar name exists: `XEmpty6`\n \n error[E0532]: expected tuple struct/variant, found struct `XEmpty1`\n   --> $DIR/empty-struct-braces-pat-2.rs:18:9\n    |\n LL |         XEmpty1() => () //~ ERROR expected tuple struct/variant, found struct `XEmpty1`\n    |         ^^^^^^^\n    |         |\n-   |         did you mean `XEmpty6`?\n    |         did you mean `XEmpty1 { /* fields */ }`?\n+   |         help: a tuple struct with a similar name exists: `XEmpty6`\n \n error[E0532]: expected tuple struct/variant, found struct `Empty1`\n   --> $DIR/empty-struct-braces-pat-2.rs:21:9\n    |\n LL |         Empty1(..) => () //~ ERROR expected tuple struct/variant, found struct `Empty1`\n    |         ^^^^^^\n    |         |\n-   |         did you mean `XEmpty6`?\n    |         did you mean `Empty1 { /* fields */ }`?\n+   |         help: a tuple struct with a similar name exists: `XEmpty6`\n \n error[E0532]: expected tuple struct/variant, found struct `XEmpty1`\n   --> $DIR/empty-struct-braces-pat-2.rs:24:9\n    |\n LL |         XEmpty1(..) => () //~ ERROR expected tuple struct/variant, found struct `XEmpty1`\n    |         ^^^^^^^\n    |         |\n-   |         did you mean `XEmpty6`?\n    |         did you mean `XEmpty1 { /* fields */ }`?\n+   |         help: a tuple struct with a similar name exists: `XEmpty6`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "af8731b5f059633823964fd49e89ca85b18c8cd0", "filename": "src/test/ui/empty/empty-struct-braces-pat-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-braces-pat-3.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -10,7 +10,7 @@ error[E0532]: expected tuple struct/variant, found struct variant `XE::XEmpty3`\n LL |         XE::XEmpty3() => ()\n    |         ^^^^-------\n    |         |   |\n-   |         |   did you mean `XEmpty5`?\n+   |         |   help: a tuple variant with a similar name exists: `XEmpty5`\n    |         did you mean `XE::XEmpty3 { /* fields */ }`?\n \n error[E0532]: expected tuple struct/variant, found struct variant `E::Empty3`\n@@ -25,7 +25,7 @@ error[E0532]: expected tuple struct/variant, found struct variant `XE::XEmpty3`\n LL |         XE::XEmpty3(..) => ()\n    |         ^^^^-------\n    |         |   |\n-   |         |   did you mean `XEmpty5`?\n+   |         |   help: a tuple variant with a similar name exists: `XEmpty5`\n    |         did you mean `XE::XEmpty3 { /* fields */ }`?\n \n error: aborting due to 4 previous errors"}, {"sha": "f92c4e5c4634601af433a04c0a07e7745ab7f247", "filename": "src/test/ui/empty/empty-struct-tuple-pat.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-tuple-pat.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -28,7 +28,7 @@ error[E0532]: expected unit struct/variant or constant, found tuple variant `XE:\n LL |         XE::XEmpty5 => (),\n    |         ^^^^-------\n    |             |\n-   |             did you mean `XEmpty4`?\n+   |             help: a unit variant with a similar name exists: `XEmpty4`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "e62246562be674debb3733ef79eb1600f42e58a9", "filename": "src/test/ui/empty/empty-struct-unit-pat.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-pat.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -2,25 +2,25 @@ error[E0532]: expected tuple struct/variant, found unit struct `Empty2`\n   --> $DIR/empty-struct-unit-pat.rs:21:9\n    |\n LL |         Empty2() => () //~ ERROR expected tuple struct/variant, found unit struct `Empty2`\n-   |         ^^^^^^ did you mean `XEmpty6`?\n+   |         ^^^^^^ help: a tuple struct with a similar name exists: `XEmpty6`\n \n error[E0532]: expected tuple struct/variant, found unit struct `XEmpty2`\n   --> $DIR/empty-struct-unit-pat.rs:24:9\n    |\n LL |         XEmpty2() => () //~ ERROR expected tuple struct/variant, found unit struct `XEmpty2`\n-   |         ^^^^^^^ did you mean `XEmpty6`?\n+   |         ^^^^^^^ help: a tuple struct with a similar name exists: `XEmpty6`\n \n error[E0532]: expected tuple struct/variant, found unit struct `Empty2`\n   --> $DIR/empty-struct-unit-pat.rs:27:9\n    |\n LL |         Empty2(..) => () //~ ERROR expected tuple struct/variant, found unit struct `Empty2`\n-   |         ^^^^^^ did you mean `XEmpty6`?\n+   |         ^^^^^^ help: a tuple struct with a similar name exists: `XEmpty6`\n \n error[E0532]: expected tuple struct/variant, found unit struct `XEmpty2`\n   --> $DIR/empty-struct-unit-pat.rs:30:9\n    |\n LL |         XEmpty2(..) => () //~ ERROR expected tuple struct/variant, found unit struct `XEmpty2`\n-   |         ^^^^^^^ did you mean `XEmpty6`?\n+   |         ^^^^^^^ help: a tuple struct with a similar name exists: `XEmpty6`\n \n error[E0532]: expected tuple struct/variant, found unit variant `E::Empty4`\n   --> $DIR/empty-struct-unit-pat.rs:34:9\n@@ -34,7 +34,7 @@ error[E0532]: expected tuple struct/variant, found unit variant `XE::XEmpty4`\n LL |         XE::XEmpty4() => (),\n    |         ^^^^-------\n    |             |\n-   |             did you mean `XEmpty5`?\n+   |             help: a tuple variant with a similar name exists: `XEmpty5`\n \n error[E0532]: expected tuple struct/variant, found unit variant `E::Empty4`\n   --> $DIR/empty-struct-unit-pat.rs:42:9\n@@ -48,7 +48,7 @@ error[E0532]: expected tuple struct/variant, found unit variant `XE::XEmpty4`\n LL |         XE::XEmpty4(..) => (),\n    |         ^^^^-------\n    |             |\n-   |             did you mean `XEmpty5`?\n+   |             help: a tuple variant with a similar name exists: `XEmpty5`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "c422a1e79574b081674a7c3fbe225a1bd7ee0e69", "filename": "src/test/ui/error-codes/E0423.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -22,8 +22,8 @@ error[E0423]: expected function, found struct `Foo`\n LL |     let f = Foo(); //~ ERROR E0423\n    |             ^^^\n    |             |\n-   |             did you mean `foo`?\n    |             did you mean `Foo { /* fields */ }`?\n+   |             help: a function with a similar name exists: `foo`\n \n error[E0423]: expected value, found struct `S`\n   --> $DIR/E0423.rs:12:32"}, {"sha": "a600ff14d3b87c5ac8c13842c1d8f18833d24a47", "filename": "src/test/ui/error-festival.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Ferror-festival.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Ferror-festival.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-festival.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -2,7 +2,7 @@ error[E0425]: cannot find value `y` in this scope\n   --> $DIR/error-festival.rs:14:5\n    |\n LL |     y = 2;\n-   |     ^ did you mean `x`?\n+   |     ^ help: a local variable with a similar name exists: `x`\n \n error[E0603]: constant `FOO` is private\n   --> $DIR/error-festival.rs:22:10"}, {"sha": "10a57aa6ca64929c0a2e5f875610945f4cd9335c", "filename": "src/test/ui/glob-resolve1.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fglob-resolve1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fglob-resolve1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fglob-resolve1.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -47,7 +47,11 @@ error[E0412]: cannot find type `A` in this scope\n   --> $DIR/glob-resolve1.rs:28:11\n    |\n LL |     foo::<A>(); //~ ERROR: cannot find type `A` in this scope\n-   |           ^ did you mean `B`?\n+   |           ^\n+help: an enum with a similar name exists\n+   |\n+LL |     foo::<B>(); //~ ERROR: cannot find type `A` in this scope\n+   |           ^\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL | use bar::A;\n@@ -57,7 +61,11 @@ error[E0412]: cannot find type `C` in this scope\n   --> $DIR/glob-resolve1.rs:29:11\n    |\n LL |     foo::<C>(); //~ ERROR: cannot find type `C` in this scope\n-   |           ^ did you mean `B`?\n+   |           ^\n+help: an enum with a similar name exists\n+   |\n+LL |     foo::<B>(); //~ ERROR: cannot find type `C` in this scope\n+   |           ^\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL | use bar::C;\n@@ -67,7 +75,11 @@ error[E0412]: cannot find type `D` in this scope\n   --> $DIR/glob-resolve1.rs:30:11\n    |\n LL |     foo::<D>(); //~ ERROR: cannot find type `D` in this scope\n-   |           ^ did you mean `B`?\n+   |           ^\n+help: an enum with a similar name exists\n+   |\n+LL |     foo::<B>(); //~ ERROR: cannot find type `D` in this scope\n+   |           ^\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL | use bar::D;"}, {"sha": "ac1ad118a7152b555db07884eb0fa117250536e3", "filename": "src/test/ui/issues/issue-10200.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fissues%2Fissue-10200.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fissues%2Fissue-10200.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10200.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -2,7 +2,7 @@ error[E0532]: expected tuple struct/variant, found function `foo`\n   --> $DIR/issue-10200.rs:6:9\n    |\n LL |         foo(x) //~ ERROR expected tuple struct/variant, found function `foo`\n-   |         ^^^ did you mean `Foo`?\n+   |         ^^^ help: a tuple struct with a similar name exists: `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "1fbb229ed98b49d29c80dd7db23d6031aa35bcd2", "filename": "src/test/ui/issues/issue-17546.stderr", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fissues%2Fissue-17546.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fissues%2Fissue-17546.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17546.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -2,10 +2,15 @@ error[E0573]: expected type, found variant `NoResult`\n   --> $DIR/issue-17546.rs:12:17\n    |\n LL |     fn new() -> NoResult<MyEnum, String> {\n-   |                 --------^^^^^^^^^^^^^^^^\n-   |                 |\n-   |                 did you mean `Result`?\n-   |                 help: try using the variant's enum: `foo::MyEnum`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: try using the variant's enum\n+   |\n+LL |     fn new() -> foo::MyEnum {\n+   |                 ^^^^^^^^^^^\n+help: an enum with a similar name exists\n+   |\n+LL |     fn new() -> Result<MyEnum, String> {\n+   |                 ^^^^^^\n \n error[E0573]: expected type, found variant `Result`\n   --> $DIR/issue-17546.rs:22:17\n@@ -45,10 +50,15 @@ error[E0573]: expected type, found variant `NoResult`\n   --> $DIR/issue-17546.rs:33:15\n    |\n LL | fn newer() -> NoResult<foo::MyEnum, String> {\n-   |               --------^^^^^^^^^^^^^^^^^^^^^\n-   |               |\n-   |               did you mean `Result`?\n-   |               help: try using the variant's enum: `foo::MyEnum`\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: try using the variant's enum\n+   |\n+LL | fn newer() -> foo::MyEnum {\n+   |               ^^^^^^^^^^^\n+help: an enum with a similar name exists\n+   |\n+LL | fn newer() -> Result<foo::MyEnum, String> {\n+   |               ^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "7ee1a41a3870d2e60328d17e873541322e1dad4a", "filename": "src/test/ui/issues/issue-31845.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fissues%2Fissue-31845.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fissues%2Fissue-31845.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31845.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -2,7 +2,7 @@ error[E0425]: cannot find function `g` in this scope\n   --> $DIR/issue-31845.rs:7:12\n    |\n LL |            g(); //~ ERROR cannot find function `g` in this scope\n-   |            ^ did you mean `h`?\n+   |            ^ help: a function with a similar name exists: `h`\n \n error: aborting due to previous error\n "}, {"sha": "f8c418b25a0e43bce9da0230019fe708cdf5dd9d", "filename": "src/test/ui/issues/issue-32004.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fissues%2Fissue-32004.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fissues%2Fissue-32004.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32004.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -4,7 +4,7 @@ error[E0532]: expected unit struct/variant or constant, found tuple variant `Foo\n LL |         Foo::Bar => {}\n    |         ^^^^^---\n    |              |\n-   |              did you mean `Baz`?\n+   |              help: a unit variant with a similar name exists: `Baz`\n \n error[E0532]: expected tuple struct/variant, found unit struct `S`\n   --> $DIR/issue-32004.rs:16:9"}, {"sha": "bb2cc7c101b77d56a9035cc8570ba62066c48517", "filename": "src/test/ui/issues/issue-32086.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fissues%2Fissue-32086.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fissues%2Fissue-32086.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32086.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -2,13 +2,13 @@ error[E0532]: expected tuple struct/variant, found constant `C`\n   --> $DIR/issue-32086.rs:5:9\n    |\n LL |     let C(a) = S(11); //~ ERROR expected tuple struct/variant, found constant `C`\n-   |         ^ did you mean `S`?\n+   |         ^ help: a tuple struct with a similar name exists: `S`\n \n error[E0532]: expected tuple struct/variant, found constant `C`\n   --> $DIR/issue-32086.rs:6:9\n    |\n LL |     let C(..) = S(11); //~ ERROR expected tuple struct/variant, found constant `C`\n-   |         ^ did you mean `S`?\n+   |         ^ help: a tuple struct with a similar name exists: `S`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "812a50000d1c293453b4ea239fb8b6764dbaee93", "filename": "src/test/ui/issues/issue-46332.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fissues%2Fissue-46332.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fissues%2Fissue-46332.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46332.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -2,7 +2,7 @@ error[E0422]: cannot find struct, variant or union type `TyUInt` in this scope\n   --> $DIR/issue-46332.rs:9:5\n    |\n LL |     TyUInt {};\n-   |     ^^^^^^ did you mean `TyUint`?\n+   |     ^^^^^^ help: a struct with a similar name exists: `TyUint`\n \n error: aborting due to previous error\n "}, {"sha": "aa0a6c761bf07fdbf066045b77e7ea29e78b2400", "filename": "src/test/ui/issues/issue-7607-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fissues%2Fissue-7607-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fissues%2Fissue-7607-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7607-1.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -2,7 +2,7 @@ error[E0412]: cannot find type `Fo` in this scope\n   --> $DIR/issue-7607-1.rs:5:6\n    |\n LL | impl Fo { //~ ERROR cannot find type `Fo` in this scope\n-   |      ^^ did you mean `Fn`?\n+   |      ^^ help: a trait with a similar name exists: `Fn`\n \n error: aborting due to previous error\n "}, {"sha": "5ebb40e75b395c89e304ceb3fc054baa094aa171", "filename": "src/test/ui/namespace/namespace-mix.stderr", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -2,11 +2,13 @@ error[E0423]: expected value, found type alias `m1::S`\n   --> $DIR/namespace-mix.rs:34:11\n    |\n LL |     check(m1::S); //~ ERROR expected value, found type alias `m1::S`\n-   |           ^^^^-\n-   |               |\n-   |               did you mean `TS`?\n+   |           ^^^^^\n    |\n    = note: can't use a type alias as a constructor\n+help: a tuple struct with a similar name exists\n+   |\n+LL |     check(m1::TS); //~ ERROR expected value, found type alias `m1::S`\n+   |               ^^\n help: possible better candidates are found in other modules, you can import them into scope\n    |\n LL | use m2::S;\n@@ -18,11 +20,13 @@ error[E0423]: expected value, found type alias `xm1::S`\n   --> $DIR/namespace-mix.rs:40:11\n    |\n LL |     check(xm1::S); //~ ERROR expected value, found type alias `xm1::S`\n-   |           ^^^^^-\n-   |                |\n-   |                did you mean `TS`?\n+   |           ^^^^^^\n    |\n    = note: can't use a type alias as a constructor\n+help: a tuple struct with a similar name exists\n+   |\n+LL |     check(xm1::TS); //~ ERROR expected value, found type alias `xm1::S`\n+   |                ^^\n help: possible better candidates are found in other modules, you can import them into scope\n    |\n LL | use m2::S;\n@@ -34,10 +38,11 @@ error[E0423]: expected value, found struct variant `m7::V`\n   --> $DIR/namespace-mix.rs:100:11\n    |\n LL |     check(m7::V); //~ ERROR expected value, found struct variant `m7::V`\n-   |           ^^^^-\n-   |           |   |\n-   |           |   did you mean `TV`?\n-   |           did you mean `m7::V { /* fields */ }`?\n+   |           ^^^^^ did you mean `m7::V { /* fields */ }`?\n+help: a tuple variant with a similar name exists\n+   |\n+LL |     check(m7::TV); //~ ERROR expected value, found struct variant `m7::V`\n+   |               ^^\n help: possible better candidates are found in other modules, you can import them into scope\n    |\n LL | use m8::V;\n@@ -49,10 +54,11 @@ error[E0423]: expected value, found struct variant `xm7::V`\n   --> $DIR/namespace-mix.rs:106:11\n    |\n LL |     check(xm7::V); //~ ERROR expected value, found struct variant `xm7::V`\n-   |           ^^^^^-\n-   |           |    |\n-   |           |    did you mean `TV`?\n-   |           did you mean `xm7::V { /* fields */ }`?\n+   |           ^^^^^^ did you mean `xm7::V { /* fields */ }`?\n+help: a tuple variant with a similar name exists\n+   |\n+LL |     check(xm7::TV); //~ ERROR expected value, found struct variant `xm7::V`\n+   |                ^^\n help: possible better candidates are found in other modules, you can import them into scope\n    |\n LL | use m8::V;"}, {"sha": "654814afcfe17d0f98ef7ca19c85efb9fd2ac573", "filename": "src/test/ui/pattern/pattern-error-continue.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-error-continue.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -10,7 +10,7 @@ error[E0532]: expected tuple struct/variant, found unit variant `A::D`\n LL |         A::D(_) => (),       //~ ERROR expected tuple struct/variant, found unit variant `A::D`\n    |         ^^^-\n    |            |\n-   |            did you mean `B`?\n+   |            help: a tuple variant with a similar name exists: `B`\n \n error[E0023]: this pattern has 3 fields, but the corresponding tuple variant has 2 fields\n   --> $DIR/pattern-error-continue.rs:17:9"}, {"sha": "6ba2dbe41a2b4da1a3ecc697327063ff4e6d01a5", "filename": "src/test/ui/privacy/privacy-ns1.stderr", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns1.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -2,7 +2,11 @@ error[E0423]: expected function, found trait `Bar`\n   --> $DIR/privacy-ns1.rs:20:5\n    |\n LL |     Bar();  //~ ERROR expected function, found trait `Bar`\n-   |     ^^^ did you mean `Baz`?\n+   |     ^^^\n+help: a unit struct with a similar name exists\n+   |\n+LL |     Baz();  //~ ERROR expected function, found trait `Bar`\n+   |     ^^^\n help: possible better candidates are found in other modules, you can import them into scope\n    |\n LL | use foo1::Bar;\n@@ -16,7 +20,11 @@ error[E0573]: expected type, found function `Bar`\n   --> $DIR/privacy-ns1.rs:35:17\n    |\n LL |     let _x: Box<Bar>;  //~ ERROR expected type, found function `Bar`\n-   |                 ^^^ did you mean `Baz`?\n+   |                 ^^^\n+help: a struct with a similar name exists\n+   |\n+LL |     let _x: Box<Baz>;  //~ ERROR expected type, found function `Bar`\n+   |                 ^^^\n help: possible better candidates are found in other modules, you can import them into scope\n    |\n LL | use foo1::Bar;\n@@ -30,7 +38,11 @@ error[E0425]: cannot find function `Bar` in this scope\n   --> $DIR/privacy-ns1.rs:50:5\n    |\n LL |     Bar();  //~ ERROR cannot find function `Bar` in this scope\n-   |     ^^^ did you mean `Baz`?\n+   |     ^^^\n+help: a unit struct with a similar name exists\n+   |\n+LL |     Baz();  //~ ERROR cannot find function `Bar` in this scope\n+   |     ^^^\n help: possible candidates are found in other modules, you can import them into scope\n    |\n LL | use foo1::Bar;\n@@ -44,7 +56,11 @@ error[E0412]: cannot find type `Bar` in this scope\n   --> $DIR/privacy-ns1.rs:51:17\n    |\n LL |     let _x: Box<Bar>;  //~ ERROR cannot find type `Bar` in this scope\n-   |                 ^^^ did you mean `Baz`?\n+   |                 ^^^\n+help: a struct with a similar name exists\n+   |\n+LL |     let _x: Box<Baz>;  //~ ERROR cannot find type `Bar` in this scope\n+   |                 ^^^\n help: possible candidates are found in other modules, you can import them into scope\n    |\n LL | use foo1::Bar;"}, {"sha": "0012072ed1138ceb7168863ab56c1963b9bdd3c4", "filename": "src/test/ui/privacy/privacy-ns2.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -16,7 +16,11 @@ error[E0423]: expected function, found trait `Bar`\n   --> $DIR/privacy-ns2.rs:26:5\n    |\n LL |     Bar(); //~ ERROR expected function, found trait `Bar`\n-   |     ^^^ did you mean `Baz`?\n+   |     ^^^\n+help: a unit struct with a similar name exists\n+   |\n+LL |     Baz(); //~ ERROR expected function, found trait `Bar`\n+   |     ^^^\n help: possible better candidates are found in other modules, you can import them into scope\n    |\n LL | use foo1::Bar;\n@@ -44,7 +48,11 @@ error[E0573]: expected type, found function `Bar`\n   --> $DIR/privacy-ns2.rs:47:17\n    |\n LL |     let _x: Box<Bar>; //~ ERROR expected type, found function `Bar`\n-   |                 ^^^ did you mean `Baz`?\n+   |                 ^^^\n+help: a struct with a similar name exists\n+   |\n+LL |     let _x: Box<Baz>; //~ ERROR expected type, found function `Bar`\n+   |                 ^^^\n help: possible better candidates are found in other modules, you can import them into scope\n    |\n LL | use foo1::Bar;"}, {"sha": "8d2957ef5da74297bd3d39df7230697d2c8c061e", "filename": "src/test/ui/proc-macro/lints_in_proc_macros.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fproc-macro%2Flints_in_proc_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fproc-macro%2Flints_in_proc_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Flints_in_proc_macros.rs?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -11,6 +11,7 @@ fn main() {\n     let foobar = 42;\n     bang_proc_macro2!();\n     //~^ ERROR cannot find value `foobar2` in this scope\n-    //~^^ did you mean `foobar`?\n+    //~| HELP a local variable with a similar name exists\n+    //~| SUGGESTION foobar\n     println!(\"{}\", x);\n }"}, {"sha": "2d97cd700be9ffe3cbcfa7059f83c436b0efd6f7", "filename": "src/test/ui/proc-macro/lints_in_proc_macros.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fproc-macro%2Flints_in_proc_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fproc-macro%2Flints_in_proc_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Flints_in_proc_macros.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -2,7 +2,7 @@ error[E0425]: cannot find value `foobar2` in this scope\n   --> $DIR/lints_in_proc_macros.rs:12:5\n    |\n LL |     bang_proc_macro2!();\n-   |     ^^^^^^^^^^^^^^^^^^^^ did you mean `foobar`?\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `foobar`\n \n error: aborting due to previous error\n "}, {"sha": "423122539c8036b5d10200edd40577d489721987", "filename": "src/test/ui/proc-macro/parent-source-spans.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -128,7 +128,7 @@ error[E0425]: cannot find value `ok` in this scope\n   --> $DIR/parent-source-spans.rs:30:5\n    |\n LL |     parent_source_spans!($($tokens)*);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ did you mean `Ok`?\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a tuple variant with a similar name exists: `Ok`\n ...\n LL |     one!(\"hello\", \"world\");\n    |     ----------------------- in this macro invocation\n@@ -137,7 +137,7 @@ error[E0425]: cannot find value `ok` in this scope\n   --> $DIR/parent-source-spans.rs:30:5\n    |\n LL |     parent_source_spans!($($tokens)*);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ did you mean `Ok`?\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a tuple variant with a similar name exists: `Ok`\n ...\n LL |     two!(\"yay\", \"rust\");\n    |     -------------------- in this macro invocation\n@@ -146,7 +146,7 @@ error[E0425]: cannot find value `ok` in this scope\n   --> $DIR/parent-source-spans.rs:30:5\n    |\n LL |     parent_source_spans!($($tokens)*);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ did you mean `Ok`?\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a tuple variant with a similar name exists: `Ok`\n ...\n LL |     three!(\"hip\", \"hop\");\n    |     --------------------- in this macro invocation"}, {"sha": "c97fb4db6be6b8158087dc1fad5491638739f8e3", "filename": "src/test/ui/resolve/issue-39226.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fresolve%2Fissue-39226.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fresolve%2Fissue-39226.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-39226.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -4,8 +4,8 @@ error[E0423]: expected value, found struct `Handle`\n LL |         handle: Handle\n    |                 ^^^^^^\n    |                 |\n-   |                 did you mean `handle`?\n    |                 did you mean `Handle { /* fields */ }`?\n+   |                 help: a local variable with a similar name exists: `handle`\n \n error: aborting due to previous error\n "}, {"sha": "57ad5f22f4c24e57920dfa3dcc1fb3cb67d38b60", "filename": "src/test/ui/resolve/issue-5035.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fresolve%2Fissue-5035.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fresolve%2Fissue-5035.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-5035.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -10,8 +10,8 @@ error[E0404]: expected trait, found type alias `K`\n LL | impl K for isize {} //~ ERROR expected trait, found type alias `K`\n    |      ^\n    |      |\n-   |      did you mean `I`?\n    |      type aliases cannot be used as traits\n+   |      help: a trait with a similar name exists: `I`\n    |\n    = note: did you mean to use a trait alias?\n "}, {"sha": "cddfe4e7ff55ad378b1969a50cc4d96f266999ec", "filename": "src/test/ui/resolve/levenshtein.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -2,19 +2,19 @@ error[E0412]: cannot find type `esize` in this scope\n   --> $DIR/levenshtein.rs:5:11\n    |\n LL | fn foo(c: esize) {} // Misspelled primitive type name.\n-   |           ^^^^^ did you mean `isize`?\n+   |           ^^^^^ help: a primitive type with a similar name exists: `isize`\n \n error[E0412]: cannot find type `Baz` in this scope\n   --> $DIR/levenshtein.rs:10:10\n    |\n LL | type A = Baz; // Misspelled type name.\n-   |          ^^^ did you mean `Bar`?\n+   |          ^^^ help: an enum with a similar name exists: `Bar`\n \n error[E0412]: cannot find type `Opiton` in this scope\n   --> $DIR/levenshtein.rs:12:10\n    |\n LL | type B = Opiton<u8>; // Misspelled type name from the prelude.\n-   |          ^^^^^^ did you mean `Option`?\n+   |          ^^^^^^ help: an enum with a similar name exists: `Option`\n \n error[E0412]: cannot find type `Baz` in this scope\n   --> $DIR/levenshtein.rs:16:14\n@@ -26,25 +26,25 @@ error[E0425]: cannot find value `MAXITEM` in this scope\n   --> $DIR/levenshtein.rs:24:20\n    |\n LL |     let v = [0u32; MAXITEM]; // Misspelled constant name.\n-   |                    ^^^^^^^ did you mean `MAX_ITEM`?\n+   |                    ^^^^^^^ help: a constant with a similar name exists: `MAX_ITEM`\n \n error[E0425]: cannot find function `foobar` in this scope\n   --> $DIR/levenshtein.rs:26:5\n    |\n LL |     foobar(); // Misspelled function name.\n-   |     ^^^^^^ did you mean `foo_bar`?\n+   |     ^^^^^^ help: a function with a similar name exists: `foo_bar`\n \n error[E0412]: cannot find type `first` in module `m`\n   --> $DIR/levenshtein.rs:28:15\n    |\n LL |     let b: m::first = m::second; // Misspelled item in module.\n-   |               ^^^^^ did you mean `First`?\n+   |               ^^^^^ help: a struct with a similar name exists: `First`\n \n error[E0425]: cannot find value `second` in module `m`\n   --> $DIR/levenshtein.rs:28:26\n    |\n LL |     let b: m::first = m::second; // Misspelled item in module.\n-   |                          ^^^^^^ did you mean `Second`?\n+   |                          ^^^^^^ help: a unit struct with a similar name exists: `Second`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "01f0941282e354607477954fbeeb8b28e90069f2", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -13,7 +13,7 @@ error[E0423]: expected value, found enum `Z`\n   --> $DIR/privacy-enum-ctor.rs:25:9\n    |\n LL |         Z;\n-   |         ^ did you mean `f`?\n+   |         ^ help: a function with a similar name exists: `f`\n    |\n    = note: did you mean to use one of the following variants?\n            - `m::Z::Fn`\n@@ -30,14 +30,16 @@ error[E0423]: expected value, found enum `m::E`\n   --> $DIR/privacy-enum-ctor.rs:41:16\n    |\n LL |     let _: E = m::E;\n-   |                ^^^-\n-   |                   |\n-   |                   did you mean `f`?\n+   |                ^^^^\n    |\n    = note: did you mean to use one of the following variants?\n            - `E::Fn`\n            - `E::Struct`\n            - `E::Unit`\n+help: a function with a similar name exists\n+   |\n+LL |     let _: E = m::f;\n+   |                   ^\n help: possible better candidates are found in other modules, you can import them into scope\n    |\n LL | use std::f32::consts::E;\n@@ -78,7 +80,11 @@ error[E0412]: cannot find type `Z` in this scope\n   --> $DIR/privacy-enum-ctor.rs:57:12\n    |\n LL |     let _: Z = m::n::Z;\n-   |            ^ did you mean `E`?\n+   |            ^\n+help: an enum with a similar name exists\n+   |\n+LL |     let _: E = m::n::Z;\n+   |            ^\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL | use m::n::Z;\n@@ -99,7 +105,11 @@ error[E0412]: cannot find type `Z` in this scope\n   --> $DIR/privacy-enum-ctor.rs:61:12\n    |\n LL |     let _: Z = m::n::Z::Fn;\n-   |            ^ did you mean `E`?\n+   |            ^\n+help: an enum with a similar name exists\n+   |\n+LL |     let _: E = m::n::Z::Fn;\n+   |            ^\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL | use m::n::Z;\n@@ -109,7 +119,11 @@ error[E0412]: cannot find type `Z` in this scope\n   --> $DIR/privacy-enum-ctor.rs:64:12\n    |\n LL |     let _: Z = m::n::Z::Struct;\n-   |            ^ did you mean `E`?\n+   |            ^\n+help: an enum with a similar name exists\n+   |\n+LL |     let _: E = m::n::Z::Struct;\n+   |            ^\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL | use m::n::Z;\n@@ -125,7 +139,11 @@ error[E0412]: cannot find type `Z` in this scope\n   --> $DIR/privacy-enum-ctor.rs:68:12\n    |\n LL |     let _: Z = m::n::Z::Unit {};\n-   |            ^ did you mean `E`?\n+   |            ^\n+help: an enum with a similar name exists\n+   |\n+LL |     let _: E = m::n::Z::Unit {};\n+   |            ^\n help: possible candidate is found in another module, you can import it into scope\n    |\n LL | use m::n::Z;"}, {"sha": "44ecf6b97bf509da5d85383989607aae62a2ce28", "filename": "src/test/ui/resolve/privacy-struct-ctor.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -2,10 +2,11 @@ error[E0423]: expected value, found struct `Z`\n   --> $DIR/privacy-struct-ctor.rs:20:9\n    |\n LL |         Z;\n+   |         ^ constructor is not visible here due to private fields\n+help: a tuple struct with a similar name exists\n+   |\n+LL |         S;\n    |         ^\n-   |         |\n-   |         did you mean `S`?\n-   |         constructor is not visible here due to private fields\n help: possible better candidate is found in another module, you can import it into scope\n    |\n LL |     use m::n::Z;"}, {"sha": "8a9426bfee862d4a5b79c8050c68a3aecc7052bd", "filename": "src/test/ui/resolve/suggest-path-instead-of-mod-dot-item.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -28,7 +28,7 @@ error[E0423]: expected value, found module `a::b`\n LL |     a::b.J\n    |     ^^^---\n    |     |  |\n-   |     |  did you mean `I`?\n+   |     |  help: a constant with a similar name exists: `I`\n    |     did you mean `a::b::J`?\n \n error[E0423]: expected value, found module `a`\n@@ -45,15 +45,15 @@ error[E0423]: expected value, found module `a::b`\n LL |     v.push(a::b);\n    |            ^^^-\n    |               |\n-   |               did you mean `I`?\n+   |               help: a constant with a similar name exists: `I`\n \n error[E0423]: expected value, found module `a::b`\n   --> $DIR/suggest-path-instead-of-mod-dot-item.rs:45:5\n    |\n LL |     a::b.f()\n    |     ^^^-----\n    |     |  |\n-   |     |  did you mean `I`?\n+   |     |  help: a constant with a similar name exists: `I`\n    |     did you mean `a::b::f(...)`?\n \n error[E0423]: expected value, found module `a::b`\n@@ -62,15 +62,15 @@ error[E0423]: expected value, found module `a::b`\n LL |     a::b\n    |     ^^^-\n    |        |\n-   |        did you mean `I`?\n+   |        help: a constant with a similar name exists: `I`\n \n error[E0423]: expected function, found module `a::b`\n   --> $DIR/suggest-path-instead-of-mod-dot-item.rs:55:5\n    |\n LL |     a::b()\n    |     ^^^-\n    |        |\n-   |        did you mean `I`?\n+   |        help: a constant with a similar name exists: `I`\n \n error: aborting due to 9 previous errors\n "}, {"sha": "f299aa40a31efeac5fce2a32d3704ff4c84d51d4", "filename": "src/test/ui/resolve/tuple-struct-alias.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fresolve%2Ftuple-struct-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fresolve%2Ftuple-struct-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftuple-struct-alias.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -2,15 +2,15 @@ error[E0423]: expected function, found type alias `A`\n   --> $DIR/tuple-struct-alias.rs:5:13\n    |\n LL |     let s = A(0, 1); //~ ERROR expected function\n-   |             ^ did you mean `S`?\n+   |             ^ help: a tuple struct with a similar name exists: `S`\n    |\n    = note: can't use a type alias as a constructor\n \n error[E0532]: expected tuple struct/variant, found type alias `A`\n   --> $DIR/tuple-struct-alias.rs:7:9\n    |\n LL |         A(..) => {} //~ ERROR expected tuple struct/variant\n-   |         ^ did you mean `S`?\n+   |         ^ help: a tuple struct with a similar name exists: `S`\n    |\n    = note: can't use a type alias as a constructor\n "}, {"sha": "7b12c4430ed4a7d794655c2796987a8ccbbeb763", "filename": "src/test/ui/span/typo-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fspan%2Ftypo-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fspan%2Ftypo-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Ftypo-suggestion.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -8,7 +8,7 @@ error[E0425]: cannot find value `fob` in this scope\n   --> $DIR/typo-suggestion.rs:8:26\n    |\n LL |     println!(\"Hello {}\", fob); //~ ERROR cannot find value\n-   |                          ^^^ did you mean `foo`?\n+   |                          ^^^ help: a local variable with a similar name exists: `foo`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d7914528f468625ca31e2c7f9e50d703c59ce1e3", "filename": "src/test/ui/span/visibility-ty-params.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fspan%2Fvisibility-ty-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fspan%2Fvisibility-ty-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvisibility-ty-params.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -16,7 +16,7 @@ error[E0577]: expected module, found struct `S`\n LL | m!{ S<u8> } //~ ERROR unexpected generic arguments in path\n    |     -^^^^\n    |     |\n-   |     did you mean `m`?\n+   |     help: a module with a similar name exists: `m`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "37ec6c0f015ff16874f801992b49938e1ff64de6", "filename": "src/test/ui/structs/struct-fields-shorthand-unresolved.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fstructs%2Fstruct-fields-shorthand-unresolved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fstructs%2Fstruct-fields-shorthand-unresolved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-fields-shorthand-unresolved.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -2,7 +2,7 @@ error[E0425]: cannot find value `y` in this scope\n   --> $DIR/struct-fields-shorthand-unresolved.rs:10:9\n    |\n LL |         y //~ ERROR cannot find value `y` in this scope\n-   |         ^ did you mean `x`?\n+   |         ^ help: a local variable with a similar name exists: `x`\n \n error: aborting due to previous error\n "}, {"sha": "99da4b7c87af0ae7a9f9b7afb16d1992f16499e0", "filename": "src/test/ui/traits/trait-impl-for-module.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-for-module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-for-module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-impl-for-module.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -2,7 +2,7 @@ error[E0573]: expected type, found module `a`\n   --> $DIR/trait-impl-for-module.rs:7:12\n    |\n LL | impl A for a { //~ ERROR expected type, found module\n-   |            ^ did you mean `A`?\n+   |            ^ help: a trait with a similar name exists: `A`\n \n error: aborting due to previous error\n "}, {"sha": "3cd1cac71fa76b8ca37b9c9066a59afd9375c237", "filename": "src/test/ui/ufcs/ufcs-partially-resolved.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -14,7 +14,7 @@ error[E0576]: cannot find associated type `N` in trait `Tr`\n   --> $DIR/ufcs-partially-resolved.rs:19:24\n    |\n LL |     let _: <u8 as Tr>::N; //~ ERROR cannot find associated type `N` in trait `Tr`\n-   |                        ^ did you mean `Y`?\n+   |                        ^ help: an associated type with a similar name exists: `Y`\n \n error[E0576]: cannot find associated type `N` in enum `E`\n   --> $DIR/ufcs-partially-resolved.rs:20:23\n@@ -32,7 +32,7 @@ error[E0576]: cannot find method or associated constant `N` in trait `Tr`\n   --> $DIR/ufcs-partially-resolved.rs:22:17\n    |\n LL |     <u8 as Tr>::N; //~ ERROR cannot find method or associated constant `N` in trait `Tr`\n-   |                 ^ did you mean `Y`?\n+   |                 ^ help: a method with a similar name exists: `Y`\n \n error[E0576]: cannot find method or associated constant `N` in enum `E`\n   --> $DIR/ufcs-partially-resolved.rs:23:16\n@@ -62,7 +62,7 @@ error[E0576]: cannot find associated type `N` in trait `Tr`\n   --> $DIR/ufcs-partially-resolved.rs:30:24\n    |\n LL |     let _: <u8 as Tr>::N::NN; //~ ERROR cannot find associated type `N` in trait `Tr`\n-   |                        ^ did you mean `Y`?\n+   |                        ^ help: an associated type with a similar name exists: `Y`\n \n error[E0576]: cannot find associated type `N` in enum `E`\n   --> $DIR/ufcs-partially-resolved.rs:31:23\n@@ -80,7 +80,7 @@ error[E0576]: cannot find associated type `N` in trait `Tr`\n   --> $DIR/ufcs-partially-resolved.rs:33:17\n    |\n LL |     <u8 as Tr>::N::NN; //~ ERROR cannot find associated type `N` in trait `Tr`\n-   |                 ^ did you mean `Y`?\n+   |                 ^ help: an associated type with a similar name exists: `Y`\n \n error[E0576]: cannot find associated type `N` in enum `E`\n   --> $DIR/ufcs-partially-resolved.rs:34:16\n@@ -160,15 +160,15 @@ error[E0575]: expected associated type, found method `Dr::Z`\n LL |     let _: <u8 as Dr>::Z; //~ ERROR expected associated type, found method `Dr::Z`\n    |            ^^^^^^^^^^^^-\n    |                        |\n-   |                        did you mean `X`?\n+   |                        help: an associated type with a similar name exists: `X`\n \n error[E0575]: expected method or associated constant, found associated type `Dr::X`\n   --> $DIR/ufcs-partially-resolved.rs:53:5\n    |\n LL |     <u8 as Dr>::X; //~ ERROR expected method or associated constant, found associated type `Dr::X`\n    |     ^^^^^^^^^^^^-\n    |                 |\n-   |                 did you mean `Z`?\n+   |                 help: a method with a similar name exists: `Z`\n    |\n    = note: can't use a type alias as a constructor\n \n@@ -178,7 +178,7 @@ error[E0575]: expected associated type, found method `Dr::Z`\n LL |     let _: <u8 as Dr>::Z::N; //~ ERROR expected associated type, found method `Dr::Z`\n    |            ^^^^^^^^^^^^-^^^\n    |                        |\n-   |                        did you mean `X`?\n+   |                        help: an associated type with a similar name exists: `X`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/ufcs-partially-resolved.rs:36:12"}, {"sha": "5a662e0ea89c20b3db87c94ba447bfc6d35f9824", "filename": "src/test/ui/ui-testing-optout.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fui-testing-optout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b7d8f99ed843cbb31989d0635a8c6651c28df38/src%2Ftest%2Fui%2Fui-testing-optout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fui-testing-optout.stderr?ref=0b7d8f99ed843cbb31989d0635a8c6651c28df38", "patch": "@@ -2,19 +2,19 @@ error[E0412]: cannot find type `B` in this scope\n  --> $DIR/ui-testing-optout.rs:4:10\n   |\n 4 | type A = B; //~ ERROR\n-  |          ^ did you mean `A`?\n+  |          ^ help: a type alias with a similar name exists: `A`\n \n error[E0412]: cannot find type `D` in this scope\n   --> $DIR/ui-testing-optout.rs:10:10\n    |\n 10 | type C = D; //~ ERROR\n-   |          ^ did you mean `A`?\n+   |          ^ help: a type alias with a similar name exists: `A`\n \n error[E0412]: cannot find type `F` in this scope\n   --> $DIR/ui-testing-optout.rs:95:10\n    |\n 95 | type E = F; //~ ERROR\n-   |          ^ did you mean `A`?\n+   |          ^ help: a type alias with a similar name exists: `A`\n \n error: aborting due to 3 previous errors\n "}]}