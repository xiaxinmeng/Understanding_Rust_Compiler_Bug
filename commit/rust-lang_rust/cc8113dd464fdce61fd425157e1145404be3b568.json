{"sha": "cc8113dd464fdce61fd425157e1145404be3b568", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjODExM2RkNDY0ZmRjZTYxZmQ0MjUxNTdlMTE0NTQwNGJlM2I1Njg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-01T10:45:37Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-01T11:14:38Z"}, "message": "Simplify error handing", "tree": {"sha": "d6f25e08d77a45c70754d7e2b91a7be9897b0ce3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6f25e08d77a45c70754d7e2b91a7be9897b0ce3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc8113dd464fdce61fd425157e1145404be3b568", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc8113dd464fdce61fd425157e1145404be3b568", "html_url": "https://github.com/rust-lang/rust/commit/cc8113dd464fdce61fd425157e1145404be3b568", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc8113dd464fdce61fd425157e1145404be3b568/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f01846b8eec9c8084153cb3cd6aff6e15608a01f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f01846b8eec9c8084153cb3cd6aff6e15608a01f", "html_url": "https://github.com/rust-lang/rust/commit/f01846b8eec9c8084153cb3cd6aff6e15608a01f"}], "stats": {"total": 55, "additions": 17, "deletions": 38}, "files": [{"sha": "13494a731b709344782bd1f5dd95c37f8fb83033", "filename": "crates/ra_flycheck/src/lib.rs", "status": "modified", "additions": 17, "deletions": 38, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/cc8113dd464fdce61fd425157e1145404be3b568/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc8113dd464fdce61fd425157e1145404be3b568/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_flycheck%2Fsrc%2Flib.rs?ref=cc8113dd464fdce61fd425157e1145404be3b568", "patch": "@@ -4,8 +4,8 @@\n mod conv;\n \n use std::{\n-    env, error, fmt,\n-    io::{BufRead, BufReader},\n+    env,\n+    io::{self, BufRead, BufReader},\n     path::PathBuf,\n     process::{Command, Stdio},\n     time::Instant,\n@@ -279,27 +279,12 @@ enum CheckEvent {\n     End,\n }\n \n-#[derive(Debug)]\n-pub struct CargoError(String);\n-\n-impl fmt::Display for CargoError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"Cargo failed: {}\", self.0)\n-    }\n-}\n-impl error::Error for CargoError {}\n-\n fn run_cargo(\n     mut command: Command,\n     on_message: &mut dyn FnMut(cargo_metadata::Message) -> bool,\n-) -> Result<(), CargoError> {\n-    dbg!(&command);\n-    let mut child = command\n-        .stdout(Stdio::piped())\n-        .stderr(Stdio::null())\n-        .stdin(Stdio::null())\n-        .spawn()\n-        .expect(\"couldn't launch cargo\");\n+) -> io::Result<()> {\n+    let mut child =\n+        command.stdout(Stdio::piped()).stderr(Stdio::null()).stdin(Stdio::null()).spawn()?;\n \n     // We manually read a line at a time, instead of using serde's\n     // stream deserializers, because the deserializer cannot recover\n@@ -313,13 +298,7 @@ fn run_cargo(\n     let mut read_at_least_one_message = false;\n \n     for line in stdout.lines() {\n-        let line = match line {\n-            Ok(line) => line,\n-            Err(err) => {\n-                log::error!(\"Couldn't read line from cargo: {}\", err);\n-                continue;\n-            }\n-        };\n+        let line = line?;\n \n         let message = serde_json::from_str::<cargo_metadata::Message>(&line);\n         let message = match message {\n@@ -340,20 +319,20 @@ fn run_cargo(\n     // It is okay to ignore the result, as it only errors if the process is already dead\n     let _ = child.kill();\n \n-    let err_msg = match child.wait() {\n-        Ok(exit_code) if !exit_code.success() && !read_at_least_one_message => {\n-            // FIXME: Read the stderr to display the reason, see `read2()` reference in PR comment:\n-            // https://github.com/rust-analyzer/rust-analyzer/pull/3632#discussion_r395605298\n+    let exit_status = child.wait()?;\n+    if !exit_status.success() && !read_at_least_one_message {\n+        // FIXME: Read the stderr to display the reason, see `read2()` reference in PR comment:\n+        // https://github.com/rust-analyzer/rust-analyzer/pull/3632#discussion_r395605298\n+        return Err(io::Error::new(\n+            io::ErrorKind::Other,\n             format!(\n                 \"the command produced no valid metadata (exit code: {:?}): {:?}\",\n-                exit_code, command\n-            )\n-        }\n-        Err(err) => format!(\"io error: {:?}\", err),\n-        Ok(_) => return Ok(()),\n-    };\n+                exit_status, command\n+            ),\n+        ));\n+    }\n \n-    Err(CargoError(err_msg))\n+    Ok(())\n }\n \n fn cargo_binary() -> String {"}]}