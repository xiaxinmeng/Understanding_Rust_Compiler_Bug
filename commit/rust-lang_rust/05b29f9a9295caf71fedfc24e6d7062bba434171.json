{"sha": "05b29f9a9295caf71fedfc24e6d7062bba434171", "node_id": "C_kwDOAAsO6NoAKDA1YjI5ZjlhOTI5NWNhZjcxZmVkZmMyNGU2ZDcwNjJiYmE0MzQxNzE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-02-05T14:48:02Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-30T11:51:49Z"}, "message": "Inline WhereClause into Generics.", "tree": {"sha": "8c94ee91cac59af0af3d8fd0027c8a70f7c1d6c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c94ee91cac59af0af3d8fd0027c8a70f7c1d6c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05b29f9a9295caf71fedfc24e6d7062bba434171", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05b29f9a9295caf71fedfc24e6d7062bba434171", "html_url": "https://github.com/rust-lang/rust/commit/05b29f9a9295caf71fedfc24e6d7062bba434171", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05b29f9a9295caf71fedfc24e6d7062bba434171/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71b4e2d852be70174579e7e5a96644418348a7da", "url": "https://api.github.com/repos/rust-lang/rust/commits/71b4e2d852be70174579e7e5a96644418348a7da", "html_url": "https://github.com/rust-lang/rust/commit/71b4e2d852be70174579e7e5a96644418348a7da"}], "stats": {"total": 237, "additions": 98, "deletions": 139}, "files": [{"sha": "764eb4eb8ba2fdea05e406ab1fbe974471c528b7", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=05b29f9a9295caf71fedfc24e6d7062bba434171", "patch": "@@ -1338,9 +1338,18 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             }\n         }\n \n+        let predicates = self.arena.alloc_from_iter(\n+            generics\n+                .where_clause\n+                .predicates\n+                .iter()\n+                .map(|predicate| self.lower_where_predicate(predicate)),\n+        );\n+\n         GenericsCtor {\n             params: self.lower_generic_params_mut(&generics.params, itctx).collect(),\n-            where_clause: self.lower_where_clause(&generics.where_clause),\n+            predicates,\n+            where_clause_span: self.lower_span(generics.where_clause.span),\n             span: self.lower_span(generics.span),\n         }\n     }\n@@ -1354,15 +1363,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         generics_ctor.into_generics(self.arena)\n     }\n \n-    fn lower_where_clause(&mut self, wc: &WhereClause) -> hir::WhereClause<'hir> {\n-        hir::WhereClause {\n-            predicates: self.arena.alloc_from_iter(\n-                wc.predicates.iter().map(|predicate| self.lower_where_predicate(predicate)),\n-            ),\n-            span: self.lower_span(wc.span),\n-        }\n-    }\n-\n     fn lower_where_predicate(&mut self, pred: &WherePredicate) -> hir::WherePredicate<'hir> {\n         match *pred {\n             WherePredicate::BoundPredicate(WhereBoundPredicate {\n@@ -1414,15 +1414,17 @@ impl<'hir> LoweringContext<'_, 'hir> {\n /// Helper struct for delayed construction of Generics.\n pub(super) struct GenericsCtor<'hir> {\n     pub(super) params: SmallVec<[hir::GenericParam<'hir>; 4]>,\n-    where_clause: hir::WhereClause<'hir>,\n+    predicates: &'hir [hir::WherePredicate<'hir>],\n+    where_clause_span: Span,\n     span: Span,\n }\n \n impl<'hir> GenericsCtor<'hir> {\n     pub(super) fn into_generics(self, arena: &'hir Arena<'hir>) -> &'hir hir::Generics<'hir> {\n         arena.alloc(hir::Generics {\n             params: arena.alloc_from_iter(self.params),\n-            where_clause: self.where_clause,\n+            predicates: self.predicates,\n+            where_clause_span: self.where_clause_span,\n             span: self.span,\n         })\n     }"}, {"sha": "6acd8fcc5ce5ca34116e8bd489bc210139871052", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=05b29f9a9295caf71fedfc24e6d7062bba434171", "patch": "@@ -1385,7 +1385,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             let opaque_ty_item = hir::OpaqueTy {\n                 generics: self.arena.alloc(hir::Generics {\n                     params: lifetime_defs,\n-                    where_clause: hir::WhereClause { predicates: &[], span: lctx.lower_span(span) },\n+                    predicates: &[],\n+                    where_clause_span: lctx.lower_span(span),\n                     span: lctx.lower_span(span),\n                 }),\n                 bounds: hir_bounds,\n@@ -1717,7 +1718,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             let opaque_ty_item = hir::OpaqueTy {\n                 generics: this.arena.alloc(hir::Generics {\n                     params: generic_params,\n-                    where_clause: hir::WhereClause { predicates: &[], span: this.lower_span(span) },\n+                    predicates: &[],\n+                    where_clause_span: this.lower_span(span),\n                     span: this.lower_span(span),\n                 }),\n                 bounds: arena_vec![this; future_bound],"}, {"sha": "e34f9e8ca6fb2ce89e68549c1477053317336aac", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=05b29f9a9295caf71fedfc24e6d7062bba434171", "patch": "@@ -567,17 +567,15 @@ pub struct GenericParamCount {\n #[derive(Debug, HashStable_Generic)]\n pub struct Generics<'hir> {\n     pub params: &'hir [GenericParam<'hir>],\n-    pub where_clause: WhereClause<'hir>,\n+    pub predicates: &'hir [WherePredicate<'hir>],\n+    pub where_clause_span: Span,\n     pub span: Span,\n }\n \n impl<'hir> Generics<'hir> {\n     pub const fn empty() -> &'hir Generics<'hir> {\n-        const NOPE: Generics<'_> = Generics {\n-            params: &[],\n-            where_clause: WhereClause { predicates: &[], span: DUMMY_SP },\n-            span: DUMMY_SP,\n-        };\n+        const NOPE: Generics<'_> =\n+            Generics { params: &[], predicates: &[], where_clause_span: DUMMY_SP, span: DUMMY_SP };\n         &NOPE\n     }\n \n@@ -597,30 +595,20 @@ impl<'hir> Generics<'hir> {\n             self.params.iter().map(|p| p.span).collect::<Vec<Span>>().into()\n         }\n     }\n-}\n \n-/// A where-clause in a definition.\n-#[derive(Debug, HashStable_Generic)]\n-pub struct WhereClause<'hir> {\n-    pub predicates: &'hir [WherePredicate<'hir>],\n-    // Only valid if predicates aren't empty.\n-    pub span: Span,\n-}\n-\n-impl WhereClause<'_> {\n-    pub fn span(&self) -> Option<Span> {\n-        if self.predicates.is_empty() { None } else { Some(self.span) }\n+    pub fn where_clause_span(&self) -> Option<Span> {\n+        if self.predicates.is_empty() { None } else { Some(self.where_clause_span) }\n     }\n \n-    /// The `WhereClause` under normal circumstances points at either the predicates or the empty\n+    /// The `where_span` under normal circumstances points at either the predicates or the empty\n     /// space where the `where` clause should be. Only of use for diagnostic suggestions.\n     pub fn span_for_predicates_or_empty_place(&self) -> Span {\n-        self.span\n+        self.where_clause_span\n     }\n \n     /// `Span` where further predicates would be suggested, accounting for trailing commas, like\n     ///  in `fn foo<T>(t: T) where T: Foo,` so we don't suggest two trailing commas.\n-    pub fn tail_span_for_suggestion(&self) -> Span {\n+    pub fn tail_span_for_predicate_suggestion(&self) -> Span {\n         let end = self.span_for_predicates_or_empty_place().shrink_to_hi();\n         self.predicates.last().map_or(end, |p| p.span()).shrink_to_hi().to(end)\n     }"}, {"sha": "85ef54f88905eac96e3a9728fefb6f540416f36b", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=05b29f9a9295caf71fedfc24e6d7062bba434171", "patch": "@@ -908,7 +908,7 @@ pub fn walk_const_param_default<'v, V: Visitor<'v>>(visitor: &mut V, ct: &'v Ano\n \n pub fn walk_generics<'v, V: Visitor<'v>>(visitor: &mut V, generics: &'v Generics<'v>) {\n     walk_list!(visitor, visit_generic_param, generics.params);\n-    walk_list!(visitor, visit_where_predicate, generics.where_clause.predicates);\n+    walk_list!(visitor, visit_where_predicate, generics.predicates);\n }\n \n pub fn walk_where_predicate<'v, V: Visitor<'v>>("}, {"sha": "375a96b151962fc57aeeb7805a86c6bf91997698", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=05b29f9a9295caf71fedfc24e6d7062bba434171", "patch": "@@ -445,7 +445,7 @@ impl<'a> State<'a> {\n         if let Some(bounds) = bounds {\n             self.print_bounds(\":\", bounds);\n         }\n-        self.print_where_clause(&generics.where_clause);\n+        self.print_where_clause(generics);\n         if let Some(ty) = ty {\n             self.space();\n             self.word_space(\"=\");\n@@ -465,7 +465,7 @@ impl<'a> State<'a> {\n         self.print_generic_params(&generics.params);\n         self.end(); // end the inner ibox\n \n-        self.print_where_clause(&generics.where_clause);\n+        self.print_where_clause(generics);\n         self.space();\n         inner(self);\n         self.word(\";\");\n@@ -650,7 +650,7 @@ impl<'a> State<'a> {\n                 }\n \n                 self.print_type(&self_ty);\n-                self.print_where_clause(&generics.where_clause);\n+                self.print_where_clause(generics);\n \n                 self.space();\n                 self.bopen();\n@@ -678,7 +678,7 @@ impl<'a> State<'a> {\n                     }\n                 }\n                 self.print_bounds(\":\", real_bounds);\n-                self.print_where_clause(&generics.where_clause);\n+                self.print_where_clause(generics);\n                 self.word(\" \");\n                 self.bopen();\n                 for trait_item in trait_items {\n@@ -703,7 +703,7 @@ impl<'a> State<'a> {\n                 }\n                 self.nbsp();\n                 self.print_bounds(\"=\", real_bounds);\n-                self.print_where_clause(&generics.where_clause);\n+                self.print_where_clause(generics);\n                 self.word(\";\");\n                 self.end(); // end inner head-block\n                 self.end(); // end outer head-block\n@@ -739,7 +739,7 @@ impl<'a> State<'a> {\n         self.head(\"enum\");\n         self.print_name(name);\n         self.print_generic_params(&generics.params);\n-        self.print_where_clause(&generics.where_clause);\n+        self.print_where_clause(generics);\n         self.space();\n         self.print_variants(&enum_definition.variants, span)\n     }\n@@ -787,15 +787,15 @@ impl<'a> State<'a> {\n                     });\n                     self.pclose();\n                 }\n-                self.print_where_clause(&generics.where_clause);\n+                self.print_where_clause(generics);\n                 if print_finalizer {\n                     self.word(\";\");\n                 }\n                 self.end();\n                 self.end() // close the outer-box\n             }\n             hir::VariantData::Struct(..) => {\n-                self.print_where_clause(&generics.where_clause);\n+                self.print_where_clause(generics);\n                 self.nbsp();\n                 self.bopen();\n                 self.hardbreak_if_not_bol();\n@@ -1995,7 +1995,7 @@ impl<'a> State<'a> {\n         self.pclose();\n \n         self.print_fn_output(decl);\n-        self.print_where_clause(&generics.where_clause)\n+        self.print_where_clause(generics)\n     }\n \n     fn print_closure_params(&mut self, decl: &hir::FnDecl<'_>, body_id: hir::BodyId) {\n@@ -2133,15 +2133,15 @@ impl<'a> State<'a> {\n         self.print_ident(lifetime.name.ident())\n     }\n \n-    pub fn print_where_clause(&mut self, where_clause: &hir::WhereClause<'_>) {\n-        if where_clause.predicates.is_empty() {\n+    pub fn print_where_clause(&mut self, generics: &hir::Generics<'_>) {\n+        if generics.predicates.is_empty() {\n             return;\n         }\n \n         self.space();\n         self.word_space(\"where\");\n \n-        for (i, predicate) in where_clause.predicates.iter().enumerate() {\n+        for (i, predicate) in generics.predicates.iter().enumerate() {\n             if i != 0 {\n                 self.word_space(\",\");\n             }\n@@ -2236,11 +2236,7 @@ impl<'a> State<'a> {\n     ) {\n         self.ibox(INDENT_UNIT);\n         self.print_formal_generic_params(generic_params);\n-        let generics = hir::Generics {\n-            params: &[],\n-            where_clause: hir::WhereClause { predicates: &[], span: rustc_span::DUMMY_SP },\n-            span: rustc_span::DUMMY_SP,\n-        };\n+        let generics = hir::Generics::empty();\n         self.print_fn(\n             decl,\n             hir::FnHeader {"}, {"sha": "8f363cbe0de7874a05c68c6eaa220c058b335089", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=05b29f9a9295caf71fedfc24e6d7062bba434171", "patch": "@@ -2543,11 +2543,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 let pred = format!(\"{}: {}\", bound_kind, sub);\n                 let suggestion = format!(\n                     \"{} {}\",\n-                    if !generics.where_clause.predicates.is_empty() { \",\" } else { \" where\" },\n+                    if !generics.predicates.is_empty() { \",\" } else { \" where\" },\n                     pred,\n                 );\n                 err.span_suggestion(\n-                    generics.where_clause.tail_span_for_suggestion(),\n+                    generics.tail_span_for_predicate_suggestion(),\n                     \"consider adding a where clause\",\n                     suggestion,\n                     Applicability::MaybeIncorrect,"}, {"sha": "cbdcf01352271cca90e40244e62c61553fb3befd", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=05b29f9a9295caf71fedfc24e6d7062bba434171", "patch": "@@ -372,8 +372,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         .hir()\n                         .get_generics(impl_item_def_id)\n                         .unwrap()\n-                        .where_clause\n-                        .tail_span_for_suggestion();\n+                        .where_clause_span\n+                        .shrink_to_hi();\n \n                     let suggestion = format!(\n                         \"{} {}\","}, {"sha": "4c26a515bf6cd9684089bbf5132f40998f212f62", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=05b29f9a9295caf71fedfc24e6d7062bba434171", "patch": "@@ -1519,20 +1519,19 @@ impl<'tcx> LateLintPass<'tcx> for TypeAliasBounds {\n         }\n         let mut suggested_changing_assoc_types = false;\n         // There must not be a where clause\n-        if !type_alias_generics.where_clause.predicates.is_empty() {\n+        if !type_alias_generics.predicates.is_empty() {\n             cx.lint(\n                 TYPE_ALIAS_BOUNDS,\n                 |lint| {\n                     let mut err = lint.build(\"where clauses are not enforced in type aliases\");\n                     let spans: Vec<_> = type_alias_generics\n-                        .where_clause\n                         .predicates\n                         .iter()\n                         .map(|pred| pred.span())\n                         .collect();\n                     err.set_span(spans);\n                     err.span_suggestion(\n-                        type_alias_generics.where_clause.span_for_predicates_or_empty_place(),\n+                        type_alias_generics.span_for_predicates_or_empty_place(),\n                         \"the clause will not be checked when the type alias is used, and should be removed\",\n                         String::new(),\n                         Applicability::MachineApplicable,\n@@ -2245,8 +2244,8 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitOutlivesRequirements {\n \n             let mut where_lint_spans = Vec::new();\n             let mut dropped_predicate_count = 0;\n-            let num_predicates = hir_generics.where_clause.predicates.len();\n-            for (i, where_predicate) in hir_generics.where_clause.predicates.iter().enumerate() {\n+            let num_predicates = hir_generics.predicates.len();\n+            for (i, where_predicate) in hir_generics.predicates.iter().enumerate() {\n                 let (relevant_lifetimes, bounds, span) = match where_predicate {\n                     hir::WherePredicate::RegionPredicate(predicate) => {\n                         if let Some(Region::EarlyBound(index, ..)) =\n@@ -2303,7 +2302,7 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitOutlivesRequirements {\n                 // If all the bounds on a predicate were inferable and there are\n                 // further predicates, we want to eat the trailing comma.\n                 if drop_predicate && i + 1 < num_predicates {\n-                    let next_predicate_span = hir_generics.where_clause.predicates[i + 1].span();\n+                    let next_predicate_span = hir_generics.predicates[i + 1].span();\n                     where_lint_spans.push(span.to(next_predicate_span.shrink_to_lo()));\n                 } else {\n                     where_lint_spans.extend(self.consolidate_outlives_bound_spans(\n@@ -2318,8 +2317,7 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitOutlivesRequirements {\n             // (including the `where`)\n             if num_predicates > 0 && dropped_predicate_count == num_predicates {\n                 let where_span = hir_generics\n-                    .where_clause\n-                    .span()\n+                    .where_clause_span()\n                     .expect(\"span of (nonempty) where clause should exist\");\n                 // Extend the where clause back to the closing `>` of the\n                 // generics, except for tuple struct, which have the `where`"}, {"sha": "5203fb518827ecc6cca61a14e29b6ed067bcfb6f", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 14, "deletions": 23, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=05b29f9a9295caf71fedfc24e6d7062bba434171", "patch": "@@ -156,13 +156,13 @@ pub fn suggest_arbitrary_trait_bound(\n         _ => {}\n     }\n     // Suggest a where clause bound for a non-type parameter.\n-    let (action, prefix) = if generics.where_clause.predicates.is_empty() {\n+    let (action, prefix) = if generics.predicates.is_empty() {\n         (\"introducing a\", \" where \")\n     } else {\n         (\"extending the\", \", \")\n     };\n     err.span_suggestion_verbose(\n-        generics.where_clause.tail_span_for_suggestion(),\n+        generics.tail_span_for_predicate_suggestion(),\n         &format!(\n             \"consider {} `where` bound, but there might be an alternative better way to express \\\n              this requirement\",\n@@ -192,7 +192,7 @@ fn suggest_removing_unsized_bound(\n     // See if there's a `?Sized` bound that can be removed to suggest that.\n     // First look at the `where` clause because we can have `where T: ?Sized`,\n     // then look at params.\n-    for (where_pos, predicate) in generics.where_clause.predicates.iter().enumerate() {\n+    for (where_pos, predicate) in generics.predicates.iter().enumerate() {\n         match predicate {\n             WherePredicate::BoundPredicate(WhereBoundPredicate {\n                 bounded_ty:\n@@ -218,27 +218,18 @@ fn suggest_removing_unsized_bound(\n                             if poly.trait_ref.trait_def_id() == def_id => {}\n                         _ => continue,\n                     }\n-                    let sp = match (\n-                        bounds.len(),\n-                        pos,\n-                        generics.where_clause.predicates.len(),\n-                        where_pos,\n-                    ) {\n+                    let sp = match (bounds.len(), pos, generics.predicates.len(), where_pos) {\n                         // where T: ?Sized\n                         // ^^^^^^^^^^^^^^^\n-                        (1, _, 1, _) => generics.where_clause.span,\n+                        (1, _, 1, _) => generics.where_clause_span,\n                         // where Foo: Bar, T: ?Sized,\n                         //               ^^^^^^^^^^^\n-                        (1, _, len, pos) if pos == len - 1 => generics.where_clause.predicates\n-                            [pos - 1]\n-                            .span()\n-                            .shrink_to_hi()\n-                            .to(*span),\n+                        (1, _, len, pos) if pos == len - 1 => {\n+                            generics.predicates[pos - 1].span().shrink_to_hi().to(*span)\n+                        }\n                         // where T: ?Sized, Foo: Bar,\n                         //       ^^^^^^^^^^^\n-                        (1, _, _, pos) => {\n-                            span.until(generics.where_clause.predicates[pos + 1].span())\n-                        }\n+                        (1, _, _, pos) => span.until(generics.predicates[pos + 1].span()),\n                         // where T: ?Sized + Bar, Foo: Bar,\n                         //          ^^^^^^^^^\n                         (_, 0, _, _) => bound.span().to(bounds[1].span().shrink_to_lo()),\n@@ -381,7 +372,7 @@ pub fn suggest_constraining_type_params<'a>(\n             continue;\n         }\n \n-        if generics.where_clause.predicates.is_empty()\n+        if generics.predicates.is_empty()\n         // Given `trait Base<T = String>: Super<T>` where `T: Copy`, suggest restricting in the\n         // `where` clause instead of `trait Base<T: Copy = String>: Super<T>`.\n         && !matches!(param.kind, hir::GenericParamKind::Type { default: Some(_), .. })\n@@ -475,20 +466,20 @@ pub fn suggest_constraining_type_params<'a>(\n             //                     - insert: `where T: Zar`\n \n             if matches!(param.kind, hir::GenericParamKind::Type { default: Some(_), .. })\n-                && generics.where_clause.predicates.len() == 0\n+                && generics.predicates.len() == 0\n             {\n                 // Suggest a bound, but there is no existing `where` clause *and* the type param has a\n                 // default (`<T=Foo>`), so we suggest adding `where T: Bar`.\n                 suggestions.push((\n-                    generics.where_clause.tail_span_for_suggestion(),\n+                    generics.tail_span_for_predicate_suggestion(),\n                     format!(\" where {}: {}\", param_name, constraint),\n                     SuggestChangingConstraintsMessage::RestrictTypeFurther { ty: param_name },\n                 ));\n             } else {\n                 let mut param_spans = Vec::new();\n                 let mut non_empty = false;\n \n-                for predicate in generics.where_clause.predicates {\n+                for predicate in generics.predicates {\n                     if let WherePredicate::BoundPredicate(WhereBoundPredicate {\n                         span,\n                         bounded_ty,\n@@ -512,7 +503,7 @@ pub fn suggest_constraining_type_params<'a>(\n                     [&param_span] => suggest_restrict(param_span.shrink_to_hi(), non_empty),\n                     _ => {\n                         suggestions.push((\n-                            generics.where_clause.tail_span_for_suggestion(),\n+                            generics.tail_span_for_predicate_suggestion(),\n                             constraints\n                                 .iter()\n                                 .map(|&(constraint, _)| format!(\", {}: {}\", param_name, constraint))"}, {"sha": "5c5d0a46534fbd13960b8b238e7255c42bd73367", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=05b29f9a9295caf71fedfc24e6d7062bba434171", "patch": "@@ -605,7 +605,7 @@ impl<T> Trait<T> for X {\n \n                 // First look in the `where` clause, as this might be\n                 // `fn foo<T>(x: T) where T: Trait`.\n-                for predicate in hir_generics.where_clause.predicates {\n+                for predicate in hir_generics.predicates {\n                     if let hir::WherePredicate::BoundPredicate(pred) = predicate {\n                         if let hir::TyKind::Path(hir::QPath::Resolved(None, path)) =\n                             pred.bounded_ty.kind"}, {"sha": "5c396c2b7eade6a89d62702067c5fb120f1b2a2c", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=05b29f9a9295caf71fedfc24e6d7062bba434171", "patch": "@@ -1590,7 +1590,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                 self.check_generic_bound(bound);\n             }\n         }\n-        for predicate in generics.where_clause.predicates {\n+        for predicate in generics.predicates {\n             match predicate {\n                 hir::WherePredicate::BoundPredicate(bound_pred) => {\n                     for bound in bound_pred.bounds.iter() {"}, {"sha": "f7e94dd10f7a1a67694b584f414ced17b7614efa", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=05b29f9a9295caf71fedfc24e6d7062bba434171", "patch": "@@ -1342,7 +1342,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     }\n                 }\n             }\n-            for predicate in generics.where_clause.predicates {\n+            for predicate in generics.predicates {\n                 match predicate {\n                     &hir::WherePredicate::BoundPredicate(hir::WhereBoundPredicate {\n                         ref bounded_ty,\n@@ -1717,7 +1717,7 @@ fn object_lifetime_defaults_for_item<'tcx>(\n             add_bounds(&mut set, &param.bounds);\n \n             let param_def_id = tcx.hir().local_def_id(param.hir_id);\n-            for predicate in generics.where_clause.predicates {\n+            for predicate in generics.predicates {\n                 // Look for `type: ...` where clauses.\n                 let hir::WherePredicate::BoundPredicate(ref data) = *predicate else { continue };\n "}, {"sha": "a27ac75d5842d1db36ea51309573c6bc2ecfac1c", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=05b29f9a9295caf71fedfc24e6d7062bba434171", "patch": "@@ -1281,7 +1281,7 @@ impl<'tcx> Visitor<'tcx> for DumpVisitor<'tcx> {\n                 }\n             }\n         }\n-        for pred in generics.where_clause.predicates {\n+        for pred in generics.predicates {\n             if let hir::WherePredicate::BoundPredicate(ref wbp) = *pred {\n                 self.process_bounds(wbp.bounds);\n                 self.visit_ty(wbp.bounded_ty);"}, {"sha": "a3e8be44c7ad938e5a03177b83ee787aa15ed588", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=05b29f9a9295caf71fedfc24e6d7062bba434171", "patch": "@@ -2419,7 +2419,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         };\n         let sized_trait = self.tcx.lang_items().sized_trait();\n         debug!(\"maybe_suggest_unsized_generics: generics.params={:?}\", generics.params);\n-        debug!(\"maybe_suggest_unsized_generics: generics.where_clause={:?}\", generics.where_clause);\n+        debug!(\"maybe_suggest_unsized_generics: generics.predicates={:?}\", generics.predicates);\n         let param = generics.params.iter().filter(|param| param.span == span).find(|param| {\n             // Check that none of the explicit trait bounds is `Sized`. Assume that an explicit\n             // `Sized` bound is there intentionally and we don't need to suggest relaxing it.\n@@ -2432,7 +2432,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n             return;\n         };\n         let param_def_id = self.tcx.hir().local_def_id(param.hir_id).to_def_id();\n-        let preds = generics.where_clause.predicates.iter();\n+        let preds = generics.predicates.iter();\n         let explicitly_sized = preds\n             .filter_map(|pred| match pred {\n                 hir::WherePredicate::BoundPredicate(bp) => Some(bp),"}, {"sha": "9900cdd3eba59516a13a8db1e4c7ccb2ecf397f0", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=05b29f9a9295caf71fedfc24e6d7062bba434171", "patch": "@@ -319,12 +319,8 @@ pub trait InferCtxtExt<'tcx> {\n \n fn predicate_constraint(generics: &hir::Generics<'_>, pred: String) -> (Span, String) {\n     (\n-        generics.where_clause.tail_span_for_suggestion(),\n-        format!(\n-            \"{} {}\",\n-            if !generics.where_clause.predicates.is_empty() { \",\" } else { \" where\" },\n-            pred,\n-        ),\n+        generics.tail_span_for_predicate_suggestion(),\n+        format!(\"{} {}\", if !generics.predicates.is_empty() { \",\" } else { \" where\" }, pred,),\n     )\n }\n \n@@ -346,7 +342,7 @@ fn suggest_restriction<'tcx>(\n     //              -  ^^^^^^^^^ GenericBounds\n     //              |\n     //              &Ident\n-    let span = generics.where_clause.span_for_predicates_or_empty_place();\n+    let span = generics.span_for_predicates_or_empty_place();\n     if span.from_expansion() || span.desugaring_kind().is_some() {\n         return;\n     }"}, {"sha": "b39310d12942d752979f2d78b3ff464ff8e146df", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=05b29f9a9295caf71fedfc24e6d7062bba434171", "patch": "@@ -221,7 +221,6 @@ fn get_sized_bounds(tcx: TyCtxt<'_>, trait_def_id: DefId) -> SmallVec<[Span; 1]>\n                 ..\n             }) => Some(\n                 generics\n-                    .where_clause\n                     .predicates\n                     .iter()\n                     .filter_map(|pred| {\n@@ -399,8 +398,8 @@ fn virtual_call_violation_for_method<'tcx>(\n         // We'll attempt to provide a structured suggestion for `Self: Sized`.\n         let sugg =\n             tcx.hir().get_if_local(method.def_id).as_ref().and_then(|node| node.generics()).map(\n-                |generics| match generics.where_clause.predicates {\n-                    [] => (\" where Self: Sized\", generics.where_clause.span),\n+                |generics| match generics.predicates {\n+                    [] => (\" where Self: Sized\", generics.where_clause_span),\n                     [.., pred] => (\", Self: Sized\", pred.span().shrink_to_hi()),\n                 },\n             );"}, {"sha": "c42db45854f4b924fe08b37e9605b7b598db285a", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=05b29f9a9295caf71fedfc24e6d7062bba434171", "patch": "@@ -599,7 +599,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             kind:\n                 hir::ItemKind::Fn(\n                     hir::FnSig { decl: hir::FnDecl { inputs: fn_parameters, output: fn_return, .. }, .. },\n-                    hir::Generics { params, where_clause, .. },\n+                    hir::Generics { params, predicates, .. },\n                     _body_id,\n                 ),\n             ..\n@@ -608,8 +608,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let Some(expected_generic_param) = params.get(expected_ty_as_param.index as usize) else { return };\n \n         // get all where BoundPredicates here, because they are used in to cases below\n-        let where_predicates = where_clause\n-            .predicates\n+        let where_predicates = predicates\n             .iter()\n             .filter_map(|p| match p {\n                 WherePredicate::BoundPredicate(hir::WhereBoundPredicate {"}, {"sha": "727352c395b76f193bce3b2ff992a41378791c48", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=05b29f9a9295caf71fedfc24e6d7062bba434171", "patch": "@@ -533,12 +533,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 };\n                                 if let Some(hir::Node::Item(hir::Item { kind, .. })) = node {\n                                     if let Some(g) = kind.generics() {\n-                                        let key = match g.where_clause.predicates {\n+                                        let key = match g.predicates {\n                                             [.., pred] => (pred.span().shrink_to_hi(), false),\n-                                            [] => (\n-                                                g.where_clause.span_for_predicates_or_empty_place(),\n-                                                true,\n-                                            ),\n+                                            [] => (g.span_for_predicates_or_empty_place(), true),\n                                         };\n                                         type_params\n                                             .entry(key)"}, {"sha": "ce70650d4ac27b80aa998c1bc3221f7bbea1ef3e", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=05b29f9a9295caf71fedfc24e6d7062bba434171", "patch": "@@ -420,15 +420,11 @@ fn check_gat_where_clauses(tcx: TyCtxt<'_>, associated_items: &[hir::TraitItemRe\n \n             let suggestion = format!(\n                 \"{} {}\",\n-                if !gat_item_hir.generics.where_clause.predicates.is_empty() {\n-                    \",\"\n-                } else {\n-                    \" where\"\n-                },\n+                if !gat_item_hir.generics.predicates.is_empty() { \",\" } else { \" where\" },\n                 unsatisfied_bounds.join(\", \"),\n             );\n             err.span_suggestion(\n-                gat_item_hir.generics.where_clause.tail_span_for_suggestion(),\n+                gat_item_hir.generics.tail_span_for_predicate_suggestion(),\n                 &format!(\"add the required where clause{plural}\"),\n                 suggestion,\n                 Applicability::MachineApplicable,\n@@ -1733,7 +1729,6 @@ fn check_variances_for_type_defn<'tcx>(\n     let explicitly_bounded_params = Lazy::new(|| {\n         let icx = crate::collect::ItemCtxt::new(tcx, item.def_id.to_def_id());\n         hir_generics\n-            .where_clause\n             .predicates\n             .iter()\n             .filter_map(|predicate| match predicate {\n@@ -1819,13 +1814,12 @@ fn check_false_global_bounds(fcx: &FnCtxt<'_, '_>, mut span: Span, id: hir::HirI\n \n             // only use the span of the predicate clause (#90869)\n \n-            if let Some(hir::Generics { where_clause, .. }) =\n+            if let Some(hir::Generics { predicates, .. }) =\n                 hir_node.and_then(|node| node.generics())\n             {\n                 let obligation_span = obligation.cause.span(fcx.tcx);\n \n-                span = where_clause\n-                    .predicates\n+                span = predicates\n                     .iter()\n                     // There seems to be no better way to find out which predicate we are in\n                     .find(|pred| pred.span().contains(obligation_span))"}, {"sha": "fd63fd1eb7d40a2804a87cebcf046d754276b73e", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=05b29f9a9295caf71fedfc24e6d7062bba434171", "patch": "@@ -700,7 +700,6 @@ impl<'tcx> ItemCtxt<'tcx> {\n \n         let param_def_id = self.tcx.hir().local_def_id(param_id).to_def_id();\n         let from_where_clauses = ast_generics\n-            .where_clause\n             .predicates\n             .iter()\n             .filter_map(|wp| match *wp {\n@@ -2343,7 +2342,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n                     &icx,\n                     &mut bounds,\n                     param.bounds,\n-                    Some((param.hir_id, ast_generics.where_clause.predicates)),\n+                    Some((param.hir_id, ast_generics.predicates)),\n                     param.span,\n                 );\n                 predicates.extend(bounds.predicates(tcx, param_ty));\n@@ -2357,8 +2356,7 @@ fn gather_explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericP\n     }\n \n     // Add in the bounds that appear in the where-clause.\n-    let where_clause = &ast_generics.where_clause;\n-    for predicate in where_clause.predicates {\n+    for predicate in ast_generics.predicates {\n         match predicate {\n             hir::WherePredicate::BoundPredicate(bound_pred) => {\n                 let ty = icx.to_ty(bound_pred.bounded_ty);"}, {"sha": "03b3d68d59f4cb2cf5ab40790d980321ea815faa", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b29f9a9295caf71fedfc24e6d7062bba434171/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=05b29f9a9295caf71fedfc24e6d7062bba434171", "patch": "@@ -213,7 +213,7 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n         let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n         match tcx.hir().find(hir_id) {\n             Some(Node::Item(hir::Item { kind: hir::ItemKind::Fn(_, ref generics, _), .. })) => {\n-                generics.where_clause.span()\n+                generics.where_clause_span()\n             }\n             _ => {\n                 span_bug!(tcx.def_span(def_id), \"main has a non-function type\");\n@@ -408,7 +408,7 @@ fn check_start_fn_ty(tcx: TyCtxt<'_>, start_def_id: DefId) {\n                         .emit();\n                         error = true;\n                     }\n-                    if let Some(sp) = generics.where_clause.span() {\n+                    if let Some(sp) = generics.where_clause_span() {\n                         struct_span_err!(\n                             tcx.sess,\n                             sp,"}, {"sha": "258880ac92850b9c71363cdc36aeb0907c5946ee", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05b29f9a9295caf71fedfc24e6d7062bba434171/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b29f9a9295caf71fedfc24e6d7062bba434171/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=05b29f9a9295caf71fedfc24e6d7062bba434171", "patch": "@@ -545,7 +545,7 @@ impl Clean<Generics> for hir::Generics<'_> {\n \n         let mut generics = Generics {\n             params,\n-            where_predicates: self.where_clause.predicates.iter().map(|x| x.clean(cx)).collect(),\n+            where_predicates: self.predicates.iter().map(|x| x.clean(cx)).collect(),\n         };\n \n         // Some duplicates are generated for ?Sized bounds between type params and where"}, {"sha": "4ec7c2362f087f69d7d9fae1ef03846ea4393547", "filename": "src/tools/clippy/clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05b29f9a9295caf71fedfc24e6d7062bba434171/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b29f9a9295caf71fedfc24e6d7062bba434171/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs?ref=05b29f9a9295caf71fedfc24e6d7062bba434171", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::FnRetTy::Return;\n use rustc_hir::{\n     BareFnTy, BodyId, FnDecl, GenericArg, GenericBound, GenericParam, GenericParamKind, Generics, ImplItem,\n     ImplItemKind, Item, ItemKind, LangItem, Lifetime, LifetimeName, ParamName, PolyTraitRef, TraitBoundModifier,\n-    TraitFn, TraitItem, TraitItemKind, Ty, TyKind, WhereClause, WherePredicate,\n+    TraitFn, TraitItem, TraitItemKind, Ty, TyKind, WherePredicate,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -130,7 +130,7 @@ fn check_fn_inner<'tcx>(\n     span: Span,\n     report_extra_lifetimes: bool,\n ) {\n-    if span.from_expansion() || has_where_lifetimes(cx, &generics.where_clause) {\n+    if span.from_expansion() || has_where_lifetimes(cx, generics) {\n         return;\n     }\n \n@@ -445,8 +445,8 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n \n /// Are any lifetimes mentioned in the `where` clause? If so, we don't try to\n /// reason about elision.\n-fn has_where_lifetimes<'tcx>(cx: &LateContext<'tcx>, where_clause: &'tcx WhereClause<'_>) -> bool {\n-    for predicate in where_clause.predicates {\n+fn has_where_lifetimes<'tcx>(cx: &LateContext<'tcx>, generics: &'tcx Generics<'_>) -> bool {\n+    for predicate in generics.predicates {\n         match *predicate {\n             WherePredicate::RegionPredicate(..) => return true,\n             WherePredicate::BoundPredicate(ref pred) => {"}, {"sha": "c388d2854cc2a38116b6b3cec499f4cc00bab58b", "filename": "src/tools/clippy/clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/05b29f9a9295caf71fedfc24e6d7062bba434171/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b29f9a9295caf71fedfc24e6d7062bba434171/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=05b29f9a9295caf71fedfc24e6d7062bba434171", "patch": "@@ -90,10 +90,9 @@ impl<'tcx> LateLintPass<'tcx> for TraitBounds {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx TraitItem<'tcx>) {\n-        let Generics { where_clause, .. } = &item.generics;\n         let mut self_bounds_map = FxHashMap::default();\n \n-        for predicate in where_clause.predicates {\n+        for predicate in item.generics.predicates {\n             if_chain! {\n                 if let WherePredicate::BoundPredicate(ref bound_predicate) = predicate;\n                 if !bound_predicate.span.from_expansion();\n@@ -166,7 +165,7 @@ impl TraitBounds {\n         }\n         let mut map: UnhashMap<SpanlessTy<'_, '_>, Vec<&GenericBound<'_>>> = UnhashMap::default();\n         let mut applicability = Applicability::MaybeIncorrect;\n-        for bound in gen.where_clause.predicates {\n+        for bound in gen.predicates {\n             if_chain! {\n                 if let WherePredicate::BoundPredicate(ref p) = bound;\n                 if p.bounds.len() as u64 <= self.max_trait_bounds;\n@@ -216,7 +215,7 @@ impl TraitBounds {\n }\n \n fn check_trait_bound_duplication(cx: &LateContext<'_>, gen: &'_ Generics<'_>) {\n-    if gen.span.from_expansion() || gen.params.is_empty() || gen.where_clause.predicates.is_empty() {\n+    if gen.span.from_expansion() || gen.params.is_empty() || gen.predicates.is_empty() {\n         return;\n     }\n \n@@ -232,7 +231,7 @@ fn check_trait_bound_duplication(cx: &LateContext<'_>, gen: &'_ Generics<'_>) {\n         }\n     }\n \n-    for predicate in gen.where_clause.predicates {\n+    for predicate in gen.predicates {\n         if_chain! {\n             if let WherePredicate::BoundPredicate(ref bound_predicate) = predicate;\n             if !bound_predicate.span.from_expansion();"}]}