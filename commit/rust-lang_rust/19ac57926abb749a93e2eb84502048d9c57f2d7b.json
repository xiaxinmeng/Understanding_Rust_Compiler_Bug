{"sha": "19ac57926abb749a93e2eb84502048d9c57f2d7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5YWM1NzkyNmFiYjc0OWE5M2UyZWI4NDUwMjA0OGQ5YzU3ZjJkN2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-08T22:59:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-08T22:59:49Z"}, "message": "Auto merge of #37041 - tbu-:pr_less_sizet_casts, r=alexcrichton\n\nUse less `size_t` casts in libstd since it's now defined as `usize`", "tree": {"sha": "ccce98f2598d2968f6a0df88e118e0f4610480bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccce98f2598d2968f6a0df88e118e0f4610480bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19ac57926abb749a93e2eb84502048d9c57f2d7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19ac57926abb749a93e2eb84502048d9c57f2d7b", "html_url": "https://github.com/rust-lang/rust/commit/19ac57926abb749a93e2eb84502048d9c57f2d7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19ac57926abb749a93e2eb84502048d9c57f2d7b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bff06afbc5eb980cbfa2fa4f35e0c431828d3471", "url": "https://api.github.com/repos/rust-lang/rust/commits/bff06afbc5eb980cbfa2fa4f35e0c431828d3471", "html_url": "https://github.com/rust-lang/rust/commit/bff06afbc5eb980cbfa2fa4f35e0c431828d3471"}, {"sha": "717d2ddca7a11088716193453378b65c04995021", "url": "https://api.github.com/repos/rust-lang/rust/commits/717d2ddca7a11088716193453378b65c04995021", "html_url": "https://github.com/rust-lang/rust/commit/717d2ddca7a11088716193453378b65c04995021"}], "stats": {"total": 70, "additions": 32, "deletions": 38}, "files": [{"sha": "54dde6681e1888b13b08d2a707da4e1f8c529008", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19ac57926abb749a93e2eb84502048d9c57f2d7b/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ac57926abb749a93e2eb84502048d9c57f2d7b/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=19ac57926abb749a93e2eb84502048d9c57f2d7b", "patch": "@@ -229,7 +229,7 @@ mod prim_unit { }\n ///\n /// fn main() {\n ///     unsafe {\n-///         let my_num: *mut i32 = libc::malloc(mem::size_of::<i32>() as libc::size_t) as *mut i32;\n+///         let my_num: *mut i32 = libc::malloc(mem::size_of::<i32>()) as *mut i32;\n ///         if my_num.is_null() {\n ///             panic!(\"failed to allocate memory\");\n ///         }"}, {"sha": "eadf98867a6b7ad78947b1e61b9ad36022539ad3", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19ac57926abb749a93e2eb84502048d9c57f2d7b/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ac57926abb749a93e2eb84502048d9c57f2d7b/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=19ac57926abb749a93e2eb84502048d9c57f2d7b", "patch": "@@ -11,7 +11,7 @@\n #![unstable(reason = \"not public\", issue = \"0\", feature = \"fd\")]\n \n use io::{self, Read};\n-use libc::{self, c_int, size_t, c_void};\n+use libc::{self, c_int, c_void};\n use mem;\n use sync::atomic::{AtomicBool, Ordering};\n use sys::cvt;\n@@ -40,7 +40,7 @@ impl FileDesc {\n         let ret = cvt(unsafe {\n             libc::read(self.fd,\n                        buf.as_mut_ptr() as *mut c_void,\n-                       buf.len() as size_t)\n+                       buf.len())\n         })?;\n         Ok(ret as usize)\n     }\n@@ -54,7 +54,7 @@ impl FileDesc {\n         let ret = cvt(unsafe {\n             libc::write(self.fd,\n                         buf.as_ptr() as *const c_void,\n-                        buf.len() as size_t)\n+                        buf.len())\n         })?;\n         Ok(ret as usize)\n     }"}, {"sha": "606e2c2264ad0ac303553654467de26738ba09a0", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19ac57926abb749a93e2eb84502048d9c57f2d7b/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ac57926abb749a93e2eb84502048d9c57f2d7b/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=19ac57926abb749a93e2eb84502048d9c57f2d7b", "patch": "@@ -669,7 +669,7 @@ pub fn readlink(p: &Path) -> io::Result<PathBuf> {\n \n     loop {\n         let buf_read = cvt(unsafe {\n-            libc::readlink(p, buf.as_mut_ptr() as *mut _, buf.capacity() as libc::size_t)\n+            libc::readlink(p, buf.as_mut_ptr() as *mut _, buf.capacity())\n         })? as usize;\n \n         unsafe { buf.set_len(buf_read); }"}, {"sha": "aed04703ea11705d37b07a594bf62202cf7d62ec", "filename": "src/libstd/sys/unix/memchr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19ac57926abb749a93e2eb84502048d9c57f2d7b/src%2Flibstd%2Fsys%2Funix%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ac57926abb749a93e2eb84502048d9c57f2d7b/src%2Flibstd%2Fsys%2Funix%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmemchr.rs?ref=19ac57926abb749a93e2eb84502048d9c57f2d7b", "patch": "@@ -18,7 +18,7 @@ pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {\n         libc::memchr(\n             haystack.as_ptr() as *const libc::c_void,\n             needle as libc::c_int,\n-            haystack.len() as libc::size_t)\n+            haystack.len())\n     };\n     if p.is_null() {\n         None\n@@ -39,7 +39,7 @@ pub fn memrchr(needle: u8, haystack: &[u8]) -> Option<usize> {\n             libc::memrchr(\n                 haystack.as_ptr() as *const libc::c_void,\n                 needle as libc::c_int,\n-                haystack.len() as libc::size_t)\n+                haystack.len())\n         };\n         if p.is_null() {\n             None"}, {"sha": "501329772ce254098e782581b1138c47b37bf4fd", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19ac57926abb749a93e2eb84502048d9c57f2d7b/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ac57926abb749a93e2eb84502048d9c57f2d7b/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=19ac57926abb749a93e2eb84502048d9c57f2d7b", "patch": "@@ -83,7 +83,7 @@ pub fn init() {\n         unsafe {\n             libc::write(libc::STDERR_FILENO,\n                         msg.as_ptr() as *const libc::c_void,\n-                        msg.len() as libc::size_t);\n+                        msg.len());\n             intrinsics::abort();\n         }\n     }"}, {"sha": "91f6ba80f83b0e0c97d4287184a70483d11e6b0a", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/19ac57926abb749a93e2eb84502048d9c57f2d7b/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ac57926abb749a93e2eb84502048d9c57f2d7b/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=19ac57926abb749a93e2eb84502048d9c57f2d7b", "patch": "@@ -94,7 +94,7 @@ pub fn error_string(errno: i32) -> String {\n \n     let p = buf.as_mut_ptr();\n     unsafe {\n-        if strerror_r(errno as c_int, p, buf.len() as libc::size_t) < 0 {\n+        if strerror_r(errno as c_int, p, buf.len()) < 0 {\n             panic!(\"strerror_r failure\");\n         }\n \n@@ -108,7 +108,7 @@ pub fn getcwd() -> io::Result<PathBuf> {\n     loop {\n         unsafe {\n             let ptr = buf.as_mut_ptr() as *mut libc::c_char;\n-            if !libc::getcwd(ptr, buf.capacity() as libc::size_t).is_null() {\n+            if !libc::getcwd(ptr, buf.capacity()).is_null() {\n                 let len = CStr::from_ptr(buf.as_ptr() as *const libc::c_char).to_bytes().len();\n                 buf.set_len(len);\n                 buf.shrink_to_fit();\n@@ -200,21 +200,20 @@ pub fn current_exe() -> io::Result<PathBuf> {\n                        libc::KERN_PROC as c_int,\n                        libc::KERN_PROC_PATHNAME as c_int,\n                        -1 as c_int];\n-        let mut sz: libc::size_t = 0;\n+        let mut sz = 0;\n         cvt(libc::sysctl(mib.as_mut_ptr(), mib.len() as ::libc::c_uint,\n-                         ptr::null_mut(), &mut sz, ptr::null_mut(),\n-                         0 as libc::size_t))?;\n+                         ptr::null_mut(), &mut sz, ptr::null_mut(), 0))?;\n         if sz == 0 {\n             return Err(io::Error::last_os_error())\n         }\n-        let mut v: Vec<u8> = Vec::with_capacity(sz as usize);\n+        let mut v: Vec<u8> = Vec::with_capacity(sz);\n         cvt(libc::sysctl(mib.as_mut_ptr(), mib.len() as ::libc::c_uint,\n                          v.as_mut_ptr() as *mut libc::c_void, &mut sz,\n-                         ptr::null_mut(), 0 as libc::size_t))?;\n+                         ptr::null_mut(), 0))?;\n         if sz == 0 {\n             return Err(io::Error::last_os_error());\n         }\n-        v.set_len(sz as usize - 1); // chop off trailing NUL\n+        v.set_len(sz - 1); // chop off trailing NUL\n         Ok(PathBuf::from(OsString::from_vec(v)))\n     }\n }\n@@ -488,7 +487,7 @@ pub fn home_dir() -> Option<PathBuf> {\n                               buf: &mut Vec<c_char>) -> Option<()> {\n             let mut result = ptr::null_mut();\n             match libc::getpwuid_r(me, passwd, buf.as_mut_ptr(),\n-                                   buf.capacity() as libc::size_t,\n+                                   buf.capacity(),\n                                    &mut result) {\n                 0 if !result.is_null() => Some(()),\n                 _ => None\n@@ -501,7 +500,7 @@ pub fn home_dir() -> Option<PathBuf> {\n             // getpwuid_r semantics is different on Illumos/Solaris:\n             // http://illumos.org/man/3c/getpwuid_r\n             let result = libc::getpwuid_r(me, passwd, buf.as_mut_ptr(),\n-                                          buf.capacity() as libc::size_t);\n+                                          buf.capacity());\n             if result.is_null() { None } else { Some(()) }\n         }\n "}, {"sha": "f28a6ad33750a2106760bce4a6c3cab53c46866b", "filename": "src/libstd/sys/unix/rand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/19ac57926abb749a93e2eb84502048d9c57f2d7b/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ac57926abb749a93e2eb84502048d9c57f2d7b/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frand.rs?ref=19ac57926abb749a93e2eb84502048d9c57f2d7b", "patch": "@@ -97,8 +97,8 @@ mod imp {\n                     // full entropy pool\n                     let reader = File::open(\"/dev/urandom\").expect(\"Unable to open /dev/urandom\");\n                     let mut reader_rng = ReaderRng::new(reader);\n-                    reader_rng.fill_bytes(& mut v[read..]);\n-                    read += v.len() as usize;\n+                    reader_rng.fill_bytes(&mut v[read..]);\n+                    read += v.len();\n                 } else {\n                     panic!(\"unexpected getrandom error: {}\", err);\n                 }\n@@ -281,7 +281,7 @@ mod imp {\n         }\n         fn fill_bytes(&mut self, v: &mut [u8]) {\n             let ret = unsafe {\n-                SecRandomCopyBytes(kSecRandomDefault, v.len() as size_t,\n+                SecRandomCopyBytes(kSecRandomDefault, v.len(),\n                                    v.as_mut_ptr())\n             };\n             if ret == -1 {"}, {"sha": "87d82cdab97555a11990c5c7520ae756fd96838e", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/19ac57926abb749a93e2eb84502048d9c57f2d7b/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19ac57926abb749a93e2eb84502048d9c57f2d7b/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=19ac57926abb749a93e2eb84502048d9c57f2d7b", "patch": "@@ -53,7 +53,7 @@ impl Thread {\n \n         let stack_size = cmp::max(stack, min_stack_size(&attr));\n         match pthread_attr_setstacksize(&mut attr,\n-                                        stack_size as libc::size_t) {\n+                                        stack_size) {\n             0 => {}\n             n => {\n                 assert_eq!(n, libc::EINVAL);\n@@ -64,7 +64,6 @@ impl Thread {\n                 let page_size = os::page_size();\n                 let stack_size = (stack_size + page_size - 1) &\n                                  (-(page_size as isize - 1) as usize - 1);\n-                let stack_size = stack_size as libc::size_t;\n                 assert_eq!(libc::pthread_attr_setstacksize(&mut attr,\n                                                            stack_size), 0);\n             }\n@@ -264,12 +263,8 @@ pub mod guard {\n         // Rellocate the last page of the stack.\n         // This ensures SIGBUS will be raised on\n         // stack overflow.\n-        let result = mmap(stackaddr,\n-                          psize as libc::size_t,\n-                          PROT_NONE,\n-                          MAP_PRIVATE | MAP_ANON | MAP_FIXED,\n-                          -1,\n-                          0);\n+        let result = mmap(stackaddr, psize, PROT_NONE,\n+                          MAP_PRIVATE | MAP_ANON | MAP_FIXED, -1, 0);\n \n         if result != stackaddr || result == MAP_FAILED {\n             panic!(\"failed to allocate a guard page\");\n@@ -293,8 +288,8 @@ pub mod guard {\n \n     #[cfg(target_os = \"macos\")]\n     pub unsafe fn current() -> Option<usize> {\n-        Some((libc::pthread_get_stackaddr_np(libc::pthread_self()) as libc::size_t -\n-              libc::pthread_get_stacksize_np(libc::pthread_self())) as usize)\n+        Some((libc::pthread_get_stackaddr_np(libc::pthread_self()) as usize -\n+              libc::pthread_get_stacksize_np(libc::pthread_self())))\n     }\n \n     #[cfg(any(target_os = \"openbsd\", target_os = \"bitrig\"))]\n@@ -306,10 +301,10 @@ pub mod guard {\n         let extra = if cfg!(target_os = \"bitrig\") {3} else {1} * os::page_size();\n         Some(if libc::pthread_main_np() == 1 {\n             // main thread\n-            current_stack.ss_sp as usize - current_stack.ss_size as usize + extra\n+            current_stack.ss_sp as usize - current_stack.ss_size + extra\n         } else {\n             // new thread\n-            current_stack.ss_sp as usize - current_stack.ss_size as usize\n+            current_stack.ss_sp as usize - current_stack.ss_size\n         })\n     }\n \n@@ -335,11 +330,11 @@ pub mod guard {\n                                                    &mut size), 0);\n \n             ret = if cfg!(target_os = \"freebsd\") {\n-                Some(stackaddr as usize - guardsize as usize)\n+                Some(stackaddr as usize - guardsize)\n             } else if cfg!(target_os = \"netbsd\") {\n                 Some(stackaddr as usize)\n             } else {\n-                Some(stackaddr as usize + guardsize as usize)\n+                Some(stackaddr as usize + guardsize)\n             };\n         }\n         assert_eq!(libc::pthread_attr_destroy(&mut attr), 0);\n@@ -358,8 +353,8 @@ fn min_stack_size(attr: *const libc::pthread_attr_t) -> usize {\n     weak!(fn __pthread_get_minstack(*const libc::pthread_attr_t) -> libc::size_t);\n \n     match __pthread_get_minstack.get() {\n-        None => libc::PTHREAD_STACK_MIN as usize,\n-        Some(f) => unsafe { f(attr) as usize },\n+        None => libc::PTHREAD_STACK_MIN,\n+        Some(f) => unsafe { f(attr) },\n     }\n }\n \n@@ -368,7 +363,7 @@ fn min_stack_size(attr: *const libc::pthread_attr_t) -> usize {\n #[cfg(all(not(target_os = \"linux\"),\n           not(target_os = \"netbsd\")))]\n fn min_stack_size(_: *const libc::pthread_attr_t) -> usize {\n-    libc::PTHREAD_STACK_MIN as usize\n+    libc::PTHREAD_STACK_MIN\n }\n \n #[cfg(target_os = \"netbsd\")]"}]}