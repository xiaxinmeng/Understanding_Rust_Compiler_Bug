{"sha": "636fd495c81d9b92820461de8e56e4cce7614256", "node_id": "C_kwDOAAsO6NoAKDYzNmZkNDk1YzgxZDliOTI4MjA0NjFkZThlNTZlNGNjZTc2MTQyNTY", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-01-06T04:02:00Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-01-06T04:04:16Z"}, "message": "rustc_middle: Add a method for getting a `SimplifiedType` definition/ID\n\nImport `SimplifiedType` more", "tree": {"sha": "2c1f82febb821ddfeb4d1e483e3ed91632067c14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c1f82febb821ddfeb4d1e483e3ed91632067c14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/636fd495c81d9b92820461de8e56e4cce7614256", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/636fd495c81d9b92820461de8e56e4cce7614256", "html_url": "https://github.com/rust-lang/rust/commit/636fd495c81d9b92820461de8e56e4cce7614256", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/636fd495c81d9b92820461de8e56e4cce7614256/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1ce0e6a00593493a12e0e3662119786c761f375", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1ce0e6a00593493a12e0e3662119786c761f375", "html_url": "https://github.com/rust-lang/rust/commit/f1ce0e6a00593493a12e0e3662119786c761f375"}], "stats": {"total": 36, "additions": 24, "deletions": 12}, "files": [{"sha": "71943ba2dc91727201847b1edaa44a2c1cb9eb7e", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/636fd495c81d9b92820461de8e56e4cce7614256/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636fd495c81d9b92820461de8e56e4cce7614256/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=636fd495c81d9b92820461de8e56e4cce7614256", "patch": "@@ -27,6 +27,7 @@ use rustc_middle::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use rustc_middle::mir::{self, Body, Promoted};\n use rustc_middle::thir;\n use rustc_middle::ty::codec::TyDecoder;\n+use rustc_middle::ty::fast_reject::SimplifiedType;\n use rustc_middle::ty::{self, Ty, TyCtxt, Visibility};\n use rustc_serialize::{opaque, Decodable, Decoder};\n use rustc_session::cstore::{\n@@ -92,8 +93,7 @@ crate struct CrateMetadata {\n     /// Trait impl data.\n     /// FIXME: Used only from queries and can use query cache,\n     /// so pre-decoding can probably be avoided.\n-    trait_impls:\n-        FxHashMap<(u32, DefIndex), Lazy<[(DefIndex, Option<ty::fast_reject::SimplifiedType>)]>>,\n+    trait_impls: FxHashMap<(u32, DefIndex), Lazy<[(DefIndex, Option<SimplifiedType>)]>>,\n     /// Proc macro descriptions for this crate, if it's a proc macro crate.\n     raw_proc_macros: Option<&'static [ProcMacro]>,\n     /// Source maps for code from the crate.\n@@ -1376,7 +1376,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         &self,\n         tcx: TyCtxt<'tcx>,\n         filter: Option<DefId>,\n-    ) -> &'tcx [(DefId, Option<ty::fast_reject::SimplifiedType>)] {\n+    ) -> &'tcx [(DefId, Option<SimplifiedType>)] {\n         if self.root.is_proc_macro_crate() {\n             // proc-macro crates export no trait impls.\n             return &[];"}, {"sha": "12d66f4fc45f36eabcea41a7b4cacc0ab9b3b813", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/636fd495c81d9b92820461de8e56e4cce7614256/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636fd495c81d9b92820461de8e56e4cce7614256/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=636fd495c81d9b92820461de8e56e4cce7614256", "patch": "@@ -26,7 +26,7 @@ use rustc_middle::mir::interpret;\n use rustc_middle::thir;\n use rustc_middle::traits::specialization_graph;\n use rustc_middle::ty::codec::TyEncoder;\n-use rustc_middle::ty::fast_reject::{self, SimplifyParams, StripReferences};\n+use rustc_middle::ty::fast_reject::{self, SimplifiedType, SimplifyParams, StripReferences};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, SymbolName, Ty, TyCtxt};\n use rustc_serialize::{opaque, Encodable, Encoder};\n@@ -2055,7 +2055,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n \n struct ImplsVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    impls: FxHashMap<DefId, Vec<(DefIndex, Option<fast_reject::SimplifiedType>)>>,\n+    impls: FxHashMap<DefId, Vec<(DefIndex, Option<SimplifiedType>)>>,\n }\n \n impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplsVisitor<'tcx> {"}, {"sha": "4076e0b9e0fed83e6db7e7d9000aeb7c5cb4a1e5", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/636fd495c81d9b92820461de8e56e4cce7614256/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636fd495c81d9b92820461de8e56e4cce7614256/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=636fd495c81d9b92820461de8e56e4cce7614256", "patch": "@@ -16,6 +16,7 @@ use rustc_middle::hir::exports::Export;\n use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc_middle::mir;\n use rustc_middle::thir;\n+use rustc_middle::ty::fast_reject::SimplifiedType;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, ReprOptions, Ty};\n use rustc_serialize::opaque::Encoder;\n@@ -261,7 +262,7 @@ crate struct CrateDep {\n #[derive(MetadataEncodable, MetadataDecodable)]\n crate struct TraitImpls {\n     trait_id: (u32, DefIndex),\n-    impls: Lazy<[(DefIndex, Option<ty::fast_reject::SimplifiedType>)]>,\n+    impls: Lazy<[(DefIndex, Option<SimplifiedType>)]>,\n }\n \n /// Define `LazyTables` and `TableBuilders` at the same time."}, {"sha": "b3db2e6340024529a8b8e25e18cd90a0f1e034eb", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/636fd495c81d9b92820461de8e56e4cce7614256/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636fd495c81d9b92820461de8e56e4cce7614256/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=636fd495c81d9b92820461de8e56e4cce7614256", "patch": "@@ -1411,16 +1411,14 @@ rustc_queries! {\n \n     /// Given a crate and a trait, look up all impls of that trait in the crate.\n     /// Return `(impl_id, self_ty)`.\n-    query implementations_of_trait(_: (CrateNum, DefId))\n-        -> &'tcx [(DefId, Option<ty::fast_reject::SimplifiedType>)] {\n+    query implementations_of_trait(_: (CrateNum, DefId)) -> &'tcx [(DefId, Option<SimplifiedType>)] {\n         desc { \"looking up implementations of a trait in a crate\" }\n         separate_provide_extern\n     }\n \n     /// Given a crate, look up all trait impls in that crate.\n     /// Return `(impl_id, self_ty)`.\n-    query all_trait_implementations(_: CrateNum)\n-        -> &'tcx [(DefId, Option<ty::fast_reject::SimplifiedType>)] {\n+    query all_trait_implementations(_: CrateNum) -> &'tcx [(DefId, Option<SimplifiedType>)] {\n         desc { \"looking up all (?) trait implementations\" }\n         separate_provide_extern\n     }"}, {"sha": "daf9156a15f347f047500450a608ca88dec54013", "filename": "compiler/rustc_middle/src/ty/fast_reject.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/636fd495c81d9b92820461de8e56e4cce7614256/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636fd495c81d9b92820461de8e56e4cce7614256/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs?ref=636fd495c81d9b92820461de8e56e4cce7614256", "patch": "@@ -143,6 +143,18 @@ pub fn simplify_type(\n }\n \n impl<D: Copy + Debug + Ord + Eq> SimplifiedTypeGen<D> {\n+    pub fn def(self) -> Option<D> {\n+        match self {\n+            AdtSimplifiedType(d)\n+            | ForeignSimplifiedType(d)\n+            | TraitSimplifiedType(d)\n+            | ClosureSimplifiedType(d)\n+            | GeneratorSimplifiedType(d)\n+            | OpaqueSimplifiedType(d) => Some(d),\n+            _ => None,\n+        }\n+    }\n+\n     pub fn map_def<U, F>(self, map: F) -> SimplifiedTypeGen<U>\n     where\n         F: Fn(D) -> U,"}, {"sha": "3af1b3a04402466c98444f4e37deb36323a6decb", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/636fd495c81d9b92820461de8e56e4cce7614256/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636fd495c81d9b92820461de8e56e4cce7614256/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=636fd495c81d9b92820461de8e56e4cce7614256", "patch": "@@ -28,6 +28,7 @@ use crate::traits::query::{\n };\n use crate::traits::specialization_graph;\n use crate::traits::{self, ImplSource};\n+use crate::ty::fast_reject::SimplifiedType;\n use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::util::AlwaysRequiresDrop;\n use crate::ty::{self, AdtSizedConstraint, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};"}, {"sha": "34d059f4ec849c28625f05730bf0cf5fb56891d4", "filename": "compiler/rustc_middle/src/ty/trait_def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/636fd495c81d9b92820461de8e56e4cce7614256/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/636fd495c81d9b92820461de8e56e4cce7614256/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftrait_def.rs?ref=636fd495c81d9b92820461de8e56e4cce7614256", "patch": "@@ -1,5 +1,5 @@\n use crate::traits::specialization_graph;\n-use crate::ty::fast_reject::{self, SimplifyParams, StripReferences};\n+use crate::ty::fast_reject::{self, SimplifiedType, SimplifyParams, StripReferences};\n use crate::ty::fold::TypeFoldable;\n use crate::ty::{Ty, TyCtxt};\n use rustc_hir as hir;\n@@ -68,7 +68,7 @@ pub enum TraitSpecializationKind {\n pub struct TraitImpls {\n     blanket_impls: Vec<DefId>,\n     /// Impls indexed by their simplified self type, for fast lookup.\n-    non_blanket_impls: FxIndexMap<fast_reject::SimplifiedType, Vec<DefId>>,\n+    non_blanket_impls: FxIndexMap<SimplifiedType, Vec<DefId>>,\n }\n \n impl TraitImpls {"}]}