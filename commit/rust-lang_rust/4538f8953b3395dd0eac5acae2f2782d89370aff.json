{"sha": "4538f8953b3395dd0eac5acae2f2782d89370aff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MzhmODk1M2IzMzk1ZGQwZWFjNWFjYWUyZjI3ODJkODkzNzBhZmY=", "commit": {"author": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-03-25T17:07:08Z"}, "committer": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-03-26T15:01:21Z"}, "message": "add 'fn write_u16s'(rustc_mir::interpret::Memory)", "tree": {"sha": "8606fc5fbdfd1b21524bb1c72fd9f5a16a8c27de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8606fc5fbdfd1b21524bb1c72fd9f5a16a8c27de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4538f8953b3395dd0eac5acae2f2782d89370aff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4538f8953b3395dd0eac5acae2f2782d89370aff", "html_url": "https://github.com/rust-lang/rust/commit/4538f8953b3395dd0eac5acae2f2782d89370aff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4538f8953b3395dd0eac5acae2f2782d89370aff/comments", "author": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4519e2b966aaf7e2eb0105d0a1593fdb6e0a3a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4519e2b966aaf7e2eb0105d0a1593fdb6e0a3a5", "html_url": "https://github.com/rust-lang/rust/commit/e4519e2b966aaf7e2eb0105d0a1593fdb6e0a3a5"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "7b6de4b0726c1ccce907cf29b4ab8fb939bee9a9", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4538f8953b3395dd0eac5acae2f2782d89370aff/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4538f8953b3395dd0eac5acae2f2782d89370aff/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=4538f8953b3395dd0eac5acae2f2782d89370aff", "patch": "@@ -833,17 +833,57 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         ptr: Scalar<M::PointerTag>,\n         src: impl IntoIterator<Item = u8>,\n     ) -> InterpResult<'tcx> {\n-        let src = src.into_iter();\n+        let mut src = src.into_iter();\n         let size = Size::from_bytes(src.size_hint().0);\n         // `write_bytes` checks that this lower bound `size` matches the upper bound and reality.\n         let ptr = match self.check_ptr_access(ptr, size, Align::from_bytes(1).unwrap())? {\n             Some(ptr) => ptr,\n-            None => return Ok(()), // zero-sized access\n+            None => {\n+                // zero-sized access\n+                src.next().expect_none(\"iterator said it was empty but returned an element\");\n+                return Ok(());\n+            }\n         };\n         let tcx = self.tcx.tcx;\n         self.get_raw_mut(ptr.alloc_id)?.write_bytes(&tcx, ptr, src)\n     }\n \n+    /// Writes the given stream of u16s into memory.\n+    ///\n+    /// Performs appropriate bounds checks.\n+    pub fn write_u16s(\n+        &mut self,\n+        ptr: Scalar<M::PointerTag>,\n+        src: impl IntoIterator<Item = u16>,\n+    ) -> InterpResult<'tcx> {\n+        let mut src = src.into_iter();\n+        let (lower, upper) = src.size_hint();\n+        let len = upper.expect(\"can only write bounded iterators\");\n+        assert_eq!(lower, len, \"can only write iterators with a precise length\");\n+\n+        let size = Size::from_bytes(lower);\n+        let ptr = match self.check_ptr_access(ptr, size, Align::from_bytes(2).unwrap())? {\n+            Some(ptr) => ptr,\n+            None => {\n+                // zero-sized access\n+                src.next().expect_none(\"iterator said it was empty but returned an element\");\n+                return Ok(());\n+            }\n+        };\n+        let tcx = self.tcx.tcx;\n+        let allocation = self.get_raw_mut(ptr.alloc_id)?;\n+\n+        for idx in 0..len {\n+            let val = Scalar::from_u16(\n+                src.next().expect(\"iterator was shorter than it said it would be\"),\n+            );\n+            let offset_ptr = ptr.offset(Size::from_bytes(idx) * 2, &tcx)?; // `Size` multiplication\n+            allocation.write_scalar(&tcx, offset_ptr, val.into(), Size::from_bytes(2))?;\n+        }\n+        src.next().expect_none(\"iterator was longer than it said it would be\");\n+        Ok(())\n+    }\n+\n     /// Expects the caller to have checked bounds and alignment.\n     pub fn copy(\n         &mut self,"}, {"sha": "85e44adc30b86a14c76f50e6fd82ee7426d44f65", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4538f8953b3395dd0eac5acae2f2782d89370aff/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4538f8953b3395dd0eac5acae2f2782d89370aff/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=4538f8953b3395dd0eac5acae2f2782d89370aff", "patch": "@@ -24,6 +24,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(range_is_empty)]\n #![feature(stmt_expr_attributes)]\n #![feature(trait_alias)]\n+#![feature(option_expect_none)]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}]}