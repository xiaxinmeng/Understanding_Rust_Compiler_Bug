{"sha": "360167db16a3ae6bb3146cf8e05336288b711921", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MDE2N2RiMTZhM2FlNmJiMzE0NmNmOGUwNTMzNjI4OGI3MTE5MjE=", "commit": {"author": {"name": "gfreezy", "email": "gfreezy@gmail.com", "date": "2019-01-18T08:29:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-19T12:36:58Z"}, "message": "prefer inline tests", "tree": {"sha": "7ebb001ab92b37b05aa0c62208ee6915bffec097", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ebb001ab92b37b05aa0c62208ee6915bffec097"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/360167db16a3ae6bb3146cf8e05336288b711921", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/360167db16a3ae6bb3146cf8e05336288b711921", "html_url": "https://github.com/rust-lang/rust/commit/360167db16a3ae6bb3146cf8e05336288b711921", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/360167db16a3ae6bb3146cf8e05336288b711921/comments", "author": {"login": "gfreezy", "id": 510012, "node_id": "MDQ6VXNlcjUxMDAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/510012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gfreezy", "html_url": "https://github.com/gfreezy", "followers_url": "https://api.github.com/users/gfreezy/followers", "following_url": "https://api.github.com/users/gfreezy/following{/other_user}", "gists_url": "https://api.github.com/users/gfreezy/gists{/gist_id}", "starred_url": "https://api.github.com/users/gfreezy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gfreezy/subscriptions", "organizations_url": "https://api.github.com/users/gfreezy/orgs", "repos_url": "https://api.github.com/users/gfreezy/repos", "events_url": "https://api.github.com/users/gfreezy/events{/privacy}", "received_events_url": "https://api.github.com/users/gfreezy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ab6d1eaa036f8620542ad9c12764957e868b7e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ab6d1eaa036f8620542ad9c12764957e868b7e0", "html_url": "https://github.com/rust-lang/rust/commit/6ab6d1eaa036f8620542ad9c12764957e868b7e0"}], "stats": {"total": 271, "additions": 140, "deletions": 131}, "files": [{"sha": "53dc273c631fa5d5d87708752b0b9956204fd450", "filename": "crates/ra_ide_api/src/rename.rs", "status": "modified", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/360167db16a3ae6bb3146cf8e05336288b711921/crates%2Fra_ide_api%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360167db16a3ae6bb3146cf8e05336288b711921/crates%2Fra_ide_api%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Frename.rs?ref=360167db16a3ae6bb3146cf8e05336288b711921", "patch": "@@ -132,3 +132,139 @@ fn rename_reference(\n         cursor_position: None,\n     });\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use insta::assert_debug_snapshot_matches;\n+    use test_utils::assert_eq_text;\n+    use crate::{\n+        mock_analysis::single_file_with_position,\n+        mock_analysis::analysis_and_position,\n+        FileId\n+};\n+\n+    #[test]\n+    fn test_rename_for_local() {\n+        test_rename(\n+            r#\"\n+    fn main() {\n+        let mut i = 1;\n+        let j = 1;\n+        i = i<|> + j;\n+\n+        {\n+            i = 0;\n+        }\n+\n+        i = 5;\n+    }\"#,\n+            \"k\",\n+            r#\"\n+    fn main() {\n+        let mut k = 1;\n+        let j = 1;\n+        k = k + j;\n+\n+        {\n+            k = 0;\n+        }\n+\n+        k = 5;\n+    }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_rename_for_param_inside() {\n+        test_rename(\n+            r#\"\n+    fn foo(i : u32) -> u32 {\n+        i<|>\n+    }\"#,\n+            \"j\",\n+            r#\"\n+    fn foo(j : u32) -> u32 {\n+        j\n+    }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_rename_refs_for_fn_param() {\n+        test_rename(\n+            r#\"\n+    fn foo(i<|> : u32) -> u32 {\n+        i\n+    }\"#,\n+            \"new_name\",\n+            r#\"\n+    fn foo(new_name : u32) -> u32 {\n+        new_name\n+    }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_rename_for_mut_param() {\n+        test_rename(\n+            r#\"\n+    fn foo(mut i<|> : u32) -> u32 {\n+        i\n+    }\"#,\n+            \"new_name\",\n+            r#\"\n+    fn foo(mut new_name : u32) -> u32 {\n+        new_name\n+    }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_rename_mod() {\n+        let (analysis, position) = analysis_and_position(\n+            \"\n+        //- /bar.rs\n+        mod fo<|>o;\n+        //- /bar/foo.rs\n+        // emtpy\n+    \",\n+        );\n+        let new_name = \"foo2\";\n+        let source_change = analysis.rename(position, new_name).unwrap();\n+        assert_debug_snapshot_matches!(\"rename_mod\", &source_change);\n+    }\n+\n+    #[test]\n+    fn test_rename_mod_in_dir() {\n+        let (analysis, position) = analysis_and_position(\n+            \"\n+        //- /lib.rs\n+        mod fo<|>o;\n+        //- /foo/mod.rs\n+        // emtpy\n+    \",\n+        );\n+        let new_name = \"foo2\";\n+        let source_change = analysis.rename(position, new_name).unwrap();\n+        assert_debug_snapshot_matches!(\"rename_mod_in_dir\", &source_change);\n+    }\n+\n+    fn test_rename(text: &str, new_name: &str, expected: &str) {\n+        let (analysis, position) = single_file_with_position(text);\n+        let source_change = analysis.rename(position, new_name).unwrap();\n+        let mut text_edit_bulder = ra_text_edit::TextEditBuilder::default();\n+        let mut file_id: Option<FileId> = None;\n+        if let Some(change) = source_change {\n+            for edit in change.source_file_edits {\n+                file_id = Some(edit.file_id);\n+                for atom in edit.edit.as_atoms() {\n+                    text_edit_bulder.replace(atom.delete, atom.insert.clone());\n+                }\n+            }\n+        }\n+        let result = text_edit_bulder\n+            .finish()\n+            .apply(&*analysis.file_text(file_id.unwrap()));\n+        assert_eq_text!(expected, &*result);\n+    }\n+}"}, {"sha": "dc97b3334a719ec8723b6d3d8e9854c181de6bed", "filename": "crates/ra_ide_api/src/snapshots/tests__rename_mod.snap", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/360167db16a3ae6bb3146cf8e05336288b711921/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Ftests__rename_mod.snap", "raw_url": "https://github.com/rust-lang/rust/raw/360167db16a3ae6bb3146cf8e05336288b711921/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Ftests__rename_mod.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Ftests__rename_mod.snap?ref=360167db16a3ae6bb3146cf8e05336288b711921", "patch": "@@ -1,6 +1,6 @@\n-Created: 2019-01-16T14:12:39.379431+00:00\n+Created: 2019-01-18T08:26:43.427092+00:00\n Creator: insta@0.1.4\n-Source: crates/ra_ide_api/tests/test/main.rs\n+Source: crates/ra_ide_api/src/rename.rs\n \n Some(\n     SourceChange {", "previous_filename": "crates/ra_ide_api/tests/test/snapshots/test__rename_mod.snap"}, {"sha": "7dcd65185704d3d079cc93215b9396a849c541c7", "filename": "crates/ra_ide_api/src/snapshots/tests__rename_mod_in_dir.snap", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/360167db16a3ae6bb3146cf8e05336288b711921/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Ftests__rename_mod_in_dir.snap", "raw_url": "https://github.com/rust-lang/rust/raw/360167db16a3ae6bb3146cf8e05336288b711921/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Ftests__rename_mod_in_dir.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Ftests__rename_mod_in_dir.snap?ref=360167db16a3ae6bb3146cf8e05336288b711921", "patch": "@@ -1,6 +1,6 @@\n-Created: 2019-01-16T14:12:39.379358+00:00\n+Created: 2019-01-18T08:26:43.427095+00:00\n Creator: insta@0.1.4\n-Source: crates/ra_ide_api/tests/test/main.rs\n+Source: crates/ra_ide_api/src/rename.rs\n \n Some(\n     SourceChange {", "previous_filename": "crates/ra_ide_api/tests/test/snapshots/test__rename_mod_in_dir.snap"}, {"sha": "7560751909a90530bff91f95fe624efa0dbb4ebc", "filename": "crates/ra_ide_api/tests/test/main.rs", "status": "modified", "additions": 0, "deletions": 127, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/360167db16a3ae6bb3146cf8e05336288b711921/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360167db16a3ae6bb3146cf8e05336288b711921/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Ftests%2Ftest%2Fmain.rs?ref=360167db16a3ae6bb3146cf8e05336288b711921", "patch": "@@ -2,9 +2,7 @@ use ra_ide_api::{\n     AnalysisChange,\n     CrateGraph, FileId, mock_analysis::{MockAnalysis, single_file, single_file_with_position}, Query,\n };\n-use ra_ide_api::mock_analysis::analysis_and_position;\n use ra_syntax::TextRange;\n-use test_utils::assert_eq_text;\n use insta::assert_debug_snapshot_matches;\n \n #[test]\n@@ -92,131 +90,6 @@ fn test_find_all_refs_for_fn_param() {\n     assert_eq!(refs.len(), 2);\n }\n \n-#[test]\n-fn test_rename_for_local() {\n-    test_rename(\n-        r#\"\n-    fn main() {\n-        let mut i = 1;\n-        let j = 1;\n-        i = i<|> + j;\n-\n-        {\n-            i = 0;\n-        }\n-\n-        i = 5;\n-    }\"#,\n-        \"k\",\n-        r#\"\n-    fn main() {\n-        let mut k = 1;\n-        let j = 1;\n-        k = k + j;\n-\n-        {\n-            k = 0;\n-        }\n-\n-        k = 5;\n-    }\"#,\n-    );\n-}\n-\n-#[test]\n-fn test_rename_for_param_inside() {\n-    test_rename(\n-        r#\"\n-    fn foo(i : u32) -> u32 {\n-        i<|>\n-    }\"#,\n-        \"j\",\n-        r#\"\n-    fn foo(j : u32) -> u32 {\n-        j\n-    }\"#,\n-    );\n-}\n-\n-#[test]\n-fn test_rename_refs_for_fn_param() {\n-    test_rename(\n-        r#\"\n-    fn foo(i<|> : u32) -> u32 {\n-        i\n-    }\"#,\n-        \"new_name\",\n-        r#\"\n-    fn foo(new_name : u32) -> u32 {\n-        new_name\n-    }\"#,\n-    );\n-}\n-\n-#[test]\n-fn test_rename_for_mut_param() {\n-    test_rename(\n-        r#\"\n-    fn foo(mut i<|> : u32) -> u32 {\n-        i\n-    }\"#,\n-        \"new_name\",\n-        r#\"\n-    fn foo(mut new_name : u32) -> u32 {\n-        new_name\n-    }\"#,\n-    );\n-}\n-\n-#[test]\n-fn test_rename_mod() {\n-    let (analysis, position) = analysis_and_position(\n-        \"\n-        //- /bar.rs\n-        mod fo<|>o;\n-        //- /bar/foo.rs\n-        // emtpy\n-    \",\n-    );\n-    let new_name = \"foo2\";\n-    let source_change = analysis.rename(position, new_name).unwrap();\n-    assert_debug_snapshot_matches!(\"rename_mod\", &source_change);\n-}\n-\n-#[test]\n-fn test_rename_mod_in_dir() {\n-    let (analysis, position) = analysis_and_position(\n-        \"\n-        //- /lib.rs\n-        mod fo<|>o;\n-        //- /foo/mod.rs\n-        // emtpy\n-    \",\n-    );\n-    let new_name = \"foo2\";\n-    let source_change = analysis.rename(position, new_name).unwrap();\n-    assert_debug_snapshot_matches!(\"rename_mod_in_dir\", &source_change);\n-}\n-\n-fn test_rename(text: &str, new_name: &str, expected: &str) {\n-    let (analysis, position) = single_file_with_position(text);\n-    let source_change = analysis.rename(position, new_name).unwrap();\n-    let mut text_edit_bulder = ra_text_edit::TextEditBuilder::default();\n-    let mut file_id: Option<FileId> = None;\n-    if let Some(change) = source_change {\n-        for edit in change.source_file_edits {\n-            file_id = Some(edit.file_id);\n-            for atom in edit.edit.as_atoms() {\n-                text_edit_bulder.replace(atom.delete, atom.insert.clone());\n-            }\n-        }\n-    }\n-    let result = text_edit_bulder\n-        .finish()\n-        .apply(&*analysis.file_text(file_id.unwrap()));\n-    assert_eq_text!(expected, &*result);\n-}\n-\n #[test]\n fn world_symbols_include_stuff_from_macros() {\n     let (analysis, _) = single_file("}]}