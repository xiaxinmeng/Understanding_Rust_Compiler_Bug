{"sha": "7855a730b971d39a4743cf6183e9591fae6f17a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4NTVhNzMwYjk3MWQzOWE0NzQzY2Y2MTgzZTk1OTFmYWU2ZjE3YTY=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-01-14T18:00:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-14T18:00:14Z"}, "message": "Rollup merge of #80966 - KodrAus:deprecate/spin_loop_hint, r=m-ou-se\n\nDeprecate atomic::spin_loop_hint in favour of hint::spin_loop\n\nFor https://github.com/rust-lang/rust/issues/55002\n\nWe wanted to leave `atomic::spin_loop_hint` alone when stabilizing `hint::spin_loop` so folks had some time to migrate. This now deprecates `atomic_spin_loop_hint`.", "tree": {"sha": "eba43347198b3d64c6aa4ae9d809e3d16de1de2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eba43347198b3d64c6aa4ae9d809e3d16de1de2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7855a730b971d39a4743cf6183e9591fae6f17a6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgAIauCRBK7hj4Ov3rIwAAdHIIAHm8exTX0BUk+L7LLDp9LjXg\n36fd3T3cnZS2VMsQtMPj+yPOlR8L+gCgUCYb3+VfxPZ6Bj8ndD1e9iKq4mcWA9ZA\ntIvaU/yq6qPVl38vY870t24Bq5lqmXrtVJj+iidFfOvKD5V8/rdEzJNzR3YJbXLb\nj611aVaXlHrLkdZc7jyuHsIugu50Ym1/IIi8sf6ELr6lcsBZxpMyXuFyNujC8bZi\nBfKep6PNhSr/WMs54hln1UAEYyK5sg8RnCb++lgvbSRbk7xGIL2/ymAZBCxNex/M\nqvHTw57KF/oMseeN83e5WQSuTzFN4BE17QS6f01j0MfX6ArwKt2SZWiPFb2AKtc=\n=gxR/\n-----END PGP SIGNATURE-----\n", "payload": "tree eba43347198b3d64c6aa4ae9d809e3d16de1de2d\nparent ce48709405270cae2dfdf99d9a8d57a4f672ad34\nparent d65cb6ebcedadbfdf190975228e5db7a5c8f1555\nauthor Mara Bos <m-ou.se@m-ou.se> 1610647214 +0000\ncommitter GitHub <noreply@github.com> 1610647214 +0000\n\nRollup merge of #80966 - KodrAus:deprecate/spin_loop_hint, r=m-ou-se\n\nDeprecate atomic::spin_loop_hint in favour of hint::spin_loop\n\nFor https://github.com/rust-lang/rust/issues/55002\n\nWe wanted to leave `atomic::spin_loop_hint` alone when stabilizing `hint::spin_loop` so folks had some time to migrate. This now deprecates `atomic_spin_loop_hint`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7855a730b971d39a4743cf6183e9591fae6f17a6", "html_url": "https://github.com/rust-lang/rust/commit/7855a730b971d39a4743cf6183e9591fae6f17a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7855a730b971d39a4743cf6183e9591fae6f17a6/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce48709405270cae2dfdf99d9a8d57a4f672ad34", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce48709405270cae2dfdf99d9a8d57a4f672ad34", "html_url": "https://github.com/rust-lang/rust/commit/ce48709405270cae2dfdf99d9a8d57a4f672ad34"}, {"sha": "d65cb6ebcedadbfdf190975228e5db7a5c8f1555", "url": "https://api.github.com/repos/rust-lang/rust/commits/d65cb6ebcedadbfdf190975228e5db7a5c8f1555", "html_url": "https://github.com/rust-lang/rust/commit/d65cb6ebcedadbfdf190975228e5db7a5c8f1555"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "5067af1d4ff688b5d6a43b6c5c8f08ccdf7860d2", "filename": "library/alloc/src/sync/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7855a730b971d39a4743cf6183e9591fae6f17a6/library%2Falloc%2Fsrc%2Fsync%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7855a730b971d39a4743cf6183e9591fae6f17a6/library%2Falloc%2Fsrc%2Fsync%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync%2Ftests.rs?ref=7855a730b971d39a4743cf6183e9591fae6f17a6", "patch": "@@ -370,7 +370,7 @@ fn test_weak_count_locked() {\n         let n = Arc::weak_count(&a2);\n         assert!(n < 2, \"bad weak count: {}\", n);\n         #[cfg(miri)] // Miri's scheduler does not guarantee liveness, and thus needs this hint.\n-        atomic::spin_loop_hint();\n+        std::hint::spin_loop();\n     }\n     t.join().unwrap();\n }"}, {"sha": "81c9e1d1c10b2f1b129977372e324cd8f9ac39f5", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7855a730b971d39a4743cf6183e9591fae6f17a6/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7855a730b971d39a4743cf6183e9591fae6f17a6/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=7855a730b971d39a4743cf6183e9591fae6f17a6", "patch": "@@ -120,21 +120,6 @@ use crate::intrinsics;\n \n use crate::hint::spin_loop;\n \n-/// Signals the processor that it is inside a busy-wait spin-loop (\"spin lock\").\n-///\n-/// This function is expected to be deprecated in favor of\n-/// [`hint::spin_loop`].\n-///\n-/// **Note**: On platforms that do not support receiving spin-loop hints this function does not\n-/// do anything at all.\n-///\n-/// [`hint::spin_loop`]: crate::hint::spin_loop\n-#[inline]\n-#[stable(feature = \"spin_loop_hint\", since = \"1.24.0\")]\n-pub fn spin_loop_hint() {\n-    spin_loop()\n-}\n-\n /// A boolean type which can be safely shared between threads.\n ///\n /// This type has the same in-memory representation as a [`bool`].\n@@ -2791,3 +2776,15 @@ impl<T> fmt::Pointer for AtomicPtr<T> {\n         fmt::Pointer::fmt(&self.load(Ordering::SeqCst), f)\n     }\n }\n+\n+/// Signals the processor that it is inside a busy-wait spin-loop (\"spin lock\").\n+///\n+/// This function is deprecated in favor of [`hint::spin_loop`].\n+///\n+/// [`hint::spin_loop`]: crate::hint::spin_loop\n+#[inline]\n+#[stable(feature = \"spin_loop_hint\", since = \"1.24.0\")]\n+#[rustc_deprecated(since = \"1.51.0\", reason = \"use hint::spin_loop instead\")]\n+pub fn spin_loop_hint() {\n+    spin_loop()\n+}"}, {"sha": "885389ca54cd42c1df5390f7b27a8baf02ae6d28", "filename": "library/std/src/sys/hermit/mutex.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7855a730b971d39a4743cf6183e9591fae6f17a6/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7855a730b971d39a4743cf6183e9591fae6f17a6/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs?ref=7855a730b971d39a4743cf6183e9591fae6f17a6", "patch": "@@ -1,9 +1,10 @@\n use crate::cell::UnsafeCell;\n use crate::collections::VecDeque;\n use crate::ffi::c_void;\n+use crate::hint;\n use crate::ops::{Deref, DerefMut, Drop};\n use crate::ptr;\n-use crate::sync::atomic::{spin_loop_hint, AtomicUsize, Ordering};\n+use crate::sync::atomic::{AtomicUsize, Ordering};\n use crate::sys::hermit::abi;\n \n /// This type provides a lock based on busy waiting to realize mutual exclusion\n@@ -46,7 +47,7 @@ impl<T> Spinlock<T> {\n     fn obtain_lock(&self) {\n         let ticket = self.queue.fetch_add(1, Ordering::SeqCst) + 1;\n         while self.dequeue.load(Ordering::SeqCst) != ticket {\n-            spin_loop_hint();\n+            hint::spin_loop();\n         }\n     }\n "}, {"sha": "7f1a671bab4eb73bccb31da09d1f3e4558c94ea8", "filename": "library/std/src/sys/sgx/waitqueue/spin_mutex.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7855a730b971d39a4743cf6183e9591fae6f17a6/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fwaitqueue%2Fspin_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7855a730b971d39a4743cf6183e9591fae6f17a6/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fwaitqueue%2Fspin_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fwaitqueue%2Fspin_mutex.rs?ref=7855a730b971d39a4743cf6183e9591fae6f17a6", "patch": "@@ -2,8 +2,9 @@\n mod tests;\n \n use crate::cell::UnsafeCell;\n+use crate::hint;\n use crate::ops::{Deref, DerefMut};\n-use crate::sync::atomic::{spin_loop_hint, AtomicBool, Ordering};\n+use crate::sync::atomic::{AtomicBool, Ordering};\n \n #[derive(Default)]\n pub struct SpinMutex<T> {\n@@ -32,7 +33,7 @@ impl<T> SpinMutex<T> {\n             match self.try_lock() {\n                 None => {\n                     while self.lock.load(Ordering::Relaxed) {\n-                        spin_loop_hint()\n+                        hint::spin_loop()\n                     }\n                 }\n                 Some(guard) => return guard,"}]}