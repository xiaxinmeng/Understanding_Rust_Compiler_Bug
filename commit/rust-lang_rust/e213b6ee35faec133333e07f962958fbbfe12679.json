{"sha": "e213b6ee35faec133333e07f962958fbbfe12679", "node_id": "C_kwDOAAsO6NoAKGUyMTNiNmVlMzVmYWVjMTMzMzMzZTA3Zjk2Mjk1OGZiYmZlMTI2Nzk", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-06T01:36:40Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-08-19T14:54:55Z"}, "message": "Move `TransmutingNull` into `Transmute` lint pass", "tree": {"sha": "2f39c899c1b921d3a1389a1ac67fb14a59ca7988", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f39c899c1b921d3a1389a1ac67fb14a59ca7988"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e213b6ee35faec133333e07f962958fbbfe12679", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e213b6ee35faec133333e07f962958fbbfe12679", "html_url": "https://github.com/rust-lang/rust/commit/e213b6ee35faec133333e07f962958fbbfe12679", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e213b6ee35faec133333e07f962958fbbfe12679/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e834855950701dae9657e7c0dbde195f85a96bf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e834855950701dae9657e7c0dbde195f85a96bf3", "html_url": "https://github.com/rust-lang/rust/commit/e834855950701dae9657e7c0dbde195f85a96bf3"}], "stats": {"total": 183, "additions": 89, "deletions": 94}, "files": [{"sha": "aad6a1af200c98aa5ccf91baf72f6a7aed38cfdb", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e213b6ee35faec133333e07f962958fbbfe12679/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e213b6ee35faec133333e07f962958fbbfe12679/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=e213b6ee35faec133333e07f962958fbbfe12679", "patch": "@@ -315,10 +315,10 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(transmute::TRANSMUTE_INT_TO_FLOAT),\n     LintId::of(transmute::TRANSMUTE_NUM_TO_BYTES),\n     LintId::of(transmute::TRANSMUTE_PTR_TO_REF),\n+    LintId::of(transmute::TRANSMUTING_NULL),\n     LintId::of(transmute::UNSOUND_COLLECTION_TRANSMUTE),\n     LintId::of(transmute::USELESS_TRANSMUTE),\n     LintId::of(transmute::WRONG_TRANSMUTE),\n-    LintId::of(transmuting_null::TRANSMUTING_NULL),\n     LintId::of(types::BORROWED_BOX),\n     LintId::of(types::BOX_COLLECTION),\n     LintId::of(types::REDUNDANT_ALLOCATION),"}, {"sha": "9d69d4acc90a0d6772ac540fb4597fb82e3fd195", "filename": "clippy_lints/src/lib.register_correctness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e213b6ee35faec133333e07f962958fbbfe12679/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e213b6ee35faec133333e07f962958fbbfe12679/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_correctness.rs?ref=e213b6ee35faec133333e07f962958fbbfe12679", "patch": "@@ -62,9 +62,9 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(serde_api::SERDE_API_MISUSE),\n     LintId::of(size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT),\n     LintId::of(swap::ALMOST_SWAPPED),\n+    LintId::of(transmute::TRANSMUTING_NULL),\n     LintId::of(transmute::UNSOUND_COLLECTION_TRANSMUTE),\n     LintId::of(transmute::WRONG_TRANSMUTE),\n-    LintId::of(transmuting_null::TRANSMUTING_NULL),\n     LintId::of(unicode::INVISIBLE_CHARACTERS),\n     LintId::of(uninit_vec::UNINIT_VEC),\n     LintId::of(unit_hash::UNIT_HASH),"}, {"sha": "a2a810520703f4ce2c8492414c2746604508315e", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e213b6ee35faec133333e07f962958fbbfe12679/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e213b6ee35faec133333e07f962958fbbfe12679/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=e213b6ee35faec133333e07f962958fbbfe12679", "patch": "@@ -540,10 +540,10 @@ store.register_lints(&[\n     transmute::TRANSMUTE_PTR_TO_PTR,\n     transmute::TRANSMUTE_PTR_TO_REF,\n     transmute::TRANSMUTE_UNDEFINED_REPR,\n+    transmute::TRANSMUTING_NULL,\n     transmute::UNSOUND_COLLECTION_TRANSMUTE,\n     transmute::USELESS_TRANSMUTE,\n     transmute::WRONG_TRANSMUTE,\n-    transmuting_null::TRANSMUTING_NULL,\n     types::BORROWED_BOX,\n     types::BOX_COLLECTION,\n     types::LINKEDLIST,"}, {"sha": "e0b6ded0b58477ce78e3f6da01067ca3a9ca29a1", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e213b6ee35faec133333e07f962958fbbfe12679/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e213b6ee35faec133333e07f962958fbbfe12679/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=e213b6ee35faec133333e07f962958fbbfe12679", "patch": "@@ -367,7 +367,6 @@ mod to_digit_is_some;\n mod trailing_empty_array;\n mod trait_bounds;\n mod transmute;\n-mod transmuting_null;\n mod types;\n mod undocumented_unsafe_blocks;\n mod unicode;\n@@ -723,7 +722,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || Box::new(unnecessary_wraps::UnnecessaryWraps::new(avoid_breaking_exported_api)));\n     store.register_late_pass(|| Box::new(assertions_on_constants::AssertionsOnConstants));\n     store.register_late_pass(|| Box::new(assertions_on_result_states::AssertionsOnResultStates));\n-    store.register_late_pass(|| Box::new(transmuting_null::TransmutingNull));\n     store.register_late_pass(|| Box::new(inherent_to_string::InherentToString));\n     let max_trait_bounds = conf.max_trait_bounds;\n     store.register_late_pass(move || Box::new(trait_bounds::TraitBounds::new(max_trait_bounds)));"}, {"sha": "424a6e9264e4b96680b6e4a09cfab81e2a36083f", "filename": "clippy_lints/src/transmute/mod.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e213b6ee35faec133333e07f962958fbbfe12679/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e213b6ee35faec133333e07f962958fbbfe12679/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs?ref=e213b6ee35faec133333e07f962958fbbfe12679", "patch": "@@ -9,6 +9,7 @@ mod transmute_ptr_to_ref;\n mod transmute_ref_to_ref;\n mod transmute_undefined_repr;\n mod transmutes_expressible_as_ptr_casts;\n+mod transmuting_null;\n mod unsound_collection_transmute;\n mod useless_transmute;\n mod utils;\n@@ -386,6 +387,28 @@ declare_clippy_lint! {\n     \"transmute to or from a type with an undefined representation\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for transmute calls which would receive a null pointer.\n+    ///\n+    /// ### Why is this bad?\n+    /// Transmuting a null pointer is undefined behavior.\n+    ///\n+    /// ### Known problems\n+    /// Not all cases can be detected at the moment of this writing.\n+    /// For example, variables which hold a null pointer and are then fed to a `transmute`\n+    /// call, aren't detectable yet.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let null_ref: &u64 = unsafe { std::mem::transmute(0 as *const u64) };\n+    /// ```\n+    #[clippy::version = \"1.35.0\"]\n+    pub TRANSMUTING_NULL,\n+    correctness,\n+    \"transmutes from a null pointer to a reference, which is undefined behavior\"\n+}\n+\n pub struct Transmute {\n     msrv: Option<RustcVersion>,\n }\n@@ -404,6 +427,7 @@ impl_lint_pass!(Transmute => [\n     UNSOUND_COLLECTION_TRANSMUTE,\n     TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,\n     TRANSMUTE_UNDEFINED_REPR,\n+    TRANSMUTING_NULL,\n ]);\n impl Transmute {\n     #[must_use]\n@@ -436,6 +460,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n \n                 let linted = wrong_transmute::check(cx, e, from_ty, to_ty)\n                     | crosspointer_transmute::check(cx, e, from_ty, to_ty)\n+                    | transmuting_null::check(cx, e, arg, to_ty)\n                     | transmute_ptr_to_ref::check(cx, e, from_ty, to_ty, arg, path, self.msrv)\n                     | transmute_int_to_char::check(cx, e, from_ty, to_ty, arg, const_context)\n                     | transmute_ref_to_ref::check(cx, e, from_ty, to_ty, arg, const_context)"}, {"sha": "c4981124f396634e75a606c0d8775b920b9ec8ff", "filename": "clippy_lints/src/transmute/transmuting_null.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/e213b6ee35faec133333e07f962958fbbfe12679/clippy_lints%2Fsrc%2Ftransmute%2Ftransmuting_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e213b6ee35faec133333e07f962958fbbfe12679/clippy_lints%2Fsrc%2Ftransmute%2Ftransmuting_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmuting_null.rs?ref=e213b6ee35faec133333e07f962958fbbfe12679", "patch": "@@ -0,0 +1,61 @@\n+use clippy_utils::consts::{constant_context, Constant};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::is_expr_diagnostic_item;\n+use if_chain::if_chain;\n+use rustc_ast::LitKind;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::LateContext;\n+use rustc_middle::ty::Ty;\n+use rustc_span::symbol::sym;\n+\n+use super::TRANSMUTING_NULL;\n+\n+const LINT_MSG: &str = \"transmuting a known null pointer into a reference\";\n+\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, arg: &'tcx Expr<'_>, to_ty: Ty<'tcx>) -> bool {\n+    if !to_ty.is_ref() {\n+        return false;\n+    }\n+\n+    // Catching transmute over constants that resolve to `null`.\n+    let mut const_eval_context = constant_context(cx, cx.typeck_results());\n+    if_chain! {\n+        if let ExprKind::Path(ref _qpath) = arg.kind;\n+        if let Some(Constant::RawPtr(x)) = const_eval_context.expr(arg);\n+        if x == 0;\n+        then {\n+            span_lint(cx, TRANSMUTING_NULL, expr.span, LINT_MSG);\n+            return true;\n+        }\n+    }\n+\n+    // Catching:\n+    // `std::mem::transmute(0 as *const i32)`\n+    if_chain! {\n+        if let ExprKind::Cast(inner_expr, _cast_ty) = arg.kind;\n+        if let ExprKind::Lit(ref lit) = inner_expr.kind;\n+        if let LitKind::Int(0, _) = lit.node;\n+        then {\n+            span_lint(cx, TRANSMUTING_NULL, expr.span, LINT_MSG);\n+            return true;\n+        }\n+    }\n+\n+    // Catching:\n+    // `std::mem::transmute(std::ptr::null::<i32>())`\n+    if_chain! {\n+        if let ExprKind::Call(func1, []) = arg.kind;\n+        if is_expr_diagnostic_item(cx, func1, sym::ptr_null);\n+        then {\n+            span_lint(cx, TRANSMUTING_NULL, expr.span, LINT_MSG);\n+            return true;\n+        }\n+    }\n+\n+    // FIXME:\n+    // Also catch transmutations of variables which are known nulls.\n+    // To do this, MIR const propagation seems to be the better tool.\n+    // Whenever MIR const prop routines are more developed, this will\n+    // become available. As of this writing (25/03/19) it is not yet.\n+    false\n+}"}, {"sha": "7939dfedc3a2b4fb6d39555f29a3596828895861", "filename": "clippy_lints/src/transmuting_null.rs", "status": "removed", "additions": 0, "deletions": 89, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/e834855950701dae9657e7c0dbde195f85a96bf3/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e834855950701dae9657e7c0dbde195f85a96bf3/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmuting_null.rs?ref=e834855950701dae9657e7c0dbde195f85a96bf3", "patch": "@@ -1,89 +0,0 @@\n-use clippy_utils::consts::{constant_context, Constant};\n-use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::is_expr_diagnostic_item;\n-use if_chain::if_chain;\n-use rustc_ast::LitKind;\n-use rustc_hir::{Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::lint::in_external_macro;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::symbol::sym;\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for transmute calls which would receive a null pointer.\n-    ///\n-    /// ### Why is this bad?\n-    /// Transmuting a null pointer is undefined behavior.\n-    ///\n-    /// ### Known problems\n-    /// Not all cases can be detected at the moment of this writing.\n-    /// For example, variables which hold a null pointer and are then fed to a `transmute`\n-    /// call, aren't detectable yet.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// let null_ref: &u64 = unsafe { std::mem::transmute(0 as *const u64) };\n-    /// ```\n-    #[clippy::version = \"1.35.0\"]\n-    pub TRANSMUTING_NULL,\n-    correctness,\n-    \"transmutes from a null pointer to a reference, which is undefined behavior\"\n-}\n-\n-declare_lint_pass!(TransmutingNull => [TRANSMUTING_NULL]);\n-\n-const LINT_MSG: &str = \"transmuting a known null pointer into a reference\";\n-\n-impl<'tcx> LateLintPass<'tcx> for TransmutingNull {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if in_external_macro(cx.sess(), expr.span) {\n-            return;\n-        }\n-\n-        if_chain! {\n-            if let ExprKind::Call(func, [arg]) = expr.kind;\n-            if is_expr_diagnostic_item(cx, func, sym::transmute);\n-\n-            then {\n-                // Catching transmute over constants that resolve to `null`.\n-                let mut const_eval_context = constant_context(cx, cx.typeck_results());\n-                if_chain! {\n-                    if let ExprKind::Path(ref _qpath) = arg.kind;\n-                    if let Some(Constant::RawPtr(x)) = const_eval_context.expr(arg);\n-                    if x == 0;\n-                    then {\n-                        span_lint(cx, TRANSMUTING_NULL, expr.span, LINT_MSG)\n-                    }\n-                }\n-\n-                // Catching:\n-                // `std::mem::transmute(0 as *const i32)`\n-                if_chain! {\n-                    if let ExprKind::Cast(inner_expr, _cast_ty) = arg.kind;\n-                    if let ExprKind::Lit(ref lit) = inner_expr.kind;\n-                    if let LitKind::Int(0, _) = lit.node;\n-                    then {\n-                        span_lint(cx, TRANSMUTING_NULL, expr.span, LINT_MSG)\n-                    }\n-                }\n-\n-                // Catching:\n-                // `std::mem::transmute(std::ptr::null::<i32>())`\n-                if_chain! {\n-                    if let ExprKind::Call(func1, []) = arg.kind;\n-                    if is_expr_diagnostic_item(cx, func1, sym::ptr_null);\n-                    then {\n-                        span_lint(cx, TRANSMUTING_NULL, expr.span, LINT_MSG)\n-                    }\n-                }\n-\n-                // FIXME:\n-                // Also catch transmutations of variables which are known nulls.\n-                // To do this, MIR const propagation seems to be the better tool.\n-                // Whenever MIR const prop routines are more developed, this will\n-                // become available. As of this writing (25/03/19) it is not yet.\n-            }\n-        }\n-    }\n-}"}]}