{"sha": "04dee085016741016c77d958323fe4e19cea3037", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ZGVlMDg1MDE2NzQxMDE2Yzc3ZDk1ODMyM2ZlNGUxOWNlYTMwMzc=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2017-08-10T19:30:29Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2017-08-16T15:45:07Z"}, "message": "return `Command` from make_compile_args", "tree": {"sha": "64629b3011ccf8d2560d201a50ceeca6bcf78af8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64629b3011ccf8d2560d201a50ceeca6bcf78af8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04dee085016741016c77d958323fe4e19cea3037", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEJ9c9OhXB85uXPmbOeLE+KEl68t8FAlmUaIMACgkQeLE+KEl6\n8t8qmw//azgtb1Uyc+HcGQRHIxPo/TK57rJHNYRZPtCXrWqy0SohBF+fktnrkAyS\nGJF4gbJDvYHKL3Vts8rh5aelSYgzzqiQiYPzWeiBUhzV1N0gYs5sTYL/CHKgw/N9\nxDhJVd57ayyxSSKXU1vyLJJBDngqBZ3qFnGtWLXXQPJAGhlwWoRq13dzmkp7h8fQ\n4qkTxN1WJE0REzdIeSRpL55Q7SeDe5ZIS+IcoutPfhluG6MaJxnud2Dcgptq6STc\n7Lyk6EdxWvphTsffnT96xpDzY0CM+mORELylKhYGWQROSKsAUjOk3T1PdAYJPP8t\ndF+MdLxhHsfbV8aCdasfbODFdRRIAqPH25PLASLapxHHT5JzPfEiDGRGg2ugmxuB\n+NxOLbCvuyGgJNswc3cWxsh/v5RA9YD+wdS0/WUfoT3vhz32x7XVg+kpiJ24qE7P\nTJ79u5bPS/p33EjFXpmhpdg/kdB+lCqQK+yMMUgStVOICfPjkgu5+u1vSnKQ5+Q/\nO5HZVvacmOg4ZFAAaDBGiZ4fc9N/K2oWJw3v3v/Gq0NTlCEYDBRnymoezZUhZy68\nLY1SBcTgXV9Twa0nXwVH78OSLMd7TfifpS7IaSReZpBe9qEacUZNDxgNXQf/YP1/\nElIoq/d+taukM0D7peOxy1Wt8A4Q4erFLVHxflCAX7KPTkUrFhU=\n=Sz+R\n-----END PGP SIGNATURE-----", "payload": "tree 64629b3011ccf8d2560d201a50ceeca6bcf78af8\nparent 90a87be9cb075ba03322de085ca0077c7f20dc47\nauthor Andy Russell <arussell123@gmail.com> 1502393429 -0400\ncommitter Andy Russell <arussell123@gmail.com> 1502898307 -0400\n\nreturn `Command` from make_compile_args\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04dee085016741016c77d958323fe4e19cea3037", "html_url": "https://github.com/rust-lang/rust/commit/04dee085016741016c77d958323fe4e19cea3037", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04dee085016741016c77d958323fe4e19cea3037/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90a87be9cb075ba03322de085ca0077c7f20dc47", "url": "https://api.github.com/repos/rust-lang/rust/commits/90a87be9cb075ba03322de085ca0077c7f20dc47", "html_url": "https://github.com/rust-lang/rust/commit/90a87be9cb075ba03322de085ca0077c7f20dc47"}], "stats": {"total": 113, "additions": 45, "deletions": 68}, "files": [{"sha": "67e5e0321360a58270104bbbc8ab3b76f5a049d5", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 45, "deletions": 68, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/04dee085016741016c77d958323fe4e19cea3037/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04dee085016741016c77d958323fe4e19cea3037/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=04dee085016741016c77d958323fe4e19cea3037", "patch": "@@ -1116,10 +1116,9 @@ actual:\\n\\\n             }\n             _ => {}\n         }\n-        let ProcArgs { prog, args } = self.make_compile_args(\n+\n+        let rustc = self.make_compile_args(\n             extra_args, &self.testpaths.file, TargetLocation::ThisFile(self.make_exe_name()));\n-        let mut rustc = Command::new(prog);\n-        rustc.args(args);\n         self.compose_and_run_compiler(rustc, None)\n     }\n \n@@ -1280,11 +1279,9 @@ actual:\\n\\\n                 testpaths: &aux_testpaths,\n                 revision: self.revision\n             };\n-            let ProcArgs { prog, args } =\n+            let aux_rustc =\n                 aux_cx.make_compile_args(crate_type, &aux_testpaths.file, aux_output);\n-            let mut rustc = Command::new(prog);\n-            rustc.args(&args);\n-            let auxres = aux_cx.compose_and_run(rustc,\n+            let auxres = aux_cx.compose_and_run(aux_rustc,\n                                                 aux_cx.config.compile_lib_path.to_str().unwrap(),\n                                                 Some(aux_dir.to_str().unwrap()),\n                                                 None);\n@@ -1341,48 +1338,38 @@ actual:\\n\\\n     }\n \n     fn make_compile_args(&self,\n-                         extras: Vec<String> ,\n+                         extra_args: Vec<String>,\n                          input_file: &Path,\n                          output_file: TargetLocation)\n-                         -> ProcArgs\n+                         -> Command\n     {\n-        let target = if self.props.force_host {\n-            &*self.config.host\n-        } else {\n-            &*self.config.target\n-        };\n-\n-        // FIXME (#9639): This needs to handle non-utf8 paths\n-        let mut args = vec![input_file.to_str().unwrap().to_owned(),\n-                            \"-L\".to_owned(),\n-                            self.config.build_base.to_str().unwrap().to_owned()];\n+        let mut rustc = Command::new(&self.config.rustc_path);\n+        rustc.arg(input_file)\n+            .arg(\"-L\").arg(&self.config.build_base);\n \n         // Optionally prevent default --target if specified in test compile-flags.\n         let custom_target = self.props.compile_flags\n             .iter()\n             .fold(false, |acc, x| acc || x.starts_with(\"--target\"));\n \n         if !custom_target {\n-            args.extend(vec![\n-                format!(\"--target={}\", target),\n-            ]);\n+            let target = if self.props.force_host {\n+                &*self.config.host\n+            } else {\n+                &*self.config.target\n+            };\n+\n+            rustc.arg(&format!(\"--target={}\", target));\n         }\n \n         if let Some(revision) = self.revision {\n-            args.extend(vec![\n-                \"--cfg\".to_string(),\n-                revision.to_string(),\n-            ]);\n+            rustc.args(&[\"--cfg\", revision]);\n         }\n \n         if let Some(ref incremental_dir) = self.props.incremental_dir {\n-            args.extend(vec![\n-                \"-Z\".to_string(),\n-                format!(\"incremental={}\", incremental_dir.display()),\n-            ]);\n+            rustc.args(&[\"-Z\", &format!(\"incremental={}\", incremental_dir.display())]);\n         }\n \n-\n         match self.config.mode {\n             CompileFail |\n             ParseFail |\n@@ -1391,27 +1378,22 @@ actual:\\n\\\n                 // fashion, then you want JSON mode. Old-skool error\n                 // patterns still match the raw compiler output.\n                 if self.props.error_patterns.is_empty() {\n-                    args.extend([\"--error-format\",\n-                                 \"json\"]\n-                                .iter()\n-                                .map(|s| s.to_string()));\n+                    rustc.args(&[\"--error-format\", \"json\"]);\n                 }\n             }\n             MirOpt => {\n-                args.extend([\"-Zdump-mir=all\",\n-                             \"-Zmir-opt-level=3\",\n-                             \"-Zdump-mir-exclude-pass-number\"]\n-                            .iter()\n-                            .map(|s| s.to_string()));\n-\n+                rustc.args(&[\n+                    \"-Zdump-mir=all\",\n+                    \"-Zmir-opt-level=3\",\n+                    \"-Zdump-mir-exclude-pass-number\"]);\n \n                 let mir_dump_dir = self.get_mir_dump_dir();\n                 create_dir_all(mir_dump_dir.as_path()).unwrap();\n                 let mut dir_opt = \"-Zdump-mir-dir=\".to_string();\n                 dir_opt.push_str(mir_dump_dir.to_str().unwrap());\n                 debug!(\"dir_opt: {:?}\", dir_opt);\n \n-                args.push(dir_opt);\n+                rustc.arg(dir_opt);\n             }\n             RunPass |\n             RunFail |\n@@ -1428,32 +1410,30 @@ actual:\\n\\\n             }\n         }\n \n-        args.extend_from_slice(&extras);\n+        rustc.args(&extra_args);\n+\n         if !self.props.no_prefer_dynamic {\n-            args.push(\"-C\".to_owned());\n-            args.push(\"prefer-dynamic\".to_owned());\n+            rustc.args(&[\"-C\", \"prefer-dynamic\"]);\n         }\n-        let path = match output_file {\n+\n+        match output_file {\n             TargetLocation::ThisFile(path) => {\n-                args.push(\"-o\".to_owned());\n-                path\n+                rustc.arg(\"-o\").arg(path);\n             }\n             TargetLocation::ThisDirectory(path) => {\n-                args.push(\"--out-dir\".to_owned());\n-                path\n+                rustc.arg(\"--out-dir\").arg(path);\n             }\n-        };\n-        args.push(path.to_str().unwrap().to_owned());\n+        }\n+\n         if self.props.force_host {\n-            args.extend(self.split_maybe_args(&self.config.host_rustcflags));\n+            rustc.args(self.split_maybe_args(&self.config.host_rustcflags));\n         } else {\n-            args.extend(self.split_maybe_args(&self.config.target_rustcflags));\n-        }\n-        args.extend(self.props.compile_flags.iter().cloned());\n-        ProcArgs {\n-            prog: self.config.rustc_path.to_str().unwrap().to_owned(),\n-            args,\n+            rustc.args(self.split_maybe_args(&self.config.target_rustcflags));\n         }\n+\n+        rustc.args(&self.props.compile_flags);\n+\n+        rustc\n     }\n \n     fn make_lib_name(&self, auxfile: &Path) -> PathBuf {\n@@ -1660,15 +1640,12 @@ actual:\\n\\\n                                  aux_dir.to_str().unwrap().to_owned()];\n         let llvm_args = vec![\"--emit=llvm-ir\".to_owned(),];\n         link_args.extend(llvm_args);\n-        let args = self.make_compile_args(link_args,\n-                                          &self.testpaths.file,\n-                                          TargetLocation::ThisDirectory(\n-                                              self.output_base_name().parent()\n-                                                                     .unwrap()\n-                                                                     .to_path_buf()));\n-        let ProcArgs { prog, args } = args;\n-        let mut rustc = Command::new(prog);\n-        rustc.args(args);\n+        let rustc = self.make_compile_args(link_args,\n+                                           &self.testpaths.file,\n+                                           TargetLocation::ThisDirectory(\n+                                               self.output_base_name().parent()\n+                                                                      .unwrap()\n+                                                                      .to_path_buf()));\n         self.compose_and_run_compiler(rustc, None)\n     }\n "}]}