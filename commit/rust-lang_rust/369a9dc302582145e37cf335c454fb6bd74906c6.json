{"sha": "369a9dc302582145e37cf335c454fb6bd74906c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2OWE5ZGMzMDI1ODIxNDVlMzdjZjMzNWM0NTRmYjZiZDc0OTA2YzY=", "commit": {"author": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2015-09-16T13:27:14Z"}, "committer": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2015-09-16T13:27:14Z"}, "message": "Remove boundary checks in slice comparison operators\n\nIn order to get rid of all range checks, the compiler needs to\nexplicitly see that the slices it iterates over are as long as the\nloop variable upper bound.\n\nThis further improves the performance of slice comparison:\n\n```\ntest u8_cmp          ... bench:       4,761 ns/iter (+/- 1,203)\ntest u8_lt           ... bench:       4,579 ns/iter (+/- 649)\ntest u8_partial_cmp  ... bench:       4,768 ns/iter (+/- 761)\ntest u16_cmp         ... bench:       4,607 ns/iter (+/- 580)\ntest u16_lt          ... bench:       4,681 ns/iter (+/- 567)\ntest u16_partial_cmp ... bench:       4,607 ns/iter (+/- 967)\ntest u32_cmp         ... bench:       4,448 ns/iter (+/- 891)\ntest u32_lt          ... bench:       4,546 ns/iter (+/- 992)\ntest u32_partial_cmp ... bench:       4,415 ns/iter (+/- 646)\ntest u64_cmp         ... bench:       4,380 ns/iter (+/- 1,184)\ntest u64_lt          ... bench:       5,684 ns/iter (+/- 602)\ntest u64_partial_cmp ... bench:       4,663 ns/iter (+/- 1,158)\n```", "tree": {"sha": "c4466c1ef9744288a7c9e40207c07aa68c87163f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4466c1ef9744288a7c9e40207c07aa68c87163f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/369a9dc302582145e37cf335c454fb6bd74906c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/369a9dc302582145e37cf335c454fb6bd74906c6", "html_url": "https://github.com/rust-lang/rust/commit/369a9dc302582145e37cf335c454fb6bd74906c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/369a9dc302582145e37cf335c454fb6bd74906c6/comments", "author": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf9254a75e06f61ecd837e2f90ed0afc22ffdede", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf9254a75e06f61ecd837e2f90ed0afc22ffdede", "html_url": "https://github.com/rust-lang/rust/commit/bf9254a75e06f61ecd837e2f90ed0afc22ffdede"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "af8db18a8737c5f1963a7f5b5e2b3a4fdce37b1d", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/369a9dc302582145e37cf335c454fb6bd74906c6/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369a9dc302582145e37cf335c454fb6bd74906c6/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=369a9dc302582145e37cf335c454fb6bd74906c6", "patch": "@@ -1561,9 +1561,11 @@ impl<T: Ord> Ord for [T] {\n     #[inline]\n     fn cmp(&self, other: &[T]) -> Ordering {\n         let l = cmp::min(self.len(), other.len());\n+        let lhs = &self[..l];\n+        let rhs = &other[..l];\n \n         for i in 0..l {\n-            match self[i].cmp(&other[i]) {\n+            match lhs[i].cmp(&rhs[i]) {\n                 Ordering::Equal => (),\n                 non_eq => return non_eq,\n             }\n@@ -1578,9 +1580,11 @@ impl<T: PartialOrd> PartialOrd for [T] {\n     #[inline]\n     fn partial_cmp(&self, other: &[T]) -> Option<Ordering> {\n         let l = cmp::min(self.len(), other.len());\n+        let lhs = &self[..l];\n+        let rhs = &other[..l];\n \n         for i in 0..l {\n-            match self[i].partial_cmp(&other[i]) {\n+            match lhs[i].partial_cmp(&rhs[i]) {\n                 Some(Ordering::Equal) => (),\n                 non_eq => return non_eq,\n             }"}]}