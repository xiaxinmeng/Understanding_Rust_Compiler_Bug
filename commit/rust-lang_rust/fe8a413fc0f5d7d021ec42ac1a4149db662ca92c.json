{"sha": "fe8a413fc0f5d7d021ec42ac1a4149db662ca92c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlOGE0MTNmYzBmNWQ3ZDAyMWVjNDJhYzFhNDE0OWRiNjYyY2E5MmM=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2014-09-18T21:05:52Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2014-09-25T01:53:58Z"}, "message": "handling fallout from entry api", "tree": {"sha": "4b69db548f43514ff30815703f6ad413902efdb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b69db548f43514ff30815703f6ad413902efdb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c", "html_url": "https://github.com/rust-lang/rust/commit/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e58f3088b5c86339f8d2cdbdb37d1c54af08bca", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e58f3088b5c86339f8d2cdbdb37d1c54af08bca", "html_url": "https://github.com/rust-lang/rust/commit/8e58f3088b5c86339f8d2cdbdb37d1c54af08bca"}], "stats": {"total": 143, "additions": 99, "deletions": 44}, "files": [{"sha": "e3d829b4ee3c46f9944b1bc81cdb55581b8019d9", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=fe8a413fc0f5d7d021ec42ac1a4149db662ca92c", "patch": "@@ -31,6 +31,7 @@ use syntax::parse;\n use syntax::parse::token::InternedString;\n \n use std::collections::HashMap;\n+use std::collections::hashmap::{Occupied, Vacant};\n use getopts::{optopt, optmulti, optflag, optflagopt};\n use getopts;\n use std::cell::{RefCell};\n@@ -808,8 +809,11 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             Some(s) => s,\n             None => early_error(\"--extern value must be of the format `foo=bar`\"),\n         };\n-        let locs = externs.find_or_insert(name.to_string(), Vec::new());\n-        locs.push(location.to_string());\n+\n+        match externs.entry(name.to_string()) {\n+            Vacant(entry) => { entry.set(vec![location.to_string()]); },\n+            Occupied(mut entry) => { entry.get_mut().push(location.to_string()); },\n+        }\n     }\n \n     let crate_name = matches.opt_str(\"crate-name\");"}, {"sha": "c73c5e019ddea8c6f1c8384f21677a65d31e2121", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=fe8a413fc0f5d7d021ec42ac1a4149db662ca92c", "patch": "@@ -36,6 +36,7 @@ use lint::{Context, LintPass, LintArray};\n \n use std::cmp;\n use std::collections::HashMap;\n+use std::collections::hashmap::{Occupied, Vacant};\n use std::slice;\n use std::{i8, i16, i32, i64, u8, u16, u32, u64, f32, f64};\n use syntax::abi;\n@@ -1204,15 +1205,18 @@ impl UnusedMut {\n     fn check_unused_mut_pat(&self, cx: &Context, pats: &[P<ast::Pat>]) {\n         // collect all mutable pattern and group their NodeIDs by their Identifier to\n         // avoid false warnings in match arms with multiple patterns\n+\n         let mut mutables = HashMap::new();\n         for p in pats.iter() {\n             pat_util::pat_bindings(&cx.tcx.def_map, &**p, |mode, id, _, path1| {\n                 let ident = path1.node;\n                 match mode {\n                     ast::BindByValue(ast::MutMutable) => {\n                         if !token::get_ident(ident).get().starts_with(\"_\") {\n-                            mutables.insert_or_update_with(ident.name.uint(),\n-                                vec!(id), |_, old| { old.push(id); });\n+                            match mutables.entry(ident.name.uint()) {\n+                                Vacant(entry) => { entry.set(vec![id]); },\n+                                Occupied(mut entry) => { entry.get_mut().push(id); },\n+                            }\n                         }\n                     }\n                     _ => {"}, {"sha": "e2d997a93fe0410b980c68d67c51c71a9fb0bdfe", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=fe8a413fc0f5d7d021ec42ac1a4149db662ca92c", "patch": "@@ -24,6 +24,7 @@ use plugin::load::PluginMetadata;\n \n use std::rc::Rc;\n use std::collections::HashMap;\n+use std::collections::hashmap::{Occupied, Vacant};\n use syntax::ast;\n use syntax::abi;\n use syntax::attr;\n@@ -82,7 +83,10 @@ fn dump_crates(cstore: &CStore) {\n fn warn_if_multiple_versions(diag: &SpanHandler, cstore: &CStore) {\n     let mut map = HashMap::new();\n     cstore.iter_crate_data(|cnum, data| {\n-        map.find_or_insert_with(data.name(), |_| Vec::new()).push(cnum);\n+        match map.entry(data.name()) {\n+            Vacant(entry) => { entry.set(vec![cnum]); },\n+            Occupied(mut entry) => { entry.get_mut().push(cnum); },\n+        }\n     });\n \n     for (name, dupes) in map.into_iter() {"}, {"sha": "dc97b6c0df8cce1f9220d0c92f412311ec953907", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=fe8a413fc0f5d7d021ec42ac1a4149db662ca92c", "patch": "@@ -237,6 +237,7 @@ use std::slice;\n use std::string;\n \n use std::collections::{HashMap, HashSet};\n+use std::collections::hashmap::{Occupied, Vacant};\n use flate;\n use time;\n \n@@ -428,15 +429,18 @@ impl<'a> Context<'a> {\n                 return FileDoesntMatch\n             };\n             info!(\"lib candidate: {}\", path.display());\n-            let slot = candidates.find_or_insert_with(hash.to_string(), |_| {\n-                (HashSet::new(), HashSet::new())\n-            });\n+\n+            let slot = match candidates.entry(hash.to_string()) {\n+                Occupied(entry) => entry.into_mut(),\n+                Vacant(entry) => entry.set((HashSet::new(), HashSet::new())),\n+            };\n             let (ref mut rlibs, ref mut dylibs) = *slot;\n             if rlib {\n                 rlibs.insert(fs::realpath(path).unwrap());\n             } else {\n                 dylibs.insert(fs::realpath(path).unwrap());\n             }\n+\n             FileMatches\n         });\n "}, {"sha": "98d2cefac0fcf55f7cc896d4cf54aa49882c2d0c", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=fe8a413fc0f5d7d021ec42ac1a4149db662ca92c", "patch": "@@ -28,6 +28,7 @@ use syntax::visit;\n use syntax::{ast, ast_map, ast_util};\n \n use std::rc::Rc;\n+use std::collections::hashmap::Vacant;\n \n //\n // This pass classifies expressions by their constant-ness.\n@@ -321,7 +322,10 @@ pub fn const_expr_to_pat(tcx: &ty::ctxt, expr: &Expr) -> P<Pat> {\n \n         ExprCall(ref callee, ref args) => {\n             let def = tcx.def_map.borrow().get_copy(&callee.id);\n-            tcx.def_map.borrow_mut().find_or_insert(expr.id, def);\n+            match tcx.def_map.borrow_mut().entry(expr.id) {\n+              Vacant(entry) => { entry.set(def); }\n+              _ => {}\n+            };\n             let path = match def {\n                 def::DefStruct(def_id) => def_to_path(tcx, def_id),\n                 def::DefVariant(_, variant_did, _) => def_to_path(tcx, variant_did),"}, {"sha": "b357d9a45344ffeea66b8b22da9ef126a4d0d894", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=fe8a413fc0f5d7d021ec42ac1a4149db662ca92c", "patch": "@@ -58,6 +58,7 @@ use syntax::visit;\n use syntax::visit::Visitor;\n \n use std::collections::{HashMap, HashSet};\n+use std::collections::hashmap::{Occupied, Vacant};\n use std::cell::{Cell, RefCell};\n use std::gc::GC;\n use std::mem::replace;\n@@ -2813,10 +2814,13 @@ impl<'a> Resolver<'a> {\n         let is_public = import_directive.is_public;\n \n         let mut import_resolutions = module_.import_resolutions.borrow_mut();\n-        let dest_import_resolution = import_resolutions.find_or_insert_with(name, |_| {\n-            // Create a new import resolution from this child.\n-            ImportResolution::new(id, is_public)\n-        });\n+        let dest_import_resolution = match import_resolutions.entry(name) {\n+            Occupied(entry) => entry.into_mut(),\n+            Vacant(entry) => {\n+                // Create a new import resolution from this child.\n+                entry.set(ImportResolution::new(id, is_public))\n+            }\n+        };\n \n         debug!(\"(resolving glob import) writing resolution `{}` in `{}` \\\n                to `{}`\",\n@@ -5991,19 +5995,21 @@ impl<'a> Resolver<'a> {\n         assert!(match lp {LastImport{..} => false, _ => true},\n                 \"Import should only be used for `use` directives\");\n         self.last_private.insert(node_id, lp);\n-        self.def_map.borrow_mut().insert_or_update_with(node_id, def, |_, old_value| {\n+\n+        match self.def_map.borrow_mut().entry(node_id) {\n             // Resolve appears to \"resolve\" the same ID multiple\n             // times, so here is a sanity check it at least comes to\n             // the same conclusion! - nmatsakis\n-            if def != *old_value {\n+            Occupied(entry) => if def != *entry.get() {\n                 self.session\n                     .bug(format!(\"node_id {:?} resolved first to {:?} and \\\n                                   then {:?}\",\n                                  node_id,\n-                                 *old_value,\n+                                 *entry.get(),\n                                  def).as_slice());\n-            }\n-        });\n+            },\n+            Vacant(entry) => { entry.set(def); },\n+        }\n     }\n \n     fn enforce_default_binding_mode(&mut self,"}, {"sha": "f6898a6bdf9b0f6a4b553b4e980b502d0b614f0e", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=fe8a413fc0f5d7d021ec42ac1a4149db662ca92c", "patch": "@@ -50,6 +50,7 @@ use std::mem;\n use std::ops;\n use std::rc::Rc;\n use std::collections::{HashMap, HashSet};\n+use std::collections::hashmap::{Occupied, Vacant};\n use arena::TypedArena;\n use syntax::abi;\n use syntax::ast::{CrateNum, DefId, FnStyle, Ident, ItemTrait, LOCAL_CRATE};\n@@ -4641,9 +4642,10 @@ pub fn lookup_field_type(tcx: &ctxt,\n         node_id_to_type(tcx, id.node)\n     } else {\n         let mut tcache = tcx.tcache.borrow_mut();\n-        let pty = tcache.find_or_insert_with(id, |_| {\n-            csearch::get_field_type(tcx, struct_id, id)\n-        });\n+        let pty = match tcache.entry(id) {\n+            Occupied(entry) => entry.into_mut(),\n+            Vacant(entry) => entry.set(csearch::get_field_type(tcx, struct_id, id)),\n+        };\n         pty.ty\n     };\n     t.subst(tcx, substs)"}, {"sha": "8a28293e8ae7fc7dee31adc7262ec3b866c48e1d", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=fe8a413fc0f5d7d021ec42ac1a4149db662ca92c", "patch": "@@ -122,6 +122,7 @@ use util::nodemap::{DefIdMap, FnvHashMap, NodeMap};\n \n use std::cell::{Cell, RefCell};\n use std::collections::HashMap;\n+use std::collections::hashmap::{Occupied, Vacant};\n use std::mem::replace;\n use std::rc::Rc;\n use std::slice;\n@@ -2017,11 +2018,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n          */\n \n         let mut region_obligations = self.inh.region_obligations.borrow_mut();\n-        let v = region_obligations.find_or_insert_with(self.body_id,\n-                                                       |_| Vec::new());\n-        v.push(RegionObligation { sub_region: r,\n+        let region_obligation = RegionObligation { sub_region: r,\n                                   sup_type: ty,\n-                                  origin: origin });\n+                                  origin: origin };\n+\n+        match region_obligations.entry(self.body_id) {\n+            Vacant(entry) => { entry.set(vec![region_obligation]); },\n+            Occupied(mut entry) => { entry.get_mut().push(region_obligation); },\n+        }\n     }\n \n     pub fn add_obligations_for_parameters(&self,"}, {"sha": "db9877698a3653c9f6af7f3b0aa1b08d9a3d8a1f", "filename": "src/librustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=fe8a413fc0f5d7d021ec42ac1a4149db662ca92c", "patch": "@@ -18,6 +18,7 @@ use middle::ty_fold::TypeFolder;\n use syntax::ast;\n \n use std::collections::HashMap;\n+use std::collections::hashmap::{Occupied, Vacant};\n use util::ppaux::Repr;\n \n // Helper functions related to manipulating region types.\n@@ -35,7 +36,10 @@ pub fn replace_late_bound_regions_in_fn_sig(\n             debug!(\"region r={}\", r.to_string());\n             match r {\n                 ty::ReLateBound(s, br) if s == fn_sig.binder_id => {\n-                    *map.find_or_insert_with(br, |_| mapf(br))\n+                    * match map.entry(br) {\n+                        Vacant(entry) => entry.set(mapf(br)),\n+                        Occupied(entry) => entry.into_mut(),\n+                    }\n                 }\n                 _ => r\n             }"}, {"sha": "b9de64bb900407519a0f49f4f005427a9f632032", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=fe8a413fc0f5d7d021ec42ac1a4149db662ca92c", "patch": "@@ -34,6 +34,7 @@\n //! both occur before the crate is rendered.\n \n use std::collections::{HashMap, HashSet};\n+use std::collections::hashmap::{Occupied, Vacant};\n use std::fmt;\n use std::io::fs::PathExtensions;\n use std::io::{fs, File, BufferedWriter, MemWriter, BufferedReader};\n@@ -801,9 +802,10 @@ impl DocFolder for Cache {\n             clean::ImplItem(ref i) => {\n                 match i.trait_ {\n                     Some(clean::ResolvedPath{ did, .. }) => {\n-                        let v = self.implementors.find_or_insert_with(did, |_| {\n-                            Vec::new()\n-                        });\n+                        let v = match self.implementors.entry(did) {\n+                            Vacant(entry) => entry.set(Vec::with_capacity(1)),\n+                            Occupied(entry) => entry.into_mut(),\n+                        };\n                         v.push(Implementor {\n                             def_id: item.def_id,\n                             generics: i.generics.clone(),\n@@ -998,9 +1000,10 @@ impl DocFolder for Cache {\n \n                         match did {\n                             Some(did) => {\n-                                let v = self.impls.find_or_insert_with(did, |_| {\n-                                    Vec::new()\n-                                });\n+                                let v = match self.impls.entry(did) {\n+                                    Vacant(entry) => entry.set(Vec::with_capacity(1)),\n+                                    Occupied(entry) => entry.into_mut(),\n+                                };\n                                 v.push(Impl {\n                                     impl_: i,\n                                     dox: dox,\n@@ -2141,7 +2144,10 @@ fn build_sidebar(m: &clean::Module) -> HashMap<String, Vec<String>> {\n             None => continue,\n             Some(ref s) => s.to_string(),\n         };\n-        let v = map.find_or_insert_with(short.to_string(), |_| Vec::new());\n+        let v = match map.entry(short.to_string()) {\n+            Vacant(entry) => entry.set(Vec::with_capacity(1)),\n+            Occupied(entry) => entry.into_mut(),\n+        };\n         v.push(myname);\n     }\n "}, {"sha": "237a88ded711b9626ab07876fe36290b78352913", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=fe8a413fc0f5d7d021ec42ac1a4149db662ca92c", "patch": "@@ -31,6 +31,7 @@ extern crate time;\n use std::io;\n use std::io::{File, MemWriter};\n use std::collections::HashMap;\n+use std::collections::hashmap::{Occupied, Vacant};\n use serialize::{json, Decodable, Encodable};\n use externalfiles::ExternalHtml;\n \n@@ -340,7 +341,10 @@ fn parse_externs(matches: &getopts::Matches) -> Result<core::Externs, String> {\n                 return Err(\"--extern value must be of the format `foo=bar`\".to_string());\n             }\n         };\n-        let locs = externs.find_or_insert(name.to_string(), Vec::new());\n+        let locs = match externs.entry(name.to_string()) {\n+            Vacant(entry) => entry.set(Vec::with_capacity(1)),\n+            Occupied(entry) => entry.into_mut(),\n+        };\n         locs.push(location.to_string());\n     }\n     Ok(externs)"}, {"sha": "6fe4f5b324c6e7af6111cbb6071e0b25b5f22a06", "filename": "src/libsyntax/ext/mtwt.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c/src%2Flibsyntax%2Fext%2Fmtwt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c/src%2Flibsyntax%2Fext%2Fmtwt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmtwt.rs?ref=fe8a413fc0f5d7d021ec42ac1a4149db662ca92c", "patch": "@@ -20,6 +20,7 @@ use ast::{Ident, Mrk, Name, SyntaxContext};\n use std::cell::RefCell;\n use std::rc::Rc;\n use std::collections::HashMap;\n+use std::collections::hashmap::{Occupied, Vacant};\n \n /// The SCTable contains a table of SyntaxContext_'s. It\n /// represents a flattened tree structure, to avoid having\n@@ -65,10 +66,10 @@ pub fn apply_mark(m: Mrk, ctxt: SyntaxContext) -> SyntaxContext {\n /// Extend a syntax context with a given mark and sctable (explicit memoization)\n fn apply_mark_internal(m: Mrk, ctxt: SyntaxContext, table: &SCTable) -> SyntaxContext {\n     let key = (ctxt, m);\n-    let new_ctxt = |_: &(SyntaxContext, Mrk)|\n-                   idx_push(&mut *table.table.borrow_mut(), Mark(m, ctxt));\n-\n-    *table.mark_memo.borrow_mut().find_or_insert_with(key, new_ctxt)\n+    * match table.mark_memo.borrow_mut().entry(key) {\n+        Vacant(entry) => entry.set(idx_push(&mut *table.table.borrow_mut(), Mark(m, ctxt))),\n+        Occupied(entry) => entry.into_mut(),\n+    }\n }\n \n /// Extend a syntax context with a given rename\n@@ -83,10 +84,11 @@ fn apply_rename_internal(id: Ident,\n                        ctxt: SyntaxContext,\n                        table: &SCTable) -> SyntaxContext {\n     let key = (ctxt, id, to);\n-    let new_ctxt = |_: &(SyntaxContext, Ident, Name)|\n-                   idx_push(&mut *table.table.borrow_mut(), Rename(id, to, ctxt));\n \n-    *table.rename_memo.borrow_mut().find_or_insert_with(key, new_ctxt)\n+    * match table.rename_memo.borrow_mut().entry(key) {\n+        Vacant(entry) => entry.set(idx_push(&mut *table.table.borrow_mut(), Rename(id, to, ctxt))),\n+        Occupied(entry) => entry.into_mut(),\n+    }\n }\n \n /// Apply a list of renamings to a context"}, {"sha": "83a178d7b557978c389c03b83cebd5c09bb16c89", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=fe8a413fc0f5d7d021ec42ac1a4149db662ca92c", "patch": "@@ -11,6 +11,7 @@\n #![allow(missing_doc)]\n \n use std::collections::hashmap;\n+use std::collections::hashmap::{Occupied, Vacant};\n use std::fmt::Show;\n use std::hash::Hash;\n use std::io;\n@@ -443,7 +444,10 @@ pub fn write_boxplot<T: Float + Show + FromPrimitive>(\n pub fn freq_count<T: Iterator<U>, U: Eq+Hash>(mut iter: T) -> hashmap::HashMap<U, uint> {\n     let mut map: hashmap::HashMap<U,uint> = hashmap::HashMap::new();\n     for elem in iter {\n-        map.insert_or_update_with(elem, 1, |_, count| *count += 1);\n+        match map.entry(elem) {\n+            Occupied(mut entry) => { *entry.get_mut() += 1; },\n+            Vacant(entry) => { entry.set(1); },\n+        }\n     }\n     map\n }"}, {"sha": "0b227b68ca8968d0082bd777e2320f7ad926e283", "filename": "src/liburl/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c/src%2Fliburl%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe8a413fc0f5d7d021ec42ac1a4149db662ca92c/src%2Fliburl%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliburl%2Flib.rs?ref=fe8a413fc0f5d7d021ec42ac1a4149db662ca92c", "patch": "@@ -23,6 +23,7 @@\n #![feature(default_type_params)]\n \n use std::collections::HashMap;\n+use std::collections::hashmap::{Occupied, Vacant};\n use std::fmt;\n use std::from_str::FromStr;\n use std::hash;\n@@ -342,8 +343,10 @@ pub fn decode_form_urlencoded(s: &[u8])\n                         key: String,\n                         value: String) {\n         if key.len() > 0 && value.len() > 0 {\n-            let values = map.find_or_insert_with(key, |_| vec!());\n-            values.push(value);\n+            match map.entry(key) {\n+                Vacant(entry) => { entry.set(vec![value]); },\n+                Occupied(mut entry) => { entry.get_mut().push(value); },\n+            }\n         }\n     }\n "}]}