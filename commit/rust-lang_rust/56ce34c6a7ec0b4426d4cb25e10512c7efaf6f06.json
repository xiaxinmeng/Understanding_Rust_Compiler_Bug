{"sha": "56ce34c6a7ec0b4426d4cb25e10512c7efaf6f06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2Y2UzNGM2YTdlYzBiNDQyNmQ0Y2IyNWUxMDUxMmM3ZWZhZjZmMDY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-28T15:49:46Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-28T15:53:12Z"}, "message": "Correctly flag 'lifetime definitions as definitions", "tree": {"sha": "eec2d0d619cba2989313e66a87207b1641264a74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eec2d0d619cba2989313e66a87207b1641264a74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56ce34c6a7ec0b4426d4cb25e10512c7efaf6f06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56ce34c6a7ec0b4426d4cb25e10512c7efaf6f06", "html_url": "https://github.com/rust-lang/rust/commit/56ce34c6a7ec0b4426d4cb25e10512c7efaf6f06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56ce34c6a7ec0b4426d4cb25e10512c7efaf6f06/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ebfcb9cb757ece936f631cf69136e1d38cb6afc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ebfcb9cb757ece936f631cf69136e1d38cb6afc", "html_url": "https://github.com/rust-lang/rust/commit/5ebfcb9cb757ece936f631cf69136e1d38cb6afc"}], "stats": {"total": 87, "additions": 47, "deletions": 40}, "files": [{"sha": "495b07f690e74deb917a52621f0a821312269aae", "filename": "crates/ra_ide/src/snapshots/highlighting.html", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/56ce34c6a7ec0b4426d4cb25e10512c7efaf6f06/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/56ce34c6a7ec0b4426d4cb25e10512c7efaf6f06/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Fhighlighting.html?ref=56ce34c6a7ec0b4426d4cb25e10512c7efaf6f06", "patch": "@@ -3,7 +3,7 @@\n body                { margin: 0; }\n pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4em; }\n \n-\n+.lifetime           { color: #DFAF8F; font-style: italic; }\n .comment            { color: #7F9F7F; }\n .struct, .enum      { color: #7CB8BB; }\n .enum_variant       { color: #BDE0F3; }\n@@ -27,55 +27,54 @@\n .control            { font-style: italic; }\n </style>\n <pre><code><span class=\"attribute\">#</span><span class=\"attribute\">[</span><span class=\"attribute\">derive</span><span class=\"attribute\">(</span><span class=\"attribute\">Clone</span><span class=\"attribute\">,</span><span class=\"attribute\"> </span><span class=\"attribute\">Debug</span><span class=\"attribute\">)</span><span class=\"attribute\">]</span>\n-<span class=\"keyword\">struct</span> <span class=\"struct\">Foo</span> {\n-    <span class=\"keyword\">pub</span> <span class=\"field\">x</span>: <span class=\"builtin_type\">i32</span>,\n-    <span class=\"keyword\">pub</span> <span class=\"field\">y</span>: <span class=\"builtin_type\">i32</span>,\n+<span class=\"keyword\">struct</span> <span class=\"struct declaration\">Foo</span> {\n+    <span class=\"keyword\">pub</span> <span class=\"field declaration\">x</span>: <span class=\"builtin_type\">i32</span>,\n+    <span class=\"keyword\">pub</span> <span class=\"field declaration\">y</span>: <span class=\"builtin_type\">i32</span>,\n }\n \n-<span class=\"keyword\">fn</span> <span class=\"function\">foo</span>&lt;<span class=\"type_param\">T</span>&gt;() -&gt; <span class=\"type_param\">T</span> {\n-    <span class=\"macro\">unimplemented</span><span class=\"macro\">!</span>();\n-    <span class=\"function\">foo</span>::&lt;<span class=\"builtin_type\">i32</span>&gt;();\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span>&lt;<span class=\"lifetime declaration\">'a</span>, <span class=\"type_param declaration\">T</span>&gt;() -&gt; <span class=\"type_param\">T</span> {\n+    <span class=\"function\">foo</span>::&lt;<span class=\"lifetime\">'a</span>, <span class=\"builtin_type\">i32</span>&gt;()\n }\n \n <span class=\"macro\">macro_rules</span><span class=\"macro\">!</span> def_fn {\n     ($($tt:tt)*) =&gt; {$($tt)*}\n }\n \n <span class=\"macro\">def_fn</span><span class=\"macro\">!</span> {\n-    <span class=\"keyword\">fn</span> <span class=\"function\">bar</span>() -&gt; <span class=\"builtin_type\">u32</span> {\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span>() -&gt; <span class=\"builtin_type\">u32</span> {\n         <span class=\"numeric_literal\">100</span>\n     }\n }\n \n <span class=\"comment\">// comment</span>\n-<span class=\"keyword\">fn</span> <span class=\"function\">main</span>() {\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span>() {\n     <span class=\"macro\">println</span><span class=\"macro\">!</span>(<span class=\"string_literal\">\"Hello, {}!\"</span>, <span class=\"numeric_literal\">92</span>);\n \n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable mutable\">vec</span> = Vec::new();\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">vec</span> = Vec::new();\n     <span class=\"keyword control\">if</span> <span class=\"keyword\">true</span> {\n-        <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"numeric_literal\">92</span>;\n+        <span class=\"keyword\">let</span> <span class=\"variable declaration\">x</span> = <span class=\"numeric_literal\">92</span>;\n         <span class=\"variable mutable\">vec</span>.push(<span class=\"struct\">Foo</span> { <span class=\"field\">x</span>, <span class=\"field\">y</span>: <span class=\"numeric_literal\">1</span> });\n     }\n     <span class=\"keyword unsafe\">unsafe</span> { <span class=\"variable mutable\">vec</span>.set_len(<span class=\"numeric_literal\">0</span>); }\n \n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable mutable\">x</span> = <span class=\"numeric_literal\">42</span>;\n-    <span class=\"keyword\">let</span> <span class=\"variable mutable\">y</span> = &<span class=\"keyword\">mut</span> <span class=\"variable mutable\">x</span>;\n-    <span class=\"keyword\">let</span> <span class=\"variable\">z</span> = &<span class=\"variable mutable\">y</span>;\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\">x</span> = <span class=\"numeric_literal\">42</span>;\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration mutable\">y</span> = &<span class=\"keyword\">mut</span> <span class=\"variable mutable\">x</span>;\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">z</span> = &<span class=\"variable mutable\">y</span>;\n \n     <span class=\"variable mutable\">y</span>;\n }\n \n-<span class=\"keyword\">enum</span> <span class=\"enum\">Option</span>&lt;<span class=\"type_param\">T</span>&gt; {\n-    <span class=\"enum_variant\">Some</span>(<span class=\"type_param\">T</span>),\n-    <span class=\"enum_variant\">None</span>,\n+<span class=\"keyword\">enum</span> <span class=\"enum declaration\">Option</span>&lt;<span class=\"type_param declaration\">T</span>&gt; {\n+    <span class=\"enum_variant declaration\">Some</span>(<span class=\"type_param\">T</span>),\n+    <span class=\"enum_variant declaration\">None</span>,\n }\n <span class=\"keyword\">use</span> <span class=\"enum\">Option</span>::*;\n \n-<span class=\"keyword\">impl</span>&lt;<span class=\"type_param\">T</span>&gt; <span class=\"enum\">Option</span>&lt;<span class=\"type_param\">T</span>&gt; {\n-    <span class=\"keyword\">fn</span> <span class=\"function\">and</span>&lt;<span class=\"type_param\">U</span>&gt;(<span class=\"keyword\">self</span>, <span class=\"variable\">other</span>: <span class=\"enum\">Option</span>&lt;<span class=\"type_param\">U</span>&gt;) -&gt; <span class=\"enum\">Option</span>&lt;(<span class=\"type_param\">T</span>, <span class=\"type_param\">U</span>)&gt; {\n+<span class=\"keyword\">impl</span>&lt;<span class=\"type_param declaration\">T</span>&gt; <span class=\"enum\">Option</span>&lt;<span class=\"type_param\">T</span>&gt; {\n+    <span class=\"keyword\">fn</span> <span class=\"function declaration\">and</span>&lt;<span class=\"type_param declaration\">U</span>&gt;(<span class=\"keyword\">self</span>, <span class=\"variable declaration\">other</span>: <span class=\"enum\">Option</span>&lt;<span class=\"type_param\">U</span>&gt;) -&gt; <span class=\"enum\">Option</span>&lt;(<span class=\"type_param\">T</span>, <span class=\"type_param\">U</span>)&gt; {\n         <span class=\"keyword control\">match</span> <span class=\"variable\">other</span> {\n-            <span class=\"enum_variant\">None</span> =&gt; <span class=\"macro\">todo</span><span class=\"macro\">!</span>(),\n-            <span class=\"variable\">Nope</span> =&gt; <span class=\"variable\">Nope</span>,\n+            <span class=\"enum_variant\">None</span> =&gt; <span class=\"macro\">unimplemented</span><span class=\"macro\">!</span>(),\n+            <span class=\"variable declaration\">Nope</span> =&gt; <span class=\"variable\">Nope</span>,\n         }\n     }\n }</code></pre>\n\\ No newline at end of file"}, {"sha": "dddbfc0dd69ab70cd6b5bd91b40abd6e812dcbb0", "filename": "crates/ra_ide/src/snapshots/rainbow_highlighting.html", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/56ce34c6a7ec0b4426d4cb25e10512c7efaf6f06/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/56ce34c6a7ec0b4426d4cb25e10512c7efaf6f06/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html?ref=56ce34c6a7ec0b4426d4cb25e10512c7efaf6f06", "patch": "@@ -3,7 +3,7 @@\n body                { margin: 0; }\n pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4em; }\n \n-\n+.lifetime           { color: #DFAF8F; font-style: italic; }\n .comment            { color: #7F9F7F; }\n .struct, .enum      { color: #7CB8BB; }\n .enum_variant       { color: #BDE0F3; }\n@@ -26,15 +26,15 @@\n .keyword.unsafe     { color: #BC8383; font-weight: bold; }\n .control            { font-style: italic; }\n </style>\n-<pre><code><span class=\"keyword\">fn</span> <span class=\"function\">main</span>() {\n-    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span> = <span class=\"string_literal\">\"hello\"</span>;\n-    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"2705725358298919760\" style=\"color: hsl(17,51%,74%);\">x</span> = <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span>.to_string();\n-    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"3365759661443752373\" style=\"color: hsl(127,76%,66%);\">y</span> = <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span>.to_string();\n+<pre><code><span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span>() {\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span> = <span class=\"string_literal\">\"hello\"</span>;\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"2705725358298919760\" style=\"color: hsl(17,51%,74%);\">x</span> = <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span>.to_string();\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"3365759661443752373\" style=\"color: hsl(127,76%,66%);\">y</span> = <span class=\"variable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span>.to_string();\n \n-    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"794745962933817518\" style=\"color: hsl(19,74%,76%);\">x</span> = <span class=\"string_literal\">\"other color please!\"</span>;\n-    <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"6717528807933952652\" style=\"color: hsl(85,49%,84%);\">y</span> = <span class=\"variable\" data-binding-hash=\"794745962933817518\" style=\"color: hsl(19,74%,76%);\">x</span>.to_string();\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"794745962933817518\" style=\"color: hsl(19,74%,76%);\">x</span> = <span class=\"string_literal\">\"other color please!\"</span>;\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\" data-binding-hash=\"6717528807933952652\" style=\"color: hsl(85,49%,84%);\">y</span> = <span class=\"variable\" data-binding-hash=\"794745962933817518\" style=\"color: hsl(19,74%,76%);\">x</span>.to_string();\n }\n \n-<span class=\"keyword\">fn</span> <span class=\"function\">bar</span>() {\n-    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable mutable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span> = <span class=\"string_literal\">\"hello\"</span>;\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">bar</span>() {\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable declaration mutable\" data-binding-hash=\"8121853618659664005\" style=\"color: hsl(261,57%,61%);\">hello</span> = <span class=\"string_literal\">\"hello\"</span>;\n }</code></pre>\n\\ No newline at end of file"}, {"sha": "b94b6a0224d5a4588ed746e277a5a77d776d039b", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/56ce34c6a7ec0b4426d4cb25e10512c7efaf6f06/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ce34c6a7ec0b4426d4cb25e10512c7efaf6f06/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=56ce34c6a7ec0b4426d4cb25e10512c7efaf6f06", "patch": "@@ -214,8 +214,13 @@ fn highlight_element(\n         INT_NUMBER | FLOAT_NUMBER => HighlightTag::NumericLiteral.into(),\n         BYTE => HighlightTag::ByteLiteral.into(),\n         CHAR => HighlightTag::CharLiteral.into(),\n-        // FIXME: set Declaration for decls\n-        LIFETIME => HighlightTag::Lifetime.into(),\n+        LIFETIME => {\n+            let h = Highlight::new(HighlightTag::Lifetime);\n+            dbg!(match element.parent().map(|it| it.kind()) {\n+                Some(LIFETIME_PARAM) | Some(LABEL) => h | HighlightModifier::Definition,\n+                _ => h,\n+            })\n+        }\n \n         k if k.is_keyword() => {\n             let h = Highlight::new(HighlightTag::Keyword);"}, {"sha": "e13766c9da437d55a47290c07e9cff0ea4c87a07", "filename": "crates/ra_ide/src/syntax_highlighting/html.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56ce34c6a7ec0b4426d4cb25e10512c7efaf6f06/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ce34c6a7ec0b4426d4cb25e10512c7efaf6f06/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Fhtml.rs?ref=56ce34c6a7ec0b4426d4cb25e10512c7efaf6f06", "patch": "@@ -80,7 +80,7 @@ const STYLE: &str = \"\n body                { margin: 0; }\n pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4em; }\n \n-\n+.lifetime           { color: #DFAF8F; font-style: italic; }\n .comment            { color: #7F9F7F; }\n .struct, .enum      { color: #7CB8BB; }\n .enum_variant       { color: #BDE0F3; }"}, {"sha": "8835a5de214ff6d04e261db6b939e764fc60c2ab", "filename": "crates/ra_ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56ce34c6a7ec0b4426d4cb25e10512c7efaf6f06/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ce34c6a7ec0b4426d4cb25e10512c7efaf6f06/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=56ce34c6a7ec0b4426d4cb25e10512c7efaf6f06", "patch": "@@ -90,8 +90,12 @@ impl fmt::Display for HighlightTag {\n }\n \n impl HighlightModifier {\n-    const ALL: &'static [HighlightModifier] =\n-        &[HighlightModifier::Mutable, HighlightModifier::Unsafe, HighlightModifier::Control];\n+    const ALL: &'static [HighlightModifier] = &[\n+        HighlightModifier::Control,\n+        HighlightModifier::Definition,\n+        HighlightModifier::Mutable,\n+        HighlightModifier::Unsafe,\n+    ];\n \n     fn as_str(self) -> &'static str {\n         match self {"}, {"sha": "98c030791736800187c02d37dc17090613dc23a4", "filename": "crates/ra_ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/56ce34c6a7ec0b4426d4cb25e10512c7efaf6f06/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ce34c6a7ec0b4426d4cb25e10512c7efaf6f06/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=56ce34c6a7ec0b4426d4cb25e10512c7efaf6f06", "patch": "@@ -17,9 +17,8 @@ struct Foo {\n     pub y: i32,\n }\n \n-fn foo<T>() -> T {\n-    unimplemented!();\n-    foo::<i32>();\n+fn foo<'a, T>() -> T {\n+    foo::<'a, i32>()\n }\n \n macro_rules! def_fn {\n@@ -59,7 +58,7 @@ use Option::*;\n impl<T> Option<T> {\n     fn and<U>(self, other: Option<U>) -> Option<(T, U)> {\n         match other {\n-            None => todo!(),\n+            None => unimplemented!(),\n             Nope => Nope,\n         }\n     }\n@@ -130,5 +129,5 @@ fn test_ranges() {\n         .highlight_range(FileRange { file_id, range: TextRange::offset_len(82.into(), 1.into()) })\n         .unwrap();\n \n-    assert_eq!(&highlights[0].highlight.to_string(), \"field\");\n+    assert_eq!(&highlights[0].highlight.to_string(), \"field.declaration\");\n }"}]}