{"sha": "9be1ab7ff948d89334a8acbc309c8235d4ab374f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZTFhYjdmZjk0OGQ4OTMzNGE4YWNiYzMwOWM4MjM1ZDRhYjM3NGY=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-01-27T12:42:45Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-01-27T12:42:45Z"}, "message": "Code review fixes", "tree": {"sha": "f67692bfdc8a89f3627507cbbc43d4bece823428", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f67692bfdc8a89f3627507cbbc43d4bece823428"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9be1ab7ff948d89334a8acbc309c8235d4ab374f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9be1ab7ff948d89334a8acbc309c8235d4ab374f", "html_url": "https://github.com/rust-lang/rust/commit/9be1ab7ff948d89334a8acbc309c8235d4ab374f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9be1ab7ff948d89334a8acbc309c8235d4ab374f/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a6b5c6183b2d7aa3d577c3fb12d519721f4a4d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a6b5c6183b2d7aa3d577c3fb12d519721f4a4d0", "html_url": "https://github.com/rust-lang/rust/commit/9a6b5c6183b2d7aa3d577c3fb12d519721f4a4d0"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "9163cc662754c6aa6dc4084b36e88d1d17734954", "filename": "crates/ra_assists/src/assists/auto_import.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9be1ab7ff948d89334a8acbc309c8235d4ab374f/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be1ab7ff948d89334a8acbc309c8235d4ab374f/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fauto_import.rs?ref=9be1ab7ff948d89334a8acbc309c8235d4ab374f", "patch": "@@ -1,4 +1,4 @@\n-use hir::{db::HirDatabase, AsName};\n+use hir::db::HirDatabase;\n use ra_syntax::{\n     ast::{self, AstNode},\n     SmolStr, SyntaxElement,\n@@ -48,7 +48,7 @@ pub(crate) fn auto_import<F: ImportsLocator>(\n         return None;\n     }\n \n-    let name_to_import = &find_applicable_name_ref(ctx.covering_element())?.as_name();\n+    let name_to_import = &find_applicable_name_ref(ctx.covering_element())?.syntax().to_string();\n     let proposed_imports = imports_locator\n         .find_imports(&name_to_import.to_string())\n         .into_iter()\n@@ -64,7 +64,7 @@ pub(crate) fn auto_import<F: ImportsLocator>(\n     ctx.add_assist_group(AssistId(\"auto_import\"), \"auto import\", || {\n         proposed_imports\n             .into_iter()\n-            .map(|import| import_to_action(import, &position, &path_to_import))\n+            .map(|import| import_to_action(import, &position, &path_to_import.syntax()))\n             .collect()\n     })\n }\n@@ -84,12 +84,12 @@ fn find_applicable_name_ref(element: SyntaxElement) -> Option<ast::NameRef> {\n     }\n }\n \n-fn import_to_action(import: String, position: &SyntaxNode, path: &ast::Path) -> ActionBuilder {\n+fn import_to_action(import: String, position: &SyntaxNode, anchor: &SyntaxNode) -> ActionBuilder {\n     let mut action_builder = ActionBuilder::default();\n     action_builder.label(format!(\"Import `{}`\", &import));\n     auto_import_text_edit(\n         position,\n-        &path.syntax().clone(),\n+        anchor,\n         &[SmolStr::new(import)],\n         action_builder.text_edit_builder(),\n     );"}, {"sha": "625ebc4a2d306a7767b6850871cbc05a4bf5ca8a", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9be1ab7ff948d89334a8acbc309c8235d4ab374f/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be1ab7ff948d89334a8acbc309c8235d4ab374f/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=9be1ab7ff948d89334a8acbc309c8235d4ab374f", "patch": "@@ -234,6 +234,7 @@ mod helpers {\n     use crate::{test_db::TestDB, Assist, AssistCtx, ImportsLocator};\n     use std::sync::Arc;\n \n+    // FIXME remove the `ModuleDefId` reexport from `ra_hir` when this gets removed.\n     pub(crate) struct TestImportsLocator {\n         db: Arc<TestDB>,\n         test_file_id: FileId,\n@@ -248,13 +249,13 @@ mod helpers {\n     impl ImportsLocator for TestImportsLocator {\n         fn find_imports(&mut self, name_to_import: &str) -> Vec<hir::ModuleDef> {\n             let crate_def_map = self.db.crate_def_map(self.db.test_crate());\n-            let mut findings = vec![];\n+            let mut findings = Vec::new();\n \n             let mut module_ids_to_process =\n                 crate_def_map.modules_for_file(self.test_file_id).collect::<Vec<_>>();\n \n             while !module_ids_to_process.is_empty() {\n-                let mut more_ids_to_process = vec![];\n+                let mut more_ids_to_process = Vec::new();\n                 for local_module_id in module_ids_to_process.drain(..) {\n                     for (name, namespace_data) in\n                         crate_def_map[local_module_id].scope.entries_without_primitives()"}, {"sha": "9e2673d13357504221da9edd40f0088d9dea0068", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9be1ab7ff948d89334a8acbc309c8235d4ab374f/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be1ab7ff948d89334a8acbc309c8235d4ab374f/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=9be1ab7ff948d89334a8acbc309c8235d4ab374f", "patch": "@@ -56,10 +56,9 @@ pub use hir_def::{\n     nameres::ModuleSource,\n     path::{ModPath, Path, PathKind},\n     type_ref::Mutability,\n-    ModuleDefId,\n+    ModuleDefId, // FIXME this is exposed and should be used for implementing the `TestImportsLocator` in `ra_assists` only, should be removed later along with the trait and the implementation.\n };\n pub use hir_expand::{\n-    name::{AsName, Name},\n-    HirFileId, InFile, MacroCallId, MacroCallLoc, MacroDefId, MacroFile, Origin,\n+    name::Name, HirFileId, InFile, MacroCallId, MacroCallLoc, MacroDefId, MacroFile, Origin,\n };\n pub use hir_ty::{display::HirDisplay, CallableDef};"}, {"sha": "48b014c7d0798f489db1018841cece375680512f", "filename": "crates/ra_ide/src/imports_locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be1ab7ff948d89334a8acbc309c8235d4ab374f/crates%2Fra_ide%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be1ab7ff948d89334a8acbc309c8235d4ab374f/crates%2Fra_ide%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fimports_locator.rs?ref=9be1ab7ff948d89334a8acbc309c8235d4ab374f", "patch": "@@ -41,7 +41,7 @@ impl<'a> ImportsLocatorIde<'a> {\n     }\n }\n \n-impl<'a> ImportsLocator for ImportsLocatorIde<'a> {\n+impl ImportsLocator for ImportsLocatorIde<'_> {\n     fn find_imports(&mut self, name_to_import: &str) -> Vec<ModuleDef> {\n         let _p = profile(\"search_for_imports\");\n         let db = self.source_binder.db;"}]}