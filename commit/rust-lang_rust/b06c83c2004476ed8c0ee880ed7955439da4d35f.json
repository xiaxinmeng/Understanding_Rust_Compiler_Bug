{"sha": "b06c83c2004476ed8c0ee880ed7955439da4d35f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNmM4M2MyMDA0NDc2ZWQ4YzBlZTg4MGVkNzk1NTQzOWRhNGQzNWY=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-10-30T01:03:30Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-11-11T20:14:35Z"}, "message": "Add miri trampoline, fix handling of intrinsic return", "tree": {"sha": "7c2e7bbf31461c3aa70df428cff00b2f6ec1d954", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c2e7bbf31461c3aa70df428cff00b2f6ec1d954"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b06c83c2004476ed8c0ee880ed7955439da4d35f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl3JwSsACgkQtAh+UQ6Y\nsWTGXA//d0mW5tYrrTdAVepQ+aeHxmn7JatjlI9EBlOdY1kID7kS9XduLUK4+J1W\ndhqr0XEtnQzx9FY+JcfXZBthIxI2KNgwurOqBKP27xam4bR84b+sthK9cvVOAdeo\nBs5c99vuwcy7NSzZ14OfNFhvi8if8RbOcrAMb2WEL6tRh1qr4IgPauoHEqg6wabB\nBjVfZYW/bT5+EfUxMnfOTeckQIOWhNTUV/Tqz1wukCaICD51eg88WhwvpCu7ULjX\nVQfUuFVcGrsABucnM1JO3qd21VEIYprxt65oPRDUwbE19jOOgIUCBV9/dCpKWgU6\nsEK695d0Mk6rNtnkthfn4IGmMftynTZpTtEjF/wve7p9KLXuyx/taW5KIVpCd4l0\n0N6JMjZIQ3bSC1h2j1/5me+Yf9AYX8n/xz5tdIKJW2pmpmXBKJZ+7XBp7oVFpIk/\nwlQG0ArxYRLLaAB6xrVrVPq820hpZpDiIu9bpDQ4cCXSeXbVbZMLcGHW2e/CCnpo\n3u8kCwYSrXy6mXictq0DU//HjCG+4fdFcLlb7lJx8TmrnTyHF0nWUa2VXbR7WwlS\nislbAxPersGqfyq4m/yaS75uKN2/2EiDNT0azO6cLu/LNceQXGWGEGEuLDs17NS1\ni9BsYC7TKEhK2SkL5nzAq0n8hmgP9dNPGasyQpPgnfGy+WhTsZg=\n=RljJ\n-----END PGP SIGNATURE-----", "payload": "tree 7c2e7bbf31461c3aa70df428cff00b2f6ec1d954\nparent 5553476d490741efc8e3049401152d5d4ce6a934\nauthor Aaron Hill <aa1ronham@gmail.com> 1572397410 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1573503275 -0500\n\nAdd miri trampoline, fix handling of intrinsic return\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b06c83c2004476ed8c0ee880ed7955439da4d35f", "html_url": "https://github.com/rust-lang/rust/commit/b06c83c2004476ed8c0ee880ed7955439da4d35f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b06c83c2004476ed8c0ee880ed7955439da4d35f/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5553476d490741efc8e3049401152d5d4ce6a934", "url": "https://api.github.com/repos/rust-lang/rust/commits/5553476d490741efc8e3049401152d5d4ce6a934", "html_url": "https://github.com/rust-lang/rust/commit/5553476d490741efc8e3049401152d5d4ce6a934"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "c8d270406c6344c2888bc07ce0f7a2c2f99c940f", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b06c83c2004476ed8c0ee880ed7955439da4d35f/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06c83c2004476ed8c0ee880ed7955439da4d35f/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=b06c83c2004476ed8c0ee880ed7955439da4d35f", "patch": "@@ -97,3 +97,6 @@ pub unsafe extern \"C\" fn __rust_start_panic(payload: usize) -> u32 {\n     let payload = payload as *mut &mut dyn BoxMeUp;\n     imp::panic(Box::from_raw((*payload).box_me_up()))\n }\n+\n+#[cfg(miri)]\n+pub fn miri_panic_trampoline() {}"}, {"sha": "f77bf56b0575e1f73b69d50617b284f39d25dad4", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b06c83c2004476ed8c0ee880ed7955439da4d35f/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b06c83c2004476ed8c0ee880ed7955439da4d35f/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=b06c83c2004476ed8c0ee880ed7955439da4d35f", "patch": "@@ -264,10 +264,19 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         match instance.def {\n             ty::InstanceDef::Intrinsic(..) => {\n+                let old_stack = self.cur_frame();\n                 M::call_intrinsic(self, span, instance, args, dest)?;\n                 // No stack frame gets pushed, the main loop will just act as if the\n                 // call completed.\n-                self.goto_block(ret)?;\n+                if ret.is_some() {\n+                    self.goto_block(ret)?;\n+                } else {\n+                    // If this intrinsic call doesn't have a ret block,\n+                    // then the intrinsic implementation should have\n+                    // changed the stack frame (otherwise, we'll end\n+                    // up trying to execute this intrinsic call again)\n+                    assert!(self.cur_frame() != old_stack);\n+                }\n                 if let Some(dest) = dest {\n                     self.dump_place(*dest)\n                 }"}]}