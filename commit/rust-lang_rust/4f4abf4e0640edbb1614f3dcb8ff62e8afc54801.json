{"sha": "4f4abf4e0640edbb1614f3dcb8ff62e8afc54801", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNGFiZjRlMDY0MGVkYmIxNjE0ZjNkY2I4ZmY2MmU4YWZjNTQ4MDE=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-08-16T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-08-16T21:31:36Z"}, "message": "Warn about explicit self-assignment\n\nWarn about assignments where left-hand side place expression is the same\nas right-hand side value expression. For example, warn about assignment in:\n\n```rust\npub struct Event {\n    id: usize,\n    x: i32,\n    y: i32,\n}\n\npub fn copy_position(a: &mut Event, b: &Event) {\n    a.x = b.x;\n    a.y = a.y;\n}\n```", "tree": {"sha": "d44d58b8093ea749dd64d37f188c41a9bc7a9e1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d44d58b8093ea749dd64d37f188c41a9bc7a9e1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f4abf4e0640edbb1614f3dcb8ff62e8afc54801", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f4abf4e0640edbb1614f3dcb8ff62e8afc54801", "html_url": "https://github.com/rust-lang/rust/commit/4f4abf4e0640edbb1614f3dcb8ff62e8afc54801", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f4abf4e0640edbb1614f3dcb8ff62e8afc54801/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1dbf7913ad83954337e94b094f22f1d9d8b83f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1dbf7913ad83954337e94b094f22f1d9d8b83f3", "html_url": "https://github.com/rust-lang/rust/commit/d1dbf7913ad83954337e94b094f22f1d9d8b83f3"}], "stats": {"total": 201, "additions": 201, "deletions": 0}, "files": [{"sha": "5ce63c0a1574351c9b6de943086eda36a9374eb9", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f4abf4e0640edbb1614f3dcb8ff62e8afc54801/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/4f4abf4e0640edbb1614f3dcb8ff62e8afc54801/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=4f4abf4e0640edbb1614f3dcb8ff62e8afc54801", "patch": "@@ -1690,6 +1690,7 @@ Released 2018-09-13\n [`same_functions_in_if_condition`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_functions_in_if_condition\n [`same_item_push`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_item_push\n [`search_is_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#search_is_some\n+[`self_assignment`]: https://rust-lang.github.io/rust-clippy/master/index.html#self_assignment\n [`serde_api_misuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#serde_api_misuse\n [`shadow_reuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse\n [`shadow_same`]: https://rust-lang.github.io/rust-clippy/master/index.html#shadow_same"}, {"sha": "87c297e72eb0ba71c8d850ea507e89af5e2c19e1", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4f4abf4e0640edbb1614f3dcb8ff62e8afc54801/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4abf4e0640edbb1614f3dcb8ff62e8afc54801/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=4f4abf4e0640edbb1614f3dcb8ff62e8afc54801", "patch": "@@ -284,6 +284,7 @@ mod reference;\n mod regex;\n mod repeat_once;\n mod returns;\n+mod self_assignment;\n mod serde_api;\n mod shadow;\n mod single_component_path_imports;\n@@ -773,6 +774,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &repeat_once::REPEAT_ONCE,\n         &returns::LET_AND_RETURN,\n         &returns::NEEDLESS_RETURN,\n+        &self_assignment::SELF_ASSIGNMENT,\n         &serde_api::SERDE_API_MISUSE,\n         &shadow::SHADOW_REUSE,\n         &shadow::SHADOW_SAME,\n@@ -1090,6 +1092,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box pattern_type_mismatch::PatternTypeMismatch);\n     store.register_late_pass(|| box stable_sort_primitive::StableSortPrimitive);\n     store.register_late_pass(|| box repeat_once::RepeatOnce);\n+    store.register_late_pass(|| box self_assignment::SelfAssignment);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1421,6 +1424,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&repeat_once::REPEAT_ONCE),\n         LintId::of(&returns::LET_AND_RETURN),\n         LintId::of(&returns::NEEDLESS_RETURN),\n+        LintId::of(&self_assignment::SELF_ASSIGNMENT),\n         LintId::of(&serde_api::SERDE_API_MISUSE),\n         LintId::of(&single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n         LintId::of(&slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),\n@@ -1714,6 +1718,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&ptr::MUT_FROM_REF),\n         LintId::of(&ranges::REVERSED_EMPTY_RANGES),\n         LintId::of(&regex::INVALID_REGEX),\n+        LintId::of(&self_assignment::SELF_ASSIGNMENT),\n         LintId::of(&serde_api::SERDE_API_MISUSE),\n         LintId::of(&suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n         LintId::of(&suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),"}, {"sha": "e096c9aebc122fe8b7a53ef15d446fce2512d442", "filename": "clippy_lints/src/self_assignment.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4f4abf4e0640edbb1614f3dcb8ff62e8afc54801/clippy_lints%2Fsrc%2Fself_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4abf4e0640edbb1614f3dcb8ff62e8afc54801/clippy_lints%2Fsrc%2Fself_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fself_assignment.rs?ref=4f4abf4e0640edbb1614f3dcb8ff62e8afc54801", "patch": "@@ -0,0 +1,51 @@\n+use crate::utils::{eq_expr_value, snippet, span_lint};\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for explicit self-assignments.\n+    ///\n+    /// **Why is this bad?** Self-assignments are redundant and unlikely to be\n+    /// intentional.\n+    ///\n+    /// **Known problems:** If expression contains any deref coercions or\n+    /// indexing operations they are assumed not to have any side effects.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// struct Event {\n+    ///     id: usize,\n+    ///     x: i32,\n+    ///     y: i32,\n+    /// }\n+    ///\n+    /// fn copy_position(a: &mut Event, b: &Event) {\n+    ///     a.x = b.x;\n+    ///     a.y = a.y;\n+    /// }\n+    /// ```\n+    pub SELF_ASSIGNMENT,\n+    correctness,\n+    \"explicit self-assignment\"\n+}\n+\n+declare_lint_pass!(SelfAssignment => [SELF_ASSIGNMENT]);\n+\n+impl<'tcx> LateLintPass<'tcx> for SelfAssignment {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if let ExprKind::Assign(lhs, rhs, _) = &expr.kind {\n+            if eq_expr_value(cx, lhs, rhs) {\n+                let lhs = snippet(cx, lhs.span, \"<lhs>\");\n+                let rhs = snippet(cx, rhs.span, \"<rhs>\");\n+                span_lint(\n+                    cx,\n+                    SELF_ASSIGNMENT,\n+                    expr.span,\n+                    &format!(\"self-assignment of `{}` to `{}`\", rhs, lhs),\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "bf58c117aaaa95c24a5a9154f1673fdbf577fc5e", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f4abf4e0640edbb1614f3dcb8ff62e8afc54801/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4abf4e0640edbb1614f3dcb8ff62e8afc54801/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=4f4abf4e0640edbb1614f3dcb8ff62e8afc54801", "patch": "@@ -1956,6 +1956,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"methods\",\n     },\n+    Lint {\n+        name: \"self_assignment\",\n+        group: \"correctness\",\n+        desc: \"explicit self-assignment\",\n+        deprecation: None,\n+        module: \"self_assignment\",\n+    },\n     Lint {\n         name: \"serde_api_misuse\",\n         group: \"correctness\","}, {"sha": "a7cbb9cd78b151cb82b9f415c59a170be1541e2e", "filename": "tests/ui/self_assignment.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/4f4abf4e0640edbb1614f3dcb8ff62e8afc54801/tests%2Fui%2Fself_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4abf4e0640edbb1614f3dcb8ff62e8afc54801/tests%2Fui%2Fself_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself_assignment.rs?ref=4f4abf4e0640edbb1614f3dcb8ff62e8afc54801", "patch": "@@ -0,0 +1,67 @@\n+#![warn(clippy::self_assignment)]\n+\n+pub struct S<'a> {\n+    a: i32,\n+    b: [i32; 10],\n+    c: Vec<Vec<i32>>,\n+    e: &'a mut i32,\n+    f: &'a mut i32,\n+}\n+\n+pub fn positives(mut a: usize, b: &mut u32, mut s: S) {\n+    a = a;\n+    *b = *b;\n+    s = s;\n+    s.a = s.a;\n+    s.b[10] = s.b[5 + 5];\n+    s.c[0][1] = s.c[0][1];\n+    s.b[a] = s.b[a];\n+    *s.e = *s.e;\n+    s.b[a + 10] = s.b[10 + a];\n+\n+    let mut t = (0, 1);\n+    t.1 = t.1;\n+    t.0 = (t.0);\n+}\n+\n+pub fn negatives_not_equal(mut a: usize, b: &mut usize, mut s: S) {\n+    dbg!(&a);\n+    a = *b;\n+    dbg!(&a);\n+    s.b[1] += s.b[1];\n+    s.b[1] = s.b[2];\n+    s.c[1][0] = s.c[0][1];\n+    s.b[a] = s.b[*b];\n+    s.b[a + 10] = s.b[a + 11];\n+    *s.e = *s.f;\n+\n+    let mut t = (0, 1);\n+    t.0 = t.1;\n+}\n+\n+#[allow(clippy::eval_order_dependence)]\n+pub fn negatives_side_effects() {\n+    let mut v = vec![1, 2, 3, 4, 5];\n+    let mut i = 0;\n+    v[{\n+        i += 1;\n+        i\n+    }] = v[{\n+        i += 1;\n+        i\n+    }];\n+\n+    fn next(n: &mut usize) -> usize {\n+        let v = *n;\n+        *n += 1;\n+        v\n+    }\n+\n+    let mut w = vec![1, 2, 3, 4, 5];\n+    let mut i = 0;\n+    let i = &mut i;\n+    w[next(i)] = w[next(i)];\n+    w[next(i)] = w[next(i)];\n+}\n+\n+fn main() {}"}, {"sha": "826e0d0ba888dacda4a21b006fed23157c67f22f", "filename": "tests/ui/self_assignment.stderr", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/4f4abf4e0640edbb1614f3dcb8ff62e8afc54801/tests%2Fui%2Fself_assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f4abf4e0640edbb1614f3dcb8ff62e8afc54801/tests%2Fui%2Fself_assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself_assignment.stderr?ref=4f4abf4e0640edbb1614f3dcb8ff62e8afc54801", "patch": "@@ -0,0 +1,70 @@\n+error: self-assignment of `a` to `a`\n+  --> $DIR/self_assignment.rs:12:5\n+   |\n+LL |     a = a;\n+   |     ^^^^^\n+   |\n+   = note: `-D clippy::self-assignment` implied by `-D warnings`\n+\n+error: self-assignment of `*b` to `*b`\n+  --> $DIR/self_assignment.rs:13:5\n+   |\n+LL |     *b = *b;\n+   |     ^^^^^^^\n+\n+error: self-assignment of `s` to `s`\n+  --> $DIR/self_assignment.rs:14:5\n+   |\n+LL |     s = s;\n+   |     ^^^^^\n+\n+error: self-assignment of `s.a` to `s.a`\n+  --> $DIR/self_assignment.rs:15:5\n+   |\n+LL |     s.a = s.a;\n+   |     ^^^^^^^^^\n+\n+error: self-assignment of `s.b[5 + 5]` to `s.b[10]`\n+  --> $DIR/self_assignment.rs:16:5\n+   |\n+LL |     s.b[10] = s.b[5 + 5];\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: self-assignment of `s.c[0][1]` to `s.c[0][1]`\n+  --> $DIR/self_assignment.rs:17:5\n+   |\n+LL |     s.c[0][1] = s.c[0][1];\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: self-assignment of `s.b[a]` to `s.b[a]`\n+  --> $DIR/self_assignment.rs:18:5\n+   |\n+LL |     s.b[a] = s.b[a];\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: self-assignment of `*s.e` to `*s.e`\n+  --> $DIR/self_assignment.rs:19:5\n+   |\n+LL |     *s.e = *s.e;\n+   |     ^^^^^^^^^^^\n+\n+error: self-assignment of `s.b[10 + a]` to `s.b[a + 10]`\n+  --> $DIR/self_assignment.rs:20:5\n+   |\n+LL |     s.b[a + 10] = s.b[10 + a];\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: self-assignment of `t.1` to `t.1`\n+  --> $DIR/self_assignment.rs:23:5\n+   |\n+LL |     t.1 = t.1;\n+   |     ^^^^^^^^^\n+\n+error: self-assignment of `(t.0)` to `t.0`\n+  --> $DIR/self_assignment.rs:24:5\n+   |\n+LL |     t.0 = (t.0);\n+   |     ^^^^^^^^^^^\n+\n+error: aborting due to 11 previous errors\n+"}]}