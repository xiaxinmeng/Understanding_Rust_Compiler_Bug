{"sha": "8afd3c47a800f0ebd40d1dc91d498ca02b3ab484", "node_id": "C_kwDOAAsO6NoAKDhhZmQzYzQ3YTgwMGYwZWJkNDBkMWRjOTFkNDk4Y2EwMmIzYWI0ODQ", "commit": {"author": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2022-11-16T17:20:26Z"}, "committer": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2023-01-07T10:42:15Z"}, "message": "remove unnecessary normalize call", "tree": {"sha": "ca4738d81a53c9c18a047074048c9602622be92e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca4738d81a53c9c18a047074048c9602622be92e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8afd3c47a800f0ebd40d1dc91d498ca02b3ab484", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8afd3c47a800f0ebd40d1dc91d498ca02b3ab484", "html_url": "https://github.com/rust-lang/rust/commit/8afd3c47a800f0ebd40d1dc91d498ca02b3ab484", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8afd3c47a800f0ebd40d1dc91d498ca02b3ab484/comments", "author": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6a17bf8bcfa60c8b0436251d2cf70d8eca4d198", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6a17bf8bcfa60c8b0436251d2cf70d8eca4d198", "html_url": "https://github.com/rust-lang/rust/commit/c6a17bf8bcfa60c8b0436251d2cf70d8eca4d198"}], "stats": {"total": 4, "additions": 1, "deletions": 3}, "files": [{"sha": "f5cffef54e0ee9c875d5e08bfa77d40023d3ae95", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8afd3c47a800f0ebd40d1dc91d498ca02b3ab484/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afd3c47a800f0ebd40d1dc91d498ca02b3ab484/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=8afd3c47a800f0ebd40d1dc91d498ca02b3ab484", "patch": "@@ -1199,9 +1199,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             // If we have a default, then we it doesn't matter that we're not\n                             // inferring the type arguments: we provide the default where any\n                             // is missing.\n-                            let default =\n-                                tcx.bound_type_of(param.def_id).subst(tcx, substs.unwrap());\n-                            self.fcx.normalize(self.span, default).into()\n+                            tcx.bound_type_of(param.def_id).subst(tcx, substs.unwrap()).into()\n                         } else {\n                             // If no type arguments were provided, we have to infer them.\n                             // This case also occurs as a result of some malformed input, e.g."}]}