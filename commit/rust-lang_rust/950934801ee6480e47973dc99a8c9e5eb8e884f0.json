{"sha": "950934801ee6480e47973dc99a8c9e5eb8e884f0", "node_id": "C_kwDOAAsO6NoAKDk1MDkzNDgwMWVlNjQ4MGU0Nzk3M2RjOTlhOGM5ZTVlYjhlODg0ZjA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-06-27T20:35:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-27T20:35:09Z"}, "message": "Rollup merge of #98576 - lcnr:region-stuff-cool-beans, r=jackh726\n\nsmall regions refactoring\n\nthese commits should be fairly self-contained\n\nr? rust-lang/types", "tree": {"sha": "409a76a1daeda1508108743a755519aa976900b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/409a76a1daeda1508108743a755519aa976900b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/950934801ee6480e47973dc99a8c9e5eb8e884f0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiuhR+CRBK7hj4Ov3rIwAAbeQIABa3LkJLef7/n7hyrfcNDDAF\nSnppikcGruHvk7OS9m0Ty5PvOm4B/x5souGmxlCZqb370b9hoe5LcuWxEu6kMBQc\nAB4KwAnACTIySRrczLOfJviVOvaVveV+r39FvNu7tt9zp+0muuIrYVCUvuXJRR/P\n/rGLhys3Rqxnj4Nmm8uXEPveokX/neW1HYoOkuO0Q6divSAFf9QmvNOis177fMYx\n7JqzDPtj59fWt8NJW9pVTxV7Zt2EgH75JCWyspq9xUHqMYmvzimaabWDDIs9IldP\nv+jMg2OhnOjBfb2AOxUTRRQn1iXxz4htlTMJbA7C8yPH03X6L2zfQiulJyu15bk=\n=DaPW\n-----END PGP SIGNATURE-----\n", "payload": "tree 409a76a1daeda1508108743a755519aa976900b6\nparent 4f61fe21228c0910dff88bbf1bbff158a27879f2\nparent 28fafc45e6a3f7ea822072310f3d459595d4dc43\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1656362109 +0200\ncommitter GitHub <noreply@github.com> 1656362109 +0200\n\nRollup merge of #98576 - lcnr:region-stuff-cool-beans, r=jackh726\n\nsmall regions refactoring\n\nthese commits should be fairly self-contained\n\nr? rust-lang/types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/950934801ee6480e47973dc99a8c9e5eb8e884f0", "html_url": "https://github.com/rust-lang/rust/commit/950934801ee6480e47973dc99a8c9e5eb8e884f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/950934801ee6480e47973dc99a8c9e5eb8e884f0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f61fe21228c0910dff88bbf1bbff158a27879f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f61fe21228c0910dff88bbf1bbff158a27879f2", "html_url": "https://github.com/rust-lang/rust/commit/4f61fe21228c0910dff88bbf1bbff158a27879f2"}, {"sha": "28fafc45e6a3f7ea822072310f3d459595d4dc43", "url": "https://api.github.com/repos/rust-lang/rust/commits/28fafc45e6a3f7ea822072310f3d459595d4dc43", "html_url": "https://github.com/rust-lang/rust/commit/28fafc45e6a3f7ea822072310f3d459595d4dc43"}], "stats": {"total": 97, "additions": 38, "deletions": 59}, "files": [{"sha": "e60e11f11df9fdd8addebe7a8eae426fd29fa017", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=950934801ee6480e47973dc99a8c9e5eb8e884f0", "patch": "@@ -879,7 +879,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n         }\n \n         let mut found = false;\n-        tcx.fold_regions(tcx.type_of(body_parent_did), &mut true, |r: ty::Region<'tcx>, _| {\n+        tcx.fold_regions(tcx.type_of(body_parent_did), |r: ty::Region<'tcx>, _| {\n             if *r == ty::ReEarlyBound(region) {\n                 found = true;\n             }"}, {"sha": "f5c9392948b24c5391f0107e981410359802132b", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=950934801ee6480e47973dc99a8c9e5eb8e884f0", "patch": "@@ -1009,7 +1009,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         debug!(\"try_promote_type_test_subject(ty = {:?})\", ty);\n \n-        let ty = tcx.fold_regions(ty, &mut false, |r, _depth| {\n+        let ty = tcx.fold_regions(ty, |r, _depth| {\n             let region_vid = self.to_region_vid(r);\n \n             // The challenge if this. We have some region variable `r`\n@@ -1289,7 +1289,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        tcx.fold_regions(value, &mut false, |r, _db| {\n+        tcx.fold_regions(value, |r, _db| {\n             let vid = self.to_region_vid(r);\n             let scc = self.constraint_sccs.scc(vid);\n             let repr = self.scc_representatives[scc];"}, {"sha": "d182c0cf4e8695cbbe2dae9f87ffc00f6154bb19", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=950934801ee6480e47973dc99a8c9e5eb8e884f0", "patch": "@@ -59,7 +59,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             debug!(?concrete_type, ?substs);\n \n             let mut subst_regions = vec![self.universal_regions.fr_static];\n-            let universal_substs = infcx.tcx.fold_regions(substs, &mut false, |region, _| {\n+            let universal_substs = infcx.tcx.fold_regions(substs, |region, _| {\n                 if let ty::RePlaceholder(..) = region.kind() {\n                     // Higher kinded regions don't need remapping, they don't refer to anything outside of this the substs.\n                     return region;\n@@ -91,7 +91,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             subst_regions.dedup();\n \n             let universal_concrete_type =\n-                infcx.tcx.fold_regions(concrete_type, &mut false, |region, _| match *region {\n+                infcx.tcx.fold_regions(concrete_type, |region, _| match *region {\n                     ty::ReVar(vid) => subst_regions\n                         .iter()\n                         .find(|ur_vid| self.eval_equal(vid, **ur_vid))\n@@ -146,7 +146,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        tcx.fold_regions(ty, &mut false, |region, _| match *region {\n+        tcx.fold_regions(ty, |region, _| match *region {\n             ty::ReVar(vid) => {\n                 // Find something that we can name\n                 let upper_bound = self.approx_universal_upper_bound(vid);"}, {"sha": "7a8ce621c5d0bfdc5e46a4e62e2f19e281599153", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=950934801ee6480e47973dc99a8c9e5eb8e884f0", "patch": "@@ -31,7 +31,7 @@ pub fn renumber_regions<'tcx, T>(infcx: &InferCtxt<'_, 'tcx>, value: T) -> T\n where\n     T: TypeFoldable<'tcx>,\n {\n-    infcx.tcx.fold_regions(value, &mut false, |_region, _depth| {\n+    infcx.tcx.fold_regions(value, |_region, _depth| {\n         let origin = NllRegionVariableOrigin::Existential { from_forall: false };\n         infcx.next_nll_region_var(origin)\n     })"}, {"sha": "5e33d9d25c223d4b29571c2672fd0d6e03e59ca9", "filename": "compiler/rustc_borrowck/src/type_check/constraint_conversion.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs?ref=950934801ee6480e47973dc99a8c9e5eb8e884f0", "patch": "@@ -23,7 +23,7 @@ pub(crate) struct ConstraintConversion<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     universal_regions: &'a UniversalRegions<'tcx>,\n     region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n-    implicit_region_bound: Option<ty::Region<'tcx>>,\n+    implicit_region_bound: ty::Region<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     locations: Locations,\n     span: Span,\n@@ -36,7 +36,7 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n         infcx: &'a InferCtxt<'a, 'tcx>,\n         universal_regions: &'a UniversalRegions<'tcx>,\n         region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n-        implicit_region_bound: Option<ty::Region<'tcx>>,\n+        implicit_region_bound: ty::Region<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         locations: Locations,\n         span: Span,\n@@ -108,7 +108,7 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n                 // create new region variables, which can't be done later when\n                 // verifying these bounds.\n                 if t1.has_placeholders() {\n-                    t1 = tcx.fold_regions(t1, &mut false, |r, _| match *r {\n+                    t1 = tcx.fold_regions(t1, |r, _| match *r {\n                         ty::RePlaceholder(placeholder) => {\n                             self.constraints.placeholder_region(self.infcx, placeholder)\n                         }\n@@ -120,7 +120,7 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n                     &mut *self,\n                     tcx,\n                     region_bound_pairs,\n-                    implicit_region_bound,\n+                    Some(implicit_region_bound),\n                     param_env,\n                 )\n                 .type_must_outlive(origin, t1, r2);"}, {"sha": "421ef5be8128705d6b6456240c90e0bbe0b3dfc7", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=950934801ee6480e47973dc99a8c9e5eb8e884f0", "patch": "@@ -61,7 +61,7 @@ pub(crate) struct CreateResult<'tcx> {\n pub(crate) fn create<'tcx>(\n     infcx: &InferCtxt<'_, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    implicit_region_bound: Option<ty::Region<'tcx>>,\n+    implicit_region_bound: ty::Region<'tcx>,\n     universal_regions: &Rc<UniversalRegions<'tcx>>,\n     constraints: &mut MirTypeckRegionConstraints<'tcx>,\n ) -> CreateResult<'tcx> {\n@@ -223,7 +223,7 @@ struct UniversalRegionRelationsBuilder<'this, 'tcx> {\n     infcx: &'this InferCtxt<'this, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     universal_regions: Rc<UniversalRegions<'tcx>>,\n-    implicit_region_bound: Option<ty::Region<'tcx>>,\n+    implicit_region_bound: ty::Region<'tcx>,\n     constraints: &'this mut MirTypeckRegionConstraints<'tcx>,\n \n     // outputs:"}, {"sha": "2a6ca5246daa9b57cf778d0afe603a6344bbb87c", "filename": "compiler/rustc_borrowck/src/type_check/input_output.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs?ref=950934801ee6480e47973dc99a8c9e5eb8e884f0", "patch": "@@ -230,7 +230,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 self.infcx,\n                 &self.borrowck_context.universal_regions,\n                 &self.region_bound_pairs,\n-                Some(self.implicit_region_bound),\n+                self.implicit_region_bound,\n                 self.param_env,\n                 Locations::All(DUMMY_SP),\n                 DUMMY_SP,"}, {"sha": "542fc6b0f485d439d99baaf6dcd8be4f0a865dbe", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=950934801ee6480e47973dc99a8c9e5eb8e884f0", "patch": "@@ -157,7 +157,7 @@ pub(crate) fn type_check<'mir, 'tcx>(\n     } = free_region_relations::create(\n         infcx,\n         param_env,\n-        Some(implicit_region_bound),\n+        implicit_region_bound,\n         universal_regions,\n         &mut constraints,\n     );\n@@ -1142,7 +1142,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             self.infcx,\n             self.borrowck_context.universal_regions,\n             self.region_bound_pairs,\n-            Some(self.implicit_region_bound),\n+            self.implicit_region_bound,\n             self.param_env,\n             locations,\n             locations.span(self.body),"}, {"sha": "89d84fcf09cfe66c7250f6435ce486ec2e54b557", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=950934801ee6480e47973dc99a8c9e5eb8e884f0", "patch": "@@ -725,7 +725,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        self.tcx.fold_regions(value, &mut false, |_region, _depth| self.next_nll_region_var(origin))\n+        self.tcx.fold_regions(value, |_region, _depth| self.next_nll_region_var(origin))\n     }\n \n     #[instrument(level = \"debug\", skip(self, indices))]\n@@ -817,9 +817,7 @@ impl<'tcx> UniversalRegionIndices<'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        tcx.fold_regions(value, &mut false, |region, _| {\n-            tcx.mk_region(ty::ReVar(self.to_region_vid(region)))\n-        })\n+        tcx.fold_regions(value, |region, _| tcx.mk_region(ty::ReVar(self.to_region_vid(region))))\n     }\n }\n "}, {"sha": "42d52446ab6c72615887430790a430f2ae7a0c2b", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=950934801ee6480e47973dc99a8c9e5eb8e884f0", "patch": "@@ -79,7 +79,7 @@ pub fn find_param_with_region<'tcx>(\n             // May return None; sometimes the tables are not yet populated.\n             let ty = fn_sig.inputs()[index];\n             let mut found_anon_region = false;\n-            let new_param_ty = tcx.fold_regions(ty, &mut false, |r, _| {\n+            let new_param_ty = tcx.fold_regions(ty, |r, _| {\n                 if r == anon_region {\n                     found_anon_region = true;\n                     replace_region"}, {"sha": "68c709a2e24d3517464abeeeb38f8e514395bbca", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=950934801ee6480e47973dc99a8c9e5eb8e884f0", "patch": "@@ -868,7 +868,7 @@ impl<'tcx> LexicalRegionResolutions<'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        tcx.fold_regions(value, &mut false, |r, _db| match *r {\n+        tcx.fold_regions(value, |r, _db| match *r {\n             ty::ReVar(rid) => self.resolve_var(rid),\n             _ => r,\n         })"}, {"sha": "1c1906f3375af7d0c115b3f36546b31309a7a1b6", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=950934801ee6480e47973dc99a8c9e5eb8e884f0", "patch": "@@ -141,17 +141,13 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     ///   `('a, K)` in this list tells us that the bounds in scope\n     ///   indicate that `K: 'a`, where `K` is either a generic\n     ///   parameter like `T` or a projection like `T::Item`.\n-    /// - `implicit_region_bound`: if some, this is a region bound\n-    ///   that is considered to hold for all type parameters (the\n-    ///   function body).\n     /// - `param_env` is the parameter environment for the enclosing function.\n     /// - `body_id` is the body-id whose region obligations are being\n     ///   processed.\n     #[instrument(level = \"debug\", skip(self, region_bound_pairs_map))]\n     pub fn process_registered_region_obligations(\n         &self,\n         region_bound_pairs_map: &FxHashMap<hir::HirId, RegionBoundPairs<'tcx>>,\n-        implicit_region_bound: Option<ty::Region<'tcx>>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) {\n         assert!(\n@@ -170,13 +166,8 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n             let sup_type = self.resolve_vars_if_possible(sup_type);\n \n             if let Some(region_bound_pairs) = region_bound_pairs_map.get(&body_id) {\n-                let outlives = &mut TypeOutlives::new(\n-                    self,\n-                    self.tcx,\n-                    &region_bound_pairs,\n-                    implicit_region_bound,\n-                    param_env,\n-                );\n+                let outlives =\n+                    &mut TypeOutlives::new(self, self.tcx, &region_bound_pairs, None, param_env);\n                 outlives.type_must_outlive(origin, sup_type, sub_region);\n             } else {\n                 self.tcx.sess.delay_span_bug("}, {"sha": "86b025dce5edac979f911adbd82c24eb358e9404", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=950934801ee6480e47973dc99a8c9e5eb8e884f0", "patch": "@@ -16,6 +16,11 @@ use rustc_middle::ty::{self, EarlyBinder, Ty, TyCtxt};\n pub struct VerifyBoundCx<'cx, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     region_bound_pairs: &'cx RegionBoundPairs<'tcx>,\n+    /// During borrowck, if there are no outlives bounds on a generic\n+    /// parameter `T`, we assume that `T: 'in_fn_body` holds.\n+    ///\n+    /// Outside of borrowck the only way to prove `T: '?0` is by\n+    /// setting  `'?0` to `'empty`.\n     implicit_region_bound: Option<ty::Region<'tcx>>,\n     param_env: ty::ParamEnv<'tcx>,\n }\n@@ -263,8 +268,8 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         //     fn foo<'a, A>(x: &'a A) { x.bar() }\n         //\n         // The problem is that the type of `x` is `&'a A`. To be\n-        // well-formed, then, A must be lower-generic by `'a`, but we\n-        // don't know that this holds from first principles.\n+        // well-formed, then, A must outlive `'a`, but we don't know that\n+        // this holds from first principles.\n         let from_region_bound_pairs = self.region_bound_pairs.iter().filter_map(|&(r, p)| {\n             debug!(\n                 \"declared_generic_bounds_from_env_for_erased_ty: region_bound_pair = {:?}\","}, {"sha": "a6310ae5e66bda9b4aea10c176709f150d053c53", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=950934801ee6480e47973dc99a8c9e5eb8e884f0", "patch": "@@ -465,13 +465,12 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn fold_regions<T>(\n         self,\n         value: T,\n-        skipped_regions: &mut bool,\n         mut f: impl FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,\n     ) -> T\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        value.fold_with(&mut RegionFolder::new(self, skipped_regions, &mut f))\n+        value.fold_with(&mut RegionFolder::new(self, &mut f))\n     }\n \n     /// Invoke `callback` on every region appearing free in `value`.\n@@ -579,7 +578,6 @@ impl<'tcx> TyCtxt<'tcx> {\n \n pub struct RegionFolder<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    skipped_regions: &'a mut bool,\n \n     /// Stores the index of a binder *just outside* the stuff we have\n     /// visited.  So this begins as INNERMOST; when we pass through a\n@@ -597,10 +595,9 @@ impl<'a, 'tcx> RegionFolder<'a, 'tcx> {\n     #[inline]\n     pub fn new(\n         tcx: TyCtxt<'tcx>,\n-        skipped_regions: &'a mut bool,\n         fold_region_fn: &'a mut dyn FnMut(ty::Region<'tcx>, ty::DebruijnIndex) -> ty::Region<'tcx>,\n     ) -> RegionFolder<'a, 'tcx> {\n-        RegionFolder { tcx, skipped_regions, current_index: ty::INNERMOST, fold_region_fn }\n+        RegionFolder { tcx, current_index: ty::INNERMOST, fold_region_fn }\n     }\n }\n \n@@ -624,7 +621,6 @@ impl<'a, 'tcx> TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n         match *r {\n             ty::ReLateBound(debruijn, _) if debruijn < self.current_index => {\n                 debug!(?self.current_index, \"skipped bound region\");\n-                *self.skipped_regions = true;\n                 r\n             }\n             _ => {"}, {"sha": "90ff07cba026a595b77a85e369204f95e875014d", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=950934801ee6480e47973dc99a8c9e5eb8e884f0", "patch": "@@ -220,7 +220,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                 .map(|&(id, _)| (id, vec![]))\n                 .collect();\n \n-            infcx.process_registered_region_obligations(&body_id_map, None, full_env);\n+            infcx.process_registered_region_obligations(&body_id_map, full_env);\n \n             let region_data = infcx\n                 .inner"}, {"sha": "2b26b916d32899b239496c2999e2c2b4ef679e6c", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=950934801ee6480e47973dc99a8c9e5eb8e884f0", "patch": "@@ -407,11 +407,7 @@ fn resolve_negative_obligation<'cx, 'tcx>(\n     // function bodies with closures).\n     outlives_env.save_implied_bounds(CRATE_HIR_ID);\n \n-    infcx.process_registered_region_obligations(\n-        outlives_env.region_bound_pairs_map(),\n-        Some(tcx.lifetimes.re_root_empty),\n-        param_env,\n-    );\n+    infcx.process_registered_region_obligations(outlives_env.region_bound_pairs_map(), param_env);\n \n     let errors = infcx.resolve_regions(region_context, &outlives_env);\n "}, {"sha": "6ee989070b429ebff0d1b1e00ba21f2363bd5fd3", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=950934801ee6480e47973dc99a8c9e5eb8e884f0", "patch": "@@ -225,7 +225,7 @@ pub fn resolve_interior<'a, 'tcx>(\n                 // Note that each region slot in the types gets a new fresh late bound region,\n                 // which means that none of the regions inside relate to any other, even if\n                 // typeck had previously found constraints that would cause them to be related.\n-                let folded = fcx.tcx.fold_regions(erased, &mut false, |_, current_depth| {\n+                let folded = fcx.tcx.fold_regions(erased, |_, current_depth| {\n                     let br = ty::BoundRegion {\n                         var: ty::BoundVar::from_u32(counter),\n                         kind: ty::BrAnon(counter),"}, {"sha": "0ce63922098948e4ebc35c519cd216d3c0ef8b38", "filename": "compiler/rustc_typeck/src/check/regionck.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs?ref=950934801ee6480e47973dc99a8c9e5eb8e884f0", "patch": "@@ -366,7 +366,6 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n     fn resolve_regions_and_report_errors(&self) {\n         self.infcx.process_registered_region_obligations(\n             self.outlives_environment.region_bound_pairs_map(),\n-            Some(self.tcx.lifetimes.re_root_empty),\n             self.param_env,\n         );\n "}, {"sha": "40344b2ed602167681af335c9522fbe4b9f3e2a7", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=950934801ee6480e47973dc99a8c9e5eb8e884f0", "patch": "@@ -596,13 +596,7 @@ fn ty_known_to_outlive<'tcx>(\n ) -> bool {\n     resolve_regions_with_wf_tys(tcx, id, param_env, &wf_tys, |infcx, region_bound_pairs| {\n         let origin = infer::RelateParamBound(DUMMY_SP, ty, None);\n-        let outlives = &mut TypeOutlives::new(\n-            infcx,\n-            tcx,\n-            region_bound_pairs,\n-            Some(infcx.tcx.lifetimes.re_root_empty),\n-            param_env,\n-        );\n+        let outlives = &mut TypeOutlives::new(infcx, tcx, region_bound_pairs, None, param_env);\n         outlives.type_must_outlive(origin, ty, region);\n     })\n }"}, {"sha": "2a52167c59767fafc5ba72862e8142568fcada24", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=950934801ee6480e47973dc99a8c9e5eb8e884f0", "patch": "@@ -393,7 +393,7 @@ impl<'tcx> AstConv<'tcx> for ItemCtxt<'tcx> {\n     }\n \n     fn ct_infer(&self, ty: Ty<'tcx>, _: Option<&ty::GenericParamDef>, span: Span) -> Const<'tcx> {\n-        let ty = self.tcx.fold_regions(ty, &mut false, |r, _| match *r {\n+        let ty = self.tcx.fold_regions(ty, |r, _| match *r {\n             ty::ReErased => self.tcx.lifetimes.re_static,\n             _ => r,\n         });\n@@ -1917,7 +1917,7 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n         Some(ty) => {\n             let fn_sig = tcx.typeck(def_id).liberated_fn_sigs()[hir_id];\n             // Typeck doesn't expect erased regions to be returned from `type_of`.\n-            let fn_sig = tcx.fold_regions(fn_sig, &mut false, |r, _| match *r {\n+            let fn_sig = tcx.fold_regions(fn_sig, |r, _| match *r {\n                 ty::ReErased => tcx.lifetimes.re_static,\n                 _ => r,\n             });"}, {"sha": "6ee2b5449167c3701590ee6031d9f070ea52b000", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/950934801ee6480e47973dc99a8c9e5eb8e884f0/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=950934801ee6480e47973dc99a8c9e5eb8e884f0", "patch": "@@ -772,7 +772,7 @@ fn infer_placeholder_type<'a>(\n     }\n \n     // Typeck doesn't expect erased regions to be returned from `type_of`.\n-    tcx.fold_regions(ty, &mut false, |r, _| match *r {\n+    tcx.fold_regions(ty, |r, _| match *r {\n         ty::ReErased => tcx.lifetimes.re_static,\n         _ => r,\n     })"}]}