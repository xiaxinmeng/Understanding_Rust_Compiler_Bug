{"sha": "7897f60021b95b853b28e600ee858e21f49e8575", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4OTdmNjAwMjFiOTViODUzYjI4ZTYwMGVlODU4ZTIxZjQ5ZTg1NzU=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-06-05T17:07:24Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-06-05T17:07:24Z"}, "message": "Improve the new documentation to be more precise about the necessary platform's capabilities", "tree": {"sha": "8295a0df60c65f615bc4aa74c9c58e521f122a16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8295a0df60c65f615bc4aa74c9c58e521f122a16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7897f60021b95b853b28e600ee858e21f49e8575", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7897f60021b95b853b28e600ee858e21f49e8575", "html_url": "https://github.com/rust-lang/rust/commit/7897f60021b95b853b28e600ee858e21f49e8575", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7897f60021b95b853b28e600ee858e21f49e8575/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "817d6a078eb6b7ef1103781bd9114c6d9b811db9", "url": "https://api.github.com/repos/rust-lang/rust/commits/817d6a078eb6b7ef1103781bd9114c6d9b811db9", "html_url": "https://github.com/rust-lang/rust/commit/817d6a078eb6b7ef1103781bd9114c6d9b811db9"}], "stats": {"total": 164, "additions": 97, "deletions": 67}, "files": [{"sha": "aec679dd4f8d769859b73e55056f86770e5ab4c1", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 97, "deletions": 67, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/7897f60021b95b853b28e600ee858e21f49e8575/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7897f60021b95b853b28e600ee858e21f49e8575/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=7897f60021b95b853b28e600ee858e21f49e8575", "patch": "@@ -153,7 +153,8 @@ pub fn spin_loop_hint() {\n ///\n /// This type has the same in-memory representation as a [`bool`].\n ///\n-/// **Note**: This type may not be available on some platforms.\n+/// **Note**: This type is only available on platforms that support atomic\n+/// loads and stores of booleans (as `u8`).\n ///\n /// [`bool`]: ../../../std/primitive.bool.html\n #[cfg(target_has_atomic_load_store = \"8\")]\n@@ -181,8 +182,8 @@ unsafe impl Sync for AtomicBool {}\n ///\n /// This type has the same in-memory representation as a `*mut T`.\n ///\n-/// **Note**: This type may not be available on some platforms. Its size depends\n-/// on the target pointer's size.\n+/// **Note**: This type is only available on platforms that support atomic\n+/// loads and stores of pointers. Its size depends on the target pointer's size.\n #[cfg(target_has_atomic_load_store = \"ptr\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(target_pointer_width = \"16\", repr(C, align(2)))]\n@@ -452,6 +453,9 @@ impl AtomicBool {\n     /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n     /// using [`Release`] makes the load part [`Relaxed`].\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on `u8`.\n+    ///\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n     /// [`Release`]: enum.Ordering.html#variant.Release\n@@ -467,8 +471,6 @@ impl AtomicBool {\n     /// assert_eq!(some_bool.swap(false, Ordering::Relaxed), true);\n     /// assert_eq!(some_bool.load(Ordering::Relaxed), false);\n     /// ```\n-    ///\n-    /// **Note**: This method may not be available on some platforms.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[cfg(target_has_atomic = \"8\")]\n@@ -488,6 +490,9 @@ impl AtomicBool {\n     /// Using [`Acquire`] makes the store part of this operation [`Relaxed`] if it\n     /// happens, and using [`Release`] makes the load part [`Relaxed`].\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on `u8`.\n+    ///\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n     /// [`Release`]: enum.Ordering.html#variant.Release\n@@ -508,8 +513,6 @@ impl AtomicBool {\n     /// assert_eq!(some_bool.compare_and_swap(true, true, Ordering::Relaxed), false);\n     /// assert_eq!(some_bool.load(Ordering::Relaxed), false);\n     /// ```\n-    ///\n-    /// **Note**: This method may not be available on some platforms.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[cfg(target_has_atomic = \"8\")]\n@@ -533,6 +536,8 @@ impl AtomicBool {\n     /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n     /// and must be equivalent to or weaker than the success ordering.\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on `u8`.\n     ///\n     /// [`bool`]: ../../../std/primitive.bool.html\n     /// [`Ordering`]: enum.Ordering.html\n@@ -561,8 +566,6 @@ impl AtomicBool {\n     ///            Err(false));\n     /// assert_eq!(some_bool.load(Ordering::Relaxed), false);\n     /// ```\n-    ///\n-    /// **Note**: This method may not be available on some platforms.\n     #[inline]\n     #[stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\")]\n     #[cfg(target_has_atomic = \"8\")]\n@@ -597,6 +600,9 @@ impl AtomicBool {\n     /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n     /// and must be equivalent to or weaker than the success ordering.\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on `u8`.\n+    ///\n     /// [`bool`]: ../../../std/primitive.bool.html\n     /// [`compare_exchange`]: #method.compare_exchange\n     /// [`Ordering`]: enum.Ordering.html\n@@ -621,8 +627,6 @@ impl AtomicBool {\n     ///     }\n     /// }\n     /// ```\n-    ///\n-    /// **Note**: This method may not be available on some platforms.\n     #[inline]\n     #[stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\")]\n     #[cfg(target_has_atomic = \"8\")]\n@@ -659,6 +663,9 @@ impl AtomicBool {\n     /// [`Release`]: enum.Ordering.html#variant.Release\n     /// [`Acquire`]: enum.Ordering.html#variant.Acquire\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on `u8`.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -676,8 +683,6 @@ impl AtomicBool {\n     /// assert_eq!(foo.fetch_and(false, Ordering::SeqCst), false);\n     /// assert_eq!(foo.load(Ordering::SeqCst), false);\n     /// ```\n-    ///\n-    /// **Note**: This method may not be available on some platforms.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[cfg(target_has_atomic = \"8\")]\n@@ -698,6 +703,9 @@ impl AtomicBool {\n     /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n     /// using [`Release`] makes the load part [`Relaxed`].\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on `u8`.\n+    ///\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n     /// [`Release`]: enum.Ordering.html#variant.Release\n@@ -721,8 +729,6 @@ impl AtomicBool {\n     /// assert_eq!(foo.fetch_nand(false, Ordering::SeqCst), false);\n     /// assert_eq!(foo.load(Ordering::SeqCst), true);\n     /// ```\n-    ///\n-    /// **Note**: This method may not be available on some platforms.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[cfg(target_has_atomic = \"8\")]\n@@ -754,6 +760,9 @@ impl AtomicBool {\n     /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n     /// using [`Release`] makes the load part [`Relaxed`].\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on `u8`.\n+    ///\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n     /// [`Release`]: enum.Ordering.html#variant.Release\n@@ -776,8 +785,6 @@ impl AtomicBool {\n     /// assert_eq!(foo.fetch_or(false, Ordering::SeqCst), false);\n     /// assert_eq!(foo.load(Ordering::SeqCst), false);\n     /// ```\n-    ///\n-    /// **Note**: This method may not be available on some platforms.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[cfg(target_has_atomic = \"8\")]\n@@ -798,6 +805,9 @@ impl AtomicBool {\n     /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n     /// using [`Release`] makes the load part [`Relaxed`].\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on `u8`.\n+    ///\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n     /// [`Release`]: enum.Ordering.html#variant.Release\n@@ -820,8 +830,6 @@ impl AtomicBool {\n     /// assert_eq!(foo.fetch_xor(false, Ordering::SeqCst), false);\n     /// assert_eq!(foo.load(Ordering::SeqCst), false);\n     /// ```\n-    ///\n-    /// **Note**: This method may not be available on some platforms.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[cfg(target_has_atomic = \"8\")]\n@@ -1002,6 +1010,9 @@ impl<T> AtomicPtr<T> {\n     /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n     /// using [`Release`] makes the load part [`Relaxed`].\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on pointers.\n+    ///\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n     /// [`Release`]: enum.Ordering.html#variant.Release\n@@ -1019,8 +1030,6 @@ impl<T> AtomicPtr<T> {\n     ///\n     /// let value = some_ptr.swap(other_ptr, Ordering::Relaxed);\n     /// ```\n-    ///\n-    /// **Note**: This method may not be available on some platforms.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[cfg(target_has_atomic = \"ptr\")]\n@@ -1040,6 +1049,9 @@ impl<T> AtomicPtr<T> {\n     /// Using [`Acquire`] makes the store part of this operation [`Relaxed`] if it\n     /// happens, and using [`Release`] makes the load part [`Relaxed`].\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on pointers.\n+    ///\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n     /// [`Release`]: enum.Ordering.html#variant.Release\n@@ -1058,8 +1070,6 @@ impl<T> AtomicPtr<T> {\n     ///\n     /// let value = some_ptr.compare_and_swap(ptr, other_ptr, Ordering::Relaxed);\n     /// ```\n-    ///\n-    /// **Note**: This method may not be available on some platforms.\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[cfg(target_has_atomic = \"ptr\")]\n@@ -1083,6 +1093,9 @@ impl<T> AtomicPtr<T> {\n     /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n     /// and must be equivalent to or weaker than the success ordering.\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on pointers.\n+    ///\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n     /// [`Release`]: enum.Ordering.html#variant.Release\n@@ -1102,8 +1115,6 @@ impl<T> AtomicPtr<T> {\n     /// let value = some_ptr.compare_exchange(ptr, other_ptr,\n     ///                                       Ordering::SeqCst, Ordering::Relaxed);\n     /// ```\n-    ///\n-    /// **Note**: This method may not be available on some platforms.\n     #[inline]\n     #[stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\")]\n     #[cfg(target_has_atomic = \"ptr\")]\n@@ -1145,6 +1156,9 @@ impl<T> AtomicPtr<T> {\n     /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n     /// and must be equivalent to or weaker than the success ordering.\n     ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on pointers.\n+    ///\n     /// [`compare_exchange`]: #method.compare_exchange\n     /// [`Ordering`]: enum.Ordering.html\n     /// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n@@ -1168,8 +1182,6 @@ impl<T> AtomicPtr<T> {\n     ///     }\n     /// }\n     /// ```\n-    ///\n-    /// **Note**: This method may not be available on some platforms.\n     #[inline]\n     #[stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\")]\n     #[cfg(target_has_atomic = \"ptr\")]\n@@ -1252,7 +1264,12 @@ macro_rules! atomic_int {\n         /// non-atomic types as well as information about the portability of\n         /// this type, please see the [module-level documentation].\n         ///\n-        /// **Note**: This type may not be available on some platforms.\n+        /// **Note:** This type is only available on platforms that support\n+        /// atomic loads and stores of [`\n+        #[doc = $s_int_type]\n+        /// `](\n+        #[doc = $int_ref]\n+        /// ).\n         ///\n         /// [module-level documentation]: index.html\n         #[$stable]\n@@ -1439,6 +1456,9 @@ of this operation. All ordering modes are possible. Note that using\n [`Acquire`] makes the store part of this operation [`Relaxed`], and\n using [`Release`] makes the load part [`Relaxed`].\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1452,9 +1472,7 @@ using [`Release`] makes the load part [`Relaxed`].\n let some_var = \", stringify!($atomic_type), \"::new(5);\n \n assert_eq!(some_var.swap(10, Ordering::Relaxed), 5);\n-```\n-\n-**Note**: This method may not be available on some platforms.\"),\n+```\"),\n                 #[inline]\n                 #[$stable]\n                 #[$cfg_cas]\n@@ -1477,6 +1495,9 @@ might fail and hence just perform an `Acquire` load, but not have `Release` sema\n Using [`Acquire`] makes the store part of this operation [`Relaxed`] if it\n happens, and using [`Release`] makes the load part [`Relaxed`].\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1495,9 +1516,7 @@ assert_eq!(some_var.load(Ordering::Relaxed), 10);\n \n assert_eq!(some_var.compare_and_swap(6, 12, Ordering::Relaxed), 10);\n assert_eq!(some_var.load(Ordering::Relaxed), 10);\n-```\n-\n-**Note**: This method may not be available on some platforms.\"),\n+```\"),\n                 #[inline]\n                 #[$stable]\n                 #[$cfg_cas]\n@@ -1531,6 +1550,9 @@ of this operation [`Relaxed`], and using [`Release`] makes the successful load\n [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n and must be equivalent to or weaker than the success ordering.\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1555,9 +1577,7 @@ assert_eq!(some_var.compare_exchange(6, 12,\n                                      Ordering::Acquire),\n            Err(10));\n assert_eq!(some_var.load(Ordering::Relaxed), 10);\n-```\n-\n-**Note**: This method may not be available on some platforms.\"),\n+```\"),\n                 #[inline]\n                 #[$stable_cxchg]\n                 #[$cfg_cas]\n@@ -1595,6 +1615,9 @@ and must be equivalent to or weaker than the success ordering.\n [`Acquire`]: enum.Ordering.html#variant.Acquire\n [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n # Examples\n \n ```\n@@ -1610,9 +1633,7 @@ loop {\n         Err(x) => old = x,\n     }\n }\n-```\n-\n-**Note**: This method may not be available on some platforms.\"),\n+```\"),\n                 #[inline]\n                 #[$stable_cxchg]\n                 #[$cfg_cas]\n@@ -1638,6 +1659,9 @@ of this operation. All ordering modes are possible. Note that using\n [`Acquire`] makes the store part of this operation [`Relaxed`], and\n using [`Release`] makes the load part [`Relaxed`].\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1651,9 +1675,7 @@ using [`Release`] makes the load part [`Relaxed`].\n let foo = \", stringify!($atomic_type), \"::new(0);\n assert_eq!(foo.fetch_add(10, Ordering::SeqCst), 0);\n assert_eq!(foo.load(Ordering::SeqCst), 10);\n-```\n-\n-**Note**: This method may not be available on some platforms.\"),\n+```\"),\n                 #[inline]\n                 #[$stable]\n                 #[$cfg_cas]\n@@ -1673,6 +1695,9 @@ of this operation. All ordering modes are possible. Note that using\n [`Acquire`] makes the store part of this operation [`Relaxed`], and\n using [`Release`] makes the load part [`Relaxed`].\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1686,9 +1711,7 @@ using [`Release`] makes the load part [`Relaxed`].\n let foo = \", stringify!($atomic_type), \"::new(20);\n assert_eq!(foo.fetch_sub(10, Ordering::SeqCst), 20);\n assert_eq!(foo.load(Ordering::SeqCst), 10);\n-```\n-\n-**Note**: This method may not be available on some platforms.\"),\n+```\"),\n                 #[inline]\n                 #[$stable]\n                 #[$cfg_cas]\n@@ -1711,6 +1734,9 @@ of this operation. All ordering modes are possible. Note that using\n [`Acquire`] makes the store part of this operation [`Relaxed`], and\n using [`Release`] makes the load part [`Relaxed`].\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1724,9 +1750,7 @@ using [`Release`] makes the load part [`Relaxed`].\n let foo = \", stringify!($atomic_type), \"::new(0b101101);\n assert_eq!(foo.fetch_and(0b110011, Ordering::SeqCst), 0b101101);\n assert_eq!(foo.load(Ordering::SeqCst), 0b100001);\n-```\n-\n-**Note**: This method may not be available on some platforms.\"),\n+```\"),\n                 #[inline]\n                 #[$stable]\n                 #[$cfg_cas]\n@@ -1749,6 +1773,9 @@ of this operation. All ordering modes are possible. Note that using\n [`Acquire`] makes the store part of this operation [`Relaxed`], and\n using [`Release`] makes the load part [`Relaxed`].\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1763,9 +1790,7 @@ use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\n let foo = \", stringify!($atomic_type), \"::new(0x13);\n assert_eq!(foo.fetch_nand(0x31, Ordering::SeqCst), 0x13);\n assert_eq!(foo.load(Ordering::SeqCst), !(0x13 & 0x31));\n-```\n-\n-**Note**: This method may not be available on some platforms.\"),\n+```\"),\n                 #[inline]\n                 #[$stable_nand]\n                 #[$cfg_cas]\n@@ -1788,6 +1813,9 @@ of this operation. All ordering modes are possible. Note that using\n [`Acquire`] makes the store part of this operation [`Relaxed`], and\n using [`Release`] makes the load part [`Relaxed`].\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1801,9 +1829,7 @@ using [`Release`] makes the load part [`Relaxed`].\n let foo = \", stringify!($atomic_type), \"::new(0b101101);\n assert_eq!(foo.fetch_or(0b110011, Ordering::SeqCst), 0b101101);\n assert_eq!(foo.load(Ordering::SeqCst), 0b111111);\n-```\n-\n-**Note**: This method may not be available on some platforms.\"),\n+```\"),\n                 #[inline]\n                 #[$stable]\n                 #[$cfg_cas]\n@@ -1826,6 +1852,9 @@ of this operation. All ordering modes are possible. Note that using\n [`Acquire`] makes the store part of this operation [`Relaxed`], and\n using [`Release`] makes the load part [`Relaxed`].\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1839,9 +1868,7 @@ using [`Release`] makes the load part [`Relaxed`].\n let foo = \", stringify!($atomic_type), \"::new(0b101101);\n assert_eq!(foo.fetch_xor(0b110011, Ordering::SeqCst), 0b101101);\n assert_eq!(foo.load(Ordering::SeqCst), 0b011110);\n-```\n-\n-**Note**: This method may not be available on some platforms.\"),\n+```\"),\n                 #[inline]\n                 #[$stable]\n                 #[$cfg_cas]\n@@ -1870,6 +1897,9 @@ of this operation [`Relaxed`], and using [`Release`] makes the final successful\n [`Relaxed`]. The (failed) load ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n and must be equivalent to or weaker than the success ordering.\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`bool`]: ../../../std/primitive.bool.html\n [`compare_exchange`]: #method.compare_exchange\n [`Ordering`]: enum.Ordering.html\n@@ -1888,9 +1918,7 @@ assert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |_| None), Err(7))\n assert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(x + 1)), Ok(7));\n assert_eq!(x.fetch_update(Ordering::SeqCst, Ordering::SeqCst, |x| Some(x + 1)), Ok(8));\n assert_eq!(x.load(Ordering::SeqCst), 9);\n-```\n-\n-**Note**: This method may not be available on some platforms.\"),\n+```\"),\n                 #[inline]\n                 #[stable(feature = \"no_more_cas\", since = \"1.45.0\")]\n                 #[$cfg_cas]\n@@ -1923,6 +1951,9 @@ of this operation. All ordering modes are possible. Note that using\n [`Acquire`] makes the store part of this operation [`Relaxed`], and\n using [`Release`] makes the load part [`Relaxed`].\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1947,9 +1978,7 @@ let foo = \", stringify!($atomic_type), \"::new(23);\n let bar = 42;\n let max_foo = foo.fetch_max(bar, Ordering::SeqCst).max(bar);\n assert!(max_foo == 42);\n-```\n-\n-**Note**: This method may not be available on some platforms.\"),\n+```\"),\n                 #[inline]\n                 #[stable(feature = \"atomic_min_max\", since = \"1.45.0\")]\n                 #[$cfg_cas]\n@@ -1972,6 +2001,9 @@ of this operation. All ordering modes are possible. Note that using\n [`Acquire`] makes the store part of this operation [`Relaxed`], and\n using [`Release`] makes the load part [`Relaxed`].\n \n+**Note**: This method is only available on platforms that support atomic\n+operations on [`\", $s_int_type, \"`](\", $int_ref, \").\n+\n [`Ordering`]: enum.Ordering.html\n [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n [`Release`]: enum.Ordering.html#variant.Release\n@@ -1998,9 +2030,7 @@ let foo = \", stringify!($atomic_type), \"::new(23);\n let bar = 12;\n let min_foo = foo.fetch_min(bar, Ordering::SeqCst).min(bar);\n assert_eq!(min_foo, 12);\n-```\n-\n-**Note**: This method may not be available on some platforms.\"),\n+```\"),\n                 #[inline]\n                 #[stable(feature = \"atomic_min_max\", since = \"1.45.0\")]\n                 #[$cfg_cas]"}]}