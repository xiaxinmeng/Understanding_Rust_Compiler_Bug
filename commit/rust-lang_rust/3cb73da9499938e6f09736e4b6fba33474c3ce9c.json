{"sha": "3cb73da9499938e6f09736e4b6fba33474c3ce9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjYjczZGE5NDk5OTM4ZTZmMDk3MzZlNGI2ZmJhMzM0NzRjM2NlOWM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-04-29T22:03:36Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-04-29T22:10:30Z"}, "message": "Rename to associated_type_shorthand_candidates", "tree": {"sha": "690f793620fe3abf0583d2052979c9f3015929f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/690f793620fe3abf0583d2052979c9f3015929f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cb73da9499938e6f09736e4b6fba33474c3ce9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cb73da9499938e6f09736e4b6fba33474c3ce9c", "html_url": "https://github.com/rust-lang/rust/commit/3cb73da9499938e6f09736e4b6fba33474c3ce9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cb73da9499938e6f09736e4b6fba33474c3ce9c/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c2670026a4c864a67a06bab654e203ed068f021", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c2670026a4c864a67a06bab654e203ed068f021", "html_url": "https://github.com/rust-lang/rust/commit/8c2670026a4c864a67a06bab654e203ed068f021"}], "stats": {"total": 59, "additions": 30, "deletions": 29}, "files": [{"sha": "e6a7aaee07a934525a8be51ecb116e1f68ced7e5", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cb73da9499938e6f09736e4b6fba33474c3ce9c/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb73da9499938e6f09736e4b6fba33474c3ce9c/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=3cb73da9499938e6f09736e4b6fba33474c3ce9c", "patch": "@@ -9,7 +9,7 @@ use hir_def::{\n     AsMacroCall, TraitId,\n };\n use hir_expand::ExpansionInfo;\n-use hir_ty::associated_types;\n+use hir_ty::associated_type_shorthand_candidates;\n use itertools::Itertools;\n use ra_db::{FileId, FileRange};\n use ra_prof::profile;\n@@ -78,7 +78,7 @@ impl PathResolution {\n         mut cb: impl FnMut(TypeAlias) -> Option<R>,\n     ) -> Option<R> {\n         if let Some(res) = self.clone().in_type_ns() {\n-            associated_types(db, res, |_, _, id| cb(id.into()))\n+            associated_type_shorthand_candidates(db, res, |_, _, id| cb(id.into()))\n         } else {\n             None\n         }"}, {"sha": "a6f56c661e2a7b509371b954d58c0dd894c37c88", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cb73da9499938e6f09736e4b6fba33474c3ce9c/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb73da9499938e6f09736e4b6fba33474c3ce9c/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=3cb73da9499938e6f09736e4b6fba33474c3ce9c", "patch": "@@ -66,8 +66,8 @@ pub use autoderef::autoderef;\n pub use infer::{InferTy, InferenceResult};\n pub use lower::CallableDef;\n pub use lower::{\n-    associated_types, callable_item_sig, ImplTraitLoweringMode, TyDefId, TyLoweringContext,\n-    ValueTyDefId,\n+    associated_type_shorthand_candidates, callable_item_sig, ImplTraitLoweringMode, TyDefId,\n+    TyLoweringContext, ValueTyDefId,\n };\n pub use traits::{InEnvironment, Obligation, ProjectionPredicate, TraitEnvironment};\n "}, {"sha": "9ad6dbe075a2b26b2cfbfdc014cf43e2bca193c0", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/3cb73da9499938e6f09736e4b6fba33474c3ce9c/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb73da9499938e6f09736e4b6fba33474c3ce9c/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=3cb73da9499938e6f09736e4b6fba33474c3ce9c", "patch": "@@ -385,31 +385,32 @@ impl Ty {\n         segment: PathSegment<'_>,\n     ) -> Ty {\n         if let Some(res) = res {\n-            let ty = associated_types(ctx.db, res, move |name, t, associated_ty| {\n-                if name == segment.name {\n-                    let substs = match ctx.type_param_mode {\n-                        TypeParamLoweringMode::Placeholder => {\n-                            // if we're lowering to placeholders, we have to put\n-                            // them in now\n-                            let s = Substs::type_params(\n-                                ctx.db,\n-                                ctx.resolver\n-                                    .generic_def()\n-                                    .expect(\"there should be generics if there's a generic param\"),\n-                            );\n-                            t.substs.clone().subst_bound_vars(&s)\n-                        }\n-                        TypeParamLoweringMode::Variable => t.substs.clone(),\n-                    };\n-                    // FIXME handle type parameters on the segment\n-                    return Some(Ty::Projection(ProjectionTy {\n-                        associated_ty,\n-                        parameters: substs,\n-                    }));\n-                }\n+            let ty =\n+                associated_type_shorthand_candidates(ctx.db, res, move |name, t, associated_ty| {\n+                    if name == segment.name {\n+                        let substs = match ctx.type_param_mode {\n+                            TypeParamLoweringMode::Placeholder => {\n+                                // if we're lowering to placeholders, we have to put\n+                                // them in now\n+                                let s = Substs::type_params(\n+                                    ctx.db,\n+                                    ctx.resolver.generic_def().expect(\n+                                        \"there should be generics if there's a generic param\",\n+                                    ),\n+                                );\n+                                t.substs.clone().subst_bound_vars(&s)\n+                            }\n+                            TypeParamLoweringMode::Variable => t.substs.clone(),\n+                        };\n+                        // FIXME handle type parameters on the segment\n+                        return Some(Ty::Projection(ProjectionTy {\n+                            associated_ty,\n+                            parameters: substs,\n+                        }));\n+                    }\n \n-                None\n-            });\n+                    None\n+                });\n \n             ty.unwrap_or(Ty::Unknown)\n         } else {\n@@ -671,7 +672,7 @@ pub fn callable_item_sig(db: &dyn HirDatabase, def: CallableDef) -> PolyFnSig {\n     }\n }\n \n-pub fn associated_types<R>(\n+pub fn associated_type_shorthand_candidates<R>(\n     db: &dyn HirDatabase,\n     res: TypeNs,\n     mut cb: impl FnMut(&Name, &TraitRef, TypeAliasId) -> Option<R>,"}]}