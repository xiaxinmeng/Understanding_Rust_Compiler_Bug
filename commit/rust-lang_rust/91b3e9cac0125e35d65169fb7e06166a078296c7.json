{"sha": "91b3e9cac0125e35d65169fb7e06166a078296c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxYjNlOWNhYzAxMjVlMzVkNjUxNjlmYjdlMDYxNjZhMDc4Mjk2Yzc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-07T13:27:27Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-12T21:58:56Z"}, "message": "Fallout in libs -- misc missing bounds uncovered by WF checks.", "tree": {"sha": "9d4ee7d97b5ffeec38060a1afa9a386cb08f233d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d4ee7d97b5ffeec38060a1afa9a386cb08f233d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91b3e9cac0125e35d65169fb7e06166a078296c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91b3e9cac0125e35d65169fb7e06166a078296c7", "html_url": "https://github.com/rust-lang/rust/commit/91b3e9cac0125e35d65169fb7e06166a078296c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91b3e9cac0125e35d65169fb7e06166a078296c7/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "788a802dad3f273b74150b732d24d37a695d29f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/788a802dad3f273b74150b732d24d37a695d29f6", "html_url": "https://github.com/rust-lang/rust/commit/788a802dad3f273b74150b732d24d37a695d29f6"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "d19f3b6d27a753d23d8ba9cac3ea94bcaea884e8", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b3e9cac0125e35d65169fb7e06166a078296c7/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b3e9cac0125e35d65169fb7e06166a078296c7/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=91b3e9cac0125e35d65169fb7e06166a078296c7", "patch": "@@ -2623,7 +2623,7 @@ impl<A, St, F> Iterator for Unfold<St, F> where F: FnMut(&mut St) -> Option<A> {\n /// two `Step` objects.\n #[unstable(feature = \"step_trait\",\n            reason = \"likely to be replaced by finer-grained traits\")]\n-pub trait Step: PartialOrd {\n+pub trait Step: PartialOrd+Sized {\n     /// Steps `self` if possible.\n     fn step(&self, by: &Self) -> Option<Self>;\n "}, {"sha": "32f367e12f034e214db240e565cebac309010dd9", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b3e9cac0125e35d65169fb7e06166a078296c7/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b3e9cac0125e35d65169fb7e06166a078296c7/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=91b3e9cac0125e35d65169fb7e06166a078296c7", "patch": "@@ -56,7 +56,7 @@ pub trait Sized {\n /// Types that can be \"unsized\" to a dynamically sized type.\n #[unstable(feature = \"unsize\")]\n #[lang=\"unsize\"]\n-pub trait Unsize<T> {\n+pub trait Unsize<T: ?Sized> {\n     // Empty.\n }\n "}, {"sha": "7507e5782d6a21bf6033aefc7d225a976094e2ba", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91b3e9cac0125e35d65169fb7e06166a078296c7/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b3e9cac0125e35d65169fb7e06166a078296c7/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=91b3e9cac0125e35d65169fb7e06166a078296c7", "patch": "@@ -19,7 +19,7 @@ use char::CharExt;\n use cmp::{Eq, PartialOrd};\n use fmt;\n use intrinsics;\n-use marker::Copy;\n+use marker::{Copy, Sized};\n use mem::size_of;\n use option::Option::{self, Some, None};\n use result::Result::{self, Ok, Err};\n@@ -1264,7 +1264,7 @@ pub enum FpCategory {\n #[doc(hidden)]\n #[unstable(feature = \"core_float\",\n            reason = \"stable interface is via `impl f{32,64}` in later crates\")]\n-pub trait Float {\n+pub trait Float: Sized {\n     /// Returns the NaN value.\n     fn nan() -> Self;\n     /// Returns the infinite value."}, {"sha": "d5bceb3ba623ccdc49cc22cf40ec36530400c2ac", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91b3e9cac0125e35d65169fb7e06166a078296c7/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b3e9cac0125e35d65169fb7e06166a078296c7/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=91b3e9cac0125e35d65169fb7e06166a078296c7", "patch": "@@ -25,6 +25,7 @@ use default::Default;\n use fmt;\n use iter::ExactSizeIterator;\n use iter::{Map, Iterator, DoubleEndedIterator};\n+use marker::Sized;\n use mem;\n use ops::{Fn, FnMut, FnOnce};\n use option::Option::{self, None, Some};\n@@ -37,7 +38,7 @@ pub mod pattern;\n /// A trait to abstract the idea of creating a new instance of a type from a\n /// string.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait FromStr {\n+pub trait FromStr: Sized {\n     /// The associated error which can be returned from parsing.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Err;"}, {"sha": "a0b571b65ab5c9614d797de9fa4740593795d4d2", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b3e9cac0125e35d65169fb7e06166a078296c7/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b3e9cac0125e35d65169fb7e06166a078296c7/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=91b3e9cac0125e35d65169fb7e06166a078296c7", "patch": "@@ -561,7 +561,7 @@ pub type Edges<'a,E> = Cow<'a,[E]>;\n /// `Cow<[T]>` to leave implementers the freedom to create\n /// entirely new vectors or to pass back slices into internally owned\n /// vectors.\n-pub trait GraphWalk<'a, N, E> {\n+pub trait GraphWalk<'a, N: Clone, E: Clone> {\n     /// Returns all the nodes in this graph.\n     fn nodes(&'a self) -> Nodes<'a, N>;\n     /// Returns all of the edges in this graph."}, {"sha": "26f92ee3b1cf079641a9e3dcd727d856c7a93593", "filename": "src/librand/distributions/range.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91b3e9cac0125e35d65169fb7e06166a078296c7/src%2Flibrand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b3e9cac0125e35d65169fb7e06166a078296c7/src%2Flibrand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Frange.rs?ref=91b3e9cac0125e35d65169fb7e06166a078296c7", "patch": "@@ -12,6 +12,7 @@\n \n // this is surprisingly complicated to be both generic & correct\n \n+use core::marker::Sized;\n use Rng;\n use distributions::{Sample, IndependentSample};\n \n@@ -57,7 +58,7 @@ impl<Sup: SampleRange> IndependentSample<Sup> for Range<Sup> {\n /// uniformly between two values. This should not be used directly,\n /// and is only to facilitate `Range`.\n #[doc(hidden)]\n-pub trait SampleRange {\n+pub trait SampleRange: Sized {\n     /// Construct the `Range` object that `sample_range`\n     /// requires. This should not ever be called directly, only via\n     /// `Range::new`, which will check that `low < high`, so this"}, {"sha": "c064b31173f98dc60f1788f503aa8ba57e60ed73", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b3e9cac0125e35d65169fb7e06166a078296c7/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b3e9cac0125e35d65169fb7e06166a078296c7/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=91b3e9cac0125e35d65169fb7e06166a078296c7", "patch": "@@ -1061,7 +1061,7 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n     }\n }\n \n-trait doc_decoder_helpers {\n+trait doc_decoder_helpers: Sized {\n     fn as_int(&self) -> isize;\n     fn opt_child(&self, tag: c::astencode_tag) -> Option<Self>;\n }"}, {"sha": "a97fe84e6aceff129796802897d544a7eb7023f0", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b3e9cac0125e35d65169fb7e06166a078296c7/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b3e9cac0125e35d65169fb7e06166a078296c7/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=91b3e9cac0125e35d65169fb7e06166a078296c7", "patch": "@@ -239,7 +239,7 @@ impl OverloadedCallType {\n // supplies types from the tree. After type checking is complete, you\n // can just use the tcx as the typer.\n \n-pub struct ExprUseVisitor<'d,'t,'a: 't, 'tcx:'a> {\n+pub struct ExprUseVisitor<'d, 't, 'a: 't, 'tcx:'a+'d> {\n     typer: &'t infer::InferCtxt<'a, 'tcx>,\n     mc: mc::MemCategorizationContext<'t, 'a, 'tcx>,\n     delegate: &'d mut (Delegate<'tcx>+'d),"}, {"sha": "4d79b1a64c1911464b0f8cf4901e0fd009227239", "filename": "src/librustc_data_structures/unify/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b3e9cac0125e35d65169fb7e06166a078296c7/src%2Flibrustc_data_structures%2Funify%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b3e9cac0125e35d65169fb7e06166a078296c7/src%2Flibrustc_data_structures%2Funify%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Funify%2Fmod.rs?ref=91b3e9cac0125e35d65169fb7e06166a078296c7", "patch": "@@ -272,7 +272,7 @@ impl<'tcx,K> UnificationTable<K>\n \n impl<'tcx,K,V> UnificationTable<K>\n     where K: UnifyKey<Value=Option<V>>,\n-          V: Clone+PartialEq,\n+          V: Clone+PartialEq+Debug,\n {\n     pub fn unify_var_var(&mut self,\n                          a_id: K,"}, {"sha": "5e96ec6ab0df39c8b7a5d68639b240c013fc35cc", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b3e9cac0125e35d65169fb7e06166a078296c7/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b3e9cac0125e35d65169fb7e06166a078296c7/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=91b3e9cac0125e35d65169fb7e06166a078296c7", "patch": "@@ -194,7 +194,7 @@ pub trait Encodable {\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error>;\n }\n \n-pub trait Decodable {\n+pub trait Decodable: Sized {\n     fn decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error>;\n }\n "}, {"sha": "773bd7f5606949f1da882b4b121825f4793ba7ab", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b3e9cac0125e35d65169fb7e06166a078296c7/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b3e9cac0125e35d65169fb7e06166a078296c7/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=91b3e9cac0125e35d65169fb7e06166a078296c7", "patch": "@@ -369,7 +369,7 @@ mod tests {\n     use sync::{Arc, Mutex, StaticMutex, Condvar};\n     use thread;\n \n-    struct Packet<T: Send>(Arc<(Mutex<T>, Condvar)>);\n+    struct Packet<T>(Arc<(Mutex<T>, Condvar)>);\n \n     unsafe impl<T: Send> Send for Packet<T> {}\n     unsafe impl<T> Sync for Packet<T> {}"}, {"sha": "a228cbfd85ba320256edf7049dd810195a9a3b78", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b3e9cac0125e35d65169fb7e06166a078296c7/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b3e9cac0125e35d65169fb7e06166a078296c7/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=91b3e9cac0125e35d65169fb7e06166a078296c7", "patch": "@@ -60,7 +60,7 @@ pub use self::imp::Key as __KeyInner;\n /// });\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub struct LocalKey<T> {\n+pub struct LocalKey<T:'static> {\n     // The key itself may be tagged with #[thread_local], and this `Key` is\n     // stored as a `static`, and it's not valid for a static to reference the\n     // address of another thread_local static. For this reason we kinda wonkily"}, {"sha": "810e3bb62f705a90c4707ab102e1b2b978088176", "filename": "src/libstd/thread/scoped_tls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91b3e9cac0125e35d65169fb7e06166a078296c7/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91b3e9cac0125e35d65169fb7e06166a078296c7/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fscoped_tls.rs?ref=91b3e9cac0125e35d65169fb7e06166a078296c7", "patch": "@@ -55,7 +55,7 @@ pub use self::imp::KeyInner as __KeyInner;\n #[unstable(feature = \"scoped_tls\",\n            reason = \"scoped TLS has yet to have wide enough use to fully consider \\\n                      stabilizing its interface\")]\n-pub struct ScopedKey<T> { inner: fn() -> &'static imp::KeyInner<T> }\n+pub struct ScopedKey<T:'static> { inner: fn() -> &'static imp::KeyInner<T> }\n \n /// Declare a new scoped thread local storage key.\n ///"}]}