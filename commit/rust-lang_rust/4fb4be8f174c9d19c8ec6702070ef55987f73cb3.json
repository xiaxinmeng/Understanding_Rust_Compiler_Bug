{"sha": "4fb4be8f174c9d19c8ec6702070ef55987f73cb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYjRiZThmMTc0YzlkMTljOGVjNjcwMjA3MGVmNTU5ODdmNzNjYjM=", "commit": {"author": {"name": "ILyoan", "email": "ilyoan@gmail.com", "date": "2012-11-29T10:36:03Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-14T00:43:39Z"}, "message": "More android support\nConflicts:\n\tMakefile.in\n\tcmakeFiles/rustllvm.cmake", "tree": {"sha": "1cab16b580d3776e4b5da77c62501427e1b3b23b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cab16b580d3776e4b5da77c62501427e1b3b23b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fb4be8f174c9d19c8ec6702070ef55987f73cb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fb4be8f174c9d19c8ec6702070ef55987f73cb3", "html_url": "https://github.com/rust-lang/rust/commit/4fb4be8f174c9d19c8ec6702070ef55987f73cb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fb4be8f174c9d19c8ec6702070ef55987f73cb3/comments", "author": {"login": "ILyoan", "id": 2672194, "node_id": "MDQ6VXNlcjI2NzIxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2672194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ILyoan", "html_url": "https://github.com/ILyoan", "followers_url": "https://api.github.com/users/ILyoan/followers", "following_url": "https://api.github.com/users/ILyoan/following{/other_user}", "gists_url": "https://api.github.com/users/ILyoan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ILyoan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ILyoan/subscriptions", "organizations_url": "https://api.github.com/users/ILyoan/orgs", "repos_url": "https://api.github.com/users/ILyoan/repos", "events_url": "https://api.github.com/users/ILyoan/events{/privacy}", "received_events_url": "https://api.github.com/users/ILyoan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "987f824f233faee4aed39dac92a1b442d42965cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/987f824f233faee4aed39dac92a1b442d42965cc", "html_url": "https://github.com/rust-lang/rust/commit/987f824f233faee4aed39dac92a1b442d42965cc"}], "stats": {"total": 837, "additions": 834, "deletions": 3}, "files": [{"sha": "16323af2cd75cf379b59c7bc69e308cb20e5f0b2", "filename": "mk/libuv/arm/unix/android/Makefile", "status": "added", "additions": 354, "deletions": 0, "changes": 354, "blob_url": "https://github.com/rust-lang/rust/blob/4fb4be8f174c9d19c8ec6702070ef55987f73cb3/mk%2Flibuv%2Farm%2Funix%2Fandroid%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4fb4be8f174c9d19c8ec6702070ef55987f73cb3/mk%2Flibuv%2Farm%2Funix%2Fandroid%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Farm%2Funix%2Fandroid%2FMakefile?ref=4fb4be8f174c9d19c8ec6702070ef55987f73cb3", "patch": "@@ -0,0 +1,354 @@\n+# We borrow heavily from the kernel build setup, though we are simpler since\n+# we don't have Kconfig tweaking settings on us.\n+\n+# The implicit make rules have it looking for RCS files, among other things.\n+# We instead explicitly write all the rules we care about.\n+# It's even quicker (saves ~200ms) to pass -r on the command line.\n+MAKEFLAGS=-r\n+\n+# The source directory tree.\n+srcdir := ../../../../..\n+abs_srcdir := $(abspath $(srcdir))\n+\n+# The name of the builddir.\n+builddir_name ?= out\n+\n+# The V=1 flag on command line makes us verbosely print command lines.\n+ifdef V\n+  quiet=\n+else\n+  quiet=quiet_\n+endif\n+\n+# Specify BUILDTYPE=Release on the command line for a release build.\n+BUILDTYPE ?= Debug\n+\n+# Directory all our build output goes into.\n+# Note that this must be two directories beneath src/ for unit tests to pass,\n+# as they reach into the src/ directory for data with relative paths.\n+builddir ?= $(builddir_name)/$(BUILDTYPE)\n+abs_builddir := $(abspath $(builddir))\n+depsdir := $(builddir)/.deps\n+\n+# Object output directory.\n+obj := $(builddir)/obj\n+abs_obj := $(abspath $(obj))\n+\n+# We build up a list of every single one of the targets so we can slurp in the\n+# generated dependency rule Makefiles in one pass.\n+all_deps :=\n+\n+\n+\n+# C++ apps need to be linked with g++.\n+#\n+# Note: flock is used to seralize linking. Linking is a memory-intensive\n+# process so running parallel links can often lead to thrashing.  To disable\n+# the serialization, override LINK via an envrionment variable as follows:\n+#\n+#   export LINK=g++\n+#\n+# This will allow make to invoke N linker processes as specified in -jN.\n+LINK ?= flock $(builddir)/linker.lock $(CXX)\n+\n+CC.target ?= $(CC)\n+CFLAGS.target ?= $(CFLAGS)\n+CXX.target ?= $(CXX)\n+CXXFLAGS.target ?= $(CXXFLAGS)\n+LINK.target ?= $(LINK)\n+LDFLAGS.target ?= $(LDFLAGS)\n+AR.target ?= $(AR)\n+ARFLAGS.target ?= crsT\n+\n+# N.B.: the logic of which commands to run should match the computation done\n+# in gyp's make.py where ARFLAGS.host etc. is computed.\n+# TODO(evan): move all cross-compilation logic to gyp-time so we don't need\n+# to replicate this environment fallback in make as well.\n+CC.host ?= gcc\n+CFLAGS.host ?=\n+CXX.host ?= g++\n+CXXFLAGS.host ?=\n+LINK.host ?= g++\n+LDFLAGS.host ?=\n+AR.host ?= ar\n+ARFLAGS.host := crs\n+\n+# Define a dir function that can handle spaces.\n+# http://www.gnu.org/software/make/manual/make.html#Syntax-of-Functions\n+# \"leading spaces cannot appear in the text of the first argument as written.\n+# These characters can be put into the argument value by variable substitution.\"\n+empty :=\n+space := $(empty) $(empty)\n+\n+# http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces\n+replace_spaces = $(subst $(space),?,$1)\n+unreplace_spaces = $(subst ?,$(space),$1)\n+dirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n+\n+# Flags to make gcc output dependency info.  Note that you need to be\n+# careful here to use the flags that ccache and distcc can understand.\n+# We write to a dep file on the side first and then rename at the end\n+# so we can't end up with a broken dep file.\n+depfile = $(depsdir)/$(call replace_spaces,$@).d\n+DEPFLAGS = -MMD -MF $(depfile).raw\n+\n+# We have to fixup the deps output in a few ways.\n+# (1) the file output should mention the proper .o file.\n+# ccache or distcc lose the path to the target, so we convert a rule of\n+# the form:\n+#   foobar.o: DEP1 DEP2\n+# into\n+#   path/to/foobar.o: DEP1 DEP2\n+# (2) we want missing files not to cause us to fail to build.\n+# We want to rewrite\n+#   foobar.o: DEP1 DEP2 \\\n+#               DEP3\n+# to\n+#   DEP1:\n+#   DEP2:\n+#   DEP3:\n+# so if the files are missing, they're just considered phony rules.\n+# We have to do some pretty insane escaping to get those backslashes\n+# and dollar signs past make, the shell, and sed at the same time.\n+# Doesn't work with spaces, but that's fine: .d files have spaces in\n+# their names replaced with other characters.\n+define fixup_dep\n+# The depfile may not exist if the input file didn't have any #includes.\n+touch $(depfile).raw\n+# Fixup path as in (1).\n+sed -e \"s|^$(notdir $@)|$@|\" $(depfile).raw >> $(depfile)\n+# Add extra rules as in (2).\n+# We remove slashes and replace spaces with new lines;\n+# remove blank lines;\n+# delete the first line and append a colon to the remaining lines.\n+sed -e 's|\\\\||' -e 'y| |\\n|' $(depfile).raw |\\\n+  grep -v '^$$'                             |\\\n+  sed -e 1d -e 's|$$|:|'                     \\\n+    >> $(depfile)\n+rm $(depfile).raw\n+endef\n+\n+# Command definitions:\n+# - cmd_foo is the actual command to run;\n+# - quiet_cmd_foo is the brief-output summary of the command.\n+\n+quiet_cmd_cc = CC($(TOOLSET)) $@\n+cmd_cc = $(CC.$(TOOLSET)) $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c -o $@ $<\n+\n+quiet_cmd_cxx = CXX($(TOOLSET)) $@\n+cmd_cxx = $(CXX.$(TOOLSET)) $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\n+\n+quiet_cmd_touch = TOUCH $@\n+cmd_touch = touch $@\n+\n+quiet_cmd_copy = COPY $@\n+# send stderr to /dev/null to ignore messages when linking directories.\n+cmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp -af \"$<\" \"$@\")\n+\n+quiet_cmd_alink = AR($(TOOLSET)) $@\n+cmd_alink = rm -f $@ && $(AR.$(TOOLSET)) $(ARFLAGS.$(TOOLSET)) $@ $(filter %.o,$^)\n+\n+# Due to circular dependencies between libraries :(, we wrap the\n+# special \"figure out circular dependencies\" flags around the entire\n+# input list during linking.\n+quiet_cmd_link = LINK($(TOOLSET)) $@\n+cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\n+\n+# We support two kinds of shared objects (.so):\n+# 1) shared_library, which is just bundling together many dependent libraries\n+# into a link line.\n+# 2) loadable_module, which is generating a module intended for dlopen().\n+#\n+# They differ only slightly:\n+# In the former case, we want to package all dependent code into the .so.\n+# In the latter case, we want to package just the API exposed by the\n+# outermost module.\n+# This means shared_library uses --whole-archive, while loadable_module doesn't.\n+# (Note that --whole-archive is incompatible with the --start-group used in\n+# normal linking.)\n+\n+# Other shared-object link notes:\n+# - Set SONAME to the library filename so our binaries don't reference\n+# the local, absolute paths used on the link command-line.\n+quiet_cmd_solink = SOLINK($(TOOLSET)) $@\n+cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\n+\n+quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\n+cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n+\n+\n+# Define an escape_quotes function to escape single quotes.\n+# This allows us to handle quotes properly as long as we always use\n+# use single quotes and escape_quotes.\n+escape_quotes = $(subst ','\\'',$(1))\n+# This comment is here just to include a ' to unconfuse syntax highlighting.\n+# Define an escape_vars function to escape '$' variable syntax.\n+# This allows us to read/write command lines with shell variables (e.g.\n+# $LD_LIBRARY_PATH), without triggering make substitution.\n+escape_vars = $(subst $$,$$$$,$(1))\n+# Helper that expands to a shell command to echo a string exactly as it is in\n+# make. This uses printf instead of echo because printf's behaviour with respect\n+# to escape sequences is more portable than echo's across different shells\n+# (e.g., dash, bash).\n+exact_echo = printf '%s\\n' '$(call escape_quotes,$(1))'\n+\n+# Helper to compare the command we're about to run against the command\n+# we logged the last time we ran the command.  Produces an empty\n+# string (false) when the commands match.\n+# Tricky point: Make has no string-equality test function.\n+# The kernel uses the following, but it seems like it would have false\n+# positives, where one string reordered its arguments.\n+#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\n+#                       $(filter-out $(cmd_$@), $(cmd_$(1))))\n+# We instead substitute each for the empty string into the other, and\n+# say they're equal if both substitutions produce the empty string.\n+# .d files contain ? instead of spaces, take that into account.\n+command_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\n+                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n+\n+# Helper that is non-empty when a prerequisite changes.\n+# Normally make does this implicitly, but we force rules to always run\n+# so we can check their command lines.\n+#   $? -- new prerequisites\n+#   $| -- order-only dependencies\n+prereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n+\n+# Helper that executes all postbuilds, and deletes the output file when done\n+# if any of the postbuilds failed.\n+define do_postbuilds\n+  @E=0;\\\n+  for p in $(POSTBUILDS); do\\\n+    eval $$p;\\\n+    F=$$?;\\\n+    if [ $$F -ne 0 ]; then\\\n+      E=$$F;\\\n+    fi;\\\n+  done;\\\n+  if [ $$E -ne 0 ]; then\\\n+    rm -rf \"$@\";\\\n+    exit $$E;\\\n+  fi\n+endef\n+\n+# do_cmd: run a command via the above cmd_foo names, if necessary.\n+# Should always run for a given target to handle command-line changes.\n+# Second argument, if non-zero, makes it do asm/C/C++ dependency munging.\n+# Third argument, if non-zero, makes it do POSTBUILDS processing.\n+# Note: We intentionally do NOT call dirx for depfile, since it contains ? for\n+# spaces already and dirx strips the ? characters.\n+define do_cmd\n+$(if $(or $(command_changed),$(prereq_changed)),\n+  @$(call exact_echo,  $($(quiet)cmd_$(1)))\n+  @mkdir -p \"$(call dirx,$@)\" \"$(dir $(depfile))\"\n+  $(if $(findstring flock,$(word 1,$(cmd_$1))),\n+    @$(cmd_$(1))\n+    @echo \"  $(quiet_cmd_$(1)): Finished\",\n+    @$(cmd_$(1))\n+  )\n+  @$(call exact_echo,$(call escape_vars,cmd_$(call replace_spaces,$@) := $(cmd_$(1)))) > $(depfile)\n+  @$(if $(2),$(fixup_dep))\n+  $(if $(and $(3), $(POSTBUILDS)),\n+    $(call do_postbuilds)\n+  )\n+)\n+endef\n+\n+# Declare the \"all\" target first so it is the default,\n+# even though we don't have the deps yet.\n+.PHONY: all\n+all:\n+\n+# Use FORCE_DO_CMD to force a target to run.  Should be coupled with\n+# do_cmd.\n+.PHONY: FORCE_DO_CMD\n+FORCE_DO_CMD:\n+\n+TOOLSET := target\n+# Suffix rules, putting all outputs into $(obj).\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(srcdir)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj).$(TOOLSET)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cc FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cpp FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.cxx FORCE_DO_CMD\n+\t@$(call do_cmd,cxx,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.S FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+$(obj).$(TOOLSET)/%.o: $(obj)/%.s FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/libuv/run-benchmarks.target.mk)))),)\n+  include src/libuv/run-benchmarks.target.mk\n+endif\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/libuv/run-tests.target.mk)))),)\n+  include src/libuv/run-tests.target.mk\n+endif\n+ifeq ($(strip $(foreach prefix,$(NO_LOAD),\\\n+    $(findstring $(join ^,$(prefix)),\\\n+                 $(join ^,src/libuv/uv.target.mk)))),)\n+  include src/libuv/uv.target.mk\n+endif\n+\n+#quiet_cmd_regen_makefile = ACTION Regenerating $@\n+#cmd_regen_makefile = ./src/libuv/build/gyp/gyp -fmake --ignore-environment \"--toplevel-dir=.\" -Isrc/libuv/common.gypi \"--depth=.\" \"--generator-output=mk/libuv/arm/unix/android\" \"-Ddefault_configuration=Default\" \"-Dcomponent=static_library\" \"-Dlibrary=static_library\" \"-Dtarget_arch=arm\" \"-DOS=linux\" src/libuv/uv.gyp\n+#Makefile: $(srcdir)/src/libuv/uv.gyp $(srcdir)/src/libuv/common.gypi\n+#\t$(call do_cmd,regen_makefile)\n+\n+# \"all\" is a concatenation of the \"all\" targets from all the included\n+# sub-makefiles. This is just here to clarify.\n+all:\n+\n+# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n+# target in our tree. Only consider the ones with .d (dependency) info:\n+d_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\n+ifneq ($(d_files),)\n+  # Rather than include each individual .d file, concatenate them into a\n+  # single file which make is able to load faster.  We split this into\n+  # commands that take 1000 files at a time to avoid overflowing the\n+  # command line.\n+  $(shell cat $(wordlist 1,1000,$(d_files)) > $(depsdir)/all.deps)\n+\n+  ifneq ($(word 1001,$(d_files)),)\n+    $(error Found unprocessed dependency files (gyp didn't generate enough rules!))\n+  endif\n+\n+  # make looks for ways to re-generate included makefiles, but in our case, we\n+  # don't have a direct way. Explicitly telling make that it has nothing to do\n+  # for them makes it go faster.\n+  $(depsdir)/all.deps: ;\n+\n+  include $(depsdir)/all.deps\n+endif"}, {"sha": "20ff9609d8fd7cf78e041efddfba201ea2415f66", "filename": "mk/libuv/arm/unix/android/src/libuv/run-benchmarks.target.mk", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/4fb4be8f174c9d19c8ec6702070ef55987f73cb3/mk%2Flibuv%2Farm%2Funix%2Fandroid%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4fb4be8f174c9d19c8ec6702070ef55987f73cb3/mk%2Flibuv%2Farm%2Funix%2Fandroid%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Farm%2Funix%2Fandroid%2Fsrc%2Flibuv%2Frun-benchmarks.target.mk?ref=4fb4be8f174c9d19c8ec6702070ef55987f73cb3", "patch": "@@ -0,0 +1,115 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := run-benchmarks\n+DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DDEBUG' \\\n+\t'-D_DEBUG' \\\n+\t'-DEV_VERIFY=2'\n+\n+# Flags passed to all source files.\n+CFLAGS_Debug := \\\n+\t-Wall \\\n+\t-ansi \\\n+\t-fvisibility=hidden \\\n+\t-g \\\n+\t-O0\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Debug := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Debug := -fno-rtti \\\n+\t-fno-exceptions\n+\n+INCS_Debug := -I$(srcdir)/src/libuv/include\n+\n+DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DNDEBUG'\n+\n+# Flags passed to all source files.\n+CFLAGS_Release :=  \\\n+\t-Wall \\\n+\t-ansi \\\n+\t-fvisibility=hidden \\\n+\t-O3 \\\n+\t-fomit-frame-pointer \\\n+\t-fdata-sections \\\n+\t-ffunction-sections\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Release := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Release := -fno-rtti \\\n+\t-fno-exceptions\n+\n+INCS_Release := -I$(srcdir)/src/libuv/include\n+\n+OBJS := $(obj).target/$(TARGET)/src/libuv/test/benchmark-ares.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-getaddrinfo.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-ping-pongs.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pound.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-pump.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-sizes.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-spawn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-thread.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-tcp-write-batch.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/benchmark-udp-packet-storm.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/dns-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/run-benchmarks.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# Make sure our dependencies are built before any of us.\n+$(OBJS): | $(obj).target/src/libuv/libuv.a\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+\n+$(builddir)/run-benchmarks: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(builddir)/run-benchmarks: LIBS := $(LIBS)\n+$(builddir)/run-benchmarks: LD_INPUTS := $(OBJS) $(obj).target/src/libuv/libuv.a\n+$(builddir)/run-benchmarks: TOOLSET := $(TOOLSET)\n+$(builddir)/run-benchmarks: $(OBJS) $(obj).target/src/libuv/libuv.a FORCE_DO_CMD\n+\t$(call do_cmd,link)\n+\n+all_deps += $(builddir)/run-benchmarks\n+# Add target alias\n+.PHONY: run-benchmarks\n+run-benchmarks: $(builddir)/run-benchmarks\n+\n+# Add executable to \"all\" target.\n+.PHONY: all\n+all: $(builddir)/run-benchmarks\n+"}, {"sha": "c4d8c207c0884eebd4f5d651ff6f84139a1716e1", "filename": "mk/libuv/arm/unix/android/src/libuv/run-tests.target.mk", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/4fb4be8f174c9d19c8ec6702070ef55987f73cb3/mk%2Flibuv%2Farm%2Funix%2Fandroid%2Fsrc%2Flibuv%2Frun-tests.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4fb4be8f174c9d19c8ec6702070ef55987f73cb3/mk%2Flibuv%2Farm%2Funix%2Fandroid%2Fsrc%2Flibuv%2Frun-tests.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Farm%2Funix%2Fandroid%2Fsrc%2Flibuv%2Frun-tests.target.mk?ref=4fb4be8f174c9d19c8ec6702070ef55987f73cb3", "patch": "@@ -0,0 +1,158 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := run-tests\n+DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DDEBUG' \\\n+\t'-D_DEBUG' \\\n+\t'-DEV_VERIFY=2'\n+\n+# Flags passed to all source files.\n+CFLAGS_Debug := \\\n+\t-Wall \\\n+\t-ansi \\\n+\t-fvisibility=hidden \\\n+\t-g \\\n+\t-O0\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Debug := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Debug := -fno-rtti \\\n+\t-fno-exceptions\n+\n+INCS_Debug := -I$(srcdir)/src/libuv/include\n+\n+DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DNDEBUG'\n+\n+# Flags passed to all source files.\n+CFLAGS_Release :=  \\\n+\t-Wall \\\n+\t-ansi \\\n+\t-fvisibility=hidden \\\n+\t-O3 \\\n+\t-fomit-frame-pointer \\\n+\t-fdata-sections \\\n+\t-ffunction-sections\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Release := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Release := -fno-rtti \\\n+\t-fno-exceptions\n+\n+INCS_Release := -I$(srcdir)/src/libuv/include\n+\n+OBJS := $(obj).target/$(TARGET)/src/libuv/test/blackhole-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/echo-server.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/run-tests.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-get-loadavg.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-util.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-async.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-callback-stack.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-connection-fail.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-cwd-and-chdir.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-delayed-accept.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-eio-overflow.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-fail-always.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-fs.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-fs-event.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-get-currentexe.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-get-memory.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-getaddrinfo.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-gethostbyname.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-getsockname.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-hrtime.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-idle.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ipc-threads.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-loop-handles.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-multiple-listen.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-pass-always.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ping-pong.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-bind-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-pipe-connect-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-platform-output.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-process-title.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-ref.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-shutdown-eof.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-spawn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-stdio-over-pipes.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-bind6-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-close.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-flags.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-connect6-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-write-to-half-open-connection.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tcp-writealot.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-threadpool.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-mutexes.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-thread.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-timer-again.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-timer.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-tty.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-dgram-too-big.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-ipv6.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-options.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-send-and-recv.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-udp-multicast-join.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/test-counters-init.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/test/runner-unix.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# Make sure our dependencies are built before any of us.\n+$(OBJS): | $(obj).target/src/libuv/libuv.a\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+\n+$(builddir)/run-tests: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(builddir)/run-tests: LIBS := $(LIBS)\n+$(builddir)/run-tests: LD_INPUTS := $(OBJS) $(obj).target/src/libuv/libuv.a\n+$(builddir)/run-tests: TOOLSET := $(TOOLSET)\n+$(builddir)/run-tests: $(OBJS) $(obj).target/src/libuv/libuv.a FORCE_DO_CMD\n+\t$(call do_cmd,link)\n+\n+all_deps += $(builddir)/run-tests\n+# Add target alias\n+.PHONY: run-tests\n+run-tests: $(builddir)/run-tests\n+\n+# Add executable to \"all\" target.\n+.PHONY: all\n+all: $(builddir)/run-tests\n+"}, {"sha": "ba3abfe493648efce540f00c13044f51fab4a003", "filename": "mk/libuv/arm/unix/android/src/libuv/uv.Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fb4be8f174c9d19c8ec6702070ef55987f73cb3/mk%2Flibuv%2Farm%2Funix%2Fandroid%2Fsrc%2Flibuv%2Fuv.Makefile", "raw_url": "https://github.com/rust-lang/rust/raw/4fb4be8f174c9d19c8ec6702070ef55987f73cb3/mk%2Flibuv%2Farm%2Funix%2Fandroid%2Fsrc%2Flibuv%2Fuv.Makefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Farm%2Funix%2Fandroid%2Fsrc%2Flibuv%2Fuv.Makefile?ref=4fb4be8f174c9d19c8ec6702070ef55987f73cb3", "patch": "@@ -0,0 +1,6 @@\n+# This file is generated by gyp; do not edit.\n+\n+export builddir_name ?= mk/libuv/arm/unix/android/./src/libuv/out\n+.PHONY: all\n+all:\n+\t$(MAKE) -C ../.. uv run-benchmarks run-tests"}, {"sha": "2c23caef29ccb8ac7bef6821b88570a5e69f9015", "filename": "mk/libuv/arm/unix/android/src/libuv/uv.target.mk", "status": "added", "additions": 184, "deletions": 0, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/4fb4be8f174c9d19c8ec6702070ef55987f73cb3/mk%2Flibuv%2Farm%2Funix%2Fandroid%2Fsrc%2Flibuv%2Fuv.target.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4fb4be8f174c9d19c8ec6702070ef55987f73cb3/mk%2Flibuv%2Farm%2Funix%2Fandroid%2Fsrc%2Flibuv%2Fuv.target.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flibuv%2Farm%2Funix%2Fandroid%2Fsrc%2Flibuv%2Fuv.target.mk?ref=4fb4be8f174c9d19c8ec6702070ef55987f73cb3", "patch": "@@ -0,0 +1,184 @@\n+# This file is generated by gyp; do not edit.\n+\n+TOOLSET := target\n+TARGET := uv\n+DEFS_Debug := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DHAVE_CONFIG_H' \\\n+\t'-DEV_CONFIG_H=\"config_android.h\"' \\\n+\t'-DEIO_CONFIG_H=\"config_android.h\"' \\\n+\t'-DDEBUG' \\\n+\t'-D_DEBUG' \\\n+\t'-DEV_VERIFY=2'\n+\n+# Flags passed to all source files.\n+CFLAGS_Debug :=  \\\n+\t-Wall \\\n+\t-ansi \\\n+\t-fvisibility=hidden \\\n+\t-g \\\n+\t--std=gnu89 \\\n+\t-pedantic \\\n+\t-Wall \\\n+\t-Wextra \\\n+\t-Wno-unused-parameter \\\n+\t-g \\\n+\t-O0\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Debug := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Debug := -fno-rtti \\\n+\t-fno-exceptions\n+\n+INCS_Debug := -I$(srcdir)/src/libuv/include \\\n+\t-I$(srcdir)/src/libuv/include/uv-private \\\n+\t-I$(srcdir)/src/libuv/src \\\n+\t-I$(srcdir)/src/libuv/src/unix/ev \\\n+\t-I$(srcdir)/src/libuv/src/ares/config_android\n+\n+DEFS_Release := '-D_LARGEFILE_SOURCE' \\\n+\t'-D_FILE_OFFSET_BITS=64' \\\n+\t'-D_GNU_SOURCE' \\\n+\t'-DEIO_STACKSIZE=262144' \\\n+\t'-DHAVE_CONFIG_H' \\\n+\t'-DEV_CONFIG_H=\"config_android.h\"' \\\n+\t'-DEIO_CONFIG_H=\"config_android.h\"' \\\n+\t'-DNDEBUG'\n+\n+# Flags passed to all source files.\n+CFLAGS_Release :=  \\\n+\t-Wall \\\n+\t-ansi \\\n+\t-fvisibility=hidden \\\n+\t-g \\\n+\t--std=gnu89 \\\n+\t-pedantic \\\n+\t-Wall \\\n+\t-Wextra \\\n+\t-Wno-unused-parameter \\\n+\t-O3 \\\n+\t-fomit-frame-pointer \\\n+\t-fdata-sections \\\n+\t-ffunction-sections\n+\n+# Flags passed to only C files.\n+CFLAGS_C_Release := \n+\n+# Flags passed to only C++ files.\n+CFLAGS_CC_Release := -fno-rtti \\\n+\t-fno-exceptions\n+\n+INCS_Release := -I$(srcdir)/src/libuv/include \\\n+\t-I$(srcdir)/src/libuv/include/uv-private \\\n+\t-I$(srcdir)/src/libuv/src \\\n+\t-I$(srcdir)/src/libuv/src/unix/ev \\\n+\t-I$(srcdir)/src/libuv/src/ares/config_android\n+\n+OBJS := $(obj).target/$(TARGET)/src/libuv/src/uv-common.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_cancel.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__close_sockets.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_data.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_destroy.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_name.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_expand_string.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_fds.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_hostent.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_free_string.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyaddr.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_gethostbyname.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__get_hostent.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getnameinfo.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getopt.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_getsock.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_init.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_library_init.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_llist.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_mkquery.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_nowarn.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_options.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_aaaa_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_a_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_mx_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ns_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_ptr_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_srv_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_parse_txt_reply.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_process.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_query.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__read_line.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_search.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_send.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strcasecmp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strdup.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_strerror.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_timeout.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares__timeval.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_version.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/ares_writev.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/bitncmp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_net_pton.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/inet_ntop.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/ares/windows_port.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/core.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/uv-eio.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/fs.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/udp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/tcp.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/pipe.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/tty.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/stream.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/cares.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/dl.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/error.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/thread.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/process.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/eio/eio.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/ev/ev.o \\\n+\t$(obj).target/$(TARGET)/src/libuv/src/unix/linux.o\n+\n+# Add to the list of files we specially track dependencies for.\n+all_deps += $(OBJS)\n+\n+# CFLAGS et al overrides must be target-local.\n+# See \"Target-specific Variable Values\" in the GNU Make manual.\n+$(OBJS): TOOLSET := $(TOOLSET)\n+$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))\n+$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))\n+\n+# Suffix rules, putting all outputs into $(obj).\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# Try building from generated source, too.\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD\n+\t@$(call do_cmd,cc,1)\n+\n+# End of this set of suffix rules\n+### Rules for final target.\n+\n+LIBS := -lm\n+\n+$(obj).target/src/libuv/libuv.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))\n+$(obj).target/src/libuv/libuv.a: LIBS := $(LIBS)\n+$(obj).target/src/libuv/libuv.a: TOOLSET := $(TOOLSET)\n+$(obj).target/src/libuv/libuv.a: $(OBJS) FORCE_DO_CMD\n+\t$(call do_cmd,alink)\n+\n+all_deps += $(obj).target/src/libuv/libuv.a\n+# Add target alias\n+.PHONY: uv\n+uv: $(obj).target/src/libuv/libuv.a\n+\n+# Add target alias to \"all\" target.\n+.PHONY: all\n+all: uv\n+"}, {"sha": "95a1774894bc5efe023dd1428bdbe834a10dd5c9", "filename": "src/rt/rust_android_dummy.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4fb4be8f174c9d19c8ec6702070ef55987f73cb3/src%2Frt%2Frust_android_dummy.h", "raw_url": "https://github.com/rust-lang/rust/raw/4fb4be8f174c9d19c8ec6702070ef55987f73cb3/src%2Frt%2Frust_android_dummy.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_android_dummy.h?ref=4fb4be8f174c9d19c8ec6702070ef55987f73cb3", "patch": "@@ -2,4 +2,14 @@\n // Use of this source code is governed by a BSD-style license that can be\n // found in the LICENSE file.\n \n-#include \"execinfo.h\"\n+#ifndef _RUST_ANDROID_DUMMY_H\n+#define _RUST_ANDROID_DUMMY_H\n+\n+int backtrace (void **__array, int __size);\n+\n+char **backtrace_symbols (void *__const *__array, int __size);\n+\n+void backtrace_symbols_fd (void *__const *__array, int __size, int __fd);\n+\n+#endif\n+"}, {"sha": "de69272aca174214786f43bf712742951e1cfb6c", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fb4be8f174c9d19c8ec6702070ef55987f73cb3/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4fb4be8f174c9d19c8ec6702070ef55987f73cb3/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=4fb4be8f174c9d19c8ec6702070ef55987f73cb3", "patch": "@@ -73,7 +73,7 @@ last_os_error() {\n         task->fail();\n         return NULL;\n     }\n-#elif defined(_GNU_SOURCE)\n+#elif defined(_GNU_SOURCE) && !defined(__ANDROID__)\n     char cbuf[BUF_BYTES];\n     char *buf = strerror_r(errno, cbuf, sizeof(cbuf));\n     if (!buf) {"}, {"sha": "059085865d99fa09cbff9e54b2167d078e122c24", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fb4be8f174c9d19c8ec6702070ef55987f73cb3/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4fb4be8f174c9d19c8ec6702070ef55987f73cb3/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=4fb4be8f174c9d19c8ec6702070ef55987f73cb3", "patch": "@@ -9,9 +9,13 @@\n // except according to those terms.\n \n \n-#ifndef __WIN32__\n+#ifndef __WIN32_\n+#ifdef __ANDROID__\n+#include \"rust_android_dummy.h\"\n+#else\n #include <execinfo.h>\n #endif\n+#endif\n #include <iostream>\n #include <algorithm>\n "}]}