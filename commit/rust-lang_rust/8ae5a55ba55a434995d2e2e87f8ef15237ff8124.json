{"sha": "8ae5a55ba55a434995d2e2e87f8ef15237ff8124", "node_id": "C_kwDOAAsO6NoAKDhhZTVhNTViYTU1YTQzNDk5NWQyZTJlODdmOGVmMTUyMzdmZjgxMjQ", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2022-06-06T16:40:10Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2022-07-06T14:53:28Z"}, "message": "fix issue 97463 using change suggested by nbdd0121.\n\nparameterized on target details to decide value-extension policy on calls, in order to address how Apple's aarch64 ABI differs from that on Linux and Windows.\n\nUpdated to incorporate review feedback: adjust comment on new enum specifying\nparam extension policy.\n\nUpdated to incorporate review feedback: shorten enum names and those of its\nvariants to make it less unwieldy.\n\nplacate tidy.", "tree": {"sha": "064a8e84390a309a0556a6e59f5a1d0f2882a5f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/064a8e84390a309a0556a6e59f5a1d0f2882a5f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ae5a55ba55a434995d2e2e87f8ef15237ff8124", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ae5a55ba55a434995d2e2e87f8ef15237ff8124", "html_url": "https://github.com/rust-lang/rust/commit/8ae5a55ba55a434995d2e2e87f8ef15237ff8124", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ae5a55ba55a434995d2e2e87f8ef15237ff8124/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2777aba757dd92042932d79309132bd953e130d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2777aba757dd92042932d79309132bd953e130d", "html_url": "https://github.com/rust-lang/rust/commit/b2777aba757dd92042932d79309132bd953e130d"}], "stats": {"total": 52, "additions": 44, "deletions": 8}, "files": [{"sha": "b307cc3e0beb16c1c81892c6e889e4146d7e136a", "filename": "compiler/rustc_target/src/abi/call/aarch64.rs", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8ae5a55ba55a434995d2e2e87f8ef15237ff8124/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae5a55ba55a434995d2e2e87f8ef15237ff8124/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Faarch64.rs?ref=8ae5a55ba55a434995d2e2e87f8ef15237ff8124", "patch": "@@ -1,6 +1,27 @@\n use crate::abi::call::{ArgAbi, FnAbi, Reg, RegKind, Uniform};\n use crate::abi::{HasDataLayout, TyAbiInterface};\n \n+/// Given integer-types M and register width N (e.g. M=u16 and N=32 bits), the\n+/// `ParamExtension` policy specifies how a uM value should be treated when\n+/// passed via register or stack-slot of width N. See also rust-lang/rust#97463.\n+#[derive(Copy, Clone, PartialEq)]\n+pub enum ParamExtension {\n+    /// Indicates that when passing an i8/i16, either as a function argument or\n+    /// as a return value, it must be sign-extended to 32 bits, and likewise a\n+    /// u8/u16 must be zero-extended to 32-bits. (This variant is here to\n+    /// accommodate Apple's deviation from the usual AArch64 ABI as defined by\n+    /// ARM.)\n+    ///\n+    /// See also: https://developer.apple.com/documentation/xcode/writing-arm64-code-for-apple-platforms#Pass-Arguments-to-Functions-Correctly\n+    ExtendTo32Bits,\n+\n+    /// Indicates that no sign- nor zero-extension is performed: if a value of\n+    /// type with bitwidth M is passed as function argument or return value,\n+    /// then M bits are copied into the least significant M bits, and the\n+    /// remaining bits of the register (or word of memory) are untouched.\n+    NoExtension,\n+}\n+\n fn is_homogeneous_aggregate<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>) -> Option<Uniform>\n where\n     Ty: TyAbiInterface<'a, C> + Copy,\n@@ -24,13 +45,16 @@ where\n     })\n }\n \n-fn classify_ret<'a, Ty, C>(cx: &C, ret: &mut ArgAbi<'a, Ty>)\n+fn classify_ret<'a, Ty, C>(cx: &C, ret: &mut ArgAbi<'a, Ty>, param_policy: ParamExtension)\n where\n     Ty: TyAbiInterface<'a, C> + Copy,\n     C: HasDataLayout,\n {\n     if !ret.layout.is_aggregate() {\n-        ret.extend_integer_width_to(32);\n+        match param_policy {\n+            ParamExtension::ExtendTo32Bits => ret.extend_integer_width_to(32),\n+            ParamExtension::NoExtension => {}\n+        }\n         return;\n     }\n     if let Some(uniform) = is_homogeneous_aggregate(cx, ret) {\n@@ -46,13 +70,16 @@ where\n     ret.make_indirect();\n }\n \n-fn classify_arg<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>)\n+fn classify_arg<'a, Ty, C>(cx: &C, arg: &mut ArgAbi<'a, Ty>, param_policy: ParamExtension)\n where\n     Ty: TyAbiInterface<'a, C> + Copy,\n     C: HasDataLayout,\n {\n     if !arg.layout.is_aggregate() {\n-        arg.extend_integer_width_to(32);\n+        match param_policy {\n+            ParamExtension::ExtendTo32Bits => arg.extend_integer_width_to(32),\n+            ParamExtension::NoExtension => {}\n+        }\n         return;\n     }\n     if let Some(uniform) = is_homogeneous_aggregate(cx, arg) {\n@@ -68,19 +95,19 @@ where\n     arg.make_indirect();\n }\n \n-pub fn compute_abi_info<'a, Ty, C>(cx: &C, fn_abi: &mut FnAbi<'a, Ty>)\n+pub fn compute_abi_info<'a, Ty, C>(cx: &C, fn_abi: &mut FnAbi<'a, Ty>, param_policy: ParamExtension)\n where\n     Ty: TyAbiInterface<'a, C> + Copy,\n     C: HasDataLayout,\n {\n     if !fn_abi.ret.is_ignore() {\n-        classify_ret(cx, &mut fn_abi.ret);\n+        classify_ret(cx, &mut fn_abi.ret, param_policy);\n     }\n \n     for arg in &mut fn_abi.args {\n         if arg.is_ignore() {\n             continue;\n         }\n-        classify_arg(cx, arg);\n+        classify_arg(cx, arg, param_policy);\n     }\n }"}, {"sha": "c87c726cb877d07f1e3b1e7ca9c84841199d4a90", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8ae5a55ba55a434995d2e2e87f8ef15237ff8124/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae5a55ba55a434995d2e2e87f8ef15237ff8124/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=8ae5a55ba55a434995d2e2e87f8ef15237ff8124", "patch": "@@ -687,7 +687,14 @@ impl<'a, Ty> FnAbi<'a, Ty> {\n                     }\n                 }\n             },\n-            \"aarch64\" => aarch64::compute_abi_info(cx, self),\n+            \"aarch64\" => {\n+                let param_policy = if cx.target_spec().is_like_osx {\n+                    aarch64::ParamExtension::ExtendTo32Bits\n+                } else {\n+                    aarch64::ParamExtension::NoExtension\n+                };\n+                aarch64::compute_abi_info(cx, self, param_policy)\n+            }\n             \"amdgpu\" => amdgpu::compute_abi_info(cx, self),\n             \"arm\" => arm::compute_abi_info(cx, self),\n             \"avr\" => avr::compute_abi_info(self),"}, {"sha": "e78fefdcfad2af5b9a0c87a9058d2bd5709324eb", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ae5a55ba55a434995d2e2e87f8ef15237ff8124/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae5a55ba55a434995d2e2e87f8ef15237ff8124/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=8ae5a55ba55a434995d2e2e87f8ef15237ff8124", "patch": "@@ -1250,6 +1250,8 @@ pub struct TargetOptions {\n     pub abi_return_struct_as_int: bool,\n     /// Whether the target toolchain is like macOS's. Only useful for compiling against iOS/macOS,\n     /// in particular running dsymutil and some other stuff like `-dead_strip`. Defaults to false.\n+    /// Also indiates whether to use Apple-specific ABI changes, such as extending function\n+    /// parameters to 32-bits.\n     pub is_like_osx: bool,\n     /// Whether the target toolchain is like Solaris's.\n     /// Only useful for compiling against Illumos/Solaris,"}]}