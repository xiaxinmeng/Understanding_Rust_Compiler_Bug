{"sha": "ebde93861fc004aec9d1fdac528cca9aad9a7612", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViZGU5Mzg2MWZjMDA0YWVjOWQxZmRhYzUyOGNjYTlhYWQ5YTc2MTI=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-05T00:01:53Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-05T22:11:33Z"}, "message": "Allow classes with dtors to be used before declaration\n\nget_item_val could generate an internal compiler error if a class with\na dtor was used before the class itself got translated, because it was\nassuming that the dtor's node ID was always in the item_symbols table. Fixed\nit to create a new symbol if necessary, and use it subsequently.", "tree": {"sha": "cd804ad44bd4ac001e9ad342fb5af5729e5a001c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd804ad44bd4ac001e9ad342fb5af5729e5a001c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebde93861fc004aec9d1fdac528cca9aad9a7612", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebde93861fc004aec9d1fdac528cca9aad9a7612", "html_url": "https://github.com/rust-lang/rust/commit/ebde93861fc004aec9d1fdac528cca9aad9a7612", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebde93861fc004aec9d1fdac528cca9aad9a7612/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aabf84cdd81351cc63ebdc9e2427203621d19950", "url": "https://api.github.com/repos/rust-lang/rust/commits/aabf84cdd81351cc63ebdc9e2427203621d19950", "html_url": "https://github.com/rust-lang/rust/commit/aabf84cdd81351cc63ebdc9e2427203621d19950"}], "stats": {"total": 39, "additions": 22, "deletions": 17}, "files": [{"sha": "ea18405123186027a133e51d91aaf06e04e3a7d7", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ebde93861fc004aec9d1fdac528cca9aad9a7612/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebde93861fc004aec9d1fdac528cca9aad9a7612/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=ebde93861fc004aec9d1fdac528cca9aad9a7612", "patch": "@@ -2252,7 +2252,7 @@ fn monomorphic_fn(ccx: @crate_ctxt, fn_id: ast::def_id, real_substs: [ty::t],\n                                dtor\"); }\n           };\n           trans_class_dtor(ccx, *pt, dtor.node.body,\n-                           dtor.node.id, psubsts, some(hash_id), parent_id, s)\n+                           dtor.node.id, psubsts, some(hash_id), parent_id)\n       }\n       // Ugh -- but this ensures any new variants won't be forgotten\n       ast_map::node_expr(*) { ccx.tcx.sess.bug(\"Can't monomorphize an expr\") }\n@@ -4887,9 +4887,8 @@ fn trans_class_ctor(ccx: @crate_ctxt, path: path, decl: ast::fn_decl,\n fn trans_class_dtor(ccx: @crate_ctxt, path: path,\n     body: ast::blk,\n     dtor_id: ast::node_id, substs: option<param_substs>,\n-                    hash_id: option<mono_id>, parent_id: ast::def_id,\n-                    // mangled exported name for dtor\n-                    s: str) -> ValueRef {\n+                    hash_id: option<mono_id>, parent_id: ast::def_id)\n+    -> ValueRef {\n   let tcx = ccx.tcx;\n   /* Look up the parent class's def_id */\n   let mut class_ty = ty::lookup_item_type(tcx, parent_id).ty;\n@@ -4903,6 +4902,7 @@ fn trans_class_dtor(ccx: @crate_ctxt, path: path,\n   let lldty = T_fn([T_ptr(type_of(ccx, ty::mk_nil(tcx))),\n                     T_ptr(type_of(ccx, class_ty))],\n                    llvm::LLVMVoidType());\n+  let s = get_dtor_symbol(ccx, path, dtor_id);\n   /* Register the dtor as a function. It has external linkage */\n   let lldecl = decl_internal_cdecl_fn(ccx.llmod, s, lldty);\n   lib::llvm::SetLinkage(lldecl, lib::llvm::ExternalLinkage);\n@@ -4912,9 +4912,7 @@ fn trans_class_dtor(ccx: @crate_ctxt, path: path,\n   option::iter(hash_id) {|h_id|\n     ccx.monomorphized.insert(h_id, lldecl);\n   }\n-  /* Register the symbol for the dtor, and generate the code for its\n-     body */\n-  ccx.item_symbols.insert(dtor_id, s);\n+  /* Translate the dtor body */\n   trans_fn(ccx, path, ast_util::dtor_dec(),\n            body, lldecl, impl_self(class_ty), substs, dtor_id);\n   lldecl\n@@ -4997,11 +4995,8 @@ fn trans_item(ccx: @crate_ctxt, item: ast::item) {\n                            get_item_val(ccx, ctor.node.id), psubsts,\n                            ctor.node.id, local_def(item.id), ctor.span);\n           option::iter(m_dtor) {|dtor|\n-             let s = mangle_exported_name(ccx, *path +\n-                                         [path_name(ccx.names(\"dtor\"))],\n-                                 ty::node_id_to_type(ccx.tcx, dtor.node.id));\n              trans_class_dtor(ccx, *path, dtor.node.body,\n-               dtor.node.id, none, none, local_def(item.id), s);\n+               dtor.node.id, none, none, local_def(item.id));\n           };\n         }\n         // If there are ty params, the ctor will get monomorphized\n@@ -5162,8 +5157,21 @@ fn item_path(ccx: @crate_ctxt, i: @ast::item) -> path {\n     } + [path_name(i.ident)]\n }\n \n+/* If there's already a symbol for the dtor with <id>, return it;\n+   otherwise, create one and register it, returning it as well */\n+fn get_dtor_symbol(ccx: @crate_ctxt, path: path, id: ast::node_id) -> str {\n+  alt ccx.item_symbols.find(id) {\n+     some(s) { s }\n+     none    {\n+         let s = mangle_exported_name(ccx, path +\n+           [path_name(ccx.names(\"dtor\"))], ty::node_id_to_type(ccx.tcx, id));\n+         ccx.item_symbols.insert(id, s);\n+         s\n+     }\n+  }\n+}\n+\n fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n-    #debug(\"get_item_val: %d\", id);\n     let tcx = ccx.tcx;\n     alt ccx.item_vals.find(id) {\n       some(v) { v }\n@@ -5242,11 +5250,8 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n             let lldty = T_fn([T_ptr(type_of(ccx, ty::mk_nil(tcx))),\n                     T_ptr(type_of(ccx, class_ty))],\n                                    llvm::LLVMVoidType());\n-            /* The symbol for the dtor should have already been registered */\n-            let s: str = alt ccx.item_symbols.find(id) {\n-                    some(s) { s }\n-                    none { ccx.sess.bug(\"in get_item_val, dtor is unbound\"); }\n-            };\n+            let s = get_dtor_symbol(ccx, *pt, dt.node.id);\n+\n             /* Make the declaration for the dtor */\n             let llfn = decl_internal_cdecl_fn(ccx.llmod, s, lldty);\n             lib::llvm::SetLinkage(llfn, lib::llvm::ExternalLinkage);"}]}