{"sha": "bb07e6bdee234d4408c3733307d6134597b531ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMDdlNmJkZWUyMzRkNDQwOGMzNzMzMzA3ZDYxMzQ1OTdiNTMxZWM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-19T17:49:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-19T17:49:36Z"}, "message": "Merge #5821\n\n5821: **Remove Unused Parameter** refactoring\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "a51117f4fed220e42ed145b4d82d752545f28d82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a51117f4fed220e42ed145b4d82d752545f28d82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb07e6bdee234d4408c3733307d6134597b531ec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfPWYwCRBK7hj4Ov3rIwAAdHIIAHKSWC1HhgJrmIhVI+RA+Odt\n9XIB3k86m1zGBBCxa+9siFQupaIbtotiwPb9LZFkNjQbygmGYfi3WXDYjtndhKyI\nLTA2ceQvtTA9C3h7iguwD02Jn3bVXrE3ihhBOgRRp2iSF/FzOCas8otzVu4R9eVa\nd4L5elao7uPvRd76EvipkS+FkP6rcCdDcmLdeDy6GUODKh2taX2luvfaVxyA8hpC\nDw8BN60iCCk2SKrW33jJ5N4/x7cFPjkF03PBp66JgXVW86chd7UDRq58avRGi6P9\nrmh2v1mxhLUGBJxPshy1Gfq/1yYBBnAx9179w0W7S1ToJszpG7pLVvzpK1Z5P1w=\n=aaHG\n-----END PGP SIGNATURE-----\n", "payload": "tree a51117f4fed220e42ed145b4d82d752545f28d82\nparent f5b7540f388e815b3c4c2fb28b8233c724e0a838\nparent 4b5b55f6f3d1879cd974f290e2f0d92f487acc4b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1597859376 +0000\ncommitter GitHub <noreply@github.com> 1597859376 +0000\n\nMerge #5821\n\n5821: **Remove Unused Parameter** refactoring\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb07e6bdee234d4408c3733307d6134597b531ec", "html_url": "https://github.com/rust-lang/rust/commit/bb07e6bdee234d4408c3733307d6134597b531ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb07e6bdee234d4408c3733307d6134597b531ec/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5b7540f388e815b3c4c2fb28b8233c724e0a838", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5b7540f388e815b3c4c2fb28b8233c724e0a838", "html_url": "https://github.com/rust-lang/rust/commit/f5b7540f388e815b3c4c2fb28b8233c724e0a838"}, {"sha": "4b5b55f6f3d1879cd974f290e2f0d92f487acc4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b5b55f6f3d1879cd974f290e2f0d92f487acc4b", "html_url": "https://github.com/rust-lang/rust/commit/4b5b55f6f3d1879cd974f290e2f0d92f487acc4b"}], "stats": {"total": 170, "additions": 163, "deletions": 7}, "files": [{"sha": "35b884206f28c9c6fce969a626dbc2423ede7439", "filename": "crates/assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb07e6bdee234d4408c3733307d6134597b531ec/crates%2Fassists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb07e6bdee234d4408c3733307d6134597b531ec/crates%2Fassists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=bb07e6bdee234d4408c3733307d6134597b531ec", "patch": "@@ -8,6 +8,7 @@ use syntax::{\n \n use crate::{\n     assist_context::{AssistContext, Assists},\n+    utils::next_prev,\n     AssistId, AssistKind,\n };\n \n@@ -66,10 +67,6 @@ pub(crate) fn merge_imports(acc: &mut Assists, ctx: &AssistContext) -> Option<()\n     )\n }\n \n-fn next_prev() -> impl Iterator<Item = Direction> {\n-    [Direction::Next, Direction::Prev].iter().copied()\n-}\n-\n fn try_merge_trees(old: &ast::UseTree, new: &ast::UseTree) -> Option<ast::UseTree> {\n     let lhs_path = old.path()?;\n     let rhs_path = new.path()?;"}, {"sha": "4e252edf02d797c1dc895ec0bc93dbdadbf030d2", "filename": "crates/assists/src/handlers/remove_dbg.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb07e6bdee234d4408c3733307d6134597b531ec/crates%2Fassists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb07e6bdee234d4408c3733307d6134597b531ec/crates%2Fassists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fremove_dbg.rs?ref=bb07e6bdee234d4408c3733307d6134597b531ec", "patch": "@@ -82,9 +82,10 @@ fn is_valid_macrocall(macro_call: &ast::MacroCall, macro_name: &str) -> Option<b\n \n #[cfg(test)]\n mod tests {\n-    use super::*;\n     use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n \n+    use super::*;\n+\n     #[test]\n     fn test_remove_dbg() {\n         check_assist(remove_dbg, \"<|>dbg!(1 + 1)\", \"1 + 1\");"}, {"sha": "5fccca54b802b65518c19ff24f3531dd9f1bb117", "filename": "crates/assists/src/handlers/remove_unused_param.rs", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/bb07e6bdee234d4408c3733307d6134597b531ec/crates%2Fassists%2Fsrc%2Fhandlers%2Fremove_unused_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb07e6bdee234d4408c3733307d6134597b531ec/crates%2Fassists%2Fsrc%2Fhandlers%2Fremove_unused_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fremove_unused_param.rs?ref=bb07e6bdee234d4408c3733307d6134597b531ec", "patch": "@@ -0,0 +1,131 @@\n+use ide_db::{defs::Definition, search::Reference};\n+use syntax::{\n+    algo::find_node_at_range,\n+    ast::{self, ArgListOwner},\n+    AstNode, SyntaxNode, TextRange, T,\n+};\n+use test_utils::mark;\n+\n+use crate::{\n+    assist_context::AssistBuilder, utils::next_prev, AssistContext, AssistId, AssistKind, Assists,\n+};\n+\n+// Assist: remove_unused_param\n+//\n+// Removes unused function parameter.\n+//\n+// ```\n+// fn frobnicate(x: i32<|>) {}\n+//\n+// fn main() {\n+//     frobnicate(92);\n+// }\n+// ```\n+// ->\n+// ```\n+// fn frobnicate() {}\n+//\n+// fn main() {\n+//     frobnicate();\n+// }\n+// ```\n+pub(crate) fn remove_unused_param(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let param: ast::Param = ctx.find_node_at_offset()?;\n+    let ident_pat = match param.pat()? {\n+        ast::Pat::IdentPat(it) => it,\n+        _ => return None,\n+    };\n+    let func = param.syntax().ancestors().find_map(ast::Fn::cast)?;\n+    let param_position = func.param_list()?.params().position(|it| it == param)?;\n+\n+    let fn_def = {\n+        let func = ctx.sema.to_def(&func)?;\n+        Definition::ModuleDef(func.into())\n+    };\n+\n+    let param_def = {\n+        let local = ctx.sema.to_def(&ident_pat)?;\n+        Definition::Local(local)\n+    };\n+    if param_def.usages(&ctx.sema).at_least_one() {\n+        mark::hit!(keep_used);\n+        return None;\n+    }\n+    acc.add(\n+        AssistId(\"remove_unused_param\", AssistKind::Refactor),\n+        \"Remove unused parameter\",\n+        param.syntax().text_range(),\n+        |builder| {\n+            builder.delete(range_with_coma(param.syntax()));\n+            for usage in fn_def.usages(&ctx.sema).all() {\n+                process_usage(ctx, builder, usage, param_position);\n+            }\n+        },\n+    )\n+}\n+\n+fn process_usage(\n+    ctx: &AssistContext,\n+    builder: &mut AssistBuilder,\n+    usage: Reference,\n+    arg_to_remove: usize,\n+) -> Option<()> {\n+    let source_file = ctx.sema.parse(usage.file_range.file_id);\n+    let call_expr: ast::CallExpr =\n+        find_node_at_range(source_file.syntax(), usage.file_range.range)?;\n+    if call_expr.expr()?.syntax().text_range() != usage.file_range.range {\n+        return None;\n+    }\n+    let arg = call_expr.arg_list()?.args().nth(arg_to_remove)?;\n+\n+    builder.edit_file(usage.file_range.file_id);\n+    builder.delete(range_with_coma(arg.syntax()));\n+\n+    Some(())\n+}\n+\n+fn range_with_coma(node: &SyntaxNode) -> TextRange {\n+    let up_to = next_prev().find_map(|dir| {\n+        node.siblings_with_tokens(dir)\n+            .filter_map(|it| it.into_token())\n+            .find(|it| it.kind() == T![,])\n+    });\n+    let up_to = up_to.map_or(node.text_range(), |it| it.text_range());\n+    node.text_range().cover(up_to)\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn remove_unused() {\n+        check_assist(\n+            remove_unused_param,\n+            r#\"\n+fn a() { foo(9, 2) }\n+fn foo(x: i32, <|>y: i32) { x; }\n+fn b() { foo(9, 2,) }\n+\"#,\n+            r#\"\n+fn a() { foo(9) }\n+fn foo(x: i32) { x; }\n+fn b() { foo(9, ) }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn keep_used() {\n+        mark::check!(keep_used);\n+        check_assist_not_applicable(\n+            remove_unused_param,\n+            r#\"\n+fn foo(x: i32, <|>y: i32) { y; }\n+fn main() { foo(9, 2) }\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "2e0d191a609deb5c063091b28464fbc868ef3d49", "filename": "crates/assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb07e6bdee234d4408c3733307d6134597b531ec/crates%2Fassists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb07e6bdee234d4408c3733307d6134597b531ec/crates%2Fassists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Flib.rs?ref=bb07e6bdee234d4408c3733307d6134597b531ec", "patch": "@@ -152,6 +152,7 @@ mod handlers {\n     mod raw_string;\n     mod remove_dbg;\n     mod remove_mut;\n+    mod remove_unused_param;\n     mod reorder_fields;\n     mod replace_if_let_with_match;\n     mod replace_let_with_if_let;\n@@ -198,6 +199,7 @@ mod handlers {\n             raw_string::remove_hash,\n             remove_dbg::remove_dbg,\n             remove_mut::remove_mut,\n+            remove_unused_param::remove_unused_param,\n             reorder_fields::reorder_fields,\n             replace_if_let_with_match::replace_if_let_with_match,\n             replace_let_with_if_let::replace_let_with_if_let,"}, {"sha": "04c8fd1f94e38c4e6ec4d3f5a42794f172c9da62", "filename": "crates/assists/src/tests/generated.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bb07e6bdee234d4408c3733307d6134597b531ec/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb07e6bdee234d4408c3733307d6134597b531ec/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs?ref=bb07e6bdee234d4408c3733307d6134597b531ec", "patch": "@@ -750,6 +750,27 @@ impl Walrus {\n     )\n }\n \n+#[test]\n+fn doctest_remove_unused_param() {\n+    check_doc_test(\n+        \"remove_unused_param\",\n+        r#####\"\n+fn frobnicate(x: i32<|>) {}\n+\n+fn main() {\n+    frobnicate(92);\n+}\n+\"#####,\n+        r#####\"\n+fn frobnicate() {}\n+\n+fn main() {\n+    frobnicate();\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_reorder_fields() {\n     check_doc_test("}, {"sha": "d071d6502fa88a16a7681fc12e21838e597d6bb3", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb07e6bdee234d4408c3733307d6134597b531ec/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb07e6bdee234d4408c3733307d6134597b531ec/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=bb07e6bdee234d4408c3733307d6134597b531ec", "patch": "@@ -9,7 +9,7 @@ use itertools::Itertools;\n use rustc_hash::FxHashSet;\n use syntax::{\n     ast::{self, make, NameOwner},\n-    AstNode,\n+    AstNode, Direction,\n     SyntaxKind::*,\n     SyntaxNode, TextSize, T,\n };\n@@ -311,3 +311,7 @@ pub use prelude::*;\n         Some(def)\n     }\n }\n+\n+pub(crate) fn next_prev() -> impl Iterator<Item = Direction> {\n+    [Direction::Next, Direction::Prev].iter().copied()\n+}"}, {"sha": "fa0830b236041b01aed53685ae75ea1fdfb747d2", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb07e6bdee234d4408c3733307d6134597b531ec/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb07e6bdee234d4408c3733307d6134597b531ec/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=bb07e6bdee234d4408c3733307d6134597b531ec", "patch": "@@ -203,7 +203,7 @@ impl<'a> FindUsages<'a> {\n     }\n \n     pub fn at_least_one(self) -> bool {\n-        self.all().is_empty()\n+        !self.all().is_empty()\n     }\n \n     pub fn all(self) -> Vec<Reference> {"}]}