{"sha": "bc9dc0ab3e26171da27fccf5775538e55c2a8e06", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjOWRjMGFiM2UyNjE3MWRhMjdmY2NmNTc3NTUzOGU1NWMyYThlMDY=", "commit": {"author": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2017-06-08T02:12:18Z"}, "committer": {"name": "Clar Charr", "email": "clar@charr.xyz", "date": "2017-06-09T23:07:27Z"}, "message": "Move Try to module.", "tree": {"sha": "3d399e6a47e7900a5b1f1a564a2128a9be55d5a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d399e6a47e7900a5b1f1a564a2128a9be55d5a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc9dc0ab3e26171da27fccf5775538e55c2a8e06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc9dc0ab3e26171da27fccf5775538e55c2a8e06", "html_url": "https://github.com/rust-lang/rust/commit/bc9dc0ab3e26171da27fccf5775538e55c2a8e06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc9dc0ab3e26171da27fccf5775538e55c2a8e06/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f774cddcf2c1935f101bcfb931495e411e58e52b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f774cddcf2c1935f101bcfb931495e411e58e52b", "html_url": "https://github.com/rust-lang/rust/commit/f774cddcf2c1935f101bcfb931495e411e58e52b"}], "stats": {"total": 220, "additions": 118, "deletions": 102}, "files": [{"sha": "ae6fcf52cd767fee58a99e6357c6d2087e848b29", "filename": "src/libcore/ops/mod.rs", "status": "modified", "additions": 7, "deletions": 102, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/bc9dc0ab3e26171da27fccf5775538e55c2a8e06/src%2Flibcore%2Fops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9dc0ab3e26171da27fccf5775538e55c2a8e06/src%2Flibcore%2Fops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fmod.rs?ref=bc9dc0ab3e26171da27fccf5775538e55c2a8e06", "patch": "@@ -152,6 +152,7 @@ mod bit;\n mod function;\n mod place;\n mod range;\n+mod try;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::arith::{Add, Sub, Mul, Div, Rem, Neg};\n@@ -172,6 +173,12 @@ pub use self::range::{Range, RangeFrom, RangeFull, RangeTo};\n #[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n pub use self::range::{RangeInclusive, RangeToInclusive};\n \n+#[unstable(feature = \"question_mark_carrier\", issue = \"31436\")]\n+#[cfg(stage0)]\n+pub use self::try::Carrier;\n+#[unstable(feature = \"try_trait\", issue = \"42327\")]\n+pub use self::try::Try;\n+\n #[unstable(feature = \"placement_new_protocol\", issue = \"27779\")]\n pub use self::place::{Place, Placer, InPlace, Boxed, BoxPlace};\n \n@@ -593,105 +600,3 @@ impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *mut T {}\n // *const T -> *const U\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized+Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *const T {}\n-\n-/// This trait has been superseded by the `Try` trait, but must remain\n-/// here as `?` is still lowered to it in stage0 .\n-#[cfg(stage0)]\n-#[unstable(feature = \"question_mark_carrier\", issue = \"31436\")]\n-pub trait Carrier {\n-    /// The type of the value when computation succeeds.\n-    type Success;\n-    /// The type of the value when computation errors out.\n-    type Error;\n-\n-    /// Create a `Carrier` from a success value.\n-    fn from_success(_: Self::Success) -> Self;\n-\n-    /// Create a `Carrier` from an error value.\n-    fn from_error(_: Self::Error) -> Self;\n-\n-    /// Translate this `Carrier` to another implementation of `Carrier` with the\n-    /// same associated types.\n-    fn translate<T>(self) -> T where T: Carrier<Success=Self::Success, Error=Self::Error>;\n-}\n-\n-#[cfg(stage0)]\n-#[unstable(feature = \"question_mark_carrier\", issue = \"31436\")]\n-impl<U, V> Carrier for Result<U, V> {\n-    type Success = U;\n-    type Error = V;\n-\n-    fn from_success(u: U) -> Result<U, V> {\n-        Ok(u)\n-    }\n-\n-    fn from_error(e: V) -> Result<U, V> {\n-        Err(e)\n-    }\n-\n-    fn translate<T>(self) -> T\n-        where T: Carrier<Success=U, Error=V>\n-    {\n-        match self {\n-            Ok(u) => T::from_success(u),\n-            Err(e) => T::from_error(e),\n-        }\n-    }\n-}\n-\n-struct _DummyErrorType;\n-\n-impl Try for _DummyErrorType {\n-    type Ok = ();\n-    type Error = ();\n-\n-    fn into_result(self) -> Result<Self::Ok, Self::Error> {\n-        Ok(())\n-    }\n-\n-    fn from_ok(_: ()) -> _DummyErrorType {\n-        _DummyErrorType\n-    }\n-\n-    fn from_error(_: ()) -> _DummyErrorType {\n-        _DummyErrorType\n-    }\n-}\n-\n-/// A trait for customizing the behaviour of the `?` operator.\n-///\n-/// A type implementing `Try` is one that has a canonical way to view it\n-/// in terms of a success/failure dichotomy.  This trait allows both\n-/// extracting those success or failure values from an existing instance and\n-/// creating a new instance from a success or failure value.\n-#[unstable(feature = \"try_trait\", issue = \"42327\")]\n-pub trait Try {\n-    /// The type of this value when viewed as successful.\n-    #[unstable(feature = \"try_trait\", issue = \"42327\")]\n-    type Ok;\n-    /// The type of this value when viewed as failed.\n-    #[unstable(feature = \"try_trait\", issue = \"42327\")]\n-    type Error;\n-\n-    /// Applies the \"?\" operator. A return of `Ok(t)` means that the\n-    /// execution should continue normally, and the result of `?` is the\n-    /// value `t`. A return of `Err(e)` means that execution should branch\n-    /// to the innermost enclosing `catch`, or return from the function.\n-    ///\n-    /// If an `Err(e)` result is returned, the value `e` will be \"wrapped\"\n-    /// in the return type of the enclosing scope (which must itself implement\n-    /// `Try`). Specifically, the value `X::from_error(From::from(e))`\n-    /// is returned, where `X` is the return type of the enclosing function.\n-    #[unstable(feature = \"try_trait\", issue = \"42327\")]\n-    fn into_result(self) -> Result<Self::Ok, Self::Error>;\n-\n-    /// Wrap an error value to construct the composite result. For example,\n-    /// `Result::Err(x)` and `Result::from_error(x)` are equivalent.\n-    #[unstable(feature = \"try_trait\", issue = \"42327\")]\n-    fn from_error(v: Self::Error) -> Self;\n-\n-    /// Wrap an OK value to construct the composite result. For example,\n-    /// `Result::Ok(x)` and `Result::from_ok(x)` are equivalent.\n-    #[unstable(feature = \"try_trait\", issue = \"42327\")]\n-    fn from_ok(v: Self::Ok) -> Self;\n-}"}, {"sha": "cf75cf79fae6989f9667a10e1eb5eb5c33abded4", "filename": "src/libcore/ops/try.rs", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/bc9dc0ab3e26171da27fccf5775538e55c2a8e06/src%2Flibcore%2Fops%2Ftry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc9dc0ab3e26171da27fccf5775538e55c2a8e06/src%2Flibcore%2Fops%2Ftry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ftry.rs?ref=bc9dc0ab3e26171da27fccf5775538e55c2a8e06", "patch": "@@ -0,0 +1,111 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/// This trait has been superseded by the `Try` trait, but must remain\n+/// here as `?` is still lowered to it in stage0 .\n+#[cfg(stage0)]\n+#[unstable(feature = \"question_mark_carrier\", issue = \"31436\")]\n+pub trait Carrier {\n+    /// The type of the value when computation succeeds.\n+    type Success;\n+    /// The type of the value when computation errors out.\n+    type Error;\n+\n+    /// Create a `Carrier` from a success value.\n+    fn from_success(_: Self::Success) -> Self;\n+\n+    /// Create a `Carrier` from an error value.\n+    fn from_error(_: Self::Error) -> Self;\n+\n+    /// Translate this `Carrier` to another implementation of `Carrier` with the\n+    /// same associated types.\n+    fn translate<T>(self) -> T where T: Carrier<Success=Self::Success, Error=Self::Error>;\n+}\n+\n+#[cfg(stage0)]\n+#[unstable(feature = \"question_mark_carrier\", issue = \"31436\")]\n+impl<U, V> Carrier for Result<U, V> {\n+    type Success = U;\n+    type Error = V;\n+\n+    fn from_success(u: U) -> Result<U, V> {\n+        Ok(u)\n+    }\n+\n+    fn from_error(e: V) -> Result<U, V> {\n+        Err(e)\n+    }\n+\n+    fn translate<T>(self) -> T\n+        where T: Carrier<Success=U, Error=V>\n+    {\n+        match self {\n+            Ok(u) => T::from_success(u),\n+            Err(e) => T::from_error(e),\n+        }\n+    }\n+}\n+\n+struct _DummyErrorType;\n+\n+impl Try for _DummyErrorType {\n+    type Ok = ();\n+    type Error = ();\n+\n+    fn into_result(self) -> Result<Self::Ok, Self::Error> {\n+        Ok(())\n+    }\n+\n+    fn from_ok(_: ()) -> _DummyErrorType {\n+        _DummyErrorType\n+    }\n+\n+    fn from_error(_: ()) -> _DummyErrorType {\n+        _DummyErrorType\n+    }\n+}\n+\n+/// A trait for customizing the behaviour of the `?` operator.\n+///\n+/// A type implementing `Try` is one that has a canonical way to view it\n+/// in terms of a success/failure dichotomy.  This trait allows both\n+/// extracting those success or failure values from an existing instance and\n+/// creating a new instance from a success or failure value.\n+#[unstable(feature = \"try_trait\", issue = \"42327\")]\n+pub trait Try {\n+    /// The type of this value when viewed as successful.\n+    #[unstable(feature = \"try_trait\", issue = \"42327\")]\n+    type Ok;\n+    /// The type of this value when viewed as failed.\n+    #[unstable(feature = \"try_trait\", issue = \"42327\")]\n+    type Error;\n+\n+    /// Applies the \"?\" operator. A return of `Ok(t)` means that the\n+    /// execution should continue normally, and the result of `?` is the\n+    /// value `t`. A return of `Err(e)` means that execution should branch\n+    /// to the innermost enclosing `catch`, or return from the function.\n+    ///\n+    /// If an `Err(e)` result is returned, the value `e` will be \"wrapped\"\n+    /// in the return type of the enclosing scope (which must itself implement\n+    /// `Try`). Specifically, the value `X::from_error(From::from(e))`\n+    /// is returned, where `X` is the return type of the enclosing function.\n+    #[unstable(feature = \"try_trait\", issue = \"42327\")]\n+    fn into_result(self) -> Result<Self::Ok, Self::Error>;\n+\n+    /// Wrap an error value to construct the composite result. For example,\n+    /// `Result::Err(x)` and `Result::from_error(x)` are equivalent.\n+    #[unstable(feature = \"try_trait\", issue = \"42327\")]\n+    fn from_error(v: Self::Error) -> Self;\n+\n+    /// Wrap an OK value to construct the composite result. For example,\n+    /// `Result::Ok(x)` and `Result::from_ok(x)` are equivalent.\n+    #[unstable(feature = \"try_trait\", issue = \"42327\")]\n+    fn from_ok(v: Self::Ok) -> Self;\n+}"}]}