{"sha": "e160d2b3e0fe110562062bc9aff9e1ef977db2d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxNjBkMmIzZTBmZTExMDU2MjA2MmJjOWFmZjllMWVmOTc3ZGIyZDk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-09-05T14:28:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-05T14:28:17Z"}, "message": "Rollup merge of #75741 - workingjubilee:refactor-byteorder, r=matthewjasper\n\nRefactor byteorder to std in rustc_middle\n\nUse std::io::{Read, Write} and {to, from}_{le, be}_bytes methods in\norder to remove byteorder from librustc_middle's dependency graph.", "tree": {"sha": "6ce455e32c8b1355f0004685858aee2504366e09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ce455e32c8b1355f0004685858aee2504366e09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e160d2b3e0fe110562062bc9aff9e1ef977db2d9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfU6CCCRBK7hj4Ov3rIwAAdHIIAJrSiaBKqIcMx5+qQGVGqhTJ\nLyWQKAPuwSQJHb+i3lHYk19i6yZhaEtGD7dx1xCkvjXjpHGHsyYXMVP5jtYsf1bQ\nqcGnY3PSw+CjjCa+V+OY1cT+spN+0pmhwTbkO+hjQ/hiQblpqVnufK/vrMS6TcEI\n5O4JF/hNxsvZv57f7ZLp2C38bXDer+RK0Ok70ktzoykGYtUAQpvYSoMIQkJCZXrc\nci+KIQfds9mxL0I+I4drwYdS3ukb5gyKoSVA66pePX6D6czZwERfzerwI/6EWsKp\n6oYjOjUdqXX0cwl1uo2keaMXnlRPobT/LdA2UAm1Zj+A9sjpBVlTUEqniFUvIpU=\n=uaSy\n-----END PGP SIGNATURE-----\n", "payload": "tree 6ce455e32c8b1355f0004685858aee2504366e09\nparent cb33a15c3ef2567168cbe33232fd3702d3705e21\nparent 2df552b406d8794dc0617672b34e1542498fd0ce\nauthor Dylan DPC <dylan.dpc@gmail.com> 1599316097 +0200\ncommitter GitHub <noreply@github.com> 1599316097 +0200\n\nRollup merge of #75741 - workingjubilee:refactor-byteorder, r=matthewjasper\n\nRefactor byteorder to std in rustc_middle\n\nUse std::io::{Read, Write} and {to, from}_{le, be}_bytes methods in\norder to remove byteorder from librustc_middle's dependency graph.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e160d2b3e0fe110562062bc9aff9e1ef977db2d9", "html_url": "https://github.com/rust-lang/rust/commit/e160d2b3e0fe110562062bc9aff9e1ef977db2d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e160d2b3e0fe110562062bc9aff9e1ef977db2d9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb33a15c3ef2567168cbe33232fd3702d3705e21", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb33a15c3ef2567168cbe33232fd3702d3705e21", "html_url": "https://github.com/rust-lang/rust/commit/cb33a15c3ef2567168cbe33232fd3702d3705e21"}, {"sha": "2df552b406d8794dc0617672b34e1542498fd0ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/2df552b406d8794dc0617672b34e1542498fd0ce", "html_url": "https://github.com/rust-lang/rust/commit/2df552b406d8794dc0617672b34e1542498fd0ce"}], "stats": {"total": 46, "additions": 27, "deletions": 19}, "files": [{"sha": "b84f6ef51ac201ef8c5ad342c05cd7bb0ffc72b5", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e160d2b3e0fe110562062bc9aff9e1ef977db2d9/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e160d2b3e0fe110562062bc9aff9e1ef977db2d9/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e160d2b3e0fe110562062bc9aff9e1ef977db2d9", "patch": "@@ -3722,7 +3722,6 @@ name = \"rustc_middle\"\n version = \"0.0.0\"\n dependencies = [\n  \"bitflags\",\n- \"byteorder\",\n  \"chalk-ir\",\n  \"measureme\",\n  \"polonius-engine\","}, {"sha": "a5a860a38b3e8f45d4d24f868ba37be82c911326", "filename": "compiler/rustc_middle/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e160d2b3e0fe110562062bc9aff9e1ef977db2d9/compiler%2Frustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e160d2b3e0fe110562062bc9aff9e1ef977db2d9/compiler%2Frustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2FCargo.toml?ref=e160d2b3e0fe110562062bc9aff9e1ef977db2d9", "patch": "@@ -26,7 +26,6 @@ rustc_index = { path = \"../rustc_index\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }\n-byteorder = { version = \"1.3\" }\n chalk-ir = \"0.21.0\"\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n measureme = \"0.7.1\""}, {"sha": "ee1ea816e019253bf7b945cf647135bef533cfbb", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e160d2b3e0fe110562062bc9aff9e1ef977db2d9/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e160d2b3e0fe110562062bc9aff9e1ef977db2d9/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=e160d2b3e0fe110562062bc9aff9e1ef977db2d9", "patch": "@@ -345,10 +345,8 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n \n     /// Reads a *non-ZST* scalar.\n     ///\n-    /// ZSTs can't be read for two reasons:\n-    /// * byte-order cannot work with zero-element buffers;\n-    /// * in order to obtain a `Pointer`, we need to check for ZSTness anyway due to integer\n-    ///   pointers being valid for ZSTs.\n+    /// ZSTs can't be read because in order to obtain a `Pointer`, we need to check\n+    /// for ZSTness anyway due to integer pointers being valid for ZSTs.\n     ///\n     /// It is the caller's responsibility to check bounds and alignment beforehand.\n     /// Most likely, you want to call `InterpCx::read_scalar` instead of this method.\n@@ -397,10 +395,8 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n \n     /// Writes a *non-ZST* scalar.\n     ///\n-    /// ZSTs can't be read for two reasons:\n-    /// * byte-order cannot work with zero-element buffers;\n-    /// * in order to obtain a `Pointer`, we need to check for ZSTness anyway due to integer\n-    ///   pointers being valid for ZSTs.\n+    /// ZSTs can't be read because in order to obtain a `Pointer`, we need to check\n+    /// for ZSTness anyway due to integer pointers being valid for ZSTs.\n     ///\n     /// It is the caller's responsibility to check bounds and alignment beforehand.\n     /// Most likely, you want to call `InterpCx::write_scalar` instead of this method."}, {"sha": "cbc362d934ff8d5c22ff7673fb211e0b4ff5417e", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e160d2b3e0fe110562062bc9aff9e1ef977db2d9/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e160d2b3e0fe110562062bc9aff9e1ef977db2d9/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=e160d2b3e0fe110562062bc9aff9e1ef977db2d9", "patch": "@@ -98,10 +98,10 @@ mod value;\n use std::convert::TryFrom;\n use std::fmt;\n use std::io;\n+use std::io::{Read, Write};\n use std::num::NonZeroU32;\n use std::sync::atomic::{AtomicU32, Ordering};\n \n-use byteorder::{BigEndian, LittleEndian, ReadBytesExt, WriteBytesExt};\n use rustc_ast::LitKind;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{HashMapExt, Lock};\n@@ -561,19 +561,33 @@ pub fn write_target_uint(\n     mut target: &mut [u8],\n     data: u128,\n ) -> Result<(), io::Error> {\n-    let len = target.len();\n+    // This u128 holds an \"any-size uint\" (since smaller uints can fits in it)\n+    // So we do not write all bytes of the u128, just the \"payload\".\n     match endianness {\n-        Endian::Little => target.write_uint128::<LittleEndian>(data, len),\n-        Endian::Big => target.write_uint128::<BigEndian>(data, len),\n-    }\n+        Endian::Little => target.write(&data.to_le_bytes())?,\n+        Endian::Big => target.write(&data.to_be_bytes()[16 - target.len()..])?,\n+    };\n+    debug_assert!(target.len() == 0); // We should have filled the target buffer.\n+    Ok(())\n }\n \n #[inline]\n pub fn read_target_uint(endianness: Endian, mut source: &[u8]) -> Result<u128, io::Error> {\n-    match endianness {\n-        Endian::Little => source.read_uint128::<LittleEndian>(source.len()),\n-        Endian::Big => source.read_uint128::<BigEndian>(source.len()),\n-    }\n+    // This u128 holds an \"any-size uint\" (since smaller uints can fits in it)\n+    let mut buf = [0u8; std::mem::size_of::<u128>()];\n+    // So we do not read exactly 16 bytes into the u128, just the \"payload\".\n+    let uint = match endianness {\n+        Endian::Little => {\n+            source.read(&mut buf)?;\n+            Ok(u128::from_le_bytes(buf))\n+        }\n+        Endian::Big => {\n+            source.read(&mut buf[16 - source.len()..])?;\n+            Ok(u128::from_be_bytes(buf))\n+        }\n+    };\n+    debug_assert!(source.len() == 0); // We should have consumed the source buffer.\n+    uint\n }\n \n ////////////////////////////////////////////////////////////////////////////////"}]}