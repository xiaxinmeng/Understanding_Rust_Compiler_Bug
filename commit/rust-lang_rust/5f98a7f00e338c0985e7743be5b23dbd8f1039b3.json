{"sha": "5f98a7f00e338c0985e7743be5b23dbd8f1039b3", "node_id": "C_kwDOAAsO6NoAKDVmOThhN2YwMGUzMzhjMDk4NWU3NzQzYmU1YjIzZGJkOGYxMDM5YjM", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-02-04T00:36:27Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-02-04T00:58:26Z"}, "message": "rustdoc: use the same URL escape rules for fragments as for examples", "tree": {"sha": "93bf5c211f244b20af8f2336127b63fcbe9e704b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93bf5c211f244b20af8f2336127b63fcbe9e704b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f98a7f00e338c0985e7743be5b23dbd8f1039b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f98a7f00e338c0985e7743be5b23dbd8f1039b3", "html_url": "https://github.com/rust-lang/rust/commit/5f98a7f00e338c0985e7743be5b23dbd8f1039b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f98a7f00e338c0985e7743be5b23dbd8f1039b3/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "658fad6c5506f41c35b64fb1a22ceb0992697ff3", "url": "https://api.github.com/repos/rust-lang/rust/commits/658fad6c5506f41c35b64fb1a22ceb0992697ff3", "html_url": "https://github.com/rust-lang/rust/commit/658fad6c5506f41c35b64fb1a22ceb0992697ff3"}], "stats": {"total": 146, "additions": 68, "deletions": 78}, "files": [{"sha": "03382aeeb737d03a770835bab76e2405d89422be", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 41, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5f98a7f00e338c0985e7743be5b23dbd8f1039b3/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f98a7f00e338c0985e7743be5b23dbd8f1039b3/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=5f98a7f00e338c0985e7743be5b23dbd8f1039b3", "patch": "@@ -46,6 +46,7 @@ use crate::html::escape::Escape;\n use crate::html::format::Buffer;\n use crate::html::highlight;\n use crate::html::length_limit::HtmlWithLimit;\n+use crate::html::render::small_url_encode;\n use crate::html::toc::TocBuilder;\n \n use pulldown_cmark::{\n@@ -294,47 +295,7 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'_, 'a, I> {\n                 doctest::make_test(&test, krate, false, &Default::default(), edition, None);\n             let channel = if test.contains(\"#![feature(\") { \"&amp;version=nightly\" } else { \"\" };\n \n-            // These characters don't need to be escaped in a URI.\n-            // See https://url.spec.whatwg.org/#query-percent-encode-set\n-            // and https://url.spec.whatwg.org/#urlencoded-parsing\n-            // and https://url.spec.whatwg.org/#url-code-points\n-            fn dont_escape(c: u8) -> bool {\n-                (b'a' <= c && c <= b'z')\n-                    || (b'A' <= c && c <= b'Z')\n-                    || (b'0' <= c && c <= b'9')\n-                    || c == b'-'\n-                    || c == b'_'\n-                    || c == b'.'\n-                    || c == b','\n-                    || c == b'~'\n-                    || c == b'!'\n-                    || c == b'\\''\n-                    || c == b'('\n-                    || c == b')'\n-                    || c == b'*'\n-                    || c == b'/'\n-                    || c == b';'\n-                    || c == b':'\n-                    || c == b'?'\n-                    // As described in urlencoded-parsing, the\n-                    // first `=` is the one that separates key from\n-                    // value. Following `=`s are part of the value.\n-                    || c == b'='\n-            }\n-            let mut test_escaped = String::new();\n-            for b in test.bytes() {\n-                if dont_escape(b) {\n-                    test_escaped.push(char::from(b));\n-                } else if b == b' ' {\n-                    // URL queries are decoded with + replaced with SP\n-                    test_escaped.push('+');\n-                } else if b == b'%' {\n-                    test_escaped.push('%');\n-                    test_escaped.push('%');\n-                } else {\n-                    write!(test_escaped, \"%{:02X}\", b).unwrap();\n-                }\n-            }\n+            let test_escaped = small_url_encode(test);\n             Some(format!(\n                 r#\"<a class=\"test-arrow\" target=\"_blank\" href=\"{}?code={}{}&amp;edition={}\">Run</a>\"#,\n                 url, test_escaped, channel, edition,"}, {"sha": "fa22c4612051751c4a4d66d10724d6efa875dbd0", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 52, "deletions": 23, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/5f98a7f00e338c0985e7743be5b23dbd8f1039b3/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f98a7f00e338c0985e7743be5b23dbd8f1039b3/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=5f98a7f00e338c0985e7743be5b23dbd8f1039b3", "patch": "@@ -38,7 +38,7 @@ pub(crate) use self::span_map::{collect_spans_and_sources, LinkFromSrc};\n \n use std::collections::VecDeque;\n use std::default::Default;\n-use std::fmt;\n+use std::fmt::{self, Write};\n use std::fs;\n use std::iter::Peekable;\n use std::path::PathBuf;\n@@ -2020,31 +2020,60 @@ fn get_associated_constants(\n         .collect::<Vec<_>>()\n }\n \n-// The point is to url encode any potential character from a type with genericity.\n-fn small_url_encode(s: String) -> String {\n+pub(crate) fn small_url_encode(s: String) -> String {\n+    // These characters don't need to be escaped in a URI.\n+    // See https://url.spec.whatwg.org/#query-percent-encode-set\n+    // and https://url.spec.whatwg.org/#urlencoded-parsing\n+    // and https://url.spec.whatwg.org/#url-code-points\n+    fn dont_escape(c: u8) -> bool {\n+        (b'a' <= c && c <= b'z')\n+            || (b'A' <= c && c <= b'Z')\n+            || (b'0' <= c && c <= b'9')\n+            || c == b'-'\n+            || c == b'_'\n+            || c == b'.'\n+            || c == b','\n+            || c == b'~'\n+            || c == b'!'\n+            || c == b'\\''\n+            || c == b'('\n+            || c == b')'\n+            || c == b'*'\n+            || c == b'/'\n+            || c == b';'\n+            || c == b':'\n+            || c == b'?'\n+            // As described in urlencoded-parsing, the\n+            // first `=` is the one that separates key from\n+            // value. Following `=`s are part of the value.\n+            || c == b'='\n+    }\n     let mut st = String::new();\n     let mut last_match = 0;\n-    for (idx, c) in s.char_indices() {\n-        let escaped = match c {\n-            '<' => \"%3C\",\n-            '>' => \"%3E\",\n-            ' ' => \"%20\",\n-            '?' => \"%3F\",\n-            '\\'' => \"%27\",\n-            '&' => \"%26\",\n-            ',' => \"%2C\",\n-            ':' => \"%3A\",\n-            ';' => \"%3B\",\n-            '[' => \"%5B\",\n-            ']' => \"%5D\",\n-            '\"' => \"%22\",\n-            _ => continue,\n-        };\n+    for (idx, b) in s.bytes().enumerate() {\n+        if dont_escape(b) {\n+            continue;\n+        }\n \n-        st += &s[last_match..idx];\n-        st += escaped;\n-        // NOTE: we only expect single byte characters here - which is fine as long as we\n-        // only match single byte characters\n+        if last_match != idx {\n+            // Invariant: `idx` must be the first byte in a character at this point.\n+            st += &s[last_match..idx];\n+        }\n+        if b == b' ' {\n+            // URL queries are decoded with + replaced with SP.\n+            // While the same is not true for hashes, rustdoc only needs to be\n+            // consistent with itself when encoding them.\n+            st += \"+\";\n+        } else if b == b'%' {\n+            st += \"%%\";\n+        } else {\n+            write!(st, \"%{:02X}\", b).unwrap();\n+        }\n+        // Invariant: if the current byte is not at the start of a multi-byte character,\n+        // we need to get down here so that when the next turn of the loop comes around,\n+        // last_match winds up equalling idx.\n+        //\n+        // In other words, dont_escape must always return `false` in multi-byte character.\n         last_match = idx + 1;\n     }\n "}, {"sha": "7e27ef8d8e5b8bd427f15413eee215bd4bc1aa93", "filename": "tests/rustdoc/const-generics/const-generics-docs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f98a7f00e338c0985e7743be5b23dbd8f1039b3/tests%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f98a7f00e338c0985e7743be5b23dbd8f1039b3/tests%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs?ref=5f98a7f00e338c0985e7743be5b23dbd8f1039b3", "patch": "@@ -21,8 +21,8 @@ pub use extern_crate::WTrait;\n //      'pub trait Trait<const N: usize>'\n // @has - '//*[@id=\"impl-Trait%3C1%3E-for-u8\"]//h3[@class=\"code-header\"]' 'impl Trait<1> for u8'\n // @has - '//*[@id=\"impl-Trait%3C2%3E-for-u8\"]//h3[@class=\"code-header\"]' 'impl Trait<2> for u8'\n-// @has - '//*[@id=\"impl-Trait%3C{1%20+%202}%3E-for-u8\"]//h3[@class=\"code-header\"]' 'impl Trait<{1 + 2}> for u8'\n-// @has - '//*[@id=\"impl-Trait%3CN%3E-for-%5Bu8%3B%20N%5D\"]//h3[@class=\"code-header\"]' \\\n+// @has - '//*[@id=\"impl-Trait%3C%7B1+%2B+2%7D%3E-for-u8\"]//h3[@class=\"code-header\"]' 'impl Trait<{1 + 2}> for u8'\n+// @has - '//*[@id=\"impl-Trait%3CN%3E-for-%5Bu8;+N%5D\"]//h3[@class=\"code-header\"]' \\\n //      'impl<const N: usize> Trait<N> for [u8; N]'\n pub trait Trait<const N: usize> {}\n impl Trait<1> for u8 {}\n@@ -47,7 +47,7 @@ impl<const M: usize> Foo<M> where u8: Trait<M> {\n     }\n }\n \n-// @has foo/struct.Bar.html '//*[@id=\"impl-Bar%3Cu8%2C%20M%3E\"]/h3[@class=\"code-header\"]' 'impl<const M: usize> Bar<u8, M>'\n+// @has foo/struct.Bar.html '//*[@id=\"impl-Bar%3Cu8,+M%3E\"]/h3[@class=\"code-header\"]' 'impl<const M: usize> Bar<u8, M>'\n impl<const M: usize> Bar<u8, M> {\n     // @has - '//*[@id=\"method.hey\"]' \\\n     //      'pub fn hey<const N: usize>(&self) -> Foo<N>where u8: Trait<N>'"}, {"sha": "152b643bf4bd8cb156acb6f3e8ec1e9612273e93", "filename": "tests/rustdoc/const-generics/const-impl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5f98a7f00e338c0985e7743be5b23dbd8f1039b3/tests%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f98a7f00e338c0985e7743be5b23dbd8f1039b3/tests%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-generics%2Fconst-impl.rs?ref=5f98a7f00e338c0985e7743be5b23dbd8f1039b3", "patch": "@@ -9,20 +9,20 @@ pub enum Order {\n }\n \n // @has foo/struct.VSet.html '//pre[@class=\"rust item-decl\"]' 'pub struct VSet<T, const ORDER: Order>'\n-// @has foo/struct.VSet.html '//*[@id=\"impl-Send-for-VSet%3CT%2C%20ORDER%3E\"]/h3[@class=\"code-header\"]' 'impl<T, const ORDER: Order> Send for VSet<T, ORDER>'\n-// @has foo/struct.VSet.html '//*[@id=\"impl-Sync-for-VSet%3CT%2C%20ORDER%3E\"]/h3[@class=\"code-header\"]' 'impl<T, const ORDER: Order> Sync for VSet<T, ORDER>'\n+// @has foo/struct.VSet.html '//*[@id=\"impl-Send-for-VSet%3CT,+ORDER%3E\"]/h3[@class=\"code-header\"]' 'impl<T, const ORDER: Order> Send for VSet<T, ORDER>'\n+// @has foo/struct.VSet.html '//*[@id=\"impl-Sync-for-VSet%3CT,+ORDER%3E\"]/h3[@class=\"code-header\"]' 'impl<T, const ORDER: Order> Sync for VSet<T, ORDER>'\n pub struct VSet<T, const ORDER: Order> {\n     inner: Vec<T>,\n }\n \n-// @has foo/struct.VSet.html '//*[@id=\"impl-VSet%3CT%2C%20{%20Order%3A%3ASorted%20}%3E\"]/h3[@class=\"code-header\"]' 'impl<T> VSet<T, { Order::Sorted }>'\n+// @has foo/struct.VSet.html '//*[@id=\"impl-VSet%3CT,+%7B+Order::Sorted+%7D%3E\"]/h3[@class=\"code-header\"]' 'impl<T> VSet<T, { Order::Sorted }>'\n impl<T> VSet<T, { Order::Sorted }> {\n     pub fn new() -> Self {\n         Self { inner: Vec::new() }\n     }\n }\n \n-// @has foo/struct.VSet.html '//*[@id=\"impl-VSet%3CT%2C%20{%20Order%3A%3AUnsorted%20}%3E\"]/h3[@class=\"code-header\"]' 'impl<T> VSet<T, { Order::Unsorted }>'\n+// @has foo/struct.VSet.html '//*[@id=\"impl-VSet%3CT,+%7B+Order::Unsorted+%7D%3E\"]/h3[@class=\"code-header\"]' 'impl<T> VSet<T, { Order::Unsorted }>'\n impl<T> VSet<T, { Order::Unsorted }> {\n     pub fn new() -> Self {\n         Self { inner: Vec::new() }\n@@ -31,7 +31,7 @@ impl<T> VSet<T, { Order::Unsorted }> {\n \n pub struct Escape<const S: &'static str>;\n \n-// @has foo/struct.Escape.html '//*[@id=\"impl-Escape%3Cr#%22%3Cscript%3Ealert(%22Escape%22)%3B%3C/script%3E%22#%3E\"]/h3[@class=\"code-header\"]' 'impl Escape<r#\"<script>alert(\"Escape\");</script>\"#>'\n+// @has foo/struct.Escape.html '//*[@id=\"impl-Escape%3Cr%23%22%3Cscript%3Ealert(%22Escape%22);%3C/script%3E%22%23%3E\"]/h3[@class=\"code-header\"]' 'impl Escape<r#\"<script>alert(\"Escape\");</script>\"#>'\n impl Escape<r#\"<script>alert(\"Escape\");</script>\"#> {\n     pub fn f() {}\n }"}, {"sha": "4f4436377a07beb8b77cacec6454ad8c2bd53166", "filename": "tests/rustdoc/double-quote-escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f98a7f00e338c0985e7743be5b23dbd8f1039b3/tests%2Frustdoc%2Fdouble-quote-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f98a7f00e338c0985e7743be5b23dbd8f1039b3/tests%2Frustdoc%2Fdouble-quote-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fdouble-quote-escape.rs?ref=5f98a7f00e338c0985e7743be5b23dbd8f1039b3", "patch": "@@ -7,5 +7,5 @@ pub trait Foo<T> {\n pub struct Bar;\n \n // @has foo/struct.Bar.html\n-// @has - '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#impl-Foo%3Cunsafe%20extern%20%22C%22%20fn()%3E-for-Bar\"]' 'Foo<unsafe extern \"C\" fn()>'\n+// @has - '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#impl-Foo%3Cunsafe+extern+%22C%22+fn()%3E-for-Bar\"]' 'Foo<unsafe extern \"C\" fn()>'\n impl Foo<unsafe extern \"C\" fn()> for Bar {}"}, {"sha": "846028bbb1906d95697184827d5d27cdd21ca3ab", "filename": "tests/rustdoc/primitive-tuple-variadic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f98a7f00e338c0985e7743be5b23dbd8f1039b3/tests%2Frustdoc%2Fprimitive-tuple-variadic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f98a7f00e338c0985e7743be5b23dbd8f1039b3/tests%2Frustdoc%2Fprimitive-tuple-variadic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fprimitive-tuple-variadic.rs?ref=5f98a7f00e338c0985e7743be5b23dbd8f1039b3", "patch": "@@ -6,13 +6,13 @@\n pub trait Foo {}\n \n // @has foo/trait.Foo.html\n-// @has - '//section[@id=\"impl-Foo-for-(T%2C)\"]/h3' 'impl<T> Foo for (T\u2081, T\u2082, \u2026, T\u2099)'\n+// @has - '//section[@id=\"impl-Foo-for-(T,)\"]/h3' 'impl<T> Foo for (T\u2081, T\u2082, \u2026, T\u2099)'\n #[doc(fake_variadic)]\n impl<T> Foo for (T,) {}\n \n pub trait Bar {}\n \n // @has foo/trait.Bar.html\n-// @has - '//section[@id=\"impl-Bar-for-(U%2C)\"]/h3' 'impl<U: Foo> Bar for (U\u2081, U\u2082, \u2026, U\u2099)'\n+// @has - '//section[@id=\"impl-Bar-for-(U,)\"]/h3' 'impl<U: Foo> Bar for (U\u2081, U\u2082, \u2026, U\u2099)'\n #[doc(fake_variadic)]\n impl<U: Foo> Bar for (U,) {}"}, {"sha": "caa17dfbb1c7367cf7fd8ad3027ced0017b5b59a", "filename": "tests/rustdoc/sidebar-links-to-foreign-impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f98a7f00e338c0985e7743be5b23dbd8f1039b3/tests%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f98a7f00e338c0985e7743be5b23dbd8f1039b3/tests%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fsidebar-links-to-foreign-impl.rs?ref=5f98a7f00e338c0985e7743be5b23dbd8f1039b3", "patch": "@@ -7,8 +7,8 @@\n // @has - '//h2[@id=\"foreign-impls\"]' 'Implementations on Foreign Types'\n // @has - '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#impl-Foo-for-u32\"]' 'u32'\n // @has - '//*[@id=\"impl-Foo-for-u32\"]//h3[@class=\"code-header\"]' 'impl Foo for u32'\n-// @has - '//*[@class=\"sidebar-elems\"]//section//a[@href=\"#impl-Foo-for-%26%27a%20str\"]' \"&'a str\"\n-// @has - '//*[@id=\"impl-Foo-for-%26%27a%20str\"]//h3[@class=\"code-header\"]' \"impl<'a> Foo for &'a str\"\n+// @has - \"//*[@class=\\\"sidebar-elems\\\"]//section//a[@href=\\\"#impl-Foo-for-%26'a+str\\\"]\" \"&'a str\"\n+// @has - \"//*[@id=\\\"impl-Foo-for-%26'a+str\\\"]//h3[@class=\\\"code-header\\\"]\" \"impl<'a> Foo for &'a str\"\n pub trait Foo {}\n \n impl Foo for u32 {}"}, {"sha": "b10f8f6856e8cebb90e9b5bdf87feafcc9fb8bee", "filename": "tests/rustdoc/where-clause-order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f98a7f00e338c0985e7743be5b23dbd8f1039b3/tests%2Frustdoc%2Fwhere-clause-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f98a7f00e338c0985e7743be5b23dbd8f1039b3/tests%2Frustdoc%2Fwhere-clause-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhere-clause-order.rs?ref=5f98a7f00e338c0985e7743be5b23dbd8f1039b3", "patch": "@@ -7,7 +7,7 @@ where\n }\n \n // @has 'foo/trait.SomeTrait.html'\n-// @has - \"//*[@id='impl-SomeTrait%3C(A%2C%20B%2C%20C%2C%20D%2C%20E)%3E-for-(A%2C%20B%2C%20C%2C%20D%2C%20E)']/h3\" \"impl<A, B, C, D, E> SomeTrait<(A, B, C, D, E)> for (A, B, C, D, E)where A: PartialOrd<A> + PartialEq<A>, B: PartialOrd<B> + PartialEq<B>, C: PartialOrd<C> + PartialEq<C>, D: PartialOrd<D> + PartialEq<D>, E: PartialOrd<E> + PartialEq<E> + ?Sized, \"\n+// @has - \"//*[@id='impl-SomeTrait%3C(A,+B,+C,+D,+E)%3E-for-(A,+B,+C,+D,+E)']/h3\" \"impl<A, B, C, D, E> SomeTrait<(A, B, C, D, E)> for (A, B, C, D, E)where A: PartialOrd<A> + PartialEq<A>, B: PartialOrd<B> + PartialEq<B>, C: PartialOrd<C> + PartialEq<C>, D: PartialOrd<D> + PartialEq<D>, E: PartialOrd<E> + PartialEq<E> + ?Sized, \"\n impl<A, B, C, D, E> SomeTrait<(A, B, C, D, E)> for (A, B, C, D, E)\n where\n     A: PartialOrd<A> + PartialEq<A>,"}]}