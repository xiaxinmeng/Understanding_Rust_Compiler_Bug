{"sha": "8a878f07e974232863c8c8c143970dd8a370f751", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhODc4ZjA3ZTk3NDIzMjg2M2M4YzhjMTQzOTcwZGQ4YTM3MGY3NTE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-09T12:56:19Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-09T12:56:34Z"}, "message": "ensure failing promoteds in const/static bodies are handled correctly", "tree": {"sha": "7ed418c83f5c05aa5694aa3320bf562e6a9b4049", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ed418c83f5c05aa5694aa3320bf562e6a9b4049"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a878f07e974232863c8c8c143970dd8a370f751", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a878f07e974232863c8c8c143970dd8a370f751", "html_url": "https://github.com/rust-lang/rust/commit/8a878f07e974232863c8c8c143970dd8a370f751", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a878f07e974232863c8c8c143970dd8a370f751/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6d028369be9eb02d219506c0dd662a2f863fc18", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6d028369be9eb02d219506c0dd662a2f863fc18", "html_url": "https://github.com/rust-lang/rust/commit/d6d028369be9eb02d219506c0dd662a2f863fc18"}], "stats": {"total": 54, "additions": 38, "deletions": 16}, "files": [{"sha": "77e7d484071860fb5f979a1ed501a37040982d4d", "filename": "src/test/ui/consts/const-eval/promoted_errors.noopt.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a878f07e974232863c8c8c143970dd8a370f751/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a878f07e974232863c8c8c143970dd8a370f751/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.noopt.stderr?ref=8a878f07e974232863c8c8c143970dd8a370f751", "patch": "@@ -1,12 +1,12 @@\n warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:13:5\n+  --> $DIR/promoted_errors.rs:15:5\n    |\n LL |       0 - 1\n    |       ^^^^^\n    |       |\n    |       attempt to compute `0_u32 - 1_u32`, which would overflow\n-   |       inside `overflow` at $DIR/promoted_errors.rs:13:5\n-   |       inside `X` at $DIR/promoted_errors.rs:33:29\n+   |       inside `overflow` at $DIR/promoted_errors.rs:15:5\n+   |       inside `X` at $DIR/promoted_errors.rs:38:29\n ...\n LL | / const X: () = {\n LL | |     let _x: &'static u32 = &overflow();\n@@ -18,15 +18,15 @@ LL | | };\n    | |__-\n    |\n note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:9:9\n+  --> $DIR/promoted_errors.rs:11:9\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:33:28\n+  --> $DIR/promoted_errors.rs:38:28\n    |\n LL | / const X: () = {\n LL | |     let _x: &'static u32 = &overflow();"}, {"sha": "6b17346e6ecd1456f65c34ece14b1d3e522b834a", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a878f07e974232863c8c8c143970dd8a370f751/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a878f07e974232863c8c8c143970dd8a370f751/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt.stderr?ref=8a878f07e974232863c8c8c143970dd8a370f751", "patch": "@@ -1,12 +1,12 @@\n warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:18:5\n+  --> $DIR/promoted_errors.rs:20:5\n    |\n LL |       1 / 0\n    |       ^^^^^\n    |       |\n    |       attempt to divide `1_i32` by zero\n-   |       inside `div_by_zero1` at $DIR/promoted_errors.rs:18:5\n-   |       inside `X` at $DIR/promoted_errors.rs:36:29\n+   |       inside `div_by_zero1` at $DIR/promoted_errors.rs:20:5\n+   |       inside `X` at $DIR/promoted_errors.rs:41:29\n ...\n LL | / const X: () = {\n LL | |     let _x: &'static u32 = &overflow();\n@@ -18,15 +18,15 @@ LL | | };\n    | |__-\n    |\n note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:9:9\n+  --> $DIR/promoted_errors.rs:11:9\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:36:28\n+  --> $DIR/promoted_errors.rs:41:28\n    |\n LL | / const X: () = {\n LL | |     let _x: &'static u32 = &overflow();"}, {"sha": "77e7d484071860fb5f979a1ed501a37040982d4d", "filename": "src/test/ui/consts/const-eval/promoted_errors.opt_with_overflow_checks.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a878f07e974232863c8c8c143970dd8a370f751/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a878f07e974232863c8c8c143970dd8a370f751/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.opt_with_overflow_checks.stderr?ref=8a878f07e974232863c8c8c143970dd8a370f751", "patch": "@@ -1,12 +1,12 @@\n warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:13:5\n+  --> $DIR/promoted_errors.rs:15:5\n    |\n LL |       0 - 1\n    |       ^^^^^\n    |       |\n    |       attempt to compute `0_u32 - 1_u32`, which would overflow\n-   |       inside `overflow` at $DIR/promoted_errors.rs:13:5\n-   |       inside `X` at $DIR/promoted_errors.rs:33:29\n+   |       inside `overflow` at $DIR/promoted_errors.rs:15:5\n+   |       inside `X` at $DIR/promoted_errors.rs:38:29\n ...\n LL | / const X: () = {\n LL | |     let _x: &'static u32 = &overflow();\n@@ -18,15 +18,15 @@ LL | | };\n    | |__-\n    |\n note: the lint level is defined here\n-  --> $DIR/promoted_errors.rs:9:9\n+  --> $DIR/promoted_errors.rs:11:9\n    |\n LL | #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n    |         ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n warning: any use of this value will cause an error\n-  --> $DIR/promoted_errors.rs:33:28\n+  --> $DIR/promoted_errors.rs:38:28\n    |\n LL | / const X: () = {\n LL | |     let _x: &'static u32 = &overflow();"}, {"sha": "5bafea1ed46bdf1c4faa8cd048462869ab8dbec6", "filename": "src/test/ui/consts/const-eval/promoted_errors.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8a878f07e974232863c8c8c143970dd8a370f751/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a878f07e974232863c8c8c143970dd8a370f751/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs?ref=8a878f07e974232863c8c8c143970dd8a370f751", "patch": "@@ -6,6 +6,8 @@\n // build-pass\n // ignore-pass (test emits codegen-time warnings and verifies that they are not errors)\n \n+//! This test ensures that when we promote code that fails to evaluate, the build still succeeds.\n+\n #![warn(const_err, arithmetic_overflow, unconditional_panic)]\n \n // The only way to have promoteds that fail is in `const fn` called from `const`/`static`.\n@@ -29,6 +31,9 @@ const fn oob() -> i32 {\n     [1, 2, 3][4]\n }\n \n+// An unused constant containing failing promoteds.\n+// This should work as long as `const_err` can be turned into just a warning;\n+// once it turns into a hard error, just remove `X`.\n const X: () = {\n     let _x: &'static u32 = &overflow();\n     //[opt_with_overflow_checks,noopt]~^ WARN any use of this value will cause an error\n@@ -41,4 +46,21 @@ const X: () = {\n     let _x: &'static i32 = &oob();\n };\n \n-fn main() {}\n+const fn mk_false() -> bool { false }\n+\n+// An actually used constant referencing failing promoteds in dead code.\n+// This needs to always work.\n+const Y: () = {\n+    if mk_false() {\n+        let _x: &'static u32 = &overflow();\n+        let _x: &'static i32 = &div_by_zero1();\n+        let _x: &'static i32 = &div_by_zero2();\n+        let _x: &'static i32 = &div_by_zero3();\n+        let _x: &'static i32 = &oob();\n+    }\n+    ()\n+};\n+\n+fn main() {\n+    let _y = Y;\n+}"}]}