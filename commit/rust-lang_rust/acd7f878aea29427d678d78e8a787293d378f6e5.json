{"sha": "acd7f878aea29427d678d78e8a787293d378f6e5", "node_id": "C_kwDOAAsO6NoAKGFjZDdmODc4YWVhMjk0MjdkNjc4ZDc4ZThhNzg3MjkzZDM3OGY2ZTU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-23T18:55:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-23T18:55:43Z"}, "message": "Rollup merge of #107718 - Zoxc:z-time, r=nnethercote\n\nAdd `-Z time-passes-format` to allow specifying a JSON output for `-Z time-passes`\n\nThis adds back the `-Z time` option as that is useful for [my rustc benchmark tool](https://github.com/Zoxc/rcb), reverting https://github.com/rust-lang/rust/pull/102725. It now uses nanoseconds and bytes as the units so it is renamed to `time-precise`.", "tree": {"sha": "7b99e14d34ba64874be59fb1ad198385c6b33b97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b99e14d34ba64874be59fb1ad198385c6b33b97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acd7f878aea29427d678d78e8a787293d378f6e5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkHKCvCRBK7hj4Ov3rIwAAO1wIAKPowaTs2/FzxnuMDvTedvPH\nPOgYbNSTKGOE2Ynos5s/W4ojiyHFXIF5Lg8QV3p/rhIyHFJDF+AhRVwzaYnQcAUq\nqsDUHihawuuEIT1FvrVfcoWcBq/jZrvYeRu3/kwOu5bcl+Rtk5k9XFxgU2WASe3C\ng/gfl/TkmqFUa7bzZ1DT3xGCoA2sQvdq08tFW0x8kMGT+gNOWD1505mSgphzo+HA\n1jaJaX/C4iGPKxdVd3mQg6fpf2okFkAS+xWY1eImkvEOI4AhWdZGItV9YQoZEu/F\nD6JKPKi5USRTC8ZFjky7Z7wNVPSR7H37whcBmOTpQ6tpepoNQAbV+Nnm7J8ZIy4=\n=AabU\n-----END PGP SIGNATURE-----\n", "payload": "tree 7b99e14d34ba64874be59fb1ad198385c6b33b97\nparent aeabe34d79a61f772e64e5fba3f1f09d4a9c9e5e\nparent 6c57dda44d2c9c12fdaab359c28767e4ccdb671b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679597743 +0100\ncommitter GitHub <noreply@github.com> 1679597743 +0100\n\nRollup merge of #107718 - Zoxc:z-time, r=nnethercote\n\nAdd `-Z time-passes-format` to allow specifying a JSON output for `-Z time-passes`\n\nThis adds back the `-Z time` option as that is useful for [my rustc benchmark tool](https://github.com/Zoxc/rcb), reverting https://github.com/rust-lang/rust/pull/102725. It now uses nanoseconds and bytes as the units so it is renamed to `time-precise`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acd7f878aea29427d678d78e8a787293d378f6e5", "html_url": "https://github.com/rust-lang/rust/commit/acd7f878aea29427d678d78e8a787293d378f6e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acd7f878aea29427d678d78e8a787293d378f6e5/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aeabe34d79a61f772e64e5fba3f1f09d4a9c9e5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/aeabe34d79a61f772e64e5fba3f1f09d4a9c9e5e", "html_url": "https://github.com/rust-lang/rust/commit/aeabe34d79a61f772e64e5fba3f1f09d4a9c9e5e"}, {"sha": "6c57dda44d2c9c12fdaab359c28767e4ccdb671b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c57dda44d2c9c12fdaab359c28767e4ccdb671b", "html_url": "https://github.com/rust-lang/rust/commit/6c57dda44d2c9c12fdaab359c28767e4ccdb671b"}], "stats": {"total": 139, "additions": 107, "deletions": 32}, "files": [{"sha": "3ca784032e1337f614627842a736181b4660f33b", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acd7f878aea29427d678d78e8a787293d378f6e5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/acd7f878aea29427d678d78e8a787293d378f6e5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=acd7f878aea29427d678d78e8a787293d378f6e5", "patch": "@@ -4523,6 +4523,7 @@ dependencies = [\n  \"rustc_index\",\n  \"rustc_macros\",\n  \"rustc_serialize\",\n+ \"serde_json\",\n  \"smallvec\",\n  \"stable_deref_trait\",\n  \"stacker\","}, {"sha": "e5bae009ed64b9651b927d08988b406e7e54987a", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/acd7f878aea29427d678d78e8a787293d378f6e5/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd7f878aea29427d678d78e8a787293d378f6e5/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=acd7f878aea29427d678d78e8a787293d378f6e5", "patch": "@@ -361,12 +361,12 @@ impl CodegenBackend for LlvmCodegenBackend {\n             .expect(\"Expected LlvmCodegenBackend's OngoingCodegen, found Box<Any>\")\n             .join(sess);\n \n-        sess.time(\"llvm_dump_timing_file\", || {\n-            if sess.opts.unstable_opts.llvm_time_trace {\n+        if sess.opts.unstable_opts.llvm_time_trace {\n+            sess.time(\"llvm_dump_timing_file\", || {\n                 let file_name = outputs.with_extension(\"llvm_timings.json\");\n                 llvm_util::time_trace_profiler_finish(&file_name);\n-            }\n-        });\n+            });\n+        }\n \n         Ok((codegen_results, work_products))\n     }"}, {"sha": "c3c8649dbff47b280bfb944f00d7a002f7c79041", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acd7f878aea29427d678d78e8a787293d378f6e5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd7f878aea29427d678d78e8a787293d378f6e5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=acd7f878aea29427d678d78e8a787293d378f6e5", "patch": "@@ -786,6 +786,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n             total_codegen_time,\n             start_rss.unwrap(),\n             end_rss,\n+            tcx.sess.opts.unstable_opts.time_passes_format,\n         );\n     }\n "}, {"sha": "056ee1f63be0311799a7a49c484e9454c4006347", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acd7f878aea29427d678d78e8a787293d378f6e5/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/acd7f878aea29427d678d78e8a787293d378f6e5/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=acd7f878aea29427d678d78e8a787293d378f6e5", "patch": "@@ -21,6 +21,7 @@ rustc-hash = \"1.1.0\"\n rustc_index = { path = \"../rustc_index\", package = \"rustc_index\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n+serde_json = \"1.0.59\"\n smallvec = { version = \"1.8.1\", features = [\n     \"const_generics\",\n     \"union\","}, {"sha": "513df666d0da1bf646056f43e5a701f5ff73effc", "filename": "compiler/rustc_data_structures/src/graph/scc/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/acd7f878aea29427d678d78e8a787293d378f6e5/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd7f878aea29427d678d78e8a787293d378f6e5/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Ftests.rs?ref=acd7f878aea29427d678d78e8a787293d378f6e5", "patch": "@@ -56,7 +56,7 @@ fn test_three_sccs() {\n     assert_eq!(sccs.scc(1), 0);\n     assert_eq!(sccs.scc(2), 0);\n     assert_eq!(sccs.scc(3), 2);\n-    assert_eq!(sccs.successors(0), &[]);\n+    assert_eq!(sccs.successors(0), &[] as &[usize]);\n     assert_eq!(sccs.successors(1), &[0]);\n     assert_eq!(sccs.successors(2), &[0]);\n }\n@@ -113,7 +113,7 @@ fn test_find_state_2() {\n     assert_eq!(sccs.scc(2), 0);\n     assert_eq!(sccs.scc(3), 0);\n     assert_eq!(sccs.scc(4), 0);\n-    assert_eq!(sccs.successors(0), &[]);\n+    assert_eq!(sccs.successors(0), &[] as &[usize]);\n }\n \n #[test]\n@@ -138,7 +138,7 @@ fn test_find_state_3() {\n     assert_eq!(sccs.scc(3), 0);\n     assert_eq!(sccs.scc(4), 0);\n     assert_eq!(sccs.scc(5), 1);\n-    assert_eq!(sccs.successors(0), &[]);\n+    assert_eq!(sccs.successors(0), &[] as &[usize]);\n     assert_eq!(sccs.successors(1), &[0]);\n }\n "}, {"sha": "7c866da60090f9541c333c138f773396c2e4be0c", "filename": "compiler/rustc_data_structures/src/graph/vec_graph/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/acd7f878aea29427d678d78e8a787293d378f6e5/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fvec_graph%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd7f878aea29427d678d78e8a787293d378f6e5/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fvec_graph%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fvec_graph%2Ftests.rs?ref=acd7f878aea29427d678d78e8a787293d378f6e5", "patch": "@@ -27,11 +27,11 @@ fn successors() {\n     let graph = create_graph();\n     assert_eq!(graph.successors(0), &[1]);\n     assert_eq!(graph.successors(1), &[2, 3]);\n-    assert_eq!(graph.successors(2), &[]);\n+    assert_eq!(graph.successors(2), &[] as &[usize]);\n     assert_eq!(graph.successors(3), &[4]);\n-    assert_eq!(graph.successors(4), &[]);\n+    assert_eq!(graph.successors(4), &[] as &[usize]);\n     assert_eq!(graph.successors(5), &[1]);\n-    assert_eq!(graph.successors(6), &[]);\n+    assert_eq!(graph.successors(6), &[] as &[usize]);\n }\n \n #[test]"}, {"sha": "58a0609e29655dff934ab6f553ba6a6ed1918db3", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 58, "deletions": 14, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/acd7f878aea29427d678d78e8a787293d378f6e5/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd7f878aea29427d678d78e8a787293d378f6e5/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=acd7f878aea29427d678d78e8a787293d378f6e5", "patch": "@@ -97,6 +97,7 @@ use std::time::{Duration, Instant};\n pub use measureme::EventId;\n use measureme::{EventIdBuilder, Profiler, SerializableString, StringId};\n use parking_lot::RwLock;\n+use serde_json::json;\n use smallvec::SmallVec;\n \n bitflags::bitflags! {\n@@ -145,6 +146,15 @@ const EVENT_FILTERS_BY_NAME: &[(&str, EventFilter)] = &[\n /// Something that uniquely identifies a query invocation.\n pub struct QueryInvocationId(pub u32);\n \n+/// Which format to use for `-Z time-passes`\n+#[derive(Clone, Copy, PartialEq, Hash, Debug)]\n+pub enum TimePassesFormat {\n+    /// Emit human readable text\n+    Text,\n+    /// Emit structured JSON\n+    Json,\n+}\n+\n /// A reference to the SelfProfiler. It can be cloned and sent across thread\n /// boundaries at will.\n #[derive(Clone)]\n@@ -158,14 +168,14 @@ pub struct SelfProfilerRef {\n     // actually enabled.\n     event_filter_mask: EventFilter,\n \n-    // Print verbose generic activities to stderr?\n-    print_verbose_generic_activities: bool,\n+    // Print verbose generic activities to stderr.\n+    print_verbose_generic_activities: Option<TimePassesFormat>,\n }\n \n impl SelfProfilerRef {\n     pub fn new(\n         profiler: Option<Arc<SelfProfiler>>,\n-        print_verbose_generic_activities: bool,\n+        print_verbose_generic_activities: Option<TimePassesFormat>,\n     ) -> SelfProfilerRef {\n         // If there is no SelfProfiler then the filter mask is set to NONE,\n         // ensuring that nothing ever tries to actually access it.\n@@ -207,9 +217,10 @@ impl SelfProfilerRef {\n     /// a measureme event, \"verbose\" generic activities also print a timing entry to\n     /// stderr if the compiler is invoked with -Ztime-passes.\n     pub fn verbose_generic_activity(&self, event_label: &'static str) -> VerboseTimingGuard<'_> {\n-        let message = self.print_verbose_generic_activities.then(|| event_label.to_owned());\n+        let message_and_format =\n+            self.print_verbose_generic_activities.map(|format| (event_label.to_owned(), format));\n \n-        VerboseTimingGuard::start(message, self.generic_activity(event_label))\n+        VerboseTimingGuard::start(message_and_format, self.generic_activity(event_label))\n     }\n \n     /// Like `verbose_generic_activity`, but with an extra arg.\n@@ -221,11 +232,14 @@ impl SelfProfilerRef {\n     where\n         A: Borrow<str> + Into<String>,\n     {\n-        let message = self\n+        let message_and_format = self\n             .print_verbose_generic_activities\n-            .then(|| format!(\"{}({})\", event_label, event_arg.borrow()));\n+            .map(|format| (format!(\"{}({})\", event_label, event_arg.borrow()), format));\n \n-        VerboseTimingGuard::start(message, self.generic_activity_with_arg(event_label, event_arg))\n+        VerboseTimingGuard::start(\n+            message_and_format,\n+            self.generic_activity_with_arg(event_label, event_arg),\n+        )\n     }\n \n     /// Start profiling a generic activity. Profiling continues until the\n@@ -703,17 +717,32 @@ impl<'a> TimingGuard<'a> {\n     }\n }\n \n+struct VerboseInfo {\n+    start_time: Instant,\n+    start_rss: Option<usize>,\n+    message: String,\n+    format: TimePassesFormat,\n+}\n+\n #[must_use]\n pub struct VerboseTimingGuard<'a> {\n-    start_and_message: Option<(Instant, Option<usize>, String)>,\n+    info: Option<VerboseInfo>,\n     _guard: TimingGuard<'a>,\n }\n \n impl<'a> VerboseTimingGuard<'a> {\n-    pub fn start(message: Option<String>, _guard: TimingGuard<'a>) -> Self {\n+    pub fn start(\n+        message_and_format: Option<(String, TimePassesFormat)>,\n+        _guard: TimingGuard<'a>,\n+    ) -> Self {\n         VerboseTimingGuard {\n             _guard,\n-            start_and_message: message.map(|msg| (Instant::now(), get_resident_set_size(), msg)),\n+            info: message_and_format.map(|(message, format)| VerboseInfo {\n+                start_time: Instant::now(),\n+                start_rss: get_resident_set_size(),\n+                message,\n+                format,\n+            }),\n         }\n     }\n \n@@ -726,10 +755,10 @@ impl<'a> VerboseTimingGuard<'a> {\n \n impl Drop for VerboseTimingGuard<'_> {\n     fn drop(&mut self) {\n-        if let Some((start_time, start_rss, ref message)) = self.start_and_message {\n+        if let Some(info) = &self.info {\n             let end_rss = get_resident_set_size();\n-            let dur = start_time.elapsed();\n-            print_time_passes_entry(message, dur, start_rss, end_rss);\n+            let dur = info.start_time.elapsed();\n+            print_time_passes_entry(&info.message, dur, info.start_rss, end_rss, info.format);\n         }\n     }\n }\n@@ -739,7 +768,22 @@ pub fn print_time_passes_entry(\n     dur: Duration,\n     start_rss: Option<usize>,\n     end_rss: Option<usize>,\n+    format: TimePassesFormat,\n ) {\n+    match format {\n+        TimePassesFormat::Json => {\n+            let json = json!({\n+                \"pass\": what,\n+                \"time\": dur.as_secs_f64(),\n+                \"rss_start\": start_rss,\n+                \"rss_end\": end_rss,\n+            });\n+            eprintln!(\"time: {}\", json.to_string());\n+            return;\n+        }\n+        TimePassesFormat::Text => (),\n+    }\n+\n     // Print the pass if its duration is greater than 5 ms, or it changed the\n     // measured RSS.\n     let is_notable = || {"}, {"sha": "1e835f6065a6379d3d6493b16f477837f1d4e852", "filename": "compiler/rustc_driver_impl/src/lib.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/acd7f878aea29427d678d78e8a787293d378f6e5/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd7f878aea29427d678d78e8a787293d378f6e5/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2Fsrc%2Flib.rs?ref=acd7f878aea29427d678d78e8a787293d378f6e5", "patch": "@@ -20,7 +20,9 @@ pub extern crate rustc_plugin_impl as plugin;\n \n use rustc_ast as ast;\n use rustc_codegen_ssa::{traits::CodegenBackend, CodegenErrors, CodegenResults};\n-use rustc_data_structures::profiling::{get_resident_set_size, print_time_passes_entry};\n+use rustc_data_structures::profiling::{\n+    get_resident_set_size, print_time_passes_entry, TimePassesFormat,\n+};\n use rustc_data_structures::sync::SeqCst;\n use rustc_errors::registry::{InvalidErrorCode, Registry};\n use rustc_errors::{\n@@ -161,7 +163,7 @@ pub trait Callbacks {\n \n #[derive(Default)]\n pub struct TimePassesCallbacks {\n-    time_passes: bool,\n+    time_passes: Option<TimePassesFormat>,\n }\n \n impl Callbacks for TimePassesCallbacks {\n@@ -171,7 +173,8 @@ impl Callbacks for TimePassesCallbacks {\n         // If a --print=... option has been given, we don't print the \"total\"\n         // time because it will mess up the --print output. See #64339.\n         //\n-        self.time_passes = config.opts.prints.is_empty() && config.opts.unstable_opts.time_passes;\n+        self.time_passes = (config.opts.prints.is_empty() && config.opts.unstable_opts.time_passes)\n+            .then(|| config.opts.unstable_opts.time_passes_format);\n         config.opts.trimmed_def_paths = TrimmedDefPaths::GoodPath;\n     }\n }\n@@ -1354,9 +1357,9 @@ pub fn main() -> ! {\n         RunCompiler::new(&args, &mut callbacks).run()\n     });\n \n-    if callbacks.time_passes {\n+    if let Some(format) = callbacks.time_passes {\n         let end_rss = get_resident_set_size();\n-        print_time_passes_entry(\"total\", start_time.elapsed(), start_rss, end_rss);\n+        print_time_passes_entry(\"total\", start_time.elapsed(), start_rss, end_rss, format);\n     }\n \n     process::exit(exit_code)"}, {"sha": "465e787c92ae618ee3a0503534af3f3bf104a883", "filename": "compiler/rustc_hir_analysis/src/coherence/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acd7f878aea29427d678d78e8a787293d378f6e5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd7f878aea29427d678d78e8a787293d378f6e5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs?ref=acd7f878aea29427d678d78e8a787293d378f6e5", "patch": "@@ -133,8 +133,8 @@ fn coherent_trait(tcx: TyCtxt<'_>, def_id: DefId) {\n         check_impl(tcx, impl_def_id, trait_ref);\n         check_object_overlap(tcx, impl_def_id, trait_ref);\n \n-        tcx.sess.time(\"unsafety_checking\", || unsafety::check_item(tcx, impl_def_id));\n-        tcx.sess.time(\"orphan_checking\", || tcx.ensure().orphan_check_impl(impl_def_id));\n+        unsafety::check_item(tcx, impl_def_id);\n+        tcx.ensure().orphan_check_impl(impl_def_id);\n     }\n \n     builtin::check_trait(tcx, def_id);"}, {"sha": "eb5990507fb6dc1eb93ff3bc9c22af025141e724", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acd7f878aea29427d678d78e8a787293d378f6e5/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd7f878aea29427d678d78e8a787293d378f6e5/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=acd7f878aea29427d678d78e8a787293d378f6e5", "patch": "@@ -2,6 +2,7 @@\n use crate::interface::parse_cfgspecs;\n \n use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::profiling::TimePassesFormat;\n use rustc_errors::{emitter::HumanReadableErrorType, registry, ColorConfig};\n use rustc_session::config::rustc_optgroups;\n use rustc_session::config::Input;\n@@ -699,6 +700,7 @@ fn test_unstable_options_tracking_hash() {\n     untracked!(threads, 99);\n     untracked!(time_llvm_passes, true);\n     untracked!(time_passes, true);\n+    untracked!(time_passes_format, TimePassesFormat::Json);\n     untracked!(trace_macros, true);\n     untracked!(track_diagnostics, true);\n     untracked!(trim_diagnostic_paths, false);"}, {"sha": "c75af48e80af47e79797f05c773ea84869e7dfc2", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/acd7f878aea29427d678d78e8a787293d378f6e5/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd7f878aea29427d678d78e8a787293d378f6e5/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=acd7f878aea29427d678d78e8a787293d378f6e5", "patch": "@@ -4,6 +4,7 @@ use crate::early_error;\n use crate::lint;\n use crate::search_paths::SearchPath;\n use crate::utils::NativeLib;\n+use rustc_data_structures::profiling::TimePassesFormat;\n use rustc_errors::{LanguageIdentifier, TerminalUrl};\n use rustc_target::spec::{CodeModel, LinkerFlavorCli, MergeFunctions, PanicStrategy, SanitizerSet};\n use rustc_target::spec::{\n@@ -365,6 +366,7 @@ mod desc {\n     pub const parse_number: &str = \"a number\";\n     pub const parse_opt_number: &str = parse_number;\n     pub const parse_threads: &str = parse_number;\n+    pub const parse_time_passes_format: &str = \"`text` (default) or `json`\";\n     pub const parse_passes: &str = \"a space-separated list of passes, or `all`\";\n     pub const parse_panic_strategy: &str = \"either `unwind` or `abort`\";\n     pub const parse_opt_panic_strategy: &str = parse_panic_strategy;\n@@ -829,6 +831,21 @@ mod parse {\n         true\n     }\n \n+    pub(crate) fn parse_time_passes_format(slot: &mut TimePassesFormat, v: Option<&str>) -> bool {\n+        match v {\n+            None => true,\n+            Some(\"json\") => {\n+                *slot = TimePassesFormat::Json;\n+                true\n+            }\n+            Some(\"text\") => {\n+                *slot = TimePassesFormat::Text;\n+                true\n+            }\n+            Some(_) => false,\n+        }\n+    }\n+\n     pub(crate) fn parse_dump_mono_stats(slot: &mut DumpMonoStatsFormat, v: Option<&str>) -> bool {\n         match v {\n             None => true,\n@@ -1709,6 +1726,8 @@ options! {\n         \"measure time of each LLVM pass (default: no)\"),\n     time_passes: bool = (false, parse_bool, [UNTRACKED],\n         \"measure time of each rustc pass (default: no)\"),\n+    time_passes_format: TimePassesFormat = (TimePassesFormat::Text, parse_time_passes_format, [UNTRACKED],\n+        \"the format to use for -Z time-passes (`text` (default) or `json`)\"),\n     tiny_const_eval_limit: bool = (false, parse_bool, [TRACKED],\n         \"sets a tiny, non-configurable limit for const eval; useful for compiler tests\"),\n     #[rustc_lint_opt_deny_field_access(\"use `Session::tls_model` instead of this field\")]"}, {"sha": "5730df9d5c6b9663b05c99ab2e4cfbead3331589", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/acd7f878aea29427d678d78e8a787293d378f6e5/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acd7f878aea29427d678d78e8a787293d378f6e5/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=acd7f878aea29427d678d78e8a787293d378f6e5", "patch": "@@ -1453,7 +1453,10 @@ pub fn build_session(\n         CguReuseTracker::new_disabled()\n     };\n \n-    let prof = SelfProfilerRef::new(self_profiler, sopts.unstable_opts.time_passes);\n+    let prof = SelfProfilerRef::new(\n+        self_profiler,\n+        sopts.unstable_opts.time_passes.then(|| sopts.unstable_opts.time_passes_format),\n+    );\n \n     let ctfe_backtrace = Lock::new(match env::var(\"RUSTC_CTFE_BACKTRACE\") {\n         Ok(ref val) if val == \"immediate\" => CtfeBacktrace::Immediate,"}, {"sha": "72f5f933d8db4ad7c1f48f1c360b0d0cafb4916a", "filename": "tests/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acd7f878aea29427d678d78e8a787293d378f6e5/tests%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/acd7f878aea29427d678d78e8a787293d378f6e5/tests%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fz-help.stdout?ref=acd7f878aea29427d678d78e8a787293d378f6e5", "patch": "@@ -183,6 +183,7 @@\n     -Z                               threads=val -- use a thread pool with N threads\n     -Z                      time-llvm-passes=val -- measure time of each LLVM pass (default: no)\n     -Z                           time-passes=val -- measure time of each rustc pass (default: no)\n+    -Z                    time-passes-format=val -- the format to use for -Z time-passes (`text` (default) or `json`)\n     -Z                 tiny-const-eval-limit=val -- sets a tiny, non-configurable limit for const eval; useful for compiler tests\n     -Z                             tls-model=val -- choose the TLS model to use (`rustc --print tls-models` for details)\n     -Z                          trace-macros=val -- for every macro invocation, print its name and arguments (default: no)"}]}