{"sha": "febd5065ad9015e89e0ad1b7c2fdf4b84ca3bb3e", "node_id": "C_kwDOAAsO6NoAKGZlYmQ1MDY1YWQ5MDE1ZTg5ZTBhZDFiN2MyZmRmNGI4NGNhM2JiM2U", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2023-04-14T12:56:05Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2023-04-14T13:03:45Z"}, "message": "Make inherent_impls_in_block and trait_impls_in_block infallible", "tree": {"sha": "3b44744331182dcc90b4f5e57d507272c6fe95eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b44744331182dcc90b4f5e57d507272c6fe95eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/febd5065ad9015e89e0ad1b7c2fdf4b84ca3bb3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/febd5065ad9015e89e0ad1b7c2fdf4b84ca3bb3e", "html_url": "https://github.com/rust-lang/rust/commit/febd5065ad9015e89e0ad1b7c2fdf4b84ca3bb3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/febd5065ad9015e89e0ad1b7c2fdf4b84ca3bb3e/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96407424de1888ed977e8ea5dc8a5ee597f547f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/96407424de1888ed977e8ea5dc8a5ee597f547f3", "html_url": "https://github.com/rust-lang/rust/commit/96407424de1888ed977e8ea5dc8a5ee597f547f3"}], "stats": {"total": 49, "additions": 22, "deletions": 27}, "files": [{"sha": "9dd3bddbd41d595b5d02e1783fbb1eaabe444af3", "filename": "crates/hir-ty/src/chalk_db.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/febd5065ad9015e89e0ad1b7c2fdf4b84ca3bb3e/crates%2Fhir-ty%2Fsrc%2Fchalk_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/febd5065ad9015e89e0ad1b7c2fdf4b84ca3bb3e/crates%2Fhir-ty%2Fsrc%2Fchalk_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fchalk_db.rs?ref=febd5065ad9015e89e0ad1b7c2fdf4b84ca3bb3e", "patch": "@@ -139,7 +139,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n                 }\n             });\n         })\n-        .filter_map(|block_id| self.db.trait_impls_in_block(block_id));\n+        .map(|block_id| self.db.trait_impls_in_block(block_id));\n \n         let id_to_chalk = |id: hir_def::ImplId| id.to_chalk(self.db);\n         let mut result = vec![];\n@@ -152,7 +152,8 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n                 impl_maps.into_iter().chain(block_impls).for_each(&mut f);\n                 def_blocks\n                     .into_iter()\n-                    .filter_map(|it| self.db.trait_impls_in_block(it?))\n+                    .flatten()\n+                    .map(|it| self.db.trait_impls_in_block(it))\n                     .for_each(f);\n             }\n             fps => {\n@@ -165,7 +166,8 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n                 impl_maps.into_iter().chain(block_impls).for_each(&mut f);\n                 def_blocks\n                     .into_iter()\n-                    .filter_map(|it| self.db.trait_impls_in_block(it?))\n+                    .flatten()\n+                    .map(|it| self.db.trait_impls_in_block(it))\n                     .for_each(f);\n             }\n         }"}, {"sha": "bd2dc0bc13db43db6b59372daf3ed20d79cd2234", "filename": "crates/hir-ty/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/febd5065ad9015e89e0ad1b7c2fdf4b84ca3bb3e/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/febd5065ad9015e89e0ad1b7c2fdf4b84ca3bb3e/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdb.rs?ref=febd5065ad9015e89e0ad1b7c2fdf4b84ca3bb3e", "patch": "@@ -115,7 +115,7 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     fn inherent_impls_in_crate(&self, krate: CrateId) -> Arc<InherentImpls>;\n \n     #[salsa::invoke(InherentImpls::inherent_impls_in_block_query)]\n-    fn inherent_impls_in_block(&self, block: BlockId) -> Option<Arc<InherentImpls>>;\n+    fn inherent_impls_in_block(&self, block: BlockId) -> Arc<InherentImpls>;\n \n     /// Collects all crates in the dependency graph that have impls for the\n     /// given fingerprint. This is only used for primitive types and types\n@@ -132,7 +132,7 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     fn trait_impls_in_crate(&self, krate: CrateId) -> Arc<TraitImpls>;\n \n     #[salsa::invoke(TraitImpls::trait_impls_in_block_query)]\n-    fn trait_impls_in_block(&self, block: BlockId) -> Option<Arc<TraitImpls>>;\n+    fn trait_impls_in_block(&self, block: BlockId) -> Arc<TraitImpls>;\n \n     #[salsa::invoke(TraitImpls::trait_impls_in_deps_query)]\n     fn trait_impls_in_deps(&self, krate: CrateId) -> Arc<TraitImpls>;"}, {"sha": "504dbe77d9340f8f2b70911bb77dc6328cf25f0c", "filename": "crates/hir-ty/src/method_resolution.rs", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/febd5065ad9015e89e0ad1b7c2fdf4b84ca3bb3e/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/febd5065ad9015e89e0ad1b7c2fdf4b84ca3bb3e/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmethod_resolution.rs?ref=febd5065ad9015e89e0ad1b7c2fdf4b84ca3bb3e", "patch": "@@ -149,18 +149,15 @@ impl TraitImpls {\n         Arc::new(impls)\n     }\n \n-    pub(crate) fn trait_impls_in_block_query(\n-        db: &dyn HirDatabase,\n-        block: BlockId,\n-    ) -> Option<Arc<Self>> {\n+    pub(crate) fn trait_impls_in_block_query(db: &dyn HirDatabase, block: BlockId) -> Arc<Self> {\n         let _p = profile::span(\"trait_impls_in_block_query\");\n         let mut impls = Self { map: FxHashMap::default() };\n \n         let block_def_map = db.block_def_map(block);\n         impls.collect_def_map(db, &block_def_map);\n         impls.shrink_to_fit();\n \n-        Some(Arc::new(impls))\n+        Arc::new(impls)\n     }\n \n     pub(crate) fn trait_impls_in_deps_query(db: &dyn HirDatabase, krate: CrateId) -> Arc<Self> {\n@@ -283,18 +280,15 @@ impl InherentImpls {\n         Arc::new(impls)\n     }\n \n-    pub(crate) fn inherent_impls_in_block_query(\n-        db: &dyn HirDatabase,\n-        block: BlockId,\n-    ) -> Option<Arc<Self>> {\n+    pub(crate) fn inherent_impls_in_block_query(db: &dyn HirDatabase, block: BlockId) -> Arc<Self> {\n         let _p = profile::span(\"inherent_impls_in_block_query\");\n         let mut impls = Self { map: FxHashMap::default(), invalid_impls: Vec::default() };\n \n         let block_def_map = db.block_def_map(block);\n         impls.collect_def_map(db, &block_def_map);\n         impls.shrink_to_fit();\n \n-        Some(Arc::new(impls))\n+        Arc::new(impls)\n     }\n \n     fn shrink_to_fit(&mut self) {\n@@ -1178,18 +1172,17 @@ fn iterate_inherent_methods(\n     };\n \n     while let Some(block_id) = block {\n-        if let Some(impls) = db.inherent_impls_in_block(block_id) {\n-            impls_for_self_ty(\n-                &impls,\n-                self_ty,\n-                table,\n-                name,\n-                receiver_ty,\n-                receiver_adjustments.clone(),\n-                module,\n-                callback,\n-            )?;\n-        }\n+        let impls = db.inherent_impls_in_block(block_id);\n+        impls_for_self_ty(\n+            &impls,\n+            self_ty,\n+            table,\n+            name,\n+            receiver_ty,\n+            receiver_adjustments.clone(),\n+            module,\n+            callback,\n+        )?;\n \n         block = db.block_def_map(block_id).parent().and_then(|module| module.containing_block());\n     }"}]}