{"sha": "b5ad3022da9d4cea11ce3ddbce953edcc6e0eae9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1YWQzMDIyZGE5ZDRjZWExMWNlM2RkYmNlOTUzZWRjYzZlMGVhZTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-02T08:26:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-02T08:26:26Z"}, "message": "auto merge of #12645 : alexcrichton/rust/invalid-libraries, r=brson\n\nWhen the metadata format changes, old libraries often cause librustc to abort\r\nwhen reading their metadata. This should all change with the introduction of SVH\r\nmarkers, but the loader for crates should gracefully handle libraries without\r\nSVH markers still.\r\n\r\nThis commit adds support for tripping fewer assertions when loading libraries by\r\nusing maybe_get_doc when initially parsing metadata. It's still possible for\r\nsome libraries to fall through the cracks, but this should deal with a fairly\r\nlarge number of them up front.", "tree": {"sha": "eee3a144e29395864a229150733a325dab21dca8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eee3a144e29395864a229150733a325dab21dca8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5ad3022da9d4cea11ce3ddbce953edcc6e0eae9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5ad3022da9d4cea11ce3ddbce953edcc6e0eae9", "html_url": "https://github.com/rust-lang/rust/commit/b5ad3022da9d4cea11ce3ddbce953edcc6e0eae9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5ad3022da9d4cea11ce3ddbce953edcc6e0eae9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c81b3fb21a560f9eaacc06ceeabcd5b4339e54d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c81b3fb21a560f9eaacc06ceeabcd5b4339e54d0", "html_url": "https://github.com/rust-lang/rust/commit/c81b3fb21a560f9eaacc06ceeabcd5b4339e54d0"}, {"sha": "997ff7abd4f3b803575a7bfa4af3fb05569b1f75", "url": "https://api.github.com/repos/rust-lang/rust/commits/997ff7abd4f3b803575a7bfa4af3fb05569b1f75", "html_url": "https://github.com/rust-lang/rust/commit/997ff7abd4f3b803575a7bfa4af3fb05569b1f75"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "8cfda93bd8451de84789b272084c4e60cefa9190", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b5ad3022da9d4cea11ce3ddbce953edcc6e0eae9/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ad3022da9d4cea11ce3ddbce953edcc6e0eae9/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=b5ad3022da9d4cea11ce3ddbce953edcc6e0eae9", "patch": "@@ -1145,12 +1145,26 @@ fn list_crate_deps(data: &[u8], out: &mut io::Writer) -> io::IoResult<()> {\n     Ok(())\n }\n \n+pub fn maybe_get_crate_hash(data: &[u8]) -> Option<Svh> {\n+    let cratedoc = reader::Doc(data);\n+    reader::maybe_get_doc(cratedoc, tag_crate_hash).map(|doc| {\n+        Svh::new(doc.as_str_slice())\n+    })\n+}\n+\n pub fn get_crate_hash(data: &[u8]) -> Svh {\n     let cratedoc = reader::Doc(data);\n     let hashdoc = reader::get_doc(cratedoc, tag_crate_hash);\n     Svh::new(hashdoc.as_str_slice())\n }\n \n+pub fn maybe_get_crate_id(data: &[u8]) -> Option<CrateId> {\n+    let cratedoc = reader::Doc(data);\n+    reader::maybe_get_doc(cratedoc, tag_crate_crateid).map(|doc| {\n+        from_str(doc.as_str_slice()).unwrap()\n+    })\n+}\n+\n pub fn get_crate_id(data: &[u8]) -> CrateId {\n     let cratedoc = reader::Doc(data);\n     let hashdoc = reader::get_doc(cratedoc, tag_crate_crateid);"}, {"sha": "617a8654eedab2b30df8c898d8bafdc02c781c1c", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b5ad3022da9d4cea11ce3ddbce953edcc6e0eae9/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ad3022da9d4cea11ce3ddbce953edcc6e0eae9/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=b5ad3022da9d4cea11ce3ddbce953edcc6e0eae9", "patch": "@@ -318,12 +318,17 @@ impl<'a> Context<'a> {\n     }\n \n     fn crate_matches(&mut self, crate_data: &[u8]) -> bool {\n-        let other_id = decoder::get_crate_id(crate_data);\n-        if !self.crate_id.matches(&other_id) { return false }\n+        match decoder::maybe_get_crate_id(crate_data) {\n+            Some(ref id) if self.crate_id.matches(id) => {}\n+            _ => return false\n+        }\n+        let hash = match decoder::maybe_get_crate_hash(crate_data) {\n+            Some(hash) => hash, None => return false\n+        };\n         match self.hash {\n             None => true,\n-            Some(hash) => {\n-                if *hash != decoder::get_crate_hash(crate_data) {\n+            Some(myhash) => {\n+                if *myhash != hash {\n                     self.rejected_via_hash = true;\n                     false\n                 } else {"}, {"sha": "0dbe655b77dfd9c91ff5104b3e6fe81f80106281", "filename": "src/test/run-make/invalid-library/Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5ad3022da9d4cea11ce3ddbce953edcc6e0eae9/src%2Ftest%2Frun-make%2Finvalid-library%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b5ad3022da9d4cea11ce3ddbce953edcc6e0eae9/src%2Ftest%2Frun-make%2Finvalid-library%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Finvalid-library%2FMakefile?ref=b5ad3022da9d4cea11ce3ddbce953edcc6e0eae9", "patch": "@@ -0,0 +1,6 @@\n+-include ../tools.mk\n+\n+all:\n+\ttouch $(TMPDIR)/rust.metadata.bin\n+\tar crus $(TMPDIR)/libfoo-ffffffff-1.0.rlib $(TMPDIR)/rust.metadata.bin\n+\t$(RUSTC) foo.rs 2>&1 | grep \"can't find crate for\""}, {"sha": "6316cfa3bba08c9efa9bedac15a71633e66bf7a0", "filename": "src/test/run-make/invalid-library/foo.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b5ad3022da9d4cea11ce3ddbce953edcc6e0eae9/src%2Ftest%2Frun-make%2Finvalid-library%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5ad3022da9d4cea11ce3ddbce953edcc6e0eae9/src%2Ftest%2Frun-make%2Finvalid-library%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Finvalid-library%2Ffoo.rs?ref=b5ad3022da9d4cea11ce3ddbce953edcc6e0eae9", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate foo;\n+\n+fn main() {}"}]}