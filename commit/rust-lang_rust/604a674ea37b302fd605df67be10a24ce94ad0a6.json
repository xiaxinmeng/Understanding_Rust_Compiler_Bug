{"sha": "604a674ea37b302fd605df67be10a24ce94ad0a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNGE2NzRlYTM3YjMwMmZkNjA1ZGY2N2JlMTBhMjRjZTk0YWQwYTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-08T08:26:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-08T08:26:33Z"}, "message": "Auto merge of #1536 - divergentdave:nanosleep, r=RalfJung\n\nNanosleep\n\nThis PR adds a shim for `libc::nanosleep`, (available under -Zmiri-disable-isolation only) which backs `thread::sleep` on Linux and macOS. I started off by extracting the `timespec` parsing from the `pthread_cond_timedwait` shim into a helper method, and adding checks for invalid values. The second commit adds the new shim and a small test. The shim blocks the current thread, and registers a timeout callback to unblock the thread again, using the same method as `pthread_cond_timedwait` does.", "tree": {"sha": "0496d2e9e3907b70aaada4637575254afa46fd31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0496d2e9e3907b70aaada4637575254afa46fd31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/604a674ea37b302fd605df67be10a24ce94ad0a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/604a674ea37b302fd605df67be10a24ce94ad0a6", "html_url": "https://github.com/rust-lang/rust/commit/604a674ea37b302fd605df67be10a24ce94ad0a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/604a674ea37b302fd605df67be10a24ce94ad0a6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bc1136600fe8c4339ba327e9d5a7d8d09db6a58", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bc1136600fe8c4339ba327e9d5a7d8d09db6a58", "html_url": "https://github.com/rust-lang/rust/commit/3bc1136600fe8c4339ba327e9d5a7d8d09db6a58"}, {"sha": "b06f0d16a9dc66654b4e41f4e57be26e6ef4e302", "url": "https://api.github.com/repos/rust-lang/rust/commits/b06f0d16a9dc66654b4e41f4e57be26e6ef4e302", "html_url": "https://github.com/rust-lang/rust/commit/b06f0d16a9dc66654b4e41f4e57be26e6ef4e302"}], "stats": {"total": 155, "additions": 133, "deletions": 22}, "files": [{"sha": "5bb620b563d3c425f778ecb61f1c1fbe545c5999", "filename": "src/helpers.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/604a674ea37b302fd605df67be10a24ce94ad0a6/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604a674ea37b302fd605df67be10a24ce94ad0a6/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=604a674ea37b302fd605df67be10a24ce94ad0a6", "patch": "@@ -1,6 +1,7 @@\n use std::convert::{TryFrom, TryInto};\n use std::mem;\n use std::num::NonZeroUsize;\n+use std::time::Duration;\n \n use log::trace;\n \n@@ -512,6 +513,35 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let value_place = op_place.offset(offset, MemPlaceMeta::None, layout, this)?;\n         this.write_scalar(value, value_place.into())\n     }\n+\n+    /// Parse a `timespec` struct and return it as a `std::time::Duration`. It returns `None`\n+    /// if the value in the `timespec` struct is invalid. Some libc functions will return\n+    /// `EINVAL` in this case.\n+    fn read_timespec(\n+        &mut self,\n+        timespec_ptr_op: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, Option<Duration>> {\n+        let this = self.eval_context_mut();\n+        let tp = this.deref_operand(timespec_ptr_op)?;\n+        let seconds_place = this.mplace_field(tp, 0)?;\n+        let seconds_scalar = this.read_scalar(seconds_place.into())?;\n+        let seconds = seconds_scalar.to_machine_isize(this)?;\n+        let nanoseconds_place = this.mplace_field(tp, 1)?;\n+        let nanoseconds_scalar = this.read_scalar(nanoseconds_place.into())?;\n+        let nanoseconds = nanoseconds_scalar.to_machine_isize(this)?;\n+\n+        Ok(try {\n+            // tv_sec must be non-negative.\n+            let seconds: u64 = seconds.try_into().ok()?;\n+            // tv_nsec must be non-negative.\n+            let nanoseconds: u32 = nanoseconds.try_into().ok()?;\n+            if nanoseconds >= 1_000_000_000 {\n+                // tv_nsec must not be greater than 999,999,999.\n+                None?\n+            }\n+            Duration::new(seconds, nanoseconds)\n+        })\n+    }\n }\n \n /// Check that the number of args is what we expect."}, {"sha": "77eac9a6324a4c440b7af866ad52e33d9e7d30e4", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/604a674ea37b302fd605df67be10a24ce94ad0a6/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604a674ea37b302fd605df67be10a24ce94ad0a6/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=604a674ea37b302fd605df67be10a24ce94ad0a6", "patch": "@@ -3,6 +3,7 @@\n #![feature(map_first_last)]\n #![feature(never_type)]\n #![feature(or_patterns)]\n+#![feature(try_blocks)]\n \n #![warn(rust_2018_idioms)]\n #![allow(clippy::cast_lossless)]"}, {"sha": "26c743b360e064844f11c8284780f99096333b81", "filename": "src/shims/posix/foreign_items.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/604a674ea37b302fd605df67be10a24ce94ad0a6/src%2Fshims%2Fposix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604a674ea37b302fd605df67be10a24ce94ad0a6/src%2Fshims%2Fposix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fforeign_items.rs?ref=604a674ea37b302fd605df67be10a24ce94ad0a6", "patch": "@@ -382,6 +382,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let result = this.sched_yield()?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n+            \"nanosleep\" => {\n+                let &[req, rem] = check_arg_count(args)?;\n+                let result = this.nanosleep(req, rem)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n+            }\n \n             // Miscellaneous\n             \"isatty\" => {"}, {"sha": "6918fb7fd7eca0316d0e3fc98afcbec56710a03a", "filename": "src/shims/posix/sync.rs", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/604a674ea37b302fd605df67be10a24ce94ad0a6/src%2Fshims%2Fposix%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604a674ea37b302fd605df67be10a24ce94ad0a6/src%2Fshims%2Fposix%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fsync.rs?ref=604a674ea37b302fd605df67be10a24ce94ad0a6", "patch": "@@ -1,11 +1,9 @@\n-use std::convert::TryInto;\n-use std::time::{Duration, SystemTime};\n+use std::time::SystemTime;\n \n use crate::*;\n use stacked_borrows::Tag;\n use thread::Time;\n \n-\n // pthread_mutexattr_t is either 4 or 8 bytes, depending on the platform.\n \n // Our chosen memory layout for emulation (does not have to match the platform layout!):\n@@ -698,25 +696,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let mutex_id = mutex_get_or_create_id(this, mutex_op)?;\n         let active_thread = this.get_active_thread();\n \n-        release_cond_mutex_and_block(this, active_thread, mutex_id)?;\n-        this.condvar_wait(id, active_thread, mutex_id);\n-\n-        // We return success for now and override it in the timeout callback.\n-        this.write_scalar(Scalar::from_i32(0), dest)?;\n-\n         // Extract the timeout.\n         let clock_id = cond_get_clock_id(this, cond_op)?.to_i32()?;\n-        let duration = {\n-            let tp = this.deref_operand(abstime_op)?;\n-            let seconds_place = this.mplace_field(tp, 0)?;\n-            let seconds = this.read_scalar(seconds_place.into())?;\n-            let nanoseconds_place = this.mplace_field(tp, 1)?;\n-            let nanoseconds = this.read_scalar(nanoseconds_place.into())?;\n-            let (seconds, nanoseconds) = (\n-                seconds.to_machine_usize(this)?,\n-                nanoseconds.to_machine_usize(this)?.try_into().unwrap(),\n-            );\n-            Duration::new(seconds, nanoseconds)\n+        let duration = match this.read_timespec(abstime_op)? {\n+            Some(duration) => duration,\n+            None => {\n+                let einval = this.eval_libc(\"EINVAL\")?;\n+                this.write_scalar(einval, dest)?;\n+                return Ok(());\n+            }\n         };\n \n         let timeout_time = if clock_id == this.eval_libc_i32(\"CLOCK_REALTIME\")? {\n@@ -727,6 +715,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             throw_unsup_format!(\"unsupported clock id: {}\", clock_id);\n         };\n \n+        release_cond_mutex_and_block(this, active_thread, mutex_id)?;\n+        this.condvar_wait(id, active_thread, mutex_id);\n+\n+        // We return success for now and override it in the timeout callback.\n+        this.write_scalar(Scalar::from_i32(0), dest)?;\n+\n         // Register the timeout callback.\n         this.register_timeout_callback(\n             active_thread,\n@@ -740,8 +734,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 ecx.condvar_remove_waiter(id, active_thread);\n \n                 // Set the return value: we timed out.\n-                let timeout = ecx.eval_libc_i32(\"ETIMEDOUT\")?;\n-                ecx.write_scalar(Scalar::from_i32(timeout), dest)?;\n+                let etimedout = ecx.eval_libc(\"ETIMEDOUT\")?;\n+                ecx.write_scalar(etimedout, dest)?;\n \n                 Ok(())\n             }),"}, {"sha": "9d6d6ed38daab68ff5e272cd4a555e8dcfcca459", "filename": "src/shims/time.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/604a674ea37b302fd605df67be10a24ce94ad0a6/src%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604a674ea37b302fd605df67be10a24ce94ad0a6/src%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftime.rs?ref=604a674ea37b302fd605df67be10a24ce94ad0a6", "patch": "@@ -4,6 +4,7 @@ use std::convert::TryFrom;\n use crate::stacked_borrows::Tag;\n use crate::*;\n use helpers::{immty_from_int_checked, immty_from_uint_checked};\n+use thread::Time;\n \n /// Returns the time elapsed between the provided time and the unix epoch as a `Duration`.\n pub fn system_time_to_duration<'tcx>(time: &SystemTime) -> InterpResult<'tcx, Duration> {\n@@ -177,4 +178,40 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.write_packed_immediates(info, &imms)?;\n         Ok(0) // KERN_SUCCESS\n     }\n+\n+    fn nanosleep(\n+        &mut self,\n+        req_op: OpTy<'tcx, Tag>,\n+        _rem: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, i32> {\n+        // Signal handlers are not supported, so rem will never be written to.\n+\n+        let this = self.eval_context_mut();\n+\n+        this.check_no_isolation(\"nanosleep\")?;\n+\n+        let duration = match this.read_timespec(req_op)? {\n+            Some(duration) => duration,\n+            None => {\n+                let einval = this.eval_libc(\"EINVAL\")?;\n+                this.set_last_error(einval)?;\n+                return Ok(-1);\n+            }\n+        };\n+        let timeout_time = Time::Monotonic(Instant::now().checked_add(duration).unwrap());\n+\n+        let active_thread = this.get_active_thread();\n+        this.block_thread(active_thread);\n+\n+        this.register_timeout_callback(\n+            active_thread,\n+            timeout_time,\n+            Box::new(move |ecx| {\n+                ecx.unblock_thread(active_thread);\n+                Ok(())\n+            }),\n+        );\n+\n+        Ok(0)\n+    }\n }"}, {"sha": "d4e52bb3a97b0bb538479acb926b8ac72ad9a571", "filename": "tests/run-pass/concurrency/libc_pthread_cond.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/604a674ea37b302fd605df67be10a24ce94ad0a6/tests%2Frun-pass%2Fconcurrency%2Flibc_pthread_cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604a674ea37b302fd605df67be10a24ce94ad0a6/tests%2Frun-pass%2Fconcurrency%2Flibc_pthread_cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fconcurrency%2Flibc_pthread_cond.rs?ref=604a674ea37b302fd605df67be10a24ce94ad0a6", "patch": "@@ -37,6 +37,38 @@ fn test_timed_wait_timeout(clock_id: i32) {\n         );\n         let elapsed_time = current_time.elapsed().as_millis();\n         assert!(900 <= elapsed_time && elapsed_time <= 1300);\n+\n+        // Test that invalid nanosecond values (above 10^9 or negative) are rejected with the\n+        // correct error code.\n+        let invalid_timeout_1 = libc::timespec { tv_sec: now.tv_sec + 1, tv_nsec: 1_000_000_000 };\n+        assert_eq!(\n+            libc::pthread_cond_timedwait(\n+                &mut cond as *mut _,\n+                &mut mutex as *mut _,\n+                &invalid_timeout_1\n+            ),\n+            libc::EINVAL\n+        );\n+        let invalid_timeout_2 = libc::timespec { tv_sec: now.tv_sec + 1, tv_nsec: -1 };\n+        assert_eq!(\n+            libc::pthread_cond_timedwait(\n+                &mut cond as *mut _,\n+                &mut mutex as *mut _,\n+                &invalid_timeout_2\n+            ),\n+            libc::EINVAL\n+        );\n+        // Test that invalid second values (negative) are rejected with the correct error code.\n+        let invalid_timeout_3 = libc::timespec { tv_sec: -1, tv_nsec: 0 };\n+        assert_eq!(\n+            libc::pthread_cond_timedwait(\n+                &mut cond as *mut _,\n+                &mut mutex as *mut _,\n+                &invalid_timeout_3\n+            ),\n+            libc::EINVAL\n+        );\n+\n         assert_eq!(libc::pthread_mutex_unlock(&mut mutex as *mut _), 0);\n         assert_eq!(libc::pthread_mutex_destroy(&mut mutex as *mut _), 0);\n         assert_eq!(libc::pthread_cond_destroy(&mut cond as *mut _), 0);"}, {"sha": "cce29003e567633b045dc83ed0fa5a07651d208c", "filename": "tests/run-pass/time.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/604a674ea37b302fd605df67be10a24ce94ad0a6/tests%2Frun-pass%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/604a674ea37b302fd605df67be10a24ce94ad0a6/tests%2Frun-pass%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftime.rs?ref=604a674ea37b302fd605df67be10a24ce94ad0a6", "patch": "@@ -8,6 +8,15 @@ fn duration_sanity(diff: Duration) {\n     assert!(diff.as_millis() < 500);\n }\n \n+// Sleeping on Windows is not supported yet.\n+#[cfg(unix)]\n+fn test_sleep() {\n+    let before = Instant::now();\n+    std::thread::sleep(Duration::from_millis(100));\n+    let after = Instant::now();\n+    assert!((after - before).as_millis() >= 100);\n+}\n+\n fn main() {\n     // Check `SystemTime`.\n     let now1 = SystemTime::now();\n@@ -36,4 +45,7 @@ fn main() {\n     assert_eq!(now1 + diff, now2);\n     assert_eq!(now2 - diff, now1);\n     duration_sanity(diff);\n+\n+    #[cfg(unix)]\n+    test_sleep();\n }"}]}