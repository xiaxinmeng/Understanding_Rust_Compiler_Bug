{"sha": "42df8c56cc6f1b94a9c0e8e55462dff57d95e4ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyZGY4YzU2Y2M2ZjFiOTRhOWMwZThlNTU0NjJkZmY1N2Q5NWU0YWM=", "commit": {"author": {"name": "Michael Lamparski", "email": "diagonaldevice@gmail.com", "date": "2018-02-18T03:31:14Z"}, "committer": {"name": "Michael Lamparski", "email": "diagonaldevice@gmail.com", "date": "2018-02-18T03:31:14Z"}, "message": "unused_unsafe: don't label irrelevant fns", "tree": {"sha": "0ae3f1c7acf766c59b2dd82669fbcab3f7dec979", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ae3f1c7acf766c59b2dd82669fbcab3f7dec979"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42df8c56cc6f1b94a9c0e8e55462dff57d95e4ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42df8c56cc6f1b94a9c0e8e55462dff57d95e4ac", "html_url": "https://github.com/rust-lang/rust/commit/42df8c56cc6f1b94a9c0e8e55462dff57d95e4ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42df8c56cc6f1b94a9c0e8e55462dff57d95e4ac/comments", "author": {"login": "ExpHP", "id": 1411280, "node_id": "MDQ6VXNlcjE0MTEyODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1411280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ExpHP", "html_url": "https://github.com/ExpHP", "followers_url": "https://api.github.com/users/ExpHP/followers", "following_url": "https://api.github.com/users/ExpHP/following{/other_user}", "gists_url": "https://api.github.com/users/ExpHP/gists{/gist_id}", "starred_url": "https://api.github.com/users/ExpHP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ExpHP/subscriptions", "organizations_url": "https://api.github.com/users/ExpHP/orgs", "repos_url": "https://api.github.com/users/ExpHP/repos", "events_url": "https://api.github.com/users/ExpHP/events{/privacy}", "received_events_url": "https://api.github.com/users/ExpHP/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ExpHP", "id": 1411280, "node_id": "MDQ6VXNlcjE0MTEyODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1411280?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ExpHP", "html_url": "https://github.com/ExpHP", "followers_url": "https://api.github.com/users/ExpHP/followers", "following_url": "https://api.github.com/users/ExpHP/following{/other_user}", "gists_url": "https://api.github.com/users/ExpHP/gists{/gist_id}", "starred_url": "https://api.github.com/users/ExpHP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ExpHP/subscriptions", "organizations_url": "https://api.github.com/users/ExpHP/orgs", "repos_url": "https://api.github.com/users/ExpHP/repos", "events_url": "https://api.github.com/users/ExpHP/events{/privacy}", "received_events_url": "https://api.github.com/users/ExpHP/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5313e8728f028cb7914f3c9f02804158a5732b52", "url": "https://api.github.com/repos/rust-lang/rust/commits/5313e8728f028cb7914f3c9f02804158a5732b52", "html_url": "https://github.com/rust-lang/rust/commit/5313e8728f028cb7914f3c9f02804158a5732b52"}], "stats": {"total": 46, "additions": 44, "deletions": 2}, "files": [{"sha": "3524255e03772328311120212f8c7fee12933e11", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/42df8c56cc6f1b94a9c0e8e55462dff57d95e4ac/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42df8c56cc6f1b94a9c0e8e55462dff57d95e4ac/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=42df8c56cc6f1b94a9c0e8e55462dff57d95e4ac", "patch": "@@ -386,10 +386,13 @@ fn is_enclosed(tcx: TyCtxt,\n         if used_unsafe.contains(&parent_id) {\n             Some((\"block\".to_string(), parent_id))\n         } else if let Some(hir::map::NodeItem(&hir::Item {\n-            node: hir::ItemFn(_, hir::Unsafety::Unsafe, _, _, _, _),\n+            node: hir::ItemFn(_, fn_unsafety, _, _, _, _),\n             ..\n         })) = tcx.hir.find(parent_id) {\n-            Some((\"fn\".to_string(), parent_id))\n+            match fn_unsafety {\n+                hir::Unsafety::Unsafe => Some((\"fn\".to_string(), parent_id)),\n+                hir::Unsafety::Normal => None,\n+            }\n         } else {\n             is_enclosed(tcx, used_unsafe, parent_id)\n         }"}, {"sha": "9eb567a5d3eb09feb10951f5cbdc139d0da7854c", "filename": "src/test/compile-fail/issue-48131.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/42df8c56cc6f1b94a9c0e8e55462dff57d95e4ac/src%2Ftest%2Fcompile-fail%2Fissue-48131.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42df8c56cc6f1b94a9c0e8e55462dff57d95e4ac/src%2Ftest%2Fcompile-fail%2Fissue-48131.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-48131.rs?ref=42df8c56cc6f1b94a9c0e8e55462dff57d95e4ac", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This note is annotated because the purpose of the test\n+// is to ensure that certain other notes are not generated.\n+#![deny(unused_unsafe)] //~ NOTE\n+\n+// (test that no note is generated on this unsafe fn)\n+pub unsafe fn a() {\n+    fn inner() {\n+        unsafe { /* unnecessary */ } //~ ERROR unnecessary `unsafe`\n+                                     //~^ NOTE\n+    }\n+\n+    inner()\n+}\n+\n+pub fn b() {\n+    // (test that no note is generated on this unsafe block)\n+    unsafe {\n+        fn inner() {\n+            unsafe { /* unnecessary */ } //~ ERROR unnecessary `unsafe`\n+                                         //~^ NOTE\n+        }\n+\n+        let () = ::std::mem::uninitialized();\n+\n+        inner()\n+    }\n+}\n+\n+fn main() {}"}]}