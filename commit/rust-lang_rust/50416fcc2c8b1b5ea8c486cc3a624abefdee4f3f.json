{"sha": "50416fcc2c8b1b5ea8c486cc3a624abefdee4f3f", "node_id": "C_kwDOAAsO6NoAKDUwNDE2ZmNjMmM4YjFiNWVhOGM0ODZjYzNhNjI0YWJlZmRlZTRmM2Y", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2023-05-07T12:16:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-07T12:16:26Z"}, "message": "Merge pull request #345 from Sp00ph/from_to_slice\n\nUse the new `load`/`store` functions in `{from,to}_slice`", "tree": {"sha": "c568d5babe5363cdfd638eb5065f98f99d066f3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c568d5babe5363cdfd638eb5065f98f99d066f3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50416fcc2c8b1b5ea8c486cc3a624abefdee4f3f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkV5aaCRBK7hj4Ov3rIwAAyPAIAJ7uIswIc1l5mU5ANajW8x8g\n0UnQY+jw5SJQeOHltNWkCk2mA8dDXP5ksaY2WhjMvgXpBxTsogdiRPvX7prTAq8n\nUf3JKbEB3VBRLB/yBypPvW37B9TlOzzdT6r2sBhu04OSM1Ivi/IR2Fz7n1RlIa2R\n3e6JcvF50BvPr5M1HqidPxRD75bzZ8F5qRDUEFLl4IvKqmpxXE4r/LiQ/7r/Jqcq\ndYJ9dXkwKO71rbky+LBx24GzDz1PheWpzaLcdiVfS0vN/obbSUBeVfxbIovB+f3O\ngWLLTkEFiv5z3NlNnjSguCBVzRHntlcZyzs6FvVOC+fw6ha2VqxFwOuakdtZ+rs=\n=f3VG\n-----END PGP SIGNATURE-----\n", "payload": "tree c568d5babe5363cdfd638eb5065f98f99d066f3f\nparent 45413e468d511195ab7b420a01415be008b49195\nparent 4967f25f6bf930a5f79d5c66f2ffc53159d43c4a\nauthor Caleb Zulawski <caleb.zulawski@gmail.com> 1683461786 -0400\ncommitter GitHub <noreply@github.com> 1683461786 -0400\n\nMerge pull request #345 from Sp00ph/from_to_slice\n\nUse the new `load`/`store` functions in `{from,to}_slice`"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50416fcc2c8b1b5ea8c486cc3a624abefdee4f3f", "html_url": "https://github.com/rust-lang/rust/commit/50416fcc2c8b1b5ea8c486cc3a624abefdee4f3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50416fcc2c8b1b5ea8c486cc3a624abefdee4f3f/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45413e468d511195ab7b420a01415be008b49195", "url": "https://api.github.com/repos/rust-lang/rust/commits/45413e468d511195ab7b420a01415be008b49195", "html_url": "https://github.com/rust-lang/rust/commit/45413e468d511195ab7b420a01415be008b49195"}, {"sha": "4967f25f6bf930a5f79d5c66f2ffc53159d43c4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4967f25f6bf930a5f79d5c66f2ffc53159d43c4a", "html_url": "https://github.com/rust-lang/rust/commit/4967f25f6bf930a5f79d5c66f2ffc53159d43c4a"}], "stats": {"total": 16, "additions": 6, "deletions": 10}, "files": [{"sha": "0253f122c98a27c07b13b27b6534292652d08bda", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/50416fcc2c8b1b5ea8c486cc3a624abefdee4f3f/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50416fcc2c8b1b5ea8c486cc3a624abefdee4f3f/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=50416fcc2c8b1b5ea8c486cc3a624abefdee4f3f", "patch": "@@ -263,11 +263,9 @@ where\n             slice.len() >= Self::N,\n             \"slice length must be at least the number of elements\"\n         );\n-        assert!(core::mem::size_of::<Self>() == Self::N * core::mem::size_of::<T>());\n-        // Safety:\n-        // - We've checked the length is sufficient.\n-        // - `T` and `Simd<T, N>` are Copy types.\n-        unsafe { slice.as_ptr().cast::<Self>().read_unaligned() }\n+        // SAFETY: We just checked that the slice contains\n+        // at least `N` elements.\n+        unsafe { Self::load(slice.as_ptr().cast()) }\n     }\n \n     /// Writes a SIMD vector to the first `N` elements of a slice.\n@@ -293,11 +291,9 @@ where\n             slice.len() >= Self::N,\n             \"slice length must be at least the number of elements\"\n         );\n-        assert!(core::mem::size_of::<Self>() == Self::N * core::mem::size_of::<T>());\n-        // Safety:\n-        // - We've checked the length is sufficient\n-        // - `T` and `Simd<T, N>` are Copy types.\n-        unsafe { slice.as_mut_ptr().cast::<Self>().write_unaligned(self) }\n+        // SAFETY: We just checked that the slice contains\n+        // at least `N` elements.\n+        unsafe { self.store(slice.as_mut_ptr().cast()) }\n     }\n \n     /// Performs elementwise conversion of a SIMD vector's elements to another SIMD-valid type."}]}