{"sha": "8e00d28ff43e04b7cfcfe7445061b73985f9f1b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMDBkMjhmZjQzZTA0YjdjZmNmZTc0NDUwNjFiNzM5ODVmOWYxYjg=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-02-02T20:03:23Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2017-02-10T17:44:00Z"}, "message": "Prefer switching on false for boolean switches\n\nThis ends up not really mattering because we generate a plain conditional branch in LLVM either\nway.", "tree": {"sha": "747f9c497c29cbcc25531db3e9975be9484807e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/747f9c497c29cbcc25531db3e9975be9484807e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e00d28ff43e04b7cfcfe7445061b73985f9f1b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e00d28ff43e04b7cfcfe7445061b73985f9f1b8", "html_url": "https://github.com/rust-lang/rust/commit/8e00d28ff43e04b7cfcfe7445061b73985f9f1b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e00d28ff43e04b7cfcfe7445061b73985f9f1b8/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4be18488a741b2bf9b6f32c0ae5b21f4c3f6c83e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4be18488a741b2bf9b6f32c0ae5b21f4c3f6c83e", "html_url": "https://github.com/rust-lang/rust/commit/4be18488a741b2bf9b6f32c0ae5b21f4c3f6c83e"}], "stats": {"total": 45, "additions": 21, "deletions": 24}, "files": [{"sha": "11919db479c1a790778811e90c82aa804ca90821", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8e00d28ff43e04b7cfcfe7445061b73985f9f1b8/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e00d28ff43e04b7cfcfe7445061b73985f9f1b8/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=8e00d28ff43e04b7cfcfe7445061b73985f9f1b8", "patch": "@@ -11,16 +11,13 @@\n use syntax::symbol::InternedString;\n use syntax::ast;\n use std::rc::Rc;\n-use std::borrow::Cow;\n use hir::def_id::DefId;\n use rustc_const_math::*;\n use self::ConstVal::*;\n pub use rustc_const_math::ConstInt;\n \n use std::collections::BTreeMap;\n \n-pub static BOOL_SWITCH_TRUE: Cow<'static, [ConstInt]> = Cow::Borrowed(&[ConstInt::Infer(1)]);\n-\n #[derive(Clone, Debug, Hash, RustcEncodable, RustcDecodable, Eq, PartialEq)]\n pub enum ConstVal {\n     Float(ConstFloat),"}, {"sha": "98693d469ed05ec934dd9c4948bcca4d8765603a", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e00d28ff43e04b7cfcfe7445061b73985f9f1b8/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e00d28ff43e04b7cfcfe7445061b73985f9f1b8/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=8e00d28ff43e04b7cfcfe7445061b73985f9f1b8", "patch": "@@ -447,7 +447,7 @@ pub struct Terminator<'tcx> {\n }\n \n /// For use in SwitchInt, for switching on bools.\n-pub static BOOL_SWITCH_TRUE: Cow<'static, [ConstInt]> = Cow::Borrowed(&[ConstInt::Infer(1)]);\n+pub static BOOL_SWITCH_FALSE: Cow<'static, [ConstInt]> = Cow::Borrowed(&[ConstInt::Infer(0)]);\n \n #[derive(Clone, RustcEncodable, RustcDecodable)]\n pub enum TerminatorKind<'tcx> {"}, {"sha": "44b85c31d8644f5a4bedbe73e32b0e570b10acb8", "filename": "src/librustc_borrowck/borrowck/mir/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e00d28ff43e04b7cfcfe7445061b73985f9f1b8/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e00d28ff43e04b7cfcfe7445061b73985f9f1b8/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Felaborate_drops.rs?ref=8e00d28ff43e04b7cfcfe7445061b73985f9f1b8", "patch": "@@ -846,8 +846,8 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                 self.new_block(c, is_cleanup, TerminatorKind::SwitchInt {\n                     discr: Operand::Consume(flag),\n                     switch_ty: boolty,\n-                    values: BOOL_SWITCH_TRUE.clone(),\n-                    targets: vec![on_set, on_unset],\n+                    values: BOOL_SWITCH_FALSE.clone(),\n+                    targets: vec![on_unset, on_set],\n                 })\n             }\n         }"}, {"sha": "f61b4a6607722f424fc9ba56bc9e2d13c6f28d94", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8e00d28ff43e04b7cfcfe7445061b73985f9f1b8/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e00d28ff43e04b7cfcfe7445061b73985f9f1b8/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=8e00d28ff43e04b7cfcfe7445061b73985f9f1b8", "patch": "@@ -72,8 +72,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 this.cfg.terminate(block, source_info, TerminatorKind::SwitchInt {\n                     discr: operand,\n                     switch_ty: this.hir.bool_ty(),\n-                    values: BOOL_SWITCH_TRUE.clone(),\n-                    targets: vec![then_block, else_block],\n+                    values: BOOL_SWITCH_FALSE.clone(),\n+                    targets: vec![else_block, then_block],\n                 });\n \n                 unpack!(then_block = this.into(destination, then_block, then_expr));\n@@ -113,22 +113,22 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n                 let lhs = unpack!(block = this.as_operand(block, lhs));\n                 let blocks = match op {\n-                    LogicalOp::And => vec![else_block, false_block],\n-                    LogicalOp::Or => vec![true_block, else_block],\n+                    LogicalOp::And => vec![false_block, else_block],\n+                    LogicalOp::Or => vec![else_block, true_block],\n                 };\n                 this.cfg.terminate(block, source_info, TerminatorKind::SwitchInt {\n                     discr: lhs,\n                     switch_ty: this.hir.bool_ty(),\n-                    values: BOOL_SWITCH_TRUE.clone(),\n+                    values: BOOL_SWITCH_FALSE.clone(),\n                     targets: blocks,\n                 });\n \n                 let rhs = unpack!(else_block = this.as_operand(else_block, rhs));\n                 this.cfg.terminate(else_block, source_info, TerminatorKind::SwitchInt {\n                     discr: rhs,\n                     switch_ty: this.hir.bool_ty(),\n-                    values: BOOL_SWITCH_TRUE.clone(),\n-                    targets: vec![true_block, false_block],\n+                    values: BOOL_SWITCH_FALSE.clone(),\n+                    targets: vec![false_block, true_block],\n                 });\n \n                 this.cfg.push_assign_constant(\n@@ -191,8 +191,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                                TerminatorKind::SwitchInt {\n                                                    discr: cond,\n                                                    switch_ty: this.hir.bool_ty(),\n-                                                   values: BOOL_SWITCH_TRUE.clone(),\n-                                                   targets: vec![body_block, exit_block],\n+                                                   values: BOOL_SWITCH_FALSE.clone(),\n+                                                   targets: vec![exit_block, body_block],\n                                                });\n \n                             // if the test is false, there's no `break` to assign `destination`, so"}, {"sha": "812900b6becc764472b172b95438e55be588c1d3", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e00d28ff43e04b7cfcfe7445061b73985f9f1b8/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e00d28ff43e04b7cfcfe7445061b73985f9f1b8/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=8e00d28ff43e04b7cfcfe7445061b73985f9f1b8", "patch": "@@ -675,8 +675,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             self.cfg.terminate(block, source_info, TerminatorKind::SwitchInt {\n                 discr: cond,\n                 switch_ty: self.hir.bool_ty(),\n-                values: BOOL_SWITCH_TRUE.clone(),\n-                targets: vec![arm_block, otherwise],\n+                values: BOOL_SWITCH_FALSE.clone(),\n+                targets: vec![otherwise, arm_block],\n             });\n             Some(otherwise)\n         } else {"}, {"sha": "f268eda4c15a5f2669b92f99201571487d34db7a", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8e00d28ff43e04b7cfcfe7445061b73985f9f1b8/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e00d28ff43e04b7cfcfe7445061b73985f9f1b8/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=8e00d28ff43e04b7cfcfe7445061b73985f9f1b8", "patch": "@@ -236,7 +236,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         &ConstVal::Bool(false) => vec![false_bb, true_bb],\n                         v => span_bug!(test.span, \"expected boolean value but got {:?}\", v)\n                     };\n-                    (BOOL_SWITCH_TRUE.clone(), vec![true_bb, false_bb], ret)\n+                    (BOOL_SWITCH_FALSE.clone(), vec![false_bb, true_bb], ret)\n                 } else {\n                     // The switch may be inexhaustive so we\n                     // add a catch all block\n@@ -326,8 +326,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     self.cfg.terminate(eq_block, source_info, TerminatorKind::SwitchInt {\n                         discr: Operand::Consume(eq_result),\n                         switch_ty: self.hir.bool_ty(),\n-                        values: BOOL_SWITCH_TRUE.clone(),\n-                        targets: vec![block, fail],\n+                        values: BOOL_SWITCH_FALSE.clone(),\n+                        targets: vec![fail, block],\n                     });\n                     vec![block, fail]\n                 } else {\n@@ -375,8 +375,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 self.cfg.terminate(block, source_info, TerminatorKind::SwitchInt {\n                     discr: Operand::Consume(result),\n                     switch_ty: self.hir.bool_ty(),\n-                    values: BOOL_SWITCH_TRUE.clone(),\n-                    targets: vec![true_bb, false_bb],\n+                    values: BOOL_SWITCH_FALSE.clone(),\n+                    targets: vec![false_bb, true_bb],\n                 });\n                 vec![true_bb, false_bb]\n             }\n@@ -403,8 +403,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         self.cfg.terminate(block, source_info, TerminatorKind::SwitchInt {\n             discr: Operand::Consume(result),\n             switch_ty: self.hir.bool_ty(),\n-            values: BOOL_SWITCH_TRUE.clone(),\n-            targets: vec![target_block, fail_block]\n+            values: BOOL_SWITCH_FALSE.clone(),\n+            targets: vec![fail_block, target_block]\n         });\n         target_block\n     }"}]}