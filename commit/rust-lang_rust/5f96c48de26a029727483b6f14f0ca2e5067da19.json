{"sha": "5f96c48de26a029727483b6f14f0ca2e5067da19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmOTZjNDhkZTI2YTAyOTcyNzQ4M2I2ZjE0ZjBjYTJlNTA2N2RhMTk=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-04-01T20:26:29Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-04-02T18:38:02Z"}, "message": "rustdoc: Rename internal uses of `spotlight`\n\nI didn't make these renames in #80965 because I didn't want the PR to\nconflict with #80914.", "tree": {"sha": "dcadde710ce1a8030be5682a1c7a3704e57cdfca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcadde710ce1a8030be5682a1c7a3704e57cdfca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f96c48de26a029727483b6f14f0ca2e5067da19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f96c48de26a029727483b6f14f0ca2e5067da19", "html_url": "https://github.com/rust-lang/rust/commit/5f96c48de26a029727483b6f14f0ca2e5067da19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f96c48de26a029727483b6f14f0ca2e5067da19/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36bcf4069717b9dff90270d13b53a3b130329960", "url": "https://api.github.com/repos/rust-lang/rust/commits/36bcf4069717b9dff90270d13b53a3b130329960", "html_url": "https://github.com/rust-lang/rust/commit/36bcf4069717b9dff90270d13b53a3b130329960"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "277ec91f15ed7205e737a183fdb393aadd0d2f61", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f96c48de26a029727483b6f14f0ca2e5067da19/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f96c48de26a029727483b6f14f0ca2e5067da19/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=5f96c48de26a029727483b6f14f0ca2e5067da19", "patch": "@@ -624,7 +624,7 @@ crate fn record_extern_trait(cx: &mut DocContext<'_>, did: DefId) {\n \n     let trait_ = clean::TraitWithExtraInfo {\n         trait_,\n-        is_spotlight: clean::utils::has_doc_flag(cx.tcx.get_attrs(did), sym::notable_trait),\n+        is_notable: clean::utils::has_doc_flag(cx.tcx.get_attrs(did), sym::notable_trait),\n     };\n     cx.external_traits.borrow_mut().insert(did, trait_);\n     cx.active_extern_traits.remove(&did);"}, {"sha": "95d9ff98aed21aadf54405093b6eccf74fa07421", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f96c48de26a029727483b6f14f0ca2e5067da19/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f96c48de26a029727483b6f14f0ca2e5067da19/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=5f96c48de26a029727483b6f14f0ca2e5067da19", "patch": "@@ -65,7 +65,7 @@ crate struct Crate {\n #[derive(Clone, Debug)]\n crate struct TraitWithExtraInfo {\n     crate trait_: Trait,\n-    crate is_spotlight: bool,\n+    crate is_notable: bool,\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "dae7980130cf74b46f16f0709888a9920d7092d5", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5f96c48de26a029727483b6f14f0ca2e5067da19/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f96c48de26a029727483b6f14f0ca2e5067da19/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=5f96c48de26a029727483b6f14f0ca2e5067da19", "patch": "@@ -464,10 +464,9 @@ crate fn run_global_ctxt(\n     if let Some(sized_trait_did) = ctxt.tcx.lang_items().sized_trait() {\n         let mut sized_trait = build_external_trait(&mut ctxt, sized_trait_did);\n         sized_trait.is_auto = true;\n-        ctxt.external_traits.borrow_mut().insert(\n-            sized_trait_did,\n-            TraitWithExtraInfo { trait_: sized_trait, is_spotlight: false },\n-        );\n+        ctxt.external_traits\n+            .borrow_mut()\n+            .insert(sized_trait_did, TraitWithExtraInfo { trait_: sized_trait, is_notable: false });\n     }\n \n     debug!(\"crate: {:?}\", tcx.hir().krate());"}, {"sha": "0e405d6ae028e8886b6900498683949c858ab416", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f96c48de26a029727483b6f14f0ca2e5067da19/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f96c48de26a029727483b6f14f0ca2e5067da19/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=5f96c48de26a029727483b6f14f0ca2e5067da19", "patch": "@@ -116,7 +116,7 @@ crate struct Cache {\n     // even though the trait itself is not exported. This can happen if a trait\n     // was defined in function/expression scope, since the impl will be picked\n     // up by `collect-trait-impls` but the trait won't be scraped out in the HIR\n-    // crawl. In order to prevent crashes when looking for spotlight traits or\n+    // crawl. In order to prevent crashes when looking for notable traits or\n     // when gathering trait documentation on a type, hold impls here while\n     // folding and add them to the cache later on if we find the trait.\n     orphan_trait_impls: Vec<(DefId, FxHashSet<DefId>, Impl)>,\n@@ -227,7 +227,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n         if let clean::TraitItem(ref t) = *item.kind {\n             self.cache.traits.entry(item.def_id).or_insert_with(|| clean::TraitWithExtraInfo {\n                 trait_: t.clone(),\n-                is_spotlight: item.attrs.has_doc_flag(sym::notable_trait),\n+                is_notable: item.attrs.has_doc_flag(sym::notable_trait),\n             });\n         }\n "}, {"sha": "a8a08fb23e08f4a3c9e640973e3305af8cef4213", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5f96c48de26a029727483b6f14f0ca2e5067da19/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f96c48de26a029727483b6f14f0ca2e5067da19/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=5f96c48de26a029727483b6f14f0ca2e5067da19", "patch": "@@ -1045,7 +1045,7 @@ fn render_assoc_item(\n         write!(\n             w,\n             \"{}{}{}{}{}{}{}fn <a href=\\\"{href}\\\" class=\\\"fnname\\\">{name}</a>\\\n-             {generics}{decl}{spotlight}{where_clause}\",\n+             {generics}{decl}{notable_traits}{where_clause}\",\n             if parent == ItemType::Trait { \"    \" } else { \"\" },\n             vis,\n             constness,\n@@ -1057,7 +1057,7 @@ fn render_assoc_item(\n             name = name,\n             generics = g.print(cache, tcx),\n             decl = d.full_print(cache, tcx, header_len, indent, header.asyncness),\n-            spotlight = spotlight_decl(&d, cache, tcx),\n+            notable_traits = notable_traits_decl(&d, cache, tcx),\n             where_clause = print_where_clause(g, cache, tcx, indent, end_newline),\n         )\n     }\n@@ -1341,17 +1341,19 @@ fn should_render_item(item: &clean::Item, deref_mut_: bool, cache: &Cache) -> bo\n     }\n }\n \n-fn spotlight_decl(decl: &clean::FnDecl, cache: &Cache, tcx: TyCtxt<'_>) -> String {\n+fn notable_traits_decl(decl: &clean::FnDecl, cache: &Cache, tcx: TyCtxt<'_>) -> String {\n     let mut out = Buffer::html();\n     let mut trait_ = String::new();\n \n     if let Some(did) = decl.output.def_id_full(cache) {\n         if let Some(impls) = cache.impls.get(&did) {\n             for i in impls {\n                 let impl_ = i.inner_impl();\n-                if impl_.trait_.def_id().map_or(false, |d| {\n-                    cache.traits.get(&d).map(|t| t.is_spotlight).unwrap_or(false)\n-                }) {\n+                if impl_\n+                    .trait_\n+                    .def_id()\n+                    .map_or(false, |d| cache.traits.get(&d).map(|t| t.is_notable).unwrap_or(false))\n+                {\n                     if out.is_empty() {\n                         write!(\n                             &mut out,"}, {"sha": "0cdfe435b9c9346379c5d2a6da808c1266c080af", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5f96c48de26a029727483b6f14f0ca2e5067da19/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f96c48de26a029727483b6f14f0ca2e5067da19/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=5f96c48de26a029727483b6f14f0ca2e5067da19", "patch": "@@ -10,9 +10,9 @@ use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n \n use super::{\n-    collect_paths_for_type, document, ensure_trailing_slash, item_ty_to_strs, render_assoc_item,\n-    render_assoc_items, render_attributes, render_impl, render_stability_since_raw, spotlight_decl,\n-    write_srclink, AssocItemLink, Context,\n+    collect_paths_for_type, document, ensure_trailing_slash, item_ty_to_strs, notable_traits_decl,\n+    render_assoc_item, render_assoc_items, render_attributes, render_impl,\n+    render_stability_since_raw, write_srclink, AssocItemLink, Context,\n };\n use crate::clean::{self, GetDefId};\n use crate::formats::cache::Cache;\n@@ -381,7 +381,7 @@ fn item_function(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, f: &clean::\n     write!(\n         w,\n         \"{vis}{constness}{asyncness}{unsafety}{abi}fn \\\n-         {name}{generics}{decl}{spotlight}{where_clause}</pre>\",\n+         {name}{generics}{decl}{notable_traits}{where_clause}</pre>\",\n         vis = it.visibility.print_with_space(cx.tcx(), it.def_id, cx.cache()),\n         constness = f.header.constness.print_with_space(),\n         asyncness = f.header.asyncness.print_with_space(),\n@@ -391,7 +391,7 @@ fn item_function(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, f: &clean::\n         generics = f.generics.print(cx.cache(), cx.tcx()),\n         where_clause = print_where_clause(&f.generics, cx.cache(), cx.tcx(), 0, true),\n         decl = f.decl.full_print(cx.cache(), cx.tcx(), header_len, 0, f.header.asyncness),\n-        spotlight = spotlight_decl(&f.decl, cx.cache(), cx.tcx()),\n+        notable_traits = notable_traits_decl(&f.decl, cx.cache(), cx.tcx()),\n     );\n     document(w, cx, it, None)\n }"}]}