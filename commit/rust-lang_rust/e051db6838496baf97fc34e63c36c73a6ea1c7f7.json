{"sha": "e051db6838496baf97fc34e63c36c73a6ea1c7f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNTFkYjY4Mzg0OTZiYWY5N2ZjMzRlNjNjMzZjNzNhNmVhMWM3Zjc=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-27T19:56:07Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-27T20:01:16Z"}, "message": "may not -> might not\n\n\"may not\" has two possible meanings:\n1. A command: \"You may not stay up past your bedtime.\"\n2. A fact that's only sometimes true: \"Some cities may not have bike lanes.\"\n\nIn some cases, the meaning is ambiguous: \"Some cars may not have snow\ntires.\" (do the cars *happen* to not have snow tires, or is it\nphysically impossible for them to have snow tires?)\n\nThis changes places where the standard library uses the \"description of\nfact\" meaning to say \"might not\" instead.\n\nThis is just `std::vec` for now - if you think this is a good idea I can\nconvert the rest of the standard library.", "tree": {"sha": "822f8ced2f9e18da597db5746fdbf8f99353980e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/822f8ced2f9e18da597db5746fdbf8f99353980e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e051db6838496baf97fc34e63c36c73a6ea1c7f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e051db6838496baf97fc34e63c36c73a6ea1c7f7", "html_url": "https://github.com/rust-lang/rust/commit/e051db6838496baf97fc34e63c36c73a6ea1c7f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e051db6838496baf97fc34e63c36c73a6ea1c7f7/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bba40880c0750f880119b4517821ffe0a96f74d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/bba40880c0750f880119b4517821ffe0a96f74d1", "html_url": "https://github.com/rust-lang/rust/commit/bba40880c0750f880119b4517821ffe0a96f74d1"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "b7b01deb4fcab1e124ec4e7df5b4a08683bbc4be", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e051db6838496baf97fc34e63c36c73a6ea1c7f7/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e051db6838496baf97fc34e63c36c73a6ea1c7f7/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=e051db6838496baf97fc34e63c36c73a6ea1c7f7", "patch": "@@ -267,12 +267,12 @@ mod spec_extend;\n /// unspecified, and you should use the appropriate methods to modify these.\n /// The pointer will never be null, so this type is null-pointer-optimized.\n ///\n-/// However, the pointer may not actually point to allocated memory. In particular,\n+/// However, the pointer might not actually point to allocated memory. In particular,\n /// if you construct a `Vec` with capacity 0 via [`Vec::new`], [`vec![]`][`vec!`],\n /// [`Vec::with_capacity(0)`][`Vec::with_capacity`], or by calling [`shrink_to_fit`]\n /// on an empty Vec, it will not allocate memory. Similarly, if you store zero-sized\n /// types inside a `Vec`, it will not allocate space for them. *Note that in this case\n-/// the `Vec` may not report a [`capacity`] of 0*. `Vec` will allocate if and only\n+/// the `Vec` might not report a [`capacity`] of 0*. `Vec` will allocate if and only\n /// if [`mem::size_of::<T>`]`() * capacity() > 0`. In general, `Vec`'s allocation\n /// details are very subtle &mdash; if you intend to allocate memory using a `Vec`\n /// and use it for something else (either to pass to unsafe code, or to build your\n@@ -347,7 +347,7 @@ mod spec_extend;\n /// whatever is most efficient or otherwise easy to implement. Do not rely on\n /// removed data to be erased for security purposes. Even if you drop a `Vec`, its\n /// buffer may simply be reused by another `Vec`. Even if you zero a `Vec`'s memory\n-/// first, that may not actually happen because the optimizer does not consider\n+/// first, that might not actually happen because the optimizer does not consider\n /// this a side-effect that must be preserved. There is one case which we will\n /// not break, however: using `unsafe` code to write to the excess capacity,\n /// and then increasing the length to match, is always valid."}]}