{"sha": "de32ddad23abbc831ae60d5efefab0df84e8910b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMzJkZGFkMjNhYmJjODMxYWU2MGQ1ZWZlZmFiMGRmODRlODkxMGI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-12T18:54:38Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-26T09:28:04Z"}, "message": "[WIP] Basic i128 support", "tree": {"sha": "1c71f8ade410be7506733fdff2a254768e0955ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c71f8ade410be7506733fdff2a254768e0955ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de32ddad23abbc831ae60d5efefab0df84e8910b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de32ddad23abbc831ae60d5efefab0df84e8910b", "html_url": "https://github.com/rust-lang/rust/commit/de32ddad23abbc831ae60d5efefab0df84e8910b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de32ddad23abbc831ae60d5efefab0df84e8910b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf3ec3be3e595780d842ac3069bb07f3c50f54b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf3ec3be3e595780d842ac3069bb07f3c50f54b8", "html_url": "https://github.com/rust-lang/rust/commit/bf3ec3be3e595780d842ac3069bb07f3c50f54b8"}], "stats": {"total": 393, "additions": 144, "deletions": 249}, "files": [{"sha": "6752108006fdcd6ea6dfdeb9121a9db8c4ccd4af", "filename": "Cargo.lock", "status": "modified", "additions": 20, "deletions": 40, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/de32ddad23abbc831ae60d5efefab0df84e8910b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/de32ddad23abbc831ae60d5efefab0df84e8910b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=de32ddad23abbc831ae60d5efefab0df84e8910b", "patch": "@@ -117,28 +117,25 @@ dependencies = [\n [[package]]\n name = \"cranelift\"\n version = \"0.36.0\"\n-source = \"git+https://github.com/CraneStation/cranelift.git#e7f2b719eebfb9280c3e38eae42a9ee25221a4e3\"\n dependencies = [\n- \"cranelift-codegen 0.36.0 (git+https://github.com/CraneStation/cranelift.git)\",\n- \"cranelift-frontend 0.36.0 (git+https://github.com/CraneStation/cranelift.git)\",\n+ \"cranelift-codegen 0.36.0\",\n+ \"cranelift-frontend 0.36.0\",\n ]\n \n [[package]]\n name = \"cranelift-bforest\"\n version = \"0.36.0\"\n-source = \"git+https://github.com/CraneStation/cranelift.git#e7f2b719eebfb9280c3e38eae42a9ee25221a4e3\"\n dependencies = [\n- \"cranelift-entity 0.36.0 (git+https://github.com/CraneStation/cranelift.git)\",\n+ \"cranelift-entity 0.36.0\",\n ]\n \n [[package]]\n name = \"cranelift-codegen\"\n version = \"0.36.0\"\n-source = \"git+https://github.com/CraneStation/cranelift.git#e7f2b719eebfb9280c3e38eae42a9ee25221a4e3\"\n dependencies = [\n- \"cranelift-bforest 0.36.0 (git+https://github.com/CraneStation/cranelift.git)\",\n- \"cranelift-codegen-meta 0.36.0 (git+https://github.com/CraneStation/cranelift.git)\",\n- \"cranelift-entity 0.36.0 (git+https://github.com/CraneStation/cranelift.git)\",\n+ \"cranelift-bforest 0.36.0\",\n+ \"cranelift-codegen-meta 0.36.0\",\n+ \"cranelift-entity 0.36.0\",\n  \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure_derive 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -148,23 +145,20 @@ dependencies = [\n [[package]]\n name = \"cranelift-codegen-meta\"\n version = \"0.36.0\"\n-source = \"git+https://github.com/CraneStation/cranelift.git#e7f2b719eebfb9280c3e38eae42a9ee25221a4e3\"\n dependencies = [\n- \"cranelift-entity 0.36.0 (git+https://github.com/CraneStation/cranelift.git)\",\n+ \"cranelift-entity 0.36.0\",\n ]\n \n [[package]]\n name = \"cranelift-entity\"\n version = \"0.36.0\"\n-source = \"git+https://github.com/CraneStation/cranelift.git#e7f2b719eebfb9280c3e38eae42a9ee25221a4e3\"\n \n [[package]]\n name = \"cranelift-faerie\"\n version = \"0.36.0\"\n-source = \"git+https://github.com/CraneStation/cranelift.git#e7f2b719eebfb9280c3e38eae42a9ee25221a4e3\"\n dependencies = [\n- \"cranelift-codegen 0.36.0 (git+https://github.com/CraneStation/cranelift.git)\",\n- \"cranelift-module 0.36.0 (git+https://github.com/CraneStation/cranelift.git)\",\n+ \"cranelift-codegen 0.36.0\",\n+ \"cranelift-module 0.36.0\",\n  \"faerie 0.10.1 (git+https://github.com/m4b/faerie.git)\",\n  \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"goblin 0.0.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -174,42 +168,38 @@ dependencies = [\n [[package]]\n name = \"cranelift-frontend\"\n version = \"0.36.0\"\n-source = \"git+https://github.com/CraneStation/cranelift.git#e7f2b719eebfb9280c3e38eae42a9ee25221a4e3\"\n dependencies = [\n- \"cranelift-codegen 0.36.0 (git+https://github.com/CraneStation/cranelift.git)\",\n+ \"cranelift-codegen 0.36.0\",\n  \"log 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"target-lexicon 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"cranelift-module\"\n version = \"0.36.0\"\n-source = \"git+https://github.com/CraneStation/cranelift.git#e7f2b719eebfb9280c3e38eae42a9ee25221a4e3\"\n dependencies = [\n- \"cranelift-codegen 0.36.0 (git+https://github.com/CraneStation/cranelift.git)\",\n- \"cranelift-entity 0.36.0 (git+https://github.com/CraneStation/cranelift.git)\",\n+ \"cranelift-codegen 0.36.0\",\n+ \"cranelift-entity 0.36.0\",\n  \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"cranelift-native\"\n version = \"0.36.0\"\n-source = \"git+https://github.com/CraneStation/cranelift.git#e7f2b719eebfb9280c3e38eae42a9ee25221a4e3\"\n dependencies = [\n- \"cranelift-codegen 0.36.0 (git+https://github.com/CraneStation/cranelift.git)\",\n+ \"cranelift-codegen 0.36.0\",\n  \"raw-cpuid 6.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"target-lexicon 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"cranelift-simplejit\"\n version = \"0.36.0\"\n-source = \"git+https://github.com/CraneStation/cranelift.git#e7f2b719eebfb9280c3e38eae42a9ee25221a4e3\"\n dependencies = [\n- \"cranelift-codegen 0.36.0 (git+https://github.com/CraneStation/cranelift.git)\",\n- \"cranelift-module 0.36.0 (git+https://github.com/CraneStation/cranelift.git)\",\n- \"cranelift-native 0.36.0 (git+https://github.com/CraneStation/cranelift.git)\",\n+ \"cranelift-codegen 0.36.0\",\n+ \"cranelift-module 0.36.0\",\n+ \"cranelift-native 0.36.0\",\n  \"errno 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.60 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"region 2.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -611,10 +601,10 @@ dependencies = [\n  \"ar 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"byteorder 1.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cranelift 0.36.0 (git+https://github.com/CraneStation/cranelift.git)\",\n- \"cranelift-faerie 0.36.0 (git+https://github.com/CraneStation/cranelift.git)\",\n- \"cranelift-module 0.36.0 (git+https://github.com/CraneStation/cranelift.git)\",\n- \"cranelift-simplejit 0.36.0 (git+https://github.com/CraneStation/cranelift.git)\",\n+ \"cranelift 0.36.0\",\n+ \"cranelift-faerie 0.36.0\",\n+ \"cranelift-module 0.36.0\",\n+ \"cranelift-simplejit 0.36.0\",\n  \"faerie 0.10.1 (git+https://github.com/m4b/faerie.git)\",\n  \"gimli 0.19.0 (git+https://github.com/gimli-rs/gimli.git)\",\n  \"indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -882,16 +872,6 @@ dependencies = [\n \"checksum cc 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\" = \"39f75544d7bbaf57560d2168f28fd649ff9c76153874db88bdbdfd839b1a7e7d\"\n \"checksum cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b486ce3ccf7ffd79fdeb678eac06a9e6c09fc88d33836340becb8fffe87c5e33\"\n \"checksum clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5067f5bb2d80ef5d68b4c87db81601f0b75bca627bc2ef76b141d7b846a3c6d9\"\n-\"checksum cranelift 0.36.0 (git+https://github.com/CraneStation/cranelift.git)\" = \"<none>\"\n-\"checksum cranelift-bforest 0.36.0 (git+https://github.com/CraneStation/cranelift.git)\" = \"<none>\"\n-\"checksum cranelift-codegen 0.36.0 (git+https://github.com/CraneStation/cranelift.git)\" = \"<none>\"\n-\"checksum cranelift-codegen-meta 0.36.0 (git+https://github.com/CraneStation/cranelift.git)\" = \"<none>\"\n-\"checksum cranelift-entity 0.36.0 (git+https://github.com/CraneStation/cranelift.git)\" = \"<none>\"\n-\"checksum cranelift-faerie 0.36.0 (git+https://github.com/CraneStation/cranelift.git)\" = \"<none>\"\n-\"checksum cranelift-frontend 0.36.0 (git+https://github.com/CraneStation/cranelift.git)\" = \"<none>\"\n-\"checksum cranelift-module 0.36.0 (git+https://github.com/CraneStation/cranelift.git)\" = \"<none>\"\n-\"checksum cranelift-native 0.36.0 (git+https://github.com/CraneStation/cranelift.git)\" = \"<none>\"\n-\"checksum cranelift-simplejit 0.36.0 (git+https://github.com/CraneStation/cranelift.git)\" = \"<none>\"\n \"checksum crc32fast 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ba125de2af0df55319f41944744ad91c71113bf74a4646efff39afe1f6842db1\"\n \"checksum env_logger 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aafcde04e90a5226a6443b7aabdb016ba2f8307c847d524724bd9b346dd1a2d3\"\n \"checksum errno 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c2a071601ed01b988f896ab14b95e67335d1eeb50190932a1320f7fe3cadc84e\""}, {"sha": "64126d917f3850e5fc390bd0f448f15b16389007", "filename": "Cargo.toml", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/de32ddad23abbc831ae60d5efefab0df84e8910b/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/de32ddad23abbc831ae60d5efefab0df84e8910b/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=de32ddad23abbc831ae60d5efefab0df84e8910b", "patch": "@@ -28,11 +28,11 @@ indexmap = \"1.0.2\"\n object = \"0.12.0\"\n \n # Uncomment to use local checkout of cranelift\n-#[patch.\"https://github.com/CraneStation/cranelift.git\"]\n-#cranelift = { path = \"../cranelift/cranelift-umbrella\" }\n-#cranelift-module = { path = \"../cranelift/cranelift-module\" }\n-#cranelift-simplejit = { path = \"../cranelift/cranelift-simplejit\" }\n-#cranelift-faerie = { path = \"../cranelift/cranelift-faerie\" }\n+[patch.\"https://github.com/CraneStation/cranelift.git\"]\n+cranelift = { path = \"../cranelift/cranelift-umbrella\" }\n+cranelift-module = { path = \"../cranelift/cranelift-module\" }\n+cranelift-simplejit = { path = \"../cranelift/cranelift-simplejit\" }\n+cranelift-faerie = { path = \"../cranelift/cranelift-faerie\" }\n \n #[patch.\"https://github.com/gimli-rs/gimli.git\"]\n #gimli = { path = \"../\" }"}, {"sha": "745e86de4850bcce422aeac111b62d7a0c939eb5", "filename": "example/mini_core.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de32ddad23abbc831ae60d5efefab0df84e8910b/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de32ddad23abbc831ae60d5efefab0df84e8910b/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=de32ddad23abbc831ae60d5efefab0df84e8910b", "patch": "@@ -144,6 +144,14 @@ impl Add for usize {\n     }\n }\n \n+impl Add for u128 {\n+    type Output = Self;\n+\n+    fn add(self, rhs: Self) -> Self {\n+        self + rhs\n+    }\n+}\n+\n #[lang = \"sub\"]\n pub trait Sub<RHS = Self> {\n     type Output;"}, {"sha": "23a92c737808b21557a87be7ce857294f5773aac", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 1, "deletions": 135, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/de32ddad23abbc831ae60d5efefab0df84e8910b/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de32ddad23abbc831ae60d5efefab0df84e8910b/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=de32ddad23abbc831ae60d5efefab0df84e8910b", "patch": "@@ -118,139 +118,5 @@ fn take_f32(_f: f32) {}\n fn take_unique(_u: Unique<()>) {}\n \n fn main() {\n-    take_unique(Unique {\n-        pointer: 0 as *const (),\n-        _marker: PhantomData,\n-    });\n-    take_f32(0.1);\n-\n-    //return;\n-\n-    unsafe {\n-        printf(\"Hello %s\\n\\0\" as *const str as *const i8, \"printf\\0\" as *const str as *const i8);\n-\n-        let hello: &[u8] = b\"Hello\\0\" as &[u8; 6];\n-        let ptr: *const u8 = hello as *const [u8] as *const u8;\n-        puts(ptr);\n-\n-        let world: Box<&str> = box \"World!\\0\";\n-        puts(*world as *const str as *const u8);\n-        world as Box<SomeTrait>;\n-\n-        assert_eq!(intrinsics::bitreverse(0b10101000u8), 0b00010101u8);\n-\n-        assert_eq!(intrinsics::bswap(0xabu8), 0xabu8);\n-        assert_eq!(intrinsics::bswap(0xddccu16), 0xccddu16);\n-        assert_eq!(intrinsics::bswap(0xffee_ddccu32), 0xccdd_eeffu32);\n-        assert_eq!(intrinsics::bswap(0x1234_5678_ffee_ddccu64), 0xccdd_eeff_7856_3412u64);\n-\n-        assert_eq!(intrinsics::size_of_val(hello) as u8, 6);\n-\n-        let chars = &['C', 'h', 'a', 'r', 's'];\n-        let chars = chars as &[char];\n-        assert_eq!(intrinsics::size_of_val(chars) as u8, 4 * 5);\n-\n-        let a: &dyn SomeTrait = &\"abc\\0\";\n-        a.object_safe();\n-\n-        assert_eq!(intrinsics::size_of_val(a) as u8, 16);\n-        assert_eq!(intrinsics::size_of_val(&0u32) as u8, 4);\n-\n-        assert_eq!(intrinsics::min_align_of::<u16>() as u8, 2);\n-        assert_eq!(intrinsics::min_align_of_val(&a) as u8, intrinsics::min_align_of::<&str>() as u8);\n-\n-        assert!(!intrinsics::needs_drop::<u8>());\n-        assert!(intrinsics::needs_drop::<NoisyDrop>());\n-\n-        Unique {\n-            pointer: 0 as *const &str,\n-            _marker: PhantomData,\n-        } as Unique<dyn SomeTrait>;\n-\n-        struct MyDst<T: ?Sized>(T);\n-\n-        intrinsics::size_of_val(&MyDst([0u8; 4]) as &MyDst<[u8]>);\n-\n-        struct Foo {\n-            x: u8,\n-            y: !,\n-        }\n-\n-        unsafe fn zeroed<T>() -> T {\n-            intrinsics::init::<T>()\n-        }\n-\n-        unsafe fn uninitialized<T>() -> T {\n-            MaybeUninit { uninit: () }.value\n-        }\n-\n-        zeroed::<(u8, u8)>();\n-        #[allow(unreachable_code)]\n-        {\n-            if false {\n-                zeroed::<!>();\n-                zeroed::<Foo>();\n-                uninitialized::<Foo>();\n-            }\n-        }\n-    }\n-\n-    let _ = box NoisyDrop {\n-        text: \"Boxed outer got dropped!\\0\",\n-        inner: NoisyDropInner,\n-    } as Box<SomeTrait>;\n-\n-    const FUNC_REF: Option<fn()> = Some(main);\n-    match FUNC_REF {\n-        Some(_) => {},\n-        None => assert!(false),\n-    }\n-\n-    match Ordering::Less {\n-        Ordering::Less => {},\n-        _ => assert!(false),\n-    }\n-\n-    [NoisyDropInner, NoisyDropInner];\n-\n-    let x = &[0u32, 42u32] as &[u32];\n-    match x {\n-        [] => assert_eq!(0u32, 1),\n-        [_, ref y..] => assert_eq!(&x[1] as *const u32 as usize, &y[0] as *const u32 as usize),\n-    }\n-\n-    assert_eq!(((|()| 42u8) as fn(()) -> u8)(()), 42);\n-\n-    extern {\n-        #[linkage = \"weak\"]\n-        static ABC: *const u8;\n-    }\n-\n-    {\n-        extern {\n-            #[linkage = \"weak\"]\n-            static ABC: *const u8;\n-        }\n-    }\n-\n-    unsafe { assert_eq!(ABC as usize, 0); }\n-\n-    &mut (|| Some(0 as *const ())) as &mut FnMut() -> Option<*const ()>;\n-\n-    // checked binops\n-    let zeroi8 = 0i8;\n-    let oneu8 = 1u8;\n-    let onei8 = 1i8;\n-    zeroi8 - 1;\n-    oneu8 - 1;\n-    zeroi8 - -2i8;\n-    #[allow(unreachable_code)]\n-    {\n-        if false {\n-            let minustwoi8 = -2i8;\n-            oneu8 + 255;\n-            onei8 + 127;\n-            minustwoi8 - 127;\n-        }\n-    }\n+    assert_eq!((1u128 + 2) as u16, 3);\n }"}, {"sha": "b7e7d0a830a607bfd29c403e440e1b5048f5964e", "filename": "src/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de32ddad23abbc831ae60d5efefab0df84e8910b/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de32ddad23abbc831ae60d5efefab0df84e8910b/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=de32ddad23abbc831ae60d5efefab0df84e8910b", "patch": "@@ -87,7 +87,7 @@ pub fn scalar_to_clif_type(tcx: TyCtxt, scalar: Scalar) -> Type {\n             Integer::I16 => types::I16,\n             Integer::I32 => types::I32,\n             Integer::I64 => types::I64,\n-            Integer::I128 => unimpl!(\"u/i128\"),\n+            Integer::I128 => types::I128,\n         },\n         Primitive::Float(flt) => match flt {\n             FloatTy::F32 => types::F32,"}, {"sha": "f8bd567234611eb69263b3b1b2e02da7f669350b", "filename": "src/base.rs", "status": "modified", "additions": 84, "deletions": 61, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/de32ddad23abbc831ae60d5efefab0df84e8910b/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de32ddad23abbc831ae60d5efefab0df84e8910b/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=de32ddad23abbc831ae60d5efefab0df84e8910b", "patch": "@@ -899,6 +899,19 @@ pub fn trans_int_binop<'a, 'tcx: 'a>(\n             \"int binop requires lhs and rhs of same type\"\n         );\n     }\n+\n+    if out_ty == fx.tcx.types.u128 || out_ty == fx.tcx.types.i128 {\n+        return match (bin_op, signed) {\n+            _ => {\n+                let layout = fx.layout_of(out_ty);\n+                let a = fx.bcx.ins().iconst(types::I64, 42);\n+                let b = fx.bcx.ins().iconst(types::I64, 0);\n+                let val = fx.bcx.ins().iconcat(a, b);\n+                CValue::by_val(val, layout)\n+            }\n+        }\n+    }\n+\n     binop_match! {\n         fx, bin_op, signed, lhs, rhs, out_ty, \"int/uint\";\n         Add (_) iadd;\n@@ -948,69 +961,79 @@ pub fn trans_checked_int_binop<'a, 'tcx: 'a>(\n \n     let lhs = in_lhs.load_scalar(fx);\n     let rhs = in_rhs.load_scalar(fx);\n-    let (res, has_overflow) = match bin_op {\n-        BinOp::Add => {\n-            /*let (val, c_out) = fx.bcx.ins().iadd_cout(lhs, rhs);\n-            (val, c_out)*/\n-            // FIXME(CraneStation/cranelift#849) legalize iadd_cout for i8 and i16\n-            let val = fx.bcx.ins().iadd(lhs, rhs);\n-            let has_overflow = if !signed {\n-                fx.bcx.ins().icmp(IntCC::UnsignedLessThan, val, lhs)\n-            } else {\n-                let rhs_is_negative = fx.bcx.ins().icmp_imm(IntCC::SignedLessThan, rhs, 0);\n-                let slt = fx.bcx.ins().icmp(IntCC::SignedLessThan, val, lhs);\n-                fx.bcx.ins().bxor(rhs_is_negative, slt)\n-            };\n-            (val, has_overflow)\n-        }\n-        BinOp::Sub => {\n-            /*let (val, b_out) = fx.bcx.ins().isub_bout(lhs, rhs);\n-            (val, b_out)*/\n-            // FIXME(CraneStation/cranelift#849) legalize isub_bout for i8 and i16\n-            let val = fx.bcx.ins().isub(lhs, rhs);\n-            let has_overflow = if !signed {\n-                fx.bcx.ins().icmp(IntCC::UnsignedGreaterThan, val, lhs)\n-            } else {\n-                let rhs_is_negative = fx.bcx.ins().icmp_imm(IntCC::SignedLessThan, rhs, 0);\n-                let sgt = fx.bcx.ins().icmp(IntCC::SignedGreaterThan, val, lhs);\n-                fx.bcx.ins().bxor(rhs_is_negative, sgt)\n-            };\n-            (val, has_overflow)\n-        }\n-        BinOp::Mul => {\n-            let val = fx.bcx.ins().imul(lhs, rhs);\n-            /*let val_hi = if !signed {\n-                fx.bcx.ins().umulhi(lhs, rhs)\n-            } else {\n-                fx.bcx.ins().smulhi(lhs, rhs)\n-            };\n-            let has_overflow = fx.bcx.ins().icmp_imm(IntCC::NotEqual, val_hi, 0);*/\n-            // TODO: check for overflow\n-            let has_overflow = fx.bcx.ins().bconst(types::B1, false);\n-            (val, has_overflow)\n-        }\n-        BinOp::Shl => {\n-            let val = fx.bcx.ins().ishl(lhs, rhs);\n-            // TODO: check for overflow\n-            let has_overflow = fx.bcx.ins().bconst(types::B1, false);\n-            (val, has_overflow)\n+    let (res, has_overflow) = if in_lhs.layout().ty == fx.tcx.types.u128 || in_lhs.layout().ty == fx.tcx.types.i128 {\n+        match (bin_op, signed) {\n+            _ => {\n+                let a = fx.bcx.ins().iconst(types::I64, 42);\n+                let b = fx.bcx.ins().iconst(types::I64, 0);\n+                (fx.bcx.ins().iconcat(a, b), fx.bcx.ins().bconst(types::B1, false))\n+            }\n         }\n-        BinOp::Shr => {\n-            let val = if !signed {\n-                fx.bcx.ins().ushr(lhs, rhs)\n-            } else {\n-                fx.bcx.ins().sshr(lhs, rhs)\n-            };\n-            // TODO: check for overflow\n-            let has_overflow = fx.bcx.ins().bconst(types::B1, false);\n-            (val, has_overflow)\n+    } else {\n+        match bin_op {\n+            BinOp::Add => {\n+                /*let (val, c_out) = fx.bcx.ins().iadd_cout(lhs, rhs);\n+                (val, c_out)*/\n+                // FIXME(CraneStation/cranelift#849) legalize iadd_cout for i8 and i16\n+                let val = fx.bcx.ins().iadd(lhs, rhs);\n+                let has_overflow = if !signed {\n+                    fx.bcx.ins().icmp(IntCC::UnsignedLessThan, val, lhs)\n+                } else {\n+                    let rhs_is_negative = fx.bcx.ins().icmp_imm(IntCC::SignedLessThan, rhs, 0);\n+                    let slt = fx.bcx.ins().icmp(IntCC::SignedLessThan, val, lhs);\n+                    fx.bcx.ins().bxor(rhs_is_negative, slt)\n+                };\n+                (val, has_overflow)\n+            }\n+            BinOp::Sub => {\n+                /*let (val, b_out) = fx.bcx.ins().isub_bout(lhs, rhs);\n+                (val, b_out)*/\n+                // FIXME(CraneStation/cranelift#849) legalize isub_bout for i8 and i16\n+                let val = fx.bcx.ins().isub(lhs, rhs);\n+                let has_overflow = if !signed {\n+                    fx.bcx.ins().icmp(IntCC::UnsignedGreaterThan, val, lhs)\n+                } else {\n+                    let rhs_is_negative = fx.bcx.ins().icmp_imm(IntCC::SignedLessThan, rhs, 0);\n+                    let sgt = fx.bcx.ins().icmp(IntCC::SignedGreaterThan, val, lhs);\n+                    fx.bcx.ins().bxor(rhs_is_negative, sgt)\n+                };\n+                (val, has_overflow)\n+            }\n+            BinOp::Mul => {\n+                let val = fx.bcx.ins().imul(lhs, rhs);\n+                /*let val_hi = if !signed {\n+                    fx.bcx.ins().umulhi(lhs, rhs)\n+                } else {\n+                    fx.bcx.ins().smulhi(lhs, rhs)\n+                };\n+                let has_overflow = fx.bcx.ins().icmp_imm(IntCC::NotEqual, val_hi, 0);*/\n+                // TODO: check for overflow\n+                let has_overflow = fx.bcx.ins().bconst(types::B1, false);\n+                (val, has_overflow)\n+            }\n+            BinOp::Shl => {\n+                let val = fx.bcx.ins().ishl(lhs, rhs);\n+                // TODO: check for overflow\n+                let has_overflow = fx.bcx.ins().bconst(types::B1, false);\n+                (val, has_overflow)\n+            }\n+            BinOp::Shr => {\n+                let val = if !signed {\n+                    fx.bcx.ins().ushr(lhs, rhs)\n+                } else {\n+                    fx.bcx.ins().sshr(lhs, rhs)\n+                };\n+                // TODO: check for overflow\n+                let has_overflow = fx.bcx.ins().bconst(types::B1, false);\n+                (val, has_overflow)\n+            }\n+            _ => bug!(\n+                \"binop {:?} on checked int/uint lhs: {:?} rhs: {:?}\",\n+                bin_op,\n+                in_lhs,\n+                in_rhs\n+            ),\n         }\n-        _ => bug!(\n-            \"binop {:?} on checked int/uint lhs: {:?} rhs: {:?}\",\n-            bin_op,\n-            in_lhs,\n-            in_rhs\n-        ),\n     };\n \n     let has_overflow = fx.bcx.ins().bint(types::I8, has_overflow);"}, {"sha": "30f343d02b25a786c8e8f03bf85925f48b2ac42e", "filename": "src/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de32ddad23abbc831ae60d5efefab0df84e8910b/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de32ddad23abbc831ae60d5efefab0df84e8910b/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=de32ddad23abbc831ae60d5efefab0df84e8910b", "patch": "@@ -28,15 +28,15 @@ pub fn clif_type_from_ty<'tcx>(\n             UintTy::U16 => types::I16,\n             UintTy::U32 => types::I32,\n             UintTy::U64 => types::I64,\n-            UintTy::U128 => unimpl!(\"u128\"),\n+            UintTy::U128 => types::I128,\n             UintTy::Usize => pointer_ty(tcx),\n         },\n         ty::Int(size) => match size {\n             IntTy::I8 => types::I8,\n             IntTy::I16 => types::I16,\n             IntTy::I32 => types::I32,\n             IntTy::I64 => types::I64,\n-            IntTy::I128 => unimpl!(\"i128\"),\n+            IntTy::I128 => types::I128,\n             IntTy::Isize => pointer_ty(tcx),\n         },\n         ty::Char => types::I32,"}, {"sha": "6bd82265bc1b344674e91bb36666a4e5c3471400", "filename": "src/value_and_place.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/de32ddad23abbc831ae60d5efefab0df84e8910b/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de32ddad23abbc831ae60d5efefab0df84e8910b/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=de32ddad23abbc831ae60d5efefab0df84e8910b", "patch": "@@ -34,6 +34,16 @@ enum CValueInner {\n     ByValPair(Value, Value),\n }\n \n+fn store_scalar<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>, value: Value, addr: Value, offset: i32) {\n+    if fx.bcx.func.dfg.value_type(value) == types::I128 {\n+        let (a, b) = fx.bcx.ins().isplit(value);\n+        fx.bcx.ins().store(MemFlags::new(), a, addr, offset);\n+        fx.bcx.ins().store(MemFlags::new(), b, addr, offset + 8);\n+    } else {\n+        fx.bcx.ins().store(MemFlags::new(), value, addr, offset);\n+    }\n+}\n+\n impl<'tcx> CValue<'tcx> {\n     pub fn by_ref(value: Value, layout: TyLayout<'tcx>) -> CValue<'tcx> {\n         CValue(CValueInner::ByRef(value), layout)\n@@ -147,7 +157,15 @@ impl<'tcx> CValue<'tcx> {\n     {\n         let clif_ty = fx.clif_type(ty).unwrap();\n         let layout = fx.layout_of(ty);\n-        CValue::by_val(fx.bcx.ins().iconst(clif_ty, const_val), layout)\n+        let val = if clif_ty == types::I128 {\n+            // FIXME don't assume little-endian arch\n+            let lsb = fx.bcx.ins().iconst(types::I64, const_val);\n+            let msb = fx.bcx.ins().iconst(types::I64, 0);\n+            fx.bcx.ins().iconcat(lsb, msb)\n+        } else {\n+            fx.bcx.ins().iconst(clif_ty, const_val)\n+        };\n+        CValue::by_val(val, layout)\n     }\n \n     pub fn unchecked_cast_to(self, layout: TyLayout<'tcx>) -> Self {\n@@ -343,15 +361,15 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n \n         match from.0 {\n             CValueInner::ByVal(val) => {\n-                fx.bcx.ins().store(MemFlags::new(), val, addr, 0);\n+                store_scalar(fx, val, addr, 0);\n             }\n             CValueInner::ByValPair(value, extra) => {\n                 match dst_layout.abi {\n                     Abi::ScalarPair(ref a_scalar, ref b_scalar) => {\n                         let b_offset = scalar_pair_calculate_b_offset(fx.tcx, a_scalar, b_scalar);\n-                        fx.bcx.ins().store(MemFlags::new(), value, addr, 0);\n-                        fx.bcx.ins().store(\n-                            MemFlags::new(),\n+                        store_scalar(fx, value, addr, 0);\n+                        store_scalar(\n+                            fx,\n                             extra,\n                             addr,\n                             b_offset,"}]}