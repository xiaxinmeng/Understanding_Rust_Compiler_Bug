{"sha": "c796a8f24dfa94a1614da70fbf25b63d3709a116", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3OTZhOGYyNGRmYTk0YTE2MTRkYTcwZmJmMjViNjNkMzcwOWExMTY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-29T22:11:20Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-29T22:14:55Z"}, "message": "Re-enable tidy (it was broken) and fix various non-tidy things.", "tree": {"sha": "14043d11f35f457ee9a09cabd7fdadb4669fa376", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14043d11f35f457ee9a09cabd7fdadb4669fa376"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c796a8f24dfa94a1614da70fbf25b63d3709a116", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c796a8f24dfa94a1614da70fbf25b63d3709a116", "html_url": "https://github.com/rust-lang/rust/commit/c796a8f24dfa94a1614da70fbf25b63d3709a116", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c796a8f24dfa94a1614da70fbf25b63d3709a116/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "190644063e7081fe715b01dc8d27daec509b6114", "url": "https://api.github.com/repos/rust-lang/rust/commits/190644063e7081fe715b01dc8d27daec509b6114", "html_url": "https://github.com/rust-lang/rust/commit/190644063e7081fe715b01dc8d27daec509b6114"}], "stats": {"total": 90, "additions": 51, "deletions": 39}, "files": [{"sha": "35040ae6b199ac9fbb6014b8b427053e3c3ab53f", "filename": "Makefile.in", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c796a8f24dfa94a1614da70fbf25b63d3709a116/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/c796a8f24dfa94a1614da70fbf25b63d3709a116/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=c796a8f24dfa94a1614da70fbf25b63d3709a116", "patch": "@@ -265,12 +265,11 @@ ifneq ($(findstring reformat,$(MAKECMDGOALS)),)\n   include $(CFG_SRC_DIR)/mk/pp.mk\n endif\n \n-ifneq ($(findstring check,$(MAKECMDGOALS)),)\n+ifneq ($(findstring check,$(MAKECMDGOALS))\\\n+       $(findstring test,$(MAKECMDGOALS))\\\n+       $(findstring tidy,$(MAKECMDGOALS)),)\n+  include $(CFG_SRC_DIR)/mk/dist.mk\n   include $(CFG_SRC_DIR)/mk/tests.mk\n-else\n-  ifneq ($(findstring test,$(MAKECMDGOALS)),)\n-    include $(CFG_SRC_DIR)/mk/tests.mk\n-  endif\n endif\n \n ifneq ($(findstring clean,$(MAKECMDGOALS)),)"}, {"sha": "c89e6f808a8efb8ccfbb175562e5390286a82dc1", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=c796a8f24dfa94a1614da70fbf25b63d3709a116", "patch": "@@ -375,7 +375,8 @@ fn truncated_sha1_result(sha1 sha) -> str {\n \n \n // This calculates STH for a symbol, as defined above\n-fn symbol_hash(ty::ctxt tcx, sha1 sha, &ty::t t, &link_meta link_meta) -> str {\n+fn symbol_hash(ty::ctxt tcx, sha1 sha, &ty::t t,\n+               &link_meta link_meta) -> str {\n     // NB: do *not* use abbrevs here as we want the symbol names\n     // to be independent of one another in the crate.\n "}, {"sha": "205ac5649df1eee05383a9b2e3de4016e8a98222", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=c796a8f24dfa94a1614da70fbf25b63d3709a116", "patch": "@@ -180,7 +180,8 @@ fn encode_type(&@crate_ctxt cx, &ebml::writer ebml_w, &ty::t typ) {\n     ebml::start_tag(ebml_w, tag_items_data_item_type);\n     auto f = def_to_str;\n     auto ty_str_ctxt =\n-        @rec(ds=f, tcx=cx.tcx, abbrevs=tyencode::ac_use_abbrevs(cx.type_abbrevs));\n+        @rec(ds=f, tcx=cx.tcx,\n+             abbrevs=tyencode::ac_use_abbrevs(cx.type_abbrevs));\n     tyencode::enc_ty(io::new_writer_(ebml_w.writer), ty_str_ctxt, typ);\n     ebml::end_tag(ebml_w);\n }\n@@ -346,7 +347,8 @@ fn encode_info_for_items(&@crate_ctxt cx, &ebml::writer ebml_w) ->\n    vec[tup(int, uint)] {\n     let vec[tup(int, uint)] index = [];\n     ebml::start_tag(ebml_w, tag_items_data);\n-    for each (@tup(node_id, middle::ast_map::ast_node) kvp in cx.ast_map.items()) {\n+    for each (@tup(node_id, middle::ast_map::ast_node) kvp in\n+              cx.ast_map.items()) {\n         alt (kvp._1) {\n             case (middle::ast_map::node_item(?i)) {\n                 index += [tup(kvp._0, ebml_w.writer.tell())];\n@@ -458,10 +460,10 @@ fn encode_attributes(&ebml::writer ebml_w, &vec[attribute] attrs) {\n     ebml::end_tag(ebml_w);\n }\n \n-// So there's a special crate attribute called 'link' which defines the metadata\n-// that Rust cares about for linking crates. This attribute requires name and\n-// value attributes, so if the user didn't provide them we will throw them in\n-// anyway with default values.\n+// So there's a special crate attribute called 'link' which defines the\n+// metadata that Rust cares about for linking crates. This attribute requires\n+// name and value attributes, so if the user didn't provide them we will throw\n+// them in anyway with default values.\n fn synthesize_crate_attrs(&@crate_ctxt cx,\n                           &@crate crate) -> vec[attribute] {\n "}, {"sha": "44a9240fd5b81d3ca192e7dd47529e351ddae854", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=c796a8f24dfa94a1614da70fbf25b63d3709a116", "patch": "@@ -631,7 +631,7 @@ fn find_pre_post_state_stmt(&fn_ctxt fcx, &prestate pres, @stmt s) -> bool {\n                             // let int = x; => x is uninit in poststate\n                             set_poststate_ann(fcx.ccx, id, pres);\n                             clear_in_poststate_ident(fcx, alocal.node.id,\n-                                                         alocal.node.ident, id);\n+                                                     alocal.node.ident, id);\n                             set_prestate(stmt_ann, pres);\n                             ret false;\n                         }"}, {"sha": "f669970898e53ee71e7b2b1b814d04bee0a36d6d", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=c796a8f24dfa94a1614da70fbf25b63d3709a116", "patch": "@@ -1528,7 +1528,8 @@ fn equal_type_structures(&sty a, &sty b) -> bool {\n                     auto len = vec::len[mt](mts_a);\n                     if (len != vec::len[mt](mts_b)) { ret false; }\n                     auto i = 0u;\n-                    while (i < len) {                        if (!equal_mt(mts_a.(i), mts_b.(i))) { ret false; }\n+                    while (i < len) {\n+                        if (!equal_mt(mts_a.(i), mts_b.(i))) { ret false; }\n                         i += 1u;\n                     }\n                     ret true;"}, {"sha": "2b84747046e0e5849cf9e13f76caf69c7438d469", "filename": "src/comp/middle/visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Fcomp%2Fmiddle%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Fcomp%2Fmiddle%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fvisit.rs?ref=c796a8f24dfa94a1614da70fbf25b63d3709a116", "patch": "@@ -134,7 +134,8 @@ fn visit_item[E](&@item i, &E e, &vt[E] v) {\n             alt (ob.dtor) {\n                 case (none) { }\n                 case (some(?m)) {\n-                    vt(v).visit_fn(m.node.meth, [], m.span, some(m.node.ident),\n+                    vt(v).visit_fn(m.node.meth, [], m.span,\n+                                   some(m.node.ident),\n                                    m.node.id, e, v);\n                 }\n             }"}, {"sha": "191ec7c5756a33632020df58a267e6a029b87f6a", "filename": "src/rt/circular_buffer.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Frt%2Fcircular_buffer.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Frt%2Fcircular_buffer.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fcircular_buffer.cpp?ref=c796a8f24dfa94a1614da70fbf25b63d3709a116", "patch": "@@ -154,7 +154,8 @@ void\n circular_buffer::shrink() {\n     size_t new_buffer_sz = _buffer_sz / 2;\n     I(sched, initial_size() <= new_buffer_sz);\n-    DLOG(sched, mem, \"circular_buffer is shrinking to %d bytes\", new_buffer_sz);\n+    DLOG(sched, mem, \"circular_buffer is shrinking to %d bytes\",\n+         new_buffer_sz);\n     void *new_buffer = task->malloc(new_buffer_sz);\n     transfer(new_buffer);\n     task->free(_buffer);"}, {"sha": "cdf20a40adcfecbc595b46d6d26f65af658a25d5", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=c796a8f24dfa94a1614da70fbf25b63d3709a116", "patch": "@@ -47,7 +47,8 @@ last_os_error(rust_task *task) {\n         task->fail(1);\n         return NULL;\n     }\n-    rust_str *st = new (mem) rust_str(sched, alloc, fill, (const uint8_t *)buf);\n+    rust_str *st = new (mem) rust_str(sched, alloc, fill,\n+                                      (const uint8_t *)buf);\n \n #ifdef __WIN32__\n     LocalFree((HLOCAL)buf);"}, {"sha": "a947a1c93e8e2fc2048819da146515d10b33a455", "filename": "src/rt/rust_chan.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Frt%2Frust_chan.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Frt%2Frust_chan.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_chan.cpp?ref=c796a8f24dfa94a1614da70fbf25b63d3709a116", "patch": "@@ -49,7 +49,8 @@ bool rust_chan::is_associated() {\n  * Unlink this channel from its associated port.\n  */\n void rust_chan::disassociate() {\n-    A(task->sched, is_associated(), \"Channel must be associated with a port.\");\n+    A(task->sched, is_associated(),\n+      \"Channel must be associated with a port.\");\n \n     if (port->is_proxy() == false) {\n         LOG(task, task,"}, {"sha": "8a75e1adcbcebb224e2423723f010f5e28f3fb00", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=c796a8f24dfa94a1614da70fbf25b63d3709a116", "patch": "@@ -52,7 +52,9 @@ rust_kernel::internal_get_sched_handle(rust_scheduler *sched) {\n     rust_handle<rust_scheduler> *handle = NULL;\n     if (_sched_handles.get(sched, &handle) == false) {\n         handle =\n-            new (this) rust_handle<rust_scheduler>(this, sched->message_queue, sched);\n+            new (this) rust_handle<rust_scheduler>(this,\n+                                                   sched->message_queue,\n+                                                   sched);\n         _sched_handles.put(sched, handle);\n     }\n     return handle;\n@@ -72,7 +74,8 @@ rust_kernel::get_task_handle(rust_task *task) {\n     rust_handle<rust_task> *handle = NULL;\n     if (_task_handles.get(task, &handle) == false) {\n         handle =\n-            new (this) rust_handle<rust_task>(this, task->sched->message_queue,\n+            new (this) rust_handle<rust_task>(this,\n+                                              task->sched->message_queue,\n                                               task);\n         _task_handles.put(task, handle);\n     }\n@@ -85,10 +88,10 @@ rust_kernel::get_port_handle(rust_port *port) {\n     _kernel_lock.lock();\n     rust_handle<rust_port> *handle = NULL;\n     if (_port_handles.get(port, &handle) == false) {\n-        handle =\n-            new (this) rust_handle<rust_port>(this,\n-                                              port->task->sched->message_queue,\n-                                              port);\n+        handle = new (this)\n+            rust_handle<rust_port>(this,\n+                                   port->task->sched->message_queue,\n+                                   port);\n         _port_handles.put(port, handle);\n     }\n     _kernel_lock.unlock();"}, {"sha": "841b8ec454a98ed99089f6602bc0b56a3b482fb1", "filename": "src/rt/rust_scheduler.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Frt%2Frust_scheduler.h", "raw_url": "https://github.com/rust-lang/rust/raw/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Frt%2Frust_scheduler.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.h?ref=c796a8f24dfa94a1614da70fbf25b63d3709a116", "patch": "@@ -26,7 +26,8 @@ rust_crate_cache\n     void flush();\n };\n \n-struct rust_scheduler : public kernel_owned<rust_scheduler>, rc_base<rust_scheduler>\n+struct rust_scheduler : public kernel_owned<rust_scheduler>,\n+                        rc_base<rust_scheduler>\n {\n     // Fields known to the compiler:\n     uintptr_t interrupt_flag;"}, {"sha": "d16691ee7caa833f09dccd7002bac1c01f997782", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=c796a8f24dfa94a1614da70fbf25b63d3709a116", "patch": "@@ -339,7 +339,8 @@ rust_str *make_str(rust_task *task, char const *s, size_t fill) {\n         task->fail(3);\n         return NULL;\n     }\n-    rust_str *st = new (mem) rust_str(sched, alloc, fill, (uint8_t const *) s);\n+    rust_str *st = new (mem) rust_str(sched, alloc, fill,\n+                                      (uint8_t const *) s);\n     LOG(task, mem,\n         \"upcall new_str('%s', %\" PRIdPTR \") = 0x%\" PRIxPTR,\n         s, fill, st);"}, {"sha": "fe9349914c2f2bd58f07c32d46c19d53ece059c2", "filename": "src/test/compile-fail/do-while-constraints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Ftest%2Fcompile-fail%2Fdo-while-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Ftest%2Fcompile-fail%2Fdo-while-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdo-while-constraints.rs?ref=c796a8f24dfa94a1614da70fbf25b63d3709a116", "patch": "@@ -8,9 +8,9 @@ fn main() {\n     log y;\n     do {\n       do {\n-\tdo {\n-\t  x <- y;\n-\t} while (true);\n+    do {\n+      x <- y;\n+    } while (true);\n       } while (true);\n     } while (true);\n   } while (true);"}, {"sha": "119b26322035b4c576baa21c9450e6acf3826f51", "filename": "src/test/compile-fail/do-while-pred-constraints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Ftest%2Fcompile-fail%2Fdo-while-pred-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Ftest%2Fcompile-fail%2Fdo-while-pred-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdo-while-pred-constraints.rs?ref=c796a8f24dfa94a1614da70fbf25b63d3709a116", "patch": "@@ -17,9 +17,9 @@ fn main() {\n     print_even(y);\n     do {\n       do {\n-\tdo {\n-\t  y += 1;\n-\t} while (true);\n+    do {\n+      y += 1;\n+    } while (true);\n       } while (true);\n     } while (true);\n   } while (true);"}, {"sha": "cd88ac1e0cdd8bf815885761cf00a5b39a3875a7", "filename": "src/test/compile-fail/use-meta.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Ftest%2Fcompile-fail%2Fuse-meta.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Ftest%2Fcompile-fail%2Fuse-meta.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-meta.rc?ref=c796a8f24dfa94a1614da70fbf25b63d3709a116", "patch": "@@ -1,4 +1,4 @@\n // error-pattern:can't find crate for 'std'\n \n use std (name = \"std\",\n-\t vers = \"bogus\");\n\\ No newline at end of file\n+         vers = \"bogus\");\n\\ No newline at end of file"}, {"sha": "4c97aae704256b2864d8ccd35914c2eafe2006bd", "filename": "src/test/compile-fail/while-loop-constraints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Ftest%2Fcompile-fail%2Fwhile-loop-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Ftest%2Fcompile-fail%2Fwhile-loop-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhile-loop-constraints.rs?ref=c796a8f24dfa94a1614da70fbf25b63d3709a116", "patch": "@@ -8,9 +8,9 @@ fn main() {\n     log y;\n     while (true) {\n       while (true) {\n-\twhile (true) {\n-\t  x <- y;\n-\t}\n+    while (true) {\n+      x <- y;\n+    }\n       }\n     }\n   }"}, {"sha": "3908004b68879f6d13630a77ac68e71d1ef37b75", "filename": "src/test/compile-fail/while-loop-pred-constraints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Ftest%2Fcompile-fail%2Fwhile-loop-pred-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c796a8f24dfa94a1614da70fbf25b63d3709a116/src%2Ftest%2Fcompile-fail%2Fwhile-loop-pred-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhile-loop-pred-constraints.rs?ref=c796a8f24dfa94a1614da70fbf25b63d3709a116", "patch": "@@ -18,9 +18,9 @@ fn main() {\n     print_even(y);\n     while (true) {\n       while (true) {\n-\twhile (true) {\n-\t  y += x;\n-\t}\n+    while (true) {\n+      y += x;\n+    }\n       }\n     }\n   }"}]}