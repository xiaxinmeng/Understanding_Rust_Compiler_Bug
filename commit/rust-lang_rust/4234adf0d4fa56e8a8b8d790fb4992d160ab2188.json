{"sha": "4234adf0d4fa56e8a8b8d790fb4992d160ab2188", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMzRhZGYwZDRmYTU2ZThhOGI4ZDc5MGZiNDk5MmQxNjBhYjIxODg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-28T18:41:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-28T18:41:40Z"}, "message": "Auto merge of #52546 - nikomatsakis:issue-52050, r=pnkfelix\n\ndo not overwrite child def-id in place but rather remove/insert\n\nWhen inserting a node N into the tree of impls, we sometimes find than an existing node C should be replaced with N. We used to overwrite C in place with the new def-id N -- but since the lists of def-ids are separated by simplified type, that could lead to N being inserted in the wrong place. This meant we might miss conflicts. We are now not trying to be so smart -- we remove C and then add N later.\n\nFixes #52050\n\nr? @aturon -- do you still remember this code at all? :)", "tree": {"sha": "0ea5c0f9148aed2cec8ace0b78456b90d9c20596", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ea5c0f9148aed2cec8ace0b78456b90d9c20596"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4234adf0d4fa56e8a8b8d790fb4992d160ab2188", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4234adf0d4fa56e8a8b8d790fb4992d160ab2188", "html_url": "https://github.com/rust-lang/rust/commit/4234adf0d4fa56e8a8b8d790fb4992d160ab2188", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4234adf0d4fa56e8a8b8d790fb4992d160ab2188/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d75458200516f06455d175adc001fd993d674050", "url": "https://api.github.com/repos/rust-lang/rust/commits/d75458200516f06455d175adc001fd993d674050", "html_url": "https://github.com/rust-lang/rust/commit/d75458200516f06455d175adc001fd993d674050"}, {"sha": "4fd5aed55132eb4a65464c5018c106614d8d5504", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fd5aed55132eb4a65464c5018c106614d8d5504", "html_url": "https://github.com/rust-lang/rust/commit/4fd5aed55132eb4a65464c5018c106614d8d5504"}], "stats": {"total": 143, "additions": 121, "deletions": 22}, "files": [{"sha": "02bfab033efc864150beb2562359bbcb891eb6b8", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4234adf0d4fa56e8a8b8d790fb4992d160ab2188/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4234adf0d4fa56e8a8b8d790fb4992d160ab2188/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=4234adf0d4fa56e8a8b8d790fb4992d160ab2188", "patch": "@@ -59,7 +59,7 @@ where\n     F1: FnOnce(OverlapResult<'_>) -> R,\n     F2: FnOnce() -> R,\n {\n-    debug!(\"impl_can_satisfy(\\\n+    debug!(\"overlapping_impls(\\\n            impl1_def_id={:?}, \\\n            impl2_def_id={:?},\n            intercrate_mode={:?})\","}, {"sha": "f9c0581d3ca377223cb90a51e096c0c3426c1dd5", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 78, "deletions": 21, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/4234adf0d4fa56e8a8b8d790fb4992d160ab2188/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4234adf0d4fa56e8a8b8d790fb4992d160ab2188/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=4234adf0d4fa56e8a8b8d790fb4992d160ab2188", "patch": "@@ -73,8 +73,8 @@ enum Inserted {\n     /// The impl was inserted as a new child in this group of children.\n     BecameNewSibling(Option<OverlapError>),\n \n-    /// The impl replaced an existing impl that specializes it.\n-    Replaced(DefId),\n+    /// The impl should replace an existing impl X, because the impl specializes X.\n+    ReplaceChild(DefId),\n \n     /// The impl is a specialization of an existing child.\n     ShouldRecurseOn(DefId),\n@@ -94,12 +94,34 @@ impl<'a, 'gcx, 'tcx> Children {\n                       impl_def_id: DefId) {\n         let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n         if let Some(sty) = fast_reject::simplify_type(tcx, trait_ref.self_ty(), false) {\n+            debug!(\"insert_blindly: impl_def_id={:?} sty={:?}\", impl_def_id, sty);\n             self.nonblanket_impls.entry(sty).or_insert(vec![]).push(impl_def_id)\n         } else {\n+            debug!(\"insert_blindly: impl_def_id={:?} sty=None\", impl_def_id);\n             self.blanket_impls.push(impl_def_id)\n         }\n     }\n \n+    /// Remove an impl from this set of children. Used when replacing\n+    /// an impl with a parent. The impl must be present in the list of\n+    /// children already.\n+    fn remove_existing(&mut self,\n+                      tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+                      impl_def_id: DefId) {\n+        let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n+        let vec: &mut Vec<DefId>;\n+        if let Some(sty) = fast_reject::simplify_type(tcx, trait_ref.self_ty(), false) {\n+            debug!(\"remove_existing: impl_def_id={:?} sty={:?}\", impl_def_id, sty);\n+            vec = self.nonblanket_impls.get_mut(&sty).unwrap();\n+        } else {\n+            debug!(\"remove_existing: impl_def_id={:?} sty=None\", impl_def_id);\n+            vec = &mut self.blanket_impls;\n+        }\n+\n+        let index = vec.iter().position(|d| *d == impl_def_id).unwrap();\n+        vec.remove(index);\n+    }\n+\n     /// Attempt to insert an impl into this set of children, while comparing for\n     /// specialization relationships.\n     fn insert(&mut self,\n@@ -110,11 +132,22 @@ impl<'a, 'gcx, 'tcx> Children {\n     {\n         let mut last_lint = None;\n \n-        for slot in match simplified_self {\n-            Some(sty) => self.filtered_mut(sty),\n-            None => self.iter_mut(),\n+        debug!(\n+            \"insert(impl_def_id={:?}, simplified_self={:?})\",\n+            impl_def_id,\n+            simplified_self,\n+        );\n+\n+        for possible_sibling in match simplified_self {\n+            Some(sty) => self.filtered(sty),\n+            None => self.iter(),\n         } {\n-            let possible_sibling = *slot;\n+            debug!(\n+                \"insert: impl_def_id={:?}, simplified_self={:?}, possible_sibling={:?}\",\n+                impl_def_id,\n+                simplified_self,\n+                possible_sibling,\n+            );\n \n             let overlap_error = |overlap: traits::coherence::OverlapResult| {\n                 // overlap, but no specialization; error out\n@@ -168,9 +201,7 @@ impl<'a, 'gcx, 'tcx> Children {\n                 debug!(\"placing as parent of TraitRef {:?}\",\n                        tcx.impl_trait_ref(possible_sibling).unwrap());\n \n-                    // possible_sibling specializes the impl\n-                    *slot = impl_def_id;\n-                return Ok(Inserted::Replaced(possible_sibling));\n+                return Ok(Inserted::ReplaceChild(possible_sibling));\n             } else {\n                 if !tcx.impls_are_allowed_to_overlap(impl_def_id, possible_sibling) {\n                     traits::overlapping_impls(\n@@ -193,15 +224,14 @@ impl<'a, 'gcx, 'tcx> Children {\n         Ok(Inserted::BecameNewSibling(last_lint))\n     }\n \n-    fn iter_mut(&'a mut self) -> Box<dyn Iterator<Item = &'a mut DefId> + 'a> {\n-        let nonblanket = self.nonblanket_impls.iter_mut().flat_map(|(_, v)| v.iter_mut());\n-        Box::new(self.blanket_impls.iter_mut().chain(nonblanket))\n+    fn iter(&mut self) -> Box<dyn Iterator<Item = DefId> + '_> {\n+        let nonblanket = self.nonblanket_impls.iter_mut().flat_map(|(_, v)| v.iter());\n+        Box::new(self.blanket_impls.iter().chain(nonblanket).cloned())\n     }\n \n-    fn filtered_mut(&'a mut self, sty: SimplifiedType)\n-                    -> Box<dyn Iterator<Item = &'a mut DefId> + 'a> {\n-        let nonblanket = self.nonblanket_impls.entry(sty).or_insert(vec![]).iter_mut();\n-        Box::new(self.blanket_impls.iter_mut().chain(nonblanket))\n+    fn filtered(&mut self, sty: SimplifiedType) -> Box<dyn Iterator<Item = DefId> + '_> {\n+        let nonblanket = self.nonblanket_impls.entry(sty).or_insert(vec![]).iter();\n+        Box::new(self.blanket_impls.iter().chain(nonblanket).cloned())\n     }\n }\n \n@@ -259,11 +289,38 @@ impl<'a, 'gcx, 'tcx> Graph {\n                     last_lint = opt_lint;\n                     break;\n                 }\n-                Replaced(new_child) => {\n-                    self.parent.insert(new_child, impl_def_id);\n-                    let mut new_children = Children::new();\n-                    new_children.insert_blindly(tcx, new_child);\n-                    self.children.insert(impl_def_id, new_children);\n+                ReplaceChild(grand_child_to_be) => {\n+                    // We currently have\n+                    //\n+                    //     P\n+                    //     |\n+                    //     G\n+                    //\n+                    // and we are inserting the impl N. We want to make it:\n+                    //\n+                    //     P\n+                    //     |\n+                    //     N\n+                    //     |\n+                    //     G\n+\n+                    // Adjust P's list of children: remove G and then add N.\n+                    {\n+                        let siblings = self.children\n+                            .get_mut(&parent)\n+                            .unwrap();\n+                        siblings.remove_existing(tcx, grand_child_to_be);\n+                        siblings.insert_blindly(tcx, impl_def_id);\n+                    }\n+\n+                    // Set G's parent to N and N's parent to P\n+                    self.parent.insert(grand_child_to_be, impl_def_id);\n+                    self.parent.insert(impl_def_id, parent);\n+\n+                    // Add G as N's child.\n+                    let mut grand_children = Children::new();\n+                    grand_children.insert_blindly(tcx, grand_child_to_be);\n+                    self.children.insert(impl_def_id, grand_children);\n                     break;\n                 }\n                 ShouldRecurseOn(new_parent) => {"}, {"sha": "70cdb4899c421dea7515e3d5fba720356b5541cf", "filename": "src/test/compile-fail/specialization/issue-52050.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4234adf0d4fa56e8a8b8d790fb4992d160ab2188/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fissue-52050.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4234adf0d4fa56e8a8b8d790fb4992d160ab2188/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fissue-52050.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspecialization%2Fissue-52050.rs?ref=4234adf0d4fa56e8a8b8d790fb4992d160ab2188", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(specialization)]\n+\n+// Regression test for #52050: when inserting the blanket impl `I`\n+// into the tree, we had to replace the child node for `Foo`, which\n+// led to the struture of the tree being messed up.\n+\n+use std::iter::Iterator;\n+\n+trait IntoPyDictPointer { }\n+\n+struct Foo { }\n+\n+impl Iterator for Foo {\n+    type Item = ();\n+    fn next(&mut self) -> Option<()> {\n+        None\n+    }\n+}\n+\n+impl IntoPyDictPointer for Foo { }\n+\n+impl<I> IntoPyDictPointer for I\n+where\n+    I: Iterator,\n+{\n+}\n+\n+impl IntoPyDictPointer for () //~ ERROR conflicting implementations\n+{\n+}\n+\n+fn main() { }"}]}