{"sha": "16acf7d618e13c8446a359fa6728878d375ae26e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2YWNmN2Q2MThlMTNjODQ0NmEzNTlmYTY3Mjg4NzhkMzc1YWUyNmU=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-02-28T16:34:01Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-04-03T16:22:19Z"}, "message": "use check_path instead of check_expr", "tree": {"sha": "0041078275956b7b501492f24e6baa8b32d46181", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0041078275956b7b501492f24e6baa8b32d46181"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16acf7d618e13c8446a359fa6728878d375ae26e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAlyk3bsACgkQaTCGhp1Q\nZjcwuxAAs5eFTAMtfIlUMJyBygc+gcO3Wa5QtKRhDIbehmVadsOGAeUb9unJwDYr\n01X4aMFlzIz3mjyQ3QvdhZW5v3BHPILLB9igNSZka6jqHpGfY0xVZOYlFK/XFPbW\nDmc9sT3k4uZ8tPC1HjjxvItEMZzq6B+TmwiI2aqlo/9ooy+gP1BcHJVVcfmOE3vp\n3OR3keZJcRQD3Ws67E5+1UHN+3QqLapt5+AoUZjXxxRO5HWvgVo1H+EA24qJsKSS\nMeleh2L2jLBnRDWEqb9GG/EKdvIWA6kOxGfWwvov529l3kZ0oLn+lbV9xi08mJeM\ntQ68D4NWO54hxnl34uZE+DJ3fRd5q2qtml7ZbJyYQ+gfciIiv57PDmIN4Q+Ar7Ke\njBuEjwuDmQemvY/D3K5orCSNfvNU8sHJoa3+NTUc3vHK8hEb0PfRMNnnq3x3zrJ4\nD50LDW+L9U9PMkpHLtYNiLFdikw991uF70gM4mVrdhA9Mn4aTjnQC4G2YzdAWpRb\nrUR8UOaCPtENLJCeIAGeM/9egh1ZCFvrsrxFQCtU6mLHImCqdQMPPfXnGbjzYRTF\nUr6IvJDqqRWKvuXLoMyeJX/E4kLPzJFlx70kvH9/83RA6120+SLHC3SX7IAqUhbF\nQSeD90HBguQiEf0WHa+gUvE4I3KLDqRVcc7Gs9n1lDJV04bTQ7Y=\n=wR27\n-----END PGP SIGNATURE-----", "payload": "tree 0041078275956b7b501492f24e6baa8b32d46181\nparent 157e7974afa53a28804752d209c70738d10b093b\nauthor flip1995 <hello@philkrones.com> 1551371641 +0100\ncommitter flip1995 <hello@philkrones.com> 1554308539 +0200\n\nuse check_path instead of check_expr\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16acf7d618e13c8446a359fa6728878d375ae26e", "html_url": "https://github.com/rust-lang/rust/commit/16acf7d618e13c8446a359fa6728878d375ae26e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16acf7d618e13c8446a359fa6728878d375ae26e/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "157e7974afa53a28804752d209c70738d10b093b", "url": "https://api.github.com/repos/rust-lang/rust/commits/157e7974afa53a28804752d209c70738d10b093b", "html_url": "https://github.com/rust-lang/rust/commit/157e7974afa53a28804752d209c70738d10b093b"}], "stats": {"total": 76, "additions": 27, "deletions": 49}, "files": [{"sha": "8314bf7ae9d6ebf286f5531aa2d55df08cb7321b", "filename": "src/librustc/lint/internal.rs", "status": "modified", "additions": 27, "deletions": 49, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/16acf7d618e13c8446a359fa6728878d375ae26e/src%2Flibrustc%2Flint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16acf7d618e13c8446a359fa6728878d375ae26e/src%2Flibrustc%2Flint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Finternal.rs?ref=16acf7d618e13c8446a359fa6728878d375ae26e", "patch": "@@ -1,7 +1,7 @@\n //! Some lints that are only useful in the compiler or crates that use compiler internals, such as\n //! Clippy.\n \n-use crate::hir::{Expr, ExprKind, PatKind, Path, QPath, Ty, TyKind};\n+use crate::hir::{HirId, Path, QPath, Ty, TyKind};\n use crate::lint::{\n     EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintArray, LintContext, LintPass,\n };\n@@ -81,56 +81,34 @@ impl LintPass for TyKindUsage {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TyKindUsage {\n-    fn check_expr(&mut self, cx: &LateContext<'_, '_>, expr: &'tcx Expr) {\n-        let qpaths = match &expr.node {\n-            ExprKind::Match(_, arms, _) => {\n-                let mut qpaths = vec![];\n-                for arm in arms {\n-                    for pat in &arm.pats {\n-                        match &pat.node {\n-                            PatKind::Path(qpath) | PatKind::TupleStruct(qpath, ..) => {\n-                                qpaths.push(qpath)\n-                            }\n-                            _ => (),\n-                        }\n-                    }\n-                }\n-                qpaths\n-            }\n-            ExprKind::Path(qpath) => vec![qpath],\n-            _ => vec![],\n-        };\n-        for qpath in qpaths {\n-            if let QPath::Resolved(_, path) = qpath {\n-                let segments_iter = path.segments.iter().rev().skip(1).rev();\n+    fn check_path(&mut self, cx: &LateContext<'_, '_>, path: &'tcx Path, _: HirId) {\n+        let segments_iter = path.segments.iter().rev().skip(1).rev();\n \n-                if let Some(last) = segments_iter.clone().last() {\n-                    if last.ident.as_str() == \"TyKind\" {\n-                        let path = Path {\n-                            span: path.span.with_hi(last.ident.span.hi()),\n-                            def: path.def,\n-                            segments: segments_iter.cloned().collect(),\n-                        };\n+        if let Some(last) = segments_iter.clone().last() {\n+            if last.ident.as_str() == \"TyKind\" {\n+                let path = Path {\n+                    span: path.span.with_hi(last.ident.span.hi()),\n+                    def: path.def,\n+                    segments: segments_iter.cloned().collect(),\n+                };\n \n-                        if let Some(def) = last.def {\n-                            if def\n-                                .def_id()\n-                                .match_path(cx.tcx, &[\"rustc\", \"ty\", \"sty\", \"TyKind\"])\n-                            {\n-                                cx.struct_span_lint(\n-                                    USAGE_OF_TY_TYKIND,\n-                                    path.span,\n-                                    \"usage of `ty::TyKind::<kind>`\",\n-                                )\n-                                .span_suggestion(\n-                                    path.span,\n-                                    \"try using ty::<kind> directly\",\n-                                    \"ty\".to_string(),\n-                                    Applicability::MaybeIncorrect, // ty maybe needs an import\n-                                )\n-                                .emit();\n-                            }\n-                        }\n+                if let Some(def) = last.def {\n+                    if def\n+                        .def_id()\n+                        .match_path(cx.tcx, &[\"rustc\", \"ty\", \"sty\", \"TyKind\"])\n+                    {\n+                        cx.struct_span_lint(\n+                            USAGE_OF_TY_TYKIND,\n+                            path.span,\n+                            \"usage of `ty::TyKind::<kind>`\",\n+                        )\n+                        .span_suggestion(\n+                            path.span,\n+                            \"try using ty::<kind> directly\",\n+                            \"ty\".to_string(),\n+                            Applicability::MaybeIncorrect, // ty maybe needs an import\n+                        )\n+                        .emit();\n                     }\n                 }\n             }"}]}