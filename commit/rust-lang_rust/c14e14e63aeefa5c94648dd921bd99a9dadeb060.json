{"sha": "c14e14e63aeefa5c94648dd921bd99a9dadeb060", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNGUxNGU2M2FlZWZhNWM5NDY0OGRkOTIxYmQ5OWE5ZGFkZWIwNjA=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-08-09T18:13:26Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-08-09T18:13:26Z"}, "message": "std: more windows fixes to os.rs and run.rs", "tree": {"sha": "b18a448b0e9fca7f8fc655a8d8792ad6aaa23e7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b18a448b0e9fca7f8fc655a8d8792ad6aaa23e7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c14e14e63aeefa5c94648dd921bd99a9dadeb060", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c14e14e63aeefa5c94648dd921bd99a9dadeb060", "html_url": "https://github.com/rust-lang/rust/commit/c14e14e63aeefa5c94648dd921bd99a9dadeb060", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c14e14e63aeefa5c94648dd921bd99a9dadeb060/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56730c094cf95be58fb05b0e423673aca2a98b88", "url": "https://api.github.com/repos/rust-lang/rust/commits/56730c094cf95be58fb05b0e423673aca2a98b88", "html_url": "https://github.com/rust-lang/rust/commit/56730c094cf95be58fb05b0e423673aca2a98b88"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "365ddeb4f64d8aa88f93753199f9b15bb523c9fd", "filename": "src/libstd/os.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c14e14e63aeefa5c94648dd921bd99a9dadeb060/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14e14e63aeefa5c94648dd921bd99a9dadeb060/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=c14e14e63aeefa5c94648dd921bd99a9dadeb060", "patch": "@@ -640,7 +640,7 @@ pub fn make_dir(p: &Path, mode: c_int) -> bool {\n             use os::win32::as_utf16_p;\n             // FIXME: turn mode into something useful? #2623\n             do as_utf16_p(p.to_str()) |buf| {\n-                libc::CreateDirectoryW(buf, ptr::null() as LPCWSTR)\n+                libc::CreateDirectoryW(buf, ptr::mut_null())\n                     != (0 as libc::BOOL)\n             }\n         }\n@@ -1080,8 +1080,8 @@ pub fn last_os_error() -> ~str {\n \n         let mut buf = [0 as c_char, ..TMPBUF_SZ];\n \n-        do buf.as_mut_buf |buf, len| {\n-            unsafe {\n+        unsafe {\n+            do buf.as_mut_buf |buf, len| {\n                 let res = FormatMessageA(FORMAT_MESSAGE_FROM_SYSTEM |\n                                          FORMAT_MESSAGE_IGNORE_INSERTS,\n                                          ptr::mut_null(),\n@@ -1093,7 +1093,9 @@ pub fn last_os_error() -> ~str {\n                 if res == 0 {\n                     fail!(\"[%?] FormatMessage failure\", errno());\n                 }\n+            }\n \n+            do buf.as_imm_buf |buf, _len| {\n                 str::raw::from_c_str(buf)\n             }\n         }"}, {"sha": "23ee52389a09308b9d88e1c3fd7813a82e4ede4f", "filename": "src/libstd/run.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c14e14e63aeefa5c94648dd921bd99a9dadeb060/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14e14e63aeefa5c94648dd921bd99a9dadeb060/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=c14e14e63aeefa5c94648dd921bd99a9dadeb060", "patch": "@@ -25,7 +25,6 @@ use prelude::*;\n use ptr;\n use task;\n use vec::ImmutableVector;\n-use vec;\n \n /**\n  * A value representing a child process.\n@@ -691,6 +690,8 @@ fn spawn_process_os(prog: &str, args: &[~str],\n \n #[cfg(unix)]\n fn with_argv<T>(prog: &str, args: &[~str], cb: &fn(**libc::c_char) -> T) -> T {\n+    use vec;\n+\n     // We can't directly convert `str`s into `*char`s, as someone needs to hold\n     // a reference to the intermediary byte buffers. So first build an array to\n     // hold all the ~[u8] byte strings.\n@@ -717,6 +718,8 @@ fn with_argv<T>(prog: &str, args: &[~str], cb: &fn(**libc::c_char) -> T) -> T {\n \n #[cfg(unix)]\n fn with_envp<T>(env: Option<&[(~str, ~str)]>, cb: &fn(*c_void) -> T) -> T {\n+    use vec;\n+\n     // On posixy systems we can pass a char** for envp, which is a\n     // null-terminated array of \"k=v\\n\" strings. Like `with_argv`, we have to\n     // have a temporary buffer to hold the intermediary `~[u8]` byte strings."}]}