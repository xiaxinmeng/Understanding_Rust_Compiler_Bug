{"sha": "c9989a524caa3379aac4f451a452c7ac9b247ae8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5OTg5YTUyNGNhYTMzNzlhYWM0ZjQ1MWE0NTJjN2FjOWIyNDdhZTg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-17T08:52:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-17T08:52:45Z"}, "message": "Merge #3153\n\n3153: When a single test is run, do not run others with overlapping names r=matklad a=SomeoneToIgnore\n\n\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "28029f0406b5c5d734a36a515d1d036cc0b59333", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28029f0406b5c5d734a36a515d1d036cc0b59333"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9989a524caa3379aac4f451a452c7ac9b247ae8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeSlRdCRBK7hj4Ov3rIwAAdHIIAFqKii5G0rTR94f6vV6OQYtT\n8+QydBO7i6W3W6ihfcigFu1HCtpyjOpGqMNEdo0QzQ1vU8ZjDWlntnK8smuEagLg\n2cMTGY2IUzhnnrSlL0PJyHizhbXhEnrJ+v2EMDaktlLnNSvoPoyAmEMIFRB6D/rH\nAp0cR1li3YJL3OleUvRpIZm5rTYWoqqs4aoJfjcDlfzsCwxvaeIkw8kpQaD8LtZH\nn2XFDTqGe2PH2Ohht6Qcbw9Env8CgeRFInOdmsd3ouj8QplCkVO6u2cFPINy0TMG\nsePZEnmy0la+A25vyfO88OCSJ3pVlyx6b+ONoBdeUwxovlKAvvFqVo9zSIe5Acc=\n=RW78\n-----END PGP SIGNATURE-----\n", "payload": "tree 28029f0406b5c5d734a36a515d1d036cc0b59333\nparent dd8fc5a61adf557afa2cd971039be10a83f6d503\nparent f0338cea5b3a214fe5e72eec68670b161530e1a6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1581929565 +0000\ncommitter GitHub <noreply@github.com> 1581929565 +0000\n\nMerge #3153\n\n3153: When a single test is run, do not run others with overlapping names r=matklad a=SomeoneToIgnore\n\n\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9989a524caa3379aac4f451a452c7ac9b247ae8", "html_url": "https://github.com/rust-lang/rust/commit/c9989a524caa3379aac4f451a452c7ac9b247ae8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9989a524caa3379aac4f451a452c7ac9b247ae8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd8fc5a61adf557afa2cd971039be10a83f6d503", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd8fc5a61adf557afa2cd971039be10a83f6d503", "html_url": "https://github.com/rust-lang/rust/commit/dd8fc5a61adf557afa2cd971039be10a83f6d503"}, {"sha": "f0338cea5b3a214fe5e72eec68670b161530e1a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0338cea5b3a214fe5e72eec68670b161530e1a6", "html_url": "https://github.com/rust-lang/rust/commit/f0338cea5b3a214fe5e72eec68670b161530e1a6"}], "stats": {"total": 133, "additions": 100, "deletions": 33}, "files": [{"sha": "9d66c365b1e7a4223f22eb1e6d385648cb7f4f18", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9989a524caa3379aac4f451a452c7ac9b247ae8/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9989a524caa3379aac4f451a452c7ac9b247ae8/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=c9989a524caa3379aac4f451a452c7ac9b247ae8", "patch": "@@ -71,7 +71,7 @@ pub use crate::{\n     references::{\n         Declaration, Reference, ReferenceAccess, ReferenceKind, ReferenceSearchResult, SearchScope,\n     },\n-    runnables::{Runnable, RunnableKind},\n+    runnables::{Runnable, RunnableKind, TestId},\n     source_change::{FileSystemEdit, SourceChange, SourceFileEdit},\n     syntax_highlighting::HighlightedRange,\n };"}, {"sha": "be2a67d0aeff81bc0f07ac3fa8e3808ebabce1f1", "filename": "crates/ra_ide/src/runnables.rs", "status": "modified", "additions": 85, "deletions": 24, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/c9989a524caa3379aac4f451a452c7ac9b247ae8/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9989a524caa3379aac4f451a452c7ac9b247ae8/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Frunnables.rs?ref=c9989a524caa3379aac4f451a452c7ac9b247ae8", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use hir::InFile;\n+use hir::{InFile, SourceBinder};\n use itertools::Itertools;\n use ra_db::SourceDatabase;\n use ra_ide_db::RootDatabase;\n@@ -10,46 +10,93 @@ use ra_syntax::{\n };\n \n use crate::FileId;\n+use std::fmt::Display;\n \n #[derive(Debug)]\n pub struct Runnable {\n     pub range: TextRange,\n     pub kind: RunnableKind,\n }\n \n+#[derive(Debug)]\n+pub enum TestId {\n+    Name(String),\n+    Path(String),\n+}\n+\n+impl Display for TestId {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        match self {\n+            TestId::Name(name) => write!(f, \"{}\", name),\n+            TestId::Path(path) => write!(f, \"{}\", path),\n+        }\n+    }\n+}\n+\n #[derive(Debug)]\n pub enum RunnableKind {\n-    Test { name: String },\n+    Test { test_id: TestId },\n     TestMod { path: String },\n-    Bench { name: String },\n+    Bench { test_id: TestId },\n     Bin,\n }\n \n pub(crate) fn runnables(db: &RootDatabase, file_id: FileId) -> Vec<Runnable> {\n     let parse = db.parse(file_id);\n-    parse.tree().syntax().descendants().filter_map(|i| runnable(db, file_id, i)).collect()\n+    let mut sb = SourceBinder::new(db);\n+    parse.tree().syntax().descendants().filter_map(|i| runnable(db, &mut sb, file_id, i)).collect()\n }\n \n-fn runnable(db: &RootDatabase, file_id: FileId, item: SyntaxNode) -> Option<Runnable> {\n+fn runnable(\n+    db: &RootDatabase,\n+    source_binder: &mut SourceBinder<RootDatabase>,\n+    file_id: FileId,\n+    item: SyntaxNode,\n+) -> Option<Runnable> {\n     match_ast! {\n         match item {\n-            ast::FnDef(it) => { runnable_fn(it) },\n-            ast::Module(it) => { runnable_mod(db, file_id, it) },\n+            ast::FnDef(it) => { runnable_fn(db, source_binder, file_id, it) },\n+            ast::Module(it) => { runnable_mod(db, source_binder, file_id, it) },\n             _ => { None },\n         }\n     }\n }\n \n-fn runnable_fn(fn_def: ast::FnDef) -> Option<Runnable> {\n-    let name = fn_def.name()?.text().clone();\n-    let kind = if name == \"main\" {\n+fn runnable_fn(\n+    db: &RootDatabase,\n+    source_binder: &mut SourceBinder<RootDatabase>,\n+    file_id: FileId,\n+    fn_def: ast::FnDef,\n+) -> Option<Runnable> {\n+    let name_string = fn_def.name()?.text().to_string();\n+\n+    let kind = if name_string == \"main\" {\n         RunnableKind::Bin\n-    } else if has_test_related_attribute(&fn_def) {\n-        RunnableKind::Test { name: name.to_string() }\n-    } else if fn_def.has_atom_attr(\"bench\") {\n-        RunnableKind::Bench { name: name.to_string() }\n     } else {\n-        return None;\n+        let test_id = if let Some(module) = source_binder\n+            .to_def(InFile::new(file_id.into(), fn_def.clone()))\n+            .map(|def| def.module(db))\n+        {\n+            let path = module\n+                .path_to_root(db)\n+                .into_iter()\n+                .rev()\n+                .filter_map(|it| it.name(db))\n+                .map(|name| name.to_string())\n+                .chain(std::iter::once(name_string))\n+                .join(\"::\");\n+            TestId::Path(path)\n+        } else {\n+            TestId::Name(name_string)\n+        };\n+\n+        if has_test_related_attribute(&fn_def) {\n+            RunnableKind::Test { test_id }\n+        } else if fn_def.has_atom_attr(\"bench\") {\n+            RunnableKind::Bench { test_id }\n+        } else {\n+            return None;\n+        }\n     };\n     Some(Runnable { range: fn_def.syntax().text_range(), kind })\n }\n@@ -68,21 +115,25 @@ fn has_test_related_attribute(fn_def: &ast::FnDef) -> bool {\n         .any(|attribute_text| attribute_text.contains(\"test\"))\n }\n \n-fn runnable_mod(db: &RootDatabase, file_id: FileId, module: ast::Module) -> Option<Runnable> {\n+fn runnable_mod(\n+    db: &RootDatabase,\n+    source_binder: &mut SourceBinder<RootDatabase>,\n+    file_id: FileId,\n+    module: ast::Module,\n+) -> Option<Runnable> {\n     let has_test_function = module\n         .item_list()?\n         .items()\n         .filter_map(|it| match it {\n             ast::ModuleItem::FnDef(it) => Some(it),\n             _ => None,\n         })\n-        .any(|f| f.has_atom_attr(\"test\"));\n+        .any(|f| has_test_related_attribute(&f));\n     if !has_test_function {\n         return None;\n     }\n     let range = module.syntax().text_range();\n-    let mut sb = hir::SourceBinder::new(db);\n-    let module = sb.to_def(InFile::new(file_id.into(), module))?;\n+    let module = source_binder.to_def(InFile::new(file_id.into(), module))?;\n \n     let path = module.path_to_root(db).into_iter().rev().filter_map(|it| it.name(db)).join(\"::\");\n     Some(Runnable { range, kind: RunnableKind::TestMod { path } })\n@@ -121,13 +172,17 @@ mod tests {\n             Runnable {\n                 range: [22; 46),\n                 kind: Test {\n-                    name: \"test_foo\",\n+                    test_id: Path(\n+                        \"test_foo\",\n+                    ),\n                 },\n             },\n             Runnable {\n                 range: [47; 81),\n                 kind: Test {\n-                    name: \"test_foo\",\n+                    test_id: Path(\n+                        \"test_foo\",\n+                    ),\n                 },\n             },\n         ]\n@@ -160,7 +215,9 @@ mod tests {\n             Runnable {\n                 range: [28; 57),\n                 kind: Test {\n-                    name: \"test_foo1\",\n+                    test_id: Path(\n+                        \"test_mod::test_foo1\",\n+                    ),\n                 },\n             },\n         ]\n@@ -195,7 +252,9 @@ mod tests {\n             Runnable {\n                 range: [46; 79),\n                 kind: Test {\n-                    name: \"test_foo1\",\n+                    test_id: Path(\n+                        \"foo::test_mod::test_foo1\",\n+                    ),\n                 },\n             },\n         ]\n@@ -232,7 +291,9 @@ mod tests {\n             Runnable {\n                 range: [68; 105),\n                 kind: Test {\n-                    name: \"test_foo1\",\n+                    test_id: Path(\n+                        \"foo::bar::test_mod::test_foo1\",\n+                    ),\n                 },\n             },\n         ]"}, {"sha": "5fd1e7b6b3cffe18c1505e7480a39f829fc1b93f", "filename": "crates/ra_lsp_server/src/cargo_target_spec.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c9989a524caa3379aac4f451a452c7ac9b247ae8/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9989a524caa3379aac4f451a452c7ac9b247ae8/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs?ref=c9989a524caa3379aac4f451a452c7ac9b247ae8", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use ra_ide::{FileId, RunnableKind};\n+use ra_ide::{FileId, RunnableKind, TestId};\n use ra_project_model::{self, ProjectWorkspace, TargetKind};\n \n use crate::{world::WorldSnapshot, Result};\n@@ -13,13 +13,16 @@ pub(crate) fn runnable_args(\n     let spec = CargoTargetSpec::for_file(world, file_id)?;\n     let mut res = Vec::new();\n     match kind {\n-        RunnableKind::Test { name } => {\n+        RunnableKind::Test { test_id } => {\n             res.push(\"test\".to_string());\n             if let Some(spec) = spec {\n                 spec.push_to(&mut res);\n             }\n             res.push(\"--\".to_string());\n-            res.push(name.to_string());\n+            res.push(test_id.to_string());\n+            if let TestId::Path(_) = test_id {\n+                res.push(\"--exact\".to_string());\n+            }\n             res.push(\"--nocapture\".to_string());\n         }\n         RunnableKind::TestMod { path } => {\n@@ -31,13 +34,16 @@ pub(crate) fn runnable_args(\n             res.push(path.to_string());\n             res.push(\"--nocapture\".to_string());\n         }\n-        RunnableKind::Bench { name } => {\n+        RunnableKind::Bench { test_id } => {\n             res.push(\"bench\".to_string());\n             if let Some(spec) = spec {\n                 spec.push_to(&mut res);\n             }\n             res.push(\"--\".to_string());\n-            res.push(name.to_string());\n+            res.push(test_id.to_string());\n+            if let TestId::Path(_) = test_id {\n+                res.push(\"--exact\".to_string());\n+            }\n             res.push(\"--nocapture\".to_string());\n         }\n         RunnableKind::Bin => {"}, {"sha": "5879a1f7adf39a4a0303c90d6803b9a511f74d49", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9989a524caa3379aac4f451a452c7ac9b247ae8/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9989a524caa3379aac4f451a452c7ac9b247ae8/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=c9989a524caa3379aac4f451a452c7ac9b247ae8", "patch": "@@ -918,9 +918,9 @@ fn to_lsp_runnable(\n     let args = runnable_args(world, file_id, &runnable.kind)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n     let label = match &runnable.kind {\n-        RunnableKind::Test { name } => format!(\"test {}\", name),\n+        RunnableKind::Test { test_id } => format!(\"test {}\", test_id),\n         RunnableKind::TestMod { path } => format!(\"test-mod {}\", path),\n-        RunnableKind::Bench { name } => format!(\"bench {}\", name),\n+        RunnableKind::Bench { test_id } => format!(\"bench {}\", test_id),\n         RunnableKind::Bin => \"run binary\".to_string(),\n     };\n     Ok(req::Runnable {"}, {"sha": "9ca31cbccaba8486364208183e5c14b36def8446", "filename": "crates/ra_lsp_server/tests/heavy_tests/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9989a524caa3379aac4f451a452c7ac9b247ae8/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9989a524caa3379aac4f451a452c7ac9b247ae8/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs?ref=c9989a524caa3379aac4f451a452c7ac9b247ae8", "patch": "@@ -147,7 +147,7 @@ fn main() {}\n         },\n         json!([\n           {\n-            \"args\": [ \"test\", \"--package\", \"foo\", \"--test\", \"spam\", \"--\", \"test_eggs\", \"--nocapture\" ],\n+            \"args\": [ \"test\", \"--package\", \"foo\", \"--test\", \"spam\", \"--\", \"test_eggs\", \"--exact\", \"--nocapture\" ],\n             \"bin\": \"cargo\",\n             \"env\": { \"RUST_BACKTRACE\": \"short\" },\n             \"label\": \"test test_eggs\","}]}