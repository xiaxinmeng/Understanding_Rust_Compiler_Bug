{"sha": "1643fd86a727d84cf14db9c71cd8951196fb53d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2NDNmZDg2YTcyN2Q4NGNmMTRkYjljNzFjZDg5NTExOTZmYjUzZDc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-16T00:10:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-16T00:10:02Z"}, "message": "Rollup merge of #75675 - davidtwco:symbol-mangling-impl-params, r=eddyb\n\nmangling: mangle impl params w/ v0 scheme\n\nThis PR modifies v0 symbol mangling to include all generic parameters from impl blocks (not just those used in the self type) - an alternative fix to #75326.\n\n```\noriginal:\n   _RNCNvXCs4fqI2P2rA04_19impl_param_manglingINtB4_3FooppENtNtNtNtCsfnEnqCNU58Z_4core4iter6traits8iterator8Iterator4next0B4_\n//        |------------ B4_ ----------------|\n// _R (N C (N v (X (C ((s 4fqI2p2rA04_) 19impl_param_mangling)) (I (N t B4_ 3Foo) pp E) (N t (N t (N t (N t (C ((s fnEnqCNU58Z_) 4core)) 4iter) 6traits) 8iterator) 8Iterator)) 4next) 0) B4_\n\nmodified:\n   _RNvXINICs4fqI2P2rA04_11issue_753260pppEINtB5_3FooppENtNtNtNtCsfnEnqCNU58Z_4core4iter6traits8iterator8Iterator4nextB5_\n// _R (N v (X (I (N I (C ((s 4fqI2P2rA04_) 11issue_75326)) 0) ppp E) (I (N t B5_ 3Foo) pp E) (N t (N t (N t (N t (C ((s fnEnqCNU58Z_) 4core)) 4iter) 6traits) 8iterator) 8Iterator)) 4next) B5_\n//            |     ^                                              |\n//            |     |                                              |\n//            |     new impl namespace                             |\n```\n\n~~Submitted as a draft as after some discussion w/ @eddyb, I'm going to do some investigation into (yet more alternative) changes to polymorphization that might remove the necessity for this.~~\n\nr? @eddyb", "tree": {"sha": "512c0c47ade24b65dc7c76adb9d819cbe90a70b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/512c0c47ade24b65dc7c76adb9d819cbe90a70b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1643fd86a727d84cf14db9c71cd8951196fb53d7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfiOTaCRBK7hj4Ov3rIwAAdHIIAAJoxuEuiPlOQw1tXsnFf8KP\nx/Uej9L52pQpkoWHF1TFOAJa61c4iohtB/TthfcnYIKFNQ3YpMxj/LgyZEUPbnNC\nARdUB4skTKN7BtSq93OVGyWAVZ47DbuDNmewZ97lwfI12iKGQ9dXBIfRuKRXWWqQ\nU+PUR0Wf5yqh5EaJHpzkTBFLV6Cm6Sf4ipmoJfrgwRiJUDox7pUKNjDbhPKxChH0\nC14ujCH5WiF14rU7wgMul1Wj/TZWy/q0WD+OVb9c2+z3mCO1hs9OUYSTo8uV3gx3\nh2JDb4KxqLkcYAYrRQnrCqnIGyjkYAOrmUnX3Ay7e1f7Z6++w9ykxbmhQfdHEl8=\n=XCAc\n-----END PGP SIGNATURE-----\n", "payload": "tree 512c0c47ade24b65dc7c76adb9d819cbe90a70b4\nparent 977df43c4a7fae07a5623ad851190181a274b54d\nparent fbdfe2c63bb11c91edc8488e7391e9fd2fd415ac\nauthor Dylan DPC <dylan.dpc@gmail.com> 1602807002 +0200\ncommitter GitHub <noreply@github.com> 1602807002 +0200\n\nRollup merge of #75675 - davidtwco:symbol-mangling-impl-params, r=eddyb\n\nmangling: mangle impl params w/ v0 scheme\n\nThis PR modifies v0 symbol mangling to include all generic parameters from impl blocks (not just those used in the self type) - an alternative fix to #75326.\n\n```\noriginal:\n   _RNCNvXCs4fqI2P2rA04_19impl_param_manglingINtB4_3FooppENtNtNtNtCsfnEnqCNU58Z_4core4iter6traits8iterator8Iterator4next0B4_\n//        |------------ B4_ ----------------|\n// _R (N C (N v (X (C ((s 4fqI2p2rA04_) 19impl_param_mangling)) (I (N t B4_ 3Foo) pp E) (N t (N t (N t (N t (C ((s fnEnqCNU58Z_) 4core)) 4iter) 6traits) 8iterator) 8Iterator)) 4next) 0) B4_\n\nmodified:\n   _RNvXINICs4fqI2P2rA04_11issue_753260pppEINtB5_3FooppENtNtNtNtCsfnEnqCNU58Z_4core4iter6traits8iterator8Iterator4nextB5_\n// _R (N v (X (I (N I (C ((s 4fqI2P2rA04_) 11issue_75326)) 0) ppp E) (I (N t B5_ 3Foo) pp E) (N t (N t (N t (N t (C ((s fnEnqCNU58Z_) 4core)) 4iter) 6traits) 8iterator) 8Iterator)) 4next) B5_\n//            |     ^                                              |\n//            |     |                                              |\n//            |     new impl namespace                             |\n```\n\n~~Submitted as a draft as after some discussion w/ @eddyb, I'm going to do some investigation into (yet more alternative) changes to polymorphization that might remove the necessity for this.~~\n\nr? @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1643fd86a727d84cf14db9c71cd8951196fb53d7", "html_url": "https://github.com/rust-lang/rust/commit/1643fd86a727d84cf14db9c71cd8951196fb53d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1643fd86a727d84cf14db9c71cd8951196fb53d7/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "977df43c4a7fae07a5623ad851190181a274b54d", "url": "https://api.github.com/repos/rust-lang/rust/commits/977df43c4a7fae07a5623ad851190181a274b54d", "html_url": "https://github.com/rust-lang/rust/commit/977df43c4a7fae07a5623ad851190181a274b54d"}, {"sha": "fbdfe2c63bb11c91edc8488e7391e9fd2fd415ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbdfe2c63bb11c91edc8488e7391e9fd2fd415ac", "html_url": "https://github.com/rust-lang/rust/commit/fbdfe2c63bb11c91edc8488e7391e9fd2fd415ac"}], "stats": {"total": 203, "additions": 159, "deletions": 44}, "files": [{"sha": "4a2c97b4a400f6a2b5f9c5acced34241cdd37476", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1643fd86a727d84cf14db9c71cd8951196fb53d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1643fd86a727d84cf14db9c71cd8951196fb53d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=1643fd86a727d84cf14db9c71cd8951196fb53d7", "patch": "@@ -291,7 +291,17 @@ impl<'tcx> Instance<'tcx> {\n     }\n \n     pub fn mono(tcx: TyCtxt<'tcx>, def_id: DefId) -> Instance<'tcx> {\n-        Instance::new(def_id, tcx.empty_substs_for_def_id(def_id))\n+        let substs = InternalSubsts::for_item(tcx, def_id, |param, _| match param.kind {\n+            ty::GenericParamDefKind::Lifetime => tcx.lifetimes.re_erased.into(),\n+            ty::GenericParamDefKind::Type { .. } => {\n+                bug!(\"Instance::mono: {:?} has type parameters\", def_id)\n+            }\n+            ty::GenericParamDefKind::Const { .. } => {\n+                bug!(\"Instance::mono: {:?} has const parameters\", def_id)\n+            }\n+        });\n+\n+        Instance::new(def_id, substs)\n     }\n \n     #[inline]"}, {"sha": "b0f0f0ba57fad745d638307aabe7b76f338832a7", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1643fd86a727d84cf14db9c71cd8951196fb53d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1643fd86a727d84cf14db9c71cd8951196fb53d7/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=1643fd86a727d84cf14db9c71cd8951196fb53d7", "patch": "@@ -6,9 +6,9 @@ use crate::mir::interpret::{sign_extend, truncate};\n use crate::ty::fold::TypeFolder;\n use crate::ty::layout::IntegerExt;\n use crate::ty::query::TyCtxtAt;\n-use crate::ty::subst::{GenericArgKind, InternalSubsts, Subst, SubstsRef};\n+use crate::ty::subst::{GenericArgKind, Subst, SubstsRef};\n use crate::ty::TyKind::*;\n-use crate::ty::{self, DefIdTree, GenericParamDefKind, List, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::{self, DefIdTree, List, Ty, TyCtxt, TypeFoldable};\n use rustc_apfloat::Float as _;\n use rustc_ast as ast;\n use rustc_attr::{self as attr, SignedInt, UnsignedInt};\n@@ -509,20 +509,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         Some(ty::Binder::bind(env_ty))\n     }\n \n-    /// Given the `DefId` of some item that has no type or const parameters, make\n-    /// a suitable \"empty substs\" for it.\n-    pub fn empty_substs_for_def_id(self, item_def_id: DefId) -> SubstsRef<'tcx> {\n-        InternalSubsts::for_item(self, item_def_id, |param, _| match param.kind {\n-            GenericParamDefKind::Lifetime => self.lifetimes.re_erased.into(),\n-            GenericParamDefKind::Type { .. } => {\n-                bug!(\"empty_substs_for_def_id: {:?} has type parameters\", item_def_id)\n-            }\n-            GenericParamDefKind::Const { .. } => {\n-                bug!(\"empty_substs_for_def_id: {:?} has const parameters\", item_def_id)\n-            }\n-        })\n-    }\n-\n     /// Returns `true` if the node pointed to by `def_id` is a `static` item.\n     pub fn is_static(self, def_id: DefId) -> bool {\n         self.static_mutability(def_id).is_some()"}, {"sha": "2c9caf73b8e425318ff856fbc5aca328f9125a55", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1643fd86a727d84cf14db9c71cd8951196fb53d7/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1643fd86a727d84cf14db9c71cd8951196fb53d7/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=1643fd86a727d84cf14db9c71cd8951196fb53d7", "patch": "@@ -115,7 +115,6 @@ fn get_symbol_hash<'tcx>(\n         }\n \n         // also include any type parameters (for generic items)\n-        assert!(!substs.has_erasable_regions());\n         substs.hash_stable(&mut hcx, &mut hasher);\n \n         if let Some(instantiating_crate) = instantiating_crate {"}, {"sha": "822a835293474a654ad5c1d0118e9e0fa752b0f1", "filename": "compiler/rustc_symbol_mangling/src/test.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1643fd86a727d84cf14db9c71cd8951196fb53d7/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1643fd86a727d84cf14db9c71cd8951196fb53d7/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftest.rs?ref=1643fd86a727d84cf14db9c71cd8951196fb53d7", "patch": "@@ -6,7 +6,7 @@\n \n use rustc_hir as hir;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::{Instance, TyCtxt};\n+use rustc_middle::ty::{subst::InternalSubsts, Instance, TyCtxt};\n use rustc_span::symbol::{sym, Symbol};\n \n const SYMBOL_NAME: Symbol = sym::rustc_symbol_name;\n@@ -36,8 +36,11 @@ impl SymbolNamesTest<'tcx> {\n         let def_id = tcx.hir().local_def_id(hir_id);\n         for attr in tcx.get_attrs(def_id.to_def_id()).iter() {\n             if tcx.sess.check_name(attr, SYMBOL_NAME) {\n-                // for now, can only use on monomorphic names\n-                let instance = Instance::mono(tcx, def_id.to_def_id());\n+                let def_id = def_id.to_def_id();\n+                let instance = Instance::new(\n+                    def_id,\n+                    tcx.erase_regions(&InternalSubsts::identity_for_item(tcx, def_id)),\n+                );\n                 let mangled = tcx.symbol_name(instance);\n                 tcx.sess.span_err(attr.span, &format!(\"symbol-name({})\", mangled));\n                 if let Ok(demangling) = rustc_demangle::try_demangle(mangled.name) {"}, {"sha": "16d0b86903ea889e9ad054f07fc179fc02249ed8", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 42, "deletions": 23, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/1643fd86a727d84cf14db9c71cd8951196fb53d7/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1643fd86a727d84cf14db9c71cd8951196fb53d7/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=1643fd86a727d84cf14db9c71cd8951196fb53d7", "patch": "@@ -259,7 +259,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n     }\n \n     fn print_impl_path(\n-        self,\n+        mut self,\n         impl_def_id: DefId,\n         substs: &'tcx [GenericArg<'tcx>],\n         mut self_ty: Ty<'tcx>,\n@@ -284,12 +284,37 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n             }\n         }\n \n-        self.path_append_impl(\n-            |cx| cx.print_def_path(parent_def_id, &[]),\n-            &key.disambiguated_data,\n-            self_ty,\n-            impl_trait_ref,\n-        )\n+        self.push(match impl_trait_ref {\n+            Some(_) => \"X\",\n+            None => \"M\",\n+        });\n+\n+        // Encode impl generic params if the substitutions contain parameters (implying\n+        // polymorphization is enabled) and this isn't an inherent impl.\n+        if impl_trait_ref.is_some() && substs.iter().any(|a| a.has_param_types_or_consts()) {\n+            self = self.path_generic_args(\n+                |this| {\n+                    this.path_append_ns(\n+                        |cx| cx.print_def_path(parent_def_id, &[]),\n+                        'I',\n+                        key.disambiguated_data.disambiguator as u64,\n+                        \"\",\n+                    )\n+                },\n+                substs,\n+            )?;\n+        } else {\n+            self.push_disambiguator(key.disambiguated_data.disambiguator as u64);\n+            self = self.print_def_path(parent_def_id, &[])?;\n+        }\n+\n+        self = self_ty.print(self)?;\n+\n+        if let Some(trait_ref) = impl_trait_ref {\n+            self = self.print_def_path(trait_ref.def_id, trait_ref.substs)?;\n+        }\n+\n+        Ok(self)\n     }\n \n     fn print_region(mut self, region: ty::Region<'_>) -> Result<Self::Region, Self::Error> {\n@@ -538,6 +563,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         self.push_ident(&name);\n         Ok(self)\n     }\n+\n     fn path_qualified(\n         mut self,\n         self_ty: Ty<'tcx>,\n@@ -552,24 +578,16 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n     }\n \n     fn path_append_impl(\n-        mut self,\n-        print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n-        disambiguated_data: &DisambiguatedDefPathData,\n-        self_ty: Ty<'tcx>,\n-        trait_ref: Option<ty::TraitRef<'tcx>>,\n+        self,\n+        _: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n+        _: &DisambiguatedDefPathData,\n+        _: Ty<'tcx>,\n+        _: Option<ty::TraitRef<'tcx>>,\n     ) -> Result<Self::Path, Self::Error> {\n-        self.push(match trait_ref {\n-            Some(_) => \"X\",\n-            None => \"M\",\n-        });\n-        self.push_disambiguator(disambiguated_data.disambiguator as u64);\n-        self = print_prefix(self)?;\n-        self = self_ty.print(self)?;\n-        if let Some(trait_ref) = trait_ref {\n-            self = self.print_def_path(trait_ref.def_id, trait_ref.substs)?;\n-        }\n-        Ok(self)\n+        // Inlined into `print_impl_path`\n+        unreachable!()\n     }\n+\n     fn path_append(\n         self,\n         print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,\n@@ -603,6 +621,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n             name.as_ref().map_or(\"\", |s| &s[..]),\n         )\n     }\n+\n     fn path_generic_args(\n         mut self,\n         print_prefix: impl FnOnce(Self) -> Result<Self::Path, Self::Error>,"}, {"sha": "5f822f6660c092c3b01246ebe5f4f86899999aef", "filename": "src/test/ui/symbol-names/issue-75326.legacy.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1643fd86a727d84cf14db9c71cd8951196fb53d7/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1643fd86a727d84cf14db9c71cd8951196fb53d7/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.legacy.stderr?ref=1643fd86a727d84cf14db9c71cd8951196fb53d7", "patch": "@@ -0,0 +1,20 @@\n+error: symbol-name(_ZN72_$LT$issue_75326..Foo$LT$I$C$E$GT$$u20$as$u20$issue_75326..Iterator2$GT$4next17SYMBOL_HASH)\n+  --> $DIR/issue-75326.rs:43:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<issue_75326::Foo<I,E> as issue_75326::Iterator2>::next::SYMBOL_HASH)\n+  --> $DIR/issue-75326.rs:43:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<issue_75326::Foo<I,E> as issue_75326::Iterator2>::next)\n+  --> $DIR/issue-75326.rs:43:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "ce315164cefd352fa82656c441b418eed0de7a1f", "filename": "src/test/ui/symbol-names/issue-75326.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/1643fd86a727d84cf14db9c71cd8951196fb53d7/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1643fd86a727d84cf14db9c71cd8951196fb53d7/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.rs?ref=1643fd86a727d84cf14db9c71cd8951196fb53d7", "patch": "@@ -0,0 +1,58 @@\n+// build-fail\n+// ignore-tidy-linelength\n+// revisions: legacy v0\n+//[legacy]compile-flags: -Z symbol-mangling-version=legacy\n+//[v0]compile-flags: -Z symbol-mangling-version=v0\n+//[legacy]normalize-stderr-32bit: \"h[\\d\\w]+\" -> \"SYMBOL_HASH\"\n+//[legacy]normalize-stderr-64bit: \"h[\\d\\w]+\" -> \"SYMBOL_HASH\"\n+\n+#![feature(rustc_attrs)]\n+\n+pub(crate) struct Foo<I, E>(I, E);\n+\n+pub trait Iterator2 {\n+    type Item;\n+\n+    fn next(&mut self) -> Option<Self::Item>;\n+\n+    fn find<P>(&mut self, predicate: P) -> Option<Self::Item>\n+    where\n+        Self: Sized,\n+        P: FnMut(&Self::Item) -> bool,\n+    {\n+        unimplemented!()\n+    }\n+}\n+\n+struct Bar;\n+\n+impl Iterator2 for Bar {\n+    type Item = (u32, u16);\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        unimplemented!()\n+    }\n+}\n+\n+impl<I, T, E> Iterator2 for Foo<I, E>\n+where\n+    I: Iterator2<Item = (T, E)>,\n+{\n+    type Item = T;\n+\n+    #[rustc_symbol_name]\n+    //[legacy]~^ ERROR symbol-name(_ZN72_$LT$issue_75326..Foo$LT$I$C$E$GT$$u20$as$u20$issue_75326..Iterator2$GT$4next\n+    //[legacy]~| ERROR demangling(<issue_75326::Foo<I,E> as issue_75326::Iterator2>::next\n+    //[legacy]~| ERROR demangling-alt(<issue_75326::Foo<I,E> as issue_75326::Iterator2>::next)\n+    //[v0]~^^^^  ERROR symbol-name(_RNvXINICs4fqI2P2rA04_11issue_75326s_0pppEINtB5_3FooppENtB5_9Iterator24nextB5_)\n+    //[v0]~|     ERROR demangling(<issue_75326[317d481089b8c8fe]::Foo<_, _> as issue_75326[317d481089b8c8fe]::Iterator2>::next)\n+    //[v0]~|     ERROR demangling-alt(<issue_75326::Foo<_, _> as issue_75326::Iterator2>::next)\n+    fn next(&mut self) -> Option<Self::Item> {\n+        self.find(|_| true)\n+    }\n+}\n+\n+fn main() {\n+    let mut a = Foo(Bar, 1u16);\n+    let _ = a.next();\n+}"}, {"sha": "59bdfa8ca36810db6a9438543e12d1b633d88d5f", "filename": "src/test/ui/symbol-names/issue-75326.v0.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1643fd86a727d84cf14db9c71cd8951196fb53d7/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1643fd86a727d84cf14db9c71cd8951196fb53d7/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.v0.stderr?ref=1643fd86a727d84cf14db9c71cd8951196fb53d7", "patch": "@@ -0,0 +1,20 @@\n+error: symbol-name(_RNvXINICs4fqI2P2rA04_11issue_75326s_0pppEINtB5_3FooppENtB5_9Iterator24nextB5_)\n+  --> $DIR/issue-75326.rs:43:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<issue_75326[317d481089b8c8fe]::Foo<_, _> as issue_75326[317d481089b8c8fe]::Iterator2>::next)\n+  --> $DIR/issue-75326.rs:43:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<issue_75326::Foo<_, _> as issue_75326::Iterator2>::next)\n+  --> $DIR/issue-75326.rs:43:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}]}