{"sha": "87e44af2f2731ea59207aef456caa391ef230645", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ZTQ0YWYyZjI3MzFlYTU5MjA3YWVmNDU2Y2FhMzkxZWYyMzA2NDU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-05T20:21:02Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-08T06:32:52Z"}, "message": "libstd: Remove `extern mod { ... }` from libstd. rs=deexterning", "tree": {"sha": "d59491c39203283e9814eab8079ce2fdf326f553", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d59491c39203283e9814eab8079ce2fdf326f553"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87e44af2f2731ea59207aef456caa391ef230645", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87e44af2f2731ea59207aef456caa391ef230645", "html_url": "https://github.com/rust-lang/rust/commit/87e44af2f2731ea59207aef456caa391ef230645", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87e44af2f2731ea59207aef456caa391ef230645/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd271adc75799435a920f1afaa0488e43badc749", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd271adc75799435a920f1afaa0488e43badc749", "html_url": "https://github.com/rust-lang/rust/commit/fd271adc75799435a920f1afaa0488e43badc749"}], "stats": {"total": 433, "additions": 238, "deletions": 195}, "files": [{"sha": "9ed6d285ce687681e6fbc4452199593360f8d8a1", "filename": "src/libstd/arena.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/87e44af2f2731ea59207aef456caa391ef230645/src%2Flibstd%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e44af2f2731ea59207aef456caa391ef230645/src%2Flibstd%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farena.rs?ref=87e44af2f2731ea59207aef456caa391ef230645", "patch": "@@ -46,18 +46,26 @@ use core::sys;\n use core::uint;\n use core::vec;\n \n-#[abi = \"rust-intrinsic\"]\n-extern mod rusti {\n-    fn move_val_init<T>(dst: &mut T, -src: T);\n-    fn needs_drop<T>() -> bool;\n+pub mod rusti {\n+    #[abi = \"rust-intrinsic\"]\n+    pub extern {\n+        fn move_val_init<T>(dst: &mut T, -src: T);\n+        fn needs_drop<T>() -> bool;\n+    }\n }\n \n-extern mod rustrt {\n-    #[rust_stack]\n-    unsafe fn rust_call_tydesc_glue(root: *u8,\n-                                    tydesc: *TypeDesc,\n-                                    field: size_t);\n+pub mod rustrt {\n+    use core::libc::size_t;\n+    use core::sys::TypeDesc;\n+\n+    pub extern {\n+        #[rust_stack]\n+        unsafe fn rust_call_tydesc_glue(root: *u8,\n+                                        tydesc: *TypeDesc,\n+                                        field: size_t);\n+    }\n }\n+\n // This probably belongs somewhere else. Needs to be kept in sync with\n // changes to glue...\n const tydesc_drop_glue_index: size_t = 3 as size_t;"}, {"sha": "9a9c19ca1768ccca601c4912daff46de7b900206", "filename": "src/libstd/dbg.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/87e44af2f2731ea59207aef456caa391ef230645/src%2Flibstd%2Fdbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e44af2f2731ea59207aef456caa391ef230645/src%2Flibstd%2Fdbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdbg.rs?ref=87e44af2f2731ea59207aef456caa391ef230645", "patch": "@@ -14,15 +14,19 @@ use core::cast::reinterpret_cast;\n use core::ptr;\n use core::sys;\n \n-#[abi = \"cdecl\"]\n-extern mod rustrt {\n-    pub unsafe fn debug_tydesc(td: *sys::TypeDesc);\n-    pub unsafe fn debug_opaque(td: *sys::TypeDesc, x: *());\n-    pub unsafe fn debug_box(td: *sys::TypeDesc, x: *());\n-    pub unsafe fn debug_tag(td: *sys::TypeDesc, x: *());\n-    pub unsafe fn debug_fn(td: *sys::TypeDesc, x: *());\n-    pub unsafe fn debug_ptrcast(td: *sys::TypeDesc, x: *()) -> *();\n-    pub unsafe fn rust_dbg_breakpoint();\n+pub mod rustrt {\n+    use core::sys;\n+\n+    #[abi = \"cdecl\"]\n+    pub extern {\n+        pub unsafe fn debug_tydesc(td: *sys::TypeDesc);\n+        pub unsafe fn debug_opaque(td: *sys::TypeDesc, x: *());\n+        pub unsafe fn debug_box(td: *sys::TypeDesc, x: *());\n+        pub unsafe fn debug_tag(td: *sys::TypeDesc, x: *());\n+        pub unsafe fn debug_fn(td: *sys::TypeDesc, x: *());\n+        pub unsafe fn debug_ptrcast(td: *sys::TypeDesc, x: *()) -> *();\n+        pub unsafe fn rust_dbg_breakpoint();\n+    }\n }\n \n pub fn debug_tydesc<T>() {"}, {"sha": "67e10b58617933b5771970ebccfaa1e146587f8c", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/87e44af2f2731ea59207aef456caa391ef230645/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e44af2f2731ea59207aef456caa391ef230645/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=87e44af2f2731ea59207aef456caa391ef230645", "patch": "@@ -32,12 +32,16 @@ use core::result;\n use core::uint;\n use core::vec;\n \n-#[nolink]\n-extern mod rustrt {\n-    unsafe fn rust_uv_current_kernel_malloc(size: libc::c_uint)\n-                                         -> *libc::c_void;\n-    unsafe fn rust_uv_current_kernel_free(mem: *libc::c_void);\n-    unsafe fn rust_uv_helper_uv_tcp_t_size() -> libc::c_uint;\n+pub mod rustrt {\n+    use core::libc;\n+\n+    #[nolink]\n+    pub extern {\n+        unsafe fn rust_uv_current_kernel_malloc(size: libc::c_uint)\n+                                             -> *libc::c_void;\n+        unsafe fn rust_uv_current_kernel_free(mem: *libc::c_void);\n+        unsafe fn rust_uv_helper_uv_tcp_t_size() -> libc::c_uint;\n+    }\n }\n \n /**"}, {"sha": "b2b30c1057ef971d970b14be13168a684c1f5c87", "filename": "src/libstd/rl.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/87e44af2f2731ea59207aef456caa391ef230645/src%2Flibstd%2Frl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e44af2f2731ea59207aef456caa391ef230645/src%2Flibstd%2Frl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frl.rs?ref=87e44af2f2731ea59207aef456caa391ef230645", "patch": "@@ -16,14 +16,18 @@ use core::prelude::*;\n use core::str;\n use core::task;\n \n-extern mod rustrt {\n-    pub unsafe fn linenoise(prompt: *c_char) -> *c_char;\n-    pub unsafe fn linenoiseHistoryAdd(line: *c_char) -> c_int;\n-    pub unsafe fn linenoiseHistorySetMaxLen(len: c_int) -> c_int;\n-    pub unsafe fn linenoiseHistorySave(file: *c_char) -> c_int;\n-    pub unsafe fn linenoiseHistoryLoad(file: *c_char) -> c_int;\n-    pub unsafe fn linenoiseSetCompletionCallback(callback: *u8);\n-    pub unsafe fn linenoiseAddCompletion(completions: *(), line: *c_char);\n+pub mod rustrt {\n+    use core::libc::{c_char, c_int};\n+\n+    pub extern {\n+        pub unsafe fn linenoise(prompt: *c_char) -> *c_char;\n+        pub unsafe fn linenoiseHistoryAdd(line: *c_char) -> c_int;\n+        pub unsafe fn linenoiseHistorySetMaxLen(len: c_int) -> c_int;\n+        pub unsafe fn linenoiseHistorySave(file: *c_char) -> c_int;\n+        pub unsafe fn linenoiseHistoryLoad(file: *c_char) -> c_int;\n+        pub unsafe fn linenoiseSetCompletionCallback(callback: *u8);\n+        pub unsafe fn linenoiseAddCompletion(completions: *(), line: *c_char);\n+    }\n }\n \n /// Add a line to history"}, {"sha": "3d2d5a0b37165b3a49a57376d1b9ec8763179e63", "filename": "src/libstd/test.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87e44af2f2731ea59207aef456caa391ef230645/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e44af2f2731ea59207aef456caa391ef230645/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=87e44af2f2731ea59207aef456caa391ef230645", "patch": "@@ -35,9 +35,13 @@ use core::str;\n use core::task;\n use core::vec;\n \n-#[abi = \"cdecl\"]\n-extern mod rustrt {\n-    pub unsafe fn rust_sched_threads() -> size_t;\n+pub mod rustrt {\n+    use core::libc::size_t;\n+\n+    #[abi = \"cdecl\"]\n+    pub extern {\n+        pub unsafe fn rust_sched_threads() -> size_t;\n+    }\n }\n \n // The name of a test. By convention this follows the rules for rust"}, {"sha": "525f9284cc31fb9fc602308e46ff8d6966d9a844", "filename": "src/libstd/time.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/87e44af2f2731ea59207aef456caa391ef230645/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e44af2f2731ea59207aef456caa391ef230645/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=87e44af2f2731ea59207aef456caa391ef230645", "patch": "@@ -19,18 +19,26 @@ use core::str;\n \n const NSEC_PER_SEC: i32 = 1_000_000_000_i32;\n \n-#[abi = \"cdecl\"]\n-extern mod rustrt {\n-    pub unsafe fn get_time(sec: &mut i64, nsec: &mut i32);\n-\n-    pub unsafe fn precise_time_ns(ns: &mut u64);\n-\n-    pub unsafe fn rust_tzset();\n-    // FIXME: The i64 values can be passed by-val when #2064 is fixed.\n-    pub unsafe fn rust_gmtime(&&sec: i64, &&nsec: i32, &&result: Tm);\n-    pub unsafe fn rust_localtime(&&sec: i64, &&nsec: i32, &&result: Tm);\n-    pub unsafe fn rust_timegm(&&tm: Tm, sec: &mut i64);\n-    pub unsafe fn rust_mktime(&&tm: Tm, sec: &mut i64);\n+pub mod rustrt {\n+    use super::Tm;\n+\n+    #[cfg(target_os = \"linux\")]\n+    #[link_args = \"-lrt\"]\n+    pub extern {}\n+\n+    #[abi = \"cdecl\"]\n+    pub extern {\n+        pub unsafe fn get_time(sec: &mut i64, nsec: &mut i32);\n+\n+        pub unsafe fn precise_time_ns(ns: &mut u64);\n+\n+        pub unsafe fn rust_tzset();\n+        // FIXME: The i64 values can be passed by-val when #2064 is fixed.\n+        pub unsafe fn rust_gmtime(&&sec: i64, &&nsec: i32, &&result: Tm);\n+        pub unsafe fn rust_localtime(&&sec: i64, &&nsec: i32, &&result: Tm);\n+        pub unsafe fn rust_timegm(&&tm: Tm, sec: &mut i64);\n+        pub unsafe fn rust_mktime(&&tm: Tm, sec: &mut i64);\n+    }\n }\n \n /// A record specifying a time value in seconds and nanoseconds."}, {"sha": "acafc4035f861127c75297f25e6a708decb38250", "filename": "src/libstd/unicode.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/87e44af2f2731ea59207aef456caa391ef230645/src%2Flibstd%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e44af2f2731ea59207aef456caa391ef230645/src%2Flibstd%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funicode.rs?ref=87e44af2f2731ea59207aef456caa391ef230645", "patch": "@@ -157,16 +157,19 @@ pub mod icu {\n \n     pub const UCHAR_INVALID_CODE : UProperty = -1;\n \n-    #[link_name = \"icuuc\"]\n-    #[abi = \"cdecl\"]\n-    pub extern mod libicu {\n-        unsafe fn u_hasBinaryProperty(c: UChar32, which: UProperty) -> UBool;\n-        unsafe fn u_isdigit(c: UChar32) -> UBool;\n-        unsafe fn u_islower(c: UChar32) -> UBool;\n-        unsafe fn u_isspace(c: UChar32) -> UBool;\n-        unsafe fn u_isupper(c: UChar32) -> UBool;\n-        unsafe fn u_tolower(c: UChar32) -> UChar32;\n-        unsafe fn u_toupper(c: UChar32) -> UChar32;\n+    pub mod libicu {\n+        #[link_name = \"icuuc\"]\n+        #[abi = \"cdecl\"]\n+        pub extern {\n+            unsafe fn u_hasBinaryProperty(c: UChar32, which: UProperty)\n+                                       -> UBool;\n+            unsafe fn u_isdigit(c: UChar32) -> UBool;\n+            unsafe fn u_islower(c: UChar32) -> UBool;\n+            unsafe fn u_isspace(c: UChar32) -> UBool;\n+            unsafe fn u_isupper(c: UChar32) -> UBool;\n+            unsafe fn u_tolower(c: UChar32) -> UChar32;\n+            unsafe fn u_toupper(c: UChar32) -> UChar32;\n+        }\n     }\n }\n "}, {"sha": "64ee682a43e3b3c2fc09feabfa6fd08c418a65fc", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 146, "deletions": 138, "changes": 284, "blob_url": "https://github.com/rust-lang/rust/blob/87e44af2f2731ea59207aef456caa391ef230645/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87e44af2f2731ea59207aef456caa391ef230645/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=87e44af2f2731ea59207aef456caa391ef230645", "patch": "@@ -724,146 +724,154 @@ pub mod uv_ll_struct_stubgen {\n     }\n }\n \n-#[nolink]\n-extern mod rustrt {\n-    // libuv public API\n-    unsafe fn rust_uv_loop_new() -> *libc::c_void;\n-    unsafe fn rust_uv_loop_delete(lp: *libc::c_void);\n-    unsafe fn rust_uv_run(loop_handle: *libc::c_void);\n-    unsafe fn rust_uv_close(handle: *libc::c_void, cb: *u8);\n-    unsafe fn rust_uv_walk(loop_handle: *libc::c_void, cb: *u8,\n-                           arg: *libc::c_void);\n-    unsafe fn rust_uv_async_send(handle: *uv_async_t);\n-    unsafe fn rust_uv_async_init(loop_handle: *libc::c_void,\n-                          async_handle: *uv_async_t,\n-                          cb: *u8) -> libc::c_int;\n-    unsafe fn rust_uv_tcp_init(\n-        loop_handle: *libc::c_void,\n-        handle_ptr: *uv_tcp_t) -> libc::c_int;\n-    // FIXME ref #2604 .. ?\n-    unsafe fn rust_uv_buf_init(out_buf: *uv_buf_t, base: *u8,\n-                        len: libc::size_t);\n-    unsafe fn rust_uv_last_error(loop_handle: *libc::c_void) -> uv_err_t;\n-    // FIXME ref #2064\n-    unsafe fn rust_uv_strerror(err: *uv_err_t) -> *libc::c_char;\n-    // FIXME ref #2064\n-    unsafe fn rust_uv_err_name(err: *uv_err_t) -> *libc::c_char;\n-    unsafe fn rust_uv_ip4_addr(ip: *u8, port: libc::c_int)\n-        -> sockaddr_in;\n-    unsafe fn rust_uv_ip6_addr(ip: *u8, port: libc::c_int)\n-        -> sockaddr_in6;\n-    unsafe fn rust_uv_ip4_name(src: *sockaddr_in,\n-                               dst: *u8,\n-                               size: libc::size_t)\n-                            -> libc::c_int;\n-    unsafe fn rust_uv_ip6_name(src: *sockaddr_in6,\n-                               dst: *u8,\n-                               size: libc::size_t)\n-                            -> libc::c_int;\n-    unsafe fn rust_uv_ip4_port(src: *sockaddr_in) -> libc::c_uint;\n-    unsafe fn rust_uv_ip6_port(src: *sockaddr_in6) -> libc::c_uint;\n-    // FIXME ref #2064\n-    unsafe fn rust_uv_tcp_connect(connect_ptr: *uv_connect_t,\n-                                  tcp_handle_ptr: *uv_tcp_t,\n-                                  ++after_cb: *u8,\n-                                  ++addr: *sockaddr_in) -> libc::c_int;\n-    // FIXME ref #2064\n-    unsafe fn rust_uv_tcp_bind(tcp_server: *uv_tcp_t,\n-                               ++addr: *sockaddr_in) -> libc::c_int;\n-    // FIXME ref #2064\n-    unsafe fn rust_uv_tcp_connect6(connect_ptr: *uv_connect_t,\n-                                   tcp_handle_ptr: *uv_tcp_t,\n-                                   ++after_cb: *u8,\n-                                   ++addr: *sockaddr_in6) -> libc::c_int;\n-    // FIXME ref #2064\n-    unsafe fn rust_uv_tcp_bind6(tcp_server: *uv_tcp_t,\n-                                ++addr: *sockaddr_in6) -> libc::c_int;\n-    unsafe fn rust_uv_tcp_getpeername(tcp_handle_ptr: *uv_tcp_t,\n-                                      ++name: *sockaddr_in) -> libc::c_int;\n-    unsafe fn rust_uv_tcp_getpeername6(tcp_handle_ptr: *uv_tcp_t,\n-                                       ++name: *sockaddr_in6) ->libc::c_int;\n-    unsafe fn rust_uv_listen(stream: *libc::c_void,\n-                             backlog: libc::c_int,\n-                             cb: *u8) -> libc::c_int;\n-    unsafe fn rust_uv_accept(server: *libc::c_void, client: *libc::c_void)\n-                          -> libc::c_int;\n-    unsafe fn rust_uv_write(req: *libc::c_void,\n-                            stream: *libc::c_void,\n-                            ++buf_in: *uv_buf_t,\n-                            buf_cnt: libc::c_int,\n-                            cb: *u8)\n-                         -> libc::c_int;\n-    unsafe fn rust_uv_read_start(stream: *libc::c_void,\n-                                 on_alloc: *u8,\n-                                 on_read: *u8)\n-                              -> libc::c_int;\n-    unsafe fn rust_uv_read_stop(stream: *libc::c_void) -> libc::c_int;\n-    unsafe fn rust_uv_timer_init(loop_handle: *libc::c_void,\n-                                 timer_handle: *uv_timer_t)\n+pub mod rustrt {\n+    use super::{addrinfo, sockaddr_in, sockaddr_in6, uv_async_t, uv_buf_t};\n+    use super::{uv_connect_t, uv_err_t, uv_getaddrinfo_t, uv_stream_t};\n+    use super::{uv_tcp_t, uv_timer_t, uv_write_t};\n+\n+    use core::libc;\n+\n+    #[nolink]\n+    pub extern {\n+        // libuv public API\n+        unsafe fn rust_uv_loop_new() -> *libc::c_void;\n+        unsafe fn rust_uv_loop_delete(lp: *libc::c_void);\n+        unsafe fn rust_uv_run(loop_handle: *libc::c_void);\n+        unsafe fn rust_uv_close(handle: *libc::c_void, cb: *u8);\n+        unsafe fn rust_uv_walk(loop_handle: *libc::c_void, cb: *u8,\n+                               arg: *libc::c_void);\n+        unsafe fn rust_uv_async_send(handle: *uv_async_t);\n+        unsafe fn rust_uv_async_init(loop_handle: *libc::c_void,\n+                              async_handle: *uv_async_t,\n+                              cb: *u8) -> libc::c_int;\n+        unsafe fn rust_uv_tcp_init(\n+            loop_handle: *libc::c_void,\n+            handle_ptr: *uv_tcp_t) -> libc::c_int;\n+        // FIXME ref #2604 .. ?\n+        unsafe fn rust_uv_buf_init(out_buf: *uv_buf_t, base: *u8,\n+                            len: libc::size_t);\n+        unsafe fn rust_uv_last_error(loop_handle: *libc::c_void) -> uv_err_t;\n+        // FIXME ref #2064\n+        unsafe fn rust_uv_strerror(err: *uv_err_t) -> *libc::c_char;\n+        // FIXME ref #2064\n+        unsafe fn rust_uv_err_name(err: *uv_err_t) -> *libc::c_char;\n+        unsafe fn rust_uv_ip4_addr(ip: *u8, port: libc::c_int)\n+            -> sockaddr_in;\n+        unsafe fn rust_uv_ip6_addr(ip: *u8, port: libc::c_int)\n+            -> sockaddr_in6;\n+        unsafe fn rust_uv_ip4_name(src: *sockaddr_in,\n+                                   dst: *u8,\n+                                   size: libc::size_t)\n+                                -> libc::c_int;\n+        unsafe fn rust_uv_ip6_name(src: *sockaddr_in6,\n+                                   dst: *u8,\n+                                   size: libc::size_t)\n+                                -> libc::c_int;\n+        unsafe fn rust_uv_ip4_port(src: *sockaddr_in) -> libc::c_uint;\n+        unsafe fn rust_uv_ip6_port(src: *sockaddr_in6) -> libc::c_uint;\n+        // FIXME ref #2064\n+        unsafe fn rust_uv_tcp_connect(connect_ptr: *uv_connect_t,\n+                                      tcp_handle_ptr: *uv_tcp_t,\n+                                      ++after_cb: *u8,\n+                                      ++addr: *sockaddr_in) -> libc::c_int;\n+        // FIXME ref #2064\n+        unsafe fn rust_uv_tcp_bind(tcp_server: *uv_tcp_t,\n+                                   ++addr: *sockaddr_in) -> libc::c_int;\n+        // FIXME ref #2064\n+        unsafe fn rust_uv_tcp_connect6(connect_ptr: *uv_connect_t,\n+                                       tcp_handle_ptr: *uv_tcp_t,\n+                                       ++after_cb: *u8,\n+                                       ++addr: *sockaddr_in6) -> libc::c_int;\n+        // FIXME ref #2064\n+        unsafe fn rust_uv_tcp_bind6(tcp_server: *uv_tcp_t,\n+                                    ++addr: *sockaddr_in6) -> libc::c_int;\n+        unsafe fn rust_uv_tcp_getpeername(tcp_handle_ptr: *uv_tcp_t,\n+                                          ++name: *sockaddr_in) -> libc::c_int;\n+        unsafe fn rust_uv_tcp_getpeername6(tcp_handle_ptr: *uv_tcp_t,\n+                                           ++name: *sockaddr_in6) ->libc::c_int;\n+        unsafe fn rust_uv_listen(stream: *libc::c_void,\n+                                 backlog: libc::c_int,\n+                                 cb: *u8) -> libc::c_int;\n+        unsafe fn rust_uv_accept(server: *libc::c_void, client: *libc::c_void)\n                               -> libc::c_int;\n-    unsafe fn rust_uv_timer_start(\n-        timer_handle: *uv_timer_t,\n-        cb: *u8,\n-        timeout: libc::c_uint,\n-        repeat: libc::c_uint) -> libc::c_int;\n-    unsafe fn rust_uv_timer_stop(handle: *uv_timer_t) -> libc::c_int;\n-\n-    unsafe fn rust_uv_getaddrinfo(loop_ptr: *libc::c_void,\n-                                  handle: *uv_getaddrinfo_t,\n-                                  cb: *u8,\n-                                  node_name_ptr: *u8,\n-                                  service_name_ptr: *u8,\n-                                  // should probably only pass ptr::null()\n-                                  hints: *addrinfo)\n-                               -> libc::c_int;\n-    unsafe fn rust_uv_freeaddrinfo(res: *addrinfo);\n-\n-    // data accessors/helpers for rust-mapped uv structs\n-    unsafe fn rust_uv_helper_get_INADDR_NONE() -> u32;\n-    unsafe fn rust_uv_is_ipv4_addrinfo(input: *addrinfo) -> bool;\n-    unsafe fn rust_uv_is_ipv6_addrinfo(input: *addrinfo) -> bool;\n-    unsafe fn rust_uv_get_next_addrinfo(input: *addrinfo) -> *addrinfo;\n-    unsafe fn rust_uv_addrinfo_as_sockaddr_in(input: *addrinfo)\n-                                           -> *sockaddr_in;\n-    unsafe fn rust_uv_addrinfo_as_sockaddr_in6(input: *addrinfo)\n-                                            -> *sockaddr_in6;\n-    unsafe fn rust_uv_malloc_buf_base_of(sug_size: libc::size_t) -> *u8;\n-    unsafe fn rust_uv_free_base_of_buf(++buf: uv_buf_t);\n-    unsafe fn rust_uv_get_stream_handle_from_connect_req(\n-        connect_req: *uv_connect_t)\n-        -> *uv_stream_t;\n-    unsafe fn rust_uv_get_stream_handle_from_write_req(\n-        write_req: *uv_write_t)\n-        -> *uv_stream_t;\n-    unsafe fn rust_uv_get_loop_for_uv_handle(handle: *libc::c_void)\n-        -> *libc::c_void;\n-    unsafe fn rust_uv_get_data_for_uv_loop(loop_ptr: *libc::c_void)\n-                                        -> *libc::c_void;\n-    unsafe fn rust_uv_set_data_for_uv_loop(loop_ptr: *libc::c_void,\n+        unsafe fn rust_uv_write(req: *libc::c_void,\n+                                stream: *libc::c_void,\n+                                ++buf_in: *uv_buf_t,\n+                                buf_cnt: libc::c_int,\n+                                cb: *u8)\n+                             -> libc::c_int;\n+        unsafe fn rust_uv_read_start(stream: *libc::c_void,\n+                                     on_alloc: *u8,\n+                                     on_read: *u8)\n+                                  -> libc::c_int;\n+        unsafe fn rust_uv_read_stop(stream: *libc::c_void) -> libc::c_int;\n+        unsafe fn rust_uv_timer_init(loop_handle: *libc::c_void,\n+                                     timer_handle: *uv_timer_t)\n+                                  -> libc::c_int;\n+        unsafe fn rust_uv_timer_start(\n+            timer_handle: *uv_timer_t,\n+            cb: *u8,\n+            timeout: libc::c_uint,\n+            repeat: libc::c_uint) -> libc::c_int;\n+        unsafe fn rust_uv_timer_stop(handle: *uv_timer_t) -> libc::c_int;\n+\n+        unsafe fn rust_uv_getaddrinfo(loop_ptr: *libc::c_void,\n+                                      handle: *uv_getaddrinfo_t,\n+                                      cb: *u8,\n+                                      node_name_ptr: *u8,\n+                                      service_name_ptr: *u8,\n+                                      // should probably only pass ptr::null()\n+                                      hints: *addrinfo)\n+                                   -> libc::c_int;\n+        unsafe fn rust_uv_freeaddrinfo(res: *addrinfo);\n+\n+        // data accessors/helpers for rust-mapped uv structs\n+        unsafe fn rust_uv_helper_get_INADDR_NONE() -> u32;\n+        unsafe fn rust_uv_is_ipv4_addrinfo(input: *addrinfo) -> bool;\n+        unsafe fn rust_uv_is_ipv6_addrinfo(input: *addrinfo) -> bool;\n+        unsafe fn rust_uv_get_next_addrinfo(input: *addrinfo) -> *addrinfo;\n+        unsafe fn rust_uv_addrinfo_as_sockaddr_in(input: *addrinfo)\n+                                               -> *sockaddr_in;\n+        unsafe fn rust_uv_addrinfo_as_sockaddr_in6(input: *addrinfo)\n+                                                -> *sockaddr_in6;\n+        unsafe fn rust_uv_malloc_buf_base_of(sug_size: libc::size_t) -> *u8;\n+        unsafe fn rust_uv_free_base_of_buf(++buf: uv_buf_t);\n+        unsafe fn rust_uv_get_stream_handle_from_connect_req(\n+            connect_req: *uv_connect_t)\n+            -> *uv_stream_t;\n+        unsafe fn rust_uv_get_stream_handle_from_write_req(\n+            write_req: *uv_write_t)\n+            -> *uv_stream_t;\n+        unsafe fn rust_uv_get_loop_for_uv_handle(handle: *libc::c_void)\n+            -> *libc::c_void;\n+        unsafe fn rust_uv_get_data_for_uv_loop(loop_ptr: *libc::c_void)\n+                                            -> *libc::c_void;\n+        unsafe fn rust_uv_set_data_for_uv_loop(loop_ptr: *libc::c_void,\n+                                               data: *libc::c_void);\n+        unsafe fn rust_uv_get_data_for_uv_handle(handle: *libc::c_void)\n+                                              -> *libc::c_void;\n+        unsafe fn rust_uv_set_data_for_uv_handle(handle: *libc::c_void,\n+                                                 data: *libc::c_void);\n+        unsafe fn rust_uv_get_data_for_req(req: *libc::c_void) -> *libc::c_void;\n+        unsafe fn rust_uv_set_data_for_req(req: *libc::c_void,\n                                            data: *libc::c_void);\n-    unsafe fn rust_uv_get_data_for_uv_handle(handle: *libc::c_void)\n-                                          -> *libc::c_void;\n-    unsafe fn rust_uv_set_data_for_uv_handle(handle: *libc::c_void,\n-                                             data: *libc::c_void);\n-    unsafe fn rust_uv_get_data_for_req(req: *libc::c_void) -> *libc::c_void;\n-    unsafe fn rust_uv_set_data_for_req(req: *libc::c_void,\n-                                       data: *libc::c_void);\n-    unsafe fn rust_uv_get_base_from_buf(++buf: uv_buf_t) -> *u8;\n-    unsafe fn rust_uv_get_len_from_buf(++buf: uv_buf_t) -> libc::size_t;\n-\n-    // sizeof testing helpers\n-    unsafe fn rust_uv_helper_uv_tcp_t_size() -> libc::c_uint;\n-    unsafe fn rust_uv_helper_uv_connect_t_size() -> libc::c_uint;\n-    unsafe fn rust_uv_helper_uv_buf_t_size() -> libc::c_uint;\n-    unsafe fn rust_uv_helper_uv_write_t_size() -> libc::c_uint;\n-    unsafe fn rust_uv_helper_uv_err_t_size() -> libc::c_uint;\n-    unsafe fn rust_uv_helper_sockaddr_in_size() -> libc::c_uint;\n-    unsafe fn rust_uv_helper_sockaddr_in6_size() -> libc::c_uint;\n-    unsafe fn rust_uv_helper_uv_async_t_size() -> libc::c_uint;\n-    unsafe fn rust_uv_helper_uv_timer_t_size() -> libc::c_uint;\n-    unsafe fn rust_uv_helper_uv_getaddrinfo_t_size() -> libc::c_uint;\n-    unsafe fn rust_uv_helper_addrinfo_size() -> libc::c_uint;\n-    unsafe fn rust_uv_helper_addr_in_size() -> libc::c_uint;\n+        unsafe fn rust_uv_get_base_from_buf(++buf: uv_buf_t) -> *u8;\n+        unsafe fn rust_uv_get_len_from_buf(++buf: uv_buf_t) -> libc::size_t;\n+\n+        // sizeof testing helpers\n+        unsafe fn rust_uv_helper_uv_tcp_t_size() -> libc::c_uint;\n+        unsafe fn rust_uv_helper_uv_connect_t_size() -> libc::c_uint;\n+        unsafe fn rust_uv_helper_uv_buf_t_size() -> libc::c_uint;\n+        unsafe fn rust_uv_helper_uv_write_t_size() -> libc::c_uint;\n+        unsafe fn rust_uv_helper_uv_err_t_size() -> libc::c_uint;\n+        unsafe fn rust_uv_helper_sockaddr_in_size() -> libc::c_uint;\n+        unsafe fn rust_uv_helper_sockaddr_in6_size() -> libc::c_uint;\n+        unsafe fn rust_uv_helper_uv_async_t_size() -> libc::c_uint;\n+        unsafe fn rust_uv_helper_uv_timer_t_size() -> libc::c_uint;\n+        unsafe fn rust_uv_helper_uv_getaddrinfo_t_size() -> libc::c_uint;\n+        unsafe fn rust_uv_helper_addrinfo_size() -> libc::c_uint;\n+        unsafe fn rust_uv_helper_addr_in_size() -> libc::c_uint;\n+    }\n }\n \n pub unsafe fn loop_new() -> *libc::c_void {"}]}