{"sha": "af9b508e1d6c83a8f0e6f5c0b2b75598aa37ed27", "node_id": "C_kwDOAAsO6NoAKGFmOWI1MDhlMWQ2YzgzYThmMGU2ZjVjMGIyYjc1NTk4YWEzN2VkMjc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-15T12:51:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-15T12:51:31Z"}, "message": "Auto merge of #88717 - tabokie:vecdeque-fast-append, r=m-ou-se\n\nOptimize VecDeque::append\n\nOptimize `VecDeque::append` to do unsafe copy rather than iterating through each element.\n\nOn my `Intel(R) Xeon(R) CPU E5-2630 v4 @ 2.20GHz`, the benchmark shows 37% improvements:\n```\nMaster:\ncustom-bench vec_deque_append 583164 ns/iter\ncustom-bench vec_deque_append 550040 ns/iter\n\nPatched:\ncustom-bench vec_deque_append 349204 ns/iter\ncustom-bench vec_deque_append 368164 ns/iter\n```\n\nAdditional notes on the context: this is the third attempt to implement a non-trivial version of `VecDeque::append`, the last two are reverted due to unsoundness or regression, see:\n- https://github.com/rust-lang/rust/pull/52553, reverted in https://github.com/rust-lang/rust/pull/53571\n- https://github.com/rust-lang/rust/pull/53564, reverted in https://github.com/rust-lang/rust/pull/54851\n\nBoth cases are covered by existing tests.\n\nSigned-off-by: tabokie <xy.tao@outlook.com>", "tree": {"sha": "2c4a3a50fe67e2710c33a76ad6fa7ae409d664a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c4a3a50fe67e2710c33a76ad6fa7ae409d664a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af9b508e1d6c83a8f0e6f5c0b2b75598aa37ed27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af9b508e1d6c83a8f0e6f5c0b2b75598aa37ed27", "html_url": "https://github.com/rust-lang/rust/commit/af9b508e1d6c83a8f0e6f5c0b2b75598aa37ed27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af9b508e1d6c83a8f0e6f5c0b2b75598aa37ed27/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dafe6d1c328d2f0580763e8438a227e490deb10", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dafe6d1c328d2f0580763e8438a227e490deb10", "html_url": "https://github.com/rust-lang/rust/commit/1dafe6d1c328d2f0580763e8438a227e490deb10"}, {"sha": "cd773c358793beaae4688b4bbb60d793509f7cc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd773c358793beaae4688b4bbb60d793509f7cc0", "html_url": "https://github.com/rust-lang/rust/commit/cd773c358793beaae4688b4bbb60d793509f7cc0"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "c890ff4ac5e2b7bff45511a0c80d3f00bcaff865", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/af9b508e1d6c83a8f0e6f5c0b2b75598aa37ed27/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af9b508e1d6c83a8f0e6f5c0b2b75598aa37ed27/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=af9b508e1d6c83a8f0e6f5c0b2b75598aa37ed27", "patch": "@@ -418,6 +418,25 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         }\n     }\n \n+    /// Copies all values from `src` to `dst`, wrapping around if needed.\n+    /// Assumes capacity is sufficient.\n+    #[inline]\n+    unsafe fn copy_slice(&mut self, dst: usize, src: &[T]) {\n+        debug_assert!(src.len() <= self.cap());\n+        let head_room = self.cap() - dst;\n+        if src.len() <= head_room {\n+            unsafe {\n+                ptr::copy_nonoverlapping(src.as_ptr(), self.ptr().add(dst), src.len());\n+            }\n+        } else {\n+            let (left, right) = src.split_at(head_room);\n+            unsafe {\n+                ptr::copy_nonoverlapping(left.as_ptr(), self.ptr().add(dst), left.len());\n+                ptr::copy_nonoverlapping(right.as_ptr(), self.ptr(), right.len());\n+            }\n+        }\n+    }\n+\n     /// Frobs the head and tail sections around to handle the fact that we\n     /// just reallocated. Unsafe because it trusts old_capacity.\n     #[inline]\n@@ -2081,8 +2100,17 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     #[inline]\n     #[stable(feature = \"append\", since = \"1.4.0\")]\n     pub fn append(&mut self, other: &mut Self) {\n-        // naive impl\n-        self.extend(other.drain(..));\n+        self.reserve(other.len());\n+        unsafe {\n+            let (left, right) = other.as_slices();\n+            self.copy_slice(self.head, left);\n+            self.copy_slice(self.wrap_add(self.head, left.len()), right);\n+        }\n+        // SAFETY: Update pointers after copying to avoid leaving doppelganger\n+        // in case of panics.\n+        self.head = self.wrap_add(self.head, other.len());\n+        // Silently drop values in `other`.\n+        other.tail = other.head;\n     }\n \n     /// Retains only the elements specified by the predicate."}]}