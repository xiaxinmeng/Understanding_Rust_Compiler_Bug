{"sha": "560c90f5df4ecfbb75e20ae19bf10028756a3613", "node_id": "C_kwDOAAsO6NoAKDU2MGM5MGY1ZGY0ZWNmYmI3NWUyMGFlMTliZjEwMDI4NzU2YTM2MTM", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-12-26T22:45:21Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2022-01-05T15:13:29Z"}, "message": "Adjust assert_default_hashing_controls", "tree": {"sha": "9bd2891778c42e0996cc5104326cb28c762c7943", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bd2891778c42e0996cc5104326cb28c762c7943"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/560c90f5df4ecfbb75e20ae19bf10028756a3613", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmHVtZkACgkQtAh+UQ6Y\nsWSitQ/9EOWVOOUXNTxXbAEOFnBZwMXu/plMTCIPf/WwxzMtQV6F/h+0d29nhZq2\nrGZMfkkj7oPgg3ve+v6J1ZyvVmQBj137RFFo++tCCp/Eb7+c+hCB7wOrnjxGy9fC\nM1m5iRStKfXxHknlItIi9ey2JyNaqKQ/aMyS99HKo4lLZ2nbiL/mj7Fot2//bTjg\nPeRp1/pquaLLm1153fsirXG4Mudda2DiYggvprunYsV7ShKIRIbWIblR+8oTbEpw\njTU90ATJhMCtp62ObgusjWtslCAViujJHwNzoSj+uoJx/+T/u10TjV65tKzq7esI\n1ZFRhZ6l98+AHoW0AHtSqmVcIkWtCeLGdgOaL06/Cc/bFpCaVZuauHTrr6J7cD+t\nZGct3sKdBAzqBumUz+E2jN64LIvjNiqGu7TCwT0PAJ9h0Lqxqjp6DYxgrUBVzdB/\noRYQOqKx7KWjKy31jBIv1qLDNYeIoM1AGgHcNXKaDSJoKbdPKrtz1qhact5zYte/\n/ALKQD1atGmEwmlxBFfdkjnlTuIzSIgcPYs5KdbnNYF3dlImznBy6gO8CBqt8rr1\nCjmG7hbSvpHQlhDpy5dpy8YcC8ToVeAcJwLkaMkzNFomWUbA/bXRr4CBQPf2lnah\nb4oLz1kLPwItXuuKkKOU+Vu2oZnwZBqYFnYnAaZ1x4jWD/Tizp0=\n=0Xi6\n-----END PGP SIGNATURE-----", "payload": "tree 9bd2891778c42e0996cc5104326cb28c762c7943\nparent 5580e5e1dda4557bdbda14cdb4255a3e6facfe86\nauthor Aaron Hill <aa1ronham@gmail.com> 1640558721 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1641395609 -0500\n\nAdjust assert_default_hashing_controls\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/560c90f5df4ecfbb75e20ae19bf10028756a3613", "html_url": "https://github.com/rust-lang/rust/commit/560c90f5df4ecfbb75e20ae19bf10028756a3613", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/560c90f5df4ecfbb75e20ae19bf10028756a3613/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5580e5e1dda4557bdbda14cdb4255a3e6facfe86", "url": "https://api.github.com/repos/rust-lang/rust/commits/5580e5e1dda4557bdbda14cdb4255a3e6facfe86", "html_url": "https://github.com/rust-lang/rust/commit/5580e5e1dda4557bdbda14cdb4255a3e6facfe86"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "6838a32c7b3266d47bdc1a014338da264855b95f", "filename": "compiler/rustc_query_system/src/ich/hcx.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/560c90f5df4ecfbb75e20ae19bf10028756a3613/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560c90f5df4ecfbb75e20ae19bf10028756a3613/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs?ref=560c90f5df4ecfbb75e20ae19bf10028756a3613", "patch": "@@ -27,6 +27,7 @@ fn compute_ignored_attr_names() -> FxHashSet<Symbol> {\n pub struct StableHashingContext<'a> {\n     definitions: &'a Definitions,\n     cstore: &'a dyn CrateStore,\n+    sess: &'a Session,\n     pub(super) body_resolver: BodyResolver<'a>,\n     // Very often, we are hashing something that does not need the\n     // `CachingSourceMapView`, so we initialize it lazily.\n@@ -63,6 +64,7 @@ impl<'a> StableHashingContext<'a> {\n             body_resolver: BodyResolver::Forbidden,\n             definitions,\n             cstore,\n+            sess,\n             caching_source_map: None,\n             raw_source_map: sess.source_map(),\n             hashing_controls: HashingControls {\n@@ -197,6 +199,11 @@ impl<'a> rustc_span::HashStableContext for StableHashingContext<'a> {\n         self.hashing_controls.hash_spans\n     }\n \n+    #[inline]\n+    fn debug_opts_incremental_ignore_spans(&self) -> bool {\n+        self.sess.opts.debugging_opts.incremental_ignore_spans\n+    }\n+\n     #[inline]\n     fn def_path_hash(&self, def_id: DefId) -> DefPathHash {\n         self.def_path_hash(def_id)"}, {"sha": "7b70c20d307f05cfdeffb843a754d7673bc4ea22", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/560c90f5df4ecfbb75e20ae19bf10028756a3613/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560c90f5df4ecfbb75e20ae19bf10028756a3613/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=560c90f5df4ecfbb75e20ae19bf10028756a3613", "patch": "@@ -89,11 +89,11 @@ rustc_index::newtype_index! {\n     }\n }\n \n-// Assert that the provided `HashStableContext` is configured with the 'default'\n-// `HashingControls`. We should always have bailed out before getting to here\n-// with a non-default mode. With this check in place, we can avoid the need\n-// to maintain separate versions of `ExpnData` hashes for each permutation\n-// of `HashingControls` settings.\n+/// Assert that the provided `HashStableContext` is configured with the 'default'\n+/// `HashingControls`. We should always have bailed out before getting to here\n+/// with a non-default mode. With this check in place, we can avoid the need\n+/// to maintain separate versions of `ExpnData` hashes for each permutation\n+/// of `HashingControls` settings.\n fn assert_default_hashing_controls<CTX: HashStableContext>(ctx: &CTX, msg: &str) {\n     match ctx.hashing_controls() {\n         // Ideally, we would also check that `node_id_hashing_mode` was always\n@@ -105,7 +105,13 @@ fn assert_default_hashing_controls<CTX: HashStableContext>(ctx: &CTX, msg: &str)\n         // FIXME: Enforce that we don't end up transitively hashing any `HirId`s,\n         // or ensure that this method is always invoked with the same\n         // `NodeIdHashingMode`\n-        HashingControls { hash_spans: true, node_id_hashing_mode: _ } => {}\n+        //\n+        // Note that we require that `hash_spans` be set according to the global\n+        // `-Z incremental-ignore-spans` option. Normally, this option is disabled,\n+        // which will cause us to require that this method always be called with `Span` hashing\n+        // enabled.\n+        HashingControls { hash_spans, node_id_hashing_mode: _ }\n+            if hash_spans == !ctx.debug_opts_incremental_ignore_spans() => {}\n         other => panic!(\"Attempted hashing of {msg} with non-default HashingControls: {:?}\", other),\n     }\n }"}, {"sha": "9602bc5d0b7d47e88545b509503d0caef0f1bae8", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/560c90f5df4ecfbb75e20ae19bf10028756a3613/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560c90f5df4ecfbb75e20ae19bf10028756a3613/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=560c90f5df4ecfbb75e20ae19bf10028756a3613", "patch": "@@ -2058,6 +2058,9 @@ impl InnerSpan {\n pub trait HashStableContext {\n     fn def_path_hash(&self, def_id: DefId) -> DefPathHash;\n     fn hash_spans(&self) -> bool;\n+    /// Accesses `sess.opts.debugging_opts.incremental_ignore_spans` since\n+    /// we don't have easy access to a `Session`\n+    fn debug_opts_incremental_ignore_spans(&self) -> bool;\n     fn def_span(&self, def_id: LocalDefId) -> Span;\n     fn span_data_to_lines_and_cols(\n         &mut self,"}]}