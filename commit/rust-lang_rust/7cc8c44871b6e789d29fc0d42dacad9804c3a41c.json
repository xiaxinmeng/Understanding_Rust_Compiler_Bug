{"sha": "7cc8c44871b6e789d29fc0d42dacad9804c3a41c", "node_id": "C_kwDOAAsO6NoAKDdjYzhjNDQ4NzFiNmU3ODlkMjlmYzBkNDJkYWNhZDk4MDRjM2E0MWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-11T21:39:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-11T21:39:11Z"}, "message": "Auto merge of #89648 - nbdd0121:issue-89606, r=nikomatsakis\n\nIgnore type of projections for upvar capturing\n\nFix #89606\n\nIgnore type of projections for upvar capturing. Originally HashMap is used, and the hash/eq implementation of Place takes the type of projections into account. These types may differ by lifetime which causes #89606 to ICE.\n\nI originally considered erasing regions but `place.ty()` is used when creating upvar tuple type, more than just serving as a key type, so I switched to a linear comparison with custom eq (`compare_place_ignore_ty`) instead.\n\nr? `@wesleywiser`\n\n`@rustbot` label +T-compiler", "tree": {"sha": "ea56ac3a075e8aa22a5aeb712e6834ffdf15ed04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea56ac3a075e8aa22a5aeb712e6834ffdf15ed04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cc8c44871b6e789d29fc0d42dacad9804c3a41c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cc8c44871b6e789d29fc0d42dacad9804c3a41c", "html_url": "https://github.com/rust-lang/rust/commit/7cc8c44871b6e789d29fc0d42dacad9804c3a41c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cc8c44871b6e789d29fc0d42dacad9804c3a41c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b210643ebf2485aafdf2494de8cf41941a64e95", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b210643ebf2485aafdf2494de8cf41941a64e95", "html_url": "https://github.com/rust-lang/rust/commit/5b210643ebf2485aafdf2494de8cf41941a64e95"}, {"sha": "7275cfa47cf3fdbf41c2ad859ac937bffe5923a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7275cfa47cf3fdbf41c2ad859ac937bffe5923a4", "html_url": "https://github.com/rust-lang/rust/commit/7275cfa47cf3fdbf41c2ad859ac937bffe5923a4"}], "stats": {"total": 55, "additions": 49, "deletions": 6}, "files": [{"sha": "3a10988bba0b9db381587f40fcd0bd39cb33f91d", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7cc8c44871b6e789d29fc0d42dacad9804c3a41c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc8c44871b6e789d29fc0d42dacad9804c3a41c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=7cc8c44871b6e789d29fc0d42dacad9804c3a41c", "patch": "@@ -65,6 +65,7 @@ use std::iter;\n enum PlaceAncestryRelation {\n     Ancestor,\n     Descendant,\n+    SamePlace,\n     Divergent,\n }\n \n@@ -564,7 +565,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 for possible_ancestor in min_cap_list.iter_mut() {\n                     match determine_place_ancestry_relation(&place, &possible_ancestor.place) {\n                         // current place is descendant of possible_ancestor\n-                        PlaceAncestryRelation::Descendant => {\n+                        PlaceAncestryRelation::Descendant | PlaceAncestryRelation::SamePlace => {\n                             ancestor_found = true;\n                             let backup_path_expr_id = possible_ancestor.info.path_expr_id;\n \n@@ -2278,15 +2279,17 @@ fn determine_place_ancestry_relation(\n     let projections_b = &place_b.projections;\n \n     let same_initial_projections =\n-        iter::zip(projections_a, projections_b).all(|(proj_a, proj_b)| proj_a == proj_b);\n+        iter::zip(projections_a, projections_b).all(|(proj_a, proj_b)| proj_a.kind == proj_b.kind);\n \n     if same_initial_projections {\n+        use std::cmp::Ordering;\n+\n         // First min(n, m) projections are the same\n         // Select Ancestor/Descendant\n-        if projections_b.len() >= projections_a.len() {\n-            PlaceAncestryRelation::Ancestor\n-        } else {\n-            PlaceAncestryRelation::Descendant\n+        match projections_b.len().cmp(&projections_a.len()) {\n+            Ordering::Greater => PlaceAncestryRelation::Ancestor,\n+            Ordering::Equal => PlaceAncestryRelation::SamePlace,\n+            Ordering::Less => PlaceAncestryRelation::Descendant,\n         }\n     } else {\n         PlaceAncestryRelation::Divergent"}, {"sha": "1bb6aa40f06fafe335845786c6fcf3d81048de25", "filename": "src/test/ui/closures/2229_closure_analysis/issue-89606.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7cc8c44871b6e789d29fc0d42dacad9804c3a41c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-89606.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cc8c44871b6e789d29fc0d42dacad9804c3a41c/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-89606.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fissue-89606.rs?ref=7cc8c44871b6e789d29fc0d42dacad9804c3a41c", "patch": "@@ -0,0 +1,40 @@\n+// Regression test for #89606. Used to ICE.\n+//\n+// check-pass\n+// revisions: twenty_eighteen twenty_twentyone\n+// [twenty_eighteen]compile-flags: --edition 2018\n+// [twenty_twentyone]compile-flags: --edition 2021\n+\n+struct S<'a>(Option<&'a mut i32>);\n+\n+fn by_ref(s: &mut S<'_>) {\n+    (|| {\n+        let S(_o) = s;\n+        s.0 = None;\n+    })();\n+}\n+\n+fn by_value(s: S<'_>) {\n+    (|| {\n+        let S(ref _o) = s;\n+        let _g = s.0;\n+    })();\n+}\n+\n+struct V<'a>((Option<&'a mut i32>,));\n+\n+fn nested(v: &mut V<'_>) {\n+    (|| {\n+        let V((_o,)) = v;\n+        v.0 = (None, );\n+    })();\n+}\n+\n+fn main() {\n+    let mut s = S(None);\n+    by_ref(&mut s);\n+    by_value(s);\n+\n+    let mut v = V((None, ));\n+    nested(&mut v);\n+}"}]}