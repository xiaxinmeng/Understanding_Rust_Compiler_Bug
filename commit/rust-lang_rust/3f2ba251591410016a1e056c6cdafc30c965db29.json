{"sha": "3f2ba251591410016a1e056c6cdafc30c965db29", "node_id": "C_kwDOAAsO6NoAKDNmMmJhMjUxNTkxNDEwMDE2YTFlMDU2YzZjZGFmYzMwYzk2NWRiMjk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-29T12:29:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-29T12:29:32Z"}, "message": "Rollup merge of #98479 - leocth:atomic-bool-fetch-not, r=joshtriplett\n\nAdd `fetch_not` method on `AtomicBool`\n\nThis PR adds a `fetch_not` method on `AtomicBool` performs the NOT operation on the inner value.\nInternally, this just calls the `fetch_xor` method with the value `true`.\n\n[See this IRLO discussion](https://internals.rust-lang.org/t/could-we-have-fetch-not-for-atomicbool-s/16881)", "tree": {"sha": "9fdd5b6f42733d88d883a864553b675ae56dbab0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fdd5b6f42733d88d883a864553b675ae56dbab0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f2ba251591410016a1e056c6cdafc30c965db29", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJivEWsCRBK7hj4Ov3rIwAAYywIAJ9L+3Hv5B+HeBurO5+y4M8r\n4Gj/FhFMifkLivY/XL8x4jrEjGF9VolAVpsvSWD91SaufaoTgU5GxyUGzN9qz9GV\nysG6pezQnkYaA6XY4jZHES+dEFJwqGCYx/FgiEDJsUrqa3LR9MAxNKjl0TczPO/s\nRgTvxv0PEXyqkW6scxtJTBMdPKBMrAUbKKUYedbqnWYzWv3MsoHU71el2iMEhhHA\nfRiUoX4TPnRS6l6TIdWbJX3rSJ94w1PWzr9MAqWZd/TO0Ko6tKe6GPetcGJEBb5R\nXq6U2yRjNjJknnIQ1rbEaUohQXskWn+iEqWtAAbGN5eg0ntN+vveRtblHrmEYPE=\n=IhmD\n-----END PGP SIGNATURE-----\n", "payload": "tree 9fdd5b6f42733d88d883a864553b675ae56dbab0\nparent d10497bba2b257162ad10ddeb729341c72f58c2f\nparent 9c5ae20c5952824614a3d2c67a467f2c0d0d9d86\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1656505772 +0530\ncommitter GitHub <noreply@github.com> 1656505772 +0530\n\nRollup merge of #98479 - leocth:atomic-bool-fetch-not, r=joshtriplett\n\nAdd `fetch_not` method on `AtomicBool`\n\nThis PR adds a `fetch_not` method on `AtomicBool` performs the NOT operation on the inner value.\nInternally, this just calls the `fetch_xor` method with the value `true`.\n\n[See this IRLO discussion](https://internals.rust-lang.org/t/could-we-have-fetch-not-for-atomicbool-s/16881)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f2ba251591410016a1e056c6cdafc30c965db29", "html_url": "https://github.com/rust-lang/rust/commit/3f2ba251591410016a1e056c6cdafc30c965db29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f2ba251591410016a1e056c6cdafc30c965db29/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d10497bba2b257162ad10ddeb729341c72f58c2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d10497bba2b257162ad10ddeb729341c72f58c2f", "html_url": "https://github.com/rust-lang/rust/commit/d10497bba2b257162ad10ddeb729341c72f58c2f"}, {"sha": "9c5ae20c5952824614a3d2c67a467f2c0d0d9d86", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c5ae20c5952824614a3d2c67a467f2c0d0d9d86", "html_url": "https://github.com/rust-lang/rust/commit/9c5ae20c5952824614a3d2c67a467f2c0d0d9d86"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "90e2dfd5d3d9ba788721df524b7ef723b49c53e6", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3f2ba251591410016a1e056c6cdafc30c965db29/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f2ba251591410016a1e056c6cdafc30c965db29/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=3f2ba251591410016a1e056c6cdafc30c965db29", "patch": "@@ -854,6 +854,42 @@ impl AtomicBool {\n         unsafe { atomic_xor(self.v.get(), val as u8, order) != 0 }\n     }\n \n+    /// Logical \"not\" with a boolean value.\n+    ///\n+    /// Performs a logical \"not\" operation on the current value, and sets\n+    /// the new value to the result.\n+    ///\n+    /// Returns the previous value.\n+    ///\n+    /// `fetch_not` takes an [`Ordering`] argument which describes the memory ordering\n+    /// of this operation. All ordering modes are possible. Note that using\n+    /// [`Acquire`] makes the store part of this operation [`Relaxed`], and\n+    /// using [`Release`] makes the load part [`Relaxed`].\n+    ///\n+    /// **Note:** This method is only available on platforms that support atomic\n+    /// operations on `u8`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(atomic_bool_fetch_not)]\n+    /// use std::sync::atomic::{AtomicBool, Ordering};\n+    ///\n+    /// let foo = AtomicBool::new(true);\n+    /// assert_eq!(foo.fetch_not(Ordering::SeqCst), true);\n+    /// assert_eq!(foo.load(Ordering::SeqCst), false);\n+    ///\n+    /// let foo = AtomicBool::new(false);\n+    /// assert_eq!(foo.fetch_not(Ordering::SeqCst), false);\n+    /// assert_eq!(foo.load(Ordering::SeqCst), true);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"atomic_bool_fetch_not\", issue = \"98485\")]\n+    #[cfg(target_has_atomic = \"8\")]\n+    pub fn fetch_not(&self, order: Ordering) -> bool {\n+        self.fetch_xor(true, order)\n+    }\n+\n     /// Returns a mutable pointer to the underlying [`bool`].\n     ///\n     /// Doing non-atomic reads and writes on the resulting integer can be a data race."}]}