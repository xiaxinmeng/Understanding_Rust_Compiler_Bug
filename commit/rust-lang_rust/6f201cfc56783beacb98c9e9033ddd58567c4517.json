{"sha": "6f201cfc56783beacb98c9e9033ddd58567c4517", "node_id": "C_kwDOAAsO6NoAKDZmMjAxY2ZjNTY3ODNiZWFjYjk4YzllOTAzM2RkZDU4NTY3YzQ1MTc", "commit": {"author": {"name": "Roland Fredenhagen", "email": "dev@modprog.de", "date": "2023-01-12T01:28:13Z"}, "committer": {"name": "Roland Fredenhagen", "email": "dev@modprog.de", "date": "2023-01-12T01:28:13Z"}, "message": "Assist: desugar doc-comment", "tree": {"sha": "f74db5654dfb1621071ca6ac86b15118a4c3013c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f74db5654dfb1621071ca6ac86b15118a4c3013c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f201cfc56783beacb98c9e9033ddd58567c4517", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEpNSJzq73vBN5KqovCUr5kkEDXrYFAmO/Yi0ACgkQCUr5kkED\nXrY7Yw/+K2ZnzupkzjhIh2EHlC0Bq8SkdRrHMa9qK8JDGUY1NFOPcjdyy8Y9x07t\nBXKsSQf8uuwqZ0QzROxa3RDyicoXTj9LS9AWS7DdzMgS6fIT1QCzM1bVCP52cpao\n0P+5asHhM5o+xss0S+RuHyNuvyMKxlBNJbOFdpr4PcQxx5rZKibCWueDSk0XlFbA\nyLS+XxTN1G/O9VMA79+Xptsss1jsr+E6UbnOyPXMIjEXrXNl2mhSsGwi/XiaMew0\nHg3j5ueSYPmJMx4LI/PPrr/4qdF1p8fI1udq8exlYlKCsqilQw+kVmu2Haoc8hm4\nMkDf1N3pQpbe9Emq9g7bFPqyi2qI58nSBJtxKnPvAdF4L5aVUAtE5THUUETlmOg4\nR7qBYUTkB6hXmXyWX1IX3VEpUAw9WJJjxEurRF0MWe5icKH8CCm5hUeNUvn/GTkA\nP+OOv3keXa2uu8pOl9UfbYdPxfOwq2ATAAH7z1yNvrPTKxOW68e7WZ0lRgpBdT2z\npee5Uvb8Px42joXL93IiNa0riaka5epAiwfWnmXXRCjivI1jgVuoW4QHa5hhpfmU\nXLFcU0VQJnI4jnU9KRMUiRJ5MRwt0BeW37QpulMd4pzFcFsZPYWLwZRRal5HfjDO\nQpHYfuMSrV3qX7bDk+VNPVLHyWuDPAPBBdOUDH0JUH8sazKbt9o=\n=3rO0\n-----END PGP SIGNATURE-----", "payload": "tree f74db5654dfb1621071ca6ac86b15118a4c3013c\nparent 09aceea36d790ecdd24d746c478e7d7421fa6b98\nauthor Roland Fredenhagen <dev@modprog.de> 1673486893 +0100\ncommitter Roland Fredenhagen <dev@modprog.de> 1673486893 +0100\n\nAssist: desugar doc-comment\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f201cfc56783beacb98c9e9033ddd58567c4517", "html_url": "https://github.com/rust-lang/rust/commit/6f201cfc56783beacb98c9e9033ddd58567c4517", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f201cfc56783beacb98c9e9033ddd58567c4517/comments", "author": {"login": "ModProg", "id": 11978847, "node_id": "MDQ6VXNlcjExOTc4ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/11978847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ModProg", "html_url": "https://github.com/ModProg", "followers_url": "https://api.github.com/users/ModProg/followers", "following_url": "https://api.github.com/users/ModProg/following{/other_user}", "gists_url": "https://api.github.com/users/ModProg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ModProg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ModProg/subscriptions", "organizations_url": "https://api.github.com/users/ModProg/orgs", "repos_url": "https://api.github.com/users/ModProg/repos", "events_url": "https://api.github.com/users/ModProg/events{/privacy}", "received_events_url": "https://api.github.com/users/ModProg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ModProg", "id": 11978847, "node_id": "MDQ6VXNlcjExOTc4ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/11978847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ModProg", "html_url": "https://github.com/ModProg", "followers_url": "https://api.github.com/users/ModProg/followers", "following_url": "https://api.github.com/users/ModProg/following{/other_user}", "gists_url": "https://api.github.com/users/ModProg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ModProg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ModProg/subscriptions", "organizations_url": "https://api.github.com/users/ModProg/orgs", "repos_url": "https://api.github.com/users/ModProg/repos", "events_url": "https://api.github.com/users/ModProg/events{/privacy}", "received_events_url": "https://api.github.com/users/ModProg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09aceea36d790ecdd24d746c478e7d7421fa6b98", "url": "https://api.github.com/repos/rust-lang/rust/commits/09aceea36d790ecdd24d746c478e7d7421fa6b98", "html_url": "https://github.com/rust-lang/rust/commit/09aceea36d790ecdd24d746c478e7d7421fa6b98"}], "stats": {"total": 336, "additions": 333, "deletions": 3}, "files": [{"sha": "282820b16725e29e567575319e8286822af54987", "filename": "crates/ide-assists/src/handlers/convert_comment_block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f201cfc56783beacb98c9e9033ddd58567c4517/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_comment_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f201cfc56783beacb98c9e9033ddd58567c4517/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_comment_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_comment_block.rs?ref=6f201cfc56783beacb98c9e9033ddd58567c4517", "patch": "@@ -107,7 +107,7 @@ fn line_to_block(acc: &mut Assists, comment: ast::Comment) -> Option<()> {\n /// The line -> block assist can  be invoked from anywhere within a sequence of line comments.\n /// relevant_line_comments crawls backwards and forwards finding the complete sequence of comments that will\n /// be joined.\n-fn relevant_line_comments(comment: &ast::Comment) -> Vec<Comment> {\n+pub fn relevant_line_comments(comment: &ast::Comment) -> Vec<Comment> {\n     // The prefix identifies the kind of comment we're dealing with\n     let prefix = comment.prefix();\n     let same_prefix = |c: &ast::Comment| c.prefix() == prefix;\n@@ -159,7 +159,7 @@ fn relevant_line_comments(comment: &ast::Comment) -> Vec<Comment> {\n //              */\n //\n // But since such comments aren't idiomatic we're okay with this.\n-fn line_comment_text(indentation: IndentLevel, comm: ast::Comment) -> String {\n+pub fn line_comment_text(indentation: IndentLevel, comm: ast::Comment) -> String {\n     let contents_without_prefix = comm.text().strip_prefix(comm.prefix()).unwrap();\n     let contents = contents_without_prefix.strip_prefix(' ').unwrap_or(contents_without_prefix);\n "}, {"sha": "ea7044a54451c0a868c20be1043cbbda2facd786", "filename": "crates/ide-assists/src/handlers/desugar_doc_comment.rs", "status": "added", "additions": 313, "deletions": 0, "changes": 313, "blob_url": "https://github.com/rust-lang/rust/blob/6f201cfc56783beacb98c9e9033ddd58567c4517/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fdesugar_doc_comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f201cfc56783beacb98c9e9033ddd58567c4517/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fdesugar_doc_comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fdesugar_doc_comment.rs?ref=6f201cfc56783beacb98c9e9033ddd58567c4517", "patch": "@@ -0,0 +1,313 @@\n+use either::Either;\n+use itertools::Itertools;\n+use syntax::{\n+    ast::{self, edit::IndentLevel, CommentPlacement, Whitespace},\n+    AstToken, TextRange,\n+};\n+\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n+\n+use super::{\n+    convert_comment_block::{line_comment_text, relevant_line_comments},\n+    raw_string::required_hashes,\n+};\n+\n+// Assist: desugar_doc_comment\n+//\n+// Desugars doc-comments to the attribute form.\n+//\n+// ```\n+// /// Multi-line$0\n+// /// comment\n+// ```\n+// ->\n+// ```\n+// #[doc = r\"Multi-line\n+// comment\"]\n+// ```\n+pub(crate) fn desugar_doc_comment(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n+    let comment = ctx.find_token_at_offset::<ast::Comment>()?;\n+    // Only allow doc comments\n+    let Some(placement) = comment.kind().doc else { return None; };\n+\n+    // Only allow comments which are alone on their line\n+    if let Some(prev) = comment.syntax().prev_token() {\n+        if Whitespace::cast(prev).filter(|w| w.text().contains('\\n')).is_none() {\n+            return None;\n+        }\n+    }\n+\n+    let indentation = IndentLevel::from_token(comment.syntax()).to_string();\n+\n+    let (target, comments) = match comment.kind().shape {\n+        ast::CommentShape::Block => (comment.syntax().text_range(), Either::Left(comment)),\n+        ast::CommentShape::Line => {\n+            // Find all the comments we'll be desugaring\n+            let comments = relevant_line_comments(&comment);\n+\n+            // Establish the target of our edit based on the comments we found\n+            (\n+                TextRange::new(\n+                    comments[0].syntax().text_range().start(),\n+                    comments.last().unwrap().syntax().text_range().end(),\n+                ),\n+                Either::Right(comments),\n+            )\n+        }\n+    };\n+\n+    acc.add(\n+        AssistId(\"desugar_doc_comment\", AssistKind::RefactorRewrite),\n+        \"Desugar doc-comment to attribute macro\",\n+        target,\n+        |edit| {\n+            let text = match comments {\n+                Either::Left(comment) => {\n+                    let text = comment.text();\n+                    text[comment.prefix().len()..(text.len() - \"*/\".len())]\n+                        .trim()\n+                        .lines()\n+                        .map(|l| l.strip_prefix(&indentation).unwrap_or(l))\n+                        .join(\"\\n\")\n+                }\n+                Either::Right(comments) => {\n+                    comments.into_iter().map(|c| line_comment_text(IndentLevel(0), c)).join(\"\\n\")\n+                }\n+            };\n+\n+            let hashes = \"#\".repeat(required_hashes(&text));\n+\n+            let prefix = match placement {\n+                CommentPlacement::Inner => \"#!\",\n+                CommentPlacement::Outer => \"#\",\n+            };\n+\n+            let output = format!(r#\"{prefix}[doc = r{hashes}\"{text}\"{hashes}]\"#);\n+\n+            edit.replace(target, output)\n+        },\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn single_line() {\n+        check_assist(\n+            desugar_doc_comment,\n+            r#\"\n+/// line$0 comment\n+fn main() {\n+    foo();\n+}\n+\"#,\n+            r#\"\n+#[doc = r\"line comment\"]\n+fn main() {\n+    foo();\n+}\n+\"#,\n+        );\n+        check_assist(\n+            desugar_doc_comment,\n+            r#\"\n+//! line$0 comment\n+fn main() {\n+    foo();\n+}\n+\"#,\n+            r#\"\n+#![doc = r\"line comment\"]\n+fn main() {\n+    foo();\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn single_line_indented() {\n+        check_assist(\n+            desugar_doc_comment,\n+            r#\"\n+fn main() {\n+    /// line$0 comment\n+    struct Foo;\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    #[doc = r\"line comment\"]\n+    struct Foo;\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn multiline() {\n+        check_assist(\n+            desugar_doc_comment,\n+            r#\"\n+fn main() {\n+    /// above\n+    /// line$0 comment\n+    ///\n+    /// below\n+    struct Foo;\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    #[doc = r\"above\n+line comment\n+\n+below\"]\n+    struct Foo;\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn end_of_line() {\n+        check_assist_not_applicable(\n+            desugar_doc_comment,\n+            r#\"\n+fn main() { /// end-of-line$0 comment\n+    struct Foo;\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn single_line_different_kinds() {\n+        check_assist(\n+            desugar_doc_comment,\n+            r#\"\n+fn main() {\n+    //! different prefix\n+    /// line$0 comment\n+    /// below\n+    struct Foo;\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    //! different prefix\n+    #[doc = r\"line comment\n+below\"]\n+    struct Foo;\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn single_line_separate_chunks() {\n+        check_assist(\n+            desugar_doc_comment,\n+            r#\"\n+/// different chunk\n+\n+/// line$0 comment\n+/// below\n+\"#,\n+            r#\"\n+/// different chunk\n+\n+#[doc = r\"line comment\n+below\"]\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn block_comment() {\n+        check_assist(\n+            desugar_doc_comment,\n+            r#\"\n+/**\n+ hi$0 there\n+*/\n+\"#,\n+            r#\"\n+#[doc = r\"hi there\"]\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn inner_doc_block() {\n+        check_assist(\n+            desugar_doc_comment,\n+            r#\"\n+/*!\n+ hi$0 there\n+*/\n+\"#,\n+            r#\"\n+#![doc = r\"hi there\"]\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn block_indent() {\n+        check_assist(\n+            desugar_doc_comment,\n+            r#\"\n+fn main() {\n+    /*!\n+    hi$0 there\n+\n+    ```\n+      code_sample\n+    ```\n+    */\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    #![doc = r\"hi there\n+\n+```\n+  code_sample\n+```\"]\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn end_of_line_block() {\n+        check_assist_not_applicable(\n+            desugar_doc_comment,\n+            r#\"\n+fn main() {\n+    foo(); /** end-of-line$0 comment */\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn regular_comment() {\n+        check_assist_not_applicable(desugar_doc_comment, r#\"// some$0 comment\"#);\n+        check_assist_not_applicable(desugar_doc_comment, r#\"/* some$0 comment*/\"#);\n+    }\n+\n+    #[test]\n+    fn quotes_and_escapes() {\n+        check_assist(\n+            desugar_doc_comment,\n+            r###\"/// some$0 \"\\ \"## comment\"###,\n+            r####\"#[doc = r###\"some \"\\ \"## comment\"###]\"####,\n+        );\n+    }\n+}"}, {"sha": "eff5a1f21f27834c89ab240567a5184b5c647c41", "filename": "crates/ide-assists/src/handlers/raw_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f201cfc56783beacb98c9e9033ddd58567c4517/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f201cfc56783beacb98c9e9033ddd58567c4517/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fraw_string.rs?ref=6f201cfc56783beacb98c9e9033ddd58567c4517", "patch": "@@ -155,7 +155,7 @@ pub(crate) fn remove_hash(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<\n     })\n }\n \n-fn required_hashes(s: &str) -> usize {\n+pub fn required_hashes(s: &str) -> usize {\n     let mut res = 0usize;\n     for idx in s.match_indices('\"').map(|(i, _)| i) {\n         let (_, sub) = s.split_at(idx + 1);"}, {"sha": "546ef96260f2cf8da992ba6156692432a055c9f7", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f201cfc56783beacb98c9e9033ddd58567c4517/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f201cfc56783beacb98c9e9033ddd58567c4517/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=6f201cfc56783beacb98c9e9033ddd58567c4517", "patch": "@@ -126,6 +126,7 @@ mod handlers {\n     mod convert_to_guarded_return;\n     mod convert_two_arm_bool_match_to_matches_macro;\n     mod convert_while_to_loop;\n+    mod desugar_doc_comment;\n     mod destructure_tuple_binding;\n     mod expand_glob_import;\n     mod extract_expressions_from_format_string;\n@@ -231,6 +232,7 @@ mod handlers {\n             convert_tuple_struct_to_named_struct::convert_tuple_struct_to_named_struct,\n             convert_two_arm_bool_match_to_matches_macro::convert_two_arm_bool_match_to_matches_macro,\n             convert_while_to_loop::convert_while_to_loop,\n+            desugar_doc_comment::desugar_doc_comment,\n             destructure_tuple_binding::destructure_tuple_binding,\n             expand_glob_import::expand_glob_import,\n             extract_expressions_from_format_string::extract_expressions_from_format_string,"}, {"sha": "16a06b60de901f9403fd6feabd7e59ae4f68599c", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6f201cfc56783beacb98c9e9033ddd58567c4517/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f201cfc56783beacb98c9e9033ddd58567c4517/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=6f201cfc56783beacb98c9e9033ddd58567c4517", "patch": "@@ -597,6 +597,21 @@ fn main() {\n     )\n }\n \n+#[test]\n+fn doctest_desugar_doc_comment() {\n+    check_doc_test(\n+        \"desugar_doc_comment\",\n+        r#####\"\n+/// Multi-line$0\n+/// comment\n+\"#####,\n+        r#####\"\n+#[doc = r\"Multi-line\n+comment\"]\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_expand_glob_import() {\n     check_doc_test("}]}