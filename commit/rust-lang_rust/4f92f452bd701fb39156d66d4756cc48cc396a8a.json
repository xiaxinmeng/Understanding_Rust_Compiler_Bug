{"sha": "4f92f452bd701fb39156d66d4756cc48cc396a8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmOTJmNDUyYmQ3MDFmYjM5MTU2ZDY2ZDQ3NTZjYzQ4Y2MzOTZhOGE=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-09-16T13:05:47Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-09-17T08:02:44Z"}, "message": "Tests for fixed issues.\n\nCloses #2074.\nCloses #5008.\nCloses #7519.\nCloses #7673.\nCloses #7770.\nCloses #8171.", "tree": {"sha": "2e1431d49b0be26aa605fb4796cf0066112a91fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e1431d49b0be26aa605fb4796cf0066112a91fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f92f452bd701fb39156d66d4756cc48cc396a8a", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f92f452bd701fb39156d66d4756cc48cc396a8a", "html_url": "https://github.com/rust-lang/rust/commit/4f92f452bd701fb39156d66d4756cc48cc396a8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f92f452bd701fb39156d66d4756cc48cc396a8a/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2231dce929a2c525df7cb10e5ab3258804a3a36", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2231dce929a2c525df7cb10e5ab3258804a3a36", "html_url": "https://github.com/rust-lang/rust/commit/a2231dce929a2c525df7cb10e5ab3258804a3a36"}], "stats": {"total": 166, "additions": 166, "deletions": 0}, "files": [{"sha": "ce9bb725a1b1b82c15b0a2c15d94b91ac710e060", "filename": "src/test/run-pass/issue-5008-borrowed-traitobject-method-call.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4f92f452bd701fb39156d66d4756cc48cc396a8a/src%2Ftest%2Frun-pass%2Fissue-5008-borrowed-traitobject-method-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f92f452bd701fb39156d66d4756cc48cc396a8a/src%2Ftest%2Frun-pass%2Fissue-5008-borrowed-traitobject-method-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5008-borrowed-traitobject-method-call.rs?ref=4f92f452bd701fb39156d66d4756cc48cc396a8a", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/*\n+\n+#5008 cast to &Trait causes code to segfault on method call\n+\n+It fixes itself if the &Trait is changed to @Trait.\n+*/\n+\n+trait Debuggable {\n+    fn debug_name(&self) -> ~str;\n+}\n+\n+#[deriving(Clone)]\n+struct Thing {\n+name: ~str,\n+}\n+\n+impl Thing {\n+    fn new() -> Thing { Thing { name: ~\"dummy\" } }\n+}\n+\n+impl Debuggable for Thing {\n+    fn debug_name(&self) -> ~str { self.name.clone() }\n+}\n+\n+fn print_name(x: &Debuggable)\n+{\n+    println(fmt!(\"debug_name = %s\", x.debug_name()));\n+}\n+\n+fn main() {\n+    let thing = Thing::new();\n+    print_name(&thing as &Debuggable);\n+}"}, {"sha": "ba84dd44b2f0a327f62b196b1228a6084377d124", "filename": "src/test/run-pass/issue-7519-match-unit-in-arg.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4f92f452bd701fb39156d66d4756cc48cc396a8a/src%2Ftest%2Frun-pass%2Fissue-7519-match-unit-in-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f92f452bd701fb39156d66d4756cc48cc396a8a/src%2Ftest%2Frun-pass%2Fissue-7519-match-unit-in-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7519-match-unit-in-arg.rs?ref=4f92f452bd701fb39156d66d4756cc48cc396a8a", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/*\n+#7519 ICE pattern matching unit in function argument\n+*/\n+\n+fn foo(():()) { }\n+\n+fn main() {\n+    foo(());\n+}"}, {"sha": "1492b5895bae59e75c7e02f9934787f4cc33c32e", "filename": "src/test/run-pass/issue-7673-cast-generically-implemented-trait.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4f92f452bd701fb39156d66d4756cc48cc396a8a/src%2Ftest%2Frun-pass%2Fissue-7673-cast-generically-implemented-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f92f452bd701fb39156d66d4756cc48cc396a8a/src%2Ftest%2Frun-pass%2Fissue-7673-cast-generically-implemented-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7673-cast-generically-implemented-trait.rs?ref=4f92f452bd701fb39156d66d4756cc48cc396a8a", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-pretty #9253 pretty printer doesn't preserve the bounds on trait objects\n+\n+/*\n+\n+#7673 Polymorphically creating traits barely works\n+\n+*/\n+\n+fn main() {}\n+\n+trait A {}\n+impl<T: 'static> A for T {}\n+\n+fn owned1<T: 'static>(a: T) { ~a as ~A:; } /* note `:` */\n+fn owned2<T: 'static>(a: ~T) { a as ~A:; }\n+fn owned3<T: 'static>(a: ~T) { ~a as ~A:; }\n+\n+fn managed1<T: 'static>(a: T) { @a as @A; }\n+fn managed2<T: 'static>(a: @T) { a as @A; }\n+fn managed3<T: 'static>(a: @T) { @a as @A; }"}, {"sha": "be68d50c9615d10b37f874ee4c56aa35161e693f", "filename": "src/test/run-pass/issue-8171-default-method-self-inherit-builtin-trait.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4f92f452bd701fb39156d66d4756cc48cc396a8a/src%2Ftest%2Frun-pass%2Fissue-8171-default-method-self-inherit-builtin-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f92f452bd701fb39156d66d4756cc48cc396a8a/src%2Ftest%2Frun-pass%2Fissue-8171-default-method-self-inherit-builtin-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8171-default-method-self-inherit-builtin-trait.rs?ref=4f92f452bd701fb39156d66d4756cc48cc396a8a", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/*\n+\n+#8171 Self is not recognised as implementing kinds in default method implementations\n+\n+*/\n+\n+fn require_send<T: Send>(_: T){}\n+\n+trait TragicallySelfIsNotSend: Send {\n+    fn x(self) {\n+        require_send(self);\n+    }\n+}\n+\n+fn main(){}"}, {"sha": "7d9b744ab0f31fd18e52d1731d1299151e18b861", "filename": "src/test/run-pass/nested-enum-same-names.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4f92f452bd701fb39156d66d4756cc48cc396a8a/src%2Ftest%2Frun-pass%2Fnested-enum-same-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f92f452bd701fb39156d66d4756cc48cc396a8a/src%2Ftest%2Frun-pass%2Fnested-enum-same-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-enum-same-names.rs?ref=4f92f452bd701fb39156d66d4756cc48cc396a8a", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/*\n+\n+#7770 ICE with sibling methods containing same-name-enum containing\n+ same-name-member\n+\n+If you have two methods in an impl block, each containing an enum\n+(with the same name), each containing at least one value with the same\n+name, rustc gives the same LLVM symbol for the two of them and fails,\n+as it does not include the method name in the symbol name.\n+\n+*/\n+\n+pub struct Foo;\n+impl Foo {\n+    pub fn foo() {\n+        enum Panic { Common };\n+    }\n+    pub fn bar() {\n+        enum Panic { Common };\n+    }\n+}\n+\n+/*\n+#2074 duplicate symbols with enum in boxed closure\n+*/\n+\n+fn foo() {\n+    let one: @fn() -> uint = || {\n+        enum r { a }\n+        a as uint\n+    };\n+    let two: @fn() -> uint = || {\n+        enum r { a }\n+        a as uint\n+    };\n+    one(); two();\n+}\n+\n+fn main() {}"}]}