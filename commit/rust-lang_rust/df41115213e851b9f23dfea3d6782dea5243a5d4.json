{"sha": "df41115213e851b9f23dfea3d6782dea5243a5d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNDExMTUyMTNlODUxYjlmMjNkZmVhM2Q2NzgyZGVhNTI0M2E1ZDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-01T13:42:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-01T13:42:06Z"}, "message": "auto merge of #10750 : Blei/rust/no-at-struct-field, r=alexcrichton", "tree": {"sha": "ea05c3021e5c6b2e5440bcea47c90f7a91b0e847", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea05c3021e5c6b2e5440bcea47c90f7a91b0e847"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df41115213e851b9f23dfea3d6782dea5243a5d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df41115213e851b9f23dfea3d6782dea5243a5d4", "html_url": "https://github.com/rust-lang/rust/commit/df41115213e851b9f23dfea3d6782dea5243a5d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df41115213e851b9f23dfea3d6782dea5243a5d4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83084e9c7793d24008b88b93d698639d0e85164a", "url": "https://api.github.com/repos/rust-lang/rust/commits/83084e9c7793d24008b88b93d698639d0e85164a", "html_url": "https://github.com/rust-lang/rust/commit/83084e9c7793d24008b88b93d698639d0e85164a"}, {"sha": "47ce9819033d235715474f8ea0420a5610855f7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/47ce9819033d235715474f8ea0420a5610855f7f", "html_url": "https://github.com/rust-lang/rust/commit/47ce9819033d235715474f8ea0420a5610855f7f"}], "stats": {"total": 62, "additions": 31, "deletions": 31}, "files": [{"sha": "e4e504e58d9926046f8e2d9b04e160353dbce72e", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df41115213e851b9f23dfea3d6782dea5243a5d4/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df41115213e851b9f23dfea3d6782dea5243a5d4/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=df41115213e851b9f23dfea3d6782dea5243a5d4", "patch": "@@ -730,7 +730,7 @@ fn encode_provided_source(ebml_w: &mut writer::Encoder,\n fn encode_info_for_struct(ecx: &EncodeContext,\n                           ebml_w: &mut writer::Encoder,\n                           path: &[ast_map::path_elt],\n-                          fields: &[@struct_field],\n+                          fields: &[struct_field],\n                           global_index: @mut ~[entry<i64>])\n                           -> ~[entry<i64>] {\n     /* Each class has its own index, since different classes"}, {"sha": "b01ea851a1ecdec2769994a6bc56c6dbf245de66", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df41115213e851b9f23dfea3d6782dea5243a5d4/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df41115213e851b9f23dfea3d6782dea5243a5d4/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=df41115213e851b9f23dfea3d6782dea5243a5d4", "patch": "@@ -1310,7 +1310,7 @@ impl<'self> Visitor<()> for Context<'self> {\n         self.cur_struct_def_id = old_id;\n     }\n \n-    fn visit_struct_field(&mut self, s: @ast::struct_field, _: ()) {\n+    fn visit_struct_field(&mut self, s: &ast::struct_field, _: ()) {\n         self.with_lint_attrs(s.node.attrs, |cx| {\n             check_missing_doc_struct_field(cx, s);\n             check_attrs_usage(cx, s.node.attrs);"}, {"sha": "d8fcdac2b1e81757fbc43aad252b193b862533e3", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df41115213e851b9f23dfea3d6782dea5243a5d4/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df41115213e851b9f23dfea3d6782dea5243a5d4/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=df41115213e851b9f23dfea3d6782dea5243a5d4", "patch": "@@ -3873,9 +3873,9 @@ impl Resolver {\n     fn resolve_struct(&mut self,\n                           id: NodeId,\n                           generics: &Generics,\n-                          fields: &[@struct_field]) {\n-        let mut ident_map: HashMap<ast::Ident,@struct_field> = HashMap::new();\n-        for &field in fields.iter() {\n+                          fields: &[struct_field]) {\n+        let mut ident_map: HashMap<ast::Ident, &struct_field> = HashMap::new();\n+        for field in fields.iter() {\n             match field.node.kind {\n                 named_field(ident, _) => {\n                     match ident_map.find(&ident) {"}, {"sha": "f992411a548509f1194333d2a2f61d708735148a", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df41115213e851b9f23dfea3d6782dea5243a5d4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df41115213e851b9f23dfea3d6782dea5243a5d4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=df41115213e851b9f23dfea3d6782dea5243a5d4", "patch": "@@ -2037,7 +2037,7 @@ pub fn trans_enum_variant(ccx: @mut CrateContext,\n }\n \n pub fn trans_tuple_struct(ccx: @mut CrateContext,\n-                          fields: &[@ast::struct_field],\n+                          fields: &[ast::struct_field],\n                           ctor_id: ast::NodeId,\n                           param_substs: Option<@param_substs>,\n                           llfndecl: ValueRef) {\n@@ -2062,7 +2062,7 @@ impl IdAndTy for ast::variant_arg {\n     fn ty(&self) -> ast::P<ast::Ty> { self.ty }\n }\n \n-impl IdAndTy for @ast::struct_field {\n+impl IdAndTy for ast::struct_field {\n     fn id(&self) -> ast::NodeId { self.node.id }\n     fn ty(&self) -> ast::P<ast::Ty> { self.node.ty }\n }"}, {"sha": "f8d5506bd0791fc09a2e12aa89c95271b88cde7c", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df41115213e851b9f23dfea3d6782dea5243a5d4/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df41115213e851b9f23dfea3d6782dea5243a5d4/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=df41115213e851b9f23dfea3d6782dea5243a5d4", "patch": "@@ -3693,7 +3693,7 @@ impl VariantInfo {\n             },\n             ast::struct_variant_kind(ref struct_def) => {\n \n-                let fields: &[@struct_field] = struct_def.fields;\n+                let fields: &[struct_field] = struct_def.fields;\n \n                 assert!(fields.len() > 0);\n \n@@ -4082,7 +4082,7 @@ pub fn lookup_struct_field(cx: ctxt,\n     }\n }\n \n-fn struct_field_tys(fields: &[@struct_field]) -> ~[field_ty] {\n+fn struct_field_tys(fields: &[struct_field]) -> ~[field_ty] {\n     fields.map(|field| {\n         match field.node.kind {\n             named_field(ident, visibility) => {"}, {"sha": "967da1438101cb49974105783d2220306c69cc5f", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df41115213e851b9f23dfea3d6782dea5243a5d4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df41115213e851b9f23dfea3d6782dea5243a5d4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=df41115213e851b9f23dfea3d6782dea5243a5d4", "patch": "@@ -620,7 +620,7 @@ pub fn convert_struct(ccx: &CrateCtxt,\n \n     // Write the type of each of the members\n     for f in struct_def.fields.iter() {\n-       convert_field(ccx, &tpt.generics, *f);\n+       convert_field(ccx, &tpt.generics, f);\n     }\n     let substs = mk_item_substs(ccx, &tpt.generics, None);\n     let selfty = ty::mk_struct(tcx, local_def(id), substs);"}, {"sha": "399e73b008fba27c4d671b270279751a51e4909f", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df41115213e851b9f23dfea3d6782dea5243a5d4/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df41115213e851b9f23dfea3d6782dea5243a5d4/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=df41115213e851b9f23dfea3d6782dea5243a5d4", "patch": "@@ -80,7 +80,7 @@ pub struct Struct {\n     name: Ident,\n     generics: ast::Generics,\n     attrs: ~[ast::Attribute],\n-    fields: ~[@ast::struct_field],\n+    fields: ~[ast::struct_field],\n     where: Span,\n }\n "}, {"sha": "15dbc68b2ea1158d5dde025a1153d75c551f19ad", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df41115213e851b9f23dfea3d6782dea5243a5d4/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df41115213e851b9f23dfea3d6782dea5243a5d4/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=df41115213e851b9f23dfea3d6782dea5243a5d4", "patch": "@@ -46,7 +46,7 @@ impl RustdocVisitor {\n                 vis: item.vis,\n                 attrs: item.attrs.clone(),\n                 generics: generics.clone(),\n-                fields: sd.fields.iter().map(|x| (*x).clone()).to_owned_vec(),\n+                fields: sd.fields.clone(),\n                 where: item.span\n             }\n         }"}, {"sha": "52613ba01a13ff9deb291ac10b281b715fcb0295", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df41115213e851b9f23dfea3d6782dea5243a5d4/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df41115213e851b9f23dfea3d6782dea5243a5d4/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=df41115213e851b9f23dfea3d6782dea5243a5d4", "patch": "@@ -1105,7 +1105,7 @@ impl visibility {\n     }\n }\n \n-#[deriving(Eq, Encodable, Decodable,IterBytes)]\n+#[deriving(Clone, Eq, Encodable, Decodable,IterBytes)]\n pub struct struct_field_ {\n     kind: struct_field_kind,\n     id: NodeId,\n@@ -1115,15 +1115,15 @@ pub struct struct_field_ {\n \n pub type struct_field = Spanned<struct_field_>;\n \n-#[deriving(Eq, Encodable, Decodable,IterBytes)]\n+#[deriving(Clone, Eq, Encodable, Decodable,IterBytes)]\n pub enum struct_field_kind {\n     named_field(Ident, visibility),\n     unnamed_field   // element of a tuple-like struct\n }\n \n #[deriving(Eq, Encodable, Decodable,IterBytes)]\n pub struct struct_def {\n-    fields: ~[@struct_field], /* fields, not including ctor */\n+    fields: ~[struct_field], /* fields, not including ctor */\n     /* ID of the constructor. This is only used for tuple- or enum-like\n      * structs. */\n     ctor_id: Option<NodeId>"}, {"sha": "11a55a4adbc094d63322534d0d3b718683d9d32e", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df41115213e851b9f23dfea3d6782dea5243a5d4/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df41115213e851b9f23dfea3d6782dea5243a5d4/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=df41115213e851b9f23dfea3d6782dea5243a5d4", "patch": "@@ -565,7 +565,7 @@ impl<'self, O: IdVisitingOperation> Visitor<()> for IdVisitor<'self, O> {\n         }\n     }\n \n-    fn visit_struct_field(&mut self, struct_field: @struct_field, env: ()) {\n+    fn visit_struct_field(&mut self, struct_field: &struct_field, env: ()) {\n         self.operation.visit_id(struct_field.node.id);\n         visit::walk_struct_field(self, struct_field, env)\n     }"}, {"sha": "4f5b0f69a2484478e3c1ba45192f57d355ba0889", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/df41115213e851b9f23dfea3d6782dea5243a5d4/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df41115213e851b9f23dfea3d6782dea5243a5d4/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=df41115213e851b9f23dfea3d6782dea5243a5d4", "patch": "@@ -118,10 +118,10 @@ pub trait ast_fold {\n         noop_fold_item(i, self)\n     }\n \n-    fn fold_struct_field(&self, sf: @struct_field) -> @struct_field {\n+    fn fold_struct_field(&self, sf: &struct_field) -> struct_field {\n         let fold_attribute = |x| fold_attribute_(x, self);\n \n-        @Spanned {\n+        Spanned {\n             node: ast::struct_field_ {\n                 kind: sf.node.kind,\n                 id: self.new_id(sf.node.id),\n@@ -312,7 +312,7 @@ pub trait ast_fold {\n             struct_variant_kind(ref struct_def) => {\n                 kind = struct_variant_kind(@ast::struct_def {\n                     fields: struct_def.fields.iter()\n-                        .map(|f| self.fold_struct_field(*f)).collect(),\n+                        .map(|f| self.fold_struct_field(f)).collect(),\n                     ctor_id: struct_def.ctor_id.map(|c| self.new_id(c))\n                 })\n             }\n@@ -536,7 +536,7 @@ pub fn fold_generics<T:ast_fold>(generics: &Generics, fld: &T) -> Generics {\n fn fold_struct_def<T:ast_fold>(struct_def: @ast::struct_def, fld: &T)\n                                -> @ast::struct_def {\n     @ast::struct_def {\n-        fields: struct_def.fields.map(|f| fold_struct_field(*f, fld)),\n+        fields: struct_def.fields.map(|f| fold_struct_field(f, fld)),\n         ctor_id: struct_def.ctor_id.map(|cid| fld.new_id(cid)),\n     }\n }\n@@ -562,8 +562,8 @@ fn fold_trait_ref<T:ast_fold>(p: &trait_ref, fld: &T) -> trait_ref {\n     }\n }\n \n-fn fold_struct_field<T:ast_fold>(f: @struct_field, fld: &T) -> @struct_field {\n-    @Spanned {\n+fn fold_struct_field<T:ast_fold>(f: &struct_field, fld: &T) -> struct_field {\n+    Spanned {\n         node: ast::struct_field_ {\n             kind: f.node.kind,\n             id: fld.new_id(f.node.id),"}, {"sha": "5bf8c60cdc889fcf3a5cd9a8284370cf07f9ecfa", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/df41115213e851b9f23dfea3d6782dea5243a5d4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df41115213e851b9f23dfea3d6782dea5243a5d4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=df41115213e851b9f23dfea3d6782dea5243a5d4", "patch": "@@ -3178,15 +3178,15 @@ impl Parser {\n     // parse a structure field\n     fn parse_name_and_ty(&self,\n                          pr: visibility,\n-                         attrs: ~[Attribute]) -> @struct_field {\n+                         attrs: ~[Attribute]) -> struct_field {\n         let lo = self.span.lo;\n         if !is_plain_ident(&*self.token) {\n             self.fatal(\"expected ident\");\n         }\n         let name = self.parse_ident();\n         self.expect(&token::COLON);\n         let ty = self.parse_ty(false);\n-        @spanned(lo, self.last_span.hi, ast::struct_field_ {\n+        spanned(lo, self.last_span.hi, ast::struct_field_ {\n             kind: named_field(name, pr),\n             id: ast::DUMMY_NODE_ID,\n             ty: ty,\n@@ -4022,7 +4022,7 @@ impl Parser {\n         let class_name = self.parse_ident();\n         let generics = self.parse_generics();\n \n-        let mut fields: ~[@struct_field];\n+        let mut fields: ~[struct_field];\n         let is_tuple_like;\n \n         if self.eat(&token::LBRACE) {\n@@ -4053,7 +4053,7 @@ impl Parser {\n                     ty: p.parse_ty(false),\n                     attrs: attrs,\n                 };\n-                @spanned(lo, p.span.hi, struct_field_)\n+                spanned(lo, p.span.hi, struct_field_)\n             });\n             self.expect(&token::SEMI);\n         } else if self.eat(&token::SEMI) {\n@@ -4091,7 +4091,7 @@ impl Parser {\n     pub fn parse_single_struct_field(&self,\n                                      vis: visibility,\n                                      attrs: ~[Attribute])\n-                                     -> @struct_field {\n+                                     -> struct_field {\n         let a_var = self.parse_name_and_ty(vis, attrs);\n         match *self.token {\n             token::COMMA => {\n@@ -4108,7 +4108,7 @@ impl Parser {\n     }\n \n     // parse an element of a struct definition\n-    fn parse_struct_decl_field(&self) -> @struct_field {\n+    fn parse_struct_decl_field(&self) -> struct_field {\n \n         let attrs = self.parse_outer_attributes();\n \n@@ -4470,7 +4470,7 @@ impl Parser {\n     // parse a structure-like enum variant definition\n     // this should probably be renamed or refactored...\n     fn parse_struct_def(&self) -> @struct_def {\n-        let mut fields: ~[@struct_field] = ~[];\n+        let mut fields: ~[struct_field] = ~[];\n         while *self.token != token::RBRACE {\n             fields.push(self.parse_struct_decl_field());\n         }"}, {"sha": "f19a99ffceeb970a3bab58c25392eab07535b25a", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df41115213e851b9f23dfea3d6782dea5243a5d4/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df41115213e851b9f23dfea3d6782dea5243a5d4/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=df41115213e851b9f23dfea3d6782dea5243a5d4", "patch": "@@ -92,7 +92,7 @@ pub trait Visitor<E:Clone> {\n     fn visit_struct_def(&mut self, s:@struct_def, i:Ident, g:&Generics, n:NodeId, e:E) {\n         walk_struct_def(self, s, i, g, n, e)\n     }\n-    fn visit_struct_field(&mut self, s:@struct_field, e:E) { walk_struct_field(self, s, e) }\n+    fn visit_struct_field(&mut self, s:&struct_field, e:E) { walk_struct_field(self, s, e) }\n     fn visit_variant(&mut self, v:&variant, g:&Generics, e:E) { walk_variant(self, v, g, e) }\n     fn visit_opt_lifetime_ref(&mut self,\n                               _span: Span,\n@@ -538,7 +538,7 @@ pub fn walk_struct_def<E:Clone, V:Visitor<E>>(visitor: &mut V,\n                                  _: NodeId,\n                                  env: E) {\n     for field in struct_definition.fields.iter() {\n-        visitor.visit_struct_field(*field, env.clone())\n+        visitor.visit_struct_field(field, env.clone())\n     }\n }\n "}]}