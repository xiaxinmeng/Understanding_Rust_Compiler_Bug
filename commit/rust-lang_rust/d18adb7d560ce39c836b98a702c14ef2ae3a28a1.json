{"sha": "d18adb7d560ce39c836b98a702c14ef2ae3a28a1", "node_id": "C_kwDOAAsO6NoAKGQxOGFkYjdkNTYwY2UzOWM4MzZiOThhNzAyYzE0ZWYyYWUzYTI4YTE", "commit": {"author": {"name": "IQuant", "email": "quant3234@gmail.com", "date": "2023-03-03T15:56:45Z"}, "committer": {"name": "IQuant", "email": "quant3234@gmail.com", "date": "2023-04-04T15:34:50Z"}, "message": "Migrate SuggestTuplePattern", "tree": {"sha": "07edc5fc9245d4b6e97cc8bdc70f7d3dd37ede6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07edc5fc9245d4b6e97cc8bdc70f7d3dd37ede6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d18adb7d560ce39c836b98a702c14ef2ae3a28a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d18adb7d560ce39c836b98a702c14ef2ae3a28a1", "html_url": "https://github.com/rust-lang/rust/commit/d18adb7d560ce39c836b98a702c14ef2ae3a28a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d18adb7d560ce39c836b98a702c14ef2ae3a28a1/comments", "author": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "committer": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23b8567a78bd3899dd963e83ed2d698c044c877f", "url": "https://api.github.com/repos/rust-lang/rust/commits/23b8567a78bd3899dd963e83ed2d698c044c877f", "html_url": "https://github.com/rust-lang/rust/commit/23b8567a78bd3899dd963e83ed2d698c044c877f"}], "stats": {"total": 78, "additions": 54, "deletions": 24}, "files": [{"sha": "cde0f8e35d0606f3270b8245237caca6bbd35e60", "filename": "compiler/rustc_infer/messages.ftl", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d18adb7d560ce39c836b98a702c14ef2ae3a28a1/compiler%2Frustc_infer%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d18adb7d560ce39c836b98a702c14ef2ae3a28a1/compiler%2Frustc_infer%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fmessages.ftl?ref=d18adb7d560ce39c836b98a702c14ef2ae3a28a1", "patch": "@@ -364,4 +364,7 @@ infer_sarwa_result = you can convert from `&Result<T, E>` to `Result<&T, &E>` us\n infer_suggest_accessing_field = you might have meant to use field `{$name}` whose type is `{$ty}`\n \n infer_sbfrit_change_return_type = you could change the return type to be a boxed trait object\n-infer_sbfrit_box_return_expr = if you change the return type to expect trait objects, box the returned expressions\n\\ No newline at end of file\n+infer_sbfrit_box_return_expr = if you change the return type to expect trait objects, box the returned expressions\n+\n+infer_stp_wrap_one = try wrapping the pattern in `{$variant}`\n+infer_stp_wrap_many = try wrapping the pattern in a variant of `{$path}`"}, {"sha": "439d8a381e43975b69464fcb2ac6cec19f3abf38", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d18adb7d560ce39c836b98a702c14ef2ae3a28a1/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d18adb7d560ce39c836b98a702c14ef2ae3a28a1/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=d18adb7d560ce39c836b98a702c14ef2ae3a28a1", "patch": "@@ -1335,3 +1335,39 @@ pub enum SuggestBoxingForReturnImplTrait {\n         ends: Vec<Span>,\n     },\n }\n+\n+#[derive(Subdiagnostic)]\n+#[multipart_suggestion(infer_stp_wrap_one, applicability = \"maybe-incorrect\")]\n+pub struct SuggestTuplePatternOne {\n+    pub variant: String,\n+    #[suggestion_part(code = \"{variant}(\")]\n+    pub span_low: Span,\n+    #[suggestion_part(code = \")\")]\n+    pub span_high: Span,\n+}\n+\n+pub struct SuggestTuplePatternMany {\n+    pub path: String,\n+    pub cause_span: Span,\n+    pub compatible_variants: Vec<String>,\n+}\n+\n+impl AddToDiagnostic for SuggestTuplePatternMany {\n+    fn add_to_diagnostic_with<F>(self, diag: &mut rustc_errors::Diagnostic, f: F)\n+    where\n+        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n+    {\n+        diag.set_arg(\"path\", self.path);\n+        let message = f(diag, crate::fluent_generated::infer_stp_wrap_many.into());\n+        diag.multipart_suggestions(\n+            message,\n+            self.compatible_variants.into_iter().map(|variant| {\n+                vec![\n+                    (self.cause_span.shrink_to_lo(), format!(\"{}(\", variant)),\n+                    (self.cause_span.shrink_to_hi(), \")\".to_string()),\n+                ]\n+            }),\n+            rustc_errors::Applicability::MaybeIncorrect,\n+        );\n+    }\n+}"}, {"sha": "e7f5fdaef7462802e9caabbba807b347ccf79751", "filename": "compiler/rustc_infer/src/infer/error_reporting/suggest.rs", "status": "modified", "additions": 14, "deletions": 23, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d18adb7d560ce39c836b98a702c14ef2ae3a28a1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d18adb7d560ce39c836b98a702c14ef2ae3a28a1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs?ref=d18adb7d560ce39c836b98a702c14ef2ae3a28a1", "patch": "@@ -1,7 +1,7 @@\n use hir::def::CtorKind;\n use hir::intravisit::{walk_expr, walk_stmt, Visitor};\n use rustc_data_structures::fx::FxIndexSet;\n-use rustc_errors::{Applicability, Diagnostic};\n+use rustc_errors::Diagnostic;\n use rustc_hir as hir;\n use rustc_middle::traits::{\n     IfExpressionCause, MatchExpressionArmCause, ObligationCause, ObligationCauseCode,\n@@ -16,7 +16,7 @@ use crate::errors::{\n     ConsiderAddingAwait, DiagArg, FnConsiderCasting, FnItemsAreDistinct, FnUniqTypes,\n     FunctionPointerSuggestion, SuggAddLetForLetChains, SuggestAccessingField,\n     SuggestAsRefWhereAppropriate, SuggestBoxingForReturnImplTrait,\n-    SuggestRemoveSemiOrReturnBinding,\n+    SuggestRemoveSemiOrReturnBinding, SuggestTuplePatternMany, SuggestTuplePatternOne,\n };\n \n use super::TypeErrCtxt;\n@@ -134,30 +134,21 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 match &compatible_variants[..] {\n                     [] => {}\n                     [variant] => {\n-                        diag.multipart_suggestion_verbose(\n-                            &format!(\"try wrapping the pattern in `{}`\", variant),\n-                            vec![\n-                                (cause.span.shrink_to_lo(), format!(\"{}(\", variant)),\n-                                (cause.span.shrink_to_hi(), \")\".to_string()),\n-                            ],\n-                            Applicability::MaybeIncorrect,\n-                        );\n+                        let sugg = SuggestTuplePatternOne {\n+                            variant: variant.to_owned(),\n+                            span_low: cause.span.shrink_to_lo(),\n+                            span_high: cause.span.shrink_to_hi(),\n+                        };\n+                        diag.subdiagnostic(sugg);\n                     }\n                     _ => {\n                         // More than one matching variant.\n-                        diag.multipart_suggestions(\n-                            &format!(\n-                                \"try wrapping the pattern in a variant of `{}`\",\n-                                self.tcx.def_path_str(expected_adt.did())\n-                            ),\n-                            compatible_variants.into_iter().map(|variant| {\n-                                vec![\n-                                    (cause.span.shrink_to_lo(), format!(\"{}(\", variant)),\n-                                    (cause.span.shrink_to_hi(), \")\".to_string()),\n-                                ]\n-                            }),\n-                            Applicability::MaybeIncorrect,\n-                        );\n+                        let sugg = SuggestTuplePatternMany {\n+                            path: self.tcx.def_path_str(expected_adt.did()),\n+                            cause_span: cause.span,\n+                            compatible_variants,\n+                        };\n+                        diag.subdiagnostic(sugg);\n                     }\n                 }\n             }"}]}