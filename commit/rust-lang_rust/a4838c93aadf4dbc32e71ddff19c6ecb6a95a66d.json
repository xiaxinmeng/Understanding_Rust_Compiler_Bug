{"sha": "a4838c93aadf4dbc32e71ddff19c6ecb6a95a66d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ODM4YzkzYWFkZjRkYmMzMmU3MWRkZmYxOWM2ZWNiNmE5NWE2NmQ=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-02T18:38:45Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-06T17:42:39Z"}, "message": "Enabling pipes for all stages, and updating closure syntax.", "tree": {"sha": "42ed7b0a3a4cd8d6819af8d8a487647d5443edd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42ed7b0a3a4cd8d6819af8d8a487647d5443edd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4838c93aadf4dbc32e71ddff19c6ecb6a95a66d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4838c93aadf4dbc32e71ddff19c6ecb6a95a66d", "html_url": "https://github.com/rust-lang/rust/commit/a4838c93aadf4dbc32e71ddff19c6ecb6a95a66d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4838c93aadf4dbc32e71ddff19c6ecb6a95a66d/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67b0760592e1cf9aad2e84f1534ef08c3c5f1a2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/67b0760592e1cf9aad2e84f1534ef08c3c5f1a2b", "html_url": "https://github.com/rust-lang/rust/commit/67b0760592e1cf9aad2e84f1534ef08c3c5f1a2b"}], "stats": {"total": 38, "additions": 17, "deletions": 21}, "files": [{"sha": "de0e7fb8f6723726435d4162efbc0e4e847ad5ff", "filename": "src/libcore/core.rc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4838c93aadf4dbc32e71ddff19c6ecb6a95a66d/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/a4838c93aadf4dbc32e71ddff19c6ecb6a95a66d/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=a4838c93aadf4dbc32e71ddff19c6ecb6a95a66d", "patch": "@@ -187,8 +187,6 @@ mod newcomm;\n mod comm;\n mod task;\n mod future;\n-// TODO: remove the conditionals once a new snapshot happens\n-#[cfg(stage1)]\n mod pipes;\n \n // Runtime and language-primitive support"}, {"sha": "ae141cedc8292d14dc341bace6bac051a09b2d90", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4838c93aadf4dbc32e71ddff19c6ecb6a95a66d/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4838c93aadf4dbc32e71ddff19c6ecb6a95a66d/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=a4838c93aadf4dbc32e71ddff19c6ecb6a95a66d", "patch": "@@ -197,7 +197,7 @@ fn spawn_service<T: send>(\n     // This is some nasty gymnastics required to safely move the pipe\n     // into a new task.\n     let server = ~mut some(server);\n-    task::spawn() {|move service|\n+    do task::spawn |move service| {\n         let mut server_ = none;\n         server_ <-> *server;\n         service(option::unwrap(server_))"}, {"sha": "99265353fe5dede219015d84042ac1bca5b0e05b", "filename": "src/test/bench/msgsend-ring-contracts.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a4838c93aadf4dbc32e71ddff19c6ecb6a95a66d/src%2Ftest%2Fbench%2Fmsgsend-ring-contracts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4838c93aadf4dbc32e71ddff19c6ecb6a95a66d/src%2Ftest%2Fbench%2Fmsgsend-ring-contracts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-contracts.rs?ref=a4838c93aadf4dbc32e71ddff19c6ecb6a95a66d", "patch": "@@ -60,7 +60,7 @@ fn thread_ring(i: uint,\n     let mut num_chan <- some(num_chan);\n     let mut num_port <- some(num_port);\n     // Send/Receive lots of messages.\n-    for uint::range(0u, count) {|j|\n+    for uint::range(0u, count) |j| {\n         //#error(\"task %?, iter %?\", i, j);\n         let mut num_chan2 = none;\n         let mut num_port2 = none;\n@@ -97,29 +97,29 @@ fn main(args: [str]/~) {\n     // create the ring\n     let mut futures = []/~;\n \n-    for uint::range(1u, num_tasks) {|i|\n+    for uint::range(1u, num_tasks) |i| {\n         //#error(\"spawning %?\", i);\n         let (new_chan, num_port) = ring::init();\n         let num_chan2 = ~mut none;\n         *num_chan2 <-> num_chan;\n         let num_port = ~mut some(num_port);\n-        futures += [future::spawn {|move num_chan2, move num_port|\n+        futures += [future::spawn(|move num_chan2, move num_port| {\n             let mut num_chan = none;\n             num_chan <-> *num_chan2;\n             let mut num_port1 = none;\n             num_port1 <-> *num_port;\n             thread_ring(i, msg_per_task,\n                         option::unwrap(num_chan),\n                         option::unwrap(num_port1))\n-        }]/~;\n+        })]/~;\n         num_chan = some(new_chan);\n     };\n \n     // do our iteration\n     thread_ring(0u, msg_per_task, option::unwrap(num_chan), num_port);\n \n     // synchronize\n-    for futures.each {|f| f.get() };\n+    for futures.each |f| { f.get() };\n \n     let stop = time::precise_time_s();\n "}, {"sha": "7efedfe6418ca35cd1ddeacae585f432944ffbef", "filename": "src/test/run-pass/pipe-manual-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4838c93aadf4dbc32e71ddff19c6ecb6a95a66d/src%2Ftest%2Frun-pass%2Fpipe-manual-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4838c93aadf4dbc32e71ddff19c6ecb6a95a66d/src%2Ftest%2Frun-pass%2Fpipe-manual-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-manual-1.rs?ref=a4838c93aadf4dbc32e71ddff19c6ecb6a95a66d", "patch": "@@ -97,12 +97,12 @@ fn main() {\n     let client_ = ~mut some(client_);\n     let server_ = ~mut some(server_);\n \n-    task::spawn {|move client_|\n+    do task::spawn |move client_| {\n         let mut client__ = none;\n         *client_ <-> client__;\n         client(option::unwrap(client__));\n     };\n-    task::spawn {|move server_|\n+    do task::spawn |move server_| {\n         let mut server_\u02ca = none;\n         *server_ <-> server_\u02ca;\n         server(option::unwrap(server_\u02ca));"}, {"sha": "0619a7b6b44a1042a4e202c31fa8288bbb50cca8", "filename": "src/test/run-pass/pipe-manual-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4838c93aadf4dbc32e71ddff19c6ecb6a95a66d/src%2Ftest%2Frun-pass%2Fpipe-manual-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4838c93aadf4dbc32e71ddff19c6ecb6a95a66d/src%2Ftest%2Frun-pass%2Fpipe-manual-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-manual-2.rs?ref=a4838c93aadf4dbc32e71ddff19c6ecb6a95a66d", "patch": "@@ -258,12 +258,12 @@ fn main() {\n     let client_ = ~mut some(client_);\n     let server_ = ~mut some(server_);\n \n-    task::spawn {|move client_|\n+    do task::spawn |move client_| {\n         let mut client__ = none;\n         *client_ <-> client__;\n         client(option::unwrap(client__));\n     };\n-    task::spawn {|move server_|\n+    do task::spawn |move server_| {\n         let mut server_\u02ca = none;\n         *server_ <-> server_\u02ca;\n         server(option::unwrap(server_\u02ca));"}, {"sha": "905063ea713cb573de188ecef51fd9e3711182e8", "filename": "src/test/run-pass/pipe-manual-3.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a4838c93aadf4dbc32e71ddff19c6ecb6a95a66d/src%2Ftest%2Frun-pass%2Fpipe-manual-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4838c93aadf4dbc32e71ddff19c6ecb6a95a66d/src%2Ftest%2Frun-pass%2Fpipe-manual-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-manual-3.rs?ref=a4838c93aadf4dbc32e71ddff19c6ecb6a95a66d", "patch": "@@ -210,7 +210,7 @@ mod pingpong {\n \n     impl abominable for client::ping {\n         fn send() -> fn@(-client::ping, ping) -> client::pong {\n-            {|pipe, data|\n+            |pipe, data| {\n                 let p = pipes::packet();\n                 pipes::send(pipe, pingpong::ping_message(p));\n                 pipes::recv_packet(p)\n@@ -220,7 +220,7 @@ mod pingpong {\n \n     impl abominable for client::pong {\n         fn recv() -> fn@(-client::pong) -> (client::ping, pong) {\n-            {|pipe|\n+            |pipe| {\n                 let packet = pipes::recv(pipe);\n                 if packet == none {\n                     fail \"sender closed the connection\"\n@@ -238,7 +238,7 @@ mod pingpong {\n \n     impl abominable for server::ping {\n         fn recv() -> fn@(-server::ping) -> (server::pong, ping) {\n-            {|pipe|\n+            |pipe| {\n                 let packet = pipes::recv(pipe);\n                 if packet == none {\n                     fail \"sender closed the connection\"\n@@ -251,7 +251,7 @@ mod pingpong {\n \n     impl abominable for server::pong {\n         fn send() -> fn@(-server::pong, pong) -> server::ping {\n-            {|pipe, data|\n+            |pipe, data| {\n                 let p = pipes::packet();\n                 pipes::send(pipe, pingpong::pong_message(p));\n                 pipes::recv_packet(p)\n@@ -294,12 +294,12 @@ fn main() {\n     let client_ = ~mut some(client_);\n     let server_ = ~mut some(server_);\n \n-    task::spawn {|move client_|\n+    do task::spawn |move client_| {\n         let mut client__ = none;\n         *client_ <-> client__;\n         test::client(option::unwrap(client__));\n     };\n-    task::spawn {|move server_|\n+    do task::spawn |move server_| {\n         let mut server_\u02ca = none;\n         *server_ <-> server_\u02ca;\n         test::server(option::unwrap(server_\u02ca));"}, {"sha": "932a4f9a43221cd28fd343925283675fa874a4c5", "filename": "src/test/run-pass/pipe-sleep.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a4838c93aadf4dbc32e71ddff19c6ecb6a95a66d/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4838c93aadf4dbc32e71ddff19c6ecb6a95a66d/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs?ref=a4838c93aadf4dbc32e71ddff19c6ecb6a95a66d", "patch": "@@ -48,9 +48,7 @@ fn main() {\n          chan.recv()(chan)]\n     ];\n \n-    let c = pipes::spawn_service(oneshot::init) {|p|\n-        #recv(p);\n-    };\n+    let c = pipes::spawn_service(oneshot::init, |p| { #recv(p); });\n \n     let iotask = uv::global_loop::get();\n     sleep(iotask, 5000);"}]}