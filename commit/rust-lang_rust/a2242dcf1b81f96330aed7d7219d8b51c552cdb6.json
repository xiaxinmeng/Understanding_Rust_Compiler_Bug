{"sha": "a2242dcf1b81f96330aed7d7219d8b51c552cdb6", "node_id": "C_kwDOAAsO6NoAKGEyMjQyZGNmMWI4MWY5NjMzMGFlZDdkNzIxOWQ4YjUxYzU1MmNkYjY", "commit": {"author": {"name": "Andrzej G\u0142uszak", "email": "gluszak.andrzej@gmail.com", "date": "2021-10-20T19:35:35Z"}, "committer": {"name": "Andrzej G\u0142uszak", "email": "gluszak.andrzej@gmail.com", "date": "2021-10-20T19:35:35Z"}, "message": "Fixes", "tree": {"sha": "c87afb9f86ab10421ad77938c8c076ff40674980", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c87afb9f86ab10421ad77938c8c076ff40674980"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2242dcf1b81f96330aed7d7219d8b51c552cdb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2242dcf1b81f96330aed7d7219d8b51c552cdb6", "html_url": "https://github.com/rust-lang/rust/commit/a2242dcf1b81f96330aed7d7219d8b51c552cdb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2242dcf1b81f96330aed7d7219d8b51c552cdb6/comments", "author": {"login": "agluszak", "id": 1674445, "node_id": "MDQ6VXNlcjE2NzQ0NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1674445?v=4", "gravatar_id": "", "url": "https://api.github.com/users/agluszak", "html_url": "https://github.com/agluszak", "followers_url": "https://api.github.com/users/agluszak/followers", "following_url": "https://api.github.com/users/agluszak/following{/other_user}", "gists_url": "https://api.github.com/users/agluszak/gists{/gist_id}", "starred_url": "https://api.github.com/users/agluszak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/agluszak/subscriptions", "organizations_url": "https://api.github.com/users/agluszak/orgs", "repos_url": "https://api.github.com/users/agluszak/repos", "events_url": "https://api.github.com/users/agluszak/events{/privacy}", "received_events_url": "https://api.github.com/users/agluszak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "agluszak", "id": 1674445, "node_id": "MDQ6VXNlcjE2NzQ0NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/1674445?v=4", "gravatar_id": "", "url": "https://api.github.com/users/agluszak", "html_url": "https://github.com/agluszak", "followers_url": "https://api.github.com/users/agluszak/followers", "following_url": "https://api.github.com/users/agluszak/following{/other_user}", "gists_url": "https://api.github.com/users/agluszak/gists{/gist_id}", "starred_url": "https://api.github.com/users/agluszak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/agluszak/subscriptions", "organizations_url": "https://api.github.com/users/agluszak/orgs", "repos_url": "https://api.github.com/users/agluszak/repos", "events_url": "https://api.github.com/users/agluszak/events{/privacy}", "received_events_url": "https://api.github.com/users/agluszak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98676efdc575986370dbf86f1fce0af7d72b5c23", "url": "https://api.github.com/repos/rust-lang/rust/commits/98676efdc575986370dbf86f1fce0af7d72b5c23", "html_url": "https://github.com/rust-lang/rust/commit/98676efdc575986370dbf86f1fce0af7d72b5c23"}], "stats": {"total": 46, "additions": 17, "deletions": 29}, "files": [{"sha": "edc4697f2ca37e245b1429073024d3581d089e92", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a2242dcf1b81f96330aed7d7219d8b51c552cdb6/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2242dcf1b81f96330aed7d7219d8b51c552cdb6/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=a2242dcf1b81f96330aed7d7219d8b51c552cdb6", "patch": "@@ -1,6 +1,7 @@\n use rustc_hash::{FxHashMap, FxHashSet};\n \n use hir::{HasSource, HirDisplay, Module, ModuleDef, Semantics, TypeInfo};\n+use ide_db::helpers::FamousDefs;\n use ide_db::{\n     base_db::FileId,\n     defs::{Definition, NameRefClass},\n@@ -512,13 +513,10 @@ fn fn_arg_type(ctx: &AssistContext, target_module: hir::Module, fn_arg: &ast::Ex\n         }\n \n         if ty.is_reference() || ty.is_mutable_reference() {\n-            convert_reference_type(\n-                ty.strip_references(),\n-                ctx,\n-                ctx.sema.scope(fn_arg.syntax()).krate(),\n-            )\n-            .map(|conversion| conversion.convert_type(ctx.db()))\n-            .or_else(|| ty.display_source_code(ctx.db(), target_module.into()).ok())\n+            let famous_defs = &FamousDefs(&ctx.sema, ctx.sema.scope(fn_arg.syntax()).krate());\n+            convert_reference_type(ty.strip_references(), ctx.db(), famous_defs)\n+                .map(|conversion| conversion.convert_type(ctx.db()))\n+                .or_else(|| ty.display_source_code(ctx.db(), target_module.into()).ok())\n         } else {\n             ty.display_source_code(ctx.db(), target_module.into()).ok()\n         }"}, {"sha": "81cf72dd713be5d30b1dd7629705e2f71de384f1", "filename": "crates/ide_assists/src/handlers/generate_getter.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a2242dcf1b81f96330aed7d7219d8b51c552cdb6/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2242dcf1b81f96330aed7d7219d8b51c552cdb6/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs?ref=a2242dcf1b81f96330aed7d7219d8b51c552cdb6", "patch": "@@ -1,3 +1,4 @@\n+use ide_db::helpers::FamousDefs;\n use stdx::{format_to, to_lower_snake_case};\n use syntax::ast::{self, AstNode, HasName, HasVisibility};\n \n@@ -112,16 +113,12 @@ pub(crate) fn generate_getter_impl(\n \n             let vis = strukt.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n             let (ty, body) = if mutable {\n-                (\n-                    format!(\"&mut {}\", field_ty.to_string()),\n-                    format!(\"&mut self.{}\", field_name.to_string()),\n-                )\n+                (format!(\"&mut {}\", field_ty), format!(\"&mut self.{}\", field_name))\n             } else {\n+                let famous_defs = &FamousDefs(&ctx.sema, ctx.sema.scope(field_ty.syntax()).krate());\n                 ctx.sema\n                     .resolve_type(&field_ty)\n-                    .and_then(|ty| {\n-                        convert_reference_type(ty, ctx, ctx.sema.scope(field_ty.syntax()).krate())\n-                    })\n+                    .and_then(|ty| convert_reference_type(ty, ctx.db(), famous_defs))\n                     .map(|conversion| {\n                         cov_mark::hit!(convert_reference_type);\n                         ("}, {"sha": "8f0e76f7b8d5e5298a13be107df9e0bb81dcdf9a", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a2242dcf1b81f96330aed7d7219d8b51c552cdb6/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2242dcf1b81f96330aed7d7219d8b51c552cdb6/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=a2242dcf1b81f96330aed7d7219d8b51c552cdb6", "patch": "@@ -5,10 +5,10 @@ use std::ops;\n use itertools::Itertools;\n \n pub(crate) use gen_trait_fn_body::gen_trait_fn_body;\n-use hir::db::HirDatabase;\n-use hir::{Crate, HasSource, HirDisplay};\n-use ide_db::helpers::FamousDefs;\n-use ide_db::{helpers::SnippetCap, path_transform::PathTransform, RootDatabase};\n+use hir::{db::HirDatabase, HasSource, HirDisplay};\n+use ide_db::{\n+    helpers::FamousDefs, helpers::SnippetCap, path_transform::PathTransform, RootDatabase,\n+};\n use stdx::format_to;\n use syntax::{\n     ast::{\n@@ -577,19 +577,13 @@ impl ReferenceConversion {\n // FIXME: It should return a new hir::Type, but currently constructing new types is too cumbersome\n //        and all users of this function operate on string type names, so they can do the conversion\n //        itself themselves.\n-//        Another problem is that it probably shouldn't take AssistContext as a parameter, as\n-//        it should be usable not only in assists.\n pub(crate) fn convert_reference_type(\n     ty: hir::Type,\n-    ctx: &AssistContext,\n-    krate: Option<Crate>,\n+    db: &RootDatabase,\n+    famous_defs: &FamousDefs,\n ) -> Option<ReferenceConversion> {\n-    let sema = &ctx.sema;\n-    let db = sema.db;\n-    let famous_defs = &FamousDefs(sema, krate);\n-\n     handle_copy(&ty, db)\n-        .or_else(|| handle_as_ref_str(&ty, db, famous_defs, ctx))\n+        .or_else(|| handle_as_ref_str(&ty, db, famous_defs))\n         .or_else(|| handle_as_ref_slice(&ty, db, famous_defs))\n         .or_else(|| handle_dereferenced(&ty, db, famous_defs))\n         .or_else(|| handle_option_as_ref(&ty, db, famous_defs))\n@@ -605,9 +599,8 @@ fn handle_as_ref_str(\n     ty: &hir::Type,\n     db: &dyn HirDatabase,\n     famous_defs: &FamousDefs,\n-    ctx: &AssistContext,\n ) -> Option<ReferenceConversionType> {\n-    let module = ctx.sema.to_module_def(ctx.file_id())?;\n+    let module = famous_defs.1?.root_module(db);\n     let str_type = hir::BuiltinType::str().ty(db, module);\n \n     ty.impls_trait(db, famous_defs.core_convert_AsRef()?, &[str_type])"}]}