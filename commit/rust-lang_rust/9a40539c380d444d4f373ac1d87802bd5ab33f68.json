{"sha": "9a40539c380d444d4f373ac1d87802bd5ab33f68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNDA1MzljMzgwZDQ0NGQ0ZjM3M2FjMWQ4NzgwMmJkNWFiMzNmNjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-25T05:23:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-25T05:23:24Z"}, "message": "Auto merge of #80364 - Dylan-DPC:rollup-0y96okz, r=Dylan-DPC\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #79213 (Stabilize `core::slice::fill`)\n - #79999 (Refactored verbose print into a function)\n - #80160 (Implemented a compiler diagnostic for move async mistake)\n - #80274 (Rename rustc_middle::lint::LintSource)\n - #80280 (Add installation commands to `x` tool README)\n - #80319 (Fix elided lifetimes shown as `'_` on async functions)\n - #80327 (Updated the match with the matches macro)\n - #80330 (Fix typo in simplify_try.rs)\n - #80340 (Don't unnecessarily override attrs for Module)\n - #80342 (Fix typo)\n - #80352 (BTreeMap: make test cases more explicit on failure)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8dcfd6d3973fed9746a951015521e2e62ee97b45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dcfd6d3973fed9746a951015521e2e62ee97b45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a40539c380d444d4f373ac1d87802bd5ab33f68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a40539c380d444d4f373ac1d87802bd5ab33f68", "html_url": "https://github.com/rust-lang/rust/commit/9a40539c380d444d4f373ac1d87802bd5ab33f68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a40539c380d444d4f373ac1d87802bd5ab33f68/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cae1f4ddf24afe1a7508250ae0de79ba6f1b9755", "url": "https://api.github.com/repos/rust-lang/rust/commits/cae1f4ddf24afe1a7508250ae0de79ba6f1b9755", "html_url": "https://github.com/rust-lang/rust/commit/cae1f4ddf24afe1a7508250ae0de79ba6f1b9755"}, {"sha": "7c7812dfd3c3cd7c117e29a1fc90b3801b206621", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c7812dfd3c3cd7c117e29a1fc90b3801b206621", "html_url": "https://github.com/rust-lang/rust/commit/7c7812dfd3c3cd7c117e29a1fc90b3801b206621"}], "stats": {"total": 308, "additions": 203, "deletions": 105}, "files": [{"sha": "5cece569903c77aa8d02e88b6c286ede650321e1", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -12,7 +12,9 @@ use rustc_hir::{intravisit, HirId};\n use rustc_middle::hir::map::Map;\n use rustc_middle::lint::LevelSource;\n use rustc_middle::lint::LintDiagnosticBuilder;\n-use rustc_middle::lint::{struct_lint_level, LintLevelMap, LintLevelSets, LintSet, LintSource};\n+use rustc_middle::lint::{\n+    struct_lint_level, LintLevelMap, LintLevelSets, LintLevelSource, LintSet,\n+};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::lint::{builtin, Level, Lint, LintId};\n@@ -91,7 +93,7 @@ impl<'s> LintLevelsBuilder<'s> {\n             };\n             for id in ids {\n                 self.check_gated_lint(id, DUMMY_SP);\n-                let src = LintSource::CommandLine(lint_flag_val, orig_level);\n+                let src = LintLevelSource::CommandLine(lint_flag_val, orig_level);\n                 specs.insert(id, (level, src));\n             }\n         }\n@@ -128,19 +130,19 @@ impl<'s> LintLevelsBuilder<'s> {\n                 );\n                 diag_builder.span_label(src.span(), \"overruled by previous forbid\");\n                 match old_src {\n-                    LintSource::Default => {\n+                    LintLevelSource::Default => {\n                         diag_builder.note(&format!(\n                             \"`forbid` lint level is the default for {}\",\n                             id.to_string()\n                         ));\n                     }\n-                    LintSource::Node(_, forbid_source_span, reason) => {\n+                    LintLevelSource::Node(_, forbid_source_span, reason) => {\n                         diag_builder.span_label(forbid_source_span, \"`forbid` level set here\");\n                         if let Some(rationale) = reason {\n                             diag_builder.note(&rationale.as_str());\n                         }\n                     }\n-                    LintSource::CommandLine(_, _) => {\n+                    LintLevelSource::CommandLine(_, _) => {\n                         diag_builder.note(\"`forbid` lint level was set on command line\");\n                     }\n                 }\n@@ -276,7 +278,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                 let name = meta_item.path.segments.last().expect(\"empty lint name\").ident.name;\n                 match store.check_lint_name(&name.as_str(), tool_name) {\n                     CheckLintNameResult::Ok(ids) => {\n-                        let src = LintSource::Node(name, li.span(), reason);\n+                        let src = LintLevelSource::Node(name, li.span(), reason);\n                         for &id in ids {\n                             self.check_gated_lint(id, attr.span);\n                             self.insert_spec(&mut specs, id, (level, src));\n@@ -287,7 +289,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                         match result {\n                             Ok(ids) => {\n                                 let complete_name = &format!(\"{}::{}\", tool_name.unwrap(), name);\n-                                let src = LintSource::Node(\n+                                let src = LintLevelSource::Node(\n                                     Symbol::intern(complete_name),\n                                     li.span(),\n                                     reason,\n@@ -324,7 +326,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                                     },\n                                 );\n \n-                                let src = LintSource::Node(\n+                                let src = LintLevelSource::Node(\n                                     Symbol::intern(&new_lint_name),\n                                     li.span(),\n                                     reason,\n@@ -403,7 +405,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                 }\n \n                 let (lint_attr_name, lint_attr_span) = match *src {\n-                    LintSource::Node(name, span, _) => (name, span),\n+                    LintLevelSource::Node(name, span, _) => (name, span),\n                     _ => continue,\n                 };\n \n@@ -460,7 +462,7 @@ impl<'s> LintLevelsBuilder<'s> {\n     }\n \n     /// Find the lint level for a lint.\n-    pub fn lint_level(&self, lint: &'static Lint) -> (Level, LintSource) {\n+    pub fn lint_level(&self, lint: &'static Lint) -> (Level, LintLevelSource) {\n         self.sets.get_lint_level(lint, self.cur, None, self.sess)\n     }\n "}, {"sha": "64d850192f4493b8e0d51fe609d5be3ec39ffce6", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -13,7 +13,7 @@ use rustc_span::{symbol, Span, Symbol, DUMMY_SP};\n \n /// How a lint level was set.\n #[derive(Clone, Copy, PartialEq, Eq, HashStable)]\n-pub enum LintSource {\n+pub enum LintLevelSource {\n     /// Lint is at the default level as declared\n     /// in rustc or a plugin.\n     Default,\n@@ -27,25 +27,26 @@ pub enum LintSource {\n     CommandLine(Symbol, Level),\n }\n \n-impl LintSource {\n+impl LintLevelSource {\n     pub fn name(&self) -> Symbol {\n         match *self {\n-            LintSource::Default => symbol::kw::Default,\n-            LintSource::Node(name, _, _) => name,\n-            LintSource::CommandLine(name, _) => name,\n+            LintLevelSource::Default => symbol::kw::Default,\n+            LintLevelSource::Node(name, _, _) => name,\n+            LintLevelSource::CommandLine(name, _) => name,\n         }\n     }\n \n     pub fn span(&self) -> Span {\n         match *self {\n-            LintSource::Default => DUMMY_SP,\n-            LintSource::Node(_, span, _) => span,\n-            LintSource::CommandLine(_, _) => DUMMY_SP,\n+            LintLevelSource::Default => DUMMY_SP,\n+            LintLevelSource::Node(_, span, _) => span,\n+            LintLevelSource::CommandLine(_, _) => DUMMY_SP,\n         }\n     }\n }\n \n-pub type LevelSource = (Level, LintSource);\n+/// A tuple of a lint level and its source.\n+pub type LevelSource = (Level, LintLevelSource);\n \n pub struct LintLevelSets {\n     pub list: Vec<LintSet>,\n@@ -113,7 +114,7 @@ impl LintLevelSets {\n         id: LintId,\n         mut idx: u32,\n         aux: Option<&FxHashMap<LintId, LevelSource>>,\n-    ) -> (Option<Level>, LintSource) {\n+    ) -> (Option<Level>, LintLevelSource) {\n         if let Some(specs) = aux {\n             if let Some(&(level, src)) = specs.get(&id) {\n                 return (Some(level), src);\n@@ -125,7 +126,7 @@ impl LintLevelSets {\n                     if let Some(&(level, src)) = specs.get(&id) {\n                         return (Some(level), src);\n                     }\n-                    return (None, LintSource::Default);\n+                    return (None, LintLevelSource::Default);\n                 }\n                 LintSet::Node { ref specs, parent } => {\n                     if let Some(&(level, src)) = specs.get(&id) {\n@@ -213,7 +214,7 @@ pub fn struct_lint_level<'s, 'd>(\n     sess: &'s Session,\n     lint: &'static Lint,\n     level: Level,\n-    src: LintSource,\n+    src: LintLevelSource,\n     span: Option<MultiSpan>,\n     decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>) + 'd,\n ) {\n@@ -223,7 +224,7 @@ pub fn struct_lint_level<'s, 'd>(\n         sess: &'s Session,\n         lint: &'static Lint,\n         level: Level,\n-        src: LintSource,\n+        src: LintLevelSource,\n         span: Option<MultiSpan>,\n         decorate: Box<dyn for<'b> FnOnce(LintDiagnosticBuilder<'b>) + 'd>,\n     ) {\n@@ -274,14 +275,14 @@ pub fn struct_lint_level<'s, 'd>(\n \n         let name = lint.name_lower();\n         match src {\n-            LintSource::Default => {\n+            LintLevelSource::Default => {\n                 sess.diag_note_once(\n                     &mut err,\n                     DiagnosticMessageId::from(lint),\n                     &format!(\"`#[{}({})]` on by default\", level.as_str(), name),\n                 );\n             }\n-            LintSource::CommandLine(lint_flag_val, orig_level) => {\n+            LintLevelSource::CommandLine(lint_flag_val, orig_level) => {\n                 let flag = match orig_level {\n                     Level::Warn => \"-W\",\n                     Level::Deny => \"-D\",\n@@ -310,7 +311,7 @@ pub fn struct_lint_level<'s, 'd>(\n                     );\n                 }\n             }\n-            LintSource::Node(lint_attr_name, src, reason) => {\n+            LintLevelSource::Node(lint_attr_name, src, reason) => {\n                 if let Some(rationale) = reason {\n                     err.note(&rationale.as_str());\n                 }"}, {"sha": "9b944f202a9376ad6dce3a9300edfe1db4830e51", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -5,7 +5,7 @@ use crate::dep_graph::{self, DepGraph, DepKind, DepNode, DepNodeExt};\n use crate::hir::exports::ExportMap;\n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::infer::canonical::{Canonical, CanonicalVarInfo, CanonicalVarInfos};\n-use crate::lint::{struct_lint_level, LintDiagnosticBuilder, LintSource};\n+use crate::lint::{struct_lint_level, LintDiagnosticBuilder, LintLevelSource};\n use crate::middle;\n use crate::middle::cstore::{CrateStoreDyn, EncodedMetadata};\n use crate::middle::resolve_lifetime::{self, ObjectLifetimeDefault};\n@@ -2559,7 +2559,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         lint: &'static Lint,\n         mut id: hir::HirId,\n-    ) -> (Level, LintSource) {\n+    ) -> (Level, LintLevelSource) {\n         let sets = self.lint_levels(LOCAL_CRATE);\n         loop {\n             if let Some(pair) = sets.level_and_source(lint, id, self.sess) {"}, {"sha": "e657088a5e4655ac7a2b8e3a5e86d621e766f01d", "filename": "compiler/rustc_middle/src/ty/list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -24,7 +24,7 @@ extern \"C\" {\n /// This means we can use pointer for both\n /// equality comparisons and hashing.\n ///\n-/// Unlike slices, The types contained in `List` are expected to be `Copy`\n+/// Unlike slices, the types contained in `List` are expected to be `Copy`\n /// and iterating over a `List` returns `T` instead of a reference.\n ///\n /// Note: `Slice` was already taken by the `Ty`."}, {"sha": "4ce76409c6f19c93974126f3f3dad3e09ee4071a", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -215,10 +215,7 @@ pub enum TyKind<'tcx> {\n impl TyKind<'tcx> {\n     #[inline]\n     pub fn is_primitive(&self) -> bool {\n-        match self {\n-            Bool | Char | Int(_) | Uint(_) | Float(_) => true,\n-            _ => false,\n-        }\n+        matches!(self, Bool | Char | Int(_) | Uint(_) | Float(_))\n     }\n \n     /// Get the article (\"a\" or \"an\") to use with this type."}, {"sha": "a3459887a9a7596700bb6b92c44a869204ba7668", "filename": "compiler/rustc_mir/src/transform/simplify_try.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -306,7 +306,7 @@ fn optimization_applies<'tcx>(\n         return false;\n     }\n \n-    // Verify the assigment chain consists of the form b = a; c = b; d = c; etc...\n+    // Verify the assignment chain consists of the form b = a; c = b; d = c; etc...\n     if opt_info.field_tmp_assignments.is_empty() {\n         trace!(\"NO: no assignments found\");\n         return false;"}, {"sha": "89ce29bd101297af402590bf072f26ea60ec78d7", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::mir::interpret::{\n };\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::*;\n-use rustc_middle::ty::{self, TyCtxt, TypeFoldable, TypeVisitor};\n+use rustc_middle::ty::{self, TyCtxt, TyS, TypeFoldable, TypeVisitor};\n use rustc_target::abi::Size;\n use std::ops::ControlFlow;\n \n@@ -408,6 +408,18 @@ impl ExtraComments<'tcx> {\n     }\n }\n \n+fn use_verbose(ty: &&TyS<'tcx>) -> bool {\n+    match ty.kind() {\n+        ty::Int(_) | ty::Uint(_) | ty::Bool | ty::Char | ty::Float(_) => false,\n+        // Unit type\n+        ty::Tuple(g_args) if g_args.is_empty() => false,\n+        ty::Tuple(g_args) => g_args.iter().any(|g_arg| use_verbose(&g_arg.expect_ty())),\n+        ty::Array(ty, _) => use_verbose(ty),\n+        ty::FnDef(..) => false,\n+        _ => true,\n+    }\n+}\n+\n impl Visitor<'tcx> for ExtraComments<'tcx> {\n     fn visit_constant(&mut self, constant: &Constant<'tcx>, location: Location) {\n         self.super_constant(constant, location);\n@@ -430,16 +442,10 @@ impl Visitor<'tcx> for ExtraComments<'tcx> {\n     fn visit_const(&mut self, constant: &&'tcx ty::Const<'tcx>, _: Location) {\n         self.super_const(constant);\n         let ty::Const { ty, val, .. } = constant;\n-        match ty.kind() {\n-            ty::Int(_) | ty::Uint(_) | ty::Bool | ty::Char | ty::Float(_) => {}\n-            // Unit type\n-            ty::Tuple(tys) if tys.is_empty() => {}\n-            ty::FnDef(..) => {}\n-            _ => {\n-                self.push(\"ty::Const\");\n-                self.push(&format!(\"+ ty: {:?}\", ty));\n-                self.push(&format!(\"+ val: {:?}\", val));\n-            }\n+        if use_verbose(ty) {\n+            self.push(\"ty::Const\");\n+            self.push(&format!(\"+ ty: {:?}\", ty));\n+            self.push(&format!(\"+ val: {:?}\", val));\n         }\n     }\n "}, {"sha": "98c7b9a63a55f60d8f54c0933e0bebdebd04bde8", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -1912,4 +1912,22 @@ impl<'a> Parser<'a> {\n         *self = snapshot;\n         Err(err)\n     }\n+\n+    /// Get the diagnostics for the cases where `move async` is found.\n+    ///\n+    /// `move_async_span` starts at the 'm' of the move keyword and ends with the 'c' of the async keyword\n+    pub(super) fn incorrect_move_async_order_found(\n+        &self,\n+        move_async_span: Span,\n+    ) -> DiagnosticBuilder<'a> {\n+        let mut err =\n+            self.struct_span_err(move_async_span, \"the order of `move` and `async` is incorrect\");\n+        err.span_suggestion_verbose(\n+            move_async_span,\n+            \"try switching the order\",\n+            \"async move\".to_owned(),\n+            Applicability::MaybeIncorrect,\n+        );\n+        err\n+    }\n }"}, {"sha": "b147f42fada25bfdf368c1ad27e66bba6d280cd5", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -1603,7 +1603,7 @@ impl<'a> Parser<'a> {\n             self.sess.gated_spans.gate(sym::async_closure, span);\n         }\n \n-        let capture_clause = self.parse_capture_clause();\n+        let capture_clause = self.parse_capture_clause()?;\n         let decl = self.parse_fn_block_decl()?;\n         let decl_hi = self.prev_token.span;\n         let body = match decl.output {\n@@ -1626,8 +1626,18 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses an optional `move` prefix to a closure-like construct.\n-    fn parse_capture_clause(&mut self) -> CaptureBy {\n-        if self.eat_keyword(kw::Move) { CaptureBy::Value } else { CaptureBy::Ref }\n+    fn parse_capture_clause(&mut self) -> PResult<'a, CaptureBy> {\n+        if self.eat_keyword(kw::Move) {\n+            // Check for `move async` and recover\n+            if self.check_keyword(kw::Async) {\n+                let move_async_span = self.token.span.with_lo(self.prev_token.span.data().lo);\n+                Err(self.incorrect_move_async_order_found(move_async_span))\n+            } else {\n+                Ok(CaptureBy::Value)\n+            }\n+        } else {\n+            Ok(CaptureBy::Ref)\n+        }\n     }\n \n     /// Parses the `|arg, arg|` header of a closure.\n@@ -2019,7 +2029,7 @@ impl<'a> Parser<'a> {\n     fn parse_async_block(&mut self, mut attrs: AttrVec) -> PResult<'a, P<Expr>> {\n         let lo = self.token.span;\n         self.expect_keyword(kw::Async)?;\n-        let capture_clause = self.parse_capture_clause();\n+        let capture_clause = self.parse_capture_clause()?;\n         let (iattrs, body) = self.parse_inner_attrs_and_block()?;\n         attrs.extend(iattrs);\n         let kind = ExprKind::Async(capture_clause, DUMMY_NODE_ID, body);"}, {"sha": "c857d4317e495499c2b860b5f858089a6492711a", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -115,7 +115,7 @@ impl<K, V> BTreeMap<K, V> {\n \n impl<'a, K: 'a, V: 'a> NodeRef<marker::Immut<'a>, K, V, marker::LeafOrInternal> {\n     fn assert_min_len(self, min_len: usize) {\n-        assert!(self.len() >= min_len, \"{} < {}\", self.len(), min_len);\n+        assert!(self.len() >= min_len, \"node len {} < {}\", self.len(), min_len);\n         if let node::ForceResult::Internal(node) = self.force() {\n             for idx in 0..=node.len() {\n                 let edge = unsafe { Handle::new_edge(node, idx) };"}, {"sha": "7fe8ff743c040546870a1da810c2fd5352346917", "filename": "library/alloc/src/collections/btree/node/tests.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -30,11 +30,15 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Immut<'a>, K, V, marker::LeafOrInternal>\n                 let depth = self.height();\n                 let indent = \"  \".repeat(depth);\n                 result += &format!(\"\\n{}\", indent);\n-                for idx in 0..leaf.len() {\n-                    if idx > 0 {\n-                        result += \", \";\n+                if leaf.len() == 0 {\n+                    result += \"(empty node)\";\n+                } else {\n+                    for idx in 0..leaf.len() {\n+                        if idx > 0 {\n+                            result += \", \";\n+                        }\n+                        result += &format!(\"{:?}\", unsafe { leaf.key_at(idx) });\n                     }\n-                    result += &format!(\"{:?}\", unsafe { leaf.key_at(idx) });\n                 }\n             }\n             navigate::Position::Internal(_) => {}"}, {"sha": "f5af48e0dd2774e145aef0ea6ad66b66b0d00bae", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -2581,14 +2581,12 @@ impl<T> [T] {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(slice_fill)]\n-    ///\n     /// let mut buf = vec![0; 10];\n     /// buf.fill(1);\n     /// assert_eq!(buf, vec![1; 10]);\n     /// ```\n     #[doc(alias = \"memset\")]\n-    #[unstable(feature = \"slice_fill\", issue = \"70758\")]\n+    #[stable(feature = \"slice_fill\", since = \"1.50.0\")]\n     pub fn fill(&mut self, value: T)\n     where\n         T: Clone,"}, {"sha": "5bc5ddaa5fe30a4aed1a593484f3f42d489255c6", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -304,7 +304,6 @@\n #![feature(rustc_private)]\n #![feature(shrink_to)]\n #![feature(slice_concat_ext)]\n-#![feature(slice_fill)]\n #![feature(slice_internals)]\n #![feature(slice_ptr_get)]\n #![feature(slice_ptr_len)]"}, {"sha": "dd96178cdb700d496dc06e222914297fd52496e7", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -218,11 +218,6 @@ impl Clean<ExternalCrate> for CrateNum {\n \n impl Clean<Item> for doctree::Module<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n-        // maintain a stack of mod ids, for doc comment path resolution\n-        // but we also need to resolve the module's own docs based on whether its docs were written\n-        // inside or outside the module, so check for that\n-        let attrs = self.attrs.clean(cx);\n-\n         let mut items: Vec<Item> = vec![];\n         items.extend(self.imports.iter().flat_map(|x| x.clean(cx)));\n         items.extend(self.foreigns.iter().map(|x| x.clean(cx)));\n@@ -251,7 +246,7 @@ impl Clean<Item> for doctree::Module<'_> {\n             ModuleItem(Module { is_crate: self.is_crate, items }),\n             cx,\n         );\n-        Item { attrs, source: span.clean(cx), ..what_rustc_thinks }\n+        Item { source: span.clean(cx), ..what_rustc_thinks }\n     }\n }\n \n@@ -638,6 +633,18 @@ impl Clean<Generics> for hir::Generics<'_> {\n                 _ => false,\n             }\n         }\n+        /// This can happen for `async fn`, e.g. `async fn f<'_>(&'_ self)`.\n+        ///\n+        /// See [`lifetime_to_generic_param`] in [`rustc_ast_lowering`] for more information.\n+        ///\n+        /// [`lifetime_to_generic_param`]: rustc_ast_lowering::LoweringContext::lifetime_to_generic_param\n+        fn is_elided_lifetime(param: &hir::GenericParam<'_>) -> bool {\n+            match param.kind {\n+                hir::GenericParamKind::Lifetime { kind: hir::LifetimeParamKind::Elided } => true,\n+                _ => false,\n+            }\n+        }\n+\n         let impl_trait_params = self\n             .params\n             .iter()\n@@ -656,7 +663,7 @@ impl Clean<Generics> for hir::Generics<'_> {\n             .collect::<Vec<_>>();\n \n         let mut params = Vec::with_capacity(self.params.len());\n-        for p in self.params.iter().filter(|p| !is_impl_trait(p)) {\n+        for p in self.params.iter().filter(|p| !is_impl_trait(p) && !is_elided_lifetime(p)) {\n             let p = p.clean(cx);\n             params.push(p);\n         }\n@@ -1437,7 +1444,16 @@ impl Clean<Type> for hir::Ty<'_> {\n             TyKind::Never => Never,\n             TyKind::Ptr(ref m) => RawPointer(m.mutbl, box m.ty.clean(cx)),\n             TyKind::Rptr(ref l, ref m) => {\n-                let lifetime = if l.is_elided() { None } else { Some(l.clean(cx)) };\n+                // There are two times a `Fresh` lifetime can be created:\n+                // 1. For `&'_ x`, written by the user. This corresponds to `lower_lifetime` in `rustc_ast_lowering`.\n+                // 2. For `&x` as a parameter to an `async fn`. This corresponds to `elided_ref_lifetime in `rustc_ast_lowering`.\n+                //    See #59286 for more information.\n+                // Ideally we would only hide the `'_` for case 2., but I don't know a way to distinguish it.\n+                // Turning `fn f(&'_ self)` into `fn f(&self)` isn't the worst thing in the world, though;\n+                // there's no case where it could cause the function to fail to compile.\n+                let elided =\n+                    l.is_elided() || matches!(l.name, LifetimeName::Param(ParamName::Fresh(_)));\n+                let lifetime = if elided { None } else { Some(l.clean(cx)) };\n                 BorrowedRef { lifetime, mutability: m.mutbl, type_: box m.ty.clean(cx) }\n             }\n             TyKind::Slice(ref ty) => Slice(box ty.clean(cx)),"}, {"sha": "bc9f1cf8806ab47a10b3cc03492b222870e220c9", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -9,7 +9,6 @@ use rustc_hir as hir;\n \n crate struct Module<'hir> {\n     crate name: Option<Symbol>,\n-    crate attrs: &'hir [ast::Attribute],\n     crate where_outer: Span,\n     crate where_inner: Span,\n     crate imports: Vec<Import<'hir>>,\n@@ -23,13 +22,12 @@ crate struct Module<'hir> {\n }\n \n impl Module<'hir> {\n-    crate fn new(name: Option<Symbol>, attrs: &'hir [ast::Attribute]) -> Module<'hir> {\n+    crate fn new(name: Option<Symbol>) -> Module<'hir> {\n         Module {\n             name,\n             id: hir::CRATE_HIR_ID,\n             where_outer: rustc_span::DUMMY_SP,\n             where_inner: rustc_span::DUMMY_SP,\n-            attrs,\n             imports: Vec::new(),\n             mods: Vec::new(),\n             items: Vec::new(),"}, {"sha": "af5121d6b1be79f32742be194912e3c9df2b5dce", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -5,7 +5,7 @@ use crate::html::markdown::{find_testable_code, ErrorCodes};\n use crate::passes::doc_test_lints::{should_have_doc_example, Tests};\n use crate::passes::Pass;\n use rustc_lint::builtin::MISSING_DOCS;\n-use rustc_middle::lint::LintSource;\n+use rustc_middle::lint::LintLevelSource;\n use rustc_session::lint;\n use rustc_span::symbol::sym;\n use rustc_span::FileName;\n@@ -254,7 +254,7 @@ impl<'a, 'b> fold::DocFolder for CoverageCalculator<'a, 'b> {\n                 // `missing_docs` is allow-by-default, so don't treat this as ignoring the item\n                 // unless the user had an explicit `allow`\n                 let should_have_docs =\n-                    level != lint::Level::Allow || matches!(source, LintSource::Default);\n+                    level != lint::Level::Allow || matches!(source, LintLevelSource::Default);\n                 debug!(\"counting {:?} {:?} in {}\", i.type_(), i.name, filename);\n                 self.items.entry(filename).or_default().count_item(\n                     has_docs,"}, {"sha": "17d2847913d4b76dec4b3eb87f856a41a01b594d", "filename": "src/librustdoc/passes/doc_test_lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fdoc_test_lints.rs?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -9,7 +9,7 @@ use crate::clean::*;\n use crate::core::DocContext;\n use crate::fold::DocFolder;\n use crate::html::markdown::{find_testable_code, ErrorCodes, Ignore, LangString};\n-use rustc_middle::lint::LintSource;\n+use rustc_middle::lint::LintLevelSource;\n use rustc_session::lint;\n \n crate const CHECK_PRIVATE_ITEMS_DOC_TESTS: Pass = Pass {\n@@ -77,7 +77,7 @@ crate fn should_have_doc_example(cx: &DocContext<'_>, item: &clean::Item) -> boo\n     let hir_id = cx.tcx.hir().local_def_id_to_hir_id(item.def_id.expect_local());\n     let (level, source) =\n         cx.tcx.lint_level_at_node(lint::builtin::MISSING_DOC_CODE_EXAMPLES, hir_id);\n-    level != lint::Level::Allow || matches!(source, LintSource::Default)\n+    level != lint::Level::Allow || matches!(source, LintLevelSource::Default)\n }\n \n crate fn look_for_tests<'tcx>(cx: &DocContext<'tcx>, dox: &str, item: &Item) {"}, {"sha": "3c0aeaad43e5da5322b73755d323c5ae1e5d9e48", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -1,7 +1,6 @@\n //! The Rust AST Visitor. Extracts useful information and massages it into a form\n //! usable for `clean`.\n \n-use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -64,7 +63,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     crate fn visit(mut self, krate: &'tcx hir::Crate<'_>) -> Module<'tcx> {\n         let mut module = self.visit_mod_contents(\n             krate.item.span,\n-            krate.item.attrs,\n             &Spanned { span: rustc_span::DUMMY_SP, node: hir::VisibilityKind::Public },\n             hir::CRATE_HIR_ID,\n             &krate.item.module,\n@@ -82,13 +80,12 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     fn visit_mod_contents(\n         &mut self,\n         span: Span,\n-        attrs: &'tcx [ast::Attribute],\n         vis: &'tcx hir::Visibility<'_>,\n         id: hir::HirId,\n         m: &'tcx hir::Mod<'tcx>,\n         name: Option<Symbol>,\n     ) -> Module<'tcx> {\n-        let mut om = Module::new(name, attrs);\n+        let mut om = Module::new(name);\n         om.where_outer = span;\n         om.where_inner = m.inner;\n         om.id = id;\n@@ -292,7 +289,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             hir::ItemKind::Mod(ref m) => {\n                 om.mods.push(self.visit_mod_contents(\n                     item.span,\n-                    &item.attrs,\n                     &item.vis,\n                     item.hir_id,\n                     m,"}, {"sha": "3397ef95856a5a0ad4fa47d41d120d2aec7d2274", "filename": "src/test/mir-opt/const_prop/checked_add.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fchecked_add.main.ConstProp.diff?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -14,9 +14,6 @@\n -         _2 = CheckedAdd(const 1_u32, const 1_u32); // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n -         assert(!move (_2.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 1_u32, const 1_u32) -> bb1; // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n +         _2 = const (2_u32, false);       // scope 0 at $DIR/checked_add.rs:5:18: 5:23\n-+                                          // ty::Const\n-+                                          // + ty: (u32, bool)\n-+                                          // + val: Value(ByRef { alloc: Allocation { bytes: [2, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n +                                          // mir::Constant\n +                                          // + span: $DIR/checked_add.rs:5:18: 5:23\n +                                          // + literal: Const { ty: (u32, bool), val: Value(ByRef { alloc: Allocation { bytes: [2, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }"}, {"sha": "9ddb34e58e5a685f58153146c348e64ba9975bf3", "filename": "src/test/mir-opt/const_prop/indirect.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.diff?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -18,9 +18,6 @@\n -         assert(!move (_3.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _2, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:5:13: 5:29\n +         _2 = const 2_u8;                 // scope 0 at $DIR/indirect.rs:5:13: 5:25\n +         _3 = const (3_u8, false);        // scope 0 at $DIR/indirect.rs:5:13: 5:29\n-+                                          // ty::Const\n-+                                          // + ty: (u8, bool)\n-+                                          // + val: Value(ByRef { alloc: Allocation { bytes: [3, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, size: Size { raw: 2 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n +                                          // mir::Constant\n +                                          // + span: $DIR/indirect.rs:5:13: 5:29\n +                                          // + literal: Const { ty: (u8, bool), val: Value(ByRef { alloc: Allocation { bytes: [3, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, size: Size { raw: 2 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }"}, {"sha": "da35bf18c7116e48974ab7d26cf1bacaa9f09375", "filename": "src/test/mir-opt/const_prop/issue_67019.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -15,9 +15,6 @@\n           (_3.1: u8) = const 2_u8;         // scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n -         (_2.0: (u8, u8)) = move _3;      // scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n +         (_2.0: (u8, u8)) = const (1_u8, 2_u8); // scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n-+                                          // ty::Const\n-+                                          // + ty: (u8, u8)\n-+                                          // + val: Value(ByRef { alloc: Allocation { bytes: [1, 2], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, size: Size { raw: 2 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n +                                          // mir::Constant\n +                                          // + span: $DIR/issue-67019.rs:11:10: 11:19\n +                                          // + literal: Const { ty: (u8, u8), val: Value(ByRef { alloc: Allocation { bytes: [1, 2], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, size: Size { raw: 2 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }"}, {"sha": "12b02e90345d9ff0266b24fd7c9320198988b6ed", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -20,9 +20,6 @@\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_aggregate.rs:7:9: 7:10\n -         _2 = _1;                         // scope 1 at $DIR/mutable_variable_aggregate.rs:7:13: 7:14\n +         _2 = const (42_i32, 99_i32);     // scope 1 at $DIR/mutable_variable_aggregate.rs:7:13: 7:14\n-+                                          // ty::Const\n-+                                          // + ty: (i32, i32)\n-+                                          // + val: Value(ByRef { alloc: Allocation { bytes: [42, 0, 0, 0, 99, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n +                                          // mir::Constant\n +                                          // + span: $DIR/mutable_variable_aggregate.rs:7:13: 7:14\n +                                          // + literal: Const { ty: (i32, i32), val: Value(ByRef { alloc: Allocation { bytes: [42, 0, 0, 0, 99, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }"}, {"sha": "a10bac4f3ea3b04bcb0e8ac2bf553f8a8d0a04ca", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.32bit.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -27,9 +27,6 @@\n -         _2 = CheckedAdd(const 2_i32, const 2_i32); // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n -         assert(!move (_2.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n +         _2 = const (4_i32, false);       // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+                                          // ty::Const\n-+                                          // + ty: (i32, bool)\n-+                                          // + val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n +                                          // mir::Constant\n +                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // + literal: Const { ty: (i32, bool), val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }"}, {"sha": "a10bac4f3ea3b04bcb0e8ac2bf553f8a8d0a04ca", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.64bit.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -27,9 +27,6 @@\n -         _2 = CheckedAdd(const 2_i32, const 2_i32); // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n -         assert(!move (_2.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n +         _2 = const (4_i32, false);       // scope 0 at $DIR/optimizes_into_variable.rs:12:13: 12:18\n-+                                          // ty::Const\n-+                                          // + ty: (i32, bool)\n-+                                          // + val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n +                                          // mir::Constant\n +                                          // + span: $DIR/optimizes_into_variable.rs:12:13: 12:18\n +                                          // + literal: Const { ty: (i32, bool), val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }"}, {"sha": "f0e9916e6300e3c6834cc9938b20cc9a7b54e032", "filename": "src/test/mir-opt/const_prop/return_place.add.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.add.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.add.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.add.ConstProp.diff?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -9,9 +9,6 @@\n -         _1 = CheckedAdd(const 2_u32, const 2_u32); // scope 0 at $DIR/return_place.rs:6:5: 6:10\n -         assert(!move (_1.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 2_u32, const 2_u32) -> bb1; // scope 0 at $DIR/return_place.rs:6:5: 6:10\n +         _1 = const (4_u32, false);       // scope 0 at $DIR/return_place.rs:6:5: 6:10\n-+                                          // ty::Const\n-+                                          // + ty: (u32, bool)\n-+                                          // + val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n +                                          // mir::Constant\n +                                          // + span: $DIR/return_place.rs:6:5: 6:10\n +                                          // + literal: Const { ty: (u32, bool), val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [31], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }"}, {"sha": "da4b135d4c6d6ab2df6a6e77a1501251afdb18bc", "filename": "src/test/mir-opt/const_prop/tuple_literal_propagation.main.ConstProp.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -18,9 +18,6 @@\n           StorageLive(_3);                 // scope 1 at $DIR/tuple_literal_propagation.rs:5:13: 5:14\n -         _3 = _1;                         // scope 1 at $DIR/tuple_literal_propagation.rs:5:13: 5:14\n +         _3 = const (1_u32, 2_u32);       // scope 1 at $DIR/tuple_literal_propagation.rs:5:13: 5:14\n-+                                          // ty::Const\n-+                                          // + ty: (u32, u32)\n-+                                          // + val: Value(ByRef { alloc: Allocation { bytes: [1, 0, 0, 0, 2, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n +                                          // mir::Constant\n +                                          // + span: $DIR/tuple_literal_propagation.rs:5:13: 5:14\n +                                          // + literal: Const { ty: (u32, u32), val: Value(ByRef { alloc: Allocation { bytes: [1, 0, 0, 0, 2, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }"}, {"sha": "34f8ca870cd230eb20eb6341b2ed533133babfb1", "filename": "src/test/mir-opt/simplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -42,9 +42,6 @@\n                                            // mir::Constant\n                                            // + span: $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:12\n                                            // + literal: Const { ty: fn(((), ())) {use_zst}, val: Value(Scalar(<ZST>)) }\n-                                           // ty::Const\n-                                           // + ty: ((), ())\n-                                           // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n                                            // + literal: Const { ty: ((), ()), val: Value(Scalar(<ZST>)) }"}, {"sha": "f0fd9703915e80b8491cdf3a92cdb60d9fe66594", "filename": "src/test/rustdoc/async-fn.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fasync-fn.rs?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -1,3 +1,4 @@\n+// ignore-tidy-linelength\n // edition:2018\n #![feature(min_const_generics)]\n \n@@ -48,7 +49,50 @@ impl Foo {\n     pub async fn mut_self(mut self, mut first: usize) {}\n }\n \n+pub trait Pattern<'a> {}\n+\n pub trait Trait<const N: usize> {}\n // @has async_fn/fn.const_generics.html\n // @has - '//pre[@class=\"rust fn\"]' 'pub async fn const_generics<const N: usize>(_: impl Trait<N>)'\n pub async fn const_generics<const N: usize>(_: impl Trait<N>) {}\n+\n+// test that elided lifetimes are properly elided and not displayed as `'_`\n+// regression test for #63037\n+// @has async_fn/fn.elided.html\n+// @has - '//pre[@class=\"rust fn\"]' 'pub async fn elided(foo: &str) -> &str'\n+pub async fn elided(foo: &str) -> &str {}\n+// This should really be shown as written, but for implementation reasons it's difficult.\n+// See `impl Clean for TyKind::Rptr`.\n+// @has async_fn/fn.user_elided.html\n+// @has - '//pre[@class=\"rust fn\"]' 'pub async fn user_elided(foo: &str) -> &str'\n+pub async fn user_elided(foo: &'_ str) -> &str {}\n+// @has async_fn/fn.static_trait.html\n+// @has - '//pre[@class=\"rust fn\"]' 'pub async fn static_trait(foo: &str) -> Box<dyn Bar>'\n+pub async fn static_trait(foo: &str) -> Box<dyn Bar> {}\n+// @has async_fn/fn.lifetime_for_trait.html\n+// @has - '//pre[@class=\"rust fn\"]' \"pub async fn lifetime_for_trait(foo: &str) -> Box<dyn Bar + '_>\"\n+pub async fn lifetime_for_trait(foo: &str) -> Box<dyn Bar + '_> {}\n+// @has async_fn/fn.elided_in_input_trait.html\n+// @has - '//pre[@class=\"rust fn\"]' \"pub async fn elided_in_input_trait(t: impl Pattern<'_>)\"\n+pub async fn elided_in_input_trait(t: impl Pattern<'_>) {}\n+\n+struct AsyncFdReadyGuard<'a, T> { x: &'a T }\n+\n+impl Foo {\n+    // @has async_fn/struct.Foo.html\n+    // @has - '//h4[@class=\"method\"]' 'pub async fn complicated_lifetimes( &self, context: &impl Bar) -> impl Iterator<Item = &usize>'\n+    pub async fn complicated_lifetimes(&self, context: &impl Bar) -> impl Iterator<Item = &usize> {}\n+    // taken from `tokio` as an example of a method that was particularly bad before\n+    // @has - '//h4[@class=\"method\"]' \"pub async fn readable<T>(&self) -> Result<AsyncFdReadyGuard<'_, T>, ()>\"\n+    pub async fn readable<T>(&self) -> Result<AsyncFdReadyGuard<'_, T>, ()> {}\n+    // @has - '//h4[@class=\"method\"]' \"pub async fn mut_self(&mut self)\"\n+    pub async fn mut_self(&mut self) {}\n+}\n+\n+// test named lifetimes, just in case\n+// @has async_fn/fn.named.html\n+// @has - '//pre[@class=\"rust fn\"]' \"pub async fn named<'a, 'b>(foo: &'a str) -> &'b str\"\n+pub async fn named<'a, 'b>(foo: &'a str) -> &'b str {}\n+// @has async_fn/fn.named_trait.html\n+// @has - '//pre[@class=\"rust fn\"]' \"pub async fn named_trait<'a, 'b>(foo: impl Pattern<'a>) -> impl Pattern<'b>\"\n+pub async fn named_trait<'a, 'b>(foo: impl Pattern<'a>) -> impl Pattern<'b> {}"}, {"sha": "055800d23b6c6ee39c287c24f9392dfc20e8ae61", "filename": "src/test/ui/parser/incorrect-move-async-order-issue-79694.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Ftest%2Fui%2Fparser%2Fincorrect-move-async-order-issue-79694.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Ftest%2Fui%2Fparser%2Fincorrect-move-async-order-issue-79694.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fincorrect-move-async-order-issue-79694.fixed?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+// edition:2018\n+\n+// Regression test for issue 79694\n+\n+fn main() {\n+    let _ = async move { }; //~ ERROR 7:13: 7:23: the order of `move` and `async` is incorrect\n+}"}, {"sha": "e8be16516d6d3dfd50245899d724ddf41474e454", "filename": "src/test/ui/parser/incorrect-move-async-order-issue-79694.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Ftest%2Fui%2Fparser%2Fincorrect-move-async-order-issue-79694.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Ftest%2Fui%2Fparser%2Fincorrect-move-async-order-issue-79694.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fincorrect-move-async-order-issue-79694.rs?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+// edition:2018\n+\n+// Regression test for issue 79694\n+\n+fn main() {\n+    let _ = move async { }; //~ ERROR 7:13: 7:23: the order of `move` and `async` is incorrect\n+}"}, {"sha": "2add9fb33c70eafe9246d6c85f799bab8b8748e2", "filename": "src/test/ui/parser/incorrect-move-async-order-issue-79694.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Ftest%2Fui%2Fparser%2Fincorrect-move-async-order-issue-79694.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Ftest%2Fui%2Fparser%2Fincorrect-move-async-order-issue-79694.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fincorrect-move-async-order-issue-79694.stderr?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -0,0 +1,13 @@\n+error: the order of `move` and `async` is incorrect\n+  --> $DIR/incorrect-move-async-order-issue-79694.rs:7:13\n+   |\n+LL |     let _ = move async { };\n+   |             ^^^^^^^^^^\n+   |\n+help: try switching the order\n+   |\n+LL |     let _ = async move { };\n+   |             ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "80bf02e8a0ef5027d5e18408a99200dbae3cce38", "filename": "src/tools/x/README.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Ftools%2Fx%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/9a40539c380d444d4f373ac1d87802bd5ab33f68/src%2Ftools%2Fx%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fx%2FREADME.md?ref=9a40539c380d444d4f373ac1d87802bd5ab33f68", "patch": "@@ -1,3 +1,10 @@\n # x\n \n `x` invokes `x.py` from any subdirectory.\n+\n+To install, run the following commands:\n+\n+```\n+$ cd rust/src/tools/x/\n+$ cargo install --path .\n+```"}]}