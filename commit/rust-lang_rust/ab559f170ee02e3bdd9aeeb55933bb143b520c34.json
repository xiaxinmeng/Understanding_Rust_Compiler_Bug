{"sha": "ab559f170ee02e3bdd9aeeb55933bb143b520c34", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNTU5ZjE3MGVlMDJlM2JkZDlhZWViNTU5MzNiYjE0M2I1MjBjMzQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-30T16:10:53Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-30T16:10:53Z"}, "message": "move hygiene to hir_expand", "tree": {"sha": "e12f4195dc8064d15898d73e8aa8da45846ec926", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e12f4195dc8064d15898d73e8aa8da45846ec926"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab559f170ee02e3bdd9aeeb55933bb143b520c34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab559f170ee02e3bdd9aeeb55933bb143b520c34", "html_url": "https://github.com/rust-lang/rust/commit/ab559f170ee02e3bdd9aeeb55933bb143b520c34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab559f170ee02e3bdd9aeeb55933bb143b520c34/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "872ac566bfc6cf43ac55354cf5223b962dbc1d92", "url": "https://api.github.com/repos/rust-lang/rust/commits/872ac566bfc6cf43ac55354cf5223b962dbc1d92", "html_url": "https://github.com/rust-lang/rust/commit/872ac566bfc6cf43ac55354cf5223b962dbc1d92"}], "stats": {"total": 57, "additions": 28, "deletions": 29}, "files": [{"sha": "6463dd65e1ed17b89330a9dc0c70e82263ae4068", "filename": "crates/ra_hir/src/expr/lower.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ab559f170ee02e3bdd9aeeb55933bb143b520c34/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab559f170ee02e3bdd9aeeb55933bb143b520c34/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs?ref=ab559f170ee02e3bdd9aeeb55933bb143b520c34", "patch": "@@ -1,7 +1,10 @@\n //! FIXME: write short doc here\n \n-use hir_def::{hygiene::Hygiene, path::GenericArgs, type_ref::TypeRef};\n-use hir_expand::name::{self, AsName, Name};\n+use hir_def::{path::GenericArgs, type_ref::TypeRef};\n+use hir_expand::{\n+    hygiene::Hygiene,\n+    name::{self, AsName, Name},\n+};\n use ra_arena::Arena;\n use ra_syntax::{\n     ast::{"}, {"sha": "b1a0140745c4e55c3c8fe26915e0601244e07d18", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab559f170ee02e3bdd9aeeb55933bb143b520c34/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab559f170ee02e3bdd9aeeb55933bb143b520c34/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=ab559f170ee02e3bdd9aeeb55933bb143b520c34", "patch": "@@ -3,7 +3,8 @@\n use rustc_hash::FxHashMap;\n use std::sync::Arc;\n \n-use hir_def::{attr::Attr, hygiene::Hygiene, type_ref::TypeRef};\n+use hir_def::{attr::Attr, type_ref::TypeRef};\n+use hir_expand::hygiene::Hygiene;\n use ra_arena::{impl_arena_id, map::ArenaMap, Arena, RawId};\n use ra_cfg::CfgOptions;\n use ra_syntax::{"}, {"sha": "0e961ca12aff63a679b5a52dc317baff3d8d24e6", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab559f170ee02e3bdd9aeeb55933bb143b520c34/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab559f170ee02e3bdd9aeeb55933bb143b520c34/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=ab559f170ee02e3bdd9aeeb55933bb143b520c34", "patch": "@@ -2,6 +2,7 @@\n \n use std::sync::Arc;\n \n+use hir_expand::hygiene::Hygiene;\n use mbe::ast_to_token_tree;\n use ra_cfg::CfgOptions;\n use ra_syntax::{\n@@ -10,7 +11,7 @@ use ra_syntax::{\n };\n use tt::Subtree;\n \n-use crate::{hygiene::Hygiene, path::Path};\n+use crate::path::Path;\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct Attr {"}, {"sha": "7a6c7b30125eb7dfc90e99512443c015ccb67370", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab559f170ee02e3bdd9aeeb55933bb143b520c34/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab559f170ee02e3bdd9aeeb55933bb143b520c34/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=ab559f170ee02e3bdd9aeeb55933bb143b520c34", "patch": "@@ -11,7 +11,6 @@ pub mod db;\n pub mod attr;\n pub mod path;\n pub mod type_ref;\n-pub mod hygiene;\n \n // FIXME: this should be private\n pub mod nameres;"}, {"sha": "86c05d6028e72c9171ea11d44e93ef7150699a7f", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab559f170ee02e3bdd9aeeb55933bb143b520c34/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab559f170ee02e3bdd9aeeb55933bb143b520c34/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=ab559f170ee02e3bdd9aeeb55933bb143b520c34", "patch": "@@ -6,6 +6,7 @@ use hir_expand::{\n     ast_id_map::AstIdMap,\n     db::AstDatabase,\n     either::Either,\n+    hygiene::Hygiene,\n     name::{AsName, Name},\n };\n use ra_arena::{impl_arena_id, map::ArenaMap, Arena, RawId};\n@@ -14,10 +15,7 @@ use ra_syntax::{\n     AstNode, AstPtr, SourceFile,\n };\n \n-use crate::{\n-    attr::Attr, db::DefDatabase2, hygiene::Hygiene, path::Path, FileAstId, HirFileId, ModuleSource,\n-    Source,\n-};\n+use crate::{attr::Attr, db::DefDatabase2, path::Path, FileAstId, HirFileId, ModuleSource, Source};\n \n /// `RawItems` is a set of top-level items in a file (except for impls).\n ///"}, {"sha": "ddabc7ca6687afd1f9fa52b0bc59feb9f0c305b6", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab559f170ee02e3bdd9aeeb55933bb143b520c34/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab559f170ee02e3bdd9aeeb55933bb143b520c34/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=ab559f170ee02e3bdd9aeeb55933bb143b520c34", "patch": "@@ -4,6 +4,7 @@ use std::{iter, sync::Arc};\n \n use hir_expand::{\n     either::Either,\n+    hygiene::Hygiene,\n     name::{self, AsName, Name},\n };\n use ra_db::CrateId;\n@@ -12,7 +13,7 @@ use ra_syntax::{\n     AstNode,\n };\n \n-use crate::{hygiene::Hygiene, type_ref::TypeRef, Source};\n+use crate::{type_ref::TypeRef, Source};\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Path {"}, {"sha": "77428ec99049c221df4fec8661d96551ff9ca31c", "filename": "crates/ra_hir_expand/src/hygiene.rs", "status": "renamed", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ab559f170ee02e3bdd9aeeb55933bb143b520c34/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab559f170ee02e3bdd9aeeb55933bb143b520c34/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs?ref=ab559f170ee02e3bdd9aeeb55933bb143b520c34", "patch": "@@ -2,16 +2,15 @@\n //!\n //! Specifically, `ast` + `Hygiene` allows you to create a `Name`. Note that, at\n //! this moment, this is horribly incomplete and handles only `$crate`.\n-// Should this be moved to `hir_expand`? Seems like it.\n+use ra_db::CrateId;\n+use ra_syntax::ast;\n \n-use hir_expand::{\n+use crate::{\n     db::AstDatabase,\n     either::Either,\n     name::{AsName, Name},\n-    HirFileId,\n+    HirFileId, HirFileIdRepr,\n };\n-use ra_db::CrateId;\n-use ra_syntax::ast;\n \n #[derive(Debug)]\n pub struct Hygiene {\n@@ -21,15 +20,22 @@ pub struct Hygiene {\n \n impl Hygiene {\n     pub fn new(db: &impl AstDatabase, file_id: HirFileId) -> Hygiene {\n-        Hygiene { def_crate: file_id.macro_crate(db) }\n+        let def_crate = match file_id.0 {\n+            HirFileIdRepr::FileId(_) => None,\n+            HirFileIdRepr::MacroFile(macro_file) => {\n+                let loc = db.lookup_intern_macro(macro_file.macro_call_id);\n+                Some(loc.def.krate)\n+            }\n+        };\n+        Hygiene { def_crate }\n     }\n \n-    pub(crate) fn new_unhygienic() -> Hygiene {\n+    pub fn new_unhygienic() -> Hygiene {\n         Hygiene { def_crate: None }\n     }\n \n     // FIXME: this should just return name\n-    pub(crate) fn name_ref_to_name(&self, name_ref: ast::NameRef) -> Either<Name, CrateId> {\n+    pub fn name_ref_to_name(&self, name_ref: ast::NameRef) -> Either<Name, CrateId> {\n         if let Some(def_crate) = self.def_crate {\n             if name_ref.text() == \"$crate\" {\n                 return Either::B(def_crate);", "previous_filename": "crates/ra_hir_def/src/hygiene.rs"}, {"sha": "5a0e5a19c5335c31f990bcd4bd882dc59a39af00", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ab559f170ee02e3bdd9aeeb55933bb143b520c34/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab559f170ee02e3bdd9aeeb55933bb143b520c34/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=ab559f170ee02e3bdd9aeeb55933bb143b520c34", "patch": "@@ -8,6 +8,7 @@ pub mod db;\n pub mod ast_id_map;\n pub mod either;\n pub mod name;\n+pub mod hygiene;\n \n use std::hash::{Hash, Hasher};\n \n@@ -61,17 +62,6 @@ impl HirFileId {\n             }\n         }\n     }\n-\n-    /// Get the crate which the macro lives in, if it is a macro file.\n-    pub fn macro_crate(self, db: &dyn db::AstDatabase) -> Option<CrateId> {\n-        match self.0 {\n-            HirFileIdRepr::FileId(_) => None,\n-            HirFileIdRepr::MacroFile(macro_file) => {\n-                let loc = db.lookup_intern_macro(macro_file.macro_call_id);\n-                Some(loc.def.krate)\n-            }\n-        }\n-    }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]"}]}