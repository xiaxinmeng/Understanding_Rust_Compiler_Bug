{"sha": "608adfc3f01c425d2ede9263e6fafaaf7f38b377", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwOGFkZmMzZjAxYzQyNWQyZWRlOTI2M2U2ZmFmYWFmN2YzOGIzNzc=", "commit": {"author": {"name": "scalexm", "email": "martin.alex32@hotmail.fr", "date": "2018-10-03T15:06:28Z"}, "committer": {"name": "scalexm", "email": "martin.alex32@hotmail.fr", "date": "2018-10-03T15:06:28Z"}, "message": "Introduce `TyKind::UnnormalizedProjection`", "tree": {"sha": "3a1079e8746ae72d7ca86f2405607e59ca653853", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a1079e8746ae72d7ca86f2405607e59ca653853"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/608adfc3f01c425d2ede9263e6fafaaf7f38b377", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/608adfc3f01c425d2ede9263e6fafaaf7f38b377", "html_url": "https://github.com/rust-lang/rust/commit/608adfc3f01c425d2ede9263e6fafaaf7f38b377", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/608adfc3f01c425d2ede9263e6fafaaf7f38b377/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cf11765dc98536c6eedf33f2df7f72f6e161263", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cf11765dc98536c6eedf33f2df7f72f6e161263", "html_url": "https://github.com/rust-lang/rust/commit/4cf11765dc98536c6eedf33f2df7f72f6e161263"}], "stats": {"total": 68, "additions": 57, "deletions": 11}, "files": [{"sha": "388abc88cfd71dc3c9bf847320eaae20da85d269", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=608adfc3f01c425d2ede9263e6fafaaf7f38b377", "patch": "@@ -873,8 +873,8 @@ for ty::TyKind<'gcx>\n             Tuple(inner_tys) => {\n                 inner_tys.hash_stable(hcx, hasher);\n             }\n-            Projection(ref projection_ty) => {\n-                projection_ty.hash_stable(hcx, hasher);\n+            Projection(ref data) | UnnormalizedProjection(ref data) => {\n+                data.hash_stable(hcx, hasher);\n             }\n             Opaque(def_id, substs) => {\n                 def_id.hash_stable(hcx, hasher);"}, {"sha": "6449227af4ab844f43075c4dde87a037bb31e31b", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=608adfc3f01c425d2ede9263e6fafaaf7f38b377", "patch": "@@ -283,6 +283,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Canonicalizer<'cx, 'gcx, 'tcx>\n             | ty::Never\n             | ty::Tuple(..)\n             | ty::Projection(..)\n+            | ty::UnnormalizedProjection(..)\n             | ty::Foreign(..)\n             | ty::Param(..)\n             | ty::Opaque(..) => {"}, {"sha": "e17e777332ec616446e7cd0bde048f6c1f801ddc", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=608adfc3f01c425d2ede9263e6fafaaf7f38b377", "patch": "@@ -193,6 +193,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for TypeFreshener<'a, 'gcx, 'tcx> {\n             ty::Never |\n             ty::Tuple(..) |\n             ty::Projection(..) |\n+            ty::UnnormalizedProjection(..) |\n             ty::Foreign(..) |\n             ty::Param(..) |\n             ty::Closure(..) |"}, {"sha": "caf549e37a9078865b2aaccd337719d283fa80d8", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=608adfc3f01c425d2ede9263e6fafaaf7f38b377", "patch": "@@ -475,6 +475,7 @@ fn ty_is_local_constructor(ty: Ty<'_>, in_crate: InCrate) -> bool {\n \n         ty::Error => true,\n \n+        ty::UnnormalizedProjection(..) |\n         ty::Closure(..) |\n         ty::Generator(..) |\n         ty::GeneratorWitness(..) |"}, {"sha": "3b3e38a8bb7cab761a70f7ca7b2bffb951b85738", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=608adfc3f01c425d2ede9263e6fafaaf7f38b377", "patch": "@@ -269,7 +269,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 ty::Generator(..) => Some(18),\n                 ty::Foreign(..) => Some(19),\n                 ty::GeneratorWitness(..) => Some(20),\n-                ty::Infer(..) | ty::Error => None\n+                ty::Infer(..) | ty::Error => None,\n+                ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n             }\n         }\n "}, {"sha": "aaf03f8e7fb55b3bb82c5dfaf50896cc2e6d5b13", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=608adfc3f01c425d2ede9263e6fafaaf7f38b377", "patch": "@@ -253,5 +253,7 @@ pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'_, '_, 'tcx>, ty: Ty<'tcx>) ->\n         | ty::Opaque(..)\n         | ty::Infer(_)\n         | ty::Generator(..) => false,\n+\n+        ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n     }\n }"}, {"sha": "0ea9098378be561fbdb7851d3fca5e8b1ee7c91d", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=608adfc3f01c425d2ede9263e6fafaaf7f38b377", "patch": "@@ -2200,6 +2200,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => None,\n             ty::Infer(ty::TyVar(_)) => Ambiguous,\n \n+            ty::UnnormalizedProjection(..) |\n             ty::Infer(ty::CanonicalTy(_)) |\n             ty::Infer(ty::FreshTy(_)) |\n             ty::Infer(ty::FreshIntTy(_)) |\n@@ -2272,6 +2273,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 Ambiguous\n             }\n \n+            ty::UnnormalizedProjection(..) |\n             ty::Infer(ty::CanonicalTy(_)) |\n             ty::Infer(ty::FreshTy(_)) |\n             ty::Infer(ty::FreshIntTy(_)) |\n@@ -2310,6 +2312,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 Vec::new()\n             }\n \n+            ty::UnnormalizedProjection(..) |\n             ty::Dynamic(..) |\n             ty::Param(..) |\n             ty::Foreign(..) |"}, {"sha": "29b3db400b1161e624efe24b2a7f9026561447b0", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=608adfc3f01c425d2ede9263e6fafaaf7f38b377", "patch": "@@ -2266,7 +2266,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n             self,\n             Adt, Array, Slice, RawPtr, Ref, FnDef, FnPtr,\n             Generator, GeneratorWitness, Dynamic, Closure, Tuple,\n-            Param, Infer, Projection, Opaque, Foreign);\n+            Param, Infer, UnnormalizedProjection, Projection, Opaque, Foreign);\n \n         println!(\"Substs interner: #{}\", self.interners.substs.borrow().len());\n         println!(\"Region interner: #{}\", self.interners.region.borrow().len());"}, {"sha": "b3a1b312ca1d38a40a9a04ab4674f4aa22a2301e", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=608adfc3f01c425d2ede9263e6fafaaf7f38b377", "patch": "@@ -222,6 +222,7 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n             ty::Infer(ty::FreshIntTy(_)) => \"skolemized integral type\".to_string(),\n             ty::Infer(ty::FreshFloatTy(_)) => \"skolemized floating-point type\".to_string(),\n             ty::Projection(_) => \"associated type\".to_string(),\n+            ty::UnnormalizedProjection(_) => \"non-normalized associated type\".to_string(),\n             ty::Param(ref p) => {\n                 if p.is_self() {\n                     \"Self\".to_string()"}, {"sha": "0f68e7aba4defd062d37b05e57d5ee1181eda1a8", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=608adfc3f01c425d2ede9263e6fafaaf7f38b377", "patch": "@@ -103,6 +103,7 @@ pub fn simplify_type<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         ty::FnPtr(ref f) => {\n             Some(FunctionSimplifiedType(f.skip_binder().inputs().len()))\n         }\n+        ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n         ty::Projection(_) | ty::Param(_) => {\n             if can_simplify_params {\n                 // In normalized types, projections don't unify with"}, {"sha": "3ccc24e73a5c927343bc6718bad8797e42c1f945", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=608adfc3f01c425d2ede9263e6fafaaf7f38b377", "patch": "@@ -150,6 +150,8 @@ impl FlagComputation {\n                 self.add_projection_ty(data);\n             }\n \n+            &ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n+\n             &ty::Opaque(_, substs) => {\n                 self.add_flags(TypeFlags::HAS_PROJECTION);\n                 self.add_substs(substs);"}, {"sha": "46d133224f819e9a6f54d79b0471a6832d667ad7", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=608adfc3f01c425d2ede9263e6fafaaf7f38b377", "patch": "@@ -463,6 +463,7 @@ pub fn characteristic_def_id_of_type(ty: Ty<'_>) -> Option<DefId> {\n         ty::Str |\n         ty::FnPtr(_) |\n         ty::Projection(_) |\n+        ty::UnnormalizedProjection(..) |\n         ty::Param(_) |\n         ty::Opaque(..) |\n         ty::Infer(_) |"}, {"sha": "7df8af5fa2e7d894ff796f2858403576d94653d2", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=608adfc3f01c425d2ede9263e6fafaaf7f38b377", "patch": "@@ -1123,7 +1123,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 }\n                 tcx.layout_raw(param_env.and(normalized))?\n             }\n-            ty::GeneratorWitness(..) | ty::Infer(_) => {\n+            ty::UnnormalizedProjection(..) | ty::GeneratorWitness(..) | ty::Infer(_) => {\n                 bug!(\"LayoutDetails::compute: unexpected type `{}`\", ty)\n             }\n             ty::Param(_) | ty::Error => {\n@@ -1702,8 +1702,8 @@ impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n                 }\n             }\n \n-            ty::Projection(_) | ty::Opaque(..) | ty::Param(_) |\n-            ty::Infer(_) | ty::Error => {\n+            ty::Projection(_) | ty::UnnormalizedProjection(..) |\n+            ty::Opaque(..) | ty::Param(_) | ty::Infer(_) | ty::Error => {\n                 bug!(\"TyLayout::field_type: unexpected type `{}`\", this.ty)\n             }\n         })"}, {"sha": "77e0b9e91bce6c5fb8b4c34edd831e5a453fa849", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=608adfc3f01c425d2ede9263e6fafaaf7f38b377", "patch": "@@ -2339,6 +2339,8 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                 vec![ty]\n             }\n \n+            UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n+\n             Param(..) => {\n                 // perf hack: if there is a `T: Sized` bound, then\n                 // we know that `T` is Sized and do not need to check"}, {"sha": "91eda66e08c6e335087ed7cb6ccf974d0c96b50f", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=608adfc3f01c425d2ede9263e6fafaaf7f38b377", "patch": "@@ -124,6 +124,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n+            ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n+\n             // We assume that inference variables are fully resolved.\n             // So, if we encounter an inference variable, just record\n             // the unresolved variable as a component."}, {"sha": "c3c4cbed89d889f46a4ed670c05f474f9147723e", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=608adfc3f01c425d2ede9263e6fafaaf7f38b377", "patch": "@@ -876,6 +876,9 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::GeneratorWitness(types) => ty::GeneratorWitness(types.fold_with(folder)),\n             ty::Closure(did, substs) => ty::Closure(did, substs.fold_with(folder)),\n             ty::Projection(ref data) => ty::Projection(data.fold_with(folder)),\n+            ty::UnnormalizedProjection(ref data) => {\n+                ty::UnnormalizedProjection(data.fold_with(folder))\n+            }\n             ty::Opaque(did, substs) => ty::Opaque(did, substs.fold_with(folder)),\n             ty::Bool | ty::Char | ty::Str | ty::Int(_) |\n             ty::Uint(_) | ty::Float(_) | ty::Error | ty::Infer(_) |\n@@ -910,7 +913,9 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             }\n             ty::GeneratorWitness(ref types) => types.visit_with(visitor),\n             ty::Closure(_did, ref substs) => substs.visit_with(visitor),\n-            ty::Projection(ref data) => data.visit_with(visitor),\n+            ty::Projection(ref data) | ty::UnnormalizedProjection(ref data) => {\n+                data.visit_with(visitor)\n+            }\n             ty::Opaque(_, ref substs) => substs.visit_with(visitor),\n             ty::Bool | ty::Char | ty::Str | ty::Int(_) |\n             ty::Uint(_) | ty::Float(_) | ty::Error | ty::Infer(_) |"}, {"sha": "06d559fd9dbea1d0c2b0cf56b24ca5133767ad39", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=608adfc3f01c425d2ede9263e6fafaaf7f38b377", "patch": "@@ -157,6 +157,11 @@ pub enum TyKind<'tcx> {\n     /// `<T as Trait<..>>::N`.\n     Projection(ProjectionTy<'tcx>),\n \n+    /// A placeholder type used when we do not have enough information\n+    /// to normalize the projection of an associated type to an\n+    /// existing concrete type. Currently only used with chalk-engine.\n+    UnnormalizedProjection(ProjectionTy<'tcx>),\n+\n     /// Opaque (`impl Trait`) type found in a return type.\n     /// The `DefId` comes either from\n     /// * the `impl Trait` ast::Ty node,\n@@ -1806,7 +1811,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             Generator(_, GeneratorSubsts { ref substs }, _) => {\n                 substs.regions().collect()\n             }\n-            Projection(ref data) => {\n+            Projection(ref data) | UnnormalizedProjection(ref data) => {\n                 data.substs.regions().collect()\n             }\n             FnDef(..) |\n@@ -1886,6 +1891,8 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n \n             ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,\n \n+            ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n+\n             ty::Infer(ty::TyVar(_)) => false,\n \n             ty::Infer(ty::CanonicalTy(_)) |"}, {"sha": "4d7bab3cf433b23fc611b2e3e8cab5ed210740c6", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=608adfc3f01c425d2ede9263e6fafaaf7f38b377", "patch": "@@ -958,6 +958,8 @@ fn needs_drop_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         ty::Dynamic(..) | ty::Projection(..) | ty::Param(_) |\n         ty::Opaque(..) | ty::Infer(_) | ty::Error => true,\n \n+        ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n+\n         // Structural recursion.\n         ty::Array(ty, _) | ty::Slice(ty) => needs_drop(ty),\n "}, {"sha": "d20c4f716429b89c9853d76cece5b3159bd3de38", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=608adfc3f01c425d2ede9263e6fafaaf7f38b377", "patch": "@@ -97,7 +97,7 @@ fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n         ty::Ref(_, ty, _) => {\n             stack.push(ty);\n         }\n-        ty::Projection(ref data) => {\n+        ty::Projection(ref data) | ty::UnnormalizedProjection(ref data) => {\n             stack.extend(data.substs.types().rev());\n         }\n         ty::Dynamic(ref obj, ..) => {"}, {"sha": "397c63a149a4c5648f8220fb2e8e50e782cf9144", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=608adfc3f01c425d2ede9263e6fafaaf7f38b377", "patch": "@@ -289,6 +289,8 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n                     self.compute_projection(data);\n                 }\n \n+                ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n+\n                 ty::Adt(def, substs) => {\n                     // WfNominalType\n                     let obligations = self.nominal_obligations(def.did, substs);"}, {"sha": "814f8880bbf2f6a7f758054d536c5e98a70f7d63", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=608adfc3f01c425d2ede9263e6fafaaf7f38b377", "patch": "@@ -18,7 +18,7 @@ use ty::{Bool, Char, Adt};\n use ty::{Error, Str, Array, Slice, Float, FnDef, FnPtr};\n use ty::{Param, RawPtr, Ref, Never, Tuple};\n use ty::{Closure, Generator, GeneratorWitness, Foreign, Projection, Opaque};\n-use ty::{Dynamic, Int, Uint, Infer};\n+use ty::{UnnormalizedProjection, Dynamic, Int, Uint, Infer};\n use ty::{self, RegionVid, Ty, TyCtxt, TypeFoldable, GenericParamCount, GenericParamDefKind};\n use util::nodemap::FxHashSet;\n \n@@ -1143,6 +1143,11 @@ define_print! {\n                 }\n                 Foreign(def_id) => parameterized(f, subst::Substs::empty(), def_id, &[]),\n                 Projection(ref data) => data.print(f, cx),\n+                UnnormalizedProjection(ref data) => {\n+                    write!(f, \"Unnormalized(\")?;\n+                    data.print(f, cx)?;\n+                    write!(f, \")\")\n+                }\n                 Opaque(def_id, substs) => {\n                     if cx.is_verbose {\n                         return write!(f, \"Opaque({:?}, {:?})\", def_id, substs);"}, {"sha": "2f110fd552a8da8515449b7d46ac9a9a2c3cb094", "filename": "src/librustc_codegen_llvm/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs?ref=608adfc3f01c425d2ede9263e6fafaaf7f38b377", "patch": "@@ -173,6 +173,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         }\n         ty::Error |\n         ty::Infer(_) |\n+        ty::UnnormalizedProjection(..) |\n         ty::Projection(..) |\n         ty::Opaque(..) |\n         ty::GeneratorWitness(..) |"}, {"sha": "a441f7a87f763c4bba857b80abbdf93153d51958", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=608adfc3f01c425d2ede9263e6fafaaf7f38b377", "patch": "@@ -722,6 +722,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             ty::Closure(..) |\n             ty::Generator(..) |\n             ty::GeneratorWitness(..) |\n+            ty::UnnormalizedProjection(..) |\n             ty::Projection(..) |\n             ty::Opaque(..) |\n             ty::FnDef(..) => bug!(\"Unexpected type in foreign function\"),"}, {"sha": "f0ea93bfffd3e7cbaebbdd72cebd2e8d78cacc80", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=608adfc3f01c425d2ede9263e6fafaaf7f38b377", "patch": "@@ -382,6 +382,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n             }\n             ty::Error |\n             ty::Infer(_) |\n+            ty::UnnormalizedProjection(..) |\n             ty::Projection(..) |\n             ty::Param(_) |\n             ty::GeneratorWitness(_) |"}, {"sha": "2996fe03200428cb8ead7057131aa1f186bbf367", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=608adfc3f01c425d2ede9263e6fafaaf7f38b377", "patch": "@@ -272,6 +272,8 @@ fn dtorck_constraint_for_ty<'a, 'gcx, 'tcx>(\n             overflows: vec![],\n         }),\n \n+        ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n+\n         ty::Infer(..) | ty::Error => {\n             // By the time this code runs, all type variables ought to\n             // be fully resolved."}, {"sha": "285fed9544ddbe10c1645a6a1eaf11635d57d953", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=608adfc3f01c425d2ede9263e6fafaaf7f38b377", "patch": "@@ -124,6 +124,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             ty::Foreign(..) => Some(PointerKind::Thin),\n             // We should really try to normalize here.\n             ty::Projection(ref pi) => Some(PointerKind::OfProjection(pi)),\n+            ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n             ty::Opaque(def_id, substs) => Some(PointerKind::OfOpaque(def_id, substs)),\n             ty::Param(ref p) => Some(PointerKind::OfParam(p)),\n             // Insufficient type information."}, {"sha": "1125de55a0668834da79d60ab9a9b8ec63f191fb", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/608adfc3f01c425d2ede9263e6fafaaf7f38b377/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=608adfc3f01c425d2ede9263e6fafaaf7f38b377", "patch": "@@ -336,6 +336,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 // types, where we use Error as the Self type\n             }\n \n+            ty::UnnormalizedProjection(..) |\n             ty::GeneratorWitness(..) |\n             ty::Infer(..) => {\n                 bug!(\"unexpected type encountered in \\"}]}