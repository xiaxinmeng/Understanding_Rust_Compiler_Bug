{"sha": "75edb7693769d96c9fc76ff61ea9882f81d2b7e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZWRiNzY5Mzc2OWQ5NmM5ZmM3NmZmNjFlYTk4ODJmODFkMmI3ZTc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-05-23T01:23:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-23T01:23:47Z"}, "message": "Rollup merge of #85571 - workingjubilee:reverse-prepend, r=Amanieu\n\nRemove surplus prepend LinkedList fn\n\nThis nightly library feature provides a function on `LinkedList<T>` that is identical to `fn append` with a reversed order of arguments. Observe this diff against the `fn append` doctest:\n```diff\n+#![feature(linked_list_prepend)]\n fn main() {\n    use std::collections::LinkedList;\n    let mut list1 = LinkedList::new();\n    list1.push_back('a');\n    let mut list2 = LinkedList::new();\n    list2.push_back('b');\n    list2.push_back('c');\n\n-    list1.append(&mut list2);\n+    list2.prepend(&mut list1);\n\n-    let mut iter = list1.iter();\n+    let mut iter = list2.iter();\n     assert_eq!(iter.next(), Some(&'a'));\n     assert_eq!(iter.next(), Some(&'b'));\n     assert_eq!(iter.next(), Some(&'c'));\n     assert!(iter.next().is_none());\n\n-    assert!(list2.is_empty());\n+    assert!(list1.is_empty());\n }\n```\n\nAs this has received no obvious request to stabilize it, nor does it have a tracking issue, and was left on nightly and the consensus seems to have been to deprecate it in this pre-1.0 PR in 2014, https://github.com/rust-lang/rust/pull/20356, I propose simply removing it.", "tree": {"sha": "4b028bbf487d5632f80d7467661633fa8af9dba9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b028bbf487d5632f80d7467661633fa8af9dba9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75edb7693769d96c9fc76ff61ea9882f81d2b7e7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgqa6jCRBK7hj4Ov3rIwAAmRgIAEsSBhZbaqHW6G5x5gmBkwCG\nlg/cz1UFFBHC/zmhooAT/ycrEpv+cPxauGHx08mHTFw2fkYXcAy7rEbbjtRmOn/S\nN/NM8gANLk995OoTj6X7i7LP+WlQNJBhz6CFtdR9oI7nQb8teD13INEFWchf2FTV\nrwZtcJ7FZQEmRZQ3UfehvElX1FMOiZnY0/g57g0ROGl/x/CiX6IYcHX1eSWQp80z\nM4p3F1tS5RI123wDT/7KAWYM70hrLMy2BzcunYNWgKy5ILI9uQeo+31Yp4O7EJ/e\nTg+Uoxg/FxqCMwCiNB+XXaKGoeRcnnKaetkmq9dbPws4L28F777s1EhlbYRX/Ik=\n=7c03\n-----END PGP SIGNATURE-----\n", "payload": "tree 4b028bbf487d5632f80d7467661633fa8af9dba9\nparent d978060cc6f8fd91bd3348f8309104919c02aee8\nparent c516e7187423a7db1f61178ff05fb6512f279c8d\nauthor Dylan DPC <dylan.dpc@gmail.com> 1621733027 +0200\ncommitter GitHub <noreply@github.com> 1621733027 +0200\n\nRollup merge of #85571 - workingjubilee:reverse-prepend, r=Amanieu\n\nRemove surplus prepend LinkedList fn\n\nThis nightly library feature provides a function on `LinkedList<T>` that is identical to `fn append` with a reversed order of arguments. Observe this diff against the `fn append` doctest:\n```diff\n+#![feature(linked_list_prepend)]\n fn main() {\n    use std::collections::LinkedList;\n    let mut list1 = LinkedList::new();\n    list1.push_back('a');\n    let mut list2 = LinkedList::new();\n    list2.push_back('b');\n    list2.push_back('c');\n\n-    list1.append(&mut list2);\n+    list2.prepend(&mut list1);\n\n-    let mut iter = list1.iter();\n+    let mut iter = list2.iter();\n     assert_eq!(iter.next(), Some(&'a'));\n     assert_eq!(iter.next(), Some(&'b'));\n     assert_eq!(iter.next(), Some(&'c'));\n     assert!(iter.next().is_none());\n\n-    assert!(list2.is_empty());\n+    assert!(list1.is_empty());\n }\n```\n\nAs this has received no obvious request to stabilize it, nor does it have a tracking issue, and was left on nightly and the consensus seems to have been to deprecate it in this pre-1.0 PR in 2014, https://github.com/rust-lang/rust/pull/20356, I propose simply removing it.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75edb7693769d96c9fc76ff61ea9882f81d2b7e7", "html_url": "https://github.com/rust-lang/rust/commit/75edb7693769d96c9fc76ff61ea9882f81d2b7e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75edb7693769d96c9fc76ff61ea9882f81d2b7e7/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d978060cc6f8fd91bd3348f8309104919c02aee8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d978060cc6f8fd91bd3348f8309104919c02aee8", "html_url": "https://github.com/rust-lang/rust/commit/d978060cc6f8fd91bd3348f8309104919c02aee8"}, {"sha": "c516e7187423a7db1f61178ff05fb6512f279c8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c516e7187423a7db1f61178ff05fb6512f279c8d", "html_url": "https://github.com/rust-lang/rust/commit/c516e7187423a7db1f61178ff05fb6512f279c8d"}], "stats": {"total": 21, "additions": 0, "deletions": 21}, "files": [{"sha": "5dda8c47688afb83e4d7a93fae6e01d2ef399262", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/75edb7693769d96c9fc76ff61ea9882f81d2b7e7/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75edb7693769d96c9fc76ff61ea9882f81d2b7e7/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=75edb7693769d96c9fc76ff61ea9882f81d2b7e7", "patch": "@@ -442,27 +442,6 @@ impl<T> LinkedList<T> {\n         }\n     }\n \n-    /// Moves all elements from `other` to the begin of the list.\n-    #[unstable(feature = \"linked_list_prepend\", issue = \"none\")]\n-    pub fn prepend(&mut self, other: &mut Self) {\n-        match self.head {\n-            None => mem::swap(self, other),\n-            Some(mut head) => {\n-                // `as_mut` is okay here because we have exclusive access to the entirety\n-                // of both lists.\n-                if let Some(mut other_tail) = other.tail.take() {\n-                    unsafe {\n-                        head.as_mut().prev = Some(other_tail);\n-                        other_tail.as_mut().next = Some(head);\n-                    }\n-\n-                    self.head = other.head.take();\n-                    self.len += mem::replace(&mut other.len, 0);\n-                }\n-            }\n-        }\n-    }\n-\n     /// Provides a forward iterator.\n     ///\n     /// # Examples"}]}