{"sha": "7680c8b69051536a9c4ebcf943b394526af1a1be", "node_id": "C_kwDOAAsO6NoAKDc2ODBjOGI2OTA1MTUzNmE5YzRlYmNmOTQzYjM5NDUyNmFmMWExYmU", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-08-07T02:50:01Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-08-15T05:55:30Z"}, "message": "Properly forward `ByRefSized::fold` to the inner iterator", "tree": {"sha": "c0420f0d1ce6dbf1ed37844722960160992ea938", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0420f0d1ce6dbf1ed37844722960160992ea938"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7680c8b69051536a9c4ebcf943b394526af1a1be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7680c8b69051536a9c4ebcf943b394526af1a1be", "html_url": "https://github.com/rust-lang/rust/commit/7680c8b69051536a9c4ebcf943b394526af1a1be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7680c8b69051536a9c4ebcf943b394526af1a1be/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76c427d6e20c2942716de9932be4215771aeb4b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/76c427d6e20c2942716de9932be4215771aeb4b1", "html_url": "https://github.com/rust-lang/rust/commit/76c427d6e20c2942716de9932be4215771aeb4b1"}], "stats": {"total": 50, "additions": 38, "deletions": 12}, "files": [{"sha": "477e7117c3ea125973252685d8bded87ab93686f", "filename": "library/core/src/iter/adapters/by_ref_sized.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7680c8b69051536a9c4ebcf943b394526af1a1be/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7680c8b69051536a9c4ebcf943b394526af1a1be/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fby_ref_sized.rs?ref=7680c8b69051536a9c4ebcf943b394526af1a1be", "patch": "@@ -1,4 +1,4 @@\n-use crate::ops::Try;\n+use crate::ops::{NeverShortCircuit, Try};\n \n /// Like `Iterator::by_ref`, but requiring `Sized` so it can forward generics.\n ///\n@@ -8,36 +8,40 @@ use crate::ops::Try;\n #[derive(Debug)]\n pub struct ByRefSized<'a, I>(pub &'a mut I);\n \n+// The following implementations use UFCS-style, rather than trusting autoderef,\n+// to avoid accidentally calling the `&mut Iterator` implementations.\n+\n #[unstable(feature = \"std_internals\", issue = \"none\")]\n impl<I: Iterator> Iterator for ByRefSized<'_, I> {\n     type Item = I::Item;\n \n     #[inline]\n     fn next(&mut self) -> Option<Self::Item> {\n-        self.0.next()\n+        I::next(self.0)\n     }\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        self.0.size_hint()\n+        I::size_hint(self.0)\n     }\n \n     #[inline]\n     fn advance_by(&mut self, n: usize) -> Result<(), usize> {\n-        self.0.advance_by(n)\n+        I::advance_by(self.0, n)\n     }\n \n     #[inline]\n     fn nth(&mut self, n: usize) -> Option<Self::Item> {\n-        self.0.nth(n)\n+        I::nth(self.0, n)\n     }\n \n     #[inline]\n     fn fold<B, F>(self, init: B, f: F) -> B\n     where\n         F: FnMut(B, Self::Item) -> B,\n     {\n-        self.0.fold(init, f)\n+        // `fold` needs ownership, so this can't forward directly.\n+        I::try_fold(self.0, init, NeverShortCircuit::wrap_mut_2(f)).0\n     }\n \n     #[inline]\n@@ -46,33 +50,34 @@ impl<I: Iterator> Iterator for ByRefSized<'_, I> {\n         F: FnMut(B, Self::Item) -> R,\n         R: Try<Output = B>,\n     {\n-        self.0.try_fold(init, f)\n+        I::try_fold(self.0, init, f)\n     }\n }\n \n #[unstable(feature = \"std_internals\", issue = \"none\")]\n impl<I: DoubleEndedIterator> DoubleEndedIterator for ByRefSized<'_, I> {\n     #[inline]\n     fn next_back(&mut self) -> Option<Self::Item> {\n-        self.0.next_back()\n+        I::next_back(self.0)\n     }\n \n     #[inline]\n     fn advance_back_by(&mut self, n: usize) -> Result<(), usize> {\n-        self.0.advance_back_by(n)\n+        I::advance_back_by(self.0, n)\n     }\n \n     #[inline]\n     fn nth_back(&mut self, n: usize) -> Option<Self::Item> {\n-        self.0.nth_back(n)\n+        I::nth_back(self.0, n)\n     }\n \n     #[inline]\n     fn rfold<B, F>(self, init: B, f: F) -> B\n     where\n         F: FnMut(B, Self::Item) -> B,\n     {\n-        self.0.rfold(init, f)\n+        // `rfold` needs ownership, so this can't forward directly.\n+        I::try_rfold(self.0, init, NeverShortCircuit::wrap_mut_2(f)).0\n     }\n \n     #[inline]\n@@ -81,6 +86,6 @@ impl<I: DoubleEndedIterator> DoubleEndedIterator for ByRefSized<'_, I> {\n         F: FnMut(B, Self::Item) -> R,\n         R: Try<Output = B>,\n     {\n-        self.0.try_rfold(init, f)\n+        I::try_rfold(self.0, init, f)\n     }\n }"}, {"sha": "a9c066f0e8cb157eb9720b975f6d18bc3fe7e866", "filename": "library/core/tests/iter/adapters/by_ref_sized.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7680c8b69051536a9c4ebcf943b394526af1a1be/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fby_ref_sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7680c8b69051536a9c4ebcf943b394526af1a1be/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fby_ref_sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fby_ref_sized.rs?ref=7680c8b69051536a9c4ebcf943b394526af1a1be", "patch": "@@ -0,0 +1,20 @@\n+use core::iter::*;\n+\n+#[test]\n+fn test_iterator_by_ref_sized() {\n+    let a = ['a', 'b', 'c', 'd'];\n+\n+    let mut s = String::from(\"Z\");\n+    let mut it = a.iter().copied();\n+    ByRefSized(&mut it).take(2).for_each(|x| s.push(x));\n+    assert_eq!(s, \"Zab\");\n+    ByRefSized(&mut it).fold((), |(), x| s.push(x));\n+    assert_eq!(s, \"Zabcd\");\n+\n+    let mut s = String::from(\"Z\");\n+    let mut it = a.iter().copied();\n+    ByRefSized(&mut it).rev().take(2).for_each(|x| s.push(x));\n+    assert_eq!(s, \"Zdc\");\n+    ByRefSized(&mut it).rfold((), |(), x| s.push(x));\n+    assert_eq!(s, \"Zdcba\");\n+}"}, {"sha": "ffd5f3857aea4d1e4f221a5f308b39483292ba06", "filename": "library/core/tests/iter/adapters/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7680c8b69051536a9c4ebcf943b394526af1a1be/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7680c8b69051536a9c4ebcf943b394526af1a1be/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Fmod.rs?ref=7680c8b69051536a9c4ebcf943b394526af1a1be", "patch": "@@ -1,4 +1,5 @@\n mod array_chunks;\n+mod by_ref_sized;\n mod chain;\n mod cloned;\n mod copied;"}]}