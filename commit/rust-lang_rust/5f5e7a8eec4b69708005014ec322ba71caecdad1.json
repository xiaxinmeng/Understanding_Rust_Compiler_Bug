{"sha": "5f5e7a8eec4b69708005014ec322ba71caecdad1", "node_id": "C_kwDOAAsO6NoAKDVmNWU3YThlZWM0YjY5NzA4MDA1MDE0ZWMzMjJiYTcxY2FlY2RhZDE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-06T09:33:52Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-24T17:48:27Z"}, "message": "Record in HIR whether lifetime elision was succesful.", "tree": {"sha": "51c8c7bf2d9681fe1170dc6709090f0136fccaca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51c8c7bf2d9681fe1170dc6709090f0136fccaca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f5e7a8eec4b69708005014ec322ba71caecdad1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f5e7a8eec4b69708005014ec322ba71caecdad1", "html_url": "https://github.com/rust-lang/rust/commit/5f5e7a8eec4b69708005014ec322ba71caecdad1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f5e7a8eec4b69708005014ec322ba71caecdad1/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb7d25e97863e1a305bfeed6f418c5accc152123", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb7d25e97863e1a305bfeed6f418c5accc152123", "html_url": "https://github.com/rust-lang/rust/commit/fb7d25e97863e1a305bfeed6f418c5accc152123"}], "stats": {"total": 84, "additions": 50, "deletions": 34}, "files": [{"sha": "889317665669ae8a8748a92eec99352e4330c84f", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f5e7a8eec4b69708005014ec322ba71caecdad1/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5e7a8eec4b69708005014ec322ba71caecdad1/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=5f5e7a8eec4b69708005014ec322ba71caecdad1", "patch": "@@ -603,6 +603,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             output,\n             c_variadic: false,\n             implicit_self: hir::ImplicitSelfKind::None,\n+            lifetime_elision_allowed: false,\n         });\n \n         // Lower the argument pattern/ident. The ident is used again in the `.await` lowering.\n@@ -907,7 +908,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let bound_generic_params = self.lower_lifetime_binder(closure_id, generic_params);\n         // Lower outside new scope to preserve `is_in_loop_condition`.\n-        let fn_decl = self.lower_fn_decl(decl, None, fn_decl_span, FnDeclKind::Closure, None);\n+        let fn_decl = self.lower_fn_decl(decl, closure_id, fn_decl_span, FnDeclKind::Closure, None);\n \n         let c = self.arena.alloc(hir::Closure {\n             def_id: self.local_def_id(closure_id),\n@@ -1017,7 +1018,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // have to conserve the state of being inside a loop condition for the\n         // closure argument types.\n         let fn_decl =\n-            self.lower_fn_decl(&outer_decl, None, fn_decl_span, FnDeclKind::Closure, None);\n+            self.lower_fn_decl(&outer_decl, closure_id, fn_decl_span, FnDeclKind::Closure, None);\n \n         let c = self.arena.alloc(hir::Closure {\n             def_id: self.local_def_id(closure_id),"}, {"sha": "2b47e90891291094560afbf51acb84a8467213d7", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f5e7a8eec4b69708005014ec322ba71caecdad1/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5e7a8eec4b69708005014ec322ba71caecdad1/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=5f5e7a8eec4b69708005014ec322ba71caecdad1", "patch": "@@ -274,7 +274,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let mut itctx = ImplTraitContext::Universal;\n                     let (generics, decl) = this.lower_generics(generics, id, &mut itctx, |this| {\n                         let ret_id = asyncness.opt_return_id();\n-                        this.lower_fn_decl(&decl, Some(id), *fn_sig_span, FnDeclKind::Fn, ret_id)\n+                        this.lower_fn_decl(&decl, id, *fn_sig_span, FnDeclKind::Fn, ret_id)\n                     });\n                     let sig = hir::FnSig {\n                         decl,\n@@ -659,7 +659,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                                 // Disallow `impl Trait` in foreign items.\n                                 this.lower_fn_decl(\n                                     fdec,\n-                                    None,\n+                                    i.id,\n                                     sig.span,\n                                     FnDeclKind::ExternFn,\n                                     None,\n@@ -1247,7 +1247,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let header = self.lower_fn_header(sig.header);\n         let mut itctx = ImplTraitContext::Universal;\n         let (generics, decl) = self.lower_generics(generics, id, &mut itctx, |this| {\n-            this.lower_fn_decl(&sig.decl, Some(id), sig.span, kind, is_async)\n+            this.lower_fn_decl(&sig.decl, id, sig.span, kind, is_async)\n         });\n         (generics, hir::FnSig { header, decl, span: self.lower_span(sig.span) })\n     }"}, {"sha": "c6558f582ebedd4cb232a9f150e0aa7471698358", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 34, "deletions": 29, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/5f5e7a8eec4b69708005014ec322ba71caecdad1/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5e7a8eec4b69708005014ec322ba71caecdad1/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=5f5e7a8eec4b69708005014ec322ba71caecdad1", "patch": "@@ -327,7 +327,14 @@ enum FnDeclKind {\n }\n \n impl FnDeclKind {\n-    fn impl_trait_allowed(&self, tcx: TyCtxt<'_>) -> bool {\n+    fn param_impl_trait_allowed(&self) -> bool {\n+        match self {\n+            FnDeclKind::Fn | FnDeclKind::Inherent | FnDeclKind::Impl | FnDeclKind::Trait => true,\n+            _ => false,\n+        }\n+    }\n+\n+    fn return_impl_trait_allowed(&self, tcx: TyCtxt<'_>) -> bool {\n         match self {\n             FnDeclKind::Fn | FnDeclKind::Inherent => true,\n             FnDeclKind::Impl if tcx.features().return_position_impl_trait_in_trait => true,\n@@ -1267,7 +1274,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     generic_params,\n                     unsafety: self.lower_unsafety(f.unsafety),\n                     abi: self.lower_extern(f.ext),\n-                    decl: self.lower_fn_decl(&f.decl, None, t.span, FnDeclKind::Pointer, None),\n+                    decl: self.lower_fn_decl(&f.decl, t.id, t.span, FnDeclKind::Pointer, None),\n                     param_names: self.lower_fn_params_to_names(&f.decl),\n                 }))\n             }\n@@ -1671,7 +1678,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_fn_decl(\n         &mut self,\n         decl: &FnDecl,\n-        fn_node_id: Option<NodeId>,\n+        fn_node_id: NodeId,\n         fn_span: Span,\n         kind: FnDeclKind,\n         make_ret_async: Option<(NodeId, Span)>,\n@@ -1686,23 +1693,21 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             inputs = &inputs[..inputs.len() - 1];\n         }\n         let inputs = self.arena.alloc_from_iter(inputs.iter().map(|param| {\n-            if fn_node_id.is_some() {\n-                self.lower_ty_direct(&param.ty, &ImplTraitContext::Universal)\n+            let itctx = if kind.param_impl_trait_allowed() {\n+                ImplTraitContext::Universal\n             } else {\n-                self.lower_ty_direct(\n-                    &param.ty,\n-                    &ImplTraitContext::Disallowed(match kind {\n-                        FnDeclKind::Fn | FnDeclKind::Inherent => {\n-                            unreachable!(\"fn should allow in-band lifetimes\")\n-                        }\n-                        FnDeclKind::ExternFn => ImplTraitPosition::ExternFnParam,\n-                        FnDeclKind::Closure => ImplTraitPosition::ClosureParam,\n-                        FnDeclKind::Pointer => ImplTraitPosition::PointerParam,\n-                        FnDeclKind::Trait => ImplTraitPosition::TraitParam,\n-                        FnDeclKind::Impl => ImplTraitPosition::ImplParam,\n-                    }),\n-                )\n-            }\n+                ImplTraitContext::Disallowed(match kind {\n+                    FnDeclKind::Fn | FnDeclKind::Inherent => {\n+                        unreachable!(\"fn should allow APIT\")\n+                    }\n+                    FnDeclKind::ExternFn => ImplTraitPosition::ExternFnParam,\n+                    FnDeclKind::Closure => ImplTraitPosition::ClosureParam,\n+                    FnDeclKind::Pointer => ImplTraitPosition::PointerParam,\n+                    FnDeclKind::Trait => ImplTraitPosition::TraitParam,\n+                    FnDeclKind::Impl => ImplTraitPosition::ImplParam,\n+                })\n+            };\n+            self.lower_ty_direct(&param.ty, &itctx)\n         }));\n \n         let output = if let Some((ret_id, span)) = make_ret_async {\n@@ -1725,22 +1730,21 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n             self.lower_async_fn_ret_ty(\n                 &decl.output,\n-                fn_node_id.expect(\"`make_ret_async` but no `fn_def_id`\"),\n+                fn_node_id,\n                 ret_id,\n                 matches!(kind, FnDeclKind::Trait),\n             )\n         } else {\n             match &decl.output {\n                 FnRetTy::Ty(ty) => {\n-                    let mut context = match fn_node_id {\n-                        Some(fn_node_id) if kind.impl_trait_allowed(self.tcx) => {\n-                            let fn_def_id = self.local_def_id(fn_node_id);\n-                            ImplTraitContext::ReturnPositionOpaqueTy {\n-                                origin: hir::OpaqueTyOrigin::FnReturn(fn_def_id),\n-                                in_trait: matches!(kind, FnDeclKind::Trait),\n-                            }\n+                    let mut context = if kind.return_impl_trait_allowed(self.tcx) {\n+                        let fn_def_id = self.local_def_id(fn_node_id);\n+                        ImplTraitContext::ReturnPositionOpaqueTy {\n+                            origin: hir::OpaqueTyOrigin::FnReturn(fn_def_id),\n+                            in_trait: matches!(kind, FnDeclKind::Trait),\n                         }\n-                        _ => ImplTraitContext::Disallowed(match kind {\n+                    } else {\n+                        ImplTraitContext::Disallowed(match kind {\n                             FnDeclKind::Fn | FnDeclKind::Inherent => {\n                                 unreachable!(\"fn should allow in-band lifetimes\")\n                             }\n@@ -1749,7 +1753,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             FnDeclKind::Pointer => ImplTraitPosition::PointerReturn,\n                             FnDeclKind::Trait => ImplTraitPosition::TraitReturn,\n                             FnDeclKind::Impl => ImplTraitPosition::ImplReturn,\n-                        }),\n+                        })\n                     };\n                     hir::FnRetTy::Return(self.lower_ty(ty, &mut context))\n                 }\n@@ -1761,6 +1765,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             inputs,\n             output,\n             c_variadic,\n+            lifetime_elision_allowed: self.resolver.lifetime_elision_allowed.contains(&fn_node_id),\n             implicit_self: decl.inputs.get(0).map_or(hir::ImplicitSelfKind::None, |arg| {\n                 let is_mutable_pat = matches!(\n                     arg.pat.kind,"}, {"sha": "4ac783729e6e284dde89b4655add35ceada4d0c2", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f5e7a8eec4b69708005014ec322ba71caecdad1/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5e7a8eec4b69708005014ec322ba71caecdad1/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=5f5e7a8eec4b69708005014ec322ba71caecdad1", "patch": "@@ -2670,6 +2670,8 @@ pub struct FnDecl<'hir> {\n     pub c_variadic: bool,\n     /// Does the function have an implicit self?\n     pub implicit_self: ImplicitSelfKind,\n+    /// Is lifetime elision allowed.\n+    pub lifetime_elision_allowed: bool,\n }\n \n /// Represents what type of implicit self a function has, if any."}, {"sha": "5ef5013cac10b20282af196f16732cf3adbf3cd7", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f5e7a8eec4b69708005014ec322ba71caecdad1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5e7a8eec4b69708005014ec322ba71caecdad1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=5f5e7a8eec4b69708005014ec322ba71caecdad1", "patch": "@@ -207,6 +207,8 @@ pub struct ResolverAstLowering {\n     /// A small map keeping true kinds of built-in macros that appear to be fn-like on\n     /// the surface (`macro` items in libcore), but are actually attributes or derives.\n     pub builtin_macro_kinds: FxHashMap<LocalDefId, MacroKind>,\n+    /// List functions and methods for which lifetime elision was successful.\n+    pub lifetime_elision_allowed: FxHashSet<ast::NodeId>,\n }\n \n #[derive(Clone, Copy, Debug)]"}, {"sha": "4da124d155864dc13a314c8a635a0acb9265e42c", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f5e7a8eec4b69708005014ec322ba71caecdad1/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5e7a8eec4b69708005014ec322ba71caecdad1/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=5f5e7a8eec4b69708005014ec322ba71caecdad1", "patch": "@@ -1838,6 +1838,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n         let outer_failures = take(&mut self.diagnostic_metadata.current_elision_failures);\n         let output_rib = if let Ok(res) = elision_lifetime.as_ref() {\n+            self.r.lifetime_elision_allowed.insert(fn_id);\n             LifetimeRibKind::Elided(*res)\n         } else {\n             LifetimeRibKind::ElisionFailure"}, {"sha": "51d258594a8fd96ebba8cf65a20874597b0462ab", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f5e7a8eec4b69708005014ec322ba71caecdad1/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f5e7a8eec4b69708005014ec322ba71caecdad1/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=5f5e7a8eec4b69708005014ec322ba71caecdad1", "patch": "@@ -1036,6 +1036,8 @@ pub struct Resolver<'a> {\n     /// they are declared in the static array generated by proc_macro_harness.\n     proc_macros: Vec<NodeId>,\n     confused_type_with_std_module: FxHashMap<Span, Span>,\n+    /// Whether lifetime elision was successful.\n+    lifetime_elision_allowed: FxHashSet<NodeId>,\n \n     effective_visibilities: EffectiveVisibilities,\n }\n@@ -1354,6 +1356,7 @@ impl<'a> Resolver<'a> {\n             trait_impls: Default::default(),\n             proc_macros: Default::default(),\n             confused_type_with_std_module: Default::default(),\n+            lifetime_elision_allowed: Default::default(),\n             effective_visibilities: Default::default(),\n         };\n \n@@ -1448,6 +1451,7 @@ impl<'a> Resolver<'a> {\n             def_id_to_node_id: self.def_id_to_node_id,\n             trait_map: self.trait_map,\n             builtin_macro_kinds: self.builtin_macro_kinds,\n+            lifetime_elision_allowed: self.lifetime_elision_allowed,\n         };\n         ResolverOutputs { definitions, global_ctxt, ast_lowering }\n     }\n@@ -1491,6 +1495,7 @@ impl<'a> Resolver<'a> {\n             def_id_to_node_id: self.def_id_to_node_id.clone(),\n             trait_map: self.trait_map.clone(),\n             builtin_macro_kinds: self.builtin_macro_kinds.clone(),\n+            lifetime_elision_allowed: self.lifetime_elision_allowed.clone(),\n         };\n         ResolverOutputs { definitions, global_ctxt, ast_lowering }\n     }"}]}