{"sha": "f0343cbd1f6140bfc72e305cebf3db26eb4a2c55", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwMzQzY2JkMWY2MTQwYmZjNzJlMzA1Y2ViZjNkYjI2ZWI0YTJjNTU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-02-21T15:29:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-21T15:29:47Z"}, "message": "Rollup merge of #48106 - QuietMisdreavus:teleporting-crates, r=GuillaumeGomez\n\nrustdoc: move manual \"extern crate\" statements outside automatic \"fn main\"s in doctests\n\nGated on https://github.com/rust-lang/rust/pull/48095 - I based the branch atop that so i could show off the change in one of its tests, the actual change in this PR is just the last commit\n\nThere are a handful of unfortunate assumptions in the way rustdoc processes `extern crate` statements in doctests:\n\n1. In the absence of an `extern crate` statement in the test, if the test also uses the local crate name, it will automatically insert an `extern crate cratename;` statement into the test.\n2. If the doctest *does* include an `extern crate` statement, rustdoc will not automatically insert one, on the assumption that doing so would introduce a duplicate import.\n3. If a doctest does not have the substring `fn main` outside a comment, rustdoc will wrap the whole doctest in a generated `fn main` so it can be compiled.\n\nIn short, whenever you write a doctest like this...\n\n```rust\n//! extern crate my_crate;\n//! my_crate::some_cool_thing();\n```\n\n...rustdoc will turn it into (something like) this:\n\n```rust\nfn main() {\nextern crate my_crate;\nmy_crate::some_cool_thing();\n}\n```\n\nThis creates issues when compiled, because now `my_crate` isn't even properly in scope! This forces people who want to have multiple crates in their doctests (or an explicit `extern crate` statement) to also manually include their own `fn main`, so rustdoc doesn't put their imports in the wrong place.\n\nThis PR just taps into another processing step rustdoc does to doctests: Whenever you add an `#![inner_attribute]` to the beginning of a doctest, rustdoc will actually splice those out and put it before the generated `fn main`. Now, we can just do the same with `extern crate`s at the beginning, too, and get a much nicer experience.\n\nNow, the above example will be converted into this:\n\n```rust\nextern crate my_crate;\nfn main() {\nmy_crate::some_cool_thing();\n}\n```", "tree": {"sha": "4238c5e83219ddc5d7a727210345a305ad21de26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4238c5e83219ddc5d7a727210345a305ad21de26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0343cbd1f6140bfc72e305cebf3db26eb4a2c55", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJajZBrCRBK7hj4Ov3rIwAAdHIIACjt9A4K5lXQa/eqF4eatuTv\ntxw4zrOk8j7ChBp4F6x0goQbRAjcSOfu4uL/ZErgSk7LMEIicmAmBr/UpckvWFx4\nmvKtY9ucojmnNvey/yTHLnPhWSRqQGCEMyWSPJB/Ovu8ud5ncaL1RbATbOvyZ2fw\ndI0Y/FBy2kO0KJqs2fjqZP37WNy2cUl0ChsJYZM0I+WPCllMLFSQTXFHVglfVwcW\nM8SXZWxl/+HSvKNmjm4UU1nT7XUYZuuVRheK/9Jnyg24HDTe6gWmI2PS9mkf107z\nge9YPaqJ1R5N4avMOpBuJcTDVPmKItHky5f+wLHNFzol+fED603okidzjiD6CjY=\n=MPKN\n-----END PGP SIGNATURE-----\n", "payload": "tree 4238c5e83219ddc5d7a727210345a305ad21de26\nparent aec653536c3db82d74bb1a274b7df9d9dc582ec4\nparent d8d4c583be96d9eb654891288829af9410b68e1c\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1519226987 +0100\ncommitter GitHub <noreply@github.com> 1519226987 +0100\n\nRollup merge of #48106 - QuietMisdreavus:teleporting-crates, r=GuillaumeGomez\n\nrustdoc: move manual \"extern crate\" statements outside automatic \"fn main\"s in doctests\n\nGated on https://github.com/rust-lang/rust/pull/48095 - I based the branch atop that so i could show off the change in one of its tests, the actual change in this PR is just the last commit\n\nThere are a handful of unfortunate assumptions in the way rustdoc processes `extern crate` statements in doctests:\n\n1. In the absence of an `extern crate` statement in the test, if the test also uses the local crate name, it will automatically insert an `extern crate cratename;` statement into the test.\n2. If the doctest *does* include an `extern crate` statement, rustdoc will not automatically insert one, on the assumption that doing so would introduce a duplicate import.\n3. If a doctest does not have the substring `fn main` outside a comment, rustdoc will wrap the whole doctest in a generated `fn main` so it can be compiled.\n\nIn short, whenever you write a doctest like this...\n\n```rust\n//! extern crate my_crate;\n//! my_crate::some_cool_thing();\n```\n\n...rustdoc will turn it into (something like) this:\n\n```rust\nfn main() {\nextern crate my_crate;\nmy_crate::some_cool_thing();\n}\n```\n\nThis creates issues when compiled, because now `my_crate` isn't even properly in scope! This forces people who want to have multiple crates in their doctests (or an explicit `extern crate` statement) to also manually include their own `fn main`, so rustdoc doesn't put their imports in the wrong place.\n\nThis PR just taps into another processing step rustdoc does to doctests: Whenever you add an `#![inner_attribute]` to the beginning of a doctest, rustdoc will actually splice those out and put it before the generated `fn main`. Now, we can just do the same with `extern crate`s at the beginning, too, and get a much nicer experience.\n\nNow, the above example will be converted into this:\n\n```rust\nextern crate my_crate;\nfn main() {\nmy_crate::some_cool_thing();\n}\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0343cbd1f6140bfc72e305cebf3db26eb4a2c55", "html_url": "https://github.com/rust-lang/rust/commit/f0343cbd1f6140bfc72e305cebf3db26eb4a2c55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0343cbd1f6140bfc72e305cebf3db26eb4a2c55/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aec653536c3db82d74bb1a274b7df9d9dc582ec4", "url": "https://api.github.com/repos/rust-lang/rust/commits/aec653536c3db82d74bb1a274b7df9d9dc582ec4", "html_url": "https://github.com/rust-lang/rust/commit/aec653536c3db82d74bb1a274b7df9d9dc582ec4"}, {"sha": "d8d4c583be96d9eb654891288829af9410b68e1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8d4c583be96d9eb654891288829af9410b68e1c", "html_url": "https://github.com/rust-lang/rust/commit/d8d4c583be96d9eb654891288829af9410b68e1c"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "c1e6b4f5a17d933ca2cea989efffa62ab0816a3a", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0343cbd1f6140bfc72e305cebf3db26eb4a2c55/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0343cbd1f6140bfc72e305cebf3db26eb4a2c55/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=f0343cbd1f6140bfc72e305cebf3db26eb4a2c55", "patch": "@@ -325,6 +325,8 @@ Erroneous code example:\n extern crate core;\n \n struct core;\n+\n+fn main() {}\n ```\n \n There are two possible solutions:"}, {"sha": "12c4076c9a5cc5b19ffad1a661526aa00b630018", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f0343cbd1f6140bfc72e305cebf3db26eb4a2c55/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0343cbd1f6140bfc72e305cebf3db26eb4a2c55/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=f0343cbd1f6140bfc72e305cebf3db26eb4a2c55", "patch": "@@ -414,7 +414,8 @@ fn partition_source(s: &str) -> (String, String) {\n     for line in s.lines() {\n         let trimline = line.trim();\n         let header = trimline.is_whitespace() ||\n-            trimline.starts_with(\"#![\");\n+            trimline.starts_with(\"#![\") ||\n+            trimline.starts_with(\"extern crate\");\n         if !header || after_header {\n             after_header = true;\n             after.push_str(line);\n@@ -814,8 +815,8 @@ use asdf::qwop;\n assert_eq!(2+2, 4);\";\n         let expected =\n \"#![allow(unused)]\n-fn main() {\n extern crate asdf;\n+fn main() {\n use asdf::qwop;\n assert_eq!(2+2, 4);\n }\".to_string();"}]}