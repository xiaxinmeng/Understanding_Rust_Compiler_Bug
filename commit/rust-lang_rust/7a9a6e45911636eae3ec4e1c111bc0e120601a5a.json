{"sha": "7a9a6e45911636eae3ec4e1c111bc0e120601a5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhOWE2ZTQ1OTExNjM2ZWFlM2VjNGUxYzExMWJjMGUxMjA2MDFhNWE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-21T01:26:56Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-21T01:26:56Z"}, "message": "std: Port SharedChan to newsched", "tree": {"sha": "e17510b6c9e226775774de697d421de3f288d210", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e17510b6c9e226775774de697d421de3f288d210"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a9a6e45911636eae3ec4e1c111bc0e120601a5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a9a6e45911636eae3ec4e1c111bc0e120601a5a", "html_url": "https://github.com/rust-lang/rust/commit/7a9a6e45911636eae3ec4e1c111bc0e120601a5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a9a6e45911636eae3ec4e1c111bc0e120601a5a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "357f087786cbd6516a38aff800cf9334bc5b85c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/357f087786cbd6516a38aff800cf9334bc5b85c5", "html_url": "https://github.com/rust-lang/rust/commit/357f087786cbd6516a38aff800cf9334bc5b85c5"}], "stats": {"total": 52, "additions": 37, "deletions": 15}, "files": [{"sha": "00c33c8ab325d05efa2774b16cc1058938cbb33a", "filename": "src/libstd/comm.rs", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7a9a6e45911636eae3ec4e1c111bc0e120601a5a/src%2Flibstd%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a9a6e45911636eae3ec4e1c111bc0e120601a5a/src%2Flibstd%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm.rs?ref=7a9a6e45911636eae3ec4e1c111bc0e120601a5a", "patch": "@@ -220,48 +220,58 @@ impl<T: Owned> Peekable<T> for PortSet<T> {\n \n /// A channel that can be shared between many senders.\n pub struct SharedChan<T> {\n-    ch: Exclusive<pipesy::Chan<T>>\n+    inner: Either<Exclusive<pipesy::Chan<T>>, rtcomm::SharedChan<T>>\n }\n \n impl<T: Owned> SharedChan<T> {\n     /// Converts a `chan` into a `shared_chan`.\n     pub fn new(c: Chan<T>) -> SharedChan<T> {\n         let Chan { inner } = c;\n         let c = match inner {\n-            Left(c) => c,\n-            Right(_) => fail!(\"SharedChan not implemented\")\n+            Left(c) => Left(exclusive(c)),\n+            Right(c) => Right(rtcomm::SharedChan::new(c))\n         };\n-        SharedChan { ch: exclusive(c) }\n+        SharedChan { inner: c }\n     }\n }\n \n impl<T: Owned> GenericChan<T> for SharedChan<T> {\n     fn send(&self, x: T) {\n-        unsafe {\n-            let mut xx = Some(x);\n-            do self.ch.with_imm |chan| {\n-                let x = replace(&mut xx, None);\n-                chan.send(x.unwrap())\n+        match self.inner {\n+            Left(ref chan) => {\n+                unsafe {\n+                    let mut xx = Some(x);\n+                    do chan.with_imm |chan| {\n+                        let x = replace(&mut xx, None);\n+                        chan.send(x.unwrap())\n+                    }\n+                }\n             }\n+            Right(ref chan) => chan.send(x)\n         }\n     }\n }\n \n impl<T: Owned> GenericSmartChan<T> for SharedChan<T> {\n     fn try_send(&self, x: T) -> bool {\n-        unsafe {\n-            let mut xx = Some(x);\n-            do self.ch.with_imm |chan| {\n-                let x = replace(&mut xx, None);\n-                chan.try_send(x.unwrap())\n+        match self.inner {\n+            Left(ref chan) => {\n+                unsafe {\n+                    let mut xx = Some(x);\n+                    do chan.with_imm |chan| {\n+                        let x = replace(&mut xx, None);\n+                        chan.try_send(x.unwrap())\n+                    }\n+                }\n             }\n+            Right(ref chan) => chan.try_send(x)\n         }\n     }\n }\n \n impl<T: Owned> ::clone::Clone for SharedChan<T> {\n     fn clone(&self) -> SharedChan<T> {\n-        SharedChan { ch: self.ch.clone() }\n+        SharedChan { inner: self.inner.clone() }\n     }\n }\n "}, {"sha": "833f25b253c05dbfda6fa88855b8f4c1f46947e3", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a9a6e45911636eae3ec4e1c111bc0e120601a5a/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a9a6e45911636eae3ec4e1c111bc0e120601a5a/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=7a9a6e45911636eae3ec4e1c111bc0e120601a5a", "patch": "@@ -248,6 +248,18 @@ mod test {\n         }\n     }\n \n+    #[test]\n+    fn comm_shared_chan() {\n+        use comm::*;\n+\n+        do run_in_newsched_task() {\n+            let (port, chan) = stream();\n+            let chan = SharedChan::new(chan);\n+            chan.send(10);\n+            assert!(port.recv() == 10);\n+        }\n+    }\n+\n     #[test]\n     fn linked_failure() {\n         do run_in_newsched_task() {"}]}