{"sha": "0435c1b0a5fbc0cbaef8cb9f1711d3e30c944781", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MzVjMWIwYTVmYmMwY2JhZWY4Y2I5ZjE3MTFkM2UzMGM5NDQ3ODE=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-12-21T01:34:24Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-12-30T18:40:04Z"}, "message": "When a codegen worker has a FatalError, propagate it instead of ICE'ing.", "tree": {"sha": "aca359583b969f413bed6781247d1d51d42c1a67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aca359583b969f413bed6781247d1d51d42c1a67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0435c1b0a5fbc0cbaef8cb9f1711d3e30c944781", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0435c1b0a5fbc0cbaef8cb9f1711d3e30c944781", "html_url": "https://github.com/rust-lang/rust/commit/0435c1b0a5fbc0cbaef8cb9f1711d3e30c944781", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0435c1b0a5fbc0cbaef8cb9f1711d3e30c944781/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a916ac22b9f7f1f0f7aba0a41a789b3ecd765018", "url": "https://api.github.com/repos/rust-lang/rust/commits/a916ac22b9f7f1f0f7aba0a41a789b3ecd765018", "html_url": "https://github.com/rust-lang/rust/commit/a916ac22b9f7f1f0f7aba0a41a789b3ecd765018"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "9f577ba83d2b7f1cb444cb4f7f6fa242928def83", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0435c1b0a5fbc0cbaef8cb9f1711d3e30c944781/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0435c1b0a5fbc0cbaef8cb9f1711d3e30c944781/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=0435c1b0a5fbc0cbaef8cb9f1711d3e30c944781", "patch": "@@ -903,7 +903,7 @@ pub enum Message<B: WriteBackendMethods> {\n         worker_id: usize,\n     },\n     Done {\n-        result: Result<CompiledModule, ()>,\n+        result: Result<CompiledModule, Option<WorkerFatalError>>,\n         worker_id: usize,\n     },\n     CodegenDone {\n@@ -1476,9 +1476,12 @@ fn start_executing_work<B: ExtraBackendMethods>(\n                     main_thread_worker_state = MainThreadWorkerState::Idle;\n                 }\n                 // If the thread failed that means it panicked, so we abort immediately.\n-                Message::Done { result: Err(()), worker_id: _ } => {\n+                Message::Done { result: Err(None), worker_id: _ } => {\n                     bug!(\"worker thread panicked\");\n                 }\n+                Message::Done { result: Err(Some(WorkerFatalError)), worker_id: _ } => {\n+                    return Err(());\n+                }\n                 Message::CodegenItem => bug!(\"the coordinator should not receive codegen requests\"),\n             }\n         }\n@@ -1527,6 +1530,10 @@ fn start_executing_work<B: ExtraBackendMethods>(\n \n pub const CODEGEN_WORKER_ID: usize = ::std::usize::MAX;\n \n+/// `FatalError` is explicitly not `Send`.\n+#[must_use]\n+pub struct WorkerFatalError;\n+\n fn spawn_work<B: ExtraBackendMethods>(cgcx: CodegenContext<B>, work: WorkItem<B>) {\n     let depth = time_depth();\n \n@@ -1537,23 +1544,26 @@ fn spawn_work<B: ExtraBackendMethods>(cgcx: CodegenContext<B>, work: WorkItem<B>\n         // we exit.\n         struct Bomb<B: ExtraBackendMethods> {\n             coordinator_send: Sender<Box<dyn Any + Send>>,\n-            result: Option<WorkItemResult<B>>,\n+            result: Option<Result<WorkItemResult<B>, FatalError>>,\n             worker_id: usize,\n         }\n         impl<B: ExtraBackendMethods> Drop for Bomb<B> {\n             fn drop(&mut self) {\n                 let worker_id = self.worker_id;\n                 let msg = match self.result.take() {\n-                    Some(WorkItemResult::Compiled(m)) => {\n+                    Some(Ok(WorkItemResult::Compiled(m))) => {\n                         Message::Done::<B> { result: Ok(m), worker_id }\n                     }\n-                    Some(WorkItemResult::NeedsFatLTO(m)) => {\n+                    Some(Ok(WorkItemResult::NeedsFatLTO(m))) => {\n                         Message::NeedsFatLTO::<B> { result: m, worker_id }\n                     }\n-                    Some(WorkItemResult::NeedsThinLTO(name, thin_buffer)) => {\n+                    Some(Ok(WorkItemResult::NeedsThinLTO(name, thin_buffer))) => {\n                         Message::NeedsThinLTO::<B> { name, thin_buffer, worker_id }\n                     }\n-                    None => Message::Done::<B> { result: Err(()), worker_id },\n+                    Some(Err(FatalError)) => {\n+                        Message::Done::<B> { result: Err(Some(WorkerFatalError)), worker_id }\n+                    }\n+                    None => Message::Done::<B> { result: Err(None), worker_id },\n                 };\n                 drop(self.coordinator_send.send(Box::new(msg)));\n             }\n@@ -1573,7 +1583,7 @@ fn spawn_work<B: ExtraBackendMethods>(cgcx: CodegenContext<B>, work: WorkItem<B>\n         // surface that there was an error in this worker.\n         bomb.result = {\n             let _prof_timer = cgcx.prof.generic_activity(work.profiling_event_id());\n-            execute_work_item(&cgcx, work).ok()\n+            Some(execute_work_item(&cgcx, work))\n         };\n     });\n }"}]}