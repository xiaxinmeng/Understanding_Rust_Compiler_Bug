{"sha": "0e5d8883ccbe4a125e8da07a4be6c791838e9134", "node_id": "C_kwDOAAsO6NoAKDBlNWQ4ODgzY2NiZTRhMTI1ZThkYTA3YTRiZTZjNzkxODM4ZTkxMzQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-01T17:04:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-01T17:04:29Z"}, "message": "Merge #11153\n\n11153: internal: add more prefix entry point tests r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "e61f96a038ccb5ff658ca36e32dabcdad1683258", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e61f96a038ccb5ff658ca36e32dabcdad1683258"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e5d8883ccbe4a125e8da07a4be6c791838e9134", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh0ImdCRBK7hj4Ov3rIwAAT9AIACEoa0G38VWTQNRDeQWnizFj\nv5wFX4v0PUlpmkVdOTrSlJAklTyfpLtYIg4+ldNXmdnG0kbAPGdoceodaHMS9SRZ\neRxXd13UiP1HgN00pIiCqLgtOGv3uwOeAy1yscTiy2+KaeVzW5+z50IU/qFwxzq0\naAW0JppWBQvH6j46tdKh+DBXLeLP6eHiwmdHA3gzc/uV6HgS7PExH09p4ulPhA1L\ntB5epv0BXKqBUsAEFWf/8XZ39m7Q4+8BDmUHVdDXiWg93s+HcPMdnEin1UuGBfSH\nzbv+bj7DRLWj3CMiQ4gNIw/wG8FlYU0TtQlctJFGCX6PTYFAJCtiWZETFKhkSjE=\n=4/50\n-----END PGP SIGNATURE-----\n", "payload": "tree e61f96a038ccb5ff658ca36e32dabcdad1683258\nparent 3f2edc72cd80d3c2f85705d499d7416690782611\nparent e36f557e4d0f591888dab84c9b5d5d47b0ea6c83\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1641056669 +0000\ncommitter GitHub <noreply@github.com> 1641056669 +0000\n\nMerge #11153\n\n11153: internal: add more prefix entry point tests r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e5d8883ccbe4a125e8da07a4be6c791838e9134", "html_url": "https://github.com/rust-lang/rust/commit/0e5d8883ccbe4a125e8da07a4be6c791838e9134", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e5d8883ccbe4a125e8da07a4be6c791838e9134/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f2edc72cd80d3c2f85705d499d7416690782611", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f2edc72cd80d3c2f85705d499d7416690782611", "html_url": "https://github.com/rust-lang/rust/commit/3f2edc72cd80d3c2f85705d499d7416690782611"}, {"sha": "e36f557e4d0f591888dab84c9b5d5d47b0ea6c83", "url": "https://api.github.com/repos/rust-lang/rust/commits/e36f557e4d0f591888dab84c9b5d5d47b0ea6c83", "html_url": "https://github.com/rust-lang/rust/commit/e36f557e4d0f591888dab84c9b5d5d47b0ea6c83"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "d52c6fbb16fd2a181a9037c9aff2d494b9315efe", "filename": "crates/parser/src/tests/entries.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0e5d8883ccbe4a125e8da07a4be6c791838e9134/crates%2Fparser%2Fsrc%2Ftests%2Fentries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e5d8883ccbe4a125e8da07a4be6c791838e9134/crates%2Fparser%2Fsrc%2Ftests%2Fentries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests%2Fentries.rs?ref=0e5d8883ccbe4a125e8da07a4be6c791838e9134", "patch": "@@ -59,10 +59,30 @@ fn path() {\n     check_prefix(PrefixEntryPoint::Path, \"foo::<> baz\", \"foo::<>\");\n     check_prefix(PrefixEntryPoint::Path, \"foo<> baz\", \"foo<>\");\n     check_prefix(PrefixEntryPoint::Path, \"Fn() -> i32?\", \"Fn() -> i32\");\n-    // FIXME: this shouldn't be accepted as path actually.\n+    // FIXME: This shouldn't be accepted as path actually.\n     check_prefix(PrefixEntryPoint::Path, \"<_>::foo\", \"<_>::foo\");\n }\n \n+#[test]\n+fn item() {\n+    // FIXME: This shouldn't consume the semicolon.\n+    check_prefix(PrefixEntryPoint::Item, \"fn foo() {};\", \"fn foo() {};\");\n+    check_prefix(PrefixEntryPoint::Item, \"#[attr] pub struct S {} 92\", \"#[attr] pub struct S {}\");\n+    check_prefix(PrefixEntryPoint::Item, \"item!{}?\", \"item!{}\");\n+    check_prefix(PrefixEntryPoint::Item, \"????\", \"?\");\n+}\n+\n+#[test]\n+fn meta_item() {\n+    check_prefix(PrefixEntryPoint::MetaItem, \"attr, \", \"attr\");\n+    check_prefix(\n+        PrefixEntryPoint::MetaItem,\n+        \"attr(some token {stream});\",\n+        \"attr(some token {stream})\",\n+    );\n+    check_prefix(PrefixEntryPoint::MetaItem, \"path::attr = 2 * 2!\", \"path::attr = 2 * 2\");\n+}\n+\n fn check_prefix(entry: PrefixEntryPoint, input: &str, prefix: &str) {\n     let lexed = LexedStr::new(input);\n     let input = lexed.to_input();"}]}