{"sha": "d122a0813acc162805683eb207a3a9e659c462d5", "node_id": "C_kwDOAAsO6NoAKGQxMjJhMDgxM2FjYzE2MjgwNTY4M2ViMjA3YTNhOWU2NTljNDYyZDU", "commit": {"author": {"name": "George O'Hara", "email": "georgeohara92@gmail.com", "date": "2021-09-27T12:18:22Z"}, "committer": {"name": "George O'Hara", "email": "georgeohara92@gmail.com", "date": "2021-09-27T12:18:22Z"}, "message": "Issue 89193", "tree": {"sha": "6a31c30fa7b2925a27b4e14efc6099b1f4eec5f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a31c30fa7b2925a27b4e14efc6099b1f4eec5f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d122a0813acc162805683eb207a3a9e659c462d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d122a0813acc162805683eb207a3a9e659c462d5", "html_url": "https://github.com/rust-lang/rust/commit/d122a0813acc162805683eb207a3a9e659c462d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d122a0813acc162805683eb207a3a9e659c462d5/comments", "author": {"login": "gcohara", "id": 50339401, "node_id": "MDQ6VXNlcjUwMzM5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/50339401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gcohara", "html_url": "https://github.com/gcohara", "followers_url": "https://api.github.com/users/gcohara/followers", "following_url": "https://api.github.com/users/gcohara/following{/other_user}", "gists_url": "https://api.github.com/users/gcohara/gists{/gist_id}", "starred_url": "https://api.github.com/users/gcohara/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gcohara/subscriptions", "organizations_url": "https://api.github.com/users/gcohara/orgs", "repos_url": "https://api.github.com/users/gcohara/repos", "events_url": "https://api.github.com/users/gcohara/events{/privacy}", "received_events_url": "https://api.github.com/users/gcohara/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gcohara", "id": 50339401, "node_id": "MDQ6VXNlcjUwMzM5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/50339401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gcohara", "html_url": "https://github.com/gcohara", "followers_url": "https://api.github.com/users/gcohara/followers", "following_url": "https://api.github.com/users/gcohara/following{/other_user}", "gists_url": "https://api.github.com/users/gcohara/gists{/gist_id}", "starred_url": "https://api.github.com/users/gcohara/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gcohara/subscriptions", "organizations_url": "https://api.github.com/users/gcohara/orgs", "repos_url": "https://api.github.com/users/gcohara/repos", "events_url": "https://api.github.com/users/gcohara/events{/privacy}", "received_events_url": "https://api.github.com/users/gcohara/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "197fc8591e6b02ac1f359ee0a72616eb4a6d4f4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/197fc8591e6b02ac1f359ee0a72616eb4a6d4f4c", "html_url": "https://github.com/rust-lang/rust/commit/197fc8591e6b02ac1f359ee0a72616eb4a6d4f4c"}], "stats": {"total": 86, "additions": 78, "deletions": 8}, "files": [{"sha": "8494baaa56d4c7db8788a9b1f321e09298ecde1c", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d122a0813acc162805683eb207a3a9e659c462d5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d122a0813acc162805683eb207a3a9e659c462d5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=d122a0813acc162805683eb207a3a9e659c462d5", "patch": "@@ -20,7 +20,7 @@ use rustc_middle::ty::{self, Ty};\n use rustc_middle::{bug, span_bug};\n use rustc_span::{sym, symbol::kw, Span, Symbol};\n use rustc_target::abi::{self, HasDataLayout, Primitive};\n-use rustc_target::spec::PanicStrategy;\n+use rustc_target::spec::{HasTargetSpec, PanicStrategy};\n \n use std::cmp::Ordering;\n use std::iter;\n@@ -1187,11 +1187,28 @@ fn generic_simd_intrinsic(\n     // FIXME: use:\n     //  https://github.com/llvm-mirror/llvm/blob/master/include/llvm/IR/Function.h#L182\n     //  https://github.com/llvm-mirror/llvm/blob/master/include/llvm/IR/Intrinsics.h#L81\n-    fn llvm_vector_str(elem_ty: Ty<'_>, vec_len: u64, no_pointers: usize) -> String {\n+    fn llvm_vector_str(\n+        elem_ty: Ty<'_>,\n+        vec_len: u64,\n+        no_pointers: usize,\n+        bx: &Builder<'a, 'll, 'tcx>,\n+    ) -> String {\n         let p0s: String = \"p0\".repeat(no_pointers);\n         match *elem_ty.kind() {\n-            ty::Int(v) => format!(\"v{}{}i{}\", vec_len, p0s, v.bit_width().unwrap()),\n-            ty::Uint(v) => format!(\"v{}{}i{}\", vec_len, p0s, v.bit_width().unwrap()),\n+            ty::Int(v) => format!(\n+                \"v{}{}i{}\",\n+                vec_len,\n+                p0s,\n+                // Normalize to prevent crash if v: IntTy::Isize\n+                v.normalize(bx.target_spec().pointer_width).bit_width().unwrap()\n+            ),\n+            ty::Uint(v) => format!(\n+                \"v{}{}i{}\",\n+                vec_len,\n+                p0s,\n+                // Normalize to prevent crash if v: UIntTy::Usize\n+                v.normalize(bx.target_spec().pointer_width).bit_width().unwrap()\n+            ),\n             ty::Float(v) => format!(\"v{}{}f{}\", vec_len, p0s, v.bit_width()),\n             _ => unreachable!(),\n         }\n@@ -1327,11 +1344,11 @@ fn generic_simd_intrinsic(\n \n         // Type of the vector of pointers:\n         let llvm_pointer_vec_ty = llvm_vector_ty(bx, underlying_ty, in_len, pointer_count);\n-        let llvm_pointer_vec_str = llvm_vector_str(underlying_ty, in_len, pointer_count);\n+        let llvm_pointer_vec_str = llvm_vector_str(underlying_ty, in_len, pointer_count, bx);\n \n         // Type of the vector of elements:\n         let llvm_elem_vec_ty = llvm_vector_ty(bx, underlying_ty, in_len, pointer_count - 1);\n-        let llvm_elem_vec_str = llvm_vector_str(underlying_ty, in_len, pointer_count - 1);\n+        let llvm_elem_vec_str = llvm_vector_str(underlying_ty, in_len, pointer_count - 1, bx);\n \n         let llvm_intrinsic =\n             format!(\"llvm.masked.gather.{}.{}\", llvm_elem_vec_str, llvm_pointer_vec_str);\n@@ -1455,11 +1472,11 @@ fn generic_simd_intrinsic(\n \n         // Type of the vector of pointers:\n         let llvm_pointer_vec_ty = llvm_vector_ty(bx, underlying_ty, in_len, pointer_count);\n-        let llvm_pointer_vec_str = llvm_vector_str(underlying_ty, in_len, pointer_count);\n+        let llvm_pointer_vec_str = llvm_vector_str(underlying_ty, in_len, pointer_count, bx);\n \n         // Type of the vector of elements:\n         let llvm_elem_vec_ty = llvm_vector_ty(bx, underlying_ty, in_len, pointer_count - 1);\n-        let llvm_elem_vec_str = llvm_vector_str(underlying_ty, in_len, pointer_count - 1);\n+        let llvm_elem_vec_str = llvm_vector_str(underlying_ty, in_len, pointer_count - 1, bx);\n \n         let llvm_intrinsic =\n             format!(\"llvm.masked.scatter.{}.{}\", llvm_elem_vec_str, llvm_pointer_vec_str);"}, {"sha": "d6ebea10b7ad80da6c3ee603a72bec8b237cb8fb", "filename": "src/test/ui/simd/issue-89193.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d122a0813acc162805683eb207a3a9e659c462d5/src%2Ftest%2Fui%2Fsimd%2Fissue-89193.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d122a0813acc162805683eb207a3a9e659c462d5/src%2Ftest%2Fui%2Fsimd%2Fissue-89193.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fissue-89193.rs?ref=d122a0813acc162805683eb207a3a9e659c462d5", "patch": "@@ -0,0 +1,53 @@\n+// run-pass\n+\n+// Test that simd gather instructions on slice of usize don't cause crash\n+// See issue #89183 - https://github.com/rust-lang/rust/issues/89193\n+\n+#![feature(repr_simd, platform_intrinsics)]\n+#![allow(non_camel_case_types)]\n+\n+#[repr(simd)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n+struct x4<T>(pub T, pub T, pub T, pub T);\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_gather<T, U, V>(x: T, y: U, z: V) -> T;\n+}\n+\n+fn main() {\n+    let x: [usize; 4] = [10, 11, 12, 13];\n+    let default = x4(0_usize, 1, 2, 3);\n+    let mask = x4(1_i32, 1, 1, 1);\n+    let expected = x4(10_usize, 11, 12, 13);\n+        \n+    unsafe {\n+        let pointer = &x[0] as *const usize;\n+        let pointers =  x4(\n+            pointer.offset(0) as *const usize,\n+            pointer.offset(1),\n+            pointer.offset(2),\n+            pointer.offset(3)\n+        );\n+        let result = simd_gather(default, pointers, mask);\n+        assert_eq!(result, expected);\n+    }\n+\n+    // and again for isize\n+    let x: [isize; 4] = [10, 11, 12, 13];\n+    let default = x4(0_isize, 1, 2, 3);\n+    let expected = x4(10_isize, 11, 12, 13);\n+        \n+    unsafe {\n+        let pointer = &x[0] as *const isize;\n+        let pointers =  x4(\n+            pointer.offset(0) as *const isize,\n+            pointer.offset(1),\n+            pointer.offset(2),\n+            pointer.offset(3)\n+        );\n+        let result = simd_gather(default, pointers, mask);\n+        assert_eq!(result, expected);\n+    }\n+    \n+}\n+"}]}