{"sha": "df7ecbcb1116915cb4557dccc5a4839a13fbf5b0", "node_id": "C_kwDOAAsO6NoAKGRmN2VjYmNiMTExNjkxNWNiNDU1N2RjY2M1YTQ4MzlhMTNmYmY1YjA", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-11-18T17:39:26Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-11-18T17:39:26Z"}, "message": "diagnostics: only show one suggestion for method -> assoc fn\n\nFixes #102354", "tree": {"sha": "da72ebeff82f0912b46d9bd0af41ef86ee0af5df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da72ebeff82f0912b46d9bd0af41ef86ee0af5df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df7ecbcb1116915cb4557dccc5a4839a13fbf5b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df7ecbcb1116915cb4557dccc5a4839a13fbf5b0", "html_url": "https://github.com/rust-lang/rust/commit/df7ecbcb1116915cb4557dccc5a4839a13fbf5b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df7ecbcb1116915cb4557dccc5a4839a13fbf5b0/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd3bfb35511cbcff59ce1454d3db627b576d7e92", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd3bfb35511cbcff59ce1454d3db627b576d7e92", "html_url": "https://github.com/rust-lang/rust/commit/fd3bfb35511cbcff59ce1454d3db627b576d7e92"}], "stats": {"total": 54, "additions": 26, "deletions": 28}, "files": [{"sha": "4ac4914bd447954bc9776401f2c42e387ca5674d", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/df7ecbcb1116915cb4557dccc5a4839a13fbf5b0/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7ecbcb1116915cb4557dccc5a4839a13fbf5b0/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=df7ecbcb1116915cb4557dccc5a4839a13fbf5b0", "patch": "@@ -114,7 +114,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let report_candidates = |span: Span,\n                                  err: &mut Diagnostic,\n                                  sources: &mut Vec<CandidateSource>,\n-                                 sugg_span: Span| {\n+                                 sugg_span: Option<Span>| {\n             sources.sort();\n             sources.dedup();\n             // Dynamic limit to avoid hiding just one candidate, which is silly.\n@@ -175,7 +175,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         } else {\n                             err.note(&note_str);\n                         }\n-                        if let Some(trait_ref) = self.tcx.impl_trait_ref(impl_did) {\n+                        if let Some(sugg_span) = sugg_span\n+                            && let Some(trait_ref) = self.tcx.impl_trait_ref(impl_did) {\n                             let path = self.tcx.def_path_str(trait_ref.def_id);\n \n                             let ty = match item.kind {\n@@ -224,20 +225,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             err.span_note(item_span, msg);\n                             None\n                         };\n-                        let path = self.tcx.def_path_str(trait_did);\n-                        print_disambiguation_help(\n-                            item_name,\n-                            args,\n-                            err,\n-                            path,\n-                            rcvr_ty,\n-                            item.kind,\n-                            item.def_id,\n-                            sugg_span,\n-                            idx,\n-                            self.tcx.sess.source_map(),\n-                            item.fn_has_self_parameter,\n-                        );\n+                        if let Some(sugg_span) = sugg_span {\n+                            let path = self.tcx.def_path_str(trait_did);\n+                            print_disambiguation_help(\n+                                item_name,\n+                                args,\n+                                err,\n+                                path,\n+                                rcvr_ty,\n+                                item.kind,\n+                                item.def_id,\n+                                sugg_span,\n+                                idx,\n+                                self.tcx.sess.source_map(),\n+                                item.fn_has_self_parameter,\n+                            );\n+                        }\n                     }\n                 }\n             }\n@@ -407,9 +410,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         sugg_span,\n                     );\n \n-                    report_candidates(span, &mut err, &mut static_candidates, sugg_span);\n+                    report_candidates(span, &mut err, &mut static_candidates, None);\n                 } else if static_candidates.len() > 1 {\n-                    report_candidates(span, &mut err, &mut static_candidates, sugg_span);\n+                    report_candidates(span, &mut err, &mut static_candidates, Some(sugg_span));\n                 }\n \n                 let mut bound_spans = vec![];\n@@ -1015,7 +1018,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 );\n                 err.span_label(item_name.span, format!(\"multiple `{}` found\", item_name));\n \n-                report_candidates(span, &mut err, &mut sources, sugg_span);\n+                report_candidates(span, &mut err, &mut sources, Some(sugg_span));\n                 err.emit();\n             }\n "}, {"sha": "08d4b99559031e9c9f63d7a357e9e45d4c5f2733", "filename": "src/test/ui/suggestions/issue-102354.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/df7ecbcb1116915cb4557dccc5a4839a13fbf5b0/src%2Ftest%2Fui%2Fsuggestions%2Fissue-102354.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df7ecbcb1116915cb4557dccc5a4839a13fbf5b0/src%2Ftest%2Fui%2Fsuggestions%2Fissue-102354.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-102354.stderr?ref=df7ecbcb1116915cb4557dccc5a4839a13fbf5b0", "patch": "@@ -2,22 +2,17 @@ error[E0599]: no method named `func` found for type `i32` in the current scope\n   --> $DIR/issue-102354.rs:9:7\n    |\n LL |     x.func();\n-   |       ^^^^ this is an associated function, not a method\n+   |     --^^^^--\n+   |     | |\n+   |     | this is an associated function, not a method\n+   |     help: use associated function syntax instead: `i32::func()`\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n note: the candidate is defined in the trait `Trait`\n   --> $DIR/issue-102354.rs:2:5\n    |\n LL |     fn func() {}\n    |     ^^^^^^^^^\n-help: use associated function syntax instead\n-   |\n-LL |     i32::func();\n-   |     ~~~~~~~~~~~\n-help: disambiguate the associated function for the candidate\n-   |\n-LL |     <i32 as Trait>::func(x);\n-   |     ~~~~~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}]}