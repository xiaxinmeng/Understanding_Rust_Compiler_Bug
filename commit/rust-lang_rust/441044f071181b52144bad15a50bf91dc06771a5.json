{"sha": "441044f071181b52144bad15a50bf91dc06771a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0MTA0NGYwNzExODFiNTIxNDRiYWQxNWE1MGJmOTFkYzA2NzcxYTU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-01-08T11:05:56Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-08T16:02:24Z"}, "message": "Update compile-fail tests to use is/us, not i/u.", "tree": {"sha": "b25ff0d0753c6cfd459e0b37ec7f16a00e09c3e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b25ff0d0753c6cfd459e0b37ec7f16a00e09c3e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/441044f071181b52144bad15a50bf91dc06771a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/441044f071181b52144bad15a50bf91dc06771a5", "html_url": "https://github.com/rust-lang/rust/commit/441044f071181b52144bad15a50bf91dc06771a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/441044f071181b52144bad15a50bf91dc06771a5/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85f961e2ccf056965fd7a95c44ce0922a865ae8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/85f961e2ccf056965fd7a95c44ce0922a865ae8d", "html_url": "https://github.com/rust-lang/rust/commit/85f961e2ccf056965fd7a95c44ce0922a865ae8d"}], "stats": {"total": 758, "additions": 379, "deletions": 379}, "files": [{"sha": "3b4810a86abd559597a7e61c13065638a6f3bc3d", "filename": "src/test/compile-fail/array-old-syntax-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Farray-old-syntax-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Farray-old-syntax-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farray-old-syntax-1.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -11,5 +11,5 @@\n // Test that the old fixed length array syntax is a parsing error.\n \n fn main() {\n-    let _x: [isize, ..3] = [0i, 1, 2]; //~ ERROR\n+    let _x: [isize, ..3] = [0is, 1, 2]; //~ ERROR\n }"}, {"sha": "c1b88290bc39cc80737d50af8062ef70555494aa", "filename": "src/test/compile-fail/array-old-syntax-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Farray-old-syntax-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Farray-old-syntax-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farray-old-syntax-2.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -11,5 +11,5 @@\n // Test that the old repeating array syntax gives an error.\n \n fn main() {\n-    let _ = [0i, ..3]; //~ ERROR\n+    let _ = [0is, ..3]; //~ ERROR\n }"}, {"sha": "ffbb25e266ac644c6bb46943b3f462ff9bb92b51", "filename": "src/test/compile-fail/asm-in-bad-modifier.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -20,8 +20,8 @@ pub fn main() {\n     let x: isize;\n     let y: isize;\n     unsafe {\n-        asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5u)); //~ ERROR input operand constraint contains '='\n-        asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5u)); //~ ERROR input operand constraint contains '+'\n+        asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5us)); //~ ERROR input operand constraint contains '='\n+        asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5us)); //~ ERROR input operand constraint contains '+'\n     }\n     foo(x);\n     foo(y);"}, {"sha": "8bc6f206dec02c7118c09a82ab3a621922fbfe47", "filename": "src/test/compile-fail/asm-misplaced-option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -21,14 +21,14 @@ pub fn main() {\n     let mut x: isize = 0;\n     unsafe {\n         // extra colon\n-        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5u), \"0\"(x) : : \"cc\");\n+        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5us), \"0\"(x) : : \"cc\");\n         //~^ WARNING unrecognized option\n     }\n     assert_eq!(x, 5);\n \n     unsafe {\n         // comma in place of a colon\n-        asm!(\"add $2, $1; mov $1, $0\" : \"=r\"(x) : \"r\"(x), \"r\"(8u) : \"cc\", \"volatile\");\n+        asm!(\"add $2, $1; mov $1, $0\" : \"=r\"(x) : \"r\"(x), \"r\"(8us) : \"cc\", \"volatile\");\n         //~^ WARNING expected a clobber, found an option\n     }\n     assert_eq!(x, 13);"}, {"sha": "9ad5d7e9f09eefbf021648eae0ff8cf739e7115c", "filename": "src/test/compile-fail/asm-out-assign-imm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -21,7 +21,7 @@ pub fn main() {\n     x = 1; //~ NOTE prior assignment occurs here\n     foo(x);\n     unsafe {\n-        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5u)); //~ ERROR re-assignment of immutable variable `x`\n+        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5us)); //~ ERROR re-assignment of immutable variable `x`\n     }\n     foo(x);\n }"}, {"sha": "b58d41e1d825c163ca84fe737b25dba72debf493", "filename": "src/test/compile-fail/asm-out-no-modifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -19,7 +19,7 @@ fn foo(x: isize) { println!(\"{}\", x); }\n pub fn main() {\n     let x: isize;\n     unsafe {\n-        asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5u)); //~ ERROR output operand constraint lacks '='\n+        asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5us)); //~ ERROR output operand constraint lacks '='\n     }\n     foo(x);\n }"}, {"sha": "0694420e7666fed35f4935e80f659ba03b7b5cb5", "filename": "src/test/compile-fail/assign-to-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -15,7 +15,7 @@ struct cat {\n }\n \n impl cat {\n-    pub fn speak(&self) { self.meows += 1u; }\n+    pub fn speak(&self) { self.meows += 1us; }\n }\n \n fn cat(in_x : usize, in_y : isize) -> cat {\n@@ -26,6 +26,6 @@ fn cat(in_x : usize, in_y : isize) -> cat {\n }\n \n fn main() {\n-  let nyan : cat = cat(52u, 99);\n+  let nyan : cat = cat(52us, 99);\n   nyan.speak = |&:| println!(\"meow\"); //~ ERROR attempted to take value of method\n }"}, {"sha": "ed81c0fccbc854687bde295941db5657b497988c", "filename": "src/test/compile-fail/associated-types-eq-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -40,7 +40,7 @@ pub fn baz(x: &Foo<A=Bar>) {\n \n \n pub fn main() {\n-    let a = 42i;\n+    let a = 42is;\n     foo1(a); //~ERROR expected usize, found struct Bar\n     baz(&a); //~ERROR expected usize, found struct Bar\n }"}, {"sha": "31492406fedd35fd6350e65b660ef44fa24c6c28", "filename": "src/test/compile-fail/associated-types-incomplete-object.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fassociated-types-incomplete-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fassociated-types-incomplete-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-incomplete-object.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -28,15 +28,15 @@ impl Foo for isize {\n }\n \n pub fn main() {\n-    let a = &42i as &Foo<A=usize, B=char>;\n+    let a = &42is as &Foo<A=usize, B=char>;\n \n-    let b = &42i as &Foo<A=usize>;\n+    let b = &42is as &Foo<A=usize>;\n     //~^ ERROR the value of the associated type `B` (from the trait `Foo`) must be specified\n \n-    let c = &42i as &Foo<B=char>;\n+    let c = &42is as &Foo<B=char>;\n     //~^ ERROR the value of the associated type `A` (from the trait `Foo`) must be specified\n \n-    let d = &42i as &Foo;\n+    let d = &42is as &Foo;\n     //~^ ERROR the value of the associated type `A` (from the trait `Foo`) must be specified\n     //~| ERROR the value of the associated type `B` (from the trait `Foo`) must be specified\n }"}, {"sha": "e5dbdbd237db87a2daac4d4df70f743a611d629b", "filename": "src/test/compile-fail/bad-bang-ann-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -11,7 +11,7 @@\n // Tests that a function with a ! annotation always actually fails\n \n fn bad_bang(i: usize) -> ! {\n-    return 7u; //~ ERROR `return` in a function declared as diverging [E0166]\n+    return 7us; //~ ERROR `return` in a function declared as diverging [E0166]\n }\n \n-fn main() { bad_bang(5u); }\n+fn main() { bad_bang(5us); }"}, {"sha": "414421c8b77ce2bd4dc20818187c9fc037ced096", "filename": "src/test/compile-fail/bad-bang-ann.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -11,7 +11,7 @@\n // Tests that a function with a ! annotation always actually fails\n \n fn bad_bang(i: usize) -> ! { //~ ERROR computation may converge in a function marked as diverging\n-    if i < 0u { } else { panic!(); }\n+    if i < 0us { } else { panic!(); }\n }\n \n-fn main() { bad_bang(5u); }\n+fn main() { bad_bang(5us); }"}, {"sha": "8e5a6054b89280593ad0d587251b5d2e43466262", "filename": "src/test/compile-fail/bad-method-typaram-kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn foo<T:'static>() {\n-    1u.bar::<T>(); //~ ERROR `core::marker::Send` is not implemented\n+    1us.bar::<T>(); //~ ERROR `core::marker::Send` is not implemented\n }\n \n trait bar {"}, {"sha": "d17fa68b47cbe21f2d5d654894f0e8968fc98e48", "filename": "src/test/compile-fail/bang-tailexpr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fbang-tailexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fbang-tailexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbang-tailexpr.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn f() -> ! { //~ ERROR computation may converge in a function marked as diverging\n-    3i\n+    3is\n }\n fn main() { }"}, {"sha": "12555c550729ca13c405ccd11cd14e5c8572c169", "filename": "src/test/compile-fail/borrow-immutable-upvar-mutation.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrow-immutable-upvar-mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrow-immutable-upvar-mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrow-immutable-upvar-mutation.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -18,24 +18,24 @@ fn set(x: &mut usize) { *x = 5; }\n fn main() {\n     // By-ref captures\n     {\n-        let mut x = 0u;\n+        let mut x = 0us;\n         let _f = |&:| x = 42; //~ ERROR cannot assign\n \n-        let mut y = 0u;\n+        let mut y = 0us;\n         let _g = |&:| set(&mut y); //~ ERROR cannot borrow\n \n-        let mut z = 0u;\n+        let mut z = 0us;\n         let _h = |&mut:| { set(&mut z); |&:| z = 42; }; //~ ERROR cannot assign\n     }\n     // By-value captures\n     {\n-        let mut x = 0u;\n+        let mut x = 0us;\n         let _f = move |&:| x = 42; //~ ERROR cannot assign\n \n-        let mut y = 0u;\n+        let mut y = 0us;\n         let _g = move |&:| set(&mut y); //~ ERROR cannot borrow\n \n-        let mut z = 0u;\n+        let mut z = 0us;\n         let _h = move |&mut:| { set(&mut z); move |&:| z = 42; }; //~ ERROR cannot assign\n     }\n }"}, {"sha": "e6fe60a9004b6b1f00bfccc6062b84dfc4af32a3", "filename": "src/test/compile-fail/borrow-tuple-fields.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrow-tuple-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrow-tuple-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrow-tuple-fields.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -16,28 +16,28 @@ struct Foo(Box<isize>, isize);\n struct Bar(isize, isize);\n \n fn main() {\n-    let x = (box 1i, 2i);\n+    let x = (box 1is, 2is);\n     let r = &x.0;\n     let y = x; //~ ERROR cannot move out of `x` because it is borrowed\n \n-    let mut x = (1i, 2i);\n+    let mut x = (1is, 2is);\n     let a = &x.0;\n     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable because it is also borrowed as\n \n-    let mut x = (1i, 2i);\n+    let mut x = (1is, 2is);\n     let a = &mut x.0;\n     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable more than once at a time\n \n \n-    let x = Foo(box 1i, 2i);\n+    let x = Foo(box 1is, 2is);\n     let r = &x.0;\n     let y = x; //~ ERROR cannot move out of `x` because it is borrowed\n \n-    let mut x = Bar(1i, 2i);\n+    let mut x = Bar(1is, 2is);\n     let a = &x.0;\n     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable because it is also borrowed as\n \n-    let mut x = Bar(1i, 2i);\n+    let mut x = Bar(1is, 2is);\n     let a = &mut x.0;\n     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable more than once at a time\n }"}, {"sha": "88486756b66598dff4d8ce3f6dbdc33d66b6d675", "filename": "src/test/compile-fail/borrowck-anon-fields-tuple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-anon-fields-tuple.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -12,7 +12,7 @@\n // anonymous fields of a tuple vs the same anonymous field.\n \n fn distinct_variant() {\n-    let mut y = (1i, 2i);\n+    let mut y = (1is, 2is);\n \n     let a = match y {\n         (ref mut a, _) => a\n@@ -27,7 +27,7 @@ fn distinct_variant() {\n }\n \n fn same_variant() {\n-    let mut y = (1i, 2i);\n+    let mut y = (1is, 2is);\n \n     let a = match y {\n         (ref mut a, _) => a"}, {"sha": "ac9ddc2ce6503d492ad3bbd4504e4fd8fd728ef7", "filename": "src/test/compile-fail/borrowck-array-double-move.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-array-double-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-array-double-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-array-double-move.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -12,9 +12,9 @@\n #![feature(box_syntax)]\n \n fn f() {\n-    let mut a = [box 0i, box 1i];\n+    let mut a = [box 0is, box 1is];\n     drop(a[0]);\n-    a[1] = box 2i;\n+    a[1] = box 2is;\n     drop(a[0]); //~ ERROR use of moved value: `a[..]`\n }\n "}, {"sha": "a52eaeeb9c3e303d89566aca0a5f2c4c13fe6f76", "filename": "src/test/compile-fail/borrowck-break-uninit-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-break-uninit-2.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -11,14 +11,14 @@\n fn foo() -> isize {\n     let x: isize;\n \n-    while 1i != 2  {\n+    while 1is != 2  {\n         break;\n         x = 0;\n     }\n \n     println!(\"{}\", x); //~ ERROR use of possibly uninitialized variable: `x`\n \n-    return 17i;\n+    return 17is;\n }\n \n fn main() { println!(\"{}\", foo()); }"}, {"sha": "29c7d6920bd95c6426d86f28b2201a104c66d4ca", "filename": "src/test/compile-fail/borrowck-closures-mut-and-imm.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-mut-and-imm.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -22,37 +22,37 @@ fn set(x: &mut isize) {\n }\n \n fn a() {\n-    let mut x = 3i;\n+    let mut x = 3is;\n     let c1 = |&mut:| x = 4;\n     let c2 = |&mut:| x * 5; //~ ERROR cannot borrow `x`\n }\n \n fn b() {\n-    let mut x = 3i;\n+    let mut x = 3is;\n     let c1 = |&mut:| set(&mut x);\n     let c2 = |&mut:| get(&x); //~ ERROR cannot borrow `x`\n }\n \n fn c() {\n-    let mut x = 3i;\n+    let mut x = 3is;\n     let c1 = |&mut:| set(&mut x);\n     let c2 = |&mut:| x * 5; //~ ERROR cannot borrow `x`\n }\n \n fn d() {\n-    let mut x = 3i;\n+    let mut x = 3is;\n     let c2 = |&mut:| x * 5;\n     x = 5; //~ ERROR cannot assign\n }\n \n fn e() {\n-    let mut x = 3i;\n+    let mut x = 3is;\n     let c1 = |&mut:| get(&x);\n     x = 5; //~ ERROR cannot assign\n }\n \n fn f() {\n-    let mut x = box 3i;\n+    let mut x = box 3is;\n     let c1 = |&mut:| get(&*x);\n     *x = 5; //~ ERROR cannot assign\n }"}, {"sha": "5cb49ab77114bda503a5126d16635e26b7359f09", "filename": "src/test/compile-fail/borrowck-closures-two-mut.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-two-mut.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -15,7 +15,7 @@\n #![feature(box_syntax)]\n \n fn a() {\n-    let mut x = 3i;\n+    let mut x = 3is;\n     let c1 = |&mut:| x = 4;\n     let c2 = |&mut:| x = 5; //~ ERROR cannot borrow `x` as mutable more than once\n }\n@@ -25,19 +25,19 @@ fn set(x: &mut isize) {\n }\n \n fn b() {\n-    let mut x = 3i;\n+    let mut x = 3is;\n     let c1 = |&mut:| set(&mut x);\n     let c2 = |&mut:| set(&mut x); //~ ERROR cannot borrow `x` as mutable more than once\n }\n \n fn c() {\n-    let mut x = 3i;\n+    let mut x = 3is;\n     let c1 = |&mut:| x = 5;\n     let c2 = |&mut:| set(&mut x); //~ ERROR cannot borrow `x` as mutable more than once\n }\n \n fn d() {\n-    let mut x = 3i;\n+    let mut x = 3is;\n     let c1 = |&mut:| x = 5;\n     let c2 = |&mut:| { let _y = |&mut:| set(&mut x); }; // (nested closure)\n     //~^ ERROR cannot borrow `x` as mutable more than once"}, {"sha": "6884ac153a16ba83c6a584ce0f8d7898ef5f03de", "filename": "src/test/compile-fail/borrowck-for-loop-correct-cmt-for-pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-correct-cmt-for-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-correct-cmt-for-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-correct-cmt-for-pattern.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -17,7 +17,7 @@ struct Foo {\n }\n \n fn main() {\n-    let mut y = 1i;\n+    let mut y = 1is;\n     let x = Some(&mut y);\n     for &a in x.iter() {    //~ ERROR cannot move out\n     }\n@@ -28,7 +28,7 @@ fn main() {\n     for &a in f.a.iter() {  //~ ERROR cannot move out\n     }\n \n-    let x = Some(box 1i);\n+    let x = Some(box 1is);\n     for &a in x.iter() {    //~ ERROR cannot move out\n     }\n }"}, {"sha": "d2f99ea696af2bddc9502e36bb3a0491ceac4bc7", "filename": "src/test/compile-fail/borrowck-for-loop-head-linkage.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-head-linkage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-head-linkage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-head-linkage.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -11,11 +11,11 @@\n use std::iter::repeat;\n \n fn main() {\n-    let mut vector = vec![1u, 2];\n+    let mut vector = vec![1us, 2];\n     for &x in vector.iter() {\n         let cap = vector.capacity();\n         vector.extend(repeat(0));      //~ ERROR cannot borrow\n-        vector[1u] = 5u;   //~ ERROR cannot borrow\n+        vector[1us] = 5us;   //~ ERROR cannot borrow\n     }\n }\n "}, {"sha": "b98833776fbaf80166847e848664aff5b9e438da", "filename": "src/test/compile-fail/borrowck-if-no-else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-if-no-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-if-no-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-if-no-else.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -11,6 +11,6 @@\n fn foo(x: isize) { println!(\"{}\", x); }\n \n fn main() {\n-    let x: isize; if 1i > 2 { x = 10; }\n+    let x: isize; if 1is > 2 { x = 10; }\n     foo(x); //~ ERROR use of possibly uninitialized variable: `x`\n }"}, {"sha": "c74edfd8d070c21411f343f8dd7b253fd29a06f4", "filename": "src/test/compile-fail/borrowck-if-with-else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-if-with-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-if-with-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-if-with-else.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -12,7 +12,7 @@ fn foo(x: isize) { println!(\"{}\", x); }\n \n fn main() {\n     let x: isize;\n-    if 1i > 2 {\n+    if 1is > 2 {\n         println!(\"whoops\");\n     } else {\n         x = 10;"}, {"sha": "fabfce6ffb3886ac059a2bfb4839bb4e308e6a7e", "filename": "src/test/compile-fail/borrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let mut _a = 3i;\n+    let mut _a = 3is;\n     let _b = &mut _a;\n     {\n         let _c = &*_b;"}, {"sha": "dc1c73efc409ebcb9c1d301bccddc0bbebed3715", "filename": "src/test/compile-fail/borrowck-issue-2657-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-1.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let x = Some(box 1i);\n+    let x = Some(box 1is);\n     match x {\n       Some(ref _y) => {\n         let _a = x; //~ ERROR cannot move"}, {"sha": "0b76044f8d61bc875d464ddd44e67c8ad4b2dd03", "filename": "src/test/compile-fail/borrowck-issue-2657-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-2657-2.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let x = Some(box 1i);\n+    let x = Some(box 1is);\n     match x {\n       Some(ref y) => {\n         let _b = *y; //~ ERROR cannot move out"}, {"sha": "97f5978906800e047c67941db4fe5ea961b2faa8", "filename": "src/test/compile-fail/borrowck-lend-flow-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -41,7 +41,7 @@ fn block_overarching_alias_mut() {\n \n     let mut v = box 3;\n     let mut x = &mut v;\n-    for _ in range(0i, 3) {\n+    for _ in range(0is, 3) {\n         borrow(&*v); //~ ERROR cannot borrow\n     }\n     *x = box 5;"}, {"sha": "f501682847f5fc7c3c8e9fc29acd2bea49f0d9ff", "filename": "src/test/compile-fail/borrowck-lend-flow-match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -19,10 +19,10 @@ fn separate_arms() {\n         None => {\n             // It is ok to reassign x here, because there is in\n             // fact no outstanding loan of x!\n-            x = Some(0i);\n+            x = Some(0is);\n         }\n         Some(ref _i) => {\n-            x = Some(1i); //~ ERROR cannot assign\n+            x = Some(1is); //~ ERROR cannot assign\n         }\n     }\n     x.clone(); // just to prevent liveness warnings"}, {"sha": "5f5ff4014e109cfcbbd84e7f7f2edfdb9b79afa9", "filename": "src/test/compile-fail/borrowck-let-suggestion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-let-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-let-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-let-suggestion.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn f() {\n-    let x = [1i].iter(); //~ ERROR borrowed value does not live long enough\n+    let x = [1is].iter(); //~ ERROR borrowed value does not live long enough\n                          //~^^ NOTE reference must be valid for the block\n                          //~^^ HELP consider using a `let` binding to increase its lifetime\n }"}, {"sha": "bff22257760ebb8989f948a87d7c6bfa04e94830", "filename": "src/test/compile-fail/borrowck-loan-blocks-move-cc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -17,7 +17,7 @@ fn borrow<F>(v: &isize, f: F) where F: FnOnce(&isize) {\n }\n \n fn box_imm() {\n-    let v = box 3i;\n+    let v = box 3is;\n     let _w = &v;\n     Thread::spawn(move|| {\n         println!(\"v={}\", *v);\n@@ -26,7 +26,7 @@ fn box_imm() {\n }\n \n fn box_imm_explicit() {\n-    let v = box 3i;\n+    let v = box 3is;\n     let _w = &v;\n     Thread::spawn(move|| {\n         println!(\"v={}\", *v);"}, {"sha": "575d67c0b834a45126c2b9fafbe693e9c4133883", "filename": "src/test/compile-fail/borrowck-match-binding-is-assignment.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-match-binding-is-assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-match-binding-is-assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-match-binding-is-assignment.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -19,7 +19,7 @@ struct S {\n }\n \n pub fn main() {\n-    match 1i {\n+    match 1is {\n         x => {\n             x += 1; //~ ERROR re-assignment of immutable variable `x`\n         }\n@@ -37,13 +37,13 @@ pub fn main() {\n         }\n     }\n \n-    match (1i,) {\n+    match (1is,) {\n         (x,) => {\n             x += 1; //~ ERROR re-assignment of immutable variable `x`\n         }\n     }\n \n-    match [1i,2,3] {\n+    match [1is,2,3] {\n         [x,_,_] => {\n             x += 1; //~ ERROR re-assignment of immutable variable `x`\n         }"}, {"sha": "0d1a51bbf351efe85dd3d443c02a34a56696a3b6", "filename": "src/test/compile-fail/borrowck-move-from-subpath-of-borrowed-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-subpath-of-borrowed-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-subpath-of-borrowed-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-from-subpath-of-borrowed-path.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -14,7 +14,7 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let a = box box 2i;\n+    let a = box box 2is;\n     let b = &a;\n \n     let z = *a; //~ ERROR: cannot move out of `*a` because it is borrowed"}, {"sha": "ebe06fb4a226e19839a60e92b440bdb5c5a99acb", "filename": "src/test/compile-fail/borrowck-move-out-of-overloaded-auto-deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-overloaded-auto-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-overloaded-auto-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-overloaded-auto-deref.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -11,6 +11,6 @@\n use std::rc::Rc;\n \n pub fn main() {\n-    let _x = Rc::new(vec!(1i, 2)).into_iter();\n+    let _x = Rc::new(vec!(1is, 2)).into_iter();\n     //~^ ERROR cannot move out of dereference of `&`-pointer\n }"}, {"sha": "33ac5d7fceba029ee39d16544f6dd6230176468b", "filename": "src/test/compile-fail/borrowck-multiple-captures.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-multiple-captures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-multiple-captures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-multiple-captures.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -15,9 +15,9 @@ use std::thread::Thread;\n fn borrow<T>(_: &T) { }\n \n fn different_vars_after_borrows() {\n-    let x1 = box 1i;\n+    let x1 = box 1is;\n     let p1 = &x1;\n-    let x2 = box 2i;\n+    let x2 = box 2is;\n     let p2 = &x2;\n     Thread::spawn(move|| {\n         drop(x1); //~ ERROR cannot move `x1` into closure because it is borrowed\n@@ -28,9 +28,9 @@ fn different_vars_after_borrows() {\n }\n \n fn different_vars_after_moves() {\n-    let x1 = box 1i;\n+    let x1 = box 1is;\n     drop(x1);\n-    let x2 = box 2i;\n+    let x2 = box 2is;\n     drop(x2);\n     Thread::spawn(move|| {\n         drop(x1); //~ ERROR capture of moved value: `x1`\n@@ -39,7 +39,7 @@ fn different_vars_after_moves() {\n }\n \n fn same_var_after_borrow() {\n-    let x = box 1i;\n+    let x = box 1is;\n     let p = &x;\n     Thread::spawn(move|| {\n         drop(x); //~ ERROR cannot move `x` into closure because it is borrowed\n@@ -49,7 +49,7 @@ fn same_var_after_borrow() {\n }\n \n fn same_var_after_move() {\n-    let x = box 1i;\n+    let x = box 1is;\n     drop(x);\n     Thread::spawn(move|| {\n         drop(x); //~ ERROR capture of moved value: `x`"}, {"sha": "074c448a0ecf86524aa60f38323659ea1bf3797f", "filename": "src/test/compile-fail/borrowck-overloaded-index-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -25,7 +25,7 @@ impl<T> Index<usize> for MyVec<T> {\n }\n \n fn main() {\n-    let v = MyVec { data: vec!(box 1i, box 2, box 3) };\n+    let v = MyVec { data: vec!(box 1is, box 2, box 3) };\n     let good = &v[0]; // Shouldn't fail here\n     let bad = v[0];\n     //~^ ERROR cannot move out of dereference (dereference is implicit, due to indexing)"}, {"sha": "c3a1e808e37f8aa5381ea83c85e9129e849655fd", "filename": "src/test/compile-fail/borrowck-report-with-custom-diagnostic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-report-with-custom-diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-report-with-custom-diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-report-with-custom-diagnostic.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -11,7 +11,7 @@\n #![allow(dead_code)]\n fn main() {\n     // Original borrow ends at end of function\n-    let mut x = 1u;\n+    let mut x = 1us;\n     let y = &mut x;\n     let z = &x; //~ ERROR cannot borrow\n }\n@@ -21,7 +21,7 @@ fn foo() {\n     match true {\n         true => {\n             // Original borrow ends at end of match arm\n-            let mut x = 1u;\n+            let mut x = 1us;\n             let y = &x;\n             let z = &mut x; //~ ERROR cannot borrow\n         }\n@@ -33,7 +33,7 @@ fn foo() {\n fn bar() {\n     // Original borrow ends at end of closure\n     |&:| {\n-        let mut x = 1u;\n+        let mut x = 1us;\n         let y = &mut x;\n         let z = &mut x; //~ ERROR cannot borrow\n     };"}, {"sha": "7fadf6d466033f960e0595a91d9dbd5aa915ffae", "filename": "src/test/compile-fail/borrowck-uniq-via-lend.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -13,7 +13,7 @@\n fn borrow(_v: &isize) {}\n \n fn local() {\n-    let mut v = box 3i;\n+    let mut v = box 3is;\n     borrow(&*v);\n }\n \n@@ -32,27 +32,27 @@ fn local_recs() {\n }\n \n fn aliased_imm() {\n-    let mut v = box 3i;\n+    let mut v = box 3is;\n     let _w = &v;\n     borrow(&*v);\n }\n \n fn aliased_mut() {\n-    let mut v = box 3i;\n+    let mut v = box 3is;\n     let _w = &mut v;\n     borrow(&*v); //~ ERROR cannot borrow `*v`\n }\n \n fn aliased_other() {\n-    let mut v = box 3i;\n-    let mut w = box 4i;\n+    let mut v = box 3is;\n+    let mut w = box 4is;\n     let _x = &mut w;\n     borrow(&*v);\n }\n \n fn aliased_other_reassign() {\n-    let mut v = box 3i;\n-    let mut w = box 4i;\n+    let mut v = box 3is;\n+    let mut w = box 4is;\n     let mut _x = &mut w;\n     _x = &mut v;\n     borrow(&*v); //~ ERROR cannot borrow `*v`"}, {"sha": "8869e99efd52a1e75c64c6be062173026fec0753", "filename": "src/test/compile-fail/borrowck-vec-pattern-move-tail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-move-tail.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let mut a = [1i, 2, 3, 4];\n+    let mut a = [1is, 2, 3, 4];\n     let t = match a {\n         [1, 2, tail..] => tail,\n         _ => unreachable!()"}, {"sha": "49994ebdbba44e17a1b5083f7773dbd7dc2d458e", "filename": "src/test/compile-fail/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-vec-pattern-nesting.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -12,7 +12,7 @@\n #![feature(box_syntax)]\n \n fn a() {\n-    let mut vec = [box 1i, box 2, box 3];\n+    let mut vec = [box 1is, box 2, box 3];\n     match vec {\n         [box ref _a, _, _] => {\n             vec[0] = box 4; //~ ERROR cannot assign\n@@ -21,7 +21,7 @@ fn a() {\n }\n \n fn b() {\n-    let mut vec = vec!(box 1i, box 2, box 3);\n+    let mut vec = vec!(box 1is, box 2, box 3);\n     let vec: &mut [Box<isize>] = vec.as_mut_slice();\n     match vec {\n         [_b..] => {\n@@ -31,7 +31,7 @@ fn b() {\n }\n \n fn c() {\n-    let mut vec = vec!(box 1i, box 2, box 3);\n+    let mut vec = vec!(box 1is, box 2, box 3);\n     let vec: &mut [Box<isize>] = vec.as_mut_slice();\n     match vec {\n         [_a,         //~ ERROR cannot move out\n@@ -49,7 +49,7 @@ fn c() {\n }\n \n fn d() {\n-    let mut vec = vec!(box 1i, box 2, box 3);\n+    let mut vec = vec!(box 1is, box 2, box 3);\n     let vec: &mut [Box<isize>] = vec.as_mut_slice();\n     match vec {\n         [_a..,     //~ ERROR cannot move out\n@@ -60,7 +60,7 @@ fn d() {\n }\n \n fn e() {\n-    let mut vec = vec!(box 1i, box 2, box 3);\n+    let mut vec = vec!(box 1is, box 2, box 3);\n     let vec: &mut [Box<isize>] = vec.as_mut_slice();\n     match vec {\n         [_a, _b, _c] => {}  //~ ERROR cannot move out"}, {"sha": "4752120d691262a65ef577512520791cc55df296", "filename": "src/test/compile-fail/borrowck-while-break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-while-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-while-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-while-break.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -11,7 +11,7 @@\n fn test(cond: bool) {\n     let v;\n     while cond {\n-        v = 3i;\n+        v = 3is;\n         break;\n     }\n     println!(\"{}\", v); //~ ERROR use of possibly uninitialized variable: `v`"}, {"sha": "f163cf602bfa65d0bffe4721a35866757d91d491", "filename": "src/test/compile-fail/borrowck-while.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fborrowck-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-while.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -10,7 +10,7 @@\n \n fn f() -> isize {\n     let mut x: isize;\n-    while 1i == 1 { x = 10; }\n+    while 1is == 1 { x = 10; }\n     return x; //~ ERROR use of possibly uninitialized variable: `x`\n }\n "}, {"sha": "0ec4f3dce11713fa3aaa107f2f6ef00d324bf605", "filename": "src/test/compile-fail/builtin-superkinds-self-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-self-type.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -22,6 +22,6 @@ impl <T: Sync> Foo for T { }\n \n fn main() {\n     let (tx, rx) = channel();\n-    1193182i.foo(tx);\n-    assert!(rx.recv() == 1193182i);\n+    1193182is.foo(tx);\n+    assert!(rx.recv() == 1193182is);\n }"}, {"sha": "9148f13c4ddd3a511afa114a9bb2831dce4fe6f5", "filename": "src/test/compile-fail/cannot-mutate-captured-non-mut-var.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fcannot-mutate-captured-non-mut-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fcannot-mutate-captured-non-mut-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcannot-mutate-captured-non-mut-var.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let x = 1i;\n+    let x = 1is;\n     move|:| { x = 2; };\n     //~^ ERROR: cannot assign to immutable captured outer variable\n "}, {"sha": "d709ffdc3fc125c3d29b23dd303937286dfeffa9", "filename": "src/test/compile-fail/class-implements-bad-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fclass-implements-bad-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fclass-implements-bad-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-implements-bad-trait.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -15,5 +15,5 @@ class cat : nonexistent {\n }\n \n fn main() {\n-  let nyan = cat(0u);\n+  let nyan = cat(0us);\n }"}, {"sha": "3b921e072790ba5f3db9dea45c500fced06b5edc", "filename": "src/test/compile-fail/class-method-missing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -27,5 +27,5 @@ fn cat(in_x : usize) -> cat {\n }\n \n fn main() {\n-  let nyan = cat(0u);\n+  let nyan = cat(0us);\n }"}, {"sha": "4d8e4bca784be93db98b7d0c37bac9821e9e6da9", "filename": "src/test/compile-fail/class-missing-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -16,7 +16,7 @@ impl cat {\n     fn sleep(&self) { loop{} }\n     fn meow(&self) {\n       println!(\"Meow\");\n-      meows += 1u; //~ ERROR unresolved name\n+      meows += 1us; //~ ERROR unresolved name\n       sleep();     //~ ERROR unresolved name\n     }\n "}, {"sha": "62e8fccbda058bf1d16157627d9dad4408198220", "filename": "src/test/compile-fail/const-block-non-item-statement.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-static A: usize = { 1u; 2 };\n+static A: usize = { 1us; 2 };\n //~^ ERROR: blocks in constants are limited to items and tail expressions\n \n static B: usize = { { } 2 };\n@@ -19,7 +19,7 @@ macro_rules! foo {\n }\n static C: usize = { foo!(); 2 };\n \n-static D: usize = { let x = 4u; 2 };\n+static D: usize = { let x = 4us; 2 };\n //~^ ERROR: blocks in constants are limited to items and tail expressions\n \n pub fn main() {"}, {"sha": "6015652668e3578417d85486dd48e311b84140e8", "filename": "src/test/compile-fail/deriving-non-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fderiving-non-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fderiving-non-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-non-type.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -22,10 +22,10 @@ impl S { }\n impl T for S { }\n \n #[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n-static s: usize = 0u;\n+static s: usize = 0us;\n \n #[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n-const c: usize = 0u;\n+const c: usize = 0us;\n \n #[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n mod m { }"}, {"sha": "5166ef8f72f8b1c1cedc01c7031f2376a2cb0ad3", "filename": "src/test/compile-fail/destructure-trait-ref.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -27,17 +27,17 @@ fn main() {\n     // if n > m, it's a type mismatch error.\n \n     // n < m\n-    let &x = &(&1i as &T);\n-    let &x = &&(&1i as &T);\n-    let &&x = &&(&1i as &T);\n+    let &x = &(&1is as &T);\n+    let &x = &&(&1is as &T);\n+    let &&x = &&(&1is as &T);\n \n     // n == m\n-    let &x = &1i as &T;      //~ ERROR type `&T` cannot be dereferenced\n-    let &&x = &(&1i as &T);  //~ ERROR type `&T` cannot be dereferenced\n-    let box x = box 1i as Box<T>; //~ ERROR type `Box<T>` cannot be dereferenced\n+    let &x = &1is as &T;      //~ ERROR type `&T` cannot be dereferenced\n+    let &&x = &(&1is as &T);  //~ ERROR type `&T` cannot be dereferenced\n+    let box x = box 1is as Box<T>; //~ ERROR type `Box<T>` cannot be dereferenced\n \n     // n > m\n-    let &&x = &1i as &T;     //~ ERROR found &-ptr\n-    let &&&x = &(&1i as &T); //~ ERROR found &-ptr\n-    let box box x = box 1i as Box<T>;    //~ ERROR found box\n+    let &&x = &1is as &T;     //~ ERROR found &-ptr\n+    let &&&x = &(&1is as &T); //~ ERROR found &-ptr\n+    let box box x = box 1is as Box<T>;    //~ ERROR found box\n }"}, {"sha": "032835d9460cb509df10b8c31b9466395db76afe", "filename": "src/test/compile-fail/dst-bad-deep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-deep.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -18,7 +18,7 @@ struct Fat<T: ?Sized> {\n }\n \n pub fn main() {\n-    let f: Fat<[isize; 3]> = Fat { ptr: [5i, 6, 7] };\n+    let f: Fat<[isize; 3]> = Fat { ptr: [5is, 6, 7] };\n     let g: &Fat<[isize]> = &f;\n     let h: &Fat<Fat<[isize]>> = &Fat { ptr: *g };\n     //~^ ERROR the trait `core::marker::Sized` is not implemented"}, {"sha": "a37a8a326a66cd1a42ea05243b9e48ea9af0f174", "filename": "src/test/compile-fail/feature-gate-advanced-slice-features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-advanced-slice-features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-advanced-slice-features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-advanced-slice-features.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let x = [ 1i, 2, 3, 4, 5 ];\n+    let x = [ 1is, 2, 3, 4, 5 ];\n     match x {\n         [ xs.., 4, 5 ] => {}    //~ ERROR multiple-element slice matches\n         [ 1, xs.., 5 ] => {}    //~ ERROR multiple-element slice matches"}, {"sha": "94190cc15115d9966cecfcdcfd5d07f2fc4d6eef", "filename": "src/test/compile-fail/feature-gate-int-uint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-int-uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Ffeature-gate-int-uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-int-uint.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -16,7 +16,7 @@ mod u {\n         x: usize //~ WARN the `usize` type is deprecated\n     }\n     fn bar(x: usize) { //~ WARN the `usize` type is deprecated\n-        1u; //~ WARN the `u` suffix on integers is deprecated\n+        1us; //~ WARN the `u` suffix on integers is deprecated\n     }\n }\n mod i {\n@@ -25,7 +25,7 @@ mod i {\n         x: isize //~ WARN the `isize` type is deprecated\n     }\n     fn bar(x: isize) { //~ WARN the `isize` type is deprecated\n-        1i; //~ WARN the `u` suffix on integers is deprecated\n+        1is; //~ WARN the `u` suffix on integers is deprecated\n     }\n }\n "}, {"sha": "3f5a92605b7e90fdfd93b31c3198759d648c3b99", "filename": "src/test/compile-fail/fn-trait-formatting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -21,5 +21,5 @@ fn main() {\n     let _: () = (box |&mut:| -> isize unimplemented!()) as Box<FnMut() -> isize>;\n     //~^ ERROR Box<core::ops::FnMut() -> isize>\n \n-    needs_fn(1i); //~ ERROR `core::ops::Fn(isize) -> isize`\n+    needs_fn(1is); //~ ERROR `core::ops::Fn(isize) -> isize`\n }"}, {"sha": "c381fcf3efb06c9a2405f434c7df094ee7dd5696", "filename": "src/test/compile-fail/for-loop-refutable-pattern-error-message.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Ffor-loop-refutable-pattern-error-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Ffor-loop-refutable-pattern-error-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-refutable-pattern-error-message.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -11,6 +11,6 @@\n \n fn main() {\n     for\n-        &1i //~ ERROR refutable pattern in `for` loop binding\n-        in [1i].iter() {}\n+        &1is //~ ERROR refutable pattern in `for` loop binding\n+        in [1is].iter() {}\n }"}, {"sha": "db1e1e8efe42f2d77185d0a4c157aa7a82ce6e91", "filename": "src/test/compile-fail/hashmap-iter-value-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fhashmap-iter-value-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fhashmap-iter-value-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhashmap-iter-value-lifetime.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     let mut my_stuff = std::collections::HashMap::new();\n-    my_stuff.insert(0i, 42i);\n+    my_stuff.insert(0is, 42is);\n \n     let (_, thing) = my_stuff.iter().next().unwrap();\n "}, {"sha": "40673dd92b89da30a93860500889bb705aff346a", "filename": "src/test/compile-fail/hashmap-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fhashmap-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fhashmap-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhashmap-lifetimes.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     let mut my_stuff = std::collections::HashMap::new();\n-    my_stuff.insert(0i, 42i);\n+    my_stuff.insert(0is, 42is);\n \n     let mut it = my_stuff.iter();\n     my_stuff.insert(1, 43); //~ ERROR cannot borrow"}, {"sha": "d83779c4f0f0ca12e1241bce003217eb0ca79521", "filename": "src/test/compile-fail/if-let.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fif-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fif-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-let.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -20,36 +20,36 @@ fn macros() {\n         }}\n     }\n \n-    foo!(a, 1i, { //~ ERROR irrefutable if-let\n+    foo!(a, 1is, { //~ ERROR irrefutable if-let\n         println!(\"irrefutable pattern\");\n     });\n-    bar!(a, 1i, { //~ ERROR irrefutable if-let\n+    bar!(a, 1is, { //~ ERROR irrefutable if-let\n         println!(\"irrefutable pattern\");\n     });\n }\n \n pub fn main() {\n-    if let a = 1i { //~ ERROR irrefutable if-let\n+    if let a = 1is { //~ ERROR irrefutable if-let\n         println!(\"irrefutable pattern\");\n     }\n \n-    if let a = 1i { //~ ERROR irrefutable if-let\n+    if let a = 1is { //~ ERROR irrefutable if-let\n         println!(\"irrefutable pattern\");\n     } else if true {\n         println!(\"else-if in irrefutable if-let\");\n     } else {\n         println!(\"else in irrefutable if-let\");\n     }\n \n-    if let 1i = 2i {\n+    if let 1is = 2is {\n         println!(\"refutable pattern\");\n-    } else if let a = 1i { //~ ERROR irrefutable if-let\n+    } else if let a = 1is { //~ ERROR irrefutable if-let\n         println!(\"irrefutable pattern\");\n     }\n \n     if true {\n         println!(\"if\");\n-    } else if let a = 1i { //~ ERROR irrefutable if-let\n+    } else if let a = 1is { //~ ERROR irrefutable if-let\n         println!(\"irrefutable pattern\");\n     }\n }"}, {"sha": "d329f72f788ae4d7a7ba017fce605485364e9f47", "filename": "src/test/compile-fail/implicit-method-bind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fimplicit-method-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fimplicit-method-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimplicit-method-bind.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -11,5 +11,5 @@\n use std::num::SignedInt;\n \n fn main() {\n-    let _f = 10i.abs; //~ ERROR attempted to take value of method\n+    let _f = 10is.abs; //~ ERROR attempted to take value of method\n }"}, {"sha": "0f6e3dc134d9b973bfbbab9293604c77e082e14d", "filename": "src/test/compile-fail/import-glob-circular.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -13,13 +13,13 @@\n mod circ1 {\n     pub use circ2::f2;\n     pub fn f1() { println!(\"f1\"); }\n-    pub fn common() -> usize { return 0u; }\n+    pub fn common() -> usize { return 0us; }\n }\n \n mod circ2 {\n     pub use circ1::f1;\n     pub fn f2() { println!(\"f2\"); }\n-    pub fn common() -> usize { return 1u; }\n+    pub fn common() -> usize { return 1us; }\n }\n \n mod test {"}, {"sha": "876c1e481f60497c348853c19e382b427c86b12e", "filename": "src/test/compile-fail/index-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Findex-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Findex-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Findex-bot.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    (return)[0u]; //~ ERROR the type of this value must be known in this context\n+    (return)[0us]; //~ ERROR the type of this value must be known in this context\n }"}, {"sha": "a922f5fe4527e41f07590d6cedaa0524c09d818b", "filename": "src/test/compile-fail/infinite-instantiation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -28,11 +28,11 @@ impl<T:Clone> to_opt for Option<T> {\n }\n \n fn function<T:to_opt + Clone>(counter: usize, t: T) {\n-    if counter > 0u {\n-        function(counter - 1u, t.to_option());\n+    if counter > 0us {\n+        function(counter - 1us, t.to_option());\n     }\n }\n \n fn main() {\n-    function(22u, 22u);\n+    function(22us, 22us);\n }"}, {"sha": "ef651dd9ce7293d24df0f468a9a62ba8cbb39f9b", "filename": "src/test/compile-fail/integral-indexing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -11,7 +11,7 @@\n pub fn main() {\n     let v: Vec<isize> = vec!(0, 1, 2, 3, 4, 5);\n     let s: String = \"abcdef\".to_string();\n-    v.as_slice()[3u];\n+    v.as_slice()[3us];\n     v.as_slice()[3];\n     v.as_slice()[3u8];  //~ERROR the trait `core::ops::Index<u8>` is not implemented\n     //~^ ERROR the trait `core::ops::Index<u8>` is not implemented\n@@ -21,7 +21,7 @@ pub fn main() {\n     //~^ ERROR the trait `core::ops::Index<u32>` is not implemented\n     v.as_slice()[3i32]; //~ERROR the trait `core::ops::Index<i32>` is not implemented\n     //~^ ERROR the trait `core::ops::Index<i32>` is not implemented\n-    s.as_bytes()[3u];\n+    s.as_bytes()[3us];\n     s.as_bytes()[3];\n     s.as_bytes()[3u8];  //~ERROR the trait `core::ops::Index<u8>` is not implemented\n     //~^ERROR the trait `core::ops::Index<u8>` is not implemented"}, {"sha": "c1102bc84aba7faf1effc8ebd3cc83059660d2b7", "filename": "src/test/compile-fail/issue-10398.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-10398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-10398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10398.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let x = box 1i;\n+    let x = box 1is;\n     let f = move|:| {\n         let _a = x;\n         drop(x);"}, {"sha": "895eb4cf96f4358eabf4aaedb4615449d83d9f52", "filename": "src/test/compile-fail/issue-11493.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-11493.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-11493.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11493.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -11,6 +11,6 @@\n // This file must never have a trailing newline\n \n fn main() {\n-    let x = Some(3i);\n-    let y = x.as_ref().unwrap_or(&5i); //~ ERROR: borrowed value does not live long enough\n+    let x = Some(3is);\n+    let y = x.as_ref().unwrap_or(&5is); //~ ERROR: borrowed value does not live long enough\n }"}, {"sha": "eef035d3d9445d627a3533b0e80e36e7d5aa7119", "filename": "src/test/compile-fail/issue-11714.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-11714.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-11714.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11714.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn blah() -> isize { //~ ERROR not all control paths return a value\n-    1i\n+    1is\n \n     ; //~ HELP consider removing this semicolon:\n }"}, {"sha": "67578de89226e8b4659650e736b7cac43d39aa90", "filename": "src/test/compile-fail/issue-11873.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-11873.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-11873.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11873.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n fn main() {\n-    let mut v = vec!(1i);\n-    let mut f = |&mut:| v.push(2i);\n+    let mut v = vec!(1is);\n+    let mut f = |&mut:| v.push(2is);\n     let _w = v; //~ ERROR: cannot move out of `v`\n \n     f();"}, {"sha": "e5f3b7d62d38663293ca7b881ff2a804308882b0", "filename": "src/test/compile-fail/issue-11925.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-11925.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-11925.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11925.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -12,7 +12,7 @@\n \n fn main() {\n     let r = {\n-        let x = box 42i;\n+        let x = box 42is;\n         let f = move|:| &x; //~ ERROR: `x` does not live long enough\n         f()\n     };"}, {"sha": "02c19204f79ff512265726d3230b6f645c22bcb3", "filename": "src/test/compile-fail/issue-12041.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-12041.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-12041.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12041.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -17,7 +17,7 @@ fn main() {\n         loop {\n             let tx = tx;\n             //~^ ERROR: use of moved value: `tx`\n-            tx.send(1i);\n+            tx.send(1is);\n         }\n     });\n }"}, {"sha": "eee82483cae1daa052d4393158229d4218a12feb", "filename": "src/test/compile-fail/issue-13058.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-13058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-13058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13058.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -34,6 +34,6 @@ fn check<'r, I: Iterator<Item=usize>, T: Itble<'r, usize, I>>(cont: &T) -> bool\n }\n \n fn main() {\n-    check((3u, 5u));\n+    check((3us, 5us));\n //~^ ERROR mismatched types: expected `&_`, found `(usize, usize)` (expected &-ptr, found tuple)\n }"}, {"sha": "5c9b0473cea135fd8a7c5ea5784cbad2105aa79d", "filename": "src/test/compile-fail/issue-13482-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-13482-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-13482-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13482-2.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     let x = [1,2];\n     let y = match x {\n         [] => None,\n-        //~^ ERROR types: expected `[_#0i; 2]`, found `[_#7t; 0]`\n+        //~^ ERROR types: expected `[_#0is; 2]`, found `[_#7t; 0]`\n         //         (expected array of 2 elements, found array of 0 elements)\n         [a,_] => Some(a)\n     };"}, {"sha": "28d16f9c0b78747647e2a937c655df88d0126bd8", "filename": "src/test/compile-fail/issue-1362.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-1362.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-1362.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1362.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -11,7 +11,7 @@\n // Regression test for issue #1362 - without that fix the span will be bogus\n // no-reformat\n fn main() {\n-  let x: usize = 20i; //~ ERROR mismatched types\n+  let x: usize = 20is; //~ ERROR mismatched types\n }\n // NOTE: Do not add any extra lines as the line number the error is\n // on is significant; an error later in the source file might not"}, {"sha": "371adf931b066403e8552cf2d19c564edad87b61", "filename": "src/test/compile-fail/issue-1448-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-1448-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-1448-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1448-2.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -13,5 +13,5 @@\n fn foo(a: usize) -> usize { a }\n \n fn main() {\n-    println!(\"{}\", foo(10i)); //~ ERROR mismatched types\n+    println!(\"{}\", foo(10is)); //~ ERROR mismatched types\n }"}, {"sha": "5b33069b595024962b6d128f7089e4860c12a519", "filename": "src/test/compile-fail/issue-15094.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-15094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-15094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15094.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -28,6 +28,6 @@ fn make_shower<T>(x: T) -> Shower<T> {\n }\n \n pub fn main() {\n-    let show3 = make_shower(3i);\n+    let show3 = make_shower(3is);\n     show3();\n }"}, {"sha": "630c35d6a4fbce0ed414de9df0581b718f823459", "filename": "src/test/compile-fail/issue-15167.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-15167.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-15167.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15167.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -18,7 +18,7 @@\n macro_rules! f { () => (n) }\n \n fn main() -> (){\n-    for n in range(0i, 1) {\n+    for n in range(0is, 1) {\n         println!(\"{}\", f!()); //~ ERROR unresolved name `n`\n     }\n }"}, {"sha": "59d87b5277a46570610d4627dcb62adc8019ed32", "filename": "src/test/compile-fail/issue-15480.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-15480.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-15480.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15480.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     let v = vec![\n-        &3i\n+        &3is\n //~^ ERROR borrowed value does not live long enough\n     ];\n "}, {"sha": "0c9fd9d9486d65ea0d14f3b53fdda47d2b66bb6b", "filename": "src/test/compile-fail/issue-17283.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-17283.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-17283.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17283.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -16,7 +16,7 @@ struct Foo {\n }\n \n fn main() {\n-    let x = 1u;\n+    let x = 1us;\n     let y: Foo;\n \n     // `x { ... }` should not be interpreted as a struct literal here"}, {"sha": "38278c524c886c35e75ff394edb99e227cd465e9", "filename": "src/test/compile-fail/issue-17385.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-17385.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-17385.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17385.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -23,10 +23,10 @@ impl Drop for Enum {\n }\n \n fn main() {\n-    let foo = X(1i);\n+    let foo = X(1is);\n     drop(foo);\n     match foo { //~ ERROR use of moved value\n-        X(1i) => (),\n+        X(1is) => (),\n         _ => unreachable!()\n     }\n "}, {"sha": "63120e85b097303574e05d1d435c35e1dbcc63ab", "filename": "src/test/compile-fail/issue-17405.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-17405.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-17405.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17405.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -13,7 +13,7 @@ enum Foo {\n }\n \n fn main() {\n-    match Foo::Bar(1i) {\n+    match Foo::Bar(1is) {\n         Foo { i } => () //~ ERROR `Foo` does not name a struct or a struct variant\n     }\n }"}, {"sha": "e9e69dadd3b8358bf294ec9e582c99dff1b1059e", "filename": "src/test/compile-fail/issue-17441.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -11,16 +11,16 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let _foo = &[1u, 2] as [usize];\n+    let _foo = &[1us, 2] as [usize];\n     //~^ ERROR cast to unsized type: `&[usize; 2]` as `[usize]`\n     //~^^ HELP consider using an implicit coercion to `&[usize]` instead\n-    let _bar = box 1u as std::fmt::Show;\n+    let _bar = box 1us as std::fmt::Show;\n     //~^ ERROR cast to unsized type: `Box<usize>` as `core::fmt::Show`\n     //~^^ HELP did you mean `Box<core::fmt::Show>`?\n-    let _baz = 1u as std::fmt::Show;\n+    let _baz = 1us as std::fmt::Show;\n     //~^ ERROR cast to unsized type: `usize` as `core::fmt::Show`\n     //~^^ HELP consider using a box or reference as appropriate\n-    let _quux = [1u, 2] as [usize];\n+    let _quux = [1us, 2] as [usize];\n     //~^ ERROR cast to unsized type: `[usize; 2]` as `[usize]`\n     //~^^ HELP consider using a box or reference as appropriate\n }"}, {"sha": "6c4d087470382af103df2ac17be8f8ee42d3baf2", "filename": "src/test/compile-fail/issue-17718-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-17718-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-17718-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-patterns.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -13,7 +13,7 @@ static mut A2: usize = 1;\n const A3: usize = 1;\n \n fn main() {\n-    match 1u {\n+    match 1us {\n         A1 => {} //~ ERROR: static variables cannot be referenced in a pattern\n         A2 => {} //~ ERROR: static variables cannot be referenced in a pattern\n         A3 => {}"}, {"sha": "89611e4f3fe78b79e21e0b950de674b15ddab352", "filename": "src/test/compile-fail/issue-17800.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-17800.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-17800.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17800.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -14,8 +14,8 @@ enum MyOption<T> {\n }\n \n fn main() {\n-    match MyOption::MySome(42i) {\n-        MyOption::MySome { x: 42i } => (),\n+    match MyOption::MySome(42is) {\n+        MyOption::MySome { x: 42is } => (),\n         //~^ ERROR `MyOption::MySome` does not name a struct or a struct variant\n         _ => (),\n     }"}, {"sha": "56cd544b3c60506182cb2781183c562254832b70", "filename": "src/test/compile-fail/issue-17913.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-17913.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-17913.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17913.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -15,14 +15,14 @@\n \n #[cfg(any(all(stage0, target_word_size = \"64\"), all(not(stage0), target_pointer_width = \"64\")))]\n fn main() {\n-    let n = 0u;\n-    let a = box [&n; 0xF000000000000000u];\n+    let n = 0us;\n+    let a = box [&n; 0xF000000000000000us];\n     println!(\"{}\", a[0xFFFFFFu]);\n }\n \n #[cfg(any(all(stage0, target_word_size = \"32\"), all(not(stage0), target_pointer_width = \"32\")))]\n fn main() {\n-    let n = 0u;\n+    let n = 0us;\n     let a = box [&n; 0xFFFFFFFFu];\n     println!(\"{}\", a[0xFFFFFFu]);\n }"}, {"sha": "47f8d75250d63644b4a694f21438a555eb07ae1a", "filename": "src/test/compile-fail/issue-17933.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-17933.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-17933.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17933.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub static X: usize = 1u;\n+pub static X: usize = 1us;\n \n fn main() {\n-    match 1u {\n+    match 1us {\n         self::X => { },\n         //~^ ERROR static variables cannot be referenced in a pattern, use a `const` instead\n         _       => { },"}, {"sha": "5726960f66a1c6fc2c5d36441aa2646bda1a74b2", "filename": "src/test/compile-fail/issue-17999.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-17999.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-17999.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17999.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -11,7 +11,7 @@\n #![deny(unused_variables)]\n \n fn main() {\n-    for _ in range(1i, 101) {\n+    for _ in range(1is, 101) {\n         let x = (); //~ ERROR: unused variable: `x`\n         match () {\n             a => {} //~ ERROR: unused variable: `a`"}, {"sha": "83427e8aa67f9d861bf561dda5c3b7aaf02aa31e", "filename": "src/test/compile-fail/issue-18107.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -16,7 +16,7 @@ fn _create_render(_: &()) ->\n     AbstractRenderer\n //~^ ERROR: the trait `core::marker::Sized` is not implemented\n {\n-    match 0u {\n+    match 0us {\n         _ => unimplemented!()\n     }\n }"}, {"sha": "822c86d1d3e94dfb79fa9e2c688ddb5d51664095", "filename": "src/test/compile-fail/issue-18252.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-18252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-18252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18252.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -13,5 +13,5 @@ enum Foo {\n }\n \n fn main() {\n-    let f = Foo::Variant(42u); //~ ERROR uses it like a function\n+    let f = Foo::Variant(42us); //~ ERROR uses it like a function\n }"}, {"sha": "85dda340d191e27967d0f3f18df4ac37841670c8", "filename": "src/test/compile-fail/issue-18566.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-18566.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-18566.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18566.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -28,7 +28,7 @@ impl Tr for usize {\n }\n \n fn main() {\n-    let s = &mut 1u;\n+    let s = &mut 1us;\n \n     MyPtr(s).poke(s);\n     //~^ ERROR cannot borrow `*s` as mutable more than once at a time"}, {"sha": "bed835d9bde8c928bf9f69f188d17da333a49a22", "filename": "src/test/compile-fail/issue-18783.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -14,15 +14,15 @@ use std::cell::RefCell;\n \n fn main() {\n     let c = RefCell::new(vec![]);\n-    let mut y = 1u;\n+    let mut y = 1us;\n     c.push(box || y = 0);\n     c.push(box || y = 0);\n //~^ ERROR cannot borrow `y` as mutable more than once at a time\n }\n \n fn ufcs() {\n     let c = RefCell::new(vec![]);\n-    let mut y = 1u;\n+    let mut y = 1us;\n \n     Push::push(&c, box || y = 0);\n     Push::push(&c, box || y = 0);"}, {"sha": "e174fb9b7ad3e71f862533586be8532503086694", "filename": "src/test/compile-fail/issue-18959.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-18959.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-18959.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18959.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -17,7 +17,7 @@ impl Foo for Thing {\n     fn foo<T>(&self, _: &T) {}\n }\n \n-#[inline(never)] fn foo(b: &Bar) { b.foo(&0u) }\n+#[inline(never)] fn foo(b: &Bar) { b.foo(&0us) }\n \n fn main() {\n     let mut thing = Thing;"}, {"sha": "7bc79463d3a9510df41c7e0cbaacf8f30e831e7b", "filename": "src/test/compile-fail/issue-19096.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-19096.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-19096.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19096.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn main() {\n-    let t = (42i, 42i);\n+    let t = (42is, 42is);\n     t.0::<isize>; //~ ERROR expected one of `.`, `;`, `}`, or an operator, found `::`\n }"}, {"sha": "44abfca1653240bdadfa3015c927e7c6b75a3e02", "filename": "src/test/compile-fail/issue-1962.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-1962.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-1962.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1962.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -10,9 +10,9 @@\n \n // compile-flags: -D while-true\n fn main() {\n-  let mut i = 0i;\n+  let mut i = 0is;\n   while true  { //~ ERROR denote infinite loops with loop\n-    i += 1i;\n-    if i == 5i { break; }\n+    i += 1is;\n+    if i == 5is { break; }\n   }\n }"}, {"sha": "f18db94acf33fc6b740f471e24c3150add9aeb4a", "filename": "src/test/compile-fail/issue-2150.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -15,7 +15,7 @@\n fn fail_len(v: Vec<isize> ) -> usize {\n     let mut i = 3;\n     panic!();\n-    for x in v.iter() { i += 1u; }\n+    for x in v.iter() { i += 1us; }\n     //~^ ERROR: unreachable statement\n     return i;\n }"}, {"sha": "0aa357f2398513321ebf41297c59ecb9b50ef48d", "filename": "src/test/compile-fail/issue-3707.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-3707.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-3707.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3707.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -14,7 +14,7 @@ struct Obj {\n \n impl Obj {\n     pub fn boom() -> bool {\n-        return 1i+1 == 2\n+        return 1is+1 == 2\n     }\n     pub fn chirp(&self) {\n         self.boom(); //~ ERROR `&Obj` does not implement any method in scope named `boom`\n@@ -24,5 +24,5 @@ impl Obj {\n fn main() {\n     let o = Obj { member: 0 };\n     o.chirp();\n-    1i + 1;\n+    1is + 1;\n }"}, {"sha": "292d1d9616a1d1f3afb7413beee969399d7b8584", "filename": "src/test/compile-fail/issue-4335.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -18,6 +18,6 @@ fn f<'r, T>(v: &'r T) -> Box<FnMut() -> T + 'r> {\n }\n \n fn main() {\n-    let v = &5i;\n+    let v = &5is;\n     println!(\"{}\", f(v).call_mut(()));\n }"}, {"sha": "49e54f25bf64b5fd575d0b86faaa125a0011448d", "filename": "src/test/compile-fail/issue-7575.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-7575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fissue-7575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7575.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -30,17 +30,17 @@ trait UnusedTrait {\n \n impl CtxtFn for usize {\n     fn f8(self, i: usize) -> usize {\n-        i * 4u\n+        i * 4us\n     }\n \n     fn f9(i: usize) -> usize {\n-        i * 4u\n+        i * 4us\n     }\n }\n \n impl OtherTrait for usize {\n     fn f9(i: usize) -> usize {\n-        i * 8u\n+        i * 8us\n     }\n }\n "}, {"sha": "cd47bd721fcfd7bf78f4edaef57736f4729f883c", "filename": "src/test/compile-fail/kindck-impl-type-params-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -19,7 +19,7 @@ impl<T:Copy> Foo for T {\n fn take_param<T:Foo>(foo: &T) { }\n \n fn main() {\n-    let x = box 3i;\n+    let x = box 3is;\n     take_param(&x);\n     //~^ ERROR the trait `core::marker::Copy` is not implemented\n }"}, {"sha": "4ccb240071d04e6e722d0330dc2402be4baae09c", "filename": "src/test/compile-fail/kindck-inherited-copy-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -23,12 +23,12 @@ impl<T:Copy> Foo for T {\n fn take_param<T:Foo>(foo: &T) { }\n \n fn a() {\n-    let x = box 3i;\n+    let x = box 3is;\n     take_param(&x); //~ ERROR `core::marker::Copy` is not implemented\n }\n \n fn b() {\n-    let x = box 3i;\n+    let x = box 3is;\n     let y = &x;\n     let z = &x as &Foo; //~ ERROR `core::marker::Copy` is not implemented\n }"}, {"sha": "79aec386d9a77c7f16f1ee61540abc0ea6aaaf32", "filename": "src/test/compile-fail/kindck-nonsendable-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -16,7 +16,7 @@ fn foo(_x: Rc<usize>) {}\n fn bar<F:FnOnce() + Send>(_: F) { }\n \n fn main() {\n-    let x = Rc::new(3u);\n+    let x = Rc::new(3us);\n     bar(move|| foo(x));\n     //~^ ERROR `core::marker::Send` is not implemented\n     //~^^ ERROR `core::marker::Send` is not implemented"}, {"sha": "34c79be7118ba9e00430a9b07f566108305e6eca", "filename": "src/test/compile-fail/lint-dead-code-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -90,7 +90,7 @@ pub fn pub_fn() {\n     let e = used_enum::foo3;\n     SemiUsedStruct::la_la_la();\n \n-    let i = 1i;\n+    let i = 1is;\n     match i {\n         USED_STATIC => (),\n         USED_CONST => (),"}, {"sha": "03b89c522ce8da91a8bb39f81982c9565469da20", "filename": "src/test/compile-fail/lint-dead-code-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -85,6 +85,6 @@ mod inner {\n }\n \n pub fn foo() {\n-    let a = &1i as &inner::Trait;\n+    let a = &1is as &inner::Trait;\n     a.f();\n }"}, {"sha": "ac8f158f8fb28e9fdd89201ecde4fa4b98c84cd5", "filename": "src/test/compile-fail/lint-dead-code-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -61,6 +61,6 @@ fn field_match_in_let(f: Bar) -> bool {\n fn main() {\n     field_read(Foo { x: 1, b: false, marker: std::marker::NoCopy });\n     field_match_in_patterns(XYZ::Z);\n-    field_match_in_let(Bar { x: 42u, b: true, _guard: () });\n+    field_match_in_let(Bar { x: 42us, b: true, _guard: () });\n     let _ = Baz { x: 0 };\n }"}, {"sha": "91a4d0fea0af464f6a73337a7ce8ffd99f6eb4f5", "filename": "src/test/compile-fail/lint-exceeding-bitshifts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -56,7 +56,7 @@ fn main() {\n       let n = 1u8 << (4+3);\n       let n = 1u8 << (4+4); //~ ERROR: bitshift exceeds the type's number of bits\n \n-      let n = 1i << std::isize::BITS; //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1u << std::usize::BITS; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1is << std::isize::BITS; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1us << std::usize::BITS; //~ ERROR: bitshift exceeds the type's number of bits\n }\n "}, {"sha": "3224dec1c997d13bfb7e420d2a9eaa9e6e18cec4", "filename": "src/test/compile-fail/lint-type-limits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -14,7 +14,7 @@\n fn main() { }\n \n fn foo() {\n-    let mut i = 100u;\n+    let mut i = 100us;\n     while i >= 0 { //~ ERROR comparison is useless due to type limits\n         i -= 1;\n     }\n@@ -50,12 +50,12 @@ fn qux() {\n }\n \n fn quy() {\n-    let i = -23u; //~ WARNING negation of unsigned isize literal may be unintentional\n+    let i = -23us; //~ WARNING negation of unsigned isize literal may be unintentional\n                   //~^ WARNING unused variable\n }\n \n fn quz() {\n-    let i = 23u;\n+    let i = 23us;\n     let j = -i;   //~ WARNING negation of unsigned isize variable may be unintentional\n                   //~^ WARNING unused variable\n }"}, {"sha": "4ccc3d8b641514cd2e5b59a1f4d7ad090c411f8c", "filename": "src/test/compile-fail/lint-unnecessary-parens.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -17,7 +17,7 @@ impl X {\n }\n \n fn foo() -> isize {\n-    return (1i); //~ ERROR unnecessary parentheses around `return` value\n+    return (1is); //~ ERROR unnecessary parentheses around `return` value\n }\n fn bar() -> X {\n     return (X { y: true }); //~ ERROR unnecessary parentheses around `return` value\n@@ -32,8 +32,8 @@ fn main() {\n     match (true) { //~ ERROR unnecessary parentheses around `match` head expression\n         _ => {}\n     }\n-    if let 1i = (1i) {} //~ ERROR unnecessary parentheses around `if let` head expression\n-    while let 1i = (2i) {} //~ ERROR unnecessary parentheses around `while let` head expression\n+    if let 1is = (1is) {} //~ ERROR unnecessary parentheses around `if let` head expression\n+    while let 1is = (2is) {} //~ ERROR unnecessary parentheses around `while let` head expression\n     let v = X { y: false };\n     // struct lits needs parens, so these shouldn't warn.\n     if (v == X { y: true }) {}\n@@ -47,7 +47,7 @@ fn main() {\n         _ => {}\n     }\n \n-    let mut _a = (0i); //~ ERROR unnecessary parentheses around assigned value\n-    _a = (0i); //~ ERROR unnecessary parentheses around assigned value\n-    _a += (1i); //~ ERROR unnecessary parentheses around assigned value\n+    let mut _a = (0is); //~ ERROR unnecessary parentheses around assigned value\n+    _a = (0is); //~ ERROR unnecessary parentheses around assigned value\n+    _a += (1is); //~ ERROR unnecessary parentheses around assigned value\n }"}, {"sha": "84d7200314f9ddfdbfde3e4a9782e8e0d440236f", "filename": "src/test/compile-fail/lint-unused-imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -54,7 +54,7 @@ mod bar {\n     pub mod c {\n         use foo::Point;\n         use foo::Square; //~ ERROR unused import\n-        pub fn cc(p: Point) -> isize { return 2i * (p.x + p.y); }\n+        pub fn cc(p: Point) -> isize { return 2is * (p.x + p.y); }\n     }\n \n     #[allow(unused_imports)]\n@@ -65,8 +65,8 @@ mod bar {\n \n fn main() {\n     cal(foo::Point{x:3, y:9});\n-    let mut a = 3i;\n-    let mut b = 4i;\n+    let mut a = 3is;\n+    let mut b = 4is;\n     swap(&mut a, &mut b);\n     test::C.b();\n     let _a = foo();"}, {"sha": "501eea770d814ca75454775ba5f6593d3adf455c", "filename": "src/test/compile-fail/lint-unused-mut-variables.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -18,45 +18,45 @@\n \n fn main() {\n     // negative cases\n-    let mut a = 3i; //~ ERROR: variable does not need to be mutable\n-    let mut a = 2i; //~ ERROR: variable does not need to be mutable\n-    let mut b = 3i; //~ ERROR: variable does not need to be mutable\n-    let mut a = vec!(3i); //~ ERROR: variable does not need to be mutable\n-    let (mut a, b) = (1i, 2i); //~ ERROR: variable does not need to be mutable\n+    let mut a = 3is; //~ ERROR: variable does not need to be mutable\n+    let mut a = 2is; //~ ERROR: variable does not need to be mutable\n+    let mut b = 3is; //~ ERROR: variable does not need to be mutable\n+    let mut a = vec!(3is); //~ ERROR: variable does not need to be mutable\n+    let (mut a, b) = (1is, 2is); //~ ERROR: variable does not need to be mutable\n \n-    match 30i {\n+    match 30is {\n         mut x => {} //~ ERROR: variable does not need to be mutable\n     }\n-    match (30i, 2i) {\n+    match (30is, 2is) {\n       (mut x, 1) | //~ ERROR: variable does not need to be mutable\n       (mut x, 2) |\n       (mut x, 3) => {\n       }\n       _ => {}\n     }\n \n-    let x = |&: mut y: isize| 10i; //~ ERROR: variable does not need to be mutable\n+    let x = |&: mut y: isize| 10is; //~ ERROR: variable does not need to be mutable\n     fn what(mut foo: isize) {} //~ ERROR: variable does not need to be mutable\n \n     // positive cases\n-    let mut a = 2i;\n-    a = 3i;\n+    let mut a = 2is;\n+    a = 3is;\n     let mut a = Vec::new();\n-    a.push(3i);\n+    a.push(3is);\n     let mut a = Vec::new();\n     callback(|| {\n-        a.push(3i);\n+        a.push(3is);\n     });\n-    let (mut a, b) = (1i, 2i);\n+    let (mut a, b) = (1is, 2is);\n     a = 34;\n \n-    match 30i {\n+    match 30is {\n         mut x => {\n-            x = 21i;\n+            x = 21is;\n         }\n     }\n \n-    match (30i, 2i) {\n+    match (30is, 2is) {\n       (mut x, 1) |\n       (mut x, 2) |\n       (mut x, 3) => {\n@@ -65,19 +65,19 @@ fn main() {\n       _ => {}\n     }\n \n-    let x = |&mut: mut y: isize| y = 32i;\n-    fn nothing(mut foo: isize) { foo = 37i; }\n+    let x = |&mut: mut y: isize| y = 32is;\n+    fn nothing(mut foo: isize) { foo = 37is; }\n \n     // leading underscore should avoid the warning, just like the\n     // unused variable lint.\n-    let mut _allowed = 1i;\n+    let mut _allowed = 1is;\n }\n \n fn callback<F>(f: F) where F: FnOnce() {}\n \n // make sure the lint attribute can be turned off\n #[allow(unused_mut)]\n fn foo(mut a: isize) {\n-    let mut a = 3i;\n-    let mut b = vec!(2i);\n+    let mut a = 3is;\n+    let mut b = vec!(2is);\n }"}, {"sha": "bb0491755942ed4e1ee9deb0694b245b5bd93c93", "filename": "src/test/compile-fail/liveness-bad-bang-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fliveness-bad-bang-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fliveness-bad-bang-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-bad-bang-2.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -11,7 +11,7 @@\n // Tests that a function with a ! annotation always actually fails\n \n fn bad_bang(i: usize) -> ! { //~ ERROR computation may converge in a function marked as diverging\n-    println!(\"{}\", 3i);\n+    println!(\"{}\", 3is);\n }\n \n-fn main() { bad_bang(5u); }\n+fn main() { bad_bang(5us); }"}, {"sha": "4b8f84ae704863f73af43365012c1bb4ec1e88c2", "filename": "src/test/compile-fail/liveness-return-last-stmt-semi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fliveness-return-last-stmt-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fliveness-return-last-stmt-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-return-last-stmt-semi.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -10,7 +10,7 @@\n //\n // regression test for #8005\n \n-macro_rules! test { () => { fn foo() -> isize { 1i; } } }\n+macro_rules! test { () => { fn foo() -> isize { 1is; } } }\n                                              //~^ ERROR not all control paths return a value\n                                              //~^^ HELP consider removing this semicolon\n "}, {"sha": "c9f8230b6c5aec9a02c2cdff6a5c09c84eef0088", "filename": "src/test/compile-fail/liveness-unused.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -29,40 +29,40 @@ fn f1d() {\n }\n \n fn f2() {\n-    let x = 3i;\n+    let x = 3is;\n     //~^ ERROR unused variable: `x`\n }\n \n fn f3() {\n-    let mut x = 3i;\n+    let mut x = 3is;\n     //~^ ERROR variable `x` is assigned to, but never used\n-    x += 4i;\n+    x += 4is;\n     //~^ ERROR value assigned to `x` is never read\n }\n \n fn f3b() {\n-    let mut z = 3i;\n+    let mut z = 3is;\n     //~^ ERROR variable `z` is assigned to, but never used\n     loop {\n-        z += 4i;\n+        z += 4is;\n     }\n }\n \n #[allow(unused_variables)]\n fn f3c() {\n-    let mut z = 3i;\n-    loop { z += 4i; }\n+    let mut z = 3is;\n+    loop { z += 4is; }\n }\n \n #[allow(unused_variables)]\n #[allow(unused_assignments)]\n fn f3d() {\n-    let mut x = 3i;\n-    x += 4i;\n+    let mut x = 3is;\n+    x += 4is;\n }\n \n fn f4() {\n-    match Some(3i) {\n+    match Some(3is) {\n       Some(i) => {\n         //~^ ERROR unused variable: `i`\n       }\n@@ -75,25 +75,25 @@ enum tri {\n }\n \n fn f4b() -> isize {\n-    match tri::a(3i) {\n+    match tri::a(3is) {\n       tri::a(i) | tri::b(i) | tri::c(i) => {\n         i\n       }\n     }\n }\n \n fn f5a() {\n-    for x in range(1i, 10) { }\n+    for x in range(1is, 10) { }\n     //~^ ERROR unused variable: `x`\n }\n \n fn f5b() {\n-    for (x, _) in [1i, 2, 3].iter().enumerate() { }\n+    for (x, _) in [1is, 2, 3].iter().enumerate() { }\n     //~^ ERROR unused variable: `x`\n }\n \n fn f5c() {\n-    for (_, x) in [1i, 2, 3].iter().enumerate() {\n+    for (_, x) in [1is, 2, 3].iter().enumerate() {\n     //~^ ERROR unused variable: `x`\n         continue;\n         std::os::set_exit_status(*x); //~ WARNING unreachable statement"}, {"sha": "21e52f130609da4279f1ef45a944628a9af8857e", "filename": "src/test/compile-fail/liveness-use-after-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -11,7 +11,7 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let x = box 5i;\n+    let x = box 5is;\n     let y = x;\n     println!(\"{}\", *x); //~ ERROR use of moved value: `*x`\n     y.clone();"}, {"sha": "e2d3d059ad815685e3fb07b043faaacdccc76d77", "filename": "src/test/compile-fail/loop-does-not-diverge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Floop-does-not-diverge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Floop-does-not-diverge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Floop-does-not-diverge.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -14,7 +14,7 @@ fn forever() -> ! {\n   loop {\n     break;\n   }\n-  return 42i; //~ ERROR `return` in a function declared as diverging\n+  return 42is; //~ ERROR `return` in a function declared as diverging\n }\n \n fn main() {"}, {"sha": "1e2172f4a7cff7dadb0b97f3a642cb94f9117307", "filename": "src/test/compile-fail/macro-no-implicit-reexport.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmacro-no-implicit-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmacro-no-implicit-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-no-implicit-reexport.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -16,5 +16,5 @@\n extern crate macro_non_reexport_2;\n \n fn main() {\n-    assert_eq!(reexported!(), 3u);  //~ ERROR macro undefined\n+    assert_eq!(reexported!(), 3us);  //~ ERROR macro undefined\n }"}, {"sha": "cf0d79e0fefd32f88f9da5ac8c2d527ff243207b", "filename": "src/test/compile-fail/macro-reexport-not-locally-visible.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-not-locally-visible.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-not-locally-visible.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-not-locally-visible.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -16,5 +16,5 @@\n extern crate macro_reexport_1;\n \n fn main() {\n-    assert_eq!(reexported!(), 3u);  //~ ERROR macro undefined\n+    assert_eq!(reexported!(), 3us);  //~ ERROR macro undefined\n }"}, {"sha": "908d46f398ca7859ed4810d55efb6467881ce5d0", "filename": "src/test/compile-fail/match-ill-type1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmatch-ill-type1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmatch-ill-type1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-ill-type1.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     match 1 {\n-        1...2u => 1, //~ ERROR mismatched types in range\n+        1...2us => 1, //~ ERROR mismatched types in range\n         _ => 2,\n     };\n }"}, {"sha": "6b6954101b24610a392f8a79fd1febbcdf98588c", "filename": "src/test/compile-fail/match-ill-type2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmatch-ill-type2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmatch-ill-type2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-ill-type2.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n fn main() {\n-    match 1i {\n-        1i => 1i,\n-        2u => 1i, //~ ERROR mismatched types\n-        _ => 2i,\n+    match 1is {\n+        1is => 1is,\n+        2us => 1is, //~ ERROR mismatched types\n+        _ => 2is,\n     };\n }"}, {"sha": "2aeccacb0f6eef5544f550682727ae6b2028db96", "filename": "src/test/compile-fail/match-non-exhaustive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmatch-non-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmatch-non-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-non-exhaustive.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn main() {\n-    match 0i { 1i => () } //~ ERROR non-exhaustive patterns\n-    match 0i { 0i if false => () } //~ ERROR non-exhaustive patterns\n+    match 0is { 1is => () } //~ ERROR non-exhaustive patterns\n+    match 0is { 0is if false => () } //~ ERROR non-exhaustive patterns\n }"}, {"sha": "7d33963003ffce15e8fa37d750069b228edbfa8d", "filename": "src/test/compile-fail/match-range-fail-dominate.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail-dominate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail-dominate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail-dominate.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -15,21 +15,21 @@\n //error-pattern: unreachable\n \n fn main() {\n-    match 5u {\n-      1u ... 10u => { }\n-      5u ... 6u => { }\n+    match 5us {\n+      1us ... 10us => { }\n+      5us ... 6us => { }\n       _ => {}\n     };\n \n-    match 5u {\n-      3u ... 6u => { }\n-      4u ... 6u => { }\n+    match 5us {\n+      3us ... 6us => { }\n+      4us ... 6us => { }\n       _ => {}\n     };\n \n-    match 5u {\n-      4u ... 6u => { }\n-      4u ... 6u => { }\n+    match 5us {\n+      4us ... 6us => { }\n+      4us ... 6us => { }\n       _ => {}\n     };\n "}, {"sha": "1c804b0552cc9cfe6d0996ca0d721f0aede8245c", "filename": "src/test/compile-fail/match-range-fail.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -13,17 +13,17 @@\n //error-pattern: mismatched types\n \n fn main() {\n-    match 5u {\n-      6u ... 1u => { }\n+    match 5us {\n+      6us ... 1us => { }\n       _ => { }\n     };\n \n     match \"wow\" {\n       \"bar\" ... \"foo\" => { }\n     };\n \n-    match 5u {\n-      'c' ... 100u => { }\n+    match 5us {\n+      'c' ... 100us => { }\n       _ => { }\n     };\n }"}, {"sha": "c35dc8d7c86eb343d312d016f9ed7c647e8e45a9", "filename": "src/test/compile-fail/match-vec-fixed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmatch-vec-fixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmatch-vec-fixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-fixed.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn a() {\n-    let v = [1i, 2, 3];\n+    let v = [1is, 2, 3];\n     match v {\n         [_, _, _] => {}\n         [_, _, _] => {} //~ ERROR unreachable pattern"}, {"sha": "cab6a8610bfb365439c53de0c9ce7ffec8410f40", "filename": "src/test/compile-fail/method-ambig-two-traits-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-two-traits-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-two-traits-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-two-traits-cross-crate.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -18,5 +18,5 @@ trait me2 {\n     fn me(&self) -> usize;\n }\n impl me2 for usize { fn me(&self) -> usize { *self } }\n-fn main() { 1u.me(); } //~ ERROR E0034\n+fn main() { 1us.me(); } //~ ERROR E0034\n "}, {"sha": "87e3655d31e1ac1f67487b189b05630c1c58891e", "filename": "src/test/compile-fail/method-ambig-two-traits-with-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-two-traits-with-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-two-traits-with-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-two-traits-with-default-method.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -19,5 +19,5 @@ impl Foo for usize {}\n impl Bar for usize {}\n \n fn main() {\n-    1u.method(); //~ ERROR E0034\n+    1us.method(); //~ ERROR E0034\n }"}, {"sha": "899c1ef16a6658ad9c5047c6dd35c81ed593b947", "filename": "src/test/compile-fail/method-missing-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmethod-missing-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmethod-missing-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-missing-call.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -33,7 +33,7 @@ fn main() {\n                         //~^ HELP maybe a `()` to call it is missing\n \n     // Ensure the span is useful\n-    let ys = &[1i,2,3,4,5,6,7];\n+    let ys = &[1is,2,3,4,5,6,7];\n     let a = ys.iter()\n               .map(|x| x)\n               .filter(|&&x| x == 1)"}, {"sha": "ace6c80e3e3eed0d1755cc273cc080ac32e0dd7e", "filename": "src/test/compile-fail/move-out-of-tuple-field.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmove-out-of-tuple-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmove-out-of-tuple-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-out-of-tuple-field.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -13,11 +13,11 @@\n struct Foo(Box<isize>);\n \n fn main() {\n-    let x = (box 1i,);\n+    let x = (box 1is,);\n     let y = x.0;\n     let z = x.0; //~ ERROR use of moved value: `x.0`\n \n-    let x = Foo(box 1i);\n+    let x = Foo(box 1is);\n     let y = x.0;\n     let z = x.0; //~ ERROR use of moved value: `x.0`\n }"}, {"sha": "58f1f78fa5d6d936ba3868a5cd416b104d9d400a", "filename": "src/test/compile-fail/moves-based-on-type-exprs.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -24,13 +24,13 @@ fn f10() {\n \n fn f20() {\n     let x = \"hi\".to_string();\n-    let _y = (x, 3i);\n+    let _y = (x, 3is);\n     touch(&x); //~ ERROR use of moved value: `x`\n }\n \n fn f21() {\n-    let x = vec!(1i, 2, 3);\n-    let _y = (x[0], 3i);\n+    let x = vec!(1is, 2, 3);\n+    let _y = (x[0], 3is);\n     touch(&x);\n }\n \n@@ -61,9 +61,9 @@ fn f50(cond: bool) {\n     let x = \"hi\".to_string();\n     let y = \"ho\".to_string();\n     let _y = match cond {\n-        _ if guard(x) => 10i,\n-        true => 10i,\n-        false => 20i,\n+        _ if guard(x) => 10is,\n+        true => 10is,\n+        false => 20is,\n     };\n     touch(&x); //~ ERROR use of moved value: `x`\n     touch(&y);"}, {"sha": "847a3eaf8a1e726810f6299cac56067d1484076f", "filename": "src/test/compile-fail/mut-cant-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmut-cant-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmut-cant-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-cant-alias.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -11,7 +11,7 @@\n use std::cell::RefCell;\n \n fn main() {\n-    let m = RefCell::new(0i);\n+    let m = RefCell::new(0is);\n     let mut b = m.borrow_mut();\n     let b1 = &mut *b;\n     let b2 = &mut *b; //~ ERROR cannot borrow"}, {"sha": "7fb5c2ac4a4ff18d57d8970327cc46b03b5c2df1", "filename": "src/test/compile-fail/mut-cross-borrowing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmut-cross-borrowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmut-cross-borrowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-cross-borrowing.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -13,7 +13,7 @@\n fn f(_: &mut isize) {}\n \n fn main() {\n-    let mut x = box 3i;\n+    let mut x = box 3is;\n     f(x)    //~ ERROR mismatched types\n }\n "}, {"sha": "8c39320276a164b48a9c80e3310c55e33f1d6458", "filename": "src/test/compile-fail/mut-not-freeze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-not-freeze.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -13,7 +13,7 @@ use std::cell::RefCell;\n fn f<T: Sync>(_: T) {}\n \n fn main() {\n-    let x = RefCell::new(0i);\n+    let x = RefCell::new(0is);\n     f(x);\n     //~^ ERROR `core::marker::Sync` is not implemented\n     //~^^ ERROR `core::marker::Sync` is not implemented"}, {"sha": "92f02114a13603907d7c9c99ca2a9afa5036e581", "filename": "src/test/compile-fail/mut-pattern-internal-mutability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmut-pattern-internal-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmut-pattern-internal-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-pattern-internal-mutability.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let foo = &mut 1i;\n+    let foo = &mut 1is;\n \n     let &mut x = foo;\n     x += 1; //~ ERROR re-assignment of immutable variable"}, {"sha": "74b561c37aacb169f242110e87cbece7c865bc9e", "filename": "src/test/compile-fail/mut-ptr-cant-outlive-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmut-ptr-cant-outlive-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmut-ptr-cant-outlive-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-ptr-cant-outlive-ref.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -11,7 +11,7 @@\n use std::cell::RefCell;\n \n fn main() {\n-    let m = RefCell::new(0i);\n+    let m = RefCell::new(0is);\n     let p;\n     {\n         let b = m.borrow();"}, {"sha": "932c2a9715ff4886cb1d90b970eb3c07572d58db", "filename": "src/test/compile-fail/mutable-class-fields-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -29,6 +29,6 @@ fn cat(in_x : usize, in_y : isize) -> cat {\n }\n \n fn main() {\n-  let nyan : cat = cat(52u, 99);\n+  let nyan : cat = cat(52us, 99);\n   nyan.eat();\n }"}, {"sha": "a840ac63dd8e9ee63362a656014bac0e495cfab7", "filename": "src/test/compile-fail/mutable-class-fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -21,6 +21,6 @@ fn cat(in_x : usize, in_y : isize) -> cat {\n }\n \n fn main() {\n-  let nyan : cat = cat(52u, 99);\n+  let nyan : cat = cat(52us, 99);\n   nyan.how_hungry = 0; //~ ERROR cannot assign\n }"}, {"sha": "beb0d0ee47e2fad21337288f482de4208e9a13b3", "filename": "src/test/compile-fail/no-capture-arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -14,7 +14,7 @@ use std::sync::Arc;\n use std::thread::Thread;\n \n fn main() {\n-    let v = vec!(1i, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n+    let v = vec!(1is, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n     let arc_v = Arc::new(v);\n \n     Thread::spawn(move|| {"}, {"sha": "d8f0fa497a4f3c96dd7bc9b6ed24bdb1558e9367", "filename": "src/test/compile-fail/no-reuse-move-arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -12,7 +12,7 @@ use std::sync::Arc;\n use std::thread::Thread;\n \n fn main() {\n-    let v = vec!(1i, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n+    let v = vec!(1is, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n     let arc_v = Arc::new(v);\n \n     Thread::spawn(move|| {"}, {"sha": "82cc319466a6d8f3c1ea32b422a89f583b16cff1", "filename": "src/test/compile-fail/no_send-rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_send-rc.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -13,7 +13,7 @@ use std::rc::Rc;\n fn bar<T: Send>(_: T) {}\n \n fn main() {\n-    let x = Rc::new(5i);\n+    let x = Rc::new(5is);\n     bar(x);\n     //~^ ERROR `core::marker::Send` is not implemented\n     //~^^ ERROR `core::marker::Send` is not implemented"}, {"sha": "0d3e380d4a1224c9efb82923104b2dbaada12fa4", "filename": "src/test/compile-fail/no_share-rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fno_share-rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fno_share-rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_share-rc.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -14,7 +14,7 @@ use std::cell::RefCell;\n fn bar<T: Sync>(_: T) {}\n \n fn main() {\n-    let x = Rc::new(RefCell::new(5i));\n+    let x = Rc::new(RefCell::new(5is));\n     bar(x);\n     //~^ ERROR the trait `core::marker::Sync` is not implemented\n     //~^^ ERROR the trait `core::marker::Sync` is not implemented"}, {"sha": "ccf69a4d2c8b177abd193e92dd59b7a4828ba0cd", "filename": "src/test/compile-fail/non-exhaustive-match.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -16,10 +16,10 @@ fn main() {\n     match true { //~ ERROR non-exhaustive patterns: `false` not covered\n       true => {}\n     }\n-    match Some(10i) { //~ ERROR non-exhaustive patterns: `Some(_)` not covered\n+    match Some(10is) { //~ ERROR non-exhaustive patterns: `Some(_)` not covered\n       None => {}\n     }\n-    match (2i, 3i, 4i) { //~ ERROR non-exhaustive patterns: `(_, _, _)` not covered\n+    match (2is, 3is, 4is) { //~ ERROR non-exhaustive patterns: `(_, _, _)` not covered\n       (_, _, 4) => {}\n     }\n     match (t::a, t::a) { //~ ERROR non-exhaustive patterns: `(a, a)` not covered\n@@ -35,14 +35,14 @@ fn main() {\n       (_, t::a) => {}\n       (t::b, t::b) => {}\n     }\n-    let vec = vec!(Some(42i), None, Some(21i));\n+    let vec = vec!(Some(42is), None, Some(21is));\n     let vec: &[Option<isize>] = vec.as_slice();\n     match vec { //~ ERROR non-exhaustive patterns: `[]` not covered\n         [Some(..), None, tail..] => {}\n         [Some(..), Some(..), tail..] => {}\n         [None] => {}\n     }\n-    let vec = vec!(1i);\n+    let vec = vec!(1is);\n     let vec: &[isize] = vec.as_slice();\n     match vec {\n         [_, tail..] => (),\n@@ -56,7 +56,7 @@ fn main() {\n         [0.1] => (),\n         [] => ()\n     }\n-    let vec = vec!(Some(42i), None, Some(21i));\n+    let vec = vec!(Some(42is), None, Some(21is));\n     let vec: &[Option<isize>] = vec.as_slice();\n     match vec {\n         [Some(..), None, tail..] => {}"}, {"sha": "3bd3a0c653ca1f56a3d43e4e67cbc479565af625", "filename": "src/test/compile-fail/non-exhaustive-pattern-witness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -27,7 +27,7 @@ fn struct_with_a_nested_enum_and_vector() {\n         Foo { first: true, second: None } => (),\n         Foo { first: true, second: Some(_) } => (),\n         Foo { first: false, second: None } => (),\n-        Foo { first: false, second: Some([1u, 2u, 3u, 4u]) } => ()\n+        Foo { first: false, second: Some([1us, 2us, 3us, 4us]) } => ()\n     }\n }\n "}, {"sha": "d290d5536a4a27a3ce8f421707e648d5f75a2c60", "filename": "src/test/compile-fail/obsolete-tilde.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fobsolete-tilde.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fobsolete-tilde.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobsolete-tilde.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -15,7 +15,7 @@ fn bar(x: ~str) {} //~ ERROR obsolete syntax: `~` notation for owned pointers\n fn baz(x: ~[isize]) {} //~ ERROR obsolete syntax: `~[T]` is no longer a type\n \n fn main() {\n-    let x = ~4i; //~ ERROR obsolete syntax: `~` notation for owned pointer allocation\n+    let x = ~4is; //~ ERROR obsolete syntax: `~` notation for owned pointer allocation\n     let y = ~\"hello\"; //~ ERROR obsolete syntax: `~` notation for owned pointer allocation\n-    let z = ~[1i, 2, 3]; //~ ERROR obsolete syntax: `~[T]` is no longer a type\n+    let z = ~[1is, 2, 3]; //~ ERROR obsolete syntax: `~[T]` is no longer a type\n }"}, {"sha": "74f674e64baf54da0b5c7bc1c755e3a59feffbb7", "filename": "src/test/compile-fail/or-patter-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2For-patter-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2For-patter-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2For-patter-mismatch.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -12,4 +12,4 @@\n \n enum blah { a(isize, isize, usize), b(isize, isize), }\n \n-fn main() { match blah::a(1, 1, 2u) { blah::a(_, x, y) | blah::b(x, y) => { } } }\n+fn main() { match blah::a(1, 1, 2us) { blah::a(_, x, y) | blah::b(x, y) => { } } }"}, {"sha": "7f67d7a5fb19e07c950db8384a1794e609ead227", "filename": "src/test/compile-fail/pat-range-bad-dots.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fpat-range-bad-dots.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fpat-range-bad-dots.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpat-range-bad-dots.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    match 22i {\n+    match 22is {\n         0 .. 3 => {} //~ ERROR expected one of `...`, `=>`, or `|`, found `..`\n         _ => {}\n     }"}, {"sha": "70840200aad7d20cacbea2ee185e123c254ead03", "filename": "src/test/compile-fail/pattern-bindings-after-at.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fpattern-bindings-after-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fpattern-bindings-after-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-bindings-after-at.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -14,7 +14,7 @@ enum Option<T> {\n }\n \n fn main() {\n-    match &mut Some(1i) {\n+    match &mut Some(1is) {\n         ref mut z @ &mut Some(ref a) => {\n         //~^ ERROR pattern bindings are not allowed after an `@`\n             **z = None;"}, {"sha": "e3c440d61cec32eab152ecb6fe7642b80afff99c", "filename": "src/test/compile-fail/pptypedef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fpptypedef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fpptypedef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpptypedef.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -11,9 +11,9 @@\n fn let_in<T, F>(x: T, f: F) where F: FnOnce(T) {}\n \n fn main() {\n-    let_in(3u, |i| { assert!(i == 3is); });\n+    let_in(3us, |i| { assert!(i == 3is); });\n     //~^ ERROR expected `usize`, found `isize`\n \n-    let_in(3i, |i| { assert!(i == 3us); });\n+    let_in(3is, |i| { assert!(i == 3us); });\n     //~^ ERROR expected `isize`, found `usize`\n }"}, {"sha": "e8e26cf8ce33dc2d8a7edc9297a2c80a82a64013", "filename": "src/test/compile-fail/private-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -30,6 +30,6 @@ mod kitties {\n }\n \n fn main() {\n-  let nyan : kitties::cat = kitties::cat(52u, 99);\n+  let nyan : kitties::cat = kitties::cat(52us, 99);\n   nyan.nap();\n }"}, {"sha": "36b6000ceebe1e8480ca0a26265f5e09eac6404e", "filename": "src/test/compile-fail/private-struct-field-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-cross-crate.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -13,7 +13,7 @@ extern crate cci_class;\n use cci_class::kitties::cat;\n \n fn main() {\n-  let nyan : cat = cat(52u, 99);\n-  assert!((nyan.meows == 52u));\n+  let nyan : cat = cat(52us, 99);\n+  assert!((nyan.meows == 52us));\n   //~^ ERROR field `meows` of struct `cci_class::kitties::cat` is private\n }"}, {"sha": "392a803b0dd9f0f18a3a6144d4004c82e38837c3", "filename": "src/test/compile-fail/ptr-coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fptr-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fptr-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fptr-coercion.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -13,7 +13,7 @@\n \n pub fn main() {\n     // *const -> *mut\n-    let x: *const isize = &42i;\n+    let x: *const isize = &42is;\n     let x: *mut isize = x; //~ERROR values differ in mutability\n \n     // & -> *mut"}, {"sha": "9888c0856953f6ddd8e553a6cadb77dee5ba76a0", "filename": "src/test/compile-fail/range-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange-1.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -12,15 +12,15 @@\n \n pub fn main() {\n     // Mixed types.\n-    let _ = 0u..10i;\n+    let _ = 0us..10is;\n     //~^ ERROR start and end of range have incompatible types\n \n     // Float => does not implement iterator.\n     for i in 0f32..42f32 {}\n     //~^ ERROR `for` loop expression has type `core::ops::Range<f32>` which does not implement\n \n     // Unsized type.\n-    let arr: &[_] = &[1u, 2, 3];\n+    let arr: &[_] = &[1us, 2, 3];\n     let range = (*arr)..;\n     //~^ ERROR the trait `core::marker::Sized` is not implemented\n }"}, {"sha": "6d176ca3700b9113c27b66c7ab82e43abcb51959", "filename": "src/test/compile-fail/range-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Frange-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Frange-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange-2.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -12,7 +12,7 @@\n \n pub fn main() {\n     let r = {\n-        (&42i)..&42\n+        (&42is)..&42\n         //~^ ERROR borrowed value does not live long enough\n         //~^^ ERROR borrowed value does not live long enough\n     };"}, {"sha": "d06c73c4cc039593e496fed905dbd48d198e983a", "filename": "src/test/compile-fail/refutable-pattern-errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frefutable-pattern-errors.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -13,6 +13,6 @@ fn func((1, (Some(1), 2...3)): (isize, (Option<isize>, isize))) { }\n //~^ ERROR refutable pattern in function argument: `(_, _)` not covered\n \n fn main() {\n-    let (1i, (Some(1i), 2i...3i)) = (1i, (None, 2i));\n+    let (1is, (Some(1is), 2is...3is)) = (1is, (None, 2is));\n     //~^ ERROR refutable pattern in local binding: `(_, _)` not covered\n }"}, {"sha": "b69224d449957f37993b06c3e963c324b06d208d", "filename": "src/test/compile-fail/regions-addr-of-self.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -15,18 +15,18 @@ struct dog {\n impl dog {\n     pub fn chase_cat(&mut self) {\n         let p: &'static mut usize = &mut self.cats_chased; //~ ERROR cannot infer\n-        *p += 1u;\n+        *p += 1us;\n     }\n \n     pub fn chase_cat_2(&mut self) {\n         let p: &mut usize = &mut self.cats_chased;\n-        *p += 1u;\n+        *p += 1us;\n     }\n }\n \n fn dog() -> dog {\n     dog {\n-        cats_chased: 0u\n+        cats_chased: 0us\n     }\n }\n "}, {"sha": "fa76ab758ab568a96ab55e9adc7487a69c8c45ba", "filename": "src/test/compile-fail/regions-addr-of-upvar-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -18,7 +18,7 @@ impl dog {\n     pub fn chase_cat(&mut self) {\n         let _f = |&:| {\n             let p: &'static mut usize = &mut self.food; //~ ERROR cannot infer\n-            *p = 3u;\n+            *p = 3us;\n         };\n     }\n }"}, {"sha": "543d4d1620b79eba2c09d1c5994e8a862f940625", "filename": "src/test/compile-fail/regions-close-over-type-parameter-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fregions-close-over-type-parameter-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fregions-close-over-type-parameter-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-over-type-parameter-2.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -29,7 +29,7 @@ fn main() {\n     // ~Repeat<&'blk isize> where blk is the lifetime of the block below.\n \n     let _ = {\n-        let tmp0 = 3i;\n+        let tmp0 = 3is;\n         let tmp1 = &tmp0; //~ ERROR `tmp0` does not live long enough\n         repeater3(tmp1)\n     };"}, {"sha": "83cef9397c30b4b06c95032dbfdd1572892cbb0c", "filename": "src/test/compile-fail/regions-creating-enums.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -14,8 +14,8 @@ enum ast<'a> {\n }\n \n fn build() {\n-    let x = ast::num(3u);\n-    let y = ast::num(4u);\n+    let x = ast::num(3us);\n+    let y = ast::num(4us);\n     let z = ast::add(&x, &y);\n     compute(&z);\n }"}, {"sha": "c300c86f70fcac5f16f3ba34ab4d78784e9c19cb", "filename": "src/test/compile-fail/regions-escape-loop-via-variable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-variable.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -9,15 +9,15 @@\n // except according to those terms.\n \n fn main() {\n-    let x = 3i;\n+    let x = 3is;\n \n     // Here, the variable `p` gets inferred to a type with a lifetime\n     // of the loop body.  The regionck then determines that this type\n     // is invalid.\n     let mut p = &x;\n \n     loop {\n-        let x = 1i + *p;\n+        let x = 1is + *p;\n         p = &x; //~ ERROR `x` does not live long enough\n     }\n }"}, {"sha": "5e6e1858cf1c16e681e6f3e3843b9e7b286e49b5", "filename": "src/test/compile-fail/regions-escape-loop-via-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-loop-via-vec.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -10,7 +10,7 @@\n \n // The type of `y` ends up getting inferred to the type of the block.\n fn broken() {\n-    let mut x = 3i;\n+    let mut x = 3is;\n     let mut _y = vec!(&mut x);\n     while x < 10 { //~ ERROR cannot use `x` because it was mutably borrowed\n         let mut z = x; //~ ERROR cannot use `x` because it was mutably borrowed"}, {"sha": "4e99f64dbf7b353cc246398489aa636d11c15d50", "filename": "src/test/compile-fail/regions-infer-proc-static-upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fregions-infer-proc-static-upvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fregions-infer-proc-static-upvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-proc-static-upvar.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -16,7 +16,7 @@ fn foo<F:FnOnce()+'static>(_p: F) { }\n static i: isize = 3;\n \n fn capture_local() {\n-    let x = 3i;\n+    let x = 3is;\n     let y = &x; //~ ERROR `x` does not live long enough\n     foo(move|| {\n         let _a = *y;"}, {"sha": "21586f78db3424afca54de42a9fb54149de8624f", "filename": "src/test/compile-fail/regions-return-ref-to-upvar-issue-17403.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fregions-return-ref-to-upvar-issue-17403.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fregions-return-ref-to-upvar-issue-17403.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-return-ref-to-upvar-issue-17403.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -15,7 +15,7 @@\n fn main() {\n     // Unboxed closure case\n     {\n-        let mut x = 0u;\n+        let mut x = 0us;\n         let mut f = |&mut:| &mut x; //~ ERROR cannot infer\n         let x = f();\n         let y = f();"}, {"sha": "583d9695be4cf22ad1c4eeb71b91e75e71205e5c", "filename": "src/test/compile-fail/regions-steal-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -21,7 +21,7 @@ fn box_it<'r>(x: Box<FnMut() + 'r>) -> closure_box<'r> {\n \n fn main() {\n     let cl_box = {\n-        let mut i = 3i;\n+        let mut i = 3is;\n         box_it(box || i += 1) //~ ERROR cannot infer\n     };\n     cl_box.cl.call_mut(());"}, {"sha": "63052580dc26d2feb4f97a46a889f6651c52365d", "filename": "src/test/compile-fail/regions-trait-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -34,7 +34,7 @@ fn get_v(gc: Box<get_ctxt>) -> usize {\n }\n \n fn main() {\n-    let ctxt = ctxt { v: 22u };\n+    let ctxt = ctxt { v: 22us };\n     let hc = has_ctxt { c: &ctxt };\n-    assert_eq!(get_v(box hc as Box<get_ctxt>), 22u);\n+    assert_eq!(get_v(box hc as Box<get_ctxt>), 22us);\n }"}, {"sha": "8b36e87db3e53741c5b3b14a48f9baf0486b2525", "filename": "src/test/compile-fail/regions-trait-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fregions-trait-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fregions-trait-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-2.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -26,7 +26,7 @@ impl<'a> get_ctxt for has_ctxt<'a> {\n }\n \n fn make_gc() -> @get_ctxt  {\n-    let ctxt = ctxt { v: 22u };\n+    let ctxt = ctxt { v: 22us };\n     let hc = has_ctxt { c: &ctxt };\n     return @hc as @get_ctxt;\n     //~^ ERROR source contains reference"}, {"sha": "039de994ea32dc39baeea7fac5cf91ed4a7112aa", "filename": "src/test/compile-fail/regions-var-type-out-of-scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fregions-var-type-out-of-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fregions-var-type-out-of-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-var-type-out-of-scope.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -14,8 +14,8 @@ fn foo(cond: bool) {\n     let mut x;\n \n     if cond {\n-        x = &3i; //~ ERROR borrowed value does not live long enough\n-        assert_eq!(*x, 3i);\n+        x = &3is; //~ ERROR borrowed value does not live long enough\n+        assert_eq!(*x, 3is);\n     }\n }\n "}, {"sha": "e94bf19955bdc5d6993a4015f5ea07c6f7606d8b", "filename": "src/test/compile-fail/repeat_count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -24,6 +24,6 @@ fn main() {\n     //~^ ERROR: expected `usize`, found `&'static str`\n     let f = [0; -4];\n     //~^ ERROR expected positive integer for repeat count, found negative integer\n-    let f = [0u; -1];\n+    let f = [0us; -1];\n     //~^ ERROR expected positive integer for repeat count, found negative integer\n }"}, {"sha": "57a2744d8f8834bafca3fd06a5f5cba7b92f0ceb", "filename": "src/test/compile-fail/shadowed-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fshadowed-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fshadowed-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fshadowed-lifetime.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -39,5 +39,5 @@ fn main() {\n     // just to ensure that this test fails to compile; when shadowed\n     // lifetimes become either an error or a proper lint, this will\n     // not be needed.\n-    let x: isize = 3u; //~ ERROR mismatched types\n+    let x: isize = 3us; //~ ERROR mismatched types\n }"}, {"sha": "e988cfb9097eaa7d4d5ce6785f695b6de8817181", "filename": "src/test/compile-fail/static-assert2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fstatic-assert2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fstatic-assert2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-assert2.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -11,6 +11,6 @@\n #![allow(dead_code)]\n \n #[static_assert]\n-static E: bool = 1i == 2; //~ ERROR static assertion failed\n+static E: bool = 1is == 2; //~ ERROR static assertion failed\n \n fn main() {}"}, {"sha": "bfdeff6ed7083681187387579ee82e158960a11f", "filename": "src/test/compile-fail/static-mut-not-pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-mut-not-pat.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -19,7 +19,7 @@ fn main() {\n     // name as a variable, hence this should be an unreachable pattern situation\n     // instead of spitting out a custom error about some identifier collisions\n     // (we should allow shadowing)\n-    match 4i {\n+    match 4is {\n         a => {} //~ ERROR static variables cannot be referenced in a pattern\n         _ => {}\n     }"}, {"sha": "4c59e7a769fbf81577c103fb4e74df8abcce6dd5", "filename": "src/test/compile-fail/static-region-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-region-bound.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -13,8 +13,8 @@\n fn f<T:'static>(_: T) {}\n \n fn main() {\n-    let x = box 3i;\n+    let x = box 3is;\n     f(x);\n-    let x = &3i; //~ ERROR borrowed value does not live long enough\n+    let x = &3is; //~ ERROR borrowed value does not live long enough\n     f(x);\n }"}, {"sha": "a934bbe61c4340ac0e6c2f847c9af721250ebeab", "filename": "src/test/compile-fail/tail-typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Ftail-typeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Ftail-typeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftail-typeck.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -12,6 +12,6 @@\n \n fn f() -> isize { return g(); }\n \n-fn g() -> usize { return 0u; }\n+fn g() -> usize { return 0us; }\n \n fn main() { let y = f(); }"}, {"sha": "069c2e88793daca3f866f1386b2ced4031d71e8b", "filename": "src/test/compile-fail/trailing-plus-in-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Ftrailing-plus-in-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Ftrailing-plus-in-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrailing-plus-in-bounds.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -11,7 +11,7 @@\n use std::fmt::Show;\n \n fn main() {\n-    let x: Box<Show+> = box 3i as Box<Show+>;\n+    let x: Box<Show+> = box 3is as Box<Show+>;\n     //~^ ERROR at least one type parameter bound must be specified\n     //~^^ ERROR at least one type parameter bound must be specified\n }"}, {"sha": "45a74a235e0e26a051cbf97ed5266138e30e5616", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums-locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-locals.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -17,7 +17,7 @@ struct Foo<T:Trait> {\n fn main() {\n     let foo = Foo {\n     //~^ ERROR not implemented\n-        x: 3i\n+        x: 3is\n     };\n \n     let baz: Foo<usize> = panic!();"}, {"sha": "6179301c11da14fa6cee477ccbe9d820ca9f6743", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums-xc1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-xc1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-xc1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums-xc1.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -17,7 +17,7 @@ use trait_bounds_on_structs_and_enums_xc::{Bar, Foo, Trait};\n fn main() {\n     let foo = Foo {\n     //~^ ERROR not implemented\n-        x: 3i\n+        x: 3is\n     };\n     let bar: Bar<f64> = return;\n     //~^ ERROR not implemented"}, {"sha": "bdfc6dcda8837e8119e96ae555c7cc53a8ced0d6", "filename": "src/test/compile-fail/trait-test-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -15,7 +15,7 @@ impl bar for isize { fn dup(&self) -> isize { *self } fn blah<X>(&self) {} }\n impl bar for usize { fn dup(&self) -> usize { *self } fn blah<X>(&self) {} }\n \n fn main() {\n-    10i.dup::<isize>(); //~ ERROR does not take type parameters\n-    10i.blah::<isize, isize>(); //~ ERROR incorrect number of type parameters\n-    (box 10i as Box<bar>).dup(); //~ ERROR cannot convert to a trait object\n+    10is.dup::<isize>(); //~ ERROR does not take type parameters\n+    10is.blah::<isize, isize>(); //~ ERROR incorrect number of type parameters\n+    (box 10is as Box<bar>).dup(); //~ ERROR cannot convert to a trait object\n }"}, {"sha": "e9a4005b4b4f228ffe2755a41e19bff539cdb863", "filename": "src/test/compile-fail/traits-multidispatch-bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-bad.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -26,7 +26,7 @@ where T : Convert<U>\n }\n \n fn a() {\n-    test(22i, 44i); //~ ERROR not implemented\n+    test(22is, 44is); //~ ERROR not implemented\n }\n \n fn main() {}"}, {"sha": "a9113c6e99f43fa780b0b2f320dccc72df95c2fb", "filename": "src/test/compile-fail/typeck-unsafe-always-share.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-unsafe-always-share.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -28,7 +28,7 @@ fn test<T: Sync>(s: T){\n }\n \n fn main() {\n-    let us = UnsafeCell::new(MySync{u: UnsafeCell::new(0i)});\n+    let us = UnsafeCell::new(MySync{u: UnsafeCell::new(0is)});\n     test(us);\n     //~^ ERROR `core::marker::Sync` is not implemented\n "}, {"sha": "d69c0dc5d1fa8dd65292fbf375c66834e5ef2c48", "filename": "src/test/compile-fail/typeck_type_placeholder_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_item.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -14,7 +14,7 @@\n fn test() -> _ { 5 }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n-fn test2() -> (_, _) { (5u, 5u) }\n+fn test2() -> (_, _) { (5us, 5us) }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n@@ -67,7 +67,7 @@ pub fn main() {\n     fn fn_test() -> _ { 5 }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n-    fn fn_test2() -> (_, _) { (5u, 5u) }\n+    fn fn_test2() -> (_, _) { (5us, 5us) }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n     //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n "}, {"sha": "e1d17e4fef7b0678ebe7e9c5c4562ac9575e9521", "filename": "src/test/compile-fail/typeck_type_placeholder_lifetime_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_1.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -16,6 +16,6 @@ struct Foo<'a, T:'a> {\n }\n \n pub fn main() {\n-    let c: Foo<_, _> = Foo { r: &5u };\n+    let c: Foo<_, _> = Foo { r: &5us };\n     //~^ ERROR wrong number of type arguments: expected 1, found 2\n }"}, {"sha": "d489c3a64fabd96308e892733e28bddd030a53c6", "filename": "src/test/compile-fail/unboxed-closure-illegal-move.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Funboxed-closure-illegal-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Funboxed-closure-illegal-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-illegal-move.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -18,28 +18,28 @@\n fn main() {\n     // By-ref cases\n     {\n-        let x = box 0u;\n+        let x = box 0us;\n         let f = |&:| drop(x); //~ cannot move\n     }\n     {\n-        let x = box 0u;\n+        let x = box 0us;\n         let f = |&mut:| drop(x); //~ cannot move\n     }\n     {\n-        let x = box 0u;\n+        let x = box 0us;\n         let f = |:| drop(x); //~ cannot move\n     }\n     // By-value cases\n     {\n-        let x = box 0u;\n+        let x = box 0us;\n         let f = move |&:| drop(x); //~ cannot move\n     }\n     {\n-        let x = box 0u;\n+        let x = box 0us;\n         let f = move |&mut:| drop(x); //~ cannot move\n     }\n     {\n-        let x = box 0u;\n+        let x = box 0us;\n         let f = move |:| drop(x); // this one is ok\n     }\n }"}, {"sha": "ebdd3c3107f3f58f871b01adf5a6744e2e40fd4e", "filename": "src/test/compile-fail/unboxed-closure-immutable-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Funboxed-closure-immutable-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Funboxed-closure-immutable-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-immutable-capture.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -17,7 +17,7 @@\n fn set(x: &mut usize) { *x = 0; }\n \n fn main() {\n-    let x = 0u;\n+    let x = 0us;\n     move |&mut:| x = 1; //~ ERROR cannot assign\n     move |&mut:| set(&mut x); //~ ERROR cannot borrow\n     move |:| x = 1; //~ ERROR cannot assign"}, {"sha": "9d9667986949ead5c27afaf8560ed5cad542f254", "filename": "src/test/compile-fail/unboxed-closure-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Funboxed-closure-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Funboxed-closure-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-region.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -14,7 +14,7 @@\n // reference cannot escape the region of that variable.\n fn main() {\n     let _f = {\n-        let x = 0u;\n+        let x = 0us;\n         |:| x //~ ERROR cannot infer an appropriate lifetime due to conflicting requirements\n     };\n }"}, {"sha": "bb92e57d70c0e7d3bacbe73d91cf0d390cf3bbfe", "filename": "src/test/compile-fail/unboxed-closures-borrow-conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Funboxed-closures-borrow-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Funboxed-closures-borrow-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-borrow-conflict.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -14,7 +14,7 @@\n // cause borrow conflicts.\n \n fn main() {\n-    let mut x = 0u;\n+    let mut x = 0us;\n     let f = |:| x += 1;\n     let _y = x; //~ ERROR cannot use `x` because it was mutably borrowed\n }"}, {"sha": "525d0b31995c218f8806f5e28c000a9e5058d686", "filename": "src/test/compile-fail/unboxed-closures-infer-argument-types-two-region-pointers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-argument-types-two-region-pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-argument-types-two-region-pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-argument-types-two-region-pointers.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -23,7 +23,7 @@ fn doit<T,F>(val: T, f: &F)\n }\n \n pub fn main() {\n-    doit(0i, &|&: x, y| {\n+    doit(0is, &|&: x, y| {\n         x.set(y); //~ ERROR cannot infer\n     });\n }"}, {"sha": "22bfabf040ae41c9d93c2e2f153563a780678133", "filename": "src/test/compile-fail/unboxed-closures-static-call-wrong-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Funboxed-closures-static-call-wrong-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Funboxed-closures-static-call-wrong-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-static-call-wrong-trait.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -12,6 +12,6 @@\n \n fn main() {\n     let mut_ = |&mut: x| x;\n-    mut_.call((0i, )); //~ ERROR does not implement any method in scope named `call`\n+    mut_.call((0is, )); //~ ERROR does not implement any method in scope named `call`\n }\n "}, {"sha": "f7ac2274ffb3a60ce97863951a0911a9ea708e82", "filename": "src/test/compile-fail/unboxed-closures-type-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Funboxed-closures-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Funboxed-closures-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-type-mismatch.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -14,6 +14,6 @@ use std::ops::FnMut;\n \n pub fn main() {\n     let mut f = |&mut: x: isize, y: isize| -> isize { x + y };\n-    let z = f(1u, 2);    //~ ERROR mismatched types\n+    let z = f(1us, 2);    //~ ERROR mismatched types\n     println!(\"{}\", z);\n }"}, {"sha": "4b7f11b05609ceb2c162fd4ebe4a12cf2c4b8335", "filename": "src/test/compile-fail/unique-unique-kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -16,7 +16,7 @@ fn f<T:Send>(_i: T) {\n }\n \n fn main() {\n-    let i = box Rc::new(100i);\n+    let i = box Rc::new(100is);\n     f(i);\n     //~^ ERROR `core::marker::Send` is not implemented\n     //~^^ ERROR `core::marker::Send` is not implemented"}, {"sha": "f403457efbc1bf1accca6275617916b5f3b178bf", "filename": "src/test/compile-fail/unreachable-arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Funreachable-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Funreachable-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-arm.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -14,4 +14,4 @@\n \n enum foo { a(Box<foo>, isize), b(usize), }\n \n-fn main() { match foo::b(1u) { foo::b(_) | foo::a(box _, 1) => { } foo::a(_, 1) => { } } }\n+fn main() { match foo::b(1us) { foo::b(_) | foo::a(box _, 1) => { } foo::a(_, 1) => { } } }"}, {"sha": "d96578f2df94a60b7420d553d48fcc3d16e4fcd7", "filename": "src/test/compile-fail/unreachable-code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Funreachable-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Funreachable-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-code.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -14,5 +14,5 @@\n fn main() {\n   loop{}\n \n-  let a = 3i; //~ ERROR: unreachable statement\n+  let a = 3is; //~ ERROR: unreachable statement\n }"}, {"sha": "9d4cfe0f4ac6563e6626bbda7104c3c72d41a8cc", "filename": "src/test/compile-fail/unsized3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Funsized3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized3.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -55,12 +55,12 @@ fn f8<X: ?Sized>(x1: &S<X>, x2: &S<X>) {\n \n // Test some tuples.\n fn f9<X: ?Sized>(x1: Box<S<X>>, x2: Box<E<X>>) {\n-    f5(&(*x1, 34i));\n+    f5(&(*x1, 34is));\n     //~^ ERROR the trait `core::marker::Sized` is not implemented\n }\n \n fn f10<X: ?Sized>(x1: Box<S<X>>, x2: Box<E<X>>) {\n-    f5(&(32i, *x2));\n+    f5(&(32is, *x2));\n     //~^ ERROR the trait `core::marker::Sized` is not implemented\n }\n "}, {"sha": "21953d1bb09f9e2617ada2cd6d85e11ee36e85e8", "filename": "src/test/compile-fail/unsized6.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized6.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -27,12 +27,12 @@ fn f2<X: ?Sized + T>(x: &X) {\n fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n     let y: X = *x1; //~ERROR the trait `core::marker::Sized` is not implemented\n     let y = *x2; //~ERROR the trait `core::marker::Sized` is not implemented\n-    let (y, z) = (*x3, 4i); //~ERROR the trait `core::marker::Sized` is not implemented\n+    let (y, z) = (*x3, 4is); //~ERROR the trait `core::marker::Sized` is not implemented\n }\n fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n     let y: X = *x1;         //~ERROR the trait `core::marker::Sized` is not implemented\n     let y = *x2;            //~ERROR the trait `core::marker::Sized` is not implemented\n-    let (y, z) = (*x3, 4i); //~ERROR the trait `core::marker::Sized` is not implemented\n+    let (y, z) = (*x3, 4is); //~ERROR the trait `core::marker::Sized` is not implemented\n }\n \n fn g1<X: ?Sized>(x: X) {} //~ERROR the trait `core::marker::Sized` is not implemented"}, {"sha": "aa5adb6a6b0cda28d1c9874c4f00d28ca9c46716", "filename": "src/test/compile-fail/unused-mut-warning-captured-var.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Funused-mut-warning-captured-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Funused-mut-warning-captured-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-mut-warning-captured-var.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -11,7 +11,7 @@\n #![forbid(unused_mut)]\n \n fn main() {\n-    let mut x = 1i;\n+    let mut x = 1is;\n     //~^ ERROR: variable does not need to be mutable\n     move|:| { println!(\"{}\", x); };\n }"}, {"sha": "2715b31d1960edeb448cf4cdb2095d08c7b8d6f5", "filename": "src/test/compile-fail/vec-matching-obsolete-syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fvec-matching-obsolete-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fvec-matching-obsolete-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-matching-obsolete-syntax.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let x = [1i, 2, 3];\n+    let x = [1is, 2, 3];\n     match x {\n         [a, b, ..c] => {    //~ ERROR obsolete syntax\n             assert_eq!(a, 1);"}, {"sha": "59c490f2fff27990207578e844d994fd04fead78", "filename": "src/test/compile-fail/vec-mut-iter-borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fvec-mut-iter-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fvec-mut-iter-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-mut-iter-borrow.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -12,6 +12,6 @@ fn main() {\n     let mut xs: Vec<isize> = vec!();\n \n     for x in xs.iter_mut() {\n-        xs.push(1i) //~ ERROR cannot borrow `xs`\n+        xs.push(1is) //~ ERROR cannot borrow `xs`\n     }\n }"}, {"sha": "bbe88379aa7374c68a87221ce6da6266ce3eb5e3", "filename": "src/test/compile-fail/vtable-res-trait-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -23,11 +23,11 @@ impl TraitB for isize {\n }\n \n fn call_it<B:TraitB>(b: B)  -> isize {\n-    let y = 4u;\n+    let y = 4us;\n     b.gimme_an_a(y) //~ ERROR the trait `TraitA` is not implemented\n }\n \n fn main() {\n-    let x = 3i;\n+    let x = 3is;\n     assert_eq!(call_it(x), 22);\n }"}, {"sha": "304900df776c19c3b050a97194ff73f3d7eab853", "filename": "src/test/compile-fail/warn-path-statement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fwarn-path-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fwarn-path-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-path-statement.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -11,6 +11,6 @@\n // compile-flags: -D path-statement\n fn main() {\n \n-    let x = 10i;\n+    let x = 10is;\n     x; //~ ERROR path statement with no effect\n }"}, {"sha": "5573464c5ab6cad771d4e2e594b9a95d7a2ec6f0", "filename": "src/test/compile-fail/where-clauses-not-parameter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-not-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-not-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-not-parameter.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -41,5 +41,5 @@ impl Baz<isize> for isize where isize : Eq {\n }\n \n fn main() {\n-    equal(&0i, &0i);\n+    equal(&0is, &0is);\n }"}, {"sha": "45e0d0aaeab13d600283132d6dad817b44906b20", "filename": "src/test/compile-fail/while-let.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fwhile-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441044f071181b52144bad15a50bf91dc06771a5/src%2Ftest%2Fcompile-fail%2Fwhile-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhile-let.rs?ref=441044f071181b52144bad15a50bf91dc06771a5", "patch": "@@ -20,16 +20,16 @@ fn macros() {\n         }}\n     }\n \n-    foo!(a, 1i, { //~ ERROR irrefutable while-let\n+    foo!(a, 1is, { //~ ERROR irrefutable while-let\n         println!(\"irrefutable pattern\");\n     });\n-    bar!(a, 1i, { //~ ERROR irrefutable while-let\n+    bar!(a, 1is, { //~ ERROR irrefutable while-let\n         println!(\"irrefutable pattern\");\n     });\n }\n \n pub fn main() {\n-    while let a = 1i { //~ ERROR irrefutable while-let\n+    while let a = 1is { //~ ERROR irrefutable while-let\n         println!(\"irrefutable pattern\");\n     }\n }"}]}