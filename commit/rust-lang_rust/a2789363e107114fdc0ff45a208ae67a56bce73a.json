{"sha": "a2789363e107114fdc0ff45a208ae67a56bce73a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNzg5MzYzZTEwNzExNGZkYzBmZjQ1YTIwOGFlNjdhNTZiY2U3M2E=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-01-07T06:39:58Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-01-30T20:55:27Z"}, "message": "Reenable xfailed tests for rustboot that pass with trivial or no modifications", "tree": {"sha": "d64f47d05cadf737dc5eaeb817c3c258b043195a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d64f47d05cadf737dc5eaeb817c3c258b043195a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2789363e107114fdc0ff45a208ae67a56bce73a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2789363e107114fdc0ff45a208ae67a56bce73a", "html_url": "https://github.com/rust-lang/rust/commit/a2789363e107114fdc0ff45a208ae67a56bce73a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2789363e107114fdc0ff45a208ae67a56bce73a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf9cebfc0637b8c9937bbf77fcdc12265b18ce9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf9cebfc0637b8c9937bbf77fcdc12265b18ce9c", "html_url": "https://github.com/rust-lang/rust/commit/bf9cebfc0637b8c9937bbf77fcdc12265b18ce9c"}], "stats": {"total": 65, "additions": 25, "deletions": 40}, "files": [{"sha": "10031537cf374edaeb3fddc1962af6a50960f306", "filename": "src/Makefile", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a2789363e107114fdc0ff45a208ae67a56bce73a/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/a2789363e107114fdc0ff45a208ae67a56bce73a/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=a2789363e107114fdc0ff45a208ae67a56bce73a", "patch": "@@ -375,20 +375,11 @@ CONST_TAG_XFAILS := test/run-pass/generic-tag.rs\n # Temporarily xfail some of the task tests, while debugging the\n # overhauled inter-domain messaging system.\n \n-TASK_XFAILS := test/run-pass/task-comm-8.rs \\\n-               test/run-pass/task-comm-10.rs \\\n-               test/run-pass/task-comm-15.rs \\\n-               test/run-pass/task-comm-12.rs \\\n-               test/run-pass/task-comm-2.rs \\\n-               test/run-pass/task-comm-9.rs \\\n-               test/run-pass/task-life-0.rs \\\n-               test/run-pass/alt-type-simple.rs \\\n-               test/run-pass/many.rs\n+TASK_XFAILS := test/run-pass/alt-type-simple.rs\n \n TEST_XFAILS_BOOT :=  $(TASK_XFAILS) \\\n                     $(NOMINAL_TAG_XFAILS) \\\n                     $(CONST_TAG_XFAILS) \\\n-                    test/run-pass/child-outlives-parent.rs \\\n                     test/run-pass/clone-with-exterior.rs \\\n                     test/run-pass/constrained-type.rs \\\n                     test/run-pass/destructor-ordering.rs \\\n@@ -398,12 +389,8 @@ TEST_XFAILS_BOOT :=  $(TASK_XFAILS) \\\n                     test/run-pass/generic-recursive-tag.rs \\\n                     test/run-pass/generic-tup.rs \\\n                     test/run-pass/iter-ret.rs \\\n-                    test/run-pass/lib-io.rs \\\n                     test/run-pass/mlist-cycle.rs \\\n-                    test/run-pass/obj-as.rs \\\n                     test/run-pass/task-comm.rs \\\n-                    test/run-pass/task-comm-3.rs \\\n-                    test/run-pass/vec-slice.rs \\\n                     test/run-pass/while-and-do-while.rs \\\n                     test/run-fail/task-comm-14.rs \\\n                     test/compile-fail/bad-expr-path.rs \\\n@@ -412,9 +399,7 @@ TEST_XFAILS_BOOT :=  $(TASK_XFAILS) \\\n                     test/compile-fail/import3.rs \\\n                     test/compile-fail/import4.rs \\\n                     test/compile-fail/bad-recv.rs \\\n-                    test/compile-fail/bad-send.rs \\\n-                    test/compile-fail/infinite-vec-type-recursion.rs \\\n-                    test/compile-fail/writing-through-read-alias.rs\n+                    test/compile-fail/bad-send.rs\n \n # Same strategy here for the time being: just list the ones that\n # work and assume the others don't. Invert this when we're closer"}, {"sha": "9315488b0562e769542b61b64cc6266db5789af5", "filename": "src/test/compile-fail/infinite-vec-type-recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2789363e107114fdc0ff45a208ae67a56bce73a/src%2Ftest%2Fcompile-fail%2Finfinite-vec-type-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2789363e107114fdc0ff45a208ae67a56bce73a/src%2Ftest%2Fcompile-fail%2Finfinite-vec-type-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-vec-type-recursion.rs?ref=a2789363e107114fdc0ff45a208ae67a56bce73a", "patch": "@@ -1,6 +1,6 @@\n // -*- rust -*-\n \n-// error-pattern: Infinite type recursion\n+// error-pattern: infinite recursive type definition\n \n type x = vec[x];\n "}, {"sha": "2c3d642523e61105e87dc39c778c3ab35a710ccb", "filename": "src/test/run-pass/many.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2789363e107114fdc0ff45a208ae67a56bce73a/src%2Ftest%2Frun-pass%2Fmany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2789363e107114fdc0ff45a208ae67a56bce73a/src%2Ftest%2Frun-pass%2Fmany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmany.rs?ref=a2789363e107114fdc0ff45a208ae67a56bce73a", "patch": "@@ -1,6 +1,6 @@\n // -*- rust -*-\n \n-io fn sub(chan[int] parent, int id) {\n+impure fn sub(chan[int] parent, int id) {\n   if (id == 0) {\n     parent <| 0;\n   } else {\n@@ -11,7 +11,7 @@ io fn sub(chan[int] parent, int id) {\n   }\n }\n \n-io fn main() {\n+impure fn main() {\n   let port[int] p = port();\n   auto child = spawn sub(chan(p), 500);\n   let int y <- p;"}, {"sha": "e0164596390da809978b6e70b649c8dee81bbd64", "filename": "src/test/run-pass/task-comm-10.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2789363e107114fdc0ff45a208ae67a56bce73a/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2789363e107114fdc0ff45a208ae67a56bce73a/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs?ref=a2789363e107114fdc0ff45a208ae67a56bce73a", "patch": "@@ -1,11 +1,11 @@\n-io fn start(chan[chan[str]] c) {\n+impure fn start(chan[chan[str]] c) {\n     let port[str] p = port();\n     c <| chan(p);\n     auto a <- p;\n     // auto b <- p; // Never read the second string.\n }\n \n-io fn main() {\n+impure fn main() {\n     let port[chan[str]] p = port();\n     auto child = spawn \"start\" start(chan(p));\n     auto c <- p;"}, {"sha": "b5bd733144c338332d68c392391bdb3c6a800ff7", "filename": "src/test/run-pass/task-comm-15.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2789363e107114fdc0ff45a208ae67a56bce73a/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2789363e107114fdc0ff45a208ae67a56bce73a/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs?ref=a2789363e107114fdc0ff45a208ae67a56bce73a", "patch": "@@ -1,4 +1,4 @@\n-io fn start(chan[int] c, int n) {\n+impure fn start(chan[int] c, int n) {\n     let int i = n;\n \n     while(i > 0) {\n@@ -7,7 +7,7 @@ io fn start(chan[int] c, int n) {\n     }\n }\n \n-io fn main() {\n+impure fn main() {\n     let port[int] p = port();\n     // Spawn a task that sends us back messages. The parent task\n     // is likely to terminate before the child completes, so from"}, {"sha": "d833c3a5810332af85f7b46eeec713ef94f0425c", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2789363e107114fdc0ff45a208ae67a56bce73a/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2789363e107114fdc0ff45a208ae67a56bce73a/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=a2789363e107114fdc0ff45a208ae67a56bce73a", "patch": "@@ -1,11 +1,11 @@\n-io fn main() -> () {\n+impure fn main() -> () {\n    log \"===== WITHOUT THREADS =====\";\n    test00(false);\n    log \"====== WITH THREADS ======\";\n    test00(true);\n }\n \n-io fn test00_start(chan[int] ch, int message, int count) {\n+impure fn test00_start(chan[int] ch, int message, int count) {\n     log \"Starting test00_start\";\n     let int i = 0;\n     while (i < count) {\n@@ -16,7 +16,7 @@ io fn test00_start(chan[int] ch, int message, int count) {\n     log \"Ending test00_start\";\n }\n \n-io fn test00(bool is_multithreaded) {\n+impure fn test00(bool is_multithreaded) {\n     let int number_of_tasks = 16;\n     let int number_of_messages = 4;\n     "}, {"sha": "87fa3d895489d9214a8d9381b1d9964eee42e668", "filename": "src/test/run-pass/task-comm-8.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2789363e107114fdc0ff45a208ae67a56bce73a/src%2Ftest%2Frun-pass%2Ftask-comm-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2789363e107114fdc0ff45a208ae67a56bce73a/src%2Ftest%2Frun-pass%2Ftask-comm-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-8.rs?ref=a2789363e107114fdc0ff45a208ae67a56bce73a", "patch": "@@ -1,16 +1,16 @@\n-io fn main() -> () {\n+impure fn main() -> () {\n    test00();\n }\n \n-io fn test00_start(chan[int] c, int start, int number_of_messages) {\n+impure fn test00_start(chan[int] c, int start, int number_of_messages) {\n     let int i = 0;\n     while (i < number_of_messages) {\n         c <| start + i;\n         i += 1;\n     }    \n }\n \n-io fn test00() {\n+impure fn test00() {\n     let int r = 0;    \n     let int sum = 0;\n     let port[int] p = port();"}, {"sha": "370a36e34b83d926d9d1dd043116a1f77e4d03af", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2789363e107114fdc0ff45a208ae67a56bce73a/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2789363e107114fdc0ff45a208ae67a56bce73a/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=a2789363e107114fdc0ff45a208ae67a56bce73a", "patch": "@@ -1,16 +1,16 @@\n-io fn main() -> () {\n+impure fn main() -> () {\n    test00();\n }\n \n-io fn test00_start(chan[int] c, int number_of_messages) {\n+impure fn test00_start(chan[int] c, int number_of_messages) {\n     let int i = 0;\n     while (i < number_of_messages) {\n         c <| i;\n         i += 1;\n     }    \n }\n \n-io fn test00() {\n+impure fn test00() {\n     let int r = 0;    \n     let int sum = 0;\n     let port[int] p = port();"}, {"sha": "d5f9a3a0dae2030df0c0ce9824a7ca4711bdce8b", "filename": "src/test/run-pass/task-comm.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a2789363e107114fdc0ff45a208ae67a56bce73a/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2789363e107114fdc0ff45a208ae67a56bce73a/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm.rs?ref=a2789363e107114fdc0ff45a208ae67a56bce73a", "patch": "@@ -1,5 +1,5 @@\n \n-io fn main() -> () {\n+impure fn main() -> () {\n     test00(true);\n     // test01();\n     test02();\n@@ -9,7 +9,7 @@ io fn main() -> () {\n     test06();\n }\n \n-io fn test00_start(chan[int] ch, int message, int count) {\n+impure fn test00_start(chan[int] ch, int message, int count) {\n     log \"Starting test00_start\";\n     let int i = 0;\n     while (i < count) {\n@@ -20,7 +20,7 @@ io fn test00_start(chan[int] ch, int message, int count) {\n     log \"Ending test00_start\";\n }\n \n-io fn test00(bool is_multithreaded) {\n+impure fn test00(bool is_multithreaded) {\n     let int number_of_tasks = 1;\n     let int number_of_messages = 4;\n     log \"Creating tasks\";\n@@ -60,14 +60,14 @@ io fn test00(bool is_multithreaded) {\n            (number_of_tasks * number_of_tasks + number_of_tasks) / 2);\n }\n \n-io fn test01() {\n+impure fn test01() {\n     let port[int] p = port();\n     log \"Reading from a port that is never written to.\";\n     let int value <- p;\n     log value;\n }\n \n-io fn test02() {\n+impure fn test02() {\n     let port[int] p = port();\n     let chan[int] c = chan(p);\n     log \"Writing to a local task channel.\";\n@@ -111,15 +111,15 @@ fn test04() {\n     log \"Finishing up.\";\n }\n \n-io fn test05_start(chan[int] ch) {\n+impure fn test05_start(chan[int] ch) {\n     ch <| 10;\n     ch <| 20;\n     ch <| 30;\n     ch <| 30;\n     ch <| 30;    \n }\n \n-io fn test05() {\n+impure fn test05() {\n     let port[int] po = port();\n     let chan[int] ch = chan(po);\n     spawn thread test05_start(ch);"}]}