{"sha": "71fd3abc73471bf1b68666c980d73c4385e5e9a7", "node_id": "C_kwDOAAsO6NoAKDcxZmQzYWJjNzM0NzFiZjFiNjg2NjZjOTgwZDczYzQzODVlNWU5YTc", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-11-26T20:00:39Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-11-26T20:50:01Z"}, "message": "Don't update submodules for `x setup`\n\nBefore, the submodule handling was very jank and would update *between two interactive prompts*:\n```\n; x setup\nBuilding rustbuild\n    Finished dev [unoptimized] target(s) in 0.05s\nWelcome to the Rust project! What do you want to do with x.py?\na) library: Contribute to the standard library\nPlease choose one (a/b/c/d/e): a\nUpdating submodule library/backtrace\nSubmodule 'library/backtrace' (https://github.com/rust-lang/backtrace-rs.git) registered for path 'library/backtrace'\nerror: you asked `x.py` to setup a new config file, but one already exists at `config.toml`\nBuild completed unsuccessfully in 0:00:02\n```\n\nThat's not a great user experience because you need to wait a long time between prompts.\nIt would be possible to move the submodule handling either before or after the prompt, but it seems\nbetter to just not require submodules to be checked out at all, to minimize the time spend waiting\njust to create a new configuration.", "tree": {"sha": "497f40a597262c48e17bce02cb87f316fb2cc7dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/497f40a597262c48e17bce02cb87f316fb2cc7dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71fd3abc73471bf1b68666c980d73c4385e5e9a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71fd3abc73471bf1b68666c980d73c4385e5e9a7", "html_url": "https://github.com/rust-lang/rust/commit/71fd3abc73471bf1b68666c980d73c4385e5e9a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71fd3abc73471bf1b68666c980d73c4385e5e9a7/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8841bee954ecf0e6820c9990feb3a76cb04e7d96", "url": "https://api.github.com/repos/rust-lang/rust/commits/8841bee954ecf0e6820c9990feb3a76cb04e7d96", "html_url": "https://github.com/rust-lang/rust/commit/8841bee954ecf0e6820c9990feb3a76cb04e7d96"}], "stats": {"total": 56, "additions": 32, "deletions": 24}, "files": [{"sha": "37a8eb884efb02beba7ca57c462108a1bca96ae1", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/71fd3abc73471bf1b68666c980d73c4385e5e9a7/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71fd3abc73471bf1b68666c980d73c4385e5e9a7/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=71fd3abc73471bf1b68666c980d73c4385e5e9a7", "patch": "@@ -143,7 +143,7 @@ pub enum Subcommand {\n         args: Vec<String>,\n     },\n     Setup {\n-        profile: Profile,\n+        profile: Option<Profile>,\n     },\n }\n \n@@ -628,14 +628,15 @@ Arguments:\n                         |path| format!(\"{} is not a valid UTF8 string\", path.to_string_lossy())\n                     ));\n \n-                    profile_string.parse().unwrap_or_else(|err| {\n+                    let profile = profile_string.parse().unwrap_or_else(|err| {\n                         eprintln!(\"error: {}\", err);\n                         eprintln!(\"help: the available profiles are:\");\n                         eprint!(\"{}\", Profile::all_for_help(\"- \"));\n                         crate::detail_exit(1);\n-                    })\n+                    });\n+                    Some(profile)\n                 } else {\n-                    t!(crate::setup::interactive_path())\n+                    None\n                 };\n                 Subcommand::Setup { profile }\n             }"}, {"sha": "60ce431cb0c39d7bfbc800daea4c9763f965e8fd", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/71fd3abc73471bf1b68666c980d73c4385e5e9a7/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71fd3abc73471bf1b68666c980d73c4385e5e9a7/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=71fd3abc73471bf1b68666c980d73c4385e5e9a7", "patch": "@@ -542,16 +542,6 @@ impl Build {\n             metrics: metrics::BuildMetrics::init(),\n         };\n \n-        build.verbose(\"finding compilers\");\n-        cc_detect::find(&mut build);\n-        // When running `setup`, the profile is about to change, so any requirements we have now may\n-        // be different on the next invocation. Don't check for them until the next time x.py is\n-        // run. This is ok because `setup` never runs any build commands, so it won't fail if commands are missing.\n-        if !matches!(build.config.cmd, Subcommand::Setup { .. }) {\n-            build.verbose(\"running sanity check\");\n-            sanity::check(&mut build);\n-        }\n-\n         // If local-rust is the same major.minor as the current version, then force a\n         // local-rebuild\n         let local_version_verbose =\n@@ -567,16 +557,32 @@ impl Build {\n             build.local_rebuild = true;\n         }\n \n-        // Make sure we update these before gathering metadata so we don't get an error about missing\n-        // Cargo.toml files.\n-        let rust_submodules =\n-            [\"src/tools/rust-installer\", \"src/tools/cargo\", \"library/backtrace\", \"library/stdarch\"];\n-        for s in rust_submodules {\n-            build.update_submodule(Path::new(s));\n-        }\n+        build.verbose(\"finding compilers\");\n+        cc_detect::find(&mut build);\n+        // When running `setup`, the profile is about to change, so any requirements we have now may\n+        // be different on the next invocation. Don't check for them until the next time x.py is\n+        // run. This is ok because `setup` never runs any build commands, so it won't fail if commands are missing.\n+        //\n+        // Similarly, for `setup` we don't actually need submodules or cargo metadata.\n+        if !matches!(build.config.cmd, Subcommand::Setup { .. }) {\n+            build.verbose(\"running sanity check\");\n+            sanity::check(&mut build);\n \n-        build.verbose(\"learning about cargo\");\n-        metadata::build(&mut build);\n+            // Make sure we update these before gathering metadata so we don't get an error about missing\n+            // Cargo.toml files.\n+            let rust_submodules = [\n+                \"src/tools/rust-installer\",\n+                \"src/tools/cargo\",\n+                \"library/backtrace\",\n+                \"library/stdarch\",\n+            ];\n+            for s in rust_submodules {\n+                build.update_submodule(Path::new(s));\n+            }\n+\n+            build.verbose(\"learning about cargo\");\n+            metadata::build(&mut build);\n+        }\n \n         build\n     }"}, {"sha": "2507b7a29b06f4ea38abf0940dff42137fd7ba25", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71fd3abc73471bf1b68666c980d73c4385e5e9a7/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71fd3abc73471bf1b68666c980d73c4385e5e9a7/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=71fd3abc73471bf1b68666c980d73c4385e5e9a7", "patch": "@@ -81,8 +81,9 @@ impl fmt::Display for Profile {\n     }\n }\n \n-pub fn setup(config: &Config, profile: Profile) {\n+pub fn setup(config: &Config, profile: Option<Profile>) {\n     let path = &config.config.clone().unwrap_or(PathBuf::from(\"config.toml\"));\n+    let profile = profile.unwrap_or_else(|| t!(interactive_path()));\n \n     if path.exists() {\n         eprintln!("}]}