{"sha": "189ac4abbf6037419cb195c0a36a179544496ced", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4OWFjNGFiYmY2MDM3NDE5Y2IxOTVjMGEzNmExNzk1NDQ0OTZjZWQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-23T19:24:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-23T19:24:20Z"}, "message": "Merge #4108\n\n4108: Fully get rid of SyntaxNodePtr::range r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "e9b7f3efaa7997bedfdd8dab39d93026d26040a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9b7f3efaa7997bedfdd8dab39d93026d26040a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/189ac4abbf6037419cb195c0a36a179544496ced", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeoetkCRBK7hj4Ov3rIwAAdHIIAGlX0Tjxzc5xq6pFmE72KmFF\npz9niiYMd6C6Tmc5OsrZ86qECL70utAI4YEVX6daIT/5lNjqAQd8somR6TV3MqW/\nYjO9FlW58MZprjZG2uVpyBoNXpI9mkH4nny4qnuNL23UPAlRxpxWWteMmPCs1NWy\nMNE/1OwlGxVOS/wdqQEWk9nxFaPrUptpHfrQARmOJkfP6ljJyMZ8OnhKZyIeUXgM\nwXG+Zs8P8vyh9jMvs4vLB56GdLn+lKF/RWnDVyKq4sF4CQ8MJkIGRXC/R392rCFU\nb9UgshbUSYRdHdO+4EAXmMjOlPknPlY47IVv8PkzkkEIF45WIe8IfZrIGmfIcz0=\n=EzA5\n-----END PGP SIGNATURE-----\n", "payload": "tree e9b7f3efaa7997bedfdd8dab39d93026d26040a7\nparent d283f87f6d48239f73cb5a436efb62bef79dbc54\nparent 27dd0086ea0642cc36e2a388dcfd7e5f6a466ac5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1587669860 +0000\ncommitter GitHub <noreply@github.com> 1587669860 +0000\n\nMerge #4108\n\n4108: Fully get rid of SyntaxNodePtr::range r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/189ac4abbf6037419cb195c0a36a179544496ced", "html_url": "https://github.com/rust-lang/rust/commit/189ac4abbf6037419cb195c0a36a179544496ced", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/189ac4abbf6037419cb195c0a36a179544496ced/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d283f87f6d48239f73cb5a436efb62bef79dbc54", "url": "https://api.github.com/repos/rust-lang/rust/commits/d283f87f6d48239f73cb5a436efb62bef79dbc54", "html_url": "https://github.com/rust-lang/rust/commit/d283f87f6d48239f73cb5a436efb62bef79dbc54"}, {"sha": "27dd0086ea0642cc36e2a388dcfd7e5f6a466ac5", "url": "https://api.github.com/repos/rust-lang/rust/commits/27dd0086ea0642cc36e2a388dcfd7e5f6a466ac5", "html_url": "https://github.com/rust-lang/rust/commit/27dd0086ea0642cc36e2a388dcfd7e5f6a466ac5"}], "stats": {"total": 64, "additions": 40, "deletions": 24}, "files": [{"sha": "846005baa10ef3a328b0da5e48d0c8203c9b7881", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/189ac4abbf6037419cb195c0a36a179544496ced/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/189ac4abbf6037419cb195c0a36a179544496ced/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=189ac4abbf6037419cb195c0a36a179544496ced", "patch": "@@ -18,16 +18,19 @@ use hir_def::{\n     nameres::CrateDefMap,\n     AssocItemId, DefWithBodyId, LocalModuleId, Lookup, ModuleDefId,\n };\n-use hir_expand::InFile;\n+use hir_expand::{db::AstDatabase, InFile};\n use insta::assert_snapshot;\n use ra_db::{fixture::WithFixture, salsa::Database, FilePosition, SourceDatabase};\n use ra_syntax::{\n     algo,\n     ast::{self, AstNode},\n+    SyntaxNode,\n };\n use stdx::format_to;\n \n-use crate::{db::HirDatabase, display::HirDisplay, test_db::TestDB, InferenceResult};\n+use crate::{\n+    db::HirDatabase, display::HirDisplay, infer::TypeMismatch, test_db::TestDB, InferenceResult, Ty,\n+};\n \n // These tests compare the inference results for all expressions in a file\n // against snapshots of the expected results using insta. Use cargo-insta to\n@@ -67,43 +70,51 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n \n     let mut infer_def = |inference_result: Arc<InferenceResult>,\n                          body_source_map: Arc<BodySourceMap>| {\n-        let mut types = Vec::new();\n-        let mut mismatches = Vec::new();\n+        let mut types: Vec<(InFile<SyntaxNode>, &Ty)> = Vec::new();\n+        let mut mismatches: Vec<(InFile<SyntaxNode>, &TypeMismatch)> = Vec::new();\n \n         for (pat, ty) in inference_result.type_of_pat.iter() {\n             let syntax_ptr = match body_source_map.pat_syntax(pat) {\n                 Ok(sp) => {\n-                    sp.map(|ast| ast.either(|it| it.syntax_node_ptr(), |it| it.syntax_node_ptr()))\n+                    let root = db.parse_or_expand(sp.file_id).unwrap();\n+                    sp.map(|ptr| {\n+                        ptr.either(\n+                            |it| it.to_node(&root).syntax().clone(),\n+                            |it| it.to_node(&root).syntax().clone(),\n+                        )\n+                    })\n                 }\n                 Err(SyntheticSyntax) => continue,\n             };\n             types.push((syntax_ptr, ty));\n         }\n \n         for (expr, ty) in inference_result.type_of_expr.iter() {\n-            let syntax_ptr = match body_source_map.expr_syntax(expr) {\n-                Ok(sp) => sp.map(|ast| ast.syntax_node_ptr()),\n+            let node = match body_source_map.expr_syntax(expr) {\n+                Ok(sp) => {\n+                    let root = db.parse_or_expand(sp.file_id).unwrap();\n+                    sp.map(|ptr| ptr.to_node(&root).syntax().clone())\n+                }\n                 Err(SyntheticSyntax) => continue,\n             };\n-            types.push((syntax_ptr.clone(), ty));\n+            types.push((node.clone(), ty));\n             if let Some(mismatch) = inference_result.type_mismatch_for_expr(expr) {\n-                mismatches.push((syntax_ptr, mismatch));\n+                mismatches.push((node, mismatch));\n             }\n         }\n \n         // sort ranges for consistency\n-        types.sort_by_key(|(src_ptr, _)| {\n-            (src_ptr.value.range().start(), src_ptr.value.range().end())\n+        types.sort_by_key(|(node, _)| {\n+            let range = node.value.text_range();\n+            (range.start(), range.end())\n         });\n-        for (src_ptr, ty) in &types {\n-            let node = src_ptr.value.to_node(&src_ptr.file_syntax(&db));\n-\n-            let (range, text) = if let Some(self_param) = ast::SelfParam::cast(node.clone()) {\n+        for (node, ty) in &types {\n+            let (range, text) = if let Some(self_param) = ast::SelfParam::cast(node.value.clone()) {\n                 (self_param.self_token().unwrap().text_range(), \"self\".to_string())\n             } else {\n-                (src_ptr.value.range(), node.text().to_string().replace(\"\\n\", \" \"))\n+                (node.value.text_range(), node.value.text().to_string().replace(\"\\n\", \" \"))\n             };\n-            let macro_prefix = if src_ptr.file_id != file_id.into() { \"!\" } else { \"\" };\n+            let macro_prefix = if node.file_id != file_id.into() { \"!\" } else { \"\" };\n             format_to!(\n                 buf,\n                 \"{}{} '{}': {}\\n\",\n@@ -114,11 +125,12 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n             );\n         }\n         if include_mismatches {\n-            mismatches.sort_by_key(|(src_ptr, _)| {\n-                (src_ptr.value.range().start(), src_ptr.value.range().end())\n+            mismatches.sort_by_key(|(node, _)| {\n+                let range = node.value.text_range();\n+                (range.start(), range.end())\n             });\n             for (src_ptr, mismatch) in &mismatches {\n-                let range = src_ptr.value.range();\n+                let range = src_ptr.value.text_range();\n                 let macro_prefix = if src_ptr.file_id != file_id.into() { \"!\" } else { \"\" };\n                 format_to!(\n                     buf,"}, {"sha": "8d9812d2418377f0dbea469ff9f60e0bb8c23944", "filename": "crates/ra_syntax/src/ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/189ac4abbf6037419cb195c0a36a179544496ced/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/189ac4abbf6037419cb195c0a36a179544496ced/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fptr.rs?ref=189ac4abbf6037419cb195c0a36a179544496ced", "patch": "@@ -30,9 +30,9 @@ impl SyntaxNodePtr {\n         .unwrap_or_else(|| panic!(\"can't resolve local ptr to SyntaxNode: {:?}\", self))\n     }\n \n-    pub fn range(&self) -> TextRange {\n-        self.range\n-    }\n+    // pub fn range(&self) -> TextRange {\n+    //     self.range\n+    // }\n \n     pub fn cast<N: AstNode>(self) -> Option<AstPtr<N>> {\n         if !N::can_cast(self.kind) {"}, {"sha": "9fa7dad7146dbcd669596812587cd0c9fac58c2e", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/189ac4abbf6037419cb195c0a36a179544496ced/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/189ac4abbf6037419cb195c0a36a179544496ced/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=189ac4abbf6037419cb195c0a36a179544496ced", "patch": "@@ -162,9 +162,13 @@ pub fn analysis_stats(\n                 let (_, sm) = db.body_with_source_map(f_id.into());\n                 let src = sm.expr_syntax(expr_id);\n                 if let Ok(src) = src {\n+                    let node = {\n+                        let root = db.parse_or_expand(src.file_id).unwrap();\n+                        src.value.to_node(&root)\n+                    };\n                     let original_file = src.file_id.original_file(db);\n                     let line_index = host.analysis().file_line_index(original_file).unwrap();\n-                    let text_range = src.value.syntax_node_ptr().range();\n+                    let text_range = node.syntax().text_range();\n                     let (start, end) = (\n                         line_index.line_col(text_range.start()),\n                         line_index.line_col(text_range.end()),"}]}