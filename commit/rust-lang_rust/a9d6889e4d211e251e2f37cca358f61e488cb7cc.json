{"sha": "a9d6889e4d211e251e2f37cca358f61e488cb7cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZDY4ODllNGQyMTFlMjUxZTJmMzdjY2EzNThmNjFlNDg4Y2I3Y2M=", "commit": {"author": {"name": "Elichai Turkel", "email": "elichai.turkel@gmail.com", "date": "2019-12-12T14:03:40Z"}, "committer": {"name": "Elichai Turkel", "email": "elichai.turkel@gmail.com", "date": "2019-12-15T14:53:26Z"}, "message": "Replace prints in fmt docs with asserts", "tree": {"sha": "89795bb5ba63efa8bc480c82f38b59f0f966cdcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89795bb5ba63efa8bc480c82f38b59f0f966cdcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9d6889e4d211e251e2f37cca358f61e488cb7cc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJNBAABCAA3FiEEC5PUstyhDoo+NyfXk4PN6ejman8FAl32SOcZHGVsaWNoYWku\ndHVya2VsQGdtYWlsLmNvbQAKCRCTg83p6OZqf4V1D/0Rd5y+7IN6ZKWgd2ltmmHF\nSpjOmFC90jW6TCjD9u42Hg4aVLpsWbACjgEcqeH5HKscTKv8kyiNhrKq0+Ia7mul\nuMolcCArtkWPlEJJYznD/RiDkFn5J5UYLv5KJBhcP5BeG2nDYDzNjO08O1Nb0sxf\nUpULcpDMQFBN56+h+tDZlzsevdyHjLXckR83YkfEzZT++gIYDRyZZubKPfefqAad\nY069w9CTotr4TrtGl6kIUWFTB3ohjGivp0oLzKZBBGNaSODxgLGdVssB18xHWa1e\nPrZi5/de4+m5BSMNJcL+G41YuUnva+GUF9IBTdNpv9s7Cz22cDo7+g9zWNMMhzx8\nVNqaAgsQ1JNwOdouDf9/NFey/jVLgvXiNOTEf1ZyP01NzT6tsIPXvHTyJkzb5Rzs\nF/iAzuYQU++fLO1PfcEUfeveXmpyGj706V13cIjBMxk5hCjq/q1Ds0eRMZazKS/v\n+dOPkOA4nlFp+245vW1faF9AnQLRrOv/u05JG3fc1EKMXyMaJw1q6iqeElBYOX4t\n8OxUd1DsqsAyAZ23VJ+hU0ShKJlvTfvnRrNrOmmG3/Mgq4oml2YpEAvOarOnHfU8\nVaLu0oEY3wWTPd3CIgasc+6ZKIAxQy2ASPzc6WBcRnrZdvIKspdijCqKEt1HkofK\nsziFg7Vu0IgtqwYqUD4Ryw==\n=QkI4\n-----END PGP SIGNATURE-----", "payload": "tree 89795bb5ba63efa8bc480c82f38b59f0f966cdcf\nparent 0cc8fe5d4306c560b4a2668b01e2df97a4eb80c4\nauthor Elichai Turkel <elichai.turkel@gmail.com> 1576159420 +0200\ncommitter Elichai Turkel <elichai.turkel@gmail.com> 1576421606 +0200\n\nReplace prints in fmt docs with asserts\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9d6889e4d211e251e2f37cca358f61e488cb7cc", "html_url": "https://github.com/rust-lang/rust/commit/a9d6889e4d211e251e2f37cca358f61e488cb7cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9d6889e4d211e251e2f37cca358f61e488cb7cc/comments", "author": {"login": "elichai", "id": 2167860, "node_id": "MDQ6VXNlcjIxNjc4NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elichai", "html_url": "https://github.com/elichai", "followers_url": "https://api.github.com/users/elichai/followers", "following_url": "https://api.github.com/users/elichai/following{/other_user}", "gists_url": "https://api.github.com/users/elichai/gists{/gist_id}", "starred_url": "https://api.github.com/users/elichai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elichai/subscriptions", "organizations_url": "https://api.github.com/users/elichai/orgs", "repos_url": "https://api.github.com/users/elichai/repos", "events_url": "https://api.github.com/users/elichai/events{/privacy}", "received_events_url": "https://api.github.com/users/elichai/received_events", "type": "User", "site_admin": false}, "committer": {"login": "elichai", "id": 2167860, "node_id": "MDQ6VXNlcjIxNjc4NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elichai", "html_url": "https://github.com/elichai", "followers_url": "https://api.github.com/users/elichai/followers", "following_url": "https://api.github.com/users/elichai/following{/other_user}", "gists_url": "https://api.github.com/users/elichai/gists{/gist_id}", "starred_url": "https://api.github.com/users/elichai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elichai/subscriptions", "organizations_url": "https://api.github.com/users/elichai/orgs", "repos_url": "https://api.github.com/users/elichai/repos", "events_url": "https://api.github.com/users/elichai/events{/privacy}", "received_events_url": "https://api.github.com/users/elichai/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cc8fe5d4306c560b4a2668b01e2df97a4eb80c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cc8fe5d4306c560b4a2668b01e2df97a4eb80c4", "html_url": "https://github.com/rust-lang/rust/commit/0cc8fe5d4306c560b4a2668b01e2df97a4eb80c4"}], "stats": {"total": 102, "additions": 64, "deletions": 38}, "files": [{"sha": "05b037fbffa321ff1788b55fcc2e329d77a0c399", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 64, "deletions": 38, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/a9d6889e4d211e251e2f37cca358f61e488cb7cc/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9d6889e4d211e251e2f37cca358f61e488cb7cc/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=a9d6889e4d211e251e2f37cca358f61e488cb7cc", "patch": "@@ -63,7 +63,7 @@ pub mod rt {\n ///\n /// let pythagorean_triple = Triangle { a: 3.0, b: 4.0, c: 5.0 };\n ///\n-/// println!(\"{}\", pythagorean_triple);\n+/// assert_eq!(format!(\"{}\", pythagorean_triple), \"(3, 4, 5)\");\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub type Result = result::Result<(), Error>;\n@@ -440,7 +440,7 @@ impl Display for Arguments<'_> {\n ///\n /// let origin = Point { x: 0, y: 0 };\n ///\n-/// println!(\"The origin is: {:?}\", origin);\n+/// assert_eq!(format!(\"The origin is: {:?}\", origin), \"The origin is: Point { x: 0, y: 0 }\");\n /// ```\n ///\n /// Manually implementing:\n@@ -464,22 +464,16 @@ impl Display for Arguments<'_> {\n ///\n /// let origin = Point { x: 0, y: 0 };\n ///\n-/// println!(\"The origin is: {:?}\", origin);\n+/// assert_eq!(format!(\"The origin is: {:?}\", origin), \"The origin is: Point { x: 0, y: 0 }\");\n /// ```\n ///\n-/// This outputs:\n-///\n-/// ```text\n-/// The origin is: Point { x: 0, y: 0 }\n-/// ```\n-///\n-/// There are a number of `debug_*` methods on [`Formatter`] to help you with manual\n-/// implementations, such as [`debug_struct`][debug_struct].\n+/// There are a number of helper methods on the [`Formatter`] struct to help you with manual\n+/// implementations, such as [`debug_struct`].\n ///\n /// `Debug` implementations using either `derive` or the debug builder API\n /// on [`Formatter`] support pretty-printing using the alternate flag: `{:#?}`.\n ///\n-/// [debug_struct]: ../../std/fmt/struct.Formatter.html#method.debug_struct\n+/// [`debug_struct`]: ../../std/fmt/struct.Formatter.html#method.debug_struct\n /// [`Formatter`]: ../../std/fmt/struct.Formatter.html\n ///\n /// Pretty-printing with `#?`:\n@@ -493,17 +487,13 @@ impl Display for Arguments<'_> {\n ///\n /// let origin = Point { x: 0, y: 0 };\n ///\n-/// println!(\"The origin is: {:#?}\", origin);\n-/// ```\n-///\n-/// This outputs:\n-///\n-/// ```text\n-/// The origin is: Point {\n+/// assert_eq!(format!(\"The origin is: {:#?}\", origin),\n+/// \"The origin is: Point {\n ///     x: 0,\n-///     y: 0\n-/// }\n+///     y: 0,\n+/// }\");\n /// ```\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(\n     on(\n@@ -538,8 +528,13 @@ pub trait Debug {\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(\"(1.987, 2.983)\".to_owned(),\n-    ///            format!(\"{:?}\", Position { longitude: 1.987, latitude: 2.983, }));\n+    /// let position = Position { longitude: 1.987, latitude: 2.983 };\n+    /// assert_eq!(format!(\"{:?}\", position), \"(1.987, 2.983)\");\n+    ///\n+    /// assert_eq!(format!(\"{:#?}\", position), \"(\n+    ///     1.987,\n+    ///     2.983,\n+    /// )\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n@@ -590,7 +585,7 @@ pub use macros::Debug;\n ///\n /// let origin = Point { x: 0, y: 0 };\n ///\n-/// println!(\"The origin is: {}\", origin);\n+/// assert_eq!(format!(\"The origin is: {}\", origin), \"The origin is: (0, 0)\");\n /// ```\n #[rustc_on_unimplemented(\n     on(\n@@ -624,7 +619,7 @@ pub trait Display {\n     ///     }\n     /// }\n     ///\n-    /// assert_eq!(\"(1.987, 2.983)\".to_owned(),\n+    /// assert_eq!(\"(1.987, 2.983)\",\n     ///            format!(\"{}\", Position { longitude: 1.987, latitude: 2.983, }));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -674,7 +669,9 @@ pub trait Display {\n ///\n /// let l = Length(9);\n ///\n-/// println!(\"l as octal is: {:o}\", l);\n+/// assert_eq!(format!(\"l as octal is: {:o}\", l), \"l as octal is: 11\");\n+///\n+/// assert_eq!(format!(\"l as octal is: {:#06o}\", l), \"l as octal is: 0o0011\");\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Octal {\n@@ -724,7 +721,12 @@ pub trait Octal {\n ///\n /// let l = Length(107);\n ///\n-/// println!(\"l as binary is: {:b}\", l);\n+/// assert_eq!(format!(\"l as binary is: {:b}\", l), \"l as binary is: 1101011\");\n+///\n+/// assert_eq!(\n+///     format!(\"l as binary is: {:#032b}\", l),\n+///     \"l as binary is: 0b000000000000000000000001101011\"\n+/// );\n /// ```\n ///\n /// [module]: ../../std/fmt/index.html\n@@ -783,7 +785,9 @@ pub trait Binary {\n ///\n /// let l = Length(9);\n ///\n-/// println!(\"l as hex is: {:x}\", l);\n+/// assert_eq!(format!(\"l as hex is: {:x}\", l), \"l as hex is: 9\");\n+///\n+/// assert_eq!(format!(\"l as hex is: {:#010x}\", l), \"l as hex is: 0x00000009\");\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait LowerHex {\n@@ -834,9 +838,11 @@ pub trait LowerHex {\n ///     }\n /// }\n ///\n-/// let l = Length(9);\n+/// let l = Length(i32::max_value());\n+///\n+/// assert_eq!(format!(\"l as hex is: {:X}\", l), \"l as hex is: 7FFFFFFF\");\n ///\n-/// println!(\"l as hex is: {:X}\", l);\n+/// assert_eq!(format!(\"l as hex is: {:#010X}\", l), \"l as hex is: 0x7FFFFFFF\");\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait UpperHex {\n@@ -883,6 +889,10 @@ pub trait UpperHex {\n /// let l = Length(42);\n ///\n /// println!(\"l is in memory here: {:p}\", l);\n+///\n+/// let l_ptr = format!(\"{:018p}\", l);\n+/// assert_eq!(l_ptr.len(), 18);\n+/// assert_eq!(&l_ptr[..2], \"0x\");\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Pointer {\n@@ -925,7 +935,15 @@ pub trait Pointer {\n ///\n /// let l = Length(100);\n ///\n-/// println!(\"l in scientific notation is: {:e}\", l);\n+/// assert_eq!(\n+///     format!(\"l in scientific notation is: {:e}\", l),\n+///     \"l in scientific notation is: 1e2\"\n+/// );\n+///\n+/// assert_eq!(\n+///     format!(\"l in scientific notation is: {:05e}\", l),\n+///     \"l in scientific notation is: 001e2\"\n+/// );\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait LowerExp {\n@@ -968,7 +986,15 @@ pub trait LowerExp {\n ///\n /// let l = Length(100);\n ///\n-/// println!(\"l in scientific notation is: {:E}\", l);\n+/// assert_eq!(\n+///     format!(\"l in scientific notation is: {:E}\", l),\n+///     \"l in scientific notation is: 1E2\"\n+/// );\n+///\n+/// assert_eq!(\n+///     format!(\"l in scientific notation is: {:05E}\", l),\n+///     \"l in scientific notation is: 001E2\"\n+/// );\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait UpperExp {\n@@ -1813,8 +1839,7 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// // prints \"[10, 11]\"\n-    /// println!(\"{:?}\", Foo(vec![10, 11]));\n+    /// assert_eq!(format!(\"{:?}\", Foo(vec![10, 11])), \"[10, 11]\");\n     /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn debug_list<'b>(&'b mut self) -> DebugList<'b, 'a> {\n@@ -1837,8 +1862,7 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// // prints \"{10, 11}\"\n-    /// println!(\"{:?}\", Foo(vec![10, 11]));\n+    /// assert_eq!(format!(\"{:?}\", Foo(vec![10, 11])), \"{10, 11}\");\n     /// ```\n     ///\n     /// [`format_args!`]: ../../std/macro.format_args.html\n@@ -1896,8 +1920,10 @@ impl<'a> Formatter<'a> {\n     ///     }\n     /// }\n     ///\n-    /// // prints \"{\"A\": 10, \"B\": 11}\"\n-    /// println!(\"{:?}\", Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)]));\n+    /// assert_eq!(\n+    ///     format!(\"{:?}\",  Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)])),\n+    ///     r#\"{\"A\": 10, \"B\": 11}\"#\n+    ///  );\n     /// ```\n     #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n     pub fn debug_map<'b>(&'b mut self) -> DebugMap<'b, 'a> {"}]}