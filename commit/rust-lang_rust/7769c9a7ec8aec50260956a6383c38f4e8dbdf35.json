{"sha": "7769c9a7ec8aec50260956a6383c38f4e8dbdf35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3NjljOWE3ZWM4YWVjNTAyNjA5NTZhNjM4M2MzOGY0ZThkYmRmMzU=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-06-21T17:28:09Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-06-21T17:28:09Z"}, "message": "coerce fields to the expected field type\n\nFully fixes #31260.\n\nThis needs a crater run.", "tree": {"sha": "7c8bb5ccdf4dce57b7b33475cc4f9fec525a6bf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c8bb5ccdf4dce57b7b33475cc4f9fec525a6bf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7769c9a7ec8aec50260956a6383c38f4e8dbdf35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7769c9a7ec8aec50260956a6383c38f4e8dbdf35", "html_url": "https://github.com/rust-lang/rust/commit/7769c9a7ec8aec50260956a6383c38f4e8dbdf35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7769c9a7ec8aec50260956a6383c38f4e8dbdf35/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03198da2add75a0bcec792ffd84fcc8d94e8637e", "url": "https://api.github.com/repos/rust-lang/rust/commits/03198da2add75a0bcec792ffd84fcc8d94e8637e", "html_url": "https://github.com/rust-lang/rust/commit/03198da2add75a0bcec792ffd84fcc8d94e8637e"}], "stats": {"total": 68, "additions": 29, "deletions": 39}, "files": [{"sha": "9d93388edc76c1de9cf5fa764ea6fb4c984b7f35", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7769c9a7ec8aec50260956a6383c38f4e8dbdf35/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7769c9a7ec8aec50260956a6383c38f4e8dbdf35/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7769c9a7ec8aec50260956a6383c38f4e8dbdf35", "patch": "@@ -3159,11 +3159,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         let adt_ty_hint =\n             self.expected_inputs_for_expected_output(span, expected, adt_ty, &[adt_ty])\n-                .get(0).cloned().unwrap_or(adt_ty);\n+            .get(0).cloned().unwrap_or(adt_ty);\n+        // re-link the regions that EIfEO can erase.\n+        self.demand_eqtype(span, adt_ty_hint, adt_ty);\n \n-        let (substs, hint_substs, adt_kind, kind_name) = match (&adt_ty.sty, &adt_ty_hint.sty) {\n-            (&ty::TyAdt(adt, substs), &ty::TyAdt(_, hint_substs)) => {\n-                (substs, hint_substs, adt.adt_kind(), adt.variant_descr())\n+        let (substs, adt_kind, kind_name) = match &adt_ty.sty{\n+            &ty::TyAdt(adt, substs) => {\n+                (substs, adt.adt_kind(), adt.variant_descr())\n             }\n             _ => span_bug!(span, \"non-ADT passed to check_expr_struct_fields\")\n         };\n@@ -3179,14 +3181,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         // Typecheck each field.\n         for field in ast_fields {\n-            let final_field_type;\n-            let field_type_hint;\n-\n             let ident = tcx.adjust(field.name.node, variant.did, self.body_id).0;\n-            if let Some(v_field) = remaining_fields.remove(&ident) {\n-                final_field_type = self.field_ty(field.span, v_field, substs);\n-                field_type_hint = self.field_ty(field.span, v_field, hint_substs);\n-\n+            let field_type = if let Some(v_field) = remaining_fields.remove(&ident) {\n                 seen_fields.insert(field.name.node, field.span);\n \n                 // we don't look at stability attributes on\n@@ -3195,10 +3191,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 if adt_kind != ty::AdtKind::Enum {\n                     tcx.check_stability(v_field.did, expr_id, field.span);\n                 }\n+\n+                self.field_ty(field.span, v_field, substs)\n             } else {\n                 error_happened = true;\n-                final_field_type = tcx.types.err;\n-                field_type_hint = tcx.types.err;\n                 if let Some(_) = variant.find_field_named(field.name.node) {\n                     let mut err = struct_span_err!(self.tcx.sess,\n                                                 field.name.span,\n@@ -3216,12 +3212,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 } else {\n                     self.report_unknown_field(adt_ty, variant, field, ast_fields, kind_name);\n                 }\n-            }\n+\n+                tcx.types.err\n+            };\n \n             // Make sure to give a type to the field even if there's\n             // an error, so we can continue typechecking\n-            let ty = self.check_expr_with_hint(&field.expr, field_type_hint);\n-            self.demand_coerce(&field.expr, ty, final_field_type);\n+            self.check_expr_coercable_to_type(&field.expr, field_type);\n         }\n \n         // Make sure the programmer specified correct number of fields."}, {"sha": "d21ffb96bef2e5dfbcaf773a793e107067b6889e", "filename": "src/test/run-pass/issue-31260.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7769c9a7ec8aec50260956a6383c38f4e8dbdf35/src%2Ftest%2Frun-pass%2Fissue-31260.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7769c9a7ec8aec50260956a6383c38f4e8dbdf35/src%2Ftest%2Frun-pass%2Fissue-31260.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-31260.rs?ref=7769c9a7ec8aec50260956a6383c38f4e8dbdf35", "patch": "@@ -12,9 +12,12 @@ pub struct Struct<K: 'static> {\n     pub field: K,\n }\n \n-// Partial fix for #31260, doesn't work without {...}.\n static STRUCT: Struct<&'static [u8]> = Struct {\n     field: {&[1]}\n };\n \n+static STRUCT2: Struct<&'static [u8]> = Struct {\n+    field: &[1]\n+};\n+\n fn main() {}"}, {"sha": "03f889224bedcd4771c667b67b583ae4256e09f6", "filename": "src/test/ui/mismatched_types/abridged.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7769c9a7ec8aec50260956a6383c38f4e8dbdf35/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7769c9a7ec8aec50260956a6383c38f4e8dbdf35/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.rs?ref=7769c9a7ec8aec50260956a6383c38f4e8dbdf35", "patch": "@@ -39,23 +39,25 @@ fn c() -> Result<Foo, Bar> {\n }\n \n fn d() -> X<X<String, String>, String> {\n-    X {\n+    let x = X {\n         x: X {\n             x: \"\".to_string(),\n             y: 2,\n         },\n         y: 3,\n-    }\n+    };\n+    x\n }\n \n fn e() -> X<X<String, String>, String> {\n-    X {\n+    let x = X {\n         x: X {\n             x: \"\".to_string(),\n             y: 2,\n         },\n         y: \"\".to_string(),\n-    }\n+    };\n+    x\n }\n \n fn main() {}"}, {"sha": "8513da1e1d2111e21f2569a849ac566b59dceea0", "filename": "src/test/ui/mismatched_types/abridged.stderr", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7769c9a7ec8aec50260956a6383c38f4e8dbdf35/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7769c9a7ec8aec50260956a6383c38f4e8dbdf35/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr?ref=7769c9a7ec8aec50260956a6383c38f4e8dbdf35", "patch": "@@ -35,31 +35,19 @@ error[E0308]: mismatched types\n               found type `Foo`\n \n error[E0308]: mismatched types\n-  --> $DIR/abridged.rs:42:5\n+  --> $DIR/abridged.rs:49:5\n    |\n-42 | /     X {\n-43 | |         x: X {\n-44 | |             x: \"\".to_string(),\n-45 | |             y: 2,\n-46 | |         },\n-47 | |         y: 3,\n-48 | |     }\n-   | |_____^ expected struct `std::string::String`, found integral variable\n+49 |     x\n+   |     ^ expected struct `std::string::String`, found integral variable\n    |\n    = note: expected type `X<X<_, std::string::String>, std::string::String>`\n               found type `X<X<_, {integer}>, {integer}>`\n \n error[E0308]: mismatched types\n-  --> $DIR/abridged.rs:52:5\n+  --> $DIR/abridged.rs:60:5\n    |\n-52 | /     X {\n-53 | |         x: X {\n-54 | |             x: \"\".to_string(),\n-55 | |             y: 2,\n-56 | |         },\n-57 | |         y: \"\".to_string(),\n-58 | |     }\n-   | |_____^ expected struct `std::string::String`, found integral variable\n+60 |     x\n+   |     ^ expected struct `std::string::String`, found integral variable\n    |\n    = note: expected type `X<X<_, std::string::String>, _>`\n               found type `X<X<_, {integer}>, _>`"}]}