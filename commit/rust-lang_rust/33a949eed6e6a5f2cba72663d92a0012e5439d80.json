{"sha": "33a949eed6e6a5f2cba72663d92a0012e5439d80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzYTk0OWVlZDZlNmE1ZjJjYmE3MjY2M2Q5MmEwMDEyZTU0MzlkODA=", "commit": {"author": {"name": "Jon Morton", "email": "jonanin@gmail.com", "date": "2012-04-02T05:13:39Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-02T21:21:08Z"}, "message": "Add global rust_get_current_task\n\nPreviously two methods existed: rust_sched_loop::get_task and rust_task::get_task_from_tcb. Merge both of them into one, trying the faster one (tcb) first, and if that fails, the slower one from the tls.", "tree": {"sha": "59f07f38799aa1cc90b6d9e76d402c8e1dc2f323", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59f07f38799aa1cc90b6d9e76d402c8e1dc2f323"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33a949eed6e6a5f2cba72663d92a0012e5439d80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33a949eed6e6a5f2cba72663d92a0012e5439d80", "html_url": "https://github.com/rust-lang/rust/commit/33a949eed6e6a5f2cba72663d92a0012e5439d80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33a949eed6e6a5f2cba72663d92a0012e5439d80/comments", "author": {"login": "jamorton", "id": 18852, "node_id": "MDQ6VXNlcjE4ODUy", "avatar_url": "https://avatars.githubusercontent.com/u/18852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamorton", "html_url": "https://github.com/jamorton", "followers_url": "https://api.github.com/users/jamorton/followers", "following_url": "https://api.github.com/users/jamorton/following{/other_user}", "gists_url": "https://api.github.com/users/jamorton/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamorton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamorton/subscriptions", "organizations_url": "https://api.github.com/users/jamorton/orgs", "repos_url": "https://api.github.com/users/jamorton/repos", "events_url": "https://api.github.com/users/jamorton/events{/privacy}", "received_events_url": "https://api.github.com/users/jamorton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0268cbe5f1347a1dc2a5762a981595687f161b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0268cbe5f1347a1dc2a5762a981595687f161b6", "html_url": "https://github.com/rust-lang/rust/commit/d0268cbe5f1347a1dc2a5762a981595687f161b6"}], "stats": {"total": 189, "additions": 88, "deletions": 101}, "files": [{"sha": "08707d7f38dc0d080fef5f86644176a0b5256bf0", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/33a949eed6e6a5f2cba72663d92a0012e5439d80/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/33a949eed6e6a5f2cba72663d92a0012e5439d80/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=33a949eed6e6a5f2cba72663d92a0012e5439d80", "patch": "@@ -22,7 +22,7 @@ extern char **environ;\n \n extern \"C\" CDECL rust_str*\n last_os_error() {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n \n     LOG(task, task, \"last_os_error()\");\n \n@@ -65,7 +65,7 @@ last_os_error() {\n \n extern \"C\" CDECL rust_str *\n rust_getcwd() {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     LOG(task, task, \"rust_getcwd()\");\n \n     char cbuf[BUF_BYTES];\n@@ -85,7 +85,7 @@ rust_getcwd() {\n #if defined(__WIN32__)\n extern \"C\" CDECL rust_vec *\n rust_env_pairs() {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     size_t envc = 0;\n     LPTCH ch = GetEnvironmentStringsA();\n     LPTCH c;\n@@ -111,7 +111,7 @@ rust_env_pairs() {\n #else\n extern \"C\" CDECL rust_vec *\n rust_env_pairs() {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n #ifdef __APPLE__\n     char **environ = *_NSGetEnviron();\n #endif\n@@ -133,21 +133,21 @@ refcount(intptr_t *v) {\n \n extern \"C\" CDECL void\n unsupervise() {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     task->unsupervise();\n }\n \n extern \"C\" CDECL void\n vec_reserve_shared(type_desc* ty, rust_vec** vp,\n                    size_t n_elts) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     reserve_vec_exact(task, vp, n_elts * ty->size);\n }\n \n extern \"C\" CDECL void\n str_reserve_shared(rust_vec** sp,\n                    size_t n_elts) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     reserve_vec_exact(task, sp, n_elts + 1);\n }\n \n@@ -157,7 +157,7 @@ str_reserve_shared(rust_vec** sp,\n  */\n extern \"C\" CDECL rust_vec*\n vec_from_buf_shared(type_desc *ty, void *ptr, size_t count) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     size_t fill = ty->size * count;\n     rust_vec* v = (rust_vec*)task->kernel->malloc(fill + sizeof(rust_vec),\n                                                     \"vec_from_buf\");\n@@ -168,7 +168,7 @@ vec_from_buf_shared(type_desc *ty, void *ptr, size_t count) {\n \n extern \"C\" CDECL void\n rust_str_push(rust_vec** sp, uint8_t byte) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     size_t fill = (*sp)->fill;\n     reserve_vec(task, sp, fill + 1);\n     (*sp)->data[fill-1] = byte;\n@@ -178,7 +178,7 @@ rust_str_push(rust_vec** sp, uint8_t byte) {\n \n extern \"C\" CDECL void *\n rand_new() {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     rust_sched_loop *thread = task->sched_loop;\n     randctx *rctx = (randctx *) task->malloc(sizeof(randctx), \"randctx\");\n     if (!rctx) {\n@@ -196,7 +196,7 @@ rand_next(randctx *rctx) {\n \n extern \"C\" CDECL void\n rand_free(randctx *rctx) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     task->free(rctx);\n }\n \n@@ -242,22 +242,22 @@ debug_abi_2(floats f) {\n static void\n debug_tydesc_helper(type_desc *t)\n {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     LOG(task, stdlib, \"  size %\" PRIdPTR \", align %\" PRIdPTR\n         \", first_param 0x%\" PRIxPTR,\n         t->size, t->align, t->first_param);\n }\n \n extern \"C\" CDECL void\n debug_tydesc(type_desc *t) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     LOG(task, stdlib, \"debug_tydesc\");\n     debug_tydesc_helper(t);\n }\n \n extern \"C\" CDECL void\n debug_opaque(type_desc *t, uint8_t *front) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     LOG(task, stdlib, \"debug_opaque\");\n     debug_tydesc_helper(t);\n     // FIXME may want to actually account for alignment.  `front` may not\n@@ -277,7 +277,7 @@ struct rust_box {\n \n extern \"C\" CDECL void\n debug_box(type_desc *t, rust_box *box) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     LOG(task, stdlib, \"debug_box(0x%\" PRIxPTR \")\", box);\n     debug_tydesc_helper(t);\n     LOG(task, stdlib, \"  refcount %\" PRIdPTR,\n@@ -294,7 +294,7 @@ struct rust_tag {\n \n extern \"C\" CDECL void\n debug_tag(type_desc *t, rust_tag *tag) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n \n     LOG(task, stdlib, \"debug_tag\");\n     debug_tydesc_helper(t);\n@@ -312,7 +312,7 @@ struct rust_fn {\n \n extern \"C\" CDECL void\n debug_fn(type_desc *t, rust_fn *fn) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     LOG(task, stdlib, \"debug_fn\");\n     debug_tydesc_helper(t);\n     LOG(task, stdlib, \"  thunk at 0x%\" PRIxPTR, fn->thunk);\n@@ -326,7 +326,7 @@ extern \"C\" CDECL void *\n debug_ptrcast(type_desc *from_ty,\n               type_desc *to_ty,\n               void *ptr) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     LOG(task, stdlib, \"debug_ptrcast from\");\n     debug_tydesc_helper(from_ty);\n     LOG(task, stdlib, \"to\");\n@@ -336,13 +336,13 @@ debug_ptrcast(type_desc *from_ty,\n \n extern \"C\" CDECL void *\n debug_get_stk_seg() {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     return task->stk;\n }\n \n extern \"C\" CDECL rust_vec*\n rust_list_files(rust_str *path) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     array_list<rust_str*> strings;\n #if defined(__WIN32__)\n     WIN32_FIND_DATA FindFileData;\n@@ -443,20 +443,20 @@ precise_time_ns(uint64_t *ns) {\n \n extern \"C\" CDECL rust_sched_id\n rust_get_sched_id() {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     return task->sched->get_id();\n }\n \n extern \"C\" CDECL rust_sched_id\n rust_new_sched(uintptr_t threads) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     assert(threads > 0 && \"Can't create a scheduler with no threads, silly!\");\n     return task->kernel->create_scheduler(threads);\n }\n \n extern \"C\" CDECL rust_task_id\n get_task_id() {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     return task->id;\n }\n \n@@ -467,13 +467,13 @@ new_task_common(rust_scheduler *sched, rust_task *parent) {\n \n extern \"C\" CDECL rust_task*\n new_task() {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     return new_task_common(task->sched, task);\n }\n \n extern \"C\" CDECL rust_task*\n rust_new_task_in_sched(rust_sched_id id) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     rust_scheduler *sched = task->kernel->get_scheduler_by_id(id);\n     // FIXME: What if we didn't get the scheduler?\n     return new_task_common(sched, task);\n@@ -486,7 +486,7 @@ rust_task_config_notify(rust_task *target, rust_port_id *port) {\n \n extern \"C\" rust_task *\n rust_get_task() {\n-    return rust_sched_loop::get_task();\n+    return rust_get_current_task();\n }\n \n extern \"C\" CDECL void\n@@ -496,13 +496,13 @@ start_task(rust_task *target, fn_env_pair *f) {\n \n extern \"C\" CDECL int\n sched_threads() {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     return task->sched->number_of_threads();\n }\n \n extern \"C\" CDECL rust_port*\n new_port(size_t unit_sz) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     LOG(task, comm, \"new_port(task=0x%\" PRIxPTR \" (%s), unit_sz=%d)\",\n         (uintptr_t) task, task->name, unit_sz);\n     // port starts with refcount == 1\n@@ -511,7 +511,7 @@ new_port(size_t unit_sz) {\n \n extern \"C\" CDECL void\n rust_port_begin_detach(rust_port *port, uintptr_t *yield) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     LOG(task, comm, \"rust_port_detach(0x%\" PRIxPTR \")\", (uintptr_t) port);\n     port->begin_detach(yield);\n }\n@@ -523,7 +523,7 @@ rust_port_end_detach(rust_port *port) {\n \n extern \"C\" CDECL void\n del_port(rust_port *port) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     LOG(task, comm, \"del_port(0x%\" PRIxPTR \")\", (uintptr_t) port);\n     delete port;\n }\n@@ -541,7 +541,7 @@ get_port_id(rust_port *port) {\n extern \"C\" CDECL uintptr_t\n rust_port_id_send(type_desc *t, rust_port_id target_port_id, void *sptr) {\n     bool sent = false;\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n \n     LOG(task, comm, \"rust_port_id*_send port: 0x%\" PRIxPTR,\n         (uintptr_t) target_port_id);\n@@ -572,14 +572,14 @@ port_recv(uintptr_t *dptr, rust_port *port, uintptr_t *yield) {\n extern \"C\" CDECL void\n rust_port_select(rust_port **dptr, rust_port **ports,\n                  size_t n_ports, uintptr_t *yield) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     rust_port_selector *selector = task->get_port_selector();\n     selector->select(task, dptr, ports, n_ports, yield);\n }\n \n extern \"C\" CDECL void\n rust_set_exit_status(intptr_t code) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     task->kernel->set_exit_status((int)code);\n }\n \n@@ -594,7 +594,7 @@ extern void log_console_off(rust_env *env);\n \n extern \"C\" CDECL void\n rust_log_console_off() {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     log_console_off(task->kernel->env);\n }\n "}, {"sha": "61ed25bf8fac128354a022bbf82aeab0cf93d258", "filename": "src/rt/rust_sched_loop.h", "status": "modified", "additions": 7, "deletions": 36, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/33a949eed6e6a5f2cba72663d92a0012e5439d80/src%2Frt%2Frust_sched_loop.h", "raw_url": "https://github.com/rust-lang/rust/raw/33a949eed6e6a5f2cba72663d92a0012e5439d80/src%2Frt%2Frust_sched_loop.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_loop.h?ref=33a949eed6e6a5f2cba72663d92a0012e5439d80", "patch": "@@ -38,13 +38,6 @@ struct rust_sched_loop\n \n     const int id;\n \n-#ifndef __WIN32__\n-    static pthread_key_t task_key;\n-#else\n-    static DWORD task_key;\n-#endif\n-\n-    static bool tls_initialized;\n     context c_context;\n \n     bool should_exit;\n@@ -69,6 +62,13 @@ struct rust_sched_loop\n public:\n     rust_kernel *kernel;\n     rust_scheduler *sched;\n+    static bool tls_initialized;\n+\n+#ifndef __WIN32__\n+    static pthread_key_t task_key;\n+#else\n+    static DWORD task_key;\n+#endif\n \n     // NB: this is used to filter *runtime-originating* debug\n     // logging, on a per-scheduler basis. It's not likely what\n@@ -116,8 +116,6 @@ struct rust_sched_loop\n     void init_tls();\n     void place_task_in_tls(rust_task *task);\n \n-    static rust_task *get_task();\n-\n     // Called by each task when they are ready to be destroyed\n     void release_task(rust_task *task);\n \n@@ -134,33 +132,6 @@ rust_sched_loop::get_log() {\n     return _log;\n }\n \n-// This stuff is on the stack-switching fast path\n-\n-#ifndef __WIN32__\n-\n-inline rust_task *\n-rust_sched_loop::get_task() {\n-    if (!tls_initialized)\n-        return NULL;\n-    rust_task *task = reinterpret_cast<rust_task *>\n-        (pthread_getspecific(task_key));\n-    assert(task && \"Couldn't get the task from TLS!\");\n-    return task;\n-}\n-\n-#else\n-\n-inline rust_task *\n-rust_sched_loop::get_task() {\n-    if (!tls_initialized)\n-        return NULL;\n-    rust_task *task = reinterpret_cast<rust_task *>(TlsGetValue(task_key));\n-    assert(task && \"Couldn't get the task from TLS!\");\n-    return task;\n-}\n-\n-#endif\n-\n // NB: Runs on the Rust stack\n inline stk_seg *\n rust_sched_loop::borrow_c_stack() {"}, {"sha": "472a691a6fa56d7a50e07c1738e34d56c64274f6", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/33a949eed6e6a5f2cba72663d92a0012e5439d80/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/33a949eed6e6a5f2cba72663d92a0012e5439d80/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=33a949eed6e6a5f2cba72663d92a0012e5439d80", "patch": "@@ -552,7 +552,7 @@ extern \"C\" void\n shape_cmp_type(int8_t *result, const type_desc *tydesc,\n                const type_desc **subtydescs, uint8_t *data_0,\n                uint8_t *data_1, uint8_t cmp_type) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     shape::arena arena;\n \n     // FIXME: This may well be broken when comparing two closures or objects\n@@ -573,7 +573,7 @@ shape_cmp_type(int8_t *result, const type_desc *tydesc,\n \n extern \"C\" rust_str *\n shape_log_str(const type_desc *tydesc, uint8_t *data) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n \n     shape::arena arena;\n     shape::type_param *params =\n@@ -591,7 +591,7 @@ shape_log_str(const type_desc *tydesc, uint8_t *data) {\n \n extern \"C\" void\n shape_log_type(const type_desc *tydesc, uint8_t *data, uint32_t level) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n \n     shape::arena arena;\n     shape::type_param *params ="}, {"sha": "25266242485f0288421a8d3240e294cad2304e0b", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/33a949eed6e6a5f2cba72663d92a0012e5439d80/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/33a949eed6e6a5f2cba72663d92a0012e5439d80/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=33a949eed6e6a5f2cba72663d92a0012e5439d80", "patch": "@@ -270,7 +270,6 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     const char *get_cond_name() { return cond_name; }\n \n     void cleanup_after_turn();\n-    static rust_task *get_task_from_tcb();\n };\n \n // This stuff is on the stack-switching fast path\n@@ -445,26 +444,43 @@ rust_task::record_stack_limit() {\n     record_sp_limit(stk->data + LIMIT_OFFSET + RED_ZONE_SIZE);\n }\n \n-// The stack pointer boundary is stored in a quickly-accessible location\n-// in the TCB. From that we can calculate the address of the stack segment\n-// structure it belongs to, and in that structure is a pointer to the task\n-// that owns it.\n-inline rust_task*\n-rust_task::get_task_from_tcb() {\n+inline rust_task* __rust_get_task_tls()\n+{\n+    if (!rust_sched_loop::tls_initialized)\n+        return NULL;\n+#ifdef __WIN32__\n+    rust_task *task = reinterpret_cast<rust_task *>\n+        (TlsGetValue(rust_sched_loop::task_key));\n+#else\n+    rust_task *task = reinterpret_cast<rust_task *>\n+        (pthread_getspecific(rust_sched_loop::task_key));\n+#endif\n+    assert(task && \"Couldn't get the task from TLS!\");\n+    return task;\n+\n+}\n+\n+inline rust_task* rust_get_current_task() {\n     uintptr_t sp_limit = get_sp_limit();\n+\n     // FIXME (1226) - Because of a hack in upcall_call_shim_on_c_stack this\n     // value is sometimes inconveniently set to 0, so we can't use this\n     // method of retreiving the task pointer and need to fall back to TLS.\n-    if (sp_limit == 0) {\n-        return NULL;\n-    }\n+    if (sp_limit == 0)\n+        return __rust_get_task_tls();\n \n+    // The stack pointer boundary is stored in a quickly-accessible location\n+    // in the TCB. From that we can calculate the address of the stack segment\n+    // structure it belongs to, and in that structure is a pointer to the task\n+    // that owns it.\n     uintptr_t seg_addr =\n         sp_limit - RED_ZONE_SIZE - LIMIT_OFFSET - sizeof(stk_seg);\n     stk_seg *stk = (stk_seg*) seg_addr;\n     // Make sure we've calculated the right address\n     ::check_stack_canary(stk);\n-    assert(stk->task != NULL && \"task pointer not in stack structure\");\n+\n+    if (stk->task == NULL)\n+        return __rust_get_task_tls();\n     return stk->task;\n }\n "}, {"sha": "56446ab83a3f6b14fd59c238757174bf7dd94336", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/33a949eed6e6a5f2cba72663d92a0012e5439d80/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/33a949eed6e6a5f2cba72663d92a0012e5439d80/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=33a949eed6e6a5f2cba72663d92a0012e5439d80", "patch": "@@ -47,7 +47,7 @@ static void check_stack_alignment() { }\n inline void\n call_upcall_on_c_stack(void *args, void *fn_ptr) {\n     check_stack_alignment();\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     task->call_on_c_stack(args, fn_ptr);\n }\n \n@@ -62,7 +62,7 @@ extern \"C\" void record_sp_limit(void *limit);\n  */\n extern \"C\" CDECL void\n upcall_call_shim_on_c_stack(void *args, void *fn_ptr) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n \n     // FIXME (1226) - The shim functions generated by rustc contain the\n     // morestack prologue, so we need to let them know they have enough\n@@ -85,7 +85,7 @@ upcall_call_shim_on_c_stack(void *args, void *fn_ptr) {\n  */\n extern \"C\" CDECL void\n upcall_call_shim_on_rust_stack(void *args, void *fn_ptr) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n \n     // FIXME: Because of the hack in the other function that disables the\n     // stack limit when entering the C stack, here we restore the stack limit\n@@ -116,7 +116,7 @@ struct s_fail_args {\n \n extern \"C\" CDECL void\n upcall_s_fail(s_fail_args *args) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     LOG_UPCALL_ENTRY(task);\n     LOG_ERR(task, upcall, \"upcall fail '%s', %s:%\" PRIdPTR,\n             args->expr, args->file, args->line);\n@@ -142,7 +142,7 @@ struct s_malloc_args {\n \n extern \"C\" CDECL void\n upcall_s_malloc(s_malloc_args *args) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     LOG_UPCALL_ENTRY(task);\n \n     LOG(task, mem, \"upcall malloc(0x%\" PRIxPTR \")\", args->td);\n@@ -179,7 +179,7 @@ struct s_free_args {\n \n extern \"C\" CDECL void\n upcall_s_free(s_free_args *args) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     LOG_UPCALL_ENTRY(task);\n \n     rust_sched_loop *sched_loop = task->sched_loop;\n@@ -225,7 +225,7 @@ struct s_shared_malloc_args {\n \n extern \"C\" CDECL void\n upcall_s_shared_malloc(s_shared_malloc_args *args) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     LOG_UPCALL_ENTRY(task);\n \n     LOG(task, mem, \"upcall shared_malloc(%\" PRIdPTR \")\", args->nbytes);\n@@ -253,7 +253,7 @@ struct s_shared_free_args {\n \n extern \"C\" CDECL void\n upcall_s_shared_free(s_shared_free_args *args) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     LOG_UPCALL_ENTRY(task);\n \n     rust_sched_loop *sched_loop = task->sched_loop;\n@@ -277,7 +277,7 @@ struct s_shared_realloc_args {\n \n extern \"C\" CDECL void\n upcall_s_shared_realloc(s_shared_realloc_args *args) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     LOG_UPCALL_ENTRY(task);\n     args->retval = task->kernel->realloc(args->ptr, args->size);\n }\n@@ -298,7 +298,7 @@ struct s_vec_grow_args {\n \n extern \"C\" CDECL void\n upcall_s_vec_grow(s_vec_grow_args *args) {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     LOG_UPCALL_ENTRY(task);\n     reserve_vec(task, args->vp, args->new_sz);\n     (*args->vp)->fill = args->new_sz;\n@@ -320,7 +320,7 @@ extern \"C\" CDECL void\n upcall_s_str_concat(s_str_concat_args *args) {\n     rust_vec *lhs = args->lhs;\n     rust_vec *rhs = args->rhs;\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     size_t fill = lhs->fill + rhs->fill - 1;\n     rust_vec* v = (rust_vec*)task->kernel->malloc(fill + sizeof(rust_vec),\n                                                   \"str_concat\");\n@@ -377,7 +377,7 @@ upcall_rust_personality(int version,\n     s_rust_personality_args args = {(_Unwind_Reason_Code)0,\n                                     version, actions, exception_class,\n                                     ue_header, context};\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n \n     // The personality function is run on the stack of the\n     // last function that threw or landed, which is going\n@@ -444,7 +444,7 @@ upcall_log_type(const type_desc *tydesc, uint8_t *data, uint32_t level) {\n // NB: This needs to be blazing fast. Don't switch stacks\n extern \"C\" CDECL void *\n upcall_new_stack(size_t stk_sz, void *args_addr, size_t args_sz) {\n-    rust_task *task = rust_task::get_task_from_tcb();\n+    rust_task *task = rust_get_current_task();\n     return task->next_stack(stk_sz,\n                             args_addr,\n                             args_sz);\n@@ -453,7 +453,7 @@ upcall_new_stack(size_t stk_sz, void *args_addr, size_t args_sz) {\n // NB: This needs to be blazing fast. Don't switch stacks\n extern \"C\" CDECL void\n upcall_del_stack() {\n-    rust_task *task = rust_task::get_task_from_tcb();\n+    rust_task *task = rust_get_current_task();\n     task->prev_stack();\n }\n \n@@ -463,7 +463,7 @@ upcall_del_stack() {\n // needs to acquire the value of the stack pointer\n extern \"C\" CDECL void\n upcall_reset_stack_limit() {\n-    rust_task *task = rust_sched_loop::get_task();\n+    rust_task *task = rust_get_current_task();\n     task->reset_stack_limit();\n }\n "}, {"sha": "a926ed8b288cc0a3b459632591c1947b5bba8ac7", "filename": "src/rt/rust_uv.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33a949eed6e6a5f2cba72663d92a0012e5439d80/src%2Frt%2Frust_uv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/33a949eed6e6a5f2cba72663d92a0012e5439d80/src%2Frt%2Frust_uv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_uv.cpp?ref=33a949eed6e6a5f2cba72663d92a0012e5439d80", "patch": "@@ -20,13 +20,13 @@ struct handle_data {\n // helpers\n static void*\n current_kernel_malloc(size_t size, const char* tag) {\n-  void* ptr = rust_sched_loop::get_task()->kernel->malloc(size, tag);\n+  void* ptr = rust_get_current_task()->kernel->malloc(size, tag);\n   return ptr;\n }\n \n static void\n current_kernel_free(void* ptr) {\n-  rust_sched_loop::get_task()->kernel->free(ptr);\n+  rust_get_current_task()->kernel->free(ptr);\n }\n \n static handle_data*"}]}