{"sha": "9665da35cc493458e94d0b8a8931bf3d785071dc", "node_id": "C_kwDOAAsO6NoAKDk2NjVkYTM1Y2M0OTM0NThlOTRkMGI4YTg5MzFiZjNkNzg1MDcxZGM", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-26T06:21:55Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-27T00:35:29Z"}, "message": "Avoid producing `NoDelim` values in `FrameData`.", "tree": {"sha": "3b231381c0c5522fafbfc6418b1d926c703c3874", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b231381c0c5522fafbfc6418b1d926c703c3874"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9665da35cc493458e94d0b8a8931bf3d785071dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9665da35cc493458e94d0b8a8931bf3d785071dc", "html_url": "https://github.com/rust-lang/rust/commit/9665da35cc493458e94d0b8a8931bf3d785071dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9665da35cc493458e94d0b8a8931bf3d785071dc/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8e862cb7d4fd3ce4e71ca27cdef84101dfc1871", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8e862cb7d4fd3ce4e71ca27cdef84101dfc1871", "html_url": "https://github.com/rust-lang/rust/commit/a8e862cb7d4fd3ce4e71ca27cdef84101dfc1871"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "575b01180df77be00f2cac9899b732f971429863", "filename": "compiler/rustc_parse/src/parser/attr_wrapper.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9665da35cc493458e94d0b8a8931bf3d785071dc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9665da35cc493458e94d0b8a8931bf3d785071dc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs?ref=9665da35cc493458e94d0b8a8931bf3d785071dc", "patch": "@@ -5,7 +5,7 @@ use rustc_ast::tokenstream::{AttrAnnotatedTokenTree, DelimSpan, LazyTokenStream,\n use rustc_ast::{self as ast};\n use rustc_ast::{AstLike, AttrVec, Attribute};\n use rustc_errors::PResult;\n-use rustc_span::{sym, Span, DUMMY_SP};\n+use rustc_span::{sym, Span};\n \n use std::convert::TryInto;\n use std::ops::Range;\n@@ -400,24 +400,26 @@ fn make_token_stream(\n ) -> AttrAnnotatedTokenStream {\n     #[derive(Debug)]\n     struct FrameData {\n-        open: Span,\n-        open_delim: DelimToken,\n+        // This is `None` for the first frame, `Some` for all others.\n+        open_delim_sp: Option<(DelimToken, Span)>,\n         inner: Vec<(AttrAnnotatedTokenTree, Spacing)>,\n     }\n-    let mut stack =\n-        vec![FrameData { open: DUMMY_SP, open_delim: DelimToken::NoDelim, inner: vec![] }];\n+    let mut stack = vec![FrameData { open_delim_sp: None, inner: vec![] }];\n     let mut token_and_spacing = iter.next();\n     while let Some((token, spacing)) = token_and_spacing {\n         match token {\n             FlatToken::Token(Token { kind: TokenKind::OpenDelim(delim), span }) => {\n-                stack.push(FrameData { open: span, open_delim: delim, inner: vec![] });\n+                stack.push(FrameData { open_delim_sp: Some((delim, span)), inner: vec![] });\n             }\n             FlatToken::Token(Token { kind: TokenKind::CloseDelim(delim), span }) => {\n                 // HACK: If we encounter a mismatched `None` delimiter at the top\n                 // level, just ignore it.\n                 if matches!(delim, DelimToken::NoDelim)\n                     && (stack.len() == 1\n-                        || !matches!(stack.last_mut().unwrap().open_delim, DelimToken::NoDelim))\n+                        || !matches!(\n+                            stack.last_mut().unwrap().open_delim_sp.unwrap().0,\n+                            DelimToken::NoDelim\n+                        ))\n                 {\n                     token_and_spacing = iter.next();\n                     continue;\n@@ -430,7 +432,7 @@ fn make_token_stream(\n                 // merge our current frame with the one above it. That is, transform\n                 // `[ { < first second } third ]` into `[ { first second } third ]`\n                 if !matches!(delim, DelimToken::NoDelim)\n-                    && matches!(frame_data.open_delim, DelimToken::NoDelim)\n+                    && matches!(frame_data.open_delim_sp.unwrap().0, DelimToken::NoDelim)\n                 {\n                     stack.last_mut().unwrap().inner.extend(frame_data.inner);\n                     // Process our closing delimiter again, this time at the previous\n@@ -439,12 +441,13 @@ fn make_token_stream(\n                     continue;\n                 }\n \n+                let (open_delim, open_sp) = frame_data.open_delim_sp.unwrap();\n                 assert_eq!(\n-                    frame_data.open_delim, delim,\n+                    open_delim, delim,\n                     \"Mismatched open/close delims: open={:?} close={:?}\",\n-                    frame_data.open, span\n+                    open_delim, span\n                 );\n-                let dspan = DelimSpan::from_pair(frame_data.open, span);\n+                let dspan = DelimSpan::from_pair(open_sp, span);\n                 let stream = AttrAnnotatedTokenStream::new(frame_data.inner);\n                 let delimited = AttrAnnotatedTokenTree::Delimited(dspan, delim, stream);\n                 stack\n@@ -472,7 +475,7 @@ fn make_token_stream(\n     // HACK: If we don't have a closing `None` delimiter for our last\n     // frame, merge the frame with the top-level frame. That is,\n     // turn `< first second` into `first second`\n-    if stack.len() == 2 && stack[1].open_delim == DelimToken::NoDelim {\n+    if stack.len() == 2 && stack[1].open_delim_sp.unwrap().0 == DelimToken::NoDelim {\n         let temp_buf = stack.pop().unwrap();\n         stack.last_mut().unwrap().inner.extend(temp_buf.inner);\n     }"}]}