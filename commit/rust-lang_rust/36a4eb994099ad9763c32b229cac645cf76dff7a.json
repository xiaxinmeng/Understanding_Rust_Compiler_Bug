{"sha": "36a4eb994099ad9763c32b229cac645cf76dff7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2YTRlYjk5NDA5OWFkOTc2M2MzMmIyMjljYWM2NDVjZjc2ZGZmN2E=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-22T01:16:56Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-28T05:28:25Z"}, "message": "cleanup: refactor away `ast::NodeIdAssigner`", "tree": {"sha": "c8ddb6de043a46dedc6ef7f4dada8393764c6af4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8ddb6de043a46dedc6ef7f4dada8393764c6af4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36a4eb994099ad9763c32b229cac645cf76dff7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36a4eb994099ad9763c32b229cac645cf76dff7a", "html_url": "https://github.com/rust-lang/rust/commit/36a4eb994099ad9763c32b229cac645cf76dff7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36a4eb994099ad9763c32b229cac645cf76dff7a/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a13bcb4fbd2a305ebc6906960a00f72342295a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a13bcb4fbd2a305ebc6906960a00f72342295a9", "html_url": "https://github.com/rust-lang/rust/commit/4a13bcb4fbd2a305ebc6906960a00f72342295a9"}], "stats": {"total": 77, "additions": 20, "deletions": 57}, "files": [{"sha": "2cc39412182dc5a771417a8f7e714cdf6cad4a3d", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/36a4eb994099ad9763c32b229cac645cf76dff7a/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a4eb994099ad9763c32b229cac645cf76dff7a/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=36a4eb994099ad9763c32b229cac645cf76dff7a", "patch": "@@ -50,6 +50,7 @@ use session::Session;\n use std::collections::BTreeMap;\n use std::iter;\n use syntax::ast::*;\n+use syntax::errors;\n use syntax::ptr::P;\n use syntax::codemap::{respan, Spanned};\n use syntax::parse::token;\n@@ -60,7 +61,7 @@ use syntax_pos::Span;\n pub struct LoweringContext<'a> {\n     crate_root: Option<&'static str>,\n     // Use to assign ids to hir nodes that do not directly correspond to an ast node\n-    id_assigner: &'a NodeIdAssigner,\n+    sess: Option<&'a Session>,\n     // As we walk the AST we must keep track of the current 'parent' def id (in\n     // the form of a DefIndex) so that if we create a new node which introduces\n     // a definition, then we can properly create the def id.\n@@ -99,7 +100,6 @@ impl Resolver for DummyResolver {\n \n pub fn lower_crate(sess: &Session,\n                    krate: &Crate,\n-                   id_assigner: &NodeIdAssigner,\n                    resolver: &mut Resolver)\n                    -> hir::Crate {\n     // We're constructing the HIR here; we don't care what we will\n@@ -115,17 +115,17 @@ pub fn lower_crate(sess: &Session,\n         } else {\n             Some(\"std\")\n         },\n-        id_assigner: id_assigner,\n+        sess: Some(sess),\n         parent_def: None,\n         resolver: resolver,\n     }.lower_crate(krate)\n }\n \n impl<'a> LoweringContext<'a> {\n-    pub fn testing_context(id_assigner: &'a NodeIdAssigner, resolver: &'a mut Resolver) -> Self {\n+    pub fn testing_context(resolver: &'a mut Resolver) -> Self {\n         LoweringContext {\n             crate_root: None,\n-            id_assigner: id_assigner,\n+            sess: None,\n             parent_def: None,\n             resolver: resolver,\n         }\n@@ -161,7 +161,12 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn next_id(&self) -> NodeId {\n-        self.id_assigner.next_node_id()\n+        self.sess.map(Session::next_node_id).unwrap_or(0)\n+    }\n+\n+    fn diagnostic(&self) -> &errors::Handler {\n+        self.sess.map(Session::diagnostic)\n+                 .unwrap_or_else(|| panic!(\"this lowerer cannot emit diagnostics\"))\n     }\n \n     fn str_to_ident(&self, s: &'static str) -> Name {\n@@ -786,7 +791,7 @@ impl<'a> LoweringContext<'a> {\n         if let Some(SelfKind::Explicit(..)) = sig.decl.get_self().map(|eself| eself.node) {\n             match hir_sig.decl.get_self().map(|eself| eself.node) {\n                 Some(hir::SelfKind::Value(..)) | Some(hir::SelfKind::Region(..)) => {\n-                    self.id_assigner.diagnostic().span_err(sig.decl.inputs[0].ty.span,\n+                    self.diagnostic().span_err(sig.decl.inputs[0].ty.span,\n                         \"the type placeholder `_` is not allowed within types on item signatures\");\n                 }\n                 _ => {}\n@@ -1212,7 +1217,7 @@ impl<'a> LoweringContext<'a> {\n                             make_struct(self, e, &[\"RangeInclusive\", \"NonEmpty\"],\n                                                  &[(\"start\", e1), (\"end\", e2)]),\n \n-                        _ => panic!(self.id_assigner.diagnostic()\n+                        _ => panic!(self.diagnostic()\n                                         .span_fatal(e.span, \"inclusive range with no end\")),\n                     };\n                 }"}, {"sha": "fdaf182c6054246e0ed2d62b6958f8dc38c1c5f1", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/36a4eb994099ad9763c32b229cac645cf76dff7a/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a4eb994099ad9763c32b229cac645cf76dff7a/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=36a4eb994099ad9763c32b229cac645cf76dff7a", "patch": "@@ -20,7 +20,7 @@ use ty::tls;\n use util::nodemap::{NodeMap, FnvHashMap};\n use mir::transform as mir_pass;\n \n-use syntax::ast::{NodeId, NodeIdAssigner, Name};\n+use syntax::ast::{NodeId, Name};\n use errors::{self, DiagnosticBuilder};\n use errors::emitter::{Emitter, BasicEmitter, EmitterWriter};\n use syntax::json::JsonEmitter;\n@@ -272,6 +272,9 @@ impl Session {\n \n         id\n     }\n+    pub fn next_node_id(&self) -> NodeId {\n+        self.reserve_node_ids(1)\n+    }\n     pub fn diagnostic<'a>(&'a self) -> &'a errors::Handler {\n         &self.parse_sess.span_diagnostic\n     }\n@@ -345,20 +348,6 @@ impl Session {\n     }\n }\n \n-impl NodeIdAssigner for Session {\n-    fn next_node_id(&self) -> NodeId {\n-        self.reserve_node_ids(1)\n-    }\n-\n-    fn peek_node_id(&self) -> NodeId {\n-        self.next_node_id.get().checked_add(1).unwrap()\n-    }\n-\n-    fn diagnostic(&self) -> &errors::Handler {\n-        self.diagnostic()\n-    }\n-}\n-\n fn split_msg_into_multilines(msg: &str) -> Option<String> {\n     // Conditions for enabling multi-line errors:\n     if !msg.contains(\"mismatched types\") &&"}, {"sha": "980f0eeca184ea3e72118ce8da26b4c8fa12659c", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36a4eb994099ad9763c32b229cac645cf76dff7a/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a4eb994099ad9763c32b229cac645cf76dff7a/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=36a4eb994099ad9763c32b229cac645cf76dff7a", "patch": "@@ -49,13 +49,11 @@ use std::ffi::{OsString, OsStr};\n use std::fs;\n use std::io::{self, Write};\n use std::path::{Path, PathBuf};\n-use syntax::ast::{self, NodeIdAssigner};\n+use syntax::{ast, diagnostics, visit};\n use syntax::attr::{self, AttrMetaMethods};\n-use syntax::diagnostics;\n use syntax::fold::Folder;\n use syntax::parse::{self, PResult, token};\n use syntax::util::node_count::NodeCounter;\n-use syntax::visit;\n use syntax;\n use syntax_ext;\n \n@@ -823,7 +821,7 @@ pub fn lower_and_resolve<'a>(sess: &Session,\n \n         // Lower ast -> hir.\n         let hir_forest = time(sess.time_passes(), \"lowering ast -> hir\", || {\n-            hir_map::Forest::new(lower_crate(sess, krate, sess, &mut resolver), dep_graph)\n+            hir_map::Forest::new(lower_crate(sess, krate, &mut resolver), dep_graph)\n         });\n \n         (ty::CrateAnalysis {"}, {"sha": "7ef00b971c57ba6262f24be7b313c4798c9621ee", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/36a4eb994099ad9763c32b229cac645cf76dff7a/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a4eb994099ad9763c32b229cac645cf76dff7a/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=36a4eb994099ad9763c32b229cac645cf76dff7a", "patch": "@@ -38,7 +38,6 @@ use rustc::ty::subst;\n use rustc::ty::{self, Ty, TyCtxt};\n \n use syntax::ast;\n-use syntax::ast::NodeIdAssigner;\n use syntax::ptr::P;\n use syntax_pos;\n \n@@ -56,7 +55,6 @@ use rustc_serialize::{Encodable, EncoderHelpers};\n \n #[cfg(test)] use std::io::Cursor;\n #[cfg(test)] use syntax::parse;\n-#[cfg(test)] use syntax::ast::NodeId;\n #[cfg(test)] use rustc::hir::print as pprust;\n #[cfg(test)] use rustc::hir::lowering::{LoweringContext, DummyResolver};\n \n@@ -1295,32 +1293,15 @@ impl FakeExtCtxt for parse::ParseSess {\n     fn parse_sess(&self) -> &parse::ParseSess { self }\n }\n \n-#[cfg(test)]\n-struct FakeNodeIdAssigner;\n-\n-#[cfg(test)]\n-// It should go without saying that this may give unexpected results. Avoid\n-// lowering anything which needs new nodes.\n-impl NodeIdAssigner for FakeNodeIdAssigner {\n-    fn next_node_id(&self) -> NodeId {\n-        0\n-    }\n-\n-    fn peek_node_id(&self) -> NodeId {\n-        0\n-    }\n-}\n-\n #[cfg(test)]\n fn mk_ctxt() -> parse::ParseSess {\n     parse::ParseSess::new()\n }\n \n #[cfg(test)]\n fn with_testing_context<T, F: FnOnce(&mut LoweringContext) -> T>(f: F) -> T {\n-    let assigner = FakeNodeIdAssigner;\n     let mut resolver = DummyResolver;\n-    let mut lcx = LoweringContext::testing_context(&assigner, &mut resolver);\n+    let mut lcx = LoweringContext::testing_context(&mut resolver);\n     f(&mut lcx)\n }\n "}, {"sha": "cc033cec8b8b1db948ee3f47ae983315a6e8d81e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/36a4eb994099ad9763c32b229cac645cf76dff7a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a4eb994099ad9763c32b229cac645cf76dff7a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=36a4eb994099ad9763c32b229cac645cf76dff7a", "patch": "@@ -19,7 +19,6 @@ pub use util::ThinVec;\n use syntax_pos::{mk_sp, Span, DUMMY_SP, ExpnId};\n use codemap::{respan, Spanned};\n use abi::Abi;\n-use errors;\n use parse::token::{self, keywords, InternedString};\n use print::pprust;\n use ptr::P;\n@@ -362,15 +361,6 @@ pub const CRATE_NODE_ID: NodeId = 0;\n /// small, positive ids.\n pub const DUMMY_NODE_ID: NodeId = !0;\n \n-pub trait NodeIdAssigner {\n-    fn next_node_id(&self) -> NodeId;\n-    fn peek_node_id(&self) -> NodeId;\n-\n-    fn diagnostic(&self) -> &errors::Handler {\n-        panic!(\"this ID assigner cannot emit diagnostics\")\n-    }\n-}\n-\n /// The AST represents all type param bounds as types.\n /// typeck::collect::compute_bounds matches these against\n /// the \"special\" built-in traits (see middle::lang_items) and"}]}