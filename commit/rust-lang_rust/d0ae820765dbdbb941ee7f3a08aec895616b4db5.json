{"sha": "d0ae820765dbdbb941ee7f3a08aec895616b4db5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYWU4MjA3NjVkYmRiYjk0MWVlN2YzYTA4YWVjODk1NjE2YjRkYjU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-16T12:35:02Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-16T21:36:01Z"}, "message": "std::vec::raw: convert copy_memory to a method.", "tree": {"sha": "1969b06b40d5bff45bebc4cab50b1b1eacb32cf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1969b06b40d5bff45bebc4cab50b1b1eacb32cf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0ae820765dbdbb941ee7f3a08aec895616b4db5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0ae820765dbdbb941ee7f3a08aec895616b4db5", "html_url": "https://github.com/rust-lang/rust/commit/d0ae820765dbdbb941ee7f3a08aec895616b4db5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0ae820765dbdbb941ee7f3a08aec895616b4db5/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad20a78c548819b6671ee11eed7501e61429575a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad20a78c548819b6671ee11eed7501e61429575a", "html_url": "https://github.com/rust-lang/rust/commit/ad20a78c548819b6671ee11eed7501e61429575a"}], "stats": {"total": 45, "additions": 22, "deletions": 23}, "files": [{"sha": "38a1394d339c4b7d64a7324a289a70cc2d958da8", "filename": "src/libextra/uuid.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0ae820765dbdbb941ee7f3a08aec895616b4db5/src%2Flibextra%2Fuuid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ae820765dbdbb941ee7f3a08aec895616b4db5/src%2Flibextra%2Fuuid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuuid.rs?ref=d0ae820765dbdbb941ee7f3a08aec895616b4db5", "patch": "@@ -219,9 +219,7 @@ impl Uuid {\n         }\n \n         let mut uuid = Uuid{ bytes: [0, .. 16] };\n-        unsafe {\n-            vec::raw::copy_memory(uuid.bytes, b);\n-        }\n+        vec::bytes::copy_memory(uuid.bytes, b);\n         Some(uuid)\n     }\n "}, {"sha": "ed58185e3b032c6d55760dc4f8c3c7919d26e4fe", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d0ae820765dbdbb941ee7f3a08aec895616b4db5/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0ae820765dbdbb941ee7f3a08aec895616b4db5/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=d0ae820765dbdbb941ee7f3a08aec895616b4db5", "patch": "@@ -2060,6 +2060,12 @@ pub trait MutableVector<'a, T> {\n      */\n     unsafe fn init_elem(self, i: uint, val: T);\n \n+    /// Copies data from `src` to `self`\n+    ///\n+    /// `self` and `src` must not overlap. Fails if `self` is\n+    /// shorter than `src`.\n+    unsafe fn copy_memory(self, src: &[T]);\n+\n     /// Similar to `as_imm_buf` but passing a `*mut T`\n     fn as_mut_buf<U>(self, f: |*mut T, uint| -> U) -> U;\n }\n@@ -2197,6 +2203,16 @@ impl<'a,T> MutableVector<'a, T> for &'a mut [T] {\n         })\n     }\n \n+    #[inline]\n+    unsafe fn copy_memory(self, src: &[T]) {\n+        self.as_mut_buf(|p_dst, len_dst| {\n+            src.as_imm_buf(|p_src, len_src| {\n+                assert!(len_dst >= len_src)\n+                ptr::copy_memory(p_dst, p_src, len_src)\n+            })\n+        })\n+    }\n+\n     #[inline]\n     fn as_mut_buf<U>(self, f: |*mut T, uint| -> U) -> U {\n         let Slice{ data, len } = self.repr();\n@@ -2238,7 +2254,7 @@ pub unsafe fn from_buf<T>(ptr: *T, elts: uint) -> ~[T] {\n pub mod raw {\n     use cast;\n     use ptr;\n-    use vec::{with_capacity, ImmutableVector, MutableVector};\n+    use vec::{with_capacity, MutableVector};\n     use unstable::raw::Slice;\n \n     /**\n@@ -2288,21 +2304,6 @@ pub mod raw {\n         dst\n     }\n \n-    /**\n-      * Copies data from one vector to another.\n-      *\n-      * Copies `src` to `dst`. The source and destination may overlap.\n-      */\n-    #[inline]\n-    pub unsafe fn copy_memory<T>(dst: &mut [T], src: &[T]) {\n-        dst.as_mut_buf(|p_dst, len_dst| {\n-            src.as_imm_buf(|p_src, len_src| {\n-                assert!(len_dst >= len_src)\n-                ptr::copy_memory(p_dst, p_src, len_src)\n-            })\n-        })\n-    }\n-\n     /**\n      * Returns a pointer to first element in slice and adjusts\n      * slice so it no longer contains that element. Fails if\n@@ -2331,7 +2332,7 @@ pub mod raw {\n \n /// Operations on `[u8]`.\n pub mod bytes {\n-    use vec::raw;\n+    use vec::MutableVector;\n     use ptr;\n \n     /// A trait for operations on mutable `[u8]`s.\n@@ -2358,8 +2359,8 @@ pub mod bytes {\n       */\n     #[inline]\n     pub fn copy_memory(dst: &mut [u8], src: &[u8]) {\n-        // Bound checks are done at vec::raw::copy_memory.\n-        unsafe { raw::copy_memory(dst, src) }\n+        // Bound checks are done at .copy_memory.\n+        unsafe { dst.copy_memory(src) }\n     }\n \n     /**\n@@ -3585,7 +3586,7 @@ mod tests {\n         unsafe {\n             let mut a = [1, 2, 3, 4];\n             let b = [1, 2, 3, 4, 5];\n-            raw::copy_memory(a, b);\n+            a.copy_memory(b);\n         }\n     }\n "}]}