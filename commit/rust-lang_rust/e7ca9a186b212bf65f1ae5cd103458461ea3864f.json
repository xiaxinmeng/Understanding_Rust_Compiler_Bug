{"sha": "e7ca9a186b212bf65f1ae5cd103458461ea3864f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3Y2E5YTE4NmIyMTJiZjY1ZjFhZTVjZDEwMzQ1ODQ2MWVhMzg2NGY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-09T12:45:23Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-09-09T12:45:23Z"}, "message": "Fix jit", "tree": {"sha": "f65d53d639c891be64bb12a3aec5c7edb09e06d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f65d53d639c891be64bb12a3aec5c7edb09e06d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7ca9a186b212bf65f1ae5cd103458461ea3864f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7ca9a186b212bf65f1ae5cd103458461ea3864f", "html_url": "https://github.com/rust-lang/rust/commit/e7ca9a186b212bf65f1ae5cd103458461ea3864f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7ca9a186b212bf65f1ae5cd103458461ea3864f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6196146ac486bcdea476a385c9b46741fe88fd89", "url": "https://api.github.com/repos/rust-lang/rust/commits/6196146ac486bcdea476a385c9b46741fe88fd89", "html_url": "https://github.com/rust-lang/rust/commit/6196146ac486bcdea476a385c9b46741fe88fd89"}], "stats": {"total": 38, "additions": 22, "deletions": 16}, "files": [{"sha": "eb39e574902787130b507cbef74503d4217ca61e", "filename": "build.sh", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e7ca9a186b212bf65f1ae5cd103458461ea3864f/build.sh", "raw_url": "https://github.com/rust-lang/rust/raw/e7ca9a186b212bf65f1ae5cd103458461ea3864f/build.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.sh?ref=e7ca9a186b212bf65f1ae5cd103458461ea3864f", "patch": "@@ -35,7 +35,7 @@ build_lib() {\n }\n \n run_bin() {\n-    SHOULD_RUN=1 $RUSTC $1 --crate-type bin\n+    SHOULD_RUN=1 $RUSTC $@ --crate-type bin\n }\n \n build_example_bin() {\n@@ -58,15 +58,18 @@ RUSTC=\"rustc -Zcodegen-backend=$(pwd)/target/$channel/librustc_codegen_cranelift\n rm -r target/out || true\n mkdir -p target/out/clif\n \n+echo \"[BUILD] mini_core\"\n build_lib mini_core examples/mini_core.rs\n \n $RUSTC examples/example.rs --crate-type lib\n \n-# SimpleJIT is broken\n-# run_bin examples/mini_core_hello_world.rs\n+echo \"[JIT] mini_core_hello_world\"\n+run_bin examples/mini_core_hello_world.rs --cfg jit\n \n+echo \"[AOT] mini_core_hello_world\"\n build_example_bin mini_core_hello_world examples/mini_core_hello_world.rs\n \n+echo \"[BUILD] core\"\n time $RUSTC target/libcore/src/libcore/lib.rs --crate-type lib --crate-name core -Cincremental=target/incremental_core\n cat target/out/log.txt | sort | uniq -c\n #extract_data libcore.rlib core.o"}, {"sha": "9c08269d60bafb22e81503636b1ef24b74418cc5", "filename": "examples/mini_core_hello_world.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e7ca9a186b212bf65f1ae5cd103458461ea3864f/examples%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7ca9a186b212bf65f1ae5cd103458461ea3864f/examples%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/examples%2Fmini_core_hello_world.rs?ref=e7ca9a186b212bf65f1ae5cd103458461ea3864f", "patch": "@@ -17,6 +17,10 @@ unsafe extern \"C\" fn my_puts(s: *const u8) {\n     puts(s);\n }\n \n+// TODO remove when jit supports linking rlibs\n+#[cfg(jit)]\n+fn panic<T>(_: T) { loop {} }\n+\n #[lang = \"termination\"]\n trait Termination {\n     fn report(self) -> i32;\n@@ -61,8 +65,12 @@ fn main() {\n         let ptr: *const u8 = hello as *const [u8] as *const u8;\n         puts(ptr);\n \n-        let world = box \"World!\\0\";\n-        puts(*world as *const str as *const u8);\n+        // TODO remove when jit supports linking rlibs\n+        #[cfg(not(jit))]\n+        {\n+            let world = box \"World!\\0\";\n+            puts(*world as *const str as *const u8);\n+        }\n \n         if intrinsics::size_of_val(hello) as u8 != 6 {\n             panic(&(\"\", \"\", 0, 0));"}, {"sha": "9bb89b88b21741149aac34babc83e981fab3084c", "filename": "src/constant.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7ca9a186b212bf65f1ae5cd103458461ea3864f/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7ca9a186b212bf65f1ae5cd103458461ea3864f/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=e7ca9a186b212bf65f1ae5cd103458461ea3864f", "patch": "@@ -27,9 +27,7 @@ impl ConstantCx {\n         //println!(\"todo {:?}\", self.todo);\n         define_all_allocs(tcx, module, &mut self);\n         //println!(\"done {:?}\", self.done);\n-        for data_id in self.done.drain() {\n-            module.finalize_data(data_id);\n-        }\n+        self.done.clear();\n     }\n }\n "}, {"sha": "82754fc47418e18d795571cd7c8ef465e8f4c940", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e7ca9a186b212bf65f1ae5cd103458461ea3864f/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7ca9a186b212bf65f1ae5cd103458461ea3864f/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=e7ca9a186b212bf65f1ae5cd103458461ea3864f", "patch": "@@ -230,9 +230,8 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             codegen_mono_items(tcx, &mut jit_module, &mono_items);\n \n             tcx.sess.abort_if_errors();\n-            tcx.sess.warn(\"Compiled everything\");\n-\n-            tcx.sess.warn(\"Rustc codegen cranelift will JIT run the executable, because the SHOULD_RUN env var is set\");\n+            println!(\"Compiled everything\");\n+            println!(\"Rustc codegen cranelift will JIT run the executable, because the SHOULD_RUN env var is set\");\n \n             let sig = Signature {\n                 params: vec![\n@@ -246,14 +245,14 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                 .declare_function(\"main\", Linkage::Import, &sig)\n                 .unwrap();\n \n-            let finalized_main: *const u8 = jit_module.finalize_function(main_func_id);\n             jit_module.finalize_all();\n-            tcx.sess.warn(\"Finalized everything\");\n+            let finalized_main: *const u8 = jit_module.get_finalized_function(main_func_id);\n+            println!(\"\ud83c\udf89 Finalized everything\");\n \n             let f: extern \"C\" fn(isize, *const *const u8) -> isize =\n                 unsafe { ::std::mem::transmute(finalized_main) };\n             let res = f(0, 0 as *const _);\n-            tcx.sess.warn(&format!(\"main returned {}\", res));\n+            tcx.sess.warn(&format!(\"\ud83d\ude80 main returned {}\", res));\n \n             jit_module.finish();\n             ::std::process::exit(0);\n@@ -271,11 +270,9 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             codegen_mono_items(tcx, &mut faerie_module, &mono_items);\n \n             tcx.sess.abort_if_errors();\n-            tcx.sess.warn(\"Compiled everything\");\n \n             if should_codegen(tcx.sess) {\n                 faerie_module.finalize_all();\n-                tcx.sess.warn(\"Finalized everything\");\n             }\n \n             return Box::new(OngoingCodegen {"}]}