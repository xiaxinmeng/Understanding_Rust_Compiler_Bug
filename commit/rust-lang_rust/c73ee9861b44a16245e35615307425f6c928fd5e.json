{"sha": "c73ee9861b44a16245e35615307425f6c928fd5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3M2VlOTg2MWI0NGExNjI0NWUzNTYxNTMwNzQyNWY2YzkyOGZkNWU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2019-06-15T17:02:27Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-02-21T18:41:21Z"}, "message": "Check suitability of the provided default", "tree": {"sha": "5da918f8c9a1176a6ba2b24199482076a9894418", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5da918f8c9a1176a6ba2b24199482076a9894418"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c73ee9861b44a16245e35615307425f6c928fd5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c73ee9861b44a16245e35615307425f6c928fd5e", "html_url": "https://github.com/rust-lang/rust/commit/c73ee9861b44a16245e35615307425f6c928fd5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c73ee9861b44a16245e35615307425f6c928fd5e/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3be26d6a8eaf3b5a7c22ba2324ef0751835ce26", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3be26d6a8eaf3b5a7c22ba2324ef0751835ce26", "html_url": "https://github.com/rust-lang/rust/commit/d3be26d6a8eaf3b5a7c22ba2324ef0751835ce26"}], "stats": {"total": 342, "additions": 342, "deletions": 0}, "files": [{"sha": "959feb766ee003b6b76b3926b9c4c494920a5cb5", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/c73ee9861b44a16245e35615307425f6c928fd5e/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73ee9861b44a16245e35615307425f6c928fd5e/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=c73ee9861b44a16245e35615307425f6c928fd5e", "patch": "@@ -425,6 +425,78 @@ fn check_trait(tcx: TyCtxt<'_>, item: &hir::Item<'_>) {\n \n     for_item(tcx, item).with_fcx(|fcx, _| {\n         check_where_clauses(tcx, fcx, item.span, trait_def_id, None);\n+\n+        // Type-check associated type defaults (if there are any):\n+        // Assuming the defaults are used, check that all predicates (bounds on\n+        // the assoc type and where clauses on the trait) hold.\n+\n+        let substs = InternalSubsts::identity_for_item(tcx, trait_def_id);\n+\n+        // For all assoc. types with defaults, build a map from\n+        // `<Self as Trait<...>>::Assoc` to the default type.\n+        let map = tcx.associated_items(trait_def_id)\n+            .filter_map(|item| {\n+                if item.kind == ty::AssocKind::Type && item.defaultness.has_value() {\n+                    // `<Self as Trait<...>>::Assoc`\n+                    let proj = ty::ProjectionTy {\n+                        substs,\n+                        item_def_id: item.def_id,\n+                    };\n+                    let default_ty = tcx.type_of(item.def_id);\n+                    debug!(\"assoc. type default mapping: {} -> {}\", proj, default_ty);\n+                    Some((proj, default_ty))\n+                } else {\n+                    None\n+                }\n+            })\n+            .collect::<FxHashMap<_, _>>();\n+\n+        struct DefaultNormalizer<'tcx> {\n+            tcx: TyCtxt<'tcx>,\n+            map: FxHashMap<ty::ProjectionTy<'tcx>, Ty<'tcx>>,\n+        }\n+\n+        impl<'tcx> ty::fold::TypeFolder<'tcx> for DefaultNormalizer<'tcx> {\n+            fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n+                self.tcx\n+            }\n+\n+            fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n+                match t.sty {\n+                    ty::Projection(proj_ty) => {\n+                        if let Some(default) = self.map.get(&proj_ty) {\n+                            default\n+                        } else {\n+                            t.super_fold_with(self)\n+                        }\n+                    }\n+                    _ => t.super_fold_with(self),\n+                }\n+            }\n+        }\n+\n+        // Now take all predicates defined on the trait, replace any mention of\n+        // the assoc. types with their default, and prove them.\n+        // We only consider predicates that directly mention the assoc. type.\n+        let mut norm = DefaultNormalizer { tcx, map };\n+        let predicates = fcx.tcx.predicates_of(trait_def_id);\n+        for &(orig_pred, span) in predicates.predicates.iter() {\n+            let pred = orig_pred.fold_with(&mut norm);\n+            if pred != orig_pred {\n+                // Mentions one of the defaulted assoc. types\n+                debug!(\"default suitability check: proving predicate: {} -> {}\", orig_pred, pred);\n+                let pred = fcx.normalize_associated_types_in(span, &pred);\n+                let cause = traits::ObligationCause::new(\n+                    span,\n+                    fcx.body_id,\n+                    traits::ItemObligation(trait_def_id),\n+                );\n+                let obligation = traits::Obligation::new(cause, fcx.param_env, pred);\n+\n+                fcx.register_predicate(obligation);\n+            }\n+        }\n+\n         vec![]\n     });\n }"}, {"sha": "6a8ea3b6d42f4e891f06ae8fe9bba19022956e6c", "filename": "src/test/ui/associated-types/defaults-suitability.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/c73ee9861b44a16245e35615307425f6c928fd5e/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c73ee9861b44a16245e35615307425f6c928fd5e/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.rs?ref=c73ee9861b44a16245e35615307425f6c928fd5e", "patch": "@@ -0,0 +1,93 @@\n+//! Checks that associated type defaults are properly validated.\n+//!\n+//! This means:\n+//! * Default types are wfchecked\n+//! * Default types are checked against where clauses on the assoc. type\n+//!   (eg. `type Assoc: Clone = NotClone`), and also against where clauses on\n+//!   the trait itself when possible\n+\n+// compile-fail\n+\n+#![feature(associated_type_defaults)]\n+\n+struct NotClone;\n+\n+// Assoc. type bounds must hold for the default type\n+trait Tr {\n+    type Ty: Clone = NotClone;\n+    //~^ ERROR the trait bound `NotClone: std::clone::Clone` is not satisfied\n+}\n+\n+// Where-clauses defined on the trait must also be considered\n+trait Tr2 where Self::Ty: Clone {\n+    //~^ ERROR the trait bound `NotClone: std::clone::Clone` is not satisfied\n+    type Ty = NotClone;\n+}\n+\n+// Independent of where-clauses (there are none here), default types must always be wf\n+trait Tr3 {\n+    type Ty = Vec<[u8]>;\n+    //~^ ERROR the size for values of type `[u8]` cannot be known at compilation time\n+}\n+\n+// Involved type parameters must fulfill all bounds required by defaults that mention them\n+trait Foo<T> {\n+    type Bar: Clone = Vec<T>;\n+    //~^ ERROR the trait bound `T: std::clone::Clone` is not satisfied\n+}\n+\n+trait Bar: Sized {\n+    // `(): Foo<Self>` might hold for some possible impls but not all.\n+    type Assoc: Foo<Self> = ();\n+    //~^ ERROR the trait bound `(): Foo<Self>` is not satisfied\n+}\n+\n+trait IsU8<T> {}\n+impl<T> IsU8<u8> for T {}\n+\n+// Test that mentioning the assoc. type inside where clauses works\n+trait C where\n+    Vec<Self::Assoc>: Clone,\n+    Self::Assoc: IsU8<Self::Assoc>,\n+    bool: IsU8<Self::Assoc>,\n+{\n+    type Assoc = u8;\n+}\n+\n+// Test that we get all expected errors if that default is unsuitable\n+trait D where\n+    Vec<Self::Assoc>: Clone,\n+    //~^ ERROR the trait bound `NotClone: std::clone::Clone` is not satisfied\n+    Self::Assoc: IsU8<Self::Assoc>,\n+    //~^ ERROR the trait bound `NotClone: IsU8<NotClone>` is not satisfied\n+    bool: IsU8<Self::Assoc>,\n+    //~^ ERROR the trait bound `bool: IsU8<NotClone>` is not satisfied\n+{\n+    type Assoc = NotClone;\n+}\n+\n+trait Foo2<T> where\n+    <Self as Foo2<T>>::Bar: Clone,\n+    //~^ ERROR the trait bound `<Self as Foo2<T>>::Baz: std::clone::Clone` is not satisfied\n+{\n+    type Bar = Vec<Self::Baz>;\n+    type Baz = T;\n+}\n+\n+trait Foo3<T: Clone> where\n+    <Self as Foo3<T>>::Bar: Clone,\n+    //~^ ERROR the trait bound `<Self as Foo3<T>>::Baz: std::clone::Clone` is not satisfied\n+{\n+    type Bar = Vec<Self::Baz>;\n+    type Baz = T;\n+}\n+\n+trait Foo4<T> where\n+    <Self as Foo4<T>>::Bar: Clone,\n+{\n+    type Bar = Vec<Self::Baz>;\n+    type Baz: Clone = T;\n+    //~^ ERROR the trait bound `T: std::clone::Clone` is not satisfied\n+}\n+\n+fn main() {}"}, {"sha": "67b31b414fa95d8b5908671a2f6206f78b2388ba", "filename": "src/test/ui/associated-types/defaults-suitability.stderr", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/c73ee9861b44a16245e35615307425f6c928fd5e/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c73ee9861b44a16245e35615307425f6c928fd5e/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr?ref=c73ee9861b44a16245e35615307425f6c928fd5e", "patch": "@@ -0,0 +1,177 @@\n+error[E0277]: the trait bound `NotClone: std::clone::Clone` is not satisfied\n+  --> $DIR/defaults-suitability.rs:17:14\n+   |\n+LL |     type Ty: Clone = NotClone;\n+   |              ^^^^^ the trait `std::clone::Clone` is not implemented for `NotClone`\n+   |\n+note: required by `Tr`\n+  --> $DIR/defaults-suitability.rs:16:1\n+   |\n+LL | trait Tr {\n+   | ^^^^^^^^\n+\n+error[E0277]: the trait bound `NotClone: std::clone::Clone` is not satisfied\n+  --> $DIR/defaults-suitability.rs:22:27\n+   |\n+LL | trait Tr2 where Self::Ty: Clone {\n+   |                           ^^^^^ the trait `std::clone::Clone` is not implemented for `NotClone`\n+   |\n+note: required by `Tr2`\n+  --> $DIR/defaults-suitability.rs:22:1\n+   |\n+LL | trait Tr2 where Self::Ty: Clone {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: the trait bound `T: std::clone::Clone` is not satisfied\n+  --> $DIR/defaults-suitability.rs:35:15\n+   |\n+LL |     type Bar: Clone = Vec<T>;\n+   |               ^^^^^ the trait `std::clone::Clone` is not implemented for `T`\n+   |\n+   = help: consider adding a `where T: std::clone::Clone` bound\n+   = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<T>`\n+note: required by `Foo`\n+  --> $DIR/defaults-suitability.rs:34:1\n+   |\n+LL | trait Foo<T> {\n+   | ^^^^^^^^^^^^\n+\n+error[E0277]: the trait bound `(): Foo<Self>` is not satisfied\n+  --> $DIR/defaults-suitability.rs:41:17\n+   |\n+LL |     type Assoc: Foo<Self> = ();\n+   |                 ^^^^^^^^^ the trait `Foo<Self>` is not implemented for `()`\n+   |\n+note: required by `Bar`\n+  --> $DIR/defaults-suitability.rs:39:1\n+   |\n+LL | trait Bar: Sized {\n+   | ^^^^^^^^^^^^^^^^\n+\n+error[E0277]: the trait bound `NotClone: IsU8<NotClone>` is not satisfied\n+  --> $DIR/defaults-suitability.rs:61:18\n+   |\n+LL |     Self::Assoc: IsU8<Self::Assoc>,\n+   |                  ^^^^^^^^^^^^^^^^^ the trait `IsU8<NotClone>` is not implemented for `NotClone`\n+   |\n+note: required by `D`\n+  --> $DIR/defaults-suitability.rs:58:1\n+   |\n+LL | / trait D where\n+LL | |     Vec<Self::Assoc>: Clone,\n+LL | |\n+LL | |     Self::Assoc: IsU8<Self::Assoc>,\n+...  |\n+LL | |     type Assoc = NotClone;\n+LL | | }\n+   | |_^\n+\n+error[E0277]: the trait bound `bool: IsU8<NotClone>` is not satisfied\n+  --> $DIR/defaults-suitability.rs:63:11\n+   |\n+LL |     bool: IsU8<Self::Assoc>,\n+   |           ^^^^^^^^^^^^^^^^^ the trait `IsU8<NotClone>` is not implemented for `bool`\n+   |\n+note: required by `D`\n+  --> $DIR/defaults-suitability.rs:58:1\n+   |\n+LL | / trait D where\n+LL | |     Vec<Self::Assoc>: Clone,\n+LL | |\n+LL | |     Self::Assoc: IsU8<Self::Assoc>,\n+...  |\n+LL | |     type Assoc = NotClone;\n+LL | | }\n+   | |_^\n+\n+error[E0277]: the trait bound `NotClone: std::clone::Clone` is not satisfied\n+  --> $DIR/defaults-suitability.rs:59:23\n+   |\n+LL |     Vec<Self::Assoc>: Clone,\n+   |                       ^^^^^ the trait `std::clone::Clone` is not implemented for `NotClone`\n+   |\n+   = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<NotClone>`\n+note: required by `D`\n+  --> $DIR/defaults-suitability.rs:58:1\n+   |\n+LL | / trait D where\n+LL | |     Vec<Self::Assoc>: Clone,\n+LL | |\n+LL | |     Self::Assoc: IsU8<Self::Assoc>,\n+...  |\n+LL | |     type Assoc = NotClone;\n+LL | | }\n+   | |_^\n+\n+error[E0277]: the trait bound `<Self as Foo2<T>>::Baz: std::clone::Clone` is not satisfied\n+  --> $DIR/defaults-suitability.rs:70:29\n+   |\n+LL |     <Self as Foo2<T>>::Bar: Clone,\n+   |                             ^^^^^ the trait `std::clone::Clone` is not implemented for `<Self as Foo2<T>>::Baz`\n+   |\n+   = help: consider adding a `where <Self as Foo2<T>>::Baz: std::clone::Clone` bound\n+   = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<<Self as Foo2<T>>::Baz>`\n+note: required by `Foo2`\n+  --> $DIR/defaults-suitability.rs:69:1\n+   |\n+LL | / trait Foo2<T> where\n+LL | |     <Self as Foo2<T>>::Bar: Clone,\n+LL | |\n+LL | | {\n+LL | |     type Bar = Vec<Self::Baz>;\n+LL | |     type Baz = T;\n+LL | | }\n+   | |_^\n+\n+error[E0277]: the trait bound `<Self as Foo3<T>>::Baz: std::clone::Clone` is not satisfied\n+  --> $DIR/defaults-suitability.rs:78:29\n+   |\n+LL |     <Self as Foo3<T>>::Bar: Clone,\n+   |                             ^^^^^ the trait `std::clone::Clone` is not implemented for `<Self as Foo3<T>>::Baz`\n+   |\n+   = help: consider adding a `where <Self as Foo3<T>>::Baz: std::clone::Clone` bound\n+   = note: required because of the requirements on the impl of `std::clone::Clone` for `std::vec::Vec<<Self as Foo3<T>>::Baz>`\n+note: required by `Foo3`\n+  --> $DIR/defaults-suitability.rs:77:1\n+   |\n+LL | / trait Foo3<T: Clone> where\n+LL | |     <Self as Foo3<T>>::Bar: Clone,\n+LL | |\n+LL | | {\n+LL | |     type Bar = Vec<Self::Baz>;\n+LL | |     type Baz = T;\n+LL | | }\n+   | |_^\n+\n+error[E0277]: the trait bound `T: std::clone::Clone` is not satisfied\n+  --> $DIR/defaults-suitability.rs:89:15\n+   |\n+LL |     type Baz: Clone = T;\n+   |               ^^^^^ the trait `std::clone::Clone` is not implemented for `T`\n+   |\n+   = help: consider adding a `where T: std::clone::Clone` bound\n+note: required by `Foo4`\n+  --> $DIR/defaults-suitability.rs:85:1\n+   |\n+LL | / trait Foo4<T> where\n+LL | |     <Self as Foo4<T>>::Bar: Clone,\n+LL | | {\n+LL | |     type Bar = Vec<Self::Baz>;\n+LL | |     type Baz: Clone = T;\n+LL | |\n+LL | | }\n+   | |_^\n+\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/defaults-suitability.rs:29:5\n+   |\n+LL |     type Ty = Vec<[u8]>;\n+   |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: required by `std::vec::Vec`\n+\n+error: aborting due to 11 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}