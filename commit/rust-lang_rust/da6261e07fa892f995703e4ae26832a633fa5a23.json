{"sha": "da6261e07fa892f995703e4ae26832a633fa5a23", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNjI2MWUwN2ZhODkyZjk5NTcwM2U0YWUyNjgzMmE2MzNmYTVhMjM=", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-04-29T18:06:11Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-04-29T18:44:19Z"}, "message": "make feature recommendations optional", "tree": {"sha": "a43b11baba471fbbad29d8fe2adbc7ee057806c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a43b11baba471fbbad29d8fe2adbc7ee057806c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da6261e07fa892f995703e4ae26832a633fa5a23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da6261e07fa892f995703e4ae26832a633fa5a23", "html_url": "https://github.com/rust-lang/rust/commit/da6261e07fa892f995703e4ae26832a633fa5a23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da6261e07fa892f995703e4ae26832a633fa5a23/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "814a560072c305d274affc78219e4a7e0558252f", "url": "https://api.github.com/repos/rust-lang/rust/commits/814a560072c305d274affc78219e4a7e0558252f", "html_url": "https://github.com/rust-lang/rust/commit/814a560072c305d274affc78219e4a7e0558252f"}], "stats": {"total": 33, "additions": 21, "deletions": 12}, "files": [{"sha": "6ea46f5c5289e04a1af8b3fee57420118f4ac691", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da6261e07fa892f995703e4ae26832a633fa5a23/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da6261e07fa892f995703e4ae26832a633fa5a23/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=da6261e07fa892f995703e4ae26832a633fa5a23", "patch": "@@ -487,7 +487,13 @@ impl<'a> Resolver<'a> {\n                         name\n                     ));\n                 }\n-                err.help(\"use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` to allow generic const expressions\");\n+\n+                if self.session.is_nightly_build() {\n+                    err.help(\n+                        \"use `#![feature(const_generics)]` and `#![feature(const_evaluatable_checked)]` \\\n+                        to allow generic const expressions\"\n+                    );\n+                }\n \n                 err\n             }"}, {"sha": "d25dd9a6e830222451fad37af2ef27dc90e339ab", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/da6261e07fa892f995703e4ae26832a633fa5a23/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da6261e07fa892f995703e4ae26832a633fa5a23/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=da6261e07fa892f995703e4ae26832a633fa5a23", "patch": "@@ -315,17 +315,20 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n                         ),\n                     )\n                 } else {\n-                    tcx.sess\n-                        .struct_span_err(\n-                            hir_ty.span,\n-                            &format!(\n-                                \"{} is forbidden as the type of a const generic parameter\",\n-                                unsupported_type\n-                            ),\n-                        )\n-                        .note(\"the only supported types are integers, `bool` and `char`\")\n-                        .help(\"more complex types are supported with `#![feature(const_generics)]`\")\n-                        .emit()\n+                    let mut err = tcx.sess.struct_span_err(\n+                        hir_ty.span,\n+                        &format!(\n+                            \"{} is forbidden as the type of a const generic parameter\",\n+                            unsupported_type\n+                        ),\n+                    );\n+                    err.note(\"the only supported types are integers, `bool` and `char`\");\n+                    if tcx.sess.is_nightly_build() {\n+                        err.help(\n+                            \"more complex types are supported with `#![feature(const_generics)]`\",\n+                        );\n+                    }\n+                    err.emit()\n                 }\n             };\n "}]}