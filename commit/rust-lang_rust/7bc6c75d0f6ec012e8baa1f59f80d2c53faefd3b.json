{"sha": "7bc6c75d0f6ec012e8baa1f59f80d2c53faefd3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiYzZjNzVkMGY2ZWMwMTJlOGJhYTFmNTlmODBkMmM1M2ZhZWZkM2I=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-01T02:29:06Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-26T18:22:31Z"}, "message": "Refactor away handle_external_def", "tree": {"sha": "3b8799c904f17d71fb21bde4337e9612ad42b748", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b8799c904f17d71fb21bde4337e9612ad42b748"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bc6c75d0f6ec012e8baa1f59f80d2c53faefd3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc6c75d0f6ec012e8baa1f59f80d2c53faefd3b", "html_url": "https://github.com/rust-lang/rust/commit/7bc6c75d0f6ec012e8baa1f59f80d2c53faefd3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bc6c75d0f6ec012e8baa1f59f80d2c53faefd3b/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f34053f762f708430971a36fc4c6e665528ebe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f34053f762f708430971a36fc4c6e665528ebe2", "html_url": "https://github.com/rust-lang/rust/commit/8f34053f762f708430971a36fc4c6e665528ebe2"}], "stats": {"total": 103, "additions": 36, "deletions": 67}, "files": [{"sha": "44eba1a14d62aeb84e57e49a00c4dc203fb0d926", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 36, "deletions": 67, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/7bc6c75d0f6ec012e8baa1f59f80d2c53faefd3b/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bc6c75d0f6ec012e8baa1f59f80d2c53faefd3b/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=7bc6c75d0f6ec012e8baa1f59f80d2c53faefd3b", "patch": "@@ -24,7 +24,7 @@ use ParentLink::{ModuleParentLink, BlockParentLink};\n use Resolver;\n use {resolve_error, resolve_struct_error, ResolutionError};\n \n-use rustc::middle::cstore::{CrateStore, ChildItem, DlDef, DlField, DlImpl};\n+use rustc::middle::cstore::{CrateStore, ChildItem, DlDef};\n use rustc::middle::def::*;\n use rustc::middle::def_id::{CRATE_DEF_INDEX, DefId};\n use rustc::middle::ty::VariantKind;\n@@ -42,7 +42,6 @@ use rustc_front::hir::{ItemForeignMod, ItemImpl, ItemMod, ItemStatic, ItemDefaul\n use rustc_front::hir::{ItemStruct, ItemTrait, ItemTy, ItemUse};\n use rustc_front::hir::{PathListIdent, PathListMod, StmtDecl};\n use rustc_front::hir::{Variant, ViewPathGlob, ViewPathList, ViewPathSimple};\n-use rustc_front::hir::Visibility;\n use rustc_front::intravisit::{self, Visitor};\n \n use std::mem::replace;\n@@ -439,42 +438,48 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n         }\n     }\n \n-    fn handle_external_def(&mut self,\n-                           def: Def,\n-                           vis: Visibility,\n-                           final_ident: &str,\n-                           name: Name,\n-                           new_parent: Module<'b>) {\n-        debug!(\"(building reduced graph for external crate) building external def {}, priv {:?}\",\n-               final_ident,\n-               vis);\n-        let is_public = vis == hir::Public || new_parent.is_trait();\n+    /// Builds the reduced graph for a single item in an external crate.\n+    fn build_reduced_graph_for_external_crate_def(&mut self, parent: Module<'b>, xcdef: ChildItem) {\n+        let def = match xcdef.def {\n+            DlDef(def) => def,\n+            _ => return,\n+        };\n+\n+        if let Def::ForeignMod(def_id) = def {\n+            // Foreign modules have no names. Recur and populate eagerly.\n+            for child in self.session.cstore.item_children(def_id) {\n+                self.build_reduced_graph_for_external_crate_def(parent, child);\n+            }\n+            return;\n+        }\n+\n+        let name = xcdef.name;\n+        let is_public = xcdef.vis == hir::Public || parent.is_trait();\n \n         let mut modifiers = DefModifiers::empty();\n         if is_public {\n             modifiers = modifiers | DefModifiers::PUBLIC;\n         }\n-        if new_parent.is_normal() {\n+        if parent.is_normal() {\n             modifiers = modifiers | DefModifiers::IMPORTABLE;\n         }\n \n         match def {\n             Def::Mod(_) | Def::ForeignMod(_) | Def::Enum(..) => {\n                 debug!(\"(building reduced graph for external crate) building module {} {}\",\n-                       final_ident,\n+                       name,\n                        is_public);\n-                let parent_link = ModuleParentLink(new_parent, name);\n+                let parent_link = ModuleParentLink(parent, name);\n                 let module = self.new_module(parent_link, Some(def), true, is_public);\n-                self.try_define(new_parent, name, TypeNS, (module, DUMMY_SP));\n+                self.try_define(parent, name, TypeNS, (module, DUMMY_SP));\n             }\n             Def::Variant(_, variant_id) => {\n-                debug!(\"(building reduced graph for external crate) building variant {}\",\n-                       final_ident);\n+                debug!(\"(building reduced graph for external crate) building variant {}\", name);\n                 // Variants are always treated as importable to allow them to be glob used.\n                 // All variants are defined in both type and value namespaces as future-proofing.\n                 let modifiers = DefModifiers::PUBLIC | DefModifiers::IMPORTABLE;\n-                self.try_define(new_parent, name, TypeNS, (def, DUMMY_SP, modifiers));\n-                self.try_define(new_parent, name, ValueNS, (def, DUMMY_SP, modifiers));\n+                self.try_define(parent, name, TypeNS, (def, DUMMY_SP, modifiers));\n+                self.try_define(parent, name, ValueNS, (def, DUMMY_SP, modifiers));\n                 if self.session.cstore.variant_kind(variant_id) == Some(VariantKind::Struct) {\n                     // Not adding fields for variants as they are not accessed with a self receiver\n                     self.structs.insert(variant_id, Vec::new());\n@@ -486,12 +491,11 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n             Def::AssociatedConst(..) |\n             Def::Method(..) => {\n                 debug!(\"(building reduced graph for external crate) building value (fn/static) {}\",\n-                       final_ident);\n-                self.try_define(new_parent, name, ValueNS, (def, DUMMY_SP, modifiers));\n+                       name);\n+                self.try_define(parent, name, ValueNS, (def, DUMMY_SP, modifiers));\n             }\n             Def::Trait(def_id) => {\n-                debug!(\"(building reduced graph for external crate) building type {}\",\n-                       final_ident);\n+                debug!(\"(building reduced graph for external crate) building type {}\", name);\n \n                 // If this is a trait, add all the trait item names to the trait\n                 // info.\n@@ -508,24 +512,22 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                     self.trait_item_map.insert((trait_item_name, def_id), trait_item_def.def_id());\n                 }\n \n-                let parent_link = ModuleParentLink(new_parent, name);\n+                let parent_link = ModuleParentLink(parent, name);\n                 let module = self.new_module(parent_link, Some(def), true, is_public);\n-                self.try_define(new_parent, name, TypeNS, (module, DUMMY_SP));\n+                self.try_define(parent, name, TypeNS, (module, DUMMY_SP));\n             }\n             Def::TyAlias(..) | Def::AssociatedTy(..) => {\n-                debug!(\"(building reduced graph for external crate) building type {}\",\n-                       final_ident);\n-                self.try_define(new_parent, name, TypeNS, (def, DUMMY_SP, modifiers));\n+                debug!(\"(building reduced graph for external crate) building type {}\", name);\n+                self.try_define(parent, name, TypeNS, (def, DUMMY_SP, modifiers));\n             }\n             Def::Struct(def_id)\n                 if self.session.cstore.tuple_struct_definition_if_ctor(def_id).is_none() => {\n-                debug!(\"(building reduced graph for external crate) building type and value for \\\n-                        {}\",\n-                       final_ident);\n-                self.try_define(new_parent, name, TypeNS, (def, DUMMY_SP, modifiers));\n+                debug!(\"(building reduced graph for external crate) building type and value for {}\",\n+                       name);\n+                self.try_define(parent, name, TypeNS, (def, DUMMY_SP, modifiers));\n                 if let Some(ctor_def_id) = self.session.cstore.struct_ctor_def_id(def_id) {\n                     let def = Def::Struct(ctor_def_id);\n-                    self.try_define(new_parent, name, ValueNS, (def, DUMMY_SP, modifiers));\n+                    self.try_define(parent, name, ValueNS, (def, DUMMY_SP, modifiers));\n                 }\n \n                 // Record the def ID and fields of this struct.\n@@ -545,39 +547,6 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n         }\n     }\n \n-    /// Builds the reduced graph for a single item in an external crate.\n-    fn build_reduced_graph_for_external_crate_def(&mut self,\n-                                                  root: Module<'b>,\n-                                                  xcdef: ChildItem) {\n-        match xcdef.def {\n-            DlDef(def) => {\n-                // Add the new child item, if necessary.\n-                match def {\n-                    Def::ForeignMod(def_id) => {\n-                        // Foreign modules have no names. Recur and populate\n-                        // eagerly.\n-                        for child in self.session.cstore.item_children(def_id) {\n-                            self.build_reduced_graph_for_external_crate_def(root, child)\n-                        }\n-                    }\n-                    _ => {\n-                        self.handle_external_def(def,\n-                                                 xcdef.vis,\n-                                                 &xcdef.name.as_str(),\n-                                                 xcdef.name,\n-                                                 root);\n-                    }\n-                }\n-            }\n-            DlImpl(_) => {\n-                debug!(\"(building reduced graph for external crate) ignoring impl\");\n-            }\n-            DlField => {\n-                debug!(\"(building reduced graph for external crate) ignoring field\");\n-            }\n-        }\n-    }\n-\n     /// Builds the reduced graph rooted at the given external module.\n     fn populate_external_module(&mut self, module: Module<'b>) {\n         debug!(\"(populating external module) attempting to populate {}\","}]}