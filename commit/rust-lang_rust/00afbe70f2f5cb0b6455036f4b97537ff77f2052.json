{"sha": "00afbe70f2f5cb0b6455036f4b97537ff77f2052", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwYWZiZTcwZjJmNWNiMGI2NDU1MDM2ZjRiOTc1MzdmZjc3ZjIwNTI=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-02-25T09:04:43Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-02-25T09:04:43Z"}, "message": "Improve checking for attribute", "tree": {"sha": "86d680d056e882c9515c5b781c470d5bfeb16621", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86d680d056e882c9515c5b781c470d5bfeb16621"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00afbe70f2f5cb0b6455036f4b97537ff77f2052", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00afbe70f2f5cb0b6455036f4b97537ff77f2052", "html_url": "https://github.com/rust-lang/rust/commit/00afbe70f2f5cb0b6455036f4b97537ff77f2052", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00afbe70f2f5cb0b6455036f4b97537ff77f2052/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22184a0f5d0e83d07425d6058e7ad93c78160233", "url": "https://api.github.com/repos/rust-lang/rust/commits/22184a0f5d0e83d07425d6058e7ad93c78160233", "html_url": "https://github.com/rust-lang/rust/commit/22184a0f5d0e83d07425d6058e7ad93c78160233"}], "stats": {"total": 148, "additions": 85, "deletions": 63}, "files": [{"sha": "cf08881cd473da278458d0dcb849b8d1007ec1ec", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 56, "deletions": 47, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/00afbe70f2f5cb0b6455036f4b97537ff77f2052/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00afbe70f2f5cb0b6455036f4b97537ff77f2052/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=00afbe70f2f5cb0b6455036f4b97537ff77f2052", "patch": "@@ -760,7 +760,7 @@ impl CheckAttrVisitor<'tcx> {\n         target: Target,\n         item: Option<ItemLike<'_>>,\n     ) -> bool {\n-        let is_function = matches!(target, Target::Fn | Target::Method(..) | Target::ForeignFn);\n+        let is_function = matches!(target, Target::Fn | Target::Method(..));\n         if !is_function {\n             self.tcx\n                 .sess\n@@ -776,55 +776,64 @@ impl CheckAttrVisitor<'tcx> {\n             Some(it) => it,\n         };\n \n+        let (decl, generics) = match item {\n+            Some(ItemLike::Item(Item {\n+                kind: ItemKind::Fn(FnSig { decl, .. }, generics, _),\n+                ..\n+            })) => (decl, generics),\n+            _ => bug!(\"should be a function item\"),\n+        };\n+\n+        for param in generics.params {\n+            match param.kind {\n+                hir::GenericParamKind::Const { .. } => {}\n+                _ => {\n+                    self.tcx\n+                        .sess\n+                        .struct_span_err(\n+                            attr.span,\n+                            \"#[rustc_legacy_const_generics] functions must \\\n+                             only have const generics\",\n+                        )\n+                        .span_label(param.span, \"non-const generic parameter\")\n+                        .emit();\n+                    return false;\n+                }\n+            }\n+        }\n+\n+        if list.len() != generics.params.len() {\n+            self.tcx\n+                .sess\n+                .struct_span_err(\n+                    attr.span,\n+                    \"#[rustc_legacy_const_generics] must have one index for each generic parameter\",\n+                )\n+                .span_label(generics.span, \"generic parameters\")\n+                .emit();\n+            return false;\n+        }\n+\n+        let arg_count = decl.inputs.len() as u128 + generics.params.len() as u128;\n         let mut invalid_args = vec![];\n         for meta in list {\n             if let Some(LitKind::Int(val, _)) = meta.literal().map(|lit| &lit.kind) {\n-                if let Some(ItemLike::Item(Item {\n-                    kind: ItemKind::Fn(FnSig { decl, .. }, generics, _),\n-                    ..\n-                }))\n-                | Some(ItemLike::ForeignItem(ForeignItem {\n-                    kind: ForeignItemKind::Fn(decl, _, generics),\n-                    ..\n-                })) = item\n-                {\n-                    let arg_count = decl.inputs.len() as u128 + generics.params.len() as u128;\n-                    for param in generics.params {\n-                        match param.kind {\n-                            hir::GenericParamKind::Const { .. } => {}\n-                            _ => {\n-                                self.tcx\n-                                    .sess\n-                                    .struct_span_err(\n-                                        meta.span(),\n-                                        \"#[rustc_legacy_const_generics] functions must \\\n-                                         only have const generics\",\n-                                    )\n-                                    .span_label(param.span, \"non-const generic parameter\")\n-                                    .emit();\n-                                break;\n-                            }\n-                        }\n-                    }\n-                    if *val >= arg_count {\n-                        let span = meta.span();\n-                        self.tcx\n-                            .sess\n-                            .struct_span_err(span, \"index exceeds number of arguments\")\n-                            .span_label(\n-                                span,\n-                                format!(\n-                                    \"there {} only {} argument{}\",\n-                                    if arg_count != 1 { \"are\" } else { \"is\" },\n-                                    arg_count,\n-                                    pluralize!(arg_count)\n-                                ),\n-                            )\n-                            .emit();\n-                        return false;\n-                    }\n-                } else {\n-                    bug!(\"should be a function item\");\n+                if *val >= arg_count {\n+                    let span = meta.span();\n+                    self.tcx\n+                        .sess\n+                        .struct_span_err(span, \"index exceeds number of arguments\")\n+                        .span_label(\n+                            span,\n+                            format!(\n+                                \"there {} only {} argument{}\",\n+                                if arg_count != 1 { \"are\" } else { \"is\" },\n+                                arg_count,\n+                                pluralize!(arg_count)\n+                            ),\n+                        )\n+                        .emit();\n+                    return false;\n                 }\n             } else {\n                 invalid_args.push(meta.span());"}, {"sha": "3d8478f06db0ea0875c640774d7a3f371955ee0b", "filename": "src/test/ui/invalid/invalid-rustc_legacy_const_generics-arguments.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/00afbe70f2f5cb0b6455036f4b97537ff77f2052/src%2Ftest%2Fui%2Finvalid%2Finvalid-rustc_legacy_const_generics-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00afbe70f2f5cb0b6455036f4b97537ff77f2052/src%2Ftest%2Fui%2Finvalid%2Finvalid-rustc_legacy_const_generics-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-rustc_legacy_const_generics-arguments.rs?ref=00afbe70f2f5cb0b6455036f4b97537ff77f2052", "patch": "@@ -1,29 +1,29 @@\n #![feature(rustc_attrs)]\n \n-#[rustc_legacy_const_generics(0)] //~ ERROR index exceeds number of arguments\n+#[rustc_legacy_const_generics(0)] //~ ERROR #[rustc_legacy_const_generics] must have one index for\n fn foo1() {}\n \n #[rustc_legacy_const_generics(1)] //~ ERROR index exceeds number of arguments\n-fn foo2(_: u8) {}\n+fn foo2<const X: usize>() {}\n \n #[rustc_legacy_const_generics(2)] //~ ERROR index exceeds number of arguments\n fn foo3<const X: usize>(_: u8) {}\n \n #[rustc_legacy_const_generics(a)] //~ ERROR arguments should be non-negative integers\n-fn foo4() {}\n+fn foo4<const X: usize>() {}\n \n #[rustc_legacy_const_generics(1, a, 2, b)] //~ ERROR arguments should be non-negative integers\n-fn foo5(_: u8, _: u8, _: u8) {}\n+fn foo5<const X: usize, const Y: usize, const Z: usize, const W: usize>() {}\n \n #[rustc_legacy_const_generics(0)] //~ ERROR attribute should be applied to a function\n struct S;\n \n #[rustc_legacy_const_generics(0usize)] //~ ERROR suffixed literals are not allowed in attributes\n-fn foo6(_: u8) {}\n+fn foo6<const X: usize>() {}\n \n extern {\n-    #[rustc_legacy_const_generics(1)] //~ ERROR index exceeds number of arguments\n-    fn foo7(_: u8);\n+    #[rustc_legacy_const_generics(1)] //~ ERROR attribute should be applied to a function\n+    fn foo7<const X: usize>(); //~ ERROR foreign items may not have const parameters\n }\n \n #[rustc_legacy_const_generics(0)] //~ ERROR #[rustc_legacy_const_generics] functions must only have"}, {"sha": "1f55a8e72d2cb29795b0c1dcc37ff071a5d4a166", "filename": "src/test/ui/invalid/invalid-rustc_legacy_const_generics-arguments.stderr", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/00afbe70f2f5cb0b6455036f4b97537ff77f2052/src%2Ftest%2Fui%2Finvalid%2Finvalid-rustc_legacy_const_generics-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00afbe70f2f5cb0b6455036f4b97537ff77f2052/src%2Ftest%2Fui%2Finvalid%2Finvalid-rustc_legacy_const_generics-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-rustc_legacy_const_generics-arguments.stderr?ref=00afbe70f2f5cb0b6455036f4b97537ff77f2052", "patch": "@@ -18,11 +18,13 @@ error: malformed `rustc_legacy_const_generics` attribute input\n LL | #[rustc_legacy_const_generics = 1]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[rustc_legacy_const_generics(N)]`\n \n-error: index exceeds number of arguments\n-  --> $DIR/invalid-rustc_legacy_const_generics-arguments.rs:3:31\n+error: #[rustc_legacy_const_generics] must have one index for each generic parameter\n+  --> $DIR/invalid-rustc_legacy_const_generics-arguments.rs:3:1\n    |\n LL | #[rustc_legacy_const_generics(0)]\n-   |                               ^ there are only 0 arguments\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn foo1() {}\n+   |        - generic parameters\n \n error: index exceeds number of arguments\n   --> $DIR/invalid-rustc_legacy_const_generics-arguments.rs:6:31\n@@ -57,18 +59,29 @@ LL | struct S;\n    | --------- not a function\n \n error: #[rustc_legacy_const_generics] functions must only have const generics\n-  --> $DIR/invalid-rustc_legacy_const_generics-arguments.rs:29:31\n+  --> $DIR/invalid-rustc_legacy_const_generics-arguments.rs:29:1\n    |\n LL | #[rustc_legacy_const_generics(0)]\n-   |                               ^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL | fn foo8<X>() {}\n    |         - non-const generic parameter\n \n-error: index exceeds number of arguments\n-  --> $DIR/invalid-rustc_legacy_const_generics-arguments.rs:25:35\n+error: attribute should be applied to a function\n+  --> $DIR/invalid-rustc_legacy_const_generics-arguments.rs:25:5\n    |\n LL |     #[rustc_legacy_const_generics(1)]\n-   |                                   ^ there is only 1 argument\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     fn foo7<const X: usize>();\n+   |     -------------------------- not a function\n+\n+error[E0044]: foreign items may not have const parameters\n+  --> $DIR/invalid-rustc_legacy_const_generics-arguments.rs:26:5\n+   |\n+LL |     fn foo7<const X: usize>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ can't have const parameters\n+   |\n+   = help: replace the const parameters with concrete consts\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 12 previous errors\n \n+For more information about this error, try `rustc --explain E0044`."}]}