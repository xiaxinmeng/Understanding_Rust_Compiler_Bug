{"sha": "02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYzExOGFlNzIwN2MyZDVhNDhhMmIxY2Y1ZjZhNTlkYmJlMWQzMTQ=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2015-10-23T20:57:43Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2015-10-23T20:57:43Z"}, "message": "Merge pull request #523 from alexcrichton/stable\n\nMove to stable Rust", "tree": {"sha": "f73c9f7d9e06fe9026de8a729da7dfbc7a63e2e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f73c9f7d9e06fe9026de8a729da7dfbc7a63e2e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314", "html_url": "https://github.com/rust-lang/rust/commit/02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e76fad1f55945c196b32e6629ebaecc4ebfda74", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e76fad1f55945c196b32e6629ebaecc4ebfda74", "html_url": "https://github.com/rust-lang/rust/commit/7e76fad1f55945c196b32e6629ebaecc4ebfda74"}, {"sha": "7fdfff6e58cd30548b1d02946364b746243cdc02", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fdfff6e58cd30548b1d02946364b746243cdc02", "html_url": "https://github.com/rust-lang/rust/commit/7fdfff6e58cd30548b1d02946364b746243cdc02"}], "stats": {"total": 338, "additions": 177, "deletions": 161}, "files": [{"sha": "8025d275cc9431d9adba89b401d06dee2908bb2c", "filename": ".travis.yml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314", "patch": "@@ -1,5 +1,7 @@\n language: rust\n rust:\n+ - stable\n+ - beta\n  - nightly\n \n sudo: false"}, {"sha": "66061bd1e256617ad38ac9a45a037c7b150623aa", "filename": "Cargo.lock", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314", "patch": "@@ -3,9 +3,13 @@ name = \"rustfmt\"\n version = \"0.0.1\"\n dependencies = [\n  \"diff 0.1.7 (git+https://github.com/utkarshkukreti/diff.rs.git)\",\n+ \"env_logger 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.1.41 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strings 0.0.1 (git+https://github.com/nrc/strings.rs.git)\",\n+ \"syntex_syntax 0.18.0 (git+https://github.com/serde-rs/syntex)\",\n  \"term 0.2.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-segmentation 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -19,11 +23,30 @@ dependencies = [\n  \"memchr 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"bitflags\"\n+version = \"0.3.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"diff\"\n version = \"0.1.7\"\n source = \"git+https://github.com/utkarshkukreti/diff.rs.git#6edb9454bf4127087aced0fe07ab3ea6894083cb\"\n \n+[[package]]\n+name = \"env_logger\"\n+version = \"0.3.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"log 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.1.41 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"getopts\"\n+version = \"0.2.14\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"kernel32-sys\"\n version = \"0.1.4\"\n@@ -82,6 +105,19 @@ dependencies = [\n  \"log 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"syntex_syntax\"\n+version = \"0.18.0\"\n+source = \"git+https://github.com/serde-rs/syntex#176ca5d8add606fac8d503b10c89ddb82f02d92b\"\n+dependencies = [\n+ \"bitflags 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-serialize 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"term 0.2.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"term\"\n version = \"0.2.12\"\n@@ -104,6 +140,11 @@ name = \"unicode-segmentation\"\n version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"unicode-xid\"\n+version = \"0.0.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"winapi\"\n version = \"0.2.4\""}, {"sha": "ebd4e8e7f1e73b6f7f87b9b82cc074191922588f", "filename": "Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314", "patch": "@@ -16,5 +16,9 @@ regex = \"0.1.41\"\n term = \"0.2.11\"\n strings = { version = \"0.0.1\", git = \"https://github.com/nrc/strings.rs.git\" }\n diff = { git = \"https://github.com/utkarshkukreti/diff.rs.git\" }\n+syntex_syntax = { git = \"https://github.com/serde-rs/syntex\" }\n+log = \"0.3.2\"\n+env_logger = \"0.3.1\"\n+getopts = \"0.2\"\n \n [dev-dependencies]"}, {"sha": "06e8dae54f31fbe124a5fe8a4188061822d7fd70", "filename": "README.md", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314", "patch": "@@ -3,15 +3,34 @@\n A tool for formatting Rust code according to style guidelines.\n \n ## Gotchas\n-* For things you do not want rustfmt to mangle, use\n-```rust\n- #[rustfmt_skip]\n- ```\n-* When you run rustfmt use a file called rustfmt.toml to override the default settings of rustfmt.\n-* We create a functioning executable called rustfmt in the target directory\n+\n+* For things you do not want rustfmt to mangle, use one of\n+   ```rust\n+   #[rustfmt_skip]\n+   #[cfg_attr(rustfmt, rustfmt_skip)]\n+    ```\n+* When you run rustfmt use a file called rustfmt.toml to override the default\n+  settings of rustfmt.\n+* We create a functioning executable called `rustfmt` in the target directory\n+\n+## Installation\n+\n+> **Note:** this method currently requires you to be running a nightly install\n+> of Rust as `cargo install` has not yet made its way onto the stable channel.\n+\n+```\n+cargo install --git https://github.com/nrc/rustfmt\n+```\n+\n+or if you're using `multirust`\n+\n+```\n+multirust run nightly cargo install --git https://github.com/nrc/rustfmt\n+```\n \n ## How to build and test\n-You'll need a pretty up to date version of the **nightly** version of Rust.\n+\n+First make sure you've got Rust **1.3.0** or greater available, then:\n \n `cargo build` to build.\n "}, {"sha": "6b3405aa936fd4316048399e5f6e411ed6893281", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 46, "deletions": 40, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314", "patch": "@@ -7,30 +7,32 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(path_ext)]\n-#![feature(rustc_private)]\n+\n #![cfg(not(test))]\n \n #[macro_use]\n extern crate log;\n extern crate rustfmt;\n extern crate toml;\n+extern crate env_logger;\n+extern crate getopts;\n \n use rustfmt::{WriteMode, run};\n use rustfmt::config::Config;\n \n use std::env;\n-use std::fs::{File, PathExt};\n+use std::fs::{self, File};\n use std::io::{self, Read};\n use std::path::PathBuf;\n-use std::str::FromStr;\n+\n+use getopts::Options;\n \n // Try to find a project file in the current directory and its parents.\n fn lookup_project_file() -> io::Result<PathBuf> {\n     let mut current = try!(env::current_dir());\n     loop {\n         let config_file = current.join(\"rustfmt.toml\");\n-        if config_file.exists() {\n+        if fs::metadata(&config_file).is_ok() {\n             return Ok(config_file);\n         } else {\n             current = match current.parent() {\n@@ -52,7 +54,7 @@ fn lookup_and_read_project_file() -> io::Result<(PathBuf, String)> {\n }\n \n fn execute() -> i32 {\n-    let (args, write_mode) = match determine_params(std::env::args()) {\n+    let (file, write_mode) = match determine_params(std::env::args().skip(1)) {\n         Some(params) => params,\n         None => return 1,\n     };\n@@ -65,12 +67,14 @@ fn execute() -> i32 {\n         Err(_) => Default::default(),\n     };\n \n-    run(args, write_mode, &config);\n+    run(&file, write_mode, &config);\n     0\n }\n \n fn main() {\n     use std::io::Write;\n+    let _ = env_logger::init();\n+\n     let exit_code = execute();\n     // Make sure standard output is flushed before we exit\n     std::io::stdout().flush().unwrap();\n@@ -81,50 +85,52 @@ fn main() {\n     std::process::exit(exit_code);\n }\n \n-fn print_usage<S: Into<String>>(reason: S) {\n-    println!(\"{}\\n\\r usage: rustfmt [-h Help] [--write-mode=[replace|overwrite|display|diff]] \\\n-              <file_name>\",\n-             reason.into());\n+fn print_usage(opts: &Options, reason: &str) {\n+    let reason = format!(\"{}\\nusage: {} [options] <file>\",\n+                         reason,\n+                         env::current_exe().unwrap().display());\n+    println!(\"{}\", opts.usage(&reason));\n     Config::print_docs();\n }\n \n-fn determine_params<I>(args: I) -> Option<(Vec<String>, WriteMode)>\n+fn determine_params<I>(args: I) -> Option<(PathBuf, WriteMode)>\n     where I: Iterator<Item = String>\n {\n-    let arg_prefix = \"-\";\n-    let write_mode_prefix = \"--write-mode=\";\n-    let help_mode = \"-h\";\n-    let long_help_mode = \"--help\";\n-    let mut write_mode = WriteMode::Replace;\n-    let mut rustc_args = Vec::new();\n-\n-    // The NewFile option currently isn't supported because it requires another\n-    // parameter, but it can be added later.\n-    for arg in args {\n-        if arg.starts_with(write_mode_prefix) {\n-            match FromStr::from_str(&arg[write_mode_prefix.len()..]) {\n-                Ok(mode) => write_mode = mode,\n-                Err(_) => {\n-                    print_usage(\"Unrecognized write mode\");\n+    let mut opts = Options::new();\n+    opts.optflag(\"h\", \"help\", \"show this message\");\n+    opts.optopt(\"\",\n+                \"write-mode\",\n+                \"mode to write in\",\n+                \"[replace|overwrite|display|diff]\");\n+    let matches = match opts.parse(args) {\n+        Ok(m) => m,\n+        Err(e) => {\n+            print_usage(&opts, &e.to_string());\n+            return None;\n+        }\n+    };\n+\n+    if matches.opt_present(\"h\") {\n+        print_usage(&opts, \"\");\n+    }\n+\n+    let write_mode = match matches.opt_str(\"write-mode\") {\n+        Some(mode) => {\n+            match mode.parse() {\n+                Ok(mode) => mode,\n+                Err(..) => {\n+                    print_usage(&opts, \"Unrecognized write mode\");\n                     return None;\n                 }\n             }\n-        } else if arg.starts_with(help_mode) || arg.starts_with(long_help_mode) {\n-            print_usage(\"\");\n-            return None;\n-        } else if arg.starts_with(arg_prefix) {\n-            print_usage(\"Invalid argument\");\n-            return None;\n-        } else {\n-            // Pass everything else to rustc\n-            rustc_args.push(arg);\n         }\n-    }\n+        None => WriteMode::Replace,\n+    };\n \n-    if rustc_args.len() < 2 {\n-        print_usage(\"Please provide a file to be formatted\");\n+    if matches.free.len() != 1 {\n+        print_usage(&opts, \"Please provide one file to format\");\n         return None;\n     }\n \n-    Some((rustc_args, write_mode))\n+    Some((PathBuf::from(&matches.free[0]), write_mode))\n }"}, {"sha": "4716f545b3f58be2df2617731fd2a5ebe4763cf8", "filename": "src/chains.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314", "patch": "@@ -72,11 +72,9 @@ pub fn rewrite_chain(mut expr: &ast::Expr,\n                                             .collect::<Option<Vec<_>>>());\n \n     // Total of all items excluding the last.\n-    let almost_total = rewrites.split_last()\n-                               .unwrap()\n-                               .1\n-                               .iter()\n-                               .fold(0, |a, b| a + first_line_width(b)) +\n+    let almost_total = rewrites[..rewrites.len() - 1]\n+                           .iter()\n+                           .fold(0, |a, b| a + first_line_width(b)) +\n                        parent_rewrite.len();\n     let total_width = almost_total + first_line_width(rewrites.last().unwrap());\n     let veto_single_line = if context.config.take_source_hints && subexpr_list.len() > 1 {\n@@ -95,7 +93,9 @@ pub fn rewrite_chain(mut expr: &ast::Expr,\n                            match subexpr_list[0].node {\n         ast::Expr_::ExprMethodCall(ref method_name, ref types, ref expressions)\n             if context.config.chains_overflow_last => {\n-            let (last, init) = rewrites.split_last_mut().unwrap();\n+            let len = rewrites.len();\n+            let (init, last) = rewrites.split_at_mut(len - 1);\n+            let last = &mut last[0];\n \n             if init.iter().all(|s| !s.contains('\\n')) && total_width <= width {\n                 let last_rewrite = width.checked_sub(almost_total)"}, {"sha": "091b4293ad38ae5a3a76e015d2bd152e4e437f73", "filename": "src/comment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314", "patch": "@@ -437,7 +437,7 @@ mod test {\n     }\n \n     #[test]\n-    #[rustfmt_skip]\n+    #[cfg_attr(rustfmt, rustfmt_skip)]\n     fn format_comments() {\n         let config = Default::default();\n         assert_eq!(\"/* test */\", rewrite_comment(\" //test\", true, 100, Indent::new(0, 100),"}, {"sha": "51497e3b1c355fd14e81bc1f519279ab0d96ac6d", "filename": "src/lib.rs", "status": "modified", "additions": 13, "deletions": 71, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314", "patch": "@@ -8,24 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_private)]\n-#![feature(custom_attribute)]\n-#![feature(slice_splits)]\n-#![feature(slice_patterns)]\n-#![feature(catch_panic)]\n-#![allow(unused_attributes)]\n-\n // TODO we're going to allocate a whole bunch of temp Strings, is it worth\n // keeping some scratch mem for this and running our own StrPool?\n // TODO for lint violations of names, emit a refactor script\n \n #[macro_use]\n extern crate log;\n \n-extern crate getopts;\n-extern crate rustc;\n-extern crate rustc_driver;\n-extern crate syntax;\n+extern crate syntex_syntax as syntax;\n extern crate rustc_serialize;\n \n extern crate strings;\n@@ -35,22 +25,15 @@ extern crate regex;\n extern crate diff;\n extern crate term;\n \n-use rustc::session::Session;\n-use rustc::session::config as rustc_config;\n-use rustc::session::config::Input;\n-use rustc_driver::{driver, CompilerCalls, Compilation};\n-\n use syntax::ast;\n use syntax::codemap::{CodeMap, Span};\n-use syntax::diagnostics;\n+use syntax::parse::{self, ParseSess};\n \n use std::ops::{Add, Sub};\n-use std::path::PathBuf;\n+use std::path::Path;\n use std::collections::HashMap;\n use std::fmt;\n use std::str::FromStr;\n-use std::rc::Rc;\n-use std::cell::RefCell;\n \n use issues::{BadIssueSeeker, Issue};\n use filemap::FileMap;\n@@ -387,65 +370,24 @@ pub fn fmt_lines(file_map: &mut FileMap, config: &Config) -> FormatReport {\n     report\n }\n \n-struct RustFmtCalls {\n-    config: Rc<Config>,\n-    result: Rc<RefCell<Option<FileMap>>>,\n-}\n-\n-impl<'a> CompilerCalls<'a> for RustFmtCalls {\n-    fn no_input(&mut self,\n-                _: &getopts::Matches,\n-                _: &rustc_config::Options,\n-                _: &Option<PathBuf>,\n-                _: &Option<PathBuf>,\n-                _: &diagnostics::registry::Registry)\n-                -> Option<(Input, Option<PathBuf>)> {\n-        panic!(\"No input supplied to RustFmt\");\n-    }\n-\n-    fn build_controller(&mut self, _: &Session) -> driver::CompileController<'a> {\n-        let result = self.result.clone();\n-        let config = self.config.clone();\n-\n-        let mut control = driver::CompileController::basic();\n-        control.after_parse.stop = Compilation::Stop;\n-        control.after_parse.callback = Box::new(move |state| {\n-            let krate = state.krate.unwrap();\n-            let codemap = state.session.codemap();\n-            let mut file_map = fmt_ast(krate, codemap, &*config);\n-            // For some reason, the codemap does not include terminating\n-            // newlines so we must add one on for each file. This is sad.\n-            filemap::append_newlines(&mut file_map);\n-\n-            *result.borrow_mut() = Some(file_map);\n-        });\n-\n-        control\n-    }\n-}\n-\n-pub fn format(args: Vec<String>, config: &Config) -> FileMap {\n-    let result = Rc::new(RefCell::new(None));\n+pub fn format(file: &Path, config: &Config) -> FileMap {\n+    let parse_session = ParseSess::new();\n+    let krate = parse::parse_crate_from_file(file, Vec::new(), &parse_session);\n+    let mut file_map = fmt_ast(&krate, parse_session.codemap(), config);\n \n-    {\n-        let config = Rc::new(config.clone());\n-        let mut call_ctxt = RustFmtCalls {\n-            config: config,\n-            result: result.clone(),\n-        };\n-        rustc_driver::run_compiler(&args, &mut call_ctxt);\n-    }\n+    // For some reason, the codemap does not include terminating\n+    // newlines so we must add one on for each file. This is sad.\n+    filemap::append_newlines(&mut file_map);\n \n-    // Peel the union.\n-    Rc::try_unwrap(result).ok().unwrap().into_inner().unwrap()\n+    return file_map;\n }\n \n // args are the arguments passed on the command line, generally passed through\n // to the compiler.\n // write_mode determines what happens to the result of running rustfmt, see\n // WriteMode.\n-pub fn run(args: Vec<String>, write_mode: WriteMode, config: &Config) {\n-    let mut result = format(args, config);\n+pub fn run(file: &Path, write_mode: WriteMode, config: &Config) {\n+    let mut result = format(file, config);\n \n     println!(\"{}\", fmt_lines(&mut result, config));\n "}, {"sha": "bede00d6e9e3b54f6fa1f67063cd6ca719c3e2e0", "filename": "src/macros.rs", "status": "modified", "additions": 20, "deletions": 34, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314", "patch": "@@ -19,8 +19,6 @@\n // List-like invocations with parentheses will be formatted as function calls,\n // and those with brackets will be formatted as array literals.\n \n-use std::thread;\n-\n use syntax::ast;\n use syntax::parse::token::{Eof, Comma, Token};\n use syntax::parse::{ParseSess, tts_to_parser};\n@@ -34,12 +32,6 @@ use utils::{wrap_str, span_after};\n \n static FORCED_BRACKET_MACROS: &'static [&'static str] = &[\"vec!\"];\n \n-// We need to pass `TokenTree`s to our expression parsing thread, but they are\n-// not `Send`. We wrap them in a `Send` container to force our will.\n-// FIXME: this is a pretty terrible hack. Any other solution would be preferred.\n-struct ForceSend<T>(pub T);\n-unsafe impl<T> Send for ForceSend<T> {}\n-\n // FIXME: use the enum from libsyntax?\n #[derive(Clone, Copy)]\n enum MacroStyle {\n@@ -81,34 +73,28 @@ pub fn rewrite_macro(mac: &ast::Mac,\n         };\n     }\n \n-    let wrapped_tt_vec = ForceSend(mac.node.tts.clone());\n-    // Wrap expression parsing logic in a thread since the libsyntax parser\n-    // panics on failure, which we do not want to propagate.\n-    // The expression vector is wrapped in an Option inside a Result.\n-    let expr_vec_result = thread::catch_panic(move || {\n-        let parse_session = ParseSess::new();\n-        let mut parser = tts_to_parser(&parse_session, wrapped_tt_vec.0, vec![]);\n-        let mut expr_vec = vec![];\n-\n-        loop {\n-            expr_vec.push(parser.parse_expr());\n-\n-            match parser.token {\n-                Token::Eof => break,\n-                Token::Comma => (),\n-                _ => panic!(\"Macro not list-like, skiping...\"),\n-            }\n-\n-            let _ = parser.bump();\n-\n-            if parser.token == Token::Eof {\n-                return None;\n-            }\n+    let parse_session = ParseSess::new();\n+    let mut parser = tts_to_parser(&parse_session, mac.node.tts.clone(), Vec::new());\n+    let mut expr_vec = Vec::new();\n+\n+    loop {\n+        expr_vec.push(match parser.parse_expr_nopanic() {\n+            Ok(expr) => expr,\n+            Err(..) => return None,\n+        });\n+\n+        match parser.token {\n+            Token::Eof => break,\n+            Token::Comma => (),\n+            _ => return None,\n         }\n \n-        Some(expr_vec)\n-    });\n-    let expr_vec = try_opt!(try_opt!(expr_vec_result.ok()));\n+        let _ = parser.bump();\n+\n+        if parser.token == Token::Eof {\n+            return None;\n+        }\n+    }\n \n     match style {\n         MacroStyle::Parens => {"}, {"sha": "fea385532d0551be47b5935f5c475d108fece98b", "filename": "src/utils.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314", "patch": "@@ -75,6 +75,9 @@ pub fn last_line_width(s: &str) -> usize {\n fn is_skip(meta_item: &MetaItem) -> bool {\n     match meta_item.node {\n         MetaItem_::MetaWord(ref s) => *s == SKIP_ANNOTATION,\n+        MetaItem_::MetaList(ref s, ref l) => {\n+            *s == \"cfg_attr\" && l.len() == 2 && is_skip(&l[1])\n+        }\n         _ => false,\n     }\n }"}, {"sha": "d8de4dce38f235fb3654d0581f2591952525cfa4", "filename": "tests/source/macro_not_expr.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314/tests%2Fsource%2Fmacro_not_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314/tests%2Fsource%2Fmacro_not_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacro_not_expr.rs?ref=02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314", "patch": "@@ -0,0 +1,7 @@\n+macro_rules! test {\n+    ($($t:tt)*) => {}\n+}\n+\n+fn main() {\n+    test!( a : B => c d );\n+}"}, {"sha": "649ccdf5647a2a387aa8bd0e1aff10fd5290c31d", "filename": "tests/system.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314", "patch": "@@ -135,7 +135,6 @@ fn print_mismatches(result: HashMap<String, Vec<Mismatch>>) {\n pub fn idempotent_check(filename: String) -> Result<FormatReport, HashMap<String, Vec<Mismatch>>> {\n     let sig_comments = read_significant_comments(&filename);\n     let mut config = get_config(sig_comments.get(\"config\").map(|x| &(*x)[..]));\n-    let args = vec![\"rustfmt\".to_owned(), filename];\n \n     for (key, val) in &sig_comments {\n         if key != \"target\" && key != \"config\" {\n@@ -146,7 +145,7 @@ pub fn idempotent_check(filename: String) -> Result<FormatReport, HashMap<String\n     // Don't generate warnings for to-do items.\n     config.report_todo = ReportTactic::Never;\n \n-    let mut file_map = format(args, &config);\n+    let mut file_map = format(Path::new(&filename), &config);\n     let format_report = fmt_lines(&mut file_map, &config);\n \n     // Won't panic, as we're not doing any IO."}, {"sha": "d8de4dce38f235fb3654d0581f2591952525cfa4", "filename": "tests/target/macro_not_expr.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314/tests%2Ftarget%2Fmacro_not_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314/tests%2Ftarget%2Fmacro_not_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacro_not_expr.rs?ref=02c118ae7207c2d5a48a2b1cf5f6a59dbbe1d314", "patch": "@@ -0,0 +1,7 @@\n+macro_rules! test {\n+    ($($t:tt)*) => {}\n+}\n+\n+fn main() {\n+    test!( a : B => c d );\n+}"}]}