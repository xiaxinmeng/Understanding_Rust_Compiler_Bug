{"sha": "d2304008c1ea8985f21e98ecdba3108611e8786d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMzA0MDA4YzFlYTg5ODVmMjFlOThlY2RiYTMxMDg2MTFlODc4NmQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-12-30T21:08:57Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-08-22T18:23:30Z"}, "message": "Complete job outside of force_query_with_job.", "tree": {"sha": "2ea42a2886f80ffaccaf9b9c46e7358a2c142498", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ea42a2886f80ffaccaf9b9c46e7358a2c142498"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2304008c1ea8985f21e98ecdba3108611e8786d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2304008c1ea8985f21e98ecdba3108611e8786d", "html_url": "https://github.com/rust-lang/rust/commit/d2304008c1ea8985f21e98ecdba3108611e8786d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2304008c1ea8985f21e98ecdba3108611e8786d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13d4eb92b8894c54dd3f35c4bc362d3d51008b76", "url": "https://api.github.com/repos/rust-lang/rust/commits/13d4eb92b8894c54dd3f35c4bc362d3d51008b76", "html_url": "https://github.com/rust-lang/rust/commit/13d4eb92b8894c54dd3f35c4bc362d3d51008b76"}], "stats": {"total": 25, "additions": 11, "deletions": 14}, "files": [{"sha": "fbf4e8feac0b03ddf4f6cd7961c43feb78043ba8", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d2304008c1ea8985f21e98ecdba3108611e8786d/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2304008c1ea8985f21e98ecdba3108611e8786d/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=d2304008c1ea8985f21e98ecdba3108611e8786d", "patch": "@@ -484,12 +484,11 @@ where\n             tcx.store_side_effects_for_anon_node(dep_node_index, side_effects);\n         }\n \n-        let result = job.complete(result, dep_node_index);\n         (result, dep_node_index)\n     } else if query.eval_always {\n         // `to_dep_node` is expensive for some `DepKind`s.\n         let dep_node = dep_node.unwrap_or_else(|| query.to_dep_node(*tcx.dep_context(), &key));\n-        force_query_with_job(tcx, key, job, dep_node, query, compute)\n+        force_query_with_job(tcx, key, job.id, dep_node, query, compute)\n     } else {\n         // `to_dep_node` is expensive for some `DepKind`s.\n         let dep_node = dep_node.unwrap_or_else(|| query.to_dep_node(*tcx.dep_context(), &key));\n@@ -500,12 +499,12 @@ where\n             try_load_from_disk_and_cache_in_memory(tcx, &key, &dep_node, query, compute)\n         });\n         if let Some((result, dep_node_index)) = loaded {\n-            let result = job.complete(result, dep_node_index);\n             (result, dep_node_index)\n         } else {\n-            force_query_with_job(tcx, key, job, dep_node, query, compute)\n+            force_query_with_job(tcx, key, job.id, dep_node, query, compute)\n         }\n     };\n+    let result = job.complete(result, dep_node_index);\n     (result, Some(dep_node_index))\n }\n \n@@ -636,22 +635,22 @@ fn incremental_verify_ich<CTX, K, V: Debug>(\n     }\n }\n \n-fn force_query_with_job<C, CTX>(\n+fn force_query_with_job<CTX, K, V>(\n     tcx: CTX,\n-    key: C::Key,\n-    job: JobOwner<'_, CTX::DepKind, C>,\n+    key: K,\n+    job_id: QueryJobId<CTX::DepKind>,\n     dep_node: DepNode<CTX::DepKind>,\n-    query: &QueryVtable<CTX, C::Key, C::Value>,\n-    compute: fn(CTX::DepContext, C::Key) -> C::Value,\n-) -> (C::Stored, DepNodeIndex)\n+    query: &QueryVtable<CTX, K, V>,\n+    compute: fn(CTX::DepContext, K) -> V,\n+) -> (V, DepNodeIndex)\n where\n-    C: QueryCache,\n     CTX: QueryContext,\n+    K: Debug,\n {\n     let prof_timer = tcx.dep_context().profiler().query_provider();\n \n     let ((result, dep_node_index), diagnostics) = with_diagnostics(|diagnostics| {\n-        tcx.start_query(job.id, diagnostics, || {\n+        tcx.start_query(job_id, diagnostics, || {\n             if query.eval_always {\n                 tcx.dep_context().dep_graph().with_eval_always_task(\n                     dep_node,\n@@ -680,8 +679,6 @@ where\n         tcx.store_side_effects(dep_node_index, side_effects);\n     }\n \n-    let result = job.complete(result, dep_node_index);\n-\n     (result, dep_node_index)\n }\n "}]}