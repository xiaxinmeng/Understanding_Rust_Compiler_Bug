{"sha": "89b5907357c3933dc84c60eaea5dfe82cf634933", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5YjU5MDczNTdjMzkzM2RjODRjNjBlYWVhNWRmZTgyY2Y2MzQ5MzM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-07T18:15:48Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-14T12:40:42Z"}, "message": "TAIT: adjust save-analysis", "tree": {"sha": "a5870834e4c4184bc47f3ea3882d80ac84b0b921", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5870834e4c4184bc47f3ea3882d80ac84b0b921"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89b5907357c3933dc84c60eaea5dfe82cf634933", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89b5907357c3933dc84c60eaea5dfe82cf634933", "html_url": "https://github.com/rust-lang/rust/commit/89b5907357c3933dc84c60eaea5dfe82cf634933", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89b5907357c3933dc84c60eaea5dfe82cf634933/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e31d75caeee35d4c026ec3beb56f6e5844eaf69e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e31d75caeee35d4c026ec3beb56f6e5844eaf69e", "html_url": "https://github.com/rust-lang/rust/commit/e31d75caeee35d4c026ec3beb56f6e5844eaf69e"}], "stats": {"total": 48, "additions": 0, "deletions": 48}, "files": [{"sha": "5bec5b5eb6bfd6a1eacd29af161caeaddfa8fb3d", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/89b5907357c3933dc84c60eaea5dfe82cf634933/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b5907357c3933dc84c60eaea5dfe82cf634933/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=89b5907357c3933dc84c60eaea5dfe82cf634933", "patch": "@@ -1133,12 +1133,6 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                 // trait.\n                 self.visit_ty(ty)\n             }\n-            ast::ImplItemKind::OpaqueTy(ref bounds) => {\n-                // FIXME: uses of the assoc type should ideally point to this\n-                // 'def' and the name here should be a ref to the def in the\n-                // trait.\n-                self.process_bounds(&bounds);\n-            }\n             ast::ImplItemKind::Macro(_) => {}\n         }\n     }\n@@ -1384,38 +1378,6 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n                 self.visit_ty(&ty);\n                 self.process_generic_params(ty_params, &qualname, item.id);\n             }\n-            OpaqueTy(ref bounds, ref ty_params) => {\n-                let qualname = format!(\"::{}\",\n-                    self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id)));\n-\n-                let value = String::new();\n-                if !self.span.filter_generated(item.ident.span) {\n-                    let span = self.span_from_span(item.ident.span);\n-                    let id = id_from_node_id(item.id, &self.save_ctxt);\n-                    let hir_id = self.tcx.hir().node_to_hir_id(item.id);\n-\n-                    self.dumper.dump_def(\n-                        &access_from!(self.save_ctxt, item, hir_id),\n-                        Def {\n-                            kind: DefKind::Type,\n-                            id,\n-                            span,\n-                            name: item.ident.to_string(),\n-                            qualname: qualname.clone(),\n-                            value,\n-                            parent: None,\n-                            children: vec![],\n-                            decl_id: None,\n-                            docs: self.save_ctxt.docs_for_attrs(&item.attrs),\n-                            sig: sig::item_signature(item, &self.save_ctxt),\n-                            attributes: lower_attributes(item.attrs.clone(), &self.save_ctxt),\n-                        },\n-                    );\n-                }\n-\n-                self.process_bounds(bounds);\n-                self.process_generic_params(ty_params, &qualname, item.id);\n-            }\n             Mac(_) => (),\n             _ => visit::walk_item(self, item),\n         }"}, {"sha": "50dfac62024b1306e63edafb53eff911a192f251", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/89b5907357c3933dc84c60eaea5dfe82cf634933/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b5907357c3933dc84c60eaea5dfe82cf634933/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=89b5907357c3933dc84c60eaea5dfe82cf634933", "patch": "@@ -447,16 +447,6 @@ impl Sig for ast::Item {\n \n                 Ok(merge_sigs(sig.text.clone(), vec![sig, ty]))\n             }\n-            ast::ItemKind::OpaqueTy(ref bounds, ref generics) => {\n-                let text = \"type \".to_owned();\n-                let mut sig = name_and_generics(text, offset, generics, self.id, self.ident, scx)?;\n-\n-                sig.text.push_str(\" = impl \");\n-                sig.text.push_str(&pprust::bounds_to_string(bounds));\n-                sig.text.push(';');\n-\n-                Ok(sig)\n-            }\n             ast::ItemKind::Enum(_, ref generics) => {\n                 let text = \"enum \".to_owned();\n                 let mut sig = name_and_generics(text, offset, generics, self.id, self.ident, scx)?;"}]}