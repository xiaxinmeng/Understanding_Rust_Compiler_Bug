{"sha": "f8cc9a9cb1e221abb0cbf2e169b10c826f3fbd98", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4Y2M5YTljYjFlMjIxYWJiMGNiZjJlMTY5YjEwYzgyNmYzZmJkOTg=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2013-12-05T20:38:04Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2013-12-23T18:47:06Z"}, "message": "[std::ascii] Add .to_ascii_opt() and .into_ascii_opt() returning Option\n\n\u2026 instead of failing.\n\nMake them default methods on the trait, and also make .to_ascii()\na default method while we\u2019re at it.\n\nConflicts:\n\tsrc/libstd/ascii.rs", "tree": {"sha": "285dfd66a3aba58dd35508552b4a29efd0d6e30b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/285dfd66a3aba58dd35508552b4a29efd0d6e30b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8cc9a9cb1e221abb0cbf2e169b10c826f3fbd98", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8cc9a9cb1e221abb0cbf2e169b10c826f3fbd98", "html_url": "https://github.com/rust-lang/rust/commit/f8cc9a9cb1e221abb0cbf2e169b10c826f3fbd98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8cc9a9cb1e221abb0cbf2e169b10c826f3fbd98/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9c06586f2aa12f89c94a27a20f0d0b260da216e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9c06586f2aa12f89c94a27a20f0d0b260da216e", "html_url": "https://github.com/rust-lang/rust/commit/d9c06586f2aa12f89c94a27a20f0d0b260da216e"}], "stats": {"total": 106, "additions": 70, "deletions": 36}, "files": [{"sha": "74ea09b0e675932ca5df4ce348ef0d5db8e44450", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 70, "deletions": 36, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/f8cc9a9cb1e221abb0cbf2e169b10c826f3fbd98/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8cc9a9cb1e221abb0cbf2e169b10c826f3fbd98/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=f8cc9a9cb1e221abb0cbf2e169b10c826f3fbd98", "patch": "@@ -12,14 +12,15 @@\n \n use to_str::{ToStr,IntoStr};\n use str;\n+use str::Str;\n use str::StrSlice;\n use str::OwnedStr;\n use container::Container;\n use cast;\n use iter::Iterator;\n-use vec::{ImmutableVector, MutableVector};\n+use vec::{ImmutableVector, MutableVector, Vector};\n use to_bytes::IterBytes;\n-use option::{Some, None};\n+use option::{Option, Some, None};\n \n /// Datatype to hold one ascii character. It wraps a `u8`, with the highest bit always zero.\n #[deriving(Clone, Eq, Ord, TotalOrd, TotalEq)]\n@@ -135,8 +136,22 @@ impl ToStr for Ascii {\n \n /// Trait for converting into an ascii type.\n pub trait AsciiCast<T> {\n-    /// Convert to an ascii type\n-    fn to_ascii(&self) -> T;\n+    /// Convert to an ascii type, fail on non-ASCII input.\n+    #[inline]\n+    fn to_ascii(&self) -> T {\n+        assert!(self.is_ascii());\n+        unsafe {self.to_ascii_nocheck()}\n+    }\n+\n+    /// Convert to an ascii type, return None on non-ASCII input.\n+    #[inline]\n+    fn to_ascii_opt(&self) -> Option<T> {\n+        if self.is_ascii() {\n+            Some(unsafe { self.to_ascii_nocheck() })\n+        } else {\n+            None\n+        }\n+    }\n \n     /// Convert to an ascii type, not doing any range asserts\n     unsafe fn to_ascii_nocheck(&self) -> T;\n@@ -146,12 +161,6 @@ pub trait AsciiCast<T> {\n }\n \n impl<'a> AsciiCast<&'a[Ascii]> for &'a [u8] {\n-    #[inline]\n-    fn to_ascii(&self) -> &'a[Ascii] {\n-        assert!(self.is_ascii());\n-        unsafe {self.to_ascii_nocheck()}\n-    }\n-\n     #[inline]\n     unsafe fn to_ascii_nocheck(&self) -> &'a[Ascii] {\n         cast::transmute(*self)\n@@ -167,12 +176,6 @@ impl<'a> AsciiCast<&'a[Ascii]> for &'a [u8] {\n }\n \n impl<'a> AsciiCast<&'a [Ascii]> for &'a str {\n-    #[inline]\n-    fn to_ascii(&self) -> &'a [Ascii] {\n-        assert!(self.is_ascii());\n-        unsafe { self.to_ascii_nocheck() }\n-    }\n-\n     #[inline]\n     unsafe fn to_ascii_nocheck(&self) -> &'a [Ascii] {\n         cast::transmute(*self)\n@@ -185,12 +188,6 @@ impl<'a> AsciiCast<&'a [Ascii]> for &'a str {\n }\n \n impl AsciiCast<Ascii> for u8 {\n-    #[inline]\n-    fn to_ascii(&self) -> Ascii {\n-        assert!(self.is_ascii());\n-        unsafe {self.to_ascii_nocheck()}\n-    }\n-\n     #[inline]\n     unsafe fn to_ascii_nocheck(&self) -> Ascii {\n         Ascii{ chr: *self }\n@@ -203,12 +200,6 @@ impl AsciiCast<Ascii> for u8 {\n }\n \n impl AsciiCast<Ascii> for char {\n-    #[inline]\n-    fn to_ascii(&self) -> Ascii {\n-        assert!(self.is_ascii());\n-        unsafe {self.to_ascii_nocheck()}\n-    }\n-\n     #[inline]\n     unsafe fn to_ascii_nocheck(&self) -> Ascii {\n         Ascii{ chr: *self as u8 }\n@@ -222,8 +213,25 @@ impl AsciiCast<Ascii> for char {\n \n /// Trait for copyless casting to an ascii vector.\n pub trait OwnedAsciiCast {\n-    /// Take ownership and cast to an ascii vector.\n-    fn into_ascii(self) -> ~[Ascii];\n+    /// Check if convertible to ascii\n+    fn is_ascii(&self) -> bool;\n+\n+    /// Take ownership and cast to an ascii vector. Fail on non-ASCII input.\n+    #[inline]\n+    fn into_ascii(self) -> ~[Ascii] {\n+        assert!(self.is_ascii());\n+        unsafe {self.into_ascii_nocheck()}\n+    }\n+\n+    /// Take ownership and cast to an ascii vector. Return None on non-ASCII input.\n+    #[inline]\n+    fn into_ascii_opt(self) -> Option<~[Ascii]> {\n+        if self.is_ascii() {\n+            Some(unsafe { self.into_ascii_nocheck() })\n+        } else {\n+            None\n+        }\n+    }\n \n     /// Take ownership and cast to an ascii vector.\n     /// Does not perform validation checks.\n@@ -232,9 +240,8 @@ pub trait OwnedAsciiCast {\n \n impl OwnedAsciiCast for ~[u8] {\n     #[inline]\n-    fn into_ascii(self) -> ~[Ascii] {\n-        assert!(self.is_ascii());\n-        unsafe {self.into_ascii_nocheck()}\n+    fn is_ascii(&self) -> bool {\n+        self.as_slice().is_ascii()\n     }\n \n     #[inline]\n@@ -245,9 +252,8 @@ impl OwnedAsciiCast for ~[u8] {\n \n impl OwnedAsciiCast for ~str {\n     #[inline]\n-    fn into_ascii(self) -> ~[Ascii] {\n-        assert!(self.is_ascii());\n-        unsafe {self.into_ascii_nocheck()}\n+    fn is_ascii(&self) -> bool {\n+        self.as_slice().is_ascii()\n     }\n \n     #[inline]\n@@ -475,9 +481,11 @@ mod tests {\n     use super::*;\n     use str::from_char;\n     use char::from_u32;\n+    use option::{Some, None};\n \n     macro_rules! v2ascii (\n         ( [$($e:expr),*]) => ( [$(Ascii{chr:$e}),*]);\n+        (&[$($e:expr),*]) => (&[$(Ascii{chr:$e}),*]);\n         (~[$($e:expr),*]) => (~[$(Ascii{chr:$e}),*]);\n     )\n \n@@ -569,6 +577,32 @@ mod tests {\n     #[test] #[should_fail]\n     fn test_ascii_fail_char_slice() { '\u03bb'.to_ascii(); }\n \n+    fn test_opt() {\n+        assert_eq!(65u8.to_ascii_opt(), Some(Ascii { chr: 65u8 }));\n+        assert_eq!(255u8.to_ascii_opt(), None);\n+\n+        assert_eq!('A'.to_ascii_opt(), Some(Ascii { chr: 65u8 }));\n+        assert_eq!('\u03bb'.to_ascii_opt(), None);\n+\n+        assert_eq!(\"zo\u00e4\u534e\".to_ascii_opt(), None);\n+\n+        assert_eq!((&[127u8, 128u8, 255u8]).to_ascii_opt(), None);\n+\n+        let v = [40u8, 32u8, 59u8];\n+        assert_eq!(v.to_ascii_opt(), Some(v2ascii!(&[40, 32, 59])));\n+        let v = [127u8, 128u8, 255u8];\n+        assert_eq!(v.to_ascii_opt(), None);\n+\n+        assert_eq!(\"( ;\".to_ascii_opt(), Some(v2ascii!(&[40, 32, 59])));\n+        assert_eq!(\"zo\u00e4\u534e\".to_ascii_opt(), None);\n+\n+        assert_eq!((~[40u8, 32u8, 59u8]).into_ascii_opt(), Some(v2ascii!(~[40, 32, 59])));\n+        assert_eq!((~[127u8, 128u8, 255u8]).into_ascii_opt(), None);\n+\n+        assert_eq!((~\"( ;\").into_ascii_opt(), Some(v2ascii!(~[40, 32, 59])));\n+        assert_eq!((~\"zo\u00e4\u534e\").into_ascii_opt(), None);\n+    }\n+\n     #[test]\n     fn test_to_ascii_upper() {\n         assert_eq!(\"url()URL()uRl()\u00fcrl\".to_ascii_upper(), ~\"URL()URL()URL()\u00fcRL\");"}]}