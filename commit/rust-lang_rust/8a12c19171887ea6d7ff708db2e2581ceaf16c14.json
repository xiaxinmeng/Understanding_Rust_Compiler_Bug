{"sha": "8a12c19171887ea6d7ff708db2e2581ceaf16c14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMTJjMTkxNzE4ODdlYTZkN2ZmNzA4ZGIyZTI1ODFjZWFmMTZjMTQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-10-02T19:41:24Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-10-13T12:19:20Z"}, "message": "Test and gate empty structures and variants better", "tree": {"sha": "2ff02dad84730da28dc96d487d96a442350ee320", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ff02dad84730da28dc96d487d96a442350ee320"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a12c19171887ea6d7ff708db2e2581ceaf16c14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a12c19171887ea6d7ff708db2e2581ceaf16c14", "html_url": "https://github.com/rust-lang/rust/commit/8a12c19171887ea6d7ff708db2e2581ceaf16c14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a12c19171887ea6d7ff708db2e2581ceaf16c14/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9", "url": "https://api.github.com/repos/rust-lang/rust/commits/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9", "html_url": "https://github.com/rust-lang/rust/commit/beda1f88a7d87cf994fe8e3a5b2fe126e31fcae9"}], "stats": {"total": 360, "additions": 291, "deletions": 69}, "files": [{"sha": "8b4e94063f9bd950e1496b80f63ff567f9a32477", "filename": "src/doc/reference.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=8a12c19171887ea6d7ff708db2e2581ceaf16c14", "patch": "@@ -2357,7 +2357,7 @@ The currently implemented features of the reference compiler are:\n                               terms of encapsulation).\n * - `default_type_parameter_fallback` - Allows type parameter defaults to\n                                         influence type inference.\n-* - `braced_empty_structs` - Allows use of empty structs with braces.\n+* - `braced_empty_structs` - Allows use of empty structs and enum variants with braces.\n \n If a feature is promoted to a language feature, then all existing programs will\n start to receive compilation warnings about `#![feature]` directives which enabled"}, {"sha": "db5dd19c9236c68013dacca90f87cb61f2c545df", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=8a12c19171887ea6d7ff708db2e2581ceaf16c14", "patch": "@@ -530,7 +530,7 @@ pub fn check_pat_struct<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>, pat: &'tcx hir::Pat,\n     let tcx = pcx.fcx.ccx.tcx;\n \n     let def = tcx.def_map.borrow().get(&pat.id).unwrap().full_def();\n-    let variant = match fcx.def_struct_variant(def) {\n+    let variant = match fcx.def_struct_variant(def, path.span) {\n         Some((_, variant)) => variant,\n         None => {\n             let name = pprust::path_to_string(path);"}, {"sha": "6b19c8bd2e5ea9159c57be1865b5d3099f3ef47c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8a12c19171887ea6d7ff708db2e2581ceaf16c14", "patch": "@@ -1464,7 +1464,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     /// Return the dict-like variant corresponding to a given `Def`.\n     pub fn def_struct_variant(&self,\n-                              def: def::Def)\n+                              def: def::Def,\n+                              span: Span)\n                               -> Option<(ty::AdtDef<'tcx>, ty::VariantDef<'tcx>)>\n     {\n         let (adt, variant) = match def {\n@@ -1484,11 +1485,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n \n         let var_kind = variant.kind();\n-        if var_kind == ty::VariantKind::Dict || var_kind == ty::VariantKind::Unit {\n+        if var_kind == ty::VariantKind::Dict {\n             Some((adt, variant))\n-        } else {\n-            None\n-        }\n+        } else if var_kind == ty::VariantKind::Unit {\n+            if !self.tcx().sess.features.borrow().braced_empty_structs {\n+                self.tcx().sess.span_err(span, \"empty structs and enum variants \\\n+                                                with braces are unstable\");\n+                fileline_help!(self.tcx().sess, span, \"add #![feature(braced_empty_structs)] to \\\n+                                                       the crate features to enable\");\n+            }\n+\n+             Some((adt, variant))\n+         } else {\n+             None\n+         }\n     }\n \n     pub fn write_nil(&self, node_id: ast::NodeId) {\n@@ -3177,7 +3187,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n \n         // Find the relevant variant\n         let def = lookup_full_def(tcx, path.span, expr.id);\n-        let (adt, variant) = match fcx.def_struct_variant(def) {\n+        let (adt, variant) = match fcx.def_struct_variant(def, path.span) {\n             Some((adt, variant)) => (adt, variant),\n             None => {\n                 span_err!(fcx.tcx().sess, path.span, E0071,"}, {"sha": "66a422ce664c1984043900e9eae94cd19c3a10e4", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=8a12c19171887ea6d7ff708db2e2581ceaf16c14", "patch": "@@ -196,7 +196,7 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Option<u32>, Status\n     // allow `#[unwind]`\n     (\"unwind_attributes\", \"1.4.0\", None, Active),\n \n-    // allow empty structs/enum variants with braces\n+    // allow empty structs and enum variants with braces\n     (\"braced_empty_structs\", \"1.5.0\", None, Active),\n \n     // allow overloading augmented assignment operations like `a += b`\n@@ -486,6 +486,7 @@ pub struct Features {\n     pub cfg_target_feature: bool,\n     pub cfg_target_vendor: bool,\n     pub augmented_assignments: bool,\n+    pub braced_empty_structs: bool,\n }\n \n impl Features {\n@@ -516,6 +517,7 @@ impl Features {\n             cfg_target_feature: false,\n             cfg_target_vendor: false,\n             augmented_assignments: false,\n+            braced_empty_structs: false,\n         }\n     }\n }\n@@ -809,7 +811,7 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                 }\n             }\n \n-            ast::ItemStruct(ref def, _) => {\n+            ast::ItemStruct(..) => {\n                 if attr::contains_name(&i.attrs[..], \"simd\") {\n                     self.gate_feature(\"simd\", i.span,\n                                       \"SIMD types are experimental and possibly buggy\");\n@@ -828,10 +830,6 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                         }\n                     }\n                 }\n-                if def.fields.is_empty() && def.kind == ast::VariantKind::Dict {\n-                    self.gate_feature(\"braced_empty_structs\", i.span,\n-                                      \"empty structs with braces are unstable\");\n-                }\n             }\n \n             ast::ItemDefaultImpl(..) => {\n@@ -859,6 +857,21 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n         visit::walk_item(self, i);\n     }\n \n+    fn visit_struct_def(&mut self, s: &'v ast::StructDef, _: ast::Ident,\n+                        _: &'v ast::Generics, _: ast::NodeId, span: Span) {\n+        if s.fields.is_empty() {\n+            if s.kind == ast::VariantKind::Dict {\n+                self.gate_feature(\"braced_empty_structs\", span,\n+                                  \"empty structs and enum variants with braces are unstable\");\n+            } else if s.kind == ast::VariantKind::Tuple {\n+                self.context.span_handler.span_err(span, \"empty tuple structs and enum variants \\\n+                                                          are not allowed, use unit structs and \\\n+                                                          enum variants instead\");\n+            }\n+        }\n+        visit::walk_struct_def(self, s)\n+    }\n+\n     fn visit_foreign_item(&mut self, i: &ast::ForeignItem) {\n         let links_to_llvm = match attr::first_attr_value_str_by_name(&i.attrs,\n                                                                      \"link_name\") {\n@@ -881,12 +894,6 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                                   \"box expression syntax is experimental; \\\n                                    you can call `Box::new` instead.\");\n             }\n-            ast::ExprStruct(_, ref fields, ref expr) => {\n-                if fields.is_empty() && expr.is_none() {\n-                    self.gate_feature(\"braced_empty_structs\", e.span,\n-                                      \"empty structs with braces are unstable\");\n-                }\n-            }\n             _ => {}\n         }\n         visit::walk_expr(self, e);\n@@ -911,12 +918,6 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                                   pattern.span,\n                                   \"box pattern syntax is experimental\");\n             }\n-            ast::PatStruct(_, ref fields, dotdot) => {\n-                if fields.is_empty() && !dotdot {\n-                    self.gate_feature(\"braced_empty_structs\", pattern.span,\n-                                      \"empty structs with braces are unstable\");\n-                }\n-            }\n             _ => {}\n         }\n         visit::walk_pat(self, pattern)\n@@ -1086,6 +1087,7 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler,\n         cfg_target_feature: cx.has_feature(\"cfg_target_feature\"),\n         cfg_target_vendor: cx.has_feature(\"cfg_target_vendor\"),\n         augmented_assignments: cx.has_feature(\"augmented_assignments\"),\n+        braced_empty_structs: cx.has_feature(\"braced_empty_structs\"),\n     }\n }\n "}, {"sha": "47632781956e55cdf575c628356d4fcc292030bc", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8a12c19171887ea6d7ff708db2e2581ceaf16c14", "patch": "@@ -4658,7 +4658,7 @@ impl<'a> Parser<'a> {\n             (fields, VariantKind::Dict)\n         // Tuple-style struct definition with optional where-clause.\n         } else if self.token == token::OpenDelim(token::Paren) {\n-            let fields = try!(self.parse_tuple_struct_body(class_name, &mut generics));\n+            let fields = try!(self.parse_tuple_struct_body(&mut generics));\n             (fields, VariantKind::Tuple)\n         } else {\n             let token_str = self.this_token_to_string();\n@@ -4694,7 +4694,6 @@ impl<'a> Parser<'a> {\n     }\n \n     pub fn parse_tuple_struct_body(&mut self,\n-                                   class_name: ast::Ident,\n                                    generics: &mut ast::Generics)\n                                    -> PResult<Vec<StructField>> {\n         // This is the case where we find `struct Foo<T>(T) where T: Copy;`\n@@ -4715,12 +4714,6 @@ impl<'a> Parser<'a> {\n                 Ok(spanned(lo, p.span.hi, struct_field_))\n             }));\n \n-        if fields.is_empty() {\n-            return Err(self.fatal(&format!(\"unit-like struct definition should be \\\n-                                            written as `struct {};`\",\n-                                           class_name)));\n-        }\n-\n         generics.where_clause = try!(self.parse_where_clause());\n         try!(self.expect(&token::Semi));\n         Ok(fields)"}, {"sha": "67167086b9c4a8ac546bd17c5793a04652f57d3c", "filename": "src/test/compile-fail/empty-struct-braces-expr.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-expr.rs?ref=8a12c19171887ea6d7ff708db2e2581ceaf16c14", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Can't use empty braced struct as constant or constructor function\n+\n+#![feature(braced_empty_structs)]\n+\n+struct Empty1 {}\n+\n+enum E {\n+    Empty2 {}\n+}\n+\n+fn main() {\n+    let e1 = Empty1; //~ ERROR `Empty1` is the name of a struct or struct variant\n+    let e1 = Empty1(); //~ ERROR `Empty1` is the name of a struct or struct variant\n+    let e2 = E::Empty2; //~ ERROR `E::Empty2` is the name of a struct or struct variant\n+    let e2 = E::Empty2(); //~ ERROR `E::Empty2` is the name of a struct or struct variant\n+}"}, {"sha": "a131b46e1c19b9687b32adaf772678eca6aa5d73", "filename": "src/test/compile-fail/empty-struct-braces-gate-1.rs", "status": "renamed", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-gate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-gate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-gate-1.rs?ref=8a12c19171887ea6d7ff708db2e2581ceaf16c14", "patch": "@@ -9,13 +9,15 @@\n // except according to those terms.\n \n // Feature gate test for empty struct with braces\n+// Can't define an empty braced struct\n \n-struct Empty {} //~ ERROR empty structs with braces are unstable\n+struct Empty1 {} //~ ERROR empty structs and enum variants with braces are unstable\n+struct Empty2;\n \n-fn main() {\n-    let e = Empty {}; //~ ERROR empty structs with braces are unstable\n+enum E {\n+    Empty4 {}, //~ ERROR empty structs and enum variants with braces are unstable\n+    Empty5,\n+}\n \n-    match e {\n-        Empty {} => {} //~ ERROR empty structs with braces are unstable\n-    }\n+fn main() {\n }", "previous_filename": "src/test/compile-fail/empty-struct-with-braces-3.rs"}, {"sha": "c1b73bdc96a8f14e7eb26b48f589fde64c08bf34", "filename": "src/test/compile-fail/empty-struct-braces-gate-2.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-gate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-gate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-gate-2.rs?ref=8a12c19171887ea6d7ff708db2e2581ceaf16c14", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Feature gate test for empty struct with braces\n+// Can't use braced expressions and patterns with structs defined without braces\n+\n+struct Empty2;\n+\n+enum E {\n+    Empty5,\n+}\n+\n+fn main() {\n+    let e2: Empty2 = Empty2 {}; //~ ERROR empty structs and enum variants with braces are unstable\n+    let e2: Empty2 = Empty2;\n+    // Issue #28692\n+    // let e5: E = E::Empty5 {}; // ERROR empty structs and enum variants with braces are unstable\n+    let e5: E = E::Empty5;\n+\n+    match e2 {\n+        Empty2 {} => {} //~ ERROR empty structs and enum variants with braces are unstable\n+    }\n+    match e2 {\n+        Empty2 => {}\n+    }\n+    match e2 {\n+        Empty2 { .. } => {} //~ ERROR empty structs and enum variants with braces are unstable\n+    }\n+    // Issue #28692\n+    // match e5 {\n+    //     E::Empty5 {} => {} // ERROR empty structs and enum variants with braces are unstable\n+    // }\n+    match e5 {\n+        E::Empty5 => {}\n+    }\n+    // Issue #28692\n+    // match e5 {\n+    //     E::Empty5 { .. } => {} // ERROR empty structs and enum variants with braces are unstable\n+    // }\n+\n+    let e22 = Empty2 { ..e2 }; //~ ERROR empty structs and enum variants with braces are unstable\n+}"}, {"sha": "e095f69ed7da67e12fb93ccb1f56f195b3ad2752", "filename": "src/test/compile-fail/empty-struct-braces-pat-1.rs", "status": "renamed", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-1.rs?ref=8a12c19171887ea6d7ff708db2e2581ceaf16c14", "patch": "@@ -8,18 +8,26 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Empty struct defined with braces shouldn't add names into value namespace\n+// Can't use empty braced struct as constant pattern\n \n-#![feature(braced_empty_structs)]\n #![deny(warnings)]\n+#![feature(braced_empty_structs)]\n \n-struct Empty {}\n+struct Empty1 {}\n+\n+enum E {\n+    Empty2 {}\n+}\n \n fn main() {\n-    let e = Empty {};\n+    let e1 = Empty1 {};\n+    let e2 = E::Empty2 {};\n \n-    match e {\n-        Empty => () //~ ERROR unused variable: `Empty`\n-        //~^ ERROR variable `Empty` should have a snake case name such as `empty`\n+    // Issue #28692\n+    // match e1 {\n+    //     Empty1 => () // ERROR incorrect error\n+    // }\n+    match e2 {\n+        E::Empty2 => () //~ ERROR `E::Empty2` does not name a non-struct variant or a tuple struct\n     }\n }", "previous_filename": "src/test/compile-fail/empty-struct-with-braces-2.rs"}, {"sha": "0e7152ec89a81ea3b81be01742eaf725a2e3c693", "filename": "src/test/compile-fail/empty-struct-braces-pat-2.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-braces-pat-2.rs?ref=8a12c19171887ea6d7ff708db2e2581ceaf16c14", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Can't use empty braced struct as enum pattern\n+\n+#![feature(braced_empty_structs)]\n+\n+struct Empty1 {}\n+\n+enum E {\n+    Empty2 {}\n+}\n+\n+fn main() {\n+    let e1 = Empty1 {};\n+    let e2 = E::Empty2 {};\n+\n+    // Rejected by parser as yet\n+    // match e1 {\n+    //     Empty1() => () // ERROR unresolved enum variant, struct or const `Empty1`\n+    // }\n+    match e1 {\n+        Empty1(..) => () //~ ERROR unresolved enum variant, struct or const `Empty1`\n+    }\n+    // Issue #28692\n+    // match e2 {\n+    //     E::Empty2() => () // ERROR unresolved enum variant, struct or const `Empty2`\n+    // }\n+    // match e2 {\n+    //     E::Empty2(..) => () // ERROR unresolved enum variant, struct or const `Empty2`\n+    // }\n+}"}, {"sha": "199065665b9f65842c236516a22872f08da35071", "filename": "src/test/compile-fail/empty-struct-unit-expr.rs", "status": "renamed", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-expr.rs?ref=8a12c19171887ea6d7ff708db2e2581ceaf16c14", "patch": "@@ -8,12 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Empty struct defined with braces shouldn't add names into value namespace\n+// Can't use unit struct as constructor function\n \n #![feature(braced_empty_structs)]\n \n-struct Empty {}\n+struct Empty1;\n+\n+enum E {\n+    Empty2\n+}\n \n fn main() {\n-    let e = Empty; //~ ERROR `Empty` is the name of a struct or struct variant\n+    let e1 = Empty1(); //~ ERROR expected function, found `Empty1`\n+    let e2 = E::Empty2(); //~ ERROR expected function, found `E`\n }", "previous_filename": "src/test/compile-fail/empty-struct-with-braces-1.rs"}, {"sha": "966a2780f9f8c130c9bb4b5faab1313f7eced448", "filename": "src/test/compile-fail/empty-struct-unit-pat.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fempty-struct-unit-pat.rs?ref=8a12c19171887ea6d7ff708db2e2581ceaf16c14", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Can't use unit struct as enum pattern\n+\n+#![feature(braced_empty_structs)]\n+\n+FIXME //~ ERROR expected item, found `FIXME`\n+\n+struct Empty1;\n+\n+enum E {\n+    Empty2\n+}\n+\n+fn main() {\n+    let e1 = Empty1;\n+    let e2 = E::Empty2;\n+\n+    // Issue #28692\n+    // match e1 {\n+    //     Empty1() => () // ERROR variable `Empty1` should have a snake case name\n+    // }\n+    // match e1 {\n+    //     Empty1(..) => () // ERROR variable `Empty1` should have a snake case name\n+    // }\n+    // match e2 {\n+    //     E::Empty2() => () // ERROR variable `Empty2` should have a snake case name\n+    // }\n+    // match e2 {\n+    //     E::Empty2(..) => () // ERROR variable `Empty2` should have a snake case name\n+    // }\n+}"}, {"sha": "065b29d29aca53fdf1d07b3d61c67836fd967b5c", "filename": "src/test/compile-fail/issue-16819.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Ftest%2Fcompile-fail%2Fissue-16819.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Ftest%2Fcompile-fail%2Fissue-16819.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16819.rs?ref=8a12c19171887ea6d7ff708db2e2581ceaf16c14", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct TS ( //~ ERROR empty tuple structs and enum variants are not allowed\n+    #[cfg(untrue)]\n+    int,\n+);\n+\n+fn main() {\n+    let s = S;\n+}"}, {"sha": "3cdb370f0e94c9156e62c52061ab7bb6a5c00601", "filename": "src/test/compile-fail/issue-27831.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Ftest%2Fcompile-fail%2Fissue-27831.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Ftest%2Fcompile-fail%2Fissue-27831.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27831.rs?ref=8a12c19171887ea6d7ff708db2e2581ceaf16c14", "patch": "@@ -22,8 +22,8 @@ fn main() {\n     let Foo { .. } = x; //~ ERROR `Foo` does not name a struct\n \n     let x = Bar;\n-    Bar { ..x };\n-    let Bar { .. } = x;\n+    Bar { ..x }; //~ ERROR empty structs and enum variants with braces are unstable\n+    let Bar { .. } = x; //~ ERROR empty structs and enum variants with braces are unstable\n \n     match Enum::Bar {\n         Enum::Bar { .. } //~ ERROR `Enum::Bar` does not name a struct"}, {"sha": "6bdbae1e4b9d91009839352a8fb5f7113d6423da", "filename": "src/test/compile-fail/struct-no-fields-enumlike.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Ftest%2Fcompile-fail%2Fstruct-no-fields-enumlike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Ftest%2Fcompile-fail%2Fstruct-no-fields-enumlike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-no-fields-enumlike.rs?ref=8a12c19171887ea6d7ff708db2e2581ceaf16c14", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z parse-only\n-\n-struct Foo(); //~ ERROR unit-like struct definition should be written as `struct Foo;`\n+struct Foo(); //~ ERROR empty tuple structs and enum variants are not allowed\n \n fn main() {}", "previous_filename": "src/test/parse-fail/struct-no-fields-enumlike.rs"}, {"sha": "f2fbf2dd337e7d7a3fa2e2f9d4a80af319933768", "filename": "src/test/run-pass/empty-struct-braces.rs", "status": "renamed", "additions": 46, "deletions": 14, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Ftest%2Frun-pass%2Fempty-struct-braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a12c19171887ea6d7ff708db2e2581ceaf16c14/src%2Ftest%2Frun-pass%2Fempty-struct-braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-struct-braces.rs?ref=8a12c19171887ea6d7ff708db2e2581ceaf16c14", "patch": "@@ -18,39 +18,71 @@ struct Empty2;\n struct Empty3 {}\n const Empty3: Empty3 = Empty3 {};\n \n+enum E {\n+    Empty4 {},\n+    Empty5,\n+}\n+\n fn main() {\n     let e1: Empty1 = Empty1 {};\n     let e2: Empty2 = Empty2 {};\n     let e2: Empty2 = Empty2;\n     let e3: Empty3 = Empty3 {};\n     let e3: Empty3 = Empty3;\n+    let e4: E = E::Empty4 {};\n+    // let e5: E = E::Empty5 {}; // Issue #28692\n+    let e5: E = E::Empty5;\n \n     match e1 {\n-        Empty1 {} => ()\n-    }\n-    match e2 {\n-        Empty2 {} => ()\n+        Empty1 {} => {}\n     }\n     match e2 {\n-        Empty2 => ()\n+        Empty2 {} => {}\n     }\n     match e3 {\n-        Empty3 {} => ()\n+        Empty3 {} => {}\n     }\n-    match e3 {\n-        Empty3 => ()\n+    match e4 {\n+        E::Empty4 {} => {}\n+        _ => {}\n     }\n+    // Issue #28692\n+    // match e5 {\n+    //     E::Empty5 {} => {}\n+    //     _ => {}\n+    // }\n+\n     match e1 {\n-        Empty1 { .. } => ()\n+        Empty1 { .. } => {}\n     }\n     match e2 {\n-        Empty2 { .. } => ()\n+        Empty2 { .. } => {}\n     }\n     match e3 {\n-        Empty3 { .. } => ()\n+        Empty3 { .. } => {}\n+    }\n+    match e4 {\n+        E::Empty4 { .. } => {}\n+        _ => {}\n+    }\n+    // Issue #28692\n+    // match e5 {\n+    //     E::Empty5 { .. } => {}\n+    //     _ => {}\n+    // }\n+\n+    match e2 {\n+        Empty2 => {}\n+    }\n+    match e3 {\n+        Empty3 => {}\n+    }\n+    match e5 {\n+        E::Empty5 => {}\n+        _ => {}\n     }\n \n-    let e11 = Empty1 { ..e1 };\n-    let e22 = Empty2 { ..e2 };\n-    let e33 = Empty3 { ..e3 };\n+    let e11: Empty1 = Empty1 { ..e1 };\n+    let e22: Empty2 = Empty2 { ..e2 };\n+    let e33: Empty3 = Empty3 { ..e3 };\n }", "previous_filename": "src/test/run-pass/empty-struct-with-braces.rs"}]}