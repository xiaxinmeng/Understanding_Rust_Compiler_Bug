{"sha": "9a5e9806f3845731b9c4bdb1b986332ac9ed35b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNWU5ODA2ZjM4NDU3MzFiOWM0YmRiMWI5ODYzMzJhYzllZDM1YjI=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-05T00:27:51Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-08-05T00:33:15Z"}, "message": "Don't force resolution of type variables until there is no enclosing function scope. Closes #803.", "tree": {"sha": "909fbcccb58f2d326552e61056a923f2ee6dba60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/909fbcccb58f2d326552e61056a923f2ee6dba60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a5e9806f3845731b9c4bdb1b986332ac9ed35b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a5e9806f3845731b9c4bdb1b986332ac9ed35b2", "html_url": "https://github.com/rust-lang/rust/commit/9a5e9806f3845731b9c4bdb1b986332ac9ed35b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a5e9806f3845731b9c4bdb1b986332ac9ed35b2/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4fe1b312797fb311351d27d1dce0cec735c808f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4fe1b312797fb311351d27d1dce0cec735c808f", "html_url": "https://github.com/rust-lang/rust/commit/d4fe1b312797fb311351d27d1dce0cec735c808f"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "e7089faba2571ba915b2dc2651617a4fcec0dbd7", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9a5e9806f3845731b9c4bdb1b986332ac9ed35b2/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5e9806f3845731b9c4bdb1b986332ac9ed35b2/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=9a5e9806f3845731b9c4bdb1b986332ac9ed35b2", "patch": "@@ -1167,17 +1167,11 @@ mod writeback {\n     fn visit_item(item: &@ast::item, wbcx: &wb_ctxt, v: &wb_vt) {\n         // Ignore items\n     }\n-    fn visit_fn(f: &ast::_fn, tps: &ast::ty_param[],\n-                    sp: &span, i: &ast::fn_ident, d: ast::node_id,\n-                    wbcx: &wb_ctxt, v: &wb_vt) {\n-        // Ignore fns\n-    }\n \n     fn resolve_type_vars_in_block(fcx: &@fn_ctxt, blk: &ast::blk) -> bool {\n         let wbcx = {fcx: fcx, mutable success: true};\n         let visit = visit::mk_vt\n             (@{visit_item: visit_item,\n-               visit_fn: visit_fn,\n                visit_stmt: visit_stmt,\n                visit_expr: visit_expr,\n                visit_block: visit_block,\n@@ -2647,7 +2641,6 @@ fn check_fn(ccx: &@crate_ctxt, f: &ast::_fn, id: &ast::node_id,\n     check_block(fcx, body);\n     alt decl.purity {\n       ast::pure_fn. {\n-\n         // This just checks that the declared type is bool, and trusts\n         // that that's the actual return type.\n         if !ty::type_is_bool(ccx.tcx, fcx.ret_ty) {\n@@ -2669,7 +2662,13 @@ fn check_fn(ccx: &@crate_ctxt, f: &ast::_fn, id: &ast::node_id,\n         }\n     }\n \n-    writeback::resolve_type_vars_in_block(fcx, body);\n+    // If we don't have any enclosing function scope, it is time to\n+    // force any remaining type vars to be resolved.\n+    // If we have an enclosing function scope, our type variables will be\n+    // resolved when the enclosing scope finishes up.\n+    if (option::is_none(old_fcx)) {\n+        writeback::resolve_type_vars_in_block(fcx, body);\n+    }\n }\n \n fn check_method(ccx: &@crate_ctxt, method: &@ast::method) {"}, {"sha": "921b5568b0b3bb46ea4ad0c2c7b088fd68929b04", "filename": "src/test/run-pass/lambda-infer-unresolved.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a5e9806f3845731b9c4bdb1b986332ac9ed35b2/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a5e9806f3845731b9c4bdb1b986332ac9ed35b2/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs?ref=9a5e9806f3845731b9c4bdb1b986332ac9ed35b2", "patch": "@@ -0,0 +1,7 @@\n+// This should typecheck even though the type of e is not fully\n+// resolved when we finish typechecking the lambda.\n+fn main() {\n+    let e = @{mutable refs: ~[], n: 0};\n+    let f = lambda() { log_err e.n; };\n+    e.refs += ~[1];\n+}"}]}