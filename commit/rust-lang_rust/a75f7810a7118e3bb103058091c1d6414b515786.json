{"sha": "a75f7810a7118e3bb103058091c1d6414b515786", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NWY3ODEwYTcxMThlM2JiMTAzMDU4MDkxYzFkNjQxNGI1MTU3ODY=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-10-17T14:31:22Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-10-17T14:31:22Z"}, "message": "AST-borrowck: add separate mem category for thread-locals, as they are not quite rvalues\n(and of course they are not quite statics either).\n\nNamely, they *do* have a restricted region (like rvalues), but they\nalso cannot be moved out of (like statics).", "tree": {"sha": "0dfdbb075ec1810a6fee15fda466aceada5fa447", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0dfdbb075ec1810a6fee15fda466aceada5fa447"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a75f7810a7118e3bb103058091c1d6414b515786", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a75f7810a7118e3bb103058091c1d6414b515786", "html_url": "https://github.com/rust-lang/rust/commit/a75f7810a7118e3bb103058091c1d6414b515786", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a75f7810a7118e3bb103058091c1d6414b515786/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ea8eb55cd9f4547b332f43c9f723de30187c223", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ea8eb55cd9f4547b332f43c9f723de30187c223", "html_url": "https://github.com/rust-lang/rust/commit/5ea8eb55cd9f4547b332f43c9f723de30187c223"}], "stats": {"total": 51, "additions": 42, "deletions": 9}, "files": [{"sha": "9d3f37bc36a9d5873796ba3bd66a3f8582ba8947", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a75f7810a7118e3bb103058091c1d6414b515786/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75f7810a7118e3bb103058091c1d6414b515786/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=a75f7810a7118e3bb103058091c1d6414b515786", "patch": "@@ -93,6 +93,7 @@ use util::nodemap::ItemLocalSet;\n #[derive(Clone, Debug, PartialEq)]\n pub enum Categorization<'tcx> {\n     Rvalue(ty::Region<'tcx>),            // temporary val, argument is its scope\n+    ThreadLocal(ty::Region<'tcx>),       // value that cannot move, but still restricted in scope\n     StaticItem,\n     Upvar(Upvar),                        // upvar referenced by closure env\n     Local(ast::NodeId),                  // local variable\n@@ -268,6 +269,7 @@ impl<'tcx> cmt_<'tcx> {\n             Categorization::Deref(ref base_cmt, _) => {\n                 base_cmt.immutability_blame()\n             }\n+            Categorization::ThreadLocal(..) |\n             Categorization::StaticItem => {\n                 // Do we want to do something here?\n                 None\n@@ -715,17 +717,23 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             }\n \n             Def::Static(def_id, mutbl) => {\n-                // `#[thread_local]` statics may not outlive the current function.\n-                for attr in &self.tcx.get_attrs(def_id)[..] {\n-                    if attr.check_name(\"thread_local\") {\n-                        return Ok(self.cat_rvalue_node(hir_id, span, expr_ty));\n-                    }\n-                }\n+                // `#[thread_local]` statics may not outlive the current function, but\n+                // they also cannot be moved out of.\n+                let is_thread_local = self.tcx.get_attrs(def_id)[..]\n+                    .iter()\n+                    .any(|attr| attr.check_name(\"thread_local\"));\n+\n+                let cat = if is_thread_local {\n+                    let re = self.temporary_scope(hir_id.local_id);\n+                    Categorization::ThreadLocal(re)\n+                } else {\n+                    Categorization::StaticItem\n+                };\n \n                 Ok(cmt_ {\n                     hir_id,\n-                    span:span,\n-                    cat:Categorization::StaticItem,\n+                    span,\n+                    cat,\n                     mutbl: if mutbl { McDeclared } else { McImmutable},\n                     ty:expr_ty,\n                     note: NoteNone\n@@ -1408,6 +1416,7 @@ impl<'tcx> cmt_<'tcx> {\n         match self.cat {\n             Categorization::Rvalue(..) |\n             Categorization::StaticItem |\n+            Categorization::ThreadLocal(..) |\n             Categorization::Local(..) |\n             Categorization::Deref(_, UnsafePtr(..)) |\n             Categorization::Deref(_, BorrowedPtr(..)) |\n@@ -1439,6 +1448,7 @@ impl<'tcx> cmt_<'tcx> {\n             }\n \n             Categorization::Rvalue(..) |\n+            Categorization::ThreadLocal(..) |\n             Categorization::Local(..) |\n             Categorization::Upvar(..) |\n             Categorization::Deref(_, UnsafePtr(..)) => { // yes, it's aliasable, but...\n@@ -1485,6 +1495,9 @@ impl<'tcx> cmt_<'tcx> {\n             Categorization::StaticItem => {\n                 \"static item\".into()\n             }\n+            Categorization::ThreadLocal(..) => {\n+                \"thread-local static item\".into()\n+            }\n             Categorization::Rvalue(..) => {\n                 \"non-place\".into()\n             }"}, {"sha": "033ed8008edc216c8e7da4020b83a4f2b655038c", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a75f7810a7118e3bb103058091c1d6414b515786/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75f7810a7118e3bb103058091c1d6414b515786/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=a75f7810a7118e3bb103058091c1d6414b515786", "patch": "@@ -377,6 +377,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                 // by-move upvars, which is local data for generators\n                 Categorization::Upvar(..) => true,\n \n+                Categorization::ThreadLocal(region) |\n                 Categorization::Rvalue(region) => {\n                     // Rvalues promoted to 'static are no longer local\n                     if let RegionKind::ReStatic = *region {"}, {"sha": "7bb5f411752fe45630d92aacbbe6af082e2b7711", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a75f7810a7118e3bb103058091c1d6414b515786/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75f7810a7118e3bb103058091c1d6414b515786/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=a75f7810a7118e3bb103058091c1d6414b515786", "patch": "@@ -177,6 +177,7 @@ fn check_and_get_illegal_move_origin<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n     match cmt.cat {\n         Categorization::Deref(_, mc::BorrowedPtr(..)) |\n         Categorization::Deref(_, mc::UnsafePtr(..)) |\n+        Categorization::ThreadLocal(..) |\n         Categorization::StaticItem => {\n             Some(cmt.clone())\n         }"}, {"sha": "6ef5d65d10dca6ade262c1fce3706ff0e13fc70a", "filename": "src/librustc_borrowck/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a75f7810a7118e3bb103058091c1d6414b515786/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75f7810a7118e3bb103058091c1d6414b515786/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=a75f7810a7118e3bb103058091c1d6414b515786", "patch": "@@ -70,6 +70,7 @@ impl<'a, 'tcx> GuaranteeLifetimeContext<'a, 'tcx> {\n \n         match cmt.cat {\n             Categorization::Rvalue(..) |\n+            Categorization::ThreadLocal(..) |\n             Categorization::Local(..) |                     // L-Local\n             Categorization::Upvar(..) |\n             Categorization::Deref(_, mc::BorrowedPtr(..)) | // L-Deref-Borrowed\n@@ -105,6 +106,7 @@ impl<'a, 'tcx> GuaranteeLifetimeContext<'a, 'tcx> {\n         //! rooting etc, and presuming `cmt` is not mutated.\n \n         match cmt.cat {\n+            Categorization::ThreadLocal(temp_scope) |\n             Categorization::Rvalue(temp_scope) => {\n                 temp_scope\n             }"}, {"sha": "e1a4473539c8c567c531caabb8b167aebddcb805", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a75f7810a7118e3bb103058091c1d6414b515786/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75f7810a7118e3bb103058091c1d6414b515786/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=a75f7810a7118e3bb103058091c1d6414b515786", "patch": "@@ -145,6 +145,8 @@ fn report_cannot_move_out_of<'a, 'tcx>(bccx: &'a BorrowckCtxt<'a, 'tcx>,\n     match move_from.cat {\n         Categorization::Deref(_, mc::BorrowedPtr(..)) |\n         Categorization::Deref(_, mc::UnsafePtr(..)) |\n+        Categorization::Deref(_, mc::Unique) |\n+        Categorization::ThreadLocal(..) |\n         Categorization::StaticItem => {\n             bccx.cannot_move_out_of(\n                 move_from.span, &move_from.descriptive_string(bccx.tcx), Origin::Ast)\n@@ -166,7 +168,10 @@ fn report_cannot_move_out_of<'a, 'tcx>(bccx: &'a BorrowckCtxt<'a, 'tcx>,\n                 }\n             }\n         }\n-        _ => {\n+\n+        Categorization::Rvalue(..) |\n+        Categorization::Local(..) |\n+        Categorization::Upvar(..) => {\n             span_bug!(move_from.span, \"this path should not cause illegal move\");\n         }\n     }"}, {"sha": "52c7ebb4beb0234906183c5f3fcedcbaafb8d358", "filename": "src/librustc_borrowck/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a75f7810a7118e3bb103058091c1d6414b515786/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75f7810a7118e3bb103058091c1d6414b515786/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=a75f7810a7118e3bb103058091c1d6414b515786", "patch": "@@ -70,6 +70,12 @@ impl<'a, 'tcx> RestrictionsContext<'a, 'tcx> {\n                 RestrictionResult::Safe\n             }\n \n+            Categorization::ThreadLocal(..) => {\n+                // Thread-locals are statics that have a scope, with\n+                // no underlying structure to provide restrictions.\n+                RestrictionResult::Safe\n+            }\n+\n             Categorization::Local(local_id) => {\n                 // R-Variable, locally declared\n                 let lp = new_lp(LpVar(local_id));"}, {"sha": "d56eb188ccd2d1694f32bd6ead3b3980c4863de4", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a75f7810a7118e3bb103058091c1d6414b515786/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75f7810a7118e3bb103058091c1d6414b515786/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=a75f7810a7118e3bb103058091c1d6414b515786", "patch": "@@ -520,6 +520,7 @@ pub fn opt_loan_path_is_field<'tcx>(cmt: &mc::cmt_<'tcx>) -> (Option<Rc<LoanPath\n \n     match cmt.cat {\n         Categorization::Rvalue(..) |\n+        Categorization::ThreadLocal(..) |\n         Categorization::StaticItem => {\n             (None, false)\n         }"}, {"sha": "ca58239df8eac3b77fa42c23574df7663483dc19", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a75f7810a7118e3bb103058091c1d6414b515786/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75f7810a7118e3bb103058091c1d6414b515786/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=a75f7810a7118e3bb103058091c1d6414b515786", "patch": "@@ -663,6 +663,7 @@ impl<'a, 'gcx, 'tcx> euv::Delegate<'tcx> for CheckCrateVisitor<'a, 'gcx> {\n         let mut cur = cmt;\n         loop {\n             match cur.cat {\n+                Categorization::ThreadLocal(..) |\n                 Categorization::Rvalue(..) => {\n                     if loan_cause == euv::MatchDiscriminant {\n                         // Ignore the dummy immutable borrow created by EUV."}, {"sha": "212ee2698e012063d3b63e0e52b284a658438836", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a75f7810a7118e3bb103058091c1d6414b515786/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75f7810a7118e3bb103058091c1d6414b515786/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=a75f7810a7118e3bb103058091c1d6414b515786", "patch": "@@ -1243,6 +1243,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n                 | Categorization::StaticItem\n                 | Categorization::Upvar(..)\n                 | Categorization::Local(..)\n+                | Categorization::ThreadLocal(..)\n                 | Categorization::Rvalue(..) => {\n                     // These are all \"base cases\" with independent lifetimes\n                     // that are not subject to inference"}, {"sha": "df994ad9e55c4d3dc78f1cad670b59292c19e6ff", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a75f7810a7118e3bb103058091c1d6414b515786/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75f7810a7118e3bb103058091c1d6414b515786/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=a75f7810a7118e3bb103058091c1d6414b515786", "patch": "@@ -401,6 +401,7 @@ impl<'a, 'gcx, 'tcx> InferBorrowKind<'a, 'gcx, 'tcx> {\n \n             Categorization::Deref(_, mc::UnsafePtr(..)) |\n             Categorization::StaticItem |\n+            Categorization::ThreadLocal(..) |\n             Categorization::Rvalue(..) |\n             Categorization::Local(_) |\n             Categorization::Upvar(..) => {\n@@ -431,6 +432,7 @@ impl<'a, 'gcx, 'tcx> InferBorrowKind<'a, 'gcx, 'tcx> {\n \n             Categorization::Deref(_, mc::UnsafePtr(..)) |\n             Categorization::StaticItem |\n+            Categorization::ThreadLocal(..) |\n             Categorization::Rvalue(..) |\n             Categorization::Local(_) |\n             Categorization::Upvar(..) => {}"}]}