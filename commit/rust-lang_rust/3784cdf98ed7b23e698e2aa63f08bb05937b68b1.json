{"sha": "3784cdf98ed7b23e698e2aa63f08bb05937b68b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ODRjZGY5OGVkN2IyM2U2OThlMmFhNjNmMDhiYjA1OTM3YjY4YjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-10T19:37:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-10T19:37:27Z"}, "message": "Auto merge of #6657 - ThibsG:FromIterParens, r=llogiq\n\nFix suggestions that need parens in `from_iter_instead_of_collect` lint\n\nFixes broken suggestions that need parens (i.e.: range)\n\nFixes: #6648\n\nchangelog: none", "tree": {"sha": "6898dfa7bc75e195bcb9045bebce6fd21af31269", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6898dfa7bc75e195bcb9045bebce6fd21af31269"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3784cdf98ed7b23e698e2aa63f08bb05937b68b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3784cdf98ed7b23e698e2aa63f08bb05937b68b1", "html_url": "https://github.com/rust-lang/rust/commit/3784cdf98ed7b23e698e2aa63f08bb05937b68b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3784cdf98ed7b23e698e2aa63f08bb05937b68b1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6d6b1b2ee0c9223f6f3da57f5218417b651b304", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6d6b1b2ee0c9223f6f3da57f5218417b651b304", "html_url": "https://github.com/rust-lang/rust/commit/a6d6b1b2ee0c9223f6f3da57f5218417b651b304"}, {"sha": "b932587c5d92bc7524ecd9d496f7081005299fa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b932587c5d92bc7524ecd9d496f7081005299fa5", "html_url": "https://github.com/rust-lang/rust/commit/b932587c5d92bc7524ecd9d496f7081005299fa5"}], "stats": {"total": 213, "additions": 201, "deletions": 12}, "files": [{"sha": "0af5d1243596d9962fdace6ebae48bc4d1ec8bfa", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3784cdf98ed7b23e698e2aa63f08bb05937b68b1/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3784cdf98ed7b23e698e2aa63f08bb05937b68b1/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=3784cdf98ed7b23e698e2aa63f08bb05937b68b1", "patch": "@@ -4142,20 +4142,54 @@ fn lint_from_iter(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<\n         if implements_trait(cx, ty, from_iter_id, &[]) && implements_trait(cx, arg_ty, iter_id, &[]);\n         then {\n             // `expr` implements `FromIterator` trait\n-            let iter_expr = snippet(cx, args[0].span, \"..\");\n+            let iter_expr = sugg::Sugg::hir(cx, &args[0], \"..\").maybe_par();\n+            let turbofish = extract_turbofish(cx, expr, ty);\n+            let sugg = format!(\"{}.collect::<{}>()\", iter_expr, turbofish);\n             span_lint_and_sugg(\n                 cx,\n                 FROM_ITER_INSTEAD_OF_COLLECT,\n                 expr.span,\n                 \"usage of `FromIterator::from_iter`\",\n                 \"use `.collect()` instead of `::from_iter()`\",\n-                format!(\"{}.collect()\", iter_expr),\n+                sugg,\n                 Applicability::MaybeIncorrect,\n             );\n         }\n     }\n }\n \n+fn extract_turbofish(cx: &LateContext<'_>, expr: &hir::Expr<'_>, ty: Ty<'tcx>) -> String {\n+    if_chain! {\n+        let call_site = expr.span.source_callsite();\n+        if let Ok(snippet) = cx.sess().source_map().span_to_snippet(call_site);\n+        let snippet_split = snippet.split(\"::\").collect::<Vec<_>>();\n+        if let Some((_, elements)) = snippet_split.split_last();\n+\n+        then {\n+            // is there a type specifier? (i.e.: like `<u32>` in `collections::BTreeSet::<u32>::`)\n+            if let Some(type_specifier) = snippet_split.iter().find(|e| e.starts_with('<') && e.ends_with('>')) {\n+                // remove the type specifier from the path elements\n+                let without_ts = elements.iter().filter_map(|e| {\n+                    if e == type_specifier { None } else { Some((*e).to_string()) }\n+                }).collect::<Vec<_>>();\n+                // join and add the type specifier at the end (i.e.: `collections::BTreeSet<u32>`)\n+                format!(\"{}{}\", without_ts.join(\"::\"), type_specifier)\n+            } else {\n+                // type is not explicitly specified so wildcards are needed\n+                // i.e.: 2 wildcards in `std::collections::BTreeMap<&i32, &char>`\n+                let ty_str = ty.to_string();\n+                let start = ty_str.find('<').unwrap_or(0);\n+                let end = ty_str.find('>').unwrap_or_else(|| ty_str.len());\n+                let nb_wildcard = ty_str[start..end].split(',').count();\n+                let wildcards = format!(\"_{}\", \", _\".repeat(nb_wildcard - 1));\n+                format!(\"{}<{}>\", elements.join(\"::\"), wildcards)\n+            }\n+        } else {\n+            ty.to_string()\n+        }\n+    }\n+}\n+\n fn fn_header_equals(expected: hir::FnHeader, actual: hir::FnHeader) -> bool {\n     expected.constness == actual.constness\n         && expected.unsafety == actual.unsafety"}, {"sha": "b5f548810e65a8c6dc3bb725ecc81bd5825fc616", "filename": "tests/ui/from_iter_instead_of_collect.fixed", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/3784cdf98ed7b23e698e2aa63f08bb05937b68b1/tests%2Fui%2Ffrom_iter_instead_of_collect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3784cdf98ed7b23e698e2aa63f08bb05937b68b1/tests%2Fui%2Ffrom_iter_instead_of_collect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_iter_instead_of_collect.fixed?ref=3784cdf98ed7b23e698e2aa63f08bb05937b68b1", "patch": "@@ -0,0 +1,48 @@\n+// run-rustfix\n+\n+#![warn(clippy::from_iter_instead_of_collect)]\n+#![allow(unused_imports)]\n+\n+use std::collections::{BTreeMap, BTreeSet, HashMap, VecDeque};\n+use std::iter::FromIterator;\n+\n+fn main() {\n+    let iter_expr = std::iter::repeat(5).take(5);\n+    let _ = iter_expr.collect::<Vec<_>>();\n+\n+    let _ = vec![5, 5, 5, 5].iter().enumerate().collect::<HashMap<usize, &i8>>();\n+\n+    Vec::from_iter(vec![42u32]);\n+\n+    let a = vec![0, 1, 2];\n+    assert_eq!(a, (0..3).collect::<Vec<_>>());\n+    assert_eq!(a, (0..3).collect::<Vec<i32>>());\n+\n+    let mut b = (0..3).collect::<VecDeque<_>>();\n+    b.push_back(4);\n+\n+    let mut b = (0..3).collect::<VecDeque<i32>>();\n+    b.push_back(4);\n+\n+    {\n+        use std::collections;\n+        let mut b = (0..3).collect::<collections::VecDeque<i32>>();\n+        b.push_back(4);\n+    }\n+\n+    let values = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'd')];\n+    let bm = values.iter().cloned().collect::<BTreeMap<_, _>>();\n+    let mut bar = bm.range(0..2).collect::<BTreeMap<_, _>>();\n+    bar.insert(&4, &'e');\n+\n+    let mut bts = (0..3).collect::<BTreeSet<_>>();\n+    bts.insert(2);\n+    {\n+        use std::collections;\n+        let _ = (0..3).collect::<collections::BTreeSet<_>>();\n+        let _ = (0..3).collect::<collections::BTreeSet<u32>>();\n+    }\n+\n+    for _i in [1, 2, 3].iter().collect::<Vec<_>>() {}\n+    for _i in [1, 2, 3].iter().collect::<Vec<&i32>>() {}\n+}"}, {"sha": "b842b5451d1c8d70f45bcbec2b33d20510b4093f", "filename": "tests/ui/from_iter_instead_of_collect.rs", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/3784cdf98ed7b23e698e2aa63f08bb05937b68b1/tests%2Fui%2Ffrom_iter_instead_of_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3784cdf98ed7b23e698e2aa63f08bb05937b68b1/tests%2Fui%2Ffrom_iter_instead_of_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_iter_instead_of_collect.rs?ref=3784cdf98ed7b23e698e2aa63f08bb05937b68b1", "patch": "@@ -1,13 +1,48 @@\n+// run-rustfix\n+\n #![warn(clippy::from_iter_instead_of_collect)]\n+#![allow(unused_imports)]\n \n-use std::collections::HashMap;\n+use std::collections::{BTreeMap, BTreeSet, HashMap, VecDeque};\n use std::iter::FromIterator;\n \n fn main() {\n     let iter_expr = std::iter::repeat(5).take(5);\n-    Vec::from_iter(iter_expr);\n+    let _ = Vec::from_iter(iter_expr);\n \n-    HashMap::<usize, &i8>::from_iter(vec![5, 5, 5, 5].iter().enumerate());\n+    let _ = HashMap::<usize, &i8>::from_iter(vec![5, 5, 5, 5].iter().enumerate());\n \n     Vec::from_iter(vec![42u32]);\n+\n+    let a = vec![0, 1, 2];\n+    assert_eq!(a, Vec::from_iter(0..3));\n+    assert_eq!(a, Vec::<i32>::from_iter(0..3));\n+\n+    let mut b = VecDeque::from_iter(0..3);\n+    b.push_back(4);\n+\n+    let mut b = VecDeque::<i32>::from_iter(0..3);\n+    b.push_back(4);\n+\n+    {\n+        use std::collections;\n+        let mut b = collections::VecDeque::<i32>::from_iter(0..3);\n+        b.push_back(4);\n+    }\n+\n+    let values = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'd')];\n+    let bm = BTreeMap::from_iter(values.iter().cloned());\n+    let mut bar = BTreeMap::from_iter(bm.range(0..2));\n+    bar.insert(&4, &'e');\n+\n+    let mut bts = BTreeSet::from_iter(0..3);\n+    bts.insert(2);\n+    {\n+        use std::collections;\n+        let _ = collections::BTreeSet::from_iter(0..3);\n+        let _ = collections::BTreeSet::<u32>::from_iter(0..3);\n+    }\n+\n+    for _i in Vec::from_iter([1, 2, 3].iter()) {}\n+    for _i in Vec::<&i32>::from_iter([1, 2, 3].iter()) {}\n }"}, {"sha": "434734c9a213df003383af8c16581dd76154560c", "filename": "tests/ui/from_iter_instead_of_collect.stderr", "status": "modified", "additions": 79, "deletions": 7, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/3784cdf98ed7b23e698e2aa63f08bb05937b68b1/tests%2Fui%2Ffrom_iter_instead_of_collect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3784cdf98ed7b23e698e2aa63f08bb05937b68b1/tests%2Fui%2Ffrom_iter_instead_of_collect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_iter_instead_of_collect.stderr?ref=3784cdf98ed7b23e698e2aa63f08bb05937b68b1", "patch": "@@ -1,16 +1,88 @@\n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:8:5\n+  --> $DIR/from_iter_instead_of_collect.rs:11:13\n    |\n-LL |     Vec::from_iter(iter_expr);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `iter_expr.collect()`\n+LL |     let _ = Vec::from_iter(iter_expr);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `iter_expr.collect::<Vec<_>>()`\n    |\n    = note: `-D clippy::from-iter-instead-of-collect` implied by `-D warnings`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:10:5\n+  --> $DIR/from_iter_instead_of_collect.rs:13:13\n    |\n-LL |     HashMap::<usize, &i8>::from_iter(vec![5, 5, 5, 5].iter().enumerate());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `vec![5, 5, 5, 5].iter().enumerate().collect()`\n+LL |     let _ = HashMap::<usize, &i8>::from_iter(vec![5, 5, 5, 5].iter().enumerate());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `vec![5, 5, 5, 5].iter().enumerate().collect::<HashMap<usize, &i8>>()`\n \n-error: aborting due to 2 previous errors\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:18:19\n+   |\n+LL |     assert_eq!(a, Vec::from_iter(0..3));\n+   |                   ^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<Vec<_>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:19:19\n+   |\n+LL |     assert_eq!(a, Vec::<i32>::from_iter(0..3));\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<Vec<i32>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:21:17\n+   |\n+LL |     let mut b = VecDeque::from_iter(0..3);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<VecDeque<_>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:24:17\n+   |\n+LL |     let mut b = VecDeque::<i32>::from_iter(0..3);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<VecDeque<i32>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:29:21\n+   |\n+LL |         let mut b = collections::VecDeque::<i32>::from_iter(0..3);\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<collections::VecDeque<i32>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:34:14\n+   |\n+LL |     let bm = BTreeMap::from_iter(values.iter().cloned());\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `values.iter().cloned().collect::<BTreeMap<_, _>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:35:19\n+   |\n+LL |     let mut bar = BTreeMap::from_iter(bm.range(0..2));\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `bm.range(0..2).collect::<BTreeMap<_, _>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:38:19\n+   |\n+LL |     let mut bts = BTreeSet::from_iter(0..3);\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<BTreeSet<_>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:42:17\n+   |\n+LL |         let _ = collections::BTreeSet::from_iter(0..3);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<collections::BTreeSet<_>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:43:17\n+   |\n+LL |         let _ = collections::BTreeSet::<u32>::from_iter(0..3);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<collections::BTreeSet<u32>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:46:15\n+   |\n+LL |     for _i in Vec::from_iter([1, 2, 3].iter()) {}\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `[1, 2, 3].iter().collect::<Vec<_>>()`\n+\n+error: usage of `FromIterator::from_iter`\n+  --> $DIR/from_iter_instead_of_collect.rs:47:15\n+   |\n+LL |     for _i in Vec::<&i32>::from_iter([1, 2, 3].iter()) {}\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `[1, 2, 3].iter().collect::<Vec<&i32>>()`\n+\n+error: aborting due to 14 previous errors\n "}]}