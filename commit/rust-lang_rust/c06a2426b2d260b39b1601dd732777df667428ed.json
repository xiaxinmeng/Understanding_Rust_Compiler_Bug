{"sha": "c06a2426b2d260b39b1601dd732777df667428ed", "node_id": "C_kwDOAAsO6NoAKGMwNmEyNDI2YjJkMjYwYjM5YjE2MDFkZDczMjc3N2RmNjY3NDI4ZWQ", "commit": {"author": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2022-11-12T03:39:37Z"}, "committer": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2023-01-09T22:07:25Z"}, "message": "migrate: `hidden_unicode_codepoints.rs`", "tree": {"sha": "666dc77ceaf7d179aaa4add88be81b07ca10ff83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/666dc77ceaf7d179aaa4add88be81b07ca10ff83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c06a2426b2d260b39b1601dd732777df667428ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c06a2426b2d260b39b1601dd732777df667428ed", "html_url": "https://github.com/rust-lang/rust/commit/c06a2426b2d260b39b1601dd732777df667428ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c06a2426b2d260b39b1601dd732777df667428ed/comments", "author": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce72f942d7a9ba564332dd8b6afba05799f1f45e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce72f942d7a9ba564332dd8b6afba05799f1f45e", "html_url": "https://github.com/rust-lang/rust/commit/ce72f942d7a9ba564332dd8b6afba05799f1f45e"}], "stats": {"total": 157, "additions": 107, "deletions": 50}, "files": [{"sha": "7c1af6bee1dd6e3835ece76b689baaeb082136a0", "filename": "compiler/rustc_lint/src/hidden_unicode_codepoints.rs", "status": "modified", "additions": 18, "deletions": 49, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/c06a2426b2d260b39b1601dd732777df667428ed/compiler%2Frustc_lint%2Fsrc%2Fhidden_unicode_codepoints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06a2426b2d260b39b1601dd732777df667428ed/compiler%2Frustc_lint%2Fsrc%2Fhidden_unicode_codepoints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fhidden_unicode_codepoints.rs?ref=c06a2426b2d260b39b1601dd732777df667428ed", "patch": "@@ -1,7 +1,12 @@\n-use crate::{EarlyContext, EarlyLintPass, LintContext};\n+use crate::{\n+    lints::{\n+        HiddenUnicodeCodepointsDiag, HiddenUnicodeCodepointsDiagLabels,\n+        HiddenUnicodeCodepointsDiagSub,\n+    },\n+    EarlyContext, EarlyLintPass, LintContext,\n+};\n use ast::util::unicode::{contains_text_flow_control_chars, TEXT_FLOW_CONTROL_CHARS};\n use rustc_ast as ast;\n-use rustc_errors::{fluent, Applicability, SuggestionStyle};\n use rustc_span::{BytePos, Span, Symbol};\n \n declare_lint! {\n@@ -60,55 +65,19 @@ impl HiddenUnicodeCodepoints {\n             })\n             .collect();\n \n-        cx.struct_span_lint(\n+        let count = spans.len();\n+        let labels = point_at_inner_spans\n+            .then_some(HiddenUnicodeCodepointsDiagLabels { spans: spans.clone() });\n+        let sub = if point_at_inner_spans && !spans.is_empty() {\n+            HiddenUnicodeCodepointsDiagSub::Escape { spans }\n+        } else {\n+            HiddenUnicodeCodepointsDiagSub::NoEscape { spans }\n+        };\n+\n+        cx.emit_spanned_lint(\n             TEXT_DIRECTION_CODEPOINT_IN_LITERAL,\n             span,\n-            fluent::lint_hidden_unicode_codepoints,\n-            |lint| {\n-                lint.set_arg(\"label\", label);\n-                lint.set_arg(\"count\", spans.len());\n-                lint.span_label(span, fluent::label);\n-                lint.note(fluent::note);\n-                if point_at_inner_spans {\n-                    for (c, span) in &spans {\n-                        lint.span_label(*span, format!(\"{:?}\", c));\n-                    }\n-                }\n-                if point_at_inner_spans && !spans.is_empty() {\n-                    lint.multipart_suggestion_with_style(\n-                        fluent::suggestion_remove,\n-                        spans.iter().map(|(_, span)| (*span, \"\".to_string())).collect(),\n-                        Applicability::MachineApplicable,\n-                        SuggestionStyle::HideCodeAlways,\n-                    );\n-                    lint.multipart_suggestion(\n-                        fluent::suggestion_escape,\n-                        spans\n-                            .into_iter()\n-                            .map(|(c, span)| {\n-                                let c = format!(\"{:?}\", c);\n-                                (span, c[1..c.len() - 1].to_string())\n-                            })\n-                            .collect(),\n-                        Applicability::MachineApplicable,\n-                    );\n-                } else {\n-                    // FIXME: in other suggestions we've reversed the inner spans of doc comments. We\n-                    // should do the same here to provide the same good suggestions as we do for\n-                    // literals above.\n-                    lint.set_arg(\n-                        \"escaped\",\n-                        spans\n-                            .into_iter()\n-                            .map(|(c, _)| format!(\"{:?}\", c))\n-                            .collect::<Vec<String>>()\n-                            .join(\", \"),\n-                    );\n-                    lint.note(fluent::suggestion_remove);\n-                    lint.note(fluent::no_suggestion_note_escape);\n-                }\n-                lint\n-            },\n+            HiddenUnicodeCodepointsDiag { label, count, span_label: span, labels, sub },\n         );\n     }\n }"}, {"sha": "4da099dcc1d6b2644b249278fcc3cd1dbee65c19", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 89, "deletions": 1, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/c06a2426b2d260b39b1601dd732777df667428ed/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c06a2426b2d260b39b1601dd732777df667428ed/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=c06a2426b2d260b39b1601dd732777df667428ed", "patch": "@@ -1,6 +1,8 @@\n use std::num::NonZeroU32;\n \n-use rustc_errors::{fluent, AddToDiagnostic, Applicability, DecorateLint, DiagnosticMessage};\n+use rustc_errors::{\n+    fluent, AddToDiagnostic, Applicability, DecorateLint, DiagnosticMessage, SuggestionStyle,\n+};\n use rustc_hir::def_id::DefId;\n use rustc_macros::{LintDiagnostic, Subdiagnostic};\n use rustc_middle::ty::{Predicate, Ty, TyCtxt};\n@@ -363,6 +365,92 @@ pub struct ForLoopsOverFalliblesSuggestion<'a> {\n     pub end_span: Span,\n }\n \n+// hidden_unicode_codepoints.rs\n+#[derive(LintDiagnostic)]\n+#[diag(lint_hidden_unicode_codepoints)]\n+#[note]\n+pub struct HiddenUnicodeCodepointsDiag<'a> {\n+    pub label: &'a str,\n+    pub count: usize,\n+    #[label]\n+    pub span_label: Span,\n+    #[subdiagnostic]\n+    pub labels: Option<HiddenUnicodeCodepointsDiagLabels>,\n+    #[subdiagnostic]\n+    pub sub: HiddenUnicodeCodepointsDiagSub,\n+}\n+\n+pub struct HiddenUnicodeCodepointsDiagLabels {\n+    pub spans: Vec<(char, Span)>,\n+}\n+\n+impl AddToDiagnostic for HiddenUnicodeCodepointsDiagLabels {\n+    fn add_to_diagnostic_with<F>(self, diag: &mut rustc_errors::Diagnostic, _: F)\n+    where\n+        F: Fn(\n+            &mut rustc_errors::Diagnostic,\n+            rustc_errors::SubdiagnosticMessage,\n+        ) -> rustc_errors::SubdiagnosticMessage,\n+    {\n+        for (c, span) in self.spans {\n+            diag.span_label(span, format!(\"{:?}\", c));\n+        }\n+    }\n+}\n+\n+pub enum HiddenUnicodeCodepointsDiagSub {\n+    Escape { spans: Vec<(char, Span)> },\n+    NoEscape { spans: Vec<(char, Span)> },\n+}\n+\n+// Used because of multiple multipart_suggestion and note\n+impl AddToDiagnostic for HiddenUnicodeCodepointsDiagSub {\n+    fn add_to_diagnostic_with<F>(self, diag: &mut rustc_errors::Diagnostic, _: F)\n+    where\n+        F: Fn(\n+            &mut rustc_errors::Diagnostic,\n+            rustc_errors::SubdiagnosticMessage,\n+        ) -> rustc_errors::SubdiagnosticMessage,\n+    {\n+        match self {\n+            HiddenUnicodeCodepointsDiagSub::Escape { spans } => {\n+                diag.multipart_suggestion_with_style(\n+                    fluent::suggestion_remove,\n+                    spans.iter().map(|(_, span)| (*span, \"\".to_string())).collect(),\n+                    Applicability::MachineApplicable,\n+                    SuggestionStyle::HideCodeAlways,\n+                );\n+                diag.multipart_suggestion(\n+                    fluent::suggestion_escape,\n+                    spans\n+                        .into_iter()\n+                        .map(|(c, span)| {\n+                            let c = format!(\"{:?}\", c);\n+                            (span, c[1..c.len() - 1].to_string())\n+                        })\n+                        .collect(),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+            HiddenUnicodeCodepointsDiagSub::NoEscape { spans } => {\n+                // FIXME: in other suggestions we've reversed the inner spans of doc comments. We\n+                // should do the same here to provide the same good suggestions as we do for\n+                // literals above.\n+                diag.set_arg(\n+                    \"escaped\",\n+                    spans\n+                        .into_iter()\n+                        .map(|(c, _)| format!(\"{:?}\", c))\n+                        .collect::<Vec<String>>()\n+                        .join(\", \"),\n+                );\n+                diag.note(fluent::suggestion_remove);\n+                diag.note(fluent::no_suggestion_note_escape);\n+            }\n+        }\n+    }\n+}\n+\n // internal.rs\n #[derive(LintDiagnostic)]\n #[diag(lint_default_hash_types)]"}]}