{"sha": "f41e711b7eb3831ca986aca4b70e627703704a8f", "node_id": "C_kwDOAAsO6NoAKGY0MWU3MTFiN2ViMzgzMWNhOTg2YWNhNGI3MGU2Mjc3MDM3MDRhOGY", "commit": {"author": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2023-04-03T13:30:34Z"}, "committer": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2023-04-04T12:12:36Z"}, "message": "replace\nLLVMRustBuildIntCast -> LLVMBuildIntCast2\nLLVMRustAddHandler -> LLVMAddHandler", "tree": {"sha": "10a8a0f77303321b11ef5de0b6a367dee7fc7917", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10a8a0f77303321b11ef5de0b6a367dee7fc7917"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f41e711b7eb3831ca986aca4b70e627703704a8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f41e711b7eb3831ca986aca4b70e627703704a8f", "html_url": "https://github.com/rust-lang/rust/commit/f41e711b7eb3831ca986aca4b70e627703704a8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f41e711b7eb3831ca986aca4b70e627703704a8f/comments", "author": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc77ae07a9ee7c3a56e73e801d1db68fc6ed49dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc77ae07a9ee7c3a56e73e801d1db68fc6ed49dc", "html_url": "https://github.com/rust-lang/rust/commit/cc77ae07a9ee7c3a56e73e801d1db68fc6ed49dc"}], "stats": {"total": 22, "additions": 6, "deletions": 16}, "files": [{"sha": "74f3a662d6029fe2ea9d48ef28fa7079c9940929", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f41e711b7eb3831ca986aca4b70e627703704a8f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f41e711b7eb3831ca986aca4b70e627703704a8f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=f41e711b7eb3831ca986aca4b70e627703704a8f", "patch": "@@ -841,7 +841,7 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n     }\n \n     fn intcast(&mut self, val: &'ll Value, dest_ty: &'ll Type, is_signed: bool) -> &'ll Value {\n-        unsafe { llvm::LLVMRustBuildIntCast(self.llbuilder, val, dest_ty, is_signed) }\n+        unsafe { llvm::LLVMBuildIntCast2(self.llbuilder, val, dest_ty, is_signed, UNNAMED) }\n     }\n \n     fn pointercast(&mut self, val: &'ll Value, dest_ty: &'ll Type) -> &'ll Value {\n@@ -1052,7 +1052,7 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         let ret = ret.expect(\"LLVM does not have support for catchswitch\");\n         for handler in handlers {\n             unsafe {\n-                llvm::LLVMRustAddHandler(ret, handler);\n+                llvm::LLVMAddHandler(ret, handler);\n             }\n         }\n         ret"}, {"sha": "836fa8779f289d719e08b493dea891ce3c78cdca", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f41e711b7eb3831ca986aca4b70e627703704a8f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f41e711b7eb3831ca986aca4b70e627703704a8f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=f41e711b7eb3831ca986aca4b70e627703704a8f", "patch": "@@ -1329,7 +1329,7 @@ extern \"C\" {\n         NumHandlers: c_uint,\n         Name: *const c_char,\n     ) -> Option<&'a Value>;\n-    pub fn LLVMRustAddHandler<'a>(CatchSwitch: &'a Value, Handler: &'a BasicBlock);\n+    pub fn LLVMAddHandler<'a>(CatchSwitch: &'a Value, Dest: &'a BasicBlock);\n     pub fn LLVMSetPersonalityFn<'a>(Func: &'a Value, Pers: &'a Value);\n \n     // Add a case to the switch instruction\n@@ -1623,11 +1623,12 @@ extern \"C\" {\n         DestTy: &'a Type,\n         Name: *const c_char,\n     ) -> &'a Value;\n-    pub fn LLVMRustBuildIntCast<'a>(\n+    pub fn LLVMBuildIntCast2<'a>(\n         B: &Builder<'a>,\n         Val: &'a Value,\n         DestTy: &'a Type,\n         IsSigned: bool,\n+        Name: *const c_char,\n     ) -> &'a Value;\n \n     // Comparisons"}, {"sha": "578bc3ea6421ca460f91b8267567981cffe70908", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f41e711b7eb3831ca986aca4b70e627703704a8f/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f41e711b7eb3831ca986aca4b70e627703704a8f/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=f41e711b7eb3831ca986aca4b70e627703704a8f", "patch": "@@ -1394,12 +1394,6 @@ extern \"C\" bool LLVMRustUnpackSMDiagnostic(LLVMSMDiagnosticRef DRef,\n   return true;\n }\n \n-extern \"C\" void LLVMRustAddHandler(LLVMValueRef CatchSwitchRef,\n-                                   LLVMBasicBlockRef Handler) {\n-  Value *CatchSwitch = unwrap(CatchSwitchRef);\n-  cast<CatchSwitchInst>(CatchSwitch)->addHandler(unwrap(Handler));\n-}\n-\n extern \"C\" OperandBundleDef *LLVMRustBuildOperandBundleDef(const char *Name,\n                                                            LLVMValueRef *Inputs,\n                                                            unsigned NumInputs) {\n@@ -1564,6 +1558,7 @@ extern \"C\" void LLVMRustSetLinkage(LLVMValueRef V,\n   LLVMSetLinkage(V, fromRust(RustLinkage));\n }\n \n+// FIXME: replace with LLVMConstInBoundsGEP2 when bumped minimal version to llvm-14\n extern \"C\" LLVMValueRef LLVMRustConstInBoundsGEP2(LLVMTypeRef Ty,\n                                                   LLVMValueRef ConstantVal,\n                                                   LLVMValueRef *ConstantIndices,\n@@ -1641,12 +1636,6 @@ extern \"C\" LLVMRustVisibility LLVMRustGetVisibility(LLVMValueRef V) {\n   return toRust(LLVMGetVisibility(V));\n }\n \n-// Oh hey, a binding that makes sense for once? (because LLVM\u2019s own do not)\n-extern \"C\" LLVMValueRef LLVMRustBuildIntCast(LLVMBuilderRef B, LLVMValueRef Val,\n-                                             LLVMTypeRef DestTy, bool isSigned) {\n-  return wrap(unwrap(B)->CreateIntCast(unwrap(Val), unwrap(DestTy), isSigned, \"\"));\n-}\n-\n extern \"C\" void LLVMRustSetVisibility(LLVMValueRef V,\n                                       LLVMRustVisibility RustVisibility) {\n   LLVMSetVisibility(V, fromRust(RustVisibility));"}]}