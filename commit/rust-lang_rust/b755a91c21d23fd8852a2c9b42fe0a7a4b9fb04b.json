{"sha": "b755a91c21d23fd8852a2c9b42fe0a7a4b9fb04b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NTVhOTFjMjFkMjNmZDg4NTJhMmM5YjQyZmUwYTdhNGI5ZmIwNGI=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-02-10T22:54:14Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-02-10T22:54:14Z"}, "message": "Do drop glue for closures.", "tree": {"sha": "b30b2eab6187520191660dfe6efc685da86aed02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b30b2eab6187520191660dfe6efc685da86aed02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b755a91c21d23fd8852a2c9b42fe0a7a4b9fb04b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b755a91c21d23fd8852a2c9b42fe0a7a4b9fb04b", "html_url": "https://github.com/rust-lang/rust/commit/b755a91c21d23fd8852a2c9b42fe0a7a4b9fb04b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b755a91c21d23fd8852a2c9b42fe0a7a4b9fb04b/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f73f001ce58026633c2399daf75bc22ac7b698cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f73f001ce58026633c2399daf75bc22ac7b698cc", "html_url": "https://github.com/rust-lang/rust/commit/f73f001ce58026633c2399daf75bc22ac7b698cc"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "c8875398918f462d527acd8452919248ec70c33a", "filename": "src/terminator/drop.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b755a91c21d23fd8852a2c9b42fe0a7a4b9fb04b/src%2Fterminator%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b755a91c21d23fd8852a2c9b42fe0a7a4b9fb04b/src%2Fterminator%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fdrop.rs?ref=b755a91c21d23fd8852a2c9b42fe0a7a4b9fb04b", "patch": "@@ -51,7 +51,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             debug!(\"no need to drop {:?}\", ty);\n             return Ok(());\n         }\n-        trace!(\"-need to drop {:?} at {:?}\", ty, lval);\n+        trace!(\"need to drop {:?} at {:?}\", ty, lval);\n \n         match ty.sty {\n             // special case `Box` to deallocate the inner allocation\n@@ -89,7 +89,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 // is the same as\n                 // fn drop(&mut self) if Self is Box<T>\n                 drop.push((box_free_fn, val, substs));\n-            },\n+            }\n \n             ty::TyAdt(adt_def, substs) => {\n                 // FIXME: some structs are represented as ByValPair\n@@ -165,8 +165,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     ty,\n                     drop,\n                 )?;\n-            },\n-            ty::TyTuple(fields, _) => self.drop_fields(fields.into_iter().cloned(), lval, ty, drop)?,\n+            }\n+\n+            ty::TyTuple(fields, _) =>\n+                self.drop_fields(fields.into_iter().cloned(), lval, ty, drop)?,\n+\n             ty::TyDynamic(..) => {\n                 let (ptr, vtable) = match lval {\n                     Lvalue::Ptr { ptr, extra: LvalueExtra::Vtable(vtable) } => (ptr, vtable),\n@@ -181,7 +184,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     // just a sanity check\n                     assert_eq!(drop_fn.offset, 0);\n                 }\n-            },\n+            }\n+\n             ty::TySlice(elem_ty) => {\n                 let (ptr, len) = match lval {\n                     Lvalue::Ptr { ptr, extra: LvalueExtra::Length(len) } => (ptr, len),\n@@ -193,7 +197,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 for i in 0..len {\n                     self.drop(Lvalue::from_ptr(ptr.offset(i * size)), elem_ty, drop)?;\n                 }\n-            },\n+            }\n+\n             ty::TyArray(elem_ty, len) => {\n                 let lval = self.force_allocation(lval)?;\n                 let (ptr, extra) = match lval {\n@@ -206,10 +211,14 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 for i in 0..(len as u64) {\n                     self.drop(Lvalue::Ptr { ptr: ptr.offset(i * size), extra }, elem_ty, drop)?;\n                 }\n-            },\n-            // FIXME: what about TyClosure and TyAnon?\n-            // other types do not need to process drop\n-            _ => {},\n+            }\n+\n+            ty::TyClosure(def_id, substs) => {\n+                let fields = substs.upvar_tys(def_id, self.tcx);\n+                self.drop_fields(fields, lval, ty, drop)?;\n+            }\n+\n+            _ => bug!(),\n         }\n \n         Ok(())"}]}