{"sha": "72d5675fef11c85b481b0b139c59fb27e1d327b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZDU2NzVmZWYxMWM4NWI0ODFiMGIxMzljNTlmYjI3ZTFkMzI3YjY=", "commit": {"author": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2015-12-03T23:48:59Z"}, "committer": {"name": "mitaa", "email": "mitaa.ceb@gmail.com", "date": "2015-12-03T23:48:59Z"}, "message": "Address review comments", "tree": {"sha": "080ee614adf98ba67e9b238bf5b938a0982fdb7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/080ee614adf98ba67e9b238bf5b938a0982fdb7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72d5675fef11c85b481b0b139c59fb27e1d327b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72d5675fef11c85b481b0b139c59fb27e1d327b6", "html_url": "https://github.com/rust-lang/rust/commit/72d5675fef11c85b481b0b139c59fb27e1d327b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72d5675fef11c85b481b0b139c59fb27e1d327b6/comments", "author": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mitaa", "id": 6785936, "node_id": "MDQ6VXNlcjY3ODU5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6785936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitaa", "html_url": "https://github.com/mitaa", "followers_url": "https://api.github.com/users/mitaa/followers", "following_url": "https://api.github.com/users/mitaa/following{/other_user}", "gists_url": "https://api.github.com/users/mitaa/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitaa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitaa/subscriptions", "organizations_url": "https://api.github.com/users/mitaa/orgs", "repos_url": "https://api.github.com/users/mitaa/repos", "events_url": "https://api.github.com/users/mitaa/events{/privacy}", "received_events_url": "https://api.github.com/users/mitaa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c01cf485f6ebe38cbb638800684c88423acaadb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c01cf485f6ebe38cbb638800684c88423acaadb", "html_url": "https://github.com/rust-lang/rust/commit/5c01cf485f6ebe38cbb638800684c88423acaadb"}], "stats": {"total": 92, "additions": 43, "deletions": 49}, "files": [{"sha": "a6d6802c0e10e19e02204b8ab6da853c949eb1f6", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/72d5675fef11c85b481b0b139c59fb27e1d327b6/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d5675fef11c85b481b0b139c59fb27e1d327b6/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=72d5675fef11c85b481b0b139c59fb27e1d327b6", "patch": "@@ -35,7 +35,7 @@ use std::fmt;\n use std::slice;\n use std::str;\n \n-use html::render::with_unique_id;\n+use html::render::derive_id;\n use html::toc::TocBuilder;\n use html::highlight;\n use html::escape::Escape;\n@@ -307,17 +307,17 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n         let opaque = unsafe { (*data).opaque as *mut hoedown_html_renderer_state };\n         let opaque = unsafe { &mut *((*opaque).opaque as *mut MyOpaque) };\n \n-        let text = with_unique_id(id, |id| {\n-            let sec = opaque.toc_builder.as_mut().map_or(\"\".to_owned(), |builder| {\n-                format!(\"{} \", builder.push(level as u32, s.clone(), id.to_owned()))\n-            });\n+        let id = derive_id(id);\n \n-            // Render the HTML\n-            format!(\"<h{lvl} id='{id}' class='section-header'>\\\n-                    <a href='#{id}'>{sec}{}</a></h{lvl}>\",\n-                    s, lvl = level, id = id, sec = sec)\n+        let sec = opaque.toc_builder.as_mut().map_or(\"\".to_owned(), |builder| {\n+            format!(\"{} \", builder.push(level as u32, s.clone(), id.clone()))\n         });\n \n+        // Render the HTML\n+        let text = format!(\"<h{lvl} id='{id}' class='section-header'>\\\n+                           <a href='#{id}'>{sec}{}</a></h{lvl}>\",\n+                           s, lvl = level, id = id, sec = sec);\n+\n         let text = CString::new(text).unwrap();\n         unsafe { hoedown_buffer_puts(ob, text.as_ptr()) }\n     }"}, {"sha": "aac2a52984a14304cb2f6752ca8867ca5eaebd1f", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 34, "deletions": 40, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/72d5675fef11c85b481b0b139c59fb27e1d327b6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72d5675fef11c85b481b0b139c59fb27e1d327b6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=72d5675fef11c85b481b0b139c59fb27e1d327b6", "patch": "@@ -372,23 +372,19 @@ pub fn reset_ids() {\n     USED_ID_MAP.with(|s| *s.borrow_mut() = init_ids());\n }\n \n-pub fn with_unique_id<T, F: FnOnce(&str) -> T>(candidate: String, f: F) -> T {\n+pub fn derive_id(candidate: String) -> String {\n     USED_ID_MAP.with(|map| {\n-        let (id, ret) = match map.borrow_mut().get_mut(&candidate) {\n-            None => {\n-                let ret = f(&candidate);\n-                (candidate, ret)\n-            },\n+        let id = match map.borrow_mut().get_mut(&candidate) {\n+            None => candidate,\n             Some(a) => {\n                 let id = format!(\"{}-{}\", candidate, *a);\n-                let ret = f(&id);\n                 *a += 1;\n-                (id, ret)\n+                id\n             }\n         };\n \n-        map.borrow_mut().insert(id, 1);\n-        ret\n+        map.borrow_mut().insert(id.clone(), 1);\n+        id\n     })\n }\n \n@@ -1745,10 +1741,9 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n                 ItemType::AssociatedType  => (\"associated-types\", \"Associated Types\"),\n                 ItemType::AssociatedConst => (\"associated-consts\", \"Associated Constants\"),\n             };\n-            try!(with_unique_id(short.to_owned(), |id|\n-                write!(w, \"<h2 id='{id}' class='section-header'>\\\n-                          <a href=\\\"#{id}\\\">{name}</a></h2>\\n<table>\",\n-                          id = id, name = name)));\n+            try!(write!(w, \"<h2 id='{id}' class='section-header'>\\\n+                           <a href=\\\"#{id}\\\">{name}</a></h2>\\n<table>\",\n+                           id = derive_id(short.to_owned()), name = name));\n         }\n \n         match myitem.inner {\n@@ -1970,10 +1965,10 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     fn trait_item(w: &mut fmt::Formatter, cx: &Context, m: &clean::Item)\n                   -> fmt::Result {\n         let name = m.name.as_ref().unwrap();\n-        try!(with_unique_id(format!(\"{}.{}\", shortty(m), name), |id|\n-                write!(w, \"<h3 id='{id}' class='method stab {stab}'><code>\",\n+        let id = derive_id(format!(\"{}.{}\", shortty(m), name));\n+        try!(write!(w, \"<h3 id='{id}' class='method stab {stab}'><code>\",\n                        id = id,\n-                       stab = m.stability_class())));\n+                       stab = m.stability_class()));\n         try!(render_assoc_item(w, m, AssocItemLink::Anchor));\n         try!(write!(w, \"</code></h3>\"));\n         try!(document(w, cx, m));\n@@ -2162,12 +2157,11 @@ fn item_struct(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n         if fields.peek().is_some() {\n             try!(write!(w, \"<h2 class='fields'>Fields</h2>\\n<table>\"));\n             for field in fields {\n-                let name = field.name.as_ref().unwrap();\n-                try!(with_unique_id(format!(\"structfield.{}\", name), |id|\n-                    write!(w, \"<tr class='stab {}'><td id='{}'><code>{}</code></td><td>\",\n-                              field.stability_class(),\n-                              id,\n-                              name)));\n+                try!(write!(w, \"<tr class='stab {stab}'>\n+                                  <td id='structfield.{name}'>\\\n+                                    <code>{name}</code></td><td>\",\n+                            stab = field.stability_class(),\n+                            name = field.name.as_ref().unwrap()));\n                 try!(document(w, cx, field));\n                 try!(write!(w, \"</td></tr>\"));\n             }\n@@ -2234,9 +2228,8 @@ fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n     if !e.variants.is_empty() {\n         try!(write!(w, \"<h2 class='variants'>Variants</h2>\\n<table>\"));\n         for variant in &e.variants {\n-            let name = variant.name.as_ref().unwrap();\n-            try!(with_unique_id(format!(\"variant.{}\", name), |id|\n-                    write!(w, \"<tr><td id='{}'><code>{}</code></td><td>\", id, name)));\n+            try!(write!(w, \"<tr><td id='variant.{name}'><code>{name}</code></td><td>\",\n+                          name = variant.name.as_ref().unwrap()));\n             try!(document(w, cx, variant));\n             match variant.inner {\n                 clean::VariantItem(ref var) => {\n@@ -2254,10 +2247,11 @@ fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                             try!(write!(w, \"<h3 class='fields'>Fields</h3>\\n\n                                               <table>\"));\n                             for field in fields {\n-                                let v = variant.name.as_ref().unwrap();\n-                                let f = field.name.as_ref().unwrap();\n-                                try!(with_unique_id(format!(\"variant.{}.field.{}\", v, f), |id|\n-                                    write!(w, \"<tr><td id='{}'><code>{}</code></td><td>\", id, f)));\n+                                try!(write!(w, \"<tr><td \\\n+                                                  id='variant.{v}.field.{f}'>\\\n+                                                  <code>{f}</code></td><td>\",\n+                                              v = variant.name.as_ref().unwrap(),\n+                                              f = field.name.as_ref().unwrap()));\n                                 try!(document(w, cx, field));\n                                 try!(write!(w, \"</td></tr>\"));\n                             }\n@@ -2474,33 +2468,33 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n             clean::MethodItem(..) | clean::TyMethodItem(..) => {\n                 // Only render when the method is not static or we allow static methods\n                 if !is_static_method(item) || render_static {\n-                    try!(with_unique_id(format!(\"method.{}\", name), |id|\n-                        write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty(item))));\n+                    let id = derive_id(format!(\"method.{}\", name));\n+                    try!(write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty(item)));\n                 try!(render_assoc_item(w, item, link));\n                     try!(write!(w, \"</code></h4>\\n\"));\n                 }\n             }\n             clean::TypedefItem(ref tydef, _) => {\n-                try!(with_unique_id(format!(\"assoc_type.{}\", name), |id|\n-                    write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty(item))));\n+                let id = derive_id(format!(\"assoc_type.{}\", name));\n+                try!(write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty(item)));\n                 try!(write!(w, \"type {} = {}\", name, tydef.type_));\n                 try!(write!(w, \"</code></h4>\\n\"));\n             }\n             clean::AssociatedConstItem(ref ty, ref default) => {\n-                try!(with_unique_id(format!(\"assoc_const.{}\", name), |id|\n-                    write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty(item))));\n+                let id = derive_id(format!(\"assoc_const.{}\", name));\n+                try!(write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty(item)));\n                 try!(assoc_const(w, item, ty, default.as_ref()));\n                 try!(write!(w, \"</code></h4>\\n\"));\n             }\n             clean::ConstantItem(ref c) => {\n-                try!(with_unique_id(format!(\"assoc_const.{}\", name), |id|\n-                    write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty(item))));\n+                let id = derive_id(format!(\"assoc_const.{}\", name));\n+                try!(write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty(item)));\n                 try!(assoc_const(w, item, &c.type_, Some(&c.expr)));\n                 try!(write!(w, \"</code></h4>\\n\"));\n             }\n             clean::AssociatedTypeItem(ref bounds, ref default) => {\n-                try!(with_unique_id(format!(\"assoc_type.{}\", name), |id|\n-                    write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty(item))));\n+                let id = derive_id(format!(\"assoc_type.{}\", name));\n+                try!(write!(w, \"<h4 id='{}' class='{}'><code>\", id, shortty(item)));\n                 try!(assoc_type(w, item, bounds, default));\n                 try!(write!(w, \"</code></h4>\\n\"));\n             }"}]}