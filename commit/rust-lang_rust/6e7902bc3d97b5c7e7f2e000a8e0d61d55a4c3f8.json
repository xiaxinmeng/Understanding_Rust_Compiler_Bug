{"sha": "6e7902bc3d97b5c7e7f2e000a8e0d61d55a4c3f8", "node_id": "C_kwDOAAsO6NoAKDZlNzkwMmJjM2Q5N2I1YzdlN2YyZTAwMGE4ZTBkNjFkNTVhNGMzZjg", "commit": {"author": {"name": "David Koloski", "email": "dkoloski@google.com", "date": "2023-02-22T17:40:22Z"}, "committer": {"name": "David Koloski", "email": "dkoloski@google.com", "date": "2023-02-24T20:39:58Z"}, "message": "Update `fuchsia-test-runner.py` and docs\n\nThis updates the test runner to the latest version of the SDK and fixes\ndebugging support for Rust source code.", "tree": {"sha": "e6156654688ced86e575bf2c82a2314d958d57b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6156654688ced86e575bf2c82a2314d958d57b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e7902bc3d97b5c7e7f2e000a8e0d61d55a4c3f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e7902bc3d97b5c7e7f2e000a8e0d61d55a4c3f8", "html_url": "https://github.com/rust-lang/rust/commit/6e7902bc3d97b5c7e7f2e000a8e0d61d55a4c3f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e7902bc3d97b5c7e7f2e000a8e0d61d55a4c3f8/comments", "author": null, "committer": null, "parents": [{"sha": "f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3", "html_url": "https://github.com/rust-lang/rust/commit/f4f5fc3e5cc70b7a43bf7b518c455f3d9bada9e3"}], "stats": {"total": 176, "additions": 149, "deletions": 27}, "files": [{"sha": "c3d532c4b27a365808b42687e4d7f6c92f1bf6b7", "filename": "src/ci/docker/scripts/fuchsia-test-runner.py", "status": "modified", "additions": 69, "deletions": 13, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/6e7902bc3d97b5c7e7f2e000a8e0d61d55a4c3f8/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py", "raw_url": "https://github.com/rust-lang/rust/raw/6e7902bc3d97b5c7e7f2e000a8e0d61d55a4c3f8/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Ffuchsia-test-runner.py?ref=6e7902bc3d97b5c7e7f2e000a8e0d61d55a4c3f8", "patch": "@@ -507,9 +507,8 @@ def start(self):\n     bin/{exe_name}={bin_path}\n     lib/{libstd_name}={rust_dir}/lib/rustlib/{rustlib_dir}/lib/{libstd_name}\n     lib/{libtest_name}={rust_dir}/lib/rustlib/{rustlib_dir}/lib/{libtest_name}\n-    lib/ld.so.1={sdk_dir}/arch/{target_arch}/sysroot/lib/libc.so\n-    lib/libzircon.so={sdk_dir}/arch/{target_arch}/sysroot/lib/libzircon.so\n-    lib/libfdio.so={sdk_dir}/arch/{target_arch}/lib/libfdio.so\n+    lib/ld.so.1={sdk_dir}/arch/{target_arch}/sysroot/dist/lib/ld.so.1\n+    lib/libfdio.so={sdk_dir}/arch/{target_arch}/dist/libfdio.so\n     \"\"\"\n \n     TEST_ENV_VARS: ClassVar[List[str]] = [\n@@ -844,23 +843,34 @@ def debug(self, args):\n             \"--\",\n             \"--build-id-dir\",\n             os.path.join(self.sdk_dir, \".build-id\"),\n-            \"--build-id-dir\",\n-            os.path.join(self.libs_dir(), \".build-id\"),\n         ]\n \n-        # Add rust source if it's available\n-        if args.rust_src is not None:\n+        libs_build_id_path = os.path.join(self.libs_dir(), \".build-id\")\n+        if os.path.exists(libs_build_id_path):\n+            # Add .build-id symbols if installed libs have been stripped into a\n+            # .build-id directory\n             command += [\n-                \"--build-dir\",\n-                args.rust_src,\n+                \"--build-id-dir\",\n+                libs_build_id_path,\n+            ]\n+        else:\n+            # If no .build-id directory is detected, then assume that the shared\n+            # libs contain their debug symbols\n+            command += [\n+                f\"--symbol-path={self.rust_dir}/lib/rustlib/{self.target}/lib\",\n             ]\n \n+        # Add rust source if it's available\n+        rust_src_map = None\n+        if args.rust_src is not None:\n+            # This matches the remapped prefix used by compiletest. There's no\n+            # clear way that we can determine this, so it's hard coded.\n+            rust_src_map = f\"/rustc/FAKE_PREFIX={args.rust_src}\"\n+\n         # Add fuchsia source if it's available\n+        fuchsia_src_map = None\n         if args.fuchsia_src is not None:\n-            command += [\n-                \"--build-dir\",\n-                os.path.join(args.fuchsia_src, \"out\", \"default\"),\n-            ]\n+            fuchsia_src_map = f\"./../..={args.fuchsia_src}\"\n \n         # Load debug symbols for the test binary and automatically attach\n         if args.test is not None:\n@@ -883,7 +893,28 @@ def debug(self, args):\n                 test_name,\n             )\n \n+            # The fake-test-src-base directory maps to the suite directory\n+            # e.g. tests/ui/foo.rs has a path of rust/fake-test-src-base/foo.rs\n+            fake_test_src_base = os.path.join(\n+                args.rust_src,\n+                \"fake-test-src-base\",\n+            )\n+            real_test_src_base = os.path.join(\n+                args.rust_src,\n+                \"tests\",\n+                args.test.split(os.path.sep)[0],\n+            )\n+            test_src_map = f\"{fake_test_src_base}={real_test_src_base}\"\n+\n             with open(self.zxdb_script_path(), mode=\"w\", encoding=\"utf-8\") as f:\n+                print(f\"set source-map += {test_src_map}\", file=f)\n+\n+                if rust_src_map is not None:\n+                    print(f\"set source-map += {rust_src_map}\", file=f)\n+\n+                if fuchsia_src_map is not None:\n+                    print(f\"set source-map += {fuchsia_src_map}\", file=f)\n+\n                 print(f\"attach {test_name[:31]}\", file=f)\n \n             command += [\n@@ -900,6 +931,20 @@ def debug(self, args):\n         # Connect to the running emulator with zxdb\n         subprocess.run(command, env=self.ffx_cmd_env(), check=False)\n \n+    def syslog(self, args):\n+        subprocess.run(\n+            [\n+                self.tool_path(\"ffx\"),\n+                \"--config\",\n+                self.ffx_user_config_path(),\n+                \"log\",\n+                \"--since\",\n+                \"now\",\n+            ],\n+            env=self.ffx_cmd_env(),\n+            check=False,\n+        )\n+\n \n def start(args):\n     test_env = TestEnvironment.from_args(args)\n@@ -933,6 +978,12 @@ def debug(args):\n     return 0\n \n \n+def syslog(args):\n+    test_env = TestEnvironment.read_from_file()\n+    test_env.syslog(args)\n+    return 0\n+\n+\n def main():\n     parser = argparse.ArgumentParser()\n \n@@ -1028,6 +1079,11 @@ def print_help(args):\n     )\n     debug_parser.set_defaults(func=debug)\n \n+    syslog_parser = subparsers.add_parser(\n+        \"syslog\", help=\"prints the device syslog\"\n+    )\n+    syslog_parser.set_defaults(func=syslog)\n+\n     args = parser.parse_args()\n     return args.func(args)\n "}, {"sha": "63dde2aaedd6424271c81de1f142808cc5953fda", "filename": "src/doc/rustc/src/platform-support/fuchsia.md", "status": "modified", "additions": 80, "deletions": 14, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/6e7902bc3d97b5c7e7f2e000a8e0d61d55a4c3f8/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "raw_url": "https://github.com/rust-lang/rust/raw/6e7902bc3d97b5c7e7f2e000a8e0d61d55a4c3f8/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md?ref=6e7902bc3d97b5c7e7f2e000a8e0d61d55a4c3f8", "patch": "@@ -687,7 +687,9 @@ Rust compiler locally. See \"[Targeting Fuchsia with a compiler built from source\n for the steps to build locally.\n \n You'll also need to download a copy of the Fuchsia SDK. The current minimum\n-supported SDK version is [9.20220726.1.1](https://chrome-infra-packages.appspot.com/p/fuchsia/sdk/core/linux-amd64/+/version:9.20220726.1.1).\n+supported SDK version is [10.20221207.2.89][minimum_supported_sdk_version].\n+\n+[minimum_supported_sdk_version]: https://chrome-infra-packages.appspot.com/p/fuchsia/sdk/core/linux-amd64/+/version:10.20221207.2.89\n \n Fuchsia's test runner interacts with the Fuchsia emulator and is located at\n `src/ci/docker/scripts/fuchsia-test-runner.py`. We can use it to start our\n@@ -697,7 +699,7 @@ test environment with:\n src/ci/docker/scripts/fuchsia-test-runner.py start\n     --rust ${RUST_SRC_PATH}/install\n     --sdk ${SDK_PATH}\n-    --target-triple {x86_64-unknown-fuchsia|aarch64-unknown-fuchsia}\n+    --target {x86_64-unknown-fuchsia|aarch64-unknown-fuchsia}\n ```\n \n Where `${RUST_SRC_PATH}/install` is the `prefix` set in `config.toml` and\n@@ -717,17 +719,11 @@ run the full `tests/ui` test suite:\n     --target x86_64-unknown-fuchsia                                           \\\n     --run=always --jobs 1                                                     \\\n     --test-args --target-rustcflags                                           \\\n-    --test-args -L                                                            \\\n-    --test-args --target-rustcflags                                           \\\n-    --test-args ${SDK_PATH}/arch/{x64|arm64}/sysroot/lib                      \\\n-    --test-args --target-rustcflags                                           \\\n-    --test-args -L                                                            \\\n+    --test-args -Lnative=${SDK_PATH}/arch/{x64|arm64}/sysroot/lib             \\\n     --test-args --target-rustcflags                                           \\\n-    --test-args ${SDK_PATH}/arch/{x64|arm64}/lib                              \\\n+    --test-args -Lnative=${SDK_PATH}/arch/{x64|arm64}/lib                     \\\n     --test-args --target-rustcflags                                           \\\n-    --test-args -Cpanic=abort                                                 \\\n-    --test-args --target-rustcflags                                           \\\n-    --test-args -Zpanic_abort_tests                                           \\\n+    --test-args -Clink-arg=--undefined-version                                \\\n     --test-args --remote-test-client                                          \\\n     --test-args src/ci/docker/scripts/fuchsia-test-runner.py                  \\\n )\n@@ -736,7 +732,18 @@ run the full `tests/ui` test suite:\n *Note: The test suite cannot be run in parallel at the moment, so `x.py`\n must be run with `--jobs 1` to ensure only one test runs at a time.*\n \n-When finished, the test runner can be used to stop the test environment:\n+By default, `x.py` compiles test binaries with `panic=unwind`. If you built your\n+Rust toolchain with `-Cpanic=abort`, you need to tell `x.py` to compile test\n+binaries with `panic=abort` as well:\n+\n+```sh\n+    --test-args --target-rustcflags                                           \\\n+    --test-args -Cpanic=abort                                                 \\\n+    --test-args --target-rustcflags                                           \\\n+    --test-args -Zpanic_abort_tests                                           \\\n+```\n+\n+When finished testing, the test runner can be used to stop the test environment:\n \n ```sh\n src/ci/docker/scripts/fuchsia-test-runner.py stop\n@@ -764,8 +771,9 @@ ${SDK_PATH}/tools/${ARCH}/ffx debug connect -- \\\n * `--symbol-path` gets required symbol paths, which are\n necessary for stepping through your program.\n \n-The \"[displaying source code in `zxdb`](#displaying-source-code-in-zxdb)\" section describes how you can\n-display Rust and/or Fuchsia source code in your debugging session.\n+The \"[displaying source code in `zxdb`](#displaying-source-code-in-zxdb)\"\n+section describes how you can display Rust and/or Fuchsia source code in your\n+debugging session.\n \n ### Using `zxdb`\n \n@@ -866,6 +874,64 @@ ${SDK_PATH}/tools/${ARCH}/ffx debug connect -- \\\n  Linking to a Fuchsia checkout can help with debugging Fuchsia libraries,\n  such as [fdio].\n \n+### Debugging the compiler test suite\n+\n+Debugging the compiler test suite requires some special configuration:\n+\n+First, we have to properly configure zxdb so it will be able to find debug\n+symbols and source information for our test. The test runner can do this for us\n+with:\n+\n+```sh\n+src/ci/docker/scripts/fuchsia-test-runner.py debug                            \\\n+    --rust-src ${RUST_SRC_PATH}                                               \\\n+    --fuchsia-src ${FUCHSIA_SRC_PATH}                                         \\\n+    --test ${TEST}\n+```\n+\n+where `${TEST}` is relative to Rust's `tests` directory (e.g. `ui/abi/...`).\n+\n+This will start a zxdb session that is properly configured for the specific test\n+being run. All three arguments are optional, so you can omit `--fuchsia-src` if\n+you don't have it downloaded. Now is a good time to set any desired breakpoints,\n+like `b main`.\n+\n+Next, we have to tell `x.py` not to optimize or strip debug symbols from our\n+test suite binaries. We can do this by passing some new arguments to `rustc`\n+through our `x.py` invocation. The full invocation is:\n+\n+```sh\n+( \\\n+    source config-env.sh &&                                                   \\\n+    ./x.py                                                                    \\\n+    --config config.toml                                                      \\\n+    --stage=2                                                                 \\\n+    test tests/${TEST}                                                        \\\n+    --target x86_64-unknown-fuchsia                                           \\\n+    --run=always --jobs 1                                                     \\\n+    --test-args --target-rustcflags                                           \\\n+    --test-args -Lnative=${SDK_PATH}/arch/{x64|arm64}/sysroot/lib             \\\n+    --test-args --target-rustcflags                                           \\\n+    --test-args -Lnative=${SDK_PATH}/arch/{x64|arm64}/lib                     \\\n+    --test-args --target-rustcflags                                           \\\n+    --test-args -Clink-arg=--undefined-version                                \\\n+    --test-args --target-rustcflags                                           \\\n+    --test-args -Cdebuginfo=2                                                 \\\n+    --test-args --target-rustcflags                                           \\\n+    --test-args -Copt-level=0                                                 \\\n+    --test-args --target-rustcflags                                           \\\n+    --test-args -Cstrip=none                                                  \\\n+    --test-args --remote-test-client                                          \\\n+    --test-args src/ci/docker/scripts/fuchsia-test-runner.py                  \\\n+)\n+```\n+\n+*If you built your Rust toolchain with `panic=abort`, make sure to include the\n+previous flags so your test binaries are also compiled with `panic=abort`.*\n+\n+Upon running this command, the test suite binary will be run and zxdb will\n+attach and load any relevant debug symbols.\n+\n [Fuchsia team]: https://team-api.infra.rust-lang.org/v1/teams/fuchsia.json\n [Fuchsia]: https://fuchsia.dev/\n [source tree]: https://fuchsia.dev/fuchsia-src/get-started/learn/build"}]}