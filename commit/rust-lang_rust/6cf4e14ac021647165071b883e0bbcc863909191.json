{"sha": "6cf4e14ac021647165071b883e0bbcc863909191", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjZjRlMTRhYzAyMTY0NzE2NTA3MWI4ODNlMGJiY2M4NjM5MDkxOTE=", "commit": {"author": {"name": "ashtneoi", "email": "ashtneoi@gmail.com", "date": "2018-08-13T21:51:27Z"}, "committer": {"name": "ashtneoi", "email": "ashtneoi@gmail.com", "date": "2018-08-15T22:14:21Z"}, "message": "Coalesce var-is-not-Copy notes per move", "tree": {"sha": "c18aaa7724607ccc36d29b906f4a6327f2f82b3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c18aaa7724607ccc36d29b906f4a6327f2f82b3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cf4e14ac021647165071b883e0bbcc863909191", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cf4e14ac021647165071b883e0bbcc863909191", "html_url": "https://github.com/rust-lang/rust/commit/6cf4e14ac021647165071b883e0bbcc863909191", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cf4e14ac021647165071b883e0bbcc863909191/comments", "author": {"login": "ashtneoi", "id": 33603534, "node_id": "MDQ6VXNlcjMzNjAzNTM0", "avatar_url": "https://avatars.githubusercontent.com/u/33603534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashtneoi", "html_url": "https://github.com/ashtneoi", "followers_url": "https://api.github.com/users/ashtneoi/followers", "following_url": "https://api.github.com/users/ashtneoi/following{/other_user}", "gists_url": "https://api.github.com/users/ashtneoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashtneoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashtneoi/subscriptions", "organizations_url": "https://api.github.com/users/ashtneoi/orgs", "repos_url": "https://api.github.com/users/ashtneoi/repos", "events_url": "https://api.github.com/users/ashtneoi/events{/privacy}", "received_events_url": "https://api.github.com/users/ashtneoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ashtneoi", "id": 33603534, "node_id": "MDQ6VXNlcjMzNjAzNTM0", "avatar_url": "https://avatars.githubusercontent.com/u/33603534?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashtneoi", "html_url": "https://github.com/ashtneoi", "followers_url": "https://api.github.com/users/ashtneoi/followers", "following_url": "https://api.github.com/users/ashtneoi/following{/other_user}", "gists_url": "https://api.github.com/users/ashtneoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashtneoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashtneoi/subscriptions", "organizations_url": "https://api.github.com/users/ashtneoi/orgs", "repos_url": "https://api.github.com/users/ashtneoi/repos", "events_url": "https://api.github.com/users/ashtneoi/events{/privacy}", "received_events_url": "https://api.github.com/users/ashtneoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20ae08bda6462780b80cd30e9ab3ade836338685", "url": "https://api.github.com/repos/rust-lang/rust/commits/20ae08bda6462780b80cd30e9ab3ade836338685", "html_url": "https://github.com/rust-lang/rust/commit/20ae08bda6462780b80cd30e9ab3ade836338685"}], "stats": {"total": 210, "additions": 60, "deletions": 150}, "files": [{"sha": "44459b977242ede6ba96edf8edff7676900317aa", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6cf4e14ac021647165071b883e0bbcc863909191/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cf4e14ac021647165071b883e0bbcc863909191/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=6cf4e14ac021647165071b883e0bbcc863909191", "patch": "@@ -380,8 +380,6 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    // FIXME: Move the loop outside this method and add_move_error_labels()\n-    // so they can share it.\n     fn add_move_error_suggestions(\n         &self,\n         err: &mut DiagnosticBuilder<'a>,\n@@ -433,6 +431,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n         err: &mut DiagnosticBuilder<'a>,\n         binds_to: &[Local],\n     ) {\n+        let mut noncopy_var_spans = Vec::new();\n         for (j, local) in binds_to.into_iter().enumerate() {\n             let bind_to = &self.mir.local_decls[*local];\n             let binding_span = bind_to.source_info.span;\n@@ -443,14 +442,26 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                 err.span_label(binding_span, format!(\"... and here\"));\n             }\n \n+            if binds_to.len() == 1 {\n+                err.span_note(\n+                    binding_span,\n+                    &format!(\n+                        \"move occurs because `{}` has type `{}`, \\\n+                            which does not implement the `Copy` trait\",\n+                        bind_to.name.unwrap(),\n+                        bind_to.ty\n+                    ),\n+                );\n+            } else {\n+                noncopy_var_spans.push(binding_span);\n+            }\n+        }\n+\n+        if binds_to.len() > 1 {\n             err.span_note(\n-                binding_span,\n-                &format!(\n-                    \"move occurs because `{}` has type `{}`, \\\n-                        which does not implement the `Copy` trait\",\n-                    bind_to.name.unwrap(),\n-                    bind_to.ty\n-                ),\n+                noncopy_var_spans,\n+                \"move occurs because these variables have types that \\\n+                    don't implement the `Copy` trait\",\n             );\n         }\n     }"}, {"sha": "8bc9209c2ed86fce931842ddc393dbbee1f84e1f", "filename": "src/test/ui/suggestions/dont-suggest-ref.stderr", "status": "modified", "additions": 40, "deletions": 141, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/6cf4e14ac021647165071b883e0bbcc863909191/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cf4e14ac021647165071b883e0bbcc863909191/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref.stderr?ref=6cf4e14ac021647165071b883e0bbcc863909191", "patch": "@@ -526,14 +526,12 @@ LL |         &mut Either::One(_t) => (),\n LL |         &mut Either::Two(_t) => (),\n    |                          -- ... and here\n    |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:233:26\n    |\n LL |         &mut Either::One(_t) => (),\n    |                          ^^\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:236:26\n-   |\n+...\n LL |         &mut Either::Two(_t) => (),\n    |                          ^^\n help: consider removing the `&mut`\n@@ -825,16 +823,11 @@ LL |     let &(X(_t), X(_u)) = &(x.clone(), x.clone());\n    |         |   data moved here\n    |         help: consider removing the `&`: `(X(_t), X(_u))`\n    |\n-note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:347:13\n    |\n LL |     let &(X(_t), X(_u)) = &(x.clone(), x.clone());\n-   |             ^^\n-note: move occurs because `_u` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:347:20\n-   |\n-LL |     let &(X(_t), X(_u)) = &(x.clone(), x.clone());\n-   |                    ^^\n+   |             ^^     ^^\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/dont-suggest-ref.rs:351:50\n@@ -846,16 +839,11 @@ LL |     if let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) {\n    |            |             data moved here\n    |            help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:351:26\n    |\n LL |     if let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n-   |                          ^^\n-note: move occurs because `_u` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:351:43\n-   |\n-LL |     if let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n-   |                                           ^^\n+   |                          ^^               ^^\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/dont-suggest-ref.rs:355:53\n@@ -867,16 +855,11 @@ LL |     while let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone())\n    |               |             data moved here\n    |               help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:355:29\n    |\n LL |     while let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n-   |                             ^^\n-note: move occurs because `_u` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:355:46\n-   |\n-LL |     while let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n-   |                                              ^^\n+   |                             ^^               ^^\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/dont-suggest-ref.rs:359:11\n@@ -892,26 +875,14 @@ LL |         &(Either::One(_t), Either::Two(_u)) => (),\n LL |         &(Either::Two(_t), Either::One(_u)) => (),\n    |                       -- ... and here  -- ... and here\n    |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:361:23\n    |\n LL |         &(Either::One(_t), Either::Two(_u)) => (),\n-   |                       ^^\n-note: move occurs because `_u` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:361:40\n-   |\n-LL |         &(Either::One(_t), Either::Two(_u)) => (),\n-   |                                        ^^\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:364:23\n-   |\n-LL |         &(Either::Two(_t), Either::One(_u)) => (),\n-   |                       ^^\n-note: move occurs because `_u` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:364:40\n-   |\n+   |                       ^^               ^^\n+...\n LL |         &(Either::Two(_t), Either::One(_u)) => (),\n-   |                                        ^^\n+   |                       ^^               ^^\n help: consider removing the `&`\n    |\n LL |         (Either::One(_t), Either::Two(_u)) => (),\n@@ -934,16 +905,11 @@ LL |         &(Either::One(_t), Either::Two(_u))\n    |         |             data moved here\n    |         help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:371:23\n    |\n LL |         &(Either::One(_t), Either::Two(_u))\n-   |                       ^^\n-note: move occurs because `_u` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:371:40\n-   |\n-LL |         &(Either::One(_t), Either::Two(_u))\n-   |                                        ^^\n+   |                       ^^               ^^\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/dont-suggest-ref.rs:378:11\n@@ -958,16 +924,11 @@ LL |         &(Either::One(_t), Either::Two(_u)) => (),\n    |         |             data moved here\n    |         help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:380:23\n    |\n LL |         &(Either::One(_t), Either::Two(_u)) => (),\n-   |                       ^^\n-note: move occurs because `_u` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:380:40\n-   |\n-LL |         &(Either::One(_t), Either::Two(_u)) => (),\n-   |                                        ^^\n+   |                       ^^               ^^\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/dont-suggest-ref.rs:386:11\n@@ -982,16 +943,11 @@ LL |         &(Either::One(_t), Either::Two(_u)) => (),\n    |         |             data moved here\n    |         help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:388:23\n    |\n LL |         &(Either::One(_t), Either::Two(_u)) => (),\n-   |                       ^^\n-note: move occurs because `_u` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:388:40\n-   |\n-LL |         &(Either::One(_t), Either::Two(_u)) => (),\n-   |                                        ^^\n+   |                       ^^               ^^\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/dont-suggest-ref.rs:399:31\n@@ -1003,16 +959,11 @@ LL |     let &mut (X(_t), X(_u)) = &mut (xm.clone(), xm.clone());\n    |         |       data moved here\n    |         help: consider removing the `&mut`: `(X(_t), X(_u))`\n    |\n-note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:399:17\n    |\n LL |     let &mut (X(_t), X(_u)) = &mut (xm.clone(), xm.clone());\n-   |                 ^^\n-note: move occurs because `_u` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:399:24\n-   |\n-LL |     let &mut (X(_t), X(_u)) = &mut (xm.clone(), xm.clone());\n-   |                        ^^\n+   |                 ^^     ^^\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/dont-suggest-ref.rs:403:54\n@@ -1024,16 +975,11 @@ LL |     if let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.c\n    |            |                 data moved here\n    |            help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:403:30\n    |\n LL |     if let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n-   |                              ^^\n-note: move occurs because `_u` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:403:47\n-   |\n-LL |     if let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n-   |                                               ^^\n+   |                              ^^               ^^\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/dont-suggest-ref.rs:407:57\n@@ -1045,16 +991,11 @@ LL |     while let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), e\n    |               |                 data moved here\n    |               help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:407:33\n    |\n LL |     while let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n-   |                                 ^^\n-note: move occurs because `_u` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:407:50\n-   |\n-LL |     while let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n-   |                                                  ^^\n+   |                                 ^^               ^^\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/dont-suggest-ref.rs:411:11\n@@ -1070,26 +1011,14 @@ LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n LL |         &mut (Either::Two(_t), Either::One(_u)) => (),\n    |                           -- ... and here  -- ... and here\n    |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:413:27\n    |\n LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n-   |                           ^^\n-note: move occurs because `_u` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:413:44\n-   |\n-LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n-   |                                            ^^\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:416:27\n-   |\n-LL |         &mut (Either::Two(_t), Either::One(_u)) => (),\n-   |                           ^^\n-note: move occurs because `_u` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:416:44\n-   |\n+   |                           ^^               ^^\n+...\n LL |         &mut (Either::Two(_t), Either::One(_u)) => (),\n-   |                                            ^^\n+   |                           ^^               ^^\n help: consider removing the `&mut`\n    |\n LL |         (Either::One(_t), Either::Two(_u)) => (),\n@@ -1112,16 +1041,11 @@ LL |         &mut (Either::One(_t), Either::Two(_u))\n    |         |                 data moved here\n    |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:423:27\n    |\n LL |         &mut (Either::One(_t), Either::Two(_u))\n-   |                           ^^\n-note: move occurs because `_u` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:423:44\n-   |\n-LL |         &mut (Either::One(_t), Either::Two(_u))\n-   |                                            ^^\n+   |                           ^^               ^^\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/dont-suggest-ref.rs:430:11\n@@ -1136,16 +1060,11 @@ LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n    |         |                 data moved here\n    |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:432:27\n    |\n LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n-   |                           ^^\n-note: move occurs because `_u` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:432:44\n-   |\n-LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n-   |                                            ^^\n+   |                           ^^               ^^\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/dont-suggest-ref.rs:438:11\n@@ -1160,16 +1079,11 @@ LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n    |         |                 data moved here\n    |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:440:27\n    |\n LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n-   |                           ^^\n-note: move occurs because `_u` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:440:44\n-   |\n-LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n-   |                                            ^^\n+   |                           ^^               ^^\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/dont-suggest-ref.rs:446:11\n@@ -1184,16 +1098,11 @@ LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n    |         |                 data moved here\n    |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because `_t` has type `X`, which does not implement the `Copy` trait\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:448:27\n    |\n LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n-   |                           ^^\n-note: move occurs because `_u` has type `X`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:448:44\n-   |\n-LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n-   |                                            ^^\n+   |                           ^^               ^^\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/dont-suggest-ref.rs:214:11\n@@ -1238,16 +1147,11 @@ LL |     fn f3(&(X(_t), X(_u)): &(X, X)) { }\n    |           cannot move out of borrowed content\n    |           help: consider removing the `&`: `(X(_t), X(_u))`\n    |\n-note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:394:15\n    |\n LL |     fn f3(&(X(_t), X(_u)): &(X, X)) { }\n-   |               ^^\n-note: move occurs because `_u` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:394:22\n-   |\n-LL |     fn f3(&(X(_t), X(_u)): &(X, X)) { }\n-   |                      ^^\n+   |               ^^     ^^\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/dont-suggest-ref.rs:454:11\n@@ -1260,16 +1164,11 @@ LL |     fn f4(&mut (X(_t), X(_u)): &mut (X, X)) { }\n    |           cannot move out of borrowed content\n    |           help: consider removing the `&mut`: `(X(_t), X(_u))`\n    |\n-note: move occurs because `_t` has type `Y`, which does not implement the `Copy` trait\n+note: move occurs because these variables have types that don't implement the `Copy` trait\n   --> $DIR/dont-suggest-ref.rs:454:19\n    |\n LL |     fn f4(&mut (X(_t), X(_u)): &mut (X, X)) { }\n-   |                   ^^\n-note: move occurs because `_u` has type `Y`, which does not implement the `Copy` trait\n-  --> $DIR/dont-suggest-ref.rs:454:26\n-   |\n-LL |     fn f4(&mut (X(_t), X(_u)): &mut (X, X)) { }\n-   |                          ^^\n+   |                   ^^     ^^\n \n error: aborting due to 67 previous errors\n "}]}