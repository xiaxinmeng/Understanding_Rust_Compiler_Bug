{"sha": "be51e6bd07c10ff350350fe05f2888c4ce3a08a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlNTFlNmJkMDdjMTBmZjM1MDM1MGZlMDVmMjg4OGM0Y2UzYTA4YTA=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-10T17:07:57Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-10T17:07:57Z"}, "message": "Add an `fn_ptr` field to `MiriFrame`\n\nThe `backtrace-rs` crate can use this to implement\n`Frame::symbol_address`, which is used to skip frames\nabove the call to `Backtrace::capture` on the stack.\n\nThe function pointer will not be useable for comparison purposes if the\nfunction is generic, as CTFE creates a new function pointer for each\ncast of a (monomorphized) generic function. However, this already\naffects code running under Miri, and isn't a problem for `backtrace-rs`\n(which only casts a non-generic function).\n\nI've added logic to allow `MiriFrame` to have either 4 or 5 fields - if\na 5th field is present, we write the function pointer to it.", "tree": {"sha": "54a5680faba370c045b62a877266fe1ce3994046", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54a5680faba370c045b62a877266fe1ce3994046"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be51e6bd07c10ff350350fe05f2888c4ce3a08a0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl+B62AACgkQtAh+UQ6Y\nsWTA2Q/+OUb770HP0FJNNeQRiedX2KUHXNg/xNz8iCNplmEbW2YgtNwyHABXUtNm\nK8YNUIeo4FprXSmaZjmIwf9M8xfxaCe9heOo9nmZ1E0/a8qtvciPlqg+17A7l8Gh\neb4XCe0O9Ev+hq43q5zmgN3OHusmvLY2DPwtOGZRH08DRjx59VDEgzEFB7yCH3iS\nm/S5PfUMywJ9F3RxfRN09/0wDU1oBIDfuC/WAAYrfbUJrEsxMPl/bT1gkZLsC4mi\n1q3XTOAmzsIsbMbV0nHcnMXuSLIJfCkLXgEA4gUJ2ukZrmv6iciHG+3qfejakvDD\nZ/BW4y9EU1eiyFrtfdBDmTlWm4mNmw7mdrem5YwavfGysBmFs0qiqxmm8foqx9ZV\nISL+Nm+9HFnbT3bHmVS9IVs/zqAUyd1asrHzvR5I3EFhtttINNcmgMrWMra3AvDq\nIq5CTbuT95o5xLttA7Tb4p/20tnhZpzAizL5ggQzvJw8ki5I9PdL+Efh32xn1O0K\nhcMofWazdUpGpe0B06huTcsNPbC4ADZxKOWuYcTm1jeThQB4Jkk9IkqSmHw6d9XI\n0125spLky1LE/uwDwqq1+TRwuPRIfjiaQd7Gj30CNRkQtxU4oaoEcxIzjZUZuAL5\nA8boteeel/1A8eA3udmpBgGSOxMcJP1krioFieL5K/8JweqTksA=\n=a9zz\n-----END PGP SIGNATURE-----", "payload": "tree 54a5680faba370c045b62a877266fe1ce3994046\nparent 9d4c80e787f400e0ac36685b51460e52c1f31412\nauthor Aaron Hill <aa1ronham@gmail.com> 1602349677 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1602349677 -0400\n\nAdd an `fn_ptr` field to `MiriFrame`\n\nThe `backtrace-rs` crate can use this to implement\n`Frame::symbol_address`, which is used to skip frames\nabove the call to `Backtrace::capture` on the stack.\n\nThe function pointer will not be useable for comparison purposes if the\nfunction is generic, as CTFE creates a new function pointer for each\ncast of a (monomorphized) generic function. However, this already\naffects code running under Miri, and isn't a problem for `backtrace-rs`\n(which only casts a non-generic function).\n\nI've added logic to allow `MiriFrame` to have either 4 or 5 fields - if\na 5th field is present, we write the function pointer to it.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be51e6bd07c10ff350350fe05f2888c4ce3a08a0", "html_url": "https://github.com/rust-lang/rust/commit/be51e6bd07c10ff350350fe05f2888c4ce3a08a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be51e6bd07c10ff350350fe05f2888c4ce3a08a0/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d4c80e787f400e0ac36685b51460e52c1f31412", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d4c80e787f400e0ac36685b51460e52c1f31412", "html_url": "https://github.com/rust-lang/rust/commit/9d4c80e787f400e0ac36685b51460e52c1f31412"}], "stats": {"total": 82, "additions": 55, "deletions": 27}, "files": [{"sha": "747afb9c4e93aa3e38cae47a5c974e853f9dd0d2", "filename": "README.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be51e6bd07c10ff350350fe05f2888c4ce3a08a0/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/be51e6bd07c10ff350350fe05f2888c4ce3a08a0/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=be51e6bd07c10ff350350fe05f2888c4ce3a08a0", "patch": "@@ -286,6 +286,10 @@ extern \"Rust\" {\n     ///     lineno: u32,\n     ///     // The column number currently being executed in `filename`, starting from '1'.\n     ///     colno: u32,\n+    ///     // The function pointer to the function currently being executed.\n+    ///     // This can be compared against function pointers obtained by\n+    ///     // casting a function (e.g. `my_fn as *mut ()`)\n+    ///     fn_ptr: *mut ()\n     /// }\n     /// ```\n     ///"}, {"sha": "9b396c718493fc2a54892ac7215d4a751563819a", "filename": "src/shims/backtrace.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/be51e6bd07c10ff350350fe05f2888c4ce3a08a0/src%2Fshims%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be51e6bd07c10ff350350fe05f2888c4ce3a08a0/src%2Fshims%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fbacktrace.rs?ref=be51e6bd07c10ff350350fe05f2888c4ce3a08a0", "patch": "@@ -92,8 +92,18 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             throw_ub_format!(\"expected function pointer, found {:?}\", ptr);\n         };\n \n-        if dest.layout.layout.fields.count() != 4 {\n-            throw_ub_format!(\"bad declaration of miri_resolve_frame - should return a struct with 4 fields\");\n+        // Reconstruct the original function pointer,\n+        // which we pass to user code.\n+        let mut fn_ptr = ptr;\n+        fn_ptr.offset = Size::from_bytes(0);\n+        let fn_ptr = Scalar::Ptr(fn_ptr);\n+\n+        let num_fields = dest.layout.layout.fields.count();\n+\n+        if num_fields != 4 && num_fields != 5 {\n+            // Always mention 5 fields, since the 4-field struct is only supported\n+            // for backwards compatiblity. New code should declare 5 fields\n+            throw_ub_format!(\"bad declaration of miri_resolve_frame - should return a struct with 5 fields\");\n         }\n \n         let pos = BytePos(ptr.offset.bytes().try_into().unwrap());\n@@ -122,6 +132,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.write_immediate(filename_alloc.to_ref(), this.mplace_field(dest, 1)?.into())?;\n         this.write_scalar(lineno_alloc, this.mplace_field(dest, 2)?.into())?;\n         this.write_scalar(colno_alloc, this.mplace_field(dest, 3)?.into())?;\n+\n+        if num_fields == 5 {\n+            this.write_scalar(fn_ptr, this.mplace_field(dest, 4)?.into())?;\n+        }\n+\n         Ok(())\n     }\n }"}, {"sha": "23379992d5ecb535b16c32833508deb20c79ec00", "filename": "tests/compile-fail/backtrace/bad-backtrace-decl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be51e6bd07c10ff350350fe05f2888c4ce3a08a0/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be51e6bd07c10ff350350fe05f2888c4ce3a08a0/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbacktrace%2Fbad-backtrace-decl.rs?ref=be51e6bd07c10ff350350fe05f2888c4ce3a08a0", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     let frames = unsafe { miri_get_backtrace(0) };\n     for frame in frames.into_iter() {\n         unsafe {\n-            miri_resolve_frame(*frame, 0); //~ ERROR Undefined Behavior: bad declaration of miri_resolve_frame - should return a struct with 4 fields\n+            miri_resolve_frame(*frame, 0); //~ ERROR Undefined Behavior: bad declaration of miri_resolve_frame - should return a struct with 5 fields\n         }\n     }\n }"}, {"sha": "19169060038e07d5aee763e8febdd61e9790def5", "filename": "tests/run-pass/backtrace-api.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/be51e6bd07c10ff350350fe05f2888c4ce3a08a0/tests%2Frun-pass%2Fbacktrace-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be51e6bd07c10ff350350fe05f2888c4ce3a08a0/tests%2Frun-pass%2Fbacktrace-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbacktrace-api.rs?ref=be51e6bd07c10ff350350fe05f2888c4ce3a08a0", "patch": "@@ -2,20 +2,6 @@\n // normalize-stderr-test \"RUSTLIB/(.*):\\d+:\\d+ \"-> \"RUSTLIB/$1:LL:COL \"\n // normalize-stderr-test \"::<.*>\" -> \"\"\n \n-extern \"Rust\" {\n-    fn miri_get_backtrace(flags: u64) -> Box<[*mut ()]>;\n-    fn miri_resolve_frame(ptr: *mut (), flags: u64) -> MiriFrame;\n-}\n-\n-#[derive(Debug)]\n-#[repr(C)]\n-struct MiriFrame {\n-    name: Box<[u8]>,\n-    filename: Box<[u8]>,\n-    lineno: u32,\n-    colno: u32\n-}\n-\n #[inline(never)] fn func_a() -> Box<[*mut ()]> { func_b::<u8>() }\n #[inline(never)] fn func_b<T>() -> Box<[*mut ()]> { func_c() }\n \n@@ -34,6 +20,10 @@ fn main() {\n         let name = String::from_utf8(miri_frame.name.into()).unwrap();\n         let filename = String::from_utf8(miri_frame.filename.into()).unwrap();\n \n+        if name == \"func_a\" {\n+            assert_eq!(func_a as *mut (), miri_frame.fn_ptr);\n+        }\n+\n         // Print every frame to stderr.\n         let out = format!(\"{}:{}:{} ({})\", filename, miri_frame.lineno, miri_frame.colno, name);\n         eprintln!(\"{}\", out);\n@@ -45,3 +35,22 @@ fn main() {\n         }\n     }\n }\n+\n+// This goes at the bottom of the file so that we can change it\n+// without disturbing line numbers of the functions in the backtrace.\n+\n+extern \"Rust\" {\n+    fn miri_get_backtrace(flags: u64) -> Box<[*mut ()]>;\n+    fn miri_resolve_frame(ptr: *mut (), flags: u64) -> MiriFrame;\n+}\n+\n+#[derive(Debug)]\n+#[repr(C)]\n+struct MiriFrame {\n+    name: Box<[u8]>,\n+    filename: Box<[u8]>,\n+    lineno: u32,\n+    colno: u32,\n+    fn_ptr: *mut (),\n+}\n+"}, {"sha": "a5208221da4053631d61a37648c1affbec88687f", "filename": "tests/run-pass/backtrace-api.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be51e6bd07c10ff350350fe05f2888c4ce3a08a0/tests%2Frun-pass%2Fbacktrace-api.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/be51e6bd07c10ff350350fe05f2888c4ce3a08a0/tests%2Frun-pass%2Fbacktrace-api.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbacktrace-api.stderr?ref=be51e6bd07c10ff350350fe05f2888c4ce3a08a0", "patch": "@@ -1,8 +1,8 @@\n-$DIR/backtrace-api.rs:27:59 (func_d)\n-$DIR/backtrace-api.rs:26:50 (func_c)\n-$DIR/backtrace-api.rs:20:53 (func_b)\n-$DIR/backtrace-api.rs:19:50 (func_a)\n-$DIR/backtrace-api.rs:31:18 (main)\n+$DIR/backtrace-api.rs:13:59 (func_d)\n+$DIR/backtrace-api.rs:12:50 (func_c)\n+$DIR/backtrace-api.rs:6:53 (func_b)\n+$DIR/backtrace-api.rs:5:50 (func_a)\n+$DIR/backtrace-api.rs:17:18 (main)\n RUSTLIB/core/src/ops/function.rs:LL:COL (<fn() as std::ops::FnOnce<()>>::call_once - shim(fn()))\n RUSTLIB/std/src/sys_common/backtrace.rs:LL:COL (std::sys_common::backtrace::__rust_begin_short_backtrace)\n RUSTLIB/std/src/rt.rs:LL:COL (std::rt::lang_start::{closure#0})"}, {"sha": "175ff3b82946194c62ffdf20cf9de0ece53aaa8c", "filename": "tests/run-pass/backtrace-api.stdout", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be51e6bd07c10ff350350fe05f2888c4ce3a08a0/tests%2Frun-pass%2Fbacktrace-api.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/be51e6bd07c10ff350350fe05f2888c4ce3a08a0/tests%2Frun-pass%2Fbacktrace-api.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbacktrace-api.stdout?ref=be51e6bd07c10ff350350fe05f2888c4ce3a08a0", "patch": "@@ -1,5 +1,5 @@\n-$DIR/backtrace-api.rs:27:59 (func_d)\n-$DIR/backtrace-api.rs:26:50 (func_c)\n-$DIR/backtrace-api.rs:20:53 (func_b::<u8>)\n-$DIR/backtrace-api.rs:19:50 (func_a)\n-$DIR/backtrace-api.rs:31:18 (main)\n+$DIR/backtrace-api.rs:13:59 (func_d)\n+$DIR/backtrace-api.rs:12:50 (func_c)\n+$DIR/backtrace-api.rs:6:53 (func_b::<u8>)\n+$DIR/backtrace-api.rs:5:50 (func_a)\n+$DIR/backtrace-api.rs:17:18 (main)"}]}