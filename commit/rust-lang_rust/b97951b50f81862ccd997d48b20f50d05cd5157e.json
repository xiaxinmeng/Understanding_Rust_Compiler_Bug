{"sha": "b97951b50f81862ccd997d48b20f50d05cd5157e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5Nzk1MWI1MGY4MTg2MmNjZDk5N2Q0OGIyMGY1MGQwNWNkNTE1N2U=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-02-14T04:35:18Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-02-16T05:14:22Z"}, "message": "Update w/ comments", "tree": {"sha": "ceb7e47134081be8574cc26d8719f2c4ab611571", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ceb7e47134081be8574cc26d8719f2c4ab611571"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b97951b50f81862ccd997d48b20f50d05cd5157e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b97951b50f81862ccd997d48b20f50d05cd5157e", "html_url": "https://github.com/rust-lang/rust/commit/b97951b50f81862ccd997d48b20f50d05cd5157e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b97951b50f81862ccd997d48b20f50d05cd5157e/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be1ed00712ce0b884e1fc9779f25b1758e994d0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/be1ed00712ce0b884e1fc9779f25b1758e994d0b", "html_url": "https://github.com/rust-lang/rust/commit/be1ed00712ce0b884e1fc9779f25b1758e994d0b"}], "stats": {"total": 144, "additions": 101, "deletions": 43}, "files": [{"sha": "b421adbf9eab1b70361a4e57a90614ef4d87d37a", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 33, "deletions": 27, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/b97951b50f81862ccd997d48b20f50d05cd5157e/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b97951b50f81862ccd997d48b20f50d05cd5157e/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=b97951b50f81862ccd997d48b20f50d05cd5157e", "patch": "@@ -6,8 +6,9 @@ use crate::astconv::{\n use crate::errors::AssocTypeBindingNotAllowed;\n use crate::structured_errors::{StructuredDiagnostic, WrongNumberOfGenericArgs};\n use rustc_ast::ast::ParamKindOrd;\n-use rustc_errors::{struct_span_err, Applicability, ErrorReported};\n+use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n+use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::GenericArg;\n use rustc_middle::ty::{\n@@ -24,8 +25,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         tcx: TyCtxt<'_>,\n         arg: &GenericArg<'_>,\n         param: &GenericParamDef,\n-        // DefId of the function\n-        //body_def_id: DefId,\n         possible_ordering_error: bool,\n         help: Option<&str>,\n     ) {\n@@ -45,6 +44,19 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n         }\n \n+        let add_braces_suggestion = |arg: &GenericArg<'_>, err: &mut DiagnosticBuilder<'_>| {\n+            let suggestions = vec![\n+                (arg.span().shrink_to_lo(), String::from(\"{ \")),\n+                (arg.span().shrink_to_hi(), String::from(\" }\")),\n+            ];\n+            err.multipart_suggestion(\n+                \"if this generic argument was intended as a const parameter, \\\n+                 surround it with braces\",\n+                suggestions,\n+                Applicability::MaybeIncorrect,\n+            );\n+        };\n+\n         // Specific suggestion set for diagnostics\n         match (arg, &param.kind) {\n             (\n@@ -53,40 +65,34 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     ..\n                 }),\n                 GenericParamDefKind::Const,\n-            ) => {\n-                use rustc_hir::def::{DefKind, Res};\n-                match path.res {\n-                    Res::Err => {}\n-                    Res::Def(DefKind::TyParam, src_def_id) => (|| {\n-                        let param_hir_id = match param.def_id.as_local() {\n-                            Some(x) => tcx.hir().local_def_id_to_hir_id(x),\n-                            None => return,\n-                        };\n+            ) => match path.res {\n+                Res::Err => {\n+                    add_braces_suggestion(arg, &mut err);\n+                    err.set_primary_message(\n+                        \"unresolved item provided when a constant was expected\",\n+                    );\n+                }\n+                Res::Def(DefKind::TyParam, src_def_id) => {\n+                    if let Some(param_local_id) = param.def_id.as_local() {\n+                        let param_hir_id = tcx.hir().local_def_id_to_hir_id(param_local_id);\n                         let param_name = tcx.hir().ty_param_name(param_hir_id);\n                         let param_type = tcx.type_of(param.def_id);\n                         if param_type.is_suggestable() {\n                             err.span_suggestion(\n                                 tcx.def_span(src_def_id),\n-                                &format!(\"try changing to a const-generic parameter:\"),\n+                                \"consider changing this type paramater to a `const`-generic\",\n                                 format!(\"const {}: {}\", param_name, param_type),\n                                 Applicability::MaybeIncorrect,\n                             );\n-                        }\n-                    })(),\n-                    _ => {\n-                        let suggestions = vec![\n-                            (arg.span().shrink_to_lo(), String::from(\"{ \")),\n-                            (arg.span().shrink_to_hi(), String::from(\" }\")),\n-                        ];\n-                        err.multipart_suggestion(\n-                            \"if this generic argument was intended as a const parameter, \\\n-                  try surrounding it with braces:\",\n-                            suggestions,\n-                            Applicability::MaybeIncorrect,\n-                        );\n+                        };\n                     }\n                 }\n-            }\n+                _ => add_braces_suggestion(arg, &mut err),\n+            },\n+            (\n+                GenericArg::Type(hir::Ty { kind: hir::TyKind::Path(_), .. }),\n+                GenericParamDefKind::Const,\n+            ) => add_braces_suggestion(arg, &mut err),\n             (\n                 GenericArg::Type(hir::Ty { kind: hir::TyKind::Array(_, len), .. }),\n                 GenericParamDefKind::Const { .. },"}, {"sha": "17ccd2f3527b0c64b0c13dea8d5e5d54377018a5", "filename": "src/test/ui/const-generics/const-param-shadowing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b97951b50f81862ccd997d48b20f50d05cd5157e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b97951b50f81862ccd997d48b20f50d05cd5157e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-shadowing.stderr?ref=b97951b50f81862ccd997d48b20f50d05cd5157e", "patch": "@@ -4,7 +4,7 @@ error[E0747]: type provided when a constant was expected\n LL | fn test<const N: usize>() -> Foo<N> {\n    |                                  ^\n    |\n-help: if this generic argument was intended as a const parameter, try surrounding it with braces:\n+help: if this generic argument was intended as a const parameter, surround it with braces\n    |\n LL | fn test<const N: usize>() -> Foo<{ N }> {\n    |                                  ^   ^"}, {"sha": "1581af5ab27516e5e301f5cdadce5e8237d5b969", "filename": "src/test/ui/const-generics/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b97951b50f81862ccd997d48b20f50d05cd5157e/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b97951b50f81862ccd997d48b20f50d05cd5157e/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.rs?ref=b97951b50f81862ccd997d48b20f50d05cd5157e", "patch": "@@ -1,13 +1,18 @@\n #![crate_type=\"lib\"]\n-#![feature(const_generics)]\n+#![feature(min_const_generics)]\n #![allow(incomplete_features)]\n \n struct A<const N: u8>;\n trait Foo {}\n impl Foo for A<N> {}\n-//~^ ERROR type provided when a constant\n-//~| ERROR cannot find type\n+//~^ ERROR cannot find type\n+//~| unresolved item provided when a constant\n \n struct B<const N: u8>;\n impl<N> Foo for B<N> {}\n //~^ ERROR type provided when a constant\n+\n+struct C<const C: u8, const N: u8>;\n+impl<const N: u8> Foo for C<N, T> {}\n+//~^ ERROR cannot find type\n+//~| unresolved item provided when a constant"}, {"sha": "33f5337eb8072203ea6c397ea6922d3a39ff7fe2", "filename": "src/test/ui/const-generics/diagnostics.stderr", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b97951b50f81862ccd997d48b20f50d05cd5157e/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b97951b50f81862ccd997d48b20f50d05cd5157e/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdiagnostics.stderr?ref=b97951b50f81862ccd997d48b20f50d05cd5157e", "patch": "@@ -7,21 +7,48 @@ LL | trait Foo {}\n LL | impl Foo for A<N> {}\n    |                ^ help: a struct with a similar name exists: `A`\n \n-error[E0747]: type provided when a constant was expected\n+error[E0412]: cannot find type `T` in this scope\n+  --> $DIR/diagnostics.rs:16:32\n+   |\n+LL | struct A<const N: u8>;\n+   | ---------------------- similarly named struct `A` defined here\n+...\n+LL | impl<const N: u8> Foo for C<N, T> {}\n+   |                                ^ help: a struct with a similar name exists: `A`\n+\n+error[E0747]: unresolved item provided when a constant was expected\n   --> $DIR/diagnostics.rs:7:16\n    |\n LL | impl Foo for A<N> {}\n    |                ^\n+   |\n+help: if this generic argument was intended as a const parameter, surround it with braces\n+   |\n+LL | impl Foo for A<{ N }> {}\n+   |                ^   ^\n \n error[E0747]: type provided when a constant was expected\n   --> $DIR/diagnostics.rs:12:19\n    |\n LL | impl<N> Foo for B<N> {}\n    |      -            ^\n    |      |\n-   |      help: try changing to a const-generic parameter:: `const N: u8`\n+   |      help: consider changing this type paramater to a `const`-generic: `const N: u8`\n+\n+error[E0747]: unresolved item provided when a constant was expected\n+  --> $DIR/diagnostics.rs:16:32\n+   |\n+LL | impl<const N: u8> Foo for C<N, T> {}\n+   |                                ^\n+   |\n+   = note: type arguments must be provided before constant arguments\n+   = help: reorder the arguments: consts: `<C, N>`\n+help: if this generic argument was intended as a const parameter, surround it with braces\n+   |\n+LL | impl<const N: u8> Foo for C<N, { T }> {}\n+   |                                ^   ^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0412, E0747.\n For more information about an error, try `rustc --explain E0412`."}, {"sha": "32939dcd2861bd1c7432c31238ab3e974f4184e2", "filename": "src/test/ui/const-generics/invalid-enum.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b97951b50f81862ccd997d48b20f50d05cd5157e/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b97951b50f81862ccd997d48b20f50d05cd5157e/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs?ref=b97951b50f81862ccd997d48b20f50d05cd5157e", "patch": "@@ -3,14 +3,14 @@\n \n #[derive(PartialEq, Eq)]\n enum CompileFlag {\n-  A,\n-  B,\n+    A,\n+    B,\n }\n \n pub fn test_1<const CF: CompileFlag>() {}\n pub fn test_2<T, const CF: CompileFlag>(x: T) {}\n pub struct Example<const CF: CompileFlag, T=u32>{\n-  x: T,\n+    x: T,\n }\n \n impl<const CF: CompileFlag, T> Example<CF, T> {\n@@ -20,15 +20,15 @@ impl<const CF: CompileFlag, T> Example<CF, T> {\n pub fn main() {\n   test_1::<CompileFlag::A>();\n   //~^ ERROR: expected type, found variant\n-  //~| ERROR: type provided when a constant was expected\n+  //~| ERROR: unresolved item provided when a constant was expected\n \n   test_2::<_, CompileFlag::A>(0);\n   //~^ ERROR: expected type, found variant\n-  //~| ERROR: type provided when a constant was expected\n+  //~| ERROR: unresolved item provided when a constant was expected\n \n   let _: Example<CompileFlag::A, _> = Example { x: 0 };\n   //~^ ERROR: expected type, found variant\n-  //~| ERROR: type provided when a constant was expected\n+  //~| ERROR: unresolved item provided when a constant was expected\n \n   let _: Example<Example::ASSOC_FLAG, _> = Example { x: 0 };\n   //~^ ERROR: type provided when a constant was expected"}, {"sha": "cfbc61f02543bc6ae4c7eaa4a5b33db37658f873", "filename": "src/test/ui/const-generics/invalid-enum.stderr", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b97951b50f81862ccd997d48b20f50d05cd5157e/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b97951b50f81862ccd997d48b20f50d05cd5157e/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.stderr?ref=b97951b50f81862ccd997d48b20f50d05cd5157e", "patch": "@@ -25,29 +25,49 @@ LL |   let _: Example<CompileFlag::A, _> = Example { x: 0 };\n    |                  not a type\n    |                  help: try using the variant's enum: `CompileFlag`\n \n-error[E0747]: type provided when a constant was expected\n+error[E0747]: unresolved item provided when a constant was expected\n   --> $DIR/invalid-enum.rs:29:18\n    |\n LL |   let _: Example<CompileFlag::A, _> = Example { x: 0 };\n    |                  ^^^^^^^^^^^^^^\n+   |\n+help: if this generic argument was intended as a const parameter, surround it with braces\n+   |\n+LL |   let _: Example<{ CompileFlag::A }, _> = Example { x: 0 };\n+   |                  ^                ^\n \n error[E0747]: type provided when a constant was expected\n   --> $DIR/invalid-enum.rs:33:18\n    |\n LL |   let _: Example<Example::ASSOC_FLAG, _> = Example { x: 0 };\n    |                  ^^^^^^^^^^^^^^^^^^^\n+   |\n+help: if this generic argument was intended as a const parameter, surround it with braces\n+   |\n+LL |   let _: Example<{ Example::ASSOC_FLAG }, _> = Example { x: 0 };\n+   |                  ^                     ^\n \n-error[E0747]: type provided when a constant was expected\n+error[E0747]: unresolved item provided when a constant was expected\n   --> $DIR/invalid-enum.rs:21:12\n    |\n LL |   test_1::<CompileFlag::A>();\n    |            ^^^^^^^^^^^^^^\n+   |\n+help: if this generic argument was intended as a const parameter, surround it with braces\n+   |\n+LL |   test_1::<{ CompileFlag::A }>();\n+   |            ^                ^\n \n-error[E0747]: type provided when a constant was expected\n+error[E0747]: unresolved item provided when a constant was expected\n   --> $DIR/invalid-enum.rs:25:15\n    |\n LL |   test_2::<_, CompileFlag::A>(0);\n    |               ^^^^^^^^^^^^^^\n+   |\n+help: if this generic argument was intended as a const parameter, surround it with braces\n+   |\n+LL |   test_2::<_, { CompileFlag::A }>(0);\n+   |               ^                ^\n \n error: aborting due to 7 previous errors\n "}]}