{"sha": "957251817bb78f1f0e2f9e6efdb827b43c773ac4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1NzI1MTgxN2JiNzhmMWYwZTJmOWU2ZWZkYjgyN2I0M2M3NzNhYzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-11T19:55:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-11T19:55:49Z"}, "message": "auto merge of #6389 : sonwow/rust/issue-3356, r=bstrie\n\nFix for #3356", "tree": {"sha": "40e75ac20b0b88acc8ff324cb11003b70b1727c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40e75ac20b0b88acc8ff324cb11003b70b1727c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/957251817bb78f1f0e2f9e6efdb827b43c773ac4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/957251817bb78f1f0e2f9e6efdb827b43c773ac4", "html_url": "https://github.com/rust-lang/rust/commit/957251817bb78f1f0e2f9e6efdb827b43c773ac4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/957251817bb78f1f0e2f9e6efdb827b43c773ac4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e478cedb0ab0bdb7e00a3a60a6946915af0fdd5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e478cedb0ab0bdb7e00a3a60a6946915af0fdd5a", "html_url": "https://github.com/rust-lang/rust/commit/e478cedb0ab0bdb7e00a3a60a6946915af0fdd5a"}, {"sha": "24ef88cee96de837370ec370ed4d1f3aa3530a20", "url": "https://api.github.com/repos/rust-lang/rust/commits/24ef88cee96de837370ec370ed4d1f3aa3530a20", "html_url": "https://github.com/rust-lang/rust/commit/24ef88cee96de837370ec370ed4d1f3aa3530a20"}], "stats": {"total": 210, "additions": 105, "deletions": 105}, "files": [{"sha": "7e617aa00064805a3af952dd2d98f56678a2aac9", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -91,7 +91,7 @@ pub fn is_test_ignored(config: config, testfile: &Path) -> bool {\n     return false;\n \n     fn xfail_target() -> ~str {\n-        ~\"xfail-\" + str::from_slice(os::SYSNAME)\n+        ~\"xfail-\" + str::to_owned(os::SYSNAME)\n     }\n }\n "}, {"sha": "62c2612f2dda97a6947b54ed56dbea750c7f8190", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -371,7 +371,7 @@ fn check_expected_errors(expected_errors: ~[errors::ExpectedError],\n             was_expected = true;\n         }\n \n-        if !was_expected && is_compiler_error_or_warning(str::from_slice(line)) {\n+        if !was_expected && is_compiler_error_or_warning(str::to_owned(line)) {\n             fatal_ProcRes(fmt!(\"unexpected compiler error or warning: '%s'\",\n                                line),\n                           ProcRes);\n@@ -596,7 +596,7 @@ fn make_lib_name(config: config, auxfile: &Path, testfile: &Path) -> Path {\n \n fn make_exe_name(config: config, testfile: &Path) -> Path {\n     Path(output_base_name(config, testfile).to_str() +\n-            str::from_slice(os::EXE_SUFFIX))\n+            str::to_owned(os::EXE_SUFFIX))\n }\n \n fn make_run_args(config: config, _props: TestProps, testfile: &Path) ->"}, {"sha": "f444eb272f2e53357c16cab94fdc2181d0be8b2d", "filename": "src/libcore/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -758,7 +758,7 @@ impl<T:Reader> ReaderUtil for T {\n     fn read_lines(&self) -> ~[~str] {\n         do vec::build |push| {\n             for self.each_line |line| {\n-                push(str::from_slice(line));\n+                push(str::to_owned(line));\n             }\n         }\n     }"}, {"sha": "88b13d0ff59e975b02055410d463c452bf2088c0", "filename": "src/libcore/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -396,8 +396,8 @@ fn dup2(src: c_int, dst: c_int) -> c_int {\n \n \n pub fn dll_filename(base: &str) -> ~str {\n-    return str::from_slice(DLL_PREFIX) + str::from_slice(base) +\n-           str::from_slice(DLL_SUFFIX)\n+    return str::to_owned(DLL_PREFIX) + str::to_owned(base) +\n+           str::to_owned(DLL_SUFFIX)\n }\n \n "}, {"sha": "c6c164c2728fa3c266e89bf97e86d41c056e1570", "filename": "src/libcore/path.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -506,7 +506,7 @@ impl GenericPath for PosixPath {\n     fn with_filestem(&self, s: &str) -> PosixPath {\n         match self.filetype() {\n           None => self.with_filename(s),\n-          Some(ref t) => self.with_filename(str::from_slice(s) + *t)\n+          Some(ref t) => self.with_filename(str::to_owned(s) + *t)\n         }\n     }\n \n@@ -517,7 +517,7 @@ impl GenericPath for PosixPath {\n               Some(ref s) => self.with_filename(*s)\n             }\n         } else {\n-            let t = ~\".\" + str::from_slice(t);\n+            let t = ~\".\" + str::to_owned(t);\n             match self.filestem() {\n               None => self.with_filename(t),\n               Some(ref s) => self.with_filename(*s + t)\n@@ -650,7 +650,7 @@ impl GenericPath for WindowsPath {\n               None => {\n                 host = None;\n                 device = None;\n-                rest = str::from_slice(s);\n+                rest = str::to_owned(s);\n               }\n             }\n           }\n@@ -723,7 +723,7 @@ impl GenericPath for WindowsPath {\n     fn with_filestem(&self, s: &str) -> WindowsPath {\n         match self.filetype() {\n           None => self.with_filename(s),\n-          Some(ref t) => self.with_filename(str::from_slice(s) + *t)\n+          Some(ref t) => self.with_filename(str::to_owned(s) + *t)\n         }\n     }\n \n@@ -734,7 +734,7 @@ impl GenericPath for WindowsPath {\n               Some(ref s) => self.with_filename(*s)\n             }\n         } else {\n-            let t = ~\".\" + str::from_slice(t);\n+            let t = ~\".\" + str::to_owned(t);\n             match self.filestem() {\n               None => self.with_filename(t),\n               Some(ref s) =>\n@@ -985,7 +985,7 @@ mod tests {\n     fn test_posix_paths() {\n         fn t(wp: &PosixPath, s: &str) {\n             let ss = wp.to_str();\n-            let sss = str::from_slice(s);\n+            let sss = str::to_owned(s);\n             if (ss != sss) {\n                 debug!(\"got %s\", ss);\n                 debug!(\"expected %s\", sss);\n@@ -1043,7 +1043,7 @@ mod tests {\n     fn test_normalize() {\n         fn t(wp: &PosixPath, s: &str) {\n             let ss = wp.to_str();\n-            let sss = str::from_slice(s);\n+            let sss = str::to_owned(s);\n             if (ss != sss) {\n                 debug!(\"got %s\", ss);\n                 debug!(\"expected %s\", sss);\n@@ -1106,7 +1106,7 @@ mod tests {\n     fn test_windows_paths() {\n         fn t(wp: &WindowsPath, s: &str) {\n             let ss = wp.to_str();\n-            let sss = str::from_slice(s);\n+            let sss = str::to_owned(s);\n             if (ss != sss) {\n                 debug!(\"got %s\", ss);\n                 debug!(\"expected %s\", sss);"}, {"sha": "addc92c3a00be114e3e84ad0ab2629bc02c8f285", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -568,7 +568,7 @@ impl<R: Rng> RngUtil for R {\n \n     /// Shuffle a vec\n     fn shuffle<T:Copy>(&mut self, values: &[T]) -> ~[T] {\n-        let mut m = vec::from_slice(values);\n+        let mut m = vec::to_owned(values);\n         self.shuffle_mut(m);\n         m\n     }"}, {"sha": "3e2116dda0d11c867821558fe14c28beb3dc0556", "filename": "src/libcore/str.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -78,21 +78,21 @@ pub fn from_bytes_slice<'a>(vector: &'a [u8]) -> &'a str {\n \n /// Copy a slice into a new unique str\n #[inline(always)]\n-pub fn from_slice(s: &str) -> ~str {\n+pub fn to_owned(s: &str) -> ~str {\n     unsafe { raw::slice_bytes_owned(s, 0, len(s)) }\n }\n \n impl ToStr for ~str {\n     #[inline(always)]\n-    fn to_str(&self) -> ~str { from_slice(*self) }\n+    fn to_str(&self) -> ~str { to_owned(*self) }\n }\n impl<'self> ToStr for &'self str {\n     #[inline(always)]\n-    fn to_str(&self) -> ~str { from_slice(*self) }\n+    fn to_str(&self) -> ~str { to_owned(*self) }\n }\n impl ToStr for @str {\n     #[inline(always)]\n-    fn to_str(&self) -> ~str { from_slice(*self) }\n+    fn to_str(&self) -> ~str { to_owned(*self) }\n }\n \n /**\n@@ -511,7 +511,7 @@ Section: Transforming strings\n  */\n pub fn to_bytes(s: &str) -> ~[u8] {\n     unsafe {\n-        let mut v: ~[u8] = ::cast::transmute(from_slice(s));\n+        let mut v: ~[u8] = ::cast::transmute(to_owned(s));\n         vec::raw::set_len(&mut v, len(s));\n         v\n     }\n@@ -2438,7 +2438,7 @@ pub fn as_c_str<T>(s: &str, f: &fn(*libc::c_char) -> T) -> T {\n         // NB: len includes the trailing null.\n         assert!(len > 0);\n         if unsafe { *(ptr::offset(buf,len-1)) != 0 } {\n-            as_c_str(from_slice(s), f)\n+            as_c_str(to_owned(s), f)\n         } else {\n             f(buf as *libc::c_char)\n         }\n@@ -3069,7 +3069,7 @@ impl<'self> StrSlice<'self> for &'self str {\n \n \n     #[inline]\n-    fn to_owned(&self) -> ~str { from_slice(*self) }\n+    fn to_owned(&self) -> ~str { to_owned(*self) }\n \n     #[inline]\n     fn to_managed(&self) -> @str {\n@@ -3109,7 +3109,7 @@ impl OwnedStr for ~str {\n impl Clone for ~str {\n     #[inline(always)]\n     fn clone(&self) -> ~str {\n-        from_slice(*self)\n+        to_owned(*self)\n     }\n }\n "}, {"sha": "741644af4aa138fbc992166e04057e8b4f6f7bd9", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -167,7 +167,7 @@ pub fn from_elem<T:Copy>(n_elts: uint, t: T) -> ~[T] {\n }\n \n /// Creates a new unique vector with the same contents as the slice\n-pub fn from_slice<T:Copy>(t: &[T]) -> ~[T] {\n+pub fn to_owned<T:Copy>(t: &[T]) -> ~[T] {\n     from_fn(t.len(), |i| t[i])\n }\n \n@@ -3645,19 +3645,19 @@ mod tests {\n         let mut results: ~[~[int]];\n \n         results = ~[];\n-        for each_permutation(~[]) |v| { results.push(from_slice(v)); }\n+        for each_permutation(~[]) |v| { results.push(to_owned(v)); }\n         assert!(results == ~[~[]]);\n \n         results = ~[];\n-        for each_permutation(~[7]) |v| { results.push(from_slice(v)); }\n+        for each_permutation(~[7]) |v| { results.push(to_owned(v)); }\n         assert!(results == ~[~[7]]);\n \n         results = ~[];\n-        for each_permutation(~[1,1]) |v| { results.push(from_slice(v)); }\n+        for each_permutation(~[1,1]) |v| { results.push(to_owned(v)); }\n         assert!(results == ~[~[1,1],~[1,1]]);\n \n         results = ~[];\n-        for each_permutation(~[5,2,0]) |v| { results.push(from_slice(v)); }\n+        for each_permutation(~[5,2,0]) |v| { results.push(to_owned(v)); }\n         assert!(results ==\n             ~[~[5,2,0],~[5,0,2],~[2,5,0],~[2,0,5],~[0,5,2],~[0,2,5]]);\n     }"}, {"sha": "c75dc2979f1c07a3e32a9a7aadad89192aff4f25", "filename": "src/libfuzzer/fuzzer.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibfuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibfuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rc?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -316,7 +316,7 @@ pub fn check_variants_T<T:Copy>(crate: @ast::crate,\n     if L < 100 {\n         do under(uint::min(L, 20)) |i| {\n             error!(\"Replacing... #%?\", uint::to_str(i));\n-            let fname = str::from_slice(filename.to_str());\n+            let fname = str::to_owned(filename.to_str());\n             do under(uint::min(L, 30)) |j| {\n                 let fname = fname.to_str();\n                 error!(\"With... %?\", stringifier(things[j], intr));"}, {"sha": "983ac1f1aaa652989bf2c4de3c220bca5c5bf7da", "filename": "src/librust/rust.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibrust%2Frust.rc", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibrust%2Frust.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrust%2Frust.rc?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -192,7 +192,7 @@ fn do_command(command: &Command, args: &[~str]) -> ValidUsage {\n             let (prog, prog_args) = (words.head(), words.tail());\n             let exitstatus = run::run_program(\n                 *prog,\n-                vec::append(vec::from_slice(prog_args), args)\n+                vec::append(vec::to_owned(prog_args), args)\n             );\n             os::set_exit_status(exitstatus);\n             Valid"}, {"sha": "db41d9ad926eb3b066f6a82dfe9dc0922c21ab85", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -747,8 +747,8 @@ pub fn output_dll_filename(os: session::os, lm: LinkMeta) -> ~str {\n         session::os_android => (android::DLL_PREFIX, android::DLL_SUFFIX),\n         session::os_freebsd => (freebsd::DLL_PREFIX, freebsd::DLL_SUFFIX),\n     };\n-    return str::from_slice(dll_prefix) + libname +\n-           str::from_slice(dll_suffix);\n+    return str::to_owned(dll_prefix) + libname +\n+           str::to_owned(dll_suffix);\n }\n \n // If the user wants an exe generated we need to invoke"}, {"sha": "904a7ccb13f052a9965df2242599353427f90f81", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -91,9 +91,9 @@ pub fn default_configuration(sess: Session, argv0: @~str, input: &input) ->\n     };\n \n     return ~[ // Target bindings.\n-         attr::mk_word_item(@str::from_slice(os::FAMILY)),\n+         attr::mk_word_item(@str::to_owned(os::FAMILY)),\n          mk(@~\"target_os\", @tos),\n-         mk(@~\"target_family\", @str::from_slice(os::FAMILY)),\n+         mk(@~\"target_family\", @str::to_owned(os::FAMILY)),\n          mk(@~\"target_arch\", @arch),\n          mk(@~\"target_endian\", @end),\n          mk(@~\"target_word_size\", @wordsz),\n@@ -648,7 +648,7 @@ pub fn build_session_options(binary: @~str,\n     let linker_args = getopts::opt_strs(matches, ~\"link-args\").flat_map( |a| {\n         let mut args = ~[];\n         for str::each_split_char(*a, ' ') |arg| {\n-            args.push(str::from_slice(arg));\n+            args.push(str::to_owned(arg));\n         }\n         args\n     });"}, {"sha": "b8218bc4d4685948b24f2e85904f9d4591bfd25d", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -619,7 +619,7 @@ pub fn maybe_get_item_ast(intr: @ident_interner, cdata: cmd, tcx: ty::ctxt,\n     let item_doc = lookup_item(id, cdata.data);\n     let path = {\n         let item_path = item_path(intr, item_doc);\n-        vec::from_slice(item_path.init())\n+        vec::to_owned(item_path.init())\n     };\n     match decode_inlined_item(cdata, tcx, copy path, item_doc) {\n       Some(ref ii) => csearch::found((/*bad*/copy *ii)),"}, {"sha": "02f0cc6e42de520f54d10846207f0fa79fe7b2ea", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -1461,7 +1461,7 @@ pub fn encode_metadata(parms: EncodeParams, crate: &crate) -> ~[u8] {\n     //\n     // Should be:\n     //\n-    //   vec::from_slice(metadata_encoding_version) +\n+    //   vec::to_owned(metadata_encoding_version) +\n \n     let writer_bytes: &mut ~[u8] = wr.bytes;\n "}, {"sha": "9ef1f3e7b4161cc884a79204164c1dcca61a9007", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -101,7 +101,7 @@ pub fn mk_filesearch(maybe_sysroot: &Option<@Path>,\n     @FileSearchImpl {\n         sysroot: sysroot,\n         addl_lib_search_paths: addl_lib_search_paths,\n-        target_triple: str::from_slice(target_triple)\n+        target_triple: str::to_owned(target_triple)\n     } as @FileSearch\n }\n \n@@ -127,7 +127,7 @@ pub fn search<T:Copy>(filesearch: @FileSearch, pick: pick<T>) -> Option<T> {\n \n pub fn relative_target_lib_path(target_triple: &str) -> Path {\n     Path(libdir()).push_many([~\"rustc\",\n-                              str::from_slice(target_triple),\n+                              str::to_owned(target_triple),\n                               libdir()])\n }\n "}, {"sha": "d1510f31a9ece926b1e84bb969dfac74384e6f3f", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -71,7 +71,7 @@ fn libname(cx: &Context) -> (~str, ~str) {\n         os_freebsd => (freebsd::DLL_PREFIX, freebsd::DLL_SUFFIX),\n     };\n \n-    (str::from_slice(dll_prefix), str::from_slice(dll_suffix))\n+    (str::to_owned(dll_prefix), str::to_owned(dll_suffix))\n }\n \n fn find_library_crate_aux("}, {"sha": "330d30c17a80bce1fc47537e15be904b8f130b5d", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -488,7 +488,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                 match cx.tcx.def_map.find(&pat_id) {\n                     Some(&def_variant(_, id)) => {\n                         if variant(id) == *ctor_id {\n-                            Some(vec::from_slice(r.tail()))\n+                            Some(vec::to_owned(r.tail()))\n                         } else {\n                             None\n                         }\n@@ -507,7 +507,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                             _ => fail!(~\"type error\")\n                         };\n                         if match_ {\n-                            Some(vec::from_slice(r.tail()))\n+                            Some(vec::to_owned(r.tail()))\n                         } else {\n                             None\n                         }\n@@ -538,7 +538,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                             _ => fail!(~\"type error\")\n                         };\n                         if match_ {\n-                            Some(vec::from_slice(r.tail()))\n+                            Some(vec::to_owned(r.tail()))\n                         } else {\n                             None\n                         }\n@@ -548,7 +548,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                             Some(args) => args,\n                             None => vec::from_elem(arity, wild())\n                         };\n-                        Some(vec::append(args, vec::from_slice(r.tail())))\n+                        Some(vec::append(args, vec::to_owned(r.tail())))\n                     }\n                     def_variant(_, _) => None,\n \n@@ -560,7 +560,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                             Some(args) => new_args = args,\n                             None => new_args = vec::from_elem(arity, wild())\n                         }\n-                        Some(vec::append(new_args, vec::from_slice(r.tail())))\n+                        Some(vec::append(new_args, vec::to_owned(r.tail())))\n                     }\n                     _ => None\n                 }\n@@ -578,7 +578,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                                     _ => wild()\n                                 }\n                             });\n-                            Some(vec::append(args, vec::from_slice(r.tail())))\n+                            Some(vec::append(args, vec::to_owned(r.tail())))\n                         } else {\n                             None\n                         }\n@@ -608,7 +608,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                                 _ => wild()\n                             }\n                         });\n-                        Some(vec::append(args, vec::from_slice(r.tail())))\n+                        Some(vec::append(args, vec::to_owned(r.tail())))\n                     }\n                 }\n             }\n@@ -627,21 +627,21 @@ pub fn specialize(cx: @MatchCheckCtxt,\n                     single => true,\n                     _ => fail!(~\"type error\")\n                 };\n-                if match_ { Some(vec::from_slice(r.tail())) } else { None }\n+                if match_ { Some(vec::to_owned(r.tail())) } else { None }\n             }\n             pat_range(lo, hi) => {\n                 let (c_lo, c_hi) = match *ctor_id {\n                     val(ref v) => ((/*bad*/copy *v), (/*bad*/copy *v)),\n                     range(ref lo, ref hi) =>\n                         ((/*bad*/copy *lo), (/*bad*/copy *hi)),\n-                    single => return Some(vec::from_slice(r.tail())),\n+                    single => return Some(vec::to_owned(r.tail())),\n                     _ => fail!(~\"type error\")\n                 };\n                 let v_lo = eval_const_expr(cx.tcx, lo),\n                 v_hi = eval_const_expr(cx.tcx, hi);\n                 let match_ = compare_const_vals(&c_lo, &v_lo) >= 0 &&\n                     compare_const_vals(&c_hi, &v_hi) <= 0;\n-          if match_ { Some(vec::from_slice(r.tail())) } else { None }\n+          if match_ { Some(vec::to_owned(r.tail())) } else { None }\n       }\n             pat_vec(before, slice, after) => {\n                 match *ctor_id {\n@@ -674,7 +674,7 @@ pub fn specialize(cx: @MatchCheckCtxt,\n }\n \n pub fn default(cx: @MatchCheckCtxt, r: &[@pat]) -> Option<~[@pat]> {\n-    if is_wild(cx, r[0]) { Some(vec::from_slice(r.tail())) }\n+    if is_wild(cx, r[0]) { Some(vec::to_owned(r.tail())) }\n     else { None }\n }\n "}, {"sha": "3274503e303800946dca89f7f3a4c741cee79591", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -217,7 +217,7 @@ fn mk_struct(cx: @CrateContext, tys: &[ty::t], packed: bool) -> Struct {\n         size: machine::llsize_of_alloc(cx, llty_rec) /*bad*/as u64,\n         align: machine::llalign_of_min(cx, llty_rec) /*bad*/as u64,\n         packed: packed,\n-        fields: vec::from_slice(tys)\n+        fields: vec::to_owned(tys)\n     }\n }\n "}, {"sha": "3af58cfcadc3bf902b91e5316372544cfc9d83a5", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -104,7 +104,7 @@ impl get_insn_ctxt for @CrateContext {\n     fn insn_ctxt(&self, s: &str) -> icx_popper {\n         debug!(\"new insn_ctxt: %s\", s);\n         if self.sess.count_llvm_insns() {\n-            self.stats.llvm_insn_ctxt.push(str::from_slice(s));\n+            self.stats.llvm_insn_ctxt.push(str::to_owned(s));\n         }\n         icx_popper(*self)\n     }"}, {"sha": "702d62f136348cde1d99beff3d74b79da881fc54", "filename": "src/librustc/middle/trans/cabi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -71,8 +71,8 @@ pub impl FnType {\n             let llretptr = GEPi(bcx, llargbundle, [0u, n]);\n             let llretloc = Load(bcx, llretptr);\n                 llargvals = ~[llretloc];\n-                atys = vec::from_slice(atys.tail());\n-                attrs = vec::from_slice(attrs.tail());\n+                atys = vec::to_owned(atys.tail());\n+                attrs = vec::to_owned(attrs.tail());\n         }\n \n         while i < n {\n@@ -137,8 +137,8 @@ pub impl FnType {\n         let mut attrs = /*bad*/copy self.attrs;\n         let mut j = 0u;\n         let llretptr = if self.sret {\n-            atys = vec::from_slice(atys.tail());\n-            attrs = vec::from_slice(attrs.tail());\n+            atys = vec::to_owned(atys.tail());\n+            attrs = vec::to_owned(attrs.tail());\n             j = 1u;\n             get_param(llwrapfn, 0u)\n         } else if self.ret_ty.cast {"}, {"sha": "7e355f7192f09f324ee68d5c234d1e4f7d71ce5c", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -4018,7 +4018,7 @@ pub fn item_path(cx: ctxt, id: ast::def_id) -> ast_map::path {\n           }\n \n           ast_map::node_variant(ref variant, _, path) => {\n-            vec::append_one(vec::from_slice(vec::init(*path)),\n+            vec::append_one(vec::to_owned(vec::init(*path)),\n                             ast_map::path_name((*variant).node.name))\n           }\n "}, {"sha": "278f77135f9f52fa0a17969a0278e438908d5b94", "filename": "src/librustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -129,13 +129,13 @@ fn first_sentence_(s: &str) -> ~str {\n     };\n     match idx {\n         Some(idx) if idx > 2u => {\n-            str::from_slice(str::slice(s, 0, idx - 1))\n+            str::to_owned(str::slice(s, 0, idx - 1))\n         }\n         _ => {\n             if str::ends_with(s, ~\".\") {\n-                str::from_slice(s)\n+                str::to_owned(s)\n             } else {\n-                str::from_slice(s)\n+                str::to_owned(s)\n             }\n         }\n     }"}, {"sha": "6547ff8eefbb914231ef25dec80e4aeac8bb2dd5", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -442,7 +442,7 @@ pub mod flatteners {\n                               T: Decodable<D>>(\n                               buf: &[u8])\n                               -> T {\n-        let buf = vec::from_slice(buf);\n+        let buf = vec::to_owned(buf);\n         let buf_reader = @BufReader::new(buf);\n         let reader = buf_reader as @Reader;\n         let mut deser: D = FromReader::from_reader(reader);"}, {"sha": "f66b56381f0f4dbd8cf1720d0b0fbb21a6d98b08", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -106,7 +106,7 @@ pub struct Opt {\n }\n \n fn mkname(nm: &str) -> Name {\n-    let unm = str::from_slice(nm);\n+    let unm = str::to_owned(nm);\n     return if nm.len() == 1u {\n             Short(str::char_at(unm, 0u))\n         } else { Long(unm) };\n@@ -339,7 +339,7 @@ pub fn getopts(args: &[~str], opts: &[Opt]) -> Result {\n         }\n         i += 1;\n     }\n-    return Ok(Matches {opts: vec::from_slice(opts),\n+    return Ok(Matches {opts: vec::to_owned(opts),\n                vals: vals,\n                free: free});\n }\n@@ -441,7 +441,7 @@ pub fn opt_default(mm: &Matches, nm: &str, def: &str) -> Option<~str> {\n     let vals = opt_vals(mm, nm);\n     if vec::len::<Optval>(vals) == 0u { return None::<~str>; }\n     return match vals[0] { Val(copy s) => Some::<~str>(s),\n-                           _      => Some::<~str>(str::from_slice(def)) }\n+                           _      => Some::<~str>(str::to_owned(def)) }\n }\n \n #[deriving(Eq)]\n@@ -481,10 +481,10 @@ pub mod groups {\n                   desc: &str, hint: &str) -> OptGroup {\n         let len = short_name.len();\n         assert!(len == 1 || len == 0);\n-        return OptGroup { short_name: str::from_slice(short_name),\n-                long_name: str::from_slice(long_name),\n-                hint: str::from_slice(hint),\n-                desc: str::from_slice(desc),\n+        return OptGroup { short_name: str::to_owned(short_name),\n+                long_name: str::to_owned(long_name),\n+                hint: str::to_owned(hint),\n+                desc: str::to_owned(desc),\n                 hasarg: Yes,\n                 occur: Req};\n     }\n@@ -494,10 +494,10 @@ pub mod groups {\n                   desc: &str, hint: &str) -> OptGroup {\n         let len = short_name.len();\n         assert!(len == 1 || len == 0);\n-        return OptGroup {short_name: str::from_slice(short_name),\n-                long_name: str::from_slice(long_name),\n-                hint: str::from_slice(hint),\n-                desc: str::from_slice(desc),\n+        return OptGroup {short_name: str::to_owned(short_name),\n+                long_name: str::to_owned(long_name),\n+                hint: str::to_owned(hint),\n+                desc: str::to_owned(desc),\n                 hasarg: Yes,\n                 occur: Optional};\n     }\n@@ -507,10 +507,10 @@ pub mod groups {\n                    desc: &str) -> OptGroup {\n         let len = short_name.len();\n         assert!(len == 1 || len == 0);\n-        return OptGroup {short_name: str::from_slice(short_name),\n-                long_name: str::from_slice(long_name),\n+        return OptGroup {short_name: str::to_owned(short_name),\n+                long_name: str::to_owned(long_name),\n                 hint: ~\"\",\n-                desc: str::from_slice(desc),\n+                desc: str::to_owned(desc),\n                 hasarg: No,\n                 occur: Optional};\n     }\n@@ -520,10 +520,10 @@ pub mod groups {\n                       desc: &str, hint: &str) -> OptGroup {\n         let len = short_name.len();\n         assert!(len == 1 || len == 0);\n-        return OptGroup {short_name: str::from_slice(short_name),\n-                long_name: str::from_slice(long_name),\n-                hint: str::from_slice(hint),\n-                desc: str::from_slice(desc),\n+        return OptGroup {short_name: str::to_owned(short_name),\n+                long_name: str::to_owned(long_name),\n+                hint: str::to_owned(hint),\n+                desc: str::to_owned(desc),\n                 hasarg: Maybe,\n                 occur: Optional};\n     }\n@@ -536,10 +536,10 @@ pub mod groups {\n                     desc: &str, hint: &str) -> OptGroup {\n         let len = short_name.len();\n         assert!(len == 1 || len == 0);\n-        return OptGroup {short_name: str::from_slice(short_name),\n-                long_name: str::from_slice(long_name),\n-                hint: str::from_slice(hint),\n-                desc: str::from_slice(desc),\n+        return OptGroup {short_name: str::to_owned(short_name),\n+                long_name: str::to_owned(long_name),\n+                hint: str::to_owned(hint),\n+                desc: str::to_owned(desc),\n                 hasarg: Yes,\n                 occur: Multi};\n     }\n@@ -648,7 +648,7 @@ pub mod groups {\n             row\n         });\n \n-        return str::from_slice(brief)    +\n+        return str::to_owned(brief)    +\n                ~\"\\n\\nOptions:\\n\"         +\n                str::connect(rows, ~\"\\n\") +\n                ~\"\\n\\n\";"}, {"sha": "71b62ca36a5ee5f66802bb96b53b27cc220fef2d", "filename": "src/libstd/md4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibstd%2Fmd4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibstd%2Fmd4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmd4.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -26,7 +26,7 @@ pub fn md4(msg: &[u8]) -> Quad {\n     let orig_len: u64 = (vec::len(msg) * 8u) as u64;\n \n     // pad message\n-    let mut msg = vec::append(vec::from_slice(msg), ~[0x80u8]);\n+    let mut msg = vec::append(vec::to_owned(msg), ~[0x80u8]);\n     let mut bitlen = orig_len + 8u64;\n     while (bitlen + 64u64) % 512u64 > 0u64 {\n         msg.push(0u8);"}, {"sha": "58775c5f2e48f756fcab9b2eb1a6ddc5b9f19191", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -225,7 +225,7 @@ pub mod v4 {\n             let input_is_inaddr_none =\n                 result::get(&ip_rep_result).as_u32() == INADDR_NONE;\n \n-            let new_addr = uv_ip4_addr(str::from_slice(ip), 22);\n+            let new_addr = uv_ip4_addr(str::to_owned(ip), 22);\n             let reformatted_name = uv_ip4_name(&new_addr);\n             debug!(\"try_parse_addr: input ip: %s reparsed ip: %s\",\n                             ip, reformatted_name);\n@@ -278,7 +278,7 @@ pub mod v6 {\n     pub fn try_parse_addr(ip: &str) -> result::Result<IpAddr,ParseAddrErr> {\n         unsafe {\n             // need to figure out how to establish a parse failure..\n-            let new_addr = uv_ip6_addr(str::from_slice(ip), 22);\n+            let new_addr = uv_ip6_addr(str::to_owned(ip), 22);\n             let reparsed_name = uv_ip6_name(&new_addr);\n             debug!(\"v6::try_parse_addr ip: '%s' reparsed '%s'\",\n                             ip, reparsed_name);"}, {"sha": "e64e97adfa30876284abbea4af5d56feadb0f7d8", "filename": "src/libstd/num/bigint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibstd%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibstd%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fbigint.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -541,7 +541,7 @@ impl BigUint {\n     /// Creates and initializes an BigUint.\n     #[inline(always)]\n     pub fn from_slice(slice: &[BigDigit]) -> BigUint {\n-        return BigUint::new(vec::from_slice(slice));\n+        return BigUint::new(vec::to_owned(slice));\n     }\n \n     /// Creates and initializes an BigUint."}, {"sha": "25323b4e1db8e024c1b5abbf97bda022010dee39", "filename": "src/libstd/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibstd%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibstd%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstats.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -52,7 +52,7 @@ impl<'self> Stats for &'self [f64] {\n \n     fn median(self) -> f64 {\n         assert!(self.len() != 0);\n-        let mut tmp = vec::from_slice(self);\n+        let mut tmp = vec::to_owned(self);\n         sort::tim_sort(tmp);\n         if tmp.len() & 1 == 0 {\n             let m = tmp.len() / 2;"}, {"sha": "e731f679221fdaabc782a4369c079220c8de154e", "filename": "src/libstd/time.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -289,7 +289,7 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n \n         let mut i = 0u;\n         while i < digits {\n-            let range = str::char_range_at(str::from_slice(ss), pos);\n+            let range = str::char_range_at(str::to_owned(ss), pos);\n             pos = range.next;\n \n             match range.ch {\n@@ -628,7 +628,7 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n         }\n     }\n \n-    do io::with_str_reader(str::from_slice(format)) |rdr| {\n+    do io::with_str_reader(str::to_owned(format)) |rdr| {\n         let mut tm = Tm {\n             tm_sec: 0_i32,\n             tm_min: 0_i32,\n@@ -840,7 +840,7 @@ priv fn do_strftime(format: &str, tm: &Tm) -> ~str {\n \n     let mut buf = ~\"\";\n \n-    do io::with_str_reader(str::from_slice(format)) |rdr| {\n+    do io::with_str_reader(str::to_owned(format)) |rdr| {\n         while !rdr.eof() {\n             match rdr.read_char() {\n                 '%' => buf += parse_type(rdr.read_char(), tm),\n@@ -1022,7 +1022,7 @@ mod tests {\n \n         fn test(s: &str, format: &str) -> bool {\n             match strptime(s, format) {\n-              Ok(ref tm) => tm.strftime(format) == str::from_slice(s),\n+              Ok(ref tm) => tm.strftime(format) == str::to_owned(s),\n               Err(copy e) => fail!(e)\n             }\n         }"}, {"sha": "aebe5bbfc748a681e59dabb350920158db6b8677", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -255,7 +255,7 @@ pub fn last_meta_item_list_by_name(items: ~[@ast::meta_item], name: &str)\n \n pub fn sort_meta_items(items: &[@ast::meta_item]) -> ~[@ast::meta_item] {\n     // This is sort of stupid here, converting to a vec of mutables and back\n-    let mut v = vec::from_slice(items);\n+    let mut v = vec::to_owned(items);\n     do std::sort::quick_sort(v) |ma, mb| {\n         get_meta_item_name(*ma) <= get_meta_item_name(*mb)\n     }"}, {"sha": "00c178b6d7c160d33bf0180f2e40dfdc3bfc88e7", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -41,7 +41,7 @@ pub fn expand_asm(cx: @ext_ctxt, sp: span, tts: &[ast::token_tree])\n                -> base::MacResult {\n     let p = parse::new_parser_from_tts(cx.parse_sess(),\n                                        cx.cfg(),\n-                                       vec::from_slice(tts));\n+                                       vec::to_owned(tts));\n \n     let mut asm = ~\"\";\n     let mut outputs = ~[];"}, {"sha": "95e858f6143a3b67132441f51d5cc07f8c4d9090", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -386,7 +386,7 @@ pub fn get_exprs_from_tts(cx: @ext_ctxt, tts: &[ast::token_tree])\n                        -> ~[@ast::expr] {\n     let p = parse::new_parser_from_tts(cx.parse_sess(),\n                                        cx.cfg(),\n-                                       vec::from_slice(tts));\n+                                       vec::to_owned(tts));\n     let mut es = ~[];\n     while *p.token != token::EOF {\n         if es.len() != 0 {"}, {"sha": "76d9a9420ce509f2ef51a6d7892d6d590962e089", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -22,7 +22,7 @@ pub fn expand_syntax_ext(cx: @ext_ctxt,\n     cx.print_backtrace();\n     io::stdout().write_line(\n         print::pprust::tt_to_str(\n-            ast::tt_delim(vec::from_slice(tt)),\n+            ast::tt_delim(vec::to_owned(tt)),\n             cx.parse_sess().interner));\n \n     //trivial expression"}, {"sha": "9344a49c9a9ebc91baa6e331ee202dd2d7c0f955", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -123,7 +123,7 @@ pub mod rt {\n \n     impl<'self> ToSource for &'self str {\n         fn to_source(&self, _cx: @ext_ctxt) -> ~str {\n-            let lit = dummy_spanned(ast::lit_str(@str::from_slice(*self)));\n+            let lit = dummy_spanned(ast::lit_str(@str::to_owned(*self)));\n             pprust::lit_to_str(@lit)\n         }\n     }\n@@ -669,7 +669,7 @@ fn expand_tts(cx: @ext_ctxt,\n     let p = parse::new_parser_from_tts(\n         cx.parse_sess(),\n         cx.cfg(),\n-        vec::from_slice(tts)\n+        vec::to_owned(tts)\n     );\n     *p.quote_depth += 1u;\n     let tts = p.parse_all_token_trees();"}, {"sha": "9660afb1bc08d273ebba0ceaaec820b8f06fb585", "filename": "src/libsyntax/ext/trace_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftrace_macros.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -25,7 +25,7 @@ pub fn expand_trace_macros(cx: @ext_ctxt,\n         copy cx.parse_sess().span_diagnostic,\n         cx.parse_sess().interner,\n         None,\n-        vec::from_slice(tt)\n+        vec::to_owned(tt)\n     );\n     let rdr = tt_rdr as @reader;\n     let rust_parser = Parser("}, {"sha": "169652b1120373a633bba063dff677e897c40006", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -82,7 +82,7 @@ pub fn add_new_extension(cx: @ext_ctxt,\n             io::println(fmt!(\"%s! { %s }\",\n                              cx.str_of(name),\n                              print::pprust::tt_to_str(\n-                                 ast::tt_delim(vec::from_slice(arg)),\n+                                 ast::tt_delim(vec::to_owned(arg)),\n                                  cx.parse_sess().interner)));\n         }\n \n@@ -101,7 +101,7 @@ pub fn add_new_extension(cx: @ext_ctxt,\n                     s_d,\n                     itr,\n                     None,\n-                    vec::from_slice(arg)\n+                    vec::to_owned(arg)\n                 ) as @reader;\n                 match parse(cx.parse_sess(), cx.cfg(), arg_rdr, (*mtcs)) {\n                   success(named_matches) => {"}, {"sha": "884459cf069f45ae62a52a808fd062c046778973", "filename": "src/test/run-pass/struct-order-of-eval-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-1.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -12,5 +12,5 @@ struct S { f0: ~str, f1: int }\n \n pub fn main() {\n     let s = ~\"Hello, world!\";\n-    let _s = S { f0: str::from_slice(s), ..S { f0: s, f1: 23 } };\n+    let _s = S { f0: str::to_owned(s), ..S { f0: s, f1: 23 } };\n }"}, {"sha": "419c4ac3942f8c49ba670f68e49ceb33fc1a980a", "filename": "src/test/run-pass/struct-order-of-eval-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/957251817bb78f1f0e2f9e6efdb827b43c773ac4/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-2.rs?ref=957251817bb78f1f0e2f9e6efdb827b43c773ac4", "patch": "@@ -12,5 +12,5 @@ struct S { f0: ~str, f1: ~str }\n \n pub fn main() {\n     let s = ~\"Hello, world!\";\n-    let _s = S { f1: str::from_slice(s), f0: s };\n+    let _s = S { f1: str::to_owned(s), f0: s };\n }"}]}