{"sha": "8ab075ee456fd426090d5927d6fa53677988aa51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYjA3NWVlNDU2ZmQ0MjYwOTBkNTkyN2Q2ZmE1MzY3Nzk4OGFhNTE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-03-11T04:35:41Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-03-11T04:35:41Z"}, "message": "Clean up occurs check code and give non-breaking loop {..}s _|_ type\n\nThe latter change is so that code dominated by a loop{ } without a\nbreak gets considered unreachable.\n\nThe former change is just cosmetic (occurs_check_fails was a predicate\nwhen it should be a unit-typed function that can fail).", "tree": {"sha": "68342aa9a1332ea0a2e619abbfa9633b2d900fa4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68342aa9a1332ea0a2e619abbfa9633b2d900fa4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ab075ee456fd426090d5927d6fa53677988aa51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ab075ee456fd426090d5927d6fa53677988aa51", "html_url": "https://github.com/rust-lang/rust/commit/8ab075ee456fd426090d5927d6fa53677988aa51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ab075ee456fd426090d5927d6fa53677988aa51/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "205cefdc6e0e53c6df8075b5c37edd4e0803a598", "url": "https://api.github.com/repos/rust-lang/rust/commits/205cefdc6e0e53c6df8075b5c37edd4e0803a598", "html_url": "https://github.com/rust-lang/rust/commit/205cefdc6e0e53c6df8075b5c37edd4e0803a598"}], "stats": {"total": 30, "additions": 11, "deletions": 19}, "files": [{"sha": "800caaf639c07004fdae4fde2a73967b04b54526", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8ab075ee456fd426090d5927d6fa53677988aa51/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab075ee456fd426090d5927d6fa53677988aa51/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=8ab075ee456fd426090d5927d6fa53677988aa51", "patch": "@@ -125,7 +125,7 @@ export set_default_mode;\n export unify;\n export variant_info;\n export walk_ty;\n-export occurs_check_fails;\n+export occurs_check;\n export closure_kind;\n export ck_block;\n export ck_box;\n@@ -1088,7 +1088,7 @@ fn vars_in_type(cx: ctxt, ty: t) -> [int] {\n \n fn type_autoderef(cx: ctxt, t: t) -> t {\n     let t1 = t;\n-    while true {\n+    loop {\n         alt get(t1).struct {\n           ty_box(mt) | ty_uniq(mt) { t1 = mt.ty; }\n           ty_res(_, inner, tps) {\n@@ -1427,28 +1427,22 @@ fn sort_methods(meths: [method]) -> [method] {\n     ret std::sort::merge_sort(bind method_lteq(_, _), meths);\n }\n \n-fn occurs_check_fails(tcx: ctxt, sp: option<span>, vid: int, rt: t) ->\n-   bool {\n+fn occurs_check(tcx: ctxt, sp: span, vid: int, rt: t) {\n     // Fast path\n-    if !type_has_vars(rt) { ret false; }\n+    if !type_has_vars(rt) { ret; }\n \n     // Occurs check!\n     if vec::contains(vars_in_type(tcx, rt), vid) {\n-        alt sp {\n-          some(s) {\n             // Maybe this should be span_err -- however, there's an\n             // assertion later on that the type doesn't contain\n             // variables, so in this case we have to be sure to die.\n             tcx.sess.span_fatal\n-                (s, \"type inference failed because I \\\n+                (sp, \"type inference failed because I \\\n                      could not find a type\\n that's both of the form \"\n                  + ty_to_str(tcx, mk_var(tcx, vid)) +\n                  \" and of the form \" + ty_to_str(tcx, rt) +\n                  \" - such a type would have to be infinitely large.\");\n-          }\n-          _ { ret true; }\n-        }\n-    } else { ret false; }\n+    }\n }\n \n // Maintains a little union-set tree for inferred modes.  `canon()` returns"}, {"sha": "0b99b400068d39bd5a0c3b2828a4e55ad2d5b580", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8ab075ee456fd426090d5927d6fa53677988aa51/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab075ee456fd426090d5927d6fa53677988aa51/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=8ab075ee456fd426090d5927d6fa53677988aa51", "patch": "@@ -1005,15 +1005,13 @@ mod unify {\n // instead of ty::struct.\n fn do_autoderef(fcx: @fn_ctxt, sp: span, t: ty::t) -> ty::t {\n     let t1 = t;\n-    while true {\n+    loop {\n         alt structure_of(fcx, sp, t1) {\n           ty::ty_box(inner) | ty::ty_uniq(inner) {\n             alt ty::get(t1).struct {\n               ty::ty_var(v1) {\n-                if ty::occurs_check_fails(fcx.ccx.tcx, some(sp), v1,\n-                                          ty::mk_box(fcx.ccx.tcx, inner)) {\n-                    break;\n-                }\n+                ty::occurs_check(fcx.ccx.tcx, sp, v1,\n+                                 ty::mk_box(fcx.ccx.tcx, inner));\n               }\n               _ { }\n             }\n@@ -1033,8 +1031,7 @@ fn do_autoderef(fcx: @fn_ctxt, sp: span, t: ty::t) -> ty::t {\n           }\n           _ { ret t1; }\n         }\n-    }\n-    core::unreachable();\n+    };\n }\n \n fn resolve_type_vars_if_possible(fcx: @fn_ctxt, typ: ty::t) -> ty::t {\n@@ -2326,6 +2323,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n       ast::expr_loop(body) {\n           check_block_no_value(fcx, body);\n           write_ty(tcx, id, ty::mk_nil(tcx));\n+          bot = !may_break(body);\n       }\n       ast::expr_alt(expr, arms, _) {\n         bot = check_expr(fcx, expr);"}]}