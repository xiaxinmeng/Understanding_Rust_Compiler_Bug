{"sha": "6065867a7e4379a12e495912a41318f871104270", "node_id": "C_kwDOAAsO6NoAKDYwNjU4NjdhN2U0Mzc5YTEyZTQ5NTkxMmE0MTMxOGY4NzExMDQyNzA", "commit": {"author": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "me@fmease.dev", "date": "2023-02-17T15:58:18Z"}, "committer": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "me@fmease.dev", "date": "2023-02-19T17:35:35Z"}, "message": "Use InferCtxt::probe to properly detect ambiguous candidates", "tree": {"sha": "095b05e57a8486ac81744e40bcb9102b3dfb3339", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/095b05e57a8486ac81744e40bcb9102b3dfb3339"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6065867a7e4379a12e495912a41318f871104270", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXSQFaHGAjVoD5I3F0XoHIV9o5xMFAmPyXecACgkQ0XoHIV9o\n5xMTnxAAiRZnd8fzmgAEw2Xwvu9Mj7CJ400+pi1Z2S44UQ+ZtIyAkCCKhJlMU53j\nDHQ5kXnF98IRtEeFPz/9pvPdw2AO0JT/rFWbKyt0U0MaDkwDTqwA6oYdWQCtMg1S\nlGLVqhYI3hqqACcbVOWFmI0qtbI63VQdA2rwgHxu6CjjQe8QJGaUufG0beptbq4j\nmx2bzWa5Nqg1KG33wfiXGYHmmwQ4rxXNDoK+HwXlgFV5deeV/9zyFKCLbMKgO/FF\nuRvzyfycD12kyjDH0trGb4g8g9OfLI71pAvLh+NKj8KQxiyzrWC7ZEKYrNjD/Xs/\n9lQHjl308Zd7a+R7un01G4SCnqXNCiAk/Jy1oZkfVyYhb/vT/4ieDxtCKnet6E4s\nmv83m9hRAto4LBzj5Ywicd+ClmRDe8ZOf0lyrgItZXPYH5P2Pf6eaws3UpL+3SH0\nJmIWphr6q7FncG9nvEL028pNYyl6FeUr5RqY/3fKV8KZ+SD584TbrpsavDVQckcz\nASsDVksecrSQmvC804AAKgAO87VYQlatT/i4Vomsb1DOiavdfLHtpGAH8ahs6E8x\nSAV/qnvolPrzj+c5zbbwVWr56HFEfDHlZA3mMlVyqAC70Ubm1066C4tK4+jnQrWl\n5AweDiv8bjV0WOhcF5F8Qvoi2zJAsItGPtpA7YB6gL8GAPBy/YE=\n=TqY4\n-----END PGP SIGNATURE-----", "payload": "tree 095b05e57a8486ac81744e40bcb9102b3dfb3339\nparent 3dc38fbc9115f0e8cf61848938e05e1964ee29bf\nauthor Le\u00f3n Orell Valerian Liehr <me@fmease.dev> 1676649498 +0100\ncommitter Le\u00f3n Orell Valerian Liehr <me@fmease.dev> 1676828135 +0100\n\nUse InferCtxt::probe to properly detect ambiguous candidates\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6065867a7e4379a12e495912a41318f871104270", "html_url": "https://github.com/rust-lang/rust/commit/6065867a7e4379a12e495912a41318f871104270", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6065867a7e4379a12e495912a41318f871104270/comments", "author": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dc38fbc9115f0e8cf61848938e05e1964ee29bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dc38fbc9115f0e8cf61848938e05e1964ee29bf", "html_url": "https://github.com/rust-lang/rust/commit/3dc38fbc9115f0e8cf61848938e05e1964ee29bf"}], "stats": {"total": 83, "additions": 62, "deletions": 21}, "files": [{"sha": "c22ebc1c659937ec1170aa1f49f81a2003789533", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6065867a7e4379a12e495912a41318f871104270/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6065867a7e4379a12e495912a41318f871104270/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=6065867a7e4379a12e495912a41318f871104270", "patch": "@@ -2235,35 +2235,40 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let mut applicable_candidates: Vec<_> = candidates\n             .iter()\n             .filter_map(|&(impl_, (assoc_item, def_scope))| {\n-                let ocx = ObligationCtxt::new(&infcx);\n+                infcx.probe(|_| {\n+                    let ocx = ObligationCtxt::new_in_snapshot(&infcx);\n \n-                let impl_ty = tcx.type_of(impl_);\n-                let impl_substs = self.fresh_item_substs(impl_, &infcx);\n-                let impl_ty = impl_ty.subst(tcx, impl_substs);\n-                let impl_ty = ocx.normalize(&cause, param_env, impl_ty);\n+                    let impl_ty = tcx.type_of(impl_);\n+                    let impl_substs = self.fresh_item_substs(impl_, &infcx);\n+                    let impl_ty = impl_ty.subst(tcx, impl_substs);\n+                    let impl_ty = ocx.normalize(&cause, param_env, impl_ty);\n \n-                // Check that the Self-types can be related.\n-                // FIXME(fmease): Should we use `eq` here?\n-                ocx.sup(&ObligationCause::dummy(), param_env, impl_ty, self_ty).ok()?;\n+                    // Check that the Self-types can be related.\n+                    // FIXME(fmease): Should we use `eq` here?\n+                    ocx.sup(&ObligationCause::dummy(), param_env, impl_ty, self_ty).ok()?;\n \n-                // Check whether the impl imposes obligations we have to worry about.\n-                let impl_bounds = tcx.predicates_of(impl_);\n-                let impl_bounds = impl_bounds.instantiate(tcx, impl_substs);\n+                    // Check whether the impl imposes obligations we have to worry about.\n+                    let impl_bounds = tcx.predicates_of(impl_);\n+                    let impl_bounds = impl_bounds.instantiate(tcx, impl_substs);\n \n-                let impl_bounds = ocx.normalize(&cause, param_env, impl_bounds);\n+                    let impl_bounds = ocx.normalize(&cause, param_env, impl_bounds);\n \n-                let impl_obligations =\n-                    traits::predicates_for_generics(|_, _| cause.clone(), param_env, impl_bounds);\n+                    let impl_obligations = traits::predicates_for_generics(\n+                        |_, _| cause.clone(),\n+                        param_env,\n+                        impl_bounds,\n+                    );\n \n-                ocx.register_obligations(impl_obligations);\n+                    ocx.register_obligations(impl_obligations);\n \n-                let errors = ocx.select_where_possible();\n-                if !errors.is_empty() {\n-                    fulfillment_errors = errors;\n-                    return None;\n-                }\n+                    let errors = ocx.select_where_possible();\n+                    if !errors.is_empty() {\n+                        fulfillment_errors = errors;\n+                        return None;\n+                    }\n \n-                Some((assoc_item, def_scope))\n+                    Some((assoc_item, def_scope))\n+                })\n             })\n             .collect();\n "}, {"sha": "73920555b3e0415982d5526cee4c1c81ff9bfe99", "filename": "tests/ui/associated-inherent-types/ambiguity.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6065867a7e4379a12e495912a41318f871104270/tests%2Fui%2Fassociated-inherent-types%2Fambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6065867a7e4379a12e495912a41318f871104270/tests%2Fui%2Fassociated-inherent-types%2Fambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fambiguity.rs?ref=6065867a7e4379a12e495912a41318f871104270", "patch": "@@ -0,0 +1,16 @@\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+struct Wrapper<T>(T);\n+\n+impl Wrapper<i32> {\n+    type Foo = i32;\n+}\n+\n+impl Wrapper<()> {\n+    type Foo = ();\n+}\n+\n+fn main() {\n+    let _: Wrapper<_>::Foo = (); //~ ERROR multiple applicable items in scope\n+}"}, {"sha": "155c296cbb3c424b2a40b32a6e26d5b14e930e48", "filename": "tests/ui/associated-inherent-types/ambiguity.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6065867a7e4379a12e495912a41318f871104270/tests%2Fui%2Fassociated-inherent-types%2Fambiguity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6065867a7e4379a12e495912a41318f871104270/tests%2Fui%2Fassociated-inherent-types%2Fambiguity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fambiguity.stderr?ref=6065867a7e4379a12e495912a41318f871104270", "patch": "@@ -0,0 +1,20 @@\n+error[E0034]: multiple applicable items in scope\n+  --> $DIR/ambiguity.rs:15:24\n+   |\n+LL |     let _: Wrapper<_>::Foo = ();\n+   |                        ^^^ multiple `Foo` found\n+   |\n+note: candidate #1 is defined in an impl for the type `Wrapper<i32>`\n+  --> $DIR/ambiguity.rs:7:5\n+   |\n+LL |     type Foo = i32;\n+   |     ^^^^^^^^\n+note: candidate #2 is defined in an impl for the type `Wrapper<()>`\n+  --> $DIR/ambiguity.rs:11:5\n+   |\n+LL |     type Foo = ();\n+   |     ^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0034`."}]}