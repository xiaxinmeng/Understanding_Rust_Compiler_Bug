{"sha": "266ca31f74ae343fc773b88f3bb77b601034babf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NmNhMzFmNzRhZTM0M2ZjNzczYjg4ZjNiYjc3YjYwMTAzNGJhYmY=", "commit": {"author": {"name": "Steven Malis", "email": "smmalis37@gmail.com", "date": "2019-03-13T04:00:37Z"}, "committer": {"name": "Steven Malis", "email": "smmalis37@gmail.com", "date": "2019-03-13T04:00:37Z"}, "message": "Stabilize Range*::contains.", "tree": {"sha": "8f3c89792d65115bc4c4db963fc0982d191a3df0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f3c89792d65115bc4c4db963fc0982d191a3df0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/266ca31f74ae343fc773b88f3bb77b601034babf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/266ca31f74ae343fc773b88f3bb77b601034babf", "html_url": "https://github.com/rust-lang/rust/commit/266ca31f74ae343fc773b88f3bb77b601034babf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/266ca31f74ae343fc773b88f3bb77b601034babf/comments", "author": {"login": "smmalis37", "id": 4054472, "node_id": "MDQ6VXNlcjQwNTQ0NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/4054472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smmalis37", "html_url": "https://github.com/smmalis37", "followers_url": "https://api.github.com/users/smmalis37/followers", "following_url": "https://api.github.com/users/smmalis37/following{/other_user}", "gists_url": "https://api.github.com/users/smmalis37/gists{/gist_id}", "starred_url": "https://api.github.com/users/smmalis37/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smmalis37/subscriptions", "organizations_url": "https://api.github.com/users/smmalis37/orgs", "repos_url": "https://api.github.com/users/smmalis37/repos", "events_url": "https://api.github.com/users/smmalis37/events{/privacy}", "received_events_url": "https://api.github.com/users/smmalis37/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smmalis37", "id": 4054472, "node_id": "MDQ6VXNlcjQwNTQ0NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/4054472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smmalis37", "html_url": "https://github.com/smmalis37", "followers_url": "https://api.github.com/users/smmalis37/followers", "following_url": "https://api.github.com/users/smmalis37/following{/other_user}", "gists_url": "https://api.github.com/users/smmalis37/gists{/gist_id}", "starred_url": "https://api.github.com/users/smmalis37/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smmalis37/subscriptions", "organizations_url": "https://api.github.com/users/smmalis37/orgs", "repos_url": "https://api.github.com/users/smmalis37/repos", "events_url": "https://api.github.com/users/smmalis37/events{/privacy}", "received_events_url": "https://api.github.com/users/smmalis37/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f4c226fc5b3b0c0d120bb3117089557ef35acc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f4c226fc5b3b0c0d120bb3117089557ef35acc1", "html_url": "https://github.com/rust-lang/rust/commit/8f4c226fc5b3b0c0d120bb3117089557ef35acc1"}], "stats": {"total": 54, "additions": 20, "deletions": 34}, "files": [{"sha": "cb82ad38eb87d12e06496c91db0a020080407879", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 19, "deletions": 30, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/266ca31f74ae343fc773b88f3bb77b601034babf/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266ca31f74ae343fc773b88f3bb77b601034babf/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=266ca31f74ae343fc773b88f3bb77b601034babf", "patch": "@@ -67,7 +67,7 @@ impl fmt::Debug for RangeFull {\n /// assert_eq!(arr[1..3], [     'b', 'c'     ]);  // Range\n /// ```\n #[doc(alias = \"..\")]\n-#[derive(Clone, PartialEq, Eq, Hash)]  // not Copy -- see #27186\n+#[derive(Clone, PartialEq, Eq, Hash)] // not Copy -- see #27186\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Range<Idx> {\n     /// The lower bound of the range (inclusive).\n@@ -91,8 +91,6 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(range_contains)]\n-    ///\n     /// use std::f32;\n     ///\n     /// assert!(!(3..5).contains(&2));\n@@ -108,7 +106,7 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n     /// assert!(!(0.0..f32::NAN).contains(&0.5));\n     /// assert!(!(f32::NAN..1.0).contains(&0.5));\n     /// ```\n-    #[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n+    #[stable(feature = \"range_contains\", since = \"1.35.0\")]\n     pub fn contains<U>(&self, item: &U) -> bool\n     where\n         Idx: PartialOrd<U>,\n@@ -169,7 +167,7 @@ impl<Idx: PartialOrd<Idx>> Range<Idx> {\n ///\n /// [`Iterator`]: ../iter/trait.IntoIterator.html\n #[doc(alias = \"..\")]\n-#[derive(Clone, PartialEq, Eq, Hash)]  // not Copy -- see #27186\n+#[derive(Clone, PartialEq, Eq, Hash)] // not Copy -- see #27186\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RangeFrom<Idx> {\n     /// The lower bound of the range (inclusive).\n@@ -190,8 +188,6 @@ impl<Idx: PartialOrd<Idx>> RangeFrom<Idx> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(range_contains)]\n-    ///\n     /// use std::f32;\n     ///\n     /// assert!(!(3..).contains(&2));\n@@ -202,7 +198,7 @@ impl<Idx: PartialOrd<Idx>> RangeFrom<Idx> {\n     /// assert!(!(0.0..).contains(&f32::NAN));\n     /// assert!(!(f32::NAN..).contains(&0.5));\n     /// ```\n-    #[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n+    #[stable(feature = \"range_contains\", since = \"1.35.0\")]\n     pub fn contains<U>(&self, item: &U) -> bool\n     where\n         Idx: PartialOrd<U>,\n@@ -272,8 +268,6 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(range_contains)]\n-    ///\n     /// use std::f32;\n     ///\n     /// assert!( (..5).contains(&-1_000_000_000));\n@@ -284,7 +278,7 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n     /// assert!(!(..1.0).contains(&f32::NAN));\n     /// assert!(!(..f32::NAN).contains(&0.5));\n     /// ```\n-    #[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n+    #[stable(feature = \"range_contains\", since = \"1.35.0\")]\n     pub fn contains<U>(&self, item: &U) -> bool\n     where\n         Idx: PartialOrd<U>,\n@@ -317,7 +311,7 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n /// assert_eq!(arr[1..=2], [  1,2  ]);  // RangeInclusive\n /// ```\n #[doc(alias = \"..=\")]\n-#[derive(Clone)]  // not Copy -- see #27186\n+#[derive(Clone)] // not Copy -- see #27186\n #[stable(feature = \"inclusive_range\", since = \"1.26.0\")]\n pub struct RangeInclusive<Idx> {\n     pub(crate) start: Idx,\n@@ -353,7 +347,8 @@ impl<T: PartialOrd> RangeInclusiveEquality for T {\n impl<Idx: PartialEq> PartialEq for RangeInclusive<Idx> {\n     #[inline]\n     fn eq(&self, other: &Self) -> bool {\n-        self.start == other.start && self.end == other.end\n+        self.start == other.start\n+            && self.end == other.end\n             && RangeInclusiveEquality::canonicalized_is_empty(self)\n                 == RangeInclusiveEquality::canonicalized_is_empty(other)\n     }\n@@ -385,7 +380,11 @@ impl<Idx> RangeInclusive<Idx> {\n     #[inline]\n     #[rustc_promotable]\n     pub const fn new(start: Idx, end: Idx) -> Self {\n-        Self { start, end, is_empty: None }\n+        Self {\n+            start,\n+            end,\n+            is_empty: None,\n+        }\n     }\n \n     /// Returns the lower bound of the range (inclusive).\n@@ -466,8 +465,6 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(range_contains)]\n-    ///\n     /// use std::f32;\n     ///\n     /// assert!(!(3..=5).contains(&2));\n@@ -484,7 +481,7 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n     /// assert!(!(0.0..=f32::NAN).contains(&0.0));\n     /// assert!(!(f32::NAN..=1.0).contains(&1.0));\n     /// ```\n-    #[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n+    #[stable(feature = \"range_contains\", since = \"1.35.0\")]\n     pub fn contains<U>(&self, item: &U) -> bool\n     where\n         Idx: PartialOrd<U>,\n@@ -593,15 +590,12 @@ impl<Idx: fmt::Debug> fmt::Debug for RangeToInclusive<Idx> {\n     }\n }\n \n-#[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n impl<Idx: PartialOrd<Idx>> RangeToInclusive<Idx> {\n     /// Returns `true` if `item` is contained in the range.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(range_contains)]\n-    ///\n     /// use std::f32;\n     ///\n     /// assert!( (..=5).contains(&-1_000_000_000));\n@@ -612,7 +606,7 @@ impl<Idx: PartialOrd<Idx>> RangeToInclusive<Idx> {\n     /// assert!(!(..=1.0).contains(&f32::NAN));\n     /// assert!(!(..=f32::NAN).contains(&0.5));\n     /// ```\n-    #[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n+    #[stable(feature = \"range_contains\", since = \"1.35.0\")]\n     pub fn contains<U>(&self, item: &U) -> bool\n     where\n         Idx: PartialOrd<U>,\n@@ -714,14 +708,11 @@ pub trait RangeBounds<T: ?Sized> {\n     #[stable(feature = \"collections_range\", since = \"1.28.0\")]\n     fn end_bound(&self) -> Bound<&T>;\n \n-\n     /// Returns `true` if `item` is contained in the range.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(range_contains)]\n-    ///\n     /// use std::f32;\n     ///\n     /// assert!( (3..5).contains(&4));\n@@ -731,7 +722,7 @@ pub trait RangeBounds<T: ?Sized> {\n     /// assert!(!(0.0..1.0).contains(&f32::NAN));\n     /// assert!(!(0.0..f32::NAN).contains(&0.5));\n     /// assert!(!(f32::NAN..1.0).contains(&0.5));\n-    #[unstable(feature = \"range_contains\", reason = \"recently added as per RFC\", issue = \"32311\")]\n+    #[stable(feature = \"range_contains\", since = \"1.35.0\")]\n     fn contains<U>(&self, item: &U) -> bool\n     where\n         T: PartialOrd<U>,\n@@ -741,9 +732,7 @@ pub trait RangeBounds<T: ?Sized> {\n             Included(ref start) => *start <= item,\n             Excluded(ref start) => *start < item,\n             Unbounded => true,\n-        })\n-        &&\n-        (match self.end_bound() {\n+        }) && (match self.end_bound() {\n             Included(ref end) => item <= *end,\n             Excluded(ref end) => item < *end,\n             Unbounded => true,\n@@ -819,15 +808,15 @@ impl<T> RangeBounds<T> for (Bound<T>, Bound<T>) {\n         match *self {\n             (Included(ref start), _) => Included(start),\n             (Excluded(ref start), _) => Excluded(start),\n-            (Unbounded, _)           => Unbounded,\n+            (Unbounded, _) => Unbounded,\n         }\n     }\n \n     fn end_bound(&self) -> Bound<&T> {\n         match *self {\n             (_, Included(ref end)) => Included(end),\n             (_, Excluded(ref end)) => Excluded(end),\n-            (_, Unbounded)         => Unbounded,\n+            (_, Unbounded) => Unbounded,\n         }\n     }\n }"}, {"sha": "b396c6b54db3f9e202c08360d3f5511a3c6d54b0", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/266ca31f74ae343fc773b88f3bb77b601034babf/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266ca31f74ae343fc773b88f3bb77b601034babf/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=266ca31f74ae343fc773b88f3bb77b601034babf", "patch": "@@ -15,7 +15,6 @@\n #![allow(unused_attributes)]\n #![feature(libc)]\n #![feature(nll)]\n-#![feature(range_contains)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(optin_builtin_traits)]\n #![feature(concat_idents)]"}, {"sha": "6b4b437930d2609b642b4bc20036a0b059c71d29", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/266ca31f74ae343fc773b88f3bb77b601034babf/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266ca31f74ae343fc773b88f3bb77b601034babf/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=266ca31f74ae343fc773b88f3bb77b601034babf", "patch": "@@ -2,7 +2,6 @@\n \n #![feature(custom_attribute)]\n #![allow(unused_attributes)]\n-#![feature(range_contains)]\n #![cfg_attr(unix, feature(libc))]\n #![feature(nll)]\n #![feature(optin_builtin_traits)]"}, {"sha": "c45e694ebf832a65371b9981329dd85b0207a730", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/266ca31f74ae343fc773b88f3bb77b601034babf/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266ca31f74ae343fc773b88f3bb77b601034babf/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=266ca31f74ae343fc773b88f3bb77b601034babf", "patch": "@@ -14,7 +14,6 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(const_fn)]\n #![feature(decl_macro)]\n #![feature(exhaustive_patterns)]\n-#![feature(range_contains)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_attrs)]\n #![feature(never_type)]"}, {"sha": "307e0c63f3415997c3ac00210d8762e398db9107", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266ca31f74ae343fc773b88f3bb77b601034babf/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266ca31f74ae343fc773b88f3bb77b601034babf/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=266ca31f74ae343fc773b88f3bb77b601034babf", "patch": "@@ -221,7 +221,7 @@\n \n #![cfg_attr(test, feature(print_internals, set_stdio, test, update_panic_count))]\n #![cfg_attr(all(target_vendor = \"fortanix\", target_env = \"sgx\"),\n-            feature(global_asm, range_contains, slice_index_methods,\n+            feature(global_asm, slice_index_methods,\n                     decl_macro, coerce_unsized, sgx_platform, ptr_wrapping_offset_from))]\n \n // std is implemented with unstable features, many of which are internal"}]}