{"sha": "90e4493b98196e8825fcf18eff2a529a5b19d08f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZTQ0OTNiOTgxOTZlODgyNWZjZjE4ZWZmMmE1MjlhNWIxOWQwOGY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-24T13:25:32Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-24T13:25:32Z"}, "message": "Implement more simd intrinsics", "tree": {"sha": "241a6c73e7a7ac66a1faa09530b2a20b5454940d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/241a6c73e7a7ac66a1faa09530b2a20b5454940d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90e4493b98196e8825fcf18eff2a529a5b19d08f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90e4493b98196e8825fcf18eff2a529a5b19d08f", "html_url": "https://github.com/rust-lang/rust/commit/90e4493b98196e8825fcf18eff2a529a5b19d08f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90e4493b98196e8825fcf18eff2a529a5b19d08f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "344cbac150d08d0931d03ab0651becc977baa64b", "url": "https://api.github.com/repos/rust-lang/rust/commits/344cbac150d08d0931d03ab0651becc977baa64b", "html_url": "https://github.com/rust-lang/rust/commit/344cbac150d08d0931d03ab0651becc977baa64b"}], "stats": {"total": 147, "additions": 140, "deletions": 7}, "files": [{"sha": "5a23e775712b85fae438babda1a2c70ba6ddcb67", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 140, "deletions": 7, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/90e4493b98196e8825fcf18eff2a529a5b19d08f/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e4493b98196e8825fcf18eff2a529a5b19d08f/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=90e4493b98196e8825fcf18eff2a529a5b19d08f", "patch": "@@ -167,6 +167,34 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             ret.write_cvalue(fx, ret_lane);\n         };\n \n+        simd_neg, (c a) {\n+            validate_simd_type!(fx, intrinsic, span, a.layout().ty);\n+            simd_for_each_lane(fx, a, ret, |fx, lane_layout, ret_lane_layout, lane| {\n+                let ret_lane = match lane_layout.ty.kind() {\n+                    ty::Int(_) => fx.bcx.ins().ineg(lane),\n+                    ty::Float(_) => fx.bcx.ins().fneg(lane),\n+                    _ => unreachable!(),\n+                };\n+                CValue::by_val(ret_lane, ret_lane_layout)\n+            });\n+        };\n+\n+        simd_fabs, (c a) {\n+            validate_simd_type!(fx, intrinsic, span, a.layout().ty);\n+            simd_for_each_lane(fx, a, ret, |fx, _lane_layout, ret_lane_layout, lane| {\n+                let ret_lane = fx.bcx.ins().fabs(lane);\n+                CValue::by_val(ret_lane, ret_lane_layout)\n+            });\n+        };\n+\n+        simd_fsqrt, (c a) {\n+            validate_simd_type!(fx, intrinsic, span, a.layout().ty);\n+            simd_for_each_lane(fx, a, ret, |fx, _lane_layout, ret_lane_layout, lane| {\n+                let ret_lane = fx.bcx.ins().sqrt(lane);\n+                CValue::by_val(ret_lane, ret_lane_layout)\n+            });\n+        };\n+\n         simd_add, (c x, c y) {\n             validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n             simd_int_flt_binop!(fx, iadd|fadd(x, y) -> ret);\n@@ -183,6 +211,29 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n             simd_int_flt_binop!(fx, udiv|sdiv|fdiv(x, y) -> ret);\n         };\n+        simd_rem, (c x, c y) {\n+            validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n+            simd_pair_for_each_lane(fx, x, y, ret, |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n+                let res_lane = match lane_layout.ty.kind() {\n+                    ty::Uint(_) => fx.bcx.ins().urem(x_lane, y_lane),\n+                    ty::Int(_) => fx.bcx.ins().srem(x_lane, y_lane),\n+                    ty::Float(FloatTy::F32) => fx.lib_call(\n+                        \"fmodf\",\n+                        vec![AbiParam::new(types::F32), AbiParam::new(types::F32)],\n+                        vec![AbiParam::new(types::F32)],\n+                        &[x_lane, y_lane],\n+                    )[0],\n+                    ty::Float(FloatTy::F64) => fx.lib_call(\n+                        \"fmod\",\n+                        vec![AbiParam::new(types::F64), AbiParam::new(types::F64)],\n+                        vec![AbiParam::new(types::F64)],\n+                        &[x_lane, y_lane],\n+                    )[0],\n+                    _ => unreachable!(\"{:?}\", lane_layout.ty),\n+                };\n+                CValue::by_val(res_lane, ret_lane_layout)\n+            });\n+        };\n         simd_shl, (c x, c y) {\n             validate_simd_type!(fx, intrinsic, span, x.layout().ty);\n             simd_int_binop!(fx, ishl(x, y) -> ret);\n@@ -236,6 +287,35 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             simd_flt_binop!(fx, fmax(x, y) -> ret);\n         };\n \n+        simd_round, (c a) {\n+            validate_simd_type!(fx, intrinsic, span, a.layout().ty);\n+            simd_for_each_lane(fx, a, ret, |fx, _lane_layout, ret_lane_layout, lane| {\n+                let ret_lane = fx.bcx.ins().nearest(lane);\n+                CValue::by_val(ret_lane, ret_lane_layout)\n+            });\n+        };\n+        simd_ceil, (c a) {\n+            validate_simd_type!(fx, intrinsic, span, a.layout().ty);\n+            simd_for_each_lane(fx, a, ret, |fx, _lane_layout, ret_lane_layout, lane| {\n+                let ret_lane = fx.bcx.ins().ceil(lane);\n+                CValue::by_val(ret_lane, ret_lane_layout)\n+            });\n+        };\n+        simd_floor, (c a) {\n+            validate_simd_type!(fx, intrinsic, span, a.layout().ty);\n+            simd_for_each_lane(fx, a, ret, |fx, _lane_layout, ret_lane_layout, lane| {\n+                let ret_lane = fx.bcx.ins().floor(lane);\n+                CValue::by_val(ret_lane, ret_lane_layout)\n+            });\n+        };\n+        simd_trunc, (c a) {\n+            validate_simd_type!(fx, intrinsic, span, a.layout().ty);\n+            simd_for_each_lane(fx, a, ret, |fx, _lane_layout, ret_lane_layout, lane| {\n+                let ret_lane = fx.bcx.ins().trunc(lane);\n+                CValue::by_val(ret_lane, ret_lane_layout)\n+            });\n+        };\n+\n         simd_reduce_add_ordered | simd_reduce_add_unordered, (c v, v acc) {\n             validate_simd_type!(fx, intrinsic, span, v.layout().ty);\n             simd_reduce(fx, v, Some(acc), ret, |fx, lane_layout, a, b| {\n@@ -268,13 +348,66 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             simd_reduce_bool(fx, v, ret, |fx, a, b| fx.bcx.ins().bor(a, b));\n         };\n \n-        // simd_fabs\n-        // simd_saturating_add\n+        simd_reduce_and, (c v) {\n+            validate_simd_type!(fx, intrinsic, span, v.layout().ty);\n+            simd_reduce(fx, v, None, ret, |fx, _layout, a, b| fx.bcx.ins().band(a, b));\n+        };\n+\n+        simd_reduce_or, (c v) {\n+            validate_simd_type!(fx, intrinsic, span, v.layout().ty);\n+            simd_reduce(fx, v, None, ret, |fx, _layout, a, b| fx.bcx.ins().bor(a, b));\n+        };\n+\n+        simd_reduce_xor, (c v) {\n+            validate_simd_type!(fx, intrinsic, span, v.layout().ty);\n+            simd_reduce(fx, v, None, ret, |fx, _layout, a, b| fx.bcx.ins().bxor(a, b));\n+        };\n+\n+        simd_reduce_min, (c v) {\n+            validate_simd_type!(fx, intrinsic, span, v.layout().ty);\n+            simd_reduce(fx, v, None, ret, |fx, layout, a, b| {\n+                let lt = fx.bcx.ins().icmp(if layout.ty.is_signed() {\n+                    IntCC::SignedLessThan\n+                } else {\n+                    IntCC::UnsignedLessThan\n+                }, a, b);\n+                fx.bcx.ins().select(lt, a, b)\n+            });\n+        };\n+\n+        simd_reduce_max, (c v) {\n+            validate_simd_type!(fx, intrinsic, span, v.layout().ty);\n+            simd_reduce(fx, v, None, ret, |fx, layout, a, b| {\n+                let gt = fx.bcx.ins().icmp(if layout.ty.is_signed() {\n+                    IntCC::SignedGreaterThan\n+                } else {\n+                    IntCC::UnsignedGreaterThan\n+                }, a, b);\n+                fx.bcx.ins().select(gt, a, b)\n+            });\n+        };\n+\n+        simd_select, (c m, c a, c b) {\n+            validate_simd_type!(fx, intrinsic, span, m.layout().ty);\n+            validate_simd_type!(fx, intrinsic, span, a.layout().ty);\n+            assert_eq!(a.layout(), b.layout());\n+\n+            let (lane_count, lane_ty) = a.layout().ty.simd_size_and_type(fx.tcx);\n+            let lane_layout = fx.layout_of(lane_ty);\n+\n+            for lane in 0..lane_count {\n+                let m_lane = m.value_lane(fx, lane).load_scalar(fx);\n+                let a_lane = a.value_lane(fx, lane).load_scalar(fx);\n+                let b_lane = b.value_lane(fx, lane).load_scalar(fx);\n+\n+                let m_lane = fx.bcx.ins().icmp_imm(IntCC::Equal, m_lane, 0);\n+                let res_lane = CValue::by_val(fx.bcx.ins().select(m_lane, b_lane, a_lane), lane_layout);\n+\n+                ret.place_lane(fx, lane).write_cvalue(fx, res_lane);\n+            }\n+        };\n+\n+        // simd_saturating_*\n         // simd_bitmask\n-        // simd_select\n-        // simd_rem\n-        // simd_neg\n-        // simd_trunc\n-        // simd_floor\n     }\n }"}]}