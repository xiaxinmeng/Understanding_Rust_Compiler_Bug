{"sha": "a54ddfb676c59bcf0dd3dc8ef869a6e5ac4afc0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1NGRkZmI2NzZjNTliY2YwZGQzZGM4ZWY4NjlhNmU1YWM0YWZjMGI=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-11-23T22:02:30Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2016-11-24T15:55:46Z"}, "message": "core: Unroll the loop in the slice iterator search methods\n\nIntroduce a helper method .search_while() that generalizes internal\niteration (Iterator's all, find, position, fold and so on).\n\nThe compiler does not unroll loops with conditional exits; we can do\nthis manually instead to improve the performance of for example\nIterator::find and Iterator::position when used on the slice iterators.\n\nThe unrolling is patterned on libstdc++'s implementation of std::find_if.", "tree": {"sha": "46a2f3a421d54269a87342b9c9f0c928f2e66f62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46a2f3a421d54269a87342b9c9f0c928f2e66f62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a54ddfb676c59bcf0dd3dc8ef869a6e5ac4afc0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a54ddfb676c59bcf0dd3dc8ef869a6e5ac4afc0b", "html_url": "https://github.com/rust-lang/rust/commit/a54ddfb676c59bcf0dd3dc8ef869a6e5ac4afc0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a54ddfb676c59bcf0dd3dc8ef869a6e5ac4afc0b/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7611e424a7274ab1094ceebc0381e36e81b4db72", "url": "https://api.github.com/repos/rust-lang/rust/commits/7611e424a7274ab1094ceebc0381e36e81b4db72", "html_url": "https://github.com/rust-lang/rust/commit/7611e424a7274ab1094ceebc0381e36e81b4db72"}], "stats": {"total": 118, "additions": 118, "deletions": 0}, "files": [{"sha": "263b9c22621735d7e87aa0e7c2822a7e33da7bf4", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/a54ddfb676c59bcf0dd3dc8ef869a6e5ac4afc0b/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a54ddfb676c59bcf0dd3dc8ef869a6e5ac4afc0b/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=a54ddfb676c59bcf0dd3dc8ef869a6e5ac4afc0b", "patch": "@@ -852,6 +852,64 @@ macro_rules! iterator {\n             fn last(mut self) -> Option<$elem> {\n                 self.next_back()\n             }\n+\n+            fn all<F>(&mut self, mut predicate: F) -> bool\n+                where F: FnMut(Self::Item) -> bool,\n+            {\n+                self.search_while(true, move |elt| {\n+                    if predicate(elt) {\n+                        SearchWhile::Continue\n+                    } else {\n+                        SearchWhile::Done(false)\n+                    }\n+                })\n+            }\n+\n+            fn any<F>(&mut self, mut predicate: F) -> bool\n+                where F: FnMut(Self::Item) -> bool,\n+            {\n+                !self.all(move |elt| !predicate(elt))\n+            }\n+\n+            fn find<F>(&mut self, mut predicate: F) -> Option<Self::Item>\n+                where F: FnMut(&Self::Item) -> bool,\n+            {\n+                self.search_while(None, move |elt| {\n+                    if predicate(&elt) {\n+                        SearchWhile::Done(Some(elt))\n+                    } else {\n+                        SearchWhile::Continue\n+                    }\n+                })\n+            }\n+\n+            fn position<F>(&mut self, mut predicate: F) -> Option<usize>\n+                where F: FnMut(Self::Item) -> bool,\n+            {\n+                let mut index = 0;\n+                self.search_while(None, move |elt| {\n+                    if predicate(elt) {\n+                        SearchWhile::Done(Some(index))\n+                    } else {\n+                        index += 1;\n+                        SearchWhile::Continue\n+                    }\n+                })\n+            }\n+\n+            fn rposition<F>(&mut self, mut predicate: F) -> Option<usize>\n+                where F: FnMut(Self::Item) -> bool,\n+            {\n+                let mut index = self.len();\n+                self.rsearch_while(None, move |elt| {\n+                    index -= 1;\n+                    if predicate(elt) {\n+                        SearchWhile::Done(Some(index))\n+                    } else {\n+                        SearchWhile::Continue\n+                    }\n+                })\n+            }\n         }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -872,6 +930,48 @@ macro_rules! iterator {\n                 }\n             }\n         }\n+\n+        // search_while is a generalization of the internal iteration methods.\n+        impl<'a, T> $name<'a, T> {\n+            // search through the iterator's element using the closure `g`.\n+            // if no element was found, return `default`.\n+            fn search_while<Acc, G>(&mut self, default: Acc, mut g: G) -> Acc\n+                where Self: Sized,\n+                      G: FnMut($elem) -> SearchWhile<Acc>\n+            {\n+                // manual unrolling is needed when there are conditional exits from the loop\n+                unsafe {\n+                    while ptrdistance(self.ptr, self.end) >= 4 {\n+                        search_while!(g($mkref!(self.ptr.post_inc())));\n+                        search_while!(g($mkref!(self.ptr.post_inc())));\n+                        search_while!(g($mkref!(self.ptr.post_inc())));\n+                        search_while!(g($mkref!(self.ptr.post_inc())));\n+                    }\n+                    while self.ptr != self.end {\n+                        search_while!(g($mkref!(self.ptr.post_inc())));\n+                    }\n+                }\n+                default\n+            }\n+\n+            fn rsearch_while<Acc, G>(&mut self, default: Acc, mut g: G) -> Acc\n+                where Self: Sized,\n+                      G: FnMut($elem) -> SearchWhile<Acc>\n+            {\n+                unsafe {\n+                    while ptrdistance(self.ptr, self.end) >= 4 {\n+                        search_while!(g($mkref!(self.end.pre_dec())));\n+                        search_while!(g($mkref!(self.end.pre_dec())));\n+                        search_while!(g($mkref!(self.end.pre_dec())));\n+                        search_while!(g($mkref!(self.end.pre_dec())));\n+                    }\n+                    while self.ptr != self.end {\n+                        search_while!(g($mkref!(self.end.pre_dec())));\n+                    }\n+                }\n+                default\n+            }\n+        }\n     }\n }\n \n@@ -903,6 +1003,24 @@ macro_rules! make_mut_slice {\n     }}\n }\n \n+// An enum used for controlling the execution of `.search_while()`.\n+enum SearchWhile<T> {\n+    // Continue searching\n+    Continue,\n+    // Fold is complete and will return this value\n+    Done(T),\n+}\n+\n+// helper macro for search while's control flow\n+macro_rules! search_while {\n+    ($e:expr) => {\n+        match $e {\n+            SearchWhile::Continue => { }\n+            SearchWhile::Done(done) => return done,\n+        }\n+    }\n+}\n+\n /// Immutable slice iterator\n ///\n /// This struct is created by the [`iter`] method on [slices]."}]}