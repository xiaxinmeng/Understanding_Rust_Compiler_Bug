{"sha": "399c0a8e52471ba17292d7538f1fb1fc26a32979", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5OWMwYThlNTI0NzFiYTE3MjkyZDc1MzhmMWZiMWZjMjZhMzI5Nzk=", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2021-02-02T21:01:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-02T21:01:35Z"}, "message": "Rollup merge of #81455 - Amanieu:aarch64_ilp32, r=sanxiyn\n\nAdd AArch64 big-endian and ILP32 targets\n\nThis PR adds 3 new AArch64 targets:\n- `aarch64_be-unknown-linux-gnu`\n- `aarch64-unknown-linux-gnu_ilp32`\n- `aarch64_be-unknown-linux-gnu_ilp32`\n\nIt also fixes some ABI issues on big-endian ARM and AArch64.", "tree": {"sha": "d496daf6a979cef1659b73fdce5b2b70510a05f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d496daf6a979cef1659b73fdce5b2b70510a05f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/399c0a8e52471ba17292d7538f1fb1fc26a32979", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgGb2vCRBK7hj4Ov3rIwAAdHIIAEFtS+UQr2xJda23R51qTqA+\nFpRJ2H7HJhnE8I3AkSLEnR6I3W0es+srxT+r+B9HLuF/RI7cWd5qra/S6t4Pf0r9\n+s55zMgcWdTxmG6z83YZRgIJrg7UHcGQLkdUwo4TEjtJYtzqLpF8TozTAJf/UaYp\nHc7FTSK1TerbXU0M83Qxg2aZzoEnzjxwZLRgXeW+FgwT+m/aNZ07RI3v281ZTShT\ncXdJY3ax98MbyqXzpELz8mV+5+pslVRAgnmK+rwwMp07VYQNptMVQoNR9Q7fDpgk\nBbMbTu1G32eEhR9jAhlSEXdGwgHAtUR7RwW2190cP05MHq9klPIP3hevrV2HYAI=\n=xAPY\n-----END PGP SIGNATURE-----\n", "payload": "tree d496daf6a979cef1659b73fdce5b2b70510a05f6\nparent d91ce83f8500a83323bc23243e804de223bf1e80\nparent 3408c58bdfc923f9b1b7fbab271a791442de682a\nauthor Jack Huey <31162821+jackh726@users.noreply.github.com> 1612299695 -0500\ncommitter GitHub <noreply@github.com> 1612299695 -0500\n\nRollup merge of #81455 - Amanieu:aarch64_ilp32, r=sanxiyn\n\nAdd AArch64 big-endian and ILP32 targets\n\nThis PR adds 3 new AArch64 targets:\n- `aarch64_be-unknown-linux-gnu`\n- `aarch64-unknown-linux-gnu_ilp32`\n- `aarch64_be-unknown-linux-gnu_ilp32`\n\nIt also fixes some ABI issues on big-endian ARM and AArch64.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/399c0a8e52471ba17292d7538f1fb1fc26a32979", "html_url": "https://github.com/rust-lang/rust/commit/399c0a8e52471ba17292d7538f1fb1fc26a32979", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/399c0a8e52471ba17292d7538f1fb1fc26a32979/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d91ce83f8500a83323bc23243e804de223bf1e80", "url": "https://api.github.com/repos/rust-lang/rust/commits/d91ce83f8500a83323bc23243e804de223bf1e80", "html_url": "https://github.com/rust-lang/rust/commit/d91ce83f8500a83323bc23243e804de223bf1e80"}, {"sha": "3408c58bdfc923f9b1b7fbab271a791442de682a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3408c58bdfc923f9b1b7fbab271a791442de682a", "html_url": "https://github.com/rust-lang/rust/commit/3408c58bdfc923f9b1b7fbab271a791442de682a"}], "stats": {"total": 143, "additions": 96, "deletions": 47}, "files": [{"sha": "fb401ed4cd0bbba208e4d7770f3c5ddbcbeffcbb", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/399c0a8e52471ba17292d7538f1fb1fc26a32979/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/399c0a8e52471ba17292d7538f1fb1fc26a32979/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=399c0a8e52471ba17292d7538f1fb1fc26a32979", "patch": "@@ -1784,9 +1784,9 @@ checksum = \"830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.79\"\n+version = \"0.2.85\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2448f6066e80e3bfc792e9c98bf705b4b0fc6e8ef5b43e5889aff0eaa9c58743\"\n+checksum = \"7ccac4b00700875e6a07c6cde370d44d32fa01c5a65cdd2fca6858c479d28bb3\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]"}, {"sha": "39d08fbee3b7fbc01a72522aef5d18d308f5a871", "filename": "compiler/rustc_codegen_llvm/src/va_arg.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/399c0a8e52471ba17292d7538f1fb1fc26a32979/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/399c0a8e52471ba17292d7538f1fb1fc26a32979/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs?ref=399c0a8e52471ba17292d7538f1fb1fc26a32979", "patch": "@@ -105,7 +105,6 @@ fn emit_aapcs_va_arg(\n     let mut end = bx.build_sibling_block(\"va_arg.end\");\n     let zero = bx.const_i32(0);\n     let offset_align = Align::from_bytes(4).unwrap();\n-    assert_eq!(bx.tcx().sess.target.endian, Endian::Little);\n \n     let gr_type = target_ty.is_any_ptr() || target_ty.is_integral();\n     let (reg_off, reg_top_index, slot_size) = if gr_type {\n@@ -144,9 +143,14 @@ fn emit_aapcs_va_arg(\n     let top = in_reg.load(top, bx.tcx().data_layout.pointer_align.abi);\n \n     // reg_value = *(@top + reg_off_v);\n-    let top = in_reg.gep(top, &[reg_off_v]);\n-    let top = in_reg.bitcast(top, bx.cx.type_ptr_to(layout.llvm_type(bx)));\n-    let reg_value = in_reg.load(top, layout.align.abi);\n+    let mut reg_addr = in_reg.gep(top, &[reg_off_v]);\n+    if bx.tcx().sess.target.endian == Endian::Big && layout.size.bytes() != slot_size {\n+        // On big-endian systems the value is right-aligned in its slot.\n+        let offset = bx.const_i32((slot_size - layout.size.bytes()) as i32);\n+        reg_addr = in_reg.gep(reg_addr, &[offset]);\n+    }\n+    let reg_addr = in_reg.bitcast(reg_addr, bx.cx.type_ptr_to(layout.llvm_type(bx)));\n+    let reg_value = in_reg.load(reg_addr, layout.align.abi);\n     in_reg.br(&end.llbb());\n \n     // On Stack block"}, {"sha": "a5e985d4712711c57d3e14217fcd7752a43c1338", "filename": "compiler/rustc_target/src/abi/call/aarch64.rs", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/399c0a8e52471ba17292d7538f1fb1fc26a32979/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Faarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/399c0a8e52471ba17292d7538f1fb1fc26a32979/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Faarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Faarch64.rs?ref=399c0a8e52471ba17292d7538f1fb1fc26a32979", "patch": "@@ -40,17 +40,7 @@ where\n     let size = ret.layout.size;\n     let bits = size.bits();\n     if bits <= 128 {\n-        let unit = if bits <= 8 {\n-            Reg::i8()\n-        } else if bits <= 16 {\n-            Reg::i16()\n-        } else if bits <= 32 {\n-            Reg::i32()\n-        } else {\n-            Reg::i64()\n-        };\n-\n-        ret.cast_to(Uniform { unit, total: size });\n+        ret.cast_to(Uniform { unit: Reg::i64(), total: size });\n         return;\n     }\n     ret.make_indirect();\n@@ -72,17 +62,7 @@ where\n     let size = arg.layout.size;\n     let bits = size.bits();\n     if bits <= 128 {\n-        let unit = if bits <= 8 {\n-            Reg::i8()\n-        } else if bits <= 16 {\n-            Reg::i16()\n-        } else if bits <= 32 {\n-            Reg::i32()\n-        } else {\n-            Reg::i64()\n-        };\n-\n-        arg.cast_to(Uniform { unit, total: size });\n+        arg.cast_to(Uniform { unit: Reg::i64(), total: size });\n         return;\n     }\n     arg.make_indirect();"}, {"sha": "b560e11fe1c5e0ecb9ef8810377eb0ac61550c1f", "filename": "compiler/rustc_target/src/abi/call/arm.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/399c0a8e52471ba17292d7538f1fb1fc26a32979/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/399c0a8e52471ba17292d7538f1fb1fc26a32979/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Farm.rs?ref=399c0a8e52471ba17292d7538f1fb1fc26a32979", "patch": "@@ -45,14 +45,7 @@ where\n     let size = ret.layout.size;\n     let bits = size.bits();\n     if bits <= 32 {\n-        let unit = if bits <= 8 {\n-            Reg::i8()\n-        } else if bits <= 16 {\n-            Reg::i16()\n-        } else {\n-            Reg::i32()\n-        };\n-        ret.cast_to(Uniform { unit, total: size });\n+        ret.cast_to(Uniform { unit: Reg::i32(), total: size });\n         return;\n     }\n     ret.make_indirect();"}, {"sha": "192c4661c7ce6d90d420ae2b6b0f23582db17a49", "filename": "compiler/rustc_target/src/spec/aarch64_be_unknown_linux_gnu.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/399c0a8e52471ba17292d7538f1fb1fc26a32979/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/399c0a8e52471ba17292d7538f1fb1fc26a32979/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu.rs?ref=399c0a8e52471ba17292d7538f1fb1fc26a32979", "patch": "@@ -0,0 +1,20 @@\n+use crate::abi::Endian;\n+use crate::spec::{Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    let mut base = super::linux_gnu_base::opts();\n+    base.max_atomic_width = Some(128);\n+\n+    Target {\n+        llvm_target: \"aarch64_be-unknown-linux-gnu\".to_string(),\n+        pointer_width: 64,\n+        data_layout: \"E-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n+        arch: \"aarch64\".to_string(),\n+        options: TargetOptions {\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n+            mcount: \"\\u{1}_mcount\".to_string(),\n+            endian: Endian::Big,\n+            ..base\n+        },\n+    }\n+}"}, {"sha": "5b9e9c9519c5480065e1d0d6b7be411b3d8af12b", "filename": "compiler/rustc_target/src/spec/aarch64_be_unknown_linux_gnu_ilp32.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/399c0a8e52471ba17292d7538f1fb1fc26a32979/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu_ilp32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/399c0a8e52471ba17292d7538f1fb1fc26a32979/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu_ilp32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_be_unknown_linux_gnu_ilp32.rs?ref=399c0a8e52471ba17292d7538f1fb1fc26a32979", "patch": "@@ -0,0 +1,20 @@\n+use crate::abi::Endian;\n+use crate::spec::{Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    let mut base = super::linux_gnu_base::opts();\n+    base.max_atomic_width = Some(128);\n+\n+    Target {\n+        llvm_target: \"aarch64_be-unknown-linux-gnu_ilp32\".to_string(),\n+        pointer_width: 32,\n+        data_layout: \"E-m:e-p:32:32-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n+        arch: \"aarch64\".to_string(),\n+        options: TargetOptions {\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n+            mcount: \"\\u{1}_mcount\".to_string(),\n+            endian: Endian::Big,\n+            ..base\n+        },\n+    }\n+}"}, {"sha": "f2d7576280fd98e2e1121839a10cded3891c1a61", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_gnu_ilp32.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/399c0a8e52471ba17292d7538f1fb1fc26a32979/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu_ilp32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/399c0a8e52471ba17292d7538f1fb1fc26a32979/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu_ilp32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_gnu_ilp32.rs?ref=399c0a8e52471ba17292d7538f1fb1fc26a32979", "patch": "@@ -0,0 +1,18 @@\n+use crate::spec::{Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    let mut base = super::linux_gnu_base::opts();\n+    base.max_atomic_width = Some(128);\n+\n+    Target {\n+        llvm_target: \"aarch64-unknown-linux-gnu_ilp32\".to_string(),\n+        pointer_width: 32,\n+        data_layout: \"e-m:e-p:32:32-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".to_string(),\n+        arch: \"aarch64\".to_string(),\n+        options: TargetOptions {\n+            unsupported_abis: super::arm_base::unsupported_abis(),\n+            mcount: \"\\u{1}_mcount\".to_string(),\n+            ..base\n+        },\n+    }\n+}"}, {"sha": "7a93bac72ca0717c93e38d77407f145acf8994f6", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/399c0a8e52471ba17292d7538f1fb1fc26a32979/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/399c0a8e52471ba17292d7538f1fb1fc26a32979/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=399c0a8e52471ba17292d7538f1fb1fc26a32979", "patch": "@@ -808,6 +808,10 @@ supported_targets! {\n     (\"mipsel-sony-psp\", mipsel_sony_psp),\n     (\"mipsel-unknown-none\", mipsel_unknown_none),\n     (\"thumbv4t-none-eabi\", thumbv4t_none_eabi),\n+\n+    (\"aarch64_be-unknown-linux-gnu\", aarch64_be_unknown_linux_gnu),\n+    (\"aarch64-unknown-linux-gnu_ilp32\", aarch64_unknown_linux_gnu_ilp32),\n+    (\"aarch64_be-unknown-linux-gnu_ilp32\", aarch64_be_unknown_linux_gnu_ilp32),\n }\n \n /// Everything `rustc` knows about how to compile for a specific target."}, {"sha": "525102212c41e0999c9770bf85c7cd71ef15f1ac", "filename": "library/std/src/os/linux/raw.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/399c0a8e52471ba17292d7538f1fb1fc26a32979/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/399c0a8e52471ba17292d7538f1fb1fc26a32979/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Flinux%2Fraw.rs?ref=399c0a8e52471ba17292d7538f1fb1fc26a32979", "patch": "@@ -247,17 +247,17 @@ mod arch {\n     use crate::os::raw::{c_int, c_long};\n \n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub type blkcnt_t = u64;\n+    pub type blkcnt_t = i64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub type blksize_t = u64;\n+    pub type blksize_t = i32;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n     pub type ino_t = u64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub type nlink_t = u64;\n+    pub type nlink_t = u32;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub type off_t = u64;\n+    pub type off_t = i64;\n     #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-    pub type time_t = i64;\n+    pub type time_t = c_long;\n \n     #[repr(C)]\n     #[derive(Clone)]\n@@ -288,15 +288,15 @@ mod arch {\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_blocks: i64,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_atime: i64,\n+        pub st_atime: time_t,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_atime_nsec: c_long,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_mtime: i64,\n+        pub st_mtime: time_t,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_mtime_nsec: c_long,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n-        pub st_ctime: i64,\n+        pub st_ctime: time_t,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n         pub st_ctime_nsec: c_long,\n         #[stable(feature = \"raw_ext\", since = \"1.1.0\")]"}, {"sha": "faf554d285a9a294d57dec8d4d6290ed831fd34e", "filename": "library/unwind/src/libunwind.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/399c0a8e52471ba17292d7538f1fb1fc26a32979/library%2Funwind%2Fsrc%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/399c0a8e52471ba17292d7538f1fb1fc26a32979/library%2Funwind%2Fsrc%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flibunwind.rs?ref=399c0a8e52471ba17292d7538f1fb1fc26a32979", "patch": "@@ -36,9 +36,12 @@ pub const unwinder_private_data_size: usize = 20;\n #[cfg(all(target_arch = \"arm\", target_os = \"ios\"))]\n pub const unwinder_private_data_size: usize = 5;\n \n-#[cfg(target_arch = \"aarch64\")]\n+#[cfg(all(target_arch = \"aarch64\", target_pointer_width = \"64\"))]\n pub const unwinder_private_data_size: usize = 2;\n \n+#[cfg(all(target_arch = \"aarch64\", target_pointer_width = \"32\"))]\n+pub const unwinder_private_data_size: usize = 5;\n+\n #[cfg(target_arch = \"mips\")]\n pub const unwinder_private_data_size: usize = 2;\n "}, {"sha": "eb740419647013fd47c343eb44a39ef020827a13", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/399c0a8e52471ba17292d7538f1fb1fc26a32979/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/399c0a8e52471ba17292d7538f1fb1fc26a32979/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=399c0a8e52471ba17292d7538f1fb1fc26a32979", "patch": "@@ -156,11 +156,14 @@ target | std | host | notes\n `aarch64-apple-tvos` | * |  | ARM64 tvOS\n `aarch64-unknown-freebsd` | \u2713 | \u2713 | ARM64 FreeBSD\n `aarch64-unknown-hermit` | ? |  |\n+`aarch64-unknown-linux-gnu_ilp32` | \u2713 | \u2713 | ARM64 Linux (ILP32 ABI)\n `aarch64-unknown-netbsd` | \u2713 | \u2713 |\n `aarch64-unknown-openbsd` | \u2713 | \u2713 | ARM64 OpenBSD\n `aarch64-unknown-redox` | ? |  | ARM64 Redox OS\n `aarch64-uwp-windows-msvc` | ? |  |\n `aarch64-wrs-vxworks` | ? |  |\n+`aarch64_be-unknown-linux-gnu` | \u2713 | \u2713 | ARM64 Linux (big-endian)\n+`aarch64_be-unknown-linux-gnu_ilp32` | \u2713 | \u2713 | ARM64 Linux (big-endian, ILP32 ABI)\n `armv4t-unknown-linux-gnueabi` | ? |  |\n `armv5te-unknown-linux-uclibceabi` | ? |  | ARMv5TE Linux with uClibc\n `armv6-unknown-freebsd` | \u2713 | \u2713 | ARMv6 FreeBSD"}, {"sha": "70d09f218d1c84fedabdb74881e214dacd5b0c3d", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=399c0a8e52471ba17292d7538f1fb1fc26a32979", "patch": "@@ -1 +1 @@\n-Subproject commit f9a8d70b6e0365ac2172ca6b7f1de0341297458d\n+Subproject commit 70d09f218d1c84fedabdb74881e214dacd5b0c3d"}, {"sha": "292850bd9e277f55771afbe6e90428ac42ffd437", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/399c0a8e52471ba17292d7538f1fb1fc26a32979/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/399c0a8e52471ba17292d7538f1fb1fc26a32979/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=399c0a8e52471ba17292d7538f1fb1fc26a32979", "patch": "@@ -38,6 +38,7 @@ const OS_TABLE: &[(&str, &str)] = &[\n \n const ARCH_TABLE: &[(&str, &str)] = &[\n     (\"aarch64\", \"aarch64\"),\n+    (\"aarch64_be\", \"aarch64\"),\n     (\"amd64\", \"x86_64\"),\n     (\"arm\", \"arm\"),\n     (\"arm64\", \"aarch64\"),\n@@ -110,6 +111,7 @@ pub const TSAN_SUPPORTED_TARGETS: &[&str] = &[\n ];\n \n const BIG_ENDIAN: &[&str] = &[\n+    \"aarch64_be\",\n     \"armebv7r\",\n     \"mips\",\n     \"mips64\",\n@@ -160,7 +162,9 @@ pub fn matches_env(triple: &str, name: &str) -> bool {\n }\n \n pub fn get_pointer_width(triple: &str) -> &'static str {\n-    if (triple.contains(\"64\") && !triple.ends_with(\"gnux32\")) || triple.starts_with(\"s390x\") {\n+    if (triple.contains(\"64\") && !triple.ends_with(\"gnux32\") && !triple.ends_with(\"gnu_ilp32\"))\n+        || triple.starts_with(\"s390x\")\n+    {\n         \"64bit\"\n     } else if triple.starts_with(\"avr\") {\n         \"16bit\""}]}