{"sha": "72be5b81df7d038411ea0f88f6ef351e386aca9c", "node_id": "C_kwDOAAsO6NoAKDcyYmU1YjgxZGY3ZDAzODQxMWVhMGY4OGY2ZWYzNTFlMzg2YWNhOWM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-09T23:04:08Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-10T12:52:04Z"}, "message": "Directly encode DefKind in metadata.", "tree": {"sha": "ef2d61eee37753c3f341f1b34a3ee054c6f33681", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef2d61eee37753c3f341f1b34a3ee054c6f33681"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72be5b81df7d038411ea0f88f6ef351e386aca9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72be5b81df7d038411ea0f88f6ef351e386aca9c", "html_url": "https://github.com/rust-lang/rust/commit/72be5b81df7d038411ea0f88f6ef351e386aca9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72be5b81df7d038411ea0f88f6ef351e386aca9c/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2129866dc0d49f5b1197278643102a53da60536a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2129866dc0d49f5b1197278643102a53da60536a", "html_url": "https://github.com/rust-lang/rust/commit/2129866dc0d49f5b1197278643102a53da60536a"}], "stats": {"total": 78, "additions": 64, "deletions": 14}, "files": [{"sha": "ef1debf4344e8b2bfa2993585a8ea717991b3501", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/72be5b81df7d038411ea0f88f6ef351e386aca9c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72be5b81df7d038411ea0f88f6ef351e386aca9c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=72be5b81df7d038411ea0f88f6ef351e386aca9c", "patch": "@@ -292,6 +292,12 @@ trait LazyQueryDecodable<'a, 'tcx, T> {\n     ) -> T;\n }\n \n+impl<'a, 'tcx, T> LazyQueryDecodable<'a, 'tcx, T> for T {\n+    fn decode_query(self, _: CrateMetadataRef<'a>, _: TyCtxt<'tcx>, _: impl FnOnce() -> !) -> T {\n+        self\n+    }\n+}\n+\n impl<'a, 'tcx, T> LazyQueryDecodable<'a, 'tcx, T> for Option<T> {\n     fn decode_query(self, _: CrateMetadataRef<'a>, _: TyCtxt<'tcx>, err: impl FnOnce() -> !) -> T {\n         if let Some(l) = self { l } else { err() }\n@@ -862,16 +868,14 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     }\n \n     fn def_kind(self, item_id: DefIndex) -> DefKind {\n-        self.root.tables.opt_def_kind.get(self, item_id).map(|k| k.decode(self)).unwrap_or_else(\n-            || {\n-                bug!(\n-                    \"CrateMetadata::def_kind({:?}): id not found, in crate {:?} with number {}\",\n-                    item_id,\n-                    self.root.name,\n-                    self.cnum,\n-                )\n-            },\n-        )\n+        self.root.tables.opt_def_kind.get(self, item_id).unwrap_or_else(|| {\n+            bug!(\n+                \"CrateMetadata::def_kind({:?}): id not found, in crate {:?} with number {}\",\n+                item_id,\n+                self.root.name,\n+                self.cnum,\n+            )\n+        })\n     }\n \n     fn get_span(self, index: DefIndex, sess: &Session) -> Span {"}, {"sha": "818d51cc66a9740f41f3b8c8e68674ae1b472c7e", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72be5b81df7d038411ea0f88f6ef351e386aca9c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72be5b81df7d038411ea0f88f6ef351e386aca9c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=72be5b81df7d038411ea0f88f6ef351e386aca9c", "patch": "@@ -988,7 +988,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             let def_id = local_id.to_def_id();\n             let def_kind = tcx.opt_def_kind(local_id);\n             let Some(def_kind) = def_kind else { continue };\n-            record!(self.tables.opt_def_kind[def_id] <- def_kind);\n+            self.tables.opt_def_kind.set(def_id.index, def_kind);\n             record!(self.tables.def_span[def_id] <- tcx.def_span(def_id));\n             record!(self.tables.attributes[def_id] <- tcx.get_attrs(def_id));\n             record!(self.tables.expn_that_defined[def_id] <- self.tcx.expn_that_defined(def_id));\n@@ -1644,7 +1644,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 self.tables.proc_macro_quoted_spans.set(i, span);\n             }\n \n-            record!(self.tables.opt_def_kind[LOCAL_CRATE.as_def_id()] <- DefKind::Mod);\n+            self.tables.opt_def_kind.set(LOCAL_CRATE.as_def_id().index, DefKind::Mod);\n             record!(self.tables.def_span[LOCAL_CRATE.as_def_id()] <- tcx.def_span(LOCAL_CRATE.as_def_id()));\n             record!(self.tables.attributes[LOCAL_CRATE.as_def_id()] <- tcx.get_attrs(LOCAL_CRATE.as_def_id()));\n             record!(self.tables.visibility[LOCAL_CRATE.as_def_id()] <- tcx.visibility(LOCAL_CRATE.as_def_id()));\n@@ -1685,7 +1685,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 def_key.disambiguated_data.data = DefPathData::MacroNs(name);\n \n                 let def_id = id.to_def_id();\n-                record!(self.tables.opt_def_kind[def_id] <- DefKind::Macro(macro_kind));\n+                self.tables.opt_def_kind.set(def_id.index, DefKind::Macro(macro_kind));\n                 record!(self.tables.kind[def_id] <- EntryKind::ProcMacro(macro_kind));\n                 record!(self.tables.attributes[def_id] <- attrs);\n                 record!(self.tables.def_keys[def_id] <- def_key);"}, {"sha": "192857ce577224e679b20e4b23f389603ea19cff", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72be5b81df7d038411ea0f88f6ef351e386aca9c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72be5b81df7d038411ea0f88f6ef351e386aca9c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=72be5b81df7d038411ea0f88f6ef351e386aca9c", "patch": "@@ -286,7 +286,7 @@ define_tables! {\n     attributes: Table<DefIndex, Lazy<[ast::Attribute]>>,\n     children: Table<DefIndex, Lazy<[DefIndex]>>,\n \n-    opt_def_kind: Table<DefIndex, Lazy<DefKind>>,\n+    opt_def_kind: Table<DefIndex, DefKind>,\n     visibility: Table<DefIndex, Lazy<ty::Visibility>>,\n     def_span: Table<DefIndex, Lazy<Span>>,\n     def_ident_span: Table<DefIndex, Lazy<Span>>,"}, {"sha": "bbf6bde95e5990785a3bc491f6ec1ca0d0154cbe", "filename": "compiler/rustc_metadata/src/rmeta/table.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/72be5b81df7d038411ea0f88f6ef351e386aca9c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72be5b81df7d038411ea0f88f6ef351e386aca9c/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs?ref=72be5b81df7d038411ea0f88f6ef351e386aca9c", "patch": "@@ -1,8 +1,10 @@\n use crate::rmeta::*;\n \n+use rustc_hir::def::{CtorKind, CtorOf};\n use rustc_index::vec::Idx;\n use rustc_serialize::opaque::Encoder;\n use rustc_serialize::Encoder as _;\n+use rustc_span::hygiene::MacroKind;\n use std::convert::TryInto;\n use std::marker::PhantomData;\n use std::num::NonZeroUsize;\n@@ -105,6 +107,50 @@ macro_rules! fixed_size_enum {\n     }\n }\n \n+fixed_size_enum! {\n+    DefKind {\n+        ( Mod                                      )\n+        ( Struct                                   )\n+        ( Union                                    )\n+        ( Enum                                     )\n+        ( Variant                                  )\n+        ( Trait                                    )\n+        ( TyAlias                                  )\n+        ( ForeignTy                                )\n+        ( TraitAlias                               )\n+        ( AssocTy                                  )\n+        ( TyParam                                  )\n+        ( Fn                                       )\n+        ( Const                                    )\n+        ( ConstParam                               )\n+        ( AssocFn                                  )\n+        ( AssocConst                               )\n+        ( ExternCrate                              )\n+        ( Use                                      )\n+        ( ForeignMod                               )\n+        ( AnonConst                                )\n+        ( InlineConst                              )\n+        ( OpaqueTy                                 )\n+        ( Field                                    )\n+        ( LifetimeParam                            )\n+        ( GlobalAsm                                )\n+        ( Impl                                     )\n+        ( Closure                                  )\n+        ( Generator                                )\n+        ( Static(ast::Mutability::Not)             )\n+        ( Static(ast::Mutability::Mut)             )\n+        ( Ctor(CtorOf::Struct, CtorKind::Fn)       )\n+        ( Ctor(CtorOf::Struct, CtorKind::Const)    )\n+        ( Ctor(CtorOf::Struct, CtorKind::Fictive)  )\n+        ( Ctor(CtorOf::Variant, CtorKind::Fn)      )\n+        ( Ctor(CtorOf::Variant, CtorKind::Const)   )\n+        ( Ctor(CtorOf::Variant, CtorKind::Fictive) )\n+        ( Macro(MacroKind::Bang)                   )\n+        ( Macro(MacroKind::Attr)                   )\n+        ( Macro(MacroKind::Derive)                 )\n+    }\n+}\n+\n fixed_size_enum! {\n     ty::ImplPolarity {\n         ( Positive    )"}]}