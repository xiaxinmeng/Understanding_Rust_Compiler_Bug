{"sha": "6149a83c0bae2976328ec9e433eb0803048c3a1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNDlhODNjMGJhZTI5NzYzMjhlYzllNDMzZWIwODAzMDQ4YzNhMWQ=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-08-25T07:54:41Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2018-09-20T05:31:30Z"}, "message": "Parse, feature-gate, and validate the #[marker] attribute", "tree": {"sha": "ce71ed1826d9bc558491e24541dde7e2a587d931", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce71ed1826d9bc558491e24541dde7e2a587d931"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6149a83c0bae2976328ec9e433eb0803048c3a1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6149a83c0bae2976328ec9e433eb0803048c3a1d", "html_url": "https://github.com/rust-lang/rust/commit/6149a83c0bae2976328ec9e433eb0803048c3a1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6149a83c0bae2976328ec9e433eb0803048c3a1d/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62c6e4e1457c78de812f0ee5ee3370831b5d12f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/62c6e4e1457c78de812f0ee5ee3370831b5d12f5", "html_url": "https://github.com/rust-lang/rust/commit/62c6e4e1457c78de812f0ee5ee3370831b5d12f5"}], "stats": {"total": 99, "additions": 97, "deletions": 2}, "files": [{"sha": "c82e2111b771f7f36050cbbf28ea9b726fbe5bff", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6149a83c0bae2976328ec9e433eb0803048c3a1d/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6149a83c0bae2976328ec9e433eb0803048c3a1d/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=6149a83c0bae2976328ec9e433eb0803048c3a1d", "patch": "@@ -2116,6 +2116,34 @@ struct Foo;\n ```\n \"##,\n \n+E0713: r##\"\n+This error indicates that a `#[marker]` attribute was incorrectly placed\n+on something other than a trait.\n+\n+Examples of erroneous code:\n+\n+```compile_fail,E0713\n+# #![feature(marker_trait_attr)]\n+\n+#[marker]\n+struct Foo { }\n+```\n+\"##,\n+\n+E0714: r##\"\n+This error indicates that a `#[marker]` attribute had a value. The\n+`#[marker]` should be empty.\n+\n+Examples of erroneous code:\n+\n+```compile_fail,E0714\n+# #![feature(marker_trait_attr)]\n+\n+#[marker(anything)]\n+trait Foo {}\n+```\n+\"##,\n+\n }\n \n "}, {"sha": "57fc561a2f4adbd0dd276a70be2a06a7ec133ac2", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6149a83c0bae2976328ec9e433eb0803048c3a1d/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6149a83c0bae2976328ec9e433eb0803048c3a1d/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=6149a83c0bae2976328ec9e433eb0803048c3a1d", "patch": "@@ -32,6 +32,7 @@ enum Target {\n     Statement,\n     Closure,\n     Static,\n+    Trait,\n     Other,\n }\n \n@@ -45,6 +46,7 @@ impl Target {\n             hir::ItemKind::Const(..) => Target::Const,\n             hir::ItemKind::ForeignMod(..) => Target::ForeignMod,\n             hir::ItemKind::Static(..) => Target::Static,\n+            hir::ItemKind::Trait(..) => Target::Trait,\n             _ => Target::Other,\n         }\n     }\n@@ -70,6 +72,8 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n                 self.check_inline(attr, &item.span, target)\n             } else if attr.check_name(\"non_exhaustive\") {\n                 self.check_non_exhaustive(attr, item, target)\n+            } else if attr.check_name(\"marker\") {\n+                self.check_marker(attr, item, target)\n             }\n         }\n \n@@ -114,6 +118,31 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n         }\n     }\n \n+    /// Check if the `#[marker]` attribute on an `item` is valid.\n+    fn check_marker(&self, attr: &hir::Attribute, item: &hir::Item, target: Target) {\n+        match target {\n+            Target::Trait => { /* Valid */ },\n+            _ => {\n+                struct_span_err!(self.tcx.sess,\n+                                 attr.span,\n+                                 E0713,\n+                                 \"attribute can only be applied to a trait\")\n+                    .span_label(item.span, \"not a trait\")\n+                    .emit();\n+                return;\n+            }\n+        }\n+\n+        if attr.meta_item_list().is_some() || attr.value_str().is_some() {\n+            struct_span_err!(self.tcx.sess,\n+                             attr.span,\n+                             E0714,\n+                             \"attribute should be empty\")\n+                .span_label(item.span, \"not empty\")\n+                .emit();\n+        }\n+    }\n+\n     /// Check if the `#[repr]` attributes on `item` are valid.\n     fn check_repr(&self, item: &hir::Item, target: Target) {\n         // Extract the names of all repr hints, e.g., [foo, bar, align] for:"}, {"sha": "507ed5947895dbae476487fef95d5ebf75b4702f", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6149a83c0bae2976328ec9e433eb0803048c3a1d/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6149a83c0bae2976328ec9e433eb0803048c3a1d/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=6149a83c0bae2976328ec9e433eb0803048c3a1d", "patch": "@@ -735,8 +735,7 @@ fn trait_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::\n         err.emit();\n     }\n \n-    let is_marker = false; // FIXME (scottmcm)\n-\n+    let is_marker = tcx.has_attr(def_id, \"marker\");\n     let def_path_hash = tcx.def_path_hash(def_id);\n     let def = ty::TraitDef::new(def_id, unsafety, paren_sugar, is_auto, is_marker, def_path_hash);\n     tcx.alloc_trait_def(def)"}, {"sha": "8f7f9cac4475b97afd461b96f25d8efa325f3c8f", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6149a83c0bae2976328ec9e433eb0803048c3a1d/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6149a83c0bae2976328ec9e433eb0803048c3a1d/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=6149a83c0bae2976328ec9e433eb0803048c3a1d", "patch": "@@ -355,6 +355,9 @@ declare_features! (\n     // Allows overlapping impls of marker traits\n     (active, overlapping_marker_traits, \"1.18.0\", Some(29864), None),\n \n+    // Trait attribute to allow overlapping impls\n+    (active, marker_trait_attr, \"1.30.0\", Some(29864), None),\n+\n     // rustc internal\n     (active, abi_thiscall, \"1.19.0\", None, None),\n \n@@ -805,6 +808,12 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                           \"non exhaustive is an experimental feature\",\n                                           cfg_fn!(non_exhaustive))),\n \n+    // RFC #1268\n+    (\"marker\", Normal, Gated(Stability::Unstable,\n+                             \"marker_trait_attr\",\n+                             \"marker traits is an experimental feature\",\n+                             cfg_fn!(marker_trait_attr))),\n+\n     (\"plugin\", CrateLevel, Gated(Stability::Unstable,\n                                  \"plugin\",\n                                  \"compiler plugins are experimental \\"}, {"sha": "508ffe3845bbd532149407f6aa9cdc142b04598a", "filename": "src/test/ui/feature-gates/feature-gate-marker_trait_attr.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6149a83c0bae2976328ec9e433eb0803048c3a1d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-marker_trait_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6149a83c0bae2976328ec9e433eb0803048c3a1d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-marker_trait_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-marker_trait_attr.rs?ref=6149a83c0bae2976328ec9e433eb0803048c3a1d", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fmt::{Debug, Display};\n+\n+#[marker] trait ExplicitMarker {}\n+//~^ ERROR marker traits is an experimental feature (see issue #29864)\n+\n+impl<T: Display> ExplicitMarker for T {}\n+impl<T: Debug> ExplicitMarker for T {}\n+\n+fn main() {}"}, {"sha": "4023a04000a03b8a1ead2a3156d56e1ced1669f0", "filename": "src/test/ui/feature-gates/feature-gate-marker_trait_attr.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6149a83c0bae2976328ec9e433eb0803048c3a1d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-marker_trait_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6149a83c0bae2976328ec9e433eb0803048c3a1d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-marker_trait_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-marker_trait_attr.stderr?ref=6149a83c0bae2976328ec9e433eb0803048c3a1d", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: marker traits is an experimental feature (see issue #29864)\n+  --> $DIR/feature-gate-marker_trait_attr.rs:13:1\n+   |\n+LL | #[marker] trait ExplicitMarker {}\n+   | ^^^^^^^^^\n+   |\n+   = help: add #![feature(marker_trait_attr)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}]}