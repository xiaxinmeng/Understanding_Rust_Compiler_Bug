{"sha": "60aafee963b04343c3aa80f069aeafd08013124f", "node_id": "C_kwDOAAsO6NoAKDYwYWFmZWU5NjNiMDQzNDNjM2FhODBmMDY5YWVhZmQwODAxMzEyNGY", "commit": {"author": {"name": "Mu42", "email": "mu001999@outlook.com", "date": "2023-03-20T07:32:21Z"}, "committer": {"name": "Mu42", "email": "mu001999@outlook.com", "date": "2023-03-20T07:32:21Z"}, "message": "Remove Ty::is_region_ptr", "tree": {"sha": "0e1c3d366b26cfb58d68f20e26e50e00714dcb74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e1c3d366b26cfb58d68f20e26e50e00714dcb74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60aafee963b04343c3aa80f069aeafd08013124f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60aafee963b04343c3aa80f069aeafd08013124f", "html_url": "https://github.com/rust-lang/rust/commit/60aafee963b04343c3aa80f069aeafd08013124f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60aafee963b04343c3aa80f069aeafd08013124f/comments", "author": {"login": "MU001999", "id": 21022101, "node_id": "MDQ6VXNlcjIxMDIyMTAx", "avatar_url": "https://avatars.githubusercontent.com/u/21022101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MU001999", "html_url": "https://github.com/MU001999", "followers_url": "https://api.github.com/users/MU001999/followers", "following_url": "https://api.github.com/users/MU001999/following{/other_user}", "gists_url": "https://api.github.com/users/MU001999/gists{/gist_id}", "starred_url": "https://api.github.com/users/MU001999/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MU001999/subscriptions", "organizations_url": "https://api.github.com/users/MU001999/orgs", "repos_url": "https://api.github.com/users/MU001999/repos", "events_url": "https://api.github.com/users/MU001999/events{/privacy}", "received_events_url": "https://api.github.com/users/MU001999/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MU001999", "id": 21022101, "node_id": "MDQ6VXNlcjIxMDIyMTAx", "avatar_url": "https://avatars.githubusercontent.com/u/21022101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MU001999", "html_url": "https://github.com/MU001999", "followers_url": "https://api.github.com/users/MU001999/followers", "following_url": "https://api.github.com/users/MU001999/following{/other_user}", "gists_url": "https://api.github.com/users/MU001999/gists{/gist_id}", "starred_url": "https://api.github.com/users/MU001999/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MU001999/subscriptions", "organizations_url": "https://api.github.com/users/MU001999/orgs", "repos_url": "https://api.github.com/users/MU001999/repos", "events_url": "https://api.github.com/users/MU001999/events{/privacy}", "received_events_url": "https://api.github.com/users/MU001999/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edb0717e7ca51dbde53f1dc26956efb0d90825c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/edb0717e7ca51dbde53f1dc26956efb0d90825c0", "html_url": "https://github.com/rust-lang/rust/commit/edb0717e7ca51dbde53f1dc26956efb0d90825c0"}], "stats": {"total": 4, "additions": 1, "deletions": 3}, "files": [{"sha": "94806e0d798ed5a239c40aab8be54d771e453c53", "filename": "src/vtable.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60aafee963b04343c3aa80f069aeafd08013124f/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60aafee963b04343c3aa80f069aeafd08013124f/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=60aafee963b04343c3aa80f069aeafd08013124f", "patch": "@@ -48,9 +48,7 @@ pub(crate) fn get_ptr_and_method_ref<'tcx>(\n ) -> (Pointer, Value) {\n     let (ptr, vtable) = 'block: {\n         if let Abi::Scalar(_) = arg.layout().abi {\n-            'descend_newtypes: while !arg.layout().ty.is_unsafe_ptr()\n-                && !arg.layout().ty.is_region_ptr()\n-            {\n+            'descend_newtypes: while !arg.layout().ty.is_unsafe_ptr() && !arg.layout().ty.is_ref() {\n                 for i in 0..arg.layout().fields.count() {\n                     let field = arg.value_field(fx, mir::Field::new(i));\n                     if !field.layout().is_zst() {"}]}