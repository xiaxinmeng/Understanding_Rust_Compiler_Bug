{"sha": "73497b11bb4d0926dca58c9ca1f65746dff673e8", "node_id": "C_kwDOAAsO6NoAKDczNDk3YjExYmI0ZDA5MjZkY2E1OGM5Y2ExZjY1NzQ2ZGZmNjczZTg", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-04-29T12:24:28Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-04-29T15:58:37Z"}, "message": "ignore known paths when deciding whether to abbreviate the output", "tree": {"sha": "79311d7afa1557e186499f897d7f68492b0508b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79311d7afa1557e186499f897d7f68492b0508b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73497b11bb4d0926dca58c9ca1f65746dff673e8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmJsCy0ACgkQzXazX3c0\ndp4M7w//en8emjnqyA7aAqVjBQ0m1oPkwAtTbqIoKF/4A4S183ZMM/FDdzIjob23\nakjuvvNiQlD0/2f+A+01FyFTrKj4otthnFYm9r9qJVHY3Y7FIHb5K5xKeXvxm0C8\nNXXRUmvnKwMOaTI2PRZ9TxVOlmy9MdiMWhSEr6B0d1i43xmqIiNaSouZN+mACdCT\nMIr0Tq7s5vcHHtRaO9hQAmt6r18S38M5omdmZK6t2TyeALs3cBh167jh7+XKOJgF\nqlPWOtyp+xVkzh2W9lVVh3qwErKjCbR/wxgdoYhdoupi+n73qNx/yg74KlHNkvfo\nlUcSULk4eKsKUkUj+5f0JogLIVI6J8a4gRzrDG8M6radU46jyxI6eWEpv32zJv6F\nQv/BQyW4TJxdpLcn+gqCdUjDr/FEs9eUEeZpxKsOeSDVfwKZRLh9HoMbcXoyzlXO\nphzffMuaWW+3he5aHBOssF/z80rZ+cL/LRAtQBUMIs9wRpuYBoJqMh1Vw+X0Ht7F\nrRQZaz5ycJCW3vIiVI1AV2FrpH3jLiGGJh/LZOXG5sXGNfN7wQC12MiEI+e+RdWm\nQXgOHcyabdxjSvXhEqsbmCoVogbjyyK8JnipX5zgWc3OvIhP9KjC/3gHi8lB35Sf\nWzvcJSiepk666mS8zbPqp2tGwzjRW5+UakXVj5zXI4RkWr7pLh4=\n=k5hV\n-----END PGP SIGNATURE-----", "payload": "tree 79311d7afa1557e186499f897d7f68492b0508b4\nparent 87937d3b6c302dfedfa5c4b94d0a30985d46298d\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1651235068 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1651247917 +0200\n\nignore known paths when deciding whether to abbreviate the output\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73497b11bb4d0926dca58c9ca1f65746dff673e8", "html_url": "https://github.com/rust-lang/rust/commit/73497b11bb4d0926dca58c9ca1f65746dff673e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73497b11bb4d0926dca58c9ca1f65746dff673e8/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87937d3b6c302dfedfa5c4b94d0a30985d46298d", "url": "https://api.github.com/repos/rust-lang/rust/commits/87937d3b6c302dfedfa5c4b94d0a30985d46298d", "html_url": "https://github.com/rust-lang/rust/commit/87937d3b6c302dfedfa5c4b94d0a30985d46298d"}], "stats": {"total": 69, "additions": 54, "deletions": 15}, "files": [{"sha": "1de355693236110b2086fd560a31087dad4bcb50", "filename": "src/tools/compiletest/src/read2.rs", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/73497b11bb4d0926dca58c9ca1f65746dff673e8/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73497b11bb4d0926dca58c9ca1f65746dff673e8/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fread2.rs?ref=73497b11bb4d0926dca58c9ca1f65746dff673e8", "patch": "@@ -5,29 +5,47 @@ pub use self::imp::read2;\n use std::io;\n use std::process::{Child, Output};\n \n-pub fn read2_abbreviated(mut child: Child) -> io::Result<Output> {\n+pub fn read2_abbreviated(mut child: Child, exclude_from_len: &[String]) -> io::Result<Output> {\n     use io::Write;\n     use std::mem::replace;\n \n     const HEAD_LEN: usize = 160 * 1024;\n     const TAIL_LEN: usize = 256 * 1024;\n \n     enum ProcOutput {\n-        Full(Vec<u8>),\n+        Full { bytes: Vec<u8>, excluded_len: usize },\n         Abbreviated { head: Vec<u8>, skipped: usize, tail: Box<[u8]> },\n     }\n \n     impl ProcOutput {\n-        fn extend(&mut self, data: &[u8]) {\n+        fn extend(&mut self, data: &[u8], exclude_from_len: &[String]) {\n             let new_self = match *self {\n-                ProcOutput::Full(ref mut bytes) => {\n+                ProcOutput::Full { ref mut bytes, ref mut excluded_len } => {\n                     bytes.extend_from_slice(data);\n+\n+                    // We had problems in the past with tests failing only in some environments,\n+                    // due to the length of the base path pushing the output size over the limit.\n+                    //\n+                    // To make those failures deterministic across all environments we ignore known\n+                    // paths when calculating the string length, while still including the full\n+                    // path in the output. This could result in some output being larger than the\n+                    // threshold, but it's better than having nondeterministic failures.\n+                    for pattern in exclude_from_len {\n+                        let pattern_bytes = pattern.as_bytes();\n+                        let matches = data\n+                            .windows(pattern_bytes.len())\n+                            .filter(|window| window == &pattern_bytes)\n+                            .count();\n+                        *excluded_len += matches * pattern_bytes.len();\n+                    }\n+\n                     let new_len = bytes.len();\n-                    if new_len <= HEAD_LEN + TAIL_LEN {\n+                    if new_len.saturating_sub(*excluded_len) <= HEAD_LEN + TAIL_LEN {\n                         return;\n                     }\n-                    let tail = bytes.split_off(new_len - TAIL_LEN).into_boxed_slice();\n-                    let head = replace(bytes, Vec::new());\n+\n+                    let mut head = replace(bytes, Vec::new());\n+                    let tail = head.split_off(new_len - TAIL_LEN).into_boxed_slice();\n                     let skipped = new_len - HEAD_LEN - TAIL_LEN;\n                     ProcOutput::Abbreviated { head, skipped, tail }\n                 }\n@@ -47,7 +65,7 @@ pub fn read2_abbreviated(mut child: Child) -> io::Result<Output> {\n \n         fn into_bytes(self) -> Vec<u8> {\n             match self {\n-                ProcOutput::Full(bytes) => bytes,\n+                ProcOutput::Full { bytes, .. } => bytes,\n                 ProcOutput::Abbreviated { mut head, skipped, tail } => {\n                     write!(&mut head, \"\\n\\n<<<<<< SKIPPED {} BYTES >>>>>>\\n\\n\", skipped).unwrap();\n                     head.extend_from_slice(&tail);\n@@ -57,15 +75,15 @@ pub fn read2_abbreviated(mut child: Child) -> io::Result<Output> {\n         }\n     }\n \n-    let mut stdout = ProcOutput::Full(Vec::new());\n-    let mut stderr = ProcOutput::Full(Vec::new());\n+    let mut stdout = ProcOutput::Full { bytes: Vec::new(), excluded_len: 0 };\n+    let mut stderr = ProcOutput::Full { bytes: Vec::new(), excluded_len: 0 };\n \n     drop(child.stdin.take());\n     read2(\n         child.stdout.take().unwrap(),\n         child.stderr.take().unwrap(),\n         &mut |is_stdout, data, _| {\n-            if is_stdout { &mut stdout } else { &mut stderr }.extend(data);\n+            if is_stdout { &mut stdout } else { &mut stderr }.extend(data, exclude_from_len);\n             data.clear();\n         },\n     )?;"}, {"sha": "fe8d451da4914b6ab3bc8c55714f592f99cf297f", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/73497b11bb4d0926dca58c9ca1f65746dff673e8/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73497b11bb4d0926dca58c9ca1f65746dff673e8/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=73497b11bb4d0926dca58c9ca1f65746dff673e8", "patch": "@@ -28,7 +28,7 @@ use std::hash::{Hash, Hasher};\n use std::io::prelude::*;\n use std::io::{self, BufReader};\n use std::path::{Path, PathBuf};\n-use std::process::{Command, ExitStatus, Output, Stdio};\n+use std::process::{Child, Command, ExitStatus, Output, Stdio};\n use std::str;\n \n use glob::glob;\n@@ -1735,6 +1735,28 @@ impl<'test> TestCx<'test> {\n         dylib\n     }\n \n+    fn read2_abbreviated(&self, child: Child) -> Output {\n+        let mut exclude_from_len = Vec::new();\n+        let mut add_path = |path: &Path| {\n+            let path = path.display().to_string();\n+            let windows = path.replace(\"\\\\\", \"\\\\\\\\\");\n+            if windows != path {\n+                exclude_from_len.push(windows);\n+            }\n+            exclude_from_len.push(path);\n+        };\n+\n+        // List of strings that will not be measured when determining whether the output is larger\n+        // than the output truncation threshold.\n+        //\n+        // Note: avoid adding a subdirectory of an already excluded directory here, otherwise the\n+        // same slice of text will be double counted and the truncation might not happen.\n+        add_path(&self.config.src_base);\n+        add_path(&self.config.build_base);\n+\n+        read2_abbreviated(child, &exclude_from_len).expect(\"failed to read output\")\n+    }\n+\n     fn compose_and_run(\n         &self,\n         mut command: Command,\n@@ -1769,8 +1791,7 @@ impl<'test> TestCx<'test> {\n             child.stdin.as_mut().unwrap().write_all(input.as_bytes()).unwrap();\n         }\n \n-        let Output { status, stdout, stderr } =\n-            read2_abbreviated(child).expect(\"failed to read output\");\n+        let Output { status, stdout, stderr } = self.read2_abbreviated(child);\n \n         let result = ProcRes {\n             status,\n@@ -2959,7 +2980,7 @@ impl<'test> TestCx<'test> {\n             }\n         }\n \n-        let output = cmd.spawn().and_then(read2_abbreviated).expect(\"failed to spawn `make`\");\n+        let output = self.read2_abbreviated(cmd.spawn().expect(\"failed to spawn `make`\"));\n         if !output.status.success() {\n             let res = ProcRes {\n                 status: output.status,"}]}