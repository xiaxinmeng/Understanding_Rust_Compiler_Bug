{"sha": "10fb065b146d7d03a65bbc73cdb34d32523dafa1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZmIwNjViMTQ2ZDdkMDNhNjViYmM3M2NkYjM0ZDMyNTIzZGFmYTE=", "commit": {"author": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2021-03-12T04:39:25Z"}, "committer": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2021-03-12T14:16:04Z"}, "message": "add relevance score test", "tree": {"sha": "9b1547ca779c9671ba2d03c85ac4b59d8b72d51a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b1547ca779c9671ba2d03c85ac4b59d8b72d51a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10fb065b146d7d03a65bbc73cdb34d32523dafa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10fb065b146d7d03a65bbc73cdb34d32523dafa1", "html_url": "https://github.com/rust-lang/rust/commit/10fb065b146d7d03a65bbc73cdb34d32523dafa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10fb065b146d7d03a65bbc73cdb34d32523dafa1/comments", "author": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ee3914c61f0476d28d3f74f046f487900e2a6fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ee3914c61f0476d28d3f74f046f487900e2a6fb", "html_url": "https://github.com/rust-lang/rust/commit/9ee3914c61f0476d28d3f74f046f487900e2a6fb"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "352640e3b606b84a4893e7e93b4bb64abc802345", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/10fb065b146d7d03a65bbc73cdb34d32523dafa1/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10fb065b146d7d03a65bbc73cdb34d32523dafa1/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=10fb065b146d7d03a65bbc73cdb34d32523dafa1", "patch": "@@ -499,3 +499,63 @@ impl Builder {\n         self\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use itertools::Itertools;\n+    use test_utils::assert_eq_text;\n+\n+    use super::CompletionRelevance;\n+\n+    /// Check that these are CompletionRelevance are sorted in ascending order\n+    /// by their relevance score.\n+    ///\n+    /// We want to avoid making assertions about the absolute score of any\n+    /// item, but we do want to assert whether each is >, <, or == to the\n+    /// others.\n+    ///\n+    /// If provided vec![vec![a], vec![b, c], vec![d]], then this will assert:\n+    ///     a.score < b.score == c.score < d.score\n+    fn check_relevance_score_ordered(expected_relevance_order: Vec<Vec<CompletionRelevance>>) {\n+        let expected = format!(\"{:#?}\", &expected_relevance_order);\n+\n+        let actual_relevance_order = expected_relevance_order\n+            .into_iter()\n+            .flatten()\n+            .map(|r| (r.score(), r))\n+            .sorted_by_key(|(score, _r)| *score)\n+            .fold(\n+                (u8::MIN, vec![vec![]]),\n+                |(mut currently_collecting_score, mut out), (score, r)| {\n+                    if currently_collecting_score == score {\n+                        out.last_mut().unwrap().push(r);\n+                    } else {\n+                        currently_collecting_score = score;\n+                        out.push(vec![r]);\n+                    }\n+                    (currently_collecting_score, out)\n+                },\n+            )\n+            .1;\n+\n+        let actual = format!(\"{:#?}\", &actual_relevance_order);\n+\n+        assert_eq_text!(&expected, &actual);\n+    }\n+\n+    #[test]\n+    fn relevance_score() {\n+        // This test asserts that the relevance score for these items is ascending, and\n+        // that any items in the same vec have the same score.\n+        let expected_relevance_order = vec![\n+            vec![CompletionRelevance::default()],\n+            vec![\n+                CompletionRelevance { exact_name_match: true, ..CompletionRelevance::default() },\n+                CompletionRelevance { exact_type_match: true, ..CompletionRelevance::default() },\n+            ],\n+            vec![CompletionRelevance { exact_name_match: true, exact_type_match: true }],\n+        ];\n+\n+        check_relevance_score_ordered(expected_relevance_order);\n+    }\n+}"}]}