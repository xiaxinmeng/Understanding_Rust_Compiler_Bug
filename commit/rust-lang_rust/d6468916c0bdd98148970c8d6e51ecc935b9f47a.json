{"sha": "d6468916c0bdd98148970c8d6e51ecc935b9f47a", "node_id": "C_kwDOAAsO6NoAKGQ2NDY4OTE2YzBiZGQ5ODE0ODk3MGM4ZDZlNTFlY2M5MzViOWY0N2E", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-18T04:44:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-18T04:44:47Z"}, "message": "Rollup merge of #110450 - GuillaumeGomez:fix-nested-items-on-private-doc, r=notriddle,jyn514\n\nrustdoc: Fix invalid handling of nested items with `--document-private-items`\n\nFixes #110422.\n\nThe problem is that only impl block and re-exported `macro_rules!` items are \"visible\" as nested items. This PR adds the missing checks to handle this correctly.\n\ncc `@compiler-errors`\nr? `@notriddle`", "tree": {"sha": "cbcfe37db5d9b2d7335d9d2aecaafd83f2eba656", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbcfe37db5d9b2d7335d9d2aecaafd83f2eba656"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6468916c0bdd98148970c8d6e51ecc935b9f47a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkPiA/CRBK7hj4Ov3rIwAAoc8IAKAxZ7ePDht+VB0HsMk6CuKI\nUiaUUiYQ5SGJe6yhmDrIP5Nd/RIi8B4ix17uAb7xi+ZYxTCTu8v/HWjsD1if1fJK\nnNhZGqz8oec5mrUhdztlqmFrHfh82WKuaidQ5UqM0R0lbUIKWac0nivTosf0A+ap\nKVedtnHqUJIKPwQXmTDWNmQyDK6o+b+6WpdmkaG75Akx4+sJXcaAGy6Rv8PqyoyF\nYBxLcBvsVyrBtmAvoHjZ66qpyVzA2wccQ+aOQPQk545ICn99m5JEyU8bhNeTfFJX\nerhRJi5SVYyL+4FTke/LVtzDEoSZ6GKHCiCjzshMvKO4Ylph2caDqP5LR187MWg=\n=8D5o\n-----END PGP SIGNATURE-----\n", "payload": "tree cbcfe37db5d9b2d7335d9d2aecaafd83f2eba656\nparent 1e3a38438ab4ee7c313a32e5b065f81c0a97622d\nparent c456e15855b538aecff7b088dda6144dcde9d6ca\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1681793087 +0200\ncommitter GitHub <noreply@github.com> 1681793087 +0200\n\nRollup merge of #110450 - GuillaumeGomez:fix-nested-items-on-private-doc, r=notriddle,jyn514\n\nrustdoc: Fix invalid handling of nested items with `--document-private-items`\n\nFixes #110422.\n\nThe problem is that only impl block and re-exported `macro_rules!` items are \"visible\" as nested items. This PR adds the missing checks to handle this correctly.\n\ncc `@compiler-errors`\nr? `@notriddle`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6468916c0bdd98148970c8d6e51ecc935b9f47a", "html_url": "https://github.com/rust-lang/rust/commit/d6468916c0bdd98148970c8d6e51ecc935b9f47a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6468916c0bdd98148970c8d6e51ecc935b9f47a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e3a38438ab4ee7c313a32e5b065f81c0a97622d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e3a38438ab4ee7c313a32e5b065f81c0a97622d", "html_url": "https://github.com/rust-lang/rust/commit/1e3a38438ab4ee7c313a32e5b065f81c0a97622d"}, {"sha": "c456e15855b538aecff7b088dda6144dcde9d6ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/c456e15855b538aecff7b088dda6144dcde9d6ca", "html_url": "https://github.com/rust-lang/rust/commit/c456e15855b538aecff7b088dda6144dcde9d6ca"}], "stats": {"total": 133, "additions": 106, "deletions": 27}, "files": [{"sha": "a6089680fae9d57a8e50204991b86c2d3c9c0abd", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 38, "deletions": 10, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d6468916c0bdd98148970c8d6e51ecc935b9f47a/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6468916c0bdd98148970c8d6e51ecc935b9f47a/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=d6468916c0bdd98148970c8d6e51ecc935b9f47a", "patch": "@@ -10,6 +10,7 @@ use rustc_hir::{Node, CRATE_HIR_ID};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::{CRATE_DEF_ID, LOCAL_CRATE};\n+use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n \n@@ -87,6 +88,7 @@ pub(crate) struct RustdocVisitor<'a, 'tcx> {\n     inside_public_path: bool,\n     exact_paths: DefIdMap<Vec<Symbol>>,\n     modules: Vec<Module<'tcx>>,\n+    is_importable_from_parent: bool,\n }\n \n impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n@@ -107,6 +109,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             inside_public_path: true,\n             exact_paths: Default::default(),\n             modules: vec![om],\n+            is_importable_from_parent: true,\n         }\n     }\n \n@@ -319,19 +322,31 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         renamed: Option<Symbol>,\n         parent_id: Option<LocalDefId>,\n     ) {\n-        self.modules\n-            .last_mut()\n-            .unwrap()\n-            .items\n-            .insert((item.owner_id.def_id, renamed), (item, renamed, parent_id));\n+        if self.is_importable_from_parent\n+            // If we're inside an item, only impl blocks and `macro_rules!` with the `macro_export`\n+            // attribute can still be visible.\n+            || match item.kind {\n+                hir::ItemKind::Impl(..) => true,\n+                hir::ItemKind::Macro(_, MacroKind::Bang) => {\n+                    self.cx.tcx.has_attr(item.owner_id.def_id, sym::macro_export)\n+                }\n+                _ => false,\n+            }\n+        {\n+            self.modules\n+                .last_mut()\n+                .unwrap()\n+                .items\n+                .insert((item.owner_id.def_id, renamed), (item, renamed, parent_id));\n+        }\n     }\n \n     fn visit_item_inner(\n         &mut self,\n         item: &'tcx hir::Item<'_>,\n         renamed: Option<Symbol>,\n         import_id: Option<LocalDefId>,\n-    ) -> bool {\n+    ) {\n         debug!(\"visiting item {:?}\", item);\n         let name = renamed.unwrap_or(item.ident.name);\n         let tcx = self.cx.tcx;\n@@ -448,7 +463,6 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                 }\n             }\n         }\n-        true\n     }\n \n     fn visit_foreign_item_inner(\n@@ -485,9 +499,23 @@ impl<'a, 'tcx> Visitor<'tcx> for RustdocVisitor<'a, 'tcx> {\n     }\n \n     fn visit_item(&mut self, i: &'tcx hir::Item<'tcx>) {\n-        if self.visit_item_inner(i, None, None) {\n-            walk_item(self, i);\n-        }\n+        self.visit_item_inner(i, None, None);\n+        let new_value = if self.is_importable_from_parent {\n+            matches!(\n+                i.kind,\n+                hir::ItemKind::Mod(..)\n+                    | hir::ItemKind::ForeignMod { .. }\n+                    | hir::ItemKind::Impl(..)\n+                    | hir::ItemKind::Trait(..)\n+            )\n+        } else {\n+            // Whatever the context, if it's an impl block, the items inside it can be used so they\n+            // should be visible.\n+            matches!(i.kind, hir::ItemKind::Impl(..))\n+        };\n+        let prev = mem::replace(&mut self.is_importable_from_parent, new_value);\n+        walk_item(self, i);\n+        self.is_importable_from_parent = prev;\n     }\n \n     fn visit_mod(&mut self, _: &hir::Mod<'tcx>, _: Span, _: hir::HirId) {"}, {"sha": "096130d7768283beb825834c442d1c8ad1ddea0a", "filename": "tests/rustdoc-ui/infinite-recursive-type-impl-trait.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d6468916c0bdd98148970c8d6e51ecc935b9f47a/tests%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6468916c0bdd98148970c8d6e51ecc935b9f47a/tests%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.rs?ref=d6468916c0bdd98148970c8d6e51ecc935b9f47a", "patch": "@@ -1,6 +1,9 @@\n+// check-pass\n+\n fn f() -> impl Sized {\n-    enum E { //~ ERROR\n+    enum E {\n         V(E),\n     }\n+\n     unimplemented!()\n }"}, {"sha": "a61577bd14afce57afb9e4adabdeb9329774a656", "filename": "tests/rustdoc-ui/infinite-recursive-type-impl-trait.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1e3a38438ab4ee7c313a32e5b065f81c0a97622d/tests%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e3a38438ab4ee7c313a32e5b065f81c0a97622d/tests%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait.stderr?ref=1e3a38438ab4ee7c313a32e5b065f81c0a97622d", "patch": "@@ -1,16 +0,0 @@\n-error[E0072]: recursive type `f::E` has infinite size\n-  --> $DIR/infinite-recursive-type-impl-trait.rs:2:5\n-   |\n-LL |     enum E {\n-   |     ^^^^^^\n-LL |         V(E),\n-   |           - recursive without indirection\n-   |\n-help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to break the cycle\n-   |\n-LL |         V(Box<E>),\n-   |           ++++ +\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0072`."}, {"sha": "ee8ed5cc6e17f6a2c0efb75640a24f0d79871cbe", "filename": "tests/rustdoc/issue-110422-inner-private.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/d6468916c0bdd98148970c8d6e51ecc935b9f47a/tests%2Frustdoc%2Fissue-110422-inner-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6468916c0bdd98148970c8d6e51ecc935b9f47a/tests%2Frustdoc%2Fissue-110422-inner-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-110422-inner-private.rs?ref=d6468916c0bdd98148970c8d6e51ecc935b9f47a", "patch": "@@ -0,0 +1,64 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/110422>.\n+// This test ensures that inner items (except for implementations and macros)\n+// don't appear in documentation.\n+\n+// compile-flags: --document-private-items\n+\n+#![crate_name = \"foo\"]\n+\n+// @has 'foo/index.html'\n+// Checking there is no \"trait\" entry.\n+// @count - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 4\n+// @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Structs'\n+// @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Constants'\n+// @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Functions'\n+// @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Macros'\n+\n+// @has - '//a[@href=\"fn.foo.html\"]' 'foo'\n+fn foo() {\n+    fn bar() {}\n+\n+    // @has - '//a[@class=\"macro\"]' 'visible_macro'\n+    // @!has - '//a[@class=\"macro\"]' 'non_visible_macro'\n+    // @has 'foo/macro.visible_macro.html'\n+    // @!has 'foo/macro.non_visible_macro.html'\n+    #[macro_export]\n+    macro_rules! visible_macro {\n+        () => {}\n+    }\n+\n+    macro_rules! non_visible_macro {\n+        () => {}\n+    }\n+}\n+\n+// @has 'foo/index.html'\n+// @has - '//a[@href=\"struct.Bar.html\"]' 'Bar'\n+struct Bar;\n+\n+const BAR: i32 = {\n+    // @!has - '//a[@href=\"fn.yo.html\"]' 'yo'\n+    // @!has 'foo/fn.yo.html'\n+    fn yo() {}\n+\n+    // @!has 'foo/index.html' '//a[@href=\"trait.Foo.html\"]' 'Foo'\n+    // @!has 'foo/trait.Foo.html'\n+    trait Foo {\n+        fn babar() {}\n+    }\n+    impl Foo for Bar {}\n+\n+    // @has 'foo/struct.Bar.html'\n+    // @has - '//*[@id=\"method.foo\"]/*[@class=\"code-header\"]' 'pub(crate) fn foo()'\n+    // @count - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 3\n+    // We now check that the `Foo` trait is not documented nor visible on `Bar` page.\n+    // @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Implementations'\n+    // @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Auto Trait Implementations'\n+    // @has - '//*[@id=\"main-content\"]/*[@class=\"small-section-header\"]' 'Blanket Implementations'\n+    // @!has - '//*[@href=\"trait.Foo.html#method.babar\"]/*[@class=\"code-header\"]' 'fn babar()'\n+    impl Bar {\n+        fn foo() {}\n+    }\n+\n+    1\n+};"}]}