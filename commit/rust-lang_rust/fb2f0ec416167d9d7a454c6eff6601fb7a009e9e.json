{"sha": "fb2f0ec416167d9d7a454c6eff6601fb7a009e9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMmYwZWM0MTYxNjdkOWQ3YTQ1NGM2ZWZmNjYwMWZiN2EwMDllOWU=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-12-11T04:57:01Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-10T08:08:24Z"}, "message": "Use if let instead of match with one meaningful arm", "tree": {"sha": "8c4eb79431dd0d64a95dc9f42e6470beb49ed277", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c4eb79431dd0d64a95dc9f42e6470beb49ed277"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb2f0ec416167d9d7a454c6eff6601fb7a009e9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb2f0ec416167d9d7a454c6eff6601fb7a009e9e", "html_url": "https://github.com/rust-lang/rust/commit/fb2f0ec416167d9d7a454c6eff6601fb7a009e9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb2f0ec416167d9d7a454c6eff6601fb7a009e9e/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b63597dedba1c94a1fa9f2521ce50723cc019e78", "url": "https://api.github.com/repos/rust-lang/rust/commits/b63597dedba1c94a1fa9f2521ce50723cc019e78", "html_url": "https://github.com/rust-lang/rust/commit/b63597dedba1c94a1fa9f2521ce50723cc019e78"}], "stats": {"total": 28, "additions": 9, "deletions": 19}, "files": [{"sha": "a1ff62fde0af0a1fd3771868e10c2fab2e92647c", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fb2f0ec416167d9d7a454c6eff6601fb7a009e9e/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2f0ec416167d9d7a454c6eff6601fb7a009e9e/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=fb2f0ec416167d9d7a454c6eff6601fb7a009e9e", "patch": "@@ -609,25 +609,15 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     // checked by const-qualification, which also\n                     // promotes any complex rvalues to constants.\n                     if i == 2 && intrinsic.unwrap().starts_with(\"simd_shuffle\") {\n-                        match arg {\n-                            // The shuffle array argument is usually not an explicit constant,\n-                            // but specified directly in the code. This means it gets promoted\n-                            // and we can then extract the value by evaluating the promoted.\n-                            mir::Operand::Copy(_place) | mir::Operand::Move(_place) => {}\n-\n-                            mir::Operand::Constant(constant) => {\n-                                let c = self.eval_mir_constant(constant);\n-                                let (llval, ty) = self.simd_shuffle_indices(\n-                                    &bx,\n-                                    constant.span,\n-                                    constant.literal.ty,\n-                                    c,\n-                                );\n-                                return OperandRef {\n-                                    val: Immediate(llval),\n-                                    layout: bx.layout_of(ty),\n-                                };\n-                            }\n+                        if let mir::Operand::Constant(constant) = arg {\n+                            let c = self.eval_mir_constant(constant);\n+                            let (llval, ty) = self.simd_shuffle_indices(\n+                                &bx,\n+                                constant.span,\n+                                constant.literal.ty,\n+                                c,\n+                            );\n+                            return OperandRef { val: Immediate(llval), layout: bx.layout_of(ty) };\n                         }\n                     }\n "}]}