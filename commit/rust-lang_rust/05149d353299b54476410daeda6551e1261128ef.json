{"sha": "05149d353299b54476410daeda6551e1261128ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MTQ5ZDM1MzI5OWI1NDQ3NjQxMGRhZWRhNjU1MWUxMjYxMTI4ZWY=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-15T15:34:09Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-15T15:34:09Z"}, "message": "Merge #551\n\n551: remove Cancelable from Module API, part 2 r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "e757ea3f647159de8ce49e43177e10c43f61d2bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e757ea3f647159de8ce49e43177e10c43f61d2bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05149d353299b54476410daeda6551e1261128ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05149d353299b54476410daeda6551e1261128ef", "html_url": "https://github.com/rust-lang/rust/commit/05149d353299b54476410daeda6551e1261128ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05149d353299b54476410daeda6551e1261128ef/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "91feed736f91a3790b2f5a5d0d879c06843bce95", "url": "https://api.github.com/repos/rust-lang/rust/commits/91feed736f91a3790b2f5a5d0d879c06843bce95", "html_url": "https://github.com/rust-lang/rust/commit/91feed736f91a3790b2f5a5d0d879c06843bce95"}, {"sha": "8af9a18660f9b2f34da902f43c1eef856af1cfca", "url": "https://api.github.com/repos/rust-lang/rust/commits/8af9a18660f9b2f34da902f43c1eef856af1cfca", "html_url": "https://github.com/rust-lang/rust/commit/8af9a18660f9b2f34da902f43c1eef856af1cfca"}], "stats": {"total": 121, "additions": 56, "deletions": 65}, "files": [{"sha": "db270b871ebbc4d5cd64c26522c05fb01a6cd931", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/05149d353299b54476410daeda6551e1261128ef/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05149d353299b54476410daeda6551e1261128ef/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=05149d353299b54476410daeda6551e1261128ef", "patch": "@@ -33,10 +33,10 @@ impl Crate {\n     pub fn crate_id(&self) -> CrateId {\n         self.crate_id\n     }\n-    pub fn dependencies(&self, db: &impl HirDatabase) -> Cancelable<Vec<CrateDependency>> {\n-        Ok(self.dependencies_impl(db))\n+    pub fn dependencies(&self, db: &impl HirDatabase) -> Vec<CrateDependency> {\n+        self.dependencies_impl(db)\n     }\n-    pub fn root_module(&self, db: &impl HirDatabase) -> Cancelable<Option<Module>> {\n+    pub fn root_module(&self, db: &impl HirDatabase) -> Option<Module> {\n         self.root_module_impl(db)\n     }\n }\n@@ -78,12 +78,12 @@ pub enum Problem {\n \n impl Module {\n     /// Name of this module.\n-    pub fn name(&self, db: &impl HirDatabase) -> Cancelable<Option<Name>> {\n+    pub fn name(&self, db: &impl HirDatabase) -> Option<Name> {\n         self.name_impl(db)\n     }\n \n     /// Returns a node which defines this module. That is, a file or a `mod foo {}` with items.\n-    pub fn definition_source(&self, db: &impl HirDatabase) -> Cancelable<(FileId, ModuleSource)> {\n+    pub fn definition_source(&self, db: &impl HirDatabase) -> (FileId, ModuleSource) {\n         self.definition_source_impl(db)\n     }\n \n@@ -92,19 +92,19 @@ impl Module {\n     pub fn declaration_source(\n         &self,\n         db: &impl HirDatabase,\n-    ) -> Cancelable<Option<(FileId, TreeArc<ast::Module>)>> {\n+    ) -> Option<(FileId, TreeArc<ast::Module>)> {\n         self.declaration_source_impl(db)\n     }\n \n     /// Returns the crate this module is part of.\n-    pub fn krate(&self, db: &impl HirDatabase) -> Cancelable<Option<Crate>> {\n+    pub fn krate(&self, db: &impl HirDatabase) -> Option<Crate> {\n         self.krate_impl(db)\n     }\n \n     /// Topmost parent of this module. Every module has a `crate_root`, but some\n     /// might be missing `krate`. This can happen if a module's file is not included\n     /// in the module tree of any target in Cargo.toml.\n-    pub fn crate_root(&self, db: &impl HirDatabase) -> Cancelable<Module> {\n+    pub fn crate_root(&self, db: &impl HirDatabase) -> Module {\n         self.crate_root_impl(db)\n     }\n \n@@ -114,23 +114,23 @@ impl Module {\n     }\n \n     /// Iterates over all child modules.\n-    pub fn children(&self, db: &impl HirDatabase) -> Cancelable<impl Iterator<Item = Module>> {\n+    pub fn children(&self, db: &impl HirDatabase) -> impl Iterator<Item = Module> {\n         self.children_impl(db)\n     }\n \n     /// Finds a parent module.\n-    pub fn parent(&self, db: &impl HirDatabase) -> Cancelable<Option<Module>> {\n+    pub fn parent(&self, db: &impl HirDatabase) -> Option<Module> {\n         self.parent_impl(db)\n     }\n \n-    pub fn path_to_root(&self, db: &impl HirDatabase) -> Cancelable<Vec<Module>> {\n+    pub fn path_to_root(&self, db: &impl HirDatabase) -> Vec<Module> {\n         let mut res = vec![self.clone()];\n         let mut curr = self.clone();\n-        while let Some(next) = curr.parent(db)? {\n+        while let Some(next) = curr.parent(db) {\n             res.push(next.clone());\n             curr = next\n         }\n-        Ok(res)\n+        res\n     }\n \n     /// Returns a `ModuleScope`: a set of items, visible in this module."}, {"sha": "8c6e34873b63a2756ffd61b4ae6b8cc00993db4e", "filename": "crates/ra_hir/src/code_model_impl/krate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05149d353299b54476410daeda6551e1261128ef/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05149d353299b54476410daeda6551e1261128ef/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fkrate.rs?ref=05149d353299b54476410daeda6551e1261128ef", "patch": "@@ -1,4 +1,4 @@\n-use ra_db::{CrateId, Cancelable};\n+use ra_db::CrateId;\n \n use crate::{\n     HirFileId, Crate, CrateDependency, AsName, DefLoc, DefKind, Module, SourceItemId,\n@@ -20,7 +20,7 @@ impl Crate {\n             })\n             .collect()\n     }\n-    pub(crate) fn root_module_impl(&self, db: &impl HirDatabase) -> Cancelable<Option<Module>> {\n+    pub(crate) fn root_module_impl(&self, db: &impl HirDatabase) -> Option<Module> {\n         let crate_graph = db.crate_graph();\n         let file_id = crate_graph.crate_root(self.crate_id);\n         let source_root_id = db.file_source_root(file_id);\n@@ -31,7 +31,7 @@ impl Crate {\n             file_id,\n             item_id: None,\n         };\n-        let module_id = ctry!(module_tree.find_module_by_source(source));\n+        let module_id = module_tree.find_module_by_source(source)?;\n \n         let def_loc = DefLoc {\n             kind: DefKind::Module,\n@@ -42,6 +42,6 @@ impl Crate {\n         let def_id = def_loc.id(db);\n \n         let module = Module::new(def_id);\n-        Ok(Some(module))\n+        Some(module)\n     }\n }"}, {"sha": "8668d6c8aab3aba774f13cd685fc5d885f67b5af", "filename": "crates/ra_hir/src/code_model_impl/module.rs", "status": "modified", "additions": 21, "deletions": 28, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/05149d353299b54476410daeda6551e1261128ef/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05149d353299b54476410daeda6551e1261128ef/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs?ref=05149d353299b54476410daeda6551e1261128ef", "patch": "@@ -30,17 +30,14 @@ impl Module {\n         Module::new(def_id)\n     }\n \n-    pub(crate) fn name_impl(&self, db: &impl HirDatabase) -> Cancelable<Option<Name>> {\n+    pub(crate) fn name_impl(&self, db: &impl HirDatabase) -> Option<Name> {\n         let loc = self.def_id.loc(db);\n         let module_tree = db.module_tree(loc.source_root_id);\n-        let link = ctry!(loc.module_id.parent_link(&module_tree));\n-        Ok(Some(link.name(&module_tree).clone()))\n+        let link = loc.module_id.parent_link(&module_tree)?;\n+        Some(link.name(&module_tree).clone())\n     }\n \n-    pub fn definition_source_impl(\n-        &self,\n-        db: &impl HirDatabase,\n-    ) -> Cancelable<(FileId, ModuleSource)> {\n+    pub fn definition_source_impl(&self, db: &impl HirDatabase) -> (FileId, ModuleSource) {\n         let loc = self.def_id.loc(db);\n         let file_id = loc.source_item_id.file_id.as_original_file();\n         let syntax_node = db.file_item(loc.source_item_id);\n@@ -50,40 +47,40 @@ impl Module {\n             let module = ast::Module::cast(&syntax_node).unwrap();\n             ModuleSource::Module(module.to_owned())\n         };\n-        Ok((file_id, module_source))\n+        (file_id, module_source)\n     }\n \n     pub fn declaration_source_impl(\n         &self,\n         db: &impl HirDatabase,\n-    ) -> Cancelable<Option<(FileId, TreeArc<ast::Module>)>> {\n+    ) -> Option<(FileId, TreeArc<ast::Module>)> {\n         let loc = self.def_id.loc(db);\n         let module_tree = db.module_tree(loc.source_root_id);\n-        let link = ctry!(loc.module_id.parent_link(&module_tree));\n+        let link = loc.module_id.parent_link(&module_tree)?;\n         let file_id = link\n             .owner(&module_tree)\n             .source(&module_tree)\n             .file_id\n             .as_original_file();\n         let src = link.source(&module_tree, db);\n-        Ok(Some((file_id, src)))\n+        Some((file_id, src))\n     }\n \n-    pub(crate) fn krate_impl(&self, db: &impl HirDatabase) -> Cancelable<Option<Crate>> {\n-        let root = self.crate_root(db)?;\n+    pub(crate) fn krate_impl(&self, db: &impl HirDatabase) -> Option<Crate> {\n+        let root = self.crate_root(db);\n         let loc = root.def_id.loc(db);\n         let file_id = loc.source_item_id.file_id.as_original_file();\n \n         let crate_graph = db.crate_graph();\n-        let crate_id = ctry!(crate_graph.crate_id_for_crate_root(file_id));\n-        Ok(Some(Crate::new(crate_id)))\n+        let crate_id = crate_graph.crate_id_for_crate_root(file_id)?;\n+        Some(Crate::new(crate_id))\n     }\n \n-    pub(crate) fn crate_root_impl(&self, db: &impl HirDatabase) -> Cancelable<Module> {\n+    pub(crate) fn crate_root_impl(&self, db: &impl HirDatabase) -> Module {\n         let loc = self.def_id.loc(db);\n         let module_tree = db.module_tree(loc.source_root_id);\n         let module_id = loc.module_id.crate_root(&module_tree);\n-        Ok(Module::from_module_id(db, loc.source_root_id, module_id))\n+        Module::from_module_id(db, loc.source_root_id, module_id)\n     }\n \n     /// Finds a child module with the specified name.\n@@ -95,7 +92,7 @@ impl Module {\n     }\n \n     /// Iterates over all child modules.\n-    pub fn children_impl(&self, db: &impl HirDatabase) -> Cancelable<impl Iterator<Item = Module>> {\n+    pub fn children_impl(&self, db: &impl HirDatabase) -> impl Iterator<Item = Module> {\n         // FIXME this should be implementable without collecting into a vec, but\n         // it's kind of hard since the iterator needs to keep a reference to the\n         // module tree.\n@@ -106,18 +103,14 @@ impl Module {\n             .children(&module_tree)\n             .map(|(_, module_id)| Module::from_module_id(db, loc.source_root_id, module_id))\n             .collect::<Vec<_>>();\n-        Ok(children.into_iter())\n+        children.into_iter()\n     }\n \n-    pub fn parent_impl(&self, db: &impl HirDatabase) -> Cancelable<Option<Module>> {\n+    pub fn parent_impl(&self, db: &impl HirDatabase) -> Option<Module> {\n         let loc = self.def_id.loc(db);\n         let module_tree = db.module_tree(loc.source_root_id);\n-        let parent_id = ctry!(loc.module_id.parent(&module_tree));\n-        Ok(Some(Module::from_module_id(\n-            db,\n-            loc.source_root_id,\n-            parent_id,\n-        )))\n+        let parent_id = loc.module_id.parent(&module_tree)?;\n+        Some(Module::from_module_id(db, loc.source_root_id, parent_id))\n     }\n \n     /// Returns a `ModuleScope`: a set of items, visible in this module.\n@@ -135,10 +128,10 @@ impl Module {\n     ) -> Cancelable<PerNs<DefId>> {\n         let mut curr_per_ns = PerNs::types(\n             match path.kind {\n-                PathKind::Crate => self.crate_root(db)?,\n+                PathKind::Crate => self.crate_root(db),\n                 PathKind::Self_ | PathKind::Plain => self.clone(),\n                 PathKind::Super => {\n-                    if let Some(p) = self.parent(db)? {\n+                    if let Some(p) = self.parent(db) {\n                         p\n                     } else {\n                         return Ok(PerNs::none());"}, {"sha": "7b572061a55a44ea3e42f2aa88bae6eb1b643667", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05149d353299b54476410daeda6551e1261128ef/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05149d353299b54476410daeda6551e1261128ef/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=05149d353299b54476410daeda6551e1261128ef", "patch": "@@ -217,7 +217,7 @@ impl DefId {\n \n     /// Returns the containing crate.\n     pub fn krate(&self, db: &impl HirDatabase) -> Cancelable<Option<Crate>> {\n-        Ok(self.module(db)?.krate(db)?)\n+        Ok(self.module(db)?.krate(db))\n     }\n \n     /// Returns the containing impl block, if this is an impl item."}, {"sha": "ce9087b49b706c80ad2bba970d25430c3d960a18", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05149d353299b54476410daeda6551e1261128ef/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05149d353299b54476410daeda6551e1261128ef/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=05149d353299b54476410daeda6551e1261128ef", "patch": "@@ -167,7 +167,7 @@ impl ModuleImplBlocks {\n     }\n \n     fn collect(&mut self, db: &impl HirDatabase, module: Module) -> Cancelable<()> {\n-        let (file_id, module_source) = module.definition_source(db)?;\n+        let (file_id, module_source) = module.definition_source(db);\n         let node = match &module_source {\n             ModuleSource::SourceFile(node) => node.syntax(),\n             ModuleSource::Module(node) => node"}, {"sha": "e51cbe78663f9dabbe534178faf8e8bb4a91c550", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05149d353299b54476410daeda6551e1261128ef/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05149d353299b54476410daeda6551e1261128ef/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=05149d353299b54476410daeda6551e1261128ef", "patch": "@@ -353,8 +353,8 @@ where\n             if let Some(crate_id) = crate_graph.crate_id_for_crate_root(file_id.as_original_file())\n             {\n                 let krate = Crate::new(crate_id);\n-                for dep in krate.dependencies(self.db)? {\n-                    if let Some(module) = dep.krate.root_module(self.db)? {\n+                for dep in krate.dependencies(self.db) {\n+                    if let Some(module) = dep.krate.root_module(self.db) {\n                         let def_id = module.def_id;\n                         self.add_module_item(\n                             &mut module_items,"}, {"sha": "c7fbcfd06d9669eacca7cd580f9f8765b3ad4d12", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05149d353299b54476410daeda6551e1261128ef/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05149d353299b54476410daeda6551e1261128ef/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=05149d353299b54476410daeda6551e1261128ef", "patch": "@@ -75,7 +75,7 @@ impl CrateImplBlocks {\n             }\n         }\n \n-        for child in module.children(db)? {\n+        for child in module.children(db) {\n             self.collect_recursive(db, child)?;\n         }\n \n@@ -93,7 +93,7 @@ impl CrateImplBlocks {\n             source_root_id,\n             impls: FxHashMap::default(),\n         };\n-        if let Some(module) = krate.root_module(db)? {\n+        if let Some(module) = krate.root_module(db) {\n             crate_impl_blocks.collect_recursive(db, module)?;\n         }\n         Ok(Arc::new(crate_impl_blocks))"}, {"sha": "f422bb9a70536c470235bc43324e8bbe51dd89b2", "filename": "crates/ra_ide_api/src/completion/complete_scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05149d353299b54476410daeda6551e1261128ef/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05149d353299b54476410daeda6551e1261128ef/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=05149d353299b54476410daeda6551e1261128ef", "patch": "@@ -20,7 +20,7 @@ pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) ->\n     }\n \n     let module_scope = module.scope(ctx.db)?;\n-    let (file_id, _) = module.definition_source(ctx.db)?;\n+    let (file_id, _) = module.definition_source(ctx.db);\n     module_scope\n         .entries()\n         .filter(|(_name, res)| {"}, {"sha": "3ef11dfa17674cce44a3b6ad3f4f2fd60cdb429d", "filename": "crates/ra_ide_api/src/imp.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05149d353299b54476410daeda6551e1261128ef/crates%2Fra_ide_api%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05149d353299b54476410daeda6551e1261128ef/crates%2Fra_ide_api%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fimp.rs?ref=05149d353299b54476410daeda6551e1261128ef", "patch": "@@ -99,16 +99,16 @@ impl db::RootDatabase {\n \n impl db::RootDatabase {\n     /// Returns `Vec` for the same reason as `parent_module`\n-    pub(crate) fn crate_for(&self, file_id: FileId) -> Cancelable<Vec<CrateId>> {\n+    pub(crate) fn crate_for(&self, file_id: FileId) -> Vec<CrateId> {\n         let module = match source_binder::module_from_file_id(self, file_id) {\n             Some(it) => it,\n-            None => return Ok(Vec::new()),\n+            None => return Vec::new(),\n         };\n-        let krate = match module.krate(self)? {\n+        let krate = match module.krate(self) {\n             Some(it) => it,\n-            None => return Ok(Vec::new()),\n+            None => return Vec::new(),\n         };\n-        Ok(vec![krate.crate_id()])\n+        vec![krate.crate_id()]\n     }\n     pub(crate) fn find_all_refs(\n         &self,"}, {"sha": "0f690fc849d2f1420196fd923c00afe3c1ff173a", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05149d353299b54476410daeda6551e1261128ef/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05149d353299b54476410daeda6551e1261128ef/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=05149d353299b54476410daeda6551e1261128ef", "patch": "@@ -419,7 +419,7 @@ impl Analysis {\n \n     /// Returns crates this file belongs too.\n     pub fn crate_for(&self, file_id: FileId) -> Cancelable<Vec<CrateId>> {\n-        self.with_db(|db| db.crate_for(file_id))?\n+        self.with_db(|db| db.crate_for(file_id))\n     }\n \n     /// Returns the root file of the given crate."}, {"sha": "7562b9a1f420debc4833d38a9fd9d14b694ff716", "filename": "crates/ra_ide_api/src/navigation_target.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05149d353299b54476410daeda6551e1261128ef/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05149d353299b54476410daeda6551e1261128ef/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs?ref=05149d353299b54476410daeda6551e1261128ef", "patch": "@@ -73,9 +73,9 @@ impl NavigationTarget {\n         db: &RootDatabase,\n         module: hir::Module,\n     ) -> Cancelable<NavigationTarget> {\n-        let (file_id, source) = module.definition_source(db)?;\n+        let (file_id, source) = module.definition_source(db);\n         let name = module\n-            .name(db)?\n+            .name(db)\n             .map(|it| it.to_string().into())\n             .unwrap_or_default();\n         let res = match source {\n@@ -94,10 +94,10 @@ impl NavigationTarget {\n         module: hir::Module,\n     ) -> Cancelable<NavigationTarget> {\n         let name = module\n-            .name(db)?\n+            .name(db)\n             .map(|it| it.to_string().into())\n             .unwrap_or_default();\n-        if let Some((file_id, source)) = module.declaration_source(db)? {\n+        if let Some((file_id, source)) = module.declaration_source(db) {\n             return Ok(NavigationTarget::from_syntax(\n                 file_id,\n                 name,"}, {"sha": "a3207fdd25298a75d60f9db2b1dbcf0dc80596ea", "filename": "crates/ra_ide_api/src/runnables.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05149d353299b54476410daeda6551e1261128ef/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05149d353299b54476410daeda6551e1261128ef/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Frunnables.rs?ref=05149d353299b54476410daeda6551e1261128ef", "patch": "@@ -80,11 +80,9 @@ fn runnable_mod(db: &RootDatabase, file_id: FileId, module: &ast::Module) -> Opt\n     // FIXME: thread cancellation instead of `.ok`ing\n     let path = module\n         .path_to_root(db)\n-        .ok()?\n         .into_iter()\n         .rev()\n-        .filter_map(|it| it.name(db).ok())\n-        .filter_map(|it| it)\n+        .filter_map(|it| it.name(db))\n         .join(\"::\");\n     Some(Runnable {\n         range,"}]}