{"sha": "7df9d818ab07d1d014ac46a1f462d87a2d57ce21", "node_id": "C_kwDOAAsO6NoAKDdkZjlkODE4YWIwN2QxZDAxNGFjNDZhMWY0NjJkODdhMmQ1N2NlMjE", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-11-02T15:15:49Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-11-02T15:15:49Z"}, "message": "deprecate DelaySpanBugEmitted and use ErrorGuaranteed directly", "tree": {"sha": "91fce0c9325236110fef8aec590d7ba1165a6043", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91fce0c9325236110fef8aec590d7ba1165a6043"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7df9d818ab07d1d014ac46a1f462d87a2d57ce21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7df9d818ab07d1d014ac46a1f462d87a2d57ce21", "html_url": "https://github.com/rust-lang/rust/commit/7df9d818ab07d1d014ac46a1f462d87a2d57ce21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7df9d818ab07d1d014ac46a1f462d87a2d57ce21/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "126dbdc9c78446ad4cf41f5f8510a7cee59ff966", "url": "https://api.github.com/repos/rust-lang/rust/commits/126dbdc9c78446ad4cf41f5f8510a7cee59ff966", "html_url": "https://github.com/rust-lang/rust/commit/126dbdc9c78446ad4cf41f5f8510a7cee59ff966"}], "stats": {"total": 40, "additions": 14, "deletions": 26}, "files": [{"sha": "dd00678aa0ceaf0dac275d7fa7f1a48147aa9a16", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7df9d818ab07d1d014ac46a1f462d87a2d57ce21/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7df9d818ab07d1d014ac46a1f462d87a2d57ce21/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=7df9d818ab07d1d014ac46a1f462d87a2d57ce21", "patch": "@@ -4,7 +4,7 @@\n use rustc_hir::def::Namespace;\n use rustc_middle::ty::layout::{LayoutOf, PrimitiveExt, TyAndLayout};\n use rustc_middle::ty::print::{FmtPrinter, PrettyPrinter};\n-use rustc_middle::ty::{ConstInt, DelaySpanBugEmitted, Ty};\n+use rustc_middle::ty::{ConstInt, Ty};\n use rustc_middle::{mir, ty};\n use rustc_target::abi::{self, Abi, Align, HasDataLayout, Size, TagEncoding};\n use rustc_target::abi::{VariantIdx, Variants};\n@@ -567,7 +567,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     ty::ConstKind::Param(_) | ty::ConstKind::Placeholder(..) => {\n                         throw_inval!(TooGeneric)\n                     }\n-                    ty::ConstKind::Error(DelaySpanBugEmitted { reported, .. }) => {\n+                    ty::ConstKind::Error(reported) => {\n                         throw_inval!(AlreadyReported(reported))\n                     }\n                     ty::ConstKind::Unevaluated(uv) => {"}, {"sha": "e5bcd5fb27aa715baaa2b8ec22cf775631862a1b", "filename": "compiler/rustc_middle/src/ty/abstract_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7df9d818ab07d1d014ac46a1f462d87a2d57ce21/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7df9d818ab07d1d014ac46a1f462d87a2d57ce21/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs?ref=7df9d818ab07d1d014ac46a1f462d87a2d57ce21", "patch": "@@ -1,7 +1,7 @@\n //! A subset of a mir body used for const evaluatability checking.\n use crate::mir;\n use crate::ty::visit::TypeVisitable;\n-use crate::ty::{self, DelaySpanBugEmitted, EarlyBinder, SubstsRef, Ty, TyCtxt};\n+use crate::ty::{self, EarlyBinder, SubstsRef, Ty, TyCtxt};\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def_id::DefId;\n use std::cmp;\n@@ -43,7 +43,7 @@ impl<'tcx> AbstractConst<'tcx> {\n     ) -> Result<Option<AbstractConst<'tcx>>, ErrorGuaranteed> {\n         match ct.kind() {\n             ty::ConstKind::Unevaluated(uv) => AbstractConst::new(tcx, uv),\n-            ty::ConstKind::Error(DelaySpanBugEmitted { reported, .. }) => Err(reported),\n+            ty::ConstKind::Error(reported) => Err(reported),\n             _ => Ok(None),\n         }\n     }"}, {"sha": "c1c613f6c602ed3d01017c3aacd74163de0f5368", "filename": "compiler/rustc_middle/src/ty/consts/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7df9d818ab07d1d014ac46a1f462d87a2d57ce21/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7df9d818ab07d1d014ac46a1f462d87a2d57ce21/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fkind.rs?ref=7df9d818ab07d1d014ac46a1f462d87a2d57ce21", "patch": "@@ -69,7 +69,7 @@ pub enum ConstKind<'tcx> {\n \n     /// A placeholder for a const which could not be computed; this is\n     /// propagated to avoid useless error messages.\n-    Error(ty::DelaySpanBugEmitted),\n+    Error(ErrorGuaranteed),\n }\n \n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]"}, {"sha": "eeb53f9714ce8516fa42e3565a2f3d0beeb21f8b", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7df9d818ab07d1d014ac46a1f462d87a2d57ce21/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7df9d818ab07d1d014ac46a1f462d87a2d57ce21/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=7df9d818ab07d1d014ac46a1f462d87a2d57ce21", "patch": "@@ -116,7 +116,7 @@ impl<'tcx> Interner for TyCtxt<'tcx> {\n     type BoundTy = ty::BoundTy;\n     type PlaceholderType = ty::PlaceholderType;\n     type InferTy = InferTy;\n-    type DelaySpanBugEmitted = DelaySpanBugEmitted;\n+    type ErrorGuaranteed = ErrorGuaranteed;\n     type PredicateKind = ty::PredicateKind<'tcx>;\n     type AllocId = crate::mir::interpret::AllocId;\n \n@@ -127,15 +127,6 @@ impl<'tcx> Interner for TyCtxt<'tcx> {\n     type PlaceholderRegion = ty::PlaceholderRegion;\n }\n \n-/// A type that is not publicly constructable. This prevents people from making [`TyKind::Error`]s\n-/// except through the error-reporting functions on a [`tcx`][TyCtxt].\n-#[derive(Copy, Clone, Debug, Eq, Hash, PartialEq, PartialOrd, Ord)]\n-#[derive(TyEncodable, TyDecodable, HashStable)]\n-pub struct DelaySpanBugEmitted {\n-    pub reported: ErrorGuaranteed,\n-    _priv: (),\n-}\n-\n type InternedSet<'tcx, T> = ShardedHashMap<InternedInSet<'tcx, T>, ()>;\n \n pub struct CtxtInterners<'tcx> {\n@@ -1302,7 +1293,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     #[track_caller]\n     pub fn ty_error_with_message<S: Into<MultiSpan>>(self, span: S, msg: &str) -> Ty<'tcx> {\n         let reported = self.sess.delay_span_bug(span, msg);\n-        self.mk_ty(Error(DelaySpanBugEmitted { reported, _priv: () }))\n+        self.mk_ty(Error(reported))\n     }\n \n     /// Like [TyCtxt::ty_error] but for constants.\n@@ -1325,7 +1316,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     ) -> Const<'tcx> {\n         let reported = self.sess.delay_span_bug(span, msg);\n         self.mk_const(ty::ConstS {\n-            kind: ty::ConstKind::Error(DelaySpanBugEmitted { reported, _priv: () }),\n+            kind: ty::ConstKind::Error(reported),\n             ty,\n         })\n     }"}, {"sha": "9267a541a59cb0387241f085440cee581c63e2c3", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7df9d818ab07d1d014ac46a1f462d87a2d57ce21/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7df9d818ab07d1d014ac46a1f462d87a2d57ce21/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=7df9d818ab07d1d014ac46a1f462d87a2d57ce21", "patch": "@@ -80,7 +80,7 @@ pub use self::consts::{\n };\n pub use self::context::{\n     tls, CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations,\n-    CtxtInterners, DeducedParamAttrs, DelaySpanBugEmitted, FreeRegionInfo, GeneratorDiagnosticData,\n+    CtxtInterners, DeducedParamAttrs, FreeRegionInfo, GeneratorDiagnosticData,\n     GeneratorInteriorTypeCause, GlobalCtxt, Lift, OnDiskCache, TyCtxt, TypeckResults, UserType,\n     UserTypeAnnotationIndex,\n };"}, {"sha": "23cd93d6af40c1d8c8ff373135fd8a8c458f952a", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7df9d818ab07d1d014ac46a1f462d87a2d57ce21/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7df9d818ab07d1d014ac46a1f462d87a2d57ce21/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=7df9d818ab07d1d014ac46a1f462d87a2d57ce21", "patch": "@@ -240,7 +240,6 @@ TrivialTypeTraversalAndLiftImpls! {\n     Field,\n     interpret::Scalar,\n     rustc_target::abi::Size,\n-    ty::DelaySpanBugEmitted,\n     rustc_type_ir::DebruijnIndex,\n     ty::BoundVar,\n     ty::Placeholder<ty::BoundVar>,"}, {"sha": "7c3eb4efbc9844e73bda2a14e876414b7277609c", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7df9d818ab07d1d014ac46a1f462d87a2d57ce21/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7df9d818ab07d1d014ac46a1f462d87a2d57ce21/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=7df9d818ab07d1d014ac46a1f462d87a2d57ce21", "patch": "@@ -45,7 +45,7 @@ pub trait Interner {\n     type BoundTy: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n     type PlaceholderType: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n     type InferTy: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n-    type DelaySpanBugEmitted: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n+    type ErrorGuaranteed: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n     type PredicateKind: Clone + Debug + Hash + PartialEq + Eq;\n     type AllocId: Clone + Debug + Hash + PartialEq + Eq + PartialOrd + Ord;\n "}, {"sha": "02cbb2e858f80ac0943792604990d8e8c15727d9", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7df9d818ab07d1d014ac46a1f462d87a2d57ce21/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7df9d818ab07d1d014ac46a1f462d87a2d57ce21/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=7df9d818ab07d1d014ac46a1f462d87a2d57ce21", "patch": "@@ -217,7 +217,7 @@ pub enum TyKind<I: Interner> {\n \n     /// A placeholder for a type which could not be computed; this is\n     /// propagated to avoid useless error messages.\n-    Error(I::DelaySpanBugEmitted),\n+    Error(I::ErrorGuaranteed),\n }\n \n impl<I: Interner> TyKind<I> {\n@@ -626,7 +626,7 @@ impl<I: Interner> fmt::Debug for TyKind<I> {\n // This is manually implemented because a derive would require `I: Encodable`\n impl<I: Interner, E: TyEncoder> Encodable<E> for TyKind<I>\n where\n-    I::DelaySpanBugEmitted: Encodable<E>,\n+    I::ErrorGuaranteed: Encodable<E>,\n     I::AdtDef: Encodable<E>,\n     I::SubstsRef: Encodable<E>,\n     I::DefId: Encodable<E>,\n@@ -645,7 +645,6 @@ where\n     I::BoundTy: Encodable<E>,\n     I::PlaceholderType: Encodable<E>,\n     I::InferTy: Encodable<E>,\n-    I::DelaySpanBugEmitted: Encodable<E>,\n     I::PredicateKind: Encodable<E>,\n     I::AllocId: Encodable<E>,\n {\n@@ -744,7 +743,7 @@ where\n // This is manually implemented because a derive would require `I: Decodable`\n impl<I: Interner, D: TyDecoder<I = I>> Decodable<D> for TyKind<I>\n where\n-    I::DelaySpanBugEmitted: Decodable<D>,\n+    I::ErrorGuaranteed: Decodable<D>,\n     I::AdtDef: Decodable<D>,\n     I::SubstsRef: Decodable<D>,\n     I::DefId: Decodable<D>,\n@@ -763,7 +762,6 @@ where\n     I::BoundTy: Decodable<D>,\n     I::PlaceholderType: Decodable<D>,\n     I::InferTy: Decodable<D>,\n-    I::DelaySpanBugEmitted: Decodable<D>,\n     I::PredicateKind: Decodable<D>,\n     I::AllocId: Decodable<D>,\n {\n@@ -829,7 +827,7 @@ where\n     I::ParamTy: HashStable<CTX>,\n     I::PlaceholderType: HashStable<CTX>,\n     I::InferTy: HashStable<CTX>,\n-    I::DelaySpanBugEmitted: HashStable<CTX>,\n+    I::ErrorGuaranteed: HashStable<CTX>,\n {\n     #[inline]\n     fn hash_stable("}]}