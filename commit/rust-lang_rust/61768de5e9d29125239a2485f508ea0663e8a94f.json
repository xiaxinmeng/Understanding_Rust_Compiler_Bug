{"sha": "61768de5e9d29125239a2485f508ea0663e8a94f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNzY4ZGU1ZTlkMjkxMjUyMzlhMjQ4NWY1MDhlYTA2NjNlOGE5NGY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-20T00:22:26Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:26Z"}, "message": "librustc: De-`&mut` `TypeNames`", "tree": {"sha": "b8bc9a630d6f56be79390f0800dce82a0c0d3c20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8bc9a630d6f56be79390f0800dce82a0c0d3c20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61768de5e9d29125239a2485f508ea0663e8a94f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61768de5e9d29125239a2485f508ea0663e8a94f", "html_url": "https://github.com/rust-lang/rust/commit/61768de5e9d29125239a2485f508ea0663e8a94f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61768de5e9d29125239a2485f508ea0663e8a94f/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2bcd1462fa515ead889ecc49c70b00513798f43", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2bcd1462fa515ead889ecc49c70b00513798f43", "html_url": "https://github.com/rust-lang/rust/commit/d2bcd1462fa515ead889ecc49c70b00513798f43"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "50a35e9d1bf81f7de36ed6e671de1036d65dcec5", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/61768de5e9d29125239a2485f508ea0663e8a94f/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61768de5e9d29125239a2485f508ea0663e8a94f/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=61768de5e9d29125239a2485f508ea0663e8a94f", "patch": "@@ -11,6 +11,7 @@\n #[allow(non_uppercase_pattern_statics)];\n \n use std::c_str::ToCStr;\n+use std::cell::RefCell;\n use std::hashmap::HashMap;\n use std::libc::{c_uint, c_ushort, c_void, free};\n use std::str::raw::from_c_str;\n@@ -1804,22 +1805,24 @@ pub fn SetFunctionAttribute(Fn: ValueRef, attr: Attribute) {\n /* Memory-managed object interface to type handles. */\n \n pub struct TypeNames {\n-    named_types: HashMap<~str, TypeRef>\n+    named_types: RefCell<HashMap<~str, TypeRef>>,\n }\n \n impl TypeNames {\n     pub fn new() -> TypeNames {\n         TypeNames {\n-            named_types: HashMap::new()\n+            named_types: RefCell::new(HashMap::new())\n         }\n     }\n \n-    pub fn associate_type(&mut self, s: &str, t: &Type) {\n-        assert!(self.named_types.insert(s.to_owned(), t.to_ref()));\n+    pub fn associate_type(&self, s: &str, t: &Type) {\n+        let mut named_types = self.named_types.borrow_mut();\n+        assert!(named_types.get().insert(s.to_owned(), t.to_ref()));\n     }\n \n     pub fn find_type(&self, s: &str) -> Option<Type> {\n-        self.named_types.find_equiv(&s).map(|x| Type::from_ref(*x))\n+        let named_types = self.named_types.borrow();\n+        named_types.get().find_equiv(&s).map(|x| Type::from_ref(*x))\n     }\n \n     pub fn type_to_str(&self, ty: Type) -> ~str {"}, {"sha": "9857ff37b94aa0bd770dd659475775b9a8d31096", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61768de5e9d29125239a2485f508ea0663e8a94f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61768de5e9d29125239a2485f508ea0663e8a94f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=61768de5e9d29125239a2485f508ea0663e8a94f", "patch": "@@ -147,7 +147,7 @@ impl CrateContext {\n             let targ_cfg = sess.targ_cfg;\n \n             let td = mk_target_data(sess.targ_cfg.target_strs.data_layout);\n-            let mut tn = TypeNames::new();\n+            let tn = TypeNames::new();\n \n             let mut intrinsics = base::declare_intrinsics(llmod);\n             if sess.opts.extra_debuginfo {"}]}