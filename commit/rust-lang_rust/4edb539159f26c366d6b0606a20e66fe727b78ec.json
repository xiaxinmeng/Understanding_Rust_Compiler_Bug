{"sha": "4edb539159f26c366d6b0606a20e66fe727b78ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlZGI1MzkxNTlmMjZjMzY2ZDZiMDYwNmEyMGU2NmZlNzI3Yjc4ZWM=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-02-15T09:52:26Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-03-12T08:35:41Z"}, "message": "Make CrateMetadata thread-safe", "tree": {"sha": "5854372bf3c873df537203171b2d6b4eb66f2f35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5854372bf3c873df537203171b2d6b4eb66f2f35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4edb539159f26c366d6b0606a20e66fe727b78ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4edb539159f26c366d6b0606a20e66fe727b78ec", "html_url": "https://github.com/rust-lang/rust/commit/4edb539159f26c366d6b0606a20e66fe727b78ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4edb539159f26c366d6b0606a20e66fe727b78ec/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37e897f4c4cc47b40d672255406b0917cbeda277", "url": "https://api.github.com/repos/rust-lang/rust/commits/37e897f4c4cc47b40d672255406b0917cbeda277", "html_url": "https://github.com/rust-lang/rust/commit/37e897f4c4cc47b40d672255406b0917cbeda277"}], "stats": {"total": 87, "additions": 55, "deletions": 32}, "files": [{"sha": "b2f014b930d602b540b137b63df2a4da218413d6", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4edb539159f26c366d6b0606a20e66fe727b78ec/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4edb539159f26c366d6b0606a20e66fe727b78ec/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=4edb539159f26c366d6b0606a20e66fe727b78ec", "patch": "@@ -14,7 +14,7 @@ use cstore::{self, CStore, CrateSource, MetadataBlob};\n use locator::{self, CratePaths};\n use native_libs::relevant_lib;\n use schema::CrateRoot;\n-use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::sync::{Lrc, RwLock, Lock};\n \n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX};\n use rustc::hir::svh::Svh;\n@@ -30,7 +30,6 @@ use rustc::util::common::record_time;\n use rustc::util::nodemap::FxHashSet;\n use rustc::hir::map::Definitions;\n \n-use std::cell::{RefCell, Cell};\n use std::ops::Deref;\n use std::path::PathBuf;\n use std::{cmp, fs};\n@@ -63,7 +62,7 @@ fn dump_crates(cstore: &CStore) {\n         info!(\"  name: {}\", data.name());\n         info!(\"  cnum: {}\", data.cnum);\n         info!(\"  hash: {}\", data.hash());\n-        info!(\"  reqd: {:?}\", data.dep_kind.get());\n+        info!(\"  reqd: {:?}\", *data.dep_kind.lock());\n         let CrateSource { dylib, rlib, rmeta } = data.source.clone();\n         dylib.map(|dl| info!(\"  dylib: {}\", dl.0.display()));\n         rlib.map(|rl|  info!(\"   rlib: {}\", rl.0.display()));\n@@ -233,19 +232,19 @@ impl<'a> CrateLoader<'a> {\n \n         let mut cmeta = cstore::CrateMetadata {\n             name,\n-            extern_crate: Cell::new(None),\n+            extern_crate: Lock::new(None),\n             def_path_table: Lrc::new(def_path_table),\n             trait_impls,\n             proc_macros: crate_root.macro_derive_registrar.map(|_| {\n                 self.load_derive_macros(&crate_root, dylib.clone().map(|p| p.0), span)\n             }),\n             root: crate_root,\n             blob: metadata,\n-            cnum_map: RefCell::new(cnum_map),\n+            cnum_map: Lock::new(cnum_map),\n             cnum,\n-            codemap_import_info: RefCell::new(vec![]),\n-            attribute_cache: RefCell::new([Vec::new(), Vec::new()]),\n-            dep_kind: Cell::new(dep_kind),\n+            codemap_import_info: RwLock::new(vec![]),\n+            attribute_cache: Lock::new([Vec::new(), Vec::new()]),\n+            dep_kind: Lock::new(dep_kind),\n             source: cstore::CrateSource {\n                 dylib,\n                 rlib,\n@@ -335,7 +334,9 @@ impl<'a> CrateLoader<'a> {\n                 if data.root.macro_derive_registrar.is_some() {\n                     dep_kind = DepKind::UnexportedMacrosOnly;\n                 }\n-                data.dep_kind.set(cmp::max(data.dep_kind.get(), dep_kind));\n+                data.dep_kind.with_lock(|data_dep_kind| {\n+                    *data_dep_kind = cmp::max(*data_dep_kind, dep_kind);\n+                });\n                 (cnum, data)\n             }\n             LoadResult::Loaded(library) => {\n@@ -379,14 +380,14 @@ impl<'a> CrateLoader<'a> {\n         if !visited.insert((cnum, extern_crate.direct)) { return }\n \n         let cmeta = self.cstore.get_crate_data(cnum);\n-        let old_extern_crate = cmeta.extern_crate.get();\n+        let mut old_extern_crate = cmeta.extern_crate.borrow_mut();\n \n         // Prefer:\n         // - something over nothing (tuple.0);\n         // - direct extern crate to indirect (tuple.1);\n         // - shorter paths to longer (tuple.2).\n         let new_rank = (true, extern_crate.direct, !extern_crate.path_len);\n-        let old_rank = match old_extern_crate {\n+        let old_rank = match *old_extern_crate {\n             None => (false, false, !0),\n             Some(ref c) => (true, c.direct, !c.path_len),\n         };\n@@ -395,7 +396,9 @@ impl<'a> CrateLoader<'a> {\n             return; // no change needed\n         }\n \n-        cmeta.extern_crate.set(Some(extern_crate));\n+        *old_extern_crate = Some(extern_crate);\n+        drop(old_extern_crate);\n+\n         // Propagate the extern crate info to dependencies.\n         extern_crate.direct = false;\n         for &dep_cnum in cmeta.cnum_map.borrow().iter() {\n@@ -646,7 +649,7 @@ impl<'a> CrateLoader<'a> {\n                 // #![panic_runtime] crate.\n                 self.inject_dependency_if(cnum, \"a panic runtime\",\n                                           &|data| data.needs_panic_runtime(sess));\n-                runtime_found = runtime_found || data.dep_kind.get() == DepKind::Explicit;\n+                runtime_found = runtime_found || *data.dep_kind.lock() == DepKind::Explicit;\n             }\n         });\n "}, {"sha": "19f43c180de3804f481a4180ed347c201d856aab", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4edb539159f26c366d6b0606a20e66fe727b78ec/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4edb539159f26c366d6b0606a20e66fe727b78ec/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=4edb539159f26c366d6b0606a20e66fe727b78ec", "patch": "@@ -22,8 +22,7 @@ use rustc_back::PanicStrategy;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::util::nodemap::{FxHashMap, FxHashSet, NodeMap};\n \n-use std::cell::{RefCell, Cell};\n-use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::sync::{Lrc, RwLock, Lock};\n use syntax::{ast, attr};\n use syntax::ext::base::SyntaxExtension;\n use syntax::symbol::Symbol;\n@@ -62,13 +61,13 @@ pub struct CrateMetadata {\n     /// Information about the extern crate that caused this crate to\n     /// be loaded. If this is `None`, then the crate was injected\n     /// (e.g., by the allocator)\n-    pub extern_crate: Cell<Option<ExternCrate>>,\n+    pub extern_crate: Lock<Option<ExternCrate>>,\n \n     pub blob: MetadataBlob,\n-    pub cnum_map: RefCell<CrateNumMap>,\n+    pub cnum_map: Lock<CrateNumMap>,\n     pub cnum: CrateNum,\n-    pub codemap_import_info: RefCell<Vec<ImportedFileMap>>,\n-    pub attribute_cache: RefCell<[Vec<Option<Lrc<[ast::Attribute]>>>; 2]>,\n+    pub codemap_import_info: RwLock<Vec<ImportedFileMap>>,\n+    pub attribute_cache: Lock<[Vec<Option<Lrc<[ast::Attribute]>>>; 2]>,\n \n     pub root: schema::CrateRoot,\n \n@@ -81,7 +80,7 @@ pub struct CrateMetadata {\n \n     pub trait_impls: FxHashMap<(u32, DefIndex), schema::LazySeq<DefIndex>>,\n \n-    pub dep_kind: Cell<DepKind>,\n+    pub dep_kind: Lock<DepKind>,\n     pub source: CrateSource,\n \n     pub proc_macros: Option<Vec<(ast::Name, Lrc<SyntaxExtension>)>>,"}, {"sha": "34c93097a51f52789051506057839616b037089d", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4edb539159f26c366d6b0606a20e66fe727b78ec/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4edb539159f26c366d6b0606a20e66fe727b78ec/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=4edb539159f26c366d6b0606a20e66fe727b78ec", "patch": "@@ -175,7 +175,10 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     is_sanitizer_runtime => { cdata.is_sanitizer_runtime(tcx.sess) }\n     is_profiler_runtime => { cdata.is_profiler_runtime(tcx.sess) }\n     panic_strategy => { cdata.panic_strategy() }\n-    extern_crate => { Lrc::new(cdata.extern_crate.get()) }\n+    extern_crate => {\n+        let r = Lrc::new(*cdata.extern_crate.lock());\n+        r\n+    }\n     is_no_builtins => { cdata.is_no_builtins(tcx.sess) }\n     impl_defaultness => { cdata.get_impl_defaultness(def_id.index) }\n     reachable_non_generics => {\n@@ -225,7 +228,10 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         cdata.is_dllimport_foreign_item(def_id.index)\n     }\n     visibility => { cdata.get_visibility(def_id.index) }\n-    dep_kind => { cdata.dep_kind.get() }\n+    dep_kind => {\n+        let r = *cdata.dep_kind.lock();\n+        r\n+    }\n     crate_name => { cdata.name }\n     item_children => {\n         let mut result = vec![];\n@@ -241,10 +247,11 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     }\n \n     missing_extern_crate_item => {\n-        match cdata.extern_crate.get() {\n+        let r = match *cdata.extern_crate.borrow() {\n             Some(extern_crate) if !extern_crate.direct => true,\n             _ => false,\n-        }\n+        };\n+        r\n     }\n \n     used_crate_source => { Lrc::new(cdata.source.clone()) }\n@@ -419,13 +426,16 @@ impl CrateStore for cstore::CStore {\n \n     fn dep_kind_untracked(&self, cnum: CrateNum) -> DepKind\n     {\n-        self.get_crate_data(cnum).dep_kind.get()\n+        let data = self.get_crate_data(cnum);\n+        let r = *data.dep_kind.lock();\n+        r\n     }\n \n     fn export_macros_untracked(&self, cnum: CrateNum) {\n         let data = self.get_crate_data(cnum);\n-        if data.dep_kind.get() == DepKind::UnexportedMacrosOnly {\n-            data.dep_kind.set(DepKind::MacrosOnly)\n+        let mut dep_kind = data.dep_kind.lock();\n+        if *dep_kind == DepKind::UnexportedMacrosOnly {\n+            *dep_kind = DepKind::MacrosOnly;\n         }\n     }\n "}, {"sha": "d83d6f26393d1ef2efde82e2dc1d68adf60c1c9a", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4edb539159f26c366d6b0606a20e66fe727b78ec/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4edb539159f26c366d6b0606a20e66fe727b78ec/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=4edb539159f26c366d6b0606a20e66fe727b78ec", "patch": "@@ -13,7 +13,7 @@\n use cstore::{self, CrateMetadata, MetadataBlob, NativeLibrary};\n use schema::*;\n \n-use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::sync::{Lrc, ReadGuard};\n use rustc::hir::map::{DefKey, DefPath, DefPathData, DefPathHash};\n use rustc::hir;\n use rustc::middle::cstore::{LinkagePreference, ExternConstBody,\n@@ -31,7 +31,6 @@ use rustc::ty::codec::TyDecoder;\n use rustc::mir::Mir;\n use rustc::util::nodemap::FxHashMap;\n \n-use std::cell::Ref;\n use std::collections::BTreeMap;\n use std::io;\n use std::mem;\n@@ -714,7 +713,7 @@ impl<'a, 'tcx> CrateMetadata {\n         };\n \n         // Iterate over all children.\n-        let macros_only = self.dep_kind.get().macros_only();\n+        let macros_only = self.dep_kind.lock().macros_only();\n         for child_index in item.children.decode((self, sess)) {\n             if macros_only {\n                 continue\n@@ -950,6 +949,8 @@ impl<'a, 'tcx> CrateMetadata {\n         if vec_.len() < node_index + 1 {\n             vec_.resize(node_index + 1, None);\n         }\n+        // This can overwrite the result produced by another thread, but the value\n+        // written should be the same\n         vec_[node_index] = Some(result.clone());\n         result\n     }\n@@ -1156,14 +1157,22 @@ impl<'a, 'tcx> CrateMetadata {\n     /// for items inlined from other crates.\n     pub fn imported_filemaps(&'a self,\n                              local_codemap: &codemap::CodeMap)\n-                             -> Ref<'a, Vec<cstore::ImportedFileMap>> {\n+                             -> ReadGuard<'a, Vec<cstore::ImportedFileMap>> {\n         {\n             let filemaps = self.codemap_import_info.borrow();\n             if !filemaps.is_empty() {\n                 return filemaps;\n             }\n         }\n \n+        // Lock the codemap_import_info to ensure this only happens once\n+        let mut codemap_import_info = self.codemap_import_info.borrow_mut();\n+\n+        if !codemap_import_info.is_empty() {\n+            drop(codemap_import_info);\n+            return self.codemap_import_info.borrow();\n+        }\n+\n         let external_codemap = self.root.codemap.decode(self);\n \n         let imported_filemaps = external_codemap.map(|filemap_to_import| {\n@@ -1222,8 +1231,10 @@ impl<'a, 'tcx> CrateMetadata {\n             }\n         }).collect();\n \n+        *codemap_import_info = imported_filemaps;\n+        drop(codemap_import_info);\n+\n         // This shouldn't borrow twice, but there is no way to downgrade RefMut to Ref.\n-        *self.codemap_import_info.borrow_mut() = imported_filemaps;\n         self.codemap_import_info.borrow()\n     }\n }"}]}