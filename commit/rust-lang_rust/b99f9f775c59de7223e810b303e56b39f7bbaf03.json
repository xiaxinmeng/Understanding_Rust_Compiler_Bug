{"sha": "b99f9f775c59de7223e810b303e56b39f7bbaf03", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5OWY5Zjc3NWM1OWRlNzIyM2U4MTBiMzAzZTU2YjM5ZjdiYmFmMDM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-11-20T21:48:13Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-11-20T21:48:13Z"}, "message": "Enclose type in backticks for \"non-exhaustive patterns\" error\n\nThis makes the error style consistent with the convention in error messages.", "tree": {"sha": "bd0beeb9fa5b39b3b90c1f87d907f6d4c6d21c63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd0beeb9fa5b39b3b90c1f87d907f6d4c6d21c63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b99f9f775c59de7223e810b303e56b39f7bbaf03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b99f9f775c59de7223e810b303e56b39f7bbaf03", "html_url": "https://github.com/rust-lang/rust/commit/b99f9f775c59de7223e810b303e56b39f7bbaf03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b99f9f775c59de7223e810b303e56b39f7bbaf03/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3991bfbbc212ad4825588bb18ad39344e4b600b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3991bfbbc212ad4825588bb18ad39344e4b600b7", "html_url": "https://github.com/rust-lang/rust/commit/3991bfbbc212ad4825588bb18ad39344e4b600b7"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "a6bd36e582fcd843c69466e3315a8ae2ec8ca24d", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99f9f775c59de7223e810b303e56b39f7bbaf03/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99f9f775c59de7223e810b303e56b39f7bbaf03/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=b99f9f775c59de7223e810b303e56b39f7bbaf03", "patch": "@@ -234,7 +234,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n                 if !scrutinee_is_uninhabited {\n                     // We know the type is inhabited, so this must be wrong\n                     let mut err = create_e0004(self.tcx.sess, scrut.span,\n-                                               format!(\"non-exhaustive patterns: type {} \\\n+                                               format!(\"non-exhaustive patterns: type `{}` \\\n                                                         is non-empty\",\n                                                        pat_ty));\n                     span_help!(&mut err, scrut.span,"}, {"sha": "2d46196ddda552cab8ad6cde36e286d832b9464e", "filename": "src/test/ui/error-codes/E0004-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99f9f775c59de7223e810b303e56b39f7bbaf03/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b99f9f775c59de7223e810b303e56b39f7bbaf03/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr?ref=b99f9f775c59de7223e810b303e56b39f7bbaf03", "patch": "@@ -1,4 +1,4 @@\n-error[E0004]: non-exhaustive patterns: type std::option::Option<i32> is non-empty\n+error[E0004]: non-exhaustive patterns: type `std::option::Option<i32>` is non-empty\n   --> $DIR/E0004-2.rs:14:11\n    |\n LL |     match x { } //~ ERROR E0004"}, {"sha": "f0782bd973805a8d43b6b6119860c0187ed4a276", "filename": "src/test/ui/issues/issue-3096-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99f9f775c59de7223e810b303e56b39f7bbaf03/src%2Ftest%2Fui%2Fissues%2Fissue-3096-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b99f9f775c59de7223e810b303e56b39f7bbaf03/src%2Ftest%2Fui%2Fissues%2Fissue-3096-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3096-1.stderr?ref=b99f9f775c59de7223e810b303e56b39f7bbaf03", "patch": "@@ -1,4 +1,4 @@\n-error[E0004]: non-exhaustive patterns: type () is non-empty\n+error[E0004]: non-exhaustive patterns: type `()` is non-empty\n   --> $DIR/issue-3096-1.rs:12:11\n    |\n LL |     match () { } //~ ERROR non-exhaustive"}, {"sha": "e0fa641ff39e7fd7157aba0aa149c60889dd45fc", "filename": "src/test/ui/issues/issue-3096-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b99f9f775c59de7223e810b303e56b39f7bbaf03/src%2Ftest%2Fui%2Fissues%2Fissue-3096-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b99f9f775c59de7223e810b303e56b39f7bbaf03/src%2Ftest%2Fui%2Fissues%2Fissue-3096-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3096-2.stderr?ref=b99f9f775c59de7223e810b303e56b39f7bbaf03", "patch": "@@ -1,4 +1,4 @@\n-error[E0004]: non-exhaustive patterns: type *const bottom is non-empty\n+error[E0004]: non-exhaustive patterns: type `*const bottom` is non-empty\n   --> $DIR/issue-3096-2.rs:15:11\n    |\n LL |     match x { } //~ ERROR non-exhaustive patterns"}, {"sha": "f4974b8fa385402e7f7537c6a37b579729a2af56", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b99f9f775c59de7223e810b303e56b39f7bbaf03/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b99f9f775c59de7223e810b303e56b39f7bbaf03/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr?ref=b99f9f775c59de7223e810b303e56b39f7bbaf03", "patch": "@@ -4,7 +4,7 @@ error[E0004]: non-exhaustive patterns: `Err(_)` not covered\n LL |     let _ = match x {   //~ ERROR non-exhaustive\n    |                   ^ pattern `Err(_)` not covered\n \n-error[E0004]: non-exhaustive patterns: type &Void is non-empty\n+error[E0004]: non-exhaustive patterns: type `&Void` is non-empty\n   --> $DIR/uninhabited-matches-feature-gated.rs:20:19\n    |\n LL |     let _ = match x {}; //~ ERROR non-exhaustive\n@@ -16,7 +16,7 @@ help: ensure that all possible cases are being handled, possibly by adding wildc\n LL |     let _ = match x {}; //~ ERROR non-exhaustive\n    |                   ^\n \n-error[E0004]: non-exhaustive patterns: type (Void,) is non-empty\n+error[E0004]: non-exhaustive patterns: type `(Void,)` is non-empty\n   --> $DIR/uninhabited-matches-feature-gated.rs:23:19\n    |\n LL |     let _ = match x {}; //~ ERROR non-exhaustive\n@@ -28,7 +28,7 @@ help: ensure that all possible cases are being handled, possibly by adding wildc\n LL |     let _ = match x {}; //~ ERROR non-exhaustive\n    |                   ^\n \n-error[E0004]: non-exhaustive patterns: type [Void; 1] is non-empty\n+error[E0004]: non-exhaustive patterns: type `[Void; 1]` is non-empty\n   --> $DIR/uninhabited-matches-feature-gated.rs:26:19\n    |\n LL |     let _ = match x {}; //~ ERROR non-exhaustive"}]}