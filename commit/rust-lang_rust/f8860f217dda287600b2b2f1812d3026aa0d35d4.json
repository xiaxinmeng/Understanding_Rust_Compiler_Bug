{"sha": "f8860f217dda287600b2b2f1812d3026aa0d35d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ODYwZjIxN2RkYTI4NzYwMGIyYjJmMTgxMmQzMDI2YWEwZDM1ZDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-12T22:15:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-12T22:15:07Z"}, "message": "Auto merge of #58743 - varkor:bulk-needstest-1, r=alexcrichton\n\nAdd tests for several E-needstest issues\n\nThis PR adds a number of tests for various `E-needstest` errors. These tend to have been left open for a long time and seem unlikely to be closed otherwise.\n\nCloses https://github.com/rust-lang/rust/issues/10876.\nCloses https://github.com/rust-lang/rust/issues/26448.\nCloses https://github.com/rust-lang/rust/issues/26577.\nCloses https://github.com/rust-lang/rust/issues/26619.\nCloses https://github.com/rust-lang/rust/issues/27054.\nCloses https://github.com/rust-lang/rust/issues/44127.\nCloses https://github.com/rust-lang/rust/issues/44255.\nCloses https://github.com/rust-lang/rust/issues/55731.\nCloses https://github.com/rust-lang/rust/issues/57781.", "tree": {"sha": "796eafb44eaab88a2f41df6bbcbbaa4945566c0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/796eafb44eaab88a2f41df6bbcbbaa4945566c0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8860f217dda287600b2b2f1812d3026aa0d35d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8860f217dda287600b2b2f1812d3026aa0d35d4", "html_url": "https://github.com/rust-lang/rust/commit/f8860f217dda287600b2b2f1812d3026aa0d35d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8860f217dda287600b2b2f1812d3026aa0d35d4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c19e1eed5418b8c02be65d678417b241ee01a3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c19e1eed5418b8c02be65d678417b241ee01a3e", "html_url": "https://github.com/rust-lang/rust/commit/7c19e1eed5418b8c02be65d678417b241ee01a3e"}, {"sha": "5b3e1be7249cc60ac325f2c380267162a65dda40", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b3e1be7249cc60ac325f2c380267162a65dda40", "html_url": "https://github.com/rust-lang/rust/commit/5b3e1be7249cc60ac325f2c380267162a65dda40"}], "stats": {"total": 305, "additions": 305, "deletions": 0}, "files": [{"sha": "afa10b38b91445a3d02761de281f2754c0a4f360", "filename": "src/test/ui/block-expression-remove-semicolon.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.rs?ref=f8860f217dda287600b2b2f1812d3026aa0d35d4", "patch": "@@ -0,0 +1,10 @@\n+fn foo() -> i32 {\n+   0\n+}\n+\n+fn main() {\n+    let x: i32 = {\n+        //~^ ERROR mismatched types\n+        foo(); //~ HELP consider removing this semicolon\n+    };\n+}"}, {"sha": "51942f3d920f5d602772e6fd9f18da6704d2b989", "filename": "src/test/ui/block-expression-remove-semicolon.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-expression-remove-semicolon.stderr?ref=f8860f217dda287600b2b2f1812d3026aa0d35d4", "patch": "@@ -0,0 +1,17 @@\n+error[E0308]: mismatched types\n+  --> $DIR/block-expression-remove-semicolon.rs:6:18\n+   |\n+LL |       let x: i32 = {\n+   |  __________________^\n+LL | |\n+LL | |         foo();\n+   | |              - help: consider removing this semicolon\n+LL | |     };\n+   | |_____^ expected i32, found ()\n+   |\n+   = note: expected type `i32`\n+              found type `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "d8fff5f17760aab6783539732193647db8b1c08f", "filename": "src/test/ui/borrowck/issue-10876.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fborrowck%2Fissue-10876.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fborrowck%2Fissue-10876.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-10876.rs?ref=f8860f217dda287600b2b2f1812d3026aa0d35d4", "patch": "@@ -0,0 +1,19 @@\n+// run-pass\n+\n+#![feature(nll)]\n+\n+enum Nat {\n+    S(Box<Nat>),\n+    Z\n+}\n+fn test(x: &mut Nat) {\n+    let mut p = &mut *x;\n+    loop {\n+        match p {\n+            &mut Nat::Z => break,\n+            &mut Nat::S(ref mut n) => p = &mut *n\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "7d2d75bf2e87856804c667af100e237919742459", "filename": "src/test/ui/issues/issue-26448-1.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fissues%2Fissue-26448-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fissues%2Fissue-26448-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26448-1.rs?ref=f8860f217dda287600b2b2f1812d3026aa0d35d4", "patch": "@@ -0,0 +1,13 @@\n+// run-pass\n+\n+pub trait Foo<T> {\n+    fn foo(self) -> T;\n+}\n+\n+impl<'a, T> Foo<T> for &'a str where &'a str: Into<T> {\n+    fn foo(self) -> T {\n+        panic!();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "17e7c1f977a6db989bd9db084d58aaa67529be1e", "filename": "src/test/ui/issues/issue-26448-2.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fissues%2Fissue-26448-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fissues%2Fissue-26448-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26448-2.rs?ref=f8860f217dda287600b2b2f1812d3026aa0d35d4", "patch": "@@ -0,0 +1,21 @@\n+// run-pass\n+\n+pub struct Bar<T> {\n+    items: Vec<&'static str>,\n+    inner: T,\n+}\n+\n+pub trait IntoBar<T> {\n+    fn into_bar(self) -> Bar<T>;\n+}\n+\n+impl<'a, T> IntoBar<T> for &'a str where &'a str: Into<T> {\n+    fn into_bar(self) -> Bar<T> {\n+        Bar {\n+            items: Vec::new(),\n+            inner: self.into(),\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "e57352e57f4fc1caf5cf43342772cc0dd3f3f3e3", "filename": "src/test/ui/issues/issue-26448-3.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fissues%2Fissue-26448-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fissues%2Fissue-26448-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26448-3.rs?ref=f8860f217dda287600b2b2f1812d3026aa0d35d4", "patch": "@@ -0,0 +1,25 @@\n+// run-pass\n+\n+pub struct Item {\n+    _inner: &'static str,\n+}\n+\n+pub struct Bar<T> {\n+    items: Vec<Item>,\n+    inner: T,\n+}\n+\n+pub trait IntoBar<T> {\n+    fn into_bar(self) -> Bar<T>;\n+}\n+\n+impl<'a, T> IntoBar<T> for &'a str where &'a str: Into<T> {\n+    fn into_bar(self) -> Bar<T> {\n+        Bar {\n+            items: Vec::new(),\n+            inner: self.into(),\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "d1157cda92bf8948bc217fc15158bad4880b6809", "filename": "src/test/ui/issues/issue-26619.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fissues%2Fissue-26619.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fissues%2Fissue-26619.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26619.nll.stderr?ref=f8860f217dda287600b2b2f1812d3026aa0d35d4", "patch": "@@ -0,0 +1,11 @@\n+error[E0515]: cannot return value referencing function parameter\n+  --> $DIR/issue-26619.rs:7:76\n+   |\n+LL |         for s in vec![\"1|2\".to_string()].into_iter().filter_map(|ref line| self.make_entry(line)) {\n+   |                                                                  --------  ^^^^^^^^^^^^^^^^^^^^^ returns a value referencing data owned by the current function\n+   |                                                                  |\n+   |                                                                  function parameter borrowed here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0515`."}, {"sha": "cd89c674e4996e79ff130c21e786f78e3815b1aa", "filename": "src/test/ui/issues/issue-26619.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fissues%2Fissue-26619.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fissues%2Fissue-26619.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26619.rs?ref=f8860f217dda287600b2b2f1812d3026aa0d35d4", "patch": "@@ -0,0 +1,24 @@\n+#![feature(slice_patterns)]\n+\n+pub struct History<'a> { pub _s: &'a str }\n+\n+impl<'a> History<'a> {\n+    pub fn get_page(&self) {\n+        for s in vec![\"1|2\".to_string()].into_iter().filter_map(|ref line| self.make_entry(line)) {\n+            //~^ ERROR borrowed value does not live long enough\n+            println!(\"{:?}\", s);\n+        }\n+    }\n+\n+    fn make_entry(&self, s: &'a String) -> Option<&str> {\n+        let parts: Vec<_> = s.split('|').collect();\n+        println!(\"{:?} -> {:?}\", s, parts);\n+\n+        if let [commit, ..] = &parts[..] { Some(commit) } else { None }\n+    }\n+}\n+\n+fn main() {\n+    let h = History{ _s: \"\" };\n+    h.get_page();\n+}"}, {"sha": "3ac6c4e308d21bb3fc5e9e00812a8bc67dd94165", "filename": "src/test/ui/issues/issue-26619.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fissues%2Fissue-26619.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fissues%2Fissue-26619.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26619.stderr?ref=f8860f217dda287600b2b2f1812d3026aa0d35d4", "patch": "@@ -0,0 +1,12 @@\n+error[E0597]: borrowed value does not live long enough\n+  --> $DIR/issue-26619.rs:7:66\n+   |\n+LL |         for s in vec![\"1|2\".to_string()].into_iter().filter_map(|ref line| self.make_entry(line)) {\n+   |                                                                  ^^^^^^^^                      -- temporary value needs to live until here\n+   |                                                                  |                             |\n+   |                                                                  |                             temporary value dropped here while still borrowed\n+   |                                                                  temporary value does not live long enough\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "21b2e68264a14d0819ef3dff631cf3ac5b6d67a8", "filename": "src/test/ui/issues/issue-44127.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fissues%2Fissue-44127.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fissues%2Fissue-44127.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44127.rs?ref=f8860f217dda287600b2b2f1812d3026aa0d35d4", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+\n+#![feature(decl_macro)]\n+\n+pub struct Foo {\n+    bar: u32,\n+}\n+pub macro pattern($a:pat) {\n+    Foo { bar: $a }\n+}\n+\n+fn main() {\n+    match (Foo { bar: 3 }) {\n+        pattern!(3) => println!(\"Test OK\"),\n+        _ => unreachable!(),\n+    }\n+}"}, {"sha": "2245032043257ec35ea7e39ddae6e6024673bac4", "filename": "src/test/ui/issues/issue-44255.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fissues%2Fissue-44255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fissues%2Fissue-44255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44255.rs?ref=f8860f217dda287600b2b2f1812d3026aa0d35d4", "patch": "@@ -0,0 +1,29 @@\n+// run-pass\n+\n+use std::marker::PhantomData;\n+\n+fn main() {\n+    let _arr = [1; <Multiply<Five, Five>>::VAL];\n+}\n+\n+trait TypeVal<T> {\n+    const VAL: T;\n+}\n+\n+struct Five;\n+\n+impl TypeVal<usize> for Five {\n+    const VAL: usize = 5;\n+}\n+\n+struct Multiply<N, M> {\n+    _n: PhantomData<N>,\n+    _m: PhantomData<M>,\n+}\n+\n+impl<N, M> TypeVal<usize> for Multiply<N, M>\n+    where N: TypeVal<usize>,\n+          M: TypeVal<usize>,\n+{\n+    const VAL: usize = N::VAL * M::VAL;\n+}"}, {"sha": "2d9111e9b3a9818d1a6ec2ce721f13ff03fa23a1", "filename": "src/test/ui/issues/issue-46101.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fissues%2Fissue-46101.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fissues%2Fissue-46101.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46101.rs?ref=f8860f217dda287600b2b2f1812d3026aa0d35d4", "patch": "@@ -0,0 +1,4 @@\n+#![feature(use_extern_macros)]\n+trait Foo {}\n+#[derive(Foo::Anything)] //~ ERROR failed to resolve: partially resolved path in a derive macro\n+struct S;"}, {"sha": "3ad5383294a53308a076947f81585e7536bf9c5b", "filename": "src/test/ui/issues/issue-46101.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fissues%2Fissue-46101.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fissues%2Fissue-46101.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46101.stderr?ref=f8860f217dda287600b2b2f1812d3026aa0d35d4", "patch": "@@ -0,0 +1,14 @@\n+error[E0433]: failed to resolve: partially resolved path in a derive macro\n+  --> $DIR/issue-46101.rs:3:10\n+   |\n+LL | #[derive(Foo::Anything)]\n+   |          ^^^^^^^^^^^^^ partially resolved path in a derive macro\n+\n+error[E0601]: `main` function not found in crate `issue_46101`\n+   |\n+   = note: consider adding a `main` function to `$DIR/issue-46101.rs`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors occurred: E0433, E0601.\n+For more information about an error, try `rustc --explain E0433`."}, {"sha": "7b4f4e2cd3b4026dfde396813c214b04b0035d16", "filename": "src/test/ui/issues/issue-55731.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fissues%2Fissue-55731.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fissues%2Fissue-55731.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55731.rs?ref=f8860f217dda287600b2b2f1812d3026aa0d35d4", "patch": "@@ -0,0 +1,52 @@\n+use std::marker::PhantomData;\n+\n+trait DistributedIterator {\n+    fn reduce(self)\n+    where\n+        Self: Sized,\n+    {\n+        unreachable!()\n+    }\n+}\n+\n+trait DistributedIteratorMulti<Source> {\n+    type Item;\n+}\n+\n+struct Connect<I>(PhantomData<fn(I)>);\n+impl<I: for<'a> DistributedIteratorMulti<&'a ()>> DistributedIterator for Connect<I> where {}\n+\n+struct Cloned<Source>(PhantomData<fn(Source)>);\n+impl<'a, Source> DistributedIteratorMulti<&'a Source> for Cloned<&'a Source> {\n+    type Item = ();\n+}\n+\n+struct Map<I, F> {\n+    i: I,\n+    f: F,\n+}\n+impl<I: DistributedIteratorMulti<Source>, F, Source> DistributedIteratorMulti<Source> for Map<I, F>\n+where\n+    F: A<<I as DistributedIteratorMulti<Source>>::Item>,\n+{\n+    type Item = ();\n+}\n+\n+trait A<B> {}\n+\n+struct X;\n+impl A<()> for X {}\n+\n+fn multi<I>(_reducer: I)\n+where\n+    I: for<'a> DistributedIteratorMulti<&'a ()>,\n+{\n+    DistributedIterator::reduce(Connect::<I>(PhantomData))\n+}\n+\n+fn main() {\n+    multi(Map { //~ ERROR implementation of `DistributedIteratorMulti` is not general enough\n+        i: Cloned(PhantomData),\n+        f: X,\n+    });\n+}"}, {"sha": "f25e18e5d90cb091fa0cfa66018903aef6540562", "filename": "src/test/ui/issues/issue-55731.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fissues%2Fissue-55731.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fissues%2Fissue-55731.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-55731.stderr?ref=f8860f217dda287600b2b2f1812d3026aa0d35d4", "patch": "@@ -0,0 +1,11 @@\n+error: implementation of `DistributedIteratorMulti` is not general enough\n+  --> $DIR/issue-55731.rs:48:5\n+   |\n+LL |     multi(Map {\n+   |     ^^^^^\n+   |\n+   = note: `DistributedIteratorMulti<&'0 ()>` would have to be implemented for the type `Cloned<&()>`, for any lifetime `'0`\n+   = note: but `DistributedIteratorMulti<&'1 ()>` is actually implemented for the type `Cloned<&'1 ()>`, for some specific lifetime `'1`\n+\n+error: aborting due to previous error\n+"}, {"sha": "f5015aaf5d81f965703a91da9511be15c504ec42", "filename": "src/test/ui/issues/issue-57781.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fissues%2Fissue-57781.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fissues%2Fissue-57781.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57781.rs?ref=f8860f217dda287600b2b2f1812d3026aa0d35d4", "patch": "@@ -0,0 +1,20 @@\n+// run-pass\n+\n+use std::cell::UnsafeCell;\n+use std::collections::HashMap;\n+\n+struct OnceCell<T> {\n+    _value: UnsafeCell<Option<T>>,\n+}\n+\n+impl<T> OnceCell<T> {\n+    const INIT: OnceCell<T> = OnceCell {\n+        _value: UnsafeCell::new(None),\n+    };\n+}\n+\n+pub fn crash<K, T>() {\n+    let _ = OnceCell::<HashMap<K, T>>::INIT;\n+}\n+\n+fn main() {}"}, {"sha": "4f1c456ace354fe3b1ed6b24f0ebb888ea01f69b", "filename": "src/test/ui/primitive-binop-lhs-mut.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fprimitive-binop-lhs-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8860f217dda287600b2b2f1812d3026aa0d35d4/src%2Ftest%2Fui%2Fprimitive-binop-lhs-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprimitive-binop-lhs-mut.rs?ref=f8860f217dda287600b2b2f1812d3026aa0d35d4", "patch": "@@ -0,0 +1,6 @@\n+// run-pass\n+\n+fn main() {\n+    let x = Box::new(0);\n+    assert_eq!(0, *x + { drop(x); let _ = Box::new(main); 0 });\n+}"}]}