{"sha": "ad44d427508293fd572a61c790d55e7e41ac3f37", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNDRkNDI3NTA4MjkzZmQ1NzJhNjFjNzkwZDU1ZTdlNDFhYzNmMzc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-14T20:56:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-14T20:56:29Z"}, "message": "Rollup merge of #63543 - c410-f3r:variant, r=c410-f3r\n\nMerge Variant and Variant_\n\nExtracted from #63468.", "tree": {"sha": "52b7a3817fc4896047021855e0dbb0af73b81b64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52b7a3817fc4896047021855e0dbb0af73b81b64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad44d427508293fd572a61c790d55e7e41ac3f37", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdVHV+CRBK7hj4Ov3rIwAAdHIIAK5RpX51Sh6tBD1D3coO1vuI\nDnCSOSwVt8BxdXSJKBwVB6makoJRmZmZP8geQOIWmrysk9cDvExQ9sztMesSC8y6\n1s6+s77JRRPcMG+jAlrO90eOKOYA1Q/x02n32nh4uHkaW5EhO+rN0NMx0a64H1iw\nHXsXLBFLLEDI648d0lMfXQb8nkWHO/CjqEB9yfjugyahZbgTOJEZlTo8TLwrl5na\nbzv9S1bvtU/91tzf3IzsPdlxuhoG2kGSDfio7PPdpyOOlSnaU+aNpAYSo69AWGto\nwf4CD1YigjlUdGumpXmIFyr00wownZTycDmcOIfgDI/Vd+lKdzcPQmUKpoZ/Z2E=\n=KIOh\n-----END PGP SIGNATURE-----\n", "payload": "tree 52b7a3817fc4896047021855e0dbb0af73b81b64\nparent d4ecc6f5c0121a82bf491688fcc9e8993b72a730\nparent 6a42b0b28db4c18fd9e0c0e6e69ecbe0c5d9b107\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565816189 +0200\ncommitter GitHub <noreply@github.com> 1565816189 +0200\n\nRollup merge of #63543 - c410-f3r:variant, r=c410-f3r\n\nMerge Variant and Variant_\n\nExtracted from #63468.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad44d427508293fd572a61c790d55e7e41ac3f37", "html_url": "https://github.com/rust-lang/rust/commit/ad44d427508293fd572a61c790d55e7e41ac3f37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad44d427508293fd572a61c790d55e7e41ac3f37/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4ecc6f5c0121a82bf491688fcc9e8993b72a730", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4ecc6f5c0121a82bf491688fcc9e8993b72a730", "html_url": "https://github.com/rust-lang/rust/commit/d4ecc6f5c0121a82bf491688fcc9e8993b72a730"}, {"sha": "6a42b0b28db4c18fd9e0c0e6e69ecbe0c5d9b107", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a42b0b28db4c18fd9e0c0e6e69ecbe0c5d9b107", "html_url": "https://github.com/rust-lang/rust/commit/6a42b0b28db4c18fd9e0c0e6e69ecbe0c5d9b107"}], "stats": {"total": 328, "additions": 162, "deletions": 166}, "files": [{"sha": "eae956c978a8e08823b46cc2c1b98c1b8e769175", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -336,7 +336,7 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n fn is_c_like_enum(item: &hir::Item) -> bool {\n     if let hir::ItemKind::Enum(ref def, _) = item.node {\n         for variant in &def.variants {\n-            match variant.node.data {\n+            match variant.data {\n                 hir::VariantData::Unit(..) => { /* continue */ }\n                 _ => { return false; }\n             }"}, {"sha": "71d7464540a4c158153fd29ac6b77df7abd18d99", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -577,15 +577,15 @@ pub fn walk_variant<'v, V: Visitor<'v>>(visitor: &mut V,\n                                         variant: &'v Variant,\n                                         generics: &'v Generics,\n                                         parent_item_id: HirId) {\n-    visitor.visit_ident(variant.node.ident);\n-    visitor.visit_id(variant.node.id);\n-    visitor.visit_variant_data(&variant.node.data,\n-                               variant.node.ident.name,\n+    visitor.visit_ident(variant.ident);\n+    visitor.visit_id(variant.id);\n+    visitor.visit_variant_data(&variant.data,\n+                               variant.ident.name,\n                                generics,\n                                parent_item_id,\n                                variant.span);\n-    walk_list!(visitor, visit_anon_const, &variant.node.disr_expr);\n-    walk_list!(visitor, visit_attribute, &variant.node.attrs);\n+    walk_list!(visitor, visit_anon_const, &variant.disr_expr);\n+    walk_list!(visitor, visit_attribute, &variant.attrs);\n }\n \n pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {"}, {"sha": "51a0c4184f9ef86ffd455ff507d5ea0516404fc4", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -757,14 +757,12 @@ impl LoweringContext<'_> {\n     }\n \n     fn lower_variant(&mut self, v: &Variant) -> hir::Variant {\n-        Spanned {\n-            node: hir::VariantKind {\n-                ident: v.node.ident,\n-                id: self.lower_node_id(v.node.id),\n-                attrs: self.lower_attrs(&v.node.attrs),\n-                data: self.lower_variant_data(&v.node.data),\n-                disr_expr: v.node.disr_expr.as_ref().map(|e| self.lower_anon_const(e)),\n-            },\n+        hir::Variant {\n+            attrs: self.lower_attrs(&v.attrs),\n+            data: self.lower_variant_data(&v.data),\n+            disr_expr: v.disr_expr.as_ref().map(|e| self.lower_anon_const(e)),\n+            id: self.lower_node_id(v.id),\n+            ident: v.ident,\n             span: v.span,\n         }\n     }"}, {"sha": "effe2c0cc6a76f1dde4be58fa7b145fbc3fdad90", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -544,11 +544,11 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     }\n \n     fn visit_variant(&mut self, v: &'hir Variant, g: &'hir Generics, item_id: HirId) {\n-        self.insert(v.span, v.node.id, Node::Variant(v));\n-        self.with_parent(v.node.id, |this| {\n+        self.insert(v.span, v.id, Node::Variant(v));\n+        self.with_parent(v.id, |this| {\n             // Register the constructor of this variant.\n-            if let Some(ctor_hir_id) = v.node.data.ctor_hir_id() {\n-                this.insert(v.span, ctor_hir_id, Node::Ctor(&v.node.data));\n+            if let Some(ctor_hir_id) = v.data.ctor_hir_id() {\n+                this.insert(v.span, ctor_hir_id, Node::Ctor(&v.data));\n             }\n             intravisit::walk_variant(this, v, g, item_id);\n         });"}, {"sha": "df9bd3a35a6219db4aca1c4e778cfd12f2b07023", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -155,11 +155,11 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     }\n \n     fn visit_variant(&mut self, v: &'a Variant, g: &'a Generics, item_id: NodeId) {\n-        let def = self.create_def(v.node.id,\n-                                  DefPathData::TypeNs(v.node.ident.as_interned_str()),\n+        let def = self.create_def(v.id,\n+                                  DefPathData::TypeNs(v.ident.as_interned_str()),\n                                   v.span);\n         self.with_parent(def, |this| {\n-            if let Some(ctor_hir_id) = v.node.data.ctor_id() {\n+            if let Some(ctor_hir_id) = v.data.ctor_id() {\n                 this.create_def(ctor_hir_id, DefPathData::Ctor, v.span);\n             }\n             visit::walk_variant(this, v, g, item_id)"}, {"sha": "7292428ec378c62be57090a7e2d7e2532d80e265", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -907,7 +907,7 @@ impl<'hir> Map<'hir> {\n                     _ => bug!(\"struct ID bound to non-struct {}\", self.node_to_string(id))\n                 }\n             }\n-            Some(Node::Variant(variant)) => &variant.node.data,\n+            Some(Node::Variant(variant)) => &variant.data,\n             Some(Node::Ctor(data)) => data,\n             _ => bug!(\"expected struct or variant, found {}\", self.node_to_string(id))\n         }\n@@ -940,7 +940,7 @@ impl<'hir> Map<'hir> {\n             Node::ForeignItem(fi) => fi.ident.name,\n             Node::ImplItem(ii) => ii.ident.name,\n             Node::TraitItem(ti) => ti.ident.name,\n-            Node::Variant(v) => v.node.ident.name,\n+            Node::Variant(v) => v.ident.name,\n             Node::Field(f) => f.ident.name,\n             Node::Lifetime(lt) => lt.name.ident().name,\n             Node::GenericParam(param) => param.name.ident().name,\n@@ -961,7 +961,7 @@ impl<'hir> Map<'hir> {\n             Some(Node::ForeignItem(fi)) => Some(&fi.attrs[..]),\n             Some(Node::TraitItem(ref ti)) => Some(&ti.attrs[..]),\n             Some(Node::ImplItem(ref ii)) => Some(&ii.attrs[..]),\n-            Some(Node::Variant(ref v)) => Some(&v.node.attrs[..]),\n+            Some(Node::Variant(ref v)) => Some(&v.attrs[..]),\n             Some(Node::Field(ref f)) => Some(&f.attrs[..]),\n             Some(Node::Expr(ref e)) => Some(&*e.attrs),\n             Some(Node::Stmt(ref s)) => Some(s.node.attrs()),\n@@ -1155,7 +1155,7 @@ impl<T:Named> Named for Spanned<T> { fn name(&self) -> Name { self.node.name() }\n \n impl Named for Item { fn name(&self) -> Name { self.ident.name } }\n impl Named for ForeignItem { fn name(&self) -> Name { self.ident.name } }\n-impl Named for VariantKind { fn name(&self) -> Name { self.ident.name } }\n+impl Named for Variant { fn name(&self) -> Name { self.ident.name } }\n impl Named for StructField { fn name(&self) -> Name { self.ident.name } }\n impl Named for TraitItem { fn name(&self) -> Name { self.ident.name } }\n impl Named for ImplItem { fn name(&self) -> Name { self.ident.name } }\n@@ -1332,7 +1332,7 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId, include_id: bool) -> String {\n         }\n         Some(Node::Variant(ref variant)) => {\n             format!(\"variant {} in {}{}\",\n-                    variant.node.ident,\n+                    variant.ident,\n                     path_str(), id_str)\n         }\n         Some(Node::Field(ref field)) => {"}, {"sha": "dccc2774f5261e4ebe1f003bb707c4c51131879c", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -2193,7 +2193,7 @@ pub struct EnumDef {\n }\n \n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n-pub struct VariantKind {\n+pub struct Variant {\n     /// Name of the variant.\n     #[stable_hasher(project(name))]\n     pub ident: Ident,\n@@ -2205,10 +2205,10 @@ pub struct VariantKind {\n     pub data: VariantData,\n     /// Explicit discriminant (e.g., `Foo = 1`).\n     pub disr_expr: Option<AnonConst>,\n+    /// Span\n+    pub span: Span\n }\n \n-pub type Variant = Spanned<VariantKind>;\n-\n #[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub enum UseKind {\n     /// One import, e.g., `use foo::bar` or `use foo::bar as baz`."}, {"sha": "0cbfe4d75f1c626bad184b9506579db47fc80f7b", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -737,7 +737,7 @@ impl<'a> State<'a> {\n         for v in variants {\n             self.space_if_not_bol();\n             self.maybe_print_comment(v.span.lo());\n-            self.print_outer_attributes(&v.node.attrs);\n+            self.print_outer_attributes(&v.attrs);\n             self.ibox(INDENT_UNIT);\n             self.print_variant(v);\n             self.s.word(\",\");\n@@ -829,8 +829,8 @@ impl<'a> State<'a> {\n     pub fn print_variant(&mut self, v: &hir::Variant) {\n         self.head(\"\");\n         let generics = hir::Generics::empty();\n-        self.print_struct(&v.node.data, &generics, v.node.ident.name, v.span, false);\n-        if let Some(ref d) = v.node.disr_expr {\n+        self.print_struct(&v.data, &generics, v.ident.name, v.span, false);\n+        if let Some(ref d) = v.disr_expr {\n             self.s.space();\n             self.word_space(\"=\");\n             self.print_anon_const(d);"}, {"sha": "1fd4e00de497f40738f8bb5907482e5c8615ce90", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -304,7 +304,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::Mod {\n     }\n }\n \n-impl_stable_hash_for_spanned!(hir::VariantKind);\n+impl_stable_hash_for_spanned!(hir::Variant);\n \n \n impl<'a> HashStable<StableHashingContext<'a>> for hir::Item {"}, {"sha": "a05023718f8f65219fec51a7a462d19827c958ab", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -1060,7 +1060,7 @@ for LateContextAndPass<'a, 'tcx, T> {\n                      v: &'tcx hir::Variant,\n                      g: &'tcx hir::Generics,\n                      item_id: hir::HirId) {\n-        self.with_lint_attrs(v.node.id, &v.node.attrs, |cx| {\n+        self.with_lint_attrs(v.id, &v.attrs, |cx| {\n             lint_callback!(cx, check_variant, v, g);\n             hir_visit::walk_variant(cx, v, g, item_id);\n             lint_callback!(cx, check_variant_post, v, g);\n@@ -1236,7 +1236,7 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     }\n \n     fn visit_variant(&mut self, v: &'a ast::Variant, g: &'a ast::Generics, item_id: ast::NodeId) {\n-        self.with_lint_attrs(item_id, &v.node.attrs, |cx| {\n+        self.with_lint_attrs(item_id, &v.attrs, |cx| {\n             run_early_pass!(cx, check_variant, v, g);\n             ast_visit::walk_variant(cx, v, g, item_id);\n             run_early_pass!(cx, check_variant_post, v, g);"}, {"sha": "8cb5b1e26d947dfe61f642768aa30423654b6f3b", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -846,7 +846,7 @@ impl intravisit::Visitor<'tcx> for LintLevelMapBuilder<'tcx> {\n                      v: &'tcx hir::Variant,\n                      g: &'tcx hir::Generics,\n                      item_id: hir::HirId) {\n-        self.with_lint_attrs(v.node.id, &v.node.attrs, |builder| {\n+        self.with_lint_attrs(v.id, &v.attrs, |builder| {\n             intravisit::walk_variant(builder, v, g, item_id);\n         })\n     }"}, {"sha": "1f3adf00923676f164c23c68e46e46fbe0b2e20a", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -366,12 +366,12 @@ impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n         match item.node {\n             hir::ItemKind::Enum(ref enum_def, _) => {\n                 if allow_dead_code {\n-                    self.worklist.extend(enum_def.variants.iter().map(|variant| variant.node.id));\n+                    self.worklist.extend(enum_def.variants.iter().map(|variant| variant.id));\n                 }\n \n                 for variant in &enum_def.variants {\n-                    if let Some(ctor_hir_id) = variant.node.data.ctor_hir_id() {\n-                        self.struct_constructors.insert(ctor_hir_id, variant.node.id);\n+                    if let Some(ctor_hir_id) = variant.data.ctor_hir_id() {\n+                        self.struct_constructors.insert(ctor_hir_id, variant.id);\n                     }\n                 }\n             }\n@@ -497,7 +497,7 @@ impl DeadVisitor<'tcx> {\n             && !has_allow_dead_code_or_lang_attr(self.tcx, field.hir_id, &field.attrs)\n     }\n \n-    fn should_warn_about_variant(&mut self, variant: &hir::VariantKind) -> bool {\n+    fn should_warn_about_variant(&mut self, variant: &hir::Variant) -> bool {\n         !self.symbol_is_live(variant.id)\n             && !has_allow_dead_code_or_lang_attr(self.tcx,\n                                                  variant.id,\n@@ -596,8 +596,8 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n                      variant: &'tcx hir::Variant,\n                      g: &'tcx hir::Generics,\n                      id: hir::HirId) {\n-        if self.should_warn_about_variant(&variant.node) {\n-            self.warn_dead_code(variant.node.id, variant.span, variant.node.ident.name,\n+        if self.should_warn_about_variant(&variant) {\n+            self.warn_dead_code(variant.id, variant.span, variant.ident.name,\n                                 \"variant\", \"constructed\");\n         } else {\n             intravisit::walk_variant(self, variant, g, id);"}, {"sha": "d02259bf3010b48bd002bbc38555424878b79195", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -290,10 +290,10 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n     }\n \n     fn visit_variant(&mut self, var: &'tcx Variant, g: &'tcx Generics, item_id: HirId) {\n-        self.annotate(var.node.id, &var.node.attrs, var.span, AnnotationKind::Required,\n+        self.annotate(var.id, &var.attrs, var.span, AnnotationKind::Required,\n             |v| {\n-                if let Some(ctor_hir_id) = var.node.data.ctor_hir_id() {\n-                    v.annotate(ctor_hir_id, &var.node.attrs, var.span, AnnotationKind::Required,\n+                if let Some(ctor_hir_id) = var.data.ctor_hir_id() {\n+                    v.annotate(ctor_hir_id, &var.attrs, var.span, AnnotationKind::Required,\n                                |_| {});\n                 }\n \n@@ -372,7 +372,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'a, 'tcx> {\n     }\n \n     fn visit_variant(&mut self, var: &'tcx Variant, g: &'tcx Generics, item_id: HirId) {\n-        self.check_missing_stability(var.node.id, var.span, \"variant\");\n+        self.check_missing_stability(var.id, var.span, \"variant\");\n         intravisit::walk_variant(self, var, g, item_id);\n     }\n "}, {"sha": "a83d490511562950a8dd3d12cc2441ab3a8e4709", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -484,8 +484,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n \n     fn check_variant(&mut self, cx: &LateContext<'_, '_>, v: &hir::Variant, _: &hir::Generics) {\n         self.check_missing_docs_attrs(cx,\n-                                      Some(v.node.id),\n-                                      &v.node.attrs,\n+                                      Some(v.id),\n+                                      &v.attrs,\n                                       v.span,\n                                       \"a variant\");\n     }"}, {"sha": "acd17f766323419cfe0c8efe6c514d91d62138df", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -147,7 +147,7 @@ impl EarlyLintPass for NonCamelCaseTypes {\n     }\n \n     fn check_variant(&mut self, cx: &EarlyContext<'_>, v: &ast::Variant, _: &ast::Generics) {\n-        self.check_case(cx, \"variant\", &v.node.ident);\n+        self.check_case(cx, \"variant\", &v.ident);\n     }\n \n     fn check_generic_param(&mut self, cx: &EarlyContext<'_>, param: &ast::GenericParam) {"}, {"sha": "217e10ab24f552696be203b2c7a45789cdd341e2", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -976,7 +976,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for VariantSizeDifferences {\n                     let bytes = variant_layout.size.bytes().saturating_sub(discr_size);\n \n                     debug!(\"- variant `{}` is {} bytes large\",\n-                           variant.node.ident,\n+                           variant.ident,\n                            bytes);\n                     bytes\n                 })"}, {"sha": "fb675d7d841e1bbb6938f09bc6199a0293527dbc", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -1676,7 +1676,7 @@ impl Visitor<'tcx> for EncodeContext<'tcx> {\n                      id: hir::HirId) {\n         intravisit::walk_variant(self, v, g, id);\n \n-        if let Some(ref discr) = v.node.disr_expr {\n+        if let Some(ref discr) = v.disr_expr {\n             let def_id = self.tcx.hir().local_def_id(discr.hir_id);\n             self.record(def_id, EncodeContext::encode_info_for_anon_const, def_id);\n         }"}, {"sha": "489806f75a5a82d56752f14368d5dff5cf76b29c", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -602,7 +602,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             }\n             ItemKind::Enum(ref def, _) => {\n                 for variant in &def.variants {\n-                    for field in variant.node.data.fields() {\n+                    for field in variant.data.fields() {\n                         self.invalid_visibility(&field.vis, None);\n                     }\n                 }"}, {"sha": "852b4898f4ab2929f97043e54206b2c7cd2222a3", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -687,11 +687,11 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n         match item.node {\n             hir::ItemKind::Enum(ref def, _) => {\n                 for variant in &def.variants {\n-                    let variant_level = self.update(variant.node.id, item_level);\n-                    if let Some(ctor_hir_id) = variant.node.data.ctor_hir_id() {\n+                    let variant_level = self.update(variant.id, item_level);\n+                    if let Some(ctor_hir_id) = variant.data.ctor_hir_id() {\n                         self.update(ctor_hir_id, item_level);\n                     }\n-                    for field in variant.node.data.fields() {\n+                    for field in variant.data.fields() {\n                         self.update(field.hir_id, variant_level);\n                     }\n                 }\n@@ -810,9 +810,9 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n                     self.reach(item.hir_id, item_level).generics().predicates();\n                 }\n                 for variant in &def.variants {\n-                    let variant_level = self.get(variant.node.id);\n+                    let variant_level = self.get(variant.id);\n                     if variant_level.is_some() {\n-                        for field in variant.node.data.fields() {\n+                        for field in variant.data.fields() {\n                             self.reach(field.hir_id, variant_level).ty();\n                         }\n                         // Corner case: if the variant is reachable, but its\n@@ -1647,7 +1647,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                      v: &'tcx hir::Variant,\n                      g: &'tcx hir::Generics,\n                      item_id: hir::HirId) {\n-        if self.access_levels.is_reachable(v.node.id) {\n+        if self.access_levels.is_reachable(v.id) {\n             self.in_variant = true;\n             intravisit::walk_variant(self, v, g, item_id);\n             self.in_variant = false;\n@@ -1898,7 +1898,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n                 self.check(item.hir_id, item_visibility).generics().predicates();\n \n                 for variant in &def.variants {\n-                    for field in variant.node.data.fields() {\n+                    for field in variant.data.fields() {\n                         self.check(field.hir_id, item_visibility).ty();\n                     }\n                 }"}, {"sha": "0a32b0c6e95db0c64015103af324ab4973ef0aca", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -799,17 +799,17 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                                        parent: Module<'a>,\n                                        vis: ty::Visibility,\n                                        expn_id: ExpnId) {\n-        let ident = variant.node.ident;\n+        let ident = variant.ident;\n \n         // Define a name in the type namespace.\n-        let def_id = self.r.definitions.local_def_id(variant.node.id);\n+        let def_id = self.r.definitions.local_def_id(variant.id);\n         let res = Res::Def(DefKind::Variant, def_id);\n         self.r.define(parent, ident, TypeNS, (res, vis, variant.span, expn_id));\n \n         // If the variant is marked as non_exhaustive then lower the visibility to within the\n         // crate.\n         let mut ctor_vis = vis;\n-        let has_non_exhaustive = attr::contains_name(&variant.node.attrs, sym::non_exhaustive);\n+        let has_non_exhaustive = attr::contains_name(&variant.attrs, sym::non_exhaustive);\n         if has_non_exhaustive && vis == ty::Visibility::Public {\n             ctor_vis = ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX));\n         }\n@@ -819,9 +819,9 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         // value namespace, they are reserved for possible future use.\n         // It's ok to use the variant's id as a ctor id since an\n         // error will be reported on any use of such resolution anyway.\n-        let ctor_node_id = variant.node.data.ctor_id().unwrap_or(variant.node.id);\n+        let ctor_node_id = variant.data.ctor_id().unwrap_or(variant.id);\n         let ctor_def_id = self.r.definitions.local_def_id(ctor_node_id);\n-        let ctor_kind = CtorKind::from_ast(&variant.node.data);\n+        let ctor_kind = CtorKind::from_ast(&variant.data);\n         let ctor_res = Res::Def(DefKind::Ctor(CtorOf::Variant, ctor_kind), ctor_def_id);\n         self.r.define(parent, ident, ValueNS, (ctor_res, ctor_vis, variant.span, expn_id));\n     }"}, {"sha": "d93c12513c5a133980ad382173e09a58c0671b8b", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -557,11 +557,11 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         let access = access_from!(self.save_ctxt, item, hir_id);\n \n         for variant in &enum_definition.variants {\n-            let name = variant.node.ident.name.to_string();\n+            let name = variant.ident.name.to_string();\n             let qualname = format!(\"{}::{}\", enum_data.qualname, name);\n-            let name_span = variant.node.ident.span;\n+            let name_span = variant.ident.span;\n \n-            match variant.node.data {\n+            match variant.data {\n                 ast::VariantData::Struct(ref fields, ..) => {\n                     let fields_str = fields\n                         .iter()\n@@ -574,7 +574,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     let value = format!(\"{}::{} {{ {} }}\", enum_data.name, name, fields_str);\n                     if !self.span.filter_generated(name_span) {\n                         let span = self.span_from_span(name_span);\n-                        let id = id_from_node_id(variant.node.id, &self.save_ctxt);\n+                        let id = id_from_node_id(variant.id, &self.save_ctxt);\n                         let parent = Some(id_from_node_id(item.id, &self.save_ctxt));\n \n                         self.dumper.dump_def(\n@@ -589,10 +589,10 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                                 parent,\n                                 children: vec![],\n                                 decl_id: None,\n-                                docs: self.save_ctxt.docs_for_attrs(&variant.node.attrs),\n+                                docs: self.save_ctxt.docs_for_attrs(&variant.attrs),\n                                 sig: sig::variant_signature(variant, &self.save_ctxt),\n                                 attributes: lower_attributes(\n-                                    variant.node.attrs.clone(),\n+                                    variant.attrs.clone(),\n                                     &self.save_ctxt,\n                                 ),\n                             },\n@@ -612,7 +612,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                     }\n                     if !self.span.filter_generated(name_span) {\n                         let span = self.span_from_span(name_span);\n-                        let id = id_from_node_id(variant.node.id, &self.save_ctxt);\n+                        let id = id_from_node_id(variant.id, &self.save_ctxt);\n                         let parent = Some(id_from_node_id(item.id, &self.save_ctxt));\n \n                         self.dumper.dump_def(\n@@ -627,10 +627,10 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                                 parent,\n                                 children: vec![],\n                                 decl_id: None,\n-                                docs: self.save_ctxt.docs_for_attrs(&variant.node.attrs),\n+                                docs: self.save_ctxt.docs_for_attrs(&variant.attrs),\n                                 sig: sig::variant_signature(variant, &self.save_ctxt),\n                                 attributes: lower_attributes(\n-                                    variant.node.attrs.clone(),\n+                                    variant.attrs.clone(),\n                                     &self.save_ctxt,\n                                 ),\n                             },\n@@ -640,8 +640,8 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n             }\n \n \n-            for field in variant.node.data.fields() {\n-                self.process_struct_field_def(field, variant.node.id);\n+            for field in variant.data.fields() {\n+                self.process_struct_field_def(field, variant.id);\n                 self.visit_ty(&field.ty);\n             }\n         }"}, {"sha": "9da6cd800570e79427a6a6ed15356e7af552b126", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -277,7 +277,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                 filter!(self.span_utils, item.ident.span);\n                 let variants_str = def.variants\n                     .iter()\n-                    .map(|v| v.node.ident.to_string())\n+                    .map(|v| v.ident.to_string())\n                     .collect::<Vec<_>>()\n                     .join(\", \");\n                 let value = format!(\"{}::{{{}}}\", name, variants_str);\n@@ -291,7 +291,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                     parent: None,\n                     children: def.variants\n                         .iter()\n-                        .map(|v| id_from_node_id(v.node.id, self))\n+                        .map(|v| id_from_node_id(v.id, self))\n                         .collect(),\n                     decl_id: None,\n                     docs: self.docs_for_attrs(&item.attrs),"}, {"sha": "b34506a4f1d371747b80dc2a48bd87786aa5b6ae", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -65,7 +65,7 @@ pub fn variant_signature(variant: &ast::Variant, scx: &SaveContext<'_, '_>) -> O\n     if !scx.config.signatures {\n         return None;\n     }\n-    variant.node.make(0, None, scx).ok()\n+    variant.make(0, None, scx).ok()\n }\n \n pub fn method_signature(\n@@ -699,7 +699,7 @@ impl Sig for ast::StructField {\n }\n \n \n-impl Sig for ast::Variant_ {\n+impl Sig for ast::Variant {\n     fn make(&self, offset: usize, parent_id: Option<NodeId>, scx: &SaveContext<'_, '_>) -> Result {\n         let mut text = self.ident.to_string();\n         match self.data {"}, {"sha": "463e42126489a4374d369d4175ca6d7d045ce045", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -2050,19 +2050,19 @@ pub fn check_enum<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, vs: &'tcx [hir::Variant], i\n     }\n \n     for v in vs {\n-        if let Some(ref e) = v.node.disr_expr {\n+        if let Some(ref e) = v.disr_expr {\n             tcx.typeck_tables_of(tcx.hir().local_def_id(e.hir_id));\n         }\n     }\n \n     if tcx.adt_def(def_id).repr.int.is_none() && tcx.features().arbitrary_enum_discriminant {\n         let is_unit =\n-            |var: &hir::Variant| match var.node.data {\n+            |var: &hir::Variant| match var.data {\n                 hir::VariantData::Unit(..) => true,\n                 _ => false\n             };\n \n-        let has_disr = |var: &hir::Variant| var.node.disr_expr.is_some();\n+        let has_disr = |var: &hir::Variant| var.disr_expr.is_some();\n         let has_non_units = vs.iter().any(|var| !is_unit(var));\n         let disr_units = vs.iter().any(|var| is_unit(&var) && has_disr(&var));\n         let disr_non_unit = vs.iter().any(|var| !is_unit(&var) && has_disr(&var));\n@@ -2081,11 +2081,11 @@ pub fn check_enum<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, vs: &'tcx [hir::Variant], i\n             let variant_did = def.variants[VariantIdx::new(i)].def_id;\n             let variant_i_hir_id = tcx.hir().as_local_hir_id(variant_did).unwrap();\n             let variant_i = tcx.hir().expect_variant(variant_i_hir_id);\n-            let i_span = match variant_i.node.disr_expr {\n+            let i_span = match variant_i.disr_expr {\n                 Some(ref expr) => tcx.hir().span(expr.hir_id),\n                 None => tcx.hir().span(variant_i_hir_id)\n             };\n-            let span = match v.node.disr_expr {\n+            let span = match v.disr_expr {\n                 Some(ref expr) => tcx.hir().span(expr.hir_id),\n                 None => v.span\n             };"}, {"sha": "b2c0e34d6fad7638dc19ad0c01629db0e7520cb8", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -1119,7 +1119,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn enum_variants(&self, enum_def: &hir::EnumDef) -> Vec<AdtVariant<'tcx>> {\n         enum_def.variants.iter()\n-            .map(|variant| self.non_enum_variant(&variant.node.data))\n+            .map(|variant| self.non_enum_variant(&variant.data))\n             .collect()\n     }\n "}, {"sha": "5ff64224c5aa04eaf3bcc3890416b6e0ba05b2ab", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -35,7 +35,6 @@ use rustc_target::spec::abi;\n use syntax::ast;\n use syntax::ast::{Ident, MetaItemKind};\n use syntax::attr::{InlineAttr, OptimizeAttr, list_contains_name, mark_used};\n-use syntax::source_map::Spanned;\n use syntax::feature_gate;\n use syntax::symbol::{InternedString, kw, Symbol, sym};\n use syntax_pos::{Span, DUMMY_SP};\n@@ -520,7 +519,11 @@ fn convert_variant_ctor(tcx: TyCtxt<'_>, ctor_id: hir::HirId) {\n     tcx.predicates_of(def_id);\n }\n \n-fn convert_enum_variant_types<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, variants: &[hir::Variant]) {\n+fn convert_enum_variant_types<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: DefId,\n+    variants: &[hir::Variant]\n+) {\n     let def = tcx.adt_def(def_id);\n     let repr_type = def.repr.discr_type();\n     let initial = repr_type.initial_discriminant(tcx);\n@@ -530,7 +533,7 @@ fn convert_enum_variant_types<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, variants:\n     for variant in variants {\n         let wrapped_discr = prev_discr.map_or(initial, |d| d.wrap_incr(tcx));\n         prev_discr = Some(\n-            if let Some(ref e) = variant.node.disr_expr {\n+            if let Some(ref e) = variant.disr_expr {\n                 let expr_did = tcx.hir().local_def_id(e.hir_id);\n                 def.eval_explicit_discr(tcx, expr_did)\n             } else if let Some(discr) = repr_type.disr_incr(tcx, prev_discr) {\n@@ -546,14 +549,14 @@ fn convert_enum_variant_types<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, variants:\n                     format!(\"overflowed on value after {}\", prev_discr.unwrap()),\n                 ).note(&format!(\n                     \"explicitly set `{} = {}` if that is desired outcome\",\n-                    variant.node.ident, wrapped_discr\n+                    variant.ident, wrapped_discr\n                 ))\n                 .emit();\n                 None\n             }.unwrap_or(wrapped_discr),\n         );\n \n-        for f in variant.node.data.fields() {\n+        for f in variant.data.fields() {\n             let def_id = tcx.hir().local_def_id(f.hir_id);\n             tcx.generics_of(def_id);\n             tcx.type_of(def_id);\n@@ -562,7 +565,7 @@ fn convert_enum_variant_types<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, variants:\n \n         // Convert the ctor, if any. This also registers the variant as\n         // an item.\n-        if let Some(ctor_hir_id) = variant.node.data.ctor_hir_id() {\n+        if let Some(ctor_hir_id) = variant.data.ctor_hir_id() {\n             convert_variant_ctor(tcx, ctor_hir_id);\n         }\n     }\n@@ -641,20 +644,20 @@ fn adt_def(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::AdtDef {\n             let variants = def.variants\n                 .iter()\n                 .map(|v| {\n-                    let variant_did = Some(tcx.hir().local_def_id(v.node.id));\n-                    let ctor_did = v.node.data.ctor_hir_id()\n+                    let variant_did = Some(tcx.hir().local_def_id(v.id));\n+                    let ctor_did = v.data.ctor_hir_id()\n                         .map(|hir_id| tcx.hir().local_def_id(hir_id));\n \n-                    let discr = if let Some(ref e) = v.node.disr_expr {\n+                    let discr = if let Some(ref e) = v.disr_expr {\n                         distance_from_explicit = 0;\n                         ty::VariantDiscr::Explicit(tcx.hir().local_def_id(e.hir_id))\n                     } else {\n                         ty::VariantDiscr::Relative(distance_from_explicit)\n                     };\n                     distance_from_explicit += 1;\n \n-                    convert_variant(tcx, variant_did, ctor_did, v.node.ident, discr,\n-                                    &v.node.data, AdtKind::Enum, def_id)\n+                    convert_variant(tcx, variant_did, ctor_did, v.ident, discr,\n+                                    &v.data, AdtKind::Enum, def_id)\n                 })\n                 .collect();\n \n@@ -1314,10 +1317,9 @@ pub fn checked_type_of(tcx: TyCtxt<'_>, def_id: DefId, fail: bool) -> Option<Ty<\n             ForeignItemKind::Type => tcx.mk_foreign(def_id),\n         },\n \n-        Node::Ctor(&ref def) | Node::Variant(&Spanned {\n-            node: hir::VariantKind { data: ref def, .. },\n-            ..\n-        }) => match *def {\n+        Node::Ctor(&ref def) | Node::Variant(\n+            hir::Variant { data: ref def, .. }\n+        ) => match *def {\n             VariantData::Unit(..) | VariantData::Struct(..) => {\n                 tcx.type_of(tcx.hir().get_parent_did(hir_id))\n             }\n@@ -1363,12 +1365,8 @@ pub fn checked_type_of(tcx: TyCtxt<'_>, def_id: DefId, fail: bool) -> Option<Ty<\n                     tcx.types.usize\n                 }\n \n-                Node::Variant(&Spanned {\n-                    node:\n-                        VariantKind {\n-                            disr_expr: Some(ref e),\n-                            ..\n-                        },\n+                Node::Variant(Variant {\n+                    disr_expr: Some(ref e),\n                     ..\n                 }) if e.hir_id == hir_id =>\n                 {\n@@ -1809,10 +1807,9 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n             compute_sig_of_foreign_fn_decl(tcx, def_id, fn_decl, abi)\n         }\n \n-        Ctor(data) | Variant(Spanned {\n-            node: hir::VariantKind { data, ..  },\n-            ..\n-        }) if data.ctor_hir_id().is_some() => {\n+        Ctor(data) | Variant(\n+            hir::Variant { data, ..  }\n+        ) if data.ctor_hir_id().is_some() => {\n             let ty = tcx.type_of(tcx.hir().get_parent_did(hir_id));\n             let inputs = data.fields()\n                 .iter()"}, {"sha": "7ed9d6606f646fed672be8e8ae60e0d6d3937f92", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -82,8 +82,8 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ConstraintContext<'a, 'tcx> {\n                 self.visit_node_helper(item.hir_id);\n \n                 for variant in &enum_def.variants {\n-                    if let hir::VariantData::Tuple(..) = variant.node.data {\n-                        self.visit_node_helper(variant.node.data.ctor_hir_id().unwrap());\n+                    if let hir::VariantData::Tuple(..) = variant.data {\n+                        self.visit_node_helper(variant.data.ctor_hir_id().unwrap());\n                     }\n                 }\n             }"}, {"sha": "e10837e52ad0407e76cb82405fea59d8963bd7ce", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -145,8 +145,8 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for TermsContext<'a, 'tcx> {\n                 self.add_inferreds_for_item(item.hir_id);\n \n                 for variant in &enum_def.variants {\n-                    if let hir::VariantData::Tuple(..) = variant.node.data {\n-                        self.add_inferreds_for_item(variant.node.data.ctor_hir_id().unwrap());\n+                    if let hir::VariantData::Tuple(..) = variant.data {\n+                        self.add_inferreds_for_item(variant.data.ctor_hir_id().unwrap());\n                     }\n                 }\n             }"}, {"sha": "83a8d3fc109994d008510c0538b670133b0dd72c", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -951,7 +951,7 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for HirCollector<'a, 'hir> {\n                      v: &'hir hir::Variant,\n                      g: &'hir hir::Generics,\n                      item_id: hir::HirId) {\n-        self.visit_testable(v.node.ident.to_string(), &v.node.attrs, |this| {\n+        self.visit_testable(v.ident.to_string(), &v.attrs, |this| {\n             intravisit::walk_variant(this, v, g, item_id);\n         });\n     }"}, {"sha": "903ed3aae147016e8173e54a798296fa2c639ebc", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -130,10 +130,10 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         Enum {\n             name,\n             variants: def.variants.iter().map(|v| Variant {\n-                name: v.node.ident.name,\n-                id: v.node.id,\n-                attrs: &v.node.attrs,\n-                def: &v.node.data,\n+                name: v.ident.name,\n+                id: v.id,\n+                attrs: &v.attrs,\n+                def: &v.data,\n                 whence: v.span,\n             }).collect(),\n             vis: &it.vis,"}, {"sha": "f0f090c8e897331bca82f2c901c344c612ec18bc", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -2041,7 +2041,7 @@ pub struct EnumDef {\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub struct Variant_ {\n+pub struct Variant {\n     /// Name of the variant.\n     pub ident: Ident,\n     /// Attributes of the variant.\n@@ -2052,10 +2052,10 @@ pub struct Variant_ {\n     pub data: VariantData,\n     /// Explicit discriminant, e.g., `Foo = 1`.\n     pub disr_expr: Option<AnonConst>,\n+    /// Span\n+    pub span: Span,\n }\n \n-pub type Variant = Spanned<Variant_>;\n-\n /// Part of `use` item to the right of its prefix.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum UseTreeKind {"}, {"sha": "70b1d3fc73b9a83356bc76961e2aa5328be5e952", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -712,7 +712,7 @@ macro_rules! derive_has_attrs {\n \n derive_has_attrs! {\n     Item, Expr, Local, ast::ForeignItem, ast::StructField, ast::ImplItem, ast::TraitItem, ast::Arm,\n-    ast::Field, ast::FieldPat, ast::Variant_, ast::Arg\n+    ast::Field, ast::FieldPat, ast::Variant, ast::Arg\n }\n \n pub fn inject(mut krate: ast::Crate, parse_sess: &ParseSess, attrs: &[String]) -> ast::Crate {"}, {"sha": "7eeea4e7bdfe191d92ea850bce252ac62cbbd69f", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -260,7 +260,7 @@ impl<'a> StripUnconfigured<'a> {\n             ast::ItemKind::Enum(ast::EnumDef { variants }, _generics) => {\n                 variants.flat_map_in_place(|variant| self.configure(variant));\n                 for variant in variants {\n-                    self.configure_variant_data(&mut variant.node.data);\n+                    self.configure_variant_data(&mut variant.data);\n                 }\n             }\n             _ => {}"}, {"sha": "f18cf86243ea3db3bb9fb223f0b72e8f2475851f", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -783,14 +783,14 @@ impl<'a> ExtCtxt<'a> {\n             ast::VariantData::Tuple(fields, ast::DUMMY_NODE_ID)\n         };\n \n-        respan(span,\n-               ast::Variant_ {\n-                   ident,\n-                   id: ast::DUMMY_NODE_ID,\n-                   attrs: Vec::new(),\n-                   data: vdata,\n-                   disr_expr: None,\n-               })\n+        ast::Variant {\n+            attrs: Vec::new(),\n+            data: vdata,\n+            disr_expr: None,\n+            id: ast::DUMMY_NODE_ID,\n+            ident,\n+            span,\n+        }\n     }\n \n     pub fn item_enum_poly(&self, span: Span, name: Ident,"}, {"sha": "8a56ae13b6f6ef22fecc9ebb316af8dd263de047", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -1956,7 +1956,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n \n             ast::ItemKind::Enum(ast::EnumDef{ref variants, ..}, ..) => {\n                 for variant in variants {\n-                    match (&variant.node.data, &variant.node.disr_expr) {\n+                    match (&variant.data, &variant.disr_expr) {\n                         (ast::VariantData::Unit(..), _) => {},\n                         (_, Some(disr_expr)) =>\n                             gate_feature_post!("}, {"sha": "82446989997852ad508ee46945ba5baabf7e08a0", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -456,7 +456,7 @@ pub fn noop_visit_foreign_mod<T: MutVisitor>(foreign_mod: &mut ForeignMod, vis:\n }\n \n pub fn noop_visit_variant<T: MutVisitor>(variant: &mut Variant, vis: &mut T) {\n-    let Spanned { node: Variant_ { ident, attrs, id, data, disr_expr }, span } = variant;\n+    let Variant { ident, attrs, id, data, disr_expr, span } = variant;\n     vis.visit_ident(ident);\n     visit_attrs(attrs, vis);\n     vis.visit_id(id);"}, {"sha": "1fbf28fb83016059d76952556e0510db3ad4feee", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -8,7 +8,6 @@ use crate::parse::parser::{BlockMode, PathStyle, SemiColonMode, TokenType, Token\n use crate::parse::token::{self, TokenKind};\n use crate::print::pprust;\n use crate::ptr::P;\n-use crate::source_map::Spanned;\n use crate::symbol::{kw, sym};\n use crate::ThinVec;\n use crate::util::parser::AssocOp;\n@@ -592,18 +591,18 @@ impl<'a> Parser<'a> {\n \n     crate fn maybe_report_invalid_custom_discriminants(\n         sess: &ParseSess,\n-        variants: &[Spanned<ast::Variant_>],\n+        variants: &[ast::Variant],\n     ) {\n-        let has_fields = variants.iter().any(|variant| match variant.node.data {\n+        let has_fields = variants.iter().any(|variant| match variant.data {\n             VariantData::Tuple(..) | VariantData::Struct(..) => true,\n             VariantData::Unit(..) => false,\n         });\n \n-        let discriminant_spans = variants.iter().filter(|variant| match variant.node.data {\n+        let discriminant_spans = variants.iter().filter(|variant| match variant.data {\n             VariantData::Tuple(..) | VariantData::Struct(..) => false,\n             VariantData::Unit(..) => true,\n         })\n-        .filter_map(|variant| variant.node.disr_expr.as_ref().map(|c| c.value.span))\n+        .filter_map(|variant| variant.disr_expr.as_ref().map(|c| c.value.span))\n         .collect::<Vec<_>>();\n \n         if !discriminant_spans.is_empty() && has_fields {\n@@ -618,7 +617,7 @@ impl<'a> Parser<'a> {\n                 err.span_label(sp, \"disallowed custom discriminant\");\n             }\n             for variant in variants.iter() {\n-                match &variant.node.data {\n+                match &variant.data {\n                     VariantData::Struct(..) => {\n                         err.span_label(\n                             variant.span,"}, {"sha": "60873ecb134684e47a6cdacf7c2b26b0457f5e0e", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -1564,14 +1564,15 @@ impl<'a> Parser<'a> {\n                 None\n             };\n \n-            let vr = ast::Variant_ {\n+            let vr = ast::Variant {\n                 ident,\n                 id: ast::DUMMY_NODE_ID,\n                 attrs: variant_attrs,\n                 data: struct_def,\n                 disr_expr,\n+                span: vlo.to(self.prev_span),\n             };\n-            variants.push(respan(vlo.to(self.prev_span), vr));\n+            variants.push(vr);\n \n             if !self.eat(&token::Comma) {\n                 if self.token.is_ident() && !self.token.is_reserved_ident() {"}, {"sha": "8b97ec3da0bc99caea82a31c5a429acb4bb83be4", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -1402,7 +1402,7 @@ impl<'a> State<'a> {\n         for v in variants {\n             self.space_if_not_bol();\n             self.maybe_print_comment(v.span.lo());\n-            self.print_outer_attributes(&v.node.attrs);\n+            self.print_outer_attributes(&v.attrs);\n             self.ibox(INDENT_UNIT);\n             self.print_variant(v);\n             self.s.word(\",\");\n@@ -1492,8 +1492,8 @@ impl<'a> State<'a> {\n     crate fn print_variant(&mut self, v: &ast::Variant) {\n         self.head(\"\");\n         let generics = ast::Generics::default();\n-        self.print_struct(&v.node.data, &generics, v.node.ident, v.span, false);\n-        match v.node.disr_expr {\n+        self.print_struct(&v.data, &generics, v.ident, v.span, false);\n+        match v.disr_expr {\n             Some(ref d) => {\n                 self.s.space();\n                 self.word_space(\"=\");"}, {"sha": "25214673e69355b8b6f04424fabb0a77946b8692", "filename": "src/libsyntax/print/pprust/tests.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax%2Fprint%2Fpprust%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax%2Fprint%2Fpprust%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust%2Ftests.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -54,14 +54,15 @@ fn test_variant_to_string() {\n     with_default_globals(|| {\n         let ident = ast::Ident::from_str(\"principal_skinner\");\n \n-        let var = source_map::respan(syntax_pos::DUMMY_SP, ast::Variant_ {\n+        let var = ast::Variant {\n             ident,\n             attrs: Vec::new(),\n             id: ast::DUMMY_NODE_ID,\n             // making this up as I go.... ?\n             data: ast::VariantData::Unit(ast::DUMMY_NODE_ID),\n             disr_expr: None,\n-        });\n+            span: syntax_pos::DUMMY_SP,\n+        };\n \n         let varstr = variant_to_string(&var);\n         assert_eq!(varstr, \"principal_skinner\");"}, {"sha": "41b8ef16665a4cdbf34a3baa4e1c84d44cf6e059", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -311,11 +311,11 @@ pub fn walk_variant<'a, V>(visitor: &mut V,\n                            item_id: NodeId)\n     where V: Visitor<'a>,\n {\n-    visitor.visit_ident(variant.node.ident);\n-    visitor.visit_variant_data(&variant.node.data, variant.node.ident,\n+    visitor.visit_ident(variant.ident);\n+    visitor.visit_variant_data(&variant.data, variant.ident,\n                              generics, item_id, variant.span);\n-    walk_list!(visitor, visit_anon_const, &variant.node.disr_expr);\n-    walk_list!(visitor, visit_attribute, &variant.node.attrs);\n+    walk_list!(visitor, visit_anon_const, &variant.disr_expr);\n+    walk_list!(visitor, visit_attribute, &variant.attrs);\n }\n \n pub fn walk_ty<'a, V: Visitor<'a>>(visitor: &mut V, typ: &'a Ty) {"}, {"sha": "d80da566185cc26a29a6ede703daa9fe557acd9c", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -138,7 +138,7 @@ fn cs_clone_shallow(name: &str,\n             }\n             StaticEnum(enum_def, ..) => {\n                 for variant in &enum_def.variants {\n-                    process_variant(cx, &mut stmts, &variant.node.data);\n+                    process_variant(cx, &mut stmts, &variant.data);\n                 }\n             }\n             _ => cx.span_bug(trait_span, &format!(\"unexpected substructure in \\\n@@ -170,9 +170,9 @@ fn cs_clone(name: &str,\n             vdata = vdata_;\n         }\n         EnumMatching(.., variant, ref af) => {\n-            ctor_path = cx.path(trait_span, vec![substr.type_ident, variant.node.ident]);\n+            ctor_path = cx.path(trait_span, vec![substr.type_ident, variant.ident]);\n             all_fields = af;\n-            vdata = &variant.node.data;\n+            vdata = &variant.data;\n         }\n         EnumNonMatchingCollapsed(..) => {\n             cx.span_bug(trait_span,"}, {"sha": "5d7c4a84389c61c773d6bed68806de3cb85a9a59", "filename": "src/libsyntax_ext/deriving/cmp/eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -75,7 +75,7 @@ fn cs_total_eq_assert(cx: &mut ExtCtxt<'_>,\n         }\n         StaticEnum(enum_def, ..) => {\n             for variant in &enum_def.variants {\n-                process_variant(cx, &mut stmts, &variant.node.data);\n+                process_variant(cx, &mut stmts, &variant.data);\n             }\n         }\n         _ => cx.span_bug(trait_span, \"unexpected substructure in `derive(Eq)`\")"}, {"sha": "15e93f2843a12c36eafd28c37ef2a933d29cade0", "filename": "src/libsyntax_ext/deriving/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -53,7 +53,7 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n     // based on the \"shape\".\n     let (ident, vdata, fields) = match substr.fields {\n         Struct(vdata, fields) => (substr.type_ident, *vdata, fields),\n-        EnumMatching(_, _, v, fields) => (v.node.ident, &v.node.data, fields),\n+        EnumMatching(_, _, v, fields) => (v.ident, &v.data, fields),\n         EnumNonMatchingCollapsed(..) |\n         StaticStruct(..) |\n         StaticEnum(..) => cx.span_bug(span, \"nonsensical .fields in `#[derive(Debug)]`\"),"}, {"sha": "52e74a7c57e8ca26bed7c06ef98c420a9b595e70", "filename": "src/libsyntax_ext/deriving/encodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -238,7 +238,7 @@ fn encodable_substructure(cx: &mut ExtCtxt<'_>,\n             }\n \n             let blk = cx.lambda_stmts_1(trait_span, stmts, blkarg);\n-            let name = cx.expr_str(trait_span, variant.node.ident.name);\n+            let name = cx.expr_str(trait_span, variant.ident.name);\n             let call = cx.expr_method_call(trait_span,\n                                            blkencoder,\n                                            cx.ident_of(\"emit_enum_variant\"),"}, {"sha": "a454593bc6575e34a05b3900a6e9d0e4f23e0697", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad44d427508293fd572a61c790d55e7e41ac3f37/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=ad44d427508293fd572a61c790d55e7e41ac3f37", "patch": "@@ -758,7 +758,7 @@ impl<'a> TraitDef<'a> {\n         let mut field_tys = Vec::new();\n \n         for variant in &enum_def.variants {\n-            field_tys.extend(variant.node\n+            field_tys.extend(variant\n                 .data\n                 .fields()\n                 .iter()\n@@ -1220,7 +1220,7 @@ impl<'a> MethodDef<'a> {\n         let catch_all_substructure =\n             EnumNonMatchingCollapsed(self_arg_idents, &variants[..], &vi_idents[..]);\n \n-        let first_fieldless = variants.iter().find(|v| v.node.data.fields().is_empty());\n+        let first_fieldless = variants.iter().find(|v| v.data.fields().is_empty());\n \n         // These arms are of the form:\n         // (Variant1, Variant1, ...) => Body1\n@@ -1229,7 +1229,7 @@ impl<'a> MethodDef<'a> {\n         // where each tuple has length = self_args.len()\n         let mut match_arms: Vec<ast::Arm> = variants.iter()\n             .enumerate()\n-            .filter(|&(_, v)| !(self.unify_fieldless_variants && v.node.data.fields().is_empty()))\n+            .filter(|&(_, v)| !(self.unify_fieldless_variants && v.data.fields().is_empty()))\n             .map(|(index, variant)| {\n                 let mk_self_pat = |cx: &mut ExtCtxt<'_>, self_arg_name: &str| {\n                     let (p, idents) = trait_.create_enum_variant_pattern(cx,\n@@ -1513,8 +1513,8 @@ impl<'a> MethodDef<'a> {\n             .iter()\n             .map(|v| {\n                 let sp = v.span.with_ctxt(trait_.span.ctxt());\n-                let summary = trait_.summarise_struct(cx, &v.node.data);\n-                (v.node.ident, sp, summary)\n+                let summary = trait_.summarise_struct(cx, &v.data);\n+                (v.ident, sp, summary)\n             })\n             .collect();\n         self.call_substructure_method(cx,\n@@ -1644,9 +1644,9 @@ impl<'a> TraitDef<'a> {\n          mutbl: ast::Mutability)\n          -> (P<ast::Pat>, Vec<(Span, Option<Ident>, P<Expr>, &'a [ast::Attribute])>) {\n         let sp = variant.span.with_ctxt(self.span.ctxt());\n-        let variant_path = cx.path(sp, vec![enum_ident, variant.node.ident]);\n+        let variant_path = cx.path(sp, vec![enum_ident, variant.ident]);\n         let use_temporaries = false; // enums can't be repr(packed)\n-        self.create_struct_pattern(cx, variant_path, &variant.node.data, prefix, mutbl,\n+        self.create_struct_pattern(cx, variant_path, &variant.data, prefix, mutbl,\n                                    use_temporaries)\n     }\n }\n@@ -1777,7 +1777,7 @@ pub fn is_type_without_fields(item: &Annotatable) -> bool {\n     if let Annotatable::Item(ref item) = *item {\n         match item.node {\n             ast::ItemKind::Enum(ref enum_def, _) => {\n-                enum_def.variants.iter().all(|v| v.node.data.fields().is_empty())\n+                enum_def.variants.iter().all(|v| v.data.fields().is_empty())\n             }\n             ast::ItemKind::Struct(ref variant_data, _) => variant_data.fields().is_empty(),\n             _ => false,"}]}