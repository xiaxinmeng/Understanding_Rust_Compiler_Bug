{"sha": "4cea01fdf8dc0a647007bde3010f9fbe607f1e75", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZWEwMWZkZjhkYzBhNjQ3MDA3YmRlMzAxMGY5ZmJlNjA3ZjFlNzU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-09T16:39:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-09T16:39:19Z"}, "message": "Merge #3917\n\n3917: Improve tt::Subtree debug print r=matklad a=edwin0cheng\n\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "00131813e07ededa5c3fa3758b4384bd2ec8e3d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00131813e07ededa5c3fa3758b4384bd2ec8e3d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cea01fdf8dc0a647007bde3010f9fbe607f1e75", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJej0+3CRBK7hj4Ov3rIwAAdHIIAKI3oo7/gtK0DSt1SQb7hb6a\nipl5lbhzrLR0xK1bN03cw0l6/esBW8bUUSqI+fNgM+CqT3iWuco2LIFkbt/+Hghc\n9nVfYcdYMdfXzPOepDt+zn3jEU02bTWn7lxY12hnbd7oSPuBTPpf5aSFqtsGQ7Ai\nbhR9mWufK+718F3RhW3JmS67Kh3FM5TE/VzzDW2pDyMnT7ac/nQDmntG39/e/TsZ\niFHdFaCRz4sQ/QG612ueHia9tFq3kmwRxlu6LoXtHUn1vW9Q99JAFqOyma3QbvsQ\nVzE6Wv8oAOKHCK3CQCDKF6cq/gHaXn/473+LdSJ/2LEUp9fB6JgeD63TaWWWeJI=\n=ou91\n-----END PGP SIGNATURE-----\n", "payload": "tree 00131813e07ededa5c3fa3758b4384bd2ec8e3d0\nparent 30f0ad159a0f260f54356385de63c171722adb72\nparent 19d952c603344d853567aeac42dcfa6fe40ba04b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1586450359 +0000\ncommitter GitHub <noreply@github.com> 1586450359 +0000\n\nMerge #3917\n\n3917: Improve tt::Subtree debug print r=matklad a=edwin0cheng\n\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cea01fdf8dc0a647007bde3010f9fbe607f1e75", "html_url": "https://github.com/rust-lang/rust/commit/4cea01fdf8dc0a647007bde3010f9fbe607f1e75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cea01fdf8dc0a647007bde3010f9fbe607f1e75/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30f0ad159a0f260f54356385de63c171722adb72", "url": "https://api.github.com/repos/rust-lang/rust/commits/30f0ad159a0f260f54356385de63c171722adb72", "html_url": "https://github.com/rust-lang/rust/commit/30f0ad159a0f260f54356385de63c171722adb72"}, {"sha": "19d952c603344d853567aeac42dcfa6fe40ba04b", "url": "https://api.github.com/repos/rust-lang/rust/commits/19d952c603344d853567aeac42dcfa6fe40ba04b", "html_url": "https://github.com/rust-lang/rust/commit/19d952c603344d853567aeac42dcfa6fe40ba04b"}], "stats": {"total": 138, "additions": 136, "deletions": 2}, "files": [{"sha": "219bc20978e5c66c79c156bf3591c248beacc2ae", "filename": "crates/ra_hir_expand/src/quote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cea01fdf8dc0a647007bde3010f9fbe607f1e75/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cea01fdf8dc0a647007bde3010f9fbe607f1e75/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs?ref=4cea01fdf8dc0a647007bde3010f9fbe607f1e75", "patch": "@@ -232,7 +232,7 @@ mod tests {\n         let quoted = quote!(#a);\n         assert_eq!(quoted.to_string(), \"hello\");\n         let t = format!(\"{:?}\", quoted);\n-        assert_eq!(t, \"Subtree { delimiter: None, token_trees: [Leaf(Ident(Ident { text: \\\"hello\\\", id: TokenId(4294967295) }))] }\");\n+        assert_eq!(t, \"SUBTREE $\\n  IDENT   hello 4294967295\");\n     }\n \n     #[test]"}, {"sha": "1ef6f6eedd3cc11b8674c8b4eca787c675285c99", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/4cea01fdf8dc0a647007bde3010f9fbe607f1e75/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cea01fdf8dc0a647007bde3010f9fbe607f1e75/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=4cea01fdf8dc0a647007bde3010f9fbe607f1e75", "patch": "@@ -141,6 +141,79 @@ macro_rules! impl_froms {\n         );\n }\n \n+#[test]\n+fn test_convert_tt2() {\n+    parse_macro(\n+        r#\"\n+macro_rules! impl_froms {\n+    ($e:ident: $($v:ident),*) => {\n+        $(\n+            impl From<$v> for $e {\n+                fn from(it: $v) -> $e {\n+                    $e::$v(it)\n+                }\n+            }\n+        )*\n+    }\n+}\n+\"#,\n+    )\n+    .assert_expand(\n+        \"impl_froms!(TokenTree: Leaf, Subtree);\",\n+        r#\"\n+SUBTREE $\n+  IDENT   impl 20\n+  IDENT   From 21\n+  PUNCH   < [joint] 22\n+  IDENT   Leaf 53\n+  PUNCH   > [alone] 25\n+  IDENT   for 26\n+  IDENT   TokenTree 51\n+  SUBTREE {} 29\n+    IDENT   fn 30\n+    IDENT   from 31\n+    SUBTREE () 32\n+      IDENT   it 33\n+      PUNCH   : [alone] 34\n+      IDENT   Leaf 53\n+    PUNCH   - [joint] 37\n+    PUNCH   > [alone] 38\n+    IDENT   TokenTree 51\n+    SUBTREE {} 41\n+      IDENT   TokenTree 51\n+      PUNCH   : [joint] 44\n+      PUNCH   : [joint] 45\n+      IDENT   Leaf 53\n+      SUBTREE () 48\n+        IDENT   it 49\n+  IDENT   impl 20\n+  IDENT   From 21\n+  PUNCH   < [joint] 22\n+  IDENT   Subtree 55\n+  PUNCH   > [alone] 25\n+  IDENT   for 26\n+  IDENT   TokenTree 51\n+  SUBTREE {} 29\n+    IDENT   fn 30\n+    IDENT   from 31\n+    SUBTREE () 32\n+      IDENT   it 33\n+      PUNCH   : [alone] 34\n+      IDENT   Subtree 55\n+    PUNCH   - [joint] 37\n+    PUNCH   > [alone] 38\n+    IDENT   TokenTree 51\n+    SUBTREE {} 41\n+      IDENT   TokenTree 51\n+      PUNCH   : [joint] 44\n+      PUNCH   : [joint] 45\n+      IDENT   Subtree 55\n+      SUBTREE () 48\n+        IDENT   it 49\n+\"#,\n+    );\n+}\n+\n #[test]\n fn test_expr_order() {\n     let expanded = parse_macro(\n@@ -1479,6 +1552,12 @@ impl MacroFixture {\n         assert_eq!(expansion.to_string(), expected);\n     }\n \n+    fn assert_expand(&self, invocation: &str, expected: &str) {\n+        let expansion = self.expand_tt(invocation);\n+        let actual = format!(\"{:?}\", expansion);\n+        test_utils::assert_eq_text!(&actual.trim(), &expected.trim());\n+    }\n+\n     fn assert_expand_items(&self, invocation: &str, expected: &str) -> &MacroFixture {\n         self.assert_expansion(FragmentKind::Items, invocation, expected);\n         self"}, {"sha": "5248e026c5200e4613de3d5affaffff7c228d678", "filename": "crates/ra_tt/src/lib.rs", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/4cea01fdf8dc0a647007bde3010f9fbe607f1e75/crates%2Fra_tt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cea01fdf8dc0a647007bde3010f9fbe607f1e75/crates%2Fra_tt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tt%2Fsrc%2Flib.rs?ref=4cea01fdf8dc0a647007bde3010f9fbe607f1e75", "patch": "@@ -57,7 +57,7 @@ pub enum Leaf {\n }\n impl_froms!(Leaf: Literal, Punct, Ident);\n \n-#[derive(Debug, Clone, PartialEq, Eq, Hash, Default)]\n+#[derive(Clone, PartialEq, Eq, Hash, Default)]\n pub struct Subtree {\n     pub delimiter: Option<Delimiter>,\n     pub token_trees: Vec<TokenTree>,\n@@ -101,6 +101,61 @@ pub struct Ident {\n     pub id: TokenId,\n }\n \n+fn print_debug_subtree(f: &mut fmt::Formatter<'_>, subtree: &Subtree, level: usize) -> fmt::Result {\n+    let align = std::iter::repeat(\"  \").take(level).collect::<String>();\n+\n+    let aux = match subtree.delimiter.map(|it| (it.kind, it.id.0)) {\n+        None => \"$\".to_string(),\n+        Some((DelimiterKind::Parenthesis, id)) => format!(\"() {}\", id),\n+        Some((DelimiterKind::Brace, id)) => format!(\"{{}} {}\", id),\n+        Some((DelimiterKind::Bracket, id)) => format!(\"[] {}\", id),\n+    };\n+\n+    if subtree.token_trees.is_empty() {\n+        write!(f, \"{}SUBTREE {}\", align, aux)?;\n+    } else {\n+        writeln!(f, \"{}SUBTREE {}\", align, aux)?;\n+        for (idx, child) in subtree.token_trees.iter().enumerate() {\n+            print_debug_token(f, child, level + 1)?;\n+            if idx != subtree.token_trees.len() - 1 {\n+                writeln!(f, \"\")?;\n+            }\n+        }\n+    }\n+\n+    Ok(())\n+}\n+\n+fn print_debug_token(f: &mut fmt::Formatter<'_>, tkn: &TokenTree, level: usize) -> fmt::Result {\n+    let align = std::iter::repeat(\"  \").take(level).collect::<String>();\n+\n+    match tkn {\n+        TokenTree::Leaf(leaf) => match leaf {\n+            Leaf::Literal(lit) => write!(f, \"{}LITERAL {} {}\", align, lit.text, lit.id.0)?,\n+            Leaf::Punct(punct) => write!(\n+                f,\n+                \"{}PUNCH   {} [{}] {}\",\n+                align,\n+                punct.char,\n+                if punct.spacing == Spacing::Alone { \"alone\" } else { \"joint\" },\n+                punct.id.0\n+            )?,\n+            Leaf::Ident(ident) => write!(f, \"{}IDENT   {} {}\", align, ident.text, ident.id.0)?,\n+        },\n+        TokenTree::Subtree(subtree) => {\n+            print_debug_subtree(f, subtree, level)?;\n+        }\n+    }\n+\n+    Ok(())\n+}\n+\n+impl Debug for Subtree {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        print_debug_subtree(f, self, 0)\n+    }\n+}\n+\n impl fmt::Display for TokenTree {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self {"}]}