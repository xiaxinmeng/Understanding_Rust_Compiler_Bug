{"sha": "6cb33a089fc4727bc070899f57aab3be1b215785", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjYjMzYTA4OWZjNDcyN2JjMDcwODk5ZjU3YWFiM2JlMWIyMTU3ODU=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-17T08:16:32Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-17T08:16:32Z"}, "message": "Cleanup formatting.", "tree": {"sha": "085106c67799e32d2079e0197c2ace5a3010abce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/085106c67799e32d2079e0197c2ace5a3010abce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cb33a089fc4727bc070899f57aab3be1b215785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cb33a089fc4727bc070899f57aab3be1b215785", "html_url": "https://github.com/rust-lang/rust/commit/6cb33a089fc4727bc070899f57aab3be1b215785", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cb33a089fc4727bc070899f57aab3be1b215785/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8722f3fe138804dc2cef4764405a17f0f759808", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8722f3fe138804dc2cef4764405a17f0f759808", "html_url": "https://github.com/rust-lang/rust/commit/d8722f3fe138804dc2cef4764405a17f0f759808"}], "stats": {"total": 51, "additions": 28, "deletions": 23}, "files": [{"sha": "627c72ff8c92572c9169f57423c7eca9387c4fbc", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6cb33a089fc4727bc070899f57aab3be1b215785/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb33a089fc4727bc070899f57aab3be1b215785/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=6cb33a089fc4727bc070899f57aab3be1b215785", "patch": "@@ -362,9 +362,11 @@ impl<'b> Resolver<'b> {\n \n     // Constructs the reduced graph for one variant. Variants exist in the\n     // type and value namespaces.\n-    fn build_reduced_graph_for_variant(\n-        &mut self, variant: &Variant, parent: Module<'b>, vis: ty::Visibility, expansion: Mark,\n-    ) {\n+    fn build_reduced_graph_for_variant(&mut self,\n+                                       variant: &Variant,\n+                                       parent: Module<'b>,\n+                                       vis: ty::Visibility,\n+                                       expansion: Mark) {\n         let name = variant.node.name.name;\n         let def_id = self.definitions.local_def_id(variant.node.data.id());\n \n@@ -381,22 +383,20 @@ impl<'b> Resolver<'b> {\n     }\n \n     /// Constructs the reduced graph for one foreign item.\n-    fn build_reduced_graph_for_foreign_item(\n-        &mut self, foreign_item: &ForeignItem, expansion: Mark,\n-    ) {\n+    fn build_reduced_graph_for_foreign_item(&mut self, item: &ForeignItem, expansion: Mark) {\n         let parent = self.current_module;\n-        let name = foreign_item.ident.name;\n+        let name = item.ident.name;\n \n-        let def = match foreign_item.node {\n+        let def = match item.node {\n             ForeignItemKind::Fn(..) => {\n-                Def::Fn(self.definitions.local_def_id(foreign_item.id))\n+                Def::Fn(self.definitions.local_def_id(item.id))\n             }\n             ForeignItemKind::Static(_, m) => {\n-                Def::Static(self.definitions.local_def_id(foreign_item.id), m)\n+                Def::Static(self.definitions.local_def_id(item.id), m)\n             }\n         };\n-        let vis = self.resolve_visibility(&foreign_item.vis);\n-        self.define(parent, name, ValueNS, (def, vis, foreign_item.span, expansion));\n+        let vis = self.resolve_visibility(&item.vis);\n+        self.define(parent, name, ValueNS, (def, vis, item.span, expansion));\n     }\n \n     fn build_reduced_graph_for_block(&mut self, block: &Block) {\n@@ -415,8 +415,7 @@ impl<'b> Resolver<'b> {\n     }\n \n     /// Builds the reduced graph for a single item in an external crate.\n-    fn build_reduced_graph_for_external_crate_def(&mut self, parent: Module<'b>,\n-                                                  child: Export) {\n+    fn build_reduced_graph_for_external_crate_def(&mut self, parent: Module<'b>, child: Export) {\n         let name = child.name;\n         let def = child.def;\n         let def_id = def.def_id();\n@@ -545,9 +544,11 @@ impl<'b> Resolver<'b> {\n         module.populated.set(true)\n     }\n \n-    fn legacy_import_macro(\n-        &mut self, name: Name, binding: &'b NameBinding<'b>, span: Span, allow_shadowing: bool,\n-    ) {\n+    fn legacy_import_macro(&mut self,\n+                           name: Name,\n+                           binding: &'b NameBinding<'b>,\n+                           span: Span,\n+                           allow_shadowing: bool) {\n         self.used_crates.insert(binding.def().def_id().krate);\n         self.macro_names.insert(name);\n         if self.builtin_macros.insert(name, binding).is_some() && !allow_shadowing {"}, {"sha": "524d491a464e2525e178cb531e830edd5befa535", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6cb33a089fc4727bc070899f57aab3be1b215785/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cb33a089fc4727bc070899f57aab3be1b215785/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=6cb33a089fc4727bc070899f57aab3be1b215785", "patch": "@@ -262,9 +262,11 @@ impl<'a> base::Resolver for Resolver<'a> {\n \n impl<'a> Resolver<'a> {\n     // Resolve the name in the module's lexical scope, excluding non-items.\n-    fn resolve_in_item_lexical_scope(\n-        &mut self, name: Name, ns: Namespace, record_used: Option<Span>,\n-    ) -> Option<&'a NameBinding<'a>> {\n+    fn resolve_in_item_lexical_scope(&mut self,\n+                                     name: Name,\n+                                     ns: Namespace,\n+                                     record_used: Option<Span>)\n+                                     -> Option<&'a NameBinding<'a>> {\n         let mut module = self.current_module;\n         let mut potential_expanded_shadower = None;\n         loop {\n@@ -298,9 +300,11 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    pub fn resolve_legacy_scope(\n-        &mut self, mut scope: LegacyScope<'a>, name: ast::Name, record_used: bool,\n-    ) -> Option<MacroBinding<'a>> {\n+    pub fn resolve_legacy_scope(&mut self,\n+                                mut scope: LegacyScope<'a>,\n+                                name: Name,\n+                                record_used: bool)\n+                                -> Option<MacroBinding<'a>> {\n         let mut possible_time_travel = None;\n         let mut relative_depth: u32 = 0;\n         let mut binding = None;"}]}