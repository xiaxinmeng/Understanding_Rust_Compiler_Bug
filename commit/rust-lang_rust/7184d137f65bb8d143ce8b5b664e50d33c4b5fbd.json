{"sha": "7184d137f65bb8d143ce8b5b664e50d33c4b5fbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxODRkMTM3ZjY1YmI4ZDE0M2NlOGI1YjY2NGU1MGQzM2M0YjVmYmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-02T10:13:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-02T10:13:57Z"}, "message": "Auto merge of #71795 - RalfJung:rollup-yqxfi5a, r=RalfJung\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #71712 (Miri: port error backtraces to std::backtrace)\n - #71736 (bootstrap: also apply unused-attributes hack without deny_warnings)\n - #71738 (remove AllocId generalization of Pointer)\n - #71739 (remove obsolete comment)\n - #71781 (Uncomment test code for failure to use `Box::pin`)\n - #71782 (Use a non-existent test path instead of clobbering /dev/null)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "1439159b957c88e57d5773c16bc82fca38be08cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1439159b957c88e57d5773c16bc82fca38be08cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd", "html_url": "https://github.com/rust-lang/rust/commit/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08dfbfb61871a83f720c6e97a3b737076e89fe3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/08dfbfb61871a83f720c6e97a3b737076e89fe3e", "html_url": "https://github.com/rust-lang/rust/commit/08dfbfb61871a83f720c6e97a3b737076e89fe3e"}, {"sha": "2ee49eb7382856f25c3a4f5c708d0725d3494392", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ee49eb7382856f25c3a4f5c708d0725d3494392", "html_url": "https://github.com/rust-lang/rust/commit/2ee49eb7382856f25c3a4f5c708d0725d3494392"}], "stats": {"total": 235, "additions": 154, "deletions": 81}, "files": [{"sha": "8bd1e5f3308b443f69267f5129e991ba06281e7f", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7184d137f65bb8d143ce8b5b664e50d33c4b5fbd", "patch": "@@ -3978,7 +3978,6 @@ name = \"rustc_middle\"\n version = \"0.0.0\"\n dependencies = [\n  \"arena\",\n- \"backtrace\",\n  \"bitflags\",\n  \"byteorder\",\n  \"log\","}, {"sha": "c0018c613ba5cb0923baeb8e6333148fb633e4f0", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=7184d137f65bb8d143ce8b5b664e50d33c4b5fbd", "patch": "@@ -1088,13 +1088,13 @@ impl<'a> Builder<'a> {\n \n             if self.config.deny_warnings {\n                 rustflags.arg(\"-Dwarnings\");\n+            }\n \n-                // FIXME(#58633) hide \"unused attribute\" errors in incremental\n-                // builds of the standard library, as the underlying checks are\n-                // not yet properly integrated with incremental recompilation.\n-                if mode == Mode::Std && compiler.stage == 0 && self.config.incremental {\n-                    rustflags.arg(\"-Aunused-attributes\");\n-                }\n+            // FIXME(#58633) hide \"unused attribute\" errors in incremental\n+            // builds of the standard library, as the underlying checks are\n+            // not yet properly integrated with incremental recompilation.\n+            if mode == Mode::Std && compiler.stage == 0 && self.config.incremental {\n+                rustflags.arg(\"-Aunused-attributes\");\n             }\n         }\n "}, {"sha": "398ba4d72d44901ea2213c88aa4b2b39d6053ec8", "filename": "src/librustc_middle/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src%2Flibrustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src%2Flibrustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2FCargo.toml?ref=7184d137f65bb8d143ce8b5b664e50d33c4b5fbd", "patch": "@@ -30,7 +30,6 @@ rustc_index = { path = \"../librustc_index\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }\n-backtrace = \"0.3.40\"\n byteorder = { version = \"1.3\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n measureme = \"0.7.1\""}, {"sha": "9b38b43c93ae21c9e9fb71c936253a17de093357", "filename": "src/librustc_middle/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src%2Flibrustc_middle%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src%2Flibrustc_middle%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Flib.rs?ref=7184d137f65bb8d143ce8b5b664e50d33c4b5fbd", "patch": "@@ -23,6 +23,7 @@\n //! This API is completely unstable and subject to change.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![feature(backtrace)]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]"}, {"sha": "4b88467ac110ff95614e1202f8ecdcf2c87d7321", "filename": "src/librustc_middle/mir/interpret/error.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs?ref=7184d137f65bb8d143ce8b5b664e50d33c4b5fbd", "patch": "@@ -6,7 +6,6 @@ use crate::ty::query::TyCtxtAt;\n use crate::ty::tls;\n use crate::ty::{self, layout, Ty};\n \n-use backtrace::Backtrace;\n use rustc_data_structures::sync::Lock;\n use rustc_errors::{struct_span_err, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n@@ -15,7 +14,7 @@ use rustc_macros::HashStable;\n use rustc_session::CtfeBacktrace;\n use rustc_span::{def_id::DefId, Pos, Span};\n use rustc_target::abi::{Align, Size};\n-use std::{any::Any, fmt, mem};\n+use std::{any::Any, backtrace::Backtrace, fmt, mem};\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, HashStable, RustcEncodable, RustcDecodable)]\n pub enum ErrorHandled {\n@@ -219,16 +218,15 @@ impl fmt::Display for InterpErrorInfo<'_> {\n }\n \n impl InterpErrorInfo<'_> {\n-    pub fn print_backtrace(&mut self) {\n-        if let Some(ref mut backtrace) = self.backtrace {\n-            print_backtrace(&mut *backtrace);\n+    pub fn print_backtrace(&self) {\n+        if let Some(backtrace) = self.backtrace.as_ref() {\n+            print_backtrace(backtrace);\n         }\n     }\n }\n \n-fn print_backtrace(backtrace: &mut Backtrace) {\n-    backtrace.resolve();\n-    eprintln!(\"\\n\\nAn error occurred in miri:\\n{:?}\", backtrace);\n+fn print_backtrace(backtrace: &Backtrace) {\n+    eprintln!(\"\\n\\nAn error occurred in miri:\\n{}\", backtrace);\n }\n \n impl From<ErrorHandled> for InterpErrorInfo<'_> {\n@@ -255,11 +253,11 @@ impl<'tcx> From<InterpError<'tcx>> for InterpErrorInfo<'tcx> {\n \n         let backtrace = match capture_backtrace {\n             CtfeBacktrace::Disabled => None,\n-            CtfeBacktrace::Capture => Some(Box::new(Backtrace::new_unresolved())),\n+            CtfeBacktrace::Capture => Some(Box::new(Backtrace::force_capture())),\n             CtfeBacktrace::Immediate => {\n                 // Print it now.\n-                let mut backtrace = Backtrace::new_unresolved();\n-                print_backtrace(&mut backtrace);\n+                let backtrace = Backtrace::force_capture();\n+                print_backtrace(&backtrace);\n                 None\n             }\n         };"}, {"sha": "0b06005649979c9f3a04bd4fdadce852c1032c39", "filename": "src/librustc_middle/mir/interpret/pointer.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fpointer.rs?ref=7184d137f65bb8d143ce8b5b664e50d33c4b5fbd", "patch": "@@ -75,18 +75,14 @@ pub trait PointerArithmetic: HasDataLayout {\n \n impl<T: HasDataLayout> PointerArithmetic for T {}\n \n-/// `Pointer` is generic over the type that represents a reference to `Allocation`s,\n-/// thus making it possible for the most convenient representation to be used in\n-/// each context.\n+/// Represents a pointer in the Miri engine.\n ///\n-/// Defaults to the index based and loosely coupled `AllocId`.\n-///\n-/// `Pointer` is also generic over the `Tag` associated with each pointer,\n+/// `Pointer` is generic over the `Tag` associated with each pointer,\n /// which is used to do provenance tracking during execution.\n #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, RustcEncodable, RustcDecodable, Hash)]\n #[derive(HashStable)]\n-pub struct Pointer<Tag = (), Id = AllocId> {\n-    pub alloc_id: Id,\n+pub struct Pointer<Tag = ()> {\n+    pub alloc_id: AllocId,\n     pub offset: Size,\n     pub tag: Tag,\n }\n@@ -97,7 +93,7 @@ static_assert_size!(Pointer, 16);\n // all the Miri types.\n // We have to use `Debug` output for the tag, because `()` does not implement\n // `Display` so we cannot specialize that.\n-impl<Tag: fmt::Debug, Id: fmt::Debug> fmt::Debug for Pointer<Tag, Id> {\n+impl<Tag: fmt::Debug> fmt::Debug for Pointer<Tag> {\n     default fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         if f.alternate() {\n             write!(f, \"{:#?}+0x{:x}[{:?}]\", self.alloc_id, self.offset.bytes(), self.tag)\n@@ -107,7 +103,7 @@ impl<Tag: fmt::Debug, Id: fmt::Debug> fmt::Debug for Pointer<Tag, Id> {\n     }\n }\n // Specialization for no tag\n-impl<Id: fmt::Debug> fmt::Debug for Pointer<(), Id> {\n+impl fmt::Debug for Pointer<()> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         if f.alternate() {\n             write!(f, \"{:#?}+0x{:x}\", self.alloc_id, self.offset.bytes())"}, {"sha": "ed779d52fb50c96a69c3ccda663ae91fa31ea904", "filename": "src/librustc_middle/mir/interpret/value.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fvalue.rs?ref=7184d137f65bb8d143ce8b5b664e50d33c4b5fbd", "patch": "@@ -89,7 +89,7 @@ impl<'tcx> ConstValue<'tcx> {\n /// of a simple value or a pointer into another `Allocation`\n #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd, RustcEncodable, RustcDecodable, Hash)]\n #[derive(HashStable)]\n-pub enum Scalar<Tag = (), Id = AllocId> {\n+pub enum Scalar<Tag = ()> {\n     /// The raw bytes of a simple value.\n     Raw {\n         /// The first `size` bytes of `data` are the value.\n@@ -101,15 +101,15 @@ pub enum Scalar<Tag = (), Id = AllocId> {\n     /// A pointer into an `Allocation`. An `Allocation` in the `memory` module has a list of\n     /// relocations, but a `Scalar` is only large enough to contain one, so we just represent the\n     /// relocation and its associated offset together as a `Pointer` here.\n-    Ptr(Pointer<Tag, Id>),\n+    Ptr(Pointer<Tag>),\n }\n \n #[cfg(target_arch = \"x86_64\")]\n static_assert_size!(Scalar, 24);\n \n // We want the `Debug` output to be readable as it is used by `derive(Debug)` for\n // all the Miri types.\n-impl<Tag: fmt::Debug, Id: fmt::Debug> fmt::Debug for Scalar<Tag, Id> {\n+impl<Tag: fmt::Debug> fmt::Debug for Scalar<Tag> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             Scalar::Ptr(ptr) => write!(f, \"{:?}\", ptr),\n@@ -542,8 +542,8 @@ impl<Tag> From<Pointer<Tag>> for Scalar<Tag> {\n }\n \n #[derive(Clone, Copy, Eq, PartialEq, RustcEncodable, RustcDecodable, HashStable, Hash)]\n-pub enum ScalarMaybeUndef<Tag = (), Id = AllocId> {\n-    Scalar(Scalar<Tag, Id>),\n+pub enum ScalarMaybeUndef<Tag = ()> {\n+    Scalar(Scalar<Tag>),\n     Undef,\n }\n \n@@ -563,7 +563,7 @@ impl<Tag> From<Pointer<Tag>> for ScalarMaybeUndef<Tag> {\n \n // We want the `Debug` output to be readable as it is used by `derive(Debug)` for\n // all the Miri types.\n-impl<Tag: fmt::Debug, Id: fmt::Debug> fmt::Debug for ScalarMaybeUndef<Tag, Id> {\n+impl<Tag: fmt::Debug> fmt::Debug for ScalarMaybeUndef<Tag> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n             ScalarMaybeUndef::Undef => write!(f, \"<uninitialized>\"),"}, {"sha": "b165a69433db1377179d654b7b836c0c4f6e380f", "filename": "src/librustc_mir/const_eval/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src%2Flibrustc_mir%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src%2Flibrustc_mir%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Ferror.rs?ref=7184d137f65bb8d143ce8b5b664e50d33c4b5fbd", "patch": "@@ -52,7 +52,7 @@ impl Error for ConstEvalErrKind {}\n /// Should be called only if the error is actually going to to be reported!\n pub fn error_to_const_error<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>>(\n     ecx: &InterpCx<'mir, 'tcx, M>,\n-    mut error: InterpErrorInfo<'tcx>,\n+    error: InterpErrorInfo<'tcx>,\n ) -> ConstEvalErr<'tcx> {\n     error.print_backtrace();\n     let stacktrace = ecx.generate_stacktrace();"}, {"sha": "f668bafe0803f02a939b8217f444ffd737afef56", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=7184d137f65bb8d143ce8b5b664e50d33c4b5fbd", "patch": "@@ -11,7 +11,7 @@ use rustc_macros::HashStable;\n use rustc_middle::ich::StableHashingContext;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{\n-    sign_extend, truncate, AllocId, FrameInfo, GlobalId, InterpResult, Pointer, Scalar,\n+    sign_extend, truncate, FrameInfo, GlobalId, InterpResult, Pointer, Scalar,\n };\n use rustc_middle::ty::layout::{self, TyAndLayout};\n use rustc_middle::ty::{\n@@ -103,16 +103,16 @@ pub enum StackPopCleanup {\n \n /// State of a local variable including a memoized layout\n #[derive(Clone, PartialEq, Eq, HashStable)]\n-pub struct LocalState<'tcx, Tag = (), Id = AllocId> {\n-    pub value: LocalValue<Tag, Id>,\n+pub struct LocalState<'tcx, Tag = ()> {\n+    pub value: LocalValue<Tag>,\n     /// Don't modify if `Some`, this is only used to prevent computing the layout twice\n     #[stable_hasher(ignore)]\n     pub layout: Cell<Option<TyAndLayout<'tcx>>>,\n }\n \n /// Current value of a local variable\n #[derive(Copy, Clone, PartialEq, Eq, Debug, HashStable)] // Miri debug-prints these\n-pub enum LocalValue<Tag = (), Id = AllocId> {\n+pub enum LocalValue<Tag = ()> {\n     /// This local is not currently alive, and cannot be used at all.\n     Dead,\n     /// This local is alive but not yet initialized. It can be written to\n@@ -125,7 +125,7 @@ pub enum LocalValue<Tag = (), Id = AllocId> {\n     /// This is an optimization over just always having a pointer here;\n     /// we can thus avoid doing an allocation when the local just stores\n     /// immediate values *and* never has its address taken.\n-    Live(Operand<Tag, Id>),\n+    Live(Operand<Tag>),\n }\n \n impl<'tcx, Tag: Copy + 'static> LocalState<'tcx, Tag> {"}, {"sha": "e2fb9de486f098fd2d440aec7cc6d7674eccf4f5", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=7184d137f65bb8d143ce8b5b664e50d33c4b5fbd", "patch": "@@ -15,8 +15,8 @@ use rustc_target::abi::{Abi, DiscriminantKind, HasDataLayout, Integer, LayoutOf,\n use rustc_target::abi::{VariantIdx, Variants};\n \n use super::{\n-    from_known_layout, sign_extend, truncate, AllocId, ConstValue, GlobalId, InterpCx,\n-    InterpResult, MPlaceTy, Machine, MemPlace, Place, PlaceTy, Pointer, Scalar, ScalarMaybeUndef,\n+    from_known_layout, sign_extend, truncate, ConstValue, GlobalId, InterpCx, InterpResult,\n+    MPlaceTy, Machine, MemPlace, Place, PlaceTy, Pointer, Scalar, ScalarMaybeUndef,\n };\n \n /// An `Immediate` represents a single immediate self-contained Rust value.\n@@ -27,9 +27,9 @@ use super::{\n /// In particular, thanks to `ScalarPair`, arithmetic operations and casts can be entirely\n /// defined on `Immediate`, and do not have to work with a `Place`.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, Hash)]\n-pub enum Immediate<Tag = (), Id = AllocId> {\n-    Scalar(ScalarMaybeUndef<Tag, Id>),\n-    ScalarPair(ScalarMaybeUndef<Tag, Id>, ScalarMaybeUndef<Tag, Id>),\n+pub enum Immediate<Tag = ()> {\n+    Scalar(ScalarMaybeUndef<Tag>),\n+    ScalarPair(ScalarMaybeUndef<Tag>, ScalarMaybeUndef<Tag>),\n }\n \n impl<Tag> From<ScalarMaybeUndef<Tag>> for Immediate<Tag> {\n@@ -145,9 +145,9 @@ impl<'tcx, Tag> ::std::ops::Deref for ImmTy<'tcx, Tag> {\n /// or still in memory. The latter is an optimization, to delay reading that chunk of\n /// memory and to avoid having to store arbitrary-sized data here.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, Hash)]\n-pub enum Operand<Tag = (), Id = AllocId> {\n-    Immediate(Immediate<Tag, Id>),\n-    Indirect(MemPlace<Tag, Id>),\n+pub enum Operand<Tag = ()> {\n+    Immediate(Immediate<Tag>),\n+    Indirect(MemPlace<Tag>),\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]"}, {"sha": "fee9ca0c02e39d3170f4b0eaa1f33fc97c908900", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=7184d137f65bb8d143ce8b5b664e50d33c4b5fbd", "patch": "@@ -20,9 +20,9 @@ use super::{\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable)]\n /// Information required for the sound usage of a `MemPlace`.\n-pub enum MemPlaceMeta<Tag = (), Id = AllocId> {\n+pub enum MemPlaceMeta<Tag = ()> {\n     /// The unsized payload (e.g. length for slices or vtable pointer for trait objects).\n-    Meta(Scalar<Tag, Id>),\n+    Meta(Scalar<Tag>),\n     /// `Sized` types or unsized `extern type`\n     None,\n     /// The address of this place may not be taken. This protects the `MemPlace` from coming from\n@@ -32,8 +32,8 @@ pub enum MemPlaceMeta<Tag = (), Id = AllocId> {\n     Poison,\n }\n \n-impl<Tag, Id> MemPlaceMeta<Tag, Id> {\n-    pub fn unwrap_meta(self) -> Scalar<Tag, Id> {\n+impl<Tag> MemPlaceMeta<Tag> {\n+    pub fn unwrap_meta(self) -> Scalar<Tag> {\n         match self {\n             Self::Meta(s) => s,\n             Self::None | Self::Poison => {\n@@ -47,9 +47,7 @@ impl<Tag, Id> MemPlaceMeta<Tag, Id> {\n             Self::None | Self::Poison => false,\n         }\n     }\n-}\n \n-impl<Tag> MemPlaceMeta<Tag> {\n     pub fn erase_tag(self) -> MemPlaceMeta<()> {\n         match self {\n             Self::Meta(s) => MemPlaceMeta::Meta(s.erase_tag()),\n@@ -60,22 +58,22 @@ impl<Tag> MemPlaceMeta<Tag> {\n }\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable)]\n-pub struct MemPlace<Tag = (), Id = AllocId> {\n+pub struct MemPlace<Tag = ()> {\n     /// A place may have an integral pointer for ZSTs, and since it might\n     /// be turned back into a reference before ever being dereferenced.\n     /// However, it may never be undef.\n-    pub ptr: Scalar<Tag, Id>,\n+    pub ptr: Scalar<Tag>,\n     pub align: Align,\n     /// Metadata for unsized places. Interpretation is up to the type.\n     /// Must not be present for sized types, but can be missing for unsized types\n     /// (e.g., `extern type`).\n-    pub meta: MemPlaceMeta<Tag, Id>,\n+    pub meta: MemPlaceMeta<Tag>,\n }\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable)]\n-pub enum Place<Tag = (), Id = AllocId> {\n+pub enum Place<Tag = ()> {\n     /// A place referring to a value allocated in the `Memory` system.\n-    Ptr(MemPlace<Tag, Id>),\n+    Ptr(MemPlace<Tag>),\n \n     /// To support alloc-free locals, we are able to write directly to a local.\n     /// (Without that optimization, we'd just always be a `MemPlace`.)"}, {"sha": "eff73cf4a2d8a21e011f3ca15133b9efb8e3582f", "filename": "src/librustc_trait_selection/traits/util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src%2Flibrustc_trait_selection%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src%2Flibrustc_trait_selection%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Futil.rs?ref=7184d137f65bb8d143ce8b5b664e50d33c4b5fbd", "patch": "@@ -217,7 +217,6 @@ pub fn impl_trait_ref_and_oblig<'a, 'tcx>(\n     (impl_trait_ref, impl_obligations)\n }\n \n-/// See [`super::obligations_for_generics`].\n pub fn predicates_for_generics<'tcx>(\n     cause: ObligationCause<'tcx>,\n     recursion_depth: usize,"}, {"sha": "30779fc65c0fd155b403baa8ea2584aecd4a4825", "filename": "src/test/ui/non-ice-error-on-worker-io-fail.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src%2Ftest%2Fui%2Fnon-ice-error-on-worker-io-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src%2Ftest%2Fui%2Fnon-ice-error-on-worker-io-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-ice-error-on-worker-io-fail.rs?ref=7184d137f65bb8d143ce8b5b664e50d33c4b5fbd", "patch": "@@ -4,8 +4,12 @@\n //\n // An attempt to `-o` into a directory we cannot write into should indeed\n // be an error; but not an ICE.\n+//\n+// However, some folks run tests as root, which can write `/dev/` and end\n+// up clobbering `/dev/null`. Instead we'll use a non-existent path, which\n+// also used to ICE, but even root can't magically write there.\n \n-// compile-flags: -o /dev/null\n+// compile-flags: -o /does-not-exist/output\n \n // The error-pattern check occurs *before* normalization, and the error patterns\n // are wildly different between build environments. So this is a cop-out (and we\n@@ -15,10 +19,10 @@\n // error-pattern: error\n \n // On Mac OS X, we get an error like the below\n-// normalize-stderr-test \"failed to write bytecode to /dev/null.non_ice_error_on_worker_io_fail.*\" -> \"io error modifying /dev/\"\n+// normalize-stderr-test \"failed to write bytecode to /does-not-exist/output.non_ice_error_on_worker_io_fail.*\" -> \"io error modifying /does-not-exist/\"\n \n // On Linux, we get an error like the below\n-// normalize-stderr-test \"couldn't create a temp dir.*\" -> \"io error modifying /dev/\"\n+// normalize-stderr-test \"couldn't create a temp dir.*\" -> \"io error modifying /does-not-exist/\"\n \n // ignore-tidy-linelength\n // ignore-windows - this is a unix-specific test"}, {"sha": "edadecf273a7b20e3a5e55d7727910d2449a3907", "filename": "src/test/ui/non-ice-error-on-worker-io-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src%2Ftest%2Fui%2Fnon-ice-error-on-worker-io-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src%2Ftest%2Fui%2Fnon-ice-error-on-worker-io-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-ice-error-on-worker-io-fail.stderr?ref=7184d137f65bb8d143ce8b5b664e50d33c4b5fbd", "patch": "@@ -1,6 +1,6 @@\n warning: ignoring --out-dir flag due to -o flag\n \n-error: io error modifying /dev/\n+error: io error modifying /does-not-exist/\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "5dee0f5dae0b0d644641442b1d9ba28a1dbc96da", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.rs?ref=7184d137f65bb8d143ce8b5b664e50d33c4b5fbd", "patch": "@@ -11,19 +11,26 @@ fn foo<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32>\n     x //~ ERROR mismatched types\n }\n \n-// FIXME: uncomment these once this commit is in Beta and we can rely on `rustc_on_unimplemented`\n-//        having filtering for `Self` being a trait.\n-//\n-// fn bar<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n-//     Box::new(x)\n-// }\n-//\n-// fn baz<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n-//     Pin::new(x)\n-// }\n-//\n-// fn qux<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n-//     Pin::new(Box::new(x))\n-// }\n+// This case is still subpar:\n+// `Pin::new(x)`: store this in the heap by calling `Box::new`: `Box::new(x)`\n+// Should suggest changing the code from `Pin::new` to `Box::pin`.\n+fn bar<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n+    Box::new(x) //~ ERROR mismatched types\n+}\n+\n+fn baz<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n+    Pin::new(x) //~ ERROR mismatched types\n+    //~^ ERROR E0277\n+}\n+\n+fn qux<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n+    Pin::new(Box::new(x)) //~ ERROR E0277\n+}\n+\n+fn zap() -> BoxFuture<'static, i32> {\n+    async { //~ ERROR mismatched types\n+        42\n+    }\n+}\n \n fn main() {}"}, {"sha": "ff256eb30947a5a6b9b7784f1ebd1e2b2cf485a1", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 74, "deletions": 2, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7184d137f65bb8d143ce8b5b664e50d33c4b5fbd/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=7184d137f65bb8d143ce8b5b664e50d33c4b5fbd", "patch": "@@ -15,6 +15,78 @@ LL |     x\n    = help: type parameters must be constrained to match other types\n    = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n \n-error: aborting due to previous error\n+error[E0308]: mismatched types\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:18:5\n+   |\n+LL | fn bar<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n+   |                                                         ----------------------- expected `std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = i32> + std::marker::Send + 'static)>>` because of return type\n+LL |     Box::new(x)\n+   |     ^^^^^^^^^^^ expected struct `std::pin::Pin`, found struct `std::boxed::Box`\n+   |\n+   = note: expected struct `std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = i32> + std::marker::Send + 'static)>>`\n+              found struct `std::boxed::Box<F>`\n+   = help: use `Box::pin`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:22:14\n+   |\n+LL | fn baz<F: Future<Output=i32> + Send + 'static>(x: F) -> BoxFuture<'static, i32> {\n+   |        - this type parameter\n+LL |     Pin::new(x)\n+   |              ^\n+   |              |\n+   |              expected struct `std::boxed::Box`, found type parameter `F`\n+   |              help: store this in the heap by calling `Box::new`: `Box::new(x)`\n+   |\n+   = note:      expected struct `std::boxed::Box<dyn std::future::Future<Output = i32> + std::marker::Send>`\n+           found type parameter `F`\n+   = help: type parameters must be constrained to match other types\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters\n+   = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+\n+error[E0277]: `dyn std::future::Future<Output = i32> + std::marker::Send` cannot be unpinned\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:22:5\n+   |\n+LL |     Pin::new(x)\n+   |     ^^^^^^^^ the trait `std::marker::Unpin` is not implemented for `dyn std::future::Future<Output = i32> + std::marker::Send`\n+   |\n+   = note: consider using `Box::pin`\n+   = note: required by `std::pin::Pin::<P>::new`\n+\n+error[E0277]: `dyn std::future::Future<Output = i32> + std::marker::Send` cannot be unpinned\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:27:5\n+   |\n+LL |     Pin::new(Box::new(x))\n+   |     ^^^^^^^^ the trait `std::marker::Unpin` is not implemented for `dyn std::future::Future<Output = i32> + std::marker::Send`\n+   |\n+   = note: consider using `Box::pin`\n+   = note: required by `std::pin::Pin::<P>::new`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expected-boxed-future-isnt-pinned.rs:31:5\n+   |\n+LL |   fn zap() -> BoxFuture<'static, i32> {\n+   |               ----------------------- expected `std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = i32> + std::marker::Send + 'static)>>` because of return type\n+LL | /     async {\n+LL | |         42\n+LL | |     }\n+   | |_____^ expected struct `std::pin::Pin`, found opaque type\n+   | \n+  ::: $SRC_DIR/libcore/future/mod.rs:LL:COL\n+   |\n+LL |   pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n+   |                                             ------------------------------- the found opaque type\n+   |\n+   = note:   expected struct `std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = i32> + std::marker::Send + 'static)>>`\n+           found opaque type `impl std::future::Future`\n+help: you need to pin and box this expression\n+   |\n+LL |     Box::pin(async {\n+LL |         42\n+LL |     })\n+   |\n+\n+error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0277, E0308.\n+For more information about an error, try `rustc --explain E0277`."}]}