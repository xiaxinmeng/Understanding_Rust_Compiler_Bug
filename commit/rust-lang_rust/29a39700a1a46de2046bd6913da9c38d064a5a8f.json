{"sha": "29a39700a1a46de2046bd6913da9c38d064a5a8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YTM5NzAwYTFhNDZkZTIwNDZiZDY5MTNkYTljMzhkMDY0YTVhOGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-18T04:21:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-18T04:21:24Z"}, "message": "auto merge of #13525 : Ryman/rust/issue_5997, r=alexcrichton\n\nCloses #5997.", "tree": {"sha": "05b01679163dea916d0ae256d925f556e0467914", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05b01679163dea916d0ae256d925f556e0467914"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29a39700a1a46de2046bd6913da9c38d064a5a8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29a39700a1a46de2046bd6913da9c38d064a5a8f", "html_url": "https://github.com/rust-lang/rust/commit/29a39700a1a46de2046bd6913da9c38d064a5a8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29a39700a1a46de2046bd6913da9c38d064a5a8f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f8e68686f826ed333321a6650481162c95911f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f8e68686f826ed333321a6650481162c95911f6", "html_url": "https://github.com/rust-lang/rust/commit/3f8e68686f826ed333321a6650481162c95911f6"}, {"sha": "f829d208a30a4a8880ffb07ce4582e30c8f8d57f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f829d208a30a4a8880ffb07ce4582e30c8f8d57f", "html_url": "https://github.com/rust-lang/rust/commit/f829d208a30a4a8880ffb07ce4582e30c8f8d57f"}], "stats": {"total": 137, "additions": 111, "deletions": 26}, "files": [{"sha": "5831ab850d393f3cc893525a10ff63531626badf", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/29a39700a1a46de2046bd6913da9c38d064a5a8f/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a39700a1a46de2046bd6913da9c38d064a5a8f/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=29a39700a1a46de2046bd6913da9c38d064a5a8f", "patch": "@@ -3507,8 +3507,9 @@ impl<'a> Resolver<'a> {\n                         // its scope.\n \n                         self.resolve_error(span,\n-                                              \"attempt to use a type \\\n-                                              argument out of scope\");\n+                                              \"can't use type parameters from \\\n+                                              outer function; try using a local \\\n+                                              type parameter instead\");\n                     }\n \n                     return None;\n@@ -3530,8 +3531,9 @@ impl<'a> Resolver<'a> {\n                         // its scope.\n \n                         self.resolve_error(span,\n-                                              \"attempt to use a type \\\n-                                              argument out of scope\");\n+                                              \"can't use type parameters from \\\n+                                              outer function; try using a local \\\n+                                              type parameter instead\");\n                     }\n \n                     return None;"}, {"sha": "c9539b1d9a3f93a781acd2dc9153ff5fb51e2301", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/29a39700a1a46de2046bd6913da9c38d064a5a8f/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a39700a1a46de2046bd6913da9c38d064a5a8f/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=29a39700a1a46de2046bd6913da9c38d064a5a8f", "patch": "@@ -95,8 +95,9 @@ impl<'a> TypeFolder for SubstFolder<'a> {\n                                               root.repr(self.tcx)),\n                         None => ~\"\"\n                     };\n-                    let m = format!(\"missing type param `{}`{}\",\n-                                    t.repr(self.tcx), root_msg);\n+                    let m = format!(\"can't use type parameters from outer \\\n+                                    function{}; try using a local type \\\n+                                    parameter instead\", root_msg);\n                     match self.span {\n                         Some(span) => self.tcx.sess.span_err(span, m),\n                         None => self.tcx.sess.err(m)"}, {"sha": "bc01d2b126d33d2f889b59618c57a845bc998a76", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/29a39700a1a46de2046bd6913da9c38d064a5a8f/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a39700a1a46de2046bd6913da9c38d064a5a8f/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=29a39700a1a46de2046bd6913da9c38d064a5a8f", "patch": "@@ -2416,13 +2416,13 @@ pub enum Representability {\n \n /// Check whether a type is representable. This means it cannot contain unboxed\n /// structural recursion. This check is needed for structs and enums.\n-pub fn is_type_representable(cx: &ctxt, ty: t) -> Representability {\n+pub fn is_type_representable(cx: &ctxt, sp: Span, ty: t) -> Representability {\n \n     // Iterate until something non-representable is found\n-    fn find_nonrepresentable<It: Iterator<t>>(cx: &ctxt, seen: &mut Vec<DefId>,\n+    fn find_nonrepresentable<It: Iterator<t>>(cx: &ctxt, sp: Span, seen: &mut Vec<DefId>,\n                                               mut iter: It) -> Representability {\n         for ty in iter {\n-            let r = type_structurally_recursive(cx, seen, ty);\n+            let r = type_structurally_recursive(cx, sp, seen, ty);\n             if r != Representable {\n                  return r\n             }\n@@ -2432,7 +2432,7 @@ pub fn is_type_representable(cx: &ctxt, ty: t) -> Representability {\n \n     // Does the type `ty` directly (without indirection through a pointer)\n     // contain any types on stack `seen`?\n-    fn type_structurally_recursive(cx: &ctxt, seen: &mut Vec<DefId>,\n+    fn type_structurally_recursive(cx: &ctxt, sp: Span, seen: &mut Vec<DefId>,\n                                    ty: t) -> Representability {\n         debug!(\"type_structurally_recursive: {}\",\n                ::util::ppaux::ty_to_str(cx, ty));\n@@ -2455,19 +2455,19 @@ pub fn is_type_representable(cx: &ctxt, ty: t) -> Representability {\n         match get(ty).sty {\n             // Tuples\n             ty_tup(ref ts) => {\n-                find_nonrepresentable(cx, seen, ts.iter().map(|t| *t))\n+                find_nonrepresentable(cx, sp, seen, ts.iter().map(|t| *t))\n             }\n             // Fixed-length vectors.\n             // FIXME(#11924) Behavior undecided for zero-length vectors.\n             ty_vec(ty, VstoreFixed(_)) => {\n-                type_structurally_recursive(cx, seen, ty)\n+                type_structurally_recursive(cx, sp, seen, ty)\n             }\n \n             // Push struct and enum def-ids onto `seen` before recursing.\n             ty_struct(did, ref substs) => {\n                 seen.push(did);\n                 let fields = struct_fields(cx, did, substs);\n-                let r = find_nonrepresentable(cx, seen,\n+                let r = find_nonrepresentable(cx, sp, seen,\n                                               fields.iter().map(|f| f.mt.ty));\n                 seen.pop();\n                 r\n@@ -2478,8 +2478,10 @@ pub fn is_type_representable(cx: &ctxt, ty: t) -> Representability {\n \n                 let mut r = Representable;\n                 for variant in vs.iter() {\n-                    let iter = variant.args.iter().map(|aty| subst(cx, substs, *aty));\n-                    r = find_nonrepresentable(cx, seen, iter);\n+                    let iter = variant.args.iter().map(|aty| {\n+                        aty.subst_spanned(cx, substs, Some(sp))\n+                    });\n+                    r = find_nonrepresentable(cx, sp, seen, iter);\n \n                     if r != Representable { break }\n                 }\n@@ -2499,7 +2501,7 @@ pub fn is_type_representable(cx: &ctxt, ty: t) -> Representability {\n     // contains a different, structurally recursive type, maintain a stack\n     // of seen types and check recursion for each of them (issues #3008, #3779).\n     let mut seen: Vec<DefId> = Vec::new();\n-    type_structurally_recursive(cx, &mut seen, ty)\n+    type_structurally_recursive(cx, sp, &mut seen, ty)\n }\n \n pub fn type_is_trait(ty: t) -> bool {"}, {"sha": "6770640cfacc7c187e3b44ce5b81fcb470bb7029", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29a39700a1a46de2046bd6913da9c38d064a5a8f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a39700a1a46de2046bd6913da9c38d064a5a8f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=29a39700a1a46de2046bd6913da9c38d064a5a8f", "patch": "@@ -3356,7 +3356,7 @@ pub fn check_representable(tcx: &ty::ctxt,\n     // recursive type. It is only necessary to throw an error on those that\n     // contain themselves. For case 2, there must be an inner type that will be\n     // caught by case 1.\n-    match ty::is_type_representable(tcx, rty) {\n+    match ty::is_type_representable(tcx, sp, rty) {\n       ty::SelfRecursive => {\n         tcx.sess.span_err(\n           sp, format!(\"illegal recursive {} type; \\"}, {"sha": "6df8da3edaa69e39f3c107b6056d5659614af820", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/29a39700a1a46de2046bd6913da9c38d064a5a8f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a39700a1a46de2046bd6913da9c38d064a5a8f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=29a39700a1a46de2046bd6913da9c38d064a5a8f", "patch": "@@ -945,7 +945,24 @@ pub fn ty_generics(ccx: &CrateCtxt,\n                 let param_ty = ty::param_ty {idx: base_index + offset,\n                                              def_id: local_def(param.id)};\n                 let bounds = @compute_bounds(ccx, param_ty, &param.bounds);\n-                let default = param.default.map(|x| ast_ty_to_ty(ccx, &ExplicitRscope, x));\n+                let default = param.default.map(|path| {\n+                    let ty = ast_ty_to_ty(ccx, &ExplicitRscope, path);\n+                    let cur_idx = param_ty.idx;\n+\n+                    ty::walk_ty(ty, |t| {\n+                        match ty::get(t).sty {\n+                            ty::ty_param(p) => if p.idx > cur_idx {\n+                                ccx.tcx.sess.span_err(path.span,\n+                                                        \"type parameters with a default cannot use \\\n+                                                        forward declared identifiers\")\n+                            },\n+                            _ => {}\n+                        }\n+                    });\n+\n+                    ty\n+                });\n+\n                 let def = ty::TypeParameterDef {\n                     ident: param.ident,\n                     def_id: local_def(param.id),"}, {"sha": "4e5dc652fb5d61df1f7e2ef3ee404b4d5ce07e53", "filename": "src/test/compile-fail/bad-type-env-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29a39700a1a46de2046bd6913da9c38d064a5a8f/src%2Ftest%2Fcompile-fail%2Fbad-type-env-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a39700a1a46de2046bd6913da9c38d064a5a8f/src%2Ftest%2Fcompile-fail%2Fbad-type-env-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-type-env-capture.rs?ref=29a39700a1a46de2046bd6913da9c38d064a5a8f", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn foo<T>() {\n-    fn bar(b: T) { } //~ ERROR attempt to use a type argument out of scope\n+    fn bar(b: T) { } //~ ERROR can't use type parameters from outer\n     //~^ ERROR use of undeclared type name\n }\n fn main() { }"}, {"sha": "ace53fb51a4056515222f395e204acf4e5954e4f", "filename": "src/test/compile-fail/generic-type-params-forward-mention.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29a39700a1a46de2046bd6913da9c38d064a5a8f/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-forward-mention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a39700a1a46de2046bd6913da9c38d064a5a8f/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-forward-mention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-forward-mention.rs?ref=29a39700a1a46de2046bd6913da9c38d064a5a8f", "patch": "@@ -12,8 +12,7 @@\n \n // Ensure that we get an error and not an ICE for this problematic case.\n struct Foo<T = Option<U>, U = bool>;\n-\n+//~^ ERROR type parameters with a default cannot use forward declared identifiers\n fn main() {\n     let x: Foo;\n-    //~^ ERROR missing type param `U` in the substitution of `std::option::Option<U>`\n }"}, {"sha": "5b3e343deeaaf00f38be0e845001a62d29272e73", "filename": "src/test/compile-fail/issue-3021-c.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29a39700a1a46de2046bd6913da9c38d064a5a8f/src%2Ftest%2Fcompile-fail%2Fissue-3021-c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a39700a1a46de2046bd6913da9c38d064a5a8f/src%2Ftest%2Fcompile-fail%2Fissue-3021-c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-c.rs?ref=29a39700a1a46de2046bd6913da9c38d064a5a8f", "patch": "@@ -11,8 +11,8 @@\n fn siphash<T>() {\n \n     trait t {\n-        fn g(&self, x: T) -> T;  //~ ERROR attempt to use a type argument out of scope\n-        //~^ ERROR attempt to use a type argument out of scope\n+        fn g(&self, x: T) -> T;  //~ ERROR can't use type parameters from outer function; try using\n+        //~^ ERROR can't use type parameters from outer function; try using\n         //~^^ ERROR use of undeclared type name `T`\n         //~^^^ ERROR use of undeclared type name `T`\n     }"}, {"sha": "be49ca1fe06a73742a8fa5f086b2629736695d2d", "filename": "src/test/compile-fail/issue-3214.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29a39700a1a46de2046bd6913da9c38d064a5a8f/src%2Ftest%2Fcompile-fail%2Fissue-3214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a39700a1a46de2046bd6913da9c38d064a5a8f/src%2Ftest%2Fcompile-fail%2Fissue-3214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3214.rs?ref=29a39700a1a46de2046bd6913da9c38d064a5a8f", "patch": "@@ -10,7 +10,7 @@\n \n fn foo<T>() {\n     struct foo {\n-        x: T, //~ ERROR attempt to use a type argument out of scope\n+        x: T, //~ ERROR can't use type parameters from outer function;\n         //~^ ERROR use of undeclared type name\n     }\n "}, {"sha": "7be01b4abb4b9950d21cbb8e81314f0999eb0e8f", "filename": "src/test/compile-fail/issue-5997-enum.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/29a39700a1a46de2046bd6913da9c38d064a5a8f/src%2Ftest%2Fcompile-fail%2Fissue-5997-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a39700a1a46de2046bd6913da9c38d064a5a8f/src%2Ftest%2Fcompile-fail%2Fissue-5997-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5997-enum.rs?ref=29a39700a1a46de2046bd6913da9c38d064a5a8f", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn f<Z>() -> bool {\n+    enum E { V(Z) }\n+    //~^ ERROR can't use type parameters from outer function in the\n+\n+    true\n+}\n+\n+fn main() {\n+    let b = f::<int>();\n+    assert!(b);\n+}"}, {"sha": "b2a63ed1c7b8f7f6360a135fc7211a76f81f4b64", "filename": "src/test/compile-fail/issue-5997-struct.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/29a39700a1a46de2046bd6913da9c38d064a5a8f/src%2Ftest%2Fcompile-fail%2Fissue-5997-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a39700a1a46de2046bd6913da9c38d064a5a8f/src%2Ftest%2Fcompile-fail%2Fissue-5997-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5997-struct.rs?ref=29a39700a1a46de2046bd6913da9c38d064a5a8f", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn f<T>() -> bool {\n+    struct S(T); //~ ERROR use of undeclared type name `T`\n+    //~^ ERROR can't use type parameters from outer function; try using\n+\n+    true\n+}\n+\n+fn main() {\n+    let b = f::<int>();\n+    assert!(b);\n+}"}, {"sha": "0ee2a3add8721252294946f5ad0492c5bdfe67cd", "filename": "src/test/compile-fail/nested-ty-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29a39700a1a46de2046bd6913da9c38d064a5a8f/src%2Ftest%2Fcompile-fail%2Fnested-ty-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a39700a1a46de2046bd6913da9c38d064a5a8f/src%2Ftest%2Fcompile-fail%2Fnested-ty-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnested-ty-params.rs?ref=29a39700a1a46de2046bd6913da9c38d064a5a8f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:attempt to use a type argument out of scope\n+// error-pattern:can't use type parameters from outer function; try using\n fn hd<U>(v: Vec<U> ) -> U {\n     fn hd1(w: [U]) -> U { return w[0]; }\n "}, {"sha": "ac2f9d0379f64d1a63bd3c468ceb032e53bca8c6", "filename": "src/test/compile-fail/type-arg-out-of-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29a39700a1a46de2046bd6913da9c38d064a5a8f/src%2Ftest%2Fcompile-fail%2Ftype-arg-out-of-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a39700a1a46de2046bd6913da9c38d064a5a8f/src%2Ftest%2Fcompile-fail%2Ftype-arg-out-of-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-arg-out-of-scope.rs?ref=29a39700a1a46de2046bd6913da9c38d064a5a8f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:attempt to use a type argument out of scope\n+// error-pattern:can't use type parameters from outer function; try using\n fn foo<T>(x: T) {\n     fn bar(f: |T| -> T) { }\n }"}, {"sha": "9e2a001cb21d77964a0a3e4702d73b1b033dc193", "filename": "src/test/run-pass/issue-5997.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/29a39700a1a46de2046bd6913da9c38d064a5a8f/src%2Ftest%2Frun-pass%2Fissue-5997.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a39700a1a46de2046bd6913da9c38d064a5a8f/src%2Ftest%2Frun-pass%2Fissue-5997.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5997.rs?ref=29a39700a1a46de2046bd6913da9c38d064a5a8f", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn f<T>() -> bool {\n+    enum E<T> { V(T) }\n+\n+    struct S<T>(T);\n+\n+    true\n+}\n+\n+fn main() {\n+    let b = f::<int>();\n+    assert!(b);\n+}\n\\ No newline at end of file"}]}