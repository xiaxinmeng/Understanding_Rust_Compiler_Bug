{"sha": "629ab189948e7a0fc726542d4c902ca4f8731c4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyOWFiMTg5OTQ4ZTdhMGZjNzI2NTQyZDRjOTAyY2E0Zjg3MzFjNGY=", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2021-05-23T20:59:24Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2021-05-24T17:17:25Z"}, "message": "add support of impl block for doctest into runnables\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "697e357d906e32f9c2518a9c0cfa0b341bc0fd60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/697e357d906e32f9c2518a9c0cfa0b341bc0fd60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/629ab189948e7a0fc726542d4c902ca4f8731c4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/629ab189948e7a0fc726542d4c902ca4f8731c4f", "html_url": "https://github.com/rust-lang/rust/commit/629ab189948e7a0fc726542d4c902ca4f8731c4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/629ab189948e7a0fc726542d4c902ca4f8731c4f/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16054887102104208f4a0fc0e75e702b85a2eae8", "url": "https://api.github.com/repos/rust-lang/rust/commits/16054887102104208f4a0fc0e75e702b85a2eae8", "html_url": "https://github.com/rust-lang/rust/commit/16054887102104208f4a0fc0e75e702b85a2eae8"}], "stats": {"total": 72, "additions": 71, "deletions": 1}, "files": [{"sha": "0ba7f7225fe833d07d830edee2768d3c434b7029", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 71, "deletions": 1, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/629ab189948e7a0fc726542d4c902ca4f8731c4f/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/629ab189948e7a0fc726542d4c902ca4f8731c4f/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=629ab189948e7a0fc726542d4c902ca4f8731c4f", "patch": "@@ -113,6 +113,7 @@ pub(crate) fn runnables(db: &RootDatabase, file_id: FileId) -> Vec<Runnable> {\n             res.extend(runnable.or_else(|| module_def_doctest(&sema, def)))\n         }\n         Either::Right(impl_) => {\n+            res.extend(runnable_impl(&sema, &impl_));\n             res.extend(impl_.items(db).into_iter().filter_map(|assoc| match assoc {\n                 hir::AssocItem::Function(it) => {\n                     runnable_fn(&sema, it).or_else(|| module_def_doctest(&sema, it.into()))\n@@ -270,6 +271,26 @@ pub(crate) fn runnable_mod(sema: &Semantics<RootDatabase>, def: hir::Module) ->\n     Some(Runnable { nav, kind: RunnableKind::TestMod { path }, cfg })\n }\n \n+pub(crate) fn runnable_impl(sema: &Semantics<RootDatabase>, def: &hir::Impl) -> Option<Runnable> {\n+    let attrs = def.attrs(sema.db);\n+    if !has_runnable_doc_test(&attrs) {\n+        return None;\n+    }\n+    let cfg = attrs.cfg();\n+    let nav = def.try_to_nav(sema.db)?;\n+    let ty = def.self_ty(sema.db);\n+    let adt_name = ty.as_adt()?.name(sema.db);\n+    let mut ty_args = ty.type_arguments().peekable();\n+    let params = if ty_args.peek().is_some() {\n+        format!(\"<{}>\", ty_args.format_with(\", \", |ty, cb| cb(&ty.display(sema.db))))\n+    } else {\n+        String::new()\n+    };\n+    let test_id = TestId::Path(format!(\"{}{}\", adt_name, params));\n+\n+    Some(Runnable { nav, kind: RunnableKind::DocTest { test_id }, cfg })\n+}\n+\n fn module_def_doctest(sema: &Semantics<RootDatabase>, def: hir::ModuleDef) -> Option<Runnable> {\n     let attrs = match def {\n         hir::ModuleDef::Module(it) => it.attrs(sema.db),\n@@ -610,8 +631,23 @@ fn should_have_no_runnable_6() {}\n /// ```\n struct StructWithRunnable(String);\n \n+/// ```\n+/// let x = 5;\n+/// ```\n+impl StructWithRunnable {}\n+\n+trait Test {\n+    fn test() -> usize {\n+        5usize\n+    }\n+}\n+\n+/// ```\n+/// let x = 5;\n+/// ```\n+impl Test for StructWithRunnable {}\n \"#,\n-            &[&BIN, &DOCTEST, &DOCTEST, &DOCTEST, &DOCTEST, &DOCTEST, &DOCTEST],\n+            &[&BIN, &DOCTEST, &DOCTEST, &DOCTEST, &DOCTEST, &DOCTEST, &DOCTEST, &DOCTEST, &DOCTEST],\n             expect![[r#\"\n                 [\n                     Runnable {\n@@ -717,6 +753,40 @@ struct StructWithRunnable(String);\n                         },\n                         cfg: None,\n                     },\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 967..1024,\n+                            focus_range: 1003..1021,\n+                            name: \"impl\",\n+                            kind: Impl,\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"StructWithRunnable\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 1088..1154,\n+                            focus_range: 1133..1151,\n+                            name: \"impl\",\n+                            kind: Impl,\n+                        },\n+                        kind: DocTest {\n+                            test_id: Path(\n+                                \"StructWithRunnable\",\n+                            ),\n+                        },\n+                        cfg: None,\n+                    },\n                 ]\n             \"#]],\n         );"}]}