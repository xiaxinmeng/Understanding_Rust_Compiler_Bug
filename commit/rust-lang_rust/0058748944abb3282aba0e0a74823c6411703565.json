{"sha": "0058748944abb3282aba0e0a74823c6411703565", "node_id": "C_kwDOAAsO6NoAKDAwNTg3NDg5NDRhYmIzMjgyYWJhMGUwYTc0ODIzYzY0MTE3MDM1NjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-14T06:42:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-14T06:42:15Z"}, "message": "Auto merge of #109057 - compiler-errors:rpitit-info-again, r=spastorino\n\nDon't `opt_rpitit_info` as a separate query\n\n... another attempt to undo regressions\n\nr? `@ghost`", "tree": {"sha": "42f7de1eb0e60f6944264101b7f2dee03166832d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42f7de1eb0e60f6944264101b7f2dee03166832d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0058748944abb3282aba0e0a74823c6411703565", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0058748944abb3282aba0e0a74823c6411703565", "html_url": "https://github.com/rust-lang/rust/commit/0058748944abb3282aba0e0a74823c6411703565", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0058748944abb3282aba0e0a74823c6411703565/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd43458d4c2a01af55f7032f7c47d7c8fecfe560", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd43458d4c2a01af55f7032f7c47d7c8fecfe560", "html_url": "https://github.com/rust-lang/rust/commit/bd43458d4c2a01af55f7032f7c47d7c8fecfe560"}, {"sha": "ce8dae5800dd0a8837984d1c15f5bc68bd126a4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce8dae5800dd0a8837984d1c15f5bc68bd126a4d", "html_url": "https://github.com/rust-lang/rust/commit/ce8dae5800dd0a8837984d1c15f5bc68bd126a4d"}], "stats": {"total": 54, "additions": 31, "deletions": 23}, "files": [{"sha": "3254a9303423653ab216c395f383ac65e3ea0f6a", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0058748944abb3282aba0e0a74823c6411703565/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0058748944abb3282aba0e0a74823c6411703565/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=0058748944abb3282aba0e0a74823c6411703565", "patch": "@@ -1339,6 +1339,7 @@ impl<'tcx> Pick<'tcx> {\n                     container: _,\n                     trait_item_def_id: _,\n                     fn_has_self_parameter: _,\n+                    opt_rpitit_info: _,\n                 },\n             kind: _,\n             import_ids: _,"}, {"sha": "ca26e1497aaf76e7a6105695be14ce83de6a7d7a", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0058748944abb3282aba0e0a74823c6411703565/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0058748944abb3282aba0e0a74823c6411703565/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=0058748944abb3282aba0e0a74823c6411703565", "patch": "@@ -1095,6 +1095,8 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             trait_item_def_id: self.get_trait_item_def_id(id),\n             container,\n             fn_has_self_parameter: has_self,\n+            // FIXME(-Zlower-impl-trait-in-trait-to-assoc-ty): We need to encode this\n+            opt_rpitit_info: None,\n         }\n     }\n "}, {"sha": "403b2b650886e1c69884baa37290f555eeb4142f", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0058748944abb3282aba0e0a74823c6411703565/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0058748944abb3282aba0e0a74823c6411703565/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=0058748944abb3282aba0e0a74823c6411703565", "patch": "@@ -177,7 +177,6 @@ pub fn provide(providers: &mut Providers) {\n         }\n     };\n     providers.opt_def_kind = |tcx, def_id| tcx.hir().opt_def_kind(def_id.expect_local());\n-    providers.opt_rpitit_info = |_, _| None;\n     providers.all_local_trait_impls = |tcx, ()| &tcx.resolutions(()).trait_impls;\n     providers.expn_that_defined = |tcx, id| {\n         let id = id.expect_local();"}, {"sha": "75f05c4af23da2670f0d1f2d80478ae057664f07", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0058748944abb3282aba0e0a74823c6411703565/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0058748944abb3282aba0e0a74823c6411703565/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=0058748944abb3282aba0e0a74823c6411703565", "patch": "@@ -1161,14 +1161,6 @@ rustc_queries! {\n         feedable\n     }\n \n-    /// The `opt_rpitit_info` query returns the pair of the def id of the function where the RPIT\n-    /// is defined and the opaque def id if any.\n-    query opt_rpitit_info(def_id: DefId) -> Option<ty::ImplTraitInTraitData> {\n-        desc { |tcx| \"opt_rpitit_info `{}`\", tcx.def_path_str(def_id) }\n-        cache_on_disk_if { def_id.is_local() }\n-        feedable\n-    }\n-\n     /// Gets the span for the definition.\n     query def_span(def_id: DefId) -> Span {\n         desc { |tcx| \"looking up span for `{}`\", tcx.def_path_str(def_id) }"}, {"sha": "090b769323add1f004850217f53817e413b1ebe1", "filename": "compiler/rustc_middle/src/ty/assoc.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0058748944abb3282aba0e0a74823c6411703565/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0058748944abb3282aba0e0a74823c6411703565/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs?ref=0058748944abb3282aba0e0a74823c6411703565", "patch": "@@ -30,6 +30,11 @@ pub struct AssocItem {\n     /// Whether this is a method with an explicit self\n     /// as its first parameter, allowing method calls.\n     pub fn_has_self_parameter: bool,\n+\n+    /// `Some` if the associated item (an associated type) comes from the\n+    /// return-position `impl Trait` in trait desugaring. The `ImplTraitInTraitData`\n+    /// provides additional information about its source.\n+    pub opt_rpitit_info: Option<ty::ImplTraitInTraitData>,\n }\n \n impl AssocItem {"}, {"sha": "d5ba0785fa6d4fa3aaf4686fa9e2ce4056115b86", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0058748944abb3282aba0e0a74823c6411703565/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0058748944abb3282aba0e0a74823c6411703565/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=0058748944abb3282aba0e0a74823c6411703565", "patch": "@@ -2452,7 +2452,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     pub fn is_impl_trait_in_trait(self, def_id: DefId) -> bool {\n         if self.lower_impl_trait_in_trait_to_assoc_ty() {\n-            self.def_kind(def_id) == DefKind::AssocTy && self.opt_rpitit_info(def_id).is_some()\n+            self.opt_rpitit_info(def_id).is_some()\n         } else {\n             self.def_kind(def_id) == DefKind::ImplTraitPlaceholder\n         }"}, {"sha": "04d7de531c26b3630e681c09d3d6e9b71ef92aad", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0058748944abb3282aba0e0a74823c6411703565/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0058748944abb3282aba0e0a74823c6411703565/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=0058748944abb3282aba0e0a74823c6411703565", "patch": "@@ -2070,7 +2070,9 @@ pub enum ImplOverlapKind {\n     Issue33140,\n }\n \n-#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, HashStable)]\n+/// Useful source information about where a desugared associated type for an\n+/// RPITIT originated from.\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, Encodable, Decodable, HashStable)]\n pub enum ImplTraitInTraitData {\n     Trait { fn_def_id: DefId, opaque_def_id: DefId },\n     Impl { fn_def_id: DefId },\n@@ -2213,6 +2215,17 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n+    /// If the def-id is an associated type that was desugared from a\n+    /// return-position `impl Trait` from a trait, then provide the source info\n+    /// about where that RPITIT came from.\n+    pub fn opt_rpitit_info(self, def_id: DefId) -> Option<ImplTraitInTraitData> {\n+        if let DefKind::AssocTy = self.def_kind(def_id) {\n+            self.associated_item(def_id).opt_rpitit_info\n+        } else {\n+            None\n+        }\n+    }\n+\n     pub fn find_field_index(self, ident: Ident, variant: &VariantDef) -> Option<usize> {\n         variant\n             .fields"}, {"sha": "ec1e1d0054b3fc63203b2e1239dd74b29a9c93ae", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0058748944abb3282aba0e0a74823c6411703565/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0058748944abb3282aba0e0a74823c6411703565/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=0058748944abb3282aba0e0a74823c6411703565", "patch": "@@ -244,7 +244,7 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n             }\n \n             // Avoid accessing the HIR for the synthesized associated type generated for RPITITs.\n-            if self.tcx.opt_rpitit_info(id).is_some() {\n+            if self.tcx.opt_rpitit_info(id.to_def_id()).is_some() {\n                 self.live_symbols.insert(id);\n                 continue;\n             }"}, {"sha": "867974749d5fe32bf86f3e5da9798a38fe60423c", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0058748944abb3282aba0e0a74823c6411703565/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0058748944abb3282aba0e0a74823c6411703565/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=0058748944abb3282aba0e0a74823c6411703565", "patch": "@@ -153,6 +153,7 @@ fn associated_item_from_trait_item_ref(trait_item_ref: &hir::TraitItemRef) -> ty\n         trait_item_def_id: Some(owner_id.to_def_id()),\n         container: ty::TraitContainer,\n         fn_has_self_parameter: has_self,\n+        opt_rpitit_info: None,\n     }\n }\n \n@@ -171,6 +172,7 @@ fn associated_item_from_impl_item_ref(impl_item_ref: &hir::ImplItemRef) -> ty::A\n         trait_item_def_id: impl_item_ref.trait_item_def_id,\n         container: ty::ImplContainer,\n         fn_has_self_parameter: has_self,\n+        opt_rpitit_info: None,\n     }\n }\n \n@@ -262,19 +264,17 @@ fn associated_item_for_impl_trait_in_trait(\n     // Copy span of the opaque.\n     trait_assoc_ty.def_ident_span(Some(span));\n \n-    // Add the def_id of the function and opaque that generated this synthesized associated type.\n-    trait_assoc_ty.opt_rpitit_info(Some(ImplTraitInTraitData::Trait {\n-        fn_def_id,\n-        opaque_def_id: opaque_ty_def_id.to_def_id(),\n-    }));\n-\n     trait_assoc_ty.associated_item(ty::AssocItem {\n         name: kw::Empty,\n         kind: ty::AssocKind::Type,\n         def_id,\n         trait_item_def_id: None,\n         container: ty::TraitContainer,\n         fn_has_self_parameter: false,\n+        opt_rpitit_info: Some(ImplTraitInTraitData::Trait {\n+            fn_def_id,\n+            opaque_def_id: opaque_ty_def_id.to_def_id(),\n+        }),\n     });\n \n     // Copy visility of the containing function.\n@@ -328,18 +328,14 @@ fn impl_associated_item_for_impl_trait_in_trait(\n     // `opt_local_def_id_to_hir_id` with `None`.\n     impl_assoc_ty.opt_local_def_id_to_hir_id(None);\n \n-    // Add the def_id of the function that generated this synthesized associated type.\n-    impl_assoc_ty.opt_rpitit_info(Some(ImplTraitInTraitData::Impl {\n-        fn_def_id: impl_fn_def_id.to_def_id(),\n-    }));\n-\n     impl_assoc_ty.associated_item(ty::AssocItem {\n         name: kw::Empty,\n         kind: ty::AssocKind::Type,\n         def_id,\n         trait_item_def_id: Some(trait_assoc_def_id.to_def_id()),\n         container: ty::ImplContainer,\n         fn_has_self_parameter: false,\n+        opt_rpitit_info: Some(ImplTraitInTraitData::Impl { fn_def_id: impl_fn_def_id.to_def_id() }),\n     });\n \n     // Copy param_env of the containing function. The synthesized associated type doesn't have"}]}