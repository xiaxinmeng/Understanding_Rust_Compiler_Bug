{"sha": "e1a284555854f9aba4e22061ebb5981ad333b107", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxYTI4NDU1NTg1NGY5YWJhNGUyMjA2MWViYjU5ODFhZDMzM2IxMDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-29T15:12:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-29T15:12:24Z"}, "message": "Auto merge of #6226 - Urcra:master, r=flip1995\n\nAdd lint for comparing to empty slices instead of using .is_empty()\n\nHey first time making a clippy lint\n\nI added the implementation of the lint the `len_zero` since it shared a lot of the code, I would otherwise have to rewrite. Just tell me if the lint should use it's own file instead\n\nchangelog: Add lint for comparing to empty slices\n\nFixes #6217", "tree": {"sha": "2d07c55946227fde7e397833104984c3adad3451", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d07c55946227fde7e397833104984c3adad3451"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1a284555854f9aba4e22061ebb5981ad333b107", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a284555854f9aba4e22061ebb5981ad333b107", "html_url": "https://github.com/rust-lang/rust/commit/e1a284555854f9aba4e22061ebb5981ad333b107", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1a284555854f9aba4e22061ebb5981ad333b107/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee9da9a19404f71f59b1e55e6c49ff99cd9919d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee9da9a19404f71f59b1e55e6c49ff99cd9919d0", "html_url": "https://github.com/rust-lang/rust/commit/ee9da9a19404f71f59b1e55e6c49ff99cd9919d0"}, {"sha": "e3de544c22feb01437a060e88249652c103cb612", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3de544c22feb01437a060e88249652c103cb612", "html_url": "https://github.com/rust-lang/rust/commit/e3de544c22feb01437a060e88249652c103cb612"}], "stats": {"total": 162, "additions": 161, "deletions": 1}, "files": [{"sha": "008a22906fcd87766cf1126ca6ce81161f1ed197", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1a284555854f9aba4e22061ebb5981ad333b107/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/e1a284555854f9aba4e22061ebb5981ad333b107/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=e1a284555854f9aba4e22061ebb5981ad333b107", "patch": "@@ -1665,6 +1665,7 @@ Released 2018-09-13\n [`cognitive_complexity`]: https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity\n [`collapsible_if`]: https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\n [`comparison_chain`]: https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain\n+[`comparison_to_empty`]: https://rust-lang.github.io/rust-clippy/master/index.html#comparison_to_empty\n [`copy_iterator`]: https://rust-lang.github.io/rust-clippy/master/index.html#copy_iterator\n [`create_dir`]: https://rust-lang.github.io/rust-clippy/master/index.html#create_dir\n [`crosspointer_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#crosspointer_transmute"}, {"sha": "8e2f03d6e4e91641cfd93e22e75f958d10413c03", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 76, "deletions": 1, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/e1a284555854f9aba4e22061ebb5981ad333b107/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1a284555854f9aba4e22061ebb5981ad333b107/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=e1a284555854f9aba4e22061ebb5981ad333b107", "patch": "@@ -68,7 +68,44 @@ declare_clippy_lint! {\n     \"traits or impls with a public `len` method but no corresponding `is_empty` method\"\n }\n \n-declare_lint_pass!(LenZero => [LEN_ZERO, LEN_WITHOUT_IS_EMPTY]);\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for comparing to an empty slice such as \"\" or [],`\n+    /// and suggests using `.is_empty()` where applicable.\n+    ///\n+    /// **Why is this bad?** Some structures can answer `.is_empty()` much faster\n+    /// than checking for equality. So it is good to get into the habit of using\n+    /// `.is_empty()`, and having it is cheap.\n+    /// Besides, it makes the intent clearer than a manual comparison in some contexts.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```ignore\n+    /// if s == \"\" {\n+    ///     ..\n+    /// }\n+    ///\n+    /// if arr == [] {\n+    ///     ..\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```ignore\n+    /// if s.is_empty() {\n+    ///     ..\n+    /// }\n+    ///\n+    /// if arr.is_empty() {\n+    ///     ..\n+    /// }\n+    /// ```\n+    pub COMPARISON_TO_EMPTY,\n+    style,\n+    \"checking `x == \\\"\\\"` or `x == []` (or similar) when `.is_empty()` could be used instead\"\n+}\n+\n+declare_lint_pass!(LenZero => [LEN_ZERO, LEN_WITHOUT_IS_EMPTY, COMPARISON_TO_EMPTY]);\n \n impl<'tcx> LateLintPass<'tcx> for LenZero {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n@@ -221,6 +258,8 @@ fn check_cmp(cx: &LateContext<'_>, span: Span, method: &Expr<'_>, lit: &Expr<'_>\n         }\n \n         check_len(cx, span, method_path.ident.name, args, &lit.node, op, compare_to)\n+    } else {\n+        check_empty_expr(cx, span, method, lit, op)\n     }\n }\n \n@@ -258,6 +297,42 @@ fn check_len(\n     }\n }\n \n+fn check_empty_expr(cx: &LateContext<'_>, span: Span, lit1: &Expr<'_>, lit2: &Expr<'_>, op: &str) {\n+    if (is_empty_array(lit2) || is_empty_string(lit2)) && has_is_empty(cx, lit1) {\n+        let mut applicability = Applicability::MachineApplicable;\n+        span_lint_and_sugg(\n+            cx,\n+            COMPARISON_TO_EMPTY,\n+            span,\n+            \"comparison to empty slice\",\n+            &format!(\"using `{}is_empty` is clearer and more explicit\", op),\n+            format!(\n+                \"{}{}.is_empty()\",\n+                op,\n+                snippet_with_applicability(cx, lit1.span, \"_\", &mut applicability)\n+            ),\n+            applicability,\n+        );\n+    }\n+}\n+\n+fn is_empty_string(expr: &Expr<'_>) -> bool {\n+    if let ExprKind::Lit(ref lit) = expr.kind {\n+        if let LitKind::Str(lit, _) = lit.node {\n+            let lit = lit.as_str();\n+            return lit == \"\";\n+        }\n+    }\n+    false\n+}\n+\n+fn is_empty_array(expr: &Expr<'_>) -> bool {\n+    if let ExprKind::Array(ref arr) = expr.kind {\n+        return arr.is_empty();\n+    }\n+    false\n+}\n+\n /// Checks if this type has an `is_empty` method.\n fn has_is_empty(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     /// Gets an `AssocItem` and return true if it matches `is_empty(self)`."}, {"sha": "eb4d0bdc6c9266baa691c72eaf96a050927ffe1f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1a284555854f9aba4e22061ebb5981ad333b107/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1a284555854f9aba4e22061ebb5981ad333b107/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=e1a284555854f9aba4e22061ebb5981ad333b107", "patch": "@@ -614,6 +614,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &large_const_arrays::LARGE_CONST_ARRAYS,\n         &large_enum_variant::LARGE_ENUM_VARIANT,\n         &large_stack_arrays::LARGE_STACK_ARRAYS,\n+        &len_zero::COMPARISON_TO_EMPTY,\n         &len_zero::LEN_WITHOUT_IS_EMPTY,\n         &len_zero::LEN_ZERO,\n         &let_if_seq::USELESS_LET_IF_SEQ,\n@@ -1365,6 +1366,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&int_plus_one::INT_PLUS_ONE),\n         LintId::of(&large_const_arrays::LARGE_CONST_ARRAYS),\n         LintId::of(&large_enum_variant::LARGE_ENUM_VARIANT),\n+        LintId::of(&len_zero::COMPARISON_TO_EMPTY),\n         LintId::of(&len_zero::LEN_WITHOUT_IS_EMPTY),\n         LintId::of(&len_zero::LEN_ZERO),\n         LintId::of(&let_underscore::LET_UNDERSCORE_LOCK),\n@@ -1591,6 +1593,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&functions::RESULT_UNIT_ERR),\n         LintId::of(&if_let_some_result::IF_LET_SOME_RESULT),\n         LintId::of(&inherent_to_string::INHERENT_TO_STRING),\n+        LintId::of(&len_zero::COMPARISON_TO_EMPTY),\n         LintId::of(&len_zero::LEN_WITHOUT_IS_EMPTY),\n         LintId::of(&len_zero::LEN_ZERO),\n         LintId::of(&literal_representation::INCONSISTENT_DIGIT_GROUPING),"}, {"sha": "4ecbedd71ce42428f3e3b541df4cc77e072b73f7", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1a284555854f9aba4e22061ebb5981ad333b107/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1a284555854f9aba4e22061ebb5981ad333b107/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=e1a284555854f9aba4e22061ebb5981ad333b107", "patch": "@@ -298,6 +298,13 @@ vec![\n         deprecation: None,\n         module: \"comparison_chain\",\n     },\n+    Lint {\n+        name: \"comparison_to_empty\",\n+        group: \"style\",\n+        desc: \"checking `x == \\\"\\\"` or `x == []` (or similar) when `.is_empty()` could be used instead\",\n+        deprecation: None,\n+        module: \"len_zero\",\n+    },\n     Lint {\n         name: \"copy_iterator\",\n         group: \"pedantic\","}, {"sha": "261024caca761127e98274d241fa6e92d03a8ff3", "filename": "tests/ui/comparison_to_empty.fixed", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e1a284555854f9aba4e22061ebb5981ad333b107/tests%2Fui%2Fcomparison_to_empty.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e1a284555854f9aba4e22061ebb5981ad333b107/tests%2Fui%2Fcomparison_to_empty.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomparison_to_empty.fixed?ref=e1a284555854f9aba4e22061ebb5981ad333b107", "patch": "@@ -0,0 +1,23 @@\n+// run-rustfix\n+\n+#![warn(clippy::comparison_to_empty)]\n+\n+fn main() {\n+    // Disallow comparisons to empty\n+    let s = String::new();\n+    let _ = s.is_empty();\n+    let _ = !s.is_empty();\n+\n+    let v = vec![0];\n+    let _ = v.is_empty();\n+    let _ = !v.is_empty();\n+\n+    // Allow comparisons to non-empty\n+    let s = String::new();\n+    let _ = s == \" \";\n+    let _ = s != \" \";\n+\n+    let v = vec![0];\n+    let _ = v == [0];\n+    let _ = v != [0];\n+}"}, {"sha": "98ddd974951611f19d4e6af4d1b77752036286b4", "filename": "tests/ui/comparison_to_empty.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e1a284555854f9aba4e22061ebb5981ad333b107/tests%2Fui%2Fcomparison_to_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1a284555854f9aba4e22061ebb5981ad333b107/tests%2Fui%2Fcomparison_to_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomparison_to_empty.rs?ref=e1a284555854f9aba4e22061ebb5981ad333b107", "patch": "@@ -0,0 +1,23 @@\n+// run-rustfix\n+\n+#![warn(clippy::comparison_to_empty)]\n+\n+fn main() {\n+    // Disallow comparisons to empty\n+    let s = String::new();\n+    let _ = s == \"\";\n+    let _ = s != \"\";\n+\n+    let v = vec![0];\n+    let _ = v == [];\n+    let _ = v != [];\n+\n+    // Allow comparisons to non-empty\n+    let s = String::new();\n+    let _ = s == \" \";\n+    let _ = s != \" \";\n+\n+    let v = vec![0];\n+    let _ = v == [0];\n+    let _ = v != [0];\n+}"}, {"sha": "f69d6bd5255df81ad45b23b64868537dd6cdb536", "filename": "tests/ui/comparison_to_empty.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e1a284555854f9aba4e22061ebb5981ad333b107/tests%2Fui%2Fcomparison_to_empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1a284555854f9aba4e22061ebb5981ad333b107/tests%2Fui%2Fcomparison_to_empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomparison_to_empty.stderr?ref=e1a284555854f9aba4e22061ebb5981ad333b107", "patch": "@@ -0,0 +1,28 @@\n+error: comparison to empty slice\n+  --> $DIR/comparison_to_empty.rs:8:13\n+   |\n+LL |     let _ = s == \"\";\n+   |             ^^^^^^^ help: using `is_empty` is clearer and more explicit: `s.is_empty()`\n+   |\n+   = note: `-D clippy::comparison-to-empty` implied by `-D warnings`\n+\n+error: comparison to empty slice\n+  --> $DIR/comparison_to_empty.rs:9:13\n+   |\n+LL |     let _ = s != \"\";\n+   |             ^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!s.is_empty()`\n+\n+error: comparison to empty slice\n+  --> $DIR/comparison_to_empty.rs:12:13\n+   |\n+LL |     let _ = v == [];\n+   |             ^^^^^^^ help: using `is_empty` is clearer and more explicit: `v.is_empty()`\n+\n+error: comparison to empty slice\n+  --> $DIR/comparison_to_empty.rs:13:13\n+   |\n+LL |     let _ = v != [];\n+   |             ^^^^^^^ help: using `!is_empty` is clearer and more explicit: `!v.is_empty()`\n+\n+error: aborting due to 4 previous errors\n+"}]}