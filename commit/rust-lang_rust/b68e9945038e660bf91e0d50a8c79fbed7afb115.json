{"sha": "b68e9945038e660bf91e0d50a8c79fbed7afb115", "node_id": "C_kwDOAAsO6NoAKGI2OGU5OTQ1MDM4ZTY2MGJmOTFlMGQ1MGE4Yzc5ZmJlZDdhZmIxMTU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-20T22:35:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-20T22:35:17Z"}, "message": "Rollup merge of #105973 - oli-obk:simplify_callee_checks, r=jackh726\n\nAvoid going through the happy path in case of non-fn builtin calls\n\nNo functional change, just doing an early return. The removed comment is not applicable anymore, not every node needs type bindings in the error case. At best this would have been needed to avoid ICEs, but afaict this can't happen anymore today, as we do fallible checks.", "tree": {"sha": "6d3926c281cd34edb58f2db73f9c85c965be04c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d3926c281cd34edb58f2db73f9c85c965be04c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b68e9945038e660bf91e0d50a8c79fbed7afb115", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjojilCRBK7hj4Ov3rIwAANIkIAB+xGS7WeXuMcmBpXUgw65J3\nP1nKO8f9afA03PuU5Ttrf3HT3cTMFFIB2qjcMaImYoPTJAY8HtdLUEHbnZuTmWAC\nm5SPnWjqG8ZEde/rGZ37Tb8vTDgB/tzNnMObGJgZvIp9KbB7JoCztkwD6vrbof5/\ncwtvhHf+9jKyMUdxhUUOYGGn/3/n640VdLMGDCYCxUrVT0ld+ppjUOrUGDbglieN\n7TjM/Lrsa+k0+q2D3gbu3ydDfJCyh9DmJnzt5pZGXYq0BcuJ9I+uRYNcWZbNyT4X\n167O0w4isuyOeHb0UTY40Acvg/H4b7i806lS1TQcvNhlLa18+tSe48V8a7RMfqg=\n=3dmB\n-----END PGP SIGNATURE-----\n", "payload": "tree 6d3926c281cd34edb58f2db73f9c85c965be04c9\nparent b9edcfa055ae72a097f1101c2272b4a99c15d618\nparent 1c5b53be1c5ea2f95b1b3e4327c69f14127a923c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671575717 +0100\ncommitter GitHub <noreply@github.com> 1671575717 +0100\n\nRollup merge of #105973 - oli-obk:simplify_callee_checks, r=jackh726\n\nAvoid going through the happy path in case of non-fn builtin calls\n\nNo functional change, just doing an early return. The removed comment is not applicable anymore, not every node needs type bindings in the error case. At best this would have been needed to avoid ICEs, but afaict this can't happen anymore today, as we do fallible checks.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b68e9945038e660bf91e0d50a8c79fbed7afb115", "html_url": "https://github.com/rust-lang/rust/commit/b68e9945038e660bf91e0d50a8c79fbed7afb115", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b68e9945038e660bf91e0d50a8c79fbed7afb115/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9edcfa055ae72a097f1101c2272b4a99c15d618", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9edcfa055ae72a097f1101c2272b4a99c15d618", "html_url": "https://github.com/rust-lang/rust/commit/b9edcfa055ae72a097f1101c2272b4a99c15d618"}, {"sha": "1c5b53be1c5ea2f95b1b3e4327c69f14127a923c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c5b53be1c5ea2f95b1b3e4327c69f14127a923c", "html_url": "https://github.com/rust-lang/rust/commit/1c5b53be1c5ea2f95b1b3e4327c69f14127a923c"}], "stats": {"total": 28, "additions": 10, "deletions": 18}, "files": [{"sha": "4ec71a78a003146d8a8da6c45b9eddcfea4608d3", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b68e9945038e660bf91e0d50a8c79fbed7afb115/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b68e9945038e660bf91e0d50a8c79fbed7afb115/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=b68e9945038e660bf91e0d50a8c79fbed7afb115", "patch": "@@ -4,7 +4,7 @@ use super::{Expectation, FnCtxt, TupleArgumentsFlag};\n \n use crate::type_error_struct;\n use rustc_ast::util::parser::PREC_POSTFIX;\n-use rustc_errors::{struct_span_err, Applicability, Diagnostic, StashKey};\n+use rustc_errors::{struct_span_err, Applicability, Diagnostic, ErrorGuaranteed, StashKey};\n use rustc_hir as hir;\n use rustc_hir::def::{self, CtorKind, Namespace, Res};\n use rustc_hir::def_id::DefId;\n@@ -424,21 +424,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }\n \n-                self.report_invalid_callee(call_expr, callee_expr, callee_ty, arg_exprs);\n-\n-                // This is the \"default\" function signature, used in case of error.\n-                // In that case, we check each argument against \"error\" in order to\n-                // set up all the node type bindings.\n-                (\n-                    ty::Binder::dummy(self.tcx.mk_fn_sig(\n-                        self.err_args(arg_exprs.len()).into_iter(),\n-                        self.tcx.ty_error(),\n-                        false,\n-                        hir::Unsafety::Normal,\n-                        abi::Abi::Rust,\n-                    )),\n-                    None,\n-                )\n+                let err = self.report_invalid_callee(call_expr, callee_expr, callee_ty, arg_exprs);\n+\n+                return self.tcx.ty_error_with_guaranteed(err);\n             }\n         };\n \n@@ -591,7 +579,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         callee_expr: &'tcx hir::Expr<'tcx>,\n         callee_ty: Ty<'tcx>,\n         arg_exprs: &'tcx [hir::Expr<'tcx>],\n-    ) {\n+    ) -> ErrorGuaranteed {\n         let mut unit_variant = None;\n         if let hir::ExprKind::Path(qpath) = &callee_expr.kind\n             && let Res::Def(def::DefKind::Ctor(kind, CtorKind::Const), _)\n@@ -720,7 +708,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 err.span_label(span, label);\n             }\n         }\n-        err.emit();\n+        err.emit()\n     }\n \n     fn confirm_deferred_closure_call("}, {"sha": "2071d01027266581542ae273550c10b668235376", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b68e9945038e660bf91e0d50a8c79fbed7afb115/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b68e9945038e660bf91e0d50a8c79fbed7afb115/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=b68e9945038e660bf91e0d50a8c79fbed7afb115", "patch": "@@ -400,6 +400,7 @@ impl<'tcx> InternalSubsts<'tcx> {\n     }\n \n     #[inline]\n+    #[track_caller]\n     pub fn type_at(&self, i: usize) -> Ty<'tcx> {\n         if let GenericArgKind::Type(ty) = self[i].unpack() {\n             ty\n@@ -409,6 +410,7 @@ impl<'tcx> InternalSubsts<'tcx> {\n     }\n \n     #[inline]\n+    #[track_caller]\n     pub fn region_at(&self, i: usize) -> ty::Region<'tcx> {\n         if let GenericArgKind::Lifetime(lt) = self[i].unpack() {\n             lt\n@@ -418,6 +420,7 @@ impl<'tcx> InternalSubsts<'tcx> {\n     }\n \n     #[inline]\n+    #[track_caller]\n     pub fn const_at(&self, i: usize) -> ty::Const<'tcx> {\n         if let GenericArgKind::Const(ct) = self[i].unpack() {\n             ct\n@@ -427,6 +430,7 @@ impl<'tcx> InternalSubsts<'tcx> {\n     }\n \n     #[inline]\n+    #[track_caller]\n     pub fn type_for_def(&self, def: &ty::GenericParamDef) -> GenericArg<'tcx> {\n         self.type_at(def.index as usize).into()\n     }"}]}