{"sha": "25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NTA4ZWJlNjgwZGM1ZmY5YTJhYTBlNmY0YzQ3ZTk3NTdlZGQxYzk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-25T21:15:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-25T21:15:17Z"}, "message": "Rollup merge of #84541 - KaiJewson:inline-raw, r=m-ou-se\n\nInline most raw socket, fd and handle conversions\n\nNow that file descriptor types on Unix have niches, it is advantageous for user libraries which provide file descriptor wrappers (e.g. `Socket` from socket2) to store a `File` internally instead of a `RawFd`, so that the niche can be taken advantage of. However, doing so will currently result in worse performance as `IntoRawFd`, `FromRawFd` and `AsRawFd` are not inlined. This change adds `#[inline]` to those methods on std types that wrap file descriptors, handles or sockets.", "tree": {"sha": "1734802f61b460cc2e0e341574dd37cfd71738e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1734802f61b460cc2e0e341574dd37cfd71738e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJghdvlCRBK7hj4Ov3rIwAAoKIIADD7Pat5VZxUvg+Y3tRWboq4\nMafEz1i2amjdT//pOqhyOrAwqj1av305HPSz/DNHBOzI1LdmKB0VJjNLjnMh/mms\nFUEwGnO12OBSHsaYTHq1Mpdk40dIyfc3/uj+Vfb1XvZl3wOyMPyJylWe4h9WnXad\nBuy4vxIa4m4BzpbB9unR3Kx93bfGYsrLJ2AJisQf3wwIs7GejwR/Z2yaxl3tBvrl\nJkgW38QaatRncPrbiw7bTDBhKWFMMhOsqPKaP2SDhUTPzurA2t/uQVFCM1/flxUq\nVJUA1gP5ufAM70Pe9ADWySp8ZPNowWOmezmk5tlGH27B7NnREURrBK96h/QOqFk=\n=3gSW\n-----END PGP SIGNATURE-----\n", "payload": "tree 1734802f61b460cc2e0e341574dd37cfd71738e7\nparent 139749934b174cbe556d4e026a76461e9aa8d0b3\nparent fbc2aadbfc6a54da9d8cc5929287d2bcc55c545e\nauthor Dylan DPC <dylan.dpc@gmail.com> 1619385317 +0200\ncommitter GitHub <noreply@github.com> 1619385317 +0200\n\nRollup merge of #84541 - KaiJewson:inline-raw, r=m-ou-se\n\nInline most raw socket, fd and handle conversions\n\nNow that file descriptor types on Unix have niches, it is advantageous for user libraries which provide file descriptor wrappers (e.g. `Socket` from socket2) to store a `File` internally instead of a `RawFd`, so that the niche can be taken advantage of. However, doing so will currently result in worse performance as `IntoRawFd`, `FromRawFd` and `AsRawFd` are not inlined. This change adds `#[inline]` to those methods on std types that wrap file descriptors, handles or sockets.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9", "html_url": "https://github.com/rust-lang/rust/commit/25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "139749934b174cbe556d4e026a76461e9aa8d0b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/139749934b174cbe556d4e026a76461e9aa8d0b3", "html_url": "https://github.com/rust-lang/rust/commit/139749934b174cbe556d4e026a76461e9aa8d0b3"}, {"sha": "fbc2aadbfc6a54da9d8cc5929287d2bcc55c545e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbc2aadbfc6a54da9d8cc5929287d2bcc55c545e", "html_url": "https://github.com/rust-lang/rust/commit/fbc2aadbfc6a54da9d8cc5929287d2bcc55c545e"}], "stats": {"total": 76, "additions": 76, "deletions": 0}, "files": [{"sha": "7223ade68158fd1a84a489437462ae81cb73b07b", "filename": "library/std/src/sys/sgx/ext/io.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fext%2Fio.rs?ref=25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9", "patch": "@@ -63,12 +63,14 @@ pub trait TryIntoRawFd: Sized {\n }\n \n impl AsRawFd for net::TcpStream {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         *self.as_inner().as_inner().as_inner().as_inner()\n     }\n }\n \n impl AsRawFd for net::TcpListener {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         *self.as_inner().as_inner().as_inner().as_inner()\n     }\n@@ -87,6 +89,7 @@ pub struct TcpStreamMetadata {\n impl FromRawFd for net::TcpStream {\n     type Metadata = TcpStreamMetadata;\n \n+    #[inline]\n     unsafe fn from_raw_fd(fd: RawFd, metadata: Self::Metadata) -> net::TcpStream {\n         let fd = sys::fd::FileDesc::from_inner(fd);\n         let socket = sys::net::Socket::from_inner((fd, metadata.local_addr));\n@@ -105,6 +108,7 @@ pub struct TcpListenerMetadata {\n impl FromRawFd for net::TcpListener {\n     type Metadata = TcpListenerMetadata;\n \n+    #[inline]\n     unsafe fn from_raw_fd(fd: RawFd, metadata: Self::Metadata) -> net::TcpListener {\n         let fd = sys::fd::FileDesc::from_inner(fd);\n         let socket = sys::net::Socket::from_inner((fd, metadata.local_addr));\n@@ -113,6 +117,7 @@ impl FromRawFd for net::TcpListener {\n }\n \n impl TryIntoRawFd for net::TcpStream {\n+    #[inline]\n     fn try_into_raw_fd(self) -> Result<RawFd, Self> {\n         let (socket, peer_addr) = self.into_inner().into_inner();\n         match socket.try_into_inner() {\n@@ -126,6 +131,7 @@ impl TryIntoRawFd for net::TcpStream {\n }\n \n impl TryIntoRawFd for net::TcpListener {\n+    #[inline]\n     fn try_into_raw_fd(self) -> Result<RawFd, Self> {\n         match self.into_inner().into_inner().try_into_inner() {\n             Ok(fd) => Ok(fd.into_inner()),"}, {"sha": "07c30bfa9ed154b6b9add61ecbcbf0f7089a3d31", "filename": "library/std/src/sys/unix/ext/io.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fio.rs?ref=25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9", "patch": "@@ -104,79 +104,91 @@ pub trait IntoRawFd {\n \n #[stable(feature = \"raw_fd_reflexive_traits\", since = \"1.48.0\")]\n impl AsRawFd for RawFd {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         *self\n     }\n }\n #[stable(feature = \"raw_fd_reflexive_traits\", since = \"1.48.0\")]\n impl IntoRawFd for RawFd {\n+    #[inline]\n     fn into_raw_fd(self) -> RawFd {\n         self\n     }\n }\n #[stable(feature = \"raw_fd_reflexive_traits\", since = \"1.48.0\")]\n impl FromRawFd for RawFd {\n+    #[inline]\n     unsafe fn from_raw_fd(fd: RawFd) -> RawFd {\n         fd\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRawFd for fs::File {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.as_inner().fd().raw()\n     }\n }\n #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawFd for fs::File {\n+    #[inline]\n     unsafe fn from_raw_fd(fd: RawFd) -> fs::File {\n         fs::File::from_inner(sys::fs::File::from_inner(fd))\n     }\n }\n #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawFd for fs::File {\n+    #[inline]\n     fn into_raw_fd(self) -> RawFd {\n         self.into_inner().into_fd().into_raw()\n     }\n }\n \n #[stable(feature = \"asraw_stdio\", since = \"1.21.0\")]\n impl AsRawFd for io::Stdin {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         libc::STDIN_FILENO\n     }\n }\n \n #[stable(feature = \"asraw_stdio\", since = \"1.21.0\")]\n impl AsRawFd for io::Stdout {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         libc::STDOUT_FILENO\n     }\n }\n \n #[stable(feature = \"asraw_stdio\", since = \"1.21.0\")]\n impl AsRawFd for io::Stderr {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         libc::STDERR_FILENO\n     }\n }\n \n #[stable(feature = \"asraw_stdio_locks\", since = \"1.35.0\")]\n impl<'a> AsRawFd for io::StdinLock<'a> {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         libc::STDIN_FILENO\n     }\n }\n \n #[stable(feature = \"asraw_stdio_locks\", since = \"1.35.0\")]\n impl<'a> AsRawFd for io::StdoutLock<'a> {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         libc::STDOUT_FILENO\n     }\n }\n \n #[stable(feature = \"asraw_stdio_locks\", since = \"1.35.0\")]\n impl<'a> AsRawFd for io::StderrLock<'a> {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         libc::STDERR_FILENO\n     }"}, {"sha": "9e39f70f68e698ab594df22812f5097b53d0a3eb", "filename": "library/std/src/sys/unix/ext/net/datagram.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fdatagram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fdatagram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fdatagram.rs?ref=25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9", "patch": "@@ -879,20 +879,23 @@ impl UnixDatagram {\n \n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n impl AsRawFd for UnixDatagram {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         *self.0.as_inner()\n     }\n }\n \n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n impl FromRawFd for UnixDatagram {\n+    #[inline]\n     unsafe fn from_raw_fd(fd: RawFd) -> UnixDatagram {\n         UnixDatagram(Socket::from_inner(fd))\n     }\n }\n \n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n impl IntoRawFd for UnixDatagram {\n+    #[inline]\n     fn into_raw_fd(self) -> RawFd {\n         self.0.into_inner()\n     }"}, {"sha": "bdd08fe8380fa56e2cf5bd2a738319e43b7a0725", "filename": "library/std/src/sys/unix/ext/net/listener.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Flistener.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Flistener.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Flistener.rs?ref=25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9", "patch": "@@ -240,20 +240,23 @@ impl UnixListener {\n \n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n impl AsRawFd for UnixListener {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         *self.0.as_inner()\n     }\n }\n \n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n impl FromRawFd for UnixListener {\n+    #[inline]\n     unsafe fn from_raw_fd(fd: RawFd) -> UnixListener {\n         UnixListener(Socket::from_inner(fd))\n     }\n }\n \n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n impl IntoRawFd for UnixListener {\n+    #[inline]\n     fn into_raw_fd(self) -> RawFd {\n         self.0.into_inner()\n     }"}, {"sha": "b3f12844101241db0d322a28f06a07f73a3ea95c", "filename": "library/std/src/sys/unix/ext/net/raw_fd.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fraw_fd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fraw_fd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fraw_fd.rs?ref=25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9", "patch": "@@ -6,6 +6,7 @@ macro_rules! impl_as_raw_fd {\n     ($($t:ident)*) => {$(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl AsRawFd for net::$t {\n+            #[inline]\n             fn as_raw_fd(&self) -> RawFd {\n                 *self.as_inner().socket().as_inner()\n             }\n@@ -18,6 +19,7 @@ macro_rules! impl_from_raw_fd {\n     ($($t:ident)*) => {$(\n         #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n         impl FromRawFd for net::$t {\n+            #[inline]\n             unsafe fn from_raw_fd(fd: RawFd) -> net::$t {\n                 let socket = sys::net::Socket::from_inner(fd);\n                 net::$t::from_inner(sys_common::net::$t::from_inner(socket))\n@@ -31,6 +33,7 @@ macro_rules! impl_into_raw_fd {\n     ($($t:ident)*) => {$(\n         #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n         impl IntoRawFd for net::$t {\n+            #[inline]\n             fn into_raw_fd(self) -> RawFd {\n                 self.into_inner().into_socket().into_inner()\n             }"}, {"sha": "a6f6e091305d51cb7c7a41f228ac248d693a1919", "filename": "library/std/src/sys/unix/ext/net/stream.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fstream.rs?ref=25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9", "patch": "@@ -654,20 +654,23 @@ impl<'a> io::Write for &'a UnixStream {\n \n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n impl AsRawFd for UnixStream {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         *self.0.as_inner()\n     }\n }\n \n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n impl FromRawFd for UnixStream {\n+    #[inline]\n     unsafe fn from_raw_fd(fd: RawFd) -> UnixStream {\n         UnixStream(Socket::from_inner(fd))\n     }\n }\n \n #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n impl IntoRawFd for UnixStream {\n+    #[inline]\n     fn into_raw_fd(self) -> RawFd {\n         self.0.into_inner()\n     }"}, {"sha": "355855bcd10e203d6921f3560833bc3270fa4513", "filename": "library/std/src/sys/unix/ext/process.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9", "patch": "@@ -274,6 +274,7 @@ impl ExitStatusExt for process::ExitStatus {\n \n #[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl FromRawFd for process::Stdio {\n+    #[inline]\n     unsafe fn from_raw_fd(fd: RawFd) -> process::Stdio {\n         let fd = sys::fd::FileDesc::new(fd);\n         let io = sys::process::Stdio::Fd(fd);\n@@ -283,41 +284,47 @@ impl FromRawFd for process::Stdio {\n \n #[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl AsRawFd for process::ChildStdin {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.as_inner().fd().raw()\n     }\n }\n \n #[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl AsRawFd for process::ChildStdout {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.as_inner().fd().raw()\n     }\n }\n \n #[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl AsRawFd for process::ChildStderr {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.as_inner().fd().raw()\n     }\n }\n \n #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawFd for process::ChildStdin {\n+    #[inline]\n     fn into_raw_fd(self) -> RawFd {\n         self.into_inner().into_fd().into_raw()\n     }\n }\n \n #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawFd for process::ChildStdout {\n+    #[inline]\n     fn into_raw_fd(self) -> RawFd {\n         self.into_inner().into_fd().into_raw()\n     }\n }\n \n #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawFd for process::ChildStderr {\n+    #[inline]\n     fn into_raw_fd(self) -> RawFd {\n         self.into_inner().into_fd().into_raw()\n     }"}, {"sha": "b2e79cc1b4a9d59c59d680e2f22aa038c0f1d97f", "filename": "library/std/src/sys/wasi/ext/io.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fext%2Fio.rs?ref=25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9", "patch": "@@ -54,126 +54,147 @@ pub trait IntoRawFd {\n \n #[stable(feature = \"raw_fd_reflexive_traits\", since = \"1.48.0\")]\n impl AsRawFd for RawFd {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         *self\n     }\n }\n #[stable(feature = \"raw_fd_reflexive_traits\", since = \"1.48.0\")]\n impl IntoRawFd for RawFd {\n+    #[inline]\n     fn into_raw_fd(self) -> RawFd {\n         self\n     }\n }\n #[stable(feature = \"raw_fd_reflexive_traits\", since = \"1.48.0\")]\n impl FromRawFd for RawFd {\n+    #[inline]\n     unsafe fn from_raw_fd(fd: RawFd) -> RawFd {\n         fd\n     }\n }\n \n impl AsRawFd for net::TcpStream {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.as_inner().fd().as_raw()\n     }\n }\n \n impl FromRawFd for net::TcpStream {\n+    #[inline]\n     unsafe fn from_raw_fd(fd: RawFd) -> net::TcpStream {\n         net::TcpStream::from_inner(sys::net::TcpStream::from_inner(fd))\n     }\n }\n \n impl IntoRawFd for net::TcpStream {\n+    #[inline]\n     fn into_raw_fd(self) -> RawFd {\n         self.into_inner().into_fd().into_raw()\n     }\n }\n \n impl AsRawFd for net::TcpListener {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.as_inner().fd().as_raw()\n     }\n }\n \n impl FromRawFd for net::TcpListener {\n+    #[inline]\n     unsafe fn from_raw_fd(fd: RawFd) -> net::TcpListener {\n         net::TcpListener::from_inner(sys::net::TcpListener::from_inner(fd))\n     }\n }\n \n impl IntoRawFd for net::TcpListener {\n+    #[inline]\n     fn into_raw_fd(self) -> RawFd {\n         self.into_inner().into_fd().into_raw()\n     }\n }\n \n impl AsRawFd for net::UdpSocket {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.as_inner().fd().as_raw()\n     }\n }\n \n impl FromRawFd for net::UdpSocket {\n+    #[inline]\n     unsafe fn from_raw_fd(fd: RawFd) -> net::UdpSocket {\n         net::UdpSocket::from_inner(sys::net::UdpSocket::from_inner(fd))\n     }\n }\n \n impl IntoRawFd for net::UdpSocket {\n+    #[inline]\n     fn into_raw_fd(self) -> RawFd {\n         self.into_inner().into_fd().into_raw()\n     }\n }\n \n impl AsRawFd for fs::File {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         self.as_inner().fd().as_raw()\n     }\n }\n \n impl FromRawFd for fs::File {\n+    #[inline]\n     unsafe fn from_raw_fd(fd: RawFd) -> fs::File {\n         fs::File::from_inner(sys::fs::File::from_inner(fd))\n     }\n }\n \n impl IntoRawFd for fs::File {\n+    #[inline]\n     fn into_raw_fd(self) -> RawFd {\n         self.into_inner().into_fd().into_raw()\n     }\n }\n \n impl AsRawFd for io::Stdin {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         libc::STDIN_FILENO as RawFd\n     }\n }\n \n impl AsRawFd for io::Stdout {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         libc::STDOUT_FILENO as RawFd\n     }\n }\n \n impl AsRawFd for io::Stderr {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         libc::STDERR_FILENO as RawFd\n     }\n }\n \n impl<'a> AsRawFd for io::StdinLock<'a> {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         libc::STDIN_FILENO as RawFd\n     }\n }\n \n impl<'a> AsRawFd for io::StdoutLock<'a> {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         libc::STDOUT_FILENO as RawFd\n     }\n }\n \n impl<'a> AsRawFd for io::StderrLock<'a> {\n+    #[inline]\n     fn as_raw_fd(&self) -> RawFd {\n         libc::STDERR_FILENO as RawFd\n     }"}, {"sha": "31b5d015ed0c31a94b52f6c7b409f71d5c0c8b90", "filename": "library/std/src/sys/windows/ext/io.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fio.rs?ref=25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9", "patch": "@@ -59,6 +59,7 @@ pub trait IntoRawHandle {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRawHandle for fs::File {\n+    #[inline]\n     fn as_raw_handle(&self) -> RawHandle {\n         self.as_inner().handle().raw() as RawHandle\n     }\n@@ -108,6 +109,7 @@ impl<'a> AsRawHandle for io::StderrLock<'a> {\n \n #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawHandle for fs::File {\n+    #[inline]\n     unsafe fn from_raw_handle(handle: RawHandle) -> fs::File {\n         let handle = handle as c::HANDLE;\n         fs::File::from_inner(sys::fs::File::from_inner(handle))\n@@ -116,6 +118,7 @@ impl FromRawHandle for fs::File {\n \n #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawHandle for fs::File {\n+    #[inline]\n     fn into_raw_handle(self) -> RawHandle {\n         self.into_inner().into_handle().into_raw() as *mut _\n     }\n@@ -161,39 +164,45 @@ pub trait IntoRawSocket {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRawSocket for net::TcpStream {\n+    #[inline]\n     fn as_raw_socket(&self) -> RawSocket {\n         *self.as_inner().socket().as_inner()\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRawSocket for net::TcpListener {\n+    #[inline]\n     fn as_raw_socket(&self) -> RawSocket {\n         *self.as_inner().socket().as_inner()\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl AsRawSocket for net::UdpSocket {\n+    #[inline]\n     fn as_raw_socket(&self) -> RawSocket {\n         *self.as_inner().socket().as_inner()\n     }\n }\n \n #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawSocket for net::TcpStream {\n+    #[inline]\n     unsafe fn from_raw_socket(sock: RawSocket) -> net::TcpStream {\n         let sock = sys::net::Socket::from_inner(sock);\n         net::TcpStream::from_inner(sys_common::net::TcpStream::from_inner(sock))\n     }\n }\n #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawSocket for net::TcpListener {\n+    #[inline]\n     unsafe fn from_raw_socket(sock: RawSocket) -> net::TcpListener {\n         let sock = sys::net::Socket::from_inner(sock);\n         net::TcpListener::from_inner(sys_common::net::TcpListener::from_inner(sock))\n     }\n }\n #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawSocket for net::UdpSocket {\n+    #[inline]\n     unsafe fn from_raw_socket(sock: RawSocket) -> net::UdpSocket {\n         let sock = sys::net::Socket::from_inner(sock);\n         net::UdpSocket::from_inner(sys_common::net::UdpSocket::from_inner(sock))\n@@ -202,20 +211,23 @@ impl FromRawSocket for net::UdpSocket {\n \n #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawSocket for net::TcpStream {\n+    #[inline]\n     fn into_raw_socket(self) -> RawSocket {\n         self.into_inner().into_socket().into_inner()\n     }\n }\n \n #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawSocket for net::TcpListener {\n+    #[inline]\n     fn into_raw_socket(self) -> RawSocket {\n         self.into_inner().into_socket().into_inner()\n     }\n }\n \n #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n impl IntoRawSocket for net::UdpSocket {\n+    #[inline]\n     fn into_raw_socket(self) -> RawSocket {\n         self.into_inner().into_socket().into_inner()\n     }"}, {"sha": "67756b15531bf360b9d5bc8995e240f713a29cb6", "filename": "library/std/src/sys/windows/ext/process.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fprocess.rs?ref=25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9", "patch": "@@ -19,6 +19,7 @@ impl FromRawHandle for process::Stdio {\n \n #[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl AsRawHandle for process::Child {\n+    #[inline]\n     fn as_raw_handle(&self) -> RawHandle {\n         self.as_inner().handle().raw() as *mut _\n     }\n@@ -33,20 +34,23 @@ impl IntoRawHandle for process::Child {\n \n #[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl AsRawHandle for process::ChildStdin {\n+    #[inline]\n     fn as_raw_handle(&self) -> RawHandle {\n         self.as_inner().handle().raw() as *mut _\n     }\n }\n \n #[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl AsRawHandle for process::ChildStdout {\n+    #[inline]\n     fn as_raw_handle(&self) -> RawHandle {\n         self.as_inner().handle().raw() as *mut _\n     }\n }\n \n #[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl AsRawHandle for process::ChildStderr {\n+    #[inline]\n     fn as_raw_handle(&self) -> RawHandle {\n         self.as_inner().handle().raw() as *mut _\n     }"}, {"sha": "6bd02054f7150ba5e662a1810bf3f046952fc225", "filename": "library/std/src/sys/windows/ext/thread.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fthread.rs?ref=25508ebe680dc5ff9a2aa0e6f4c47e9757edd1c9", "patch": "@@ -8,13 +8,15 @@ use crate::thread;\n \n #[stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n impl<T> AsRawHandle for thread::JoinHandle<T> {\n+    #[inline]\n     fn as_raw_handle(&self) -> RawHandle {\n         self.as_inner().handle().raw() as *mut _\n     }\n }\n \n #[stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n impl<T> IntoRawHandle for thread::JoinHandle<T> {\n+    #[inline]\n     fn into_raw_handle(self) -> RawHandle {\n         self.into_inner().into_handle().into_raw() as *mut _\n     }"}]}