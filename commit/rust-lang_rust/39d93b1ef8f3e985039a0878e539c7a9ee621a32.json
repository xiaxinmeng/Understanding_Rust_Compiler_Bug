{"sha": "39d93b1ef8f3e985039a0878e539c7a9ee621a32", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZDkzYjFlZjhmM2U5ODUwMzlhMDg3OGU1MzljN2E5ZWU2MjFhMzI=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-01-14T04:51:59Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-01-28T13:12:53Z"}, "message": "codegen_place and related functions can take PlaceRef by value", "tree": {"sha": "3d9f59976f71aa4659338eb4c2b2850fdbca9932", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d9f59976f71aa4659338eb4c2b2850fdbca9932"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39d93b1ef8f3e985039a0878e539c7a9ee621a32", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAl4wM1UACgkQiMlBzaHU\nZDLGuRAAinmswSso6r5iF1efMDF3OJbyFYvn5OTTuIyYY/HsBqLNdHwZe+BaoNEE\nITAqmEK7ktKN1C4JdbsXRExL8j/gfiK+B9U3TzEw5ctq8KNZ8QvXE8y0EiyHjFMg\nng3Bg08syMOgI8D017Phsr9Y5PfO/09bDx/zDjXUtpyQEVcGNXbnvZb3L0WbF8S8\nmrF0zeLm/C326MTx+3m+X9JWizqmgOY+ujRKYPQtWigR1uqxpUdVUtGHwDNG04+J\nKf78IeAcYLKwIWfFyg9rb1xGD4dxxAqUMnT8+tELQoXVfQ0JTy1b6gmdSmjUE/Ow\n3ZLERCX0S8o2iiDDhmq3OWNlPZaa/MZ/JxChZeraBmTsdsnTwk2sOn6zuxZAFvV5\n/2whDqljK9z3VizE6ei7aOyGbXYGa0yaN0Cc1mWKR03DjuX5ydH7V3KpCwZjq6Dn\nFSfHFxlJ/aZpuEwozhwav68hf/SWGy3RL/s2hx1/fXcKaOegrwvS6ygSNctcQB/q\na/dltUZYyAJjuygGOZt0Gox91OlFkUWsGXKODr2olohhd9eTo/3R9XiQaT+saATo\nu5adNPiUFR1LbAi6Tg51wcxQV/ynQTKMn+uZitRGNmo5UJEBtPEviJpmOqMsHtiV\naPXCvXLk1nhrTDNbCtAGQ6o9cblT2Ei+QyfItu+IrDPYlu5ZBa8=\n=PtKT\n-----END PGP SIGNATURE-----", "payload": "tree 3d9f59976f71aa4659338eb4c2b2850fdbca9932\nparent 10b19f6deec72765c5f28420c80b1e86f2536b7b\nauthor Santiago Pastorino <spastorino@gmail.com> 1578977519 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1580217173 -0300\n\ncodegen_place and related functions can take PlaceRef by value\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39d93b1ef8f3e985039a0878e539c7a9ee621a32", "html_url": "https://github.com/rust-lang/rust/commit/39d93b1ef8f3e985039a0878e539c7a9ee621a32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39d93b1ef8f3e985039a0878e539c7a9ee621a32/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10b19f6deec72765c5f28420c80b1e86f2536b7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/10b19f6deec72765c5f28420c80b1e86f2536b7b", "html_url": "https://github.com/rust-lang/rust/commit/10b19f6deec72765c5f28420c80b1e86f2536b7b"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "339a6efb8351a111df39d87ed9f3fdd477a2b229", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/39d93b1ef8f3e985039a0878e539c7a9ee621a32/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d93b1ef8f3e985039a0878e539c7a9ee621a32/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=39d93b1ef8f3e985039a0878e539c7a9ee621a32", "patch": "@@ -264,7 +264,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n \n             PassMode::Direct(_) | PassMode::Pair(..) => {\n-                let op = self.codegen_consume(&mut bx, &mir::Place::return_place().as_ref());\n+                let op = self.codegen_consume(&mut bx, mir::Place::return_place().as_ref());\n                 if let Ref(llval, _, align) = op.val {\n                     bx.load(llval, align)\n                 } else {\n@@ -319,7 +319,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             return;\n         }\n \n-        let place = self.codegen_place(&mut bx, &location.as_ref());\n+        let place = self.codegen_place(&mut bx, location.as_ref());\n         let (args1, args2);\n         let mut args = if let Some(llextra) = place.llextra {\n             args2 = [place.llval, llextra];\n@@ -1111,7 +1111,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         } else {\n             self.codegen_place(\n                 bx,\n-                &mir::PlaceRef { local: &dest.local, projection: &dest.projection },\n+                mir::PlaceRef { local: &dest.local, projection: &dest.projection },\n             )\n         };\n         if fn_ret.is_indirect() {\n@@ -1137,7 +1137,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 LocalRef::Place(place) => self.codegen_transmute_into(bx, src, place),\n                 LocalRef::UnsizedPlace(_) => bug!(\"transmute must not involve unsized locals\"),\n                 LocalRef::Operand(None) => {\n-                    let dst_layout = bx.layout_of(self.monomorphized_place_ty(&dst.as_ref()));\n+                    let dst_layout = bx.layout_of(self.monomorphized_place_ty(dst.as_ref()));\n                     assert!(!dst_layout.ty.has_erasable_regions());\n                     let place = PlaceRef::alloca(bx, dst_layout);\n                     place.storage_live(bx);\n@@ -1151,7 +1151,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 }\n             }\n         } else {\n-            let dst = self.codegen_place(bx, &dst.as_ref());\n+            let dst = self.codegen_place(bx, dst.as_ref());\n             self.codegen_transmute_into(bx, src, dst);\n         }\n     }"}, {"sha": "363967510dc085778747ecb96e619cc7e58c2d8b", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39d93b1ef8f3e985039a0878e539c7a9ee621a32/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d93b1ef8f3e985039a0878e539c7a9ee621a32/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=39d93b1ef8f3e985039a0878e539c7a9ee621a32", "patch": "@@ -369,7 +369,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     fn maybe_codegen_consume_direct(\n         &mut self,\n         bx: &mut Bx,\n-        place_ref: &mir::PlaceRef<'_, 'tcx>,\n+        place_ref: mir::PlaceRef<'_, 'tcx>,\n     ) -> Option<OperandRef<'tcx, Bx::Value>> {\n         debug!(\"maybe_codegen_consume_direct(place_ref={:?})\", place_ref);\n \n@@ -413,7 +413,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn codegen_consume(\n         &mut self,\n         bx: &mut Bx,\n-        place_ref: &mir::PlaceRef<'_, 'tcx>,\n+        place_ref: mir::PlaceRef<'_, 'tcx>,\n     ) -> OperandRef<'tcx, Bx::Value> {\n         debug!(\"codegen_consume(place_ref={:?})\", place_ref);\n \n@@ -444,7 +444,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         match *operand {\n             mir::Operand::Copy(ref place) | mir::Operand::Move(ref place) => {\n-                self.codegen_consume(bx, &place.as_ref())\n+                self.codegen_consume(bx, place.as_ref())\n             }\n \n             mir::Operand::Constant(ref constant) => {"}, {"sha": "1fe9b6ed4b6bb2cbf8d974449025b897de1e099a", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/39d93b1ef8f3e985039a0878e539c7a9ee621a32/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d93b1ef8f3e985039a0878e539c7a9ee621a32/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=39d93b1ef8f3e985039a0878e539c7a9ee621a32", "patch": "@@ -408,14 +408,14 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn codegen_place(\n         &mut self,\n         bx: &mut Bx,\n-        place_ref: &mir::PlaceRef<'_, 'tcx>,\n+        place_ref: mir::PlaceRef<'_, 'tcx>,\n     ) -> PlaceRef<'tcx, Bx::Value> {\n         debug!(\"codegen_place(place_ref={:?})\", place_ref);\n         let cx = self.cx;\n         let tcx = self.cx.tcx();\n \n         let result = match place_ref {\n-            mir::PlaceRef { local, projection: [] } => match self.locals[**local] {\n+            mir::PlaceRef { local, projection: [] } => match self.locals[*local] {\n                 LocalRef::Place(place) => {\n                     return place;\n                 }\n@@ -428,13 +428,13 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             },\n             mir::PlaceRef { local, projection: [proj_base @ .., mir::ProjectionElem::Deref] } => {\n                 // Load the pointer from its location.\n-                self.codegen_consume(bx, &mir::PlaceRef { local, projection: proj_base })\n+                self.codegen_consume(bx, mir::PlaceRef { local, projection: proj_base })\n                     .deref(bx.cx())\n             }\n             mir::PlaceRef { local, projection: [proj_base @ .., elem] } => {\n                 // FIXME turn this recursion into iteration\n                 let cg_base =\n-                    self.codegen_place(bx, &mir::PlaceRef { local, projection: proj_base });\n+                    self.codegen_place(bx, mir::PlaceRef { local, projection: proj_base });\n \n                 match elem {\n                     mir::ProjectionElem::Deref => bug!(),\n@@ -497,7 +497,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         result\n     }\n \n-    pub fn monomorphized_place_ty(&self, place_ref: &mir::PlaceRef<'_, 'tcx>) -> Ty<'tcx> {\n+    pub fn monomorphized_place_ty(&self, place_ref: mir::PlaceRef<'_, 'tcx>) -> Ty<'tcx> {\n         let tcx = self.cx.tcx();\n         let place_ty = mir::Place::ty_from(place_ref.local, place_ref.projection, *self.mir, tcx);\n         self.monomorphize(&place_ty.ty)"}, {"sha": "2f83298741aa610506071b07cf36c62cd4a06e0c", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39d93b1ef8f3e985039a0878e539c7a9ee621a32/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d93b1ef8f3e985039a0878e539c7a9ee621a32/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=39d93b1ef8f3e985039a0878e539c7a9ee621a32", "patch": "@@ -467,7 +467,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             mir::Rvalue::Discriminant(ref place) => {\n                 let discr_ty = rvalue.ty(*self.mir, bx.tcx());\n                 let discr = self\n-                    .codegen_place(&mut bx, &place.as_ref())\n+                    .codegen_place(&mut bx, place.as_ref())\n                     .codegen_get_discr(&mut bx, discr_ty);\n                 (\n                     bx,\n@@ -541,7 +541,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             }\n         }\n         // use common size calculation for non zero-sized types\n-        let cg_value = self.codegen_place(bx, &place.as_ref());\n+        let cg_value = self.codegen_place(bx, place.as_ref());\n         cg_value.len(bx.cx())\n     }\n \n@@ -552,7 +552,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         place: &mir::Place<'tcx>,\n         mk_ptr_ty: impl FnOnce(TyCtxt<'tcx>, Ty<'tcx>) -> Ty<'tcx>,\n     ) -> (Bx, OperandRef<'tcx, Bx::Value>) {\n-        let cg_place = self.codegen_place(&mut bx, &place.as_ref());\n+        let cg_place = self.codegen_place(&mut bx, place.as_ref());\n \n         let ty = cg_place.layout.ty;\n "}, {"sha": "e68b41ad188792eefe3e52fe0e861f3d06a4d7e5", "filename": "src/librustc_codegen_ssa/mir/statement.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39d93b1ef8f3e985039a0878e539c7a9ee621a32/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d93b1ef8f3e985039a0878e539c7a9ee621a32/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fstatement.rs?ref=39d93b1ef8f3e985039a0878e539c7a9ee621a32", "patch": "@@ -41,12 +41,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         }\n                     }\n                 } else {\n-                    let cg_dest = self.codegen_place(&mut bx, &place.as_ref());\n+                    let cg_dest = self.codegen_place(&mut bx, place.as_ref());\n                     self.codegen_rvalue(bx, cg_dest, rvalue)\n                 }\n             }\n             mir::StatementKind::SetDiscriminant { box ref place, variant_index } => {\n-                self.codegen_place(&mut bx, &place.as_ref())\n+                self.codegen_place(&mut bx, place.as_ref())\n                     .codegen_set_discr(&mut bx, variant_index);\n                 bx\n             }\n@@ -70,7 +70,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let outputs = asm\n                     .outputs\n                     .iter()\n-                    .map(|output| self.codegen_place(&mut bx, &output.as_ref()))\n+                    .map(|output| self.codegen_place(&mut bx, output.as_ref()))\n                     .collect();\n \n                 let input_vals = asm.inputs.iter().fold("}]}