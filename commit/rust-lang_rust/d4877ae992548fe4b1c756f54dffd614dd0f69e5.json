{"sha": "d4877ae992548fe4b1c756f54dffd614dd0f69e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ODc3YWU5OTI1NDhmZTRiMWM3NTZmNTRkZmZkNjE0ZGQwZjY5ZTU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-23T16:58:19Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-23T16:58:19Z"}, "message": "Add predicate tests for ide_completions", "tree": {"sha": "72059afcc2e73d9e101acb5510e221ad32561384", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72059afcc2e73d9e101acb5510e221ad32561384"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4877ae992548fe4b1c756f54dffd614dd0f69e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4877ae992548fe4b1c756f54dffd614dd0f69e5", "html_url": "https://github.com/rust-lang/rust/commit/d4877ae992548fe4b1c756f54dffd614dd0f69e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4877ae992548fe4b1c756f54dffd614dd0f69e5/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc4876d33dc9713507a40569c01c6c335515f376", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc4876d33dc9713507a40569c01c6c335515f376", "html_url": "https://github.com/rust-lang/rust/commit/dc4876d33dc9713507a40569c01c6c335515f376"}], "stats": {"total": 158, "additions": 144, "deletions": 14}, "files": [{"sha": "d9754053470fd9c210745b1193b5641495925edd", "filename": "crates/ide_completion/src/completions/dot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4877ae992548fe4b1c756f54dffd614dd0f69e5/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4877ae992548fe4b1c756f54dffd614dd0f69e5/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=d4877ae992548fe4b1c756f54dffd614dd0f69e5", "patch": "@@ -33,7 +33,7 @@ fn complete_undotted_self(acc: &mut Completions, ctx: &CompletionContext) {\n     if !ctx.config.enable_self_on_the_fly {\n         return;\n     }\n-    if !ctx.is_trivial_path() || ctx.is_path_disallowed() {\n+    if !ctx.is_trivial_path() || ctx.is_path_disallowed() || !ctx.expects_expression() {\n         return;\n     }\n     ctx.scope.process_all_names(&mut |name, def| {"}, {"sha": "89faa9526c43e67eac98763666a11902436cf313", "filename": "crates/ide_completion/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4877ae992548fe4b1c756f54dffd614dd0f69e5/crates%2Fide_completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4877ae992548fe4b1c756f54dffd614dd0f69e5/crates%2Fide_completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests.rs?ref=d4877ae992548fe4b1c756f54dffd614dd0f69e5", "patch": "@@ -9,7 +9,7 @@ mod use_tree;\n mod items;\n mod pattern;\n mod type_pos;\n-mod where_clause;\n+mod predicate;\n \n use std::mem;\n "}, {"sha": "04ff08669dfef55041bb4c93f96fcb8fa0a360be", "filename": "crates/ide_completion/src/tests/predicate.rs", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/d4877ae992548fe4b1c756f54dffd614dd0f69e5/crates%2Fide_completion%2Fsrc%2Ftests%2Fpredicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4877ae992548fe4b1c756f54dffd614dd0f69e5/crates%2Fide_completion%2Fsrc%2Ftests%2Fpredicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fpredicate.rs?ref=d4877ae992548fe4b1c756f54dffd614dd0f69e5", "patch": "@@ -0,0 +1,142 @@\n+//! Completion tests for predicates and bounds.\n+use expect_test::{expect, Expect};\n+\n+use crate::tests::{completion_list, BASE_FIXTURE};\n+\n+fn check(ra_fixture: &str, expect: Expect) {\n+    let actual = completion_list(&format!(\"{}\\n{}\", BASE_FIXTURE, ra_fixture));\n+    expect.assert_eq(&actual)\n+}\n+\n+#[test]\n+fn predicate_start() {\n+    // FIXME: `for` kw\n+    check(\n+        r#\"\n+struct Foo<'lt, T, const C: usize> where $0 {}\n+\"#,\n+        expect![[r#\"\n+            tt Trait\n+            en Enum\n+            st Record\n+            st Tuple\n+            md module\n+            st Foo<\u2026>\n+            st Unit\n+            ma makro!(\u2026) macro_rules! makro\n+            bt u32\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn bound_for_type_pred() {\n+    // FIXME: only show traits, macros and modules\n+    check(\n+        r#\"\n+struct Foo<'lt, T, const C: usize> where T: $0 {}\n+\"#,\n+        expect![[r#\"\n+            sp Self\n+            tp T\n+            tt Trait\n+            en Enum\n+            st Record\n+            st Tuple\n+            md module\n+            st Foo<\u2026>\n+            st Unit\n+            ma makro!(\u2026) macro_rules! makro\n+            bt u32\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn bound_for_lifetime_pred() {\n+    // FIXME: should only show lifetimes here\n+    check(\n+        r#\"\n+struct Foo<'lt, T, const C: usize> where 'lt: $0 {}\n+\"#,\n+        expect![[r#\"\n+            sp Self\n+            tp T\n+            tt Trait\n+            en Enum\n+            st Record\n+            st Tuple\n+            md module\n+            st Foo<\u2026>\n+            st Unit\n+            ma makro!(\u2026) macro_rules! makro\n+            bt u32\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn bound_for_for_pred() {\n+    // FIXME: only show traits, macros and modules\n+    check(\n+        r#\"\n+struct Foo<'lt, T, const C: usize> where for<'a> T: $0 {}\n+\"#,\n+        expect![[r#\"\n+            sp Self\n+            tp T\n+            tt Trait\n+            en Enum\n+            st Record\n+            st Tuple\n+            md module\n+            st Foo<\u2026>\n+            st Unit\n+            ma makro!(\u2026) macro_rules! makro\n+            bt u32\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn param_list_for_for_pred() {\n+    check(\n+        r#\"\n+struct Foo<'lt, T, const C: usize> where for<'a> $0 {}\n+\"#,\n+        expect![[r#\"\n+            tt Trait\n+            en Enum\n+            st Record\n+            st Tuple\n+            md module\n+            st Foo<\u2026>\n+            st Unit\n+            ma makro!(\u2026) macro_rules! makro\n+            bt u32\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn pred_on_fn_in_impl() {\n+    // FIXME: only show traits, macros and modules\n+    check(\n+        r#\"\n+impl Record {\n+    fn method(self) where $0 {}\n+}\n+\"#,\n+        expect![[r#\"\n+            sp Self\n+            tt Trait\n+            en Enum\n+            st Record\n+            st Tuple\n+            md module\n+            st Unit\n+            ma makro!(\u2026) macro_rules! makro\n+            bt u32\n+        \"#]],\n+    );\n+}"}, {"sha": "0395cbf37a7103801ce142c70a2ab961902f3243", "filename": "crates/ide_completion/src/tests/where_clause.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dc4876d33dc9713507a40569c01c6c335515f376/crates%2Fide_completion%2Fsrc%2Ftests%2Fwhere_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc4876d33dc9713507a40569c01c6c335515f376/crates%2Fide_completion%2Fsrc%2Ftests%2Fwhere_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fwhere_clause.rs?ref=dc4876d33dc9713507a40569c01c6c335515f376", "patch": "@@ -1,12 +0,0 @@\n-//! Completion tests for inside of where clauses.\n-//!\n-//! The parent of the where clause tends to bleed completions of itself into the where clause so this\n-//! has to be thoroughly tested.\n-use expect_test::{expect, Expect};\n-\n-use crate::tests::completion_list;\n-\n-fn check(ra_fixture: &str, expect: Expect) {\n-    let actual = completion_list(ra_fixture);\n-    expect.assert_eq(&actual)\n-}"}]}