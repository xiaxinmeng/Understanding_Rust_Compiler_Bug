{"sha": "11b7109b7b3b1ad69d7137d1509fac7a8edda92e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExYjcxMDliN2IzYjFhZDY5ZDcxMzdkMTUwOWZhYzdhOGVkZGE5MmU=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-30T21:45:53Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-30T22:16:35Z"}, "message": "rm only use of type_is_immediate outside of trans", "tree": {"sha": "a8a4e6f8da7a18884b8faa9625b956b503589b4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8a4e6f8da7a18884b8faa9625b956b503589b4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11b7109b7b3b1ad69d7137d1509fac7a8edda92e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11b7109b7b3b1ad69d7137d1509fac7a8edda92e", "html_url": "https://github.com/rust-lang/rust/commit/11b7109b7b3b1ad69d7137d1509fac7a8edda92e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11b7109b7b3b1ad69d7137d1509fac7a8edda92e/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5011bbfbb69fd92a2b2d973a1cab1613a567afc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5011bbfbb69fd92a2b2d973a1cab1613a567afc6", "html_url": "https://github.com/rust-lang/rust/commit/5011bbfbb69fd92a2b2d973a1cab1613a567afc6"}], "stats": {"total": 79, "additions": 43, "deletions": 36}, "files": [{"sha": "264ad3c7c5780537a893db2ad786e2246fd5026b", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11b7109b7b3b1ad69d7137d1509fac7a8edda92e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b7109b7b3b1ad69d7137d1509fac7a8edda92e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=11b7109b7b3b1ad69d7137d1509fac7a8edda92e", "patch": "@@ -1121,13 +1121,13 @@ pub fn do_spill_noroot(cx: @mut Block, v: ValueRef) -> ValueRef {\n \n pub fn spill_if_immediate(cx: @mut Block, v: ValueRef, t: ty::t) -> ValueRef {\n     let _icx = push_ctxt(\"spill_if_immediate\");\n-    if ty::type_is_immediate(cx.tcx(), t) { return do_spill(cx, v, t); }\n+    if type_is_immediate(cx.tcx(), t) { return do_spill(cx, v, t); }\n     return v;\n }\n \n pub fn load_if_immediate(cx: @mut Block, v: ValueRef, t: ty::t) -> ValueRef {\n     let _icx = push_ctxt(\"load_if_immediate\");\n-    if ty::type_is_immediate(cx.tcx(), t) { return Load(cx, v); }\n+    if type_is_immediate(cx.tcx(), t) { return Load(cx, v); }\n     return v;\n }\n "}, {"sha": "f030fb4996b59fe16af1755667ce73bc9fe305ee", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/11b7109b7b3b1ad69d7137d1509fac7a8edda92e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b7109b7b3b1ad69d7137d1509fac7a8edda92e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=11b7109b7b3b1ad69d7137d1509fac7a8edda92e", "patch": "@@ -15,7 +15,7 @@ use driver::session;\n use driver::session::Session;\n use lib::llvm::{ValueRef, BasicBlockRef, BuilderRef};\n use lib::llvm::{True, False, Bool};\n-use lib::llvm::{llvm};\n+use lib::llvm::llvm;\n use lib;\n use middle::lang_items::LangItem;\n use middle::trans::base;\n@@ -28,24 +28,43 @@ use middle::ty::substs;\n use middle::ty;\n use middle::typeck;\n use middle::borrowck::root_map_key;\n-use util::ppaux::{Repr};\n+use util::ppaux::Repr;\n \n use middle::trans::type_::Type;\n \n use std::c_str::ToCStr;\n use std::cast::transmute;\n use std::cast;\n-use std::hashmap::{HashMap};\n+use std::hashmap::HashMap;\n use std::libc::{c_uint, c_longlong, c_ulonglong, c_char};\n use std::vec;\n-use syntax::ast::{Name,Ident};\n+use syntax::ast::{Name, Ident};\n use syntax::ast_map::{path, path_elt, path_pretty_name};\n use syntax::codemap::Span;\n use syntax::parse::token;\n use syntax::{ast, ast_map};\n \n pub use middle::trans::context::CrateContext;\n \n+fn type_is_newtype_immediate(cx: ty::ctxt, ty: ty::t) -> bool {\n+    match ty::get(ty).sty {\n+        ty::ty_struct(def_id, ref substs) => {\n+            let fields = ty::struct_fields(cx, def_id, substs);\n+            fields.len() == 1 &&\n+                fields[0].ident.name == token::special_idents::unnamed_field.name &&\n+                type_is_immediate(cx, fields[0].mt.ty)\n+        }\n+        _ => false\n+    }\n+}\n+\n+pub fn type_is_immediate(cx: ty::ctxt, ty: ty::t) -> bool {\n+    ty::type_is_scalar(ty) || ty::type_is_boxed(ty) ||\n+        ty::type_is_unique(ty) || ty::type_is_region_ptr(ty) ||\n+        type_is_newtype_immediate(cx, ty) ||\n+        ty::type_is_simd(cx, ty)\n+}\n+\n pub fn gensym_name(name: &str) -> (Ident, path_elt) {\n     let name = token::gensym(name);\n     let ident = Ident::new(name);"}, {"sha": "e48174b04f840635d18da85316eb182ff1f30df2", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11b7109b7b3b1ad69d7137d1509fac7a8edda92e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b7109b7b3b1ad69d7137d1509fac7a8edda92e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=11b7109b7b3b1ad69d7137d1509fac7a8edda92e", "patch": "@@ -197,7 +197,7 @@ pub fn appropriate_mode(tcx: ty::ctxt, ty: ty::t) -> DatumMode {\n \n     if ty::type_is_voidish(ty) {\n         ByValue\n-    } else if ty::type_is_immediate(tcx, ty) {\n+    } else if type_is_immediate(tcx, ty) {\n         ByValue\n     } else {\n         ByRef(RevokeClean)\n@@ -667,7 +667,7 @@ impl Datum {\n                     ByValue => {\n                         // Actually, this case cannot happen right\n                         // now, because enums are never immediate.\n-                        assert!(ty::type_is_immediate(bcx.tcx(), ty));\n+                        assert!(type_is_immediate(bcx.tcx(), ty));\n                         (Some(Datum {ty: ty, ..*self}), bcx)\n                     }\n                 };\n@@ -699,7 +699,7 @@ impl Datum {\n                         )\n                     }\n                     ByValue => {\n-                        assert!(ty::type_is_immediate(bcx.tcx(), ty));\n+                        assert!(type_is_immediate(bcx.tcx(), ty));\n                         (\n                             Some(Datum {\n                                 val: ExtractValue(bcx, self.val, 0),"}, {"sha": "7933e97a6029e7604c69ff8be670d782905da371", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11b7109b7b3b1ad69d7137d1509fac7a8edda92e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b7109b7b3b1ad69d7137d1509fac7a8edda92e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=11b7109b7b3b1ad69d7137d1509fac7a8edda92e", "patch": "@@ -278,7 +278,7 @@ pub fn trans_intrinsic(ccx: @mut CrateContext,\n         \"uninit\" => {\n             // Do nothing, this is effectively a no-op\n             let retty = substs.tys[0];\n-            if ty::type_is_immediate(ccx.tcx, retty) && !ty::type_is_nil(retty) {\n+            if type_is_immediate(ccx.tcx, retty) && !ty::type_is_nil(retty) {\n                 unsafe {\n                     Ret(bcx, lib::llvm::llvm::LLVMGetUndef(type_of(ccx, retty).to_ref()));\n                 }\n@@ -316,7 +316,7 @@ pub fn trans_intrinsic(ccx: @mut CrateContext,\n \n             if !ty::type_is_voidish(out_type) {\n                 let llsrcval = get_param(decl, first_real_arg);\n-                if ty::type_is_immediate(ccx.tcx, in_type) {\n+                if type_is_immediate(ccx.tcx, in_type) {\n                     match fcx.llretptr {\n                         Some(llretptr) => {\n                             Store(bcx, llsrcval, PointerCast(bcx, llretptr, llintype.ptr_to()));\n@@ -335,7 +335,7 @@ pub fn trans_intrinsic(ccx: @mut CrateContext,\n                             }\n                         }\n                     }\n-                } else if ty::type_is_immediate(ccx.tcx, out_type) {\n+                } else if type_is_immediate(ccx.tcx, out_type) {\n                     let llsrcptr = PointerCast(bcx, llsrcval, llouttype.ptr_to());\n                     let ll_load = Load(bcx, llsrcptr);\n                     Ret(bcx, ll_load);"}, {"sha": "aab24f8365b11b6537247d97e4a8719e0e713b4f", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11b7109b7b3b1ad69d7137d1509fac7a8edda92e/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b7109b7b3b1ad69d7137d1509fac7a8edda92e/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=11b7109b7b3b1ad69d7137d1509fac7a8edda92e", "patch": "@@ -21,11 +21,11 @@ use syntax::ast;\n use syntax::opt_vec;\n \n pub fn arg_is_indirect(ccx: &CrateContext, arg_ty: ty::t) -> bool {\n-    !ty::type_is_immediate(ccx.tcx, arg_ty)\n+    !type_is_immediate(ccx.tcx, arg_ty)\n }\n \n pub fn return_uses_outptr(tcx: ty::ctxt, ty: ty::t) -> bool {\n-    !ty::type_is_immediate(tcx, ty)\n+    !type_is_immediate(tcx, ty)\n }\n \n pub fn type_of_explicit_arg(ccx: &mut CrateContext, arg_ty: ty::t) -> Type {"}, {"sha": "ed103f669157bfee43d7956402e32122941b9384", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/11b7109b7b3b1ad69d7137d1509fac7a8edda92e/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b7109b7b3b1ad69d7137d1509fac7a8edda92e/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=11b7109b7b3b1ad69d7137d1509fac7a8edda92e", "patch": "@@ -1752,25 +1752,6 @@ pub fn type_is_scalar(ty: t) -> bool {\n     }\n }\n \n-fn type_is_newtype_immediate(cx: ctxt, ty: t) -> bool {\n-    match get(ty).sty {\n-        ty_struct(def_id, ref substs) => {\n-            let fields = struct_fields(cx, def_id, substs);\n-            fields.len() == 1 &&\n-                fields[0].ident.name == token::special_idents::unnamed_field.name &&\n-                type_is_immediate(cx, fields[0].mt.ty)\n-        }\n-        _ => false\n-    }\n-}\n-\n-pub fn type_is_immediate(cx: ctxt, ty: t) -> bool {\n-    return type_is_scalar(ty) || type_is_boxed(ty) ||\n-        type_is_unique(ty) || type_is_region_ptr(ty) ||\n-        type_is_newtype_immediate(cx, ty) ||\n-        type_is_simd(cx, ty);\n-}\n-\n pub fn type_needs_drop(cx: ctxt, ty: t) -> bool {\n     type_contents(cx, ty).needs_drop(cx)\n }\n@@ -2538,6 +2519,13 @@ pub fn type_structurally_contains_uniques(cx: ctxt, ty: t) -> bool {\n     });\n }\n \n+pub fn type_is_trait(ty: t) -> bool {\n+    match get(ty).sty {\n+        ty_trait(*) => true,\n+        _ => false\n+    }\n+}\n+\n pub fn type_is_integral(ty: t) -> bool {\n     match get(ty).sty {\n       ty_infer(IntVar(_)) | ty_int(_) | ty_uint(_) => true,\n@@ -3289,10 +3277,10 @@ pub fn expr_kind(tcx: ctxt,\n         ast::ExprCast(*) => {\n             match tcx.node_types.find(&(expr.id as uint)) {\n                 Some(&t) => {\n-                    if ty::type_is_immediate(tcx, t) {\n-                        RvalueDatumExpr\n-                    } else {\n+                    if type_is_trait(t) {\n                         RvalueDpsExpr\n+                    } else {\n+                        RvalueDatumExpr\n                     }\n                 }\n                 None => {"}]}