{"sha": "30f76512710ce37729b88cbeeafc47945c1b7758", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwZjc2NTEyNzEwY2UzNzcyOWI4OGNiZWVhZmM0Nzk0NWMxYjc3NTg=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-04-23T08:54:22Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-04-23T08:54:22Z"}, "message": "Merge pull request #867 from Manishearth/#830\n\nCheck type for `SINGLE_CHAR_PATTERN`", "tree": {"sha": "0ef7af5328613a709255f77a12284759331a483c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ef7af5328613a709255f77a12284759331a483c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30f76512710ce37729b88cbeeafc47945c1b7758", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30f76512710ce37729b88cbeeafc47945c1b7758", "html_url": "https://github.com/rust-lang/rust/commit/30f76512710ce37729b88cbeeafc47945c1b7758", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30f76512710ce37729b88cbeeafc47945c1b7758/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7f7c9c460ef828830f4c2820d167fd5de5d0d94", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7f7c9c460ef828830f4c2820d167fd5de5d0d94", "html_url": "https://github.com/rust-lang/rust/commit/d7f7c9c460ef828830f4c2820d167fd5de5d0d94"}, {"sha": "de9a80cd102021c05ad0352369abe5bdf38ab57d", "url": "https://api.github.com/repos/rust-lang/rust/commits/de9a80cd102021c05ad0352369abe5bdf38ab57d", "html_url": "https://github.com/rust-lang/rust/commit/de9a80cd102021c05ad0352369abe5bdf38ab57d"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "73f6a7aa4b02c8203264892903efe8bf46fa1f49", "filename": "src/methods.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/30f76512710ce37729b88cbeeafc47945c1b7758/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30f76512710ce37729b88cbeeafc47945c1b7758/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=30f76512710ce37729b88cbeeafc47945c1b7758", "patch": "@@ -365,16 +365,23 @@ impl LateLintPass for MethodsPass {\n                     lint_cstring_as_ptr(cx, expr, &arglists[0][0], &arglists[1][0]);\n                 }\n \n-\n                 lint_or_fun_call(cx, expr, &name.node.as_str(), &args);\n+\n+                let self_ty = cx.tcx.expr_ty_adjusted(&args[0]);\n                 if args.len() == 1 && name.node.as_str() == \"clone\" {\n                     lint_clone_on_copy(cx, expr);\n-                    lint_clone_double_ref(cx, expr, &args[0]);\n+                    lint_clone_double_ref(cx, expr, &args[0], self_ty);\n                 }\n-                for &(method, pos) in &PATTERN_METHODS {\n-                    if name.node.as_str() == method && args.len() > pos {\n-                        lint_single_char_pattern(cx, expr, &args[pos]);\n+\n+                match self_ty.sty {\n+                    ty::TyRef(_, ty) if ty.ty.sty == ty::TyStr => {\n+                        for &(method, pos) in &PATTERN_METHODS {\n+                            if name.node.as_str() == method && args.len() > pos {\n+                                lint_single_char_pattern(cx, expr, &args[pos]);\n+                            }\n+                        }\n                     }\n+                    _ => (),\n                 }\n             }\n             ExprBinary(op, ref lhs, ref rhs) if op.node == BiEq || op.node == BiNe => {\n@@ -552,8 +559,7 @@ fn lint_clone_on_copy(cx: &LateContext, expr: &Expr) {\n }\n \n /// Checks for the `CLONE_DOUBLE_REF` lint.\n-fn lint_clone_double_ref(cx: &LateContext, expr: &Expr, arg: &Expr) {\n-    let ty = cx.tcx.expr_ty(arg);\n+fn lint_clone_double_ref(cx: &LateContext, expr: &Expr, arg: &Expr, ty: ty::Ty) {\n     if let ty::TyRef(_, ty::TypeAndMut { ty: ref inner, .. }) = ty.sty {\n         if let ty::TyRef(..) = inner.sty {\n             let mut db = span_lint(cx,"}, {"sha": "7503cb50746148bee11cd257aa934d5965f4c014", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30f76512710ce37729b88cbeeafc47945c1b7758/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30f76512710ce37729b88cbeeafc47945c1b7758/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=30f76512710ce37729b88cbeeafc47945c1b7758", "patch": "@@ -6,6 +6,7 @@\n \n use std::collections::BTreeMap;\n use std::collections::HashMap;\n+use std::collections::HashSet;\n use std::ops::Mul;\n \n struct T;\n@@ -469,6 +470,9 @@ fn single_char_pattern() {\n     //~^ ERROR single-character string constant used as pattern\n     //~| HELP try using a char instead:\n     //~| SUGGESTION x.trim_right_matches('x');\n+\n+    let h = HashSet::<String>::new();\n+    h.contains(\"X\"); // should not warn\n }\n \n #[allow(result_unwrap_used)]"}]}