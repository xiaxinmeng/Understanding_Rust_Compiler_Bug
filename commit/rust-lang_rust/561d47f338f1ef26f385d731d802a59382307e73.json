{"sha": "561d47f338f1ef26f385d731d802a59382307e73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MWQ0N2YzMzhmMWVmMjZmMzg1ZDczMWQ4MDJhNTkzODIzMDdlNzM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-14T15:46:56Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-14T15:46:56Z"}, "message": "Merge remote-tracking branch 'origin/master' into laurent_master", "tree": {"sha": "e0f46c53ba5794bff3370f7947c71c4619dcdf51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0f46c53ba5794bff3370f7947c71c4619dcdf51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/561d47f338f1ef26f385d731d802a59382307e73", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAloLD/IACgkQpp+NIls6\n19nZtA//V8CrDd3J8ZnUOG1lGxA/wbzh5YbSEryxbbthVRGlcKHWVaQyCjU3b/+f\na+t0sTCDmQDlVCtVhGVkCpz0AZKyrwKODwiWeS0lXBl/fEmKTxxNcdpO/0UbJ/O4\nh/DBNjnykWNUVIInsN+vGDBI3otQ5STX3wE6S6RUK6Z4NV07LdVfXq5PzS6CY+QA\nz5bZjNmOvMLX/w5GUULzRII3G3hrKq/XG0fMKhGmrQTUjkImUd8HuO+IKsnv+E1T\nE80ZPWgpSTp1lFMmd5bcMkfViyXhQgmq1mHqVa/kJd+lRWyVNv60yOoPcRyFa4Xs\njk3NyDvOK/hjueM3d/yaaUnqkDLRyiSdpBLsx8YcaM4yxLqmtDmUbQBuEblqXFQ2\n/veLtQS6imJrO99oTHxpXl2BlpP7C+MWROjiaZ6Xp4RSJjTnow+6G6ul5A+mXlaM\nJwZPN13ETY9Wug0bWepOItxgrPlC502CbgwKE7Im2W8LocjoGkX8meNV8uDrCto+\nIEKHPEj9Nmc/vT/GWSd2NkYcqEwgKfJ1xUOVKVm8/HQDJYSQlvsUQzjsdIdEEMsx\nSdHFxNNOt7oK/IZ17UGOQWc/zoi1tcH3BgZSlmNfLV6rLdBVjI7c7msdPc6EfLkp\nzuFyrGLvzVRiyjVRFVG58qSlXw8B5oH30xJFNZ7KkmwJ/Vquzlk=\n=vZYH\n-----END PGP SIGNATURE-----", "payload": "tree e0f46c53ba5794bff3370f7947c71c4619dcdf51\nparent 14d50133141d3c728c4497375dab7de14f19dbf5\nparent 09d988521dac5f5b49787faa8243c72e4dbae792\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1510674416 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1510674416 +0100\n\nMerge remote-tracking branch 'origin/master' into laurent_master\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/561d47f338f1ef26f385d731d802a59382307e73", "html_url": "https://github.com/rust-lang/rust/commit/561d47f338f1ef26f385d731d802a59382307e73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/561d47f338f1ef26f385d731d802a59382307e73/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14d50133141d3c728c4497375dab7de14f19dbf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/14d50133141d3c728c4497375dab7de14f19dbf5", "html_url": "https://github.com/rust-lang/rust/commit/14d50133141d3c728c4497375dab7de14f19dbf5"}, {"sha": "09d988521dac5f5b49787faa8243c72e4dbae792", "url": "https://api.github.com/repos/rust-lang/rust/commits/09d988521dac5f5b49787faa8243c72e4dbae792", "html_url": "https://github.com/rust-lang/rust/commit/09d988521dac5f5b49787faa8243c72e4dbae792"}], "stats": {"total": 299, "additions": 216, "deletions": 83}, "files": [{"sha": "4603c27e2669716e3238a67567c5b68cb990e08e", "filename": "CHANGELOG.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/561d47f338f1ef26f385d731d802a59382307e73/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/561d47f338f1ef26f385d731d802a59382307e73/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=561d47f338f1ef26f385d731d802a59382307e73", "patch": "@@ -1,6 +1,9 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n+## 0.0.170\n+* Rustup to *rustc 1.23.0-nightly (d6b06c63a 2017-11-09)*\n+\n ## 0.0.169\n * Rustup to *rustc 1.23.0-nightly (3b82e4c74 2017-11-05)*\n * New lints: [`just_underscores_and_digits`], [`result_map_unwrap_or_else`], [`transmute_bytes_to_str`]"}, {"sha": "157a0d18a99e34099b5936518f221089d004ab83", "filename": "Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/561d47f338f1ef26f385d731d802a59382307e73/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/561d47f338f1ef26f385d731d802a59382307e73/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=561d47f338f1ef26f385d731d802a59382307e73", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.0.169\"\n+version = \"0.0.170\"\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\",\n \t\"Andre Bogus <bogusandre@gmail.com>\",\n@@ -37,12 +37,12 @@ path = \"src/driver.rs\"\n \n [dependencies]\n # begin automatic update\n-clippy_lints = { version = \"0.0.169\", path = \"clippy_lints\" }\n+clippy_lints = { version = \"0.0.170\", path = \"clippy_lints\" }\n # end automatic update\n cargo_metadata = \"0.2\"\n \n [dev-dependencies]\n-compiletest_rs = \"0.2.7\"\n+compiletest_rs = \"0.3\"\n duct = \"0.8.2\"\n lazy_static = \"0.2\"\n regex = \"0.2\""}, {"sha": "e2b8d65468225afab8c94107f1cd81f2b917786a", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/561d47f338f1ef26f385d731d802a59382307e73/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/561d47f338f1ef26f385d731d802a59382307e73/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=561d47f338f1ef26f385d731d802a59382307e73", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"clippy_lints\"\n # begin automatic update\n-version = \"0.0.169\"\n+version = \"0.0.170\"\n # end automatic update\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\","}, {"sha": "babf3d3cc16fc9c372c115c1eca2d729ecf9d892", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 96, "deletions": 20, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/561d47f338f1ef26f385d731d802a59382307e73/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/561d47f338f1ef26f385d731d802a59382307e73/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=561d47f338f1ef26f385d731d802a59382307e73", "patch": "@@ -952,16 +952,17 @@ fn check_for_loop_range<'a, 'tcx>(\n             let mut visitor = VarVisitor {\n                 cx: cx,\n                 var: canonical_id,\n-                indexed: HashMap::new(),\n+                indexed_mut: HashSet::new(),\n+                indexed_indirectly: HashMap::new(),\n                 indexed_directly: HashMap::new(),\n                 referenced: HashSet::new(),\n                 nonindex: false,\n+                prefer_mutable: false,\n             };\n             walk_expr(&mut visitor, body);\n \n             // linting condition: we only indexed one variable, and indexed it directly\n-            // (`indexed_directly` is subset of `indexed`)\n-            if visitor.indexed.len() == 1 && visitor.indexed_directly.len() == 1 {\n+            if visitor.indexed_indirectly.is_empty() && visitor.indexed_directly.len() == 1 {\n                 let (indexed, indexed_extent) = visitor\n                     .indexed_directly\n                     .into_iter()\n@@ -1009,6 +1010,12 @@ fn check_for_loop_range<'a, 'tcx>(\n                     \"\".to_owned()\n                 };\n \n+                let (ref_mut, method) = if visitor.indexed_mut.contains(&indexed) {\n+                    (\"mut \", \"iter_mut\")\n+                } else {\n+                    (\"\", \"iter\")\n+                };\n+\n                 if visitor.nonindex {\n                     span_lint_and_then(\n                         cx,\n@@ -1021,16 +1028,16 @@ fn check_for_loop_range<'a, 'tcx>(\n                                 \"consider using an iterator\".to_string(),\n                                 vec![\n                                     (pat.span, format!(\"({}, <item>)\", ident.node)),\n-                                    (arg.span, format!(\"{}.iter().enumerate(){}{}\", indexed, take, skip)),\n+                                    (arg.span, format!(\"{}.{}().enumerate(){}{}\", indexed, method, take, skip)),\n                                 ],\n                             );\n                         },\n                     );\n                 } else {\n                     let repl = if starts_at_zero && take.is_empty() {\n-                        format!(\"&{}\", indexed)\n+                        format!(\"&{}{}\", ref_mut, indexed)\n                     } else {\n-                        format!(\"{}.iter(){}{}\", indexed, take, skip)\n+                        format!(\"{}.{}(){}{}\", indexed, method, take, skip)\n                     };\n \n                     span_lint_and_then(\n@@ -1537,8 +1544,10 @@ struct VarVisitor<'a, 'tcx: 'a> {\n     cx: &'a LateContext<'a, 'tcx>,\n     /// var name to look for as index\n     var: ast::NodeId,\n-    /// indexed variables, the extend is `None` for global\n-    indexed: HashMap<Name, Option<region::Scope>>,\n+    /// indexed variables that are used mutably\n+    indexed_mut: HashSet<Name>,\n+    /// indirectly indexed variables (`v[(i + 4) % N]`), the extend is `None` for global\n+    indexed_indirectly: HashMap<Name, Option<region::Scope>>,\n     /// subset of `indexed` of vars that are indexed directly: `v[i]`\n     /// this will not contain cases like `v[calc_index(i)]` or `v[(i + 4) % N]`\n     indexed_directly: HashMap<Name, Option<region::Scope>>,\n@@ -1548,20 +1557,21 @@ struct VarVisitor<'a, 'tcx: 'a> {\n     /// has the loop variable been used in expressions other than the index of\n     /// an index op?\n     nonindex: bool,\n+    /// Whether we are inside the `$` in `&mut $` or `$ = foo` or `$.bar`, where bar\n+    /// takes `&mut self`\n+    prefer_mutable: bool,\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n-    fn visit_expr(&mut self, expr: &'tcx Expr) {\n+impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n+    fn check(&mut self, idx: &'tcx Expr, seqexpr: &'tcx Expr, expr: &'tcx Expr) -> bool {\n         if_chain! {\n-            // an index op\n-            if let ExprIndex(ref seqexpr, ref idx) = expr.node;\n             // the indexed container is referenced by a name\n             if let ExprPath(ref seqpath) = seqexpr.node;\n             if let QPath::Resolved(None, ref seqvar) = *seqpath;\n             if seqvar.segments.len() == 1;\n             then {\n                 let index_used_directly = same_var(self.cx, idx, self.var);\n-                let index_used = index_used_directly || {\n+                let indexed_indirectly = {\n                     let mut used_visitor = LocalUsedVisitor {\n                         cx: self.cx,\n                         local: self.var,\n@@ -1571,7 +1581,10 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                     used_visitor.used\n                 };\n \n-                if index_used {\n+                if indexed_indirectly || index_used_directly {\n+                    if self.prefer_mutable {\n+                        self.indexed_mut.insert(seqvar.segments[0].name);\n+                    }\n                     let def = self.cx.tables.qpath_def(seqpath, seqexpr.hir_id);\n                     match def {\n                         Def::Local(node_id) | Def::Upvar(node_id, ..) => {\n@@ -1580,24 +1593,48 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                             let parent_id = self.cx.tcx.hir.get_parent(expr.id);\n                             let parent_def_id = self.cx.tcx.hir.local_def_id(parent_id);\n                             let extent = self.cx.tcx.region_scope_tree(parent_def_id).var_scope(hir_id.local_id);\n-                            self.indexed.insert(seqvar.segments[0].name, Some(extent));\n+                            if indexed_indirectly {\n+                                self.indexed_indirectly.insert(seqvar.segments[0].name, Some(extent));\n+                            }\n                             if index_used_directly {\n                                 self.indexed_directly.insert(seqvar.segments[0].name, Some(extent));\n                             }\n-                            return;  // no need to walk further *on the variable*\n+                            return false;  // no need to walk further *on the variable*\n                         }\n                         Def::Static(..) | Def::Const(..) => {\n-                            self.indexed.insert(seqvar.segments[0].name, None);\n+                            if indexed_indirectly {\n+                                self.indexed_indirectly.insert(seqvar.segments[0].name, None);\n+                            }\n                             if index_used_directly {\n                                 self.indexed_directly.insert(seqvar.segments[0].name, None);\n                             }\n-                            return;  // no need to walk further *on the variable*\n+                            return false;  // no need to walk further *on the variable*\n                         }\n                         _ => (),\n                     }\n                 }\n             }\n         }\n+        true\n+    }\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n+    fn visit_expr(&mut self, expr: &'tcx Expr) {\n+        if_chain! {\n+            // a range index op\n+            if let ExprMethodCall(ref meth, _, ref args) = expr.node;\n+            if meth.name == \"index\" || meth.name == \"index_mut\";\n+            if !self.check(&args[1], &args[0], expr);\n+            then { return }\n+        }\n+\n+        if_chain! {\n+            // an index op\n+            if let ExprIndex(ref seqexpr, ref idx) = expr.node;\n+            if !self.check(idx, seqexpr, expr);\n+            then { return }\n+        }\n \n         if_chain! {\n             // directly using a variable\n@@ -1615,8 +1652,47 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                 }\n             }\n         }\n-\n-        walk_expr(self, expr);\n+        let old = self.prefer_mutable;\n+        match expr.node {\n+            ExprAssignOp(_, ref lhs, ref rhs) |\n+            ExprAssign(ref lhs, ref rhs) => {\n+                self.prefer_mutable = true;\n+                self.visit_expr(lhs);\n+                self.prefer_mutable = false;\n+                self.visit_expr(rhs);\n+            },\n+            ExprAddrOf(mutbl, ref expr) => {\n+                if mutbl == MutMutable {\n+                    self.prefer_mutable = true;\n+                }\n+                self.visit_expr(expr);\n+            },\n+            ExprCall(ref f, ref args) => {\n+                for (ty, expr) in self.cx.tables.expr_ty(f).fn_sig(self.cx.tcx).inputs().skip_binder().iter().zip(args) {\n+                    self.prefer_mutable = false;\n+                    if let ty::TyRef(_, mutbl) = ty.sty {\n+                        if mutbl.mutbl == MutMutable {\n+                            self.prefer_mutable = true;\n+                        }\n+                    }\n+                    self.visit_expr(expr);\n+                }\n+            },\n+            ExprMethodCall(_, _, ref args) => {\n+                let def_id = self.cx.tables.type_dependent_defs()[expr.hir_id].def_id();\n+                for (ty, expr) in self.cx.tcx.fn_sig(def_id).inputs().skip_binder().iter().zip(args) {\n+                    self.prefer_mutable = false;\n+                    if let ty::TyRef(_, mutbl) = ty.sty {\n+                        if mutbl.mutbl == MutMutable {\n+                            self.prefer_mutable = true;\n+                        }\n+                    }\n+                    self.visit_expr(expr);\n+                }\n+            },\n+            _ => walk_expr(self, expr),\n+        }\n+        self.prefer_mutable = old;\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n         NestedVisitorMap::None"}, {"sha": "ee61920b4897ccf4abd19fd761e46ad1fa23c2f3", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/561d47f338f1ef26f385d731d802a59382307e73/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/561d47f338f1ef26f385d731d802a59382307e73/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=561d47f338f1ef26f385d731d802a59382307e73", "patch": "@@ -888,9 +888,8 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[hir:\n         }\n \n         // don't lint for constant values\n-        // FIXME: can we `expect` here instead of match?\n         let owner_def = cx.tcx.hir.get_parent_did(arg.id);\n-        let promotable = cx.tcx.rvalue_promotable_map(owner_def)[&arg.hir_id.local_id];\n+        let promotable = cx.tcx.rvalue_promotable_map(owner_def).contains(&arg.hir_id.local_id);\n         if promotable {\n             return;\n         }"}, {"sha": "a0323df1f624e24ec763e81c0770b4e94056d73e", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/561d47f338f1ef26f385d731d802a59382307e73/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/561d47f338f1ef26f385d731d802a59382307e73/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=561d47f338f1ef26f385d731d802a59382307e73", "patch": "@@ -620,14 +620,18 @@ where\n     I: IntoIterator<Item = (Span, String)>,\n {\n     let sugg = rustc_errors::CodeSuggestion {\n-        substitution_parts: sugg.into_iter()\n-            .map(|(span, sub)| {\n-                rustc_errors::Substitution {\n-                    span: span,\n-                    substitutions: vec![sub],\n-                }\n-            })\n-            .collect(),\n+        substitutions: vec![\n+            rustc_errors::Substitution {\n+                parts: sugg.into_iter()\n+                    .map(|(span, snippet)| {\n+                        rustc_errors::SubstitutionPart {\n+                            snippet,\n+                            span,\n+                        }\n+                    })\n+                    .collect(),\n+            }\n+        ],\n         msg: help_msg,\n         show_code_when_inline: true,\n     };"}, {"sha": "bd968cc6009ea7cddc11781c2c66d5b06f6f07a4", "filename": "tests/compile-test.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/561d47f338f1ef26f385d731d802a59382307e73/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/561d47f338f1ef26f385d731d802a59382307e73/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=561d47f338f1ef26f385d731d802a59382307e73", "patch": "@@ -22,7 +22,11 @@ fn run_mode(dir: &'static str, mode: &'static str) {\n     }\n \n     config.mode = cfg_mode;\n-    config.build_base = PathBuf::from(\"target/debug/test_build_base\");\n+    config.build_base = {\n+        let mut path = std::env::current_dir().unwrap();\n+        path.push(\"target/debug/test_build_base\");\n+        path\n+    };\n     config.src_base = PathBuf::from(format!(\"tests/{}\", dir));\n     config.rustc_path = clippy_driver_path();\n "}, {"sha": "c3dd9cf83f648c619bbd1c64a77a7b23497d08b4", "filename": "tests/ui/cstring.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/561d47f338f1ef26f385d731d802a59382307e73/tests%2Fui%2Fcstring.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/561d47f338f1ef26f385d731d802a59382307e73/tests%2Fui%2Fcstring.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcstring.stderr?ref=561d47f338f1ef26f385d731d802a59382307e73", "patch": "@@ -1,11 +1,3 @@\n-error: function is never used: `temporary_cstring`\n- --> $DIR/cstring.rs:4:1\n-  |\n-4 | fn temporary_cstring() {\n-  | ^^^^^^^^^^^^^^^^^^^^^^\n-  |\n-  = note: `-D dead-code` implied by `-D warnings`\n-\n error: you are getting the inner pointer of a temporary `CString`\n  --> $DIR/cstring.rs:7:5\n   |"}, {"sha": "f968e0888665d04571391ac418efd19d2908cd14", "filename": "tests/ui/for_loop.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/561d47f338f1ef26f385d731d802a59382307e73/tests%2Fui%2Ffor_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/561d47f338f1ef26f385d731d802a59382307e73/tests%2Fui%2Ffor_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.stderr?ref=561d47f338f1ef26f385d731d802a59382307e73", "patch": "@@ -82,7 +82,7 @@ error: the loop variable `i` is only used to index `vec`.\n help: consider using an iterator\n    |\n 86 |     for <item> in &vec {\n-   |         ^^^^^^\n+   |\n \n error: the loop variable `i` is only used to index `vec`.\n   --> $DIR/for_loop.rs:95:5\n@@ -95,7 +95,7 @@ error: the loop variable `i` is only used to index `vec`.\n help: consider using an iterator\n    |\n 95 |     for <item> in &vec {\n-   |         ^^^^^^\n+   |\n \n error: the loop variable `j` is only used to index `STATIC`.\n    --> $DIR/for_loop.rs:100:5\n@@ -108,7 +108,7 @@ error: the loop variable `j` is only used to index `STATIC`.\n help: consider using an iterator\n     |\n 100 |     for <item> in STATIC.iter().take(4) {\n-    |         ^^^^^^\n+    |\n \n error: the loop variable `j` is only used to index `CONST`.\n    --> $DIR/for_loop.rs:104:5\n@@ -121,7 +121,7 @@ error: the loop variable `j` is only used to index `CONST`.\n help: consider using an iterator\n     |\n 104 |     for <item> in CONST.iter().take(4) {\n-    |         ^^^^^^\n+    |\n \n error: the loop variable `i` is used to index `vec`\n    --> $DIR/for_loop.rs:108:5\n@@ -134,7 +134,7 @@ error: the loop variable `i` is used to index `vec`\n help: consider using an iterator\n     |\n 108 |     for (i, <item>) in vec.iter().enumerate() {\n-    |         ^^^^^^^^^^^\n+    |\n \n error: the loop variable `i` is only used to index `vec2`.\n    --> $DIR/for_loop.rs:116:5\n@@ -147,7 +147,7 @@ error: the loop variable `i` is only used to index `vec2`.\n help: consider using an iterator\n     |\n 116 |     for <item> in vec2.iter().take(vec.len()) {\n-    |         ^^^^^^\n+    |\n \n error: the loop variable `i` is only used to index `vec`.\n    --> $DIR/for_loop.rs:120:5\n@@ -160,7 +160,7 @@ error: the loop variable `i` is only used to index `vec`.\n help: consider using an iterator\n     |\n 120 |     for <item> in vec.iter().skip(5) {\n-    |         ^^^^^^\n+    |\n \n error: the loop variable `i` is only used to index `vec`.\n    --> $DIR/for_loop.rs:124:5\n@@ -173,7 +173,7 @@ error: the loop variable `i` is only used to index `vec`.\n help: consider using an iterator\n     |\n 124 |     for <item> in vec.iter().take(MAX_LEN) {\n-    |         ^^^^^^\n+    |\n \n error: the loop variable `i` is only used to index `vec`.\n    --> $DIR/for_loop.rs:128:5\n@@ -186,7 +186,7 @@ error: the loop variable `i` is only used to index `vec`.\n help: consider using an iterator\n     |\n 128 |     for <item> in vec.iter().take(MAX_LEN + 1) {\n-    |         ^^^^^^\n+    |\n \n error: the loop variable `i` is only used to index `vec`.\n    --> $DIR/for_loop.rs:132:5\n@@ -199,7 +199,7 @@ error: the loop variable `i` is only used to index `vec`.\n help: consider using an iterator\n     |\n 132 |     for <item> in vec.iter().take(10).skip(5) {\n-    |         ^^^^^^\n+    |\n \n error: the loop variable `i` is only used to index `vec`.\n    --> $DIR/for_loop.rs:136:5\n@@ -212,7 +212,7 @@ error: the loop variable `i` is only used to index `vec`.\n help: consider using an iterator\n     |\n 136 |     for <item> in vec.iter().take(10 + 1).skip(5) {\n-    |         ^^^^^^\n+    |\n \n error: the loop variable `i` is used to index `vec`\n    --> $DIR/for_loop.rs:140:5\n@@ -225,7 +225,7 @@ error: the loop variable `i` is used to index `vec`\n help: consider using an iterator\n     |\n 140 |     for (i, <item>) in vec.iter().enumerate().skip(5) {\n-    |         ^^^^^^^^^^^\n+    |\n \n error: the loop variable `i` is used to index `vec`\n    --> $DIR/for_loop.rs:144:5\n@@ -238,7 +238,7 @@ error: the loop variable `i` is used to index `vec`\n help: consider using an iterator\n     |\n 144 |     for (i, <item>) in vec.iter().enumerate().take(10).skip(5) {\n-    |         ^^^^^^^^^^^\n+    |\n \n error: this range is empty so this for loop will never run\n    --> $DIR/for_loop.rs:148:5\n@@ -448,7 +448,7 @@ error: you seem to want to iterate on a map's values\n help: use the corresponding method\n     |\n 385 |     for v in m.values() {\n-    |         ^\n+    |\n \n error: you seem to want to iterate on a map's values\n    --> $DIR/for_loop.rs:390:5\n@@ -464,7 +464,7 @@ error: you seem to want to iterate on a map's values\n help: use the corresponding method\n     |\n 390 |     for v in (*m).values() {\n-    |         ^\n+    |\n \n error: you seem to want to iterate on a map's values\n    --> $DIR/for_loop.rs:398:5\n@@ -477,7 +477,7 @@ error: you seem to want to iterate on a map's values\n help: use the corresponding method\n     |\n 398 |     for v in m.values_mut() {\n-    |         ^\n+    |\n \n error: you seem to want to iterate on a map's values\n    --> $DIR/for_loop.rs:403:5\n@@ -490,7 +490,7 @@ error: you seem to want to iterate on a map's values\n help: use the corresponding method\n     |\n 403 |     for v in (*m).values_mut() {\n-    |         ^\n+    |\n \n error: you seem to want to iterate on a map's keys\n    --> $DIR/for_loop.rs:409:5\n@@ -503,7 +503,7 @@ error: you seem to want to iterate on a map's keys\n help: use the corresponding method\n     |\n 409 |     for k in rm.keys() {\n-    |         ^\n+    |\n \n error: it looks like you're manually copying between slices\n    --> $DIR/for_loop.rs:462:5"}, {"sha": "52b686bf8aeef05f9b075be51ac50f2e5971e481", "filename": "tests/ui/implicit_hasher.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/561d47f338f1ef26f385d731d802a59382307e73/tests%2Fui%2Fimplicit_hasher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/561d47f338f1ef26f385d731d802a59382307e73/tests%2Fui%2Fimplicit_hasher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.stderr?ref=561d47f338f1ef26f385d731d802a59382307e73", "patch": "@@ -8,11 +8,11 @@ error: impl for `HashMap` should be generalized over different hashers\n help: consider adding a type parameter\n    |\n 11 | impl<K: Hash + Eq, V, S: ::std::hash::BuildHasher + Default> Foo<i8> for HashMap<K, V, S> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n help: ...and use generic constructor\n    |\n 17 |         (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default::default()))\n-   |          ^^^^^^^^^^^^^^^^^^\n+   |\n \n error: impl for `HashMap` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:20:36\n@@ -23,11 +23,11 @@ error: impl for `HashMap` should be generalized over different hashers\n help: consider adding a type parameter\n    |\n 20 | impl<K: Hash + Eq, V, S: ::std::hash::BuildHasher + Default> Foo<i8> for (HashMap<K, V, S>,) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n help: ...and use generic constructor\n    |\n 22 |         ((HashMap::default(),), (HashMap::with_capacity_and_hasher(10, Default::default()),))\n-   |           ^^^^^^^^^^^^^^^^^^\n+   |\n \n error: impl for `HashMap` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:25:19\n@@ -38,11 +38,11 @@ error: impl for `HashMap` should be generalized over different hashers\n help: consider adding a type parameter\n    |\n 25 | impl<S: ::std::hash::BuildHasher + Default> Foo<i16> for HashMap<String, String, S> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n help: ...and use generic constructor\n    |\n 27 |         (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default::default()))\n-   |          ^^^^^^^^^^^^^^^^^^\n+   |\n \n error: impl for `HashSet` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:43:32\n@@ -53,11 +53,11 @@ error: impl for `HashSet` should be generalized over different hashers\n help: consider adding a type parameter\n    |\n 43 | impl<T: Hash + Eq, S: ::std::hash::BuildHasher + Default> Foo<i8> for HashSet<T, S> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n help: ...and use generic constructor\n    |\n 45 |         (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default::default()))\n-   |          ^^^^^^^^^^^^^^^^^^\n+   |\n \n error: impl for `HashSet` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:48:19\n@@ -68,11 +68,11 @@ error: impl for `HashSet` should be generalized over different hashers\n help: consider adding a type parameter\n    |\n 48 | impl<S: ::std::hash::BuildHasher + Default> Foo<i16> for HashSet<String, S> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n help: ...and use generic constructor\n    |\n 50 |         (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default::default()))\n-   |          ^^^^^^^^^^^^^^^^^^\n+   |\n \n error: parameter of type `HashMap` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:65:23\n@@ -83,7 +83,7 @@ error: parameter of type `HashMap` should be generalized over different hashers\n help: consider adding a type parameter\n    |\n 65 | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32, S>, _set: &mut HashSet<i32>) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n \n error: parameter of type `HashSet` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:65:53\n@@ -94,7 +94,7 @@ error: parameter of type `HashSet` should be generalized over different hashers\n help: consider adding a type parameter\n    |\n 65 | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32, S>) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n \n error: impl for `HashMap` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:70:43\n@@ -108,11 +108,11 @@ error: impl for `HashMap` should be generalized over different hashers\n help: consider adding a type parameter\n    |\n 70 |         impl<K: Hash + Eq, V, S: ::std::hash::BuildHasher + Default> Foo<u8> for HashMap<K, V, S> {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n help: ...and use generic constructor\n    |\n 72 |                 (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default::default()))\n-   |                  ^^^^^^^^^^^^^^^^^^\n+   |\n \n error: parameter of type `HashMap` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:78:33\n@@ -126,7 +126,7 @@ error: parameter of type `HashMap` should be generalized over different hashers\n help: consider adding a type parameter\n    |\n 78 |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32, S>, _set: &mut HashSet<i32>) {\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n \n error: parameter of type `HashSet` should be generalized over different hashers\n   --> $DIR/implicit_hasher.rs:78:63\n@@ -140,5 +140,5 @@ error: parameter of type `HashSet` should be generalized over different hashers\n help: consider adding a type parameter\n    |\n 78 |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32, S>) {\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n "}, {"sha": "7ff38a3534193fa63ad1ace50229a606199ae39d", "filename": "tests/ui/matches.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/561d47f338f1ef26f385d731d802a59382307e73/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/561d47f338f1ef26f385d731d802a59382307e73/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=561d47f338f1ef26f385d731d802a59382307e73", "patch": "@@ -133,7 +133,7 @@ error: you don't need to add `&` to all patterns\n help: instead of prefixing all patterns with `&`, you can dereference the expression\n     |\n 138 |         match *v { .. }\n-    |         ^^^^^^^^^^^^^^^\n+    |\n \n error: you don't need to add `&` to all patterns\n    --> $DIR/matches.rs:148:5\n@@ -147,7 +147,7 @@ error: you don't need to add `&` to all patterns\n help: instead of prefixing all patterns with `&`, you can dereference the expression\n     |\n 148 |     match *tup { .. }\n-    |     ^^^^^^^^^^^^^^^^^\n+    |\n \n error: you don't need to add `&` to both the expression and the patterns\n    --> $DIR/matches.rs:154:5\n@@ -169,7 +169,7 @@ error: you don't need to add `&` to all patterns\n help: instead of prefixing all patterns with `&`, you can dereference the expression\n     |\n 165 |     if let .. = *a { .. }\n-    |     ^^^^^^^^^^^^^^^^^^^^^\n+    |\n \n error: you don't need to add `&` to both the expression and the patterns\n    --> $DIR/matches.rs:170:5"}, {"sha": "30613f98f2bce3be8a6b8d8668d235cd74019801", "filename": "tests/ui/needless_range_loop.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/561d47f338f1ef26f385d731d802a59382307e73/tests%2Fui%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/561d47f338f1ef26f385d731d802a59382307e73/tests%2Fui%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_range_loop.rs?ref=561d47f338f1ef26f385d731d802a59382307e73", "patch": "@@ -24,4 +24,32 @@ fn main() {\n     for i in 3..10 {\n         println!(\"{}\", ns[calc_idx(i) % 4]);\n     }\n+\n+    let mut ms = vec![1, 2, 3, 4, 5, 6];\n+    for i in 0..ms.len() {\n+        ms[i] *= 2;\n+    }\n+    assert_eq!(ms, vec![2, 4, 6, 8, 10, 12]);\n+\n+    let mut ms = vec![1, 2, 3, 4, 5, 6];\n+    for i in 0..ms.len() {\n+        let x = &mut ms[i];\n+        *x *= 2;\n+    }\n+    assert_eq!(ms, vec![2, 4, 6, 8, 10, 12]);\n+\n+    let g = vec![1, 2, 3, 4, 5, 6];\n+    let glen = g.len();\n+    for i in 0..glen {\n+        let x: u32 = g[i+1..].iter().sum();\n+        println!(\"{}\", g[i] + x);\n+    }\n+    assert_eq!(g, vec![20, 18, 15, 11, 6, 0]);\n+\n+    let mut g = vec![1, 2, 3, 4, 5, 6];\n+    let glen = g.len();\n+    for i in 0..glen {\n+        g[i] = g[i+1..].iter().sum();\n+    }\n+    assert_eq!(g, vec![20, 18, 15, 11, 6, 0]);\n }"}, {"sha": "97328f3d4d1d6f278ff4248743c620b06e9b4616", "filename": "tests/ui/needless_range_loop.stderr", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/561d47f338f1ef26f385d731d802a59382307e73/tests%2Fui%2Fneedless_range_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/561d47f338f1ef26f385d731d802a59382307e73/tests%2Fui%2Fneedless_range_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_range_loop.stderr?ref=561d47f338f1ef26f385d731d802a59382307e73", "patch": "@@ -10,5 +10,32 @@ error: the loop variable `i` is only used to index `ns`.\n help: consider using an iterator\n    |\n 8  |     for <item> in ns.iter().take(10).skip(3) {\n+   |\n+\n+error: the loop variable `i` is only used to index `ms`.\n+  --> $DIR/needless_range_loop.rs:29:5\n+   |\n+29 | /     for i in 0..ms.len() {\n+30 | |         ms[i] *= 2;\n+31 | |     }\n+   | |_____^\n+   |\n+help: consider using an iterator\n+   |\n+29 |     for <item> in &mut ms {\n+   |         ^^^^^^\n+\n+error: the loop variable `i` is only used to index `ms`.\n+  --> $DIR/needless_range_loop.rs:35:5\n+   |\n+35 | /     for i in 0..ms.len() {\n+36 | |         let x = &mut ms[i];\n+37 | |         *x *= 2;\n+38 | |     }\n+   | |_____^\n+   |\n+help: consider using an iterator\n+   |\n+35 |     for <item> in &mut ms {\n    |         ^^^^^^\n "}, {"sha": "32596944570eeab1f299da0035bc3927b5756504", "filename": "tests/ui/op_ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/561d47f338f1ef26f385d731d802a59382307e73/tests%2Fui%2Fop_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/561d47f338f1ef26f385d731d802a59382307e73/tests%2Fui%2Fop_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fop_ref.stderr?ref=561d47f338f1ef26f385d731d802a59382307e73", "patch": "@@ -8,5 +8,5 @@ error: needlessly taken reference of both operands\n help: use the values directly\n    |\n 13 |     let foo = 5 - 6;\n-   |               ^\n+   |\n "}, {"sha": "9c6804cd9a000abace4bbdcb93ff32d4e9d61251", "filename": "tests/ui/ptr_arg.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/561d47f338f1ef26f385d731d802a59382307e73/tests%2Fui%2Fptr_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/561d47f338f1ef26f385d731d802a59382307e73/tests%2Fui%2Fptr_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.stderr?ref=561d47f338f1ef26f385d731d802a59382307e73", "patch": "@@ -35,7 +35,7 @@ help: change `x.clone()` to\n help: change `x.clone()` to\n    |\n 46 |     x.to_owned()\n-   |     ^^^^^^^^^^^^\n+   |\n \n error: writing `&String` instead of `&str` involves a new object where a slice will do.\n   --> $DIR/ptr_arg.rs:49:18\n@@ -58,7 +58,7 @@ help: change `x.clone()` to\n help: change `x.clone()` to\n    |\n 56 |     x.to_string()\n-   |     ^^^^^^^^^^^^^\n+   |\n \n error: writing `&String` instead of `&str` involves a new object where a slice will do.\n   --> $DIR/ptr_arg.rs:59:44"}]}