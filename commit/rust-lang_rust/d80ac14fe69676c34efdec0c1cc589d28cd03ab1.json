{"sha": "d80ac14fe69676c34efdec0c1cc589d28cd03ab1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MGFjMTRmZTY5Njc2YzM0ZWZkZWMwYzFjYzU4OWQyOGNkMDNhYjE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-04-30T13:37:00Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-05-07T18:08:08Z"}, "message": "Extend rustdoc-js tester to allow to test multiple queries in one file", "tree": {"sha": "3a317aafd61fa1671175707049af9e6a73581cce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a317aafd61fa1671175707049af9e6a73581cce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d80ac14fe69676c34efdec0c1cc589d28cd03ab1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d80ac14fe69676c34efdec0c1cc589d28cd03ab1", "html_url": "https://github.com/rust-lang/rust/commit/d80ac14fe69676c34efdec0c1cc589d28cd03ab1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d80ac14fe69676c34efdec0c1cc589d28cd03ab1/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97f3eeec8216d7155c24674b9be55e7c672bcae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/97f3eeec8216d7155c24674b9be55e7c672bcae3", "html_url": "https://github.com/rust-lang/rust/commit/97f3eeec8216d7155c24674b9be55e7c672bcae3"}], "stats": {"total": 98, "additions": 65, "deletions": 33}, "files": [{"sha": "72bc496c5b5d34e5083e091181327bf5ef3330c5", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 65, "deletions": 33, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/d80ac14fe69676c34efdec0c1cc589d28cd03ab1/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/d80ac14fe69676c34efdec0c1cc589d28cd03ab1/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=d80ac14fe69676c34efdec0c1cc589d28cd03ab1", "patch": "@@ -181,7 +181,7 @@ function loadThings(thingsToLoad, kindOfLoad, funcToCall, fileContent) {\n     for (var i = 0; i < thingsToLoad.length; ++i) {\n         var tmp = funcToCall(fileContent, thingsToLoad[i]);\n         if (tmp === null) {\n-            console.error('unable to find ' + kindOfLoad + ' \"' + thingsToLoad[i] + '\"');\n+            console.log('unable to find ' + kindOfLoad + ' \"' + thingsToLoad[i] + '\"');\n             process.exit(1);\n         }\n         content += tmp;\n@@ -223,7 +223,8 @@ function loadMainJsAndIndex(mainJs, aliases, searchIndex, crate) {\n         searchIndex.pop();\n     }\n     searchIndex.pop();\n-    searchIndex = loadContent(searchIndex.join(\"\\n\") + '\\nexports.searchIndex = searchIndex;');\n+    var fullSearchIndex = searchIndex.join(\"\\n\") + '\\nexports.rawSearchIndex = searchIndex;';\n+    searchIndex = loadContent(fullSearchIndex);\n     var finalJS = \"\";\n \n     var arraysToLoad = [\"itemTypes\"];\n@@ -235,7 +236,7 @@ function loadMainJsAndIndex(mainJs, aliases, searchIndex, crate) {\n     // execQuery last parameter is built in buildIndex.\n     // buildIndex requires the hashmap from search-index.\n     var functionsToLoad = [\"buildHrefAndPath\", \"pathSplitter\", \"levenshtein\", \"validateResult\",\n-                           \"getQuery\", \"buildIndex\", \"execQuery\", \"execSearch\"];\n+                           \"handleAliases\", \"getQuery\", \"buildIndex\", \"execQuery\", \"execSearch\"];\n \n     finalJS += 'window = { \"currentCrate\": \"' + crate + '\" };\\n';\n     finalJS += 'var rootPath = \"../\";\\n';\n@@ -245,24 +246,19 @@ function loadMainJsAndIndex(mainJs, aliases, searchIndex, crate) {\n     finalJS += loadThings(functionsToLoad, 'function', extractFunction, mainJs);\n \n     var loaded = loadContent(finalJS);\n-    var index = loaded.buildIndex(searchIndex.searchIndex);\n+    var index = loaded.buildIndex(searchIndex.rawSearchIndex);\n+    // We make it \"global\" so that the \"loaded.execSearch\" function will find it.\n+    rawSearchIndex = searchIndex.rawSearchIndex;\n \n     return [loaded, index];\n }\n \n-function runChecks(testFile, loaded, index) {\n-    var errors = 0;\n-    var loadedFile = loadContent(\n-        readFile(testFile) + 'exports.QUERY = QUERY;exports.EXPECTED = EXPECTED;');\n-\n-    const expected = loadedFile.EXPECTED;\n-    const query = loadedFile.QUERY;\n+function runSearch(query, expected, index, loaded, loadedFile, queryName) {\n     const filter_crate = loadedFile.FILTER_CRATE;\n     const ignore_order = loadedFile.ignore_order;\n     const exact_check = loadedFile.exact_check;\n-    const should_fail = loadedFile.should_fail;\n \n-    var results = loaded.execSearch(loaded.getQuery(query), index);\n+    var results = loaded.execSearch(loaded.getQuery(query), index, filter_crate);\n     var error_text = [];\n \n     for (var key in expected) {\n@@ -278,32 +274,68 @@ function runChecks(testFile, loaded, index) {\n         for (var i = 0; i < entry.length; ++i) {\n             var entry_pos = lookForEntry(entry[i], results[key]);\n             if (entry_pos === null) {\n-                error_text.push(\"==> Result not found in '\" + key + \"': '\" +\n+                error_text.push(queryName + \"==> Result not found in '\" + key + \"': '\" +\n                                 JSON.stringify(entry[i]) + \"'\");\n             } else if (exact_check === true && prev_pos + 1 !== entry_pos) {\n-                error_text.push(\"==> Exact check failed at position \" + (prev_pos + 1) + \": \" +\n-                                \"expected '\" + JSON.stringify(entry[i]) + \"' but found '\" +\n+                error_text.push(queryName + \"==> Exact check failed at position \" + (prev_pos + 1) +\n+                                \": expected '\" + JSON.stringify(entry[i]) + \"' but found '\" +\n                                 JSON.stringify(results[key][i]) + \"'\");\n             } else if (ignore_order === false && entry_pos < prev_pos) {\n-                error_text.push(\"==> '\" + JSON.stringify(entry[i]) + \"' was supposed to be \" +\n-                                \" before '\" + JSON.stringify(results[key][entry_pos]) + \"'\");\n+                error_text.push(queryName + \"==> '\" + JSON.stringify(entry[i]) + \"' was supposed \" +\n+                                \"to be before '\" + JSON.stringify(results[key][entry_pos]) + \"'\");\n             } else {\n                 prev_pos = entry_pos;\n             }\n         }\n     }\n-    if (error_text.length === 0 && should_fail === true) {\n-        errors += 1;\n-        console.error(\"FAILED\");\n-        console.error(\"==> Test was supposed to fail but all items were found...\");\n-    } else if (error_text.length !== 0 && should_fail === false) {\n-        errors += 1;\n-        console.error(\"FAILED\");\n-        console.error(error_text.join(\"\\n\"));\n+    return error_text;\n+}\n+\n+function checkResult(error_text, loadedFile, displaySuccess) {\n+    if (error_text.length === 0 && loadedFile.should_fail === true) {\n+        console.log(\"FAILED\");\n+        console.log(\"==> Test was supposed to fail but all items were found...\");\n+    } else if (error_text.length !== 0 && loadedFile.should_fail === false) {\n+        console.log(\"FAILED\");\n+        console.log(error_text.join(\"\\n\"));\n     } else {\n+        if (displaySuccess) {\n+            console.log(\"OK\");\n+        }\n+        return 0;\n+    }\n+    return 1;\n+}\n+\n+function runChecks(testFile, loaded, index) {\n+    var loadedFile = loadContent(\n+        readFile(testFile) + 'exports.QUERY = QUERY;exports.EXPECTED = EXPECTED;');\n+\n+    const expected = loadedFile.EXPECTED;\n+    const query = loadedFile.QUERY;\n+\n+    if (Array.isArray(query)) {\n+        if (!Array.isArray(expected)) {\n+            console.log(\"FAILED\");\n+            console.log(\"==> If QUERY variable is an array, EXPECTED should be an array too\");\n+            return 1;\n+        } else if (query.length !== expected.length) {\n+            console.log(\"FAILED\");\n+            console.log(\"==> QUERY variable should have the same length as EXPECTED\");\n+            return 1;\n+        }\n+        for (var i = 0; i < query.length; ++i) {\n+            var error_text = runSearch(query[i], expected[i], index, loaded, loadedFile,\n+                \"[ query `\" + query[i] + \"`]\");\n+            if (checkResult(error_text, loadedFile, false) !== 0) {\n+                return 1;\n+            }\n+        }\n         console.log(\"OK\");\n+        return 0;\n     }\n-    return errors;\n+    var error_text = runSearch(query, expected, index, loaded, loadedFile, \"\");\n+    return checkResult(error_text, loadedFile, true);\n }\n \n function load_files(doc_folder, resource_suffix, crate) {\n@@ -349,25 +381,25 @@ function parseOptions(args) {\n             || args[i] === \"--crate-name\") {\n             i += 1;\n             if (i >= args.length) {\n-                console.error(\"Missing argument after `\" + args[i - 1] + \"` option.\");\n+                console.log(\"Missing argument after `\" + args[i - 1] + \"` option.\");\n                 return null;\n             }\n             opts[correspondances[args[i - 1]]] = args[i];\n         } else if (args[i] === \"--help\") {\n             showHelp();\n             process.exit(0);\n         } else {\n-            console.error(\"Unknown option `\" + args[i] + \"`.\");\n-            console.error(\"Use `--help` to see the list of options\");\n+            console.log(\"Unknown option `\" + args[i] + \"`.\");\n+            console.log(\"Use `--help` to see the list of options\");\n             return null;\n         }\n     }\n     if (opts[\"doc_folder\"].length < 1) {\n-        console.error(\"Missing `--doc-folder` option.\");\n+        console.log(\"Missing `--doc-folder` option.\");\n     } else if (opts[\"crate_name\"].length < 1) {\n-        console.error(\"Missing `--crate-name` option.\");\n+        console.log(\"Missing `--crate-name` option.\");\n     } else if (opts[\"test_folder\"].length < 1 && opts[\"test_file\"].length < 1) {\n-        console.error(\"At least one of `--test-folder` or `--test-file` option is required.\");\n+        console.log(\"At least one of `--test-folder` or `--test-file` option is required.\");\n     } else {\n         return opts;\n     }"}]}