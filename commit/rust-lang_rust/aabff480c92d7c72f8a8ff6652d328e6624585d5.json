{"sha": "aabff480c92d7c72f8a8ff6652d328e6624585d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhYmZmNDgwYzkyZDdjNzJmOGE4ZmY2NjUyZDMyOGU2NjI0NTg1ZDU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-09-23T19:48:55Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-09-23T19:49:20Z"}, "message": "rt: Factor out stack walking into rust_abi.cpp", "tree": {"sha": "18fcb23d732ca89997de2901883efeddfc7137f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18fcb23d732ca89997de2901883efeddfc7137f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aabff480c92d7c72f8a8ff6652d328e6624585d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aabff480c92d7c72f8a8ff6652d328e6624585d5", "html_url": "https://github.com/rust-lang/rust/commit/aabff480c92d7c72f8a8ff6652d328e6624585d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aabff480c92d7c72f8a8ff6652d328e6624585d5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d10d23f0ad4763642619d2d3e42f8150f7d91af3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d10d23f0ad4763642619d2d3e42f8150f7d91af3", "html_url": "https://github.com/rust-lang/rust/commit/d10d23f0ad4763642619d2d3e42f8150f7d91af3"}], "stats": {"total": 79, "additions": 48, "deletions": 31}, "files": [{"sha": "2a08a25a9fa809a409cc76eb8b3bab8e91b746e4", "filename": "src/rt/rust_abi.cpp", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/aabff480c92d7c72f8a8ff6652d328e6624585d5/src%2Frt%2Frust_abi.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/aabff480c92d7c72f8a8ff6652d328e6624585d5/src%2Frt%2Frust_abi.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_abi.cpp?ref=aabff480c92d7c72f8a8ff6652d328e6624585d5", "patch": "@@ -1,10 +1,35 @@\n+// ABI-specific routines.\n+\n+#include <vector>\n #include <cstdlib>\n #include <stdint.h>\n #include \"rust_abi.h\"\n \n+#define END_OF_STACK_RA     (void (*)())0xdeadbeef\n+\n weak_symbol<uint32_t> abi_version(\"rust_abi_version\");\n \n uint32_t get_abi_version() {\n     return (*abi_version == NULL) ? 0 : **abi_version;\n }\n \n+namespace stack_walk {\n+\n+std::vector<frame>\n+backtrace() {\n+    std::vector<frame> frames;\n+\n+    // Ideally we would use the current value of EIP here, but there's no\n+    // portable way to get that and there are never any GC roots in our C++\n+    // frames anyhow.\n+    frame f(__builtin_frame_address(0), (void (*)())NULL);\n+\n+    while (f.ra != END_OF_STACK_RA) {\n+        frames.push_back(f);\n+        f.next();\n+    }\n+    return frames;\n+}\n+\n+}   // end namespace stack_walk\n+"}, {"sha": "884eed4b71721b94f6b1c6fd825cacdf7fbb2ee7", "filename": "src/rt/rust_abi.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aabff480c92d7c72f8a8ff6652d328e6624585d5/src%2Frt%2Frust_abi.h", "raw_url": "https://github.com/rust-lang/rust/raw/aabff480c92d7c72f8a8ff6652d328e6624585d5/src%2Frt%2Frust_abi.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_abi.h?ref=aabff480c92d7c72f8a8ff6652d328e6624585d5", "patch": "@@ -1,7 +1,10 @@\n+// ABI-specific routines.\n+\n #ifndef RUST_ABI_H\n #define RUST_ABI_H\n \n #include <cstdlib>\n+#include <vector>\n \n #ifdef __WIN32__\n #include <windows.h>\n@@ -36,6 +39,25 @@ class weak_symbol {\n     T *&operator*() { fill(); return data; }\n };\n \n+namespace stack_walk {\n+\n+struct frame {\n+    uint8_t *bp;    // The frame pointer.\n+    void (*ra)();   // The return address.\n+\n+    frame(void *in_bp, void (*in_ra)()) : bp((uint8_t *)in_bp), ra(in_ra) {}\n+\n+    inline void next() {\n+        ra = *(void (**)())(bp + sizeof(void *));\n+        bp = *(uint8_t **)bp;\n+    }\n+};\n+\n+std::vector<frame> backtrace();\n+\n+}   // end namespace stack_walk\n+\n+\n uint32_t get_abi_version();\n \n #endif"}, {"sha": "ae3c5a0103161ac3640410bea6f860a6b6a2a8d0", "filename": "src/rt/rust_gc.cpp", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/aabff480c92d7c72f8a8ff6652d328e6624585d5/src%2Frt%2Frust_gc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/aabff480c92d7c72f8a8ff6652d328e6624585d5/src%2Frt%2Frust_gc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_gc.cpp?ref=aabff480c92d7c72f8a8ff6652d328e6624585d5", "patch": "@@ -18,24 +18,12 @@\n #include <dlfcn.h>\n #endif\n \n-#define END_OF_STACK_RA     (void (*)())0xdeadbeef\n+using namespace stack_walk;\n \n namespace gc {\n \n weak_symbol<const uintptr_t> safe_point_data(\"rust_gc_safe_points\");\n \n-struct frame {\n-    uint8_t *bp;    // The frame pointer.\n-    void (*ra)();   // The return address.\n-\n-    frame(void *in_bp, void (*in_ra)()) : bp((uint8_t *)in_bp), ra(in_ra) {}\n-\n-    inline void next() {\n-        ra = *(void (**)())(bp + sizeof(void *));\n-        bp = *(uint8_t **)bp;\n-    }\n-};\n-\n struct root_info {\n     intptr_t frame_offset;\n     uintptr_t dynamic;  // 0 = static, 1 = dynamic\n@@ -98,9 +86,7 @@ class gc {\n \n public:\n     gc(rust_task *in_task) : task(in_task) {}\n-\n     void run();\n-    std::vector<frame> backtrace();\n };\n \n const safe_point *\n@@ -135,22 +121,6 @@ gc::sweep() {\n     // TODO\n }\n \n-std::vector<frame>\n-gc::backtrace() {\n-    std::vector<frame> frames;\n-\n-    // Ideally we would use the current value of EIP here, but there's no\n-    // portable way to get that and there are never any GC roots in our C++\n-    // frames anyhow.\n-    frame f(__builtin_frame_address(0), (void (*)())NULL);\n-\n-    while (f.ra != END_OF_STACK_RA) {\n-        frames.push_back(f);\n-        f.next();\n-    }\n-    return frames;\n-}\n-\n void\n gc::run() {\n     safe_point_map map;"}]}