{"sha": "03c8b92dc1c160c86d7ba6f08ee718a5324de136", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzYzhiOTJkYzFjMTYwYzg2ZDdiYTZmMDhlZTcxOGE1MzI0ZGUxMzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-22T08:10:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-22T08:10:27Z"}, "message": "Auto merge of #42803 - michaelwoerister:msdia-workaround, r=vadimcn\n\ndebuginfo: Work around crash-bug in MSDIA library\n\nFixes https://github.com/rust-lang/rust/issues/40477 (which also contains a description of the issue being fixed).\n\nr? @vadimcn", "tree": {"sha": "7cf0dd583eeca4e175f05c44f2886b2730435623", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cf0dd583eeca4e175f05c44f2886b2730435623"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03c8b92dc1c160c86d7ba6f08ee718a5324de136", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03c8b92dc1c160c86d7ba6f08ee718a5324de136", "html_url": "https://github.com/rust-lang/rust/commit/03c8b92dc1c160c86d7ba6f08ee718a5324de136", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03c8b92dc1c160c86d7ba6f08ee718a5324de136/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efdf55d04817cba9a613197b41facae945320a12", "url": "https://api.github.com/repos/rust-lang/rust/commits/efdf55d04817cba9a613197b41facae945320a12", "html_url": "https://github.com/rust-lang/rust/commit/efdf55d04817cba9a613197b41facae945320a12"}, {"sha": "826141359132123d7498a9fccf3b50742ce74ff7", "url": "https://api.github.com/repos/rust-lang/rust/commits/826141359132123d7498a9fccf3b50742ce74ff7", "html_url": "https://github.com/rust-lang/rust/commit/826141359132123d7498a9fccf3b50742ce74ff7"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "68432c22f810c4eae471838a9aea2e9e7facc3d3", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/03c8b92dc1c160c86d7ba6f08ee718a5324de136/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03c8b92dc1c160c86d7ba6f08ee718a5324de136/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=03c8b92dc1c160c86d7ba6f08ee718a5324de136", "patch": "@@ -43,7 +43,7 @@ use std::ptr;\n use syntax_pos::{self, Span, Pos};\n use syntax::ast;\n use syntax::symbol::Symbol;\n-use rustc::ty::layout;\n+use rustc::ty::layout::{self, LayoutTyper};\n \n pub mod gdb;\n mod utils;\n@@ -320,8 +320,32 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         };\n \n         // Arguments types\n-        for &argument_type in inputs {\n-            signature.push(type_metadata(cx, argument_type, syntax_pos::DUMMY_SP));\n+        if cx.sess().target.target.options.is_like_msvc {\n+            // FIXME(#42800):\n+            // There is a bug in MSDIA that leads to a crash when it encounters\n+            // a fixed-size array of `u8` or something zero-sized in a\n+            // function-type (see #40477).\n+            // As a workaround, we replace those fixed-size arrays with a\n+            // pointer-type. So a function `fn foo(a: u8, b: [u8; 4])` would\n+            // appear as `fn foo(a: u8, b: *const u8)` in debuginfo,\n+            // and a function `fn bar(x: [(); 7])` as `fn bar(x: *const ())`.\n+            // This transformed type is wrong, but these function types are\n+            // already inaccurate due to ABI adjustments (see #42800).\n+            signature.extend(inputs.iter().map(|&t| {\n+                let t = match t.sty {\n+                    ty::TyArray(ct, _)\n+                        if (ct == cx.tcx().types.u8) ||\n+                           (cx.layout_of(ct).size(cx).bytes() == 0) => {\n+                        cx.tcx().mk_imm_ptr(ct)\n+                    }\n+                    _ => t\n+                };\n+                type_metadata(cx, t, syntax_pos::DUMMY_SP)\n+            }));\n+        } else {\n+            signature.extend(inputs.iter().map(|t| {\n+                type_metadata(cx, t, syntax_pos::DUMMY_SP)\n+            }));\n         }\n \n         if sig.abi == Abi::RustCall && !sig.inputs().is_empty() {"}]}