{"sha": "f3e297331c5c4b8c03810acc745ae5b4a9c4f71f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZTI5NzMzMWM1YzRiOGMwMzgxMGFjYzc0NWFlNWI0YTljNGY3MWY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-15T15:11:06Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-15T15:11:06Z"}, "message": "Cleanup edit_text_range_for_record_field_expr_or_pat", "tree": {"sha": "2bf29b1ab9288cff76b6fd5b31ed3ea51edd8515", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bf29b1ab9288cff76b6fd5b31ed3ea51edd8515"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3e297331c5c4b8c03810acc745ae5b4a9c4f71f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3e297331c5c4b8c03810acc745ae5b4a9c4f71f", "html_url": "https://github.com/rust-lang/rust/commit/f3e297331c5c4b8c03810acc745ae5b4a9c4f71f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3e297331c5c4b8c03810acc745ae5b4a9c4f71f/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb60708274dc7c8cff281364507d23047cd482cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb60708274dc7c8cff281364507d23047cd482cd", "html_url": "https://github.com/rust-lang/rust/commit/cb60708274dc7c8cff281364507d23047cd482cd"}], "stats": {"total": 105, "additions": 59, "deletions": 46}, "files": [{"sha": "b8725693aa67c7c930f2f1b5cab33c81fcceb19b", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 59, "deletions": 46, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/f3e297331c5c4b8c03810acc745ae5b4a9c4f71f/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3e297331c5c4b8c03810acc745ae5b4a9c4f71f/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=f3e297331c5c4b8c03810acc745ae5b4a9c4f71f", "patch": "@@ -126,6 +126,7 @@ fn source_edit_from_reference(\n             TextRange::new(reference.file_range.range.end(), reference.file_range.range.end())\n         }\n         ReferenceKind::RecordFieldExprOrPat => {\n+            mark::hit!(test_rename_field_expr_pat);\n             replacement_text.push_str(new_name);\n             edit_text_range_for_record_field_expr_or_pat(sema, reference.file_range, new_name)\n         }\n@@ -145,29 +146,27 @@ fn edit_text_range_for_record_field_expr_or_pat(\n     file_range: FileRange,\n     new_name: &str,\n ) -> TextRange {\n-    let mut range = file_range.range;\n     let source_file = sema.parse(file_range.file_id);\n     let file_syntax = source_file.syntax();\n-    if let Some(field_expr) =\n-        syntax::algo::find_node_at_range::<ast::RecordExprField>(file_syntax, range)\n-    {\n-        match field_expr.expr().and_then(|e| e.name_ref()) {\n-            Some(name) if &name.to_string() == new_name => range = field_expr.syntax().text_range(),\n-            _ => (),\n-        }\n-    } else if let Some(field_pat) =\n-        syntax::algo::find_node_at_range::<ast::RecordPatField>(file_syntax, range)\n-    {\n-        match field_pat.pat() {\n-            Some(ast::Pat::IdentPat(pat))\n-                if pat.name().map(|n| n.to_string()).as_deref() == Some(new_name) =>\n-            {\n-                range = field_pat.syntax().text_range()\n-            }\n-            _ => (),\n-        }\n-    }\n-    range\n+    let original_range = file_range.range;\n+\n+    syntax::algo::find_node_at_range::<ast::RecordExprField>(file_syntax, original_range)\n+        .and_then(|field_expr| match field_expr.expr().and_then(|e| e.name_ref()) {\n+            Some(name) if &name.to_string() == new_name => Some(field_expr.syntax().text_range()),\n+            _ => None,\n+        })\n+        .or_else(|| {\n+            syntax::algo::find_node_at_range::<ast::RecordPatField>(file_syntax, original_range)\n+                .and_then(|field_pat| match field_pat.pat() {\n+                    Some(ast::Pat::IdentPat(pat))\n+                        if pat.name().map(|n| n.to_string()).as_deref() == Some(new_name) =>\n+                    {\n+                        Some(field_pat.syntax().text_range())\n+                    }\n+                    _ => None,\n+                })\n+        })\n+        .unwrap_or(original_range)\n }\n \n fn rename_mod(\n@@ -1140,6 +1139,7 @@ impl Foo {\n \n     #[test]\n     fn test_initializer_use_field_init_shorthand() {\n+        mark::check!(test_rename_field_expr_pat);\n         check(\n             \"bar\",\n             r#\"\n@@ -1160,34 +1160,40 @@ fn foo(bar: i32) -> Foo {\n     }\n \n     #[test]\n-    fn test_rename_binding_in_destructure_pat_shorthand() {\n+    fn test_struct_field_destructure_into_shorthand() {\n         check(\n-            \"bar\",\n+            \"baz\",\n             r#\"\n-struct Foo {\n-    i: i32,\n-}\n+struct Foo { i<|>: i32 }\n \n fn foo(foo: Foo) {\n-    let Foo { i } = foo;\n-    let _ = i<|>;\n+    let Foo { i: baz } = foo;\n+    let _ = baz;\n }\n \"#,\n             r#\"\n-struct Foo {\n-    i: i32,\n-}\n+struct Foo { baz: i32 }\n \n fn foo(foo: Foo) {\n-    let Foo { i: bar } = foo;\n-    let _ = bar;\n+    let Foo { baz } = foo;\n+    let _ = baz;\n }\n \"#,\n         );\n     }\n \n     #[test]\n     fn test_rename_binding_in_destructure_pat() {\n+        let expected_fixture = r#\"\n+struct Foo {\n+    i: i32,\n+}\n+\n+fn foo(foo: Foo) {\n+    let Foo { i: bar } = foo;\n+    let _ = bar;\n+}\n+\"#;\n         check(\n             \"bar\",\n             r#\"\n@@ -1200,39 +1206,46 @@ fn foo(foo: Foo) {\n     let _ = b<|>;\n }\n \"#,\n+            expected_fixture,\n+        );\n+        check(\n+            \"bar\",\n             r#\"\n struct Foo {\n     i: i32,\n }\n \n fn foo(foo: Foo) {\n-    let Foo { i: bar } = foo;\n-    let _ = bar;\n+    let Foo { i } = foo;\n+    let _ = i<|>;\n }\n \"#,\n+            expected_fixture,\n         );\n     }\n \n     #[test]\n-    fn test_struct_field_destructure_into_shorthand() {\n+    fn test_rename_binding_in_destructure_param_pat() {\n         check(\n-            \"baz\",\n+            \"bar\",\n             r#\"\n-struct Foo { i<|>: i32 }\n+struct Foo {\n+    i: i32\n+}\n \n-fn foo(foo: Foo) {\n-    let Foo { i: baz } = foo;\n-    let _ = baz;\n+fn foo(Foo { i }: foo) -> i32 {\n+    i<|>\n }\n \"#,\n             r#\"\n-struct Foo { baz: i32 }\n+struct Foo {\n+    i: i32\n+}\n \n-fn foo(foo: Foo) {\n-    let Foo { baz } = foo;\n-    let _ = baz;\n+fn foo(Foo { i: bar }: foo) -> i32 {\n+    bar\n }\n \"#,\n-        );\n+        )\n     }\n }"}]}