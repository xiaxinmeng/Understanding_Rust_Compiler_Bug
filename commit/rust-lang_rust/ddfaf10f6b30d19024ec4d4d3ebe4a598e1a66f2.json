{"sha": "ddfaf10f6b30d19024ec4d4d3ebe4a598e1a66f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkZmFmMTBmNmIzMGQxOTAyNGVjNGQ0ZDNlYmU0YTU5OGUxYTY2ZjI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-06-09T22:34:46Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-06-20T17:38:26Z"}, "message": "Add error code flag", "tree": {"sha": "ed7e4a6ca1cdaa3e0d6e2fee9c5ab99b4575a392", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed7e4a6ca1cdaa3e0d6e2fee9c5ab99b4575a392"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddfaf10f6b30d19024ec4d4d3ebe4a598e1a66f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddfaf10f6b30d19024ec4d4d3ebe4a598e1a66f2", "html_url": "https://github.com/rust-lang/rust/commit/ddfaf10f6b30d19024ec4d4d3ebe4a598e1a66f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddfaf10f6b30d19024ec4d4d3ebe4a598e1a66f2/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7746d7c52fdbdc37a9eb9b5d463fb327685c9f08", "url": "https://api.github.com/repos/rust-lang/rust/commits/7746d7c52fdbdc37a9eb9b5d463fb327685c9f08", "html_url": "https://github.com/rust-lang/rust/commit/7746d7c52fdbdc37a9eb9b5d463fb327685c9f08"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "66afe5835bf6fc6f3549dfc788e7feaab720f948", "filename": "src/librustc_privacy/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ddfaf10f6b30d19024ec4d4d3ebe4a598e1a66f2/src%2Flibrustc_privacy%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddfaf10f6b30d19024ec4d4d3ebe4a598e1a66f2/src%2Flibrustc_privacy%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Fdiagnostics.rs?ref=ddfaf10f6b30d19024ec4d4d3ebe4a598e1a66f2", "patch": "@@ -16,7 +16,7 @@ E0445: r##\"\n A private trait was used on a public type parameter bound. Erroneous code\n examples:\n \n-```compile_fail\n+```compile_fail,E0445\n #![deny(private_in_public)]\n \n trait Foo {\n@@ -46,7 +46,7 @@ pub fn foo<T: Foo> (t: T) {} // ok!\n E0446: r##\"\n A private type was used in a public type signature. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0446\n #![deny(private_in_public)]\n \n mod Foo {\n@@ -100,7 +100,7 @@ pub enum Foo {\n Since the enum is already public, adding `pub` on one its elements is\n unnecessary. Example:\n \n-```compile_fail\n+```compile_fail,\n enum Foo {\n     pub Bar, // not ok!\n }\n@@ -119,7 +119,7 @@ E0450: r##\"\n A tuple constructor was invoked while some of its fields are private. Erroneous\n code example:\n \n-```compile_fail\n+```compile_fail,E0450\n mod Bar {\n     pub struct Foo(isize);\n }\n@@ -157,7 +157,7 @@ let f = bar::Foo::new(1);\n E0451: r##\"\n A struct constructor with private fields was invoked. Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0451\n mod Bar {\n     pub struct Foo {\n         pub a: isize,"}, {"sha": "139e1033175ea1e49834aa22299bb374bf56156c", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ddfaf10f6b30d19024ec4d4d3ebe4a598e1a66f2/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddfaf10f6b30d19024ec4d4d3ebe4a598e1a66f2/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=ddfaf10f6b30d19024ec4d4d3ebe4a598e1a66f2", "patch": "@@ -605,18 +605,21 @@ mod tests {\n         }\n \n         // marker                | should_panic| no_run| ignore| rust | test_harness| compile_fail\n-        t(\"\",                      false,        false,  false,  true,  false,        false);\n-        t(\"rust\",                  false,        false,  false,  true,  false,        false);\n-        t(\"sh\",                    false,        false,  false,  false, false,        false);\n-        t(\"ignore\",                false,        false,  true,   true,  false,        false);\n-        t(\"should_panic\",          true,         false,  false,  true,  false,        false);\n-        t(\"no_run\",                false,        true,   false,  true,  false,        false);\n-        t(\"test_harness\",          false,        false,  false,  true,  true,         false);\n-        t(\"compile_fail\",          false,        true,   false,  true,  false,        true);\n-        t(\"{.no_run .example}\",    false,        true,   false,  true,  false,        false);\n-        t(\"{.sh .should_panic}\",   true,         false,  false,  true,  false,        false);\n-        t(\"{.example .rust}\",      false,        false,  false,  true,  false,        false);\n-        t(\"{.test_harness .rust}\", false,        false,  false,  true,  true,         false);\n+        //                       | error_codes\n+        t(\"\",                      false,        false,  false,  true,  false, false, Vec::new());\n+        t(\"rust\",                  false,        false,  false,  true,  false, false, Vec::new());\n+        t(\"sh\",                    false,        false,  false,  false, false, false, Vec::new());\n+        t(\"ignore\",                false,        false,  true,   true,  false, false, Vec::new());\n+        t(\"should_panic\",          true,         false,  false,  true,  false, false, Vec::new());\n+        t(\"no_run\",                false,        true,   false,  true,  false, false, Vec::new());\n+        t(\"test_harness\",          false,        false,  false,  true,  true,  false, Vec::new());\n+        t(\"compile_fail\",          false,        true,   false,  true,  false, true,  Vec::new());\n+        t(\"E0450\",                 false,        false,  false,  true,  false, false,\n+                                   vec!(\"E0450\".to_owned()));\n+        t(\"{.no_run .example}\",    false,        true,   false,  true,  false, false, Vec::new());\n+        t(\"{.sh .should_panic}\",   true,         false,  false,  true,  false, false, Vec::new());\n+        t(\"{.example .rust}\",      false,        false,  false,  true,  false, false, Vec::new());\n+        t(\"{.test_harness .rust}\", false,        false,  false,  true,  true,  false, Vec::new());\n     }\n \n     #[test]"}, {"sha": "c17af55ca10af4798dca07dcdf5fef89aca4110e", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddfaf10f6b30d19024ec4d4d3ebe4a598e1a66f2/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddfaf10f6b30d19024ec4d4d3ebe4a598e1a66f2/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=ddfaf10f6b30d19024ec4d4d3ebe4a598e1a66f2", "patch": "@@ -275,7 +275,7 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n                     }\n                     if count > 0 && error_codes.len() > 0 {\n                         let out = String::from_utf8(data.lock().unwrap().to_vec()).unwrap();\n-                        error_codes = error_codes.into_iter().filter(|err| !out.contains(err)).collect();\n+                        error_codes.retain(|err| !out.contains(err));\n                     }\n                 }\n                 Ok(()) if compile_fail => panic!(\"test compiled while it wasn't supposed to\"),"}]}