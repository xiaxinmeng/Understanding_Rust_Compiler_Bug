{"sha": "dab394c2db5d62dce64ac13af35bb2f18357c9d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYjM5NGMyZGI1ZDYyZGNlNjRhYzEzYWYzNWJiMmYxODM1N2M5ZDg=", "commit": {"author": {"name": "Ivan Petkov", "email": "ivanppetkov@gmail.com", "date": "2015-02-23T19:05:55Z"}, "committer": {"name": "Ivan Petkov", "email": "ivanppetkov@gmail.com", "date": "2015-02-23T19:05:55Z"}, "message": "Add documentation to associated types in libcore, libstd", "tree": {"sha": "0016c8846ff75133c0b48da5c39191b10d714f37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0016c8846ff75133c0b48da5c39191b10d714f37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dab394c2db5d62dce64ac13af35bb2f18357c9d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dab394c2db5d62dce64ac13af35bb2f18357c9d8", "html_url": "https://github.com/rust-lang/rust/commit/dab394c2db5d62dce64ac13af35bb2f18357c9d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dab394c2db5d62dce64ac13af35bb2f18357c9d8/comments", "author": {"login": "ipetkov", "id": 1638690, "node_id": "MDQ6VXNlcjE2Mzg2OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1638690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ipetkov", "html_url": "https://github.com/ipetkov", "followers_url": "https://api.github.com/users/ipetkov/followers", "following_url": "https://api.github.com/users/ipetkov/following{/other_user}", "gists_url": "https://api.github.com/users/ipetkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/ipetkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ipetkov/subscriptions", "organizations_url": "https://api.github.com/users/ipetkov/orgs", "repos_url": "https://api.github.com/users/ipetkov/repos", "events_url": "https://api.github.com/users/ipetkov/events{/privacy}", "received_events_url": "https://api.github.com/users/ipetkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ipetkov", "id": 1638690, "node_id": "MDQ6VXNlcjE2Mzg2OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1638690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ipetkov", "html_url": "https://github.com/ipetkov", "followers_url": "https://api.github.com/users/ipetkov/followers", "following_url": "https://api.github.com/users/ipetkov/following{/other_user}", "gists_url": "https://api.github.com/users/ipetkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/ipetkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ipetkov/subscriptions", "organizations_url": "https://api.github.com/users/ipetkov/orgs", "repos_url": "https://api.github.com/users/ipetkov/repos", "events_url": "https://api.github.com/users/ipetkov/events{/privacy}", "received_events_url": "https://api.github.com/users/ipetkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0f7ca27de6b4e03f30012656dad270cda55a363", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0f7ca27de6b4e03f30012656dad270cda55a363", "html_url": "https://github.com/rust-lang/rust/commit/f0f7ca27de6b4e03f30012656dad270cda55a363"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "09089f2d04c5f8f3ec3f8110a5b23eeeb7a707d3", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dab394c2db5d62dce64ac13af35bb2f18357c9d8/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab394c2db5d62dce64ac13af35bb2f18357c9d8/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=dab394c2db5d62dce64ac13af35bb2f18357c9d8", "patch": "@@ -86,6 +86,7 @@ use usize;\n #[rustc_on_unimplemented = \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar \\\n                             method\"]\n pub trait Iterator {\n+    /// The type of the elements being iterated\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Item;\n \n@@ -122,9 +123,11 @@ pub trait FromIterator<A> {\n /// Conversion into an `Iterator`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait IntoIterator {\n+    /// The type of the elements being iterated\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Item;\n \n+    /// A container for iterating over elements of type Item\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type IntoIter: Iterator<Item=Self::Item>;\n "}, {"sha": "c382ac46d5db9895a99241e95d32291f3da1650e", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dab394c2db5d62dce64ac13af35bb2f18357c9d8/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab394c2db5d62dce64ac13af35bb2f18357c9d8/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=dab394c2db5d62dce64ac13af35bb2f18357c9d8", "patch": "@@ -184,6 +184,7 @@ macro_rules! forward_ref_binop {\n #[lang=\"add\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Add<RHS=Self> {\n+    /// The resulting type after applying the `+` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n@@ -237,6 +238,7 @@ add_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n #[lang=\"sub\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Sub<RHS=Self> {\n+    /// The resulting type after applying the `-` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n@@ -290,6 +292,7 @@ sub_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n #[lang=\"mul\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Mul<RHS=Self> {\n+    /// The resulting type after applying the `*` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n@@ -343,6 +346,7 @@ mul_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n #[lang=\"div\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Div<RHS=Self> {\n+    /// The resulting type after applying the `/` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n@@ -396,6 +400,7 @@ div_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n #[lang=\"rem\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Rem<RHS=Self> {\n+    /// The resulting type after applying the `%` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output = Self;\n \n@@ -468,6 +473,7 @@ rem_float_impl! { f64, fmod }\n #[lang=\"neg\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Neg {\n+    /// The resulting type after applying the `-` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n@@ -544,6 +550,7 @@ neg_uint_impl! { u64, i64 }\n #[lang=\"not\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Not {\n+    /// The resulting type after applying the `!` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n@@ -597,6 +604,7 @@ not_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n #[lang=\"bitand\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait BitAnd<RHS=Self> {\n+    /// The resulting type after applying the `&` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n@@ -650,6 +658,7 @@ bitand_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n #[lang=\"bitor\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait BitOr<RHS=Self> {\n+    /// The resulting type after applying the `|` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n@@ -703,6 +712,7 @@ bitor_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n #[lang=\"bitxor\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait BitXor<RHS=Self> {\n+    /// The resulting type after applying the `^` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n@@ -756,6 +766,7 @@ bitxor_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n #[lang=\"shl\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Shl<RHS> {\n+    /// The resulting type after applying the `<<` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n@@ -827,6 +838,7 @@ shl_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n #[lang=\"shr\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Shr<RHS> {\n+    /// The resulting type after applying the `>>` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n@@ -900,6 +912,7 @@ shr_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n #[rustc_on_unimplemented = \"the type `{Self}` cannot be indexed by `{Idx}`\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Index<Idx: ?Sized> {\n+    /// The returned type after indexing\n     type Output: ?Sized;\n \n     /// The method for the indexing (`Foo[Bar]`) operation\n@@ -1047,6 +1060,7 @@ impl<Idx: fmt::Debug> fmt::Debug for RangeTo<Idx> {\n #[lang=\"deref\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Deref {\n+    /// The resulting type after dereferencing\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Target: ?Sized;\n \n@@ -1122,6 +1136,7 @@ impl<'a, T: ?Sized> DerefMut for &'a mut T {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_paren_sugar]\n pub trait Fn<Args> {\n+    /// The returned type after the call operator is used.\n     type Output;\n \n     /// This is called when the call operator is used.\n@@ -1133,6 +1148,7 @@ pub trait Fn<Args> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_paren_sugar]\n pub trait FnMut<Args> {\n+    /// The returned type after the call operator is used.\n     type Output;\n \n     /// This is called when the call operator is used.\n@@ -1144,6 +1160,7 @@ pub trait FnMut<Args> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_paren_sugar]\n pub trait FnOnce<Args> {\n+    /// The returned type after the call operator is used.\n     type Output;\n \n     /// This is called when the call operator is used."}, {"sha": "b44cc899787f54cc7c29001de7e8018e231daf08", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dab394c2db5d62dce64ac13af35bb2f18357c9d8/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab394c2db5d62dce64ac13af35bb2f18357c9d8/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=dab394c2db5d62dce64ac13af35bb2f18357c9d8", "patch": "@@ -249,6 +249,7 @@ pub unsafe fn write<T>(dst: *mut T, src: T) {\n /// Methods on raw pointers\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait PtrExt: Sized {\n+    /// The type which is being pointed at\n     type Target;\n \n     /// Returns true if the pointer is null.\n@@ -284,6 +285,7 @@ pub trait PtrExt: Sized {\n /// Methods on mutable raw pointers\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait MutPtrExt {\n+    /// The type which is being pointed at\n     type Target;\n \n     /// Returns `None` if the pointer is null, or else returns a mutable"}, {"sha": "94457a5d71441b784dc52e9969f6d5e77703ea60", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dab394c2db5d62dce64ac13af35bb2f18357c9d8/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab394c2db5d62dce64ac13af35bb2f18357c9d8/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=dab394c2db5d62dce64ac13af35bb2f18357c9d8", "patch": "@@ -37,6 +37,7 @@ pub trait OwnedAsciiExt {\n /// Extension methods for ASCII-subset only operations on string slices\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait AsciiExt {\n+    /// Container type for copied ASCII characters.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Owned;\n "}, {"sha": "3a06d2d03bf3f7046ec7c74479f9936abb704be8", "filename": "src/libstd/collections/hash/state.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dab394c2db5d62dce64ac13af35bb2f18357c9d8/src%2Flibstd%2Fcollections%2Fhash%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab394c2db5d62dce64ac13af35bb2f18357c9d8/src%2Flibstd%2Fcollections%2Fhash%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fstate.rs?ref=dab394c2db5d62dce64ac13af35bb2f18357c9d8", "patch": "@@ -27,6 +27,7 @@ use marker;\n /// to `Default` when asked to create a hasher.\n #[unstable(feature = \"std_misc\", reason = \"hasher stuff is unclear\")]\n pub trait HashState {\n+    /// Type of the hasher that will be created.\n     type Hasher: hash::Hasher;\n \n     /// Creates a new hasher based on the given state of this object."}]}