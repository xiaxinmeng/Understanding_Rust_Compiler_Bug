{"sha": "8b9c5396ca574fad9cc7b51d16c8c96e0ae74632", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiOWM1Mzk2Y2E1NzRmYWQ5Y2M3YjUxZDE2YzhjOTZlMGFlNzQ2MzI=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-12-07T02:13:27Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-12-11T14:50:12Z"}, "message": "Fix missing libLLVM.so in stage0 sysroot.\n\nWhen we dynamically link against libLLVM.so (as opposed to statically\nlinking LLVM), we need libLLVM.so to be present in the stage0 sysroot,\nso that stage1 tools (which are built against the stage0\ncompiler+sysroot) can see it at build time (when the linker is run)\n\nSee the comment in the commit for more details", "tree": {"sha": "87b7cbb0c19a4f2a602217b029abd889e9b5b5d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87b7cbb0c19a4f2a602217b029abd889e9b5b5d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b9c5396ca574fad9cc7b51d16c8c96e0ae74632", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl3xAiQACgkQtAh+UQ6Y\nsWSnzw/+MI8JJ6r4FrGKk0AWhKy8or3eLYcfNc1mAIirnMbBBMq2SqIP1hpGpFOB\nIzkqlbUqRb+DCs9xgwDwn659O/xusv9s7vSHH1umuvbicl6rKuobLe1PXwuxdTQr\nnuZRgSD2ZlpmmmjJ1+AMrWrCnPaUTxrkA4RlFczltYD/DTdDcXjDKzyRd6no5dBV\nZvQEd8fEuemxmO0UdZuvXqEkxoMQmdNVQJjNMDcYI32nBbQb5hk8FJhO3PgvGs35\n48Aqh+PsuNuoARLqF3g7ZefAZTQJWzvQajuQYxNqpjXUUMerS8QsZLFUeRIB104p\nbQbRbUoTFT3nxBCGA9Znf76LsMsypfcuDbt98Lvi08TrZTBd5Cw3ol9tj7mxkImK\ntvfRnsvS+pqAZm/+hjB4vyCJJSsEzYRdj2UYUiZ7oE9USb7Mdu3d2+pHboovRSyi\nSSaqwNSMTXWUhiLXy/jkGZPWP4wYn+vMXgrtZ8iBiZjFE8lj3tSwhV9x9CJQMgDI\n+Yi6htIsm2lfy92xwYzxxAoIudMVdoFSparsWKMyXLe6aez/Olp2ITvXG0cNRuLj\nX8dJJuLA3AduYr4YX834ShVrhvo051z3wYYJEaoPbTtGhhXb+bVQDvYz2hPs5VJd\nZWaxPLwQrblk+TFC9PgpW7/2Fk9Q26mjJtdn+NCY5jG0CFqNqAM=\n=UwYs\n-----END PGP SIGNATURE-----", "payload": "tree 87b7cbb0c19a4f2a602217b029abd889e9b5b5d7\nparent 1aa34d4decde1d1e0089a4aef450d45efd9ea2d4\nauthor Aaron Hill <aa1ronham@gmail.com> 1575684807 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1576075812 -0500\n\nFix missing libLLVM.so in stage0 sysroot.\n\nWhen we dynamically link against libLLVM.so (as opposed to statically\nlinking LLVM), we need libLLVM.so to be present in the stage0 sysroot,\nso that stage1 tools (which are built against the stage0\ncompiler+sysroot) can see it at build time (when the linker is run)\n\nSee the comment in the commit for more details\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b9c5396ca574fad9cc7b51d16c8c96e0ae74632", "html_url": "https://github.com/rust-lang/rust/commit/8b9c5396ca574fad9cc7b51d16c8c96e0ae74632", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b9c5396ca574fad9cc7b51d16c8c96e0ae74632/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1aa34d4decde1d1e0089a4aef450d45efd9ea2d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1aa34d4decde1d1e0089a4aef450d45efd9ea2d4", "html_url": "https://github.com/rust-lang/rust/commit/1aa34d4decde1d1e0089a4aef450d45efd9ea2d4"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "3412691397363fd6866f59ca7d2295c260253815", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8b9c5396ca574fad9cc7b51d16c8c96e0ae74632/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b9c5396ca574fad9cc7b51d16c8c96e0ae74632/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=8b9c5396ca574fad9cc7b51d16c8c96e0ae74632", "patch": "@@ -456,6 +456,44 @@ impl Step for Rustc {\n                   vec![],\n                   false);\n \n+        // We used to build librustc_codegen_llvm as a separate step,\n+        // which produced a dylib that the compiler would dlopen() at runtime.\n+        // This meant that we only needed to make sure that libLLVM.so was\n+        // installed by the time we went to run a tool using it - since\n+        // librustc_codegen_llvm was effectively a standalone artifact,\n+        // other crates were completely oblivious to its dependency\n+        // on `libLLVM.so` during build time.\n+        //\n+        // However, librustc_codegen_llvm is now built as an ordinary\n+        // crate during the same step as the rest of the compiler crates.\n+        // This means that any crates depending on it will see the fact\n+        // that it uses `libLLVM.so` as a native library, and will\n+        // cause us to pass `-llibLLVM.so` to the linker when we link\n+        // a binary.\n+        //\n+        // For `rustc` itself, this works out fine.\n+        // During the `Assemble` step, we call `dist::maybe_install_llvm_dylib`\n+        // to copy libLLVM.so into the `stage` directory. We then link\n+        // the compiler binary, which will find `libLLVM.so` in the correct place.\n+        //\n+        // However, this is insufficient for tools that are build against stage0\n+        // (e.g. stage1 rustdoc). Since `Assemble` for stage0 doesn't actually do anything,\n+        // we won't have `libLLVM.so` in the stage0 sysroot. In the past, this wasn't\n+        // a problem - we would copy the tool binary into its correct stage directory\n+        // (e.g. stage1 for a stage1 rustdoc built against a stage0 compiler).\n+        // Since libLLVM.so wasn't resolved until runtime, it was fine for it to\n+        // not exist while we were building it.\n+        //\n+        // To ensure that we can still build stage1 tools against a stage0 compiler,\n+        // we explicitly copy libLLVM.so into the stage0 sysroot when building\n+        // the stage0 compiler. This ensures that tools built against stage0\n+        // will see libLLVM.so at build time, making the linker happy.\n+        if compiler.stage == 0 {\n+            builder.info(&format!(\"Installing libLLVM.so to stage 0 ({})\", compiler.host));\n+            let sysroot = builder.sysroot(compiler);\n+            dist::maybe_install_llvm_dylib(builder, compiler.host, &sysroot);\n+        }\n+\n         builder.ensure(RustcLink {\n             compiler: builder.compiler(compiler.stage, builder.config.build),\n             target_compiler: compiler,"}]}