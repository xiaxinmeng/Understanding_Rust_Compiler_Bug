{"sha": "48af7714d81bfa9a30d2f0175968ca5232fa23b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4YWY3NzE0ZDgxYmZhOWEzMGQyZjAxNzU5NjhjYTUyMzJmYTIzYjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-30T21:01:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-30T21:01:05Z"}, "message": "Auto merge of #51717 - Mark-Simulacrum:snap, r=alexcrichton\n\nBootstrap from 1.28.0 beta", "tree": {"sha": "f0ec71c2c5f643d95dc69df02cbbc5b8cb72d11a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0ec71c2c5f643d95dc69df02cbbc5b8cb72d11a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48af7714d81bfa9a30d2f0175968ca5232fa23b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48af7714d81bfa9a30d2f0175968ca5232fa23b5", "html_url": "https://github.com/rust-lang/rust/commit/48af7714d81bfa9a30d2f0175968ca5232fa23b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48af7714d81bfa9a30d2f0175968ca5232fa23b5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74c89b023020e4c6b04acfc877a115c95ec7747b", "url": "https://api.github.com/repos/rust-lang/rust/commits/74c89b023020e4c6b04acfc877a115c95ec7747b", "html_url": "https://github.com/rust-lang/rust/commit/74c89b023020e4c6b04acfc877a115c95ec7747b"}, {"sha": "3d6877496866472e1e9af9495d6989ee7ae866ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d6877496866472e1e9af9495d6989ee7ae866ef", "html_url": "https://github.com/rust-lang/rust/commit/3d6877496866472e1e9af9495d6989ee7ae866ef"}], "stats": {"total": 401, "additions": 56, "deletions": 345}, "files": [{"sha": "5d09507c41bf143423152d8c70d744251f4aa76c", "filename": "src/Cargo.lock", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=48af7714d81bfa9a30d2f0175968ca5232fa23b5", "patch": "@@ -191,13 +191,13 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"cargo\"\n-version = \"0.29.0\"\n+version = \"0.30.0\"\n dependencies = [\n  \"atty 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clap 2.31.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core-foundation 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"crates-io 0.17.0\",\n+ \"crates-io 0.18.0\",\n  \"crossbeam 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crypto-hash 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"curl 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -232,6 +232,7 @@ dependencies = [\n  \"tempfile 3.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termcolor 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -299,7 +300,7 @@ dependencies = [\n  \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strsim 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"textwrap 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"vec_map 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"yaml-rust 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -472,7 +473,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"crates-io\"\n-version = \"0.17.0\"\n+version = \"0.18.0\"\n dependencies = [\n  \"curl 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1683,7 +1684,7 @@ dependencies = [\n name = \"rls\"\n version = \"0.128.0\"\n dependencies = [\n- \"cargo 0.29.0\",\n+ \"cargo 0.30.0\",\n  \"cargo_metadata 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clippy_lints 0.0.205 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.5.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1882,7 +1883,7 @@ dependencies = [\n  \"rustc-ap-serialize 149.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-ap-syntax_pos 149.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termcolor 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1895,7 +1896,7 @@ dependencies = [\n  \"rustc-ap-serialize 164.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-ap-syntax_pos 164.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termcolor 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1969,7 +1970,7 @@ dependencies = [\n  \"rustc-ap-rustc_data_structures 149.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-ap-serialize 149.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1981,7 +1982,7 @@ dependencies = [\n  \"rustc-ap-rustc_data_structures 164.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-ap-serialize 164.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2192,7 +2193,7 @@ dependencies = [\n  \"serialize 0.0.0\",\n  \"syntax_pos 0.0.0\",\n  \"termcolor 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2783,7 +2784,7 @@ dependencies = [\n  \"rustc_data_structures 0.0.0\",\n  \"scoped-tls 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serialize 0.0.0\",\n- \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2908,7 +2909,7 @@ name = \"textwrap\"\n version = \"0.9.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2984,7 +2985,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"unicode-width\"\n-version = \"0.1.4\"\n+version = \"0.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -3388,7 +3389,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum unicode-bidi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"49f2bd0c6468a8230e1db229cff8029217cf623c767ea5d60bfbd42729ea54d5\"\n \"checksum unicode-normalization 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"51ccda9ef9efa3f7ef5d91e8f9b83bbe6955f9bf86aec89d5cce2c874625920f\"\n \"checksum unicode-segmentation 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a8083c594e02b8ae1654ae26f0ade5158b119bd88ad0e8227a5d8fcd72407946\"\n-\"checksum unicode-width 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bf3a113775714a22dcb774d8ea3655c53a32debae63a063acc00a91cc586245f\"\n+\"checksum unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"882386231c45df4700b275c7ff55b6f3698780a650026380e72dabe76fa46526\"\n \"checksum unicode-xid 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"36dff09cafb4ec7c8cf0023eb0b686cb6ce65499116a12201c9e11840ca01beb\"\n \"checksum unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f860d7d29cf02cb2f3f359fd35991af3d30bac52c57d265a3c461074cb4dc\"\n \"checksum unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fc72304796d0818e357ead4e000d19c9c174ab23dc11093ac919054d20a6a7fc\""}, {"sha": "04d576df95546b98d58bac8316e69ae280b221d0", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=48af7714d81bfa9a30d2f0175968ca5232fa23b5", "patch": "@@ -24,7 +24,7 @@ use Build;\n use config::Config;\n \n // The version number\n-pub const CFG_RELEASE_NUM: &str = \"1.28.0\";\n+pub const CFG_RELEASE_NUM: &str = \"1.29.0\";\n \n pub struct GitInfo {\n     inner: Option<Info>,"}, {"sha": "642f22b11ade36aac997d5d2266624f16f5344d7", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=48af7714d81bfa9a30d2f0175968ca5232fa23b5", "patch": "@@ -1049,22 +1049,22 @@ pub fn run_cargo(builder: &Builder, cargo: &mut Command, stamp: &Path, is_check:\n                !filename.ends_with(\".lib\") &&\n                !is_dylib(&filename) &&\n                !(is_check && filename.ends_with(\".rmeta\")) {\n-                return;\n+                continue;\n             }\n \n             let filename = Path::new(&*filename);\n \n             // If this was an output file in the \"host dir\" we don't actually\n             // worry about it, it's not relevant for us.\n             if filename.starts_with(&host_root_dir) {\n-                return;\n+                continue;\n             }\n \n             // If this was output in the `deps` dir then this is a precise file\n             // name (hash included) so we start tracking it.\n             if filename.starts_with(&target_deps_dir) {\n                 deps.push(filename.to_path_buf());\n-                return;\n+                continue;\n             }\n \n             // Otherwise this was a \"top level artifact\" which right now doesn't"}, {"sha": "493448eaf88fa9b0704191d82994e52d951e4526", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=48af7714d81bfa9a30d2f0175968ca5232fa23b5", "patch": "@@ -105,7 +105,6 @@\n #![feature(pin)]\n #![feature(ptr_internals)]\n #![feature(ptr_offset_from)]\n-#![cfg_attr(stage0, feature(repr_transparent))]\n #![feature(rustc_attrs)]\n #![feature(specialization)]\n #![feature(split_ascii_whitespace)]"}, {"sha": "89fe2d941a350c0f84f5b212d41d92aa868e3288", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=48af7714d81bfa9a30d2f0175968ca5232fa23b5", "patch": "@@ -1364,10 +1364,6 @@ extern \"rust-intrinsic\" {\n     /// source as well as std's catch implementation.\n     pub fn try(f: fn(*mut u8), data: *mut u8, local_ptr: *mut u8) -> i32;\n \n-    #[cfg(stage0)]\n-    /// docs my friends, its friday!\n-    pub fn align_offset(ptr: *const (), align: usize) -> usize;\n-\n     /// Emits a `!nontemporal` store according to LLVM (see their docs).\n     /// Probably will never become stable.\n     pub fn nontemporal_store<T>(ptr: *mut T, val: T);"}, {"sha": "cef126f36e8cfe362e1db995fb07046ab6bef362", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=48af7714d81bfa9a30d2f0175968ca5232fa23b5", "patch": "@@ -100,7 +100,6 @@\n #![feature(optin_builtin_traits)]\n #![feature(prelude_import)]\n #![feature(repr_simd, platform_intrinsics)]\n-#![cfg_attr(stage0, feature(repr_transparent))]\n #![feature(rustc_attrs)]\n #![feature(rustc_const_unstable)]\n #![feature(simd_ffi)]"}, {"sha": "e0d267a6ce0ecf46bebfb584945a33fbe955f496", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 0, "deletions": 192, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=48af7714d81bfa9a30d2f0175968ca5232fa23b5", "patch": "@@ -267,20 +267,11 @@ $EndFeature, \"\n ```\n \"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(not(stage0))]\n             #[rustc_const_unstable(feature = \"const_int_ops\")]\n             #[inline]\n             pub const fn count_ones(self) -> u32 { (self as $UnsignedT).count_ones() }\n         }\n \n-        doc_comment! {\n-            concat!(\"Dummy docs. See !stage0 documentation\"),\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(stage0)]\n-            #[inline]\n-            pub fn count_ones(self) -> u32 { (self as $UnsignedT).count_ones() }\n-        }\n-\n         doc_comment! {\n             concat!(\"Returns the number of zeros in the binary representation of `self`.\n \n@@ -292,24 +283,13 @@ Basic usage:\n \", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::max_value().count_zeros(), 1);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(not(stage0))]\n             #[rustc_const_unstable(feature = \"const_int_ops\")]\n             #[inline]\n             pub const fn count_zeros(self) -> u32 {\n                 (!self).count_ones()\n             }\n         }\n \n-        doc_comment! {\n-            concat!(\"Dummy docs. See !stage0 documentatio\"),\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(stage0)]\n-            #[inline]\n-            pub fn count_zeros(self) -> u32 {\n-                (!self).count_ones()\n-            }\n-        }\n-\n         doc_comment! {\n             concat!(\"Returns the number of leading zeros in the binary representation of `self`.\n \n@@ -324,24 +304,13 @@ assert_eq!(n.leading_zeros(), 0);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(not(stage0))]\n             #[rustc_const_unstable(feature = \"const_int_ops\")]\n             #[inline]\n             pub const fn leading_zeros(self) -> u32 {\n                 (self as $UnsignedT).leading_zeros()\n             }\n         }\n \n-        doc_comment! {\n-            concat!(\"Dummy docs. See !stage0 documentation\"),\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(stage0)]\n-            #[inline]\n-            pub fn leading_zeros(self) -> u32 {\n-                (self as $UnsignedT).leading_zeros()\n-            }\n-        }\n-\n         doc_comment! {\n             concat!(\"Returns the number of trailing zeros in the binary representation of `self`.\n \n@@ -356,24 +325,13 @@ assert_eq!(n.trailing_zeros(), 2);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(not(stage0))]\n             #[rustc_const_unstable(feature = \"const_int_ops\")]\n             #[inline]\n             pub const fn trailing_zeros(self) -> u32 {\n                 (self as $UnsignedT).trailing_zeros()\n             }\n         }\n \n-        doc_comment! {\n-            concat!(\"Dummy docs. See !stage0 documentation\"),\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(stage0)]\n-            #[inline]\n-            pub fn trailing_zeros(self) -> u32 {\n-                (self as $UnsignedT).trailing_zeros()\n-            }\n-        }\n-\n         /// Shifts the bits to the left by a specified amount, `n`,\n         /// wrapping the truncated bits to the end of the resulting integer.\n         ///\n@@ -442,21 +400,12 @@ $EndFeature, \"\n         /// assert_eq!(m, 21760);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[cfg(not(stage0))]\n         #[rustc_const_unstable(feature = \"const_int_ops\")]\n         #[inline]\n         pub const fn swap_bytes(self) -> Self {\n             (self as $UnsignedT).swap_bytes() as Self\n         }\n \n-        /// Dummy docs. See !stage0 documentation.\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[cfg(stage0)]\n-        #[inline]\n-        pub fn swap_bytes(self) -> Self {\n-            (self as $UnsignedT).swap_bytes() as Self\n-        }\n-\n         /// Reverses the bit pattern of the integer.\n         ///\n         /// # Examples\n@@ -503,7 +452,6 @@ if cfg!(target_endian = \\\"big\\\") {\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(not(stage0))]\n             #[rustc_const_unstable(feature = \"const_int_ops\")]\n             #[inline]\n             pub const fn from_be(x: Self) -> Self {\n@@ -518,16 +466,6 @@ $EndFeature, \"\n             }\n         }\n \n-        doc_comment! {\n-            concat!(\"Dummy docs. See !stage0 documentation\"),\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(stage0)]\n-            #[inline]\n-            pub fn from_be(x: Self) -> Self {\n-                if cfg!(target_endian = \"big\") { x } else { x.swap_bytes() }\n-            }\n-        }\n-\n         doc_comment! {\n             concat!(\"Converts an integer from little endian to the target's endianness.\n \n@@ -548,7 +486,6 @@ if cfg!(target_endian = \\\"little\\\") {\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(not(stage0))]\n             #[rustc_const_unstable(feature = \"const_int_ops\")]\n             #[inline]\n             pub const fn from_le(x: Self) -> Self {\n@@ -563,16 +500,6 @@ $EndFeature, \"\n             }\n         }\n \n-        doc_comment! {\n-            concat!(\"Dummy docs. See !stage0 documentation\"),\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(stage0)]\n-            #[inline]\n-            pub fn from_le(x: Self) -> Self {\n-                if cfg!(target_endian = \"little\") { x } else { x.swap_bytes() }\n-            }\n-        }\n-\n         doc_comment! {\n             concat!(\"Converts `self` to big endian from the target's endianness.\n \n@@ -593,7 +520,6 @@ if cfg!(target_endian = \\\"big\\\") {\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(not(stage0))]\n             #[rustc_const_unstable(feature = \"const_int_ops\")]\n             #[inline]\n             pub const fn to_be(self) -> Self { // or not to be?\n@@ -608,16 +534,6 @@ $EndFeature, \"\n             }\n         }\n \n-        doc_comment! {\n-            concat!(\"Dummy docs. See !stage0 documentation\"),\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(stage0)]\n-            #[inline]\n-            pub fn to_be(self) -> Self { // or not to be?\n-                if cfg!(target_endian = \"big\") { self } else { self.swap_bytes() }\n-            }\n-        }\n-\n         doc_comment! {\n             concat!(\"Converts `self` to little endian from the target's endianness.\n \n@@ -638,7 +554,6 @@ if cfg!(target_endian = \\\"little\\\") {\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(not(stage0))]\n             #[rustc_const_unstable(feature = \"const_int_ops\")]\n             #[inline]\n             pub const fn to_le(self) -> Self {\n@@ -653,16 +568,6 @@ $EndFeature, \"\n             }\n         }\n \n-        doc_comment! {\n-            concat!(\"Dummy docs. See !stage0 documentation\"),\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(stage0)]\n-            #[inline]\n-            pub fn to_le(self) -> Self {\n-                if cfg!(target_endian = \"little\") { self } else { self.swap_bytes() }\n-            }\n-        }\n-\n         doc_comment! {\n             concat!(\"Checked integer addition. Computes `self + rhs`, returning `None`\n if overflow occurred.\n@@ -2161,24 +2066,13 @@ Basic usage:\n assert_eq!(n.count_ones(), 3);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(not(stage0))]\n             #[rustc_const_unstable(feature = \"const_int_ops\")]\n             #[inline]\n             pub const fn count_ones(self) -> u32 {\n                 unsafe { intrinsics::ctpop(self as $ActualT) as u32 }\n             }\n         }\n \n-        doc_comment! {\n-            concat!(\"Dummy docs. See !stage0 documentation\"),\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(stage0)]\n-            #[inline]\n-            pub fn count_ones(self) -> u32 {\n-                unsafe { intrinsics::ctpop(self as $ActualT) as u32 }\n-            }\n-        }\n-\n         doc_comment! {\n             concat!(\"Returns the number of zeros in the binary representation of `self`.\n \n@@ -2190,24 +2084,13 @@ Basic usage:\n \", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::max_value().count_zeros(), 0);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(not(stage0))]\n             #[rustc_const_unstable(feature = \"const_int_ops\")]\n             #[inline]\n             pub const fn count_zeros(self) -> u32 {\n                 (!self).count_ones()\n             }\n         }\n \n-        doc_comment! {\n-            concat!(\"Dummy docs. See !stage0 documentation\"),\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(stage0)]\n-            #[inline]\n-            pub fn count_zeros(self) -> u32 {\n-                (!self).count_ones()\n-            }\n-        }\n-\n         doc_comment! {\n             concat!(\"Returns the number of leading zeros in the binary representation of `self`.\n \n@@ -2221,24 +2104,13 @@ Basic usage:\n assert_eq!(n.leading_zeros(), 2);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(not(stage0))]\n             #[rustc_const_unstable(feature = \"const_int_ops\")]\n             #[inline]\n             pub const fn leading_zeros(self) -> u32 {\n                 unsafe { intrinsics::ctlz(self as $ActualT) as u32 }\n             }\n         }\n \n-        doc_comment! {\n-            concat!(\"Dummy docs. See !stage0 documentation\"),\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(stage0)]\n-            #[inline]\n-            pub fn leading_zeros(self) -> u32 {\n-                unsafe { intrinsics::ctlz(self as $ActualT) as u32 }\n-            }\n-        }\n-\n         doc_comment! {\n             concat!(\"Returns the number of trailing zeros in the binary representation\n of `self`.\n@@ -2253,24 +2125,13 @@ Basic usage:\n assert_eq!(n.trailing_zeros(), 3);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(not(stage0))]\n             #[rustc_const_unstable(feature = \"const_int_ops\")]\n             #[inline]\n             pub const fn trailing_zeros(self) -> u32 {\n                 unsafe { uint_cttz_call!(self, $BITS) as u32 }\n             }\n         }\n \n-        doc_comment! {\n-            concat!(\"Dummy docs. See !stage0 documentation\"),\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(stage0)]\n-            #[inline]\n-            pub fn trailing_zeros(self) -> u32 {\n-                unsafe { uint_cttz_call!(self, $BITS) as u32 }\n-            }\n-        }\n-\n         /// Shifts the bits to the left by a specified amount, `n`,\n         /// wrapping the truncated bits to the end of the resulting integer.\n         ///\n@@ -2343,21 +2204,12 @@ assert_eq!(n.trailing_zeros(), 3);\", $EndFeature, \"\n         /// assert_eq!(m, 21760);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[cfg(not(stage0))]\n         #[rustc_const_unstable(feature = \"const_int_ops\")]\n         #[inline]\n         pub const fn swap_bytes(self) -> Self {\n             unsafe { intrinsics::bswap(self as $ActualT) as Self }\n         }\n \n-        /// Dummy docs. See !stage0 documentation.\n-        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        #[cfg(stage0)]\n-        #[inline]\n-        pub fn swap_bytes(self) -> Self {\n-            unsafe { intrinsics::bswap(self as $ActualT) as Self }\n-        }\n-\n         /// Reverses the bit pattern of the integer.\n         ///\n         /// # Examples\n@@ -2404,7 +2256,6 @@ if cfg!(target_endian = \\\"big\\\") {\n }\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(not(stage0))]\n             #[rustc_const_unstable(feature = \"const_int_ops\")]\n             #[inline]\n             pub const fn from_be(x: Self) -> Self {\n@@ -2419,16 +2270,6 @@ if cfg!(target_endian = \\\"big\\\") {\n             }\n         }\n \n-        doc_comment! {\n-            concat!(\"Dummy docs. See !stage0 documentation\"),\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(stage0)]\n-            #[inline]\n-            pub fn from_be(x: Self) -> Self {\n-                if cfg!(target_endian = \"big\") { x } else { x.swap_bytes() }\n-            }\n-        }\n-\n         doc_comment! {\n             concat!(\"Converts an integer from little endian to the target's endianness.\n \n@@ -2449,7 +2290,6 @@ if cfg!(target_endian = \\\"little\\\") {\n }\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(not(stage0))]\n             #[rustc_const_unstable(feature = \"const_int_ops\")]\n             #[inline]\n             pub const fn from_le(x: Self) -> Self {\n@@ -2464,16 +2304,6 @@ if cfg!(target_endian = \\\"little\\\") {\n             }\n         }\n \n-        doc_comment! {\n-            concat!(\"Dummy docs. See !stage0 documentation\"),\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(stage0)]\n-            #[inline]\n-            pub fn from_le(x: Self) -> Self {\n-                if cfg!(target_endian = \"little\") { x } else { x.swap_bytes() }\n-            }\n-        }\n-\n         doc_comment! {\n             concat!(\"Converts `self` to big endian from the target's endianness.\n \n@@ -2494,7 +2324,6 @@ if cfg!(target_endian = \\\"big\\\") {\n }\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(not(stage0))]\n             #[rustc_const_unstable(feature = \"const_int_ops\")]\n             #[inline]\n             pub const fn to_be(self) -> Self { // or not to be?\n@@ -2509,16 +2338,6 @@ if cfg!(target_endian = \\\"big\\\") {\n             }\n         }\n \n-        doc_comment! {\n-            concat!(\"Dummy docs. See !stage0 documentation\"),\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(stage0)]\n-            #[inline]\n-            pub fn to_be(self) -> Self { // or not to be?\n-                if cfg!(target_endian = \"big\") { self } else { self.swap_bytes() }\n-            }\n-        }\n-\n         doc_comment! {\n             concat!(\"Converts `self` to little endian from the target's endianness.\n \n@@ -2539,7 +2358,6 @@ if cfg!(target_endian = \\\"little\\\") {\n }\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(not(stage0))]\n             #[rustc_const_unstable(feature = \"const_int_ops\")]\n             #[inline]\n             pub const fn to_le(self) -> Self {\n@@ -2554,16 +2372,6 @@ if cfg!(target_endian = \\\"little\\\") {\n             }\n         }\n \n-        doc_comment! {\n-            concat!(\"Dummy docs. See !stage0 documentation\"),\n-            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[cfg(stage0)]\n-            #[inline]\n-            pub fn to_le(self) -> Self {\n-                if cfg!(target_endian = \"little\") { self } else { self.swap_bytes() }\n-            }\n-        }\n-\n         doc_comment! {\n             concat!(\"Checked integer addition. Computes `self + rhs`, returning `None`\n if overflow occurred."}, {"sha": "1c826c2fa76bdd6c08fd13096cd269e70ba5ac79", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=48af7714d81bfa9a30d2f0175968ca5232fa23b5", "patch": "@@ -531,7 +531,6 @@ assert_eq!(n.trailing_zeros(), 3);\n             /// assert_eq!(m, Wrapping(-22016));\n             /// ```\n             #[unstable(feature = \"reverse_bits\", issue = \"48763\")]\n-            #[cfg(not(stage0))]\n             #[inline]\n             pub fn reverse_bits(self) -> Self {\n                 Wrapping(self.0.reverse_bits())"}, {"sha": "1b4129b99fc535bc8315c068bfe8f9ccb3b6d50b", "filename": "src/libcore/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=48af7714d81bfa9a30d2f0175968ca5232fa23b5", "patch": "@@ -35,7 +35,7 @@ use fmt;\n ///\n /// panic!(\"Normal panic\");\n /// ```\n-#[cfg_attr(not(stage0), lang = \"panic_info\")]\n+#[lang = \"panic_info\"]\n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n #[derive(Debug)]\n pub struct PanicInfo<'a> {"}, {"sha": "58407de9566e95048a4edcdcf9d3333651fd0d66", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=48af7714d81bfa9a30d2f0175968ca5232fa23b5", "patch": "@@ -37,7 +37,6 @@\n             issue = \"0\")]\n \n use fmt;\n-#[cfg(not(stage0))]\n use panic::{Location, PanicInfo};\n \n #[cold] #[inline(never)] // this is the slow path, always\n@@ -61,20 +60,6 @@ fn panic_bounds_check(file_line_col: &(&'static str, u32, u32),\n                            len, index), file_line_col)\n }\n \n-#[cfg(stage0)]\n-#[cold] #[inline(never)]\n-pub fn panic_fmt(fmt: fmt::Arguments, file_line_col: &(&'static str, u32, u32)) -> ! {\n-    #[allow(improper_ctypes)]\n-    extern {\n-        #[lang = \"panic_fmt\"]\n-        #[unwind(allowed)]\n-        fn panic_impl(fmt: fmt::Arguments, file: &'static str, line: u32, col: u32) -> !;\n-    }\n-    let (file, line, col) = *file_line_col;\n-    unsafe { panic_impl(fmt, file, line, col) }\n-}\n-\n-#[cfg(not(stage0))]\n #[cold] #[inline(never)]\n pub fn panic_fmt(fmt: fmt::Arguments, file_line_col: &(&'static str, u32, u32)) -> ! {\n     // NOTE This function never crosses the FFI boundary; it's a Rust-to-Rust call"}, {"sha": "164b29d35159bcd32f2e033f67174cd6dc49b7ee", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=48af7714d81bfa9a30d2f0175968ca5232fa23b5", "patch": "@@ -1243,7 +1243,6 @@ impl<T: ?Sized> *const T {\n     /// # } }\n     /// ```\n     #[unstable(feature = \"align_offset\", issue = \"44488\")]\n-    #[cfg(not(stage0))]\n     pub fn align_offset(self, align: usize) -> usize where T: Sized {\n         if !align.is_power_of_two() {\n             panic!(\"align_offset: align is not a power-of-two\");\n@@ -1252,18 +1251,6 @@ impl<T: ?Sized> *const T {\n             align_offset(self, align)\n         }\n     }\n-\n-    /// definitely docs.\n-    #[unstable(feature = \"align_offset\", issue = \"44488\")]\n-    #[cfg(stage0)]\n-    pub fn align_offset(self, align: usize) -> usize where T: Sized {\n-        if !align.is_power_of_two() {\n-            panic!(\"align_offset: align is not a power-of-two\");\n-        }\n-        unsafe {\n-            intrinsics::align_offset(self as *const (), align)\n-        }\n-    }\n }\n \n \n@@ -2308,7 +2295,6 @@ impl<T: ?Sized> *mut T {\n     /// # } }\n     /// ```\n     #[unstable(feature = \"align_offset\", issue = \"44488\")]\n-    #[cfg(not(stage0))]\n     pub fn align_offset(self, align: usize) -> usize where T: Sized {\n         if !align.is_power_of_two() {\n             panic!(\"align_offset: align is not a power-of-two\");\n@@ -2317,18 +2303,6 @@ impl<T: ?Sized> *mut T {\n             align_offset(self, align)\n         }\n     }\n-\n-    /// definitely docs.\n-    #[unstable(feature = \"align_offset\", issue = \"44488\")]\n-    #[cfg(stage0)]\n-    pub fn align_offset(self, align: usize) -> usize where T: Sized {\n-        if !align.is_power_of_two() {\n-            panic!(\"align_offset: align is not a power-of-two\");\n-        }\n-        unsafe {\n-            intrinsics::align_offset(self as *const (), align)\n-        }\n-    }\n }\n \n /// Align pointer `p`.\n@@ -2346,7 +2320,6 @@ impl<T: ?Sized> *mut T {\n ///\n /// Any questions go to @nagisa.\n #[lang=\"align_offset\"]\n-#[cfg(not(stage0))]\n pub(crate) unsafe fn align_offset<T: Sized>(p: *const T, a: usize) -> usize {\n     /// Calculate multiplicative modular inverse of `x` modulo `m`.\n     ///"}, {"sha": "87b7ae39cfd05f1baee657deea3adc74102eebea", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=48af7714d81bfa9a30d2f0175968ca5232fa23b5", "patch": "@@ -1708,7 +1708,6 @@ impl<T> [T] {\n     }\n \n     /// Function to calculate lenghts of the middle and trailing slice for `align_to{,_mut}`.\n-    #[cfg(not(stage0))]\n     fn align_to_offsets<U>(&self) -> (usize, usize) {\n         // What we gonna do about `rest` is figure out what multiple of `U`s we can put in a\n         // lowest number of `T`s. And how many `T`s we need for each such \"multiple\".\n@@ -1798,7 +1797,6 @@ impl<T> [T] {\n     /// }\n     /// ```\n     #[unstable(feature = \"slice_align_to\", issue = \"44488\")]\n-    #[cfg(not(stage0))]\n     pub unsafe fn align_to<U>(&self) -> (&[T], &[U], &[T]) {\n         // Note that most of this function will be constant-evaluated,\n         if ::mem::size_of::<U>() == 0 || ::mem::size_of::<T>() == 0 {\n@@ -1851,7 +1849,6 @@ impl<T> [T] {\n     /// }\n     /// ```\n     #[unstable(feature = \"slice_align_to\", issue = \"44488\")]\n-    #[cfg(not(stage0))]\n     pub unsafe fn align_to_mut<U>(&mut self) -> (&mut [T], &mut [U], &mut [T]) {\n         // Note that most of this function will be constant-evaluated,\n         if ::mem::size_of::<U>() == 0 || ::mem::size_of::<T>() == 0 {"}, {"sha": "d8efb582eaa8b8d6c783a724c1f471bf5ca9f877", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=48af7714d81bfa9a30d2f0175968ca5232fa23b5", "patch": "@@ -49,7 +49,6 @@\n #![feature(fs_read_write)]\n #![feature(iterator_find_map)]\n #![cfg_attr(windows, feature(libc))]\n-#![cfg_attr(stage0, feature(macro_lifetime_matcher))]\n #![feature(macro_vis_matcher)]\n #![feature(never_type)]\n #![feature(exhaustive_patterns)]"}, {"sha": "0c78fd74a234ee01091ae813c400b30afc8c575f", "filename": "src/librustc_asan/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibrustc_asan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibrustc_asan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Flib.rs?ref=48af7714d81bfa9a30d2f0175968ca5232fa23b5", "patch": "@@ -10,7 +10,6 @@\n \n #![sanitizer_runtime]\n #![feature(alloc_system)]\n-#![cfg_attr(stage0, feature(global_allocator))]\n #![feature(sanitizer_runtime)]\n #![feature(staged_api)]\n #![no_std]"}, {"sha": "0c78fd74a234ee01091ae813c400b30afc8c575f", "filename": "src/librustc_lsan/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibrustc_lsan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibrustc_lsan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Flib.rs?ref=48af7714d81bfa9a30d2f0175968ca5232fa23b5", "patch": "@@ -10,7 +10,6 @@\n \n #![sanitizer_runtime]\n #![feature(alloc_system)]\n-#![cfg_attr(stage0, feature(global_allocator))]\n #![feature(sanitizer_runtime)]\n #![feature(staged_api)]\n #![no_std]"}, {"sha": "dad1030cb610bfc7ee4c7c82cbab0a65fc962169", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=48af7714d81bfa9a30d2f0175968ca5232fa23b5", "patch": "@@ -16,7 +16,6 @@\n #![feature(fs_read_write)]\n #![feature(libc)]\n #![feature(macro_at_most_once_rep)]\n-#![cfg_attr(stage0, feature(macro_lifetime_matcher))]\n #![feature(proc_macro_internals)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "0c78fd74a234ee01091ae813c400b30afc8c575f", "filename": "src/librustc_msan/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibrustc_msan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibrustc_msan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2Flib.rs?ref=48af7714d81bfa9a30d2f0175968ca5232fa23b5", "patch": "@@ -10,7 +10,6 @@\n \n #![sanitizer_runtime]\n #![feature(alloc_system)]\n-#![cfg_attr(stage0, feature(global_allocator))]\n #![feature(sanitizer_runtime)]\n #![feature(staged_api)]\n #![no_std]"}, {"sha": "685c86029b668a278e4c663b3ebf2d8f5b5e4a0f", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=48af7714d81bfa9a30d2f0175968ca5232fa23b5", "patch": "@@ -12,7 +12,6 @@\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(custom_attribute)]\n-#![cfg_attr(stage0, feature(macro_lifetime_matcher))]\n #![allow(unused_attributes)]\n \n #![recursion_limit=\"256\"]"}, {"sha": "0c78fd74a234ee01091ae813c400b30afc8c575f", "filename": "src/librustc_tsan/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibrustc_tsan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibrustc_tsan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2Flib.rs?ref=48af7714d81bfa9a30d2f0175968ca5232fa23b5", "patch": "@@ -10,7 +10,6 @@\n \n #![sanitizer_runtime]\n #![feature(alloc_system)]\n-#![cfg_attr(stage0, feature(global_allocator))]\n #![feature(sanitizer_runtime)]\n #![feature(staged_api)]\n #![no_std]"}, {"sha": "d73cb1f8349a655ca5414a42445b93360bc31cc8", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=48af7714d81bfa9a30d2f0175968ca5232fa23b5", "patch": "@@ -322,7 +322,7 @@\n #![feature(doc_keyword)]\n #![feature(float_internals)]\n #![feature(panic_info_message)]\n-#![cfg_attr(not(stage0), feature(panic_implementation))]\n+#![feature(panic_implementation)]\n \n #![default_lib_allocator]\n \n@@ -332,9 +332,6 @@\n // `force_alloc_system` is *only* intended as a workaround for local rebuilds\n // with a rustc without jemalloc.\n // FIXME(#44236) shouldn't need MSVC logic\n-#![cfg_attr(all(not(target_env = \"msvc\"),\n-                any(all(stage0, not(test)), feature = \"force_alloc_system\")),\n-            feature(global_allocator))]\n #[cfg(all(not(target_env = \"msvc\"),\n           any(all(stage0, not(test)), feature = \"force_alloc_system\")))]\n #[global_allocator]"}, {"sha": "46b6cf60705c1c926d1420d110f2ecd6ca4cfc22", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 32, "deletions": 68, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=48af7714d81bfa9a30d2f0175968ca5232fa23b5", "patch": "@@ -319,18 +319,6 @@ pub fn panicking() -> bool {\n \n /// Entry point of panic from the libcore crate.\n #[cfg(not(test))]\n-#[cfg(stage0)]\n-#[lang = \"panic_fmt\"]\n-pub extern fn rust_begin_panic(msg: fmt::Arguments,\n-                               file: &'static str,\n-                               line: u32,\n-                               col: u32) -> ! {\n-    begin_panic_fmt(&msg, &(file, line, col))\n-}\n-\n-/// Entry point of panic from the libcore crate.\n-#[cfg(not(test))]\n-#[cfg(not(stage0))]\n #[panic_implementation]\n #[unwind(allowed)]\n pub fn rust_begin_panic(info: &PanicInfo) -> ! {\n@@ -343,78 +331,54 @@ pub fn rust_begin_panic(info: &PanicInfo) -> ! {\n /// site as much as possible (so that `panic!()` has as low an impact\n /// on (e.g.) the inlining of other functions as possible), by moving\n /// the actual formatting into this shared place.\n-#[cfg(stage0)]\n #[unstable(feature = \"libstd_sys_internals\",\n            reason = \"used by the panic! macro\",\n            issue = \"0\")]\n #[inline(never)] #[cold]\n pub fn begin_panic_fmt(msg: &fmt::Arguments,\n                        file_line_col: &(&'static str, u32, u32)) -> ! {\n-    // We do two allocations here, unfortunately. But (a) they're\n-    // required with the current scheme, and (b) we don't handle\n-    // panic + OOM properly anyway (see comment in begin_panic\n-    // below).\n-\n-    rust_panic_with_hook(&mut PanicPayload::new(msg), Some(msg), file_line_col);\n-}\n-\n-// NOTE(stage0) move into `continue_panic_fmt` on next stage0 update\n-struct PanicPayload<'a> {\n-    inner: &'a fmt::Arguments<'a>,\n-    string: Option<String>,\n+    let (file, line, col) = *file_line_col;\n+    let info = PanicInfo::internal_constructor(\n+        Some(msg),\n+        Location::internal_constructor(file, line, col),\n+    );\n+    continue_panic_fmt(&info)\n }\n \n-impl<'a> PanicPayload<'a> {\n-    fn new(inner: &'a fmt::Arguments<'a>) -> PanicPayload<'a> {\n-        PanicPayload { inner, string: None }\n+fn continue_panic_fmt(info: &PanicInfo) -> ! {\n+    struct PanicPayload<'a> {\n+        inner: &'a fmt::Arguments<'a>,\n+        string: Option<String>,\n     }\n \n-    fn fill(&mut self) -> &mut String {\n-        use fmt::Write;\n+    impl<'a> PanicPayload<'a> {\n+        fn new(inner: &'a fmt::Arguments<'a>) -> PanicPayload<'a> {\n+            PanicPayload { inner, string: None }\n+        }\n \n-        let inner = self.inner;\n-        self.string.get_or_insert_with(|| {\n-            let mut s = String::new();\n-            drop(s.write_fmt(*inner));\n-            s\n-        })\n-    }\n-}\n+        fn fill(&mut self) -> &mut String {\n+            use fmt::Write;\n \n-unsafe impl<'a> BoxMeUp for PanicPayload<'a> {\n-    fn box_me_up(&mut self) -> *mut (Any + Send) {\n-        let contents = mem::replace(self.fill(), String::new());\n-        Box::into_raw(Box::new(contents))\n+            let inner = self.inner;\n+            self.string.get_or_insert_with(|| {\n+                let mut s = String::new();\n+                drop(s.write_fmt(*inner));\n+                s\n+            })\n+        }\n     }\n \n-    fn get(&mut self) -> &(Any + Send) {\n-        self.fill()\n-    }\n-}\n+    unsafe impl<'a> BoxMeUp for PanicPayload<'a> {\n+        fn box_me_up(&mut self) -> *mut (Any + Send) {\n+            let contents = mem::replace(self.fill(), String::new());\n+            Box::into_raw(Box::new(contents))\n+        }\n \n-/// The entry point for panicking with a formatted message.\n-///\n-/// This is designed to reduce the amount of code required at the call\n-/// site as much as possible (so that `panic!()` has as low an impact\n-/// on (e.g.) the inlining of other functions as possible), by moving\n-/// the actual formatting into this shared place.\n-#[cfg(not(stage0))]\n-#[unstable(feature = \"libstd_sys_internals\",\n-           reason = \"used by the panic! macro\",\n-           issue = \"0\")]\n-#[inline(never)] #[cold]\n-pub fn begin_panic_fmt(msg: &fmt::Arguments,\n-                       file_line_col: &(&'static str, u32, u32)) -> ! {\n-    let (file, line, col) = *file_line_col;\n-    let info = PanicInfo::internal_constructor(\n-        Some(msg),\n-        Location::internal_constructor(file, line, col),\n-    );\n-    continue_panic_fmt(&info)\n-}\n+        fn get(&mut self) -> &(Any + Send) {\n+            self.fill()\n+        }\n+    }\n \n-#[cfg(not(stage0))]\n-fn continue_panic_fmt(info: &PanicInfo) -> ! {\n     // We do two allocations here, unfortunately. But (a) they're\n     // required with the current scheme, and (b) we don't handle\n     // panic + OOM properly anyway (see comment in begin_panic"}, {"sha": "538f3a8517630eb7f66ab6f3296ceee73568dad7", "filename": "src/stage0.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/48af7714d81bfa9a30d2f0175968ca5232fa23b5/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=48af7714d81bfa9a30d2f0175968ca5232fa23b5", "patch": "@@ -12,7 +12,7 @@\n # source tarball for a stable release you'll likely see `1.x.0` for rustc and\n # `0.x.0` for Cargo where they were released on `date`.\n \n-date: 2018-05-10\n+date: 2018-06-30\n rustc: beta\n cargo: beta\n "}, {"sha": "5699afe508d62924f6b38b19dc98296ad33d1659", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=48af7714d81bfa9a30d2f0175968ca5232fa23b5", "patch": "@@ -1 +1 @@\n-Subproject commit e2348c2db296ce33428933c3ab8786d5f3c54a2e\n+Subproject commit 5699afe508d62924f6b38b19dc98296ad33d1659"}, {"sha": "89414e44dc94844888e59c08bc31dcccb1792800", "filename": "src/tools/rust-installer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-installer?ref=48af7714d81bfa9a30d2f0175968ca5232fa23b5", "patch": "@@ -1 +1 @@\n-Subproject commit 118e078c5badd520d18b92813fd88789c8d341ab\n+Subproject commit 89414e44dc94844888e59c08bc31dcccb1792800"}]}