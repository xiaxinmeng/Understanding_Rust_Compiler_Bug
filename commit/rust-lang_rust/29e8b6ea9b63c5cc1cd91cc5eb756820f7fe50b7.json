{"sha": "29e8b6ea9b63c5cc1cd91cc5eb756820f7fe50b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZThiNmVhOWI2M2M1Y2MxY2Q5MWNjNWViNzU2ODIwZjdmZTUwYjc=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-03-24T14:17:40Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-03-24T14:17:40Z"}, "message": "libcore: implement `str::each_char_reverse` correctly.\n\nPreviously, `each_char_reverse` was not iterating at all, so the\ntestcase never ran properly.", "tree": {"sha": "4aa90491f08117fb078a76bd02e8ad3d52d1c3f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4aa90491f08117fb078a76bd02e8ad3d52d1c3f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29e8b6ea9b63c5cc1cd91cc5eb756820f7fe50b7", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29e8b6ea9b63c5cc1cd91cc5eb756820f7fe50b7", "html_url": "https://github.com/rust-lang/rust/commit/29e8b6ea9b63c5cc1cd91cc5eb756820f7fe50b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29e8b6ea9b63c5cc1cd91cc5eb756820f7fe50b7/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12df65470fb8c5d57fb4f94d37557daa6282173f", "url": "https://api.github.com/repos/rust-lang/rust/commits/12df65470fb8c5d57fb4f94d37557daa6282173f", "html_url": "https://github.com/rust-lang/rust/commit/12df65470fb8c5d57fb4f94d37557daa6282173f"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "92358c6a5e97ba6a1db2d1c05689c2bf34ddef54", "filename": "src/libcore/str.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/29e8b6ea9b63c5cc1cd91cc5eb756820f7fe50b7/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29e8b6ea9b63c5cc1cd91cc5eb756820f7fe50b7/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=29e8b6ea9b63c5cc1cd91cc5eb756820f7fe50b7", "patch": "@@ -1020,22 +1020,21 @@ pub fn each_chari(s: &str, it: &fn(uint, char) -> bool) {\n /// Iterates over the chars in a string in reverse\n #[inline(always)]\n pub fn each_char_reverse(s: &str, it: &fn(char) -> bool) {\n-    let mut pos = 0;\n-    let len = s.char_len();\n-    while pos > 0 {\n-        let CharRange {ch, next} = char_range_at_reverse(s, pos);\n-        pos = next;\n-        if !it(ch) { break; }\n-    }\n+    each_chari_reverse(s, |_, c| it(c))\n }\n \n // Iterates over the chars in a string in reverse, with indices\n #[inline(always)]\n pub fn each_chari_reverse(s: &str, it: &fn(uint, char) -> bool) {\n+    let mut pos = s.len();\n     let mut ch_pos = s.char_len();\n-    for s.each_char_reverse |ch| {\n+    while pos > 0 {\n+        let CharRange {ch, next} = char_range_at_reverse(s, pos);\n+        pos = next;\n         ch_pos -= 1;\n+\n         if !it(ch_pos, ch) { break; }\n+\n     }\n }\n \n@@ -3661,10 +3660,10 @@ mod tests {\n     fn test_each_char_reverse() {\n         let s = ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n         let v = ~['\u0e28','\u0e44','\u0e17','\u0e22','\u4e2d','\u534e','V','i','\u1ec7','t',' ','N','a','m'];\n-        let mut pos = 0;\n+        let mut pos = v.len();\n         for s.each_char_reverse |ch| {\n+            pos -= 1;\n             fail_unless!(ch == v[pos]);\n-            pos += 1;\n         }\n     }\n "}]}