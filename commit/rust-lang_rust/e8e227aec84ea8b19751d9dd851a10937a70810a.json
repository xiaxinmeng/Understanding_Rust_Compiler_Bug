{"sha": "e8e227aec84ea8b19751d9dd851a10937a70810a", "node_id": "C_kwDOAAsO6NoAKGU4ZTIyN2FlYzg0ZWE4YjE5NzUxZDlkZDg1MWExMDkzN2E3MDgxMGE", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-08T10:43:21Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-20T10:49:42Z"}, "message": "Prepare crate loader for LockGuard", "tree": {"sha": "ca93c11f408c2a6889bad4710a27c290283259bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca93c11f408c2a6889bad4710a27c290283259bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8e227aec84ea8b19751d9dd851a10937a70810a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8e227aec84ea8b19751d9dd851a10937a70810a", "html_url": "https://github.com/rust-lang/rust/commit/e8e227aec84ea8b19751d9dd851a10937a70810a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8e227aec84ea8b19751d9dd851a10937a70810a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d191de63f00f667b35f7b3a917985e0fc2ddd1cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d191de63f00f667b35f7b3a917985e0fc2ddd1cd", "html_url": "https://github.com/rust-lang/rust/commit/d191de63f00f667b35f7b3a917985e0fc2ddd1cd"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "0e20cfbef57481109b267fd8265c3fb937cf22da", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8e227aec84ea8b19751d9dd851a10937a70810a/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8e227aec84ea8b19751d9dd851a10937a70810a/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=e8e227aec84ea8b19751d9dd851a10937a70810a", "patch": "@@ -852,7 +852,7 @@ impl<'a, 'b, 'tcx> BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n         } else if orig_name == Some(kw::SelfLower) {\n             Some(self.r.graph_root)\n         } else {\n-            let crate_id = self.r.crate_loader().process_extern_crate(item, local_def_id);\n+            let crate_id = self.r.crate_loader(|c| c.process_extern_crate(item, local_def_id));\n             crate_id.map(|crate_id| {\n                 self.r.extern_crate_map.insert(local_def_id, crate_id);\n                 self.r.expect_module(crate_id.as_def_id())"}, {"sha": "80c21bb083073f784fd968576697cd63afd9b21c", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8e227aec84ea8b19751d9dd851a10937a70810a/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8e227aec84ea8b19751d9dd851a10937a70810a/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=e8e227aec84ea8b19751d9dd851a10937a70810a", "patch": "@@ -1315,7 +1315,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     // otherwise cause duplicate suggestions.\n                     continue;\n                 }\n-                let crate_id = self.crate_loader().maybe_process_path_extern(ident.name);\n+                let crate_id = self.crate_loader(|c| c.maybe_process_path_extern(ident.name));\n                 if let Some(crate_id) = crate_id {\n                     let crate_root = self.expect_module(crate_id.as_def_id());\n                     suggestions.extend(self.lookup_import_candidates_from_module("}, {"sha": "7b67956d51e43747cccf8c3325e9c6467ee27c8b", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8e227aec84ea8b19751d9dd851a10937a70810a/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8e227aec84ea8b19751d9dd851a10937a70810a/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=e8e227aec84ea8b19751d9dd851a10937a70810a", "patch": "@@ -1700,8 +1700,7 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n                             let extern_prelude = self.r.extern_prelude.clone();\n                             names.extend(extern_prelude.iter().flat_map(|(ident, _)| {\n                                 self.r\n-                                    .crate_loader()\n-                                    .maybe_process_path_extern(ident.name)\n+                                    .crate_loader(|c| c.maybe_process_path_extern(ident.name))\n                                     .and_then(|crate_id| {\n                                         let crate_mod =\n                                             Res::Def(DefKind::Mod, crate_id.as_def_id());"}, {"sha": "e6df3306192e21fcdfd34aab1fc66a823e3cbbc6", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e8e227aec84ea8b19751d9dd851a10937a70810a/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8e227aec84ea8b19751d9dd851a10937a70810a/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=e8e227aec84ea8b19751d9dd851a10937a70810a", "patch": "@@ -1482,15 +1482,15 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         StableHashingContext::new(self.tcx.sess, &self.untracked)\n     }\n \n-    fn crate_loader(&mut self) -> CrateLoader<'_> {\n-        CrateLoader::new(\n+    fn crate_loader<T>(&mut self, f: impl FnOnce(&mut CrateLoader<'_>) -> T) -> T {\n+        f(&mut CrateLoader::new(\n             &self.tcx.sess,\n             &*self.metadata_loader,\n             self.local_crate_name,\n             &mut *self.untracked.cstore.untracked_as_any().downcast_mut().unwrap(),\n             self.untracked.definitions.read(),\n             &mut self.used_extern_options,\n-        )\n+        ))\n     }\n \n     fn cstore(&self) -> &CStore {\n@@ -1539,7 +1539,9 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             self.tcx.sess.time(\"resolve_main\", || self.resolve_main());\n             self.tcx.sess.time(\"resolve_check_unused\", || self.check_unused(krate));\n             self.tcx.sess.time(\"resolve_report_errors\", || self.report_errors(krate));\n-            self.tcx.sess.time(\"resolve_postprocess\", || self.crate_loader().postprocess(krate));\n+            self.tcx\n+                .sess\n+                .time(\"resolve_postprocess\", || self.crate_loader(|c| c.postprocess(krate)));\n         });\n     }\n \n@@ -1879,10 +1881,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             } else {\n                 let crate_id = if finalize {\n                     let Some(crate_id) =\n-                        self.crate_loader().process_path_extern(ident.name, ident.span) else { return Some(self.dummy_binding); };\n+                        self.crate_loader(|c| c.process_path_extern(ident.name, ident.span)) else { return Some(self.dummy_binding); };\n                     crate_id\n                 } else {\n-                    self.crate_loader().maybe_process_path_extern(ident.name)?\n+                    self.crate_loader(|c| c.maybe_process_path_extern(ident.name))?\n                 };\n                 let crate_root = self.expect_module(crate_id.as_def_id());\n                 let vis = ty::Visibility::<LocalDefId>::Public;"}]}