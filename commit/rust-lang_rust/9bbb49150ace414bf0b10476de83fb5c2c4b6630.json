{"sha": "9bbb49150ace414bf0b10476de83fb5c2c4b6630", "node_id": "C_kwDOAAsO6NoAKDliYmI0OTE1MGFjZTQxNGJmMGIxMDQ3NmRlODNmYjVjMmM0YjY2MzA", "commit": {"author": {"name": "Ellis Hoag", "email": "ellis.sparky.hoag@gmail.com", "date": "2022-09-24T18:05:37Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-03-01T00:13:19Z"}, "message": "rebase and update trait names", "tree": {"sha": "169a112d647141cd5bb937455d470fa958dc632c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/169a112d647141cd5bb937455d470fa958dc632c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bbb49150ace414bf0b10476de83fb5c2c4b6630", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bbb49150ace414bf0b10476de83fb5c2c4b6630", "html_url": "https://github.com/rust-lang/rust/commit/9bbb49150ace414bf0b10476de83fb5c2c4b6630", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bbb49150ace414bf0b10476de83fb5c2c4b6630/comments", "author": {"login": "ellishg", "id": 8961915, "node_id": "MDQ6VXNlcjg5NjE5MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8961915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ellishg", "html_url": "https://github.com/ellishg", "followers_url": "https://api.github.com/users/ellishg/followers", "following_url": "https://api.github.com/users/ellishg/following{/other_user}", "gists_url": "https://api.github.com/users/ellishg/gists{/gist_id}", "starred_url": "https://api.github.com/users/ellishg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ellishg/subscriptions", "organizations_url": "https://api.github.com/users/ellishg/orgs", "repos_url": "https://api.github.com/users/ellishg/repos", "events_url": "https://api.github.com/users/ellishg/events{/privacy}", "received_events_url": "https://api.github.com/users/ellishg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e46dc2cffaca41a17498a4392068dc51aa0349f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e46dc2cffaca41a17498a4392068dc51aa0349f", "html_url": "https://github.com/rust-lang/rust/commit/2e46dc2cffaca41a17498a4392068dc51aa0349f"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "a1c95e7a7f45041baf841e047dbb9258d9c59707", "filename": "src/errors.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9bbb49150ace414bf0b10476de83fb5c2c4b6630/src%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bbb49150ace414bf0b10476de83fb5c2c4b6630/src%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferrors.rs?ref=9bbb49150ace414bf0b10476de83fb5c2c4b6630", "patch": "@@ -1,5 +1,5 @@\n use rustc_errors::{DiagnosticArgValue, IntoDiagnosticArg};\n-use rustc_macros::SessionDiagnostic;\n+use rustc_macros::Diagnostic;\n use rustc_middle::ty::Ty;\n use rustc_span::{Span, Symbol};\n use std::borrow::Cow;\n@@ -17,7 +17,7 @@ impl IntoDiagnosticArg for ExitCode {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::ranlib_failure)]\n pub(crate) struct RanlibFailure {\n     exit_code: ExitCode,\n@@ -30,7 +30,7 @@ impl RanlibFailure {\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_basic_integer, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationBasicInteger<'a> {\n     #[primary_span]\n@@ -39,7 +39,7 @@ pub(crate) struct InvalidMonomorphizationBasicInteger<'a> {\n     pub ty: Ty<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_invalid_float_vector, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationInvalidFloatVector<'a> {\n     #[primary_span]\n@@ -49,7 +49,7 @@ pub(crate) struct InvalidMonomorphizationInvalidFloatVector<'a> {\n     pub vec_ty: Ty<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_not_float, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationNotFloat<'a> {\n     #[primary_span]\n@@ -58,15 +58,15 @@ pub(crate) struct InvalidMonomorphizationNotFloat<'a> {\n     pub ty: Ty<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_unrecognized, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationUnrecognized {\n     #[primary_span]\n     pub span: Span,\n     pub name: Symbol,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_expected_signed_unsigned, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationExpectedSignedUnsigned<'a> {\n     #[primary_span]\n@@ -76,7 +76,7 @@ pub(crate) struct InvalidMonomorphizationExpectedSignedUnsigned<'a> {\n     pub vec_ty: Ty<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_unsupported_element, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationUnsupportedElement<'a> {\n     #[primary_span]\n@@ -87,7 +87,7 @@ pub(crate) struct InvalidMonomorphizationUnsupportedElement<'a> {\n     pub ret_ty: Ty<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_invalid_bitmask, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationInvalidBitmask<'a> {\n     #[primary_span]\n@@ -98,7 +98,7 @@ pub(crate) struct InvalidMonomorphizationInvalidBitmask<'a> {\n     pub expected_bytes: u64,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_simd_shuffle, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationSimdShuffle<'a> {\n     #[primary_span]\n@@ -107,7 +107,7 @@ pub(crate) struct InvalidMonomorphizationSimdShuffle<'a> {\n     pub ty: Ty<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_expected_simd, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationExpectedSimd<'a> {\n     #[primary_span]\n@@ -117,7 +117,7 @@ pub(crate) struct InvalidMonomorphizationExpectedSimd<'a> {\n     pub found_ty: Ty<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_mask_type, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationMaskType<'a> {\n     #[primary_span]\n@@ -126,7 +126,7 @@ pub(crate) struct InvalidMonomorphizationMaskType<'a> {\n     pub ty: Ty<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_return_length, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationReturnLength<'a> {\n     #[primary_span]\n@@ -137,7 +137,7 @@ pub(crate) struct InvalidMonomorphizationReturnLength<'a> {\n     pub out_len: u64,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_return_length_input_type, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationReturnLengthInputType<'a> {\n     #[primary_span]\n@@ -149,7 +149,7 @@ pub(crate) struct InvalidMonomorphizationReturnLengthInputType<'a> {\n     pub out_len: u64,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_return_element, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationReturnElement<'a> {\n     #[primary_span]\n@@ -161,7 +161,7 @@ pub(crate) struct InvalidMonomorphizationReturnElement<'a> {\n     pub out_ty: Ty<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_return_type, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationReturnType<'a> {\n     #[primary_span]\n@@ -172,7 +172,7 @@ pub(crate) struct InvalidMonomorphizationReturnType<'a> {\n     pub ret_ty: Ty<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_inserted_type, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationInsertedType<'a> {\n     #[primary_span]\n@@ -183,7 +183,7 @@ pub(crate) struct InvalidMonomorphizationInsertedType<'a> {\n     pub out_ty: Ty<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_return_integer_type, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationReturnIntegerType<'a> {\n     #[primary_span]\n@@ -193,7 +193,7 @@ pub(crate) struct InvalidMonomorphizationReturnIntegerType<'a> {\n     pub out_ty: Ty<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_mismatched_lengths, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationMismatchedLengths {\n     #[primary_span]\n@@ -203,7 +203,7 @@ pub(crate) struct InvalidMonomorphizationMismatchedLengths {\n     pub v_len: u64,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_unsupported_cast, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationUnsupportedCast<'a> {\n     #[primary_span]\n@@ -215,7 +215,7 @@ pub(crate) struct InvalidMonomorphizationUnsupportedCast<'a> {\n     pub out_elem: Ty<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::invalid_monomorphization_unsupported_operation, code = \"E0511\")]\n pub(crate) struct InvalidMonomorphizationUnsupportedOperation<'a> {\n     #[primary_span]\n@@ -225,26 +225,26 @@ pub(crate) struct InvalidMonomorphizationUnsupportedOperation<'a> {\n     pub in_elem: Ty<'a>,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::layout_size_overflow)]\n pub(crate) struct LayoutSizeOverflow {\n     #[primary_span]\n     pub span: Span,\n     pub error: String,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::linkage_const_or_mut_type)]\n pub(crate) struct LinkageConstOrMutType {\n     #[primary_span]\n     pub span: Span\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::lto_not_supported)]\n pub(crate) struct LTONotSupported;\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(codegen_gcc::unwinding_inline_asm)]\n pub(crate) struct UnwindingInlineAsm {\n     #[primary_span]"}]}