{"sha": "c787fe3c70bdb84d0c82d6c592080ca2f1d7902f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ODdmZTNjNzBiZGI4NGQwYzgyZDZjNTkyMDgwY2EyZjFkNzkwMmY=", "commit": {"author": {"name": "oxalica", "email": "oxalicc@pm.me", "date": "2019-10-22T04:02:32Z"}, "committer": {"name": "oxalica", "email": "oxalicc@pm.me", "date": "2019-10-22T04:02:32Z"}, "message": "Fix check of `statx`", "tree": {"sha": "252dc5930bce697578a65d49701554eee8fe9d49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/252dc5930bce697578a65d49701554eee8fe9d49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c787fe3c70bdb84d0c82d6c592080ca2f1d7902f", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXLDp5dXVcfV/VA/qztOS3gxIPQAFAl2ugCUACgkQztOS3gxI\nPQAULQ//RLwLHNr0Erpfd3RUls2Omi18OuSjbB840zVs58B7c7ayq/F1v97UuGLX\nn8q3V5efAzt04ZxjHH71CzRLF4SsTrdtVJK4Fv4evQvniv6VrPvt3D6Hy4/eY3r3\nYOdYwlalvr+q+69ssdibNUMab1Sv508fS3fYhnMjs/Ja12S/jcEB4Wy8vbcqR1cW\nzMTOXpPL9xbbhKIwxrC4PWy1SV0dmCqPS0/7bSjMGxnOeW29OcsmjNZk6oxI9cPZ\nBerDR8zNpFCSna6lFIlcapmmCF1dHk4rZm3KGT4ZgdXBm49RgnZl9eFIksjZenc7\nNOXxvlXcT1Ko6tBk60w6Po6lzjTd/Qsy0FMJXaHHbZ3l32b5ovfeTnbqlJ0zVME9\nLIV3lSwuv/kqKBAMWGzwrKXI0sNhAgrdVMeNz0443w+QFQk6cljOHkSwikwrcwOv\nOVh2CTnyHziCpQ2wzT0mSzGIgPXlEP3GrwQ81O0+psDFhydK6QK7PFMb79N05atn\n109Y2Yh/BOsPJ3Rbz76MUPDpAh+TUUGiVJ6sO63qqQxxvJ6nBJJsqd1/2ZRxtZl9\nBZQYHbyOhnOn4GeSv9x/b2hRwzHwTM5dUo7QQhNSCk+7W+MQTpH0TlEL3IG6K4R6\nGZdFkmaNxU8Xe8Pf+z5Vfai70HbDJRqvY5gMf6QQPZb/yCMn6Ys=\n=9V1X\n-----END PGP SIGNATURE-----", "payload": "tree 252dc5930bce697578a65d49701554eee8fe9d49\nparent 10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07\nauthor oxalica <oxalicc@pm.me> 1571716952 +0800\ncommitter oxalica <oxalicc@pm.me> 1571716952 +0800\n\nFix check of `statx`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c787fe3c70bdb84d0c82d6c592080ca2f1d7902f", "html_url": "https://github.com/rust-lang/rust/commit/c787fe3c70bdb84d0c82d6c592080ca2f1d7902f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c787fe3c70bdb84d0c82d6c592080ca2f1d7902f/comments", "author": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oxalica", "id": 14816024, "node_id": "MDQ6VXNlcjE0ODE2MDI0", "avatar_url": "https://avatars.githubusercontent.com/u/14816024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oxalica", "html_url": "https://github.com/oxalica", "followers_url": "https://api.github.com/users/oxalica/followers", "following_url": "https://api.github.com/users/oxalica/following{/other_user}", "gists_url": "https://api.github.com/users/oxalica/gists{/gist_id}", "starred_url": "https://api.github.com/users/oxalica/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oxalica/subscriptions", "organizations_url": "https://api.github.com/users/oxalica/orgs", "repos_url": "https://api.github.com/users/oxalica/repos", "events_url": "https://api.github.com/users/oxalica/events{/privacy}", "received_events_url": "https://api.github.com/users/oxalica/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07", "url": "https://api.github.com/repos/rust-lang/rust/commits/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07", "html_url": "https://github.com/rust-lang/rust/commit/10f12fe3e73f3b6f7e6d6f8bbd87b1a8b4e74a07"}], "stats": {"total": 50, "additions": 34, "deletions": 16}, "files": [{"sha": "54b2aee94001f06e5f35c95bee73ec3ef52811e8", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c787fe3c70bdb84d0c82d6c592080ca2f1d7902f/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c787fe3c70bdb84d0c82d6c592080ca2f1d7902f/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=c787fe3c70bdb84d0c82d6c592080ca2f1d7902f", "patch": "@@ -105,11 +105,14 @@ cfg_has_statx! {{\n         flags: i32,\n         mask: u32,\n     ) -> Option<io::Result<FileAttr>> {\n-        use crate::sync::atomic::{AtomicBool, Ordering};\n+        use crate::sync::atomic::{AtomicU8, Ordering};\n \n         // Linux kernel prior to 4.11 or glibc prior to glibc 2.28 don't support `statx`\n-        // We store the availability in a global to avoid unnecessary syscalls\n-        static HAS_STATX: AtomicBool = AtomicBool::new(true);\n+        // We store the availability in global to avoid unnecessary syscalls.\n+        // 0: Unknown\n+        // 1: Not available\n+        // 2: Available\n+        static STATX_STATE: AtomicU8 = AtomicU8::new(0);\n         syscall! {\n             fn statx(\n                 fd: c_int,\n@@ -120,21 +123,36 @@ cfg_has_statx! {{\n             ) -> c_int\n         }\n \n-        if !HAS_STATX.load(Ordering::Relaxed) {\n-            return None;\n-        }\n-\n-        let mut buf: libc::statx = mem::zeroed();\n-        let ret = cvt(statx(fd, path, flags, mask, &mut buf));\n-        match ret {\n-            Err(err) => match err.raw_os_error() {\n-                Some(libc::ENOSYS) => {\n-                    HAS_STATX.store(false, Ordering::Relaxed);\n-                    return None;\n+        match STATX_STATE.load(Ordering::Relaxed) {\n+            // For the first time, we try to call on current working directory\n+            // to check if it is available.\n+            0 => {\n+                let mut buf: libc::statx = mem::zeroed();\n+                let err = cvt(statx(\n+                    libc::AT_FDCWD,\n+                    b\".\\0\".as_ptr().cast(),\n+                    0,\n+                    libc::STATX_ALL,\n+                    &mut buf,\n+                ))\n+                    .err()\n+                    .and_then(|e| e.raw_os_error());\n+                // `seccomp` will emit `EPERM` on denied syscall.\n+                // See: https://github.com/rust-lang/rust/issues/65662\n+                if err == Some(libc::ENOSYS) || err == Some(libc::EPERM) {\n+                    STATX_STATE.store(1, Ordering::Relaxed);\n+                } else {\n+                    STATX_STATE.store(2, Ordering::Relaxed);\n                 }\n-                _ => return Some(Err(err)),\n+                try_statx(fd, path, flags, mask)\n             }\n-            Ok(_) => {\n+            1 => None,\n+            _ => {\n+                let mut buf: libc::statx = mem::zeroed();\n+                if let Err(err) = cvt(statx(fd, path, flags, mask, &mut buf)) {\n+                    return Some(Err(err));\n+                }\n+\n                 // We cannot fill `stat64` exhaustively because of private padding fields.\n                 let mut stat: stat64 = mem::zeroed();\n                 // `c_ulong` on gnu-mips, `dev_t` otherwise"}]}