{"sha": "f9bf69d253e43f9caf279953876d44f6219e71de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5YmY2OWQyNTNlNDNmOWNhZjI3OTk1Mzg3NmQ0NGY2MjE5ZTcxZGU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-07-11T07:35:43Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-07-11T07:37:13Z"}, "message": "Remove all external requirements of `@` from TLS\n\nCloses #6004", "tree": {"sha": "77f741ef9093b6f6b4e865cb277dffaa51fdda7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77f741ef9093b6f6b4e865cb277dffaa51fdda7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9bf69d253e43f9caf279953876d44f6219e71de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9bf69d253e43f9caf279953876d44f6219e71de", "html_url": "https://github.com/rust-lang/rust/commit/f9bf69d253e43f9caf279953876d44f6219e71de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9bf69d253e43f9caf279953876d44f6219e71de/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11c63eaad2311bbeea67ec9a9300686dbe400e23", "url": "https://api.github.com/repos/rust-lang/rust/commits/11c63eaad2311bbeea67ec9a9300686dbe400e23", "html_url": "https://github.com/rust-lang/rust/commit/11c63eaad2311bbeea67ec9a9300686dbe400e23"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "c1eeb5005b26578184736428aeed322313555efc", "filename": "src/libextra/rl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9bf69d253e43f9caf279953876d44f6219e71de/src%2Flibextra%2Frl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9bf69d253e43f9caf279953876d44f6219e71de/src%2Flibextra%2Frl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frl.rs?ref=f9bf69d253e43f9caf279953876d44f6219e71de", "patch": "@@ -76,7 +76,7 @@ pub unsafe fn complete(cb: CompletionCb) {\n \n     extern fn callback(line: *c_char, completions: *()) {\n         unsafe {\n-            let cb = *local_data::get(complete_key)\n+            let cb = *local_data::get(complete_key, |k| k.map(|&k| *k))\n                 .get();\n \n             do cb(str::raw::from_c_str(line)) |suggestion| {"}, {"sha": "d4d6162a9198f4ef804e0f9585d3d90bc92a722d", "filename": "src/libextra/sort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9bf69d253e43f9caf279953876d44f6219e71de/src%2Flibextra%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9bf69d253e43f9caf279953876d44f6219e71de/src%2Flibextra%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsort.rs?ref=f9bf69d253e43f9caf279953876d44f6219e71de", "patch": "@@ -1204,7 +1204,7 @@ mod big_tests {\n     #[unsafe_destructor]\n     impl<'self> Drop for LVal<'self> {\n         fn drop(&self) {\n-            let x = unsafe { local_data::get(self.key) };\n+            let x = unsafe { local_data::get(self.key, |k| k.map(|&k| *k)) };\n             match x {\n                 Some(@y) => {\n                     unsafe {"}, {"sha": "dc62206fb34c8c06031b37dc10b08aedf41599f9", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9bf69d253e43f9caf279953876d44f6219e71de/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9bf69d253e43f9caf279953876d44f6219e71de/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=f9bf69d253e43f9caf279953876d44f6219e71de", "patch": "@@ -92,7 +92,7 @@ fn task_local_insn_key(_v: @~[&'static str]) {}\n \n pub fn with_insn_ctxt(blk: &fn(&[&'static str])) {\n     unsafe {\n-        let opt = local_data::get(task_local_insn_key);\n+        let opt = local_data::get(task_local_insn_key, |k| k.map(|&k| *k));\n         if opt.is_some() {\n             blk(*opt.unwrap());\n         }"}, {"sha": "77a565e675f0810dc3ead73dc75b6df8ccf843fb", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9bf69d253e43f9caf279953876d44f6219e71de/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9bf69d253e43f9caf279953876d44f6219e71de/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=f9bf69d253e43f9caf279953876d44f6219e71de", "patch": "@@ -241,7 +241,7 @@ impl Drop for CrateContext {\n \n fn task_local_llcx_key(_v: @ContextRef) {}\n pub fn task_llcx() -> ContextRef {\n-    let opt = unsafe { local_data::get(task_local_llcx_key) };\n+    let opt = unsafe { local_data::get(task_local_llcx_key, |k| k.map(|&k| *k)) };\n     *opt.expect(\"task-local LLVMContextRef wasn't ever set!\")\n }\n "}, {"sha": "03a48117cd4e5b6c15d6351fd1e7292e112ba043", "filename": "src/librusti/program.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9bf69d253e43f9caf279953876d44f6219e71de/src%2Flibrusti%2Fprogram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9bf69d253e43f9caf279953876d44f6219e71de/src%2Flibrusti%2Fprogram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Fprogram.rs?ref=f9bf69d253e43f9caf279953876d44f6219e71de", "patch": "@@ -144,7 +144,7 @@ impl Program {\n                 let key = ::std::sys::Closure{ code: %? as *(),\n                                                env: ::std::ptr::null() };\n                 let key = ::std::cast::transmute(key);\n-                *::std::local_data::get(key).unwrap()\n+                *::std::local_data::get(key, |k| k.map(|&x| *x)).unwrap()\n             };\\n\", key.code as uint));\n \n         // Using this __tls_map handle, deserialize each variable binding that"}, {"sha": "d6d09527f83012c118130ace8708fbe37d2f6f1a", "filename": "src/libstd/condition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9bf69d253e43f9caf279953876d44f6219e71de/src%2Flibstd%2Fcondition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9bf69d253e43f9caf279953876d44f6219e71de/src%2Flibstd%2Fcondition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcondition.rs?ref=f9bf69d253e43f9caf279953876d44f6219e71de", "patch": "@@ -32,7 +32,7 @@ impl<'self, T, U> Condition<'self, T, U> {\n     pub fn trap(&'self self, h: &'self fn(T) -> U) -> Trap<'self, T, U> {\n         unsafe {\n             let p : *RustClosure = ::cast::transmute(&h);\n-            let prev = local_data::get(self.key);\n+            let prev = local_data::get(self.key, |k| k.map(|&x| *x));\n             let h = @Handler { handle: *p, prev: prev };\n             Trap { cond: self, handler: h }\n         }"}, {"sha": "fa981d273e28ccc15ea03cac023a9d570f76251e", "filename": "src/libstd/local_data.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f9bf69d253e43f9caf279953876d44f6219e71de/src%2Flibstd%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9bf69d253e43f9caf279953876d44f6219e71de/src%2Flibstd%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flocal_data.rs?ref=f9bf69d253e43f9caf279953876d44f6219e71de", "patch": "@@ -83,16 +83,16 @@ pub unsafe fn pop<T: 'static>(key: Key<T>) -> Option<T> {\n  * table until explicitly removed.\n  */\n #[cfg(stage0)]\n-pub unsafe fn get<T: 'static>(key: Key<@T>) -> Option<@T> {\n-    local_get(Handle::new(), key, |loc| loc.map(|&x| *x))\n+pub unsafe fn get<T: 'static, U>(key: Key<@T>, f: &fn(Option<&@T>) -> U) -> U {\n+    local_get(Handle::new(), key, f)\n }\n /**\n  * Retrieve a task-local data value. It will also be kept alive in the\n  * table until explicitly removed.\n  */\n #[cfg(not(stage0))]\n-pub unsafe fn get<T: 'static>(key: Key<@T>) -> Option<@T> {\n-    local_get(Handle::new(), key, |loc| loc.map(|&x| *x))\n+pub unsafe fn get<T: 'static, U>(key: Key<T>, f: &fn(Option<&T>) -> U) -> U {\n+    local_get(Handle::new(), key, f)\n }\n /**\n  * Store a value in task-local data. If this key already has a value,\n@@ -142,16 +142,16 @@ fn test_tls_multitask() {\n         set(my_key, @~\"parent data\");\n         do task::spawn {\n             // TLS shouldn't carry over.\n-            assert!(get(my_key).is_none());\n+            assert!(get(my_key, |k| k.map(|&k| *k)).is_none());\n             set(my_key, @~\"child data\");\n-            assert!(*(get(my_key).get()) ==\n+            assert!(*(get(my_key, |k| k.map(|&k| *k)).get()) ==\n                     ~\"child data\");\n             // should be cleaned up for us\n         }\n         // Must work multiple times\n-        assert!(*(get(my_key).get()) == ~\"parent data\");\n-        assert!(*(get(my_key).get()) == ~\"parent data\");\n-        assert!(*(get(my_key).get()) == ~\"parent data\");\n+        assert!(*(get(my_key, |k| k.map(|&k| *k)).get()) == ~\"parent data\");\n+        assert!(*(get(my_key, |k| k.map(|&k| *k)).get()) == ~\"parent data\");\n+        assert!(*(get(my_key, |k| k.map(|&k| *k)).get()) == ~\"parent data\");\n     }\n }\n \n@@ -161,7 +161,7 @@ fn test_tls_overwrite() {\n         fn my_key(_x: @~str) { }\n         set(my_key, @~\"first data\");\n         set(my_key, @~\"next data\"); // Shouldn't leak.\n-        assert!(*(get(my_key).get()) == ~\"next data\");\n+        assert!(*(get(my_key, |k| k.map(|&k| *k)).get()) == ~\"next data\");\n     }\n }\n \n@@ -170,7 +170,7 @@ fn test_tls_pop() {\n     unsafe {\n         fn my_key(_x: @~str) { }\n         set(my_key, @~\"weasel\");\n-        assert!(*(pop(my_key).get()) == ~\"weasel\");\n+        assert!(*(pop(my_key, |k| k.map(|&k| *k)).get()) == ~\"weasel\");\n         // Pop must remove the data from the map.\n         assert!(pop(my_key).is_none());\n     }"}, {"sha": "2e511f91b5abee7d284f8fc95bf1ba9192984d1b", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9bf69d253e43f9caf279953876d44f6219e71de/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9bf69d253e43f9caf279953876d44f6219e71de/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=f9bf69d253e43f9caf279953876d44f6219e71de", "patch": "@@ -1230,7 +1230,7 @@ fn overridden_arg_key(_v: @OverriddenArgs) {}\n /// `os::set_args` function.\n pub fn args() -> ~[~str] {\n     unsafe {\n-        match local_data::get(overridden_arg_key) {\n+        match local_data::get(overridden_arg_key, |k| k.map(|&k| *k)) {\n             None => real_args(),\n             Some(args) => copy args.val\n         }"}, {"sha": "bc80bd9dc6abafb55928f60c1e9bb8b47ff7c3b3", "filename": "src/libstd/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9bf69d253e43f9caf279953876d44f6219e71de/src%2Flibstd%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9bf69d253e43f9caf279953876d44f6219e71de/src%2Flibstd%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand.rs?ref=f9bf69d253e43f9caf279953876d44f6219e71de", "patch": "@@ -850,7 +850,7 @@ fn tls_rng_state(_v: @@mut IsaacRng) {}\n pub fn task_rng() -> @mut IsaacRng {\n     let r : Option<@@mut IsaacRng>;\n     unsafe {\n-        r = local_data::get(tls_rng_state);\n+        r = local_data::get(tls_rng_state, |k| k.map(|&k| *k));\n     }\n     match r {\n         None => {"}, {"sha": "2100e71e9fd2342a356568472159100efe050449", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9bf69d253e43f9caf279953876d44f6219e71de/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9bf69d253e43f9caf279953876d44f6219e71de/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=f9bf69d253e43f9caf279953876d44f6219e71de", "patch": "@@ -172,10 +172,10 @@ mod test {\n             unsafe {\n                 fn key(_x: @~str) { }\n                 local_data::set(key, @~\"data\");\n-                assert!(*local_data::get(key).get() == ~\"data\");\n+                assert!(*local_data::get(key, |k| k.map(|&k| *k)).get() == ~\"data\");\n                 fn key2(_x: @~str) { }\n                 local_data::set(key2, @~\"data\");\n-                assert!(*local_data::get(key2).get() == ~\"data\");\n+                assert!(*local_data::get(key2, |k| k.map(|&k| *k)).get() == ~\"data\");\n             }\n         }\n     }"}, {"sha": "1942cb6ad56928c23b3b474f827b2c6d90ce5247", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9bf69d253e43f9caf279953876d44f6219e71de/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9bf69d253e43f9caf279953876d44f6219e71de/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=f9bf69d253e43f9caf279953876d44f6219e71de", "patch": "@@ -698,7 +698,7 @@ pub fn get_sctable() -> @mut SCTable {\n         let sctable_key = (cast::transmute::<(uint, uint),\n                            &fn:Copy(v: @@mut SCTable)>(\n                                (-4 as uint, 0u)));\n-        match local_data::get(sctable_key) {\n+        match local_data::get(sctable_key, |k| k.map(|&k| *k)) {\n             None => {\n                 let new_table = @@mut new_sctable_internal();\n                 local_data::set(sctable_key,new_table);"}, {"sha": "46e0ef32321a5a3f1faa788d5976ba792cdaa63c", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9bf69d253e43f9caf279953876d44f6219e71de/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9bf69d253e43f9caf279953876d44f6219e71de/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=f9bf69d253e43f9caf279953876d44f6219e71de", "patch": "@@ -490,7 +490,7 @@ pub fn get_ident_interner() -> @ident_interner {\n             (cast::transmute::<(uint, uint),\n              &fn:Copy(v: @@::parse::token::ident_interner)>(\n                  (-3 as uint, 0u)));\n-        match local_data::get(key) {\n+        match local_data::get(key, |k| k.map(|&k| *k)) {\n             Some(interner) => *interner,\n             None => {\n                 let interner = mk_fresh_ident_interner();"}]}