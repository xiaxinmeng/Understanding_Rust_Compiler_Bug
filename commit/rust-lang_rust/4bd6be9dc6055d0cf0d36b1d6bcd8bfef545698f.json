{"sha": "4bd6be9dc6055d0cf0d36b1d6bcd8bfef545698f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiZDZiZTlkYzYwNTVkMGNmMGQzNmIxZDZiY2Q4YmZlZjU0NTY5OGY=", "commit": {"author": {"name": "Badel2", "email": "2badel2@gmail.com", "date": "2017-11-03T17:17:44Z"}, "committer": {"name": "Badel2", "email": "2badel2@gmail.com", "date": "2017-11-06T12:43:59Z"}, "message": "Inclusive range updated to `..=` syntax", "tree": {"sha": "7380cc979580d24cdb6c0a1d49d47a2799dce655", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7380cc979580d24cdb6c0a1d49d47a2799dce655"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bd6be9dc6055d0cf0d36b1d6bcd8bfef545698f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bd6be9dc6055d0cf0d36b1d6bcd8bfef545698f", "html_url": "https://github.com/rust-lang/rust/commit/4bd6be9dc6055d0cf0d36b1d6bcd8bfef545698f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bd6be9dc6055d0cf0d36b1d6bcd8bfef545698f/comments", "author": {"login": "Badel2", "id": 15879619, "node_id": "MDQ6VXNlcjE1ODc5NjE5", "avatar_url": "https://avatars.githubusercontent.com/u/15879619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Badel2", "html_url": "https://github.com/Badel2", "followers_url": "https://api.github.com/users/Badel2/followers", "following_url": "https://api.github.com/users/Badel2/following{/other_user}", "gists_url": "https://api.github.com/users/Badel2/gists{/gist_id}", "starred_url": "https://api.github.com/users/Badel2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Badel2/subscriptions", "organizations_url": "https://api.github.com/users/Badel2/orgs", "repos_url": "https://api.github.com/users/Badel2/repos", "events_url": "https://api.github.com/users/Badel2/events{/privacy}", "received_events_url": "https://api.github.com/users/Badel2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Badel2", "id": 15879619, "node_id": "MDQ6VXNlcjE1ODc5NjE5", "avatar_url": "https://avatars.githubusercontent.com/u/15879619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Badel2", "html_url": "https://github.com/Badel2", "followers_url": "https://api.github.com/users/Badel2/followers", "following_url": "https://api.github.com/users/Badel2/following{/other_user}", "gists_url": "https://api.github.com/users/Badel2/gists{/gist_id}", "starred_url": "https://api.github.com/users/Badel2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Badel2/subscriptions", "organizations_url": "https://api.github.com/users/Badel2/orgs", "repos_url": "https://api.github.com/users/Badel2/repos", "events_url": "https://api.github.com/users/Badel2/events{/privacy}", "received_events_url": "https://api.github.com/users/Badel2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "525b81d570b15df2ed5896f0215baea5c64c650c", "url": "https://api.github.com/repos/rust-lang/rust/commits/525b81d570b15df2ed5896f0215baea5c64c650c", "html_url": "https://github.com/rust-lang/rust/commit/525b81d570b15df2ed5896f0215baea5c64c650c"}], "stats": {"total": 23, "additions": 10, "deletions": 13}, "files": [{"sha": "25d7d0e3b0cc32fb5780cb9fa05a15340ddce49c", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4bd6be9dc6055d0cf0d36b1d6bcd8bfef545698f/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd6be9dc6055d0cf0d36b1d6bcd8bfef545698f/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=4bd6be9dc6055d0cf0d36b1d6bcd8bfef545698f", "patch": "@@ -16,9 +16,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-// FIXME: after next stage0, change RangeInclusive { ... } back to ..=\n-use ops::RangeInclusive;\n-\n // How this module is organized.\n //\n // The library infrastructure for slices is fairly messy. There's\n@@ -1047,32 +1044,32 @@ impl<T> SliceIndex<[T]> for ops::RangeToInclusive<usize> {\n \n     #[inline]\n     fn get(self, slice: &[T]) -> Option<&[T]> {\n-        (RangeInclusive { start: 0, end: self.end }).get(slice)\n+        (0..=self.end).get(slice)\n     }\n \n     #[inline]\n     fn get_mut(self, slice: &mut [T]) -> Option<&mut [T]> {\n-        (RangeInclusive { start: 0, end: self.end }).get_mut(slice)\n+        (0..=self.end).get_mut(slice)\n     }\n \n     #[inline]\n     unsafe fn get_unchecked(self, slice: &[T]) -> &[T] {\n-        (RangeInclusive { start: 0, end: self.end }).get_unchecked(slice)\n+        (0..=self.end).get_unchecked(slice)\n     }\n \n     #[inline]\n     unsafe fn get_unchecked_mut(self, slice: &mut [T]) -> &mut [T] {\n-        (RangeInclusive { start: 0, end: self.end }).get_unchecked_mut(slice)\n+        (0..=self.end).get_unchecked_mut(slice)\n     }\n \n     #[inline]\n     fn index(self, slice: &[T]) -> &[T] {\n-        (RangeInclusive { start: 0, end: self.end }).index(slice)\n+        (0..=self.end).index(slice)\n     }\n \n     #[inline]\n     fn index_mut(self, slice: &mut [T]) -> &mut [T] {\n-        (RangeInclusive { start: 0, end: self.end }).index_mut(slice)\n+        (0..=self.end).index_mut(slice)\n     }\n }\n "}, {"sha": "24ce8fb2995983de53543d5488dfb8ffc7d04299", "filename": "src/librustc/ty/maps/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bd6be9dc6055d0cf0d36b1d6bcd8bfef545698f/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd6be9dc6055d0cf0d36b1d6bcd8bfef545698f/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs?ref=4bd6be9dc6055d0cf0d36b1d6bcd8bfef545698f", "patch": "@@ -165,7 +165,7 @@ impl<'a> CacheDecoder<'a> {\n     fn find_filemap_prev_bytepos(&self,\n                                  prev_bytepos: BytePos)\n                                  -> Option<(BytePos, StableFilemapId)> {\n-        for (start, id) in self.prev_filemap_starts.range(BytePos(0) ... prev_bytepos).rev() {\n+        for (start, id) in self.prev_filemap_starts.range(BytePos(0) ..= prev_bytepos).rev() {\n             return Some((*start, *id))\n         }\n "}, {"sha": "f0243967421c690267070c6e51cd6fcc5bc4ee61", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bd6be9dc6055d0cf0d36b1d6bcd8bfef545698f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd6be9dc6055d0cf0d36b1d6bcd8bfef545698f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=4bd6be9dc6055d0cf0d36b1d6bcd8bfef545698f", "patch": "@@ -2203,7 +2203,7 @@ impl<'a> State<'a> {\n                 if limits == ast::RangeLimits::HalfOpen {\n                     self.s.word(\"..\")?;\n                 } else {\n-                    self.s.word(\"...\")?;\n+                    self.s.word(\"..=\")?;\n                 }\n                 if let Some(ref e) = *end {\n                     self.print_expr_maybe_paren(e, fake_prec)?;"}, {"sha": "f17a0494a69c48d9e4d8b6acf39cc3df6086962f", "filename": "src/test/run-pass-fulldeps/issue-35829.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bd6be9dc6055d0cf0d36b1d6bcd8bfef545698f/src%2Ftest%2Frun-pass-fulldeps%2Fissue-35829.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd6be9dc6055d0cf0d36b1d6bcd8bfef545698f/src%2Ftest%2Frun-pass-fulldeps%2Fissue-35829.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue-35829.rs?ref=4bd6be9dc6055d0cf0d36b1d6bcd8bfef545698f", "patch": "@@ -41,8 +41,8 @@ fn main() {\n     let raw_byte_string_lit_kind = LitKind::ByteStr(Rc::new(b\"#\\\"two\\\"#\".to_vec()));\n     assert_eq!(raw_byte_string.node, ExprKind::Lit(P(dummy_spanned(raw_byte_string_lit_kind))));\n \n-    // check dotdotdot\n-    let closed_range = quote_expr!(&cx, 0 ... 1);\n+    // check dotdoteq\n+    let closed_range = quote_expr!(&cx, 0 ..= 1);\n     assert_eq!(closed_range.node, ExprKind::Range(\n         Some(quote_expr!(&cx, 0)),\n         Some(quote_expr!(&cx, 1)),"}]}