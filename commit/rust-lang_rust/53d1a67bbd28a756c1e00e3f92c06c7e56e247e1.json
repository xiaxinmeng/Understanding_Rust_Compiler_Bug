{"sha": "53d1a67bbd28a756c1e00e3f92c06c7e56e247e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzZDFhNjdiYmQyOGE3NTZjMWUwMGUzZjkyYzA2YzdlNTZlMjQ3ZTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-14T16:11:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-14T16:11:29Z"}, "message": "auto merge of #10944 : metajack/rust/pkgid-docs, r=cmr", "tree": {"sha": "26bf288fb8f705de4e53adefb52d9510284204fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26bf288fb8f705de4e53adefb52d9510284204fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53d1a67bbd28a756c1e00e3f92c06c7e56e247e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53d1a67bbd28a756c1e00e3f92c06c7e56e247e1", "html_url": "https://github.com/rust-lang/rust/commit/53d1a67bbd28a756c1e00e3f92c06c7e56e247e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53d1a67bbd28a756c1e00e3f92c06c7e56e247e1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7eb50c203b7623ecfa45668f38991249ce7be3d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7eb50c203b7623ecfa45668f38991249ce7be3d0", "html_url": "https://github.com/rust-lang/rust/commit/7eb50c203b7623ecfa45668f38991249ce7be3d0"}, {"sha": "da9a02a189eca6040af3becaf05743fa4e5d6911", "url": "https://api.github.com/repos/rust-lang/rust/commits/da9a02a189eca6040af3becaf05743fa4e5d6911", "html_url": "https://github.com/rust-lang/rust/commit/da9a02a189eca6040af3becaf05743fa4e5d6911"}], "stats": {"total": 88, "additions": 36, "deletions": 52}, "files": [{"sha": "92d5ee21222932f704355d56b2ebf311605674f6", "filename": "doc/rust.md", "status": "modified", "additions": 16, "deletions": 29, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/53d1a67bbd28a756c1e00e3f92c06c7e56e247e1/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/53d1a67bbd28a756c1e00e3f92c06c7e56e247e1/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=53d1a67bbd28a756c1e00e3f92c06c7e56e247e1", "patch": "@@ -609,10 +609,8 @@ Attributes on the anonymous crate module define important metadata that influenc\n the behavior of the compiler.\n \n ~~~~\n-// Linkage attributes\n-#[ link(name = \"projx\",\n-        vers = \"2.5\",\n-        uuid = \"9cccc5d5-aceb-4af5-8285-811211826b82\") ];\n+// Package ID\n+#[ pkgid = \"projx#2.5\" ];\n \n // Additional metadata attributes\n #[ desc = \"Project X\" ];\n@@ -775,36 +773,24 @@ An _`extern mod` declaration_ specifies a dependency on an external crate.\n The external crate is then bound into the declaring scope\n as the `ident` provided in the `extern_mod_decl`.\n \n-The external crate is resolved to a specific `soname` at compile time,\n-and a runtime linkage requirement to that `soname` is passed to the linker for\n-loading at runtime.\n-The `soname` is resolved at compile time by scanning the compiler's library path\n-and matching the `link_attrs` provided in the `use_decl` against any `#link` attributes that\n-were declared on the external crate when it was compiled.\n-If no `link_attrs` are provided,\n-a default `name` attribute is assumed,\n-equal to the `ident` given in the `use_decl`.\n-\n-Optionally, an identifier in an `extern mod` declaration may be followed by an equals sign,\n-then a string literal denoting a relative path on the filesystem.\n-This path should exist in one of the directories in the Rust path,\n-which by default contains the `.rust` subdirectory of the current directory and each of its parents,\n-as well as any directories in the colon-separated (or semicolon-separated on Windows)\n-list of paths that is the `RUST_PATH` environment variable.\n-The meaning of `extern mod a = \"b/c/d\";`, supposing that `/a` is in the RUST_PATH,\n-is that the name `a` should be taken as a reference to the crate whose absolute location is\n-`/a/b/c/d`.\n+The external crate is resolved to a specific `soname` at compile time, and a\n+runtime linkage requirement to that `soname` is passed to the linker for\n+loading at runtime.  The `soname` is resolved at compile time by scanning the\n+compiler's library path and matching the optional `pkgid` provided as a string literal\n+against the `pkgid` attributes that were declared on the external crate when\n+it was compiled.  If no `pkgid` is provided, a default `name` attribute is\n+assumed, equal to the `ident` given in the `extern_mod_decl`.\n \n Four examples of `extern mod` declarations:\n \n ~~~~ {.xfail-test}\n-extern mod pcre (uuid = \"54aba0f8-a7b1-4beb-92f1-4cf625264841\");\n+extern mod pcre;\n \n-extern mod extra; // equivalent to: extern mod extra ( name = \"extra\" );\n+extern mod extra; // equivalent to: extern mod extra = \"extra\";\n \n-extern mod rustextra (name = \"extra\"); // linking to 'extra' under another name\n+extern mod rustextra = \"extra\"; // linking to 'extra' under another name\n \n-extern mod complicated_mod = \"some-file/in/the-rust/path\";\n+extern mod foo = \"some/where/foo#1.0\"; // a full package ID for rustpkg\n ~~~~\n \n ##### Use declarations\n@@ -1742,7 +1728,8 @@ names are effectively reserved. Some significant attributes include:\n * The `doc` attribute, for documenting code in-place.\n * The `cfg` attribute, for conditional-compilation by build-configuration.\n * The `lang` attribute, for custom definitions of traits and functions that are known to the Rust compiler (see [Language items](#language-items)).\n-* The `link` attribute, for describing linkage metadata for a crate.\n+* The `link` attribute, for describing linkage metadata for a extern blocks.\n+* The `pkgid` attribute, for describing the package ID of a crate.\n * The `test` attribute, for marking functions as unit tests.\n * The `allow`, `warn`, `forbid`, and `deny` attributes, for\n   controlling lint checks (see [Lint check attributes](#lint-check-attributes)).\n@@ -3795,7 +3782,7 @@ specified then log level 4 is assumed.  Debug messages can be omitted\n by passing `--cfg ndebug` to `rustc`.\n \n As an example, to see all the logs generated by the compiler, you would set\n-`RUST_LOG` to `rustc`, which is the crate name (as specified in its `link`\n+`RUST_LOG` to `rustc`, which is the crate name (as specified in its `pkgid`\n [attribute](#attributes)). To narrow down the logs to just crate resolution,\n you would set it to `rustc::metadata::creader`. To see just error logging\n use `rustc=0`."}, {"sha": "b31e82d00fffbf86c71c8d28564d6a4557145e9a", "filename": "doc/rustdoc.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53d1a67bbd28a756c1e00e3f92c06c7e56e247e1/doc%2Frustdoc.md", "raw_url": "https://github.com/rust-lang/rust/raw/53d1a67bbd28a756c1e00e3f92c06c7e56e247e1/doc%2Frustdoc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frustdoc.md?ref=53d1a67bbd28a756c1e00e3f92c06c7e56e247e1", "patch": "@@ -13,7 +13,7 @@ comments\":\n ~~~\n // the \"link\" crate attribute is currently required for rustdoc, but normally\n // isn't needed.\n-#[link(name=\"universe\")];\n+#[pkgid = \"universe\"];\n #[crate_type=\"lib\"];\n \n //! Tools for dealing with universes (this is a doc comment, and is shown on"}, {"sha": "ff413ec1f1b579494b15ec97e74cc1f23ad9b528", "filename": "doc/rustpkg.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/53d1a67bbd28a756c1e00e3f92c06c7e56e247e1/doc%2Frustpkg.md", "raw_url": "https://github.com/rust-lang/rust/raw/53d1a67bbd28a756c1e00e3f92c06c7e56e247e1/doc%2Frustpkg.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frustpkg.md?ref=53d1a67bbd28a756c1e00e3f92c06c7e56e247e1", "patch": "@@ -89,6 +89,10 @@ as well as `foo/src/bar/extras/baz/lib.rs`,\n then both `bar` and `bar/extras/baz` are valid package identifiers\n in the workspace `foo`.\n \n+Because rustpkg uses generic source file names as the main inputs, you will\n+need to specify the package identifier in them using the `pkgid` attribute\n+on the crate.\n+\n ## Source files\n \n rustpkg searches for four different fixed filenames in order to determine the crates to build:\n@@ -108,9 +112,6 @@ When building a package that is not under version control,\n or that has no tags, `rustpkg` assumes the intended version is 0.1.\n \n > **Note:** A future version of rustpkg will support semantic versions.\n-> Also, a future version will add the option to specify a version with a metadata\n-> attribute like `#[link(vers = \"3.1415\")]` inside the crate module,\n-> though this attribute will never be mandatory.\n \n # Dependencies\n "}, {"sha": "957381ddd7a18a568eb42560bd4469beb016264c", "filename": "doc/tutorial.md", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/53d1a67bbd28a756c1e00e3f92c06c7e56e247e1/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/53d1a67bbd28a756c1e00e3f92c06c7e56e247e1/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=53d1a67bbd28a756c1e00e3f92c06c7e56e247e1", "patch": "@@ -3070,22 +3070,21 @@ Therefore, if you plan to compile your crate as a library, you should annotate i\n // lib.rs\n \n # #[crate_type = \"lib\"];\n-// Crate linkage metadata\n-#[link(name = \"farm\", vers = \"2.5\")];\n+// Package ID\n+#[pkgid = \"farm#2.5\"];\n \n // ...\n # fn farm() {}\n ~~~~\n \n-You can also in turn require in a `extern mod` statement that certain link metadata items match some criteria.\n-For that, Rust currently parses a comma-separated list of name/value pairs that appear after\n-it, and ensures that they match the attributes provided in the `link` attribute of a crate file.\n-This enables you to, e.g., pick a crate based on its version number, or link a library under a\n-different name. For example, these two `mod` statements would both accept and select the crate define above:\n+You can also specify package ID information in a `extern mod` statement.  For\n+example, these `extern mod` statements would both accept and select the\n+crate define above:\n \n ~~~~ {.xfail-test}\n-extern mod farm(vers = \"2.5\");\n-extern mod my_farm(name = \"farm\", vers = \"2.5\");\n+extern mod farm;\n+extern mod farm = \"farm#2.5\";\n+extern mod my_farm = \"farm\";\n ~~~~\n \n Other crate settings and metadata include things like enabling/disabling certain errors or warnings,\n@@ -3096,21 +3095,18 @@ or setting the crate type (library or executable) explicitly:\n // ...\n \n // This crate is a library (\"bin\" is the default)\n+#[pkgid = \"farm#2.5\"];\n #[crate_type = \"lib\"];\n \n // Turn on a warning\n #[warn(non_camel_case_types)]\n # fn farm() {}\n ~~~~\n \n-If you're compiling your crate with `rustpkg`,\n-link annotations will not be necessary, because they get\n-inferred by `rustpkg` based on the Package id and naming conventions.\n-\n-\n-> ***Note:*** The rules regarding link metadata, both as attributes and on `extern mod`,\n-              as well as their interaction with `rustpkg`\n-              are currently not clearly defined and will likely change in the future.\n+> ***Note:*** The rules regarding package IDs, both as attributes and as used\n+              in `extern mod`, as well as their interaction with `rustpkg` are\n+              currently not clearly defined and will likely change in the\n+              future.\n \n ## A minimal example\n \n@@ -3120,7 +3116,7 @@ We define two crates, and use one of them as a library in the other.\n \n ~~~~\n // world.rs\n-#[link(name = \"world\", vers = \"0.42\")];\n+#[pkgid = \"world#0.42\"];\n # extern mod extra;\n pub fn explore() -> &'static str { \"world\" }\n # fn main() {}\n@@ -3144,7 +3140,7 @@ Now compile and run like this (adjust to your platform if necessary):\n Notice that the library produced contains the version in the file name\n as well as an inscrutable string of alphanumerics. As explained in the previous paragraph,\n these are both part of Rust's library versioning scheme. The alphanumerics are\n-a hash representing the crates link metadata.\n+a hash representing the crates package ID.\n \n ## The standard library and the prelude\n "}]}