{"sha": "b202bebdeea73c32c69592fcb60ff2afaa93d354", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMDJiZWJkZWVhNzNjMzJjNjk1OTJmY2I2MGZmMmFmYWE5M2QzNTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-10T22:30:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-10T22:30:14Z"}, "message": "Auto merge of #51475 - GuillaumeGomez:fix-error-codes, r=Manishearth\n\nFix error codes", "tree": {"sha": "56ce0075d8ceefd0fb3c685eb9637b3e91a0de8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56ce0075d8ceefd0fb3c685eb9637b3e91a0de8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b202bebdeea73c32c69592fcb60ff2afaa93d354", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b202bebdeea73c32c69592fcb60ff2afaa93d354", "html_url": "https://github.com/rust-lang/rust/commit/b202bebdeea73c32c69592fcb60ff2afaa93d354", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b202bebdeea73c32c69592fcb60ff2afaa93d354/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a805a2a5ebba2802f432d79874e59c24e398f82a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a805a2a5ebba2802f432d79874e59c24e398f82a", "html_url": "https://github.com/rust-lang/rust/commit/a805a2a5ebba2802f432d79874e59c24e398f82a"}, {"sha": "f2349d5ec6d2f184d8b83cebe255834f927568c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2349d5ec6d2f184d8b83cebe255834f927568c3", "html_url": "https://github.com/rust-lang/rust/commit/f2349d5ec6d2f184d8b83cebe255834f927568c3"}], "stats": {"total": 47, "additions": 23, "deletions": 24}, "files": [{"sha": "7415ddd455d87322f80271d4aea06d301bda197d", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b202bebdeea73c32c69592fcb60ff2afaa93d354/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b202bebdeea73c32c69592fcb60ff2afaa93d354/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=b202bebdeea73c32c69592fcb60ff2afaa93d354", "patch": "@@ -2011,13 +2011,13 @@ a (non-transparent) struct containing a single float, while `Grams` is a\n transparent wrapper around a float. This can make a difference for the ABI.\n \"##,\n \n-E0909: r##\"\n+E0700: r##\"\n The `impl Trait` return type captures lifetime parameters that do not\n appear within the `impl Trait` itself.\n \n Erroneous code example:\n \n-```compile-fail,E0909\n+```compile-fail,E0700\n use std::cell::Cell;\n \n trait Trait<'a> { }\n@@ -2058,27 +2058,27 @@ where 'x: 'y\n ```\n \"##,\n \n-E0910: r##\"\n+E0701: r##\"\n This error indicates that a `#[non_exhaustive]` attribute was incorrectly placed\n on something other than a struct or enum.\n \n Examples of erroneous code:\n \n-```compile_fail,E0910\n+```compile_fail,E0701\n # #![feature(non_exhaustive)]\n \n #[non_exhaustive]\n trait Foo { }\n ```\n \"##,\n \n-E0911: r##\"\n+E0702: r##\"\n This error indicates that a `#[non_exhaustive]` attribute had a value. The\n `#[non_exhaustive]` should be empty.\n \n Examples of erroneous code:\n \n-```compile_fail,E0911\n+```compile_fail,E0702\n # #![feature(non_exhaustive)]\n \n #[non_exhaustive(anything)]\n@@ -2139,6 +2139,5 @@ register_diagnostics! {\n     E0657, // `impl Trait` can only capture lifetimes bound at the fn level\n     E0687, // in-band lifetimes cannot be used in `fn`/`Fn` syntax\n     E0688, // in-band lifetimes cannot be mixed with explicit lifetime binders\n-\n-    E0906, // closures cannot be static\n+    E0697, // closures cannot be static\n }"}, {"sha": "c71b47fa4e1fe1366fb3d2e17a41e6f5304b9be9", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b202bebdeea73c32c69592fcb60ff2afaa93d354/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b202bebdeea73c32c69592fcb60ff2afaa93d354/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=b202bebdeea73c32c69592fcb60ff2afaa93d354", "patch": "@@ -126,7 +126,7 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n             _ => {\n                 struct_span_err!(self.tcx.sess,\n                                  attr.span,\n-                                 E0910,\n+                                 E0701,\n                                  \"attribute can only be applied to a struct or enum\")\n                     .span_label(item.span, \"not a struct or enum\")\n                     .emit();\n@@ -137,7 +137,7 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n         if attr.meta_item_list().is_some() || attr.value_str().is_some() {\n             struct_span_err!(self.tcx.sess,\n                              attr.span,\n-                             E0911,\n+                             E0702,\n                              \"attribute should be empty\")\n                 .span_label(item.span, \"not empty\")\n                 .emit();"}, {"sha": "35d580d1c159bb38debbe533ee4be13ff0bf3136", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b202bebdeea73c32c69592fcb60ff2afaa93d354/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b202bebdeea73c32c69592fcb60ff2afaa93d354/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=b202bebdeea73c32c69592fcb60ff2afaa93d354", "patch": "@@ -3093,7 +3093,7 @@ impl<'a> LoweringContext<'a> {\n                             span_err!(\n                                 this.sess,\n                                 fn_decl_span,\n-                                E0906,\n+                                E0697,\n                                 \"closures cannot be static\"\n                             );\n                         }"}, {"sha": "a7879025eeae4e5b35c84fa3578919299ba04abc", "filename": "src/librustc/infer/anon_types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b202bebdeea73c32c69592fcb60ff2afaa93d354/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b202bebdeea73c32c69592fcb60ff2afaa93d354/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs?ref=b202bebdeea73c32c69592fcb60ff2afaa93d354", "patch": "@@ -556,7 +556,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for ReverseMapper<'cx, 'gcx, 'tcx>\n                         let mut err = struct_span_err!(\n                             self.tcx.sess,\n                             span,\n-                            E0909,\n+                            E0700,\n                             \"hidden type for `impl Trait` captures lifetime that \\\n                              does not appear in bounds\",\n                         );"}, {"sha": "e20904930792e76b00297969de45a8b43d7dc273", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b202bebdeea73c32c69592fcb60ff2afaa93d354/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b202bebdeea73c32c69592fcb60ff2afaa93d354/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=b202bebdeea73c32c69592fcb60ff2afaa93d354", "patch": "@@ -65,7 +65,7 @@ impl<'a, 'gcx, 'tcx> InteriorVisitor<'a, 'gcx, 'tcx> {\n                    expr, scope, ty, self.expr_count, yield_span);\n \n             if self.fcx.any_unresolved_type_vars(&ty) {\n-                let mut err = struct_span_err!(self.fcx.tcx.sess, source_span, E0907,\n+                let mut err = struct_span_err!(self.fcx.tcx.sess, source_span, E0698,\n                     \"type inside generator must be known in this context\");\n                 err.span_note(yield_span,\n                               \"the type is part of the generator because of this `yield`\");"}, {"sha": "834c7d4e9e391a01ab734eff34eb5ffd3f444545", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b202bebdeea73c32c69592fcb60ff2afaa93d354/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b202bebdeea73c32c69592fcb60ff2afaa93d354/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=b202bebdeea73c32c69592fcb60ff2afaa93d354", "patch": "@@ -335,7 +335,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         // so we do a future-compat lint here for the 2015 edition\n                         // (see https://github.com/rust-lang/rust/issues/46906)\n                         if self.tcx.sess.rust_2018() {\n-                          span_err!(self.tcx.sess, span, E0908,\n+                          span_err!(self.tcx.sess, span, E0699,\n                                     \"the type of this value must be known \\\n                                      to call a method on a raw pointer on it\");\n                         } else {"}, {"sha": "e4c73218de5ae33b80eadfb82dea55914333c7d8", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b202bebdeea73c32c69592fcb60ff2afaa93d354/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b202bebdeea73c32c69592fcb60ff2afaa93d354/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=b202bebdeea73c32c69592fcb60ff2afaa93d354", "patch": "@@ -4668,7 +4668,7 @@ alignment.\n \"##,\n \n \n-E0908: r##\"\n+E0699: r##\"\n A method was called on a raw pointer whose inner type wasn't completely known.\n \n For example, you may have done something like:\n@@ -4797,5 +4797,5 @@ register_diagnostics! {\n     E0640, // infer outlives requirements\n     E0641, // cannot cast to/from a pointer with an unknown kind\n     E0645, // trait aliases not finished\n-    E0907, // type inside generator must be known in this context\n+    E0698, // type inside generator must be known in this context\n }"}, {"sha": "d0cf81d59cf370e81b042a8b2bfaeccf0c9d4fbc", "filename": "src/test/compile-fail/edition-raw-pointer-method-2018.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b202bebdeea73c32c69592fcb60ff2afaa93d354/src%2Ftest%2Fcompile-fail%2Fedition-raw-pointer-method-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b202bebdeea73c32c69592fcb60ff2afaa93d354/src%2Ftest%2Fcompile-fail%2Fedition-raw-pointer-method-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fedition-raw-pointer-method-2018.rs?ref=b202bebdeea73c32c69592fcb60ff2afaa93d354", "patch": "@@ -18,5 +18,5 @@ fn main() {\n     let x = 0;\n     let y = &x as *const _;\n     let _ = y.is_null();\n-    //~^ error: the type of this value must be known to call a method on a raw pointer on it [E0908]\n+    //~^ error: the type of this value must be known to call a method on a raw pointer on it [E0699]\n }"}, {"sha": "df4fe1e77e96dc61be4448112de14ef279deb8f4", "filename": "src/test/compile-fail/rfc-2008-non-exhaustive/invalid-attribute.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b202bebdeea73c32c69592fcb60ff2afaa93d354/src%2Ftest%2Fcompile-fail%2Frfc-2008-non-exhaustive%2Finvalid-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b202bebdeea73c32c69592fcb60ff2afaa93d354/src%2Ftest%2Fcompile-fail%2Frfc-2008-non-exhaustive%2Finvalid-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-2008-non-exhaustive%2Finvalid-attribute.rs?ref=b202bebdeea73c32c69592fcb60ff2afaa93d354", "patch": "@@ -11,15 +11,15 @@\n #![feature(non_exhaustive)]\n \n #[non_exhaustive(anything)]\n-//~^ ERROR attribute should be empty [E0911]\n+//~^ ERROR attribute should be empty [E0702]\n struct Foo;\n \n #[non_exhaustive]\n-//~^ ERROR attribute can only be applied to a struct or enum [E0910]\n+//~^ ERROR attribute can only be applied to a struct or enum [E0701]\n trait Bar { }\n \n #[non_exhaustive]\n-//~^ ERROR attribute can only be applied to a struct or enum [E0910]\n+//~^ ERROR attribute can only be applied to a struct or enum [E0701]\n union Baz {\n     f1: u16,\n     f2: u16"}, {"sha": "c40c5f4cc3191f7764be86a0553cd86c5880240f", "filename": "src/test/ui/impl-trait/region-escape-via-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b202bebdeea73c32c69592fcb60ff2afaa93d354/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b202bebdeea73c32c69592fcb60ff2afaa93d354/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.rs?ref=b202bebdeea73c32c69592fcb60ff2afaa93d354", "patch": "@@ -24,7 +24,7 @@ trait Trait<'a> { }\n impl Trait<'b> for Cell<&'a u32> { }\n \n fn foo(x: Cell<&'x u32>) -> impl Trait<'y>\n-    //~^ ERROR hidden type for `impl Trait` captures lifetime that does not appear in bounds [E0909]\n+    //~^ ERROR hidden type for `impl Trait` captures lifetime that does not appear in bounds [E0700]\n where 'x: 'y\n {\n     x"}, {"sha": "b673111d2198605417a6076206b827e39a3b5207", "filename": "src/test/ui/impl-trait/region-escape-via-bound.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b202bebdeea73c32c69592fcb60ff2afaa93d354/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b202bebdeea73c32c69592fcb60ff2afaa93d354/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr?ref=b202bebdeea73c32c69592fcb60ff2afaa93d354", "patch": "@@ -1,4 +1,4 @@\n-error[E0909]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/region-escape-via-bound.rs:26:29\n    |\n LL | fn foo(x: Cell<&'x u32>) -> impl Trait<'y>\n@@ -8,7 +8,7 @@ note: hidden type `std::cell::Cell<&'x u32>` captures the lifetime 'x as defined\n   --> $DIR/region-escape-via-bound.rs:26:1\n    |\n LL | / fn foo(x: Cell<&'x u32>) -> impl Trait<'y>\n-LL | |     //~^ ERROR hidden type for `impl Trait` captures lifetime that does not appear in bounds [E0909]\n+LL | |     //~^ ERROR hidden type for `impl Trait` captures lifetime that does not appear in bounds [E0700]\n LL | | where 'x: 'y\n LL | | {\n LL | |     x\n@@ -17,4 +17,4 @@ LL | | }\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0909`.\n+For more information about this error, try `rustc --explain E0700`."}]}