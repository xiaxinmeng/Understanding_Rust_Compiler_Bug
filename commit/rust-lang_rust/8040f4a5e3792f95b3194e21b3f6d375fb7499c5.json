{"sha": "8040f4a5e3792f95b3194e21b3f6d375fb7499c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwNDBmNGE1ZTM3OTJmOTViMzE5NGUyMWIzZjZkMzc1ZmI3NDk5YzU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-08T12:21:22Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-08T12:23:17Z"}, "message": "Replace `make_binders` by the now equivalent `make_only_type_binders`", "tree": {"sha": "baf287e6d05568319662cd32d56ded5354edecd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baf287e6d05568319662cd32d56ded5354edecd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8040f4a5e3792f95b3194e21b3f6d375fb7499c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8040f4a5e3792f95b3194e21b3f6d375fb7499c5", "html_url": "https://github.com/rust-lang/rust/commit/8040f4a5e3792f95b3194e21b3f6d375fb7499c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8040f4a5e3792f95b3194e21b3f6d375fb7499c5/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ce6fea325c001deeed2857da560fa5cfbc6eea3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ce6fea325c001deeed2857da560fa5cfbc6eea3", "html_url": "https://github.com/rust-lang/rust/commit/8ce6fea325c001deeed2857da560fa5cfbc6eea3"}], "stats": {"total": 57, "additions": 22, "deletions": 35}, "files": [{"sha": "e2a54fd92a8ac802c46d80a10477ec174eef7e56", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/8040f4a5e3792f95b3194e21b3f6d375fb7499c5/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8040f4a5e3792f95b3194e21b3f6d375fb7499c5/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=8040f4a5e3792f95b3194e21b3f6d375fb7499c5", "patch": "@@ -17,16 +17,14 @@ use super::ChalkContext;\n use crate::{\n     db::HirDatabase,\n     display::HirDisplay,\n-    from_assoc_type_id,\n+    from_assoc_type_id, make_only_type_binders,\n     method_resolution::{TyFingerprint, ALL_FLOAT_FPS, ALL_INT_FPS},\n     to_assoc_type_id, to_chalk_trait_id,\n     utils::generics,\n     AliasEq, AliasTy, BoundVar, CallableDefId, DebruijnIndex, FnDefId, ProjectionTy, Substitution,\n     TraitRef, TraitRefExt, Ty, TyBuilder, TyExt, TyKind, WhereClause,\n };\n-use mapping::{\n-    convert_where_clauses, generic_predicate_to_inline_bound, make_binders, TypeAliasAsValue,\n-};\n+use mapping::{convert_where_clauses, generic_predicate_to_inline_bound, TypeAliasAsValue};\n \n pub use self::interner::Interner;\n pub(crate) use self::interner::*;\n@@ -187,8 +185,11 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n                 let (datas, binders) = (*datas).as_ref().into_value_and_skipped_binders();\n                 let data = &datas.impl_traits[idx as usize];\n                 let bound = OpaqueTyDatumBound {\n-                    bounds: make_binders(data.bounds.skip_binders().iter().cloned().collect(), 1),\n-                    where_clauses: make_binders(vec![], 0),\n+                    bounds: make_only_type_binders(\n+                        1,\n+                        data.bounds.skip_binders().iter().cloned().collect(),\n+                    ),\n+                    where_clauses: make_only_type_binders(0, vec![]),\n                 };\n                 chalk_ir::Binders::new(binders, bound)\n             }\n@@ -236,25 +237,25 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n                             .intern(&Interner),\n                     });\n                     let bound = OpaqueTyDatumBound {\n-                        bounds: make_binders(\n+                        bounds: make_only_type_binders(\n+                            1,\n                             vec![\n                                 crate::wrap_empty_binders(impl_bound),\n                                 crate::wrap_empty_binders(proj_bound),\n                             ],\n-                            1,\n                         ),\n-                        where_clauses: make_binders(vec![], 0),\n+                        where_clauses: make_only_type_binders(0, vec![]),\n                     };\n                     // The opaque type has 1 parameter.\n-                    make_binders(bound, 1)\n+                    make_only_type_binders(1, bound)\n                 } else {\n                     // If failed to find Symbol\u2019s value as variable is void: Future::Output, return empty bounds as fallback.\n                     let bound = OpaqueTyDatumBound {\n-                        bounds: make_binders(vec![], 0),\n-                        where_clauses: make_binders(vec![], 0),\n+                        bounds: make_only_type_binders(0, vec![]),\n+                        where_clauses: make_only_type_binders(0, vec![]),\n                     };\n                     // The opaque type has 1 parameter.\n-                    make_binders(bound, 1)\n+                    make_only_type_binders(1, bound)\n                 }\n             }\n         };\n@@ -291,15 +292,15 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n             argument_types: sig.params().iter().cloned().collect(),\n             return_type: sig.ret().clone(),\n         };\n-        make_binders(io.shifted_in(&Interner), 0)\n+        make_only_type_binders(0, io.shifted_in(&Interner))\n     }\n     fn closure_upvars(\n         &self,\n         _closure_id: chalk_ir::ClosureId<Interner>,\n         _substs: &chalk_ir::Substitution<Interner>,\n     ) -> chalk_ir::Binders<chalk_ir::Ty<Interner>> {\n         let ty = TyBuilder::unit();\n-        make_binders(ty, 0)\n+        make_only_type_binders(0, ty)\n     }\n     fn closure_fn_substitution(\n         &self,\n@@ -404,7 +405,7 @@ pub(crate) fn associated_ty_data_query(\n         trait_id: to_chalk_trait_id(trait_),\n         id,\n         name: type_alias,\n-        binders: make_binders(bound_data, generic_params.len()),\n+        binders: make_only_type_binders(generic_params.len(), bound_data),\n     };\n     Arc::new(datum)\n }\n@@ -437,7 +438,7 @@ pub(crate) fn trait_datum_query(\n         lang_attr(db.upcast(), trait_).and_then(|name| well_known_trait_from_lang_attr(&name));\n     let trait_datum = TraitDatum {\n         id: trait_id,\n-        binders: make_binders(trait_datum_bound, bound_vars.len(&Interner)),\n+        binders: make_only_type_binders(bound_vars.len(&Interner), trait_datum_bound),\n         flags,\n         associated_ty_ids,\n         well_known,\n@@ -506,7 +507,7 @@ pub(crate) fn struct_datum_query(\n         // FIXME set ADT kind\n         kind: rust_ir::AdtKind::Struct,\n         id: struct_id,\n-        binders: make_binders(struct_datum_bound, num_params),\n+        binders: make_only_type_binders(num_params, struct_datum_bound),\n         flags,\n     };\n     Arc::new(struct_datum)\n@@ -575,7 +576,7 @@ fn impl_def_datum(\n         .collect();\n     debug!(\"impl_datum: {:?}\", impl_datum_bound);\n     let impl_datum = ImplDatum {\n-        binders: make_binders(impl_datum_bound, bound_vars.len(&Interner)),\n+        binders: make_only_type_binders(bound_vars.len(&Interner), impl_datum_bound),\n         impl_type,\n         polarity,\n         associated_ty_value_ids,\n@@ -635,13 +636,13 @@ pub(crate) fn fn_def_datum_query(\n     let where_clauses = convert_where_clauses(db, callable_def.into(), &bound_vars);\n     let bound = rust_ir::FnDefDatumBound {\n         // Note: Chalk doesn't actually use this information yet as far as I am aware, but we provide it anyway\n-        inputs_and_output: make_binders(\n+        inputs_and_output: make_only_type_binders(\n+            0,\n             rust_ir::FnDefInputsAndOutputDatum {\n                 argument_types: sig.params().iter().cloned().collect(),\n                 return_type: sig.ret().clone(),\n             }\n             .shifted_in(&Interner),\n-            0,\n         ),\n         where_clauses,\n     };"}, {"sha": "4abc0fbf2ce840f79b9d3ecc985de39dcf51c483", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8040f4a5e3792f95b3194e21b3f6d375fb7499c5/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8040f4a5e3792f95b3194e21b3f6d375fb7499c5/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=8040f4a5e3792f95b3194e21b3f6d375fb7499c5", "patch": "@@ -71,20 +71,6 @@ impl ToChalk for TypeAliasAsValue {\n     }\n }\n \n-pub(super) fn make_binders<T>(value: T, num_vars: usize) -> chalk_ir::Binders<T>\n-where\n-    T: HasInterner<Interner = Interner>,\n-{\n-    chalk_ir::Binders::new(\n-        chalk_ir::VariableKinds::from_iter(\n-            &Interner,\n-            std::iter::repeat(chalk_ir::VariableKind::Ty(chalk_ir::TyVariableKind::General))\n-                .take(num_vars),\n-        ),\n-        value,\n-    )\n-}\n-\n pub(super) fn convert_where_clauses(\n     db: &dyn HirDatabase,\n     def: GenericDefId,"}]}