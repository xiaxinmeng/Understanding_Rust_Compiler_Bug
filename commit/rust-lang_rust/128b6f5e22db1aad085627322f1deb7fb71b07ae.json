{"sha": "128b6f5e22db1aad085627322f1deb7fb71b07ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyOGI2ZjVlMjJkYjFhYWQwODU2MjczMjJmMWRlYjdmYjcxYjA3YWU=", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-06-15T21:38:34Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-06-22T01:10:28Z"}, "message": "Add SimdArray::gather_{or,or_default,select}", "tree": {"sha": "9f4eabd0b6371cac320e449e31ea781c34db1be3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f4eabd0b6371cac320e449e31ea781c34db1be3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/128b6f5e22db1aad085627322f1deb7fb71b07ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/128b6f5e22db1aad085627322f1deb7fb71b07ae", "html_url": "https://github.com/rust-lang/rust/commit/128b6f5e22db1aad085627322f1deb7fb71b07ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/128b6f5e22db1aad085627322f1deb7fb71b07ae/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f99cc80d841781ef84d3f83cb732d0b84db3592", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f99cc80d841781ef84d3f83cb732d0b84db3592", "html_url": "https://github.com/rust-lang/rust/commit/2f99cc80d841781ef84d3f83cb732d0b84db3592"}], "stats": {"total": 70, "additions": 69, "deletions": 1}, "files": [{"sha": "36e1fb59675c0fd6e6fde8c906ab55636218a406", "filename": "crates/core_simd/src/array.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/128b6f5e22db1aad085627322f1deb7fb71b07ae/crates%2Fcore_simd%2Fsrc%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128b6f5e22db1aad085627322f1deb7fb71b07ae/crates%2Fcore_simd%2Fsrc%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Farray.rs?ref=128b6f5e22db1aad085627322f1deb7fb71b07ae", "patch": "@@ -1,4 +1,6 @@\n+use crate::intrinsics;\n use crate::masks::*;\n+use crate::vector::ptr::SimdConstPtr;\n use crate::vector::*;\n \n /// A representation of a vector as an \"array\" with indices, implementing\n@@ -17,6 +19,70 @@ where\n     /// Generates a SIMD vector with the same value in every lane.\n     #[must_use]\n     fn splat(val: Self::Scalar) -> Self;\n+\n+    /// SIMD gather: construct a SIMD vector by reading from a slice, using potentially discontiguous indices.\n+    /// If an index is out of bounds, that lane instead selects the value from the \"or\" vector.\n+    /// ```\n+    /// # use core_simd::*;\n+    /// let vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n+    /// let idxs = SimdUsize::<4>::from_array([9, 3, 0, 5]);\n+    /// let alt = SimdI32::from_array([-5, -4, -3, -2]);\n+    ///\n+    /// let result = SimdI32::<4>::gather_or(&vec, idxs, alt); // Note the lane that is out-of-bounds.\n+    /// assert_eq!(result, SimdI32::from_array([-5, 13, 10, 15]));\n+    /// ```\n+    #[must_use]\n+    #[inline]\n+    fn gather_or(slice: &[Self::Scalar], idxs: SimdUsize<LANES>, or: Self) -> Self {\n+        Self::gather_select(slice, MaskSize::splat(true), idxs, or)\n+    }\n+\n+    /// SIMD gather: construct a SIMD vector by reading from a slice, using potentially discontiguous indices.\n+    /// Out-of-bounds indices instead use the default value for that lane (0).\n+    /// ```\n+    /// # use core_simd::*;\n+    /// let vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n+    /// let idxs = SimdUsize::<4>::from_array([9, 3, 0, 5]);\n+    ///\n+    /// let result = SimdI32::<4>::gather_or_default(&vec, idxs); // Note the lane that is out-of-bounds.\n+    /// assert_eq!(result, SimdI32::from_array([0, 13, 10, 15]));\n+    /// ```\n+    #[must_use]\n+    #[inline]\n+    fn gather_or_default(slice: &[Self::Scalar], idxs: SimdUsize<LANES>) -> Self\n+    where\n+        Self::Scalar: Default,\n+    {\n+        Self::gather_or(slice, idxs, Self::splat(Self::Scalar::default()))\n+    }\n+\n+    /// SIMD gather: construct a SIMD vector by reading from a slice, using potentially discontiguous indices.\n+    /// Out-of-bounds or masked indices instead select the value from the \"or\" vector.\n+    /// ```\n+    /// # use core_simd::*;\n+    /// let vec: Vec<i32> = vec![10, 11, 12, 13, 14, 15, 16, 17, 18];\n+    /// let idxs = SimdUsize::<4>::from_array([9, 3, 0, 5]);\n+    /// let alt = SimdI32::from_array([-5, -4, -3, -2]);\n+    /// let mask = MaskSize::from_array([true, true, true, false]); // Note the mask of the last lane.\n+    ///\n+    /// let result = SimdI32::<4>::gather_select(&vec, mask, idxs, alt); // Note the lane that is out-of-bounds.\n+    /// assert_eq!(result, SimdI32::from_array([-5, 13, 10, -2]));\n+    /// ```\n+    #[must_use]\n+    #[inline]\n+    fn gather_select(\n+        slice: &[Self::Scalar],\n+        mask: MaskSize<LANES>,\n+        idxs: SimdUsize<LANES>,\n+        or: Self,\n+    ) -> Self {\n+        let mask = (mask & idxs.lanes_lt(SimdUsize::splat(slice.len()))).to_int();\n+        let base_ptr = SimdConstPtr::splat(slice.as_ptr());\n+        // Ferris forgive me, I have done pointer arithmetic here.\n+        let ptrs = base_ptr.wrapping_add(idxs);\n+        // SAFETY: The ptrs have been bounds-masked to prevent memory-unsafe reads insha'allah\n+        unsafe { intrinsics::simd_gather(or, ptrs, mask) }\n+    }\n }\n \n macro_rules! impl_simdarray_for {"}, {"sha": "e69696e515b6a3dee608acc1214af00d2f0642c3", "filename": "crates/core_simd/src/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/128b6f5e22db1aad085627322f1deb7fb71b07ae/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/128b6f5e22db1aad085627322f1deb7fb71b07ae/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs?ref=128b6f5e22db1aad085627322f1deb7fb71b07ae", "patch": "@@ -45,7 +45,7 @@ extern \"platform-intrinsic\" {\n \n     /// fabs\n     pub(crate) fn simd_fabs<T>(x: T) -> T;\n-    \n+\n     /// fsqrt\n     pub(crate) fn simd_fsqrt<T>(x: T) -> T;\n \n@@ -63,6 +63,8 @@ extern \"platform-intrinsic\" {\n     pub(crate) fn simd_shuffle16<T, U>(x: T, y: T, idx: [u32; 16]) -> U;\n     pub(crate) fn simd_shuffle32<T, U>(x: T, y: T, idx: [u32; 32]) -> U;\n \n+    pub(crate) fn simd_gather<T, U, V>(val: T, ptr: U, mask: V) -> T;\n+\n     // {s,u}add.sat\n     pub(crate) fn simd_saturating_add<T>(x: T, y: T) -> T;\n "}]}