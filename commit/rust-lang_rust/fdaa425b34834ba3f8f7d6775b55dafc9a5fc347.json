{"sha": "fdaa425b34834ba3f8f7d6775b55dafc9a5fc347", "node_id": "C_kwDOAAsO6NoAKGZkYWE0MjViMzQ4MzRiYTNmOGY3ZDY3NzViNTVkYWZjOWE1ZmMzNDc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-29T01:35:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-29T01:35:49Z"}, "message": "Auto merge of #9648 - llogiq:fix-undocumented-unsafe-blocks, r=Jarcho\n\nfix `undocumented-unsafe-blocks` false positive\n\nThis fixes #9142 by iterating over the parent nodes as long as within a block, expression, statement, local, const or static.\n\n---\n\nchangelog: none", "tree": {"sha": "b7f067e71ddcce9338fbc554ecf2335bc562e4d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7f067e71ddcce9338fbc554ecf2335bc562e4d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdaa425b34834ba3f8f7d6775b55dafc9a5fc347", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdaa425b34834ba3f8f7d6775b55dafc9a5fc347", "html_url": "https://github.com/rust-lang/rust/commit/fdaa425b34834ba3f8f7d6775b55dafc9a5fc347", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdaa425b34834ba3f8f7d6775b55dafc9a5fc347/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ab512c568ab8366604a7dc78d44bb5828d0f5b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ab512c568ab8366604a7dc78d44bb5828d0f5b5", "html_url": "https://github.com/rust-lang/rust/commit/0ab512c568ab8366604a7dc78d44bb5828d0f5b5"}, {"sha": "e19fe890911cce2258e4e670e037d88e61fae951", "url": "https://api.github.com/repos/rust-lang/rust/commits/e19fe890911cce2258e4e670e037d88e61fae951", "html_url": "https://github.com/rust-lang/rust/commit/e19fe890911cce2258e4e670e037d88e61fae951"}], "stats": {"total": 85, "additions": 81, "deletions": 4}, "files": [{"sha": "e8f15a4447352a9cedd66892e34831cb089a800f", "filename": "clippy_lints/src/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fdaa425b34834ba3f8f7d6775b55dafc9a5fc347/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdaa425b34834ba3f8f7d6775b55dafc9a5fc347/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs?ref=fdaa425b34834ba3f8f7d6775b55dafc9a5fc347", "patch": "@@ -68,7 +68,8 @@ impl LateLintPass<'_> for UndocumentedUnsafeBlocks {\n             && !in_external_macro(cx.tcx.sess, block.span)\n             && !is_lint_allowed(cx, UNDOCUMENTED_UNSAFE_BLOCKS, block.hir_id)\n             && !is_unsafe_from_proc_macro(cx, block.span)\n-            && !block_has_safety_comment(cx, block)\n+            && !block_has_safety_comment(cx, block.span)\n+            && !block_parents_have_safety_comment(cx, block.hir_id)\n         {\n             let source_map = cx.tcx.sess.source_map();\n             let span = if source_map.is_multiline(block.span) {\n@@ -126,8 +127,41 @@ fn is_unsafe_from_proc_macro(cx: &LateContext<'_>, span: Span) -> bool {\n         .map_or(true, |src| !src.starts_with(\"unsafe\"))\n }\n \n+// Checks if any parent {expression, statement, block, local, const, static}\n+// has a safety comment\n+fn block_parents_have_safety_comment(cx: &LateContext<'_>, id: hir::HirId) -> bool {\n+    if let Some(node) = get_parent_node(cx.tcx, id) {\n+        return match node {\n+            Node::Expr(expr) => !is_branchy(expr) && span_in_body_has_safety_comment(cx, expr.span),\n+            Node::Stmt(hir::Stmt {\n+                kind:\n+                    hir::StmtKind::Local(hir::Local { span, .. })\n+                    | hir::StmtKind::Expr(hir::Expr { span, .. })\n+                    | hir::StmtKind::Semi(hir::Expr { span, .. }),\n+                ..\n+            })\n+            | Node::Local(hir::Local { span, .. })\n+            | Node::Item(hir::Item {\n+                kind: hir::ItemKind::Const(..) | ItemKind::Static(..),\n+                span,\n+                ..\n+            }) => span_in_body_has_safety_comment(cx, *span),\n+            _ => false,\n+        };\n+    }\n+    false\n+}\n+\n+/// Checks if an expression is \"branchy\", e.g. loop, match/if/etc.\n+fn is_branchy(expr: &hir::Expr<'_>) -> bool {\n+    matches!(\n+        expr.kind,\n+        hir::ExprKind::If(..) | hir::ExprKind::Loop(..) | hir::ExprKind::Match(..)\n+    )\n+}\n+\n /// Checks if the lines immediately preceding the block contain a safety comment.\n-fn block_has_safety_comment(cx: &LateContext<'_>, block: &hir::Block<'_>) -> bool {\n+fn block_has_safety_comment(cx: &LateContext<'_>, span: Span) -> bool {\n     // This intentionally ignores text before the start of a function so something like:\n     // ```\n     //     // SAFETY: reason\n@@ -136,7 +170,7 @@ fn block_has_safety_comment(cx: &LateContext<'_>, block: &hir::Block<'_>) -> boo\n     // won't work. This is to avoid dealing with where such a comment should be place relative to\n     // attributes and doc comments.\n \n-    span_from_macro_expansion_has_safety_comment(cx, block.span) || span_in_body_has_safety_comment(cx, block.span)\n+    span_from_macro_expansion_has_safety_comment(cx, span) || span_in_body_has_safety_comment(cx, span)\n }\n \n /// Checks if the lines immediately preceding the item contain a safety comment."}, {"sha": "cbc6768033ec822bb7b4bfe6447579585a85000d", "filename": "tests/ui/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fdaa425b34834ba3f8f7d6775b55dafc9a5fc347/tests%2Fui%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdaa425b34834ba3f8f7d6775b55dafc9a5fc347/tests%2Fui%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fundocumented_unsafe_blocks.rs?ref=fdaa425b34834ba3f8f7d6775b55dafc9a5fc347", "patch": "@@ -490,4 +490,23 @@ unsafe impl CrateRoot for () {}\n // SAFETY: ok\n unsafe impl CrateRoot for (i32) {}\n \n+fn issue_9142() {\n+    // SAFETY: ok\n+    let _ =\n+        // we need this comment to avoid rustfmt putting\n+        // it all on one line\n+        unsafe {};\n+\n+    // SAFETY: this is more than one level away, so it should warn\n+    let _ = {\n+        if unsafe { true } {\n+            todo!();\n+        } else {\n+            let bar = unsafe {};\n+            todo!();\n+            bar\n+        }\n+    };\n+}\n+\n fn main() {}"}, {"sha": "ba4de9806d17523a4675a4d9250b7fe94695dfc9", "filename": "tests/ui/undocumented_unsafe_blocks.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fdaa425b34834ba3f8f7d6775b55dafc9a5fc347/tests%2Fui%2Fundocumented_unsafe_blocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fdaa425b34834ba3f8f7d6775b55dafc9a5fc347/tests%2Fui%2Fundocumented_unsafe_blocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fundocumented_unsafe_blocks.stderr?ref=fdaa425b34834ba3f8f7d6775b55dafc9a5fc347", "patch": "@@ -263,5 +263,29 @@ LL | unsafe impl CrateRoot for () {}\n    |\n    = help: consider adding a safety comment on the preceding line\n \n-error: aborting due to 31 previous errors\n+error: unsafe block missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:498:9\n+   |\n+LL |         unsafe {};\n+   |         ^^^^^^^^^\n+   |\n+   = help: consider adding a safety comment on the preceding line\n+\n+error: unsafe block missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:502:12\n+   |\n+LL |         if unsafe { true } {\n+   |            ^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a safety comment on the preceding line\n+\n+error: unsafe block missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:505:23\n+   |\n+LL |             let bar = unsafe {};\n+   |                       ^^^^^^^^^\n+   |\n+   = help: consider adding a safety comment on the preceding line\n+\n+error: aborting due to 34 previous errors\n "}]}