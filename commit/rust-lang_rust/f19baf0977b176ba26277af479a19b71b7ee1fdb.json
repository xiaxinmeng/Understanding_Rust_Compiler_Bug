{"sha": "f19baf0977b176ba26277af479a19b71b7ee1fdb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxOWJhZjA5NzdiMTc2YmEyNjI3N2FmNDc5YTE5YjcxYjdlZTFmZGI=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-12-22T17:58:39Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-01-20T09:55:16Z"}, "message": "Rename std::ptr::Shared to NonNull\n\n`Shared` is now a deprecated `type` alias.\n\nCC https://github.com/rust-lang/rust/issues/27730#issuecomment-352800629", "tree": {"sha": "7c6eb9b86822c1dbca2535ea0b34569e3d65eb7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c6eb9b86822c1dbca2535ea0b34569e3d65eb7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f19baf0977b176ba26277af479a19b71b7ee1fdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f19baf0977b176ba26277af479a19b71b7ee1fdb", "html_url": "https://github.com/rust-lang/rust/commit/f19baf0977b176ba26277af479a19b71b7ee1fdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f19baf0977b176ba26277af479a19b71b7ee1fdb/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba5d7a66e847f5713633cb792c379a11b774e21f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba5d7a66e847f5713633cb792c379a11b774e21f", "html_url": "https://github.com/rust-lang/rust/commit/ba5d7a66e847f5713633cb792c379a11b774e21f"}], "stats": {"total": 195, "additions": 100, "deletions": 95}, "files": [{"sha": "49a6220d591a24413f294f0b88a36d7582b03ffa", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f19baf0977b176ba26277af479a19b71b7ee1fdb/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19baf0977b176ba26277af479a19b71b7ee1fdb/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=f19baf0977b176ba26277af479a19b71b7ee1fdb", "patch": "@@ -25,7 +25,7 @@ use core::intrinsics::abort;\n use core::mem::{self, align_of_val, size_of_val, uninitialized};\n use core::ops::Deref;\n use core::ops::CoerceUnsized;\n-use core::ptr::{self, Shared};\n+use core::ptr::{self, NonNull};\n use core::marker::{Unsize, PhantomData};\n use core::hash::{Hash, Hasher};\n use core::{isize, usize};\n@@ -197,7 +197,7 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n /// [rc_examples]: ../../std/rc/index.html#examples\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Arc<T: ?Sized> {\n-    ptr: Shared<ArcInner<T>>,\n+    ptr: NonNull<ArcInner<T>>,\n     phantom: PhantomData<T>,\n }\n \n@@ -234,7 +234,7 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Arc<U>> for Arc<T> {}\n /// [`None`]: ../../std/option/enum.Option.html#variant.None\n #[stable(feature = \"arc_weak\", since = \"1.4.0\")]\n pub struct Weak<T: ?Sized> {\n-    ptr: Shared<ArcInner<T>>,\n+    ptr: NonNull<ArcInner<T>>,\n }\n \n #[stable(feature = \"arc_weak\", since = \"1.4.0\")]\n@@ -286,7 +286,7 @@ impl<T> Arc<T> {\n             weak: atomic::AtomicUsize::new(1),\n             data,\n         };\n-        Arc { ptr: Shared::from(Box::into_unique(x)), phantom: PhantomData }\n+        Arc { ptr: NonNull::from(Box::into_unique(x)), phantom: PhantomData }\n     }\n \n     /// Returns the contained value, if the `Arc` has exactly one strong reference.\n@@ -397,7 +397,7 @@ impl<T: ?Sized> Arc<T> {\n         let arc_ptr = set_data_ptr(fake_ptr, (ptr as *mut u8).offset(-offset));\n \n         Arc {\n-            ptr: Shared::new_unchecked(arc_ptr),\n+            ptr: NonNull::new_unchecked(arc_ptr),\n             phantom: PhantomData,\n         }\n     }\n@@ -582,7 +582,7 @@ impl<T: ?Sized> Arc<T> {\n             // Free the allocation without dropping its contents\n             box_free(bptr);\n \n-            Arc { ptr: Shared::new_unchecked(ptr), phantom: PhantomData }\n+            Arc { ptr: NonNull::new_unchecked(ptr), phantom: PhantomData }\n         }\n     }\n }\n@@ -609,7 +609,7 @@ impl<T> Arc<[T]> {\n             &mut (*ptr).data as *mut [T] as *mut T,\n             v.len());\n \n-        Arc { ptr: Shared::new_unchecked(ptr), phantom: PhantomData }\n+        Arc { ptr: NonNull::new_unchecked(ptr), phantom: PhantomData }\n     }\n }\n \n@@ -669,7 +669,7 @@ impl<T: Clone> ArcFromSlice<T> for Arc<[T]> {\n             // All clear. Forget the guard so it doesn't free the new ArcInner.\n             mem::forget(guard);\n \n-            Arc { ptr: Shared::new_unchecked(ptr), phantom: PhantomData }\n+            Arc { ptr: NonNull::new_unchecked(ptr), phantom: PhantomData }\n         }\n     }\n }\n@@ -991,7 +991,7 @@ impl<T> Weak<T> {\n     pub fn new() -> Weak<T> {\n         unsafe {\n             Weak {\n-                ptr: Shared::from(Box::into_unique(box ArcInner {\n+                ptr: NonNull::from(Box::into_unique(box ArcInner {\n                     strong: atomic::AtomicUsize::new(0),\n                     weak: atomic::AtomicUsize::new(1),\n                     data: uninitialized(),"}, {"sha": "37af9ea529532f7b045baa3cd00cc16e1eb554f4", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19baf0977b176ba26277af479a19b71b7ee1fdb/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19baf0977b176ba26277af479a19b71b7ee1fdb/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=f19baf0977b176ba26277af479a19b71b7ee1fdb", "patch": "@@ -232,7 +232,7 @@ unsafe impl Alloc for Heap {\n ///\n /// This preserves the non-null invariant for types like `Box<T>`. The address\n /// may overlap with non-zero-size memory allocations.\n-#[rustc_deprecated(since = \"1.19\", reason = \"Use Unique/Shared::empty() instead\")]\n+#[rustc_deprecated(since = \"1.19\", reason = \"Use Unique/NonNull::empty() instead\")]\n #[unstable(feature = \"heap_api\", issue = \"27700\")]\n pub const EMPTY: *mut () = 1 as *mut ();\n "}, {"sha": "eaad6f1116f00dec7dc5c52ad7c1debfff7fe217", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19baf0977b176ba26277af479a19b71b7ee1fdb/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19baf0977b176ba26277af479a19b71b7ee1fdb/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=f19baf0977b176ba26277af479a19b71b7ee1fdb", "patch": "@@ -103,14 +103,14 @@\n #![feature(iter_rfold)]\n #![feature(lang_items)]\n #![feature(needs_allocator)]\n+#![feature(nonnull)]\n #![feature(nonzero)]\n #![feature(offset_to)]\n #![feature(optin_builtin_traits)]\n #![feature(pattern)]\n #![feature(placement_in_syntax)]\n #![feature(placement_new_protocol)]\n #![feature(rustc_attrs)]\n-#![feature(shared)]\n #![feature(slice_get_slice)]\n #![feature(slice_patterns)]\n #![feature(slice_rsplit)]"}, {"sha": "e6e841012756bd50983cc9953d22e2f717f75f16", "filename": "src/liballoc/linked_list.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f19baf0977b176ba26277af479a19b71b7ee1fdb/src%2Fliballoc%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19baf0977b176ba26277af479a19b71b7ee1fdb/src%2Fliballoc%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flinked_list.rs?ref=f19baf0977b176ba26277af479a19b71b7ee1fdb", "patch": "@@ -29,7 +29,7 @@ use core::iter::{FromIterator, FusedIterator};\n use core::marker::PhantomData;\n use core::mem;\n use core::ops::{BoxPlace, InPlace, Place, Placer};\n-use core::ptr::{self, Shared};\n+use core::ptr::{self, NonNull};\n \n use boxed::{Box, IntermediateBox};\n use super::SpecExtend;\n@@ -44,15 +44,15 @@ use super::SpecExtend;\n /// more memory efficient and make better use of CPU cache.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct LinkedList<T> {\n-    head: Option<Shared<Node<T>>>,\n-    tail: Option<Shared<Node<T>>>,\n+    head: Option<NonNull<Node<T>>>,\n+    tail: Option<NonNull<Node<T>>>,\n     len: usize,\n     marker: PhantomData<Box<Node<T>>>,\n }\n \n struct Node<T> {\n-    next: Option<Shared<Node<T>>>,\n-    prev: Option<Shared<Node<T>>>,\n+    next: Option<NonNull<Node<T>>>,\n+    prev: Option<NonNull<Node<T>>>,\n     element: T,\n }\n \n@@ -65,8 +65,8 @@ struct Node<T> {\n /// [`LinkedList`]: struct.LinkedList.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, T: 'a> {\n-    head: Option<Shared<Node<T>>>,\n-    tail: Option<Shared<Node<T>>>,\n+    head: Option<NonNull<Node<T>>>,\n+    tail: Option<NonNull<Node<T>>>,\n     len: usize,\n     marker: PhantomData<&'a Node<T>>,\n }\n@@ -98,8 +98,8 @@ impl<'a, T> Clone for Iter<'a, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, T: 'a> {\n     list: &'a mut LinkedList<T>,\n-    head: Option<Shared<Node<T>>>,\n-    tail: Option<Shared<Node<T>>>,\n+    head: Option<NonNull<Node<T>>>,\n+    tail: Option<NonNull<Node<T>>>,\n     len: usize,\n }\n \n@@ -157,7 +157,7 @@ impl<T> LinkedList<T> {\n         unsafe {\n             node.next = self.head;\n             node.prev = None;\n-            let node = Some(Shared::from(Box::into_unique(node)));\n+            let node = Some(NonNull::from(Box::into_unique(node)));\n \n             match self.head {\n                 None => self.tail = node,\n@@ -192,7 +192,7 @@ impl<T> LinkedList<T> {\n         unsafe {\n             node.next = None;\n             node.prev = self.tail;\n-            let node = Some(Shared::from(Box::into_unique(node)));\n+            let node = Some(NonNull::from(Box::into_unique(node)));\n \n             match self.tail {\n                 None => self.head = node,\n@@ -225,7 +225,7 @@ impl<T> LinkedList<T> {\n     ///\n     /// Warning: this will not check that the provided node belongs to the current list.\n     #[inline]\n-    unsafe fn unlink_node(&mut self, mut node: Shared<Node<T>>) {\n+    unsafe fn unlink_node(&mut self, mut node: NonNull<Node<T>>) {\n         let node = node.as_mut();\n \n         match node.prev {\n@@ -986,7 +986,7 @@ impl<'a, T> IterMut<'a, T> {\n                     Some(prev) => prev,\n                 };\n \n-                let node = Some(Shared::from(Box::into_unique(box Node {\n+                let node = Some(NonNull::from(Box::into_unique(box Node {\n                     next: Some(head),\n                     prev: Some(prev),\n                     element,\n@@ -1038,7 +1038,7 @@ pub struct DrainFilter<'a, T: 'a, F: 'a>\n     where F: FnMut(&mut T) -> bool,\n {\n     list: &'a mut LinkedList<T>,\n-    it: Option<Shared<Node<T>>>,\n+    it: Option<NonNull<Node<T>>>,\n     pred: F,\n     idx: usize,\n     old_len: usize,"}, {"sha": "aa7b96139fa20a734b453ecbd52a96faf0c36cca", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f19baf0977b176ba26277af479a19b71b7ee1fdb/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19baf0977b176ba26277af479a19b71b7ee1fdb/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=f19baf0977b176ba26277af479a19b71b7ee1fdb", "patch": "@@ -256,7 +256,7 @@ use core::marker::{Unsize, PhantomData};\n use core::mem::{self, align_of_val, forget, size_of_val, uninitialized};\n use core::ops::Deref;\n use core::ops::CoerceUnsized;\n-use core::ptr::{self, Shared};\n+use core::ptr::{self, NonNull};\n use core::convert::From;\n \n use heap::{Heap, Alloc, Layout, box_free};\n@@ -282,7 +282,7 @@ struct RcBox<T: ?Sized> {\n /// [get_mut]: #method.get_mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Rc<T: ?Sized> {\n-    ptr: Shared<RcBox<T>>,\n+    ptr: NonNull<RcBox<T>>,\n     phantom: PhantomData<T>,\n }\n \n@@ -311,7 +311,7 @@ impl<T> Rc<T> {\n             // pointers, which ensures that the weak destructor never frees\n             // the allocation while the strong destructor is running, even\n             // if the weak pointer is stored inside the strong one.\n-            ptr: Shared::from(Box::into_unique(box RcBox {\n+            ptr: NonNull::from(Box::into_unique(box RcBox {\n                 strong: Cell::new(1),\n                 weak: Cell::new(1),\n                 value,\n@@ -428,7 +428,7 @@ impl<T: ?Sized> Rc<T> {\n         let rc_ptr = set_data_ptr(fake_ptr, (ptr as *mut u8).offset(-offset));\n \n         Rc {\n-            ptr: Shared::new_unchecked(rc_ptr),\n+            ptr: NonNull::new_unchecked(rc_ptr),\n             phantom: PhantomData,\n         }\n     }\n@@ -649,7 +649,7 @@ impl Rc<Any> {\n                 let raw: *const RcBox<Any> = self.ptr.as_ptr();\n                 forget(self);\n                 Ok(Rc {\n-                    ptr: Shared::new_unchecked(raw as *const RcBox<T> as *mut _),\n+                    ptr: NonNull::new_unchecked(raw as *const RcBox<T> as *mut _),\n                     phantom: PhantomData,\n                 })\n             }\n@@ -695,7 +695,7 @@ impl<T: ?Sized> Rc<T> {\n             // Free the allocation without dropping its contents\n             box_free(bptr);\n \n-            Rc { ptr: Shared::new_unchecked(ptr), phantom: PhantomData }\n+            Rc { ptr: NonNull::new_unchecked(ptr), phantom: PhantomData }\n         }\n     }\n }\n@@ -722,7 +722,7 @@ impl<T> Rc<[T]> {\n             &mut (*ptr).value as *mut [T] as *mut T,\n             v.len());\n \n-        Rc { ptr: Shared::new_unchecked(ptr), phantom: PhantomData }\n+        Rc { ptr: NonNull::new_unchecked(ptr), phantom: PhantomData }\n     }\n }\n \n@@ -781,7 +781,7 @@ impl<T: Clone> RcFromSlice<T> for Rc<[T]> {\n             // All clear. Forget the guard so it doesn't free the new RcBox.\n             forget(guard);\n \n-            Rc { ptr: Shared::new_unchecked(ptr), phantom: PhantomData }\n+            Rc { ptr: NonNull::new_unchecked(ptr), phantom: PhantomData }\n         }\n     }\n }\n@@ -1160,7 +1160,7 @@ impl<T> From<Vec<T>> for Rc<[T]> {\n /// [`None`]: ../../std/option/enum.Option.html#variant.None\n #[stable(feature = \"rc_weak\", since = \"1.4.0\")]\n pub struct Weak<T: ?Sized> {\n-    ptr: Shared<RcBox<T>>,\n+    ptr: NonNull<RcBox<T>>,\n }\n \n #[stable(feature = \"rc_weak\", since = \"1.4.0\")]\n@@ -1190,7 +1190,7 @@ impl<T> Weak<T> {\n     pub fn new() -> Weak<T> {\n         unsafe {\n             Weak {\n-                ptr: Shared::from(Box::into_unique(box RcBox {\n+                ptr: NonNull::from(Box::into_unique(box RcBox {\n                     strong: Cell::new(0),\n                     weak: Cell::new(1),\n                     value: uninitialized(),"}, {"sha": "b14b9d747654817343bbad6d36806f4514e76653", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f19baf0977b176ba26277af479a19b71b7ee1fdb/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19baf0977b176ba26277af479a19b71b7ee1fdb/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=f19baf0977b176ba26277af479a19b71b7ee1fdb", "patch": "@@ -78,7 +78,7 @@ use core::num::Float;\n use core::ops::{InPlace, Index, IndexMut, Place, Placer};\n use core::ops;\n use core::ptr;\n-use core::ptr::Shared;\n+use core::ptr::NonNull;\n use core::slice;\n \n use borrow::ToOwned;\n@@ -1124,7 +1124,7 @@ impl<T> Vec<T> {\n                 tail_start: end,\n                 tail_len: len - end,\n                 iter: range_slice.iter(),\n-                vec: Shared::from(self),\n+                vec: NonNull::from(self),\n             }\n         }\n     }\n@@ -1745,7 +1745,7 @@ impl<T> IntoIterator for Vec<T> {\n             let cap = self.buf.cap();\n             mem::forget(self);\n             IntoIter {\n-                buf: Shared::new_unchecked(begin),\n+                buf: NonNull::new_unchecked(begin),\n                 phantom: PhantomData,\n                 cap,\n                 ptr: begin,\n@@ -2267,7 +2267,7 @@ impl<'a, T> FromIterator<T> for Cow<'a, [T]> where T: Clone {\n /// [`IntoIterator`]: ../../std/iter/trait.IntoIterator.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<T> {\n-    buf: Shared<T>,\n+    buf: NonNull<T>,\n     phantom: PhantomData<T>,\n     cap: usize,\n     ptr: *const T,\n@@ -2442,7 +2442,7 @@ pub struct Drain<'a, T: 'a> {\n     tail_len: usize,\n     /// Current remaining range to remove\n     iter: slice::Iter<'a, T>,\n-    vec: Shared<Vec<T>>,\n+    vec: NonNull<Vec<T>>,\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]"}, {"sha": "8f05a69c5f3ec58f694c764151498706b8ae0271", "filename": "src/liballoc/vec_deque.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f19baf0977b176ba26277af479a19b71b7ee1fdb/src%2Fliballoc%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19baf0977b176ba26277af479a19b71b7ee1fdb/src%2Fliballoc%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec_deque.rs?ref=f19baf0977b176ba26277af479a19b71b7ee1fdb", "patch": "@@ -23,7 +23,7 @@ use core::iter::{repeat, FromIterator, FusedIterator};\n use core::mem;\n use core::ops::{Index, IndexMut, Place, Placer, InPlace};\n use core::ptr;\n-use core::ptr::Shared;\n+use core::ptr::NonNull;\n use core::slice;\n \n use core::hash::{Hash, Hasher};\n@@ -895,7 +895,7 @@ impl<T> VecDeque<T> {\n         self.head = drain_tail;\n \n         Drain {\n-            deque: Shared::from(&mut *self),\n+            deque: NonNull::from(&mut *self),\n             after_tail: drain_head,\n             after_head: head,\n             iter: Iter {\n@@ -2154,7 +2154,7 @@ pub struct Drain<'a, T: 'a> {\n     after_tail: usize,\n     after_head: usize,\n     iter: Iter<'a, T>,\n-    deque: Shared<VecDeque<T>>,\n+    deque: NonNull<VecDeque<T>>,\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]"}, {"sha": "fd8f9138f36513a3fad0aeb8a7b808f13c6ff1c9", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 46, "deletions": 41, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/f19baf0977b176ba26277af479a19b71b7ee1fdb/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19baf0977b176ba26277af479a19b71b7ee1fdb/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=f19baf0977b176ba26277af479a19b71b7ee1fdb", "patch": "@@ -2321,7 +2321,7 @@ impl<T: ?Sized> PartialOrd for *mut T {\n /// its owning Unique.\n ///\n /// If you're uncertain of whether it's correct to use `Unique` for your purposes,\n-/// consider using `Shared`, which has weaker semantics.\n+/// consider using `NonNull`, which has weaker semantics.\n ///\n /// Unlike `*mut T`, the pointer must always be non-null, even if the pointer\n /// is never dereferenced. This is so that enums may use this forbidden value\n@@ -2452,75 +2452,80 @@ impl<'a, T: ?Sized> From<&'a T> for Unique<T> {\n     }\n }\n \n+/// Previous name of `NonNull`.\n+#[rustc_deprecated(since = \"1.24\", reason = \"renamed to `NonNull`\")]\n+#[unstable(feature = \"shared\", issue = \"27730\")]\n+pub type Shared<T> = NonNull<T>;\n+\n /// `*mut T` but non-zero and covariant.\n ///\n /// This is often the correct thing to use when building data structures using\n /// raw pointers, but is ultimately more dangerous to use because of its additional\n-/// properties. If you're not sure if you should use `Shared<T>`, just use `*mut T`!\n+/// properties. If you're not sure if you should use `NonNull<T>`, just use `*mut T`!\n ///\n /// Unlike `*mut T`, the pointer must always be non-null, even if the pointer\n /// is never dereferenced. This is so that enums may use this forbidden value\n-/// as a discriminant -- `Option<Shared<T>>` has the same size as `Shared<T>`.\n+/// as a discriminant -- `Option<NonNull<T>>` has the same size as `NonNull<T>`.\n /// However the pointer may still dangle if it isn't dereferenced.\n ///\n-/// Unlike `*mut T`, `Shared<T>` is covariant over `T`. If this is incorrect\n+/// Unlike `*mut T`, `NonNull<T>` is covariant over `T`. If this is incorrect\n /// for your use case, you should include some PhantomData in your type to\n /// provide invariance, such as `PhantomData<Cell<T>>` or `PhantomData<&'a mut T>`.\n /// Usually this won't be necessary; covariance is correct for most safe abstractions,\n /// such as Box, Rc, Arc, Vec, and LinkedList. This is the case because they\n /// provide a public API that follows the normal shared XOR mutable rules of Rust.\n #[unstable(feature = \"shared\", reason = \"needs an RFC to flesh out design\",\n            issue = \"27730\")]\n-pub struct Shared<T: ?Sized> {\n+pub struct NonNull<T: ?Sized> {\n     pointer: NonZero<*const T>,\n }\n \n #[unstable(feature = \"shared\", issue = \"27730\")]\n-impl<T: ?Sized> fmt::Debug for Shared<T> {\n+impl<T: ?Sized> fmt::Debug for NonNull<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{:p}\", self.as_ptr())\n     }\n }\n \n-/// `Shared` pointers are not `Send` because the data they reference may be aliased.\n+/// `NonNull` pointers are not `Send` because the data they reference may be aliased.\n // NB: This impl is unnecessary, but should provide better error messages.\n-#[unstable(feature = \"shared\", issue = \"27730\")]\n-impl<T: ?Sized> !Send for Shared<T> { }\n+#[unstable(feature = \"nonnull\", issue = \"27730\")]\n+impl<T: ?Sized> !Send for NonNull<T> { }\n \n-/// `Shared` pointers are not `Sync` because the data they reference may be aliased.\n+/// `NonNull` pointers are not `Sync` because the data they reference may be aliased.\n // NB: This impl is unnecessary, but should provide better error messages.\n-#[unstable(feature = \"shared\", issue = \"27730\")]\n-impl<T: ?Sized> !Sync for Shared<T> { }\n+#[unstable(feature = \"nonnull\", issue = \"27730\")]\n+impl<T: ?Sized> !Sync for NonNull<T> { }\n \n-#[unstable(feature = \"shared\", issue = \"27730\")]\n-impl<T: Sized> Shared<T> {\n-    /// Creates a new `Shared` that is dangling, but well-aligned.\n+#[unstable(feature = \"nonnull\", issue = \"27730\")]\n+impl<T: Sized> NonNull<T> {\n+    /// Creates a new `NonNull` that is dangling, but well-aligned.\n     ///\n     /// This is useful for initializing types which lazily allocate, like\n     /// `Vec::new` does.\n     pub fn empty() -> Self {\n         unsafe {\n             let ptr = mem::align_of::<T>() as *mut T;\n-            Shared::new_unchecked(ptr)\n+            NonNull::new_unchecked(ptr)\n         }\n     }\n }\n \n-#[unstable(feature = \"shared\", issue = \"27730\")]\n-impl<T: ?Sized> Shared<T> {\n-    /// Creates a new `Shared`.\n+#[unstable(feature = \"nonnull\", issue = \"27730\")]\n+impl<T: ?Sized> NonNull<T> {\n+    /// Creates a new `NonNull`.\n     ///\n     /// # Safety\n     ///\n     /// `ptr` must be non-null.\n-    #[unstable(feature = \"shared\", issue = \"27730\")]\n+    #[unstable(feature = \"nonnull\", issue = \"27730\")]\n     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {\n-        Shared { pointer: NonZero::new_unchecked(ptr) }\n+        NonNull { pointer: NonZero::new_unchecked(ptr) }\n     }\n \n-    /// Creates a new `Shared` if `ptr` is non-null.\n+    /// Creates a new `NonNull` if `ptr` is non-null.\n     pub fn new(ptr: *mut T) -> Option<Self> {\n-        NonZero::new(ptr as *const T).map(|nz| Shared { pointer: nz })\n+        NonZero::new(ptr as *const T).map(|nz| NonNull { pointer: nz })\n     }\n \n     /// Acquires the underlying `*mut` pointer.\n@@ -2548,49 +2553,49 @@ impl<T: ?Sized> Shared<T> {\n \n     /// Acquires the underlying pointer as a `*mut` pointer.\n     #[rustc_deprecated(since = \"1.19\", reason = \"renamed to `as_ptr` for ergonomics/consistency\")]\n-    #[unstable(feature = \"shared\", issue = \"27730\")]\n+    #[unstable(feature = \"nonnull\", issue = \"27730\")]\n     pub unsafe fn as_mut_ptr(&self) -> *mut T {\n         self.as_ptr()\n     }\n }\n \n-#[unstable(feature = \"shared\", issue = \"27730\")]\n-impl<T: ?Sized> Clone for Shared<T> {\n+#[unstable(feature = \"nonnull\", issue = \"27730\")]\n+impl<T: ?Sized> Clone for NonNull<T> {\n     fn clone(&self) -> Self {\n         *self\n     }\n }\n \n-#[unstable(feature = \"shared\", issue = \"27730\")]\n-impl<T: ?Sized> Copy for Shared<T> { }\n+#[unstable(feature = \"nonnull\", issue = \"27730\")]\n+impl<T: ?Sized> Copy for NonNull<T> { }\n \n-#[unstable(feature = \"shared\", issue = \"27730\")]\n-impl<T: ?Sized, U: ?Sized> CoerceUnsized<Shared<U>> for Shared<T> where T: Unsize<U> { }\n+#[unstable(feature = \"nonnull\", issue = \"27730\")]\n+impl<T: ?Sized, U: ?Sized> CoerceUnsized<NonNull<U>> for NonNull<T> where T: Unsize<U> { }\n \n-#[unstable(feature = \"shared\", issue = \"27730\")]\n-impl<T: ?Sized> fmt::Pointer for Shared<T> {\n+#[unstable(feature = \"nonnull\", issue = \"27730\")]\n+impl<T: ?Sized> fmt::Pointer for NonNull<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Pointer::fmt(&self.as_ptr(), f)\n     }\n }\n \n-#[unstable(feature = \"shared\", issue = \"27730\")]\n-impl<T: ?Sized> From<Unique<T>> for Shared<T> {\n+#[unstable(feature = \"nonnull\", issue = \"27730\")]\n+impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n     fn from(unique: Unique<T>) -> Self {\n-        Shared { pointer: unique.pointer }\n+        NonNull { pointer: unique.pointer }\n     }\n }\n \n-#[unstable(feature = \"shared\", issue = \"27730\")]\n-impl<'a, T: ?Sized> From<&'a mut T> for Shared<T> {\n+#[unstable(feature = \"nonnull\", issue = \"27730\")]\n+impl<'a, T: ?Sized> From<&'a mut T> for NonNull<T> {\n     fn from(reference: &'a mut T) -> Self {\n-        Shared { pointer: NonZero::from(reference) }\n+        NonNull { pointer: NonZero::from(reference) }\n     }\n }\n \n-#[unstable(feature = \"shared\", issue = \"27730\")]\n-impl<'a, T: ?Sized> From<&'a T> for Shared<T> {\n+#[unstable(feature = \"nonnull\", issue = \"27730\")]\n+impl<'a, T: ?Sized> From<&'a T> for NonNull<T> {\n     fn from(reference: &'a T) -> Self {\n-        Shared { pointer: NonZero::from(reference) }\n+        NonNull { pointer: NonZero::from(reference) }\n     }\n }"}, {"sha": "511c407d45a7fef0ad7d7cb0f5d937041b93826e", "filename": "src/librustc_data_structures/array_vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f19baf0977b176ba26277af479a19b71b7ee1fdb/src%2Flibrustc_data_structures%2Farray_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19baf0977b176ba26277af479a19b71b7ee1fdb/src%2Flibrustc_data_structures%2Farray_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Farray_vec.rs?ref=f19baf0977b176ba26277af479a19b71b7ee1fdb", "patch": "@@ -12,7 +12,7 @@\n \n use std::marker::Unsize;\n use std::iter::Extend;\n-use std::ptr::{self, drop_in_place, Shared};\n+use std::ptr::{self, drop_in_place, NonNull};\n use std::ops::{Deref, DerefMut, Range};\n use std::hash::{Hash, Hasher};\n use std::slice;\n@@ -146,7 +146,7 @@ impl<A: Array> ArrayVec<A> {\n                 tail_start: end,\n                 tail_len: len - end,\n                 iter: range_slice.iter(),\n-                array_vec: Shared::from(self),\n+                array_vec: NonNull::from(self),\n             }\n         }\n     }\n@@ -232,7 +232,7 @@ pub struct Drain<'a, A: Array>\n     tail_start: usize,\n     tail_len: usize,\n     iter: slice::Iter<'a, ManuallyDrop<A::Element>>,\n-    array_vec: Shared<ArrayVec<A>>,\n+    array_vec: NonNull<ArrayVec<A>>,\n }\n \n impl<'a, A: Array> Iterator for Drain<'a, A> {"}, {"sha": "1d53825ac37f9155e5567dc4a302864a7c13b3ea", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19baf0977b176ba26277af479a19b71b7ee1fdb/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19baf0977b176ba26277af479a19b71b7ee1fdb/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=f19baf0977b176ba26277af479a19b71b7ee1fdb", "patch": "@@ -21,8 +21,8 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![deny(warnings)]\n \n-#![feature(shared)]\n #![feature(collections_range)]\n+#![feature(nonnull)]\n #![feature(nonzero)]\n #![feature(unboxed_closures)]\n #![feature(fn_traits)]"}, {"sha": "73bd5747c105a98fd66d470264ab421c33cef817", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f19baf0977b176ba26277af479a19b71b7ee1fdb/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19baf0977b176ba26277af479a19b71b7ee1fdb/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=f19baf0977b176ba26277af479a19b71b7ee1fdb", "patch": "@@ -16,7 +16,7 @@ use marker;\n use mem::{align_of, size_of, needs_drop};\n use mem;\n use ops::{Deref, DerefMut};\n-use ptr::{self, Unique, Shared};\n+use ptr::{self, Unique, NonNull};\n \n use self::BucketState::*;\n \n@@ -873,7 +873,7 @@ impl<K, V> RawTable<K, V> {\n                 elems_left,\n                 marker: marker::PhantomData,\n             },\n-            table: Shared::from(self),\n+            table: NonNull::from(self),\n             marker: marker::PhantomData,\n         }\n     }\n@@ -1020,7 +1020,7 @@ impl<K, V> IntoIter<K, V> {\n \n /// Iterator over the entries in a table, clearing the table.\n pub struct Drain<'a, K: 'a, V: 'a> {\n-    table: Shared<RawTable<K, V>>,\n+    table: NonNull<RawTable<K, V>>,\n     iter: RawBuckets<'static, K, V>,\n     marker: marker::PhantomData<&'a RawTable<K, V>>,\n }"}, {"sha": "8a1ba32f7dc2489c5e2a7382b09cade5cd606389", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f19baf0977b176ba26277af479a19b71b7ee1fdb/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19baf0977b176ba26277af479a19b71b7ee1fdb/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=f19baf0977b176ba26277af479a19b71b7ee1fdb", "patch": "@@ -283,6 +283,7 @@\n #![feature(macro_vis_matcher)]\n #![feature(needs_panic_runtime)]\n #![feature(never_type)]\n+#![feature(nonnull)]\n #![feature(num_bits_bytes)]\n #![feature(old_wrapping)]\n #![feature(on_unimplemented)]\n@@ -297,7 +298,6 @@\n #![feature(raw)]\n #![feature(repr_align)]\n #![feature(rustc_attrs)]\n-#![feature(shared)]\n #![feature(sip_hash_13)]\n #![feature(slice_bytes)]\n #![feature(slice_concat_ext)]"}, {"sha": "68584b7cf25f81ec377508caf0088769f3a30151", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f19baf0977b176ba26277af479a19b71b7ee1fdb/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f19baf0977b176ba26277af479a19b71b7ee1fdb/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=f19baf0977b176ba26277af479a19b71b7ee1fdb", "patch": "@@ -17,7 +17,7 @@ use cell::UnsafeCell;\n use fmt;\n use ops::{Deref, DerefMut};\n use panicking;\n-use ptr::{Unique, Shared};\n+use ptr::{Unique, NonNull};\n use rc::Rc;\n use sync::{Arc, Mutex, RwLock, atomic};\n use thread::Result;\n@@ -198,8 +198,8 @@ impl<T: RefUnwindSafe + ?Sized> UnwindSafe for *const T {}\n impl<T: RefUnwindSafe + ?Sized> UnwindSafe for *mut T {}\n #[unstable(feature = \"unique\", issue = \"27730\")]\n impl<T: UnwindSafe + ?Sized> UnwindSafe for Unique<T> {}\n-#[unstable(feature = \"shared\", issue = \"27730\")]\n-impl<T: RefUnwindSafe + ?Sized> UnwindSafe for Shared<T> {}\n+#[unstable(feature = \"nonnull\", issue = \"27730\")]\n+impl<T: RefUnwindSafe + ?Sized> UnwindSafe for NonNull<T> {}\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n impl<T: ?Sized> UnwindSafe for Mutex<T> {}\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]"}]}