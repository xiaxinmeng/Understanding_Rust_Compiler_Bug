{"sha": "f9c982c8fd4984e1b3751f883291ba52256edc1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5Yzk4MmM4ZmQ0OTg0ZTFiMzc1MWY4ODMyOTFiYTUyMjU2ZWRjMWM=", "commit": {"author": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-07-01T16:56:50Z"}, "committer": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-07-28T12:33:36Z"}, "message": "Add back TrustedRandomAccess-specialization for Vec, but only without coercions", "tree": {"sha": "534dc4ca66330283f0803c58c30bcd0aaa54eb8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/534dc4ca66330283f0803c58c30bcd0aaa54eb8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9c982c8fd4984e1b3751f883291ba52256edc1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9c982c8fd4984e1b3751f883291ba52256edc1c", "html_url": "https://github.com/rust-lang/rust/commit/f9c982c8fd4984e1b3751f883291ba52256edc1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9c982c8fd4984e1b3751f883291ba52256edc1c/comments", "author": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbc6b2691ef07401690382103b67509b3189f939", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbc6b2691ef07401690382103b67509b3189f939", "html_url": "https://github.com/rust-lang/rust/commit/bbc6b2691ef07401690382103b67509b3189f939"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "89a8330b23412aec11883144524589f3e5decc75", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f9c982c8fd4984e1b3751f883291ba52256edc1c/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9c982c8fd4984e1b3751f883291ba52256edc1c/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=f9c982c8fd4984e1b3751f883291ba52256edc1c", "patch": "@@ -2,7 +2,7 @@ use crate::alloc::{Allocator, Global};\n use crate::raw_vec::RawVec;\n use core::fmt;\n use core::intrinsics::arith_offset;\n-use core::iter::{FusedIterator, InPlaceIterable, SourceIter, TrustedLen};\n+use core::iter::{FusedIterator, InPlaceIterable, SourceIter, TrustedLen, TrustedRandomAccessNoCoerce};\n use core::marker::PhantomData;\n use core::mem::{self};\n use core::ptr::{self, NonNull};\n@@ -162,6 +162,24 @@ impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n     fn count(self) -> usize {\n         self.len()\n     }\n+\n+    #[doc(hidden)]\n+    unsafe fn __iterator_get_unchecked(&mut self, i: usize) -> Self::Item\n+    where\n+        Self: TrustedRandomAccessNoCoerce,\n+    {\n+        // SAFETY: the caller must guarantee that `i` is in bounds of the\n+        // `Vec<T>`, so `i` cannot overflow an `isize`, and the `self.ptr.add(i)`\n+        // is guaranteed to pointer to an element of the `Vec<T>` and\n+        // thus guaranteed to be valid to dereference.\n+        //\n+        // Also note the implementation of `Self: TrustedRandomAccess` requires\n+        // that `T: Copy` so reading elements from the buffer doesn't invalidate\n+        // them for `Drop`.\n+        unsafe {\n+            if mem::size_of::<T>() == 0 { mem::zeroed() } else { ptr::read(self.ptr.add(i)) }\n+        }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -197,6 +215,20 @@ impl<T, A: Allocator> FusedIterator for IntoIter<T, A> {}\n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n unsafe impl<T, A: Allocator> TrustedLen for IntoIter<T, A> {}\n \n+#[doc(hidden)]\n+#[unstable(issue = \"none\", feature = \"std_internals\")]\n+// T: Copy as approximation for !Drop since get_unchecked does not advance self.ptr\n+// and thus we can't implement drop-handling\n+//\n+// TrustedRandomAccess (without NoCoerce) must not be implemented because\n+// subtypes/supertypes of `T` might not be `Copy`\n+unsafe impl<T, A: Allocator> TrustedRandomAccessNoCoerce for IntoIter<T, A>\n+where\n+    T: Copy,\n+{\n+    const MAY_HAVE_SIDE_EFFECT: bool = false;\n+}\n+\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"vec_into_iter_clone\", since = \"1.8.0\")]\n impl<T: Clone, A: Allocator + Clone> Clone for IntoIter<T, A> {"}]}