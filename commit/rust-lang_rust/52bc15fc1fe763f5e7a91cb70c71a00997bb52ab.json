{"sha": "52bc15fc1fe763f5e7a91cb70c71a00997bb52ab", "node_id": "C_kwDOAAsO6NoAKDUyYmMxNWZjMWZlNzYzZjVlN2E5MWNiNzBjNzFhMDA5OTdiYjUyYWI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-11-18T22:32:26Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-11-18T22:32:26Z"}, "message": "fix: Fix proc-macro-srv search paths for Arch Linux", "tree": {"sha": "f428e83fdc7506771f110ba3af86a2aa2bb77903", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f428e83fdc7506771f110ba3af86a2aa2bb77903"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52bc15fc1fe763f5e7a91cb70c71a00997bb52ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52bc15fc1fe763f5e7a91cb70c71a00997bb52ab", "html_url": "https://github.com/rust-lang/rust/commit/52bc15fc1fe763f5e7a91cb70c71a00997bb52ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52bc15fc1fe763f5e7a91cb70c71a00997bb52ab/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e162d5800a54320b3cdf88b15ec2eb6a89291585", "url": "https://api.github.com/repos/rust-lang/rust/commits/e162d5800a54320b3cdf88b15ec2eb6a89291585", "html_url": "https://github.com/rust-lang/rust/commit/e162d5800a54320b3cdf88b15ec2eb6a89291585"}], "stats": {"total": 73, "additions": 25, "deletions": 48}, "files": [{"sha": "3d199ed24afe79342c97ef43951cb7bc709c7486", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/52bc15fc1fe763f5e7a91cb70c71a00997bb52ab/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52bc15fc1fe763f5e7a91cb70c71a00997bb52ab/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=52bc15fc1fe763f5e7a91cb70c71a00997bb52ab", "patch": "@@ -377,6 +377,21 @@ impl ProjectWorkspace {\n         }\n     }\n \n+    pub fn find_sysroot_proc_macro_srv(&self) -> Option<AbsPathBuf> {\n+        match self {\n+            ProjectWorkspace::Cargo { sysroot: Some(sysroot), .. }\n+            | ProjectWorkspace::Json { sysroot: Some(sysroot), .. } => {\n+                let standalone_server_name =\n+                    format!(\"rust-analyzer-proc-macro-srv{}\", std::env::consts::EXE_SUFFIX);\n+                [\"libexec\", \"lib\"]\n+                    .into_iter()\n+                    .map(|segment| sysroot.root().join(segment).join(&standalone_server_name))\n+                    .find(|server_path| std::fs::metadata(&server_path).is_ok())\n+            }\n+            _ => None,\n+        }\n+    }\n+\n     /// Returns the roots for the current `ProjectWorkspace`\n     /// The return type contains the path and whether or not\n     /// the root is a member of the current workspace"}, {"sha": "762d7d3a18e8b51ef7c03ce80a73ff9d289db4f9", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/52bc15fc1fe763f5e7a91cb70c71a00997bb52ab/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52bc15fc1fe763f5e7a91cb70c71a00997bb52ab/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=52bc15fc1fe763f5e7a91cb70c71a00997bb52ab", "patch": "@@ -60,24 +60,12 @@ pub fn load_workspace(\n     };\n \n     let proc_macro_client = if load_config.with_proc_macro {\n-        let mut path = AbsPathBuf::assert(std::env::current_exe()?);\n-        let mut args = vec![\"proc-macro\"];\n-\n-        if let ProjectWorkspace::Cargo { sysroot, .. } | ProjectWorkspace::Json { sysroot, .. } =\n-            &ws\n-        {\n-            if let Some(sysroot) = sysroot.as_ref() {\n-                let standalone_server_name =\n-                    format!(\"rust-analyzer-proc-macro-srv{}\", std::env::consts::EXE_SUFFIX);\n-                let server_path = sysroot.root().join(\"libexec\").join(&standalone_server_name);\n-                if std::fs::metadata(&server_path).is_ok() {\n-                    path = server_path;\n-                    args = vec![];\n-                }\n-            }\n-        }\n+        let (server_path, args): (_, &[_]) = match ws.find_sysroot_proc_macro_srv() {\n+            Some(server_path) => (server_path, &[]),\n+            None => (AbsPathBuf::assert(std::env::current_exe()?), &[\"proc-macro\"]),\n+        };\n \n-        ProcMacroServer::spawn(path.clone(), args.clone()).map_err(|e| e.to_string())\n+        ProcMacroServer::spawn(server_path, args).map_err(|e| e.to_string())\n     } else {\n         Err(\"proc macro server disabled\".to_owned())\n     };"}, {"sha": "fcfe4be0b8cec9aa5578286e8e34e483e6341bb8", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 5, "deletions": 31, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/52bc15fc1fe763f5e7a91cb70c71a00997bb52ab/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52bc15fc1fe763f5e7a91cb70c71a00997bb52ab/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=52bc15fc1fe763f5e7a91cb70c71a00997bb52ab", "patch": "@@ -305,50 +305,24 @@ impl GlobalState {\n         let files_config = self.config.files();\n         let project_folders = ProjectFolders::new(&self.workspaces, &files_config.exclude);\n \n-        let standalone_server_name =\n-            format!(\"rust-analyzer-proc-macro-srv{}\", std::env::consts::EXE_SUFFIX);\n-\n         if self.proc_macro_clients.is_empty() {\n             if let Some((path, path_manually_set)) = self.config.proc_macro_srv() {\n                 tracing::info!(\"Spawning proc-macro servers\");\n                 self.proc_macro_clients = self\n                     .workspaces\n                     .iter()\n                     .map(|ws| {\n-                        let (path, args) = if path_manually_set {\n+                        let (path, args): (_, &[_]) = if path_manually_set {\n                             tracing::debug!(\n                                 \"Pro-macro server path explicitly set: {}\",\n                                 path.display()\n                             );\n-                            (path.clone(), vec![])\n+                            (path.clone(), &[])\n                         } else {\n-                            let mut sysroot_server = None;\n-                            if let ProjectWorkspace::Cargo { sysroot, .. }\n-                            | ProjectWorkspace::Json { sysroot, .. } = ws\n-                            {\n-                                if let Some(sysroot) = sysroot.as_ref() {\n-                                    let server_path = sysroot\n-                                        .root()\n-                                        .join(\"libexec\")\n-                                        .join(&standalone_server_name);\n-                                    if std::fs::metadata(&server_path).is_ok() {\n-                                        tracing::debug!(\n-                                            \"Sysroot proc-macro server exists at {}\",\n-                                            server_path.display()\n-                                        );\n-                                        sysroot_server = Some(server_path);\n-                                    } else {\n-                                        tracing::debug!(\n-                                            \"Sysroot proc-macro server does not exist at {}\",\n-                                            server_path.display()\n-                                        );\n-                                    }\n-                                }\n+                            match ws.find_sysroot_proc_macro_srv() {\n+                                Some(server_path) => (server_path, &[]),\n+                                None => (path.clone(), &[\"proc-macro\"]),\n                             }\n-                            sysroot_server.map_or_else(\n-                                || (path.clone(), vec![\"proc-macro\".to_owned()]),\n-                                |path| (path, vec![]),\n-                            )\n                         };\n \n                         tracing::info!(?args, \"Using proc-macro server at {}\", path.display(),);"}]}