{"sha": "fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiMmQ3ZGZmODA2YWY5NmExMjdjZDUzMzhkZDhhM2E5NWNjN2NiZTg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-09-15T21:56:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-15T21:56:58Z"}, "message": "Rollup merge of #88775 - pnkfelix:revert-anon-union-parsing, r=davidtwco\n\nRevert anon union parsing\n\nRevert PR #84571 and #85515, which implemented anonymous union parsing in a manner that broke the context-sensitivity for the `union` keyword and thus broke stable Rust code.\n\nFix #88583.", "tree": {"sha": "c68ff33a0c18ba1b91b8a978b32791ab7cbffff7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c68ff33a0c18ba1b91b8a978b32791ab7cbffff7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhQmwqCRBK7hj4Ov3rIwAAU/UIADaZJS1CyTZvTIAi0qtQNR9q\nBCqYtN2JufmvUcQLqrE+1NWbDjh+sLJgLYDoW1OwO/A+kwEunQIfF6vkfbuf16gA\nLx6VRrzBjSN1xS9Z0qNR+91R49lASRHTsksh/ZuCRr9WggUShbcj7yRFKDYB37WC\nRfnPuW89VSQ0U1O9D4deWvXNNK5EtDnA+KxFJMmowts5+QMOoAL4KfGgS3souKGk\nDtnuUI5n3NYxxx+TCYgQJxf/9BVyKu20P/hGBrHGnDiUQCm0tCJtW4WYSP9kDeHt\nBLK+MsHT16CiHMtjX3QLHy9Qz5JnB4v67UZZXQ3JPj62cqy0DKWDjHCbyB+OxNo=\n=OG4J\n-----END PGP SIGNATURE-----\n", "payload": "tree c68ff33a0c18ba1b91b8a978b32791ab7cbffff7\nparent 4b568409ad86ac516ae7397ac31b1b47b0a2e1a7\nparent 35370a7ba3d52bfe2a6121a0eaccbc240ed9559d\nauthor Manish Goregaokar <manishsmail@gmail.com> 1631743018 -0700\ncommitter GitHub <noreply@github.com> 1631743018 -0700\n\nRollup merge of #88775 - pnkfelix:revert-anon-union-parsing, r=davidtwco\n\nRevert anon union parsing\n\nRevert PR #84571 and #85515, which implemented anonymous union parsing in a manner that broke the context-sensitivity for the `union` keyword and thus broke stable Rust code.\n\nFix #88583.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8", "html_url": "https://github.com/rust-lang/rust/commit/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b568409ad86ac516ae7397ac31b1b47b0a2e1a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b568409ad86ac516ae7397ac31b1b47b0a2e1a7", "html_url": "https://github.com/rust-lang/rust/commit/4b568409ad86ac516ae7397ac31b1b47b0a2e1a7"}, {"sha": "35370a7ba3d52bfe2a6121a0eaccbc240ed9559d", "url": "https://api.github.com/repos/rust-lang/rust/commits/35370a7ba3d52bfe2a6121a0eaccbc240ed9559d", "html_url": "https://github.com/rust-lang/rust/commit/35370a7ba3d52bfe2a6121a0eaccbc240ed9559d"}], "stats": {"total": 645, "additions": 50, "deletions": 595}, "files": [{"sha": "c27ab810a4c608f0e1cefc98c4881577b269f887", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8", "patch": "@@ -1902,10 +1902,6 @@ pub enum TyKind {\n     Never,\n     /// A tuple (`(A, B, C, D,...)`).\n     Tup(Vec<P<Ty>>),\n-    /// An anonymous struct type i.e. `struct { foo: Type }`\n-    AnonymousStruct(Vec<FieldDef>, bool),\n-    /// An anonymous union type i.e. `union { bar: Type }`\n-    AnonymousUnion(Vec<FieldDef>, bool),\n     /// A path (`module::module::...::Type`), optionally\n     /// \"qualified\", e.g., `<Vec<T> as SomeTrait>::SomeType`.\n     ///"}, {"sha": "ba86036577ac5c1f5efb12102a19b13d783159f5", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8", "patch": "@@ -484,9 +484,6 @@ pub fn noop_visit_ty<T: MutVisitor>(ty: &mut P<Ty>, vis: &mut T) {\n             visit_vec(bounds, |bound| vis.visit_param_bound(bound));\n         }\n         TyKind::MacCall(mac) => vis.visit_mac_call(mac),\n-        TyKind::AnonymousStruct(fields, ..) | TyKind::AnonymousUnion(fields, ..) => {\n-            fields.flat_map_in_place(|field| vis.flat_map_field_def(field));\n-        }\n     }\n     vis.visit_span(span);\n     visit_lazy_tts(tokens, vis);"}, {"sha": "b38031042e0f09ed1265acf60725eca661dc84f5", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8", "patch": "@@ -407,9 +407,6 @@ pub fn walk_ty<'a, V: Visitor<'a>>(visitor: &mut V, typ: &'a Ty) {\n         TyKind::Typeof(ref expression) => visitor.visit_anon_const(expression),\n         TyKind::Infer | TyKind::ImplicitSelf | TyKind::Err => {}\n         TyKind::MacCall(ref mac) => visitor.visit_mac_call(mac),\n-        TyKind::AnonymousStruct(ref fields, ..) | TyKind::AnonymousUnion(ref fields, ..) => {\n-            walk_list!(visitor, visit_field_def, fields)\n-        }\n         TyKind::Never | TyKind::CVarArgs => {}\n     }\n }"}, {"sha": "a77e3e1997fd67555b0eef0e892e00df8cc5d9e8", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8", "patch": "@@ -748,10 +748,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         }\n     }\n \n-    pub(super) fn lower_field_def(\n-        &mut self,\n-        (index, f): (usize, &FieldDef),\n-    ) -> hir::FieldDef<'hir> {\n+    fn lower_field_def(&mut self, (index, f): (usize, &FieldDef)) -> hir::FieldDef<'hir> {\n         let ty = if let TyKind::Path(ref qself, ref path) = f.ty.kind {\n             let t = self.lower_path_ty(\n                 &f.ty,"}, {"sha": "4cf54b07dbef88b67fafb5cebe53a1548a8942fb", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8", "patch": "@@ -1301,15 +1301,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let kind = match t.kind {\n             TyKind::Infer => hir::TyKind::Infer,\n             TyKind::Err => hir::TyKind::Err,\n-            // FIXME(unnamed_fields): IMPLEMENTATION IN PROGRESS\n-            TyKind::AnonymousStruct(ref _fields, _recovered) => {\n-                self.sess.struct_span_err(t.span, \"anonymous structs are unimplemented\").emit();\n-                hir::TyKind::Err\n-            }\n-            TyKind::AnonymousUnion(ref _fields, _recovered) => {\n-                self.sess.struct_span_err(t.span, \"anonymous unions are unimplemented\").emit();\n-                hir::TyKind::Err\n-            }\n             TyKind::Slice(ref ty) => hir::TyKind::Slice(self.lower_ty(ty, itctx)),\n             TyKind::Ptr(ref mt) => hir::TyKind::Ptr(self.lower_mt(mt, itctx)),\n             TyKind::Rptr(ref region, ref mt) => {"}, {"sha": "24108f779c818529b674b0f1e42f91d032d99909", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8", "patch": "@@ -193,19 +193,13 @@ impl<'a> AstValidator<'a> {\n                     }\n                 }\n             }\n-            TyKind::AnonymousStruct(ref fields, ..) | TyKind::AnonymousUnion(ref fields, ..) => {\n-                self.with_banned_assoc_ty_bound(|this| {\n-                    walk_list!(this, visit_struct_field_def, fields)\n-                });\n-            }\n             _ => visit::walk_ty(self, t),\n         }\n     }\n \n     fn visit_struct_field_def(&mut self, field: &'a FieldDef) {\n         if let Some(ident) = field.ident {\n             if ident.name == kw::Underscore {\n-                self.check_anonymous_field(field);\n                 self.visit_vis(&field.vis);\n                 self.visit_ident(ident);\n                 self.visit_ty_common(&field.ty);\n@@ -251,66 +245,6 @@ impl<'a> AstValidator<'a> {\n         err.emit();\n     }\n \n-    fn check_anonymous_field(&self, field: &FieldDef) {\n-        let FieldDef { ty, .. } = field;\n-        match &ty.kind {\n-            TyKind::AnonymousStruct(..) | TyKind::AnonymousUnion(..) => {\n-                // We already checked for `kw::Underscore` before calling this function,\n-                // so skip the check\n-            }\n-            TyKind::Path(..) => {\n-                // If the anonymous field contains a Path as type, we can't determine\n-                // if the path is a valid struct or union, so skip the check\n-            }\n-            _ => {\n-                let msg = \"unnamed fields can only have struct or union types\";\n-                let label = \"not a struct or union\";\n-                self.err_handler()\n-                    .struct_span_err(field.span, msg)\n-                    .span_label(ty.span, label)\n-                    .emit();\n-            }\n-        }\n-    }\n-\n-    fn deny_anonymous_struct(&self, ty: &Ty) {\n-        match &ty.kind {\n-            TyKind::AnonymousStruct(..) => {\n-                self.err_handler()\n-                    .struct_span_err(\n-                        ty.span,\n-                        \"anonymous structs are not allowed outside of unnamed struct or union fields\",\n-                    )\n-                    .span_label(ty.span, \"anonymous struct declared here\")\n-                    .emit();\n-            }\n-            TyKind::AnonymousUnion(..) => {\n-                self.err_handler()\n-                    .struct_span_err(\n-                        ty.span,\n-                        \"anonymous unions are not allowed outside of unnamed struct or union fields\",\n-                    )\n-                    .span_label(ty.span, \"anonymous union declared here\")\n-                    .emit();\n-            }\n-            _ => {}\n-        }\n-    }\n-\n-    fn deny_anonymous_field(&self, field: &FieldDef) {\n-        if let Some(ident) = field.ident {\n-            if ident.name == kw::Underscore {\n-                self.err_handler()\n-                    .struct_span_err(\n-                        field.span,\n-                        \"anonymous fields are not allowed outside of structs or unions\",\n-                    )\n-                    .span_label(ident.span, \"anonymous field declared here\")\n-                    .emit()\n-            }\n-        }\n-    }\n-\n     fn check_decl_no_pat(decl: &FnDecl, mut report_err: impl FnMut(Span, Option<Ident>, bool)) {\n         for Param { pat, .. } in &decl.inputs {\n             match pat.kind {\n@@ -1081,7 +1015,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n     fn visit_ty(&mut self, ty: &'a Ty) {\n         self.visit_ty_common(ty);\n-        self.deny_anonymous_struct(ty);\n         self.walk_ty(ty)\n     }\n \n@@ -1096,7 +1029,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n \n     fn visit_field_def(&mut self, s: &'a FieldDef) {\n-        self.deny_anonymous_field(s);\n         visit::walk_field_def(self, s)\n     }\n "}, {"sha": "30bc4edd7e69c0aa0fbd2d966c5a8f88598d39cc", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8", "patch": "@@ -668,7 +668,6 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n         // involved, so we only emit errors where there are no other parsing errors.\n         gate_all!(destructuring_assignment, \"destructuring assignments are unstable\");\n     }\n-    gate_all!(unnamed_fields, \"unnamed fields are not yet fully implemented\");\n \n     // All uses of `gate_all!` below this point were added in #65742,\n     // and subsequently disabled (with the non-early gating readded)."}, {"sha": "c24882086e12d16d1b808e6f4270adebd4820658", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8", "patch": "@@ -985,14 +985,6 @@ impl<'a> State<'a> {\n                 }\n                 self.pclose();\n             }\n-            ast::TyKind::AnonymousStruct(ref fields, ..) => {\n-                self.head(\"struct\");\n-                self.print_record_struct_body(&fields, ty.span);\n-            }\n-            ast::TyKind::AnonymousUnion(ref fields, ..) => {\n-                self.head(\"union\");\n-                self.print_record_struct_body(&fields, ty.span);\n-            }\n             ast::TyKind::Paren(ref typ) => {\n                 self.popen();\n                 self.print_type(typ);\n@@ -1413,7 +1405,12 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    crate fn print_record_struct_body(&mut self, fields: &[ast::FieldDef], span: rustc_span::Span) {\n+    crate fn print_record_struct_body(\n+        &mut self,\n+        fields: &Vec<ast::FieldDef>,\n+        span: rustc_span::Span,\n+    ) {\n+        self.nbsp();\n         self.bopen();\n         self.hardbreak_if_not_bol();\n \n@@ -1462,7 +1459,6 @@ impl<'a> State<'a> {\n             }\n             ast::VariantData::Struct(ref fields, ..) => {\n                 self.print_where_clause(&generics.where_clause);\n-                self.nbsp();\n                 self.print_record_struct_body(fields, span);\n             }\n         }"}, {"sha": "efa93c186363a1570e100b657ecf8a8afbe3490e", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8", "patch": "@@ -638,9 +638,6 @@ declare_features! (\n     /// Allows specifying the as-needed link modifier\n     (active, native_link_modifiers_as_needed, \"1.53.0\", Some(81490), None),\n \n-    /// Allows unnamed fields of struct and union type\n-    (incomplete, unnamed_fields, \"1.53.0\", Some(49804), None),\n-\n     /// Allows qualified paths in struct expressions, struct patterns and tuple struct patterns.\n     (active, more_qualified_paths, \"1.54.0\", Some(86935), None),\n "}, {"sha": "0e2222bf84093913d3bfc926621130452c7ac6fd", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8", "patch": "@@ -1247,7 +1247,7 @@ impl<'a> Parser<'a> {\n         Ok((class_name, ItemKind::Union(vdata, generics)))\n     }\n \n-    pub(super) fn parse_record_struct_body(\n+    fn parse_record_struct_body(\n         &mut self,\n         adt_ty: &str,\n     ) -> PResult<'a, (Vec<FieldDef>, /* recovered */ bool)> {\n@@ -1481,28 +1481,22 @@ impl<'a> Parser<'a> {\n     fn parse_field_ident(&mut self, adt_ty: &str, lo: Span) -> PResult<'a, Ident> {\n         let (ident, is_raw) = self.ident_or_err()?;\n         if !is_raw && ident.is_reserved() {\n-            if ident.name == kw::Underscore {\n-                self.sess.gated_spans.gate(sym::unnamed_fields, lo);\n+            let err = if self.check_fn_front_matter(false) {\n+                // We use `parse_fn` to get a span for the function\n+                if let Err(mut db) = self.parse_fn(&mut Vec::new(), |_| true, lo) {\n+                    db.delay_as_bug();\n+                }\n+                let mut err = self.struct_span_err(\n+                    lo.to(self.prev_token.span),\n+                    &format!(\"functions are not allowed in {} definitions\", adt_ty),\n+                );\n+                err.help(\"unlike in C++, Java, and C#, functions are declared in `impl` blocks\");\n+                err.help(\"see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\");\n+                err\n             } else {\n-                let err = if self.check_fn_front_matter(false) {\n-                    // We use `parse_fn` to get a span for the function\n-                    if let Err(mut db) = self.parse_fn(&mut Vec::new(), |_| true, lo) {\n-                        db.delay_as_bug();\n-                    }\n-                    let mut err = self.struct_span_err(\n-                        lo.to(self.prev_token.span),\n-                        &format!(\"functions are not allowed in {} definitions\", adt_ty),\n-                    );\n-                    err.help(\n-                        \"unlike in C++, Java, and C#, functions are declared in `impl` blocks\",\n-                    );\n-                    err.help(\"see https://doc.rust-lang.org/book/ch05-03-method-syntax.html for more information\");\n-                    err\n-                } else {\n-                    self.expected_ident_found()\n-                };\n-                return Err(err);\n-            }\n+                self.expected_ident_found()\n+            };\n+            return Err(err);\n         }\n         self.bump();\n         Ok(ident)"}, {"sha": "98400372c36a6576e9c90b8350f2d430d52a6a20", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8", "patch": "@@ -226,19 +226,6 @@ impl<'a> Parser<'a> {\n             }\n         } else if self.eat_keyword(kw::Impl) {\n             self.parse_impl_ty(&mut impl_dyn_multi)?\n-        } else if self.token.is_keyword(kw::Union)\n-            && self.look_ahead(1, |t| t == &token::OpenDelim(token::Brace))\n-        {\n-            self.bump();\n-            let (fields, recovered) = self.parse_record_struct_body(\"union\")?;\n-            let span = lo.to(self.prev_token.span);\n-            self.sess.gated_spans.gate(sym::unnamed_fields, span);\n-            TyKind::AnonymousUnion(fields, recovered)\n-        } else if self.eat_keyword(kw::Struct) {\n-            let (fields, recovered) = self.parse_record_struct_body(\"struct\")?;\n-            let span = lo.to(self.prev_token.span);\n-            self.sess.gated_spans.gate(sym::unnamed_fields, span);\n-            TyKind::AnonymousStruct(fields, recovered)\n         } else if self.is_explicit_dyn_type() {\n             self.parse_dyn_ty(&mut impl_dyn_multi)?\n         } else if self.eat_lt() {"}, {"sha": "4b416f29f26f7ce8d1fe8c20a0ea88557790be2c", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8", "patch": "@@ -1359,7 +1359,6 @@ symbols! {\n         unix,\n         unlikely,\n         unmarked_api,\n-        unnamed_fields,\n         unpin,\n         unreachable,\n         unreachable_code,"}, {"sha": "5ff452e8e43c43a831b69be283dee79fca552681", "filename": "src/test/pretty/anonymous-types.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4b568409ad86ac516ae7397ac31b1b47b0a2e1a7/src%2Ftest%2Fpretty%2Fanonymous-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b568409ad86ac516ae7397ac31b1b47b0a2e1a7/src%2Ftest%2Fpretty%2Fanonymous-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fanonymous-types.rs?ref=4b568409ad86ac516ae7397ac31b1b47b0a2e1a7", "patch": "@@ -1,24 +0,0 @@\n-// Test for issue 85480\n-// Pretty print anonymous struct and union types\n-\n-// pp-exact\n-// pretty-compare-only\n-\n-struct Foo {\n-    _: union {\n-           _: struct {\n-                  a: u8,\n-                  b: u16,\n-              },\n-           c: u32,\n-       },\n-    d: u64,\n-    e: f32,\n-}\n-\n-type A =\n- struct {\n-     field: u8,\n- };\n-\n-fn main() { }"}, {"sha": "bd815dbcc92424274e1cff1f4a7438247549a909", "filename": "src/test/ui/feature-gates/feature-gate-unnamed_fields.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4b568409ad86ac516ae7397ac31b1b47b0a2e1a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unnamed_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b568409ad86ac516ae7397ac31b1b47b0a2e1a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unnamed_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unnamed_fields.rs?ref=4b568409ad86ac516ae7397ac31b1b47b0a2e1a7", "patch": "@@ -1,27 +0,0 @@\n-struct Foo {\n-    foo: u8,\n-    _: union { //~ ERROR unnamed fields are not yet fully implemented [E0658]\n-    //~^ ERROR unnamed fields are not yet fully implemented [E0658]\n-    //~| ERROR anonymous unions are unimplemented\n-        bar: u8,\n-        baz: u16\n-    }\n-}\n-\n-union Bar {\n-    foobar: u8,\n-    _: struct { //~ ERROR unnamed fields are not yet fully implemented [E0658]\n-    //~^ ERROR unnamed fields are not yet fully implemented [E0658]\n-    //~| ERROR anonymous structs are unimplemented\n-    //~| ERROR unions may not contain fields that need dropping [E0740]\n-        foobaz: u8,\n-        barbaz: u16\n-    }\n-}\n-\n-struct S;\n-struct Baz {\n-    _: S //~ ERROR unnamed fields are not yet fully implemented [E0658]\n-}\n-\n-fn main(){}"}, {"sha": "4f3ab85c987926247d167c1540fd64f883803586", "filename": "src/test/ui/feature-gates/feature-gate-unnamed_fields.stderr", "status": "removed", "additions": 0, "deletions": 111, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/4b568409ad86ac516ae7397ac31b1b47b0a2e1a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unnamed_fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b568409ad86ac516ae7397ac31b1b47b0a2e1a7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unnamed_fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unnamed_fields.stderr?ref=4b568409ad86ac516ae7397ac31b1b47b0a2e1a7", "patch": "@@ -1,111 +0,0 @@\n-error[E0658]: unnamed fields are not yet fully implemented\n-  --> $DIR/feature-gate-unnamed_fields.rs:3:5\n-   |\n-LL |     _: union {\n-   |     ^\n-   |\n-   = note: see issue #49804 <https://github.com/rust-lang/rust/issues/49804> for more information\n-   = help: add `#![feature(unnamed_fields)]` to the crate attributes to enable\n-\n-error[E0658]: unnamed fields are not yet fully implemented\n-  --> $DIR/feature-gate-unnamed_fields.rs:3:8\n-   |\n-LL |       _: union {\n-   |  ________^\n-LL | |\n-LL | |\n-LL | |         bar: u8,\n-LL | |         baz: u16\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: see issue #49804 <https://github.com/rust-lang/rust/issues/49804> for more information\n-   = help: add `#![feature(unnamed_fields)]` to the crate attributes to enable\n-\n-error[E0658]: unnamed fields are not yet fully implemented\n-  --> $DIR/feature-gate-unnamed_fields.rs:13:5\n-   |\n-LL |     _: struct {\n-   |     ^\n-   |\n-   = note: see issue #49804 <https://github.com/rust-lang/rust/issues/49804> for more information\n-   = help: add `#![feature(unnamed_fields)]` to the crate attributes to enable\n-\n-error[E0658]: unnamed fields are not yet fully implemented\n-  --> $DIR/feature-gate-unnamed_fields.rs:13:8\n-   |\n-LL |       _: struct {\n-   |  ________^\n-LL | |\n-LL | |\n-LL | |\n-LL | |         foobaz: u8,\n-LL | |         barbaz: u16\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: see issue #49804 <https://github.com/rust-lang/rust/issues/49804> for more information\n-   = help: add `#![feature(unnamed_fields)]` to the crate attributes to enable\n-\n-error[E0658]: unnamed fields are not yet fully implemented\n-  --> $DIR/feature-gate-unnamed_fields.rs:24:5\n-   |\n-LL |     _: S\n-   |     ^\n-   |\n-   = note: see issue #49804 <https://github.com/rust-lang/rust/issues/49804> for more information\n-   = help: add `#![feature(unnamed_fields)]` to the crate attributes to enable\n-\n-error: anonymous unions are unimplemented\n-  --> $DIR/feature-gate-unnamed_fields.rs:3:8\n-   |\n-LL |       _: union {\n-   |  ________^\n-LL | |\n-LL | |\n-LL | |         bar: u8,\n-LL | |         baz: u16\n-LL | |     }\n-   | |_____^\n-\n-error: anonymous structs are unimplemented\n-  --> $DIR/feature-gate-unnamed_fields.rs:13:8\n-   |\n-LL |       _: struct {\n-   |  ________^\n-LL | |\n-LL | |\n-LL | |\n-LL | |         foobaz: u8,\n-LL | |         barbaz: u16\n-LL | |     }\n-   | |_____^\n-\n-error[E0740]: unions may not contain fields that need dropping\n-  --> $DIR/feature-gate-unnamed_fields.rs:13:5\n-   |\n-LL | /     _: struct {\n-LL | |\n-LL | |\n-LL | |\n-LL | |         foobaz: u8,\n-LL | |         barbaz: u16\n-LL | |     }\n-   | |_____^\n-   |\n-note: `std::mem::ManuallyDrop` can be used to wrap the type\n-  --> $DIR/feature-gate-unnamed_fields.rs:13:5\n-   |\n-LL | /     _: struct {\n-LL | |\n-LL | |\n-LL | |\n-LL | |         foobaz: u8,\n-LL | |         barbaz: u16\n-LL | |     }\n-   | |_____^\n-\n-error: aborting due to 8 previous errors\n-\n-Some errors have detailed explanations: E0658, E0740.\n-For more information about an error, try `rustc --explain E0658`."}, {"sha": "b3d66d46b1d4b9342b5e2c05ce4c19875adec92e", "filename": "src/test/ui/parser/issue-88583-union-as-ident.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/src%2Ftest%2Fui%2Fparser%2Fissue-88583-union-as-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/src%2Ftest%2Fui%2Fparser%2Fissue-88583-union-as-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-88583-union-as-ident.rs?ref=fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+\n+#![allow(non_camel_case_types)]\n+\n+struct union;\n+\n+impl union {\n+    pub fn new() -> Self {\n+        union { }\n+    }\n+}\n+\n+fn main() {\n+    let _u = union::new();\n+}"}, {"sha": "99637d1105301e6e34ce6097da15157d2d1ad88a", "filename": "src/test/ui/unnamed_fields/restrict_anonymous.rs", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4b568409ad86ac516ae7397ac31b1b47b0a2e1a7/src%2Ftest%2Fui%2Funnamed_fields%2Frestrict_anonymous.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b568409ad86ac516ae7397ac31b1b47b0a2e1a7/src%2Ftest%2Fui%2Funnamed_fields%2Frestrict_anonymous.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funnamed_fields%2Frestrict_anonymous.rs?ref=4b568409ad86ac516ae7397ac31b1b47b0a2e1a7", "patch": "@@ -1,52 +0,0 @@\n-#![allow(incomplete_features)]\n-#![feature(unnamed_fields)]\n-\n-fn f() -> struct { field: u8 } {} //~ ERROR anonymous structs are not allowed outside of unnamed struct or union fields\n-//~^ ERROR anonymous structs are unimplemented\n-\n-fn f2(a: struct { field: u8 } ) {} //~ ERROR anonymous structs are not allowed outside of unnamed struct or union fields\n-//~^ ERROR anonymous structs are unimplemented\n-\n-union G {\n-    field: struct { field: u8 } //~ ERROR anonymous structs are not allowed outside of unnamed struct or union fields\n-    //~^ ERROR anonymous structs are unimplemented\n-}\n-//~| ERROR unions may not contain fields that need dropping [E0740]\n-\n-struct H { _: u8 } // Should error after hir checks\n-\n-struct I(struct { field: u8 }, u8); //~ ERROR anonymous structs are not allowed outside of unnamed struct or union fields\n-//~^ ERROR anonymous structs are unimplemented\n-\n-enum J {\n-    K(struct { field: u8 }), //~ ERROR anonymous structs are not allowed outside of unnamed struct or union fields\n-    //~^ ERROR anonymous structs are unimplemented\n-    L {\n-        _ : struct { field: u8 } //~ ERROR anonymous structs are not allowed outside of unnamed struct or union fields\n-        //~^ ERROR anonymous fields are not allowed outside of structs or unions\n-        //~| ERROR anonymous structs are unimplemented\n-    },\n-    M {\n-        _ : u8 //~ ERROR anonymous fields are not allowed outside of structs or unions\n-    }\n-}\n-\n-static M: union { field: u8 } = 0; //~ ERROR anonymous unions are not allowed outside of unnamed struct or union fields\n-//~^ ERROR anonymous unions are unimplemented\n-\n-type N = union { field: u8 }; //~ ERROR anonymous unions are not allowed outside of unnamed struct or union fields\n-//~^ ERROR anonymous unions are unimplemented\n-\n-fn main() {\n-    const O: struct { field: u8 } = 0; //~ ERROR anonymous structs are not allowed outside of unnamed struct or union fields\n-    //~^ ERROR anonymous structs are unimplemented\n-\n-    let p: [struct { field: u8 }; 1]; //~ ERROR anonymous structs are not allowed outside of unnamed struct or union fields\n-    //~^ ERROR anonymous structs are unimplemented\n-\n-    let q: (struct { field: u8 }, u8); //~ ERROR anonymous structs are not allowed outside of unnamed struct or union fields\n-    //~^ ERROR anonymous structs are unimplemented\n-\n-    let cl = || -> struct { field: u8 } {}; //~ ERROR anonymous structs are not allowed outside of unnamed struct or union fields\n-    //~^ ERROR anonymous structs are unimplemented\n-}"}, {"sha": "efcf544fde4dcc5662b20e51b91cf84c19ffc0cd", "filename": "src/test/ui/unnamed_fields/restrict_anonymous.stderr", "status": "removed", "additions": 0, "deletions": 175, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/4b568409ad86ac516ae7397ac31b1b47b0a2e1a7/src%2Ftest%2Fui%2Funnamed_fields%2Frestrict_anonymous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b568409ad86ac516ae7397ac31b1b47b0a2e1a7/src%2Ftest%2Fui%2Funnamed_fields%2Frestrict_anonymous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funnamed_fields%2Frestrict_anonymous.stderr?ref=4b568409ad86ac516ae7397ac31b1b47b0a2e1a7", "patch": "@@ -1,175 +0,0 @@\n-error: anonymous structs are not allowed outside of unnamed struct or union fields\n-  --> $DIR/restrict_anonymous.rs:4:11\n-   |\n-LL | fn f() -> struct { field: u8 } {}\n-   |           ^^^^^^^^^^^^^^^^^^^^ anonymous struct declared here\n-\n-error: anonymous structs are not allowed outside of unnamed struct or union fields\n-  --> $DIR/restrict_anonymous.rs:7:10\n-   |\n-LL | fn f2(a: struct { field: u8 } ) {}\n-   |          ^^^^^^^^^^^^^^^^^^^^ anonymous struct declared here\n-\n-error: anonymous structs are not allowed outside of unnamed struct or union fields\n-  --> $DIR/restrict_anonymous.rs:11:12\n-   |\n-LL |     field: struct { field: u8 }\n-   |            ^^^^^^^^^^^^^^^^^^^^ anonymous struct declared here\n-\n-error: anonymous structs are not allowed outside of unnamed struct or union fields\n-  --> $DIR/restrict_anonymous.rs:18:10\n-   |\n-LL | struct I(struct { field: u8 }, u8);\n-   |          ^^^^^^^^^^^^^^^^^^^^ anonymous struct declared here\n-\n-error: anonymous structs are not allowed outside of unnamed struct or union fields\n-  --> $DIR/restrict_anonymous.rs:22:7\n-   |\n-LL |     K(struct { field: u8 }),\n-   |       ^^^^^^^^^^^^^^^^^^^^ anonymous struct declared here\n-\n-error: anonymous fields are not allowed outside of structs or unions\n-  --> $DIR/restrict_anonymous.rs:25:9\n-   |\n-LL |         _ : struct { field: u8 }\n-   |         -^^^^^^^^^^^^^^^^^^^^^^^\n-   |         |\n-   |         anonymous field declared here\n-\n-error: anonymous structs are not allowed outside of unnamed struct or union fields\n-  --> $DIR/restrict_anonymous.rs:25:13\n-   |\n-LL |         _ : struct { field: u8 }\n-   |             ^^^^^^^^^^^^^^^^^^^^ anonymous struct declared here\n-\n-error: anonymous fields are not allowed outside of structs or unions\n-  --> $DIR/restrict_anonymous.rs:30:9\n-   |\n-LL |         _ : u8\n-   |         -^^^^^\n-   |         |\n-   |         anonymous field declared here\n-\n-error: anonymous unions are not allowed outside of unnamed struct or union fields\n-  --> $DIR/restrict_anonymous.rs:34:11\n-   |\n-LL | static M: union { field: u8 } = 0;\n-   |           ^^^^^^^^^^^^^^^^^^^ anonymous union declared here\n-\n-error: anonymous unions are not allowed outside of unnamed struct or union fields\n-  --> $DIR/restrict_anonymous.rs:37:10\n-   |\n-LL | type N = union { field: u8 };\n-   |          ^^^^^^^^^^^^^^^^^^^ anonymous union declared here\n-\n-error: anonymous structs are not allowed outside of unnamed struct or union fields\n-  --> $DIR/restrict_anonymous.rs:41:14\n-   |\n-LL |     const O: struct { field: u8 } = 0;\n-   |              ^^^^^^^^^^^^^^^^^^^^ anonymous struct declared here\n-\n-error: anonymous structs are not allowed outside of unnamed struct or union fields\n-  --> $DIR/restrict_anonymous.rs:44:13\n-   |\n-LL |     let p: [struct { field: u8 }; 1];\n-   |             ^^^^^^^^^^^^^^^^^^^^ anonymous struct declared here\n-\n-error: anonymous structs are not allowed outside of unnamed struct or union fields\n-  --> $DIR/restrict_anonymous.rs:47:13\n-   |\n-LL |     let q: (struct { field: u8 }, u8);\n-   |             ^^^^^^^^^^^^^^^^^^^^ anonymous struct declared here\n-\n-error: anonymous structs are not allowed outside of unnamed struct or union fields\n-  --> $DIR/restrict_anonymous.rs:50:20\n-   |\n-LL |     let cl = || -> struct { field: u8 } {};\n-   |                    ^^^^^^^^^^^^^^^^^^^^ anonymous struct declared here\n-\n-error: anonymous structs are unimplemented\n-  --> $DIR/restrict_anonymous.rs:4:11\n-   |\n-LL | fn f() -> struct { field: u8 } {}\n-   |           ^^^^^^^^^^^^^^^^^^^^\n-\n-error: anonymous structs are unimplemented\n-  --> $DIR/restrict_anonymous.rs:7:10\n-   |\n-LL | fn f2(a: struct { field: u8 } ) {}\n-   |          ^^^^^^^^^^^^^^^^^^^^\n-\n-error: anonymous structs are unimplemented\n-  --> $DIR/restrict_anonymous.rs:11:12\n-   |\n-LL |     field: struct { field: u8 }\n-   |            ^^^^^^^^^^^^^^^^^^^^\n-\n-error: anonymous structs are unimplemented\n-  --> $DIR/restrict_anonymous.rs:18:10\n-   |\n-LL | struct I(struct { field: u8 }, u8);\n-   |          ^^^^^^^^^^^^^^^^^^^^\n-\n-error: anonymous structs are unimplemented\n-  --> $DIR/restrict_anonymous.rs:22:7\n-   |\n-LL |     K(struct { field: u8 }),\n-   |       ^^^^^^^^^^^^^^^^^^^^\n-\n-error: anonymous structs are unimplemented\n-  --> $DIR/restrict_anonymous.rs:25:13\n-   |\n-LL |         _ : struct { field: u8 }\n-   |             ^^^^^^^^^^^^^^^^^^^^\n-\n-error: anonymous unions are unimplemented\n-  --> $DIR/restrict_anonymous.rs:34:11\n-   |\n-LL | static M: union { field: u8 } = 0;\n-   |           ^^^^^^^^^^^^^^^^^^^\n-\n-error: anonymous unions are unimplemented\n-  --> $DIR/restrict_anonymous.rs:37:10\n-   |\n-LL | type N = union { field: u8 };\n-   |          ^^^^^^^^^^^^^^^^^^^\n-\n-error: anonymous structs are unimplemented\n-  --> $DIR/restrict_anonymous.rs:44:13\n-   |\n-LL |     let p: [struct { field: u8 }; 1];\n-   |             ^^^^^^^^^^^^^^^^^^^^\n-\n-error: anonymous structs are unimplemented\n-  --> $DIR/restrict_anonymous.rs:47:13\n-   |\n-LL |     let q: (struct { field: u8 }, u8);\n-   |             ^^^^^^^^^^^^^^^^^^^^\n-\n-error: anonymous structs are unimplemented\n-  --> $DIR/restrict_anonymous.rs:50:20\n-   |\n-LL |     let cl = || -> struct { field: u8 } {};\n-   |                    ^^^^^^^^^^^^^^^^^^^^\n-\n-error: anonymous structs are unimplemented\n-  --> $DIR/restrict_anonymous.rs:41:14\n-   |\n-LL |     const O: struct { field: u8 } = 0;\n-   |              ^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0740]: unions may not contain fields that need dropping\n-  --> $DIR/restrict_anonymous.rs:11:5\n-   |\n-LL |     field: struct { field: u8 }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: `std::mem::ManuallyDrop` can be used to wrap the type\n-  --> $DIR/restrict_anonymous.rs:11:5\n-   |\n-LL |     field: struct { field: u8 }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 27 previous errors\n-\n-For more information about this error, try `rustc --explain E0740`."}, {"sha": "14041539b9dfd618536dc240416b65a60f283d3d", "filename": "src/tools/rustfmt/src/items.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fitems.rs?ref=fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8", "patch": "@@ -6,7 +6,7 @@ use std::cmp::{max, min, Ordering};\n use regex::Regex;\n use rustc_ast::visit;\n use rustc_ast::{ast, ptr};\n-use rustc_span::{symbol, BytePos, Span};\n+use rustc_span::{symbol, BytePos, Span, DUMMY_SP};\n \n use crate::attr::filter_inline_attrs;\n use crate::comment::{\n@@ -31,7 +31,12 @@ use crate::stmt::Stmt;\n use crate::utils::*;\n use crate::vertical::rewrite_with_alignment;\n use crate::visitor::FmtVisitor;\n-use crate::DEFAULT_VISIBILITY;\n+\n+const DEFAULT_VISIBILITY: ast::Visibility = ast::Visibility {\n+    kind: ast::VisibilityKind::Inherited,\n+    span: DUMMY_SP,\n+    tokens: None,\n+};\n \n fn type_annotation_separator(config: &Config) -> &str {\n     colon_spaces(config)\n@@ -972,7 +977,7 @@ impl<'a> StructParts<'a> {\n         format_header(context, self.prefix, self.ident, self.vis, offset)\n     }\n \n-    pub(crate) fn from_variant(variant: &'a ast::Variant) -> Self {\n+    fn from_variant(variant: &'a ast::Variant) -> Self {\n         StructParts {\n             prefix: \"\",\n             ident: variant.ident,"}, {"sha": "47a7b9d4dbe3cb80baa2d08d979e9e94e2b56241", "filename": "src/tools/rustfmt/src/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/src%2Ftools%2Frustfmt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/src%2Ftools%2Frustfmt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Flib.rs?ref=fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8", "patch": "@@ -32,7 +32,7 @@ use std::path::PathBuf;\n use std::rc::Rc;\n \n use rustc_ast::ast;\n-use rustc_span::{symbol, DUMMY_SP};\n+use rustc_span::symbol;\n use thiserror::Error;\n \n use crate::comment::LineClasses;\n@@ -96,11 +96,6 @@ mod types;\n mod vertical;\n pub(crate) mod visitor;\n \n-const DEFAULT_VISIBILITY: ast::Visibility = ast::Visibility {\n-    kind: ast::VisibilityKind::Inherited,\n-    span: DUMMY_SP,\n-    tokens: None,\n-};\n /// The various errors that can occur during formatting. Note that not all of\n /// these can currently be propagated to clients.\n #[derive(Error, Debug)]"}, {"sha": "76bf58e875b1f6d48218fce5a909ac010ddd2b40", "filename": "src/tools/rustfmt/src/types.rs", "status": "modified", "additions": 3, "deletions": 56, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Ftypes.rs?ref=fb2d7dff806af96a127cd5338dd8a3a95cc7cbe8", "patch": "@@ -1,15 +1,15 @@\n use std::iter::ExactSizeIterator;\n use std::ops::Deref;\n \n-use rustc_ast::ast::{self, AttrVec, FnRetTy, Mutability};\n-use rustc_span::{symbol::kw, symbol::Ident, BytePos, Pos, Span};\n+use rustc_ast::ast::{self, FnRetTy, Mutability};\n+use rustc_span::{symbol::kw, BytePos, Pos, Span};\n \n+use crate::comment::{combine_strs_with_missing_comments, contains_comment};\n use crate::config::lists::*;\n use crate::config::{IndentStyle, TypeDensity, Version};\n use crate::expr::{\n     format_expr, rewrite_assign_rhs, rewrite_call, rewrite_tuple, rewrite_unary_prefix, ExprType,\n };\n-use crate::items::StructParts;\n use crate::lists::{\n     definitive_tactic, itemize_list, write_list, ListFormatting, ListItem, Separator,\n };\n@@ -24,11 +24,6 @@ use crate::utils::{\n     colon_spaces, extra_offset, first_line_width, format_extern, format_mutability,\n     last_line_extendable, last_line_width, mk_sp, rewrite_ident,\n };\n-use crate::DEFAULT_VISIBILITY;\n-use crate::{\n-    comment::{combine_strs_with_missing_comments, contains_comment},\n-    items::format_struct_struct,\n-};\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub(crate) enum PathContext {\n@@ -769,54 +764,6 @@ impl Rewrite for ast::Ty {\n             ast::TyKind::Tup(ref items) => {\n                 rewrite_tuple(context, items.iter(), self.span, shape, items.len() == 1)\n             }\n-            ast::TyKind::AnonymousStruct(ref fields, recovered) => {\n-                let ident = Ident::new(\n-                    kw::Struct,\n-                    mk_sp(self.span.lo(), self.span.lo() + BytePos(6)),\n-                );\n-                let data = ast::VariantData::Struct(fields.clone(), recovered);\n-                let variant = ast::Variant {\n-                    attrs: AttrVec::new(),\n-                    id: self.id,\n-                    span: self.span,\n-                    vis: DEFAULT_VISIBILITY,\n-                    ident,\n-                    data,\n-                    disr_expr: None,\n-                    is_placeholder: false,\n-                };\n-                format_struct_struct(\n-                    &context,\n-                    &StructParts::from_variant(&variant),\n-                    fields,\n-                    shape.indent,\n-                    None,\n-                )\n-            }\n-            ast::TyKind::AnonymousUnion(ref fields, recovered) => {\n-                let ident = Ident::new(\n-                    kw::Union,\n-                    mk_sp(self.span.lo(), self.span.lo() + BytePos(5)),\n-                );\n-                let data = ast::VariantData::Struct(fields.clone(), recovered);\n-                let variant = ast::Variant {\n-                    attrs: AttrVec::new(),\n-                    id: self.id,\n-                    span: self.span,\n-                    vis: DEFAULT_VISIBILITY,\n-                    ident,\n-                    data,\n-                    disr_expr: None,\n-                    is_placeholder: false,\n-                };\n-                format_struct_struct(\n-                    &context,\n-                    &StructParts::from_variant(&variant),\n-                    fields,\n-                    shape.indent,\n-                    None,\n-                )\n-            }\n             ast::TyKind::Path(ref q_self, ref path) => {\n                 rewrite_path(context, PathContext::Type, q_self.as_ref(), path, shape)\n             }"}]}