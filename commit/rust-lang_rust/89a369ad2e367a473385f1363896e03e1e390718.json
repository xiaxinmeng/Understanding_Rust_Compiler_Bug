{"sha": "89a369ad2e367a473385f1363896e03e1e390718", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5YTM2OWFkMmUzNjdhNDczMzg1ZjEzNjM4OTZlMDNlMWUzOTA3MTg=", "commit": {"author": {"name": "Hans Kratz", "email": "hans@appfour.com", "date": "2021-08-05T22:40:32Z"}, "committer": {"name": "Hans Kratz", "email": "hans@appfour.com", "date": "2021-08-05T22:40:32Z"}, "message": "Replace hard-coded field indexes with lookup on aarch64 non-macos.\n\nThe indexes into the VaListImpl struct used on aarch64 ABI (not macos/ios) are hard-coded which is brittle so we replace them with the usual lookup.\n\nThe varargs ffi is tested in ui/abi/variadic-ffi.rs on aarch64 Linux.", "tree": {"sha": "d032925540dcfbb0ff891007e28c213ef1dd184a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d032925540dcfbb0ff891007e28c213ef1dd184a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89a369ad2e367a473385f1363896e03e1e390718", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89a369ad2e367a473385f1363896e03e1e390718", "html_url": "https://github.com/rust-lang/rust/commit/89a369ad2e367a473385f1363896e03e1e390718", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89a369ad2e367a473385f1363896e03e1e390718/comments", "author": {"login": "hkratz", "id": 3736990, "node_id": "MDQ6VXNlcjM3MzY5OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3736990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkratz", "html_url": "https://github.com/hkratz", "followers_url": "https://api.github.com/users/hkratz/followers", "following_url": "https://api.github.com/users/hkratz/following{/other_user}", "gists_url": "https://api.github.com/users/hkratz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkratz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkratz/subscriptions", "organizations_url": "https://api.github.com/users/hkratz/orgs", "repos_url": "https://api.github.com/users/hkratz/repos", "events_url": "https://api.github.com/users/hkratz/events{/privacy}", "received_events_url": "https://api.github.com/users/hkratz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkratz", "id": 3736990, "node_id": "MDQ6VXNlcjM3MzY5OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/3736990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkratz", "html_url": "https://github.com/hkratz", "followers_url": "https://api.github.com/users/hkratz/followers", "following_url": "https://api.github.com/users/hkratz/following{/other_user}", "gists_url": "https://api.github.com/users/hkratz/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkratz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkratz/subscriptions", "organizations_url": "https://api.github.com/users/hkratz/orgs", "repos_url": "https://api.github.com/users/hkratz/repos", "events_url": "https://api.github.com/users/hkratz/events{/privacy}", "received_events_url": "https://api.github.com/users/hkratz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a4e9e3cf81e8c85880d8da521ab16f253c93392", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a4e9e3cf81e8c85880d8da521ab16f253c93392", "html_url": "https://github.com/rust-lang/rust/commit/4a4e9e3cf81e8c85880d8da521ab16f253c93392"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "2208ec37a423551539391ea47ba4ab10e883e2d2", "filename": "compiler/rustc_codegen_llvm/src/va_arg.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/89a369ad2e367a473385f1363896e03e1e390718/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a369ad2e367a473385f1363896e03e1e390718/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fva_arg.rs?ref=89a369ad2e367a473385f1363896e03e1e390718", "patch": "@@ -98,7 +98,8 @@ fn emit_aapcs_va_arg(\n     // Implementation of the AAPCS64 calling convention for va_args see\n     // https://github.com/ARM-software/abi-aa/blob/master/aapcs64/aapcs64.rst\n     let va_list_addr = list.immediate();\n-    let va_list_ty = list.deref(bx.cx).layout.llvm_type(bx);\n+    let va_list_layout = list.deref(bx.cx).layout;\n+    let va_list_ty = va_list_layout.llvm_type(bx);\n     let layout = bx.cx.layout_of(target_ty);\n \n     let mut maybe_reg = bx.build_sibling_block(\"va_arg.maybe_reg\");\n@@ -110,13 +111,15 @@ fn emit_aapcs_va_arg(\n \n     let gr_type = target_ty.is_any_ptr() || target_ty.is_integral();\n     let (reg_off, reg_top_index, slot_size) = if gr_type {\n-        let gr_offs = bx.struct_gep(va_list_ty, va_list_addr, 3);\n+        let gr_offs =\n+            bx.struct_gep(va_list_ty, va_list_addr, va_list_layout.llvm_field_index(bx.cx, 3));\n         let nreg = (layout.size.bytes() + 7) / 8;\n-        (gr_offs, 1, nreg * 8)\n+        (gr_offs, va_list_layout.llvm_field_index(bx.cx, 1), nreg * 8)\n     } else {\n-        let vr_off = bx.struct_gep(va_list_ty, va_list_addr, 4);\n+        let vr_off =\n+            bx.struct_gep(va_list_ty, va_list_addr, va_list_layout.llvm_field_index(bx.cx, 4));\n         let nreg = (layout.size.bytes() + 15) / 16;\n-        (vr_off, 2, nreg * 16)\n+        (vr_off, va_list_layout.llvm_field_index(bx.cx, 2), nreg * 16)\n     };\n \n     // if the offset >= 0 then the value will be on the stack"}]}