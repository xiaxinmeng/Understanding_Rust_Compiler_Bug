{"sha": "f347dab47c2c29640747d8200e00f6a5de3c7b7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNDdkYWI0N2MyYzI5NjQwNzQ3ZDgyMDBlMDBmNmE1ZGUzYzdiN2I=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-03T18:32:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-03T18:32:38Z"}, "message": "Rollup merge of #78659 - ayrtonm:fn-ref-lint-fix, r=oli-obk\n\nCorrected suggestion for generic parameters in `function_item_references` lint\n\nThis commit handles functions with generic type parameters like you pointed out as well as const generics. Also this is probably a minor thing, but the type alias you used in the example doesn't show up so the suggestion right now would be `size_of::<[u8; 16]> as fn() ->`. This is because the lint checker works with MIR instead of HIR. I don't think we can get the alias at that point, but let me know if I'm wrong and there's a way to fix this. Also I put you as the reviewer, but I'm not sure if you want to review it or if it makes more sense to ask one of the original reviewers of this lint.\ncloses #78571", "tree": {"sha": "4e2481cc42b1d3d03294c58b25578c697046b9b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e2481cc42b1d3d03294c58b25578c697046b9b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f347dab47c2c29640747d8200e00f6a5de3c7b7b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfoaJGCRBK7hj4Ov3rIwAAdHIIAHMNhKl4FDi+KTZCzlE8eUTn\nqL7x+GeQF+FU/nLKMtRD9+ARs+3mfaQBT0vQQ/+N5W6vqECB8L7MIQMwMpQ8Bdt+\nZVwDmhl+SrceZ0Z0cSTX2PBv9NcLUZk+taifUO0LTO1L7NnpTvFec3Jb71yGhTia\nhzIwUX43zSr/M08ChKOG8EmQJZ9S/AQt6E6R7Fndrtbg5UzMwEnTk+34IZMLLJlg\n6eWp8/FP4VcHxuAo+8KdS+neYnpZabw21vvs4LtelZQupaLNGILPK3p13ALgYVm3\nJuS7BdrdhoUWXxEpvL7XLWxDmUIEK8D2QkEuOg73Fi1+rImiqhWyorZwjBg2K9s=\n=JP1V\n-----END PGP SIGNATURE-----\n", "payload": "tree 4e2481cc42b1d3d03294c58b25578c697046b9b5\nparent f0112928cb13dbf8936c79d31badf3b684bdda10\nparent ace02c40f0d5970c46aaee74f7ee2fb27480c783\nauthor Mara Bos <m-ou.se@m-ou.se> 1604428358 +0100\ncommitter GitHub <noreply@github.com> 1604428358 +0100\n\nRollup merge of #78659 - ayrtonm:fn-ref-lint-fix, r=oli-obk\n\nCorrected suggestion for generic parameters in `function_item_references` lint\n\nThis commit handles functions with generic type parameters like you pointed out as well as const generics. Also this is probably a minor thing, but the type alias you used in the example doesn't show up so the suggestion right now would be `size_of::<[u8; 16]> as fn() ->`. This is because the lint checker works with MIR instead of HIR. I don't think we can get the alias at that point, but let me know if I'm wrong and there's a way to fix this. Also I put you as the reviewer, but I'm not sure if you want to review it or if it makes more sense to ask one of the original reviewers of this lint.\ncloses #78571\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f347dab47c2c29640747d8200e00f6a5de3c7b7b", "html_url": "https://github.com/rust-lang/rust/commit/f347dab47c2c29640747d8200e00f6a5de3c7b7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f347dab47c2c29640747d8200e00f6a5de3c7b7b/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0112928cb13dbf8936c79d31badf3b684bdda10", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0112928cb13dbf8936c79d31badf3b684bdda10", "html_url": "https://github.com/rust-lang/rust/commit/f0112928cb13dbf8936c79d31badf3b684bdda10"}, {"sha": "ace02c40f0d5970c46aaee74f7ee2fb27480c783", "url": "https://api.github.com/repos/rust-lang/rust/commits/ace02c40f0d5970c46aaee74f7ee2fb27480c783", "html_url": "https://github.com/rust-lang/rust/commit/ace02c40f0d5970c46aaee74f7ee2fb27480c783"}], "stats": {"total": 160, "additions": 111, "deletions": 49}, "files": [{"sha": "d592580af9cecf8c59f1a553279af679c67d8b4d", "filename": "compiler/rustc_mir/src/transform/function_item_references.rs", "status": "modified", "additions": 36, "deletions": 18, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f347dab47c2c29640747d8200e00f6a5de3c7b7b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f347dab47c2c29640747d8200e00f6a5de3c7b7b/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Ffunction_item_references.rs?ref=f347dab47c2c29640747d8200e00f6a5de3c7b7b", "patch": "@@ -51,10 +51,11 @@ impl<'a, 'tcx> Visitor<'tcx> for FunctionItemRefChecker<'a, 'tcx> {\n                         let arg_ty = args[0].ty(self.body, self.tcx);\n                         for generic_inner_ty in arg_ty.walk() {\n                             if let GenericArgKind::Type(inner_ty) = generic_inner_ty.unpack() {\n-                                if let Some(fn_id) = FunctionItemRefChecker::is_fn_ref(inner_ty) {\n-                                    let ident = self.tcx.item_name(fn_id).to_ident_string();\n+                                if let Some((fn_id, fn_substs)) =\n+                                    FunctionItemRefChecker::is_fn_ref(inner_ty)\n+                                {\n                                     let span = self.nth_arg_span(&args, 0);\n-                                    self.emit_lint(ident, fn_id, source_info, span);\n+                                    self.emit_lint(fn_id, fn_substs, source_info, span);\n                                 }\n                             }\n                         }\n@@ -66,6 +67,7 @@ impl<'a, 'tcx> Visitor<'tcx> for FunctionItemRefChecker<'a, 'tcx> {\n         }\n         self.super_terminator(terminator, location);\n     }\n+\n     /// Emits a lint for function references formatted with `fmt::Pointer::fmt` by macros. These\n     /// cases are handled as operands instead of call terminators to avoid any dependence on\n     /// unstable, internal formatting details like whether `fmt` is called directly or not.\n@@ -76,13 +78,12 @@ impl<'a, 'tcx> Visitor<'tcx> for FunctionItemRefChecker<'a, 'tcx> {\n             if let ty::FnDef(def_id, substs_ref) = *op_ty.kind() {\n                 if self.tcx.is_diagnostic_item(sym::pointer_trait_fmt, def_id) {\n                     let param_ty = substs_ref.type_at(0);\n-                    if let Some(fn_id) = FunctionItemRefChecker::is_fn_ref(param_ty) {\n+                    if let Some((fn_id, fn_substs)) = FunctionItemRefChecker::is_fn_ref(param_ty) {\n                         // The operand's ctxt wouldn't display the lint since it's inside a macro so\n                         // we have to use the callsite's ctxt.\n                         let callsite_ctxt = source_info.span.source_callsite().ctxt();\n                         let span = source_info.span.with_ctxt(callsite_ctxt);\n-                        let ident = self.tcx.item_name(fn_id).to_ident_string();\n-                        self.emit_lint(ident, fn_id, source_info, span);\n+                        self.emit_lint(fn_id, fn_substs, source_info, span);\n                     }\n                 }\n             }\n@@ -115,10 +116,11 @@ impl<'a, 'tcx> FunctionItemRefChecker<'a, 'tcx> {\n                             if TyS::same_type(inner_ty, bound_ty) {\n                                 // Do a substitution using the parameters from the callsite\n                                 let subst_ty = inner_ty.subst(self.tcx, substs_ref);\n-                                if let Some(fn_id) = FunctionItemRefChecker::is_fn_ref(subst_ty) {\n-                                    let ident = self.tcx.item_name(fn_id).to_ident_string();\n+                                if let Some((fn_id, fn_substs)) =\n+                                    FunctionItemRefChecker::is_fn_ref(subst_ty)\n+                                {\n                                     let span = self.nth_arg_span(args, arg_num);\n-                                    self.emit_lint(ident, fn_id, source_info, span);\n+                                    self.emit_lint(fn_id, fn_substs, source_info, span);\n                                 }\n                             }\n                         }\n@@ -127,6 +129,7 @@ impl<'a, 'tcx> FunctionItemRefChecker<'a, 'tcx> {\n             }\n         }\n     }\n+\n     /// If the given predicate is the trait `fmt::Pointer`, returns the bound parameter type.\n     fn is_pointer_trait(&self, bound: &PredicateAtom<'tcx>) -> Option<Ty<'tcx>> {\n         if let ty::PredicateAtom::Trait(predicate, _) = bound {\n@@ -139,22 +142,26 @@ impl<'a, 'tcx> FunctionItemRefChecker<'a, 'tcx> {\n             None\n         }\n     }\n+\n     /// If a type is a reference or raw pointer to the anonymous type of a function definition,\n-    /// returns that function's `DefId`.\n-    fn is_fn_ref(ty: Ty<'tcx>) -> Option<DefId> {\n+    /// returns that function's `DefId` and `SubstsRef`.\n+    fn is_fn_ref(ty: Ty<'tcx>) -> Option<(DefId, SubstsRef<'tcx>)> {\n         let referent_ty = match ty.kind() {\n             ty::Ref(_, referent_ty, _) => Some(referent_ty),\n             ty::RawPtr(ty_and_mut) => Some(&ty_and_mut.ty),\n             _ => None,\n         };\n         referent_ty\n-            .map(\n-                |ref_ty| {\n-                    if let ty::FnDef(def_id, _) = *ref_ty.kind() { Some(def_id) } else { None }\n-                },\n-            )\n+            .map(|ref_ty| {\n+                if let ty::FnDef(def_id, substs_ref) = *ref_ty.kind() {\n+                    Some((def_id, substs_ref))\n+                } else {\n+                    None\n+                }\n+            })\n             .unwrap_or(None)\n     }\n+\n     fn nth_arg_span(&self, args: &Vec<Operand<'tcx>>, n: usize) -> Span {\n         match &args[n] {\n             Operand::Copy(place) | Operand::Move(place) => {\n@@ -163,7 +170,14 @@ impl<'a, 'tcx> FunctionItemRefChecker<'a, 'tcx> {\n             Operand::Constant(constant) => constant.span,\n         }\n     }\n-    fn emit_lint(&self, ident: String, fn_id: DefId, source_info: SourceInfo, span: Span) {\n+\n+    fn emit_lint(\n+        &self,\n+        fn_id: DefId,\n+        fn_substs: SubstsRef<'tcx>,\n+        source_info: SourceInfo,\n+        span: Span,\n+    ) {\n         let lint_root = self.body.source_scopes[source_info.scope]\n             .local_data\n             .as_ref()\n@@ -180,6 +194,10 @@ impl<'a, 'tcx> FunctionItemRefChecker<'a, 'tcx> {\n                 s\n             }\n         };\n+        let ident = self.tcx.item_name(fn_id).to_ident_string();\n+        let ty_params = fn_substs.types().map(|ty| format!(\"{}\", ty));\n+        let const_params = fn_substs.consts().map(|c| format!(\"{}\", c));\n+        let params = ty_params.chain(const_params).collect::<Vec<String>>().join(\", \");\n         let num_args = fn_sig.inputs().map_bound(|inputs| inputs.len()).skip_binder();\n         let variadic = if fn_sig.c_variadic() { \", ...\" } else { \"\" };\n         let ret = if fn_sig.output().skip_binder().is_unit() { \"\" } else { \" -> _\" };\n@@ -190,7 +208,7 @@ impl<'a, 'tcx> FunctionItemRefChecker<'a, 'tcx> {\n                     &format!(\"cast `{}` to obtain a function pointer\", ident),\n                     format!(\n                         \"{} as {}{}fn({}{}){}\",\n-                        ident,\n+                        if params.is_empty() { ident } else { format!(\"{}::<{}>\", ident, params) },\n                         unsafety,\n                         abi,\n                         vec![\"_\"; num_args].join(\", \"),"}, {"sha": "5f7f5e66eaa9f220d4b004b151fe6edb29832b2a", "filename": "src/test/ui/lint/function-item-references.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f347dab47c2c29640747d8200e00f6a5de3c7b7b/src%2Ftest%2Fui%2Flint%2Ffunction-item-references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f347dab47c2c29640747d8200e00f6a5de3c7b7b/src%2Ftest%2Fui%2Flint%2Ffunction-item-references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffunction-item-references.rs?ref=f347dab47c2c29640747d8200e00f6a5de3c7b7b", "patch": "@@ -1,5 +1,5 @@\n // check-pass\n-#![feature(c_variadic)]\n+#![feature(c_variadic, min_const_generics)]\n #![warn(function_item_references)]\n use std::fmt::Pointer;\n use std::fmt::Formatter;\n@@ -12,6 +12,10 @@ unsafe fn unsafe_fn() { }\n extern \"C\" fn c_fn() { }\n unsafe extern \"C\" fn unsafe_c_fn() { }\n unsafe extern fn variadic(_x: u32, _args: ...) { }\n+fn take_generic_ref<'a, T>(_x: &'a T) { }\n+fn take_generic_array<T, const N: usize>(_x: [T; N]) { }\n+fn multiple_generic<T, U>(_x: T, _y: U) { }\n+fn multiple_generic_arrays<T, U, const N: usize, const M: usize>(_x: [T; N], _y: [U; M]) { }\n \n //function references passed to these functions should never lint\n fn call_fn(f: &dyn Fn(u32) -> u32, x: u32) { f(x); }\n@@ -109,6 +113,14 @@ fn main() {\n     //~^ WARNING taking a reference to a function item does not give a function pointer\n     println!(\"{:p}\", &variadic);\n     //~^ WARNING taking a reference to a function item does not give a function pointer\n+    println!(\"{:p}\", &take_generic_ref::<u32>);\n+    //~^ WARNING taking a reference to a function item does not give a function pointer\n+    println!(\"{:p}\", &take_generic_array::<u32, 4>);\n+    //~^ WARNING taking a reference to a function item does not give a function pointer\n+    println!(\"{:p}\", &multiple_generic::<u32, f32>);\n+    //~^ WARNING taking a reference to a function item does not give a function pointer\n+    println!(\"{:p}\", &multiple_generic_arrays::<u32, f32, 4, 8>);\n+    //~^ WARNING taking a reference to a function item does not give a function pointer\n     println!(\"{:p}\", &std::env::var::<String>);\n     //~^ WARNING taking a reference to a function item does not give a function pointer\n \n@@ -132,6 +144,8 @@ fn main() {\n         std::mem::transmute::<_, (usize, usize)>((&foo, &bar));\n         //~^ WARNING taking a reference to a function item does not give a function pointer\n         //~^^ WARNING taking a reference to a function item does not give a function pointer\n+        std::mem::transmute::<_, usize>(&take_generic_ref::<u32>);\n+        //~^ WARNING taking a reference to a function item does not give a function pointer\n \n         //the correct way to transmute function pointers\n         std::mem::transmute::<_, usize>(foo as fn() -> u32);"}, {"sha": "33db687df31d2b8c4b174b6a8441e8096fc372a1", "filename": "src/test/ui/lint/function-item-references.stderr", "status": "modified", "additions": 60, "deletions": 30, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/f347dab47c2c29640747d8200e00f6a5de3c7b7b/src%2Ftest%2Fui%2Flint%2Ffunction-item-references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f347dab47c2c29640747d8200e00f6a5de3c7b7b/src%2Ftest%2Fui%2Flint%2Ffunction-item-references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffunction-item-references.stderr?ref=f347dab47c2c29640747d8200e00f6a5de3c7b7b", "patch": "@@ -1,5 +1,5 @@\n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:40:18\n+  --> $DIR/function-item-references.rs:44:18\n    |\n LL |     Pointer::fmt(&zst_ref, f)\n    |                  ^^^^^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n@@ -11,166 +11,196 @@ LL | #![warn(function_item_references)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:77:22\n+  --> $DIR/function-item-references.rs:81:22\n    |\n LL |     println!(\"{:p}\", &foo);\n    |                      ^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:79:20\n+  --> $DIR/function-item-references.rs:83:20\n    |\n LL |     print!(\"{:p}\", &foo);\n    |                    ^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:81:21\n+  --> $DIR/function-item-references.rs:85:21\n    |\n LL |     format!(\"{:p}\", &foo);\n    |                     ^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:84:22\n+  --> $DIR/function-item-references.rs:88:22\n    |\n LL |     println!(\"{:p}\", &foo as *const _);\n    |                      ^^^^^^^^^^^^^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:86:22\n+  --> $DIR/function-item-references.rs:90:22\n    |\n LL |     println!(\"{:p}\", zst_ref);\n    |                      ^^^^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:88:22\n+  --> $DIR/function-item-references.rs:92:22\n    |\n LL |     println!(\"{:p}\", cast_zst_ptr);\n    |                      ^^^^^^^^^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:90:22\n+  --> $DIR/function-item-references.rs:94:22\n    |\n LL |     println!(\"{:p}\", coerced_zst_ptr);\n    |                      ^^^^^^^^^^^^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:93:22\n+  --> $DIR/function-item-references.rs:97:22\n    |\n LL |     println!(\"{:p}\", &fn_item);\n    |                      ^^^^^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:95:22\n+  --> $DIR/function-item-references.rs:99:22\n    |\n LL |     println!(\"{:p}\", indirect_ref);\n    |                      ^^^^^^^^^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:98:22\n+  --> $DIR/function-item-references.rs:102:22\n    |\n LL |     println!(\"{:p}\", &nop);\n    |                      ^^^^ help: cast `nop` to obtain a function pointer: `nop as fn()`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:100:22\n+  --> $DIR/function-item-references.rs:104:22\n    |\n LL |     println!(\"{:p}\", &bar);\n    |                      ^^^^ help: cast `bar` to obtain a function pointer: `bar as fn(_) -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:102:22\n+  --> $DIR/function-item-references.rs:106:22\n    |\n LL |     println!(\"{:p}\", &baz);\n    |                      ^^^^ help: cast `baz` to obtain a function pointer: `baz as fn(_, _) -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:104:22\n+  --> $DIR/function-item-references.rs:108:22\n    |\n LL |     println!(\"{:p}\", &unsafe_fn);\n    |                      ^^^^^^^^^^ help: cast `unsafe_fn` to obtain a function pointer: `unsafe_fn as unsafe fn()`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:106:22\n+  --> $DIR/function-item-references.rs:110:22\n    |\n LL |     println!(\"{:p}\", &c_fn);\n    |                      ^^^^^ help: cast `c_fn` to obtain a function pointer: `c_fn as extern \"C\" fn()`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:108:22\n+  --> $DIR/function-item-references.rs:112:22\n    |\n LL |     println!(\"{:p}\", &unsafe_c_fn);\n    |                      ^^^^^^^^^^^^ help: cast `unsafe_c_fn` to obtain a function pointer: `unsafe_c_fn as unsafe extern \"C\" fn()`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:110:22\n+  --> $DIR/function-item-references.rs:114:22\n    |\n LL |     println!(\"{:p}\", &variadic);\n    |                      ^^^^^^^^^ help: cast `variadic` to obtain a function pointer: `variadic as unsafe extern \"C\" fn(_, ...)`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:112:22\n+  --> $DIR/function-item-references.rs:116:22\n+   |\n+LL |     println!(\"{:p}\", &take_generic_ref::<u32>);\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: cast `take_generic_ref` to obtain a function pointer: `take_generic_ref::<u32> as fn(_)`\n+\n+warning: taking a reference to a function item does not give a function pointer\n+  --> $DIR/function-item-references.rs:118:22\n+   |\n+LL |     println!(\"{:p}\", &take_generic_array::<u32, 4>);\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: cast `take_generic_array` to obtain a function pointer: `take_generic_array::<u32, 4_usize> as fn(_)`\n+\n+warning: taking a reference to a function item does not give a function pointer\n+  --> $DIR/function-item-references.rs:120:22\n+   |\n+LL |     println!(\"{:p}\", &multiple_generic::<u32, f32>);\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: cast `multiple_generic` to obtain a function pointer: `multiple_generic::<u32, f32> as fn(_, _)`\n+\n+warning: taking a reference to a function item does not give a function pointer\n+  --> $DIR/function-item-references.rs:122:22\n+   |\n+LL |     println!(\"{:p}\", &multiple_generic_arrays::<u32, f32, 4, 8>);\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: cast `multiple_generic_arrays` to obtain a function pointer: `multiple_generic_arrays::<u32, f32, 4_usize, 8_usize> as fn(_, _)`\n+\n+warning: taking a reference to a function item does not give a function pointer\n+  --> $DIR/function-item-references.rs:124:22\n    |\n LL |     println!(\"{:p}\", &std::env::var::<String>);\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: cast `var` to obtain a function pointer: `var as fn(_) -> _`\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: cast `var` to obtain a function pointer: `var::<String> as fn(_) -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:115:32\n+  --> $DIR/function-item-references.rs:127:32\n    |\n LL |     println!(\"{:p} {:p} {:p}\", &nop, &foo, &bar);\n    |                                ^^^^ help: cast `nop` to obtain a function pointer: `nop as fn()`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:115:38\n+  --> $DIR/function-item-references.rs:127:38\n    |\n LL |     println!(\"{:p} {:p} {:p}\", &nop, &foo, &bar);\n    |                                      ^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:115:44\n+  --> $DIR/function-item-references.rs:127:44\n    |\n LL |     println!(\"{:p} {:p} {:p}\", &nop, &foo, &bar);\n    |                                            ^^^^ help: cast `bar` to obtain a function pointer: `bar as fn(_) -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:130:41\n+  --> $DIR/function-item-references.rs:142:41\n    |\n LL |         std::mem::transmute::<_, usize>(&foo);\n    |                                         ^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:132:50\n+  --> $DIR/function-item-references.rs:144:50\n    |\n LL |         std::mem::transmute::<_, (usize, usize)>((&foo, &bar));\n    |                                                  ^^^^^^^^^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:132:50\n+  --> $DIR/function-item-references.rs:144:50\n    |\n LL |         std::mem::transmute::<_, (usize, usize)>((&foo, &bar));\n    |                                                  ^^^^^^^^^^^^ help: cast `bar` to obtain a function pointer: `bar as fn(_) -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:142:15\n+  --> $DIR/function-item-references.rs:147:41\n+   |\n+LL |         std::mem::transmute::<_, usize>(&take_generic_ref::<u32>);\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^ help: cast `take_generic_ref` to obtain a function pointer: `take_generic_ref::<u32> as fn(_)`\n+\n+warning: taking a reference to a function item does not give a function pointer\n+  --> $DIR/function-item-references.rs:156:15\n    |\n LL |     print_ptr(&bar);\n    |               ^^^^ help: cast `bar` to obtain a function pointer: `bar as fn(_) -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:144:24\n+  --> $DIR/function-item-references.rs:158:24\n    |\n LL |     bound_by_ptr_trait(&bar);\n    |                        ^^^^ help: cast `bar` to obtain a function pointer: `bar as fn(_) -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:146:30\n+  --> $DIR/function-item-references.rs:160:30\n    |\n LL |     bound_by_ptr_trait_tuple((&foo, &bar));\n    |                              ^^^^^^^^^^^^ help: cast `bar` to obtain a function pointer: `bar as fn(_) -> _`\n \n warning: taking a reference to a function item does not give a function pointer\n-  --> $DIR/function-item-references.rs:146:30\n+  --> $DIR/function-item-references.rs:160:30\n    |\n LL |     bound_by_ptr_trait_tuple((&foo, &bar));\n    |                              ^^^^^^^^^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n-warning: 28 warnings emitted\n+warning: 33 warnings emitted\n "}]}