{"sha": "72a5e7e810cbb2ea6db7ff37a599bc3826adee35", "node_id": "C_kwDOAAsO6NoAKDcyYTVlN2U4MTBjYmIyZWE2ZGI3ZmYzN2E1OTliYzM4MjZhZGVlMzU", "commit": {"author": {"name": "Giles Cope", "email": "gilescope@gmail.com", "date": "2022-04-02T10:13:44Z"}, "committer": {"name": "Giles Cope", "email": "gilescope@gmail.com", "date": "2022-04-02T10:13:44Z"}, "message": "need guidence on testing", "tree": {"sha": "a70bd55191f0450d45a2461294f09d6678ca28a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a70bd55191f0450d45a2461294f09d6678ca28a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72a5e7e810cbb2ea6db7ff37a599bc3826adee35", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEh0hoVRXRPubZAqGkYx9jUtSpSe8FAmJIIdgACgkQYx9jUtSp\nSe/ijg/+IwTggEyqjdIY1CCxEEegHxQ6eymtsZQjyiKwEzLYYdHBh+KJ43/J6F0/\nP+p7y5ngIBFOhrs3dGZzdNec1sQEZ+c7ejKnSUsAxHD+ZciDqgkT+EP7sXcTBjwW\nUhlRPOKvXMaMX4Y1eHOCJiUkb2fXYvN6ajdHI+P85umyU+/lJqmbUZ3vlowWQZZR\nljD/GrI8lRkEqTFjbnJe353jkKOIkNbirRt0G/PIR8m7fRCqDg6+hQG58AMMdseC\ntLEWRPLBRCn/ghPG/2bYaTUIJD0aQxvONOymRXgEEdVnaFmvS2J9aagecNE7HepQ\nkuSkVAbwVXgMb4DqFnHvjWMJGinSdvqaO+nhwQsUtXWPjIaKBIvkiDqMHLd/YhI8\nReBgVXlWm7ceBfaC5k8IhQLjHxN8fmloXxWMd60VPSxgs9CFRUaYB0V1LxQ0yFTn\nv/lIGWhI+lLr8sFqnDXHzwvCTQ+Izg9AWMMBA108yA+Hs67RtwZQB4zuc07JnNZy\n+N6XsnmHg2+RsCl9Ie0mYAKiIuZsNnYzHc3Gqa9iB5zxBZZLt+uwLVXc53d42zvg\nURk42Nu6vrAMhra3kJXOmWBXIxzcvvf3YW5SJxph88CXlMS0nLnev7pgHF4DiElp\nDtGzEk6ZhQDh9w8DlWjpYzGlrwhZEA0WG+MngCqvJvakhBupiTU=\n=amQw\n-----END PGP SIGNATURE-----", "payload": "tree a70bd55191f0450d45a2461294f09d6678ca28a0\nparent 4bfea7163781ebda2e7ade0faae9558ed812854d\nauthor Giles Cope <gilescope@gmail.com> 1648894424 +0100\ncommitter Giles Cope <gilescope@gmail.com> 1648894424 +0100\n\nneed guidence on testing\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72a5e7e810cbb2ea6db7ff37a599bc3826adee35", "html_url": "https://github.com/rust-lang/rust/commit/72a5e7e810cbb2ea6db7ff37a599bc3826adee35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72a5e7e810cbb2ea6db7ff37a599bc3826adee35/comments", "author": {"login": "gilescope", "id": 803976, "node_id": "MDQ6VXNlcjgwMzk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/803976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gilescope", "html_url": "https://github.com/gilescope", "followers_url": "https://api.github.com/users/gilescope/followers", "following_url": "https://api.github.com/users/gilescope/following{/other_user}", "gists_url": "https://api.github.com/users/gilescope/gists{/gist_id}", "starred_url": "https://api.github.com/users/gilescope/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gilescope/subscriptions", "organizations_url": "https://api.github.com/users/gilescope/orgs", "repos_url": "https://api.github.com/users/gilescope/repos", "events_url": "https://api.github.com/users/gilescope/events{/privacy}", "received_events_url": "https://api.github.com/users/gilescope/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gilescope", "id": 803976, "node_id": "MDQ6VXNlcjgwMzk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/803976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gilescope", "html_url": "https://github.com/gilescope", "followers_url": "https://api.github.com/users/gilescope/followers", "following_url": "https://api.github.com/users/gilescope/following{/other_user}", "gists_url": "https://api.github.com/users/gilescope/gists{/gist_id}", "starred_url": "https://api.github.com/users/gilescope/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gilescope/subscriptions", "organizations_url": "https://api.github.com/users/gilescope/orgs", "repos_url": "https://api.github.com/users/gilescope/repos", "events_url": "https://api.github.com/users/gilescope/events{/privacy}", "received_events_url": "https://api.github.com/users/gilescope/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bfea7163781ebda2e7ade0faae9558ed812854d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bfea7163781ebda2e7ade0faae9558ed812854d", "html_url": "https://github.com/rust-lang/rust/commit/4bfea7163781ebda2e7ade0faae9558ed812854d"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "12ab12d7ee03a517d58efb13836512235db920d9", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/72a5e7e810cbb2ea6db7ff37a599bc3826adee35/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a5e7e810cbb2ea6db7ff37a599bc3826adee35/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=72a5e7e810cbb2ea6db7ff37a599bc3826adee35", "patch": "@@ -1035,6 +1035,11 @@ macro_rules! impl_helper_for {\n }\n impl_helper_for! { i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usize }\n \n+#[inline(always)]\n+pub(crate) fn can_not_overflow<T>(radix: u32, is_signed_ty: bool, digits:&[u8]) -> bool {\n+    radix <= 16 && digits.len() <= mem::size_of::<T>() * 2 - is_signed_ty as usize\n+}\n+\n fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, ParseIntError> {\n     use self::IntErrorKind::*;\n     use self::ParseIntError as PIE;\n@@ -1068,7 +1073,7 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, Par\n \n     let mut result = T::from_u32(0);\n \n-    if radix <= 16 && digits.len() <= mem::size_of::<T>() * 2 - is_signed_ty as usize {\n+    if can_not_overflow::<T>(radix, is_signed_ty, digits) {\n         // SAFETY: If the len of the str is short compared to the range of the type\n         // we are parsing into, then we can be certain that an overflow will not occur.\n         // This bound is when `radix.pow(digits.len()) - 1 <= T::MAX` but the condition\n@@ -1093,9 +1098,9 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, Par\n                 run_unchecked_loop!(unchecked_sub)\n             };\n         }\n-    } else {        \n+    } else {\n         macro_rules! run_checked_loop {\n-            ($checked_additive_op:ident, $overflow_err:ident) => {\n+            ($checked_additive_op:ident, $overflow_err:expr) => {\n                 for &c in digits {\n                     // When `radix` is passed in as a literal, rather than doing a slow `imul`\n                     // the compiler can use shifts if `radix` can be expressed as a\n@@ -1110,17 +1115,23 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, Par\n                     let mul = result.checked_mul(radix);\n                     let x = (c as char).to_digit(radix).ok_or(PIE { kind: InvalidDigit })?;\n                     result = mul.ok_or_else($overflow_err)?;\n-                    result =  T::$checked_additive_op(&result, x).ok_or_else($overflow_err)?;\n+                    result = T::$checked_additive_op(&result, x).ok_or_else($overflow_err)?;\n                 }\n-            }\n+            };\n         }\n         if is_positive {\n-            let overflow_err = || PIE { kind: PosOverflow };\n-            run_checked_loop!(checked_add, overflow_err)\n+            run_checked_loop!(checked_add, || PIE { kind: PosOverflow })\n         } else {\n-            let overflow_err = || PIE { kind: NegOverflow };\n-            run_checked_loop!(checked_sub, overflow_err)\n+            run_checked_loop!(checked_sub, || PIE { kind: NegOverflow })\n         };\n     }\n     Ok(result)\n }\n+\n+mod tests {\n+    #[test]\n+    fn test_can_not_overflow() {\n+        assert_eq!(can_not_overflow::<i8>(10, true, \"99\".as_bytes()), true);\n+        assert_eq!(can_not_overflow::<i8>(10, true, \"129\".as_bytes()), false);\n+    }\n+}\n\\ No newline at end of file"}]}