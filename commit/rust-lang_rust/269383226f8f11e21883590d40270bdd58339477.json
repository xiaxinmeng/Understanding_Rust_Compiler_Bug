{"sha": "269383226f8f11e21883590d40270bdd58339477", "node_id": "C_kwDOAAsO6NoAKDI2OTM4MzIyNmY4ZjExZTIxODgzNTkwZDQwMjcwYmRkNTgzMzk0Nzc", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-01-23T00:25:56Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-01-23T19:38:55Z"}, "message": "Rename strict_check to negative_impl_exists", "tree": {"sha": "02bd3c3c64bae6c20c9c16a7b33678e73eb9179f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02bd3c3c64bae6c20c9c16a7b33678e73eb9179f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/269383226f8f11e21883590d40270bdd58339477", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmHtrs8ACgkQgTGiTgx5\n76+ygxAAoIAXqRLc92nqj2vl9lNCFJ4+JET4DF42P/yGld1neJhLPM5VuT4s8BXs\nfSRzs/17dSEaavNl+Pn96TAMr1b9BFsLI7wrny55arrXZ+TMvBpz1kPlaJyB77v9\nPyx7B1x5ljkMTUVZCcMrK/KN09dhEaSMIXW3eCsvG3jkOSz99IznTj74GgbRjZje\nKR5ZTMSct8SS+66mWoexaRWMyWeQ4Md/Xab+whGU6Bjd3NiXBbppdjB0dnZTHqN8\nH/QzM7hWmKYe8rj+uXTwz/W1cG74WosJlFxkG3+Z+tJBFgR8JiGp+bFB9gOywyV7\nXsAflV9ixP8gUZpY1iPiddtumz7c4W50MyKO0QW4OfnZAuPVSx/irjCkY9UpRbTY\neb7sqIgWAQWF3A1bNNKg5CZIvpPyzSAniwYttJFwOAXxTRXiKszwqbRMw4xathPz\nJYW9fW3/GfOKffOEDgYUevOFJMyPQl/JFl0bIc/GcpqRT+QHF/ohgM2LrEgVXMmt\nzSb5iGEe+1eHo4avMGi4ffyxO/HTIqY9+bYvtYfbs5MsuixSps9a4ILOtbZ/NDR+\no6ZX5B1GPOpP2zz1/RqyOOxL1kb8kGv+7f+ouDSWb3y6RzafDHRxxPhTUpjpcxls\n/YMO+O24eoRd4qdTre/A4RslpIjCH3uVREFgw/v22XNkdWOuPl0=\n=8wjT\n-----END PGP SIGNATURE-----", "payload": "tree 02bd3c3c64bae6c20c9c16a7b33678e73eb9179f\nparent 7847ca8c61f7dc49775f237efae9c7da007d20af\nauthor Santiago Pastorino <spastorino@gmail.com> 1642897556 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1642966735 -0300\n\nRename strict_check to negative_impl_exists\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/269383226f8f11e21883590d40270bdd58339477", "html_url": "https://github.com/rust-lang/rust/commit/269383226f8f11e21883590d40270bdd58339477", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/269383226f8f11e21883590d40270bdd58339477/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7847ca8c61f7dc49775f237efae9c7da007d20af", "url": "https://api.github.com/repos/rust-lang/rust/commits/7847ca8c61f7dc49775f237efae9c7da007d20af", "html_url": "https://github.com/rust-lang/rust/commit/7847ca8c61f7dc49775f237efae9c7da007d20af"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "d1a966455f0b2a73a6c6ff4255e6effbe855f332", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/269383226f8f11e21883590d40270bdd58339477/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/269383226f8f11e21883590d40270bdd58339477/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=269383226f8f11e21883590d40270bdd58339477", "patch": "@@ -313,7 +313,9 @@ fn implicit_negative<'cx, 'tcx>(\n             predicate: p,\n         })\n         .chain(obligations)\n-        .find(|o| loose_check(selcx, o) || tcx.features().negative_impls && strict_check(selcx, o));\n+        .find(|o| {\n+            loose_check(selcx, o) || tcx.features().negative_impls && negative_impl_exists(selcx, o)\n+        });\n     // FIXME: the call to `selcx.predicate_may_hold_fatal` above should be ported\n     // to the canonical trait query form, `infcx.predicate_may_hold`, once\n     // the new system supports intercrate mode (which coherence needs).\n@@ -377,8 +379,10 @@ fn negative_impl<'cx, 'tcx>(\n             }\n         };\n \n-        let opt_failing_obligation =\n-            obligations.into_iter().chain(more_obligations).find(|o| strict_check(selcx, o));\n+        let opt_failing_obligation = obligations\n+            .into_iter()\n+            .chain(more_obligations)\n+            .find(|o| negative_impl_exists(selcx, o));\n \n         if let Some(failing_obligation) = opt_failing_obligation {\n             debug!(\"overlap: obligation unsatisfiable {:?}\", failing_obligation);\n@@ -396,7 +400,7 @@ fn loose_check<'cx, 'tcx>(\n     !selcx.predicate_may_hold_fatal(o)\n }\n \n-fn strict_check<'cx, 'tcx>(\n+fn negative_impl_exists<'cx, 'tcx>(\n     selcx: &SelectionContext<'cx, 'tcx>,\n     o: &PredicateObligation<'tcx>,\n ) -> bool {"}]}