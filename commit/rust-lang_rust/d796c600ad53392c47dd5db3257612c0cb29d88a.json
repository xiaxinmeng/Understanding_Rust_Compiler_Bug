{"sha": "d796c600ad53392c47dd5db3257612c0cb29d88a", "node_id": "C_kwDOAAsO6NoAKGQ3OTZjNjAwYWQ1MzM5MmM0N2RkNWRiMzI1NzYxMmMwY2IyOWQ4OGE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-06-01T06:08:25Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-06-01T21:43:52Z"}, "message": "Rebase fallout.", "tree": {"sha": "5355c45de34cedf35bc10835b9083b8db4e08cfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5355c45de34cedf35bc10835b9083b8db4e08cfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d796c600ad53392c47dd5db3257612c0cb29d88a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d796c600ad53392c47dd5db3257612c0cb29d88a", "html_url": "https://github.com/rust-lang/rust/commit/d796c600ad53392c47dd5db3257612c0cb29d88a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d796c600ad53392c47dd5db3257612c0cb29d88a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ad37804a62ef2a1a8f613cca349bacc8fb510f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ad37804a62ef2a1a8f613cca349bacc8fb510f0", "html_url": "https://github.com/rust-lang/rust/commit/1ad37804a62ef2a1a8f613cca349bacc8fb510f0"}], "stats": {"total": 606, "additions": 334, "deletions": 272}, "files": [{"sha": "26ce7fda4ed0198690d7b452aa8ec45eaf21bdea", "filename": "tests/mir-opt/pre-codegen/chained_comparison.naive.PreCodegen.after.mir", "status": "modified", "additions": 63, "deletions": 72, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/d796c600ad53392c47dd5db3257612c0cb29d88a/tests%2Fmir-opt%2Fpre-codegen%2Fchained_comparison.naive.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d796c600ad53392c47dd5db3257612c0cb29d88a/tests%2Fmir-opt%2Fpre-codegen%2Fchained_comparison.naive.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fchained_comparison.naive.PreCodegen.after.mir?ref=d796c600ad53392c47dd5db3257612c0cb29d88a", "patch": "@@ -7,26 +7,26 @@ fn naive(_1: &Blueprint, _2: &Blueprint) -> bool {\n     let mut _3: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+1:6: +1:22\n     let mut _4: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+1:26: +1:42\n     let mut _5: bool;                    // in scope 0 at $DIR/chained_comparison.rs:+1:5: +1:43\n-    let mut _6: bool;                    // in scope 0 at $DIR/chained_comparison.rs:+1:5: +2:36\n-    let mut _7: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+2:13: +2:22\n-    let mut _8: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+2:26: +2:35\n-    let mut _9: bool;                    // in scope 0 at $DIR/chained_comparison.rs:+2:12: +2:36\n-    let mut _10: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+1:5: +3:50\n-    let mut _11: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+3:13: +3:29\n-    let mut _12: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+3:33: +3:49\n-    let mut _13: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+3:12: +3:50\n-    let mut _14: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+1:5: +4:44\n-    let mut _15: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+4:13: +4:26\n-    let mut _16: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+4:30: +4:43\n-    let mut _17: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+4:12: +4:44\n+    let mut _6: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+2:13: +2:22\n+    let mut _7: u32;                     // in scope 0 at $DIR/chained_comparison.rs:+2:26: +2:35\n+    let mut _8: bool;                    // in scope 0 at $DIR/chained_comparison.rs:+2:12: +2:36\n+    let mut _9: bool;                    // in scope 0 at $DIR/chained_comparison.rs:+1:5: +2:36\n+    let mut _10: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+3:13: +3:29\n+    let mut _11: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+3:33: +3:49\n+    let mut _12: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+3:12: +3:50\n+    let mut _13: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+1:5: +3:50\n+    let mut _14: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+4:13: +4:26\n+    let mut _15: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+4:30: +4:43\n+    let mut _16: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+4:12: +4:44\n+    let mut _17: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+1:5: +4:44\n     let mut _18: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+5:13: +5:22\n     let mut _19: u32;                    // in scope 0 at $DIR/chained_comparison.rs:+5:26: +5:35\n     let mut _20: bool;                   // in scope 0 at $DIR/chained_comparison.rs:+5:12: +5:36\n \n     bb0: {\n-        StorageLive(_14);                // scope 0 at $DIR/chained_comparison.rs:+1:5: +4:44\n-        StorageLive(_10);                // scope 0 at $DIR/chained_comparison.rs:+1:5: +3:50\n-        StorageLive(_6);                 // scope 0 at $DIR/chained_comparison.rs:+1:5: +2:36\n+        StorageLive(_17);                // scope 0 at $DIR/chained_comparison.rs:+1:5: +4:44\n+        StorageLive(_13);                // scope 0 at $DIR/chained_comparison.rs:+1:5: +3:50\n+        StorageLive(_9);                 // scope 0 at $DIR/chained_comparison.rs:+1:5: +2:36\n         StorageLive(_5);                 // scope 0 at $DIR/chained_comparison.rs:+1:5: +1:43\n         StorageLive(_3);                 // scope 0 at $DIR/chained_comparison.rs:+1:6: +1:22\n         _3 = ((*_1).0: u32);             // scope 0 at $DIR/chained_comparison.rs:+1:6: +1:22\n@@ -39,83 +39,74 @@ fn naive(_1: &Blueprint, _2: &Blueprint) -> bool {\n     }\n \n     bb1: {\n-        _6 = const false;                // scope 0 at $DIR/chained_comparison.rs:+1:5: +2:36\n+        StorageDead(_8);                 // scope 0 at $DIR/chained_comparison.rs:+2:35: +2:36\n+        StorageDead(_5);                 // scope 0 at $DIR/chained_comparison.rs:+2:35: +2:36\n         goto -> bb3;                     // scope 0 at $DIR/chained_comparison.rs:+1:5: +2:36\n     }\n \n     bb2: {\n-        StorageLive(_9);                 // scope 0 at $DIR/chained_comparison.rs:+2:12: +2:36\n-        StorageLive(_7);                 // scope 0 at $DIR/chained_comparison.rs:+2:13: +2:22\n-        _7 = ((*_1).1: u32);             // scope 0 at $DIR/chained_comparison.rs:+2:13: +2:22\n-        StorageLive(_8);                 // scope 0 at $DIR/chained_comparison.rs:+2:26: +2:35\n-        _8 = ((*_2).1: u32);             // scope 0 at $DIR/chained_comparison.rs:+2:26: +2:35\n-        _9 = Eq(move _7, move _8);       // scope 0 at $DIR/chained_comparison.rs:+2:12: +2:36\n-        StorageDead(_8);                 // scope 0 at $DIR/chained_comparison.rs:+2:35: +2:36\n+        StorageLive(_8);                 // scope 0 at $DIR/chained_comparison.rs:+2:12: +2:36\n+        StorageLive(_6);                 // scope 0 at $DIR/chained_comparison.rs:+2:13: +2:22\n+        _6 = ((*_1).1: u32);             // scope 0 at $DIR/chained_comparison.rs:+2:13: +2:22\n+        StorageLive(_7);                 // scope 0 at $DIR/chained_comparison.rs:+2:26: +2:35\n+        _7 = ((*_2).1: u32);             // scope 0 at $DIR/chained_comparison.rs:+2:26: +2:35\n+        _8 = Eq(move _6, move _7);       // scope 0 at $DIR/chained_comparison.rs:+2:12: +2:36\n         StorageDead(_7);                 // scope 0 at $DIR/chained_comparison.rs:+2:35: +2:36\n-        _6 = move _9;                    // scope 0 at $DIR/chained_comparison.rs:+1:5: +2:36\n-        goto -> bb3;                     // scope 0 at $DIR/chained_comparison.rs:+1:5: +2:36\n+        StorageDead(_6);                 // scope 0 at $DIR/chained_comparison.rs:+2:35: +2:36\n+        _9 = move _8;                    // scope 0 at $DIR/chained_comparison.rs:+1:5: +2:36\n+        StorageDead(_8);                 // scope 0 at $DIR/chained_comparison.rs:+2:35: +2:36\n+        StorageDead(_5);                 // scope 0 at $DIR/chained_comparison.rs:+2:35: +2:36\n+        switchInt(move _9) -> [0: bb3, otherwise: bb4]; // scope 0 at $DIR/chained_comparison.rs:+1:5: +3:50\n     }\n \n     bb3: {\n-        StorageDead(_9);                 // scope 0 at $DIR/chained_comparison.rs:+2:35: +2:36\n-        StorageDead(_5);                 // scope 0 at $DIR/chained_comparison.rs:+2:35: +2:36\n-        switchInt(move _6) -> [0: bb4, otherwise: bb5]; // scope 0 at $DIR/chained_comparison.rs:+1:5: +3:50\n+        StorageDead(_12);                // scope 0 at $DIR/chained_comparison.rs:+3:49: +3:50\n+        StorageDead(_9);                 // scope 0 at $DIR/chained_comparison.rs:+3:49: +3:50\n+        goto -> bb5;                     // scope 0 at $DIR/chained_comparison.rs:+1:5: +3:50\n     }\n \n     bb4: {\n-        _10 = const false;               // scope 0 at $DIR/chained_comparison.rs:+1:5: +3:50\n-        goto -> bb6;                     // scope 0 at $DIR/chained_comparison.rs:+1:5: +3:50\n+        StorageLive(_12);                // scope 0 at $DIR/chained_comparison.rs:+3:12: +3:50\n+        StorageLive(_10);                // scope 0 at $DIR/chained_comparison.rs:+3:13: +3:29\n+        _10 = ((*_1).2: u32);            // scope 0 at $DIR/chained_comparison.rs:+3:13: +3:29\n+        StorageLive(_11);                // scope 0 at $DIR/chained_comparison.rs:+3:33: +3:49\n+        _11 = ((*_2).2: u32);            // scope 0 at $DIR/chained_comparison.rs:+3:33: +3:49\n+        _12 = Eq(move _10, move _11);    // scope 0 at $DIR/chained_comparison.rs:+3:12: +3:50\n+        StorageDead(_11);                // scope 0 at $DIR/chained_comparison.rs:+3:49: +3:50\n+        StorageDead(_10);                // scope 0 at $DIR/chained_comparison.rs:+3:49: +3:50\n+        _13 = move _12;                  // scope 0 at $DIR/chained_comparison.rs:+1:5: +3:50\n+        StorageDead(_12);                // scope 0 at $DIR/chained_comparison.rs:+3:49: +3:50\n+        StorageDead(_9);                 // scope 0 at $DIR/chained_comparison.rs:+3:49: +3:50\n+        switchInt(move _13) -> [0: bb5, otherwise: bb6]; // scope 0 at $DIR/chained_comparison.rs:+1:5: +4:44\n     }\n \n     bb5: {\n-        StorageLive(_13);                // scope 0 at $DIR/chained_comparison.rs:+3:12: +3:50\n-        StorageLive(_11);                // scope 0 at $DIR/chained_comparison.rs:+3:13: +3:29\n-        _11 = ((*_1).2: u32);            // scope 0 at $DIR/chained_comparison.rs:+3:13: +3:29\n-        StorageLive(_12);                // scope 0 at $DIR/chained_comparison.rs:+3:33: +3:49\n-        _12 = ((*_2).2: u32);            // scope 0 at $DIR/chained_comparison.rs:+3:33: +3:49\n-        _13 = Eq(move _11, move _12);    // scope 0 at $DIR/chained_comparison.rs:+3:12: +3:50\n-        StorageDead(_12);                // scope 0 at $DIR/chained_comparison.rs:+3:49: +3:50\n-        StorageDead(_11);                // scope 0 at $DIR/chained_comparison.rs:+3:49: +3:50\n-        _10 = move _13;                  // scope 0 at $DIR/chained_comparison.rs:+1:5: +3:50\n-        goto -> bb6;                     // scope 0 at $DIR/chained_comparison.rs:+1:5: +3:50\n+        StorageDead(_16);                // scope 0 at $DIR/chained_comparison.rs:+4:43: +4:44\n+        StorageDead(_13);                // scope 0 at $DIR/chained_comparison.rs:+4:43: +4:44\n+        goto -> bb7;                     // scope 0 at $DIR/chained_comparison.rs:+1:5: +4:44\n     }\n \n     bb6: {\n-        StorageDead(_13);                // scope 0 at $DIR/chained_comparison.rs:+3:49: +3:50\n-        StorageDead(_6);                 // scope 0 at $DIR/chained_comparison.rs:+3:49: +3:50\n-        switchInt(move _10) -> [0: bb7, otherwise: bb8]; // scope 0 at $DIR/chained_comparison.rs:+1:5: +4:44\n-    }\n-\n-    bb7: {\n-        _14 = const false;               // scope 0 at $DIR/chained_comparison.rs:+1:5: +4:44\n-        goto -> bb9;                     // scope 0 at $DIR/chained_comparison.rs:+1:5: +4:44\n-    }\n-\n-    bb8: {\n-        StorageLive(_17);                // scope 0 at $DIR/chained_comparison.rs:+4:12: +4:44\n-        StorageLive(_15);                // scope 0 at $DIR/chained_comparison.rs:+4:13: +4:26\n-        _15 = ((*_1).3: u32);            // scope 0 at $DIR/chained_comparison.rs:+4:13: +4:26\n-        StorageLive(_16);                // scope 0 at $DIR/chained_comparison.rs:+4:30: +4:43\n-        _16 = ((*_2).3: u32);            // scope 0 at $DIR/chained_comparison.rs:+4:30: +4:43\n-        _17 = Eq(move _15, move _16);    // scope 0 at $DIR/chained_comparison.rs:+4:12: +4:44\n-        StorageDead(_16);                // scope 0 at $DIR/chained_comparison.rs:+4:43: +4:44\n+        StorageLive(_16);                // scope 0 at $DIR/chained_comparison.rs:+4:12: +4:44\n+        StorageLive(_14);                // scope 0 at $DIR/chained_comparison.rs:+4:13: +4:26\n+        _14 = ((*_1).3: u32);            // scope 0 at $DIR/chained_comparison.rs:+4:13: +4:26\n+        StorageLive(_15);                // scope 0 at $DIR/chained_comparison.rs:+4:30: +4:43\n+        _15 = ((*_2).3: u32);            // scope 0 at $DIR/chained_comparison.rs:+4:30: +4:43\n+        _16 = Eq(move _14, move _15);    // scope 0 at $DIR/chained_comparison.rs:+4:12: +4:44\n         StorageDead(_15);                // scope 0 at $DIR/chained_comparison.rs:+4:43: +4:44\n-        _14 = move _17;                  // scope 0 at $DIR/chained_comparison.rs:+1:5: +4:44\n-        goto -> bb9;                     // scope 0 at $DIR/chained_comparison.rs:+1:5: +4:44\n-    }\n-\n-    bb9: {\n-        StorageDead(_17);                // scope 0 at $DIR/chained_comparison.rs:+4:43: +4:44\n-        StorageDead(_10);                // scope 0 at $DIR/chained_comparison.rs:+4:43: +4:44\n-        switchInt(move _14) -> [0: bb10, otherwise: bb11]; // scope 0 at $DIR/chained_comparison.rs:+1:5: +5:36\n+        StorageDead(_14);                // scope 0 at $DIR/chained_comparison.rs:+4:43: +4:44\n+        _17 = move _16;                  // scope 0 at $DIR/chained_comparison.rs:+1:5: +4:44\n+        StorageDead(_16);                // scope 0 at $DIR/chained_comparison.rs:+4:43: +4:44\n+        StorageDead(_13);                // scope 0 at $DIR/chained_comparison.rs:+4:43: +4:44\n+        switchInt(move _17) -> [0: bb7, otherwise: bb8]; // scope 0 at $DIR/chained_comparison.rs:+1:5: +5:36\n     }\n \n-    bb10: {\n+    bb7: {\n         _0 = const false;                // scope 0 at $DIR/chained_comparison.rs:+1:5: +5:36\n-        goto -> bb12;                    // scope 0 at $DIR/chained_comparison.rs:+1:5: +5:36\n+        goto -> bb9;                     // scope 0 at $DIR/chained_comparison.rs:+1:5: +5:36\n     }\n \n-    bb11: {\n+    bb8: {\n         StorageLive(_20);                // scope 0 at $DIR/chained_comparison.rs:+5:12: +5:36\n         StorageLive(_18);                // scope 0 at $DIR/chained_comparison.rs:+5:13: +5:22\n         _18 = ((*_1).4: u32);            // scope 0 at $DIR/chained_comparison.rs:+5:13: +5:22\n@@ -125,12 +116,12 @@ fn naive(_1: &Blueprint, _2: &Blueprint) -> bool {\n         StorageDead(_19);                // scope 0 at $DIR/chained_comparison.rs:+5:35: +5:36\n         StorageDead(_18);                // scope 0 at $DIR/chained_comparison.rs:+5:35: +5:36\n         _0 = move _20;                   // scope 0 at $DIR/chained_comparison.rs:+1:5: +5:36\n-        goto -> bb12;                    // scope 0 at $DIR/chained_comparison.rs:+1:5: +5:36\n+        goto -> bb9;                     // scope 0 at $DIR/chained_comparison.rs:+1:5: +5:36\n     }\n \n-    bb12: {\n+    bb9: {\n         StorageDead(_20);                // scope 0 at $DIR/chained_comparison.rs:+5:35: +5:36\n-        StorageDead(_14);                // scope 0 at $DIR/chained_comparison.rs:+5:35: +5:36\n+        StorageDead(_17);                // scope 0 at $DIR/chained_comparison.rs:+5:35: +5:36\n         return;                          // scope 0 at $DIR/chained_comparison.rs:+6:2: +6:2\n     }\n }"}, {"sha": "55945bbc8fcc092415ad454330522ad6cf70dd53", "filename": "tests/mir-opt/pre-codegen/checked_ops.checked_shl.PreCodegen.after.mir", "status": "modified", "additions": 49, "deletions": 65, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/d796c600ad53392c47dd5db3257612c0cb29d88a/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.checked_shl.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d796c600ad53392c47dd5db3257612c0cb29d88a/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.checked_shl.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fchecked_ops.checked_shl.PreCodegen.after.mir?ref=d796c600ad53392c47dd5db3257612c0cb29d88a", "patch": "@@ -7,19 +7,17 @@ fn checked_shl(_1: u32, _2: u32) -> Option<u32> {\n     scope 1 (inlined core::num::<impl u32>::checked_shl) { // at $DIR/checked_ops.rs:16:7: 16:23\n         debug self => _1;                // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         debug rhs => _2;                 // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        let mut _13: (u32, bool);        // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        let _14: u32;                    // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        let _15: bool;                   // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        let mut _16: bool;               // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        let mut _11: u32;                // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        let mut _12: bool;               // in scope 1 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n         scope 2 {\n-            debug a => _14;              // in scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-            debug b => _15;              // in scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+            debug a => _11;              // in scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+            debug b => _10;              // in scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         }\n         scope 3 (inlined core::num::<impl u32>::overflowing_shl) { // at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n             debug self => _1;            // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n             debug rhs => _2;             // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-            let mut _11: u32;            // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-            let mut _12: bool;           // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+            let mut _9: u32;             // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+            let mut _10: bool;           // in scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n             scope 4 (inlined core::num::<impl u32>::wrapping_shl) { // at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n                 debug self => _1;        // in scope 4 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n                 debug rhs => _2;         // in scope 4 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n@@ -29,39 +27,37 @@ fn checked_shl(_1: u32, _2: u32) -> Option<u32> {\n                     scope 6 (inlined core::num::<impl u32>::unchecked_shl) { // at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n                         debug self => _1; // in scope 6 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n                         debug rhs => _4; // in scope 6 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-                        let mut _5: (u32,); // in scope 6 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-                        let mut _6: u32; // in scope 6 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-                        let mut _10: u32; // in scope 6 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                        let mut _8: u32; // in scope 6 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n                         scope 7 {\n                             scope 8 (inlined core::num::<impl u32>::unchecked_shl::conv) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-                                debug x => _6; // in scope 8 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-                                let mut _7: std::result::Result<u32, std::convert::Infallible>; // in scope 8 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-                                let mut _9: std::option::Option<u32>; // in scope 8 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                                debug x => _4; // in scope 8 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                                let mut _5: std::result::Result<u32, std::convert::Infallible>; // in scope 8 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+                                let mut _7: std::option::Option<u32>; // in scope 8 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n                                 scope 9 {\n                                     scope 10 (inlined <u32 as TryInto<u32>>::try_into) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-                                        debug self => _6; // in scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                                        debug self => _4; // in scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n                                         scope 11 (inlined <u32 as TryFrom<u32>>::try_from) { // at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-                                            debug value => _6; // in scope 11 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                                            debug value => _4; // in scope 11 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n                                             scope 21 (inlined <u32 as Into<u32>>::into) { // at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-                                                debug self => _6; // in scope 21 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                                                debug self => _4; // in scope 21 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n                                                 scope 22 (inlined <u32 as From<u32>>::from) { // at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-                                                    debug t => _6; // in scope 22 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                                                    debug t => _4; // in scope 22 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n                                                 }\n                                             }\n                                         }\n                                     }\n                                     scope 12 (inlined Result::<u32, Infallible>::ok) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-                                        debug self => _7; // in scope 12 at $SRC_DIR/core/src/result.rs:LL:COL\n-                                        let _8: u32; // in scope 12 at $SRC_DIR/core/src/result.rs:LL:COL\n+                                        debug self => _5; // in scope 12 at $SRC_DIR/core/src/result.rs:LL:COL\n+                                        let _6: u32; // in scope 12 at $SRC_DIR/core/src/result.rs:LL:COL\n                                         scope 13 {\n-                                            debug x => _8; // in scope 13 at $SRC_DIR/core/src/result.rs:LL:COL\n+                                            debug x => _6; // in scope 13 at $SRC_DIR/core/src/result.rs:LL:COL\n                                         }\n                                     }\n                                     scope 14 (inlined #[track_caller] Option::<u32>::unwrap_unchecked) { // at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-                                        debug self => _9; // in scope 14 at $SRC_DIR/core/src/option.rs:LL:COL\n-                                        let mut _17: &std::option::Option<u32>; // in scope 14 at $SRC_DIR/core/src/option.rs:LL:COL\n+                                        debug self => _7; // in scope 14 at $SRC_DIR/core/src/option.rs:LL:COL\n+                                        let mut _13: &std::option::Option<u32>; // in scope 14 at $SRC_DIR/core/src/option.rs:LL:COL\n                                         scope 15 {\n-                                            debug val => _10; // in scope 15 at $SRC_DIR/core/src/option.rs:LL:COL\n+                                            debug val => _8; // in scope 15 at $SRC_DIR/core/src/option.rs:LL:COL\n                                         }\n                                         scope 16 {\n                                             scope 18 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n@@ -72,7 +68,7 @@ fn checked_shl(_1: u32, _2: u32) -> Option<u32> {\n                                             }\n                                         }\n                                         scope 17 (inlined Option::<u32>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n-                                            debug self => _17; // in scope 17 at $SRC_DIR/core/src/option.rs:LL:COL\n+                                            debug self => _13; // in scope 17 at $SRC_DIR/core/src/option.rs:LL:COL\n                                         }\n                                     }\n                                 }\n@@ -85,64 +81,52 @@ fn checked_shl(_1: u32, _2: u32) -> Option<u32> {\n     }\n \n     bb0: {\n-        StorageLive(_14);                // scope 0 at $DIR/checked_ops.rs:+1:7: +1:23\n-        StorageLive(_15);                // scope 0 at $DIR/checked_ops.rs:+1:7: +1:23\n-        StorageLive(_13);                // scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        StorageLive(_11);                // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        StorageLive(_6);                 // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        StorageLive(_4);                 // scope 5 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageLive(_10);                // scope 0 at $DIR/checked_ops.rs:+1:7: +1:23\n+        StorageLive(_11);                // scope 0 at $DIR/checked_ops.rs:+1:7: +1:23\n+        StorageLive(_9);                 // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageLive(_4);                 // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         StorageLive(_3);                 // scope 5 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         _3 = const 31_u32;               // scope 5 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         _4 = BitAnd(_2, move _3);        // scope 5 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         StorageDead(_3);                 // scope 5 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        StorageLive(_10);                // scope 7 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        StorageLive(_5);                 // scope 7 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        _5 = (_4,);                      // scope 7 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        _6 = move (_5.0: u32);           // scope 7 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        StorageLive(_9);                 // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageLive(_8);                 // scope 7 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n         StorageLive(_7);                 // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        _7 = Result::<u32, Infallible>::Ok(_6); // scope 11 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        StorageLive(_8);                 // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        _8 = move ((_7 as Ok).0: u32);   // scope 12 at $SRC_DIR/core/src/result.rs:LL:COL\n-        _9 = Option::<u32>::Some(move _8); // scope 13 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_8);                 // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageLive(_5);                 // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _5 = Result::<u32, Infallible>::Ok(_4); // scope 11 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+        StorageLive(_6);                 // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _6 = move ((_5 as Ok).0: u32);   // scope 12 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _7 = Option::<u32>::Some(move _6); // scope 13 at $SRC_DIR/core/src/result.rs:LL:COL\n+        StorageDead(_6);                 // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageDead(_5);                 // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageLive(_13);                // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _8 = move ((_7 as Some).0: u32); // scope 14 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageDead(_13);                // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n         StorageDead(_7);                 // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        StorageLive(_17);                // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        _10 = move ((_9 as Some).0: u32); // scope 14 at $SRC_DIR/core/src/option.rs:LL:COL\n-        StorageDead(_17);                // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        StorageDead(_9);                 // scope 9 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        StorageDead(_5);                 // scope 7 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        _11 = unchecked_shl::<u32>(_1, move _10) -> [return: bb1, unwind unreachable]; // scope 7 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        _9 = unchecked_shl::<u32>(_1, move _8) -> [return: bb1, unwind unreachable]; // scope 7 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u32, u32) -> u32 {unchecked_shl::<u32>}, val: Value(<ZST>) }\n     }\n \n     bb1: {\n-        StorageDead(_10);                // scope 7 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        StorageDead(_4);                 // scope 5 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        StorageDead(_6);                 // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        StorageLive(_12);                // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        _12 = Ge(_2, const _);           // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        _13 = (move _11, move _12);      // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        StorageDead(_12);                // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        StorageDead(_11);                // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        _14 = (_13.0: u32);              // scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        _15 = (_13.1: bool);             // scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        StorageDead(_13);                // scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        StorageLive(_16);                // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n-        _16 = unlikely(_15) -> [return: bb2, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        StorageDead(_8);                 // scope 7 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageDead(_4);                 // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        _10 = Ge(_2, const _);           // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        _11 = move _9;                   // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageDead(_9);                 // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageLive(_12);                // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        _12 = unlikely(_10) -> [return: bb2, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/num/mod.rs:LL:COL\n                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(bool) -> bool {unlikely}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n-        switchInt(move _16) -> [0: bb3, otherwise: bb4]; // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n+        switchInt(move _12) -> [0: bb3, otherwise: bb4]; // scope 2 at $SRC_DIR/core/src/num/mod.rs:LL:COL\n     }\n \n     bb3: {\n-        _0 = Option::<u32>::Some(_14);   // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        _0 = Option::<u32>::Some(_11);   // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         goto -> bb5;                     // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n     }\n \n@@ -152,9 +136,9 @@ fn checked_shl(_1: u32, _2: u32) -> Option<u32> {\n     }\n \n     bb5: {\n-        StorageDead(_16);                // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        StorageDead(_15);                // scope 0 at $DIR/checked_ops.rs:+1:7: +1:23\n-        StorageDead(_14);                // scope 0 at $DIR/checked_ops.rs:+1:7: +1:23\n+        StorageDead(_12);                // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageDead(_11);                // scope 0 at $DIR/checked_ops.rs:+1:7: +1:23\n+        StorageDead(_10);                // scope 0 at $DIR/checked_ops.rs:+1:7: +1:23\n         return;                          // scope 0 at $DIR/checked_ops.rs:+2:2: +2:2\n     }\n }"}, {"sha": "a5002cd6afa1324dd6f0b6eb3999b0d9f4d1422d", "filename": "tests/mir-opt/pre-codegen/loops.int_range.PreCodegen.after.mir", "status": "modified", "additions": 65, "deletions": 17, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/d796c600ad53392c47dd5db3257612c0cb29d88a/tests%2Fmir-opt%2Fpre-codegen%2Floops.int_range.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d796c600ad53392c47dd5db3257612c0cb29d88a/tests%2Fmir-opt%2Fpre-codegen%2Floops.int_range.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Floops.int_range.PreCodegen.after.mir?ref=d796c600ad53392c47dd5db3257612c0cb29d88a", "patch": "@@ -7,17 +7,30 @@ fn int_range(_1: usize, _2: usize) -> () {\n     let mut _3: std::ops::Range<usize>;  // in scope 0 at $DIR/loops.rs:+1:14: +1:24\n     let mut _4: std::ops::Range<usize>;  // in scope 0 at $DIR/loops.rs:+1:14: +1:24\n     let mut _5: &mut std::ops::Range<usize>; // in scope 0 at $DIR/loops.rs:+1:14: +1:24\n-    let mut _6: std::option::Option<usize>; // in scope 0 at $DIR/loops.rs:+1:14: +1:24\n-    let mut _7: isize;                   // in scope 0 at $DIR/loops.rs:+1:5: +3:6\n-    let _9: ();                          // in scope 0 at $DIR/loops.rs:+1:14: +1:24\n+    let mut _9: std::option::Option<usize>; // in scope 0 at $DIR/loops.rs:+1:14: +1:24\n+    let mut _12: isize;                  // in scope 0 at $DIR/loops.rs:+1:5: +3:6\n+    let _14: ();                         // in scope 0 at $DIR/loops.rs:+1:14: +1:24\n     scope 1 {\n         debug iter => _4;                // in scope 1 at $DIR/loops.rs:+1:14: +1:24\n-        let _8: usize;                   // in scope 1 at $DIR/loops.rs:+1:9: +1:10\n+        let _13: usize;                  // in scope 1 at $DIR/loops.rs:+1:9: +1:10\n         scope 2 {\n-            debug i => _8;               // in scope 2 at $DIR/loops.rs:+1:9: +1:10\n+            debug i => _13;              // in scope 2 at $DIR/loops.rs:+1:9: +1:10\n         }\n         scope 4 (inlined iter::range::<impl Iterator for std::ops::Range<usize>>::next) { // at $DIR/loops.rs:8:14: 8:24\n             debug self => _5;            // in scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+            scope 5 (inlined <std::ops::Range<usize> as iter::range::RangeIteratorImpl>::spec_next) { // at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                debug self => _5;        // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let mut _6: &usize;      // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let mut _7: &usize;      // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let mut _8: bool;        // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let _10: usize;          // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let mut _11: usize;      // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                scope 6 {\n+                    debug old => _10;    // in scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                    scope 7 {\n+                    }\n+                }\n+            }\n         }\n     }\n     scope 3 (inlined <std::ops::Range<usize> as IntoIterator>::into_iter) { // at $DIR/loops.rs:8:14: 8:24\n@@ -32,39 +45,74 @@ fn int_range(_1: usize, _2: usize) -> () {\n     }\n \n     bb1: {\n-        StorageLive(_6);                 // scope 1 at $DIR/loops.rs:+1:14: +1:24\n+        StorageLive(_9);                 // scope 1 at $DIR/loops.rs:+1:14: +1:24\n         _5 = &mut _4;                    // scope 1 at $DIR/loops.rs:+1:14: +1:24\n-        _6 = <std::ops::Range<usize> as iter::range::RangeIteratorImpl>::spec_next(_5) -> bb2; // scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_10);                // scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_8);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_6);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _6 = &((*_5).0: usize);          // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_7);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _7 = &((*_5).1: usize);          // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _8 = <usize as PartialOrd>::lt(move _6, move _7) -> bb2; // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n-                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as iter::range::RangeIteratorImpl>::Item> {<std::ops::Range<usize> as iter::range::RangeIteratorImpl>::spec_next}, val: Value(<ZST>) }\n+                                         // + literal: Const { ty: for<'a, 'b> fn(&'a usize, &'b usize) -> bool {<usize as PartialOrd>::lt}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n-        _7 = discriminant(_6);           // scope 1 at $DIR/loops.rs:+1:14: +1:24\n-        switchInt(move _7) -> [0: bb3, 1: bb4, otherwise: bb6]; // scope 1 at $DIR/loops.rs:+1:14: +1:24\n+        StorageDead(_7);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageDead(_6);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        switchInt(move _8) -> [0: bb3, otherwise: bb4]; // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n     }\n \n     bb3: {\n-        StorageDead(_6);                 // scope 1 at $DIR/loops.rs:+3:5: +3:6\n+        _9 = Option::<usize>::None;      // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        goto -> bb6;                     // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+    }\n+\n+    bb4: {\n+        _10 = ((*_5).0: usize);          // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_11);                // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _11 = <usize as Step>::forward_unchecked(_10, const 1_usize) -> bb5; // scope 7 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // + literal: Const { ty: unsafe fn(usize, usize) -> usize {<usize as Step>::forward_unchecked}, val: Value(<ZST>) }\n+    }\n+\n+    bb5: {\n+        ((*_5).0: usize) = move _11;     // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageDead(_11);                // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _9 = Option::<usize>::Some(_10); // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        goto -> bb6;                     // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+    }\n+\n+    bb6: {\n+        StorageDead(_8);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageDead(_10);                // scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _12 = discriminant(_9);          // scope 1 at $DIR/loops.rs:+1:14: +1:24\n+        switchInt(move _12) -> [0: bb7, 1: bb8, otherwise: bb10]; // scope 1 at $DIR/loops.rs:+1:14: +1:24\n+    }\n+\n+    bb7: {\n+        StorageDead(_9);                 // scope 1 at $DIR/loops.rs:+3:5: +3:6\n         StorageDead(_4);                 // scope 0 at $DIR/loops.rs:+3:5: +3:6\n         return;                          // scope 0 at $DIR/loops.rs:+4:2: +4:2\n     }\n \n-    bb4: {\n-        _8 = ((_6 as Some).0: usize);    // scope 1 at $DIR/loops.rs:+1:9: +1:10\n-        _9 = opaque::<usize>(_8) -> bb5; // scope 2 at $DIR/loops.rs:+2:9: +2:18\n+    bb8: {\n+        _13 = ((_9 as Some).0: usize);   // scope 1 at $DIR/loops.rs:+1:9: +1:10\n+        _14 = opaque::<usize>(_13) -> bb9; // scope 2 at $DIR/loops.rs:+2:9: +2:18\n                                          // mir::Constant\n                                          // + span: $DIR/loops.rs:9:9: 9:15\n                                          // + literal: Const { ty: fn(usize) {opaque::<usize>}, val: Value(<ZST>) }\n     }\n \n-    bb5: {\n-        StorageDead(_6);                 // scope 1 at $DIR/loops.rs:+3:5: +3:6\n+    bb9: {\n+        StorageDead(_9);                 // scope 1 at $DIR/loops.rs:+3:5: +3:6\n         goto -> bb1;                     // scope 1 at $DIR/loops.rs:+1:5: +3:6\n     }\n \n-    bb6: {\n+    bb10: {\n         unreachable;                     // scope 1 at $DIR/loops.rs:+1:14: +1:24\n     }\n }"}, {"sha": "91c8f299fdb209ee61c4bd4319badbcb69e31a2b", "filename": "tests/mir-opt/pre-codegen/slice_filter.variant_a-{closure#0}.PreCodegen.after.mir", "status": "modified", "additions": 43, "deletions": 46, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/d796c600ad53392c47dd5db3257612c0cb29d88a/tests%2Fmir-opt%2Fpre-codegen%2Fslice_filter.variant_a-%7Bclosure%230%7D.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d796c600ad53392c47dd5db3257612c0cb29d88a/tests%2Fmir-opt%2Fpre-codegen%2Fslice_filter.variant_a-%7Bclosure%230%7D.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fslice_filter.variant_a-%7Bclosure%230%7D.PreCodegen.after.mir?ref=d796c600ad53392c47dd5db3257612c0cb29d88a", "patch": "@@ -14,11 +14,11 @@ fn variant_a::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:7:25: 7:39], _2\n     let _12: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:45: +0:46\n     let mut _13: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:45: +0:46\n     let mut _18: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:46\n-    let mut _19: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:56\n-    let mut _20: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:51\n-    let _21: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n-    let mut _22: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n-    let mut _27: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:56\n+    let mut _19: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:51\n+    let _20: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n+    let mut _21: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:55: +0:56\n+    let mut _26: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:50: +0:56\n+    let mut _27: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:40: +0:56\n     let mut _28: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:60: +0:61\n     let _29: &usize;                     // in scope 0 at $DIR/slice_filter.rs:+0:65: +0:66\n     let mut _30: &&usize;                // in scope 0 at $DIR/slice_filter.rs:+0:65: +0:66\n@@ -58,15 +58,15 @@ fn variant_a::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:7:25: 7:39], _2\n             }\n         }\n         scope 6 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:7:50: 7:56\n-            debug self => _20;           // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-            debug other => _22;          // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+            debug self => _19;           // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+            debug other => _21;          // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+            let mut _22: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n             let mut _23: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-            let mut _24: &usize;         // in scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n             scope 7 (inlined cmp::impls::<impl PartialOrd for usize>::le) { // at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                debug self => _23;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                debug other => _24;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                debug self => _22;       // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                debug other => _23;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+                let mut _24: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n                 let mut _25: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-                let mut _26: usize;      // in scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n             }\n         }\n         scope 8 (inlined cmp::impls::<impl PartialOrd for &usize>::le) { // at $DIR/slice_filter.rs:7:70: 7:76\n@@ -96,7 +96,7 @@ fn variant_a::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:7:25: 7:39], _2\n         StorageLive(_10);                // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n         _9 = deref_copy (*_2);           // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n         _10 = &((*_9).3: usize);         // scope 0 at $DIR/slice_filter.rs:+0:36: +0:37\n-        StorageLive(_19);                // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+        StorageLive(_27);                // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n         StorageLive(_18);                // scope 1 at $DIR/slice_filter.rs:+0:40: +0:46\n         StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n         _11 = &_4;                       // scope 1 at $DIR/slice_filter.rs:+0:40: +0:41\n@@ -120,41 +120,38 @@ fn variant_a::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:7:25: 7:39], _2\n     }\n \n     bb1: {\n-        _19 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+        StorageDead(_26);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+        StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n         goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n     }\n \n     bb2: {\n-        StorageLive(_27);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n-        StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n-        _20 = &_10;                      // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n-        StorageLive(_22);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+        StorageLive(_26);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:56\n+        StorageLive(_19);                // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n+        _19 = &_10;                      // scope 1 at $DIR/slice_filter.rs:+0:50: +0:51\n         StorageLive(_21);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-        _21 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-        _22 = &_21;                      // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-        _23 = deref_copy (*_20);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-        _24 = deref_copy (*_22);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageLive(_20);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+        _20 = _6;                        // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+        _21 = &_20;                      // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+        _22 = deref_copy (*_19);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _23 = deref_copy (*_21);         // scope 6 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        StorageLive(_24);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _24 = (*_22);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n         StorageLive(_25);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n         _25 = (*_23);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-        StorageLive(_26);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-        _26 = (*_24);                    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-        _27 = Le(move _25, move _26);    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-        StorageDead(_26);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n+        _26 = Le(move _24, move _25);    // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n         StorageDead(_25);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n-        StorageDead(_21);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-        StorageDead(_22);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+        StorageDead(_24);                // scope 7 at $SRC_DIR/core/src/cmp.rs:LL:COL\n         StorageDead(_20);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-        _19 = move _27;                  // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n-        goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n-    }\n-\n-    bb3: {\n-        StorageDead(_27);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+        StorageDead(_21);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+        StorageDead(_19);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n+        _27 = move _26;                  // scope 1 at $DIR/slice_filter.rs:+0:40: +0:56\n+        StorageDead(_26);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n         StorageDead(_18);                // scope 1 at $DIR/slice_filter.rs:+0:55: +0:56\n-        switchInt(move _19) -> [0: bb4, otherwise: bb8]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+        switchInt(move _27) -> [0: bb3, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n     }\n \n-    bb4: {\n+    bb3: {\n         StorageLive(_36);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n         StorageLive(_35);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:66\n         StorageLive(_28);                // scope 1 at $DIR/slice_filter.rs:+0:60: +0:61\n@@ -175,15 +172,15 @@ fn variant_a::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:7:25: 7:39], _2\n         StorageDead(_29);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n         StorageDead(_30);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n         StorageDead(_28);                // scope 1 at $DIR/slice_filter.rs:+0:65: +0:66\n-        switchInt(move _35) -> [0: bb5, otherwise: bb6]; // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+        switchInt(move _35) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n     }\n \n-    bb5: {\n+    bb4: {\n         _36 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n-        goto -> bb7;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+        goto -> bb6;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n     }\n \n-    bb6: {\n+    bb5: {\n         StorageLive(_44);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:76\n         StorageLive(_37);                // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n         _37 = &_6;                       // scope 1 at $DIR/slice_filter.rs:+0:70: +0:71\n@@ -204,24 +201,24 @@ fn variant_a::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:7:25: 7:39], _2\n         StorageDead(_39);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n         StorageDead(_37);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n         _36 = move _44;                  // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n-        goto -> bb7;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n+        goto -> bb6;                     // scope 1 at $DIR/slice_filter.rs:+0:60: +0:76\n     }\n \n-    bb7: {\n+    bb6: {\n         StorageDead(_44);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n         StorageDead(_35);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n         _0 = move _36;                   // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n-        goto -> bb9;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+        goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n     }\n \n-    bb8: {\n+    bb7: {\n         _0 = const true;                 // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n-        goto -> bb9;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n+        goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:40: +0:76\n     }\n \n-    bb9: {\n+    bb8: {\n         StorageDead(_36);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n-        StorageDead(_19);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n+        StorageDead(_27);                // scope 1 at $DIR/slice_filter.rs:+0:75: +0:76\n         StorageDead(_10);                // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n         StorageDead(_8);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76\n         StorageDead(_6);                 // scope 0 at $DIR/slice_filter.rs:+0:75: +0:76"}, {"sha": "9f5fe95a8b4b0d118222f924e293e4a1c56b42a5", "filename": "tests/mir-opt/pre-codegen/slice_filter.variant_b-{closure#0}.PreCodegen.after.mir", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d796c600ad53392c47dd5db3257612c0cb29d88a/tests%2Fmir-opt%2Fpre-codegen%2Fslice_filter.variant_b-%7Bclosure%230%7D.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d796c600ad53392c47dd5db3257612c0cb29d88a/tests%2Fmir-opt%2Fpre-codegen%2Fslice_filter.variant_b-%7Bclosure%230%7D.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fslice_filter.variant_b-%7Bclosure%230%7D.PreCodegen.after.mir?ref=d796c600ad53392c47dd5db3257612c0cb29d88a", "patch": "@@ -11,8 +11,8 @@ fn variant_b::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:11:25: 11:41],\n     let mut _9: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40\n     let _10: usize;                      // in scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n     let mut _11: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:42: +0:48\n-    let mut _12: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:42: +0:58\n-    let mut _13: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:52: +0:58\n+    let mut _12: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:52: +0:58\n+    let mut _13: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:42: +0:58\n     let mut _14: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:62: +0:68\n     let mut _15: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:62: +0:78\n     let mut _16: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:72: +0:78\n@@ -32,64 +32,61 @@ fn variant_b::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:11:25: 11:41],\n         _8 = ((*_7).2: usize);           // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36\n         _9 = deref_copy (*_2);           // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n         _10 = ((*_9).3: usize);          // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39\n-        StorageLive(_12);                // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n+        StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n         StorageLive(_11);                // scope 1 at $DIR/slice_filter.rs:+0:42: +0:48\n         _11 = Le(_4, _8);                // scope 1 at $DIR/slice_filter.rs:+0:42: +0:48\n         switchInt(move _11) -> [0: bb1, otherwise: bb2]; // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n     }\n \n     bb1: {\n-        _12 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n+        StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n+        StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n         goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n     }\n \n     bb2: {\n-        StorageLive(_13);                // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58\n-        _13 = Le(_10, _6);               // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58\n-        _12 = move _13;                  // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n-        goto -> bb3;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n-    }\n-\n-    bb3: {\n-        StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n+        StorageLive(_12);                // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58\n+        _12 = Le(_10, _6);               // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58\n+        _13 = move _12;                  // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58\n+        StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n         StorageDead(_11);                // scope 1 at $DIR/slice_filter.rs:+0:57: +0:58\n-        switchInt(move _12) -> [0: bb4, otherwise: bb8]; // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n+        switchInt(move _13) -> [0: bb3, otherwise: bb7]; // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n     }\n \n-    bb4: {\n+    bb3: {\n         StorageLive(_15);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n         StorageLive(_14);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:68\n         _14 = Le(_8, _4);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:68\n-        switchInt(move _14) -> [0: bb5, otherwise: bb6]; // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+        switchInt(move _14) -> [0: bb4, otherwise: bb5]; // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n     }\n \n-    bb5: {\n+    bb4: {\n         _15 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n-        goto -> bb7;                     // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+        goto -> bb6;                     // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n     }\n \n-    bb6: {\n+    bb5: {\n         StorageLive(_16);                // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n         _16 = Le(_6, _10);               // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78\n         _15 = move _16;                  // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n-        goto -> bb7;                     // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n+        goto -> bb6;                     // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78\n     }\n \n-    bb7: {\n+    bb6: {\n         StorageDead(_16);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n         StorageDead(_14);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n         _0 = move _15;                   // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n-        goto -> bb9;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n+        goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n     }\n \n-    bb8: {\n+    bb7: {\n         _0 = const true;                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n-        goto -> bb9;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n+        goto -> bb8;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78\n     }\n \n-    bb9: {\n+    bb8: {\n         StorageDead(_15);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n-        StorageDead(_12);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n+        StorageDead(_13);                // scope 1 at $DIR/slice_filter.rs:+0:77: +0:78\n         return;                          // scope 0 at $DIR/slice_filter.rs:+0:78: +0:78\n     }\n }"}, {"sha": "4dd11c1e529538fa8aa85c792766f556f15cc79f", "filename": "tests/mir-opt/pre-codegen/slice_iter.enumerated_loop.PreCodegen.after.mir", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d796c600ad53392c47dd5db3257612c0cb29d88a/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.enumerated_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d796c600ad53392c47dd5db3257612c0cb29d88a/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.enumerated_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.enumerated_loop.PreCodegen.after.mir?ref=d796c600ad53392c47dd5db3257612c0cb29d88a", "patch": "@@ -42,21 +42,20 @@ fn enumerated_loop(_1: &[T], _2: impl Fn(usize, &T)) -> () {\n                         scope 13 (inlined NonNull::<T>::new_unchecked) { // at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n                             debug ptr => _9; // in scope 13 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n                             let mut _10: *const T; // in scope 13 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n-                            let mut _24: *mut T; // in scope 13 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n                             scope 14 {\n                                 scope 15 (inlined NonNull::<T>::new_unchecked::runtime::<T>) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n-                                    debug ptr => _24; // in scope 15 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                                    debug ptr => _9; // in scope 15 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n                                     scope 16 (inlined ptr::mut_ptr::<impl *mut T>::is_null) { // at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n-                                        debug self => _24; // in scope 16 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-                                        let mut _25: *mut u8; // in scope 16 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                        debug self => _9; // in scope 16 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                        let mut _24: *mut u8; // in scope 16 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n                                         scope 17 {\n                                             scope 18 (inlined ptr::mut_ptr::<impl *mut T>::is_null::runtime_impl) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-                                                debug ptr => _25; // in scope 18 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                debug ptr => _24; // in scope 18 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n                                                 scope 19 (inlined ptr::mut_ptr::<impl *mut u8>::addr) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-                                                    debug self => _25; // in scope 19 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                    debug self => _24; // in scope 19 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n                                                     scope 20 {\n                                                         scope 21 (inlined ptr::mut_ptr::<impl *mut u8>::cast::<()>) { // at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n-                                                            debug self => _25; // in scope 21 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n+                                                            debug self => _24; // in scope 21 at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n                                                         }\n                                                     }\n                                                 }\n@@ -132,10 +131,8 @@ fn enumerated_loop(_1: &[T], _2: impl Fn(usize, &T)) -> () {\n         _9 = _4 as *mut T (PtrToPtr);    // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n         StorageLive(_10);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n         StorageLive(_24);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n-        StorageLive(_25);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n         _10 = _9 as *const T (Pointer(MutToConstPointer)); // scope 14 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n         _11 = NonNull::<T> { pointer: _10 }; // scope 14 at $SRC_DIR/core/src/ptr/non_null.rs:LL:COL\n-        StorageDead(_25);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n         StorageDead(_24);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n         StorageDead(_10);                // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL\n         StorageDead(_9);                 // scope 7 at $SRC_DIR/core/src/slice/iter.rs:LL:COL"}, {"sha": "ca7a4a64f4574243380b3e0257d2decfa743ad55", "filename": "tests/mir-opt/pre-codegen/slice_iter.range_loop.PreCodegen.after.mir", "status": "modified", "additions": 86, "deletions": 38, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/d796c600ad53392c47dd5db3257612c0cb29d88a/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.range_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/d796c600ad53392c47dd5db3257612c0cb29d88a/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.range_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpre-codegen%2Fslice_iter.range_loop.PreCodegen.after.mir?ref=d796c600ad53392c47dd5db3257612c0cb29d88a", "patch": "@@ -8,25 +8,38 @@ fn range_loop(_1: &[T], _2: impl Fn(usize, &T)) -> () {\n     let mut _4: std::ops::Range<usize>;  // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:28\n     let mut _5: std::ops::Range<usize>;  // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:28\n     let mut _6: &mut std::ops::Range<usize>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:28\n-    let mut _7: std::option::Option<usize>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:28\n-    let mut _8: isize;                   // in scope 0 at $DIR/slice_iter.rs:+1:5: +4:6\n-    let mut _10: usize;                  // in scope 0 at $DIR/slice_iter.rs:+2:18: +2:26\n-    let mut _11: bool;                   // in scope 0 at $DIR/slice_iter.rs:+2:18: +2:26\n-    let mut _13: &impl Fn(usize, &T);    // in scope 0 at $DIR/slice_iter.rs:+3:9: +3:10\n-    let mut _14: (usize, &T);            // in scope 0 at $DIR/slice_iter.rs:+3:9: +3:16\n-    let _15: ();                         // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:28\n+    let mut _10: std::option::Option<usize>; // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:28\n+    let mut _13: isize;                  // in scope 0 at $DIR/slice_iter.rs:+1:5: +4:6\n+    let mut _15: usize;                  // in scope 0 at $DIR/slice_iter.rs:+2:18: +2:26\n+    let mut _16: bool;                   // in scope 0 at $DIR/slice_iter.rs:+2:18: +2:26\n+    let mut _18: &impl Fn(usize, &T);    // in scope 0 at $DIR/slice_iter.rs:+3:9: +3:10\n+    let mut _19: (usize, &T);            // in scope 0 at $DIR/slice_iter.rs:+3:9: +3:16\n+    let _20: ();                         // in scope 0 at $DIR/slice_iter.rs:+1:14: +1:28\n     scope 1 {\n         debug iter => _5;                // in scope 1 at $DIR/slice_iter.rs:+1:14: +1:28\n-        let _9: usize;                   // in scope 1 at $DIR/slice_iter.rs:+1:9: +1:10\n+        let _14: usize;                  // in scope 1 at $DIR/slice_iter.rs:+1:9: +1:10\n         scope 2 {\n-            debug i => _9;               // in scope 2 at $DIR/slice_iter.rs:+1:9: +1:10\n-            let _12: &T;                 // in scope 2 at $DIR/slice_iter.rs:+2:13: +2:14\n+            debug i => _14;              // in scope 2 at $DIR/slice_iter.rs:+1:9: +1:10\n+            let _17: &T;                 // in scope 2 at $DIR/slice_iter.rs:+2:13: +2:14\n             scope 3 {\n-                debug x => _12;          // in scope 3 at $DIR/slice_iter.rs:+2:13: +2:14\n+                debug x => _17;          // in scope 3 at $DIR/slice_iter.rs:+2:13: +2:14\n             }\n         }\n         scope 5 (inlined iter::range::<impl Iterator for std::ops::Range<usize>>::next) { // at $DIR/slice_iter.rs:49:14: 49:28\n             debug self => _6;            // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+            scope 6 (inlined <std::ops::Range<usize> as iter::range::RangeIteratorImpl>::spec_next) { // at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                debug self => _6;        // in scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let mut _7: &usize;      // in scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let mut _8: &usize;      // in scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let mut _9: bool;        // in scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let _11: usize;          // in scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                let mut _12: usize;      // in scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                scope 7 {\n+                    debug old => _11;    // in scope 7 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                    scope 8 {\n+                    }\n+                }\n+            }\n         }\n     }\n     scope 4 (inlined <std::ops::Range<usize> as IntoIterator>::into_iter) { // at $DIR/slice_iter.rs:49:14: 49:28\n@@ -44,64 +57,99 @@ fn range_loop(_1: &[T], _2: impl Fn(usize, &T)) -> () {\n     }\n \n     bb1: {\n-        StorageLive(_7);                 // scope 1 at $DIR/slice_iter.rs:+1:14: +1:28\n+        StorageLive(_10);                // scope 1 at $DIR/slice_iter.rs:+1:14: +1:28\n         _6 = &mut _5;                    // scope 1 at $DIR/slice_iter.rs:+1:14: +1:28\n-        _7 = <std::ops::Range<usize> as iter::range::RangeIteratorImpl>::spec_next(_6) -> [return: bb2, unwind: bb9]; // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_11);                // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_9);                 // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_7);                 // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _7 = &((*_6).0: usize);          // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_8);                 // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _8 = &((*_6).1: usize);          // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _9 = <usize as PartialOrd>::lt(move _7, move _8) -> [return: bb2, unwind: bb13]; // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n-                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as iter::range::RangeIteratorImpl>::Item> {<std::ops::Range<usize> as iter::range::RangeIteratorImpl>::spec_next}, val: Value(<ZST>) }\n+                                         // + literal: Const { ty: for<'a, 'b> fn(&'a usize, &'b usize) -> bool {<usize as PartialOrd>::lt}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n-        _8 = discriminant(_7);           // scope 1 at $DIR/slice_iter.rs:+1:14: +1:28\n-        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb8]; // scope 1 at $DIR/slice_iter.rs:+1:14: +1:28\n+        StorageDead(_8);                 // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageDead(_7);                 // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        switchInt(move _9) -> [0: bb3, otherwise: bb4]; // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n     }\n \n     bb3: {\n-        StorageDead(_7);                 // scope 1 at $DIR/slice_iter.rs:+4:5: +4:6\n-        StorageDead(_5);                 // scope 0 at $DIR/slice_iter.rs:+4:5: +4:6\n-        drop(_2) -> bb4;                 // scope 0 at $DIR/slice_iter.rs:+5:1: +5:2\n+        _10 = Option::<usize>::None;     // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        goto -> bb6;                     // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n     }\n \n     bb4: {\n-        return;                          // scope 0 at $DIR/slice_iter.rs:+5:2: +5:2\n+        _11 = ((*_6).0: usize);          // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageLive(_12);                // scope 7 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _12 = <usize as Step>::forward_unchecked(_11, const 1_usize) -> [return: bb5, unwind: bb13]; // scope 8 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/iter/range.rs:LL:COL\n+                                         // + literal: Const { ty: unsafe fn(usize, usize) -> usize {<usize as Step>::forward_unchecked}, val: Value(<ZST>) }\n     }\n \n     bb5: {\n-        _9 = ((_7 as Some).0: usize);    // scope 1 at $DIR/slice_iter.rs:+1:9: +1:10\n-        _10 = Len((*_1));                // scope 2 at $DIR/slice_iter.rs:+2:18: +2:26\n-        _11 = Lt(_9, _10);               // scope 2 at $DIR/slice_iter.rs:+2:18: +2:26\n-        assert(move _11, \"index out of bounds: the length is {} but the index is {}\", move _10, _9) -> [success: bb6, unwind: bb9]; // scope 2 at $DIR/slice_iter.rs:+2:18: +2:26\n+        ((*_6).0: usize) = move _12;     // scope 7 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageDead(_12);                // scope 7 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _10 = Option::<usize>::Some(_11); // scope 7 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        goto -> bb6;                     // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n     }\n \n     bb6: {\n-        _12 = &(*_1)[_9];                // scope 2 at $DIR/slice_iter.rs:+2:17: +2:26\n-        StorageLive(_13);                // scope 3 at $DIR/slice_iter.rs:+3:9: +3:10\n-        _13 = &_2;                       // scope 3 at $DIR/slice_iter.rs:+3:9: +3:10\n-        StorageLive(_14);                // scope 3 at $DIR/slice_iter.rs:+3:9: +3:16\n-        _14 = (_9, _12);                 // scope 3 at $DIR/slice_iter.rs:+3:9: +3:16\n-        _15 = <impl Fn(usize, &T) as Fn<(usize, &T)>>::call(move _13, move _14) -> [return: bb7, unwind: bb9]; // scope 3 at $DIR/slice_iter.rs:+3:9: +3:16\n+        StorageDead(_9);                 // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        StorageDead(_11);                // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL\n+        _13 = discriminant(_10);         // scope 1 at $DIR/slice_iter.rs:+1:14: +1:28\n+        switchInt(move _13) -> [0: bb7, 1: bb9, otherwise: bb12]; // scope 1 at $DIR/slice_iter.rs:+1:14: +1:28\n+    }\n+\n+    bb7: {\n+        StorageDead(_10);                // scope 1 at $DIR/slice_iter.rs:+4:5: +4:6\n+        StorageDead(_5);                 // scope 0 at $DIR/slice_iter.rs:+4:5: +4:6\n+        drop(_2) -> bb8;                 // scope 0 at $DIR/slice_iter.rs:+5:1: +5:2\n+    }\n+\n+    bb8: {\n+        return;                          // scope 0 at $DIR/slice_iter.rs:+5:2: +5:2\n+    }\n+\n+    bb9: {\n+        _14 = ((_10 as Some).0: usize);  // scope 1 at $DIR/slice_iter.rs:+1:9: +1:10\n+        _15 = Len((*_1));                // scope 2 at $DIR/slice_iter.rs:+2:18: +2:26\n+        _16 = Lt(_14, _15);              // scope 2 at $DIR/slice_iter.rs:+2:18: +2:26\n+        assert(move _16, \"index out of bounds: the length is {} but the index is {}\", move _15, _14) -> [success: bb10, unwind: bb13]; // scope 2 at $DIR/slice_iter.rs:+2:18: +2:26\n+    }\n+\n+    bb10: {\n+        _17 = &(*_1)[_14];               // scope 2 at $DIR/slice_iter.rs:+2:17: +2:26\n+        StorageLive(_18);                // scope 3 at $DIR/slice_iter.rs:+3:9: +3:10\n+        _18 = &_2;                       // scope 3 at $DIR/slice_iter.rs:+3:9: +3:10\n+        StorageLive(_19);                // scope 3 at $DIR/slice_iter.rs:+3:9: +3:16\n+        _19 = (_14, _17);                // scope 3 at $DIR/slice_iter.rs:+3:9: +3:16\n+        _20 = <impl Fn(usize, &T) as Fn<(usize, &T)>>::call(move _18, move _19) -> [return: bb11, unwind: bb13]; // scope 3 at $DIR/slice_iter.rs:+3:9: +3:16\n                                          // mir::Constant\n                                          // + span: $DIR/slice_iter.rs:51:9: 51:10\n                                          // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a impl Fn(usize, &T), (usize, &T)) -> <impl Fn(usize, &T) as FnOnce<(usize, &T)>>::Output {<impl Fn(usize, &T) as Fn<(usize, &T)>>::call}, val: Value(<ZST>) }\n     }\n \n-    bb7: {\n-        StorageDead(_14);                // scope 3 at $DIR/slice_iter.rs:+3:15: +3:16\n-        StorageDead(_13);                // scope 3 at $DIR/slice_iter.rs:+3:15: +3:16\n-        StorageDead(_7);                 // scope 1 at $DIR/slice_iter.rs:+4:5: +4:6\n+    bb11: {\n+        StorageDead(_19);                // scope 3 at $DIR/slice_iter.rs:+3:15: +3:16\n+        StorageDead(_18);                // scope 3 at $DIR/slice_iter.rs:+3:15: +3:16\n+        StorageDead(_10);                // scope 1 at $DIR/slice_iter.rs:+4:5: +4:6\n         goto -> bb1;                     // scope 1 at $DIR/slice_iter.rs:+1:5: +4:6\n     }\n \n-    bb8: {\n+    bb12: {\n         unreachable;                     // scope 1 at $DIR/slice_iter.rs:+1:14: +1:28\n     }\n \n-    bb9 (cleanup): {\n-        drop(_2) -> [return: bb10, unwind terminate]; // scope 0 at $DIR/slice_iter.rs:+5:1: +5:2\n+    bb13 (cleanup): {\n+        drop(_2) -> [return: bb14, unwind terminate]; // scope 0 at $DIR/slice_iter.rs:+5:1: +5:2\n     }\n \n-    bb10 (cleanup): {\n+    bb14 (cleanup): {\n         resume;                          // scope 0 at $DIR/slice_iter.rs:+0:1: +5:2\n     }\n }"}]}