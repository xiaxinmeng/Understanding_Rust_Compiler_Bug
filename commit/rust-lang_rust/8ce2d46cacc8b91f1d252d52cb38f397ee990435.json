{"sha": "8ce2d46cacc8b91f1d252d52cb38f397ee990435", "node_id": "C_kwDOAAsO6NoAKDhjZTJkNDZjYWNjOGI5MWYxZDI1MmQ1MmNiMzhmMzk3ZWU5OTA0MzU", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-02-17T18:43:59Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-02-17T19:04:10Z"}, "message": "Check for `cfg` attrubutes before linting `match` expressions", "tree": {"sha": "8d53186846f9cd2cc8d82e912822c5e73da77a58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d53186846f9cd2cc8d82e912822c5e73da77a58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ce2d46cacc8b91f1d252d52cb38f397ee990435", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ce2d46cacc8b91f1d252d52cb38f397ee990435", "html_url": "https://github.com/rust-lang/rust/commit/8ce2d46cacc8b91f1d252d52cb38f397ee990435", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ce2d46cacc8b91f1d252d52cb38f397ee990435/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bfcbf4f027fea5096e6a721b1b73fbf057e14cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bfcbf4f027fea5096e6a721b1b73fbf057e14cf", "html_url": "https://github.com/rust-lang/rust/commit/9bfcbf4f027fea5096e6a721b1b73fbf057e14cf"}], "stats": {"total": 195, "additions": 171, "deletions": 24}, "files": [{"sha": "14dd7cb1dacbb37877d87402b2eac31e34e70401", "filename": "clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 98, "deletions": 21, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/8ce2d46cacc8b91f1d252d52cb38f397ee990435/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ce2d46cacc8b91f1d252d52cb38f397ee990435/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=8ce2d46cacc8b91f1d252d52cb38f397ee990435", "patch": "@@ -1,8 +1,11 @@\n+use clippy_utils::source::{snippet_opt, walk_span_to_context};\n use clippy_utils::{meets_msrv, msrvs};\n-use rustc_hir::{Expr, ExprKind, Local, MatchSource, Pat};\n+use rustc_hir::{Arm, Expr, ExprKind, Local, MatchSource, Pat};\n+use rustc_lexer::{tokenize, TokenKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::{Span, SpanData, SyntaxContext};\n \n mod infalliable_detructuring_match;\n mod match_as_ref;\n@@ -605,29 +608,33 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n         }\n \n         if let ExprKind::Match(ex, arms, source) = expr.kind {\n-            if source == MatchSource::Normal {\n-                if !(meets_msrv(self.msrv.as_ref(), &msrvs::MATCHES_MACRO)\n-                    && match_like_matches::check_match(cx, expr, ex, arms))\n-                {\n-                    match_same_arms::check(cx, arms);\n-                }\n+            if !contains_cfg_arm(cx, expr, ex, arms) {\n+                if source == MatchSource::Normal {\n+                    if !(meets_msrv(self.msrv.as_ref(), &msrvs::MATCHES_MACRO)\n+                        && match_like_matches::check_match(cx, expr, ex, arms))\n+                    {\n+                        match_same_arms::check(cx, arms);\n+                    }\n+\n+                    redundant_pattern_match::check_match(cx, expr, ex, arms);\n+                    single_match::check(cx, ex, arms, expr);\n+                    match_bool::check(cx, ex, arms, expr);\n+                    overlapping_arms::check(cx, ex, arms);\n+                    match_wild_enum::check(cx, ex, arms);\n+                    match_as_ref::check(cx, ex, arms, expr);\n \n-                redundant_pattern_match::check_match(cx, expr, ex, arms);\n-                single_match::check(cx, ex, arms, expr);\n-                match_bool::check(cx, ex, arms, expr);\n-                overlapping_arms::check(cx, ex, arms);\n-                match_wild_err_arm::check(cx, ex, arms);\n-                match_wild_enum::check(cx, ex, arms);\n-                match_as_ref::check(cx, ex, arms, expr);\n-                wild_in_or_pats::check(cx, arms);\n-\n-                if self.infallible_destructuring_match_linted {\n-                    self.infallible_destructuring_match_linted = false;\n-                } else {\n-                    match_single_binding::check(cx, ex, arms, expr);\n+                    if self.infallible_destructuring_match_linted {\n+                        self.infallible_destructuring_match_linted = false;\n+                    } else {\n+                        match_single_binding::check(cx, ex, arms, expr);\n+                    }\n                 }\n+                match_ref_pats::check(cx, ex, arms.iter().map(|el| el.pat), expr);\n             }\n-            match_ref_pats::check(cx, ex, arms.iter().map(|el| el.pat), expr);\n+\n+            // These don't depend on a relationship between multiple arms\n+            match_wild_err_arm::check(cx, ex, arms);\n+            wild_in_or_pats::check(cx, arms);\n         } else {\n             if meets_msrv(self.msrv.as_ref(), &msrvs::MATCHES_MACRO) {\n                 match_like_matches::check(cx, expr);\n@@ -646,3 +653,73 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n \n     extract_msrv_attr!(LateContext);\n }\n+\n+/// Checks if there are any arms with a `#[cfg(..)]` attribute.\n+fn contains_cfg_arm(cx: &LateContext<'_>, e: &Expr<'_>, scrutinee: &Expr<'_>, arms: &[Arm<'_>]) -> bool {\n+    let Some(scrutinee_span) = walk_span_to_context(scrutinee.span, SyntaxContext::root()) else {\n+        // Shouldn't happen, but treat this as though a `cfg` attribute were found\n+        return true;\n+    };\n+\n+    let start = scrutinee_span.hi();\n+    let mut arm_spans = arms.iter().map(|arm| {\n+        let data = arm.span.data();\n+        (data.ctxt == SyntaxContext::root()).then(|| (data.lo, data.hi))\n+    });\n+    let end = e.span.hi();\n+\n+    let found = arm_spans.try_fold(start, |start, range| {\n+        let Some((end, next_start)) = range else {\n+            // Shouldn't happen, but treat this as though a `cfg` attribute were found\n+            return Err(());\n+        };\n+        let span = SpanData {\n+            lo: start,\n+            hi: end,\n+            ctxt: SyntaxContext::root(),\n+            parent: None,\n+        }\n+        .span();\n+        (!span_contains_cfg(cx, span)).then(|| next_start).ok_or(())\n+    });\n+    match found {\n+        Ok(start) => {\n+            let span = SpanData {\n+                lo: start,\n+                hi: end,\n+                ctxt: SyntaxContext::root(),\n+                parent: None,\n+            }\n+            .span();\n+            span_contains_cfg(cx, span)\n+        },\n+        Err(()) => true,\n+    }\n+}\n+\n+fn span_contains_cfg(cx: &LateContext<'_>, s: Span) -> bool {\n+    let Some(snip) = snippet_opt(cx, s) else {\n+        // Assume true. This would require either an invalid span, or one which crosses file boundaries.\n+        return true;\n+    };\n+    let mut pos = 0usize;\n+    let mut iter = tokenize(&snip).map(|t| {\n+        let start = pos;\n+        pos += t.len;\n+        (t.kind, start..pos)\n+    });\n+    while iter.any(|(t, _)| matches!(t, TokenKind::Pound)) {\n+        let mut iter = iter.by_ref().skip_while(|(t, _)| {\n+            matches!(\n+                t,\n+                TokenKind::Whitespace | TokenKind::LineComment { .. } | TokenKind::BlockComment { .. }\n+            )\n+        });\n+        if matches!(iter.next(), Some((TokenKind::OpenBracket, _)))\n+            && matches!(iter.next(), Some((TokenKind::Ident, range)) if &snip[range.clone()] == \"cfg\")\n+        {\n+            return true;\n+        }\n+    }\n+    false\n+}"}, {"sha": "ddfa1e741ada439e347229fe090e7ad508a9dffe", "filename": "tests/ui/match_as_ref.fixed", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ce2d46cacc8b91f1d252d52cb38f397ee990435/tests%2Fui%2Fmatch_as_ref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8ce2d46cacc8b91f1d252d52cb38f397ee990435/tests%2Fui%2Fmatch_as_ref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_as_ref.fixed?ref=8ce2d46cacc8b91f1d252d52cb38f397ee990435", "patch": "@@ -32,4 +32,12 @@ mod issue4437 {\n     }\n }\n \n-fn main() {}\n+fn main() {\n+    // Don't lint\n+    let _ = match Some(0) {\n+        #[cfg(feature = \"foo\")]\n+        Some(ref x) if *x > 50 => None,\n+        Some(ref x) => Some(x),\n+        None => None,\n+    };\n+}"}, {"sha": "025d475ae13dba80d01d37a0c4f73689fd68d6cb", "filename": "tests/ui/match_as_ref.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ce2d46cacc8b91f1d252d52cb38f397ee990435/tests%2Fui%2Fmatch_as_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ce2d46cacc8b91f1d252d52cb38f397ee990435/tests%2Fui%2Fmatch_as_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_as_ref.rs?ref=8ce2d46cacc8b91f1d252d52cb38f397ee990435", "patch": "@@ -41,4 +41,12 @@ mod issue4437 {\n     }\n }\n \n-fn main() {}\n+fn main() {\n+    // Don't lint\n+    let _ = match Some(0) {\n+        #[cfg(feature = \"foo\")]\n+        Some(ref x) if *x > 50 => None,\n+        Some(ref x) => Some(x),\n+        None => None,\n+    };\n+}"}, {"sha": "bcc999a49428daf281a2317026c5ef83da37a2b5", "filename": "tests/ui/match_bool.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ce2d46cacc8b91f1d252d52cb38f397ee990435/tests%2Fui%2Fmatch_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ce2d46cacc8b91f1d252d52cb38f397ee990435/tests%2Fui%2Fmatch_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_bool.rs?ref=8ce2d46cacc8b91f1d252d52cb38f397ee990435", "patch": "@@ -50,6 +50,14 @@ fn match_bool() {\n         11..=20 => 2,\n         _ => 3,\n     };\n+\n+    // Don't lint\n+    let _ = match test {\n+        #[cfg(feature = \"foo\")]\n+        true if option == 5 => 10,\n+        true => 0,\n+        false => 1,\n+    };\n }\n \n fn main() {}"}, {"sha": "36f233f33460720759355d78d1c0cf26623d7713", "filename": "tests/ui/match_expr_like_matches_macro.fixed", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8ce2d46cacc8b91f1d252d52cb38f397ee990435/tests%2Fui%2Fmatch_expr_like_matches_macro.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8ce2d46cacc8b91f1d252d52cb38f397ee990435/tests%2Fui%2Fmatch_expr_like_matches_macro.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_expr_like_matches_macro.fixed?ref=8ce2d46cacc8b91f1d252d52cb38f397ee990435", "patch": "@@ -146,4 +146,19 @@ fn main() {\n         let _res = matches!(&val, &Some(ref _a));\n         fun(val);\n     }\n+\n+    {\n+        enum E {\n+            A,\n+            B,\n+            C,\n+        }\n+\n+        let _ = match E::A {\n+            E::B => true,\n+            #[cfg(feature = \"foo\")]\n+            E::A => true,\n+            _ => false,\n+        };\n+    }\n }"}, {"sha": "750f69fa5088f6fa45898030bfca0d56ee486a81", "filename": "tests/ui/match_expr_like_matches_macro.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8ce2d46cacc8b91f1d252d52cb38f397ee990435/tests%2Fui%2Fmatch_expr_like_matches_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ce2d46cacc8b91f1d252d52cb38f397ee990435/tests%2Fui%2Fmatch_expr_like_matches_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_expr_like_matches_macro.rs?ref=8ce2d46cacc8b91f1d252d52cb38f397ee990435", "patch": "@@ -181,4 +181,19 @@ fn main() {\n         };\n         fun(val);\n     }\n+\n+    {\n+        enum E {\n+            A,\n+            B,\n+            C,\n+        }\n+\n+        let _ = match E::A {\n+            E::B => true,\n+            #[cfg(feature = \"foo\")]\n+            E::A => true,\n+            _ => false,\n+        };\n+    }\n }"}, {"sha": "67e1d518483c2cf6b61ca152b368506619cc9008", "filename": "tests/ui/match_same_arms2.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ce2d46cacc8b91f1d252d52cb38f397ee990435/tests%2Fui%2Fmatch_same_arms2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ce2d46cacc8b91f1d252d52cb38f397ee990435/tests%2Fui%2Fmatch_same_arms2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms2.rs?ref=8ce2d46cacc8b91f1d252d52cb38f397ee990435", "patch": "@@ -166,4 +166,12 @@ fn match_expr_like_matches_macro_priority() {\n     };\n }\n \n-fn main() {}\n+fn main() {\n+    let _ = match Some(0) {\n+        Some(0) => 0,\n+        Some(1) => 1,\n+        #[cfg(feature = \"foo\")]\n+        Some(2) => 2,\n+        _ => 1,\n+    };\n+}"}, {"sha": "dd148edf5292d0c0e130d75f4736abbbce9a8404", "filename": "tests/ui/single_match.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ce2d46cacc8b91f1d252d52cb38f397ee990435/tests%2Fui%2Fsingle_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ce2d46cacc8b91f1d252d52cb38f397ee990435/tests%2Fui%2Fsingle_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_match.rs?ref=8ce2d46cacc8b91f1d252d52cb38f397ee990435", "patch": "@@ -234,4 +234,12 @@ macro_rules! single_match {\n \n fn main() {\n     single_match!(5);\n+\n+    // Don't lint\n+    let _ = match Some(0) {\n+        #[cfg(feature = \"foo\")]\n+        Some(10) => 11,\n+        Some(x) => x,\n+        _ => 0,\n+    };\n }"}]}