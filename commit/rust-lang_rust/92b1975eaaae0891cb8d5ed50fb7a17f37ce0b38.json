{"sha": "92b1975eaaae0891cb8d5ed50fb7a17f37ce0b38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyYjE5NzVlYWFhZTA4OTFjYjhkNWVkNTBmYjdhMTdmMzdjZTBiMzg=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-08-03T20:16:50Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-08-03T20:16:50Z"}, "message": "Added the missing SAFETY: comments", "tree": {"sha": "4b5bd6fdb04255a12a7cc7b06963207b17c157c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b5bd6fdb04255a12a7cc7b06963207b17c157c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92b1975eaaae0891cb8d5ed50fb7a17f37ce0b38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92b1975eaaae0891cb8d5ed50fb7a17f37ce0b38", "html_url": "https://github.com/rust-lang/rust/commit/92b1975eaaae0891cb8d5ed50fb7a17f37ce0b38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92b1975eaaae0891cb8d5ed50fb7a17f37ce0b38/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "430f19a82eb95aac1d6ac3dbd9688288cfcbe602", "url": "https://api.github.com/repos/rust-lang/rust/commits/430f19a82eb95aac1d6ac3dbd9688288cfcbe602", "html_url": "https://github.com/rust-lang/rust/commit/430f19a82eb95aac1d6ac3dbd9688288cfcbe602"}], "stats": {"total": 35, "additions": 22, "deletions": 13}, "files": [{"sha": "32ffdc26d6103e08bade67a11d28507640eb762c", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/92b1975eaaae0891cb8d5ed50fb7a17f37ce0b38/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92b1975eaaae0891cb8d5ed50fb7a17f37ce0b38/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=92b1975eaaae0891cb8d5ed50fb7a17f37ce0b38", "patch": "@@ -1695,9 +1695,9 @@ impl<T> [T] {\n         while size > 1 {\n             let half = size / 2;\n             let mid = base + half;\n-            // SAFETY:\n-            // mid >= 0: by definition\n-            // mid < size: mid = size / 2 + size / 4 + size / 8 ...\n+            // SAFETY: the call is made safe by the following inconstants:\n+            // - `mid >= 0`: by definition\n+            // - `mid < size`: `mid = size / 2 + size / 4 + size / 8 ...`\n             let cmp = f(unsafe { s.get_unchecked(mid) });\n             base = if cmp == Greater { base } else { mid };\n             size -= half;\n@@ -2690,6 +2690,7 @@ impl<T> [T] {\n         // First, find at what point do we split between the first and 2nd slice. Easy with\n         // ptr.align_offset.\n         let ptr = self.as_ptr();\n+        // SAFETY: See the `align_to_mut` method for the detailed safety comment.\n         let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };\n         if offset > self.len() {\n             (self, &[], &[])\n@@ -2749,6 +2750,13 @@ impl<T> [T] {\n         // First, find at what point do we split between the first and 2nd slice. Easy with\n         // ptr.align_offset.\n         let ptr = self.as_ptr();\n+        // SAFETY: Here we are ensuring we will use aligned pointers for U for the\n+        // rest of the method. This is done by passing a pointer to &[T] with an\n+        // alignment targeted for U.\n+        // `crate::ptr::align_offset` is called with a correctly aligned and\n+        // valid pointer `ptr` (it comes from a reference to `self`) and with\n+        // a size that is a power of two (since it comes from the alignement for U),\n+        // satisfying its safety constraints.\n         let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };\n         if offset > self.len() {\n             (self, &mut [], &mut [])\n@@ -2874,15 +2882,13 @@ impl<T> [T] {\n \n         while left != right {\n             let mid = left + (right - left) / 2;\n-            // SAFETY:\n-            // When left < right, left <= mid < right.\n-            // Therefore left always increases and right always decreases,\n-            // and eigher of them is selected.\n-            // In both cases left <= right is satisfied.\n-            // Therefore if left < right in a step,\n-            // left <= right is satisfied in the next step.\n-            // Therefore as long as left != right, 0 <= left < right <= len is satisfied\n-            // and if this case 0 <= mid < len is satisfied too.\n+            // SAFETY: When `left < right`, `left <= mid < right`.\n+            // Therefore `left` always increases and `right` always decreases,\n+            // and either of them is selected. In both cases `left <= right` is\n+            // satisfied. Therefore if `left < right` in a step, `left <= right`\n+            // is satisfied in the next step. Therefore as long as `left != right`,\n+            // `0 <= left < right <= len` is satisfied and if this case\n+            // `0 <= mid < len` is satisfied too.\n             let value = unsafe { self.get_unchecked(mid) };\n             if pred(value) {\n                 left = mid + 1;\n@@ -3002,7 +3008,8 @@ fn is_ascii(s: &[u8]) -> bool {\n     // above.\n     debug_assert!(offset_to_aligned <= len);\n \n-    // word_ptr is the (properly aligned) usize ptr we use to read the middle chunk of the slice.\n+    // SAFETY: word_ptr is the (properly aligned) usize ptr we use to read the\n+    // middle chunk of the slice.\n     let mut word_ptr = unsafe { start.add(offset_to_aligned) as *const usize };\n \n     // `byte_pos` is the byte index of `word_ptr`, used for loop end checks.\n@@ -5660,6 +5667,8 @@ impl<T, const N: usize> FusedIterator for ArrayChunks<'_, T, N> {}\n #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n unsafe impl<'a, T, const N: usize> TrustedRandomAccess for ArrayChunks<'a, T, N> {\n     unsafe fn get_unchecked(&mut self, i: usize) -> &'a [T; N] {\n+        // SAFETY: The safety guarantees of `get_unchecked` are transferred to\n+        // the caller.\n         unsafe { self.iter.get_unchecked(i) }\n     }\n     fn may_have_side_effect() -> bool {"}]}