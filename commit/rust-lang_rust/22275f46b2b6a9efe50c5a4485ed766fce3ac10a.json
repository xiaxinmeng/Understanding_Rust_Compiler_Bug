{"sha": "22275f46b2b6a9efe50c5a4485ed766fce3ac10a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMjc1ZjQ2YjJiNmE5ZWZlNTBjNWE0NDg1ZWQ3NjZmY2UzYWMxMGE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-05-16T11:15:29Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-05-16T11:19:47Z"}, "message": "rustc_mir: focus const-checking logic on whether mutation is forbidden.", "tree": {"sha": "a833374f789ba3249fd60ba1c2b5e20d213471f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a833374f789ba3249fd60ba1c2b5e20d213471f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22275f46b2b6a9efe50c5a4485ed766fce3ac10a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22275f46b2b6a9efe50c5a4485ed766fce3ac10a", "html_url": "https://github.com/rust-lang/rust/commit/22275f46b2b6a9efe50c5a4485ed766fce3ac10a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22275f46b2b6a9efe50c5a4485ed766fce3ac10a/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fec5ef81a24481dbe6f9637e772c0cc6c53568e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fec5ef81a24481dbe6f9637e772c0cc6c53568e", "html_url": "https://github.com/rust-lang/rust/commit/4fec5ef81a24481dbe6f9637e772c0cc6c53568e"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "6f90794ed896bc30e9f6e4c48ec56896dbf390ac", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/22275f46b2b6a9efe50c5a4485ed766fce3ac10a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22275f46b2b6a9efe50c5a4485ed766fce3ac10a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=22275f46b2b6a9efe50c5a4485ed766fce3ac10a", "patch": "@@ -679,24 +679,31 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 }\n \n                 let ty = place.ty(self.mir, self.tcx).to_ty(self.tcx);\n+\n+                // Default to forbidding the borrow and/or its promotion,\n+                // due to the potential for direct or interior mutability,\n+                // and only proceed by setting `forbidden_mut` to `false`.\n+                let mut forbidden_mut = true;\n+\n                 if let BorrowKind::Mut { .. } = kind {\n                     // In theory, any zero-sized value could be borrowed\n                     // mutably without consequences. However, only &mut []\n                     // is allowed right now, and only in functions.\n-                    let allow = if self.mode == Mode::StaticMut {\n+                    if self.mode == Mode::StaticMut {\n                         // Inside a `static mut`, &mut [...] is also allowed.\n                         match ty.sty {\n-                            ty::TyArray(..) | ty::TySlice(_) => true,\n-                            _ => false\n+                            ty::TyArray(..) | ty::TySlice(_) => forbidden_mut = false,\n+                            _ => {}\n                         }\n                     } else if let ty::TyArray(_, len) = ty.sty {\n-                        len.unwrap_usize(self.tcx) == 0 &&\n-                            self.mode == Mode::Fn\n-                    } else {\n-                        false\n-                    };\n+                        // FIXME(eddyb) the `self.mode == Mode::Fn` condition\n+                        // seems unnecessary, given that this is merely a ZST.\n+                        if len.unwrap_usize(self.tcx) == 0 && self.mode == Mode::Fn {\n+                            forbidden_mut = false;\n+                        }\n+                    }\n \n-                    if !allow {\n+                    if forbidden_mut {\n                         self.add(Qualif::NOT_CONST);\n                         if self.mode != Mode::Fn {\n                             let mut err = struct_span_err!(self.tcx.sess,  self.span, E0017,\n@@ -722,21 +729,26 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     // it means that our \"silent insertion of statics\" could change\n                     // initializer values (very bad).\n                     if self.qualif.intersects(Qualif::MUTABLE_INTERIOR) {\n-                        // Replace MUTABLE_INTERIOR with NOT_CONST to avoid\n+                        // A reference of a MUTABLE_INTERIOR place is instead\n+                        // NOT_CONST (see `if forbidden_mut` below), to avoid\n                         // duplicate errors (from reborrowing, for example).\n                         self.qualif = self.qualif - Qualif::MUTABLE_INTERIOR;\n-                        self.add(Qualif::NOT_CONST);\n                         if self.mode != Mode::Fn {\n                             span_err!(self.tcx.sess, self.span, E0492,\n                                       \"cannot borrow a constant which may contain \\\n                                        interior mutability, create a static instead\");\n                         }\n+                    } else {\n+                        // We allow immutable borrows of frozen data.\n+                        forbidden_mut = false;\n                     }\n                 }\n \n-                // We might have a candidate for promotion.\n-                let candidate = Candidate::Ref(location);\n-                if self.can_promote() {\n+                if forbidden_mut {\n+                    self.add(Qualif::NOT_CONST);\n+                } else if self.can_promote() {\n+                    // We might have a candidate for promotion.\n+                    let candidate = Candidate::Ref(location);\n                     // We can only promote interior borrows of non-drop temps.\n                     let mut place = place;\n                     while let Place::Projection(ref proj) = *place {"}]}