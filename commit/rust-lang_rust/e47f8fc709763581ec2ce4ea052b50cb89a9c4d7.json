{"sha": "e47f8fc709763581ec2ce4ea052b50cb89a9c4d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0N2Y4ZmM3MDk3NjM1ODFlYzJjZTRlYTA1MmI1MGNiODlhOWM0ZDc=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-12T12:36:29Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-12T12:36:29Z"}, "message": "Handle external-crate case when printing full unresolved paths\n\nCloses #1283", "tree": {"sha": "c71679e0349fd13b6149bdc5ccba7f256b068139", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c71679e0349fd13b6149bdc5ccba7f256b068139"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e47f8fc709763581ec2ce4ea052b50cb89a9c4d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e47f8fc709763581ec2ce4ea052b50cb89a9c4d7", "html_url": "https://github.com/rust-lang/rust/commit/e47f8fc709763581ec2ce4ea052b50cb89a9c4d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e47f8fc709763581ec2ce4ea052b50cb89a9c4d7/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "163c42baf8275839b4305101a463f1e89060519d", "url": "https://api.github.com/repos/rust-lang/rust/commits/163c42baf8275839b4305101a463f1e89060519d", "html_url": "https://github.com/rust-lang/rust/commit/163c42baf8275839b4305101a463f1e89060519d"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "84f7007f2e417b85f2e8ebfdb5a5fdb9ddb37d4d", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e47f8fc709763581ec2ce4ea052b50cb89a9c4d7/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e47f8fc709763581ec2ce4ea052b50cb89a9c4d7/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=e47f8fc709763581ec2ce4ea052b50cb89a9c4d7", "patch": "@@ -2,7 +2,7 @@\n import syntax::{ast, ast_util, codemap};\n import syntax::ast::*;\n import ast::{ident, fn_ident, def, def_id, node_id};\n-import syntax::ast_util::local_def;\n+import syntax::ast_util::{local_def, def_id_of_def};\n \n import metadata::{csearch, cstore};\n import driver::session::session;\n@@ -609,7 +609,15 @@ fn unresolved_err(e: env, cx: ctxt, sp: span, name: ident, kind: str) {\n         }\n       }\n       in_mod(def) {\n-        path = e.mod_map.get(ast_util::def_id_of_def(def).node).path + path;\n+        let did = def_id_of_def(def);\n+        if did.crate == ast::local_crate {\n+            path = e.mod_map.get(did.node).path + path;\n+        } else {\n+            let paths = e.ext_map.get(did);\n+            if vec::len(paths) > 0u {\n+                path = str::connect(paths, \"::\") + \"::\" + path;\n+            }\n+        }\n       }\n     }\n     e.sess.span_err(sp, mk_unresolved_msg(path, kind));\n@@ -783,7 +791,7 @@ fn lookup_in_scope(e: env, sc: scopes, sp: span, name: ident, ns: namespace)\n                     while i > 0u {\n                         i -= 1u;\n                         df =\n-                            ast::def_upvar(ast_util::def_id_of_def(df), @df,\n+                            ast::def_upvar(def_id_of_def(df), @df,\n                                            closing[i]);\n                         fnd = some(df);\n                     }\n@@ -997,7 +1005,7 @@ fn lookup_in_mod_strict(e: env, m: def, sp: span, name: ident,\n \n fn lookup_in_mod(e: env, m: def, sp: span, name: ident, ns: namespace,\n                  dr: dir) -> option::t<def> {\n-    let defid = ast_util::def_id_of_def(m);\n+    let defid = def_id_of_def(m);\n     if defid.crate != ast::local_crate {\n         // examining a module in an external crate\n         let cached = e.ext_cache.find({did: defid, ident: name, ns: ns});\n@@ -1277,7 +1285,7 @@ fn ns_for_def(d: def) -> namespace {\n fn lookup_external(e: env, cnum: int, ids: [ident], ns: namespace) ->\n    option::t<def> {\n     for d: def in csearch::lookup_defs(e.sess.get_cstore(), cnum, ids) {\n-        e.ext_map.insert(ast_util::def_id_of_def(d), ids);\n+        e.ext_map.insert(def_id_of_def(d), ids);\n         if ns == ns_for_def(d) { ret some(d); }\n     }\n     ret none::<def>;"}]}