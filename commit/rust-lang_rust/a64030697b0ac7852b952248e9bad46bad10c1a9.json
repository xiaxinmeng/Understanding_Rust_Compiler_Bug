{"sha": "a64030697b0ac7852b952248e9bad46bad10c1a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NDAzMDY5N2IwYWM3ODUyYjk1MjI0OGU5YmFkNDZiYWQxMGMxYTk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-31T03:17:48Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-31T03:37:32Z"}, "message": "rustdoc: Prune undocumented ifaces", "tree": {"sha": "e9ccf2eb7c13d86b8f6f94266864300f6c8d158b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9ccf2eb7c13d86b8f6f94266864300f6c8d158b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a64030697b0ac7852b952248e9bad46bad10c1a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a64030697b0ac7852b952248e9bad46bad10c1a9", "html_url": "https://github.com/rust-lang/rust/commit/a64030697b0ac7852b952248e9bad46bad10c1a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a64030697b0ac7852b952248e9bad46bad10c1a9/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c495a9bf8c1cf6cf76d41b5aa0dad4998fb6c57", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c495a9bf8c1cf6cf76d41b5aa0dad4998fb6c57", "html_url": "https://github.com/rust-lang/rust/commit/2c495a9bf8c1cf6cf76d41b5aa0dad4998fb6c57"}], "stats": {"total": 143, "additions": 124, "deletions": 19}, "files": [{"sha": "a68477058c1fd869db77cc693514c3afd8b3a953", "filename": "src/rustdoc/prune_undoc_pass.rs", "status": "modified", "additions": 124, "deletions": 19, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/a64030697b0ac7852b952248e9bad46bad10c1a9/src%2Frustdoc%2Fprune_undoc_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64030697b0ac7852b952248e9bad46bad10c1a9/src%2Frustdoc%2Fprune_undoc_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_undoc_pass.rs?ref=a64030697b0ac7852b952248e9bad46bad10c1a9", "patch": "@@ -22,7 +22,8 @@ fn run(\n         fold_fn: fold_fn,\n         fold_const: fold_const,\n         fold_enum: fold_enum,\n-        fold_res: fold_res\n+        fold_res: fold_res,\n+        fold_iface: fold_iface\n         with *fold::default_seq_fold(ctxt)\n     });\n     fold.fold_crate(fold, doc)\n@@ -75,6 +76,14 @@ fn fold_mod(\n                     none\n                 }\n               }\n+              doc::ifacetag(ifacedoc) {\n+                let doc = fold.fold_iface(fold, ifacedoc);\n+                if fold.ctxt.have_docs {\n+                    some(doc::ifacetag(doc))\n+                } else {\n+                    none\n+                }\n+              }\n               _ { some(itemtag) }\n             }\n         }\n@@ -91,36 +100,42 @@ fn fold_fn(\n     fold: fold::fold<ctxt>,\n     doc: doc::fndoc\n ) -> doc::fndoc {\n-    let have_arg_docs = false;\n     let doc = {\n-        args: vec::filter_map(doc.args) {|doc|\n-            if option::is_some(doc.desc) {\n-                have_arg_docs = true;\n-                some(doc)\n-            } else {\n-                none\n-            }\n-        },\n-        return: {\n-            ty: if option::is_some(doc.return.desc) {\n-                doc.return.ty\n-            } else {\n-                none\n-            }\n-            with doc.return\n-        }\n+        args: prune_args(doc.args),\n+        return: prune_return(doc.return)\n         with doc\n     };\n \n     fold.ctxt.have_docs =\n         doc.brief != none\n         || doc.desc != none\n-        || have_arg_docs\n+        || vec::is_not_empty(doc.args)\n         || doc.return.desc != none\n         || doc.failure != none;\n     ret doc;\n }\n \n+fn prune_args(docs: [doc::argdoc]) -> [doc::argdoc] {\n+    vec::filter_map(docs) {|doc|\n+        if option::is_some(doc.desc) {\n+            some(doc)\n+        } else {\n+            none\n+        }\n+    }\n+}\n+\n+fn prune_return(doc: doc::retdoc) -> doc::retdoc {\n+    {\n+        ty: if option::is_some(doc.desc) {\n+            doc.ty\n+        } else {\n+            none\n+        }\n+        with doc\n+    }\n+}\n+\n #[test]\n fn should_elide_undocumented_arguments() {\n     let source = \"#[doc = \\\"hey\\\"] fn a(b: int) { }\";\n@@ -316,3 +331,93 @@ fn should_not_elide_resources_with_documented_args() {\n     let doc = run(srv, doc);\n     assert vec::is_not_empty(doc.topmod.resources());\n }\n+\n+fn fold_iface(\n+    fold: fold::fold<ctxt>,\n+    doc: doc::ifacedoc\n+) -> doc::ifacedoc {\n+    let doc = fold::default_seq_fold_iface(fold, doc);\n+    let doc = {\n+        methods: vec::map(doc.methods) {|doc|\n+            {\n+                args: prune_args(doc.args),\n+                return: prune_return(doc.return)\n+                with doc\n+            }\n+        }\n+        with doc\n+    };\n+    let methods_have_docs = vec::foldl(false, doc.methods) {|accum, doc|\n+        accum\n+            || doc.brief != none\n+            || doc.desc != none\n+            || vec::is_not_empty(doc.args)\n+            || doc.return.desc != none\n+            || doc.failure != none\n+    };\n+    fold.ctxt.have_docs =\n+        doc.brief != none\n+        || doc.desc != none\n+        || methods_have_docs;\n+    ret doc;\n+}\n+\n+#[test]\n+fn should_elide_undocumented_ifaces() {\n+    let source = \"iface i { fn a(); }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = attr_pass::mk_pass()(srv, doc);\n+    let doc = run(srv, doc);\n+    assert vec::is_empty(doc.topmod.ifaces());\n+}\n+\n+#[test]\n+fn should_not_elide_documented_ifaces() {\n+    let source = \"#[doc = \\\"hey\\\"] iface i { fn a(); }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = attr_pass::mk_pass()(srv, doc);\n+    let doc = run(srv, doc);\n+    assert vec::is_not_empty(doc.topmod.ifaces());\n+}\n+\n+#[test]\n+fn should_not_elide_ifaces_with_documented_methods() {\n+    let source = \"iface i { #[doc = \\\"hey\\\"] fn a(); }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = attr_pass::mk_pass()(srv, doc);\n+    let doc = run(srv, doc);\n+    assert vec::is_not_empty(doc.topmod.ifaces());\n+}\n+\n+#[test]\n+fn should_not_elide_undocumented_methods() {\n+    let source = \"#[doc = \\\"hey\\\"] iface i { fn a(); }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = attr_pass::mk_pass()(srv, doc);\n+    let doc = run(srv, doc);\n+    assert vec::is_not_empty(doc.topmod.ifaces()[0].methods);\n+}\n+\n+#[test]\n+fn should_elide_undocumented_method_args() {\n+    let source = \"#[doc = \\\"hey\\\"] iface i { fn a(); }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = attr_pass::mk_pass()(srv, doc);\n+    let doc = run(srv, doc);\n+    assert vec::is_empty(doc.topmod.ifaces()[0].methods[0].args);\n+}\n+\n+#[test]\n+fn should_elide_undocumented_method_return_values() {\n+    let source = \"#[doc = \\\"hey\\\"] iface i { fn a() -> int; }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = attr_pass::mk_pass()(srv, doc);\n+    let doc = run(srv, doc);\n+    assert doc.topmod.ifaces()[0].methods[0].return.ty == none;\n+}\n\\ No newline at end of file"}]}