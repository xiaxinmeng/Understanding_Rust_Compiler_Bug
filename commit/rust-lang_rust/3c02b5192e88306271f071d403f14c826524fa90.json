{"sha": "3c02b5192e88306271f071d403f14c826524fa90", "node_id": "C_kwDOAAsO6NoAKDNjMDJiNTE5MmU4ODMwNjI3MWYwNzFkNDAzZjE0YzgyNjUyNGZhOTA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-20T19:42:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-20T19:42:43Z"}, "message": "Rollup merge of #95114 - ChrisDenton:symlink-test, r=the8472\n\nSkip a test if symlink creation is not possible\n\nIf someone running tests on Windows does not have Developer Mode enabled then creating symlinks will fail which in turn would cause this test to fail. This can be a stumbling block for contributors.", "tree": {"sha": "0b407cafed88198ca97db29a090a9fece11c2047", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b407cafed88198ca97db29a090a9fece11c2047"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c02b5192e88306271f071d403f14c826524fa90", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiN4O0CRBK7hj4Ov3rIwAAoq8IAGalyTE0mHtba56FMUfn42JS\nJBDghhn5mOzt45UoP1gWBehCKxORQ1WSPTrSx7J5eteoI16g825U1Lbdp9vPmTrQ\nsDdUDeDITWmDQyfk16M8c8AaZgmO+PLUVAvYx+V2Z/lNtEdUdLC+La8DTrMElU1Z\nnVUqJzZNK94V9rJ5YQ5Zwenb3uiE7wuipd+tFvbVd7LFEAJvAUfMjFEQH36xaWC2\nNkRLEtFrPCnunuhJUntW8jSfPqnMfbH9gjRo/pTumNW7gEu4Xw3DGZ0i+RyfFQbA\ndcbL9sZThC7LGuQHCZouchDCV2lzQ7cLC0gSWijMa2JemRwMu4LHhSh19qBLzio=\n=aWaP\n-----END PGP SIGNATURE-----\n", "payload": "tree 0b407cafed88198ca97db29a090a9fece11c2047\nparent 4767ccec935824fa5d08ce3502b233d7a66adec1\nparent 68c03cd386a52e0391402941e8b87c37f5f9924a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1647805363 +0100\ncommitter GitHub <noreply@github.com> 1647805363 +0100\n\nRollup merge of #95114 - ChrisDenton:symlink-test, r=the8472\n\nSkip a test if symlink creation is not possible\n\nIf someone running tests on Windows does not have Developer Mode enabled then creating symlinks will fail which in turn would cause this test to fail. This can be a stumbling block for contributors.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c02b5192e88306271f071d403f14c826524fa90", "html_url": "https://github.com/rust-lang/rust/commit/3c02b5192e88306271f071d403f14c826524fa90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c02b5192e88306271f071d403f14c826524fa90/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4767ccec935824fa5d08ce3502b233d7a66adec1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4767ccec935824fa5d08ce3502b233d7a66adec1", "html_url": "https://github.com/rust-lang/rust/commit/4767ccec935824fa5d08ce3502b233d7a66adec1"}, {"sha": "68c03cd386a52e0391402941e8b87c37f5f9924a", "url": "https://api.github.com/repos/rust-lang/rust/commits/68c03cd386a52e0391402941e8b87c37f5f9924a", "html_url": "https://github.com/rust-lang/rust/commit/68c03cd386a52e0391402941e8b87c37f5f9924a"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "cd535afb4a338d6551fac02a7cd5871b5114278e", "filename": "library/std/src/sys/windows/process/tests.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3c02b5192e88306271f071d403f14c826524fa90/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c02b5192e88306271f071d403f14c826524fa90/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs?ref=3c02b5192e88306271f071d403f14c826524fa90", "patch": "@@ -186,8 +186,15 @@ fn windows_exe_resolver() {\n     let temp = tmpdir();\n     let mut exe_path = temp.path().to_owned();\n     exe_path.push(\"exists.exe\");\n-    symlink(\"<DOES NOT EXIST>\".as_ref(), &exe_path).unwrap();\n \n     // A broken symlink should still be resolved.\n-    assert!(resolve_exe(OsStr::new(\"exists.exe\"), empty_paths, Some(temp.path().as_ref())).is_ok());\n+    // Skip this check if not in CI and creating symlinks isn't possible.\n+    let is_ci = env::var(\"CI\").is_ok();\n+    let result = symlink(\"<DOES NOT EXIST>\".as_ref(), &exe_path);\n+    if is_ci || result.is_ok() {\n+        result.unwrap();\n+        assert!(\n+            resolve_exe(OsStr::new(\"exists.exe\"), empty_paths, Some(temp.path().as_ref())).is_ok()\n+        );\n+    }\n }"}]}