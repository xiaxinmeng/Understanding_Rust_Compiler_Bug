{"sha": "182814ef8191e2b153806380f8d3d46069c69a8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MjgxNGVmODE5MWUyYjE1MzgwNjM4MGY4ZDNkNDYwNjljNjlhOGQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-08-21T15:10:32Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-08-21T23:07:53Z"}, "message": "remove some FIXMEd code as the relevant issue is fixed", "tree": {"sha": "7093f34155aadeb5e8158d6207aad3cd7462d194", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7093f34155aadeb5e8158d6207aad3cd7462d194"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/182814ef8191e2b153806380f8d3d46069c69a8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/182814ef8191e2b153806380f8d3d46069c69a8d", "html_url": "https://github.com/rust-lang/rust/commit/182814ef8191e2b153806380f8d3d46069c69a8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/182814ef8191e2b153806380f8d3d46069c69a8d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9440f8e9b86de3c6166a875b8aee29448580e7ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/9440f8e9b86de3c6166a875b8aee29448580e7ea", "html_url": "https://github.com/rust-lang/rust/commit/9440f8e9b86de3c6166a875b8aee29448580e7ea"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "52a63dacbfc9fbd0d1c1c694c984a82d1c967e15", "filename": "src/libcore/send_map.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/182814ef8191e2b153806380f8d3d46069c69a8d/src%2Flibcore%2Fsend_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/182814ef8191e2b153806380f8d3d46069c69a8d/src%2Flibcore%2Fsend_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsend_map.rs?ref=182814ef8191e2b153806380f8d3d46069c69a8d", "patch": "@@ -58,12 +58,6 @@ mod linear {\n             buckets: vec::from_fn(initial_capacity, |_i| none)})\n     }\n \n-    // FIXME(#2979) would allow us to use region type for k\n-    unsafe fn borrow<K>(&&k: K) -> &K {\n-        let p: *K = ptr::addr_of(k);\n-        unsafe::reinterpret_cast(p)\n-    }\n-\n     priv impl<K, V> &const LinearMap<K,V> {\n         #[inline(always)]\n         pure fn to_bucket(h: uint) -> uint {\n@@ -155,8 +149,7 @@ mod linear {\n         /// Assumes that there will be a bucket.\n         /// True if there was no previous entry with that key\n         fn insert_internal(hash: uint, +k: K, +v: V) -> bool {\n-            match self.bucket_for_key_with_hash(self.buckets, hash,\n-                                              unsafe{borrow(k)}) {\n+            match self.bucket_for_key_with_hash(self.buckets, hash, &k) {\n               TableFull => {fail ~\"Internal logic error\";}\n               FoundHole(idx) => {\n                 debug!{\"insert fresh (%?->%?) at idx %?, hash %?\",\n@@ -187,7 +180,7 @@ mod linear {\n                 self.expand();\n             }\n \n-            let hash = self.hashfn(unsafe{borrow(k)});\n+            let hash = self.hashfn(&k);\n             self.insert_internal(hash, k, v)\n         }\n \n@@ -279,11 +272,19 @@ mod linear {\n \n     impl<K,V> &LinearMap<K,V> {\n         /*\n-        FIXME --- #2979 must be fixed to typecheck this\n-        fn find_ptr(k: K) -> option<&V> {\n-            //XXX this should not type check as written, but it should\n-            //be *possible* to typecheck it...\n-            self.with_ptr(k, |v| v)\n+        FIXME(#3148)--region inference fails to capture needed deps\n+\n+        fn find_ref(k: &K) -> option<&self/V> {\n+            match self.bucket_for_key(self.buckets, k) {\n+              FoundEntry(idx) => {\n+                match check self.buckets[idx] {\n+                  some(ref bkt) => some(&bkt.value)\n+                }\n+              }\n+              TableFull | FoundHole(_) => {\n+                none\n+              }\n+            }\n         }\n         */\n "}]}