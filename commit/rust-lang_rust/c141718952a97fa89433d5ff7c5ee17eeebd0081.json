{"sha": "c141718952a97fa89433d5ff7c5ee17eeebd0081", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNDE3MTg5NTJhOTdmYTg5NDMzZDVmZjdjNWVlMTdlZWViZDAwODE=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-28T06:05:04Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-28T06:05:04Z"}, "message": "Replace walk with visit in the typechecker", "tree": {"sha": "abe849b7d6eaa41205afc4bf0e1f4e59a165dc40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abe849b7d6eaa41205afc4bf0e1f4e59a165dc40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c141718952a97fa89433d5ff7c5ee17eeebd0081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c141718952a97fa89433d5ff7c5ee17eeebd0081", "html_url": "https://github.com/rust-lang/rust/commit/c141718952a97fa89433d5ff7c5ee17eeebd0081", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c141718952a97fa89433d5ff7c5ee17eeebd0081/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "757b7ec5343c75d720bce6104be9a6453711bade", "url": "https://api.github.com/repos/rust-lang/rust/commits/757b7ec5343c75d720bce6104be9a6453711bade", "html_url": "https://github.com/rust-lang/rust/commit/757b7ec5343c75d720bce6104be9a6453711bade"}], "stats": {"total": 70, "additions": 35, "deletions": 35}, "files": [{"sha": "2bd0a7cbbaaf28d94f4c8a4df1ef6da885352f5b", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/c141718952a97fa89433d5ff7c5ee17eeebd0081/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c141718952a97fa89433d5ff7c5ee17eeebd0081/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=c141718952a97fa89433d5ff7c5ee17eeebd0081", "patch": "@@ -1099,7 +1099,7 @@ mod writeback {\n           }\n         }\n     }\n-    fn resolve_type_vars_for_node(wbcx: &@wb_ctxt, sp: &span,\n+    fn resolve_type_vars_for_node(wbcx: &wb_ctxt, sp: &span,\n                                   id: ast::node_id) {\n         let fcx = wbcx.fcx;\n         let tpot = ty::node_id_to_ty_param_substs_opt_and_ty(fcx.ccx.tcx, id);\n@@ -1126,24 +1126,33 @@ mod writeback {\n     }\n \n     type wb_ctxt =\n-        // A flag to ignore contained items and lambdas\n         // As soon as we hit an error we have to stop resolving\n         // the entire function\n-        {fcx: @fn_ctxt, mutable ignore: bool, mutable success: bool};\n+        {fcx: @fn_ctxt, mutable success: bool};\n+    type wb_vt = visit::vt[wb_ctxt];\n \n-    fn visit_stmt_pre(wbcx: @wb_ctxt, s: &@ast::stmt) {\n+    fn visit_stmt(s: &@ast::stmt, wbcx: &wb_ctxt, v: &wb_vt) {\n+        if !wbcx.success { ret; }\n         resolve_type_vars_for_node(wbcx, s.span, ty::stmt_node_id(s));\n+        visit::visit_stmt(s, wbcx, v);\n     }\n-    fn visit_expr_pre(wbcx: @wb_ctxt, e: &@ast::expr) {\n+    fn visit_expr(e: &@ast::expr, wbcx: &wb_ctxt, v: &wb_vt) {\n+        if !wbcx.success { ret; }\n         resolve_type_vars_for_node(wbcx, e.span, e.id);\n+        visit::visit_expr(e, wbcx, v);\n     }\n-    fn visit_block_pre(wbcx: @wb_ctxt, b: &ast::blk) {\n+    fn visit_block(b: &ast::blk, wbcx: &wb_ctxt, v: &wb_vt) {\n+        if !wbcx.success { ret; }\n         resolve_type_vars_for_node(wbcx, b.span, b.node.id);\n+        visit::visit_block(b, wbcx, v);\n     }\n-    fn visit_pat_pre(wbcx: @wb_ctxt, p: &@ast::pat) {\n+    fn visit_pat(p: &@ast::pat, wbcx: &wb_ctxt, v: &wb_vt) {\n+        if !wbcx.success { ret; }\n         resolve_type_vars_for_node(wbcx, p.span, p.id);\n+        visit::visit_pat(p, wbcx, v);\n     }\n-    fn visit_local_pre(wbcx: @wb_ctxt, l: &@ast::local) {\n+    fn visit_local(l: &@ast::local, wbcx: &wb_ctxt, v: &wb_vt) {\n+        if !wbcx.success { ret; }\n         let var_id = lookup_local(wbcx.fcx, l.span, l.node.id);\n         let fix_rslt =\n             ty::unify::resolve_type_var(wbcx.fcx.ccx.tcx,\n@@ -1157,38 +1166,29 @@ mod writeback {\n             wbcx.success = false;\n           }\n         }\n+        visit::visit_local(l, wbcx, v);\n     }\n-    fn visit_item_pre(wbcx: @wb_ctxt, item: &@ast::item) {\n-        wbcx.ignore = true;\n+    fn visit_item(item: &@ast::item, wbcx: &wb_ctxt, v: &wb_vt) {\n+        // Ignore items\n     }\n-    fn visit_item_post(wbcx: @wb_ctxt, item: &@ast::item) {\n-        wbcx.ignore = false;\n+    fn visit_fn(f: &ast::_fn, tps: &ast::ty_param[],\n+                    sp: &span, i: &ast::fn_ident, d: ast::node_id,\n+                    wbcx: &wb_ctxt, v: &wb_vt) {\n+        // Ignore fns\n     }\n-    fn visit_fn_pre(wbcx: @wb_ctxt, f: &ast::_fn, tps: &ast::ty_param[],\n-                    sp: &span, i: &ast::fn_ident, d: ast::node_id) {\n-        wbcx.ignore = true;\n-    }\n-    fn visit_fn_post(wbcx: @wb_ctxt, f: &ast::_fn, tps: &ast::ty_param[],\n-                     sp: &span, i: &ast::fn_ident, d: ast::node_id) {\n-        wbcx.ignore = false;\n-    }\n-    fn keep_going(wbcx: @wb_ctxt) -> bool { !wbcx.ignore && wbcx.success }\n \n     fn resolve_type_vars_in_block(fcx: &@fn_ctxt, blk: &ast::blk) -> bool {\n-        let wbcx = @{fcx: fcx, mutable ignore: false, mutable success: true};\n-        let visit =\n-            {keep_going: bind keep_going(wbcx),\n-             visit_item_pre: bind visit_item_pre(wbcx, _),\n-             visit_item_post: bind visit_item_post(wbcx, _),\n-             visit_fn_pre: bind visit_fn_pre(wbcx, _, _, _, _, _),\n-             visit_fn_post: bind visit_fn_post(wbcx, _, _, _, _, _),\n-             visit_stmt_pre: bind visit_stmt_pre(wbcx, _),\n-             visit_expr_pre: bind visit_expr_pre(wbcx, _),\n-             visit_block_pre: bind visit_block_pre(wbcx, _),\n-             visit_pat_pre: bind visit_pat_pre(wbcx, _),\n-             visit_local_pre: bind visit_local_pre(wbcx, _)\n-             with walk::default_visitor()};\n-        walk::walk_block(visit, blk);\n+        let wbcx = {fcx: fcx, mutable success: true};\n+        let visit = visit::mk_vt\n+            (@{visit_item: visit_item,\n+               visit_fn: visit_fn,\n+               visit_stmt: visit_stmt,\n+               visit_expr: visit_expr,\n+               visit_block: visit_block,\n+               visit_pat: visit_pat,\n+               visit_local: visit_local\n+               with *visit::default_visitor()});\n+        visit::visit_block(blk, wbcx, visit);\n         ret wbcx.success;\n     }\n }"}]}