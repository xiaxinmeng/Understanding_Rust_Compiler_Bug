{"sha": "236ccce79e71020350b8e2d7a263807f02eb6e8e", "node_id": "C_kwDOAAsO6NoAKDIzNmNjY2U3OWU3MTAyMDM1MGI4ZTJkN2EyNjM4MDdmMDJlYjZlOGU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-24T10:51:59Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-03T16:42:03Z"}, "message": "Create a specific `ObjectLifetimeDefault` enum.", "tree": {"sha": "bc4e3da4858db3dc67696ed4e0dbb33ad74f053e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc4e3da4858db3dc67696ed4e0dbb33ad74f053e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/236ccce79e71020350b8e2d7a263807f02eb6e8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/236ccce79e71020350b8e2d7a263807f02eb6e8e", "html_url": "https://github.com/rust-lang/rust/commit/236ccce79e71020350b8e2d7a263807f02eb6e8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/236ccce79e71020350b8e2d7a263807f02eb6e8e/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39bc74e8b80a08fcf041622f87b0b4b52a1c0ffe", "url": "https://api.github.com/repos/rust-lang/rust/commits/39bc74e8b80a08fcf041622f87b0b4b52a1c0ffe", "html_url": "https://github.com/rust-lang/rust/commit/39bc74e8b80a08fcf041622f87b0b4b52a1c0ffe"}], "stats": {"total": 141, "additions": 58, "deletions": 83}, "files": [{"sha": "df0687b22249e12be7b54989c35cb9d467675c7b", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/236ccce79e71020350b8e2d7a263807f02eb6e8e/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/236ccce79e71020350b8e2d7a263807f02eb6e8e/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=236ccce79e71020350b8e2d7a263807f02eb6e8e", "patch": "@@ -499,7 +499,9 @@ impl<'hir> Map<'hir> {\n         let def_kind = self.tcx.def_kind(def_id);\n         match def_kind {\n             DefKind::Trait | DefKind::TraitAlias => def_id,\n-            DefKind::TyParam | DefKind::ConstParam => self.tcx.local_parent(def_id),\n+            DefKind::LifetimeParam | DefKind::TyParam | DefKind::ConstParam => {\n+                self.tcx.local_parent(def_id)\n+            }\n             _ => bug!(\"ty_param_owner: {:?} is a {:?} not a type parameter\", def_id, def_kind),\n         }\n     }\n@@ -508,7 +510,9 @@ impl<'hir> Map<'hir> {\n         let def_kind = self.tcx.def_kind(def_id);\n         match def_kind {\n             DefKind::Trait | DefKind::TraitAlias => kw::SelfUpper,\n-            DefKind::TyParam | DefKind::ConstParam => self.tcx.item_name(def_id.to_def_id()),\n+            DefKind::LifetimeParam | DefKind::TyParam | DefKind::ConstParam => {\n+                self.tcx.item_name(def_id.to_def_id())\n+            }\n             _ => bug!(\"ty_param_name: {:?} is a {:?} not a type parameter\", def_id, def_kind),\n         }\n     }"}, {"sha": "05f4ab487ef614a223e0e373ec30b1718a0c5745", "filename": "compiler/rustc_middle/src/middle/resolve_lifetime.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/236ccce79e71020350b8e2d7a263807f02eb6e8e/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/236ccce79e71020350b8e2d7a263807f02eb6e8e/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs?ref=236ccce79e71020350b8e2d7a263807f02eb6e8e", "patch": "@@ -35,7 +35,13 @@ impl<T: PartialEq> Set1<T> {\n     }\n }\n \n-pub type ObjectLifetimeDefault = Set1<Region>;\n+#[derive(Copy, Clone, Debug, HashStable, Encodable, Decodable)]\n+pub enum ObjectLifetimeDefault {\n+    Empty,\n+    Static,\n+    Ambiguous,\n+    Param(DefId),\n+}\n \n /// Maps the id of each lifetime reference to the lifetime decl\n /// that it corresponds to."}, {"sha": "d8483e7e40914eb3d64053f5c39817e879d76007", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/236ccce79e71020350b8e2d7a263807f02eb6e8e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/236ccce79e71020350b8e2d7a263807f02eb6e8e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=236ccce79e71020350b8e2d7a263807f02eb6e8e", "patch": "@@ -1579,7 +1579,7 @@ rustc_queries! {\n     /// for each parameter if a trait object were to be passed for that parameter.\n     /// For example, for `struct Foo<'a, T, U>`, this would be `['static, 'static]`.\n     /// For `struct Foo<'a, T: 'a, U>`, this would instead be `['a, 'static]`.\n-    query object_lifetime_defaults(_: DefId) -> Option<&'tcx [ObjectLifetimeDefault]> {\n+    query object_lifetime_defaults(_: LocalDefId) -> Option<&'tcx [ObjectLifetimeDefault]> {\n         desc { \"looking up lifetime defaults for a region on an item\" }\n     }\n     query late_bound_vars_map(_: LocalDefId)"}, {"sha": "b96968f81e0a0ef2d3d49aadffd110dad88ec036", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 39, "deletions": 73, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/236ccce79e71020350b8e2d7a263807f02eb6e8e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/236ccce79e71020350b8e2d7a263807f02eb6e8e/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=236ccce79e71020350b8e2d7a263807f02eb6e8e", "patch": "@@ -290,24 +290,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n \n         named_region_map: |tcx, id| resolve_lifetimes_for(tcx, id).defs.get(&id),\n         is_late_bound_map,\n-        object_lifetime_defaults: |tcx, def_id| {\n-            if let Some(def_id) = def_id.as_local() {\n-                match tcx.hir().get_by_def_id(def_id) {\n-                    Node::Item(item) => compute_object_lifetime_defaults(tcx, item),\n-                    _ => None,\n-                }\n-            } else {\n-                Some(tcx.arena.alloc_from_iter(tcx.generics_of(def_id).params.iter().filter_map(\n-                    |param| match param.kind {\n-                        GenericParamDefKind::Type { object_lifetime_default, .. } => {\n-                            Some(object_lifetime_default)\n-                        }\n-                        GenericParamDefKind::Const { .. } => Some(Set1::Empty),\n-                        GenericParamDefKind::Lifetime => None,\n-                    },\n-                )))\n-            }\n-        },\n+        object_lifetime_defaults,\n         late_bound_vars_map: |tcx, id| resolve_lifetimes_for(tcx, id).late_bound_vars.get(&id),\n \n         ..*providers\n@@ -1281,10 +1264,11 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     }\n }\n \n-fn compute_object_lifetime_defaults<'tcx>(\n+fn object_lifetime_defaults<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    item: &hir::Item<'_>,\n+    def_id: LocalDefId,\n ) -> Option<&'tcx [ObjectLifetimeDefault]> {\n+    let hir::Node::Item(item) = tcx.hir().get_by_def_id(def_id) else { return None; };\n     match item.kind {\n         hir::ItemKind::Struct(_, ref generics)\n         | hir::ItemKind::Union(_, ref generics)\n@@ -1304,24 +1288,13 @@ fn compute_object_lifetime_defaults<'tcx>(\n                 let object_lifetime_default_reprs: String = result\n                     .iter()\n                     .map(|set| match *set {\n-                        Set1::Empty => \"BaseDefault\".into(),\n-                        Set1::One(Region::Static) => \"'static\".into(),\n-                        Set1::One(Region::EarlyBound(mut i, _)) => generics\n-                            .params\n-                            .iter()\n-                            .find_map(|param| match param.kind {\n-                                GenericParamKind::Lifetime { .. } => {\n-                                    if i == 0 {\n-                                        return Some(param.name.ident().to_string().into());\n-                                    }\n-                                    i -= 1;\n-                                    None\n-                                }\n-                                _ => None,\n-                            })\n-                            .unwrap(),\n-                        Set1::One(_) => bug!(),\n-                        Set1::Many => \"Ambiguous\".into(),\n+                        ObjectLifetimeDefault::Empty => \"BaseDefault\".into(),\n+                        ObjectLifetimeDefault::Static => \"'static\".into(),\n+                        ObjectLifetimeDefault::Param(def_id) => {\n+                            let def_id = def_id.expect_local();\n+                            tcx.hir().ty_param_name(def_id).to_string().into()\n+                        }\n+                        ObjectLifetimeDefault::Ambiguous => \"Ambiguous\".into(),\n                     })\n                     .collect::<Vec<Cow<'static, str>>>()\n                     .join(\",\");\n@@ -1376,40 +1349,20 @@ fn object_lifetime_defaults_for_item<'tcx>(\n             }\n \n             Some(match set {\n-                Set1::Empty => Set1::Empty,\n-                Set1::One(name) => {\n-                    if name == hir::LifetimeName::Static {\n-                        Set1::One(Region::Static)\n-                    } else {\n-                        generics\n-                            .params\n-                            .iter()\n-                            .filter_map(|param| match param.kind {\n-                                GenericParamKind::Lifetime { .. } => {\n-                                    let param_def_id = tcx.hir().local_def_id(param.hir_id);\n-                                    Some((\n-                                        param_def_id,\n-                                        hir::LifetimeName::Param(param_def_id, param.name),\n-                                    ))\n-                                }\n-                                _ => None,\n-                            })\n-                            .enumerate()\n-                            .find(|&(_, (_, lt_name))| lt_name == name)\n-                            .map_or(Set1::Many, |(i, (def_id, _))| {\n-                                Set1::One(Region::EarlyBound(i as u32, def_id.to_def_id()))\n-                            })\n-                    }\n+                Set1::Empty => ObjectLifetimeDefault::Empty,\n+                Set1::One(hir::LifetimeName::Static) => ObjectLifetimeDefault::Static,\n+                Set1::One(hir::LifetimeName::Param(param_def_id, _)) => {\n+                    ObjectLifetimeDefault::Param(param_def_id.to_def_id())\n                 }\n-                Set1::Many => Set1::Many,\n+                _ => ObjectLifetimeDefault::Ambiguous,\n             })\n         }\n         GenericParamKind::Const { .. } => {\n             // Generic consts don't impose any constraints.\n             //\n             // We still store a dummy value here to allow generic parameters\n             // in an arbitrary order.\n-            Some(Set1::Empty)\n+            Some(ObjectLifetimeDefault::Empty)\n         }\n     };\n \n@@ -1769,24 +1722,37 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             };\n \n             let map = &self.map;\n-            let set_to_region = |set: &ObjectLifetimeDefault| match *set {\n-                Set1::Empty => {\n+            let generics = self.tcx.generics_of(def_id);\n+            let set_to_region = |set: ObjectLifetimeDefault| match set {\n+                ObjectLifetimeDefault::Empty => {\n                     if in_body {\n                         None\n                     } else {\n                         Some(Region::Static)\n                     }\n                 }\n-                Set1::One(r) => {\n-                    let lifetimes = generic_args.args.iter().filter_map(|arg| match arg {\n-                        GenericArg::Lifetime(lt) => Some(lt),\n+                ObjectLifetimeDefault::Static => Some(Region::Static),\n+                ObjectLifetimeDefault::Param(param_def_id) => {\n+                    let index = generics.param_def_id_to_index[&param_def_id];\n+                    generic_args.args.get(index as usize).and_then(|arg| match arg {\n+                        GenericArg::Lifetime(lt) => map.defs.get(&lt.hir_id).copied(),\n                         _ => None,\n-                    });\n-                    r.subst(lifetimes, map)\n+                    })\n                 }\n-                Set1::Many => None,\n+                ObjectLifetimeDefault::Ambiguous => None,\n             };\n-            self.tcx.object_lifetime_defaults(def_id).unwrap().iter().map(set_to_region).collect()\n+            generics\n+                .params\n+                .iter()\n+                .filter_map(|param| match param.kind {\n+                    GenericParamDefKind::Type { object_lifetime_default, .. } => {\n+                        Some(object_lifetime_default)\n+                    }\n+                    GenericParamDefKind::Const { .. } => Some(ObjectLifetimeDefault::Empty),\n+                    GenericParamDefKind::Lifetime => None,\n+                })\n+                .map(set_to_region)\n+                .collect()\n         });\n \n         debug!(\"visit_segment_args: object_lifetime_defaults={:?}\", object_lifetime_defaults);"}, {"sha": "ee184a093918e6492d9eb24896b2deecc9cf8afd", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/236ccce79e71020350b8e2d7a263807f02eb6e8e/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/236ccce79e71020350b8e2d7a263807f02eb6e8e/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=236ccce79e71020350b8e2d7a263807f02eb6e8e", "patch": "@@ -252,9 +252,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 })\n             }\n         };\n-\n         debug!(\"ast_region_to_region(lifetime={:?}) yields {:?}\", lifetime, r);\n-\n         r\n     }\n "}, {"sha": "1c1df4a2f7f9f302ebb8fe33bf2af8391999300f", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/236ccce79e71020350b8e2d7a263807f02eb6e8e/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/236ccce79e71020350b8e2d7a263807f02eb6e8e/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=236ccce79e71020350b8e2d7a263807f02eb6e8e", "patch": "@@ -34,6 +34,7 @@ use rustc_hir::weak_lang_items;\n use rustc_hir::{GenericParamKind, HirId, Node};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n+use rustc_middle::middle::resolve_lifetime::ObjectLifetimeDefault;\n use rustc_middle::mir::mono::Linkage;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::InternalSubsts;\n@@ -1597,7 +1598,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                         pure_wrt_drop: false,\n                         kind: ty::GenericParamDefKind::Type {\n                             has_default: false,\n-                            object_lifetime_default: rl::Set1::Empty,\n+                            object_lifetime_default: ObjectLifetimeDefault::Empty,\n                             synthetic: false,\n                         },\n                     });\n@@ -1671,7 +1672,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                 has_default: default.is_some(),\n                 object_lifetime_default: object_lifetime_defaults\n                     .as_ref()\n-                    .map_or(rl::Set1::Empty, |o| o[i]),\n+                    .map_or(ObjectLifetimeDefault::Empty, |o| o[i]),\n                 synthetic,\n             };\n \n@@ -1727,7 +1728,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             pure_wrt_drop: false,\n             kind: ty::GenericParamDefKind::Type {\n                 has_default: false,\n-                object_lifetime_default: rl::Set1::Empty,\n+                object_lifetime_default: ObjectLifetimeDefault::Empty,\n                 synthetic: false,\n             },\n         }));\n@@ -1744,7 +1745,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                 pure_wrt_drop: false,\n                 kind: ty::GenericParamDefKind::Type {\n                     has_default: false,\n-                    object_lifetime_default: rl::Set1::Empty,\n+                    object_lifetime_default: ObjectLifetimeDefault::Empty,\n                     synthetic: false,\n                 },\n             });"}]}