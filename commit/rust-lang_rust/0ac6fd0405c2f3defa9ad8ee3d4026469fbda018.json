{"sha": "0ac6fd0405c2f3defa9ad8ee3d4026469fbda018", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhYzZmZDA0MDVjMmYzZGVmYTlhZDhlZTNkNDAyNjQ2OWZiZGEwMTg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-01T09:17:38Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-12T07:43:55Z"}, "message": "fix const_prop spans and re-bless tests", "tree": {"sha": "d9c842f302d6d2b0dc3b712943523e2a57573d23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9c842f302d6d2b0dc3b712943523e2a57573d23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018", "html_url": "https://github.com/rust-lang/rust/commit/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc6ffaebd5b56793f86443a0a50c06f025321198", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc6ffaebd5b56793f86443a0a50c06f025321198", "html_url": "https://github.com/rust-lang/rust/commit/dc6ffaebd5b56793f86443a0a50c06f025321198"}], "stats": {"total": 113, "additions": 61, "deletions": 52}, "files": [{"sha": "5deae94fe0c8e785086b005f72b626051e1e9d43", "filename": "src/librustc_mir/const_eval/error.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018/src%2Flibrustc_mir%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018/src%2Flibrustc_mir%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Ferror.rs?ref=0ac6fd0405c2f3defa9ad8ee3d4026469fbda018", "patch": "@@ -2,7 +2,7 @@ use std::error::Error;\n use std::fmt;\n \n use rustc_middle::mir::AssertKind;\n-use rustc_span::Symbol;\n+use rustc_span::{Span, Symbol};\n \n use super::InterpCx;\n use crate::interpret::{ConstEvalErr, InterpErrorInfo, Machine};\n@@ -53,8 +53,9 @@ impl Error for ConstEvalErrKind {}\n pub fn error_to_const_error<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>>(\n     ecx: &InterpCx<'mir, 'tcx, M>,\n     error: InterpErrorInfo<'tcx>,\n+    span: Option<Span>,\n ) -> ConstEvalErr<'tcx> {\n     error.print_backtrace();\n     let stacktrace = ecx.generate_stacktrace();\n-    ConstEvalErr { error: error.kind, stacktrace, span: ecx.cur_span() }\n+    ConstEvalErr { error: error.kind, stacktrace, span: span.unwrap_or_else(|| ecx.cur_span()) }\n }"}, {"sha": "28e77bb57cd0c19905562a92dc444b42d8d71cfc", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=0ac6fd0405c2f3defa9ad8ee3d4026469fbda018", "patch": "@@ -213,7 +213,7 @@ fn validate_and_turn_into_const<'tcx>(\n     })();\n \n     val.map_err(|error| {\n-        let err = error_to_const_error(&ecx, error);\n+        let err = error_to_const_error(&ecx, error, None);\n         err.struct_error(ecx.tcx_at(), \"it is undefined behavior to use this value\", |mut diag| {\n             diag.note(note_on_undefined_behavior_error());\n             diag.emit();\n@@ -312,7 +312,7 @@ pub fn const_eval_raw_provider<'tcx>(\n     res.and_then(|body| eval_body_using_ecx(&mut ecx, cid, &body))\n         .map(|place| RawConst { alloc_id: place.ptr.assert_ptr().alloc_id, ty: place.layout.ty })\n         .map_err(|error| {\n-            let err = error_to_const_error(&ecx, error);\n+            let err = error_to_const_error(&ecx, error, None);\n             // errors in statics are always emitted as fatal errors\n             if is_static {\n                 // Ensure that if the above error was either `TooGeneric` or `Reported`"}, {"sha": "793a67d804cec5b5125065fa25c4ea2758be4b3a", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=0ac6fd0405c2f3defa9ad8ee3d4026469fbda018", "patch": "@@ -268,11 +268,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             (&ty::Array(_, length), &ty::Slice(_)) => {\n                 let ptr = self.read_immediate(src)?.to_scalar()?;\n                 // u64 cast is from usize to u64, which is always good\n-                let val = Immediate::new_slice(\n-                    ptr,\n-                    length.eval_usize(self.tcx, self.param_env),\n-                    self,\n-                );\n+                let val =\n+                    Immediate::new_slice(ptr, length.eval_usize(self.tcx, self.param_env), self);\n                 self.write_immediate(val, dest)\n             }\n             (&ty::Dynamic(..), &ty::Dynamic(..)) => {"}, {"sha": "47e791854df4889cbeca5a577361e5fba76572f1", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=0ac6fd0405c2f3defa9ad8ee3d4026469fbda018", "patch": "@@ -314,8 +314,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n     #[inline(always)]\n     pub fn cur_span(&self) -> Span {\n-        self\n-            .stack()\n+        self.stack()\n             .last()\n             .and_then(|f| f.current_source_info())\n             .map(|si| si.span)\n@@ -419,7 +418,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let did = instance.def_id();\n         if let Some(did) = did.as_local() {\n             if self.tcx_at().has_typeck_tables(did) {\n-                if let Some(error_reported) = self.tcx_at().typeck_tables_of(did).tainted_by_errors {\n+                if let Some(error_reported) = self.tcx_at().typeck_tables_of(did).tainted_by_errors\n+                {\n                     throw_inval!(TypeckError(error_reported))\n                 }\n             }"}, {"sha": "2477100eb8ad87e2f840128ee464304795836b3a", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=0ac6fd0405c2f3defa9ad8ee3d4026469fbda018", "patch": "@@ -404,7 +404,10 @@ where\n                     // to get some code to work that probably ought to work.\n                     field_layout.align.abi\n                 }\n-                None => span_bug!(self.cur_span(), \"cannot compute offset for extern type field at non-0 offset\"),\n+                None => span_bug!(\n+                    self.cur_span(),\n+                    \"cannot compute offset for extern type field at non-0 offset\"\n+                ),\n             };\n             (base.meta, offset.align_to(align))\n         } else {\n@@ -440,7 +443,11 @@ where\n                 assert!(!field_layout.is_unsized());\n                 base.offset(offset, MemPlaceMeta::None, field_layout, self)\n             }\n-            _ => span_bug!(self.cur_span(), \"`mplace_index` called on non-array type {:?}\", base.layout.ty),\n+            _ => span_bug!(\n+                self.cur_span(),\n+                \"`mplace_index` called on non-array type {:?}\",\n+                base.layout.ty\n+            ),\n         }\n     }\n \n@@ -484,7 +491,9 @@ where\n         // (that have count 0 in their layout).\n         let from_offset = match base.layout.fields {\n             FieldsShape::Array { stride, .. } => stride * from, // `Size` multiplication is checked\n-            _ => span_bug!(self.cur_span(), \"unexpected layout of index access: {:#?}\", base.layout),\n+            _ => {\n+                span_bug!(self.cur_span(), \"unexpected layout of index access: {:#?}\", base.layout)\n+            }\n         };\n \n         // Compute meta and new layout\n@@ -497,7 +506,9 @@ where\n                 let len = Scalar::from_machine_usize(inner_len, self);\n                 (MemPlaceMeta::Meta(len), base.layout.ty)\n             }\n-            _ => span_bug!(self.cur_span(), \"cannot subslice non-array type: `{:?}`\", base.layout.ty),\n+            _ => {\n+                span_bug!(self.cur_span(), \"cannot subslice non-array type: `{:?}`\", base.layout.ty)\n+            }\n         };\n         let layout = self.layout_of(ty)?;\n         base.offset(from_offset, meta, layout, self)\n@@ -776,9 +787,11 @@ where\n             Immediate::Scalar(scalar) => {\n                 match dest.layout.abi {\n                     Abi::Scalar(_) => {} // fine\n-                    _ => {\n-                        span_bug!(self.cur_span(), \"write_immediate_to_mplace: invalid Scalar layout: {:#?}\", dest.layout)\n-                    }\n+                    _ => span_bug!(\n+                        self.cur_span(),\n+                        \"write_immediate_to_mplace: invalid Scalar layout: {:#?}\",\n+                        dest.layout\n+                    ),\n                 }\n                 self.memory.get_raw_mut(ptr.alloc_id)?.write_scalar(\n                     &tcx,"}, {"sha": "d50f052d405bc78d8e4ddb1335ab645c995a7433", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=0ac6fd0405c2f3defa9ad8ee3d4026469fbda018", "patch": "@@ -405,7 +405,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             Ok(op) => Some(op),\n             Err(error) => {\n                 let tcx = self.ecx.tcx.at(c.span);\n-                let err = error_to_const_error(&self.ecx, error);\n+                let err = error_to_const_error(&self.ecx, error, Some(c.span));\n                 if let Some(lint_root) = self.lint_root(source_info) {\n                     let lint_only = match c.literal.val {\n                         // Promoteds must lint and not error as the user didn't ask for them\n@@ -417,12 +417,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                     if lint_only {\n                         // Out of backwards compatibility we cannot report hard errors in unused\n                         // generic functions using associated constants of the generic parameters.\n-                        err.report_as_lint(\n-                            tcx,\n-                            \"erroneous constant used\",\n-                            lint_root,\n-                            Some(c.span),\n-                        );\n+                        err.report_as_lint(tcx, \"erroneous constant used\", lint_root, Some(c.span));\n                     } else {\n                         err.report_as_error(tcx, \"erroneous constant used\");\n                     }"}, {"sha": "3386e6e588e7120105e272edf2fb7131ec97c52e", "filename": "src/test/ui/consts/const-eval/infinite_loop.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr?ref=0ac6fd0405c2f3defa9ad8ee3d4026469fbda018", "patch": "@@ -23,10 +23,10 @@ LL |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n    = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/infinite_loop.rs:8:20\n+  --> $DIR/infinite_loop.rs:8:17\n    |\n LL |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n-   |                    ^^^^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "8c2190b4e591f87624bbed87cd95288ffe9bfba9", "filename": "src/test/ui/consts/const_limit/const_eval_limit_reached.stderr", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr?ref=0ac6fd0405c2f3defa9ad8ee3d4026469fbda018", "patch": "@@ -1,15 +1,18 @@\n error: any use of this value will cause an error\n-  --> $DIR/const_eval_limit_reached.rs:8:11\n+  --> $DIR/const_eval_limit_reached.rs:8:5\n    |\n-LL | / const X: usize = {\n-LL | |     let mut x = 0;\n-LL | |     while x != 1000 {\n-   | |           ^^^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n-LL | |\n-...  |\n-LL | |     x\n-LL | | };\n-   | |__-\n+LL |  / const X: usize = {\n+LL |  |     let mut x = 0;\n+LL |  |     while x != 1000 {\n+   |  |_____^\n+LL | ||\n+LL | ||         x += 1;\n+LL | ||     }\n+   | ||_____^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n+LL |  |\n+LL |  |     x\n+LL |  | };\n+   |  |__-\n    |\n    = note: `#[deny(const_err)]` on by default\n "}, {"sha": "9042c6f6be1912c0d85a60db229eddbff965230f", "filename": "src/test/ui/consts/recursive-zst-static.default.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.default.stderr?ref=0ac6fd0405c2f3defa9ad8ee3d4026469fbda018", "patch": "@@ -1,8 +1,8 @@\n error[E0391]: cycle detected when const-evaluating `FOO`\n-  --> $DIR/recursive-zst-static.rs:10:18\n+  --> $DIR/recursive-zst-static.rs:10:1\n    |\n LL | static FOO: () = FOO;\n-   |                  ^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: ...which requires const-evaluating `FOO`...\n   --> $DIR/recursive-zst-static.rs:10:1"}, {"sha": "9042c6f6be1912c0d85a60db229eddbff965230f", "filename": "src/test/ui/consts/recursive-zst-static.unleash.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.unleash.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.unleash.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.unleash.stderr?ref=0ac6fd0405c2f3defa9ad8ee3d4026469fbda018", "patch": "@@ -1,8 +1,8 @@\n error[E0391]: cycle detected when const-evaluating `FOO`\n-  --> $DIR/recursive-zst-static.rs:10:18\n+  --> $DIR/recursive-zst-static.rs:10:1\n    |\n LL | static FOO: () = FOO;\n-   |                  ^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: ...which requires const-evaluating `FOO`...\n   --> $DIR/recursive-zst-static.rs:10:1"}, {"sha": "55f42d84f9cb032ca28e49be253c6c0ecbae6a7a", "filename": "src/test/ui/consts/uninhabited-const-issue-61744.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs?ref=0ac6fd0405c2f3defa9ad8ee3d4026469fbda018", "patch": "@@ -1,11 +1,11 @@\n // build-fail\n \n pub const unsafe fn fake_type<T>() -> T {\n-    hint_unreachable()\n+    hint_unreachable() //~ ERROR evaluation of constant value failed\n }\n \n pub const unsafe fn hint_unreachable() -> ! {\n-    fake_type() //~ ERROR evaluation of constant value failed\n+    fake_type()\n }\n \n trait Const {"}, {"sha": "fc908b2b2225f130de39aba07c194bc2f67b5443", "filename": "src/test/ui/consts/uninhabited-const-issue-61744.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr?ref=0ac6fd0405c2f3defa9ad8ee3d4026469fbda018", "patch": "@@ -1,9 +1,10 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n    |\n LL |     hint_unreachable()\n-   |     ------------------\n+   |     ^^^^^^^^^^^^^^^^^^\n    |     |\n+   |     reached the configured maximum number of stack frames\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n    |     inside `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n@@ -71,9 +72,8 @@ LL |     hint_unreachable()\n    |     inside `fake_type::<i32>` at $DIR/uninhabited-const-issue-61744.rs:4:5\n ...\n LL |     fake_type()\n-   |     ^^^^^^^^^^^\n+   |     -----------\n    |     |\n-   |     reached the configured maximum number of stack frames\n    |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:8:5"}, {"sha": "093606e100cb3fa300003ba5799a603837ea05f9", "filename": "src/test/ui/recursion/recursive-static-definition.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.stderr?ref=0ac6fd0405c2f3defa9ad8ee3d4026469fbda018", "patch": "@@ -1,8 +1,8 @@\n error[E0391]: cycle detected when const-evaluating `FOO`\n-  --> $DIR/recursive-static-definition.rs:1:23\n+  --> $DIR/recursive-static-definition.rs:1:1\n    |\n LL | pub static FOO: u32 = FOO;\n-   |                       ^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: ...which requires const-evaluating `FOO`...\n   --> $DIR/recursive-static-definition.rs:1:1"}, {"sha": "50dfce3448c341e7caee2515d367803ced13bdbd", "filename": "src/test/ui/write-to-static-mut-in-static.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ac6fd0405c2f3defa9ad8ee3d4026469fbda018/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrite-to-static-mut-in-static.stderr?ref=0ac6fd0405c2f3defa9ad8ee3d4026469fbda018", "patch": "@@ -5,10 +5,10 @@ LL | pub static mut B: () = unsafe { A = 1; };\n    |                                 ^^^^^ modifying a static's initial value from another static's initializer\n \n error[E0391]: cycle detected when const-evaluating `C`\n-  --> $DIR/write-to-static-mut-in-static.rs:5:34\n+  --> $DIR/write-to-static-mut-in-static.rs:5:1\n    |\n LL | pub static mut C: u32 = unsafe { C = 1; 0 };\n-   |                                  ^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: ...which requires const-evaluating `C`...\n   --> $DIR/write-to-static-mut-in-static.rs:5:1"}]}