{"sha": "39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb", "node_id": "C_kwDOAAsO6NoAKDM5YTNiNTI3Njc0YzFjOGQyYjlkM2VkYzBjZmFlNjdhYmU2YjNlY2I", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-02T03:03:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-02T03:03:22Z"}, "message": "Auto merge of #87402 - nagisa:nagisa/request-feature-requests-for-features, r=estebank\n\nDirect users towards using Rust target feature names in CLI\n\nThis PR consists of a couple of changes on how we handle target features.\n\nIn particular there is a bug-fix wherein we avoid passing through features that aren't prefixed by `+` or `-` to LLVM. These appear to be causing LLVM to assert, which is pretty poor a behaviour (and also makes it pretty clear we expect feature names to be prefixed).\n\nThe other commit, I anticipate to be somewhat more controversial is outputting a warning when users specify a LLVM-specific, or otherwise unknown, feature name on the CLI. In those situations we request users to either replace it with a known Rust feature name (e.g. `bmi` -> `bmi1`) or file a feature request. I've a couple motivations for this: first of all, if users are specifying these features on the command line, I'm pretty confident there is also a need for these features to be usable via `#[cfg(target_feature)]` machinery.  And second, we're growing a fair number of backends recently and having ability to provide some sort of unified-ish interface in this place seems pretty useful to me.\n\nSponsored by: standard.ai", "tree": {"sha": "19cad78e9c5434d03b45ff81ef169449e409a12b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19cad78e9c5434d03b45ff81ef169449e409a12b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb", "html_url": "https://github.com/rust-lang/rust/commit/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0c4da49983aa699f715caf681e3154b445fb60b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0c4da49983aa699f715caf681e3154b445fb60b", "html_url": "https://github.com/rust-lang/rust/commit/f0c4da49983aa699f715caf681e3154b445fb60b"}, {"sha": "df701a292ce552fddad2048cfcb6edaf90222d85", "url": "https://api.github.com/repos/rust-lang/rust/commits/df701a292ce552fddad2048cfcb6edaf90222d85", "html_url": "https://github.com/rust-lang/rust/commit/df701a292ce552fddad2048cfcb6edaf90222d85"}], "stats": {"total": 357, "additions": 251, "deletions": 106}, "files": [{"sha": "20b9b659f1504089615bf797528766b236f78605", "filename": "compiler/rustc_codegen_gcc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs?ref=39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb", "patch": "@@ -132,7 +132,7 @@ impl ExtraBackendMethods for GccCodegenBackend {\n         base::compile_codegen_unit(tcx, cgu_name)\n     }\n \n-    fn target_machine_factory(&self, _sess: &Session, _opt_level: OptLevel) -> TargetMachineFactoryFn<Self> {\n+    fn target_machine_factory(&self, _sess: &Session, _opt_level: OptLevel, _features: &[String]) -> TargetMachineFactoryFn<Self> {\n         // TODO(antoyo): set opt level.\n         Arc::new(|_| {\n             Ok(())"}, {"sha": "8f30f0895f488e6a994daef53653b4c56a71a563", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb", "patch": "@@ -79,13 +79,11 @@ pub fn sanitize_attrs<'ll>(\n     }\n     if enabled.contains(SanitizerSet::MEMTAG) {\n         // Check to make sure the mte target feature is actually enabled.\n-        let sess = cx.tcx.sess;\n-        let features = llvm_util::llvm_global_features(sess).join(\",\");\n-        let mte_feature_enabled = features.rfind(\"+mte\");\n-        let mte_feature_disabled = features.rfind(\"-mte\");\n-\n-        if mte_feature_enabled.is_none() || (mte_feature_disabled > mte_feature_enabled) {\n-            sess.err(\"`-Zsanitizer=memtag` requires `-Ctarget-feature=+mte`\");\n+        let features = cx.tcx.global_backend_features(());\n+        let mte_feature =\n+            features.iter().map(|s| &s[..]).rfind(|n| [\"+mte\", \"-mte\"].contains(&&n[..]));\n+        if let None | Some(\"-mte\") = mte_feature {\n+            cx.tcx.sess.err(\"`-Zsanitizer=memtag` requires `-Ctarget-feature=+mte`\");\n         }\n \n         attrs.push(llvm::AttributeKind::SanitizeMemTag.create_attr(cx.llcx));\n@@ -382,10 +380,7 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n     let mut function_features = function_features\n         .iter()\n         .flat_map(|feat| {\n-            llvm_util::to_llvm_feature(cx.tcx.sess, feat)\n-                .into_iter()\n-                .map(|f| format!(\"+{}\", f))\n-                .collect::<Vec<String>>()\n+            llvm_util::to_llvm_features(cx.tcx.sess, feat).into_iter().map(|f| format!(\"+{}\", f))\n         })\n         .chain(codegen_fn_attrs.instruction_set.iter().map(|x| match x {\n             InstructionSetAttr::ArmA32 => \"-thumb-mode\".to_string(),\n@@ -418,10 +413,11 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n     }\n \n     if !function_features.is_empty() {\n-        let mut global_features = llvm_util::llvm_global_features(cx.tcx.sess);\n-        global_features.extend(function_features.into_iter());\n-        let features = global_features.join(\",\");\n-        let val = CString::new(features).unwrap();\n+        let global_features = cx.tcx.global_backend_features(()).iter().map(|s| &s[..]);\n+        let val = global_features\n+            .chain(function_features.iter().map(|s| &s[..]))\n+            .intersperse(\",\")\n+            .collect::<SmallCStr>();\n         to_add.push(llvm::CreateAttrStringValue(cx.llcx, cstr!(\"target-features\"), &val));\n     }\n "}, {"sha": "c18719d4ad7391c7aa52c7ee129df4f4f0638729", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb", "patch": "@@ -100,7 +100,10 @@ pub fn write_output_file<'ll>(\n \n pub fn create_informational_target_machine(sess: &Session) -> &'static mut llvm::TargetMachine {\n     let config = TargetMachineFactoryConfig { split_dwarf_file: None };\n-    target_machine_factory(sess, config::OptLevel::No)(config)\n+    // Can't use query system here quite yet because this function is invoked before the query\n+    // system/tcx is set up.\n+    let features = llvm_util::global_llvm_features(sess, false);\n+    target_machine_factory(sess, config::OptLevel::No, &features)(config)\n         .unwrap_or_else(|err| llvm_err(sess.diagnostic(), &err).raise())\n }\n \n@@ -115,8 +118,12 @@ pub fn create_target_machine(tcx: TyCtxt<'_>, mod_name: &str) -> &'static mut ll\n         None\n     };\n     let config = TargetMachineFactoryConfig { split_dwarf_file };\n-    target_machine_factory(tcx.sess, tcx.backend_optimization_level(()))(config)\n-        .unwrap_or_else(|err| llvm_err(tcx.sess.diagnostic(), &err).raise())\n+    target_machine_factory(\n+        &tcx.sess,\n+        tcx.backend_optimization_level(()),\n+        tcx.global_backend_features(()),\n+    )(config)\n+    .unwrap_or_else(|err| llvm_err(tcx.sess.diagnostic(), &err).raise())\n }\n \n pub fn to_llvm_opt_settings(\n@@ -171,6 +178,7 @@ pub(crate) fn to_llvm_code_model(code_model: Option<CodeModel>) -> llvm::CodeMod\n pub fn target_machine_factory(\n     sess: &Session,\n     optlvl: config::OptLevel,\n+    target_features: &[String],\n ) -> TargetMachineFactoryFn<LlvmCodegenBackend> {\n     let reloc_model = to_llvm_relocation_model(sess.relocation_model());\n \n@@ -195,8 +203,7 @@ pub fn target_machine_factory(\n \n     let triple = SmallCStr::new(&sess.target.llvm_target);\n     let cpu = SmallCStr::new(llvm_util::target_cpu(sess));\n-    let features = llvm_util::llvm_global_features(sess).join(\",\");\n-    let features = CString::new(features).unwrap();\n+    let features = CString::new(target_features.join(\",\")).unwrap();\n     let abi = SmallCStr::new(&sess.target.llvm_abiname);\n     let trap_unreachable =\n         sess.opts.debugging_opts.trap_unreachable.unwrap_or(sess.target.trap_unreachable);"}, {"sha": "09c2c4ec7712ae8c71baa77920a2710ba2314753", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb", "patch": "@@ -11,6 +11,7 @@\n #![feature(extern_types)]\n #![feature(once_cell)]\n #![feature(nll)]\n+#![feature(iter_intersperse)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n \n@@ -32,6 +33,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{ErrorReported, FatalError, Handler};\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n+use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{OptLevel, OutputFilenames, PrintRequest};\n use rustc_session::Session;\n@@ -126,8 +128,9 @@ impl ExtraBackendMethods for LlvmCodegenBackend {\n         &self,\n         sess: &Session,\n         optlvl: OptLevel,\n+        target_features: &[String],\n     ) -> TargetMachineFactoryFn<Self> {\n-        back::write::target_machine_factory(sess, optlvl)\n+        back::write::target_machine_factory(sess, optlvl, target_features)\n     }\n     fn target_cpu<'b>(&self, sess: &'b Session) -> &'b str {\n         llvm_util::target_cpu(sess)\n@@ -251,6 +254,11 @@ impl CodegenBackend for LlvmCodegenBackend {\n         llvm_util::init(sess); // Make sure llvm is inited\n     }\n \n+    fn provide(&self, providers: &mut Providers) {\n+        providers.global_backend_features =\n+            |tcx, ()| llvm_util::global_llvm_features(tcx.sess, true)\n+    }\n+\n     fn print(&self, req: PrintRequest, sess: &Session) {\n         match req {\n             PrintRequest::RelocationModels => {"}, {"sha": "3b06587061d9d5b4821f95c2bcac16ea73afa5bc", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 126, "deletions": 68, "changes": 194, "blob_url": "https://github.com/rust-lang/rust/blob/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb", "patch": "@@ -2,14 +2,18 @@ use crate::back::write::create_informational_target_machine;\n use crate::{llvm, llvm_util};\n use libc::c_int;\n use libloading::Library;\n-use rustc_codegen_ssa::target_features::{supported_target_features, tied_target_features};\n+use rustc_codegen_ssa::target_features::{\n+    supported_target_features, tied_target_features, RUSTC_SPECIFIC_FEATURES,\n+};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_fs_util::path_to_c_string;\n use rustc_middle::bug;\n use rustc_session::config::PrintRequest;\n use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::{MergeFunctions, PanicStrategy};\n+use smallvec::{smallvec, SmallVec};\n use std::ffi::{CStr, CString};\n use tracing::debug;\n \n@@ -155,45 +159,46 @@ pub fn time_trace_profiler_finish(file_name: &Path) {\n     }\n }\n \n-// WARNING: the features after applying `to_llvm_feature` must be known\n+// WARNING: the features after applying `to_llvm_features` must be known\n // to LLVM or the feature detection code will walk past the end of the feature\n // array, leading to crashes.\n+//\n // To find a list of LLVM's names, check llvm-project/llvm/include/llvm/Support/*TargetParser.def\n // where the * matches the architecture's name\n // Beware to not use the llvm github project for this, but check the git submodule\n // found in src/llvm-project\n // Though note that Rust can also be build with an external precompiled version of LLVM\n // which might lead to failures if the oldest tested / supported LLVM version\n // doesn't yet support the relevant intrinsics\n-pub fn to_llvm_feature<'a>(sess: &Session, s: &'a str) -> Vec<&'a str> {\n+pub fn to_llvm_features<'a>(sess: &Session, s: &'a str) -> SmallVec<[&'a str; 2]> {\n     let arch = if sess.target.arch == \"x86_64\" { \"x86\" } else { &*sess.target.arch };\n     match (arch, s) {\n         (\"x86\", \"sse4.2\") => {\n             if get_version() >= (14, 0, 0) {\n-                vec![\"sse4.2\", \"crc32\"]\n+                smallvec![\"sse4.2\", \"crc32\"]\n             } else {\n-                vec![\"sse4.2\"]\n+                smallvec![\"sse4.2\"]\n             }\n         }\n-        (\"x86\", \"pclmulqdq\") => vec![\"pclmul\"],\n-        (\"x86\", \"rdrand\") => vec![\"rdrnd\"],\n-        (\"x86\", \"bmi1\") => vec![\"bmi\"],\n-        (\"x86\", \"cmpxchg16b\") => vec![\"cx16\"],\n-        (\"x86\", \"avx512vaes\") => vec![\"vaes\"],\n-        (\"x86\", \"avx512gfni\") => vec![\"gfni\"],\n-        (\"x86\", \"avx512vpclmulqdq\") => vec![\"vpclmulqdq\"],\n-        (\"aarch64\", \"fp\") => vec![\"fp-armv8\"],\n-        (\"aarch64\", \"fp16\") => vec![\"fullfp16\"],\n-        (\"aarch64\", \"fhm\") => vec![\"fp16fml\"],\n-        (\"aarch64\", \"rcpc2\") => vec![\"rcpc-immo\"],\n-        (\"aarch64\", \"dpb\") => vec![\"ccpp\"],\n-        (\"aarch64\", \"dpb2\") => vec![\"ccdp\"],\n-        (\"aarch64\", \"frintts\") => vec![\"fptoint\"],\n-        (\"aarch64\", \"fcma\") => vec![\"complxnum\"],\n-        (\"aarch64\", \"pmuv3\") => vec![\"perfmon\"],\n-        (\"aarch64\", \"paca\") => vec![\"pauth\"],\n-        (\"aarch64\", \"pacg\") => vec![\"pauth\"],\n-        (_, s) => vec![s],\n+        (\"x86\", \"pclmulqdq\") => smallvec![\"pclmul\"],\n+        (\"x86\", \"rdrand\") => smallvec![\"rdrnd\"],\n+        (\"x86\", \"bmi1\") => smallvec![\"bmi\"],\n+        (\"x86\", \"cmpxchg16b\") => smallvec![\"cx16\"],\n+        (\"x86\", \"avx512vaes\") => smallvec![\"vaes\"],\n+        (\"x86\", \"avx512gfni\") => smallvec![\"gfni\"],\n+        (\"x86\", \"avx512vpclmulqdq\") => smallvec![\"vpclmulqdq\"],\n+        (\"aarch64\", \"fp\") => smallvec![\"fp-armv8\"],\n+        (\"aarch64\", \"fp16\") => smallvec![\"fullfp16\"],\n+        (\"aarch64\", \"fhm\") => smallvec![\"fp16fml\"],\n+        (\"aarch64\", \"rcpc2\") => smallvec![\"rcpc-immo\"],\n+        (\"aarch64\", \"dpb\") => smallvec![\"ccpp\"],\n+        (\"aarch64\", \"dpb2\") => smallvec![\"ccdp\"],\n+        (\"aarch64\", \"frintts\") => smallvec![\"fptoint\"],\n+        (\"aarch64\", \"fcma\") => smallvec![\"complxnum\"],\n+        (\"aarch64\", \"pmuv3\") => smallvec![\"perfmon\"],\n+        (\"aarch64\", \"paca\") => smallvec![\"pauth\"],\n+        (\"aarch64\", \"pacg\") => smallvec![\"pauth\"],\n+        (_, s) => smallvec![s],\n     }\n }\n \n@@ -207,7 +212,6 @@ pub fn check_tied_features(\n         // Tied features must be set to the same value, or not set at all\n         let mut tied_iter = tied.iter();\n         let enabled = features.get(tied_iter.next().unwrap());\n-\n         if tied_iter.any(|f| enabled != features.get(f)) {\n             return Some(tied);\n         }\n@@ -224,8 +228,8 @@ pub fn target_features(sess: &Session) -> Vec<Symbol> {\n                 if sess.is_nightly_build() || gate.is_none() { Some(feature) } else { None }\n             })\n             .filter(|feature| {\n-                for llvm_feature in to_llvm_feature(sess, feature) {\n-                    let cstr = CString::new(llvm_feature).unwrap();\n+                for llvm_feature in to_llvm_features(sess, feature) {\n+                    let cstr = SmallCStr::new(llvm_feature);\n                     if unsafe { llvm::LLVMRustHasFeature(target_machine, cstr.as_ptr()) } {\n                         return true;\n                     }\n@@ -292,9 +296,9 @@ fn print_target_features(sess: &Session, tm: &llvm::TargetMachine) {\n     let mut rustc_target_features = supported_target_features(sess)\n         .iter()\n         .filter_map(|(feature, _gate)| {\n-            for llvm_feature in to_llvm_feature(sess, *feature) {\n+            for llvm_feature in to_llvm_features(sess, *feature) {\n                 // LLVM asserts that these are sorted. LLVM and Rust both use byte comparison for these strings.\n-                match target_features.binary_search_by_key(&llvm_feature, |(f, _d)| (*f)).ok().map(\n+                match target_features.binary_search_by_key(&llvm_feature, |(f, _d)| f).ok().map(\n                     |index| {\n                         let (_f, desc) = target_features.remove(index);\n                         (*feature, desc)\n@@ -364,14 +368,7 @@ pub fn target_cpu(sess: &Session) -> &str {\n \n /// The list of LLVM features computed from CLI flags (`-Ctarget-cpu`, `-Ctarget-feature`,\n /// `--target` and similar).\n-// FIXME(nagisa): Cache the output of this somehow? Maybe make this a query? We're calling this\n-// for every function that has `#[target_feature]` on it. The global features won't change between\n-// the functions; only crates, maybe\u2026\n-pub fn llvm_global_features(sess: &Session) -> Vec<String> {\n-    // FIXME(nagisa): this should definitely be available more centrally and to other codegen backends.\n-    /// These features control behaviour of rustc rather than llvm.\n-    const RUSTC_SPECIFIC_FEATURES: &[&str] = &[\"crt-static\"];\n-\n+pub(crate) fn global_llvm_features(sess: &Session, diagnostics: bool) -> Vec<String> {\n     // Features that come earlier are overriden by conflicting features later in the string.\n     // Typically we'll want more explicit settings to override the implicit ones, so:\n     //\n@@ -417,47 +414,108 @@ pub fn llvm_global_features(sess: &Session) -> Vec<String> {\n         Some(_) | None => {}\n     };\n \n-    fn strip(s: &str) -> &str {\n-        s.strip_prefix(&['+', '-']).unwrap_or(s)\n-    }\n+    // Features implied by an implicit or explicit `--target`.\n+    features.extend(\n+        sess.target\n+            .features\n+            .split(',')\n+            .filter(|v| !v.is_empty() && backend_feature_name(v).is_some())\n+            .map(String::from),\n+    );\n \n-    let filter = |s: &str| {\n-        if s.is_empty() {\n-            return vec![];\n-        }\n-        let feature = strip(s);\n-        if feature == s {\n-            return vec![s.to_string()];\n+    // -Ctarget-features\n+    let supported_features = supported_target_features(sess);\n+    let feats = sess\n+        .opts\n+        .cg\n+        .target_feature\n+        .split(',')\n+        .filter_map(|s| {\n+            let enable_disable = match s.chars().next() {\n+                None => return None,\n+                Some(c @ '+' | c @ '-') => c,\n+                Some(_) => {\n+                    if diagnostics {\n+                        let mut diag = sess.struct_warn(&format!(\n+                            \"unknown feature specified for `-Ctarget-feature`: `{}`\",\n+                            s\n+                        ));\n+                        diag.note(\"features must begin with a `+` to enable or `-` to disable it\");\n+                        diag.emit();\n+                    }\n+                    return None;\n+                }\n+            };\n+\n+            let feature = backend_feature_name(s)?;\n+            // Warn against use of LLVM specific feature names on the CLI.\n+            if diagnostics && !supported_features.iter().any(|&(v, _)| v == feature) {\n+                let rust_feature = supported_features.iter().find_map(|&(rust_feature, _)| {\n+                    let llvm_features = to_llvm_features(sess, rust_feature);\n+                    if llvm_features.contains(&feature) && !llvm_features.contains(&rust_feature) {\n+                        Some(rust_feature)\n+                    } else {\n+                        None\n+                    }\n+                });\n+                let mut diag = sess.struct_warn(&format!(\n+                    \"unknown feature specified for `-Ctarget-feature`: `{}`\",\n+                    feature\n+                ));\n+                diag.note(\"it is still passed through to the codegen backend\");\n+                if let Some(rust_feature) = rust_feature {\n+                    diag.help(&format!(\"you might have meant: `{}`\", rust_feature));\n+                } else {\n+                    diag.note(\"consider filing a feature request\");\n+                }\n+                diag.emit();\n+            }\n+            Some((enable_disable, feature))\n+        })\n+        .collect::<SmallVec<[(char, &str); 8]>>();\n+\n+    if diagnostics {\n+        // FIXME(nagisa): figure out how to not allocate a full hashset here.\n+        let featmap = feats.iter().map(|&(flag, feat)| (feat, flag == '+')).collect();\n+        if let Some(f) = check_tied_features(sess, &featmap) {\n+            sess.err(&format!(\n+                \"target features {} must all be enabled or disabled together\",\n+                f.join(\", \")\n+            ));\n         }\n+    }\n \n-        // Rustc-specific feature requests like `+crt-static` or `-crt-static`\n-        // are not passed down to LLVM.\n+    features.extend(feats.into_iter().flat_map(|(enable_disable, feature)| {\n+        // rustc-specific features do not get passed down to LLVM\u2026\n         if RUSTC_SPECIFIC_FEATURES.contains(&feature) {\n-            return vec![];\n+            return SmallVec::<[_; 2]>::new();\n         }\n-        // ... otherwise though we run through `to_llvm_feature` feature when\n+        // ... otherwise though we run through `to_llvm_feature when\n         // passing requests down to LLVM. This means that all in-language\n         // features also work on the command line instead of having two\n         // different names when the LLVM name and the Rust name differ.\n-        to_llvm_feature(sess, feature).iter().map(|f| format!(\"{}{}\", &s[..1], f)).collect()\n-    };\n-\n-    // Features implied by an implicit or explicit `--target`.\n-    features.extend(sess.target.features.split(',').flat_map(&filter));\n+        to_llvm_features(sess, feature)\n+            .into_iter()\n+            .map(|f| format!(\"{}{}\", enable_disable, f))\n+            .collect()\n+    }));\n+    features\n+}\n \n-    // -Ctarget-features\n-    let feats: Vec<&str> = sess.opts.cg.target_feature.split(',').collect();\n-    // LLVM enables based on the last occurence of a feature\n-    if let Some(f) =\n-        check_tied_features(sess, &feats.iter().map(|f| (strip(f), !f.starts_with(\"-\"))).collect())\n-    {\n-        sess.err(&format!(\n-            \"Target features {} must all be enabled or disabled together\",\n-            f.join(\", \")\n-        ));\n+/// Returns a feature name for the given `+feature` or `-feature` string.\n+///\n+/// Only allows features that are backend specific (i.e. not [`RUSTC_SPECIFIC_FEATURES`].)\n+fn backend_feature_name(s: &str) -> Option<&str> {\n+    // features must start with a `+` or `-`.\n+    let feature = s.strip_prefix(&['+', '-'][..]).unwrap_or_else(|| {\n+        bug!(\"target feature `{}` must begin with a `+` or `-`\", s);\n+    });\n+    // Rustc-specific feature requests like `+crt-static` or `-crt-static`\n+    // are not passed down to LLVM.\n+    if RUSTC_SPECIFIC_FEATURES.contains(&feature) {\n+        return None;\n     }\n-    features.extend(feats.iter().flat_map(|&f| filter(f)));\n-    features\n+    Some(feature)\n }\n \n pub fn tune_cpu(sess: &Session) -> Option<&str> {"}, {"sha": "e23572104c4756b1fc486285cba57dff2746b30e", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb", "patch": "@@ -1033,6 +1033,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n     } else {\n         tcx.backend_optimization_level(())\n     };\n+    let backend_features = tcx.global_backend_features(());\n     let cgcx = CodegenContext::<B> {\n         backend: backend.clone(),\n         crate_types: sess.crate_types().to_vec(),\n@@ -1054,7 +1055,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         regular_module_config: regular_config,\n         metadata_module_config: metadata_config,\n         allocator_module_config: allocator_config,\n-        tm_factory: backend.target_machine_factory(tcx.sess, ol),\n+        tm_factory: backend.target_machine_factory(tcx.sess, ol, backend_features),\n         total_cgus,\n         msvc_imps_needed: msvc_imps_needed(tcx),\n         is_pe_coff: tcx.sess.target.is_like_windows,"}, {"sha": "fd4adfea8082c745eeead9a6c47108dd215f841a", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb", "patch": "@@ -4,6 +4,9 @@ use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::symbol::Symbol;\n \n+/// Features that control behaviour of rustc, rather than the codegen.\n+pub const RUSTC_SPECIFIC_FEATURES: &[&str] = &[\"crt-static\"];\n+\n // When adding features to the below lists\n // check whether they're named already elsewhere in rust\n // e.g. in stdarch and whether the given name matches LLVM's"}, {"sha": "a71eadd3d75fc2050c911a6a71b1cf4ae39de4e2", "filename": "compiler/rustc_codegen_ssa/src/traits/backend.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbackend.rs?ref=39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb", "patch": "@@ -134,6 +134,7 @@ pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Se\n         &self,\n         sess: &Session,\n         opt_level: config::OptLevel,\n+        target_features: &[String],\n     ) -> TargetMachineFactoryFn<Self>;\n     fn target_cpu<'b>(&self, sess: &'b Session) -> &'b str;\n     fn tune_cpu<'b>(&self, sess: &'b Session) -> Option<&'b str>;"}, {"sha": "cd9025245628e628c1f66b3e712eef03777e4162", "filename": "compiler/rustc_data_structures/src/small_c_str.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/compiler%2Frustc_data_structures%2Fsrc%2Fsmall_c_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/compiler%2Frustc_data_structures%2Fsrc%2Fsmall_c_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsmall_c_str.rs?ref=39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb", "patch": "@@ -66,3 +66,15 @@ impl Deref for SmallCStr {\n         self.as_c_str()\n     }\n }\n+\n+impl<'a> FromIterator<&'a str> for SmallCStr {\n+    fn from_iter<T: IntoIterator<Item = &'a str>>(iter: T) -> Self {\n+        let mut data =\n+            iter.into_iter().flat_map(|s| s.as_bytes()).copied().collect::<SmallVec<_>>();\n+        data.push(0);\n+        if let Err(e) = ffi::CStr::from_bytes_with_nul(&data) {\n+            panic!(\"The iterator {:?} cannot be converted into a CStr: {}\", data, e);\n+        }\n+        Self { data }\n+    }\n+}"}, {"sha": "1dc01e122520c9bc977fcd72a0689f3e0a3c7d15", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb", "patch": "@@ -1944,4 +1944,13 @@ rustc_queries! {\n         no_hash\n         desc { \"performing HIR wf-checking for predicate {:?} at item {:?}\", key.0, key.1 }\n     }\n+\n+\n+    /// The list of backend features computed from CLI flags (`-Ctarget-cpu`, `-Ctarget-feature`,\n+    /// `--target` and similar).\n+    query global_backend_features(_: ()) -> Vec<String> {\n+        storage(ArenaCacheSelector<'tcx>)\n+        eval_always\n+        desc { \"computing the backend features for CLI flags\" }\n+    }\n }"}, {"sha": "131687289027982ea492ce9ce68070635105c9a1", "filename": "src/test/ui/target-feature/missing-plusminus-2.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/src%2Ftest%2Fui%2Ftarget-feature%2Fmissing-plusminus-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/src%2Ftest%2Fui%2Ftarget-feature%2Fmissing-plusminus-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fmissing-plusminus-2.rs?ref=39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb", "patch": "@@ -0,0 +1,6 @@\n+// compile-flags: -Ctarget-feature=rdrand --crate-type=rlib --target=x86_64-unknown-linux-gnu\n+// build-pass\n+// needs-llvm-components: x86\n+\n+#![feature(no_core)]\n+#![no_core]"}, {"sha": "5ed2652a06df261de59e1784025d346513c69869", "filename": "src/test/ui/target-feature/missing-plusminus-2.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/src%2Ftest%2Fui%2Ftarget-feature%2Fmissing-plusminus-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/src%2Ftest%2Fui%2Ftarget-feature%2Fmissing-plusminus-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fmissing-plusminus-2.stderr?ref=39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb", "patch": "@@ -0,0 +1,6 @@\n+warning: unknown feature specified for `-Ctarget-feature`: `rdrand`\n+   |\n+   = note: features must begin with a `+` to enable or `-` to disable it\n+\n+warning: 1 warning emitted\n+"}, {"sha": "efee6592923422f94ebb076137accd4112c4b19f", "filename": "src/test/ui/target-feature/missing-plusminus.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/src%2Ftest%2Fui%2Ftarget-feature%2Fmissing-plusminus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/src%2Ftest%2Fui%2Ftarget-feature%2Fmissing-plusminus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fmissing-plusminus.rs?ref=39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb", "patch": "@@ -0,0 +1,2 @@\n+// compile-flags: -Ctarget-feature=banana --crate-type=rlib\n+// build-pass"}, {"sha": "93abf3508057934695c42aecea7a368e58e951d0", "filename": "src/test/ui/target-feature/missing-plusminus.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/src%2Ftest%2Fui%2Ftarget-feature%2Fmissing-plusminus.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/src%2Ftest%2Fui%2Ftarget-feature%2Fmissing-plusminus.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fmissing-plusminus.stderr?ref=39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb", "patch": "@@ -0,0 +1,6 @@\n+warning: unknown feature specified for `-Ctarget-feature`: `banana`\n+   |\n+   = note: features must begin with a `+` to enable or `-` to disable it\n+\n+warning: 1 warning emitted\n+"}, {"sha": "4e4e2160cac57270595cbeb63d38585c63465f16", "filename": "src/test/ui/target-feature/similar-feature-suggestion.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/src%2Ftest%2Fui%2Ftarget-feature%2Fsimilar-feature-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/src%2Ftest%2Fui%2Ftarget-feature%2Fsimilar-feature-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fsimilar-feature-suggestion.rs?ref=39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb", "patch": "@@ -0,0 +1,6 @@\n+// compile-flags: -Ctarget-feature=+rdrnd --crate-type=rlib --target=x86_64-unknown-linux-gnu\n+// build-pass\n+// needs-llvm-components: x86\n+\n+#![feature(no_core)]\n+#![no_core]"}, {"sha": "2f376065fdfb048cf858e5f13e2cacf343230f49", "filename": "src/test/ui/target-feature/similar-feature-suggestion.stderr", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/src%2Ftest%2Fui%2Ftarget-feature%2Fsimilar-feature-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/src%2Ftest%2Fui%2Ftarget-feature%2Fsimilar-feature-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fsimilar-feature-suggestion.stderr?ref=39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb", "patch": "@@ -0,0 +1,7 @@\n+warning: unknown feature specified for `-Ctarget-feature`: `rdrnd`\n+   |\n+   = note: it is still passed through to the codegen backend\n+   = help: you might have meant: `rdrand`\n+\n+warning: 1 warning emitted\n+"}, {"sha": "0cc901eecaa2cc072b15a997518b536dea8519d7", "filename": "src/test/ui/target-feature/tied-features-cli.one.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.one.stderr?ref=39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb", "patch": "@@ -1,4 +1,4 @@\n-error: Target features paca, pacg must all be enabled or disabled together\n+error: target features paca, pacg must all be enabled or disabled together\n \n error: aborting due to previous error\n "}, {"sha": "72b7e3da5309d94f67023dac6b2de257d5b0f0a6", "filename": "src/test/ui/target-feature/tied-features-cli.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.rs?ref=39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb", "patch": "@@ -1,9 +1,20 @@\n-// only-aarch64\n-// revisions: one two three four\n-//[one] compile-flags: -C target-feature=+paca\n-//[two] compile-flags: -C target-feature=-pacg,+pacg\n-//[three] compile-flags: -C target-feature=+paca,+pacg,-paca\n-//[four] check-pass\n-//[four] compile-flags: -C target-feature=-paca,+pacg -C target-feature=+paca\n+// revisions: one two three\n+// compile-flags: --crate-type=rlib --target=aarch64-unknown-linux-gnu\n+// needs-llvm-components: aarch64\n+//\n+//\n+// [one] check-fail\n+// [one] compile-flags: -C target-feature=+paca\n+// [two] check-fail\n+// [two] compile-flags: -C target-feature=-pacg,+pacg\n+// [three] check-fail\n+// [three] compile-flags: -C target-feature=+paca,+pacg,-paca\n+// [four] build-pass\n+// [four] compile-flags: -C target-feature=-paca,+pacg -C target-feature=+paca\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized {}\n \n fn main() {}"}, {"sha": "0cc901eecaa2cc072b15a997518b536dea8519d7", "filename": "src/test/ui/target-feature/tied-features-cli.three.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.three.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.three.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.three.stderr?ref=39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb", "patch": "@@ -1,4 +1,4 @@\n-error: Target features paca, pacg must all be enabled or disabled together\n+error: target features paca, pacg must all be enabled or disabled together\n \n error: aborting due to previous error\n "}, {"sha": "0cc901eecaa2cc072b15a997518b536dea8519d7", "filename": "src/test/ui/target-feature/tied-features-cli.two.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.two.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.two.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features-cli.two.stderr?ref=39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb", "patch": "@@ -1,4 +1,4 @@\n-error: Target features paca, pacg must all be enabled or disabled together\n+error: target features paca, pacg must all be enabled or disabled together\n \n error: aborting due to previous error\n "}, {"sha": "01353e9f70c59879ced0702020377441caeb9673", "filename": "src/test/ui/target-feature/tied-features.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features.rs?ref=39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb", "patch": "@@ -1,9 +1,15 @@\n-// only-aarch64\n // build-fail\n-\n+// compile-flags: --crate-type=rlib --target=aarch64-unknown-linux-gnu\n+// needs-llvm-components: aarch64\n #![feature(aarch64_target_feature, target_feature_11)]\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized {}\n \n-fn main() {\n+// FIXME: this should not need to be public.\n+pub fn main() {\n     #[target_feature(enable = \"pacg\")]\n     //~^ ERROR must all be either enabled or disabled together\n     unsafe fn inner() {}"}, {"sha": "6362c7ae60b6e42557bcdefc6868cb46a2c6ea82", "filename": "src/test/ui/target-feature/tied-features.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Ftied-features.stderr?ref=39a3b527674c1c8d2b9d3edc0cfae67abe6b3ecb", "patch": "@@ -1,13 +1,13 @@\n error: the target features paca, pacg must all be either enabled or disabled together\n-  --> $DIR/tied-features.rs:7:5\n+  --> $DIR/tied-features.rs:13:5\n    |\n LL |     #[target_feature(enable = \"pacg\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add the missing features in a `target_feature` attribute\n \n error: the target features paca, pacg must all be either enabled or disabled together\n-  --> $DIR/tied-features.rs:19:1\n+  --> $DIR/tied-features.rs:25:1\n    |\n LL | #[target_feature(enable = \"paca\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}