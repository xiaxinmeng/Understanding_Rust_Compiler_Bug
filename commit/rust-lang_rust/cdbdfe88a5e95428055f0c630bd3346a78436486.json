{"sha": "cdbdfe88a5e95428055f0c630bd3346a78436486", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYmRmZTg4YTVlOTU0MjgwNTVmMGM2MzBiZDMzNDZhNzg0MzY0ODY=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-08-20T19:44:19Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-08-20T19:56:34Z"}, "message": "Allow the Self type to benefit from builtin-kinds-as-supertraits (#7083).", "tree": {"sha": "89c7206c6c5036a96f6de6f03596be0e4e5de768", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89c7206c6c5036a96f6de6f03596be0e4e5de768"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdbdfe88a5e95428055f0c630bd3346a78436486", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdbdfe88a5e95428055f0c630bd3346a78436486", "html_url": "https://github.com/rust-lang/rust/commit/cdbdfe88a5e95428055f0c630bd3346a78436486", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdbdfe88a5e95428055f0c630bd3346a78436486/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fd404f2ca1b3a246872521a606d749ae5a11258", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fd404f2ca1b3a246872521a606d749ae5a11258", "html_url": "https://github.com/rust-lang/rust/commit/4fd404f2ca1b3a246872521a606d749ae5a11258"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "4e0f76fe1986436c334bee0e241a9da9f2649a04", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cdbdfe88a5e95428055f0c630bd3346a78436486/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdbdfe88a5e95428055f0c630bd3346a78436486/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=cdbdfe88a5e95428055f0c630bd3346a78436486", "patch": "@@ -2161,17 +2161,19 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n                 // def-id.\n                 assert_eq!(p.def_id.crate, ast::LOCAL_CRATE);\n \n-                type_param_def_to_contents(\n-                    cx, cx.ty_param_defs.get(&p.def_id.node))\n+                let tp_def = cx.ty_param_defs.get(&p.def_id.node);\n+                kind_bounds_to_contents(cx, &tp_def.bounds.builtin_bounds,\n+                                        tp_def.bounds.trait_bounds)\n             }\n \n-            ty_self(_) => {\n-                // Currently, self is not bounded, so we must assume the\n-                // worst.  But in the future we should examine the super\n-                // traits.\n-                //\n+            ty_self(def_id) => {\n                 // FIXME(#4678)---self should just be a ty param\n-                TC_ALL\n+\n+                // Self may be bounded if the associated trait has builtin kinds\n+                // for supertraits. If so we can use those bounds.\n+                let trait_def = lookup_trait_def(cx, def_id);\n+                let traits = [trait_def.trait_ref];\n+                kind_bounds_to_contents(cx, &trait_def.bounds, traits)\n             }\n \n             ty_infer(_) => {\n@@ -2315,14 +2317,12 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n         st + mt + bt\n     }\n \n-    fn type_param_def_to_contents(cx: ctxt,\n-                                  type_param_def: &TypeParameterDef) -> TypeContents\n-    {\n-        debug!(\"type_param_def_to_contents(%s)\", type_param_def.repr(cx));\n+    fn kind_bounds_to_contents(cx: ctxt, bounds: &BuiltinBounds, traits: &[@TraitRef])\n+            -> TypeContents {\n         let _i = indenter();\n \n         let mut tc = TC_ALL;\n-        do each_inherited_builtin_bound(cx, type_param_def.bounds) |bound| {\n+        do each_inherited_builtin_bound(cx, bounds, traits) |bound| {\n             debug!(\"tc = %s, bound = %?\", tc.to_str(), bound);\n             tc = tc - match bound {\n                 BoundStatic => TypeContents::nonstatic(cx),\n@@ -2338,13 +2338,13 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n \n         // Iterates over all builtin bounds on the type parameter def, including\n         // those inherited from traits with builtin-kind-supertraits.\n-        fn each_inherited_builtin_bound(cx: ctxt, bounds: &ParamBounds,\n-                                        f: &fn(BuiltinBound)) {\n-            for bound in bounds.builtin_bounds.iter() {\n+        fn each_inherited_builtin_bound(cx: ctxt, bounds: &BuiltinBounds,\n+                                        traits: &[@TraitRef], f: &fn(BuiltinBound)) {\n+            for bound in bounds.iter() {\n                 f(bound);\n             }\n \n-            do each_bound_trait_and_supertraits(cx, bounds.trait_bounds) |trait_ref| {\n+            do each_bound_trait_and_supertraits(cx, traits) |trait_ref| {\n                 let trait_def = lookup_trait_def(cx, trait_ref.def_id);\n                 for bound in trait_def.bounds.iter() {\n                     f(bound);"}]}