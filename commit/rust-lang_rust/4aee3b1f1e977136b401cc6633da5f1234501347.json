{"sha": "4aee3b1f1e977136b401cc6633da5f1234501347", "node_id": "C_kwDOAAsO6NoAKDRhZWUzYjFmMWU5NzcxMzZiNDAxY2M2NjMzZGE1ZjEyMzQ1MDEzNDc", "commit": {"author": {"name": "Georgy Komarov", "email": "jubnzv@gmail.com", "date": "2022-01-26T11:46:30Z"}, "committer": {"name": "Georgy Komarov", "email": "jubnzv@gmail.com", "date": "2022-01-26T11:46:48Z"}, "message": "matches: Clarify the behavior of exhaustive check", "tree": {"sha": "04743b9352a87bfe9de4da367cfc53afef8f9952", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04743b9352a87bfe9de4da367cfc53afef8f9952"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4aee3b1f1e977136b401cc6633da5f1234501347", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4aee3b1f1e977136b401cc6633da5f1234501347", "html_url": "https://github.com/rust-lang/rust/commit/4aee3b1f1e977136b401cc6633da5f1234501347", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4aee3b1f1e977136b401cc6633da5f1234501347/comments", "author": {"login": "jubnzv", "id": 12023585, "node_id": "MDQ6VXNlcjEyMDIzNTg1", "avatar_url": "https://avatars.githubusercontent.com/u/12023585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jubnzv", "html_url": "https://github.com/jubnzv", "followers_url": "https://api.github.com/users/jubnzv/followers", "following_url": "https://api.github.com/users/jubnzv/following{/other_user}", "gists_url": "https://api.github.com/users/jubnzv/gists{/gist_id}", "starred_url": "https://api.github.com/users/jubnzv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jubnzv/subscriptions", "organizations_url": "https://api.github.com/users/jubnzv/orgs", "repos_url": "https://api.github.com/users/jubnzv/repos", "events_url": "https://api.github.com/users/jubnzv/events{/privacy}", "received_events_url": "https://api.github.com/users/jubnzv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jubnzv", "id": 12023585, "node_id": "MDQ6VXNlcjEyMDIzNTg1", "avatar_url": "https://avatars.githubusercontent.com/u/12023585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jubnzv", "html_url": "https://github.com/jubnzv", "followers_url": "https://api.github.com/users/jubnzv/followers", "following_url": "https://api.github.com/users/jubnzv/following{/other_user}", "gists_url": "https://api.github.com/users/jubnzv/gists{/gist_id}", "starred_url": "https://api.github.com/users/jubnzv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jubnzv/subscriptions", "organizations_url": "https://api.github.com/users/jubnzv/orgs", "repos_url": "https://api.github.com/users/jubnzv/repos", "events_url": "https://api.github.com/users/jubnzv/events{/privacy}", "received_events_url": "https://api.github.com/users/jubnzv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5416a71dae954994f9f535117a728fa30fdbcb62", "url": "https://api.github.com/repos/rust-lang/rust/commits/5416a71dae954994f9f535117a728fa30fdbcb62", "html_url": "https://github.com/rust-lang/rust/commit/5416a71dae954994f9f535117a728fa30fdbcb62"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "71842ded69d6db51a59ab991fc530ee3192b121d", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4aee3b1f1e977136b401cc6633da5f1234501347/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aee3b1f1e977136b401cc6633da5f1234501347/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=4aee3b1f1e977136b401cc6633da5f1234501347", "patch": "@@ -848,9 +848,9 @@ fn check_single_match_opt_like(\n         (&paths::RESULT, \"Ok\"),\n     ];\n \n-    // We want to suggest to exclude an arm that contains only wildcards or forms the ehaustive\n-    // match with the second branch.\n-    if !contains_only_wilds(arms[1].pat) && !form_exhaustive_tuples(arms[0].pat, arms[1].pat) {\n+    // We want to suggest to exclude an arm that contains only wildcards or forms the exhaustive\n+    // match with the second branch, without enum variants in matches.\n+    if !contains_only_wilds(arms[1].pat) && !form_exhaustive_matches(arms[0].pat, arms[1].pat) {\n         return;\n     }\n \n@@ -907,30 +907,30 @@ fn contains_only_wilds(pat: &Pat<'_>) -> bool {\n     }\n }\n \n-/// Returns true if the given patterns form the tuples that exhaustively matches all possible\n-/// parameters.\n+/// Returns true if the given patterns forms only exhaustive matches that don't contain enum\n+/// patterns without a wildcard.\n ///\n-/// Here are some examples:\n+/// For example:\n ///\n /// ```\n-/// // Doesn't form exhaustive match, because the first arm may contain not only E::V.\n+/// // Returns false, because the first arm contain enum without a wildcard.\n /// match x {\n ///     (Some(E::V), _) => todo!(),\n ///     (None, _) => {}\n /// }\n ///\n-/// // Forms exhaustive match, because the patterns cover all possible cases at the same positions.\n+/// // Returns true, because the both arms form exhaustive matches and without enum variants.\n /// match x {\n ///     (Some(_), _) => todo!(),\n ///     (None, _) => {}\n /// }\n /// ```\n-fn form_exhaustive_tuples(left: &Pat<'_>, right: &Pat<'_>) -> bool {\n+fn form_exhaustive_matches(left: &Pat<'_>, right: &Pat<'_>) -> bool {\n     match (&left.kind, &right.kind) {\n         (PatKind::Wild, _) | (_, PatKind::Wild) => true,\n         (PatKind::Tuple(left_in, left_pos), PatKind::Tuple(right_in, right_pos)) => {\n-            // We don't actually know the position and presence of the `..` (dotdot) operator in\n-            // the arms, so we need to evaluate the correct offsets here in order to iterate in\n+            // We don't actually know the position and the presence of the `..` (dotdot) operator\n+            // in the arms, so we need to evaluate the correct offsets here in order to iterate in\n             // both arms at the same time.\n             let len = max(\n                 left_in.len() + {"}]}