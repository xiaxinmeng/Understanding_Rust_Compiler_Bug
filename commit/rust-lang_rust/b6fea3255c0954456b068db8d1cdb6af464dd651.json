{"sha": "b6fea3255c0954456b068db8d1cdb6af464dd651", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ZmVhMzI1NWMwOTU0NDU2YjA2OGRiOGQxY2RiNmFmNDY0ZGQ2NTE=", "commit": {"author": {"name": "Vitaly _Vi Shukela", "email": "vi0oss@gmail.com", "date": "2018-09-15T00:18:29Z"}, "committer": {"name": "Vitaly _Vi Shukela", "email": "vi0oss@gmail.com", "date": "2018-09-16T18:42:46Z"}, "message": "Remove usages of span_suggestion without Applicability\n\nUse Applicability::Unspecified for all of them instead.", "tree": {"sha": "91c30f2be1b21f795904575a622a658da25e5443", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91c30f2be1b21f795904575a622a658da25e5443"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6fea3255c0954456b068db8d1cdb6af464dd651", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABEIAB0WIQQzEHnM5f9ubG8rMBnAlyIdbgPfaAUCW56kOgAKCRDAlyIdbgPf\naOOzAQDDRUH0FLl/erJVllk8Ol8Tor95KMU7ROOhEXFplTXWNAEAqOLjpIGEeIHm\nk+MC4uSgh0xW9QWi6pvWDzpogxrWd9s=\n=BXU4\n-----END PGP SIGNATURE-----", "payload": "tree 91c30f2be1b21f795904575a622a658da25e5443\nparent d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17\nauthor Vitaly _Vi Shukela <vi0oss@gmail.com> 1536970709 +0300\ncommitter Vitaly _Vi Shukela <vi0oss@gmail.com> 1537123366 +0300\n\nRemove usages of span_suggestion without Applicability\n\nUse Applicability::Unspecified for all of them instead.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6fea3255c0954456b068db8d1cdb6af464dd651", "html_url": "https://github.com/rust-lang/rust/commit/b6fea3255c0954456b068db8d1cdb6af464dd651", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6fea3255c0954456b068db8d1cdb6af464dd651/comments", "author": {"login": "vi", "id": 173219, "node_id": "MDQ6VXNlcjE3MzIxOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/173219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vi", "html_url": "https://github.com/vi", "followers_url": "https://api.github.com/users/vi/followers", "following_url": "https://api.github.com/users/vi/following{/other_user}", "gists_url": "https://api.github.com/users/vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vi/subscriptions", "organizations_url": "https://api.github.com/users/vi/orgs", "repos_url": "https://api.github.com/users/vi/repos", "events_url": "https://api.github.com/users/vi/events{/privacy}", "received_events_url": "https://api.github.com/users/vi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vi", "id": 173219, "node_id": "MDQ6VXNlcjE3MzIxOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/173219?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vi", "html_url": "https://github.com/vi", "followers_url": "https://api.github.com/users/vi/followers", "following_url": "https://api.github.com/users/vi/following{/other_user}", "gists_url": "https://api.github.com/users/vi/gists{/gist_id}", "starred_url": "https://api.github.com/users/vi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vi/subscriptions", "organizations_url": "https://api.github.com/users/vi/orgs", "repos_url": "https://api.github.com/users/vi/repos", "events_url": "https://api.github.com/users/vi/events{/privacy}", "received_events_url": "https://api.github.com/users/vi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17", "html_url": "https://github.com/rust-lang/rust/commit/d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17"}], "stats": {"total": 157, "additions": 107, "deletions": 50}, "files": [{"sha": "05af9cffd45e3f45c99344b6047b8de8645adc46", "filename": "src/librustc/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=b6fea3255c0954456b068db8d1cdb6af464dd651", "patch": "@@ -13,6 +13,7 @@\n use infer::error_reporting::nice_region_error::NiceRegionError;\n use ty;\n use util::common::ErrorReported;\n+use errors::Applicability;\n \n impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n     /// When given a `ConcreteFailure` for a function with arguments containing a named region and\n@@ -111,10 +112,11 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n             E0621,\n             \"explicit lifetime required in {}\",\n             error_var\n-        ).span_suggestion(\n+        ).span_suggestion_with_applicability(\n             new_ty_span,\n             &format!(\"add explicit lifetime `{}` to {}\", named, span_label_var),\n-            new_ty.to_string()\n+            new_ty.to_string(),\n+            Applicability::Unspecified,\n         )\n             .span_label(span, format!(\"lifetime `{}` required\", named))\n             .emit();"}, {"sha": "722c699ec595aa8056dd3a7018078340f4e29e85", "filename": "src/librustc/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=b6fea3255c0954456b068db8d1cdb6af464dd651", "patch": "@@ -14,6 +14,7 @@ use infer::error_reporting::nice_region_error::NiceRegionError;\n use infer::lexical_region_resolve::RegionResolutionError;\n use ty::{BoundRegion, FreeRegion, RegionKind};\n use util::common::ErrorReported;\n+use errors::Applicability;\n \n impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n     /// Print the error message for lifetime errors when the return type is a static impl Trait.\n@@ -61,14 +62,15 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n                             _ => \"'_\".to_owned(),\n                         };\n                         if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(return_sp) {\n-                            err.span_suggestion(\n+                            err.span_suggestion_with_applicability(\n                                 return_sp,\n                                 &format!(\n                                     \"you can add a constraint to the return type to make it last \\\n                                      less than `'static` and match {}\",\n                                     lifetime,\n                                 ),\n                                 format!(\"{} + {}\", snippet, lifetime_name),\n+                                Applicability::Unspecified,\n                             );\n                         }\n                         err.emit();"}, {"sha": "013cba5a332d1051f8ecdcda739464211570df59", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=b6fea3255c0954456b068db8d1cdb6af464dd651", "patch": "@@ -28,7 +28,7 @@ use rustc_data_structures::base_n;\n use rustc_data_structures::sync::{self, Lrc, Lock, LockCell, OneThread, Once, RwLock};\n \n use syntax::ast::NodeId;\n-use errors::{self, DiagnosticBuilder, DiagnosticId};\n+use errors::{self, DiagnosticBuilder, DiagnosticId, Applicability};\n use errors::emitter::{Emitter, EmitterWriter};\n use syntax::edition::Edition;\n use syntax::json::JsonEmitter;\n@@ -431,8 +431,9 @@ impl Session {\n                     diag_builder.span_note(span, message);\n                 }\n                 DiagnosticBuilderMethod::SpanSuggestion(suggestion) => {\n-                    let span = span_maybe.expect(\"span_suggestion needs a span\");\n-                    diag_builder.span_suggestion(span, message, suggestion);\n+                    let span = span_maybe.expect(\"span_suggestion_* needs a span\");\n+                    diag_builder.span_suggestion_with_applicability(span, message, suggestion,\n+                                                                    Applicability::Unspecified);\n                 }\n             }\n         }"}, {"sha": "0f07e1415bf8bb7a2c848e303a8b600779bd86dc", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=b6fea3255c0954456b068db8d1cdb6af464dd651", "patch": "@@ -45,7 +45,7 @@ use rustc_data_structures::sync::Lrc;\n use std::hash::{Hash, Hasher};\n use syntax::ast;\n use syntax_pos::{MultiSpan, Span};\n-use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n+use errors::{Applicability, DiagnosticBuilder, DiagnosticId, Applicability};\n \n use rustc::hir;\n use rustc::hir::intravisit::{self, Visitor};\n@@ -867,10 +867,12 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                         }) = cmt.cat {\n                                             db.note(fn_closure_msg);\n                                         } else {\n-                                            db.span_suggestion(sp, msg, suggestion);\n+                                            db.span_suggestion_with_applicability(\n+                                                sp, msg, suggestion, Applicability::Unspecified);\n                                         }\n                                     } else {\n-                                        db.span_suggestion(sp, msg, suggestion);\n+                                        db.span_suggestion_with_applicability(\n+                                                sp, msg, suggestion, Applicability::Unspecified);\n                                     }\n                                 }\n                                 _ => {\n@@ -1236,10 +1238,11 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                         let let_span = self.tcx.hir.span(node_id);\n                         let suggestion = suggest_ref_mut(self.tcx, let_span);\n                         if let Some(replace_str) = suggestion {\n-                            db.span_suggestion(\n+                            db.span_suggestion_with_applicability(\n                                 let_span,\n                                 \"use a mutable reference instead\",\n                                 replace_str,\n+                                Applicability::Unspecified,\n                             );\n                         }\n                     }\n@@ -1292,11 +1295,12 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 )) = ty.map(|t| &t.node)\n                 {\n                     let borrow_expr_id = self.tcx.hir.get_parent_node(borrowed_node_id);\n-                    db.span_suggestion(\n+                    db.span_suggestion_with_applicability(\n                         self.tcx.hir.span(borrow_expr_id),\n                         \"consider removing the `&mut`, as it is an \\\n                         immutable binding to a mutable reference\",\n-                        snippet\n+                        snippet,\n+                        Applicability::Unspecified,\n                     );\n                 } else {\n                     db.span_suggestion_with_applicability(\n@@ -1326,12 +1330,14 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                                                   &cmt_path_or_string,\n                                                   capture_span,\n                                                   Origin::Ast)\n-            .span_suggestion(err.span,\n+            .span_suggestion_with_applicability(err.span,\n                              &format!(\"to force the closure to take ownership of {} \\\n                                        (and any other referenced variables), \\\n                                        use the `move` keyword\",\n                                        cmt_path_or_string),\n-                             suggestion)\n+                             suggestion,\n+                             Applicability::Unspecified,\n+            )\n             .emit();\n         self.signal_error();\n     }"}, {"sha": "5bba05a7b21ab4a64bc5d7ea5af6fb75115b0b59", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=b6fea3255c0954456b068db8d1cdb6af464dd651", "patch": "@@ -11,7 +11,7 @@\n use core::unicode::property::Pattern_White_Space;\n use rustc::mir::*;\n use rustc::ty;\n-use rustc_errors::DiagnosticBuilder;\n+use rustc_errors::{DiagnosticBuilder,Applicability};\n use syntax_pos::Span;\n \n use borrow_check::MirBorrowckCtxt;\n@@ -350,16 +350,18 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                     // expressions `a[b]`, which roughly desugar to\n                     // `*Index::index(&a, b)` or\n                     // `*IndexMut::index_mut(&mut a, b)`.\n-                    err.span_suggestion(\n+                    err.span_suggestion_with_applicability(\n                         span,\n                         \"consider removing the `*`\",\n                         snippet[1..].to_owned(),\n+                        Applicability::Unspecified,\n                     );\n                 } else {\n-                    err.span_suggestion(\n+                    err.span_suggestion_with_applicability(\n                         span,\n                         \"consider borrowing here\",\n                         format!(\"&{}\", snippet),\n+                        Applicability::Unspecified,\n                     );\n                 }\n \n@@ -420,10 +422,11 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n         suggestions.sort_unstable_by_key(|&(span, _, _)| span);\n         suggestions.dedup_by_key(|&mut (span, _, _)| span);\n         for (span, to_remove, suggestion) in suggestions {\n-            err.span_suggestion(\n+            err.span_suggestion_with_applicability(\n                 span,\n                 &format!(\"consider removing the `{}`\", to_remove),\n-                suggestion\n+                suggestion,\n+                Applicability::Unspecified,\n             );\n         }\n     }"}, {"sha": "8a31d7c91b94a5af69aa65ae4f00c60f0ac37c81", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=b6fea3255c0954456b068db8d1cdb6af464dd651", "patch": "@@ -22,6 +22,7 @@ use borrow_check::MirBorrowckCtxt;\n use util::borrowck_errors::{BorrowckErrors, Origin};\n use util::collect_writes::FindAssignments;\n use util::suggest_ref_mut;\n+use rustc_errors::Applicability;\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub(super) enum AccessKind {\n@@ -227,10 +228,11 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                 assert_eq!(local_decl.mutability, Mutability::Not);\n \n                 err.span_label(span, format!(\"cannot {ACT}\", ACT = act));\n-                err.span_suggestion(\n+                err.span_suggestion_with_applicability(\n                     local_decl.source_info.span,\n                     \"consider changing this to be mutable\",\n                     format!(\"mut {}\", local_decl.name.unwrap()),\n+                    Applicability::Unspecified,\n                 );\n             }\n \n@@ -257,10 +259,11 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                         _,\n                     ) = pat.node\n                     {\n-                        err.span_suggestion(\n+                        err.span_suggestion_with_applicability(\n                             upvar_ident.span,\n                             \"consider changing this to be mutable\",\n                             format!(\"mut {}\", upvar_ident.name),\n+                            Applicability::Unspecified,\n                         );\n                     }\n                 }\n@@ -351,10 +354,11 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                 };\n \n                 if let Some((err_help_span, suggested_code)) = suggestion {\n-                    err.span_suggestion(\n+                    err.span_suggestion_with_applicability(\n                         err_help_span,\n                         &format!(\"consider changing this to be a mutable {}\", pointer_desc),\n                         suggested_code,\n+                        Applicability::Unspecified,\n                     );\n                 }\n "}, {"sha": "9e97b297f30717845c94e5cdead29e4c06a092a6", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=b6fea3255c0954456b068db8d1cdb6af464dd651", "patch": "@@ -182,8 +182,9 @@ impl<'a> AstValidator<'a> {\n             );\n \n             if let Ok(snippet) = self.session.source_map().span_to_snippet(span) {\n-                err.span_suggestion(\n+                err.span_suggestion_with_applicability(\n                     span, \"consider adding parentheses\", format!(\"({})\", snippet),\n+                    Applicability::Unspecified,\n                 );\n             }\n "}, {"sha": "5cbdae60c26e59d159702c332cca155e996269e5", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=b6fea3255c0954456b068db8d1cdb6af464dd651", "patch": "@@ -16,6 +16,7 @@ use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::{self, Node, Destination};\n use syntax::ast;\n use syntax_pos::Span;\n+use errors::Applicability;\n \n #[derive(Clone, Copy, Debug, PartialEq)]\n enum LoopKind {\n@@ -140,11 +141,13 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                                 .span_label(e.span,\n                                             \"can only break with a value inside \\\n                                             `loop` or breakable block\")\n-                                .span_suggestion(e.span,\n+                                .span_suggestion_with_applicability(e.span,\n                                                  &format!(\"instead, use `break` on its own \\\n                                                            without a value inside this `{}` loop\",\n                                                           kind.name()),\n-                                                 \"break\".to_string())\n+                                                 \"break\".to_string(),\n+                                                 Applicability::Unspecified,\n+                                )\n                                 .emit();\n                         }\n                     }"}, {"sha": "48972ff386c3c2aca240f507be8186c5de69898d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=b6fea3255c0954456b068db8d1cdb6af464dd651", "patch": "@@ -3299,9 +3299,11 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                         err.span_label(base_span,\n                                        \"expecting a type here because of type ascription\");\n                         if line_sp != line_base_sp {\n-                            err.span_suggestion_short(sp,\n+                            err.span_suggestion_short_with_applicability(sp,\n                                                       \"did you mean to use `;` here instead?\",\n-                                                      \";\".to_string());\n+                                                      \";\".to_string(),\n+                                                      Applicability::Unspecified,\n+                                                      );\n                         }\n                         break;\n                     } else if snippet.trim().len() != 0  {\n@@ -4826,7 +4828,8 @@ fn show_candidates(err: &mut DiagnosticBuilder,\n             *candidate = format!(\"use {};\\n{}\", candidate, additional_newline);\n         }\n \n-        err.span_suggestions(span, &msg, path_strings);\n+        err.span_suggestions_with_applicability(span, &msg, path_strings,\n+                                                Applicability::Unspecified);\n     } else {\n         let mut msg = msg;\n         msg.push(':');"}, {"sha": "5d9802839eb6c5ec7d76c74f34e613044ac5b8e6", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=b6fea3255c0954456b068db8d1cdb6af464dd651", "patch": "@@ -40,7 +40,7 @@\n \n use super::FnCtxt;\n \n-use errors::DiagnosticBuilder;\n+use errors::{DiagnosticBuilder,Applicability};\n use hir::def_id::DefId;\n use lint;\n use rustc::hir;\n@@ -299,9 +299,11 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                 err.note(\"The type information given here is insufficient to check whether \\\n                           the pointer cast is valid\");\n                 if unknown_cast_to {\n-                    err.span_suggestion_short(self.cast_span,\n+                    err.span_suggestion_short_with_applicability(self.cast_span,\n                                               \"consider giving more type information\",\n-                                              String::new());\n+                                              String::new(),\n+                                              Applicability::Unspecified,\n+                                              );\n                 }\n                 err.emit();\n             }\n@@ -327,9 +329,11 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                 if self.cast_ty.is_trait() {\n                     match fcx.tcx.sess.source_map().span_to_snippet(self.cast_span) {\n                         Ok(s) => {\n-                            err.span_suggestion(self.cast_span,\n+                            err.span_suggestion_with_applicability(self.cast_span,\n                                                 \"try casting to a reference instead\",\n-                                                format!(\"&{}{}\", mtstr, s));\n+                                                format!(\"&{}{}\", mtstr, s),\n+                                                Applicability::Unspecified,\n+                                                );\n                         }\n                         Err(_) => {\n                             span_help!(err, self.cast_span, \"did you mean `&{}{}`?\", mtstr, tstr)\n@@ -346,9 +350,11 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n             ty::Adt(def, ..) if def.is_box() => {\n                 match fcx.tcx.sess.source_map().span_to_snippet(self.cast_span) {\n                     Ok(s) => {\n-                        err.span_suggestion(self.cast_span,\n+                        err.span_suggestion_with_applicability(self.cast_span,\n                                             \"try casting to a `Box` instead\",\n-                                            format!(\"Box<{}>\", s));\n+                                            format!(\"Box<{}>\", s),\n+                                            Applicability::Unspecified,\n+                                            );\n                     }\n                     Err(_) => span_help!(err, self.cast_span, \"did you mean `Box<{}>`?\", tstr),\n                 }"}, {"sha": "2c3abb47cff567cc05c401c89c1f84696c16e316", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=b6fea3255c0954456b068db8d1cdb6af464dd651", "patch": "@@ -16,6 +16,7 @@ use rustc::traits::{self, ObligationCause, ObligationCauseCode, Reveal};\n use rustc::ty::error::{ExpectedFound, TypeError};\n use rustc::ty::subst::{Subst, Substs};\n use rustc::util::common::ErrorReported;\n+use errors::Applicability;\n \n use syntax_pos::Span;\n \n@@ -321,10 +322,11 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 if let Some(trait_err_span) = trait_err_span {\n                     if let Ok(trait_err_str) = tcx.sess.source_map().\n                                                span_to_snippet(trait_err_span) {\n-                        diag.span_suggestion(\n+                        diag.span_suggestion_with_applicability(\n                             impl_err_span,\n                             \"consider change the type to match the mutability in trait\",\n                             format!(\"{}\", trait_err_str),\n+                            Applicability::Unspecified,\n                         );\n                     }\n                 }"}, {"sha": "499daccf5e80f101e20e294c60979ed028502219", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=b6fea3255c0954456b068db8d1cdb6af464dd651", "patch": "@@ -1064,7 +1064,8 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n             \"a method with this name may be added to the standard library in the future\",\n         );\n \n-        // FIXME: This should be a `span_suggestion` instead of `help`. However `self.span` only\n+        // FIXME: This should be a `span_suggestion_with_applicability` instead of `help`\n+        // However `self.span` only\n         // highlights the method name, so we can't use it. Also consider reusing the code from\n         // `report_method_error()`.\n         diag.help(&format!("}, {"sha": "453a7e1e72f4061613a20f98e52164f5e55e624b", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=b6fea3255c0954456b068db8d1cdb6af464dd651", "patch": "@@ -251,13 +251,15 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                 let snippet = tcx.sess.source_map().span_to_snippet(lit.span)\n                                     .unwrap_or(\"<numeric literal>\".to_string());\n \n-                                err.span_suggestion(lit.span,\n+                                err.span_suggestion_with_applicability(lit.span,\n                                                     &format!(\"you must specify a concrete type for \\\n                                                               this numeric value, like `{}`\",\n                                                              concrete_type),\n                                                     format!(\"{}_{}\",\n                                                             snippet,\n-                                                            concrete_type));\n+                                                            concrete_type),\n+                                                    Applicability::Unspecified,\n+                                                    );\n                             }\n                             hir::ExprKind::Path(ref qpath) => {  // local binding\n                                 if let &hir::QPath::Resolved(_, ref path) = &qpath {\n@@ -281,13 +283,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                 ty,\n                                                 ..\n                                             })) => {\n-                                                err.span_suggestion(\n+                                                err.span_suggestion_with_applicability(\n                                                     // account for `let x: _ = 42;`\n                                                     //                  ^^^^\n                                                     span.to(ty.as_ref().map(|ty| ty.span)\n                                                         .unwrap_or(span)),\n                                                     &msg,\n                                                     format!(\"{}: {}\", snippet, concrete_type),\n+                                                    Applicability::Unspecified,\n                                                 );\n                                             }\n                                             _ => {\n@@ -516,7 +519,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 format!(\"use {};\\n{}\", self.tcx.item_path_str(*did), additional_newline)\n             }).collect();\n \n-            err.span_suggestions(span, &msg, path_strings);\n+            err.span_suggestions_with_applicability(span, &msg, path_strings,\n+                                                    Applicability::Unspecified);\n         } else {\n             let limit = if candidates.len() == 5 { 5 } else { 4 };\n             for (i, trait_did) in candidates.iter().take(limit).enumerate() {"}, {"sha": "3b1f81a9eba07f42c4743bf146ce2b96881c9f50", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b6fea3255c0954456b068db8d1cdb6af464dd651", "patch": "@@ -3348,7 +3348,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         let base = self.tcx.hir.node_to_pretty_string(base.id);\n                         let msg = format!(\"`{}` is a native pointer; try dereferencing it\", base);\n                         let suggestion = format!(\"(*{}).{}\", base, field);\n-                        err.span_suggestion(field.span, &msg, suggestion);\n+                        err.span_suggestion_with_applicability(field.span, &msg, suggestion,\n+                                                               Applicability::Unspecified);\n                     }\n                     _ => {}\n                 }\n@@ -4716,7 +4717,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         found: Ty<'tcx>,\n     ) {\n         if let Some((sp, msg, suggestion)) = self.check_ref(expr, found, expected) {\n-            err.span_suggestion(sp, msg, suggestion);\n+            err.span_suggestion_with_applicability(sp, msg, suggestion,\n+                                                   Applicability::Unspecified);\n         } else if !self.check_for_cast(err, expr, found, expected) {\n             let methods = self.get_conversion_methods(expr.span, expected, found);\n             if let Ok(expr_text) = self.sess().source_map().span_to_snippet(expr.span) {\n@@ -4746,7 +4748,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         }\n                     }) .collect::<Vec<_>>();\n                 if !suggestions.is_empty() {\n-                    err.span_suggestions(expr.span, \"try using a conversion method\", suggestions);\n+                    err.span_suggestions_with_applicability(expr.span,\n+                                                            \"try using a conversion method\",\n+                                                            suggestions,\n+                                                            Applicability::Unspecified,\n+                                                            );\n                 }\n             }\n         }"}, {"sha": "a678981cf011b4e6d26f2fd1a6b36b2abadd9cfe", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=b6fea3255c0954456b068db8d1cdb6af464dd651", "patch": "@@ -16,7 +16,7 @@ use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::TyKind::{Ref, Adt, Str, Uint, Never, Tuple, Char, Array};\n use rustc::ty::adjustment::{Adjustment, Adjust, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::infer::type_variable::TypeVariableOrigin;\n-use errors;\n+use errors::{self,Applicability};\n use syntax_pos::Span;\n use syntax::ast::Ident;\n use rustc::hir;\n@@ -444,9 +444,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     err.span_label(expr.span,\n                                    \"`+` can't be used to concatenate two `&str` strings\");\n                     match source_map.span_to_snippet(lhs_expr.span) {\n-                        Ok(lstring) => err.span_suggestion(lhs_expr.span,\n+                        Ok(lstring) => err.span_suggestion_with_applicability(lhs_expr.span,\n                                                            msg,\n-                                                           format!(\"{}.to_owned()\", lstring)),\n+                                                           format!(\"{}.to_owned()\", lstring),\n+                                                           Applicability::Unspecified,\n+                                                           ),\n                         _ => err.help(msg),\n                     };\n                 }"}, {"sha": "c3917488b98d88476826fdfb833394770d43e5da", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=b6fea3255c0954456b068db8d1cdb6af464dd651", "patch": "@@ -16,6 +16,7 @@ use source_map::Spanned;\n use edition::Edition;\n use parse::{token, ParseSess};\n use OneVector;\n+use errors::Applicability;\n \n use ptr::P;\n \n@@ -123,7 +124,11 @@ impl<'a> StripUnconfigured<'a> {\n             let error = |span, msg, suggestion: &str| {\n                 let mut err = self.sess.span_diagnostic.struct_span_err(span, msg);\n                 if !suggestion.is_empty() {\n-                    err.span_suggestion(span, \"expected syntax is\", suggestion.into());\n+                    err.span_suggestion_with_applicability(span,\n+                                                           \"expected syntax is\",\n+                                                           suggestion.into(),\n+                                                           Applicability::Unspecified,\n+                                                           );\n                 }\n                 err.emit();\n                 true"}, {"sha": "75f46f2e02c7da16007a40ca0605be6ba65c84b1", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=b6fea3255c0954456b068db8d1cdb6af464dd651", "patch": "@@ -32,6 +32,7 @@ use std::borrow::Cow;\n use std::collections::hash_map::Entry;\n \n use rustc_data_structures::sync::Lrc;\n+use errors::Applicability;\n \n pub struct ParserAnyMacro<'a> {\n     parser: Parser<'a>,\n@@ -187,10 +188,11 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n                     if comma_span == DUMMY_SP {\n                         err.note(\"you might be missing a comma\");\n                     } else {\n-                        err.span_suggestion_short(\n+                        err.span_suggestion_short_with_applicability(\n                             comma_span,\n                             \"missing comma here\",\n                             \", \".to_string(),\n+                            Applicability::Unspecified,\n                         );\n                     }\n                 }"}, {"sha": "458a5c6473f9fb5798f439ed4ca735fa8f95ca12", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6fea3255c0954456b068db8d1cdb6af464dd651/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b6fea3255c0954456b068db8d1cdb6af464dd651", "patch": "@@ -3882,7 +3882,11 @@ impl<'a> Parser<'a> {\n                 if self.token == token::CloseDelim(token::Brace) {\n                     // If the struct looks otherwise well formed, recover and continue.\n                     if let Some(sp) = comma_sp {\n-                        err.span_suggestion_short(sp, \"remove this comma\", String::new());\n+                        err.span_suggestion_short_with_applicability(sp,\n+                                                                     \"remove this comma\",\n+                                                                     String::new(),\n+                                                                     Applicability::Unspecified,\n+                                                                     );\n                     }\n                     err.emit();\n                     break;"}]}