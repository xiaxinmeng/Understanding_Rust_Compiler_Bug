{"sha": "327caac4d01aef74d6577b87c295270608be09fa", "node_id": "C_kwDOAAsO6NoAKDMyN2NhYWM0ZDAxYWVmNzRkNjU3N2I4N2MyOTUyNzA2MDhiZTA5ZmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-12T13:06:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-12T13:06:49Z"}, "message": "Auto merge of #95974 - fee1-dead:rollup-2fr55cs, r=fee1-dead\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #95671 (feat: Allow usage of sudo [while not accessing root] in x.py)\n - #95716 (sess: warn w/out fluent bundle w/ user sysroot)\n - #95820 (simplify const params diagnostic on stable)\n - #95900 (Fix documentation for wasm32-unknown-unknown)\n - #95947 (`impl const Default for Box<[T]>` and `Box<str>`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "cb289ff5f0ef2a5cf45e4da8c4ae6f058350521d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb289ff5f0ef2a5cf45e4da8c4ae6f058350521d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/327caac4d01aef74d6577b87c295270608be09fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/327caac4d01aef74d6577b87c295270608be09fa", "html_url": "https://github.com/rust-lang/rust/commit/327caac4d01aef74d6577b87c295270608be09fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/327caac4d01aef74d6577b87c295270608be09fa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a83fbc42a9bb6bfdb8d3fb4ecce83fb410d7642", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a83fbc42a9bb6bfdb8d3fb4ecce83fb410d7642", "html_url": "https://github.com/rust-lang/rust/commit/2a83fbc42a9bb6bfdb8d3fb4ecce83fb410d7642"}, {"sha": "1d76dd9ee7fd33585f69d8ca799283724725430e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d76dd9ee7fd33585f69d8ca799283724725430e", "html_url": "https://github.com/rust-lang/rust/commit/1d76dd9ee7fd33585f69d8ca799283724725430e"}], "stats": {"total": 357, "additions": 207, "deletions": 150}, "files": [{"sha": "a7c23dbb79ca5c2b5e60ab2c6ef5b5949fc3c579", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/327caac4d01aef74d6577b87c295270608be09fa/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/327caac4d01aef74d6577b87c295270608be09fa/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=327caac4d01aef74d6577b87c295270608be09fa", "patch": "@@ -9,6 +9,8 @@\n     test(attr(deny(warnings)))\n )]\n #![feature(box_patterns)]\n+#![feature(const_default_impls)]\n+#![feature(const_trait_impl)]\n #![feature(crate_visibility_modifier)]\n #![feature(if_let_guard)]\n #![feature(label_break_value)]"}, {"sha": "89a0857992e491b97b70a53dbedfb4b7a26120fe", "filename": "compiler/rustc_ast/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/327caac4d01aef74d6577b87c295270608be09fa/compiler%2Frustc_ast%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/327caac4d01aef74d6577b87c295270608be09fa/compiler%2Frustc_ast%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fptr.rs?ref=327caac4d01aef74d6577b87c295270608be09fa", "patch": "@@ -128,14 +128,7 @@ impl<S: Encoder, T: Encodable<S>> Encodable<S> for P<T> {\n \n impl<T> P<[T]> {\n     pub const fn new() -> P<[T]> {\n-        // HACK(eddyb) bypass the lack of a `const fn` to create an empty `Box<[T]>`\n-        // (as trait methods, `default` in this case, can't be `const fn` yet).\n-        P {\n-            ptr: unsafe {\n-                use std::ptr::NonNull;\n-                std::mem::transmute(NonNull::<[T; 0]>::dangling() as NonNull<[T]>)\n-            },\n-        }\n+        P { ptr: Box::default() }\n     }\n \n     #[inline(never)]"}, {"sha": "b33e6b661170688ef21ac68fce8d549e5d34152c", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 39, "deletions": 30, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/327caac4d01aef74d6577b87c295270608be09fa/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/327caac4d01aef74d6577b87c295270608be09fa/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=327caac4d01aef74d6577b87c295270608be09fa", "patch": "@@ -11,7 +11,7 @@ use std::error::Error;\n use std::fmt;\n use std::fs;\n use std::io;\n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n use tracing::{instrument, trace};\n \n #[cfg(parallel_compiler)]\n@@ -45,7 +45,7 @@ pub enum TranslationBundleError {\n     /// Failed to add `FluentResource` to `FluentBundle`.\n     AddResource(FluentError),\n     /// `$sysroot/share/locale/$locale` does not exist.\n-    MissingLocale(io::Error),\n+    MissingLocale,\n     /// Cannot read directory entries of `$sysroot/share/locale/$locale`.\n     ReadLocalesDir(io::Error),\n     /// Cannot read directory entry of `$sysroot/share/locale/$locale`.\n@@ -62,9 +62,7 @@ impl fmt::Display for TranslationBundleError {\n                 write!(f, \"could not parse ftl file: {}\", e)\n             }\n             TranslationBundleError::AddResource(e) => write!(f, \"failed to add resource: {}\", e),\n-            TranslationBundleError::MissingLocale(e) => {\n-                write!(f, \"missing locale directory: {}\", e)\n-            }\n+            TranslationBundleError::MissingLocale => write!(f, \"missing locale directory\"),\n             TranslationBundleError::ReadLocalesDir(e) => {\n                 write!(f, \"could not read locales dir: {}\", e)\n             }\n@@ -84,7 +82,7 @@ impl Error for TranslationBundleError {\n             TranslationBundleError::ReadFtl(e) => Some(e),\n             TranslationBundleError::ParseFtl(e) => Some(e),\n             TranslationBundleError::AddResource(e) => Some(e),\n-            TranslationBundleError::MissingLocale(e) => Some(e),\n+            TranslationBundleError::MissingLocale => None,\n             TranslationBundleError::ReadLocalesDir(e) => Some(e),\n             TranslationBundleError::ReadLocalesDirEntry(e) => Some(e),\n             TranslationBundleError::LocaleIsNotDir => None,\n@@ -113,7 +111,8 @@ impl From<Vec<FluentError>> for TranslationBundleError {\n /// (overriding any conflicting messages).\n #[instrument(level = \"trace\")]\n pub fn fluent_bundle(\n-    sysroot: &Path,\n+    mut user_provided_sysroot: Option<PathBuf>,\n+    mut sysroot_candidates: Vec<PathBuf>,\n     requested_locale: Option<LanguageIdentifier>,\n     additional_ftl_path: Option<&Path>,\n     with_directionality_markers: bool,\n@@ -140,33 +139,43 @@ pub fn fluent_bundle(\n \n     // If the user requests the default locale then don't try to load anything.\n     if !requested_fallback_locale && let Some(requested_locale) = requested_locale {\n-        let mut sysroot = sysroot.to_path_buf();\n-        sysroot.push(\"share\");\n-        sysroot.push(\"locale\");\n-        sysroot.push(requested_locale.to_string());\n-        trace!(?sysroot);\n-\n-        let _ = sysroot.try_exists().map_err(TranslationBundleError::MissingLocale)?;\n-\n-        if !sysroot.is_dir() {\n-            return Err(TranslationBundleError::LocaleIsNotDir);\n-        }\n-\n-        for entry in sysroot.read_dir().map_err(TranslationBundleError::ReadLocalesDir)? {\n-            let entry = entry.map_err(TranslationBundleError::ReadLocalesDirEntry)?;\n-            let path = entry.path();\n-            trace!(?path);\n-            if path.extension().and_then(|s| s.to_str()) != Some(\"ftl\") {\n+        let mut found_resources = false;\n+        for sysroot in user_provided_sysroot.iter_mut().chain(sysroot_candidates.iter_mut()) {\n+            sysroot.push(\"share\");\n+            sysroot.push(\"locale\");\n+            sysroot.push(requested_locale.to_string());\n+            trace!(?sysroot);\n+\n+            if !sysroot.exists() {\n                 trace!(\"skipping\");\n                 continue;\n             }\n \n-            let resource_str =\n-                fs::read_to_string(path).map_err(TranslationBundleError::ReadFtl)?;\n-            let resource =\n-                FluentResource::try_new(resource_str).map_err(TranslationBundleError::from)?;\n-            trace!(?resource);\n-            bundle.add_resource(resource).map_err(TranslationBundleError::from)?;\n+            if !sysroot.is_dir() {\n+                return Err(TranslationBundleError::LocaleIsNotDir);\n+            }\n+\n+            for entry in sysroot.read_dir().map_err(TranslationBundleError::ReadLocalesDir)? {\n+                let entry = entry.map_err(TranslationBundleError::ReadLocalesDirEntry)?;\n+                let path = entry.path();\n+                trace!(?path);\n+                if path.extension().and_then(|s| s.to_str()) != Some(\"ftl\") {\n+                    trace!(\"skipping\");\n+                    continue;\n+                }\n+\n+                let resource_str =\n+                    fs::read_to_string(path).map_err(TranslationBundleError::ReadFtl)?;\n+                let resource =\n+                    FluentResource::try_new(resource_str).map_err(TranslationBundleError::from)?;\n+                trace!(?resource);\n+                bundle.add_resource(resource).map_err(TranslationBundleError::from)?;\n+                found_resources = true;\n+            }\n+        }\n+\n+        if !found_resources {\n+            return Err(TranslationBundleError::MissingLocale);\n         }\n     }\n "}, {"sha": "fe75ee8b37b8d06fd748bebed146d452ce4e00a9", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/327caac4d01aef74d6577b87c295270608be09fa/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/327caac4d01aef74d6577b87c295270608be09fa/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=327caac4d01aef74d6577b87c295270608be09fa", "patch": "@@ -44,6 +44,7 @@ fn mk_session(matches: getopts::Matches) -> (Session, CfgSpecs) {\n     let sess = build_session(\n         sessopts,\n         None,\n+        None,\n         registry,\n         DiagnosticOutput::Default,\n         Default::default(),"}, {"sha": "3fa8017dc93c344dd972908dc64286cf158b577d", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/327caac4d01aef74d6577b87c295270608be09fa/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/327caac4d01aef74d6577b87c295270608be09fa/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=327caac4d01aef74d6577b87c295270608be09fa", "patch": "@@ -83,9 +83,23 @@ pub fn create_session(\n     // target_override is documented to be called before init(), so this is okay\n     let target_override = codegen_backend.target_override(&sopts);\n \n+    let bundle = match rustc_errors::fluent_bundle(\n+        sopts.maybe_sysroot.clone(),\n+        sysroot_candidates(),\n+        sopts.debugging_opts.translate_lang.clone(),\n+        sopts.debugging_opts.translate_additional_ftl.as_deref(),\n+        sopts.debugging_opts.translate_directionality_markers,\n+    ) {\n+        Ok(bundle) => bundle,\n+        Err(e) => {\n+            early_error(sopts.error_format, &format!(\"failed to load fluent bundle: {e}\"));\n+        }\n+    };\n+\n     let mut sess = session::build_session(\n         sopts,\n         input_path,\n+        bundle,\n         descriptions,\n         diagnostic_output,\n         lint_caps,"}, {"sha": "d70f89760a1ff06589365f2e335a4c9d66fb69ba", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/327caac4d01aef74d6577b87c295270608be09fa/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/327caac4d01aef74d6577b87c295270608be09fa/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=327caac4d01aef74d6577b87c295270608be09fa", "patch": "@@ -20,8 +20,8 @@ use rustc_errors::emitter::{Emitter, EmitterWriter, HumanReadableErrorType};\n use rustc_errors::json::JsonEmitter;\n use rustc_errors::registry::Registry;\n use rustc_errors::{\n-    fallback_fluent_bundle, fluent_bundle, DiagnosticBuilder, DiagnosticId, DiagnosticMessage,\n-    EmissionGuarantee, ErrorGuaranteed, FluentBundle, MultiSpan,\n+    fallback_fluent_bundle, DiagnosticBuilder, DiagnosticId, DiagnosticMessage, EmissionGuarantee,\n+    ErrorGuaranteed, FluentBundle, MultiSpan,\n };\n use rustc_macros::HashStable_Generic;\n pub use rustc_span::def_id::StableCrateId;\n@@ -1162,6 +1162,7 @@ pub enum DiagnosticOutput {\n pub fn build_session(\n     sopts: config::Options,\n     local_crate_source_file: Option<PathBuf>,\n+    bundle: Option<Lrc<rustc_errors::FluentBundle>>,\n     registry: rustc_errors::registry::Registry,\n     diagnostics_output: DiagnosticOutput,\n     driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n@@ -1214,16 +1215,17 @@ pub fn build_session(\n         hash_kind,\n     ));\n \n-    let bundle = fluent_bundle(\n-        &sysroot,\n-        sopts.debugging_opts.translate_lang.clone(),\n-        sopts.debugging_opts.translate_additional_ftl.as_deref(),\n-        sopts.debugging_opts.translate_directionality_markers,\n-    )\n-    .expect(\"failed to load fluent bundle\");\n     let fallback_bundle =\n-        fallback_fluent_bundle(sopts.debugging_opts.translate_directionality_markers)\n-            .expect(\"failed to load fallback fluent bundle\");\n+        match fallback_fluent_bundle(sopts.debugging_opts.translate_directionality_markers) {\n+            Ok(bundle) => bundle,\n+            Err(e) => {\n+                early_error(\n+                    sopts.error_format,\n+                    &format!(\"failed to load fallback fluent bundle: {e}\"),\n+                );\n+            }\n+        };\n+\n     let emitter =\n         default_emitter(&sopts, registry, source_map.clone(), bundle, fallback_bundle, write_dest);\n "}, {"sha": "f9664a9b99155b4802a3cc67e6f5dcb9e4e2c73e", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 82, "deletions": 70, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/327caac4d01aef74d6577b87c295270608be09fa/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/327caac4d01aef74d6577b87c295270608be09fa/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=327caac4d01aef74d6577b87c295270608be09fa", "patch": "@@ -816,16 +816,69 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n         hir::GenericParamKind::Const { ty: hir_ty, default: _ } => {\n             let ty = tcx.type_of(tcx.hir().local_def_id(param.hir_id));\n \n-            let err_ty_str;\n-            let mut is_ptr = true;\n-            let err = if tcx.features().adt_const_params {\n-                match ty.peel_refs().kind() {\n+            if tcx.features().adt_const_params {\n+                let err = match ty.peel_refs().kind() {\n                     ty::FnPtr(_) => Some(\"function pointers\"),\n                     ty::RawPtr(_) => Some(\"raw pointers\"),\n                     _ => None,\n+                };\n+\n+                if let Some(unsupported_type) = err {\n+                    tcx.sess.span_err(\n+                        hir_ty.span,\n+                        &format!(\n+                            \"using {} as const generic parameters is forbidden\",\n+                            unsupported_type\n+                        ),\n+                    );\n+                }\n+\n+                if traits::search_for_structural_match_violation(param.span, tcx, ty).is_some() {\n+                    // We use the same error code in both branches, because this is really the same\n+                    // issue: we just special-case the message for type parameters to make it\n+                    // clearer.\n+                    if let ty::Param(_) = ty.peel_refs().kind() {\n+                        // Const parameters may not have type parameters as their types,\n+                        // because we cannot be sure that the type parameter derives `PartialEq`\n+                        // and `Eq` (just implementing them is not enough for `structural_match`).\n+                        struct_span_err!(\n+                            tcx.sess,\n+                            hir_ty.span,\n+                            E0741,\n+                            \"`{}` is not guaranteed to `#[derive(PartialEq, Eq)]`, so may not be \\\n+                            used as the type of a const parameter\",\n+                            ty,\n+                        )\n+                        .span_label(\n+                            hir_ty.span,\n+                            format!(\"`{}` may not derive both `PartialEq` and `Eq`\", ty),\n+                        )\n+                        .note(\n+                            \"it is not currently possible to use a type parameter as the type of a \\\n+                            const parameter\",\n+                        )\n+                        .emit();\n+                    } else {\n+                        struct_span_err!(\n+                            tcx.sess,\n+                            hir_ty.span,\n+                            E0741,\n+                            \"`{}` must be annotated with `#[derive(PartialEq, Eq)]` to be used as \\\n+                            the type of a const parameter\",\n+                            ty,\n+                        )\n+                        .span_label(\n+                            hir_ty.span,\n+                            format!(\"`{}` doesn't derive both `PartialEq` and `Eq`\", ty),\n+                        )\n+                        .emit();\n+                    }\n                 }\n             } else {\n-                match ty.kind() {\n+                let err_ty_str;\n+                let mut is_ptr = true;\n+\n+                let err = match ty.kind() {\n                     ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Error(_) => None,\n                     ty::FnPtr(_) => Some(\"function pointers\"),\n                     ty::RawPtr(_) => Some(\"raw pointers\"),\n@@ -834,74 +887,33 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n                         err_ty_str = format!(\"`{}`\", ty);\n                         Some(err_ty_str.as_str())\n                     }\n-                }\n-            };\n-            if let Some(unsupported_type) = err {\n-                if is_ptr {\n-                    tcx.sess.span_err(\n-                        hir_ty.span,\n-                        &format!(\n-                            \"using {} as const generic parameters is forbidden\",\n-                            unsupported_type\n-                        ),\n-                    );\n-                } else {\n-                    let mut err = tcx.sess.struct_span_err(\n-                        hir_ty.span,\n-                        &format!(\n-                            \"{} is forbidden as the type of a const generic parameter\",\n-                            unsupported_type\n-                        ),\n-                    );\n-                    err.note(\"the only supported types are integers, `bool` and `char`\");\n-                    if tcx.sess.is_nightly_build() {\n-                        err.help(\n+                };\n+\n+                if let Some(unsupported_type) = err {\n+                    if is_ptr {\n+                        tcx.sess.span_err(\n+                            hir_ty.span,\n+                            &format!(\n+                                \"using {} as const generic parameters is forbidden\",\n+                                unsupported_type\n+                            ),\n+                        );\n+                    } else {\n+                        let mut err = tcx.sess.struct_span_err(\n+                            hir_ty.span,\n+                            &format!(\n+                                \"{} is forbidden as the type of a const generic parameter\",\n+                                unsupported_type\n+                            ),\n+                        );\n+                        err.note(\"the only supported types are integers, `bool` and `char`\");\n+                        if tcx.sess.is_nightly_build() {\n+                            err.help(\n                             \"more complex types are supported with `#![feature(adt_const_params)]`\",\n                         );\n+                        }\n+                        err.emit();\n                     }\n-                    err.emit();\n-                }\n-            };\n-\n-            if traits::search_for_structural_match_violation(param.span, tcx, ty).is_some() {\n-                // We use the same error code in both branches, because this is really the same\n-                // issue: we just special-case the message for type parameters to make it\n-                // clearer.\n-                if let ty::Param(_) = ty.peel_refs().kind() {\n-                    // Const parameters may not have type parameters as their types,\n-                    // because we cannot be sure that the type parameter derives `PartialEq`\n-                    // and `Eq` (just implementing them is not enough for `structural_match`).\n-                    struct_span_err!(\n-                        tcx.sess,\n-                        hir_ty.span,\n-                        E0741,\n-                        \"`{}` is not guaranteed to `#[derive(PartialEq, Eq)]`, so may not be \\\n-                            used as the type of a const parameter\",\n-                        ty,\n-                    )\n-                    .span_label(\n-                        hir_ty.span,\n-                        format!(\"`{}` may not derive both `PartialEq` and `Eq`\", ty),\n-                    )\n-                    .note(\n-                        \"it is not currently possible to use a type parameter as the type of a \\\n-                            const parameter\",\n-                    )\n-                    .emit();\n-                } else {\n-                    struct_span_err!(\n-                        tcx.sess,\n-                        hir_ty.span,\n-                        E0741,\n-                        \"`{}` must be annotated with `#[derive(PartialEq, Eq)]` to be used as \\\n-                            the type of a const parameter\",\n-                        ty,\n-                    )\n-                    .span_label(\n-                        hir_ty.span,\n-                        format!(\"`{}` doesn't derive both `PartialEq` and `Eq`\", ty),\n-                    )\n-                    .emit();\n                 }\n             }\n         }"}, {"sha": "639e7f213eaae253ccd4d88d1cb3816aec3cc7a5", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/327caac4d01aef74d6577b87c295270608be09fa/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/327caac4d01aef74d6577b87c295270608be09fa/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=327caac4d01aef74d6577b87c295270608be09fa", "patch": "@@ -1192,17 +1192,25 @@ impl<T: Default> Default for Box<T> {\n \n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> Default for Box<[T]> {\n+#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+impl<T> const Default for Box<[T]> {\n     fn default() -> Self {\n-        Box::<[T; 0]>::new([])\n+        let ptr: Unique<[T]> = Unique::<[T; 0]>::dangling();\n+        Box(ptr, Global)\n     }\n }\n \n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"default_box_extra\", since = \"1.17.0\")]\n-impl Default for Box<str> {\n+#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+impl const Default for Box<str> {\n     fn default() -> Self {\n-        unsafe { from_boxed_utf8_unchecked(Default::default()) }\n+        // SAFETY: This is the same as `Unique::cast<U>` but with an unsized `U = str`.\n+        let ptr: Unique<str> = unsafe {\n+            let bytes: Unique<[u8]> = Unique::<[u8; 0]>::dangling();\n+            Unique::new_unchecked(bytes.as_ptr() as *mut str)\n+        };\n+        Box(ptr, Global)\n     }\n }\n "}, {"sha": "49b837becbcd89fd74a8c8bebddf7d7580bf5277", "filename": "library/alloc/tests/const_fns.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/327caac4d01aef74d6577b87c295270608be09fa/library%2Falloc%2Ftests%2Fconst_fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/327caac4d01aef74d6577b87c295270608be09fa/library%2Falloc%2Ftests%2Fconst_fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fconst_fns.rs?ref=327caac4d01aef74d6577b87c295270608be09fa", "patch": "@@ -6,6 +6,9 @@ pub const MY_VEC2: Vec<usize> = Default::default();\n pub const MY_STRING: String = String::new();\n pub const MY_STRING2: String = Default::default();\n \n+pub const MY_BOXED_SLICE: Box<[usize]> = Default::default();\n+pub const MY_BOXED_STR: Box<str> = Default::default();\n+\n use std::collections::{BTreeMap, BTreeSet};\n \n pub const MY_BTREEMAP: BTreeMap<usize, usize> = BTreeMap::new();\n@@ -23,6 +26,9 @@ fn test_const() {\n     assert_eq!(MY_VEC, MY_VEC2);\n     assert_eq!(MY_STRING, MY_STRING2);\n \n+    assert_eq!(MY_VEC, *MY_BOXED_SLICE);\n+    assert_eq!(MY_STRING, *MY_BOXED_STR);\n+\n     assert_eq!(MAP_LEN, 0);\n     assert_eq!(SET_LEN, 0);\n     assert!(MAP_IS_EMPTY && SET_IS_EMPTY);"}, {"sha": "e6013c7c051e5a4b985c505170d1f29ddea99d9c", "filename": "library/std/src/os/fd/owned.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/327caac4d01aef74d6577b87c295270608be09fa/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/327caac4d01aef74d6577b87c295270608be09fa/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs?ref=327caac4d01aef74d6577b87c295270608be09fa", "patch": "@@ -8,7 +8,7 @@ use crate::fmt;\n use crate::fs;\n use crate::marker::PhantomData;\n use crate::mem::forget;\n-#[cfg(not(any(target_os = \"wasi\", target_env = \"sgx\")))]\n+#[cfg(not(any(target_arch = \"wasm32\", target_env = \"sgx\")))]\n use crate::sys::cvt;\n use crate::sys_common::{AsInner, FromInner, IntoInner};\n \n@@ -76,7 +76,7 @@ impl BorrowedFd<'_> {\n impl OwnedFd {\n     /// Creates a new `OwnedFd` instance that shares the same underlying file handle\n     /// as the existing `OwnedFd` instance.\n-    #[cfg(not(target_os = \"wasi\"))]\n+    #[cfg(not(target_arch = \"wasm32\"))]\n     pub fn try_clone(&self) -> crate::io::Result<Self> {\n         // We want to atomically duplicate this file descriptor and set the\n         // CLOEXEC flag, and currently that's done via F_DUPFD_CLOEXEC. This\n@@ -95,7 +95,7 @@ impl OwnedFd {\n         Ok(unsafe { Self::from_raw_fd(fd) })\n     }\n \n-    #[cfg(target_os = \"wasi\")]\n+    #[cfg(target_arch = \"wasm32\")]\n     pub fn try_clone(&self) -> crate::io::Result<Self> {\n         Err(crate::io::const_io_error!(\n             crate::io::ErrorKind::Unsupported,"}, {"sha": "47ee88d97fb9349fba80eb4ab47cfbc5e6895720", "filename": "library/std/src/os/fd/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/327caac4d01aef74d6577b87c295270608be09fa/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/327caac4d01aef74d6577b87c295270608be09fa/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs?ref=327caac4d01aef74d6577b87c295270608be09fa", "patch": "@@ -5,7 +5,7 @@\n use crate::fs;\n use crate::io;\n use crate::os::raw;\n-#[cfg(doc)]\n+#[cfg(all(doc, not(target_arch = \"wasm32\")))]\n use crate::os::unix::io::AsFd;\n #[cfg(unix)]\n use crate::os::unix::io::OwnedFd;"}, {"sha": "9af0657caff76a4749691ee738178e076c2f48b6", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/327caac4d01aef74d6577b87c295270608be09fa/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/327caac4d01aef74d6577b87c295270608be09fa/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=327caac4d01aef74d6577b87c295270608be09fa", "patch": "@@ -1173,9 +1173,9 @@ def check_vendored_status(self):\n         \"\"\"Check that vendoring is configured properly\"\"\"\n         vendor_dir = os.path.join(self.rust_root, 'vendor')\n         if 'SUDO_USER' in os.environ and not self.use_vendored_sources:\n-            if os.environ.get('USER') != os.environ['SUDO_USER']:\n+            if os.getuid() == 0:\n                 self.use_vendored_sources = True\n-                print('info: looks like you are running this command under `sudo`')\n+                print('info: looks like you\\'re trying to run this command as root')\n                 print('      and so in order to preserve your $HOME this will now')\n                 print('      use vendored sources by default.')\n                 if not os.path.exists(vendor_dir):"}, {"sha": "bfff75e7acb08429585ef8b65ffab131d2702cea", "filename": "src/test/run-make/translation/Makefile", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/327caac4d01aef74d6577b87c295270608be09fa/src%2Ftest%2Frun-make%2Ftranslation%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/327caac4d01aef74d6577b87c295270608be09fa/src%2Ftest%2Frun-make%2Ftranslation%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftranslation%2FMakefile?ref=327caac4d01aef74d6577b87c295270608be09fa", "patch": "@@ -15,7 +15,9 @@ normal: basic-translation.rs\n custom: basic-translation.rs basic-translation.ftl\n \t$(RUSTC) $< -Ztranslate-additional-ftl=$(CURDIR)/basic-translation.ftl 2>&1 | grep \"this is a test message\"\n \n-# Make a local copy of the sysroot and add the custom locale to it.\n+# Check that a locale can be loaded from the sysroot given a language\n+# identifier by making a local copy of the sysroot and adding the custom locale\n+# to it.\n sysroot: basic-translation.rs basic-translation.ftl\n \tmkdir $(FAKEROOT)\n \tln -s $(SYSROOT)/* $(FAKEROOT)\n@@ -31,3 +33,27 @@ sysroot: basic-translation.rs basic-translation.ftl\n \tmkdir -p $(FAKEROOT)/share/locale/zh-CN/\n \tln -s $(CURDIR)/basic-translation.ftl $(FAKEROOT)/share/locale/zh-CN/basic-translation.ftl\n \t$(RUSTC) $< --sysroot $(FAKEROOT) -Ztranslate-lang=zh-CN 2>&1 | grep \"this is a test message\"\n+\n+# Check that the compiler errors out when the sysroot requested cannot be\n+# found. This test might start failing if there actually exists a Klingon\n+# translation of rustc's error messages.\n+sysroot-missing: \n+\t$(RUSTC) $< -Ztranslate-lang=tlh 2>&1 || grep \"missing locale directory\"\n+\n+# Check that the compiler errors out when the sysroot requested cannot be\n+# found. This test might start failing if there actually exists a Klingon\n+# translation of rustc's error messages.\n+sysroot-invalid: basic-translation.rs basic-translation.ftl\n+\tmkdir $(FAKEROOT)\n+\tln -s $(SYSROOT)/* $(FAKEROOT)\n+\trm -f $(FAKEROOT)/lib\n+\tmkdir $(FAKEROOT)/lib\n+\tln -s $(SYSROOT)/lib/* $(FAKEROOT)/lib\n+\trm -f $(FAKEROOT)/lib/rustlib\n+\tmkdir $(FAKEROOT)/lib/rustlib\n+\tln -s $(SYSROOT)/lib/rustlib/* $(FAKEROOT)/lib/rustlib\n+\trm -f $(FAKEROOT)/lib/rustlib/src\n+\tmkdir $(FAKEROOT)/lib/rustlib/src\n+\tln -s $(SYSROOT)/lib/rustlib/src/* $(FAKEROOT)/lib/rustlib/src\n+\ttouch $(FAKEROOT)/share/locale/zh-CN/\n+\t$(RUSTC) $< --sysroot $(FAKEROOT) -Ztranslate-lang=zh-CN 2>&1 || grep \"`\\$sysroot/share/locales/\\$locale` is not a directory\""}, {"sha": "9f6c7ccf3fe746195c82ecc4ed743fb0a725d1c7", "filename": "src/test/ui/const-generics/issues/issue-63322-forbid-dyn.min.stderr", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/327caac4d01aef74d6577b87c295270608be09fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/327caac4d01aef74d6577b87c295270608be09fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.min.stderr?ref=327caac4d01aef74d6577b87c295270608be09fa", "patch": "@@ -7,12 +7,5 @@ LL | fn test<const T: &'static dyn A>() {\n    = note: the only supported types are integers, `bool` and `char`\n    = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n-error[E0741]: `&'static (dyn A + 'static)` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n-  --> $DIR/issue-63322-forbid-dyn.rs:9:18\n-   |\n-LL | fn test<const T: &'static dyn A>() {\n-   |                  ^^^^^^^^^^^^^^ `&'static (dyn A + 'static)` doesn't derive both `PartialEq` and `Eq`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0741`."}, {"sha": "116c3fcfb2170626b739db135aed4b094bd4d7d3", "filename": "src/test/ui/const-generics/issues/issue-63322-forbid-dyn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/327caac4d01aef74d6577b87c295270608be09fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/327caac4d01aef74d6577b87c295270608be09fa/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs?ref=327caac4d01aef74d6577b87c295270608be09fa", "patch": "@@ -7,7 +7,7 @@ struct B;\n impl A for B {}\n \n fn test<const T: &'static dyn A>() {\n-    //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]` to be used\n+    //[full]~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]` to be used\n     //[min]~^^ ERROR `&'static (dyn A + 'static)` is forbidden\n     unimplemented!()\n }"}, {"sha": "276ebf31ff8b88012faa61c24f8554150c0efbce", "filename": "src/test/ui/const-generics/nested-type.min.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/327caac4d01aef74d6577b87c295270608be09fa/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/327caac4d01aef74d6577b87c295270608be09fa/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.min.stderr?ref=327caac4d01aef74d6577b87c295270608be09fa", "patch": "@@ -14,14 +14,5 @@ LL | | }]>;\n    = note: the only supported types are integers, `bool` and `char`\n    = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n-error[E0015]: cannot call non-const fn `Foo::{constant#0}::Foo::<17_usize>::value` in constants\n-  --> $DIR/nested-type.rs:15:5\n-   |\n-LL |     Foo::<17>::value()\n-   |     ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0015`."}, {"sha": "742340f430e2b74f8f4714921a04e5610d7d7fee", "filename": "src/test/ui/const-generics/nested-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/327caac4d01aef74d6577b87c295270608be09fa/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/327caac4d01aef74d6577b87c295270608be09fa/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.rs?ref=327caac4d01aef74d6577b87c295270608be09fa", "patch": "@@ -13,7 +13,7 @@ struct Foo<const N: [u8; { //[min]~ ERROR `[u8; _]` is forbidden\n     }\n \n     Foo::<17>::value()\n-    //~^ ERROR cannot call non-const fn\n+    //[full]~^ ERROR cannot call non-const fn\n }]>;\n \n fn main() {}"}]}