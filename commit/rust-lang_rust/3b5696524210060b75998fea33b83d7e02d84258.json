{"sha": "3b5696524210060b75998fea33b83d7e02d84258", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNTY5NjUyNDIxMDA2MGI3NTk5OGZlYTMzYjgzZDdlMDJkODQyNTg=", "commit": {"author": {"name": "Jay Hardee", "email": "hardeejj9@gmail.com", "date": "2017-07-30T22:51:01Z"}, "committer": {"name": "Jay Hardee", "email": "hardeejj9@gmail.com", "date": "2017-07-31T23:06:51Z"}, "message": "Use DigitInfo instead of get_digits().", "tree": {"sha": "fa4d741b403dc27aac107f0a81db6e458d046016", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa4d741b403dc27aac107f0a81db6e458d046016"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b5696524210060b75998fea33b83d7e02d84258", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b5696524210060b75998fea33b83d7e02d84258", "html_url": "https://github.com/rust-lang/rust/commit/3b5696524210060b75998fea33b83d7e02d84258", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b5696524210060b75998fea33b83d7e02d84258/comments", "author": {"login": "jayhardee9", "id": 6964208, "node_id": "MDQ6VXNlcjY5NjQyMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/6964208?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayhardee9", "html_url": "https://github.com/jayhardee9", "followers_url": "https://api.github.com/users/jayhardee9/followers", "following_url": "https://api.github.com/users/jayhardee9/following{/other_user}", "gists_url": "https://api.github.com/users/jayhardee9/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayhardee9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayhardee9/subscriptions", "organizations_url": "https://api.github.com/users/jayhardee9/orgs", "repos_url": "https://api.github.com/users/jayhardee9/repos", "events_url": "https://api.github.com/users/jayhardee9/events{/privacy}", "received_events_url": "https://api.github.com/users/jayhardee9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jayhardee9", "id": 6964208, "node_id": "MDQ6VXNlcjY5NjQyMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/6964208?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jayhardee9", "html_url": "https://github.com/jayhardee9", "followers_url": "https://api.github.com/users/jayhardee9/followers", "following_url": "https://api.github.com/users/jayhardee9/following{/other_user}", "gists_url": "https://api.github.com/users/jayhardee9/gists{/gist_id}", "starred_url": "https://api.github.com/users/jayhardee9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jayhardee9/subscriptions", "organizations_url": "https://api.github.com/users/jayhardee9/orgs", "repos_url": "https://api.github.com/users/jayhardee9/repos", "events_url": "https://api.github.com/users/jayhardee9/events{/privacy}", "received_events_url": "https://api.github.com/users/jayhardee9/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6cb1189ddcb2973ba816634e909ed7ddc131058", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6cb1189ddcb2973ba816634e909ed7ddc131058", "html_url": "https://github.com/rust-lang/rust/commit/a6cb1189ddcb2973ba816634e909ed7ddc131058"}], "stats": {"total": 39, "additions": 8, "deletions": 31}, "files": [{"sha": "e9661762996abdd423b768295c524bf4c7d65a21", "filename": "clippy_lints/src/literal_digit_grouping.rs", "status": "modified", "additions": 8, "deletions": 31, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3b5696524210060b75998fea33b83d7e02d84258/clippy_lints%2Fsrc%2Fliteral_digit_grouping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5696524210060b75998fea33b83d7e02d84258/clippy_lints%2Fsrc%2Fliteral_digit_grouping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_digit_grouping.rs?ref=3b5696524210060b75998fea33b83d7e02d84258", "patch": "@@ -256,9 +256,10 @@ impl LiteralDigitGrouping {\n             let Some(firstch) = src.chars().next(),\n             char::to_digit(firstch, 10).is_some()\n         ], {\n-            let digits = LiteralDigitGrouping::get_digits(&src, false);\n-\n-            LiteralDigitGrouping::do_lint(digits, cx, &lit.span);\n+            let digit_info = DigitInfo::new(&src, false);\n+            let _ = LiteralDigitGrouping::do_lint(digit_info.digits).map_err(|warning_type| {\n+                warning_type.display(&digit_info.grouping_hint(), cx, &lit.span)\n+            });\n         }}\n \n         // Lint floating-point literals.\n@@ -268,7 +269,10 @@ impl LiteralDigitGrouping {\n             let Some(firstch) = src.chars().next(),\n             char::to_digit(firstch, 10).is_some()\n         ], {\n-            let digits: Vec<&str> = LiteralDigitGrouping::get_digits(&src, true)\n+            let digit_info = DigitInfo::new(&src, true);\n+            // Separate digits into integral and fractional parts.\n+            let parts: Vec<&str> = digit_info\n+                .digits\n                 .split_terminator('.')\n                 .collect();\n \n@@ -301,34 +305,7 @@ impl LiteralDigitGrouping {\n         }}\n     }\n \n-    /// Returns the digits of an integral or floating-point literal.\n-    fn get_digits(lit: &str, float: bool) -> &str {\n-        // Determine delimiter for radix prefix, if present.\n-        let mb_r = if lit.starts_with(\"0x\") {\n-            Some('x')\n-        } else if lit.starts_with(\"0b\") {\n-            Some('b')\n-        } else if lit.starts_with(\"0o\") {\n-            Some('o')\n-        } else {\n-            None\n-        };\n-\n-        let has_suffix = !float && (lit.contains('i') || lit.contains('u')) || float && lit.contains('f');\n-\n-        // Grab part of literal between the radix prefix and type suffix.\n-        let mut digits = if let Some(r) = mb_r {\n-            lit.split(|c| c == 'i' || c == 'u' || c == r || (float && c == 'f')).nth(1).unwrap()\n-        } else {\n-            lit.split(|c| c == 'i' || c == 'u' || (float && c == 'f')).next().unwrap()\n-        };\n-\n-        // If there was an underscore before type suffix, drop it.\n-        if has_suffix && digits.chars().last().unwrap() == '_' {\n-            digits = digits.split_at(digits.len() - 1).0;\n         }\n-\n-        digits\n     }\n \n     /// Performs lint on `digits` (no decimal point) and returns the group"}]}