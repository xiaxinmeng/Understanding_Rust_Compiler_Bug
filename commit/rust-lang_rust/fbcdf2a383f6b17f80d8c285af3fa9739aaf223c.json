{"sha": "fbcdf2a383f6b17f80d8c285af3fa9739aaf223c", "node_id": "C_kwDOAAsO6NoAKGZiY2RmMmEzODNmNmIxN2Y4MGQ4YzI4NWFmM2ZhOTczOWFhZjIyM2M", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-18T22:07:35Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-18T22:07:39Z"}, "message": "clarify lib.rs attribute structure", "tree": {"sha": "774c394a8aa497591868f81fb37fff47cd815927", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/774c394a8aa497591868f81fb37fff47cd815927"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbcdf2a383f6b17f80d8c285af3fa9739aaf223c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbcdf2a383f6b17f80d8c285af3fa9739aaf223c", "html_url": "https://github.com/rust-lang/rust/commit/fbcdf2a383f6b17f80d8c285af3fa9739aaf223c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbcdf2a383f6b17f80d8c285af3fa9739aaf223c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "438e49c1cba71d7ff8a138a1b96058c2d9a9d217", "url": "https://api.github.com/repos/rust-lang/rust/commits/438e49c1cba71d7ff8a138a1b96058c2d9a9d217", "html_url": "https://github.com/rust-lang/rust/commit/438e49c1cba71d7ff8a138a1b96058c2d9a9d217"}], "stats": {"total": 32, "additions": 17, "deletions": 15}, "files": [{"sha": "aea84ac90c1bcce92275e1b0b8a9d717ed8ed579", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fbcdf2a383f6b17f80d8c285af3fa9739aaf223c/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbcdf2a383f6b17f80d8c285af3fa9739aaf223c/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=fbcdf2a383f6b17f80d8c285af3fa9739aaf223c", "patch": "@@ -56,11 +56,6 @@\n //! [`Rc`]: rc\n //! [`RefCell`]: core::cell\n \n-// To run liballoc tests without x.py without ending up with two copies of liballoc, Miri needs to be\n-// able to \"empty\" this crate. See <https://github.com/rust-lang/miri-test-libstd/issues/4>.\n-// rustc itself never sets the feature, so this line has no affect there.\n-#![cfg(any(not(feature = \"miri-test-libstd\"), test, doctest))]\n-//\n #![allow(unused_attributes)]\n #![stable(feature = \"alloc\", since = \"1.36.0\")]\n #![doc(\n@@ -78,6 +73,10 @@\n ))]\n #![no_std]\n #![needs_allocator]\n+// To run liballoc tests without x.py without ending up with two copies of liballoc, Miri needs to be\n+// able to \"empty\" this crate. See <https://github.com/rust-lang/miri-test-libstd/issues/4>.\n+// rustc itself never sets the feature, so this line has no affect there.\n+#![cfg(any(not(feature = \"miri-test-libstd\"), test, doctest))]\n //\n // Lints:\n #![deny(unsafe_op_in_unsafe_fn)]"}, {"sha": "ead06f40d87c4944b48935395de6cdc6e9aa8af1", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fbcdf2a383f6b17f80d8c285af3fa9739aaf223c/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbcdf2a383f6b17f80d8c285af3fa9739aaf223c/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=fbcdf2a383f6b17f80d8c285af3fa9739aaf223c", "patch": "@@ -188,13 +188,6 @@\n //! [array]: prim@array\n //! [slice]: prim@slice\n \n-// To run libstd tests without x.py without ending up with two copies of libstd, Miri needs to be\n-// able to \"empty\" this crate. See <https://github.com/rust-lang/miri-test-libstd/issues/4>.\n-// rustc itself never sets the feature, so this line has no affect there.\n-#![cfg(any(not(feature = \"miri-test-libstd\"), test, doctest))]\n-// miri-test-libstd also prefers to make std use the sysroot versions of the dependencies.\n-#![cfg_attr(feature = \"miri-test-libstd\", feature(rustc_private))]\n-//\n #![cfg_attr(not(feature = \"restricted-std\"), stable(feature = \"rust1\", since = \"1.0.0\"))]\n #![cfg_attr(feature = \"restricted-std\", unstable(feature = \"restricted_std\", issue = \"none\"))]\n #![doc(\n@@ -209,25 +202,35 @@\n     no_global_oom_handling,\n     not(no_global_oom_handling)\n ))]\n+// To run libstd tests without x.py without ending up with two copies of libstd, Miri needs to be\n+// able to \"empty\" this crate. See <https://github.com/rust-lang/miri-test-libstd/issues/4>.\n+// rustc itself never sets the feature, so this line has no affect there.\n+#![cfg(any(not(feature = \"miri-test-libstd\"), test, doctest))]\n+// miri-test-libstd also prefers to make std use the sysroot versions of the dependencies.\n+#![cfg_attr(feature = \"miri-test-libstd\", feature(rustc_private))]\n // Don't link to std. We are std.\n #![no_std]\n+// Tell the compiler to link to either panic_abort or panic_unwind\n+#![needs_panic_runtime]\n+//\n+// Lints:\n #![warn(deprecated_in_future)]\n #![warn(missing_docs)]\n #![warn(missing_debug_implementations)]\n #![allow(explicit_outlives_requirements)]\n #![allow(unused_lifetimes)]\n-// Tell the compiler to link to either panic_abort or panic_unwind\n-#![needs_panic_runtime]\n+#![deny(rustc::existing_doc_keyword)]\n // Ensure that std can be linked against panic_abort despite compiled with `-C panic=unwind`\n #![deny(ffi_unwind_calls)]\n // std may use features in a platform-specific way\n #![allow(unused_features)]\n+//\n+// Features:\n #![cfg_attr(test, feature(internal_output_capture, print_internals, update_panic_count, rt))]\n #![cfg_attr(\n     all(target_vendor = \"fortanix\", target_env = \"sgx\"),\n     feature(slice_index_methods, coerce_unsized, sgx_platform)\n )]\n-#![deny(rustc::existing_doc_keyword)]\n //\n // Language features:\n #![feature(alloc_error_handler)]"}]}