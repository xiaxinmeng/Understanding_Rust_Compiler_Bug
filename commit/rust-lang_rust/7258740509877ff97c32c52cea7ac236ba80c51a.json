{"sha": "7258740509877ff97c32c52cea7ac236ba80c51a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNTg3NDA1MDk4NzdmZjk3YzMyYzUyY2VhN2FjMjM2YmE4MGM1MWE=", "commit": {"author": {"name": "Florian Warzecha", "email": "liketechnik@disroot.org", "date": "2020-10-21T20:49:08Z"}, "committer": {"name": "Florian Warzecha", "email": "liketechnik@disroot.org", "date": "2020-10-21T20:49:08Z"}, "message": "validate allow_internal_unstable target\n\nAdds a check to make sure `#[allow_internal_unstable]`\ncan be applied only to macro definitions.", "tree": {"sha": "8efa2eb4a04e000c2bbc4f493352bc92988914d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8efa2eb4a04e000c2bbc4f493352bc92988914d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7258740509877ff97c32c52cea7ac236ba80c51a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmbauVGD14yLN3Z9qS+jH2X+RDGAFAl+QnxYACgkQS+jH2X+R\nDGAsoRAAg1A1pRVA1qVkMENzCsmUybEdRJRWtUSvTWJoF9Nc4dkt1JXhF5F2S0pB\n3mf4lVVxuAcsMtIHKT6cuG0R2XgIqPgepA0KpUGQsltHjMxutK2el7YOz/vtkwoC\ng59kysU3cNub72rI3zfVcqasojm4cRAb3vCMlPIp67yKtGoKMPLN8uIceSneCQ32\nVEpu6N9tj4vEPeePq1+F2k/JOacgN1DbqZfhENij4gWF+L3gi2bpwQK7JXyehCIE\nNNxJhNcBsXCWiJxTDZA9iP3abAL37l0/ns5pfIFBu7RfXB595XohMqBcvyiTYSql\n5CKuiNIZxd7SQHTKUrIJkpmPf0jfMwUezISTVR159roSYO+NQqRGR/xgL9cW+ifP\n00JUzZWUg1XcIDDhHAmsTINNOrCmlCLlgtGGyYVm/8v8cbGuizpViTgZ0XpXmaLw\ntSmqX3a2RiG8m3mlGVfohbJuahi/hTf3T0pMZ3a3EAGoJNCwQ0WemAs0dAUHPrF2\nFpFaL5XCisM3GI5mwVMXALO3QbDPYyX4YWWyEVzfbV2v+ksWJ76fo8lutG11fUiD\naz7i2HeTbcq5CKXByWrxAO8070TuA0FElM57b+QAKwjUtho0Yd3I3D9ALaGpVRDF\nLujgH/WrutFRmtHsRp7l7jvYZJkYw0HGGkZBGY+JoUT+B2m4y4M=\n=gmjp\n-----END PGP SIGNATURE-----", "payload": "tree 8efa2eb4a04e000c2bbc4f493352bc92988914d7\nparent 05f4a9a42abbbdb64d3ec4ed0ae6883c10c66e3f\nauthor Florian Warzecha <liketechnik@disroot.org> 1603313348 +0200\ncommitter Florian Warzecha <liketechnik@disroot.org> 1603313348 +0200\n\nvalidate allow_internal_unstable target\n\nAdds a check to make sure `#[allow_internal_unstable]`\ncan be applied only to macro definitions.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7258740509877ff97c32c52cea7ac236ba80c51a", "html_url": "https://github.com/rust-lang/rust/commit/7258740509877ff97c32c52cea7ac236ba80c51a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7258740509877ff97c32c52cea7ac236ba80c51a/comments", "author": {"login": "liketechnik", "id": 24209689, "node_id": "MDQ6VXNlcjI0MjA5Njg5", "avatar_url": "https://avatars.githubusercontent.com/u/24209689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liketechnik", "html_url": "https://github.com/liketechnik", "followers_url": "https://api.github.com/users/liketechnik/followers", "following_url": "https://api.github.com/users/liketechnik/following{/other_user}", "gists_url": "https://api.github.com/users/liketechnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/liketechnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liketechnik/subscriptions", "organizations_url": "https://api.github.com/users/liketechnik/orgs", "repos_url": "https://api.github.com/users/liketechnik/repos", "events_url": "https://api.github.com/users/liketechnik/events{/privacy}", "received_events_url": "https://api.github.com/users/liketechnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "liketechnik", "id": 24209689, "node_id": "MDQ6VXNlcjI0MjA5Njg5", "avatar_url": "https://avatars.githubusercontent.com/u/24209689?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liketechnik", "html_url": "https://github.com/liketechnik", "followers_url": "https://api.github.com/users/liketechnik/followers", "following_url": "https://api.github.com/users/liketechnik/following{/other_user}", "gists_url": "https://api.github.com/users/liketechnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/liketechnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liketechnik/subscriptions", "organizations_url": "https://api.github.com/users/liketechnik/orgs", "repos_url": "https://api.github.com/users/liketechnik/repos", "events_url": "https://api.github.com/users/liketechnik/events{/privacy}", "received_events_url": "https://api.github.com/users/liketechnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05f4a9a42abbbdb64d3ec4ed0ae6883c10c66e3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/05f4a9a42abbbdb64d3ec4ed0ae6883c10c66e3f", "html_url": "https://github.com/rust-lang/rust/commit/05f4a9a42abbbdb64d3ec4ed0ae6883c10c66e3f"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "95e6cc3b863c41548c17204fbb812f2e4084b253", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7258740509877ff97c32c52cea7ac236ba80c51a/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7258740509877ff97c32c52cea7ac236ba80c51a/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=7258740509877ff97c32c52cea7ac236ba80c51a", "patch": "@@ -85,6 +85,8 @@ impl CheckAttrVisitor<'tcx> {\n                 self.check_export_name(&attr, span, target)\n             } else if self.tcx.sess.check_name(attr, sym::rustc_args_required_const) {\n                 self.check_rustc_args_required_const(&attr, span, target, item)\n+            } else if self.tcx.sess.check_name(attr, sym::allow_internal_unstable) {\n+                self.check_allow_internal_unstable(&attr, span, target, &attrs)\n             } else {\n                 // lint-only checks\n                 if self.tcx.sess.check_name(attr, sym::cold) {\n@@ -762,6 +764,33 @@ impl CheckAttrVisitor<'tcx> {\n             }\n         }\n     }\n+\n+    /// Outputs an error for `#[allow_internal_unstable]` which can only be applied to macros.\n+    /// (Allows proc_macro functions)\n+    fn check_allow_internal_unstable(\n+        &self,\n+        attr: &Attribute,\n+        span: &Span,\n+        target: Target,\n+        attrs: &[Attribute],\n+    ) -> bool {\n+        debug!(\"Checking target: {:?}\", target);\n+        if target == Target::Fn {\n+            for attr in attrs {\n+                if self.tcx.sess.is_proc_macro_attr(attr) {\n+                    debug!(\"Is proc macro attr\");\n+                    return true;\n+                }\n+            }\n+            debug!(\"Is not proc macro attr\");\n+        }\n+        self.tcx\n+            .sess\n+            .struct_span_err(attr.span, \"attribute should be applied to a macro\")\n+            .span_label(*span, \"not a macro\")\n+            .emit();\n+        false\n+    }\n }\n \n impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {"}, {"sha": "8b13f1bf2788e60868d6498c516dd80b0e95813e", "filename": "src/test/ui/feature-gates/feature-gate-allow-internal-unstable-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7258740509877ff97c32c52cea7ac236ba80c51a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7258740509877ff97c32c52cea7ac236ba80c51a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-struct.rs?ref=7258740509877ff97c32c52cea7ac236ba80c51a", "patch": "@@ -2,6 +2,7 @@\n // this needs a different test since this is done after expansion\n \n #[allow_internal_unstable()] //~ ERROR allow_internal_unstable side-steps\n+//~| ERROR attribute should\n struct S;\n \n fn main() {}"}, {"sha": "df7773ba4fb65a7ccb23b9041244d52412d1c092", "filename": "src/test/ui/feature-gates/feature-gate-allow-internal-unstable-struct.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7258740509877ff97c32c52cea7ac236ba80c51a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7258740509877ff97c32c52cea7ac236ba80c51a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-struct.stderr?ref=7258740509877ff97c32c52cea7ac236ba80c51a", "patch": "@@ -6,6 +6,15 @@ LL | #[allow_internal_unstable()]\n    |\n    = help: add `#![feature(allow_internal_unstable)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error: attribute should be applied to a macro\n+  --> $DIR/feature-gate-allow-internal-unstable-struct.rs:4:1\n+   |\n+LL | #[allow_internal_unstable()]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | struct S;\n+   | --------- not a macro\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}]}