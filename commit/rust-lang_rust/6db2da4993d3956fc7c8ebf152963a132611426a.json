{"sha": "6db2da4993d3956fc7c8ebf152963a132611426a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkYjJkYTQ5OTNkMzk1NmZjN2M4ZWJmMTUyOTYzYTEzMjYxMTQyNmE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-29T22:32:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-29T22:32:27Z"}, "message": "Merge #3383\n\n3383: Slightly refactor inlay hints r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "f6313fbee2ab069b0b623d53ba9202058453fa19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6313fbee2ab069b0b623d53ba9202058453fa19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6db2da4993d3956fc7c8ebf152963a132611426a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeWuZ7CRBK7hj4Ov3rIwAAdHIIAJfrvWZrqO617BQAQqjl7zHJ\nJuGR2WAQT7QsOBw1GIERDJ1GmdmKOGumse1qRUHtJJJieUnuYawJkNi5ZkkjYMXD\nZmZe3pPY5MVu6Bu6ceHdAnu2zK+Kol63OksmmhEW5zQDQcngYJEwlqGu10oWh0Ml\nkH8zew/OFiDpKIvPwTNXJe4wsroGK/9QM9Y/DWLqOJYrPIqX1nedLv0/4dQyXOpg\nVepNaoE7BG/xFKlAg6DlqHLRqGWgWdF3Twe6bcGSwZI+8Y+BslgQbnnHJOc25Joc\niNTH1qD+XNi3MBc2kr8EUxhpgCMREYkQK25APZsE0oOVY5Bw1vYoyWywJ8TaX4U=\n=iDn8\n-----END PGP SIGNATURE-----\n", "payload": "tree f6313fbee2ab069b0b623d53ba9202058453fa19\nparent 61fe34b709cc487b96046e11ac949684572b1629\nparent 584c8d987501273b7341685d52b71bdaa1c2461e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1583015547 +0000\ncommitter GitHub <noreply@github.com> 1583015547 +0000\n\nMerge #3383\n\n3383: Slightly refactor inlay hints r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6db2da4993d3956fc7c8ebf152963a132611426a", "html_url": "https://github.com/rust-lang/rust/commit/6db2da4993d3956fc7c8ebf152963a132611426a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6db2da4993d3956fc7c8ebf152963a132611426a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61fe34b709cc487b96046e11ac949684572b1629", "url": "https://api.github.com/repos/rust-lang/rust/commits/61fe34b709cc487b96046e11ac949684572b1629", "html_url": "https://github.com/rust-lang/rust/commit/61fe34b709cc487b96046e11ac949684572b1629"}, {"sha": "584c8d987501273b7341685d52b71bdaa1c2461e", "url": "https://api.github.com/repos/rust-lang/rust/commits/584c8d987501273b7341685d52b71bdaa1c2461e", "html_url": "https://github.com/rust-lang/rust/commit/584c8d987501273b7341685d52b71bdaa1c2461e"}], "stats": {"total": 129, "additions": 59, "deletions": 70}, "files": [{"sha": "69098a630cdbf9d3931386a0c91940250a6c16dc", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 58, "deletions": 69, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/6db2da4993d3956fc7c8ebf152963a132611426a/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6db2da4993d3956fc7c8ebf152963a132611426a/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=6db2da4993d3956fc7c8ebf152963a132611426a", "patch": "@@ -5,7 +5,7 @@ use ra_ide_db::RootDatabase;\n use ra_prof::profile;\n use ra_syntax::{\n     ast::{self, ArgListOwner, AstNode, TypeAscriptionOwner},\n-    match_ast, SmolStr, SyntaxNode, TextRange,\n+    match_ast, SmolStr, TextRange,\n };\n \n use crate::{FileId, FunctionSignature};\n@@ -28,50 +28,76 @@ pub(crate) fn inlay_hints(\n     file_id: FileId,\n     max_inlay_hint_length: Option<usize>,\n ) -> Vec<InlayHint> {\n+    let _p = profile(\"inlay_hints\");\n     let sema = Semantics::new(db);\n     let file = sema.parse(file_id);\n+\n     let mut res = Vec::new();\n     for node in file.syntax().descendants() {\n-        get_inlay_hints(&mut res, &sema, &node, max_inlay_hint_length);\n+        match_ast! {\n+            match node {\n+                ast::CallExpr(it) => { get_param_name_hints(&mut res, &sema, ast::Expr::from(it)); },\n+                ast::MethodCallExpr(it) => { get_param_name_hints(&mut res, &sema, ast::Expr::from(it)); },\n+                ast::BindPat(it) => { get_bind_pat_hints(&mut res, &sema, max_inlay_hint_length, it); },\n+                _ => (),\n+            }\n+        }\n     }\n     res\n }\n \n-fn get_inlay_hints(\n+fn get_param_name_hints(\n+    acc: &mut Vec<InlayHint>,\n+    sema: &Semantics<RootDatabase>,\n+    expr: ast::Expr,\n+) -> Option<()> {\n+    let args = match &expr {\n+        ast::Expr::CallExpr(expr) => expr.arg_list()?.args(),\n+        ast::Expr::MethodCallExpr(expr) => expr.arg_list()?.args(),\n+        _ => return None,\n+    };\n+    let args_count = args.clone().count();\n+\n+    let fn_signature = get_fn_signature(sema, &expr)?;\n+    let n_params_to_skip =\n+        if fn_signature.has_self_param && fn_signature.parameter_names.len() > args_count {\n+            1\n+        } else {\n+            0\n+        };\n+    let hints = fn_signature\n+        .parameter_names\n+        .iter()\n+        .skip(n_params_to_skip)\n+        .zip(args)\n+        .filter(|(param, arg)| should_show_param_hint(&fn_signature, param, &arg))\n+        .map(|(param_name, arg)| InlayHint {\n+            range: arg.syntax().text_range(),\n+            kind: InlayKind::ParameterHint,\n+            label: param_name.into(),\n+        });\n+\n+    acc.extend(hints);\n+    Some(())\n+}\n+\n+fn get_bind_pat_hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<RootDatabase>,\n-    node: &SyntaxNode,\n     max_inlay_hint_length: Option<usize>,\n+    pat: ast::BindPat,\n ) -> Option<()> {\n-    let _p = profile(\"get_inlay_hints\");\n-    let db = sema.db;\n-    match_ast! {\n-        match node {\n-            ast::CallExpr(it) => {\n-                get_param_name_hints(acc, sema, ast::Expr::from(it));\n-            },\n-            ast::MethodCallExpr(it) => {\n-                get_param_name_hints(acc, sema, ast::Expr::from(it));\n-            },\n-            ast::BindPat(it) => {\n-                let pat = ast::Pat::from(it.clone());\n-                let ty = sema.type_of_pat(&pat)?;\n-\n-                if should_not_display_type_hint(db, &it, &ty) {\n-                    return None;\n-                }\n+    let ty = sema.type_of_pat(&pat.clone().into())?;\n \n-                acc.push(\n-                    InlayHint {\n-                        range: pat.syntax().text_range(),\n-                        kind: InlayKind::TypeHint,\n-                        label: ty.display_truncated(db, max_inlay_hint_length).to_string().into(),\n-                    }\n-                );\n-            },\n-            _ => (),\n-        }\n-    };\n+    if should_not_display_type_hint(sema.db, &pat, &ty) {\n+        return None;\n+    }\n+\n+    acc.push(InlayHint {\n+        range: pat.syntax().text_range(),\n+        kind: InlayKind::TypeHint,\n+        label: ty.display_truncated(sema.db, max_inlay_hint_length).to_string().into(),\n+    });\n     Some(())\n }\n \n@@ -120,43 +146,6 @@ fn should_not_display_type_hint(db: &RootDatabase, bind_pat: &ast::BindPat, pat_\n     false\n }\n \n-fn get_param_name_hints(\n-    acc: &mut Vec<InlayHint>,\n-    sema: &Semantics<RootDatabase>,\n-    expr: ast::Expr,\n-) -> Option<()> {\n-    let args = match &expr {\n-        ast::Expr::CallExpr(expr) => expr.arg_list()?.args(),\n-        ast::Expr::MethodCallExpr(expr) => expr.arg_list()?.args(),\n-        _ => return None,\n-    }\n-    .into_iter()\n-    // we need args len to determine whether to skip or not the &self parameter\n-    .collect::<Vec<_>>();\n-\n-    let fn_signature = get_fn_signature(sema, &expr)?;\n-    let n_params_to_skip =\n-        if fn_signature.has_self_param && fn_signature.parameter_names.len() > args.len() {\n-            1\n-        } else {\n-            0\n-        };\n-    let hints = fn_signature\n-        .parameter_names\n-        .iter()\n-        .skip(n_params_to_skip)\n-        .zip(args)\n-        .filter(|(param, arg)| should_show_param_hint(&fn_signature, param, &arg))\n-        .map(|(param_name, arg)| InlayHint {\n-            range: arg.syntax().text_range(),\n-            kind: InlayKind::ParameterHint,\n-            label: param_name.into(),\n-        });\n-\n-    acc.extend(hints);\n-    Some(())\n-}\n-\n fn should_show_param_hint(\n     fn_signature: &FunctionSignature,\n     param_name: &str,"}, {"sha": "4a70c712f04ed5e96c0e3c8de6cccb610f32f5e4", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6db2da4993d3956fc7c8ebf152963a132611426a/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6db2da4993d3956fc7c8ebf152963a132611426a/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=6db2da4993d3956fc7c8ebf152963a132611426a", "patch": "@@ -59,7 +59,7 @@ pub trait AstToken {\n }\n \n /// An iterator over `SyntaxNode` children of a particular AST type.\n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n pub struct AstChildren<N> {\n     inner: SyntaxNodeChildren,\n     ph: PhantomData<N>,"}]}