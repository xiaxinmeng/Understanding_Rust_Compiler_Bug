{"sha": "9f2072d45fefb326679197715ebf0e40d64dad2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMjA3MmQ0NWZlZmIzMjY2NzkxOTc3MTVlYmYwZTQwZDY0ZGFkMmU=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-13T12:04:33Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-13T12:04:33Z"}, "message": "Merge #521\n\n521: refresh docs r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "9045b478f87ebf6f2ad4faad307c5a62c437e19d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9045b478f87ebf6f2ad4faad307c5a62c437e19d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f2072d45fefb326679197715ebf0e40d64dad2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f2072d45fefb326679197715ebf0e40d64dad2e", "html_url": "https://github.com/rust-lang/rust/commit/9f2072d45fefb326679197715ebf0e40d64dad2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f2072d45fefb326679197715ebf0e40d64dad2e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "0199572a3d06ff66eeae85a2d2c9762996f0d2d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0199572a3d06ff66eeae85a2d2c9762996f0d2d8", "html_url": "https://github.com/rust-lang/rust/commit/0199572a3d06ff66eeae85a2d2c9762996f0d2d8"}, {"sha": "04657292e047552072bb76cdeba1fab2b4f885b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/04657292e047552072bb76cdeba1fab2b4f885b3", "html_url": "https://github.com/rust-lang/rust/commit/04657292e047552072bb76cdeba1fab2b4f885b3"}], "stats": {"total": 297, "additions": 199, "deletions": 98}, "files": [{"sha": "cbb72c8cfe6ce0b911ab36417300248620312c42", "filename": "README.md", "status": "modified", "additions": 33, "deletions": 43, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/9f2072d45fefb326679197715ebf0e40d64dad2e/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/9f2072d45fefb326679197715ebf0e40d64dad2e/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=9f2072d45fefb326679197715ebf0e40d64dad2e", "patch": "@@ -2,15 +2,13 @@\n \n [![Build Status](https://travis-ci.org/rust-analyzer/rust-analyzer.svg?branch=master)](https://travis-ci.org/rust-analyzer/rust-analyzer)\n \n-Rust Analyzer is an **experimental** modular compiler frontend for the\n-Rust language, which aims to lay a foundation for excellent IDE\n-support.\n+Rust Analyzer is an **experimental** modular compiler frontend for the Rust\n+language, which aims to lay a foundation for excellent IDE support.\n \n-It doesn't implement much of compiler functionality yet, but the\n-white-space preserving Rust parser works, and there are significant\n-chunks of overall architecture (indexing, on-demand & lazy\n-computation, snapshotable world view) in place. Some basic IDE\n-functionality is provided via a language server.\n+It doesn't implement much of compiler functionality yet, but the white-space\n+preserving Rust parser works, and there are significant chunks of overall\n+architecture (indexing, on-demand & lazy computation, snapshotable world view)\n+in place. Some basic IDE functionality is provided via a language server.\n \n Work on the Rust Analyzer is sponsored by\n \n@@ -30,53 +28,45 @@ $ cargo run --package ra_cli parse < crates/ra_syntax/src/lib.rs\n \n # show symbols of a Rust file\n $ cargo run --package ra_cli symbols < crates/ra_syntax/src/lib.rs\n-```\n \n-To try out the language server, see [these\n-instructions](./editors/README.md). Please note that the server is not\n-ready for general use yet. If you are looking for a Rust IDE that\n-works, use [IntelliJ\n-Rust](https://github.com/intellij-rust/intellij-rust) or\n-[RLS](https://github.com/rust-lang-nursery/rls). That being said, the\n-basic stuff works, and rust analyzer is developed in the rust analyzer\n-powered editor.\n+# install the language server\n+$ cargo install --path crates/ra_lsp_server\n+```\n \n+See [these instructions](./editors/README.md) for VS Code setup and the list of\n+features (some of which are VS Code specific).\n \n ## Current Status and Plans\n \n-Rust analyzer aims to fill the same niche as the official [Rust\n-Language Server](https://github.com/rust-lang-nursery/rls), but uses a\n-significantly different architecture. More details can be found [in\n-this\n+Rust analyzer aims to fill the same niche as the official [Rust Language\n+Server](https://github.com/rust-lang-nursery/rls), but uses a significantly\n+different architecture. More details can be found [in this\n thread](https://internals.rust-lang.org/t/2019-strategy-for-rustc-and-the-rls/8361),\n-but the core issue is that RLS works in the \"wait until user stops\n-typing, run the build process, save the results of the analysis\" mode,\n-which arguably is the wrong foundation for IDE.\n+but the core issue is that RLS works in the \"wait until user stops typing, run\n+the build process, save the results of the analysis\" mode, which arguably is the\n+wrong foundation for IDE.\n \n-Rust Analyzer is a hobby project at the moment, there's exactly zero\n+Rust Analyzer is an experimental project at the moment, there's exactly zero\n guarantees that it becomes production-ready one day.\n \n-The near/mid term plan is to work independently of the main rustc\n-compiler and implement at least simplistic versions of name\n-resolution, macro expansion and type inference. The purpose is two\n-fold:\n+The near/mid term plan is to work independently of the main rustc compiler and\n+implement at least simplistic versions of name resolution, macro expansion and\n+type inference. The purpose is two fold:\n \n-* to quickly bootstrap usable and useful language server: solution\n-  that covers 80% of Rust code will be useful for IDEs, and will be\n-  vastly simpler than 100% solution.\n+* to quickly bootstrap usable and useful language server: solution that covers\n+  80% of Rust code will be useful for IDEs, and will be vastly simpler than 100%\n+  solution.\n \n * to understand how the consumer-side of compiler API should look like\n-  (especially it's on-demand aspects). If you have\n-  `get_expression_type` function, you can write a ton of purely-IDE\n-  features on top of it, even if the function is only partially\n-  correct. Plugin in the precise function afterwards should just make\n-  IDE features more reliable.\n-\n-The long term plan is to merge with the mainline rustc compiler,\n-probably around the HIR boundary? That is, use rust analyzer for\n-parsing, macro expansion and related bits of name resolution, but\n-leave the rest (including type inference and trait selection) to the\n-existing rustc.\n+  (especially it's on-demand aspects). If you have `get_expression_type`\n+  function, you can write a ton of purely-IDE features on top of it, even if the\n+  function is only partially correct. Pluging in the precise function afterwards\n+  should just make IDE features more reliable.\n+\n+The long term plan is to merge with the mainline rustc compiler, probably around\n+the HIR boundary? That is, use rust analyzer for parsing, macro expansion and\n+related bits of name resolution, but leave the rest (including type inference\n+and trait selection) to the existing rustc.\n \n ## Getting in touch\n "}, {"sha": "9ed65e631c5a2c663af3b0d43a1b0d7838f380bb", "filename": "editors/README.md", "status": "modified", "additions": 166, "deletions": 55, "changes": 221, "blob_url": "https://github.com/rust-lang/rust/blob/9f2072d45fefb326679197715ebf0e40d64dad2e/editors%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/9f2072d45fefb326679197715ebf0e40d64dad2e/editors%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2FREADME.md?ref=9f2072d45fefb326679197715ebf0e40d64dad2e", "patch": "@@ -4,72 +4,96 @@ To install experimental VS Code plugin:\n $ git clone https://github.com/rust-analyzer/rust-analyzer.git --depth 1\n $ cd rust-analyzer\n $ cargo install-code\n+\n+# for stdlib support\n+$ rustup component add rust-src\n ```\n \n-This will run `cargo install --packge ra_lsp_server` to install the\n-server binary into `~/.cargo/bin`, and then will build and install\n-plugin from `editors/code`. See\n-[this](https://github.com/matklad/rust-analyzer/blob/cc76b0d31d8ba013c499dd3a4ca69b37004795e6/crates/tools/src/main.rs#L192)\n-for details\n+This will run `cargo install --packge ra_lsp_server` to install the server\n+binary into `~/.cargo/bin`, and then will build and install plugin from\n+`editors/code`. See\n+[this](https://github.com/rust-analyzer/rust-analyzer/blob/0199572a3d06ff66eeae85a2d2c9762996f0d2d8/crates/tools/src/main.rs#L150)\n+for details. The installation is expected to *just work*, if it doesn't, report\n+bugs!\n \n It's better to remove existing Rust plugins to avoid interference.\n \n-### Features:\n-\n-* syntax highlighting (LSP does not have API for it, so impl is hacky\n-  and sometimes fall-backs to the horrible built-in highlighting)\n-\n-* **Go to symbol in workspace** (`ctrl+t`)\n-  - `#Foo` searches for `Foo` type in the current workspace\n-  - `#foo#` searches for `foo` function in the current workspace\n-  - `#Foo*` searches for `Foo` type among dependencies, excluding `stdlib`\n-  - Sorry for a weired UI, neither LSP, not VSCode have any sane API for filtering! :)\n-\n-* **Go to symbol in file** (`alt+shift+o`)\n-\n-* **Go to definition** (\"correct\" for `mod foo;` decls, approximate for other things).\n-\n-* commands (`ctrl+shift+p` or keybindings)\n-  - **Show Rust Syntax Tree** (use it to verify that plugin works)\n-  - **Rust Extend Selection**. Extends the current selection to the\n-    encompassing syntactic construct (expression, statement, item,\n-    module, etc). It works with multiple cursors. Do bind this command\n-    to a key, its super-useful!\n-  - **Rust Matching Brace**. If the cursor is on any brace\n-    (`<>(){}[]`) which is a part of a brace-pair, moves cursor to the\n-    matching brace.\n-  - **Rust Parent Module**. Navigate to the parent module of the current module\n-  - **Rust Join Lines**. Join selected lines into one, smartly fixing\n-    up whitespace and trailing commas.\n-  - **Run test at caret**. When cursor is inside a function marked\n-    `#[test]`, this action runs this specific test. If the cursor is\n-    outside of the test function, this re-runs the last test. Do bind\n-    this to a shortcut!\n-  - **Format document**. Formats the current file with rustfmt.\n-    Rustfmt must be installed separately with `rustup component add rustfmt`.\n-\n-* Typing assists\n-  - typing `let =` tries to smartly add `;` if `=` is followed by an existing expression.\n-  - Enter inside comments continues comment (`<|>` signifies cursor position):\n+## Rust Analyzer Specifc Features\n \n-```\n-/// Docs<|>\n-fn foo() {}\n-```\n+These features are implemented as extensions to the langauge server protocol.\n+They are more experimental in nature and work only with VS Code.\n \n-```\n-/// Docs\n-/// <|>\n-fn foo() {}\n-```\n+### Syntax highlighting\n+\n+It overrides built-in highlighting, and works only with a specific theme\n+(zenburn). `ra-lsp.highlightingOn` setting can be used to disable it.\n+\n+### Go to symbol in workspace <kbd>ctrl+t</kbd>\n+\n+It mostly works on top of the built-in LSP functionality, however `#` and `*`\n+symbols can be used to narrow down the search. Specifically,\n+\n+- `#Foo` searches for `Foo` type in the current workspace\n+- `#foo#` searches for `foo` function in the current workspace\n+- `#Foo*` searches for `Foo` type among dependencies, excluding `stdlib`\n+- `#foo#*` seaches for `foo` function among dependencies.\n+\n+That is, `#` switches from \"types\" to all symbols, `*` switches from the current\n+workspace to dependencies.\n+\n+### Commands <kbd>ctrl+shift+p</kbd>\n+\n+#### Show Rust Syntax Tree\n+\n+Shows the parse tree of the current file. It exists mostly for debugging\n+rust-analyzer itself.\n+\n+#### Extend Selection\n+\n+Extends the current selection to the encompassing syntactic construct\n+(expression, statement, item, module, etc). It works with multiple cursors. Do\n+bind this command to a key, its super-useful! Expected to be upstreamed to LSP soonish:\n+https://github.com/Microsoft/language-server-protocol/issues/613\n+\n+#### Matching Brace\n+\n+If the cursor is on any brace (`<>(){}[]`) which is a part of a brace-pair,\n+moves cursor to the matching brace. It uses the actual parser to determine\n+braces, so it won't confuse generics with comparisons.\n \n-* code actions (use `ctrl+.` to activate).\n+#### Parent Module\n \n+Navigates to the parent module of the current module.\n+\n+#### Join Lines\n+\n+Join selected lines into one, smartly fixing up whitespace and trailing commas.\n+\n+#### Run\n+\n+Shows popup suggesting to run a test/benchmark/binary **at the current cursor\n+location**. Super useful for repeatedly running just a single test. Do bind this\n+to a shortcut!\n+\n+\n+### On Typing Assists\n+\n+Some features trigger on typing certain characters:\n+\n+- typing `let =` tries to smartly add `;` if `=` is followed by an existing expression.\n+- Enter inside comments automatically inserts `///`\n+- typing `.` in a chain method call auto-indents\n+\n+\n+### Code Actions (Assists)\n+\n+These are triggered in a particular context via lightbulb. We use custom code on\n+the VS Code side to be able to position cursor.\n \n \n - Flip `,`\n \n-```\n+```rust\n // before:\n fn foo(x: usize,<|> dim: (usize, usize))\n // after:\n@@ -78,7 +102,7 @@ fn foo(dim: (usize, usize), x: usize)\n \n - Add `#[derive]`\n \n-```\n+```rust\n // before:\n struct Foo {\n     <|>x: i32\n@@ -92,7 +116,7 @@ struct Foo {\n \n - Add `impl`\n \n-```\n+```rust\n // before:\n struct Foo<'a, T: Debug> {\n     <|>t: T\n@@ -106,3 +130,90 @@ impl<'a, T: Debug> Foo<'a, T> {\n     <|>\n }\n ```\n+\n+- Change visibility\n+\n+```rust\n+// before:\n+fn<|> foo() {}\n+\n+// after\n+pub(crate) fn foo() {}\n+```\n+\n+- Introduce variable:\n+\n+```rust\n+// before:\n+fn foo() {\n+    foo(<|>1 + 1<|>);\n+}\n+\n+// after:\n+fn foo() {\n+    let var_name = 1 + 1;\n+    foo(var_name);\n+}\n+```\n+\n+- Replace if-let with match:\n+\n+```rust\n+// before:\n+impl VariantData {\n+    pub fn is_struct(&self) -> bool {\n+        if <|>let VariantData::Struct(..) = *self {\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+}\n+\n+// after:\n+impl VariantData {\n+    pub fn is_struct(&self) -> bool {\n+        <|>match *self {\n+            VariantData::Struct(..) => true,\n+            _ => false,\n+        }\n+    }\n+}\n+```\n+\n+- Split import\n+\n+```rust\n+// before:\n+use algo:<|>:visitor::{Visitor, visit};\n+//after:\n+use algo::{<|>visitor::{Visitor, visit}};\n+```\n+\n+## LSP features\n+\n+* **Go to definition**: works correctly for local variables and some paths,\n+  falls back to heuristic name matching for other things for the time being.\n+\n+* **Completion**: completes paths, including dependencies and standard library.\n+  Does not handle glob imports and macros. Completes fields and inherent methods\n+\n+* **Outline** <kbd>alt+shift+o</kbd>\n+\n+* **Signature Info**\n+\n+* **Format document**. Formats the current file with rustfmt. Rustfmt must be\n+  installed separately with `rustup component add rustfmt`.\n+\n+* **Hover** shows types of expressions and docstings\n+\n+* **Rename** works for local variables\n+\n+* **Code Lens** for running tests\n+\n+* **Folding**\n+\n+* **Diagnostics**\n+  - missing module for `mod foo;` with a fix to create `foo.rs`.\n+  - struct field shorthand\n+  - unnessary braces in use item"}]}