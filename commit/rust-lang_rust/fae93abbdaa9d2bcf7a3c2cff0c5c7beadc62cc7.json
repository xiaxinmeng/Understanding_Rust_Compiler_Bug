{"sha": "fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZTkzYWJiZGFhOWQyYmNmN2EzYzJjZmYwYzVjN2JlYWRjNjJjYzc=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-01T21:41:08Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-01T21:41:08Z"}, "message": "Support struct-like layouts for fn args", "tree": {"sha": "d8d9ff511c50fddd1ca35d23faca0abc722913b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8d9ff511c50fddd1ca35d23faca0abc722913b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7", "html_url": "https://github.com/rust-lang/rust/commit/fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f81485d9d6a93baf86affbcc60d0ea84bedc3556", "url": "https://api.github.com/repos/rust-lang/rust/commits/f81485d9d6a93baf86affbcc60d0ea84bedc3556", "html_url": "https://github.com/rust-lang/rust/commit/f81485d9d6a93baf86affbcc60d0ea84bedc3556"}], "stats": {"total": 154, "additions": 138, "deletions": 16}, "files": [{"sha": "1b4d79ab6ee84e423bc6e56a877162237bc0037c", "filename": "src/config.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7", "patch": "@@ -90,6 +90,7 @@ create_config! {\n     fn_return_indent: ReturnIndent,\n     fn_args_paren_newline: bool,\n     fn_args_density: Density,\n+    fn_args_layout: StructLitStyle,\n     fn_arg_indent: BlockIndentStyle,\n     where_density: Density, // Should we at least try to put the where clause on the same line as\n                             // the rest of the function decl?\n@@ -123,6 +124,7 @@ impl Default for Config {\n             fn_return_indent: ReturnIndent::WithArgs,\n             fn_args_paren_newline: true,\n             fn_args_density: Density::Tall,\n+            fn_args_layout: StructLitStyle::Visual,\n             fn_arg_indent: BlockIndentStyle::Visual,\n             where_density: Density::Tall,\n             where_indent: BlockIndentStyle::Tabbed,\n@@ -131,7 +133,7 @@ impl Default for Config {\n             generics_indent: BlockIndentStyle::Visual,\n             struct_trailing_comma: SeparatorTactic::Vertical,\n             struct_lit_trailing_comma: SeparatorTactic::Vertical,\n-            struct_lit_style: StructLitStyle::BlockIndent,\n+            struct_lit_style: StructLitStyle::Block,\n             enum_trailing_comma: true,\n             report_todo: ReportTactic::Always,\n             report_fixme: ReportTactic::Never,"}, {"sha": "19b3693d94be1864ffcccec8f1d02ce2ac24205c", "filename": "src/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7", "patch": "@@ -940,10 +940,10 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n     // Foo { a: Foo } - indent is +3, width is -5.\n     let h_budget = try_opt!(width.checked_sub(path_str.len() + 5));\n     let (indent, v_budget) = match context.config.struct_lit_style {\n-        StructLitStyle::VisualIndent => {\n+        StructLitStyle::Visual => {\n             (offset + path_str.len() + 3, h_budget)\n         }\n-        StructLitStyle::BlockIndent => {\n+        StructLitStyle::Block => {\n             // If we are all on one line, then we'll ignore the indent, and we\n             // have a smaller budget.\n             let indent = context.block_indent + context.config.tab_spaces;\n@@ -1012,15 +1012,15 @@ fn rewrite_struct_lit<'a>(context: &RewriteContext,\n     let fields_str = write_list(&items.collect::<Vec<_>>(), &fmt);\n \n     match context.config.struct_lit_style {\n-        StructLitStyle::BlockIndent if fields_str.contains('\\n') => {\n+        StructLitStyle::Block if fields_str.contains('\\n') => {\n             let inner_indent = make_indent(context.block_indent + context.config.tab_spaces);\n             let outer_indent = make_indent(context.block_indent);\n             Some(format!(\"{} {{\\n{}{}\\n{}}}\", path_str, inner_indent, fields_str, outer_indent))\n         }\n         _ => Some(format!(\"{} {{ {} }}\", path_str, fields_str)),\n     }\n \n-    // FIXME if context.config.struct_lit_style == VisualIndent, but we run out\n+    // FIXME if context.config.struct_lit_style == Visual, but we run out\n     // of space, we should fall back to BlockIndent.\n }\n "}, {"sha": "4d84a1420452cad37afe6e98a697c47bafc34457", "filename": "src/items.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7", "patch": "@@ -10,7 +10,7 @@\n \n // Formatting top-level items - functions, structs, enums, traits, impls.\n \n-use {ReturnIndent, BraceStyle};\n+use {ReturnIndent, BraceStyle, StructLitStyle};\n use utils::{format_mutability, format_visibility, make_indent, contains_skip, span_after,\n             end_typaram};\n use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic, ListTactic};\n@@ -225,6 +225,10 @@ impl<'a> FmtVisitor<'a> {\n                 result.push_str(\"(\\n\");\n                 result.push_str(&make_indent(arg_indent));\n             }\n+        } else if self.config.fn_args_layout == StructLitStyle::Block {\n+            arg_indent = indent + self.config.tab_spaces;\n+            result.push_str(\"(\\n\");\n+            result.push_str(&make_indent(arg_indent));\n         } else {\n             result.push('(');\n         }\n@@ -245,14 +249,20 @@ impl<'a> FmtVisitor<'a> {\n                                            indent,\n                                            arg_indent,\n                                            args_span));\n+        if self.config.fn_args_layout == StructLitStyle::Block {\n+            result.push('\\n');\n+        }\n         result.push(')');\n \n         // Return type.\n         if !ret_str.is_empty() {\n             // If we've already gone multi-line, or the return type would push\n             // over the max width, then put the return type on a new line.\n-            if result.contains(\"\\n\") ||\n-               result.len() + indent + ret_str.len() > self.config.max_width {\n+            // Unless we are formatting args like a block, in which case there\n+            // should always be room for the return type.\n+            if (result.contains(\"\\n\") ||\n+                result.len() + indent + ret_str.len() > self.config.max_width) &&\n+               self.config.fn_args_layout != StructLitStyle::Block {\n                 let indent = match self.config.fn_return_indent {\n                     ReturnIndent::WithWhereClause => indent + 4,\n                     // TODO we might want to check that using the arg indent doesn't\n@@ -285,8 +295,11 @@ impl<'a> FmtVisitor<'a> {\n             }\n         }\n \n-        let where_density = if self.config.where_density == Density::Compressed &&\n-                               !result.contains('\\n') {\n+        let where_density = if (self.config.where_density == Density::Compressed &&\n+                                (!result.contains('\\n') ||\n+                                 self.config.fn_args_layout == StructLitStyle::Block)) ||\n+                               (self.config.fn_args_layout == StructLitStyle::Block &&\n+                                ret_str.is_empty()) {\n             Density::Compressed\n         } else {\n             Density::Tall"}, {"sha": "83c0c5ae1b7683b0da1547741d11849a79960d16", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7", "patch": "@@ -133,13 +133,13 @@ impl_enum_decodable!(ReturnIndent, WithArgs, WithWhereClause);\n pub enum StructLitStyle {\n     // First line on the same line as the opening brace, all lines aligned with\n     // the first line.\n-    VisualIndent,\n+    Visual,\n     // First line is on a new line and all lines align with block indent.\n-    BlockIndent,\n+    Block,\n     // FIXME Maybe we should also have an option to align types.\n }\n \n-impl_enum_decodable!(StructLitStyle, VisualIndent, BlockIndent);\n+impl_enum_decodable!(StructLitStyle, Visual, Block);\n \n enum ErrorKind {\n     // Line has exceeded character limit"}, {"sha": "c5122b760a0b29097239da4936979412c7e9da27", "filename": "tests/config/small_tabs.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7/tests%2Fconfig%2Fsmall_tabs.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7/tests%2Fconfig%2Fsmall_tabs.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fsmall_tabs.toml?ref=fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7", "patch": "@@ -7,6 +7,7 @@ fn_brace_style = \"SameLineWhere\"\n fn_return_indent = \"WithArgs\"\n fn_args_paren_newline = true\n fn_args_density = \"Tall\"\n+fn_args_layout = \"Visual\"\n fn_arg_indent = \"Visual\"\n where_density = \"Tall\"\n where_indent = \"Tabbed\"\n@@ -15,7 +16,7 @@ where_pred_indent = \"Visual\"\n generics_indent = \"Visual\"\n struct_trailing_comma = \"Vertical\"\n struct_lit_trailing_comma = \"Vertical\"\n-struct_lit_style = \"BlockIndent\"\n+struct_lit_style = \"Block\"\n enum_trailing_comma = true\n report_todo = \"Always\"\n report_fixme = \"Never\""}, {"sha": "1042fa5bd8800fa9f60fe86494e25798ccb5e66a", "filename": "tests/source/fn-custom-6.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7/tests%2Fsource%2Ffn-custom-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7/tests%2Fsource%2Ffn-custom-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffn-custom-6.rs?ref=fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7", "patch": "@@ -0,0 +1,36 @@\n+// rustfmt-fn_args_layout: Block\n+// rustfmt-where_indent: Inherit\n+// rustfmt-fn_brace_style: PreferSameLine\n+// Test different indents.\n+\n+fn foo(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb) {\n+    foo();\n+}\n+\n+fn bar(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb, c: Cccccccccccccccccc, d: Dddddddddddddddd, e: Eeeeeeeeeeeeeee) {\n+    bar();\n+}\n+\n+fn foo(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb) -> String {\n+    foo();\n+}\n+\n+fn bar(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb, c: Cccccccccccccccccc, d: Dddddddddddddddd, e: Eeeeeeeeeeeeeee) -> String {\n+    bar();\n+}\n+\n+fn foo(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb) where T: UUUUUUUUUUU {\n+    foo();\n+}\n+\n+fn bar(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb, c: Cccccccccccccccccc, d: Dddddddddddddddd, e: Eeeeeeeeeeeeeee) where T: UUUUUUUUUUU {\n+    bar();\n+}\n+\n+fn foo(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb) -> String where T: UUUUUUUUUUU {\n+    foo();\n+}\n+\n+fn bar(a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb, c: Cccccccccccccccccc, d: Dddddddddddddddd, e: Eeeeeeeeeeeeeee) -> String where T: UUUUUUUUUUU {\n+    bar();\n+}"}, {"sha": "180a1229faa58ec60e0b38e7512f0f4d421202b6", "filename": "tests/source/struct_lits_visual.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7/tests%2Fsource%2Fstruct_lits_visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7/tests%2Fsource%2Fstruct_lits_visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstruct_lits_visual.rs?ref=fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-struct_lit_style: VisualIndent\n+// rustfmt-struct_lit_style: Visual\n \n // Struct literal expressions.\n "}, {"sha": "bea50c6a3cec2585b3be331c5f9b736d37be8fb9", "filename": "tests/target/fn-custom-6.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7/tests%2Ftarget%2Ffn-custom-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7/tests%2Ftarget%2Ffn-custom-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-custom-6.rs?ref=fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7", "patch": "@@ -0,0 +1,70 @@\n+// rustfmt-fn_args_layout: Block\n+// rustfmt-where_indent: Inherit\n+// rustfmt-fn_brace_style: PreferSameLine\n+// Test different indents.\n+\n+fn foo(\n+    a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb\n+) {\n+    foo();\n+}\n+\n+fn bar(\n+    a: Aaaaaaaaaaaaaa,\n+    b: Bbbbbbbbbbbbbb,\n+    c: Cccccccccccccccccc,\n+    d: Dddddddddddddddd,\n+    e: Eeeeeeeeeeeeeee\n+) {\n+    bar();\n+}\n+\n+fn foo(\n+    a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb\n+) -> String {\n+    foo();\n+}\n+\n+fn bar(\n+    a: Aaaaaaaaaaaaaa,\n+    b: Bbbbbbbbbbbbbb,\n+    c: Cccccccccccccccccc,\n+    d: Dddddddddddddddd,\n+    e: Eeeeeeeeeeeeeee\n+) -> String {\n+    bar();\n+}\n+\n+fn foo(\n+    a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb\n+) where T: UUUUUUUUUUU {\n+    foo();\n+}\n+\n+fn bar(\n+    a: Aaaaaaaaaaaaaa,\n+    b: Bbbbbbbbbbbbbb,\n+    c: Cccccccccccccccccc,\n+    d: Dddddddddddddddd,\n+    e: Eeeeeeeeeeeeeee\n+) where T: UUUUUUUUUUU {\n+    bar();\n+}\n+\n+fn foo(\n+    a: Aaaaaaaaaaaaaa, b: Bbbbbbbbbbbbbb\n+) -> String\n+where T: UUUUUUUUUUU {\n+    foo();\n+}\n+\n+fn bar(\n+    a: Aaaaaaaaaaaaaa,\n+    b: Bbbbbbbbbbbbbb,\n+    c: Cccccccccccccccccc,\n+    d: Dddddddddddddddd,\n+    e: Eeeeeeeeeeeeeee\n+) -> String\n+where T: UUUUUUUUUUU {\n+    bar();\n+}"}, {"sha": "4274c9167773c80e9271787ac059e83b2c5deb93", "filename": "tests/target/struct_lits_visual.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7/tests%2Ftarget%2Fstruct_lits_visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7/tests%2Ftarget%2Fstruct_lits_visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct_lits_visual.rs?ref=fae93abbdaa9d2bcf7a3c2cff0c5c7beadc62cc7", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-struct_lit_style: VisualIndent\n+// rustfmt-struct_lit_style: Visual\n \n // Struct literal expressions.\n "}]}