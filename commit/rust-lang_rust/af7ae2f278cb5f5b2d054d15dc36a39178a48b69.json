{"sha": "af7ae2f278cb5f5b2d054d15dc36a39178a48b69", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmN2FlMmYyNzhjYjVmNWIyZDA1NGQxNWRjMzZhMzkxNzhhNDhiNjk=", "commit": {"author": {"name": "John Renner", "email": "john@jrenner.net", "date": "2018-08-01T18:28:08Z"}, "committer": {"name": "John Renner", "email": "john@jrenner.net", "date": "2018-08-01T18:28:08Z"}, "message": "Allow test imports to go unused", "tree": {"sha": "eebdf8587f54f221c17811fa921065eefa506318", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eebdf8587f54f221c17811fa921065eefa506318"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af7ae2f278cb5f5b2d054d15dc36a39178a48b69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af7ae2f278cb5f5b2d054d15dc36a39178a48b69", "html_url": "https://github.com/rust-lang/rust/commit/af7ae2f278cb5f5b2d054d15dc36a39178a48b69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af7ae2f278cb5f5b2d054d15dc36a39178a48b69/comments", "author": {"login": "djrenren", "id": 634666, "node_id": "MDQ6VXNlcjYzNDY2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/634666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djrenren", "html_url": "https://github.com/djrenren", "followers_url": "https://api.github.com/users/djrenren/followers", "following_url": "https://api.github.com/users/djrenren/following{/other_user}", "gists_url": "https://api.github.com/users/djrenren/gists{/gist_id}", "starred_url": "https://api.github.com/users/djrenren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djrenren/subscriptions", "organizations_url": "https://api.github.com/users/djrenren/orgs", "repos_url": "https://api.github.com/users/djrenren/repos", "events_url": "https://api.github.com/users/djrenren/events{/privacy}", "received_events_url": "https://api.github.com/users/djrenren/received_events", "type": "User", "site_admin": false}, "committer": {"login": "djrenren", "id": 634666, "node_id": "MDQ6VXNlcjYzNDY2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/634666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djrenren", "html_url": "https://github.com/djrenren", "followers_url": "https://api.github.com/users/djrenren/followers", "following_url": "https://api.github.com/users/djrenren/following{/other_user}", "gists_url": "https://api.github.com/users/djrenren/gists{/gist_id}", "starred_url": "https://api.github.com/users/djrenren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djrenren/subscriptions", "organizations_url": "https://api.github.com/users/djrenren/orgs", "repos_url": "https://api.github.com/users/djrenren/repos", "events_url": "https://api.github.com/users/djrenren/events{/privacy}", "received_events_url": "https://api.github.com/users/djrenren/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "549f0fd9f7740954cb14367d735db724669c8f79", "url": "https://api.github.com/repos/rust-lang/rust/commits/549f0fd9f7740954cb14367d735db724669c8f79", "html_url": "https://github.com/rust-lang/rust/commit/549f0fd9f7740954cb14367d735db724669c8f79"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "590d8cd6c99f4ece019ddc934a918dffd44f95dd", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/af7ae2f278cb5f5b2d054d15dc36a39178a48b69/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af7ae2f278cb5f5b2d054d15dc36a39178a48b69/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=af7ae2f278cb5f5b2d054d15dc36a39178a48b69", "patch": "@@ -1376,6 +1376,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n             // #[test] fn foo() {}\n             // becomes:\n             // #[test] pub fn foo_gensym(){}\n+            // #[allow(dead_code)]\n             // use foo_gensym as foo;\n             ast::ItemKind::Fn(..) if self.cx.ecfg.should_test => {\n                 if self.tests_nameable && item.attrs.iter().any(|attr| is_test_or_bench(attr)) {\n@@ -1390,13 +1391,26 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n                     });\n \n                     // Use the gensymed name under the item's original visibility\n-                    let use_item = self.cx.item_use_simple_(\n+                    let mut use_item = self.cx.item_use_simple_(\n                         item.ident.span,\n                         orig_vis,\n                         Some(orig_ident),\n                         self.cx.path(item.ident.span,\n                             vec![keywords::SelfValue.ident(), item.ident]));\n \n+                    // #[allow(dead_code)] because the test function probably isn't being referenced\n+                    use_item = use_item.map(|mut ui| {\n+                        ui.attrs.push(\n+                            self.cx.attribute(DUMMY_SP, attr::mk_list_item(DUMMY_SP,\n+                                Ident::from_str(\"allow\"), vec![\n+                                    attr::mk_nested_word_item(Ident::from_str(\"dead_code\"))\n+                                ]\n+                            ))\n+                        );\n+\n+                        ui\n+                    });\n+\n                     SmallVector::many(\n                         self.fold_unnameable(item).into_iter()\n                             .chain(self.fold_unnameable(use_item)))"}]}