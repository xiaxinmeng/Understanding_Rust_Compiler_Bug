{"sha": "a08eda4b6318af0df153322d10d9b907b13d0cdc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwOGVkYTRiNjMxOGFmMGRmMTUzMzIyZDEwZDliOTA3YjEzZDBjZGM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-25T23:14:33Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-25T23:15:20Z"}, "message": "test: Residual de-muting of the test suite. rs=demuting", "tree": {"sha": "487ed73911932b257735a158a4c0cea557187413", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/487ed73911932b257735a158a4c0cea557187413"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a08eda4b6318af0df153322d10d9b907b13d0cdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a08eda4b6318af0df153322d10d9b907b13d0cdc", "html_url": "https://github.com/rust-lang/rust/commit/a08eda4b6318af0df153322d10d9b907b13d0cdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a08eda4b6318af0df153322d10d9b907b13d0cdc/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b9b32839e6693d6009528658d282f69777d972e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b9b32839e6693d6009528658d282f69777d972e", "html_url": "https://github.com/rust-lang/rust/commit/4b9b32839e6693d6009528658d282f69777d972e"}], "stats": {"total": 360, "additions": 174, "deletions": 186}, "files": [{"sha": "e27fc68df9cc020559f8c4ca9bfbf3c4466df829", "filename": "src/test/auxiliary/cci_class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Fauxiliary%2Fcci_class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Fauxiliary%2Fcci_class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class.rs?ref=a08eda4b6318af0df153322d10d9b907b13d0cdc", "patch": "@@ -10,7 +10,7 @@\n \n pub mod kitties {\n     pub struct cat {\n-      priv mut meows : uint,\n+      priv meows : uint,\n \n       how_hungry : int,\n     }"}, {"sha": "b955ed9c2a7f07cc49317ae202d6a5b041c2c271", "filename": "src/test/auxiliary/cci_class_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_2.rs?ref=a08eda4b6318af0df153322d10d9b907b13d0cdc", "patch": "@@ -10,7 +10,7 @@\n \n pub mod kitties {\n     pub struct cat {\n-      priv mut meows : uint,\n+      priv meows : uint,\n \n       how_hungry : int,\n "}, {"sha": "a516f5398df624008b9972cae9f1d6ea0ad96ac0", "filename": "src/test/auxiliary/cci_class_3.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs?ref=a08eda4b6318af0df153322d10d9b907b13d0cdc", "patch": "@@ -10,14 +10,14 @@\n \n pub mod kitties {\n     pub struct cat {\n-        priv mut meows : uint,\n+        priv meows : uint,\n \n         how_hungry : int,\n     }\n \n     pub impl cat {\n-        fn speak() { self.meows += 1u; }\n-        fn meow_count() -> uint { self.meows }\n+        fn speak(&mut self) { self.meows += 1u; }\n+        fn meow_count(&mut self) -> uint { self.meows }\n     }\n \n     pub fn cat(in_x : uint, in_y : int) -> cat {"}, {"sha": "68143b32741c8661c8486d348e3d599e1e282e94", "filename": "src/test/auxiliary/cci_class_4.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs?ref=a08eda4b6318af0df153322d10d9b907b13d0cdc", "patch": "@@ -10,30 +10,29 @@\n \n pub mod kitties {\n     pub struct cat {\n-        priv mut meows : uint,\n+        priv meows : uint,\n \n-        mut how_hungry : int,\n+        how_hungry : int,\n         name : ~str,\n     }\n \n     pub impl cat {\n-      fn speak() { self.meow(); }\n+        fn speak(&mut self) { self.meow(); }\n \n-      fn eat() -> bool {\n-        if self.how_hungry > 0 {\n-            error!(\"OM NOM NOM\");\n-            self.how_hungry -= 2;\n-            return true;\n-        }\n-        else {\n-            error!(\"Not hungry!\");\n-            return false;\n+        fn eat(&mut self) -> bool {\n+            if self.how_hungry > 0 {\n+                error!(\"OM NOM NOM\");\n+                self.how_hungry -= 2;\n+                return true;\n+            } else {\n+                error!(\"Not hungry!\");\n+                return false;\n+            }\n         }\n-      }\n     }\n \n     pub impl cat {\n-        fn meow() {\n+        fn meow(&mut self) {\n             error!(\"Meow\");\n             self.meows += 1u;\n             if self.meows % 5u == 0u {"}, {"sha": "ceccea409c44a800694be1c400cf5acc37901978", "filename": "src/test/auxiliary/cci_class_6.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs?ref=a08eda4b6318af0df153322d10d9b907b13d0cdc", "patch": "@@ -10,17 +10,17 @@\n \n pub mod kitties {\n     pub struct cat<U> {\n-        priv mut info : ~[U],\n-        priv mut meows : uint,\n+        priv info : ~[U],\n+        priv meows : uint,\n \n         how_hungry : int,\n     }\n \n     pub impl<U> cat<U> {\n-        fn speak<T>(stuff: ~[T]) {\n+        fn speak<T>(&mut self, stuff: ~[T]) {\n             self.meows += stuff.len();\n         }\n-        fn meow_count() -> uint { self.meows }\n+        fn meow_count(&mut self) -> uint { self.meows }\n     }\n \n     pub fn cat<U>(in_x : uint, in_y : int, -in_info: ~[U]) -> cat<U> {"}, {"sha": "a2896dad814c2e46162d89cba398ff8caadec2a8", "filename": "src/test/auxiliary/cci_class_cast.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs?ref=a08eda4b6318af0df153322d10d9b907b13d0cdc", "patch": "@@ -12,8 +12,8 @@ use core::to_str::*;\n \n pub mod kitty {\n     pub struct cat {\n-      priv mut meows : uint,\n-      mut how_hungry : int,\n+      priv meows : uint,\n+      how_hungry : int,\n       name : ~str,\n     }\n \n@@ -22,7 +22,7 @@ pub mod kitty {\n     }\n \n     priv impl cat {\n-        fn meow() {\n+        fn meow(&mut self) {\n             error!(\"Meow\");\n             self.meows += 1u;\n             if self.meows % 5u == 0u {\n@@ -33,9 +33,9 @@ pub mod kitty {\n     }\n \n     pub impl cat {\n-        fn speak() { self.meow(); }\n+        fn speak(&mut self) { self.meow(); }\n \n-        fn eat() -> bool {\n+        fn eat(&mut self) -> bool {\n             if self.how_hungry > 0 {\n                 error!(\"OM NOM NOM\");\n                 self.how_hungry -= 2;"}, {"sha": "7ca3d7c4ac99042a25921536fb1ef64b48006106", "filename": "src/test/auxiliary/cci_class_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Fauxiliary%2Fcci_class_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Fauxiliary%2Fcci_class_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_trait.rs?ref=a08eda4b6318af0df153322d10d9b907b13d0cdc", "patch": "@@ -10,6 +10,6 @@\n \n pub mod animals {\n     pub trait noisy {\n-        fn speak();\n+        fn speak(&mut self);\n     }\n }"}, {"sha": "157ea586c2c4e48b0e506c7109dcabcc39467517", "filename": "src/test/run-pass/class-cast-to-trait.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs?ref=a08eda4b6318af0df153322d10d9b907b13d0cdc", "patch": "@@ -9,21 +9,21 @@\n // except according to those terms.\n \n trait noisy {\n-  fn speak();\n+  fn speak(&mut self);\n }\n \n struct cat {\n-  priv mut meows : uint,\n-  mut how_hungry : int,\n-  name : ~str,\n+  priv meows: uint,\n+  how_hungry: int,\n+  name: ~str,\n }\n \n impl noisy for cat {\n-  fn speak() { self.meow(); }\n+  fn speak(&mut self) { self.meow(); }\n }\n \n impl cat {\n-  fn eat() -> bool {\n+  fn eat(&mut self) -> bool {\n     if self.how_hungry > 0 {\n         error!(\"OM NOM NOM\");\n         self.how_hungry -= 2;\n@@ -37,7 +37,7 @@ impl cat {\n }\n \n priv impl cat {\n-    fn meow() {\n+    fn meow(&mut self) {\n       error!(\"Meow\");\n       self.meows += 1u;\n       if self.meows % 5u == 0u {\n@@ -56,6 +56,6 @@ fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n \n \n pub fn main() {\n-  let nyan : noisy  = cat(0u, 2, ~\"nyan\") as noisy;\n+  let mut nyan: noisy = cat(0u, 2, ~\"nyan\") as noisy;\n   nyan.speak();\n }"}, {"sha": "40f728d40bfe3b3f74755bbc410450f165d1d8a8", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=a08eda4b6318af0df153322d10d9b907b13d0cdc", "patch": "@@ -28,9 +28,9 @@ impl cmp::Eq for cat_type {\n // ok: T should be in scope when resolving the trait ref for map\n struct cat<T> {\n     // Yes, you can have negative meows\n-    priv mut meows : int,\n+    priv meows : int,\n \n-    mut how_hungry : int,\n+    how_hungry : int,\n     name : T,\n }\n \n@@ -95,11 +95,10 @@ impl<T> Map<int, T> for cat<T> {\n     }\n \n     fn remove(&mut self, k: &int) -> bool {\n-        match self.find(k) {\n-          Some(_) => {\n-              self.meows -= *k; true\n-          }\n-          None => { false }\n+        if self.find(k).is_some() {\n+            self.meows -= *k; true\n+        } else {\n+            false\n         }\n     }\n }"}, {"sha": "aa7bb738bf54f31a5f42ce1c52b7df3e82acd29a", "filename": "src/test/run-pass/class-implement-trait-cross-crate.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs?ref=a08eda4b6318af0df153322d10d9b907b13d0cdc", "patch": "@@ -14,39 +14,37 @@ extern mod cci_class_trait;\n use cci_class_trait::animals::*;\n \n struct cat {\n-  priv mut meows : uint,\n+  priv meows: uint,\n \n-  mut how_hungry : int,\n+  how_hungry : int,\n   name : ~str,\n }\n \n impl cat {\n-  fn eat() -> bool {\n-    if self.how_hungry > 0 {\n-        error!(\"OM NOM NOM\");\n-        self.how_hungry -= 2;\n-        return true;\n+    fn eat(&mut self) -> bool {\n+        if self.how_hungry > 0 {\n+            error!(\"OM NOM NOM\");\n+            self.how_hungry -= 2;\n+            return true;\n+        }\n+        else {\n+            error!(\"Not hungry!\");\n+            return false;\n+        }\n     }\n-    else {\n-        error!(\"Not hungry!\");\n-        return false;\n-    }\n-  }\n }\n \n impl noisy for cat {\n-\n-  fn speak() { self.meow(); }\n-\n+    fn speak(&mut self) { self.meow(); }\n }\n \n priv impl cat {\n-    fn meow() {\n-      error!(\"Meow\");\n-      self.meows += 1u;\n-      if self.meows % 5u == 0u {\n-          self.how_hungry += 1;\n-      }\n+    fn meow(&mut self) {\n+        error!(\"Meow\");\n+        self.meows += 1u;\n+        if self.meows % 5u == 0u {\n+            self.how_hungry += 1;\n+        }\n     }\n }\n \n@@ -60,7 +58,7 @@ fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n \n \n pub fn main() {\n-  let nyan = cat(0u, 2, ~\"nyan\");\n+  let mut nyan = cat(0u, 2, ~\"nyan\");\n   nyan.eat();\n   assert(!nyan.eat());\n   for uint::range(1u, 10u) |_i| { nyan.speak(); };"}, {"sha": "bdc8f7568a165d8c3c03477793d24df41433d357", "filename": "src/test/run-pass/class-implement-traits.rs", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs?ref=a08eda4b6318af0df153322d10d9b907b13d0cdc", "patch": "@@ -12,42 +12,41 @@\n #[legacy_modes];\n \n trait noisy {\n-  fn speak();\n+  fn speak(&mut self);\n }\n \n struct cat {\n-  priv mut meows : uint,\n+    priv meows : uint,\n \n-  mut how_hungry : int,\n-  name : ~str,\n+    how_hungry : int,\n+    name : ~str,\n }\n \n priv impl cat {\n-    fn meow() {\n-      error!(\"Meow\");\n-      self.meows += 1u;\n-      if self.meows % 5u == 0u {\n-          self.how_hungry += 1;\n-      }\n+    fn meow(&mut self) {\n+        error!(\"Meow\");\n+        self.meows += 1u;\n+        if self.meows % 5u == 0u {\n+            self.how_hungry += 1;\n+        }\n     }\n }\n \n impl cat {\n-  fn eat() -> bool {\n-    if self.how_hungry > 0 {\n-        error!(\"OM NOM NOM\");\n-        self.how_hungry -= 2;\n-        return true;\n+    fn eat(&mut self) -> bool {\n+        if self.how_hungry > 0 {\n+            error!(\"OM NOM NOM\");\n+            self.how_hungry -= 2;\n+            return true;\n+        } else {\n+            error!(\"Not hungry!\");\n+            return false;\n+        }\n     }\n-    else {\n-        error!(\"Not hungry!\");\n-        return false;\n-    }\n-  }\n }\n \n impl noisy for cat {\n-  fn speak() { self.meow(); }\n+  fn speak(&mut self) { self.meow(); }\n }\n \n fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n@@ -59,12 +58,12 @@ fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n }\n \n \n-fn make_speak<C:noisy>(c: C) {\n+fn make_speak<C:noisy>(mut c: C) {\n     c.speak();\n }\n \n pub fn main() {\n-  let nyan = cat(0u, 2, ~\"nyan\");\n+  let mut nyan = cat(0u, 2, ~\"nyan\");\n   nyan.eat();\n   assert(!nyan.eat());\n   for uint::range(1u, 10u) |_i| { make_speak(nyan); };"}, {"sha": "fc5191e522d7640e9213d9fabbf5bd11082267d0", "filename": "src/test/run-pass/class-methods-cross-crate.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs?ref=a08eda4b6318af0df153322d10d9b907b13d0cdc", "patch": "@@ -14,10 +14,10 @@ extern mod cci_class_3;\n use cci_class_3::kitties::*;\n \n pub fn main() {\n-  let nyan : cat = cat(52u, 99);\n-  let kitty = cat(1000u, 2);\n-  assert(nyan.how_hungry == 99);\n-  assert(kitty.how_hungry == 2);\n-  nyan.speak();\n-  assert(nyan.meow_count() == 53u);\n+    let mut nyan : cat = cat(52u, 99);\n+    let mut kitty = cat(1000u, 2);\n+    assert(nyan.how_hungry == 99);\n+    assert(kitty.how_hungry == 2);\n+    nyan.speak();\n+    assert(nyan.meow_count() == 53u);\n }"}, {"sha": "1e41b60a8223ec08f44993ebd430f4abfe19d4bd", "filename": "src/test/run-pass/class-methods.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-methods.rs?ref=a08eda4b6318af0df153322d10d9b907b13d0cdc", "patch": "@@ -9,27 +9,26 @@\n // except according to those terms.\n \n struct cat {\n-  priv mut meows : uint,\n+  priv meows : uint,\n \n   how_hungry : int,\n }\n \n impl cat {\n-\n-  fn speak() { self.meows += 1u; }\n-  fn meow_count() -> uint { self.meows }\n+    fn speak(&mut self) { self.meows += 1u; }\n+    fn meow_count(&mut self) -> uint { self.meows }\n }\n \n-fn cat(in_x : uint, in_y : int) -> cat {\n+fn cat(in_x: uint, in_y: int) -> cat {\n     cat {\n         meows: in_x,\n         how_hungry: in_y\n     }\n }\n \n pub fn main() {\n-  let nyan : cat = cat(52u, 99);\n-  let kitty = cat(1000u, 2);\n+  let mut nyan: cat = cat(52u, 99);\n+  let mut kitty = cat(1000u, 2);\n   assert(nyan.how_hungry == 99);\n   assert(kitty.how_hungry == 2);\n   nyan.speak();"}, {"sha": "a96a1920d9233d78de3d20752b333cc43b09c882", "filename": "src/test/run-pass/class-poly-methods-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs?ref=a08eda4b6318af0df153322d10d9b907b13d0cdc", "patch": "@@ -14,8 +14,8 @@ extern mod cci_class_6;\n use cci_class_6::kitties::*;\n \n pub fn main() {\n-  let nyan : cat<char> = cat::<char>(52u, 99, ~['p']);\n-  let kitty = cat(1000u, 2, ~[~\"tabby\"]);\n+  let mut nyan : cat<char> = cat::<char>(52u, 99, ~['p']);\n+  let mut kitty = cat(1000u, 2, ~[~\"tabby\"]);\n   assert(nyan.how_hungry == 99);\n   assert(kitty.how_hungry == 2);\n   nyan.speak(~[1u,2u,3u]);"}, {"sha": "e81d07a783b99b99636782ae296bfdaf75b8dc6f", "filename": "src/test/run-pass/class-poly-methods.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs?ref=a08eda4b6318af0df153322d10d9b907b13d0cdc", "patch": "@@ -9,17 +9,17 @@\n // except according to those terms.\n \n struct cat<U> {\n-  priv mut info : ~[U],\n-  priv mut meows : uint,\n+    priv info : ~[U],\n+    priv meows : uint,\n \n-  how_hungry : int,\n+    how_hungry : int,\n }\n \n impl<U> cat<U> {\n-  fn speak<T>(stuff: ~[T]) {\n-    self.meows += stuff.len();\n-  }\n-  fn meow_count() -> uint { self.meows }\n+    fn speak<T>(&mut self, stuff: ~[T]) {\n+        self.meows += stuff.len();\n+    }\n+    fn meow_count(&mut self) -> uint { self.meows }\n }\n \n fn cat<U>(in_x : uint, in_y : int, -in_info: ~[U]) -> cat<U> {\n@@ -31,8 +31,8 @@ fn cat<U>(in_x : uint, in_y : int, -in_info: ~[U]) -> cat<U> {\n }\n \n pub fn main() {\n-  let nyan : cat<int> = cat::<int>(52u, 99, ~[9]);\n-  let kitty = cat(1000u, 2, ~[~\"tabby\"]);\n+  let mut nyan : cat<int> = cat::<int>(52u, 99, ~[9]);\n+  let mut kitty = cat(1000u, 2, ~[~\"tabby\"]);\n   assert(nyan.how_hungry == 99);\n   assert(kitty.how_hungry == 2);\n   nyan.speak(~[1,2,3]);"}, {"sha": "9c7d9ce7415a433a8dd96d3968fbf1b687d6e52b", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=a08eda4b6318af0df153322d10d9b907b13d0cdc", "patch": "@@ -12,36 +12,35 @@\n use core::to_str::*;\n \n struct cat {\n-  priv mut meows : uint,\n+    priv meows : uint,\n \n-  mut how_hungry : int,\n-  name : ~str,\n+    how_hungry : int,\n+    name : ~str,\n }\n \n impl cat {\n+    fn speak(&mut self) { self.meow(); }\n \n-  fn speak() { self.meow(); }\n-\n-  fn eat() -> bool {\n-    if self.how_hungry > 0 {\n-        error!(\"OM NOM NOM\");\n-        self.how_hungry -= 2;\n-        return true;\n-    }\n-    else {\n-        error!(\"Not hungry!\");\n-        return false;\n+    fn eat(&mut self) -> bool {\n+        if self.how_hungry > 0 {\n+            error!(\"OM NOM NOM\");\n+            self.how_hungry -= 2;\n+            return true;\n+        }\n+        else {\n+            error!(\"Not hungry!\");\n+            return false;\n+        }\n     }\n-  }\n }\n \n priv impl cat {\n-    fn meow() {\n-      error!(\"Meow\");\n-      self.meows += 1u;\n-      if self.meows % 5u == 0u {\n-          self.how_hungry += 1;\n-      }\n+    fn meow(&mut self) {\n+        error!(\"Meow\");\n+        self.meows += 1u;\n+        if self.meows % 5u == 0u {\n+            self.how_hungry += 1;\n+        }\n     }\n }\n \n@@ -64,6 +63,6 @@ fn print_out<T:ToStr>(thing: T, expected: ~str) {\n }\n \n pub fn main() {\n-  let nyan : ToStr = cat(0u, 2, ~\"nyan\") as ToStr;\n+  let mut nyan : ToStr = cat(0u, 2, ~\"nyan\") as ToStr;\n   print_out(nyan, ~\"nyan\");\n }"}, {"sha": "cbc69719caa626823b77f67a47df9c329b771ce0", "filename": "src/test/run-pass/class-typarams.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Frun-pass%2Fclass-typarams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Frun-pass%2Fclass-typarams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-typarams.rs?ref=a08eda4b6318af0df153322d10d9b907b13d0cdc", "patch": "@@ -9,16 +9,14 @@\n // except according to those terms.\n \n struct cat<U> {\n-  priv mut meows : uint,\n+    priv meows : uint,\n \n-  how_hungry : int,\n+    how_hungry : int,\n }\n \n impl<U> cat<U> {\n-  fn speak() {\n-    self.meows += 1u;\n-  }\n-  fn meow_count() -> uint { self.meows }\n+    fn speak(&mut self) { self.meows += 1u; }\n+    fn meow_count(&mut self) -> uint { self.meows }\n }\n \n fn cat<U>(in_x : uint, in_y : int) -> cat<U> {\n@@ -30,6 +28,6 @@ fn cat<U>(in_x : uint, in_y : int) -> cat<U> {\n \n \n pub fn main() {\n-  let _nyan : cat<int> = cat::<int>(52u, 99);\n-  //  let kitty = cat(1000u, 2);\n+  let mut _nyan : cat<int> = cat::<int>(52u, 99);\n+  //  let mut kitty = cat(1000u, 2);\n }"}, {"sha": "2ab6ce01b2432df60c11e7de9d9940822d2c3385", "filename": "src/test/run-pass/classes-cross-crate.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs?ref=a08eda4b6318af0df153322d10d9b907b13d0cdc", "patch": "@@ -14,9 +14,9 @@ extern mod cci_class_4;\n use cci_class_4::kitties::*;\n \n pub fn main() {\n-  let nyan = cat(0u, 2, ~\"nyan\");\n-  nyan.eat();\n-  assert(!nyan.eat());\n-  for uint::range(1u, 10u) |_i| { nyan.speak(); };\n-  assert(nyan.eat());\n+    let mut nyan = cat(0u, 2, ~\"nyan\");\n+    nyan.eat();\n+    assert(!nyan.eat());\n+    for uint::range(1u, 10u) |_i| { nyan.speak(); };\n+    assert(nyan.eat());\n }"}, {"sha": "ac80ca9b9e930f54dc5a538bc8a5c31793f2e83a", "filename": "src/test/run-pass/classes-simple-method.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs?ref=a08eda4b6318af0df153322d10d9b907b13d0cdc", "patch": "@@ -9,13 +9,13 @@\n // except according to those terms.\n \n struct cat {\n-  priv mut meows : uint,\n+    priv meows : uint,\n \n-  how_hungry : int,\n+    how_hungry : int,\n }\n \n impl cat {\n-  fn speak() {}\n+  fn speak(&mut self) {}\n }\n \n fn cat(in_x : uint, in_y : int) -> cat {\n@@ -26,8 +26,8 @@ fn cat(in_x : uint, in_y : int) -> cat {\n }\n \n pub fn main() {\n-  let nyan : cat = cat(52u, 99);\n-  let kitty = cat(1000u, 2);\n+  let mut nyan : cat = cat(52u, 99);\n+  let mut kitty = cat(1000u, 2);\n   assert(nyan.how_hungry == 99);\n   assert(kitty.how_hungry == 2);\n   nyan.speak();"}, {"sha": "b17e81160e510b12c0417e8fb74ef98eb550e868", "filename": "src/test/run-pass/classes-simple.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple.rs?ref=a08eda4b6318af0df153322d10d9b907b13d0cdc", "patch": "@@ -9,10 +9,9 @@\n // except according to those terms.\n \n struct cat {\n-  priv mut meows : uint,\n-\n-  how_hungry : int,\n+    priv meows : uint,\n \n+    how_hungry : int,\n }\n \n fn cat(in_x : uint, in_y : int) -> cat {\n@@ -23,8 +22,8 @@ fn cat(in_x : uint, in_y : int) -> cat {\n }\n \n pub fn main() {\n-  let nyan : cat = cat(52u, 99);\n-  let kitty = cat(1000u, 2);\n+  let mut nyan : cat = cat(52u, 99);\n+  let mut kitty = cat(1000u, 2);\n   assert(nyan.how_hungry == 99);\n   assert(kitty.how_hungry == 2);\n }"}, {"sha": "552715dccb445a90bd0f748d10105a0ab16d69da", "filename": "src/test/run-pass/classes.rs", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Frun-pass%2Fclasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Frun-pass%2Fclasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses.rs?ref=a08eda4b6318af0df153322d10d9b907b13d0cdc", "patch": "@@ -9,36 +9,34 @@\n // except according to those terms.\n \n struct cat {\n-  priv mut meows : uint,\n+    priv meows : uint,\n \n-  mut how_hungry : int,\n-  name : ~str,\n+    how_hungry : int,\n+    name : ~str,\n }\n \n impl cat {\n-\n-  fn speak() { self.meow(); }\n-\n-  fn eat() -> bool {\n-    if self.how_hungry > 0 {\n-        error!(\"OM NOM NOM\");\n-        self.how_hungry -= 2;\n-        return true;\n-    }\n-    else {\n-        error!(\"Not hungry!\");\n-        return false;\n+    fn speak(&mut self) { self.meow(); }\n+\n+    fn eat(&mut self) -> bool {\n+        if self.how_hungry > 0 {\n+            error!(\"OM NOM NOM\");\n+            self.how_hungry -= 2;\n+            return true;\n+        } else {\n+            error!(\"Not hungry!\");\n+            return false;\n+        }\n     }\n-  }\n }\n \n priv impl cat {\n-    fn meow() {\n-      error!(\"Meow\");\n-      self.meows += 1u;\n-      if self.meows % 5u == 0u {\n-          self.how_hungry += 1;\n-      }\n+    fn meow(&mut self) {\n+        error!(\"Meow\");\n+        self.meows += 1u;\n+        if self.meows % 5u == 0u {\n+            self.how_hungry += 1;\n+        }\n     }\n }\n \n@@ -51,7 +49,7 @@ fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n }\n \n pub fn main() {\n-  let nyan = cat(0u, 2, ~\"nyan\");\n+  let mut nyan = cat(0u, 2, ~\"nyan\");\n   nyan.eat();\n   assert(!nyan.eat());\n   for uint::range(1u, 10u) |_i| { nyan.speak(); };"}, {"sha": "9cb86ffe83707f8ab14d1b4ee3ac66f11eed6664", "filename": "src/test/run-pass/private-class-field.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Frun-pass%2Fprivate-class-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a08eda4b6318af0df153322d10d9b907b13d0cdc/src%2Ftest%2Frun-pass%2Fprivate-class-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivate-class-field.rs?ref=a08eda4b6318af0df153322d10d9b907b13d0cdc", "patch": "@@ -9,13 +9,13 @@\n // except according to those terms.\n \n struct cat {\n-  priv mut meows : uint,\n+    priv meows : uint,\n \n-  how_hungry : int,\n+    how_hungry : int,\n }\n \n impl cat {\n-  fn meow_count() -> uint { self.meows }\n+  fn meow_count(&mut self) -> uint { self.meows }\n }\n \n fn cat(in_x : uint, in_y : int) -> cat {\n@@ -26,6 +26,6 @@ fn cat(in_x : uint, in_y : int) -> cat {\n }\n \n pub fn main() {\n-  let nyan : cat = cat(52u, 99);\n-  assert (nyan.meow_count() == 52u);\n+    let mut nyan : cat = cat(52u, 99);\n+    assert (nyan.meow_count() == 52u);\n }"}]}