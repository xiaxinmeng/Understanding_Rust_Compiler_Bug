{"sha": "ed3c8610c332afb2d1b08ce1d8676d4cdd728d68", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkM2M4NjEwYzMzMmFmYjJkMWIwOGNlMWQ4Njc2ZDRjZGQ3MjhkNjg=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-04-03T11:20:29Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-06T22:35:50Z"}, "message": "adding 32bit-unix struct struct size differences", "tree": {"sha": "48baade14f42e360a707e4b333a4fba779955c83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48baade14f42e360a707e4b333a4fba779955c83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed3c8610c332afb2d1b08ce1d8676d4cdd728d68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed3c8610c332afb2d1b08ce1d8676d4cdd728d68", "html_url": "https://github.com/rust-lang/rust/commit/ed3c8610c332afb2d1b08ce1d8676d4cdd728d68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed3c8610c332afb2d1b08ce1d8676d4cdd728d68/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79269ea06412d67670b6b2d92522e4fe875b3247", "url": "https://api.github.com/repos/rust-lang/rust/commits/79269ea06412d67670b6b2d92522e4fe875b3247", "html_url": "https://github.com/rust-lang/rust/commit/79269ea06412d67670b6b2d92522e4fe875b3247"}], "stats": {"total": 246, "additions": 178, "deletions": 68}, "files": [{"sha": "ff1f2b0e12617645b7ec8b678fee795b3243e651", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 178, "deletions": 68, "changes": 246, "blob_url": "https://github.com/rust-lang/rust/blob/ed3c8610c332afb2d1b08ce1d8676d4cdd728d68/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3c8610c332afb2d1b08ce1d8676d4cdd728d68/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=ed3c8610c332afb2d1b08ce1d8676d4cdd728d68", "patch": "@@ -73,7 +73,7 @@ type uv_stream_t = {\n     fields: uv_handle_fields\n };\n \n-// unix size: 272\n+// 64bit unix size: 272\n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n@@ -86,9 +86,22 @@ type uv_tcp_t = {\n     a16: *u8, a17: *u8, a18: *u8, a19: *u8,\n     a20: *u8, a21: *u8, a22: *u8, a23: *u8,\n     a24: *u8, a25: *u8, a26: *u8, a27: *u8,\n-    a28: *u8, a29: *u8\n+    a28: *u8,\n+    a30: uv_tcp_t_32bit_unix_riders\n };\n-// win32 size: 240 (120)\n+// 32bit unix size: 328 (164)\n+#[cfg(target_arch=\"x86_64\")]\n+type uv_tcp_t_32bit_unix_riders = {\n+    a29: *u8\n+};\n+#[cfg(target_arch=\"x86\")]\n+type uv_tcp_t_32bit_unix_riders = {\n+    a29: *u8, a30: *u8, a31: *u8,\n+    a32: *u8, a33: *u8, a34: *u8,\n+    a35: *u8, a36: *u8\n+};\n+\n+// 32bit win32 size: 240 (120)\n #[cfg(target_os = \"win32\")]\n type uv_tcp_t = {\n     fields: uv_handle_fields,\n@@ -138,7 +151,16 @@ type uv_write_t = {\n     a00: *u8, a01: *u8, a02: *u8, a03: *u8,\n     a04: *u8, a05: *u8, a06: *u8, a07: *u8,\n     a08: *u8, a09: *u8, a10: *u8, a11: *u8,\n-    a12: *u8, a13: *u8\n+    a12: *u8,\n+    a14: uv_write_t_32bit_unix_riders\n+};\n+#[cfg(target_arch=\"x86_64\")]\n+type uv_write_t_32bit_unix_riders = {\n+    a13: *u8\n+};\n+#[cfg(target_arch=\"x86\")]\n+type uv_write_t_32bit_unix_riders = {\n+    a13: *u8, a14: *u8\n };\n // win32 size: 136 (68)\n #[cfg(target_os = \"win32\")]\n@@ -149,15 +171,25 @@ type uv_write_t = {\n     a08: *u8, a09: *u8, a10: *u8, a11: *u8,\n     a12: *u8\n };\n-// unix size: 120\n+// 64bit unix size: 120\n+// 32bit unix size: 152 (76)\n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n type uv_async_t = {\n     fields: uv_handle_fields,\n     a00: *u8, a01: *u8, a02: *u8, a03: *u8,\n     a04: *u8, a05: *u8, a06: *u8, a07: *u8,\n-    a08: *u8, a09: *u8, a10: *u8\n+    a08: *u8, a09: *u8, \n+    a11: uv_async_t_32bit_unix_riders\n+};\n+#[cfg(target_arch=\"x86_64\")]\n+type uv_async_t_32bit_unix_riders = {\n+    a10: *u8\n+};\n+#[cfg(target_arch=\"x86\")]\n+type uv_async_t_32bit_unix_riders = {\n+    a10: *u8, a11: *u8, a12: *u8, a13: *u8\n };\n // win32 size 132 (68)\n #[cfg(target_os = \"win32\")]\n@@ -192,49 +224,86 @@ type sockaddr_in6 = {\n };\n \n mod uv_ll_struct_stubgen {\n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"freebsd\")]\n     fn gen_stub_uv_tcp_t() -> uv_tcp_t {\n-        ret { fields: { loop_handle: ptr::null(), type_: 0u32,\n-                        close_cb: ptr::null(),\n-                        mut data: ptr::null() },\n-            a00: 0 as *u8, a01: 0 as *u8, a02: 0 as *u8,\n-            a03: 0 as *u8,\n-            a04: 0 as *u8, a05: 0 as *u8, a06: 0 as *u8,\n-            a07: 0 as *u8,\n-            a08: 0 as *u8, a09: 0 as *u8, a10: 0 as *u8,\n-            a11: 0 as *u8,\n-            a12: 0 as *u8, a13: 0 as *u8, a14: 0 as *u8,\n-            a15: 0 as *u8,\n-            a16: 0 as *u8, a17: 0 as *u8, a18: 0 as *u8,\n-            a19: 0 as *u8,\n-            a20: 0 as *u8, a21: 0 as *u8, a22: 0 as *u8,\n-            a23: 0 as *u8,\n-            a24: 0 as *u8, a25: 0 as *u8, a26: 0 as *u8,\n-            a27: 0 as *u8,\n-            a28: 0 as *u8, a29: 0 as *u8\n-        };\n-    }\n-    #[cfg(target_os = \"win32\")]\n-    fn gen_stub_uv_tcp_t() -> uv_tcp_t {\n-        ret { fields: { loop_handle: ptr::null(), type_: 0u32,\n-                        close_cb: ptr::null(),\n-                        mut data: ptr::null() },\n-            a00: 0 as *u8, a01: 0 as *u8, a02: 0 as *u8,\n-            a03: 0 as *u8,\n-            a04: 0 as *u8, a05: 0 as *u8, a06: 0 as *u8,\n-            a07: 0 as *u8,\n-            a08: 0 as *u8, a09: 0 as *u8, a10: 0 as *u8,\n-            a11: 0 as *u8,\n-            a12: 0 as *u8, a13: 0 as *u8, a14: 0 as *u8,\n-            a15: 0 as *u8,\n-            a16: 0 as *u8, a17: 0 as *u8, a18: 0 as *u8,\n-            a19: 0 as *u8,\n-            a20: 0 as *u8, a21: 0 as *u8, a22: 0 as *u8,\n-            a23: 0 as *u8,\n-            a24: 0 as *u8, a25: 0 as *u8\n-        };\n+        ret gen_stub_os();\n+        #[cfg(target_os = \"linux\")]\n+        #[cfg(target_os = \"macos\")]\n+        #[cfg(target_os = \"freebsd\")]\n+        fn gen_stub_os() -> uv_tcp_t {\n+            ret gen_stub_arch();\n+            #[cfg(target_arch=\"x86_64\")]\n+            fn gen_stub_arch() -> uv_tcp_t {\n+                ret { fields: { loop_handle: ptr::null(), type_: 0u32,\n+                                close_cb: ptr::null(),\n+                                mut data: ptr::null() },\n+                    a00: 0 as *u8, a01: 0 as *u8, a02: 0 as *u8,\n+                    a03: 0 as *u8,\n+                    a04: 0 as *u8, a05: 0 as *u8, a06: 0 as *u8,\n+                    a07: 0 as *u8,\n+                    a08: 0 as *u8, a09: 0 as *u8, a10: 0 as *u8,\n+                    a11: 0 as *u8,\n+                    a12: 0 as *u8, a13: 0 as *u8, a14: 0 as *u8,\n+                    a15: 0 as *u8,\n+                    a16: 0 as *u8, a17: 0 as *u8, a18: 0 as *u8,\n+                    a19: 0 as *u8,\n+                    a20: 0 as *u8, a21: 0 as *u8, a22: 0 as *u8,\n+                    a23: 0 as *u8,\n+                    a24: 0 as *u8, a25: 0 as *u8, a26: 0 as *u8,\n+                    a27: 0 as *u8,\n+                    a28: 0 as *u8,\n+                    a30: {\n+                        a29: 0 as *u8\n+                    }\n+                };\n+            }\n+            #[cfg(target_arch=\"x86\")]\n+            fn gen_stub_arch() -> uv_tcp_t {\n+                ret { fields: { loop_handle: ptr::null(), type_: 0u32,\n+                                close_cb: ptr::null(),\n+                                mut data: ptr::null() },\n+                    a00: 0 as *u8, a01: 0 as *u8, a02: 0 as *u8,\n+                    a03: 0 as *u8,\n+                    a04: 0 as *u8, a05: 0 as *u8, a06: 0 as *u8,\n+                    a07: 0 as *u8,\n+                    a08: 0 as *u8, a09: 0 as *u8, a10: 0 as *u8,\n+                    a11: 0 as *u8,\n+                    a12: 0 as *u8, a13: 0 as *u8, a14: 0 as *u8,\n+                    a15: 0 as *u8,\n+                    a16: 0 as *u8, a17: 0 as *u8, a18: 0 as *u8,\n+                    a19: 0 as *u8,\n+                    a20: 0 as *u8, a21: 0 as *u8, a22: 0 as *u8,\n+                    a23: 0 as *u8,\n+                    a24: 0 as *u8, a25: 0 as *u8, a26: 0 as *u8,\n+                    a27: 0 as *u8,\n+                    a28: 0 as *u8,\n+                    a30: {\n+                        a29: 0 as *u8, a30: 0 as *u8, a31: 0 as *u8,\n+                        a32: 0 as *u8, a33: 0 as *u8, a34: 0 as *u8,\n+                        a35: 0 as *u8, a36: 0 as *u8\n+                    }\n+                };\n+            }\n+        }\n+        #[cfg(target_os = \"win32\")]\n+        fn gen_stub_os() -> uv_tcp_t {\n+            ret { fields: { loop_handle: ptr::null(), type_: 0u32,\n+                            close_cb: ptr::null(),\n+                            mut data: ptr::null() },\n+                a00: 0 as *u8, a01: 0 as *u8, a02: 0 as *u8,\n+                a03: 0 as *u8,\n+                a04: 0 as *u8, a05: 0 as *u8, a06: 0 as *u8,\n+                a07: 0 as *u8,\n+                a08: 0 as *u8, a09: 0 as *u8, a10: 0 as *u8,\n+                a11: 0 as *u8,\n+                a12: 0 as *u8, a13: 0 as *u8, a14: 0 as *u8,\n+                a15: 0 as *u8,\n+                a16: 0 as *u8, a17: 0 as *u8, a18: 0 as *u8,\n+                a19: 0 as *u8,\n+                a20: 0 as *u8, a21: 0 as *u8, a22: 0 as *u8,\n+                a23: 0 as *u8,\n+                a24: 0 as *u8, a25: 0 as *u8\n+            };\n+        }\n     }\n     #[cfg(target_os = \"linux\")]\n     #[cfg(target_os = \"macos\")]\n@@ -260,15 +329,38 @@ mod uv_ll_struct_stubgen {\n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"freebsd\")]\n     fn gen_stub_uv_async_t() -> uv_async_t {\n-        ret { fields: { loop_handle: ptr::null(), type_: 0u32,\n-                        close_cb: ptr::null(),\n-                        mut data: ptr::null() },\n-            a00: 0 as *u8, a01: 0 as *u8, a02: 0 as *u8,\n-            a03: 0 as *u8,\n-            a04: 0 as *u8, a05: 0 as *u8, a06: 0 as *u8,\n-            a07: 0 as *u8,\n-            a08: 0 as *u8, a09: 0 as *u8, a10: 0 as *u8\n-        };\n+        ret gen_stub_arch();\n+        #[cfg(target_arch = \"x86_64\")]\n+        fn gen_stub_arch() -> uv_async_t {\n+            ret { fields: { loop_handle: ptr::null(), type_: 0u32,\n+                            close_cb: ptr::null(),\n+                            mut data: ptr::null() },\n+                a00: 0 as *u8, a01: 0 as *u8, a02: 0 as *u8,\n+                a03: 0 as *u8,\n+                a04: 0 as *u8, a05: 0 as *u8, a06: 0 as *u8,\n+                a07: 0 as *u8,\n+                a08: 0 as *u8, a09: 0 as *u8,\n+                a11: {\n+                    a10: 0 as *u8\n+                }\n+            };\n+        }\n+        #[cfg(target_arch = \"x86\")]\n+        fn gen_stub_arch() -> uv_async_t {\n+            ret { fields: { loop_handle: ptr::null(), type_: 0u32,\n+                            close_cb: ptr::null(),\n+                            mut data: ptr::null() },\n+                a00: 0 as *u8, a01: 0 as *u8, a02: 0 as *u8,\n+                a03: 0 as *u8,\n+                a04: 0 as *u8, a05: 0 as *u8, a06: 0 as *u8,\n+                a07: 0 as *u8,\n+                a08: 0 as *u8, a09: 0 as *u8,\n+                a11: {\n+                    a10: 0 as *u8, a11: 0 as *u8,\n+                    a12: 0 as *u8, a13: 0 as *u8\n+                }\n+            };\n+        }\n     }\n     #[cfg(target_os = \"win32\")]\n     fn gen_stub_uv_async_t() -> uv_async_t {\n@@ -288,17 +380,35 @@ mod uv_ll_struct_stubgen {\n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"freebsd\")]\n     fn gen_stub_uv_write_t() -> uv_write_t {\n-        ret { fields: { loop_handle: ptr::null(), type_: 0u32,\n-                        close_cb: ptr::null(),\n-                        mut data: ptr::null() },\n-            a00: 0 as *u8, a01: 0 as *u8, a02: 0 as *u8,\n-            a03: 0 as *u8,\n-            a04: 0 as *u8, a05: 0 as *u8, a06: 0 as *u8,\n-            a07: 0 as *u8,\n-            a08: 0 as *u8, a09: 0 as *u8, a10: 0 as *u8,\n-            a11: 0 as *u8,\n-            a12: 0 as *u8, a13: 0 as *u8\n-        };\n+        ret gen_stub_arch();\n+        #[cfg(target_arch=\"x86_64\")]\n+        fn gen_stub_arch() -> uv_write_t {\n+            ret { fields: { loop_handle: ptr::null(), type_: 0u32,\n+                            close_cb: ptr::null(),\n+                            mut data: ptr::null() },\n+                a00: 0 as *u8, a01: 0 as *u8, a02: 0 as *u8,\n+                a03: 0 as *u8,\n+                a04: 0 as *u8, a05: 0 as *u8, a06: 0 as *u8,\n+                a07: 0 as *u8,\n+                a08: 0 as *u8, a09: 0 as *u8, a10: 0 as *u8,\n+                a11: 0 as *u8,\n+                a12: 0 as *u8, a14: { a13: 0 as *u8 }\n+            };\n+        }\n+        #[cfg(target_arch=\"x86\")]\n+        fn gen_stub_arch() -> uv_write_t {\n+            ret { fields: { loop_handle: ptr::null(), type_: 0u32,\n+                            close_cb: ptr::null(),\n+                            mut data: ptr::null() },\n+                a00: 0 as *u8, a01: 0 as *u8, a02: 0 as *u8,\n+                a03: 0 as *u8,\n+                a04: 0 as *u8, a05: 0 as *u8, a06: 0 as *u8,\n+                a07: 0 as *u8,\n+                a08: 0 as *u8, a09: 0 as *u8, a10: 0 as *u8,\n+                a11: 0 as *u8,\n+                a12: 0 as *u8, a14: { a13: 0 as *u8, a14: 0 as *u8 }\n+            };\n+        }\n     }\n     #[cfg(target_os = \"win32\")]\n     fn gen_stub_uv_write_t() -> uv_write_t {"}]}