{"sha": "3720735f9abb7e5dca142a03db8063579bfca6b0", "node_id": "C_kwDOAAsO6NoAKDM3MjA3MzVmOWFiYjdlNWRjYTE0MmEwM2RiODA2MzU3OWJmY2E2YjA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-27T14:24:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-27T14:24:02Z"}, "message": "Auto merge of #7995 - Alexendoo:needless_late_init, r=giraffate\n\nAdd `needless_late_init` lint\n\nexamples:\n\n```rust\nlet a;\na = 1;\n// to\nlet a = 1;\n```\n```rust\nlet b;\nmatch 3 {\n    0 => b = \"zero\",\n    1 => b = \"one\",\n    _ => b = \"many\",\n}\n// to\nlet b = match 3 {\n    0 => \"zero\",\n    1 => \"one\",\n    _ => \"many\",\n};\n```\n```rust\nlet c;\nif true {\n    c = 1;\n} else {\n    c = -1;\n}\n// to\nlet c = if true {\n    1\n} else {\n    -1\n};\n```\n\nchangelog: Add [`needless_late_init`]", "tree": {"sha": "cfab77509b2597644538a8c8cb56d1ff6d676a97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfab77509b2597644538a8c8cb56d1ff6d676a97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3720735f9abb7e5dca142a03db8063579bfca6b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3720735f9abb7e5dca142a03db8063579bfca6b0", "html_url": "https://github.com/rust-lang/rust/commit/3720735f9abb7e5dca142a03db8063579bfca6b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3720735f9abb7e5dca142a03db8063579bfca6b0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a6169d7f662bfa418f4dc1d1cb6bf725dd5f680", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a6169d7f662bfa418f4dc1d1cb6bf725dd5f680", "html_url": "https://github.com/rust-lang/rust/commit/5a6169d7f662bfa418f4dc1d1cb6bf725dd5f680"}, {"sha": "d346ec94fe3477ee2ee0cf41061a92c156db8701", "url": "https://api.github.com/repos/rust-lang/rust/commits/d346ec94fe3477ee2ee0cf41061a92c156db8701", "html_url": "https://github.com/rust-lang/rust/commit/d346ec94fe3477ee2ee0cf41061a92c156db8701"}], "stats": {"total": 913, "additions": 882, "deletions": 31}, "files": [{"sha": "157ea0c963afc5d1d8748ebe79ce250c2343914d", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3720735f9abb7e5dca142a03db8063579bfca6b0/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/3720735f9abb7e5dca142a03db8063579bfca6b0/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=3720735f9abb7e5dca142a03db8063579bfca6b0", "patch": "@@ -3033,6 +3033,7 @@ Released 2018-09-13\n [`needless_continue`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_continue\n [`needless_doctest_main`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_doctest_main\n [`needless_for_each`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_for_each\n+[`needless_late_init`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_late_init\n [`needless_lifetimes`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n [`needless_option_as_deref`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_option_as_deref\n [`needless_pass_by_value`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value"}, {"sha": "04912120e278f3c6bb38aeaec1b19a9b6509cde2", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3720735f9abb7e5dca142a03db8063579bfca6b0/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3720735f9abb7e5dca142a03db8063579bfca6b0/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=3720735f9abb7e5dca142a03db8063579bfca6b0", "patch": "@@ -206,6 +206,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(needless_bool::BOOL_COMPARISON),\n     LintId::of(needless_bool::NEEDLESS_BOOL),\n     LintId::of(needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE),\n+    LintId::of(needless_late_init::NEEDLESS_LATE_INIT),\n     LintId::of(needless_option_as_deref::NEEDLESS_OPTION_AS_DEREF),\n     LintId::of(needless_question_mark::NEEDLESS_QUESTION_MARK),\n     LintId::of(needless_update::NEEDLESS_UPDATE),"}, {"sha": "bb159e50373c22d156db89368fcbcb88b5607013", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3720735f9abb7e5dca142a03db8063579bfca6b0/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3720735f9abb7e5dca142a03db8063579bfca6b0/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=3720735f9abb7e5dca142a03db8063579bfca6b0", "patch": "@@ -362,6 +362,7 @@ store.register_lints(&[\n     needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE,\n     needless_continue::NEEDLESS_CONTINUE,\n     needless_for_each::NEEDLESS_FOR_EACH,\n+    needless_late_init::NEEDLESS_LATE_INIT,\n     needless_option_as_deref::NEEDLESS_OPTION_AS_DEREF,\n     needless_pass_by_value::NEEDLESS_PASS_BY_VALUE,\n     needless_question_mark::NEEDLESS_QUESTION_MARK,"}, {"sha": "ea87e7e7a73687bb37b9385396c6c4ebc5c2b3a2", "filename": "clippy_lints/src/lib.register_style.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3720735f9abb7e5dca142a03db8063579bfca6b0/clippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3720735f9abb7e5dca142a03db8063579bfca6b0/clippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_style.rs?ref=3720735f9abb7e5dca142a03db8063579bfca6b0", "patch": "@@ -82,6 +82,7 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(misc_early::REDUNDANT_PATTERN),\n     LintId::of(mut_mutex_lock::MUT_MUTEX_LOCK),\n     LintId::of(mut_reference::UNNECESSARY_MUT_PASSED),\n+    LintId::of(needless_late_init::NEEDLESS_LATE_INIT),\n     LintId::of(neg_multiply::NEG_MULTIPLY),\n     LintId::of(new_without_default::NEW_WITHOUT_DEFAULT),\n     LintId::of(non_copy_const::BORROW_INTERIOR_MUTABLE_CONST),"}, {"sha": "bd9710ec40750e23b89f2aed7911bbc00df09778", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3720735f9abb7e5dca142a03db8063579bfca6b0/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3720735f9abb7e5dca142a03db8063579bfca6b0/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=3720735f9abb7e5dca142a03db8063579bfca6b0", "patch": "@@ -299,6 +299,7 @@ mod needless_bool;\n mod needless_borrowed_ref;\n mod needless_continue;\n mod needless_for_each;\n+mod needless_late_init;\n mod needless_option_as_deref;\n mod needless_pass_by_value;\n mod needless_question_mark;\n@@ -851,6 +852,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || Box::new(format_args::FormatArgs));\n     store.register_late_pass(|| Box::new(trailing_empty_array::TrailingEmptyArray));\n     store.register_early_pass(|| Box::new(octal_escapes::OctalEscapes));\n+    store.register_late_pass(|| Box::new(needless_late_init::NeedlessLateInit));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "e0522f3fe0b1affc1bc8043d33c770c5c65d0e0c", "filename": "clippy_lints/src/needless_late_init.rs", "status": "added", "additions": 349, "deletions": 0, "changes": 349, "blob_url": "https://github.com/rust-lang/rust/blob/3720735f9abb7e5dca142a03db8063579bfca6b0/clippy_lints%2Fsrc%2Fneedless_late_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3720735f9abb7e5dca142a03db8063579bfca6b0/clippy_lints%2Fsrc%2Fneedless_late_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_late_init.rs?ref=3720735f9abb7e5dca142a03db8063579bfca6b0", "patch": "@@ -0,0 +1,349 @@\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::path_to_local;\n+use clippy_utils::source::snippet_opt;\n+use clippy_utils::visitors::{expr_visitor, is_local_used};\n+use rustc_errors::Applicability;\n+use rustc_hir::intravisit::Visitor;\n+use rustc_hir::{Block, Expr, ExprKind, HirId, Local, LocalSource, MatchSource, Node, Pat, PatKind, Stmt, StmtKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::Span;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for late initializations that can be replaced by a `let` statement\n+    /// with an initializer.\n+    ///\n+    /// ### Why is this bad?\n+    /// Assigning in the `let` statement is less repetitive.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let a;\n+    /// a = 1;\n+    ///\n+    /// let b;\n+    /// match 3 {\n+    ///     0 => b = \"zero\",\n+    ///     1 => b = \"one\",\n+    ///     _ => b = \"many\",\n+    /// }\n+    ///\n+    /// let c;\n+    /// if true {\n+    ///     c = 1;\n+    /// } else {\n+    ///     c = -1;\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let a = 1;\n+    ///\n+    /// let b = match 3 {\n+    ///     0 => \"zero\",\n+    ///     1 => \"one\",\n+    ///     _ => \"many\",\n+    /// };\n+    ///\n+    /// let c = if true {\n+    ///     1\n+    /// } else {\n+    ///     -1\n+    /// };\n+    /// ```\n+    #[clippy::version = \"1.58.0\"]\n+    pub NEEDLESS_LATE_INIT,\n+    style,\n+    \"late initializations that can be replaced by a `let` statement with an initializer\"\n+}\n+declare_lint_pass!(NeedlessLateInit => [NEEDLESS_LATE_INIT]);\n+\n+fn contains_assign_expr<'tcx>(cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'tcx>) -> bool {\n+    let mut seen = false;\n+    expr_visitor(cx, |expr| {\n+        if let ExprKind::Assign(..) = expr.kind {\n+            seen = true;\n+        }\n+\n+        !seen\n+    })\n+    .visit_stmt(stmt);\n+\n+    seen\n+}\n+\n+#[derive(Debug)]\n+struct LocalAssign {\n+    lhs_id: HirId,\n+    lhs_span: Span,\n+    rhs_span: Span,\n+    span: Span,\n+}\n+\n+impl LocalAssign {\n+    fn from_expr(expr: &Expr<'_>, span: Span) -> Option<Self> {\n+        if let ExprKind::Assign(lhs, rhs, _) = expr.kind {\n+            if lhs.span.from_expansion() {\n+                return None;\n+            }\n+\n+            Some(Self {\n+                lhs_id: path_to_local(lhs)?,\n+                lhs_span: lhs.span,\n+                rhs_span: rhs.span.source_callsite(),\n+                span,\n+            })\n+        } else {\n+            None\n+        }\n+    }\n+\n+    fn new<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>, binding_id: HirId) -> Option<LocalAssign> {\n+        let assign = match expr.kind {\n+            ExprKind::Block(Block { expr: Some(expr), .. }, _) => Self::from_expr(expr, expr.span),\n+            ExprKind::Block(block, _) => {\n+                if_chain! {\n+                    if let Some((last, other_stmts)) = block.stmts.split_last();\n+                    if let StmtKind::Expr(expr) | StmtKind::Semi(expr) = last.kind;\n+\n+                    let assign = Self::from_expr(expr, last.span)?;\n+\n+                    // avoid visiting if not needed\n+                    if assign.lhs_id == binding_id;\n+                    if other_stmts.iter().all(|stmt| !contains_assign_expr(cx, stmt));\n+\n+                    then {\n+                        Some(assign)\n+                    } else {\n+                        None\n+                    }\n+                }\n+            },\n+            ExprKind::Assign(..) => Self::from_expr(expr, expr.span),\n+            _ => None,\n+        }?;\n+\n+        if assign.lhs_id == binding_id {\n+            Some(assign)\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+fn assignment_suggestions<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    binding_id: HirId,\n+    exprs: impl IntoIterator<Item = &'tcx Expr<'tcx>>,\n+) -> Option<(Applicability, Vec<(Span, String)>)> {\n+    let mut assignments = Vec::new();\n+\n+    for expr in exprs {\n+        let ty = cx.typeck_results().expr_ty(expr);\n+\n+        if ty.is_never() {\n+            continue;\n+        }\n+        if !ty.is_unit() {\n+            return None;\n+        }\n+\n+        let assign = LocalAssign::new(cx, expr, binding_id)?;\n+\n+        assignments.push(assign);\n+    }\n+\n+    let suggestions = assignments\n+        .into_iter()\n+        .map(|assignment| Some((assignment.span, snippet_opt(cx, assignment.rhs_span)?)))\n+        .collect::<Option<Vec<(Span, String)>>>()?;\n+\n+    let applicability = if suggestions.len() > 1 {\n+        // multiple suggestions don't work with rustfix in multipart_suggest\n+        // https://github.com/rust-lang/rustfix/issues/141\n+        Applicability::Unspecified\n+    } else {\n+        Applicability::MachineApplicable\n+    };\n+    Some((applicability, suggestions))\n+}\n+\n+struct Usage<'tcx> {\n+    stmt: &'tcx Stmt<'tcx>,\n+    expr: &'tcx Expr<'tcx>,\n+    needs_semi: bool,\n+}\n+\n+fn first_usage<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    binding_id: HirId,\n+    local_stmt_id: HirId,\n+    block: &'tcx Block<'tcx>,\n+) -> Option<Usage<'tcx>> {\n+    block\n+        .stmts\n+        .iter()\n+        .skip_while(|stmt| stmt.hir_id != local_stmt_id)\n+        .skip(1)\n+        .find(|&stmt| is_local_used(cx, stmt, binding_id))\n+        .and_then(|stmt| match stmt.kind {\n+            StmtKind::Expr(expr) => Some(Usage {\n+                stmt,\n+                expr,\n+                needs_semi: true,\n+            }),\n+            StmtKind::Semi(expr) => Some(Usage {\n+                stmt,\n+                expr,\n+                needs_semi: false,\n+            }),\n+            _ => None,\n+        })\n+}\n+\n+fn local_snippet_without_semicolon(cx: &LateContext<'_>, local: &Local<'_>) -> Option<String> {\n+    let span = local.span.with_hi(match local.ty {\n+        // let <pat>: <ty>;\n+        // ~~~~~~~~~~~~~~~\n+        Some(ty) => ty.span.hi(),\n+        // let <pat>;\n+        // ~~~~~~~~~\n+        None => local.pat.span.hi(),\n+    });\n+\n+    snippet_opt(cx, span)\n+}\n+\n+fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    local: &'tcx Local<'tcx>,\n+    local_stmt: &'tcx Stmt<'tcx>,\n+    block: &'tcx Block<'tcx>,\n+    binding_id: HirId,\n+) -> Option<()> {\n+    let usage = first_usage(cx, binding_id, local_stmt.hir_id, block)?;\n+    let binding_name = cx.tcx.hir().opt_name(binding_id)?;\n+    let let_snippet = local_snippet_without_semicolon(cx, local)?;\n+\n+    match usage.expr.kind {\n+        ExprKind::Assign(..) => {\n+            let assign = LocalAssign::new(cx, usage.expr, binding_id)?;\n+\n+            span_lint_and_then(\n+                cx,\n+                NEEDLESS_LATE_INIT,\n+                local_stmt.span,\n+                \"unneeded late initalization\",\n+                |diag| {\n+                    diag.tool_only_span_suggestion(\n+                        local_stmt.span,\n+                        \"remove the local\",\n+                        String::new(),\n+                        Applicability::MachineApplicable,\n+                    );\n+\n+                    diag.span_suggestion(\n+                        assign.lhs_span,\n+                        &format!(\"declare `{}` here\", binding_name),\n+                        let_snippet,\n+                        Applicability::MachineApplicable,\n+                    );\n+                },\n+            );\n+        },\n+        ExprKind::If(_, then_expr, Some(else_expr)) => {\n+            let (applicability, suggestions) = assignment_suggestions(cx, binding_id, [then_expr, else_expr])?;\n+\n+            span_lint_and_then(\n+                cx,\n+                NEEDLESS_LATE_INIT,\n+                local_stmt.span,\n+                \"unneeded late initalization\",\n+                |diag| {\n+                    diag.tool_only_span_suggestion(local_stmt.span, \"remove the local\", String::new(), applicability);\n+\n+                    diag.span_suggestion_verbose(\n+                        usage.stmt.span.shrink_to_lo(),\n+                        &format!(\"declare `{}` here\", binding_name),\n+                        format!(\"{} = \", let_snippet),\n+                        applicability,\n+                    );\n+\n+                    diag.multipart_suggestion(\"remove the assignments from the branches\", suggestions, applicability);\n+\n+                    if usage.needs_semi {\n+                        diag.span_suggestion(\n+                            usage.stmt.span.shrink_to_hi(),\n+                            \"add a semicolon after the `if` expression\",\n+                            \";\".to_string(),\n+                            applicability,\n+                        );\n+                    }\n+                },\n+            );\n+        },\n+        ExprKind::Match(_, arms, MatchSource::Normal) => {\n+            let (applicability, suggestions) = assignment_suggestions(cx, binding_id, arms.iter().map(|arm| arm.body))?;\n+\n+            span_lint_and_then(\n+                cx,\n+                NEEDLESS_LATE_INIT,\n+                local_stmt.span,\n+                \"unneeded late initalization\",\n+                |diag| {\n+                    diag.tool_only_span_suggestion(local_stmt.span, \"remove the local\", String::new(), applicability);\n+\n+                    diag.span_suggestion_verbose(\n+                        usage.stmt.span.shrink_to_lo(),\n+                        &format!(\"declare `{}` here\", binding_name),\n+                        format!(\"{} = \", let_snippet),\n+                        applicability,\n+                    );\n+\n+                    diag.multipart_suggestion(\n+                        \"remove the assignments from the `match` arms\",\n+                        suggestions,\n+                        applicability,\n+                    );\n+\n+                    if usage.needs_semi {\n+                        diag.span_suggestion(\n+                            usage.stmt.span.shrink_to_hi(),\n+                            \"add a semicolon after the `match` expression\",\n+                            \";\".to_string(),\n+                            applicability,\n+                        );\n+                    }\n+                },\n+            );\n+        },\n+        _ => {},\n+    };\n+\n+    Some(())\n+}\n+\n+impl LateLintPass<'tcx> for NeedlessLateInit {\n+    fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'tcx>) {\n+        let mut parents = cx.tcx.hir().parent_iter(local.hir_id);\n+\n+        if_chain! {\n+            if let Local {\n+                init: None,\n+                pat: &Pat {\n+                    kind: PatKind::Binding(_, binding_id, _, None),\n+                    ..\n+                },\n+                source: LocalSource::Normal,\n+                ..\n+            } = local;\n+            if let Some((_, Node::Stmt(local_stmt))) = parents.next();\n+            if let Some((_, Node::Block(block))) = parents.next();\n+\n+            then {\n+                check(cx, local, local_stmt, block, binding_id);\n+            }\n+        }\n+    }\n+}"}, {"sha": "6fcc9ca29b923b166bf7009a4d57b1725473b388", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3720735f9abb7e5dca142a03db8063579bfca6b0/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3720735f9abb7e5dca142a03db8063579bfca6b0/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=3720735f9abb7e5dca142a03db8063579bfca6b0", "patch": "@@ -164,12 +164,13 @@ fn check_unnecessary_operation(cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) {\n         if !&reduced.iter().any(|e| e.span.from_expansion());\n         then {\n             if let ExprKind::Index(..) = &expr.kind {\n-                let snippet;\n-                if let (Some(arr), Some(func)) = (snippet_opt(cx, reduced[0].span), snippet_opt(cx, reduced[1].span)) {\n-                    snippet = format!(\"assert!({}.len() > {});\", &arr, &func);\n+                let snippet = if let (Some(arr), Some(func)) =\n+                    (snippet_opt(cx, reduced[0].span), snippet_opt(cx, reduced[1].span))\n+                {\n+                    format!(\"assert!({}.len() > {});\", &arr, &func)\n                 } else {\n                     return;\n-                }\n+                };\n                 span_lint_hir_and_then(\n                     cx,\n                     UNNECESSARY_OPERATION,"}, {"sha": "c5cb2eb1fe1c2e66a727e317a0a13ffa169b8df2", "filename": "tests/ui/let_if_seq.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3720735f9abb7e5dca142a03db8063579bfca6b0/tests%2Fui%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3720735f9abb7e5dca142a03db8063579bfca6b0/tests%2Fui%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_if_seq.rs?ref=3720735f9abb7e5dca142a03db8063579bfca6b0", "patch": "@@ -3,7 +3,8 @@\n     unused_assignments,\n     clippy::similar_names,\n     clippy::blacklisted_name,\n-    clippy::branches_sharing_code\n+    clippy::branches_sharing_code,\n+    clippy::needless_late_init\n )]\n #![warn(clippy::useless_let_if_seq)]\n "}, {"sha": "271ccce681c9fe4bb5a05f6a976bb16b7a894f91", "filename": "tests/ui/let_if_seq.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3720735f9abb7e5dca142a03db8063579bfca6b0/tests%2Fui%2Flet_if_seq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3720735f9abb7e5dca142a03db8063579bfca6b0/tests%2Fui%2Flet_if_seq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_if_seq.stderr?ref=3720735f9abb7e5dca142a03db8063579bfca6b0", "patch": "@@ -1,5 +1,5 @@\n error: `if _ { .. } else { .. }` is an expression\n-  --> $DIR/let_if_seq.rs:65:5\n+  --> $DIR/let_if_seq.rs:66:5\n    |\n LL | /     let mut foo = 0;\n LL | |     if f() {\n@@ -11,7 +11,7 @@ LL | |     }\n    = note: you might not need `mut` at all\n \n error: `if _ { .. } else { .. }` is an expression\n-  --> $DIR/let_if_seq.rs:70:5\n+  --> $DIR/let_if_seq.rs:71:5\n    |\n LL | /     let mut bar = 0;\n LL | |     if f() {\n@@ -25,7 +25,7 @@ LL | |     }\n    = note: you might not need `mut` at all\n \n error: `if _ { .. } else { .. }` is an expression\n-  --> $DIR/let_if_seq.rs:78:5\n+  --> $DIR/let_if_seq.rs:79:5\n    |\n LL | /     let quz;\n LL | |     if f() {\n@@ -36,7 +36,7 @@ LL | |     }\n    | |_____^ help: it is more idiomatic to write: `let quz = if f() { 42 } else { 0 };`\n \n error: `if _ { .. } else { .. }` is an expression\n-  --> $DIR/let_if_seq.rs:107:5\n+  --> $DIR/let_if_seq.rs:108:5\n    |\n LL | /     let mut baz = 0;\n LL | |     if f() {"}, {"sha": "b2bc97f4744a5dc749ac2bed1dae58bf1efe5788", "filename": "tests/ui/min_max.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3720735f9abb7e5dca142a03db8063579bfca6b0/tests%2Fui%2Fmin_max.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3720735f9abb7e5dca142a03db8063579bfca6b0/tests%2Fui%2Fmin_max.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_max.rs?ref=3720735f9abb7e5dca142a03db8063579bfca6b0", "patch": "@@ -19,8 +19,7 @@ impl NotOrd {\n }\n \n fn main() {\n-    let x;\n-    x = 2usize;\n+    let x = 2usize;\n     min(1, max(3, x));\n     min(max(3, x), 1);\n     max(min(x, 1), 3);\n@@ -35,9 +34,7 @@ fn main() {\n     let y = 2isize;\n     min(max(y, -1), 3);\n \n-    let s;\n-    s = \"Hello\";\n-\n+    let s = \"Hello\";\n     min(\"Apple\", max(\"Zoo\", s));\n     max(min(s, \"Apple\"), \"Zoo\");\n "}, {"sha": "c70b77eabbd8515abd0d0bab9a1cd869166a007a", "filename": "tests/ui/min_max.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3720735f9abb7e5dca142a03db8063579bfca6b0/tests%2Fui%2Fmin_max.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3720735f9abb7e5dca142a03db8063579bfca6b0/tests%2Fui%2Fmin_max.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_max.stderr?ref=3720735f9abb7e5dca142a03db8063579bfca6b0", "patch": "@@ -1,79 +1,79 @@\n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:24:5\n+  --> $DIR/min_max.rs:23:5\n    |\n LL |     min(1, max(3, x));\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::min-max` implied by `-D warnings`\n \n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:25:5\n+  --> $DIR/min_max.rs:24:5\n    |\n LL |     min(max(3, x), 1);\n    |     ^^^^^^^^^^^^^^^^^\n \n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:26:5\n+  --> $DIR/min_max.rs:25:5\n    |\n LL |     max(min(x, 1), 3);\n    |     ^^^^^^^^^^^^^^^^^\n \n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:27:5\n+  --> $DIR/min_max.rs:26:5\n    |\n LL |     max(3, min(x, 1));\n    |     ^^^^^^^^^^^^^^^^^\n \n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:29:5\n+  --> $DIR/min_max.rs:28:5\n    |\n LL |     my_max(3, my_min(x, 1));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:41:5\n+  --> $DIR/min_max.rs:38:5\n    |\n LL |     min(\"Apple\", max(\"Zoo\", s));\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:42:5\n+  --> $DIR/min_max.rs:39:5\n    |\n LL |     max(min(s, \"Apple\"), \"Zoo\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:47:5\n+  --> $DIR/min_max.rs:44:5\n    |\n LL |     x.min(1).max(3);\n    |     ^^^^^^^^^^^^^^^\n \n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:48:5\n+  --> $DIR/min_max.rs:45:5\n    |\n LL |     x.max(3).min(1);\n    |     ^^^^^^^^^^^^^^^\n \n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:49:5\n+  --> $DIR/min_max.rs:46:5\n    |\n LL |     f.max(3f32).min(1f32);\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:55:5\n+  --> $DIR/min_max.rs:52:5\n    |\n LL |     max(x.min(1), 3);\n    |     ^^^^^^^^^^^^^^^^\n \n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:58:5\n+  --> $DIR/min_max.rs:55:5\n    |\n LL |     s.max(\"Zoo\").min(\"Apple\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this `min`/`max` combination leads to constant result\n-  --> $DIR/min_max.rs:59:5\n+  --> $DIR/min_max.rs:56:5\n    |\n LL |     s.min(\"Apple\").max(\"Zoo\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "6fdb4cc566f58f62a956ded4c0ada435da02c990", "filename": "tests/ui/needless_late_init.rs", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/3720735f9abb7e5dca142a03db8063579bfca6b0/tests%2Fui%2Fneedless_late_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3720735f9abb7e5dca142a03db8063579bfca6b0/tests%2Fui%2Fneedless_late_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_late_init.rs?ref=3720735f9abb7e5dca142a03db8063579bfca6b0", "patch": "@@ -0,0 +1,167 @@\n+#![allow(unused)]\n+\n+fn main() {\n+    let a;\n+    let n = 1;\n+    match n {\n+        1 => a = \"one\",\n+        _ => {\n+            a = \"two\";\n+        },\n+    }\n+\n+    let b;\n+    if n == 3 {\n+        b = \"four\";\n+    } else {\n+        b = \"five\"\n+    }\n+\n+    let c;\n+    if let Some(n) = Some(5) {\n+        c = n;\n+    } else {\n+        c = -50;\n+    }\n+\n+    let d;\n+    if true {\n+        let temp = 5;\n+        d = temp;\n+    } else {\n+        d = 15;\n+    }\n+\n+    let e;\n+    if true {\n+        e = format!(\"{} {}\", a, b);\n+    } else {\n+        e = format!(\"{}\", c);\n+    }\n+\n+    println!(\"{}\", a);\n+}\n+\n+async fn in_async() -> &'static str {\n+    async fn f() -> &'static str {\n+        \"one\"\n+    }\n+\n+    let a;\n+    let n = 1;\n+    match n {\n+        1 => a = f().await,\n+        _ => {\n+            a = \"two\";\n+        },\n+    }\n+\n+    a\n+}\n+\n+const fn in_const() -> &'static str {\n+    const fn f() -> &'static str {\n+        \"one\"\n+    }\n+\n+    let a;\n+    let n = 1;\n+    match n {\n+        1 => a = f(),\n+        _ => {\n+            a = \"two\";\n+        },\n+    }\n+\n+    a\n+}\n+\n+fn does_not_lint() {\n+    let z;\n+    if false {\n+        z = 1;\n+    }\n+\n+    let x;\n+    let y;\n+    if true {\n+        x = 1;\n+    } else {\n+        y = 1;\n+    }\n+\n+    let mut x;\n+    if true {\n+        x = 5;\n+        x = 10 / x;\n+    } else {\n+        x = 2;\n+    }\n+\n+    let x;\n+    let _ = match 1 {\n+        1 => x = 10,\n+        _ => x = 20,\n+    };\n+\n+    // using tuples would be possible, but not always preferable\n+    let x;\n+    let y;\n+    if true {\n+        x = 1;\n+        y = 2;\n+    } else {\n+        x = 3;\n+        y = 4;\n+    }\n+\n+    // could match with a smarter heuristic to avoid multiple assignments\n+    let x;\n+    if true {\n+        let mut y = 5;\n+        y = 6;\n+        x = y;\n+    } else {\n+        x = 2;\n+    }\n+\n+    let (x, y);\n+    if true {\n+        x = 1;\n+    } else {\n+        x = 2;\n+    }\n+    y = 3;\n+\n+    macro_rules! assign {\n+        ($i:ident) => {\n+            $i = 1;\n+        };\n+    }\n+    let x;\n+    assign!(x);\n+\n+    let x;\n+    if true {\n+        assign!(x);\n+    } else {\n+        x = 2;\n+    }\n+\n+    macro_rules! in_macro {\n+        () => {\n+            let x;\n+            x = 1;\n+\n+            let x;\n+            if true {\n+                x = 1;\n+            } else {\n+                x = 2;\n+            }\n+        };\n+    }\n+    in_macro!();\n+\n+    println!(\"{}\", x);\n+}"}, {"sha": "cbb7538c63b3e3aac924ef7de4a54362e599e4db", "filename": "tests/ui/needless_late_init.stderr", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/3720735f9abb7e5dca142a03db8063579bfca6b0/tests%2Fui%2Fneedless_late_init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3720735f9abb7e5dca142a03db8063579bfca6b0/tests%2Fui%2Fneedless_late_init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_late_init.stderr?ref=3720735f9abb7e5dca142a03db8063579bfca6b0", "patch": "@@ -0,0 +1,150 @@\n+error: unneeded late initalization\n+  --> $DIR/needless_late_init.rs:4:5\n+   |\n+LL |     let a;\n+   |     ^^^^^^\n+   |\n+   = note: `-D clippy::needless-late-init` implied by `-D warnings`\n+help: declare `a` here\n+   |\n+LL |     let a = match n {\n+   |     +++++++\n+help: remove the assignments from the `match` arms\n+   |\n+LL ~         1 => \"one\",\n+LL |         _ => {\n+LL ~             \"two\"\n+   |\n+help: add a semicolon after the `match` expression\n+   |\n+LL |     };\n+   |      +\n+\n+error: unneeded late initalization\n+  --> $DIR/needless_late_init.rs:13:5\n+   |\n+LL |     let b;\n+   |     ^^^^^^\n+   |\n+help: declare `b` here\n+   |\n+LL |     let b = if n == 3 {\n+   |     +++++++\n+help: remove the assignments from the branches\n+   |\n+LL ~         \"four\"\n+LL |     } else {\n+LL ~         \"five\"\n+   |\n+help: add a semicolon after the `if` expression\n+   |\n+LL |     };\n+   |      +\n+\n+error: unneeded late initalization\n+  --> $DIR/needless_late_init.rs:20:5\n+   |\n+LL |     let c;\n+   |     ^^^^^^\n+   |\n+help: declare `c` here\n+   |\n+LL |     let c = if let Some(n) = Some(5) {\n+   |     +++++++\n+help: remove the assignments from the branches\n+   |\n+LL ~         n\n+LL |     } else {\n+LL ~         -50\n+   |\n+help: add a semicolon after the `if` expression\n+   |\n+LL |     };\n+   |      +\n+\n+error: unneeded late initalization\n+  --> $DIR/needless_late_init.rs:27:5\n+   |\n+LL |     let d;\n+   |     ^^^^^^\n+   |\n+help: declare `d` here\n+   |\n+LL |     let d = if true {\n+   |     +++++++\n+help: remove the assignments from the branches\n+   |\n+LL ~         temp\n+LL |     } else {\n+LL ~         15\n+   |\n+help: add a semicolon after the `if` expression\n+   |\n+LL |     };\n+   |      +\n+\n+error: unneeded late initalization\n+  --> $DIR/needless_late_init.rs:35:5\n+   |\n+LL |     let e;\n+   |     ^^^^^^\n+   |\n+help: declare `e` here\n+   |\n+LL |     let e = if true {\n+   |     +++++++\n+help: remove the assignments from the branches\n+   |\n+LL ~         format!(\"{} {}\", a, b)\n+LL |     } else {\n+LL ~         format!(\"{}\", c)\n+   |\n+help: add a semicolon after the `if` expression\n+   |\n+LL |     };\n+   |      +\n+\n+error: unneeded late initalization\n+  --> $DIR/needless_late_init.rs:50:5\n+   |\n+LL |     let a;\n+   |     ^^^^^^\n+   |\n+help: declare `a` here\n+   |\n+LL |     let a = match n {\n+   |     +++++++\n+help: remove the assignments from the `match` arms\n+   |\n+LL ~         1 => f().await,\n+LL |         _ => {\n+LL ~             \"two\"\n+   |\n+help: add a semicolon after the `match` expression\n+   |\n+LL |     };\n+   |      +\n+\n+error: unneeded late initalization\n+  --> $DIR/needless_late_init.rs:67:5\n+   |\n+LL |     let a;\n+   |     ^^^^^^\n+   |\n+help: declare `a` here\n+   |\n+LL |     let a = match n {\n+   |     +++++++\n+help: remove the assignments from the `match` arms\n+   |\n+LL ~         1 => f(),\n+LL |         _ => {\n+LL ~             \"two\"\n+   |\n+help: add a semicolon after the `match` expression\n+   |\n+LL |     };\n+   |      +\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "32d5d04fde4d52001484eef8e615a157eaad177e", "filename": "tests/ui/needless_late_init_fixable.fixed", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3720735f9abb7e5dca142a03db8063579bfca6b0/tests%2Fui%2Fneedless_late_init_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3720735f9abb7e5dca142a03db8063579bfca6b0/tests%2Fui%2Fneedless_late_init_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_late_init_fixable.fixed?ref=3720735f9abb7e5dca142a03db8063579bfca6b0", "patch": "@@ -0,0 +1,38 @@\n+// run-rustfix\n+\n+#![allow(unused, clippy::assign_op_pattern)]\n+\n+fn main() {\n+    \n+    let a = \"zero\";\n+\n+    \n+    \n+    let b = 1;\n+    let c = 2;\n+\n+    \n+    let d: usize = 1;\n+\n+    \n+    let mut e = 1;\n+    e = 2;\n+\n+    \n+    let f = match 1 {\n+        1 => \"three\",\n+        _ => return,\n+    }; // has semi\n+\n+    \n+    let g: usize = if true {\n+        5\n+    } else {\n+        panic!();\n+    };\n+\n+    \n+    let h = format!(\"{}\", e);\n+\n+    println!(\"{}\", a);\n+}"}, {"sha": "6bc85f686325d5f59c28e5f26d70cfed658e60d7", "filename": "tests/ui/needless_late_init_fixable.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3720735f9abb7e5dca142a03db8063579bfca6b0/tests%2Fui%2Fneedless_late_init_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3720735f9abb7e5dca142a03db8063579bfca6b0/tests%2Fui%2Fneedless_late_init_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_late_init_fixable.rs?ref=3720735f9abb7e5dca142a03db8063579bfca6b0", "patch": "@@ -0,0 +1,38 @@\n+// run-rustfix\n+\n+#![allow(unused, clippy::assign_op_pattern)]\n+\n+fn main() {\n+    let a;\n+    a = \"zero\";\n+\n+    let b;\n+    let c;\n+    b = 1;\n+    c = 2;\n+\n+    let d: usize;\n+    d = 1;\n+\n+    let mut e;\n+    e = 1;\n+    e = 2;\n+\n+    let f;\n+    match 1 {\n+        1 => f = \"three\",\n+        _ => return,\n+    }; // has semi\n+\n+    let g: usize;\n+    if true {\n+        g = 5;\n+    } else {\n+        panic!();\n+    }\n+\n+    let h;\n+    h = format!(\"{}\", e);\n+\n+    println!(\"{}\", a);\n+}"}, {"sha": "a0ce4f812f4e511e2c2436dda7237b7adb22ebfc", "filename": "tests/ui/needless_late_init_fixable.stderr", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/3720735f9abb7e5dca142a03db8063579bfca6b0/tests%2Fui%2Fneedless_late_init_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3720735f9abb7e5dca142a03db8063579bfca6b0/tests%2Fui%2Fneedless_late_init_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_late_init_fixable.stderr?ref=3720735f9abb7e5dca142a03db8063579bfca6b0", "patch": "@@ -0,0 +1,103 @@\n+error: unneeded late initalization\n+  --> $DIR/needless_late_init_fixable.rs:6:5\n+   |\n+LL |     let a;\n+   |     ^^^^^^\n+   |\n+   = note: `-D clippy::needless-late-init` implied by `-D warnings`\n+help: declare `a` here\n+   |\n+LL |     let a = \"zero\";\n+   |     ~~~~~\n+\n+error: unneeded late initalization\n+  --> $DIR/needless_late_init_fixable.rs:9:5\n+   |\n+LL |     let b;\n+   |     ^^^^^^\n+   |\n+help: declare `b` here\n+   |\n+LL |     let b = 1;\n+   |     ~~~~~\n+\n+error: unneeded late initalization\n+  --> $DIR/needless_late_init_fixable.rs:10:5\n+   |\n+LL |     let c;\n+   |     ^^^^^^\n+   |\n+help: declare `c` here\n+   |\n+LL |     let c = 2;\n+   |     ~~~~~\n+\n+error: unneeded late initalization\n+  --> $DIR/needless_late_init_fixable.rs:14:5\n+   |\n+LL |     let d: usize;\n+   |     ^^^^^^^^^^^^^\n+   |\n+help: declare `d` here\n+   |\n+LL |     let d: usize = 1;\n+   |     ~~~~~~~~~~~~\n+\n+error: unneeded late initalization\n+  --> $DIR/needless_late_init_fixable.rs:17:5\n+   |\n+LL |     let mut e;\n+   |     ^^^^^^^^^^\n+   |\n+help: declare `e` here\n+   |\n+LL |     let mut e = 1;\n+   |     ~~~~~~~~~\n+\n+error: unneeded late initalization\n+  --> $DIR/needless_late_init_fixable.rs:21:5\n+   |\n+LL |     let f;\n+   |     ^^^^^^\n+   |\n+help: declare `f` here\n+   |\n+LL |     let f = match 1 {\n+   |     +++++++\n+help: remove the assignments from the `match` arms\n+   |\n+LL |         1 => \"three\",\n+   |              ~~~~~~~\n+\n+error: unneeded late initalization\n+  --> $DIR/needless_late_init_fixable.rs:27:5\n+   |\n+LL |     let g: usize;\n+   |     ^^^^^^^^^^^^^\n+   |\n+help: declare `g` here\n+   |\n+LL |     let g: usize = if true {\n+   |     ++++++++++++++\n+help: remove the assignments from the branches\n+   |\n+LL |         5\n+   |\n+help: add a semicolon after the `if` expression\n+   |\n+LL |     };\n+   |      +\n+\n+error: unneeded late initalization\n+  --> $DIR/needless_late_init_fixable.rs:34:5\n+   |\n+LL |     let h;\n+   |     ^^^^^^\n+   |\n+help: declare `h` here\n+   |\n+LL |     let h = format!(\"{}\", e);\n+   |     ~~~~~\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "5612827bd39331f5804d5866c8c534ceab0d1436", "filename": "tests/ui/redundant_closure_call_late.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3720735f9abb7e5dca142a03db8063579bfca6b0/tests%2Fui%2Fredundant_closure_call_late.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3720735f9abb7e5dca142a03db8063579bfca6b0/tests%2Fui%2Fredundant_closure_call_late.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_late.rs?ref=3720735f9abb7e5dca142a03db8063579bfca6b0", "patch": "@@ -1,6 +1,7 @@\n // non rustfixable, see redundant_closure_call_fixable.rs\n \n #![warn(clippy::redundant_closure_call)]\n+#![allow(clippy::needless_late_init)]\n \n fn main() {\n     let mut i = 1;"}, {"sha": "4eca43a2b599ab149a41f67dbd2f7ab875b277d4", "filename": "tests/ui/redundant_closure_call_late.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3720735f9abb7e5dca142a03db8063579bfca6b0/tests%2Fui%2Fredundant_closure_call_late.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3720735f9abb7e5dca142a03db8063579bfca6b0/tests%2Fui%2Fredundant_closure_call_late.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call_late.stderr?ref=3720735f9abb7e5dca142a03db8063579bfca6b0", "patch": "@@ -1,19 +1,19 @@\n error: closure called just once immediately after it was declared\n-  --> $DIR/redundant_closure_call_late.rs:15:5\n+  --> $DIR/redundant_closure_call_late.rs:16:5\n    |\n LL |     i = redun_closure();\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::redundant-closure-call` implied by `-D warnings`\n \n error: closure called just once immediately after it was declared\n-  --> $DIR/redundant_closure_call_late.rs:19:5\n+  --> $DIR/redundant_closure_call_late.rs:20:5\n    |\n LL |     i = shadowed_closure();\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: closure called just once immediately after it was declared\n-  --> $DIR/redundant_closure_call_late.rs:21:5\n+  --> $DIR/redundant_closure_call_late.rs:22:5\n    |\n LL |     i = shadowed_closure();\n    |     ^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "64f566735cd95c366eb04b65ffdbe563ea57ee1e", "filename": "tests/ui/redundant_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3720735f9abb7e5dca142a03db8063579bfca6b0/tests%2Fui%2Fredundant_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3720735f9abb7e5dca142a03db8063579bfca6b0/tests%2Fui%2Fredundant_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_else.rs?ref=3720735f9abb7e5dca142a03db8063579bfca6b0", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::redundant_else)]\n-#![allow(clippy::needless_return, clippy::if_same_then_else)]\n+#![allow(clippy::needless_return, clippy::if_same_then_else, clippy::needless_late_init)]\n \n fn main() {\n     loop {"}]}