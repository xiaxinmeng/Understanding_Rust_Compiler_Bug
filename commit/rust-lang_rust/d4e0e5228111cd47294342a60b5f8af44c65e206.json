{"sha": "d4e0e5228111cd47294342a60b5f8af44c65e206", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZTBlNTIyODExMWNkNDcyOTQzNDJhNjBiNWY4YWY0NGM2NWUyMDY=", "commit": {"author": {"name": "Malo Jaffr\u00e9", "email": "jaffre.malo@gmail.com", "date": "2017-08-17T18:02:13Z"}, "committer": {"name": "Malo Jaffr\u00e9", "email": "jaffre.malo@gmail.com", "date": "2017-08-17T18:03:32Z"}, "message": "Accept underscores in unicode escapes\n\nFixes #43692.", "tree": {"sha": "5364e51b1733e40ff74fb64564ff76e2603e2778", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5364e51b1733e40ff74fb64564ff76e2603e2778"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4e0e5228111cd47294342a60b5f8af44c65e206", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4e0e5228111cd47294342a60b5f8af44c65e206", "html_url": "https://github.com/rust-lang/rust/commit/d4e0e5228111cd47294342a60b5f8af44c65e206", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4e0e5228111cd47294342a60b5f8af44c65e206/comments", "author": {"login": "MaloJaffre", "id": 16278359, "node_id": "MDQ6VXNlcjE2Mjc4MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/16278359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaloJaffre", "html_url": "https://github.com/MaloJaffre", "followers_url": "https://api.github.com/users/MaloJaffre/followers", "following_url": "https://api.github.com/users/MaloJaffre/following{/other_user}", "gists_url": "https://api.github.com/users/MaloJaffre/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaloJaffre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaloJaffre/subscriptions", "organizations_url": "https://api.github.com/users/MaloJaffre/orgs", "repos_url": "https://api.github.com/users/MaloJaffre/repos", "events_url": "https://api.github.com/users/MaloJaffre/events{/privacy}", "received_events_url": "https://api.github.com/users/MaloJaffre/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MaloJaffre", "id": 16278359, "node_id": "MDQ6VXNlcjE2Mjc4MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/16278359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaloJaffre", "html_url": "https://github.com/MaloJaffre", "followers_url": "https://api.github.com/users/MaloJaffre/followers", "following_url": "https://api.github.com/users/MaloJaffre/following{/other_user}", "gists_url": "https://api.github.com/users/MaloJaffre/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaloJaffre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaloJaffre/subscriptions", "organizations_url": "https://api.github.com/users/MaloJaffre/orgs", "repos_url": "https://api.github.com/users/MaloJaffre/repos", "events_url": "https://api.github.com/users/MaloJaffre/events{/privacy}", "received_events_url": "https://api.github.com/users/MaloJaffre/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd39ecf368a3cdb937e129f36a2a342d0c9358f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd39ecf368a3cdb937e129f36a2a342d0c9358f0", "html_url": "https://github.com/rust-lang/rust/commit/dd39ecf368a3cdb937e129f36a2a342d0c9358f0"}], "stats": {"total": 157, "additions": 101, "deletions": 56}, "files": [{"sha": "a80b7a112b0abaafc0265337743f60614c57abc5", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 47, "deletions": 40, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/d4e0e5228111cd47294342a60b5f8af44c65e206/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e0e5228111cd47294342a60b5f8af44c65e206/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=d4e0e5228111cd47294342a60b5f8af44c65e206", "patch": "@@ -963,60 +963,67 @@ impl<'a> StringReader<'a> {\n         true\n     }\n \n-    /// Scan over a \\u{...} escape\n+    /// Scan over a `\\u{...}` escape\n     ///\n-    /// At this point, we have already seen the \\ and the u, the { is the current character. We\n-    /// will read at least one digit, and up to 6, and pass over the }.\n+    /// At this point, we have already seen the `\\` and the `u`, the `{` is the current character.\n+    /// We will read a hex number (with `_` separators), with 1 to 6 actual digits,\n+    /// and pass over the `}`.\n     fn scan_unicode_escape(&mut self, delim: char) -> bool {\n         self.bump(); // past the {\n         let start_bpos = self.pos;\n-        let mut count = 0;\n-        let mut accum_int = 0;\n         let mut valid = true;\n \n-        while !self.ch_is('}') && count <= 6 {\n-            let c = match self.ch {\n-                Some(c) => c,\n-                None => {\n-                    panic!(self.fatal_span_(start_bpos,\n-                                            self.pos,\n-                                            \"unterminated unicode escape (found EOF)\"));\n-                }\n-            };\n-            accum_int *= 16;\n-            accum_int += c.to_digit(16).unwrap_or_else(|| {\n-                if c == delim {\n-                    panic!(self.fatal_span_(self.pos,\n-                                            self.next_pos,\n-                                            \"unterminated unicode escape (needed a `}`)\"));\n-                } else {\n-                    self.err_span_char(self.pos,\n-                                       self.next_pos,\n-                                       \"invalid character in unicode escape\",\n-                                       c);\n-                }\n-                valid = false;\n-                0\n-            });\n-            self.bump();\n-            count += 1;\n+        if let Some('_') = self.ch {\n+            // disallow leading `_`\n+            self.err_span_(self.pos,\n+                           self.next_pos,\n+                           \"invalid start of unicode escape\");\n+            valid = false;\n         }\n \n+        let count = self.scan_digits(16, 16);\n+\n         if count > 6 {\n             self.err_span_(start_bpos,\n                            self.pos,\n-                           \"overlong unicode escape (can have at most 6 hex digits)\");\n+                           \"overlong unicode escape (must have at most 6 hex digits)\");\n             valid = false;\n         }\n-\n-        if valid && (char::from_u32(accum_int).is_none() || count == 0) {\n-            self.err_span_(start_bpos,\n-                           self.pos,\n-                           \"invalid unicode character escape\");\n-            valid = false;\n+        loop {\n+            match self.ch {\n+                Some('}') => {\n+                    if valid && count == 0 {\n+                        self.err_span_(start_bpos,\n+                                       self.pos,\n+                                       \"empty unicode escape (must have at least 1 hex digit)\");\n+                        valid = false;\n+                    }\n+                    self.bump(); // past the ending `}`\n+                    break;\n+                },\n+                Some(c) => {\n+                    if c == delim {\n+                        self.err_span_(self.pos,\n+                                       self.pos,\n+                                       \"unterminated unicode escape (needed a `}`)\");\n+                        valid = false;\n+                        break;\n+                    } else if valid {\n+                        self.err_span_char(start_bpos,\n+                                           self.pos,\n+                                           \"invalid character in unicode escape\",\n+                                           c);\n+                        valid = false;\n+                    }\n+                },\n+                None => {\n+                    panic!(self.fatal_span_(start_bpos,\n+                                            self.pos,\n+                                            \"unterminated unicode escape (found EOF)\"));\n+                }\n+            }\n+            self.bump();\n         }\n-\n-        self.bump(); // past the ending }\n         valid\n     }\n "}, {"sha": "4ef640b11975ac241f6663c43f7273d96cfbe76b", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d4e0e5228111cd47294342a60b5f8af44c65e206/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e0e5228111cd47294342a60b5f8af44c65e206/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=d4e0e5228111cd47294342a60b5f8af44c65e206", "patch": "@@ -230,7 +230,7 @@ pub fn stream_to_parser(sess: &ParseSess, stream: TokenStream) -> Parser {\n /// Rather than just accepting/rejecting a given literal, unescapes it as\n /// well. Can take any slice prefixed by a character escape. Returns the\n /// character and the number of characters consumed.\n-pub fn char_lit(lit: &str) -> (char, isize) {\n+pub fn char_lit(lit: &str, diag: Option<(Span, &Handler)>) -> (char, isize) {\n     use std::char;\n \n     // Handle non-escaped chars first.\n@@ -258,8 +258,19 @@ pub fn char_lit(lit: &str) -> (char, isize) {\n         'u' => {\n             assert_eq!(lit.as_bytes()[2], b'{');\n             let idx = lit.find('}').unwrap();\n-            let v = u32::from_str_radix(&lit[3..idx], 16).unwrap();\n-            let c = char::from_u32(v).unwrap();\n+            let s = &lit[3..idx].chars().filter(|&c| c != '_').collect::<String>();\n+            let v = u32::from_str_radix(&s, 16).unwrap();\n+            let c = char::from_u32(v).unwrap_or_else(|| {\n+                if let Some((span, diag)) = diag {\n+                    let mut diag = diag.struct_span_err(span, \"invalid unicode character escape\");\n+                    if v > 0x10FFFF {\n+                        diag.help(\"unicode escape must be at most 10FFFF\").emit();\n+                    } else {\n+                        diag.help(\"unicode escape must not be a surrogate\").emit();\n+                    }\n+                }\n+                '\\u{FFFD}'\n+            });\n             (c, (idx + 1) as isize)\n         }\n         _ => panic!(\"lexer should have rejected a bad character escape {}\", lit)\n@@ -272,7 +283,7 @@ pub fn escape_default(s: &str) -> String {\n \n /// Parse a string representing a string literal into its final form. Does\n /// unescaping.\n-pub fn str_lit(lit: &str) -> String {\n+pub fn str_lit(lit: &str, diag: Option<(Span, &Handler)>) -> String {\n     debug!(\"parse_str_lit: given {}\", escape_default(lit));\n     let mut res = String::with_capacity(lit.len());\n \n@@ -313,7 +324,7 @@ pub fn str_lit(lit: &str) -> String {\n                     eat(&mut chars);\n                 } else {\n                     // otherwise, a normal escape\n-                    let (c, n) = char_lit(&lit[i..]);\n+                    let (c, n) = char_lit(&lit[i..], diag);\n                     for _ in 0..n - 1 { // we don't need to move past the first \\\n                         chars.next();\n                     }\n@@ -385,15 +396,15 @@ pub fn lit_token(lit: token::Lit, suf: Option<Symbol>, diag: Option<(Span, &Hand\n \n     match lit {\n        token::Byte(i) => (true, Some(LitKind::Byte(byte_lit(&i.as_str()).0))),\n-       token::Char(i) => (true, Some(LitKind::Char(char_lit(&i.as_str()).0))),\n+       token::Char(i) => (true, Some(LitKind::Char(char_lit(&i.as_str(), diag).0))),\n \n         // There are some valid suffixes for integer and float literals,\n         // so all the handling is done internally.\n         token::Integer(s) => (false, integer_lit(&s.as_str(), suf, diag)),\n         token::Float(s) => (false, float_lit(&s.as_str(), suf, diag)),\n \n         token::Str_(s) => {\n-            let s = Symbol::intern(&str_lit(&s.as_str()));\n+            let s = Symbol::intern(&str_lit(&s.as_str(), diag));\n             (true, Some(LitKind::Str(s, ast::StrStyle::Cooked)))\n         }\n         token::StrRaw(s, n) => {"}, {"sha": "dfeaae490021a4f151d8c97c9cb75cd9b99c8261", "filename": "src/test/parse-fail/issue-23620-invalid-escapes.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d4e0e5228111cd47294342a60b5f8af44c65e206/src%2Ftest%2Fparse-fail%2Fissue-23620-invalid-escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e0e5228111cd47294342a60b5f8af44c65e206/src%2Ftest%2Fparse-fail%2Fissue-23620-invalid-escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-23620-invalid-escapes.rs?ref=d4e0e5228111cd47294342a60b5f8af44c65e206", "patch": "@@ -41,9 +41,8 @@ fn main() {\n     //~^^^ ERROR incorrect unicode escape sequence\n     //~^^^^ ERROR unicode escape sequences cannot be used as a byte or in a byte string\n \n-    let _ = \"\\u{ffffff} \\xf \\u\";\n-    //~^ ERROR invalid unicode character escape\n-    //~^^ ERROR invalid character in numeric character escape:\n-    //~^^^ ERROR form of character escape may only be used with characters in the range [\\x00-\\x7f]\n-    //~^^^^ ERROR incorrect unicode escape sequence\n+    let _ = \"\\xf \\u\";\n+    //~^ ERROR invalid character in numeric character escape:\n+    //~^^ ERROR form of character escape may only be used with characters in the range [\\x00-\\x7f]\n+    //~^^^ ERROR incorrect unicode escape sequence\n }"}, {"sha": "eb5d050e1022d33fa6eee3f2026919d185da7b63", "filename": "src/test/parse-fail/issue-43692.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d4e0e5228111cd47294342a60b5f8af44c65e206/src%2Ftest%2Fparse-fail%2Fissue-43692.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e0e5228111cd47294342a60b5f8af44c65e206/src%2Ftest%2Fparse-fail%2Fissue-43692.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-43692.rs?ref=d4e0e5228111cd47294342a60b5f8af44c65e206", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only\n+\n+fn main() {\n+    '\\u{_10FFFF}'; //~ ERROR invalid start of unicode escape\n+}"}, {"sha": "cdadaef1b59a87ec05ac89d8bbad5558c6104c7c", "filename": "src/test/parse-fail/new-unicode-escapes-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4e0e5228111cd47294342a60b5f8af44c65e206/src%2Ftest%2Fparse-fail%2Fnew-unicode-escapes-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e0e5228111cd47294342a60b5f8af44c65e206/src%2Ftest%2Fparse-fail%2Fnew-unicode-escapes-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fnew-unicode-escapes-2.rs?ref=d4e0e5228111cd47294342a60b5f8af44c65e206", "patch": "@@ -11,5 +11,5 @@\n // compile-flags: -Z parse-only\n \n pub fn main() {\n-    let s = \"\\u{260311111111}\"; //~ ERROR overlong unicode escape (can have at most 6 hex digits)\n+    let s = \"\\u{260311111111}\"; //~ ERROR overlong unicode escape (must have at most 6 hex digits)\n }"}, {"sha": "8189bf677129108101a86eaecea26806c4d2b890", "filename": "src/test/parse-fail/new-unicode-escapes-3.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d4e0e5228111cd47294342a60b5f8af44c65e206/src%2Ftest%2Fparse-fail%2Fnew-unicode-escapes-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e0e5228111cd47294342a60b5f8af44c65e206/src%2Ftest%2Fparse-fail%2Fnew-unicode-escapes-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fnew-unicode-escapes-3.rs?ref=d4e0e5228111cd47294342a60b5f8af44c65e206", "patch": "@@ -11,5 +11,6 @@\n // compile-flags: -Z parse-only\n \n pub fn main() {\n-    let s = \"\\u{d805}\"; //~ ERROR invalid unicode character escape\n+    let s1 = \"\\u{d805}\"; //~ ERROR invalid unicode character escape\n+    let s2 = \"\\u{ffffff}\"; //~ ERROR invalid unicode character escape\n }"}, {"sha": "8770fb319df0f297cb7fa81151aa5126a647fa51", "filename": "src/test/parse-fail/new-unicode-escapes-4.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4e0e5228111cd47294342a60b5f8af44c65e206/src%2Ftest%2Fparse-fail%2Fnew-unicode-escapes-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e0e5228111cd47294342a60b5f8af44c65e206/src%2Ftest%2Fparse-fail%2Fnew-unicode-escapes-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fnew-unicode-escapes-4.rs?ref=d4e0e5228111cd47294342a60b5f8af44c65e206", "patch": "@@ -13,6 +13,4 @@\n pub fn main() {\n     let s = \"\\u{lol}\";\n      //~^ ERROR invalid character in unicode escape: l\n-     //~^^ ERROR invalid character in unicode escape: o\n-     //~^^^ ERROR invalid character in unicode escape: l\n }"}, {"sha": "23e96f8c1bf2e8915733e0c6180799df311b59ee", "filename": "src/test/run-pass/issue-43692.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d4e0e5228111cd47294342a60b5f8af44c65e206/src%2Ftest%2Frun-pass%2Fissue-43692.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e0e5228111cd47294342a60b5f8af44c65e206/src%2Ftest%2Frun-pass%2Fissue-43692.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-43692.rs?ref=d4e0e5228111cd47294342a60b5f8af44c65e206", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    assert_eq!('\\u{10__FFFF}', '\\u{10FFFF}');\n+    assert_eq!(\"\\u{10_F0FF__}foo\\u{1_0_0_0__}\", \"\\u{10F0FF}foo\\u{1000}\");\n+}"}]}