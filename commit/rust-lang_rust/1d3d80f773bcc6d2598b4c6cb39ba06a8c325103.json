{"sha": "1d3d80f773bcc6d2598b4c6cb39ba06a8c325103", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkM2Q4MGY3NzNiY2M2ZDI1OThiNGM2Y2IzOWJhMDZhOGMzMjUxMDM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-23T18:34:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-23T18:34:57Z"}, "message": "Rollup merge of #70633 - kper:master, r=estebank\n\nConfusing suggestion on incorrect closing `}`\n\nCompiler returns\n```\nerror: unexpected closing delimiter: `}`\n  --> main.rs:20:1\n   |\n9  |             ErrorHandled::Reported => {}\n   |                                       -- this block is empty, you might have not meant to close it temp\n...\n20 | }\n   | ^ unexpected closing delimiter\n\nerror: aborting due to previous error\n```", "tree": {"sha": "01d21bf0246b1872211e7235f83c0eb8c643c8e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01d21bf0246b1872211e7235f83c0eb8c643c8e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d3d80f773bcc6d2598b4c6cb39ba06a8c325103", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeod/RCRBK7hj4Ov3rIwAAdHIIAJscWK7Oz1A3qLxAp9pjNGoG\nqrgkZSVP6PW1ifcD8nUP21R4rPX9LJul0drHaJhy3KOcIuvkFOjY5YOVjZCyPraW\nmqSjngFcvGjsWxqS+PPFr8WB0n/z1umbvzj5QkU4M34jBQOAVudHy5YSr9OIDQAd\noAtuJGJK4/VmeWs2iajgWIPGQvapGcR8C9G7SqXLu9CRmrX1DgptcHxFFULkY+M8\nZbuMkksZRwSsRN5KTCfPQE11fHQ/y+47OKIBALxtSdGLkiT9EBefe3NEN/6gxekP\ncWhLNLO/PsGDZiBqXTn6EA5zsoPWhepUIvifgMkxoEIB9jsCgu/YBpyCyJFuMx4=\n=RWLq\n-----END PGP SIGNATURE-----\n", "payload": "tree 01d21bf0246b1872211e7235f83c0eb8c643c8e6\nparent 413a12909f3b149af17d75268ed4a136afb82c36\nparent f96b92f5097a31496b0b735a8647326c5dc2ecf8\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587666897 +0200\ncommitter GitHub <noreply@github.com> 1587666897 +0200\n\nRollup merge of #70633 - kper:master, r=estebank\n\nConfusing suggestion on incorrect closing `}`\n\nCompiler returns\n```\nerror: unexpected closing delimiter: `}`\n  --> main.rs:20:1\n   |\n9  |             ErrorHandled::Reported => {}\n   |                                       -- this block is empty, you might have not meant to close it temp\n...\n20 | }\n   | ^ unexpected closing delimiter\n\nerror: aborting due to previous error\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d3d80f773bcc6d2598b4c6cb39ba06a8c325103", "html_url": "https://github.com/rust-lang/rust/commit/1d3d80f773bcc6d2598b4c6cb39ba06a8c325103", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d3d80f773bcc6d2598b4c6cb39ba06a8c325103/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "413a12909f3b149af17d75268ed4a136afb82c36", "url": "https://api.github.com/repos/rust-lang/rust/commits/413a12909f3b149af17d75268ed4a136afb82c36", "html_url": "https://github.com/rust-lang/rust/commit/413a12909f3b149af17d75268ed4a136afb82c36"}, {"sha": "f96b92f5097a31496b0b735a8647326c5dc2ecf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f96b92f5097a31496b0b735a8647326c5dc2ecf8", "html_url": "https://github.com/rust-lang/rust/commit/f96b92f5097a31496b0b735a8647326c5dc2ecf8"}], "stats": {"total": 110, "additions": 104, "deletions": 6}, "files": [{"sha": "c08659ec9f6486ac53ec260b9d91575f0734eb2b", "filename": "src/librustc_parse/lexer/tokentrees.rs", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1d3d80f773bcc6d2598b4c6cb39ba06a8c325103/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d3d80f773bcc6d2598b4c6cb39ba06a8c325103/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Flexer%2Ftokentrees.rs?ref=1d3d80f773bcc6d2598b4c6cb39ba06a8c325103", "patch": "@@ -1,6 +1,6 @@\n use super::{StringReader, UnmatchedBrace};\n \n-use rustc_ast::token::{self, Token};\n+use rustc_ast::token::{self, DelimToken, Token};\n use rustc_ast::tokenstream::{\n     DelimSpan,\n     IsJoint::{self, *},\n@@ -22,6 +22,7 @@ impl<'a> StringReader<'a> {\n             matching_delim_spans: Vec::new(),\n             last_unclosed_found_span: None,\n             last_delim_empty_block_spans: FxHashMap::default(),\n+            matching_block_spans: Vec::new(),\n         };\n         let res = tt_reader.parse_all_token_trees();\n         (res, tt_reader.unmatched_braces)\n@@ -42,6 +43,9 @@ struct TokenTreesReader<'a> {\n     last_unclosed_found_span: Option<Span>,\n     /// Collect empty block spans that might have been auto-inserted by editors.\n     last_delim_empty_block_spans: FxHashMap<token::DelimToken, Span>,\n+    /// Collect the spans of braces (Open, Close). Used only\n+    /// for detecting if blocks are empty and only braces.\n+    matching_block_spans: Vec<(Span, Span)>,\n }\n \n impl<'a> TokenTreesReader<'a> {\n@@ -77,6 +81,7 @@ impl<'a> TokenTreesReader<'a> {\n \n     fn parse_token_tree(&mut self) -> PResult<'a, TreeAndJoint> {\n         let sm = self.string_reader.sess.source_map();\n+\n         match self.token.kind {\n             token::Eof => {\n                 let msg = \"this file contains an unclosed delimiter\";\n@@ -146,6 +151,14 @@ impl<'a> TokenTreesReader<'a> {\n                             }\n                         }\n \n+                        match (open_brace, delim) {\n+                            //only add braces\n+                            (DelimToken::Brace, DelimToken::Brace) => {\n+                                self.matching_block_spans.push((open_brace_span, close_brace_span));\n+                            }\n+                            _ => {}\n+                        }\n+\n                         if self.open_braces.is_empty() {\n                             // Clear up these spans to avoid suggesting them as we've found\n                             // properly matched delimiters so far for an entire block.\n@@ -164,6 +177,7 @@ impl<'a> TokenTreesReader<'a> {\n                     token::CloseDelim(other) => {\n                         let mut unclosed_delimiter = None;\n                         let mut candidate = None;\n+\n                         if self.last_unclosed_found_span != Some(self.token.span) {\n                             // do not complain about the same unclosed delimiter multiple times\n                             self.last_unclosed_found_span = Some(self.token.span);\n@@ -224,12 +238,27 @@ impl<'a> TokenTreesReader<'a> {\n                 let mut err =\n                     self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, &msg);\n \n-                if let Some(span) = self.last_delim_empty_block_spans.remove(&delim) {\n-                    err.span_label(\n-                        span,\n-                        \"this block is empty, you might have not meant to close it\",\n-                    );\n+                // Braces are added at the end, so the last element is the biggest block\n+                if let Some(parent) = self.matching_block_spans.last() {\n+                    if let Some(span) = self.last_delim_empty_block_spans.remove(&delim) {\n+                        // Check if the (empty block) is in the last properly closed block\n+                        if (parent.0.to(parent.1)).contains(span) {\n+                            err.span_label(\n+                                span,\n+                                \"block is empty, you might have not meant to close it\",\n+                            );\n+                        } else {\n+                            err.span_label(parent.0, \"this opening brace...\");\n+\n+                            err.span_label(parent.1, \"...matches this closing brace\");\n+                        }\n+                    } else {\n+                        err.span_label(parent.0, \"this opening brace...\");\n+\n+                        err.span_label(parent.1, \"...matches this closing brace\");\n+                    }\n                 }\n+\n                 err.span_label(self.token.span, \"unexpected closing delimiter\");\n                 Err(err)\n             }"}, {"sha": "f560f68f613685ddc7ef92a5e77ae96aeddc4595", "filename": "src/test/ui/parser/issue-70583-block-is-empty-1.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1d3d80f773bcc6d2598b4c6cb39ba06a8c325103/src%2Ftest%2Fui%2Fparser%2Fissue-70583-block-is-empty-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d3d80f773bcc6d2598b4c6cb39ba06a8c325103/src%2Ftest%2Fui%2Fparser%2Fissue-70583-block-is-empty-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-70583-block-is-empty-1.rs?ref=1d3d80f773bcc6d2598b4c6cb39ba06a8c325103", "patch": "@@ -0,0 +1,20 @@\n+pub enum ErrorHandled {\n+    Reported,\n+    TooGeneric,\n+}\n+\n+impl ErrorHandled {\n+    pub fn assert_reported(self) {\n+        match self {\n+            ErrorHandled::Reported => {}\n+            ErrorHandled::TooGeneric => panic!(),\n+        }\n+    }\n+}\n+\n+fn struct_generic(x: Vec<i32>) {\n+    for v in x {\n+        println!(\"{}\", v);\n+    }\n+    }\n+} //~ ERROR unexpected closing delimiter: `}`"}, {"sha": "39bf113ef83de58b648c2b9cd038ff58a2a178e4", "filename": "src/test/ui/parser/issue-70583-block-is-empty-1.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1d3d80f773bcc6d2598b4c6cb39ba06a8c325103/src%2Ftest%2Fui%2Fparser%2Fissue-70583-block-is-empty-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d3d80f773bcc6d2598b4c6cb39ba06a8c325103/src%2Ftest%2Fui%2Fparser%2Fissue-70583-block-is-empty-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-70583-block-is-empty-1.stderr?ref=1d3d80f773bcc6d2598b4c6cb39ba06a8c325103", "patch": "@@ -0,0 +1,13 @@\n+error: unexpected closing delimiter: `}`\n+  --> $DIR/issue-70583-block-is-empty-1.rs:20:1\n+   |\n+LL | fn struct_generic(x: Vec<i32>) {\n+   |                                - this opening brace...\n+...\n+LL |     }\n+   |     - ...matches this closing brace\n+LL | }\n+   | ^ unexpected closing delimiter\n+\n+error: aborting due to previous error\n+"}, {"sha": "80f53338a689e92f831d208220ed74b51ba6b0d1", "filename": "src/test/ui/parser/issue-70583-block-is-empty-2.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1d3d80f773bcc6d2598b4c6cb39ba06a8c325103/src%2Ftest%2Fui%2Fparser%2Fissue-70583-block-is-empty-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d3d80f773bcc6d2598b4c6cb39ba06a8c325103/src%2Ftest%2Fui%2Fparser%2Fissue-70583-block-is-empty-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-70583-block-is-empty-2.rs?ref=1d3d80f773bcc6d2598b4c6cb39ba06a8c325103", "patch": "@@ -0,0 +1,14 @@\n+pub enum ErrorHandled {\n+    Reported,\n+    TooGeneric,\n+}\n+\n+impl ErrorHandled {\n+    pub fn assert_reported(self) {\n+        match self {\n+            ErrorHandled::Reported => {}}\n+                                     //^~ ERROR block is empty, you might have not meant to close it\n+            ErrorHandled::TooGeneric => panic!(),\n+        }\n+    }\n+} //~ ERROR unexpected closing delimiter: `}`"}, {"sha": "5d37b216427f6b023c0389b70121018b39a62dbc", "filename": "src/test/ui/parser/issue-70583-block-is-empty-2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1d3d80f773bcc6d2598b4c6cb39ba06a8c325103/src%2Ftest%2Fui%2Fparser%2Fissue-70583-block-is-empty-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d3d80f773bcc6d2598b4c6cb39ba06a8c325103/src%2Ftest%2Fui%2Fparser%2Fissue-70583-block-is-empty-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-70583-block-is-empty-2.stderr?ref=1d3d80f773bcc6d2598b4c6cb39ba06a8c325103", "patch": "@@ -0,0 +1,11 @@\n+error: unexpected closing delimiter: `}`\n+  --> $DIR/issue-70583-block-is-empty-2.rs:14:1\n+   |\n+LL |             ErrorHandled::Reported => {}}\n+   |                                       -- block is empty, you might have not meant to close it\n+...\n+LL | }\n+   | ^ unexpected closing delimiter\n+\n+error: aborting due to previous error\n+"}, {"sha": "424c7a60c196f06ce9707d048e40bddae1cb85dc", "filename": "src/test/ui/parser/macro-mismatched-delim-paren-brace.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1d3d80f773bcc6d2598b4c6cb39ba06a8c325103/src%2Ftest%2Fui%2Fparser%2Fmacro-mismatched-delim-paren-brace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d3d80f773bcc6d2598b4c6cb39ba06a8c325103/src%2Ftest%2Fui%2Fparser%2Fmacro-mismatched-delim-paren-brace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro-mismatched-delim-paren-brace.stderr?ref=1d3d80f773bcc6d2598b4c6cb39ba06a8c325103", "patch": "@@ -1,6 +1,11 @@\n error: unexpected closing delimiter: `}`\n   --> $DIR/macro-mismatched-delim-paren-brace.rs:5:1\n    |\n+LL | fn main() {\n+   |           - this opening brace...\n+...\n+LL |     }\n+   |     - ...matches this closing brace\n LL | }\n    | ^ unexpected closing delimiter\n "}, {"sha": "c871e549c9ec3da0b6d6f613c86796108fae24ed", "filename": "src/test/ui/parser/mismatched-delim-brace-empty-block.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d3d80f773bcc6d2598b4c6cb39ba06a8c325103/src%2Ftest%2Fui%2Fparser%2Fmismatched-delim-brace-empty-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d3d80f773bcc6d2598b4c6cb39ba06a8c325103/src%2Ftest%2Fui%2Fparser%2Fmismatched-delim-brace-empty-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-delim-brace-empty-block.stderr?ref=1d3d80f773bcc6d2598b4c6cb39ba06a8c325103", "patch": "@@ -1,6 +1,12 @@\n error: unexpected closing delimiter: `}`\n   --> $DIR/mismatched-delim-brace-empty-block.rs:5:1\n    |\n+LL | fn main() {\n+   |           - this opening brace...\n+LL | \n+LL | }\n+   | - ...matches this closing brace\n+LL |     let _ = ();\n LL | }\n    | ^ unexpected closing delimiter\n "}]}