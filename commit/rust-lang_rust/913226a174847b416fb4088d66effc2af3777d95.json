{"sha": "913226a174847b416fb4088d66effc2af3777d95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMzIyNmExNzQ4NDdiNDE2ZmI0MDg4ZDY2ZWZmYzJhZjM3NzdkOTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-02T15:48:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-02T15:48:42Z"}, "message": "Auto merge of #1084 - RalfJung:assert-panic, r=RalfJung\n\nproper support for `Assert` MIR terminators\n\nFixes https://github.com/rust-lang/miri/issues/1070\nBlocked on https://github.com/rust-lang/rust/pull/66874", "tree": {"sha": "221ed882b3940cc595f0cbcd6fd58ba6c794b6fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/221ed882b3940cc595f0cbcd6fd58ba6c794b6fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/913226a174847b416fb4088d66effc2af3777d95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/913226a174847b416fb4088d66effc2af3777d95", "html_url": "https://github.com/rust-lang/rust/commit/913226a174847b416fb4088d66effc2af3777d95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/913226a174847b416fb4088d66effc2af3777d95/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c0d3439ee692647ee4b7f9a2dd45e40e0f75b3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c0d3439ee692647ee4b7f9a2dd45e40e0f75b3f", "html_url": "https://github.com/rust-lang/rust/commit/3c0d3439ee692647ee4b7f9a2dd45e40e0f75b3f"}, {"sha": "ce7b44b048820edc6b29873a708ec12c760db64b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce7b44b048820edc6b29873a708ec12c760db64b", "html_url": "https://github.com/rust-lang/rust/commit/ce7b44b048820edc6b29873a708ec12c760db64b"}], "stats": {"total": 265, "additions": 196, "deletions": 69}, "files": [{"sha": "ebf6e5a2aca81961afbefd721411194dc428fb29", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -1 +1 @@\n-4af3ee8ee2a2bc1286b021db7600ba990359cf3f\n+2da942f32802c8233a09744024dfbc34431adf65"}, {"sha": "197cf87ba549b931f907d41d0cd8e33e6296cb05", "filename": "src/eval.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -93,7 +93,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n             arg.push(0);\n             argvs.push(\n                 ecx.memory\n-                    .allocate_static_bytes(arg.as_slice(), MiriMemoryKind::Static.into()),\n+                    .allocate_static_bytes(arg.as_slice(), MiriMemoryKind::Env.into()),\n             );\n         }\n         // Make an array with all these pointers, in the Miri memory.\n@@ -103,7 +103,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         let argvs_place = ecx.allocate(argvs_layout, MiriMemoryKind::Env.into());\n         for (idx, arg) in argvs.into_iter().enumerate() {\n             let place = ecx.mplace_field(argvs_place, idx as u64)?;\n-            ecx.write_scalar(Scalar::Ptr(arg), place.into())?;\n+            ecx.write_scalar(arg, place.into())?;\n         }\n         ecx.memory\n             .mark_immutable(argvs_place.ptr.assert_ptr().alloc_id)?;\n@@ -144,19 +144,19 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     // Return place (in static memory so that it does not count as leak).\n     let ret_place = ecx.allocate(\n         ecx.layout_of(tcx.types.isize)?,\n-        MiriMemoryKind::Static.into(),\n+        MiriMemoryKind::Env.into(),\n     );\n     // Call start function.\n     ecx.call_function(\n         start_instance,\n-        &[main_ptr.into(), argc, argv],\n+        &[main_ptr.into(), argc.into(), argv.into()],\n         Some(ret_place.into()),\n         StackPopCleanup::None { cleanup: true },\n     )?;\n \n     // Set the last_error to 0\n     let errno_layout = ecx.layout_of(tcx.types.u32)?;\n-    let errno_place = ecx.allocate(errno_layout, MiriMemoryKind::Static.into());\n+    let errno_place = ecx.allocate(errno_layout, MiriMemoryKind::Env.into());\n     ecx.write_scalar(Scalar::from_u32(0), errno_place.into())?;\n     ecx.machine.last_error = Some(errno_place);\n \n@@ -217,16 +217,13 @@ pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) ->\n                 }\n                 err_unsup!(NoMirFor(..)) =>\n                     format!(\"{}. Did you set `MIRI_SYSROOT` to a Miri-enabled sysroot? You can prepare one with `cargo miri setup`.\", e),\n+                InterpError::InvalidProgram(_) =>\n+                    bug!(\"This error should be impossible in Miri: {}\", e),\n                 _ => e.to_string()\n             };\n             e.print_backtrace();\n             if let Some(frame) = ecx.stack().last() {\n-                let block = &frame.body.basic_blocks()[frame.block.unwrap()];\n-                let span = if frame.stmt < block.statements.len() {\n-                    block.statements[frame.stmt].source_info.span\n-                } else {\n-                    block.terminator().source_info.span\n-                };\n+                let span = frame.current_source_info().unwrap().span;\n \n                 let msg = format!(\"Miri evaluation error: {}\", msg);\n                 let mut err = ecx.tcx.sess.struct_span_err(span, msg.as_str());"}, {"sha": "7bd29e1741946b07164a93358e5fb729e12f22fa", "filename": "src/helpers.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -124,17 +124,21 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     fn call_function(\n         &mut self,\n         f: ty::Instance<'tcx>,\n-        args: &[Scalar<Tag>],\n+        args: &[Immediate<Tag>],\n         dest: Option<PlaceTy<'tcx, Tag>>,\n         stack_pop: StackPopCleanup,\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n \n         // Push frame.\n         let mir = this.load_mir(f.def, None)?;\n+        let span = this.stack().last()\n+            .and_then(Frame::current_source_info)\n+            .map(|si| si.span)\n+            .unwrap_or(DUMMY_SP);\n         this.push_stack_frame(\n             f,\n-            DUMMY_SP, // There is no call site.\n+            span,\n             mir,\n             dest,\n             stack_pop,\n@@ -146,7 +150,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let callee_arg = this.local_place(\n                 callee_args.next().expect(\"callee has fewer arguments than expected\")\n             )?;\n-            this.write_scalar(*arg, callee_arg)?;\n+            this.write_immediate(*arg, callee_arg)?;\n         }\n         callee_args.next().expect_none(\"callee has more arguments than expected\");\n "}, {"sha": "abed7ab9dfeb7651df554f84b49c1e1410b534ca", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -38,14 +38,15 @@ pub use crate::shims::dlsym::{Dlsym, EvalContextExt as DlsymEvalContextExt};\n pub use crate::shims::env::{EnvVars, EvalContextExt as EnvEvalContextExt};\n pub use crate::shims::fs::{FileHandler, EvalContextExt as FileEvalContextExt};\n pub use crate::shims::panic::{CatchUnwindData, EvalContextExt as PanicEvalContextExt};\n+\n pub use crate::operator::EvalContextExt as OperatorEvalContextExt;\n pub use crate::range_map::RangeMap;\n pub use crate::helpers::{EvalContextExt as HelpersEvalContextExt};\n pub use crate::mono_hash_map::MonoHashMap;\n pub use crate::stacked_borrows::{EvalContextExt as StackedBorEvalContextExt, Tag, Permission, Stack, Stacks, Item};\n pub use crate::machine::{\n     PAGE_SIZE, STACK_ADDR, STACK_SIZE, NUM_CPUS,\n-    MemoryExtra, AllocExtra, MiriMemoryKind, Evaluator, MiriEvalContext, MiriEvalContextExt,\n+    MemoryExtra, AllocExtra, FrameData, MiriMemoryKind, Evaluator, MiriEvalContext, MiriEvalContextExt,\n };\n pub use crate::eval::{eval_main, create_ecx, MiriConfig, TerminationInfo};\n "}, {"sha": "edabc3bccbcc44a90161fa04a127dc4a3415f6fe", "filename": "src/machine.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -43,9 +43,9 @@ pub enum MiriMemoryKind {\n     C,\n     /// Windows `HeapAlloc` memory.\n     WinHeap,\n-    /// Part of env var emulation.\n+    /// Memory for env vars and args, errno and other parts of the machine-managed environment.\n     Env,\n-    /// Statics.\n+    /// Rust statics.\n     Static,\n }\n \n@@ -215,6 +215,16 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         ecx.call_intrinsic(span, instance, args, ret, unwind)\n     }\n \n+    #[inline(always)]\n+    fn assert_panic(\n+        ecx: &mut InterpCx<'mir, 'tcx, Self>,\n+        span: Span,\n+        msg: &AssertMessage<'tcx>,\n+        unwind: Option<mir::BasicBlock>,\n+    ) -> InterpResult<'tcx> {\n+        ecx.assert_panic(span, msg, unwind)\n+    }\n+\n     #[inline(always)]\n     fn binary_ptr_op(\n         ecx: &rustc_mir::interpret::InterpCx<'mir, 'tcx, Self>,\n@@ -243,7 +253,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         let malloc = ty::Instance::mono(ecx.tcx.tcx, malloc);\n         ecx.call_function(\n             malloc,\n-            &[size, align],\n+            &[size.into(), align.into()],\n             Some(dest),\n             // Don't do anything when we are done. The `statement()` function will increment\n             // the old stack frame's stmt counter to the next statement, which means that when\n@@ -281,27 +291,25 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         Ok(())\n     }\n \n-    fn tag_allocation<'b>(\n+    fn init_allocation_extra<'b>(\n         memory_extra: &MemoryExtra,\n         id: AllocId,\n         alloc: Cow<'b, Allocation>,\n         kind: Option<MemoryKind<Self::MemoryKinds>>,\n-    ) -> (\n-        Cow<'b, Allocation<Self::PointerTag, Self::AllocExtra>>,\n-        Self::PointerTag,\n-    ) {\n+    ) -> (Cow<'b, Allocation<Self::PointerTag, Self::AllocExtra>>, Self::PointerTag) {\n         let kind = kind.expect(\"we set our STATIC_KIND so this cannot be None\");\n         let alloc = alloc.into_owned();\n-        let (stacks, base_tag) = if !memory_extra.validate {\n-            (None, Tag::Untagged)\n-        } else {\n+        let (stacks, base_tag) = if memory_extra.validate {\n             let (stacks, base_tag) = Stacks::new_allocation(\n                 id,\n                 alloc.size,\n                 Rc::clone(&memory_extra.stacked_borrows),\n                 kind,\n             );\n             (Some(stacks), base_tag)\n+        } else {\n+            // No stacks, no tag.\n+            (None, Tag::Untagged)\n         };\n         let mut stacked_borrows = memory_extra.stacked_borrows.borrow_mut();\n         let alloc: Allocation<Tag, Self::AllocExtra> = alloc.with_tags_and_extra("}, {"sha": "ae8dae0313f1bfc42c25560f20fac4e05178b6e9", "filename": "src/shims/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -57,7 +57,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(match this.machine.env_vars.map.get(name) {\n             // The offset is used to strip the \"{name}=\" part of the string.\n             Some(var_ptr) => {\n-                Scalar::Ptr(var_ptr.offset(Size::from_bytes(name.len() as u64 + 1), this)?)\n+                Scalar::from(var_ptr.offset(Size::from_bytes(name.len() as u64 + 1), this)?)\n             }\n             None => Scalar::ptr_null(&*this.tcx),\n         })"}, {"sha": "f27b4fb333527df8ee5ebb09a1a12c1764a3ce19", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -205,7 +205,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         Align::from_bytes(align).unwrap(),\n                         MiriMemoryKind::C.into(),\n                     );\n-                    this.write_scalar(Scalar::Ptr(ptr), ret.into())?;\n+                    this.write_scalar(ptr, ret.into())?;\n                 }\n                 this.write_null(dest)?;\n             }\n@@ -234,7 +234,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     Align::from_bytes(align).unwrap(),\n                     MiriMemoryKind::Rust.into(),\n                 );\n-                this.write_scalar(Scalar::Ptr(ptr), dest)?;\n+                this.write_scalar(ptr, dest)?;\n             }\n             \"__rust_alloc_zeroed\" => {\n                 let size = this.read_scalar(args[0])?.to_machine_usize(this)?;\n@@ -254,7 +254,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.memory\n                     .write_bytes(ptr.into(), iter::repeat(0u8).take(size as usize))\n                     .unwrap();\n-                this.write_scalar(Scalar::Ptr(ptr), dest)?;\n+                this.write_scalar(ptr, dest)?;\n             }\n             \"__rust_dealloc\" => {\n                 let ptr = this.read_scalar(args[0])?.not_undef()?;\n@@ -295,7 +295,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     align,\n                     MiriMemoryKind::Rust.into(),\n                 )?;\n-                this.write_scalar(Scalar::Ptr(new_ptr), dest)?;\n+                this.write_scalar(new_ptr, dest)?;\n             }\n \n             \"syscall\" => {"}, {"sha": "fc3339352a982b3bc4872f30491c373bae8ecbea", "filename": "src/shims/panic.rs", "status": "modified", "additions": 59, "deletions": 4, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -11,11 +11,12 @@\n //!   gets popped *during unwinding*, we take the panic payload and store it according to the extra\n //!   metadata we remembered when pushing said frame.\n \n+use syntax::source_map::Span;\n use rustc::mir;\n-use crate::*;\n-use super::machine::FrameData;\n+use rustc::ty::{self, layout::LayoutOf};\n use rustc_target::spec::PanicStrategy;\n-use crate::rustc_target::abi::LayoutOf;\n+\n+use crate::*;\n \n /// Holds all of the relevant data for a call to\n /// `__rust_maybe_catch_panic`.\n@@ -85,7 +86,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             MPlaceTy::dangling(this.layout_of(tcx.mk_unit())?, this).into();\n         this.call_function(\n             f_instance,\n-            &[f_arg],\n+            &[f_arg.into()],\n             Some(ret_place),\n             // Directly return to caller.\n             StackPopCleanup::Goto { ret: Some(ret), unwind: None },\n@@ -150,4 +151,58 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.memory.extra.stacked_borrows.borrow_mut().end_call(extra.call_id);\n         Ok(res)\n     }\n+\n+    fn assert_panic(\n+        &mut self,\n+        span: Span,\n+        msg: &AssertMessage<'tcx>,\n+        unwind: Option<mir::BasicBlock>,\n+    ) -> InterpResult<'tcx> {\n+        use rustc::mir::interpret::PanicInfo::*;\n+        let this = self.eval_context_mut();\n+\n+        match msg {\n+            BoundsCheck { ref index, ref len } => {\n+                // Forward to `panic_bounds_check` lang item.\n+\n+                // First arg: Caller location.\n+                let location = this.alloc_caller_location_for_span(span);\n+                // Second arg: index.\n+                let index = this.read_scalar(this.eval_operand(index, None)?)?;\n+                // Third arg: len.\n+                let len = this.read_scalar(this.eval_operand(len, None)?)?;\n+\n+                // Call the lang item.\n+                let panic_bounds_check = this.tcx.lang_items().panic_bounds_check_fn().unwrap();\n+                let panic_bounds_check = ty::Instance::mono(this.tcx.tcx, panic_bounds_check);\n+                this.call_function(\n+                    panic_bounds_check,\n+                    &[location.ptr.into(), index.into(), len.into()],\n+                    None,\n+                    StackPopCleanup::Goto { ret: None, unwind },\n+                )?;\n+            }\n+            _ => {\n+                // Forward everything else to `panic` lang item.\n+\n+                // First arg: Message.\n+                let msg = msg.description();\n+                let msg = this.allocate_str(msg, MiriMemoryKind::Env.into());\n+\n+                // Second arg: Caller location.\n+                let location = this.alloc_caller_location_for_span(span);\n+\n+                // Call the lang item.\n+                let panic = this.tcx.lang_items().panic_fn().unwrap();\n+                let panic = ty::Instance::mono(this.tcx.tcx, panic);\n+                this.call_function(\n+                    panic,\n+                    &[msg.to_ref(), location.ptr.into()],\n+                    None,\n+                    StackPopCleanup::Goto { ret: None, unwind },\n+                )?;\n+            }\n+        }\n+        Ok(())\n+    }\n }"}, {"sha": "420fd63a6181e22d57b88f30357555151a555838", "filename": "src/shims/tls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -150,7 +150,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let ret_place = MPlaceTy::dangling(this.layout_of(this.tcx.mk_unit())?, this).into();\n             this.call_function(\n                 instance,\n-                &[ptr],\n+                &[ptr.into()],\n                 Some(ret_place),\n                 StackPopCleanup::None { cleanup: true },\n             )?;"}, {"sha": "23a32fc2ac5caaa8f40195dd842a99cbbe2f52d9", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -472,12 +472,17 @@ impl Stacks {\n                 // and in particular, *all* raw pointers.\n                 (Tag::Tagged(extra.borrow_mut().new_ptr()), Permission::Unique),\n             MemoryKind::Machine(MiriMemoryKind::Static) =>\n+                // Static memory can be referenced by \"global\" pointers from `tcx`.\n+                // Thus we call `static_base_ptr` such that the global pointers get the same tag\n+                // as what we use here.\n+                // The base pointer is not unique, so the base permission is `SharedReadWrite`.\n                 (extra.borrow_mut().static_base_ptr(id), Permission::SharedReadWrite),\n             _ =>\n+                // Everything else we handle entirely untagged for now.\n+                // FIXME: experiment with more precise tracking.\n                 (Tag::Untagged, Permission::SharedReadWrite),\n         };\n-        let stack = Stacks::new(size, perm, tag, extra);\n-        (stack, tag)\n+        (Stacks::new(size, perm, tag, extra), tag)\n     }\n \n     #[inline(always)]\n@@ -591,7 +596,12 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         // Compute new borrow.\n         let new_tag = match kind {\n+            // Give up tracking for raw pointers.\n+            // FIXME: Experiment with more precise tracking. Blocked on `&raw`\n+            // because `Rc::into_raw` currently creates intermediate references,\n+            // breaking `Rc::from_raw`.\n             RefKind::Raw { .. } => Tag::Untagged,\n+            // All other pointesr are properly tracked.\n             _ => Tag::Tagged(this.memory.extra.stacked_borrows.borrow_mut().new_ptr()),\n         };\n "}, {"sha": "0ab948893b4957d3bb04e96810e172d10128562c", "filename": "test-cargo-miri/test.stdout.ref", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/test-cargo-miri%2Ftest.stdout.ref", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/test-cargo-miri%2Ftest.stdout.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftest.stdout.ref?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -5,12 +5,13 @@ test test::rng ... ok\n test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n \n \n-running 5 tests\n+running 6 tests\n test do_panic ... ok\n test entropy_rng ... ok\n+test fail_index_check ... ok\n test num_cpus ... ok\n test simple1 ... ok\n test simple2 ... ok\n \n-test result: ok. 5 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n+test result: ok. 6 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n "}, {"sha": "1dd4f70658d50e66ff8091acfe1908623ae534f7", "filename": "test-cargo-miri/test.stdout.ref2", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/test-cargo-miri%2Ftest.stdout.ref2", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/test-cargo-miri%2Ftest.stdout.ref2", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftest.stdout.ref2?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -7,5 +7,5 @@ test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out\n running 1 test\n test simple1 ... ok\n \n-test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 4 filtered out\n+test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 5 filtered out\n "}, {"sha": "af94192a12ca5aacb68d0f81b650aa83a56052e5", "filename": "test-cargo-miri/test.stdout.ref3", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/test-cargo-miri%2Ftest.stdout.ref3", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/test-cargo-miri%2Ftest.stdout.ref3", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftest.stdout.ref3?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -7,5 +7,5 @@ test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out\n running 1 test\n test num_cpus ... ok\n \n-test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 4 filtered out\n+test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 5 filtered out\n "}, {"sha": "76d3eeece5eb93b8f7d6fb9bd8668f7829d58257", "filename": "test-cargo-miri/tests/test.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/test-cargo-miri%2Ftests%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/test-cargo-miri%2Ftests%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftests%2Ftest.rs?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -43,7 +43,7 @@ fn num_cpus() {\n }\n \n \n-// FIXME: Remove this `cfg` once we fix https://github.com/rust-lang/miri/issues/1059\n+// FIXME: Remove this `cfg` once we fix https://github.com/rust-lang/miri/issues/1059.\n // We cfg-gate the `should_panic` attribute and the `panic!` itself, so that the test\n // stdout does not depend on the platform.\n #[test]\n@@ -52,3 +52,12 @@ fn do_panic() { // In large, friendly letters :)\n     #[cfg(not(windows))]\n     panic!(\"Explicit panic from test!\");\n }\n+\n+// FIXME: see above\n+#[test]\n+#[allow(const_err)]\n+#[cfg_attr(not(windows), should_panic(expected=\"the len is 0 but the index is 42\"))]\n+fn fail_index_check() {\n+    #[cfg(not(windows))]\n+    [][42]\n+}"}, {"sha": "302d26a41f36948dfacde5c9a9e869a3a09015eb", "filename": "tests/compile-fail/div-by-zero-2.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c0d3439ee692647ee4b7f9a2dd45e40e0f75b3f/tests%2Fcompile-fail%2Fdiv-by-zero-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c0d3439ee692647ee4b7f9a2dd45e40e0f75b3f/tests%2Fcompile-fail%2Fdiv-by-zero-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdiv-by-zero-2.rs?ref=3c0d3439ee692647ee4b7f9a2dd45e40e0f75b3f", "patch": "@@ -1,5 +0,0 @@\n-#![allow(const_err)]\n-\n-fn main() {\n-    let _n = 1 / 0; //~ ERROR attempt to divide by zero\n-}"}, {"sha": "253294d1f53b7c11b612b1c270593af85e7116f6", "filename": "tests/compile-fail/overflowing-lsh-neg.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c0d3439ee692647ee4b7f9a2dd45e40e0f75b3f/tests%2Fcompile-fail%2Foverflowing-lsh-neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c0d3439ee692647ee4b7f9a2dd45e40e0f75b3f/tests%2Fcompile-fail%2Foverflowing-lsh-neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflowing-lsh-neg.rs?ref=3c0d3439ee692647ee4b7f9a2dd45e40e0f75b3f", "patch": "@@ -1,6 +0,0 @@\n-#![allow(exceeding_bitshifts)]\n-#![allow(const_err)]\n-\n-fn main() {\n-    let _n = 2i64 << -1; //~ ERROR attempt to shift left with overflow\n-}"}, {"sha": "e0d3f1904a23ffc62475114fd6280bae0a600436", "filename": "tests/compile-fail/overflowing-rsh-1.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3c0d3439ee692647ee4b7f9a2dd45e40e0f75b3f/tests%2Fcompile-fail%2Foverflowing-rsh-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c0d3439ee692647ee4b7f9a2dd45e40e0f75b3f/tests%2Fcompile-fail%2Foverflowing-rsh-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflowing-rsh-1.rs?ref=3c0d3439ee692647ee4b7f9a2dd45e40e0f75b3f", "patch": "@@ -1,5 +0,0 @@\n-#![allow(exceeding_bitshifts, const_err)]\n-\n-fn main() {\n-    let _n = 1i64 >> 64; //~ ERROR attempt to shift right with overflow\n-}"}, {"sha": "4a1bb11483ca77e62ae76ff5d5fe2ac9958ee9d3", "filename": "tests/compile-fail/panic/panic_abort1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort1.rs?ref=913226a174847b416fb4088d66effc2af3777d95", "previous_filename": "tests/compile-fail/panic_abort1.rs"}, {"sha": "ce4471c0effc2e14970af24c934425d0b9c19e64", "filename": "tests/compile-fail/panic/panic_abort2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort2.rs?ref=913226a174847b416fb4088d66effc2af3777d95", "previous_filename": "tests/compile-fail/panic_abort2.rs"}, {"sha": "842a0f5435b7442f979d2d2bfd84ea03bc80822a", "filename": "tests/compile-fail/panic/panic_abort3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort3.rs?ref=913226a174847b416fb4088d66effc2af3777d95", "previous_filename": "tests/compile-fail/panic_abort3.rs"}, {"sha": "816cc90cfabd8583df55086b0c06e96631ff4435", "filename": "tests/compile-fail/panic/panic_abort4.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic%2Fpanic_abort4.rs?ref=913226a174847b416fb4088d66effc2af3777d95", "previous_filename": "tests/compile-fail/panic_abort4.rs"}, {"sha": "a14dd411c1c663015b90ed626be702a21b767c8d", "filename": "tests/run-pass/panic/catch_panic.rs", "status": "renamed", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -1,4 +1,6 @@\n // ignore-windows: Unwind panicking does not currently work on Windows\n+#![allow(const_err)]\n+\n use std::panic::{catch_unwind, AssertUnwindSafe};\n use std::cell::Cell;\n \n@@ -44,15 +46,21 @@ fn main() {\n         prev(panic_info)\n     }));\n \n+    // Std panics\n     test(|_old_val| std::panic!(\"Hello from panic: std\"));\n     test(|old_val| std::panic!(format!(\"Hello from panic: {:?}\", old_val)));\n     test(|old_val| std::panic!(\"Hello from panic: {:?}\", old_val));\n     test(|_old_val| std::panic!(1337));\n \n+    // Core panics\n     test(|_old_val| core::panic!(\"Hello from panic: core\"));\n     test(|old_val| core::panic!(&format!(\"Hello from panic: {:?}\", old_val)));\n     test(|old_val| core::panic!(\"Hello from panic: {:?}\", old_val));\n \n+    // Built-in panics\n+    test(|_old_val| { let _val = [0, 1, 2][4]; loop {} });\n+    test(|_old_val| { let _val = 1/0; loop {} });\n+\n     // Cleanup: reset to default hook.\n     drop(std::panic::take_hook());\n ", "previous_filename": "tests/run-pass/catch_panic.rs"}, {"sha": "fd9a2f14ec3b32e71120c092016007279e860ac6", "filename": "tests/run-pass/panic/catch_panic.stderr", "status": "renamed", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Fcatch_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Fcatch_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fcatch_panic.stderr?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -1,15 +1,19 @@\n-thread 'main' panicked at 'Hello from panic: std', $DIR/catch_panic.rs:47:21\n+thread 'main' panicked at 'Hello from panic: std', $DIR/catch_panic.rs:50:21\n Caught panic message (&str): Hello from panic: std\n-thread 'main' panicked at 'Hello from panic: 1', $DIR/catch_panic.rs:48:20\n+thread 'main' panicked at 'Hello from panic: 1', $DIR/catch_panic.rs:51:20\n Caught panic message (String): Hello from panic: 1\n-thread 'main' panicked at 'Hello from panic: 2', $DIR/catch_panic.rs:49:20\n+thread 'main' panicked at 'Hello from panic: 2', $DIR/catch_panic.rs:52:20\n Caught panic message (String): Hello from panic: 2\n-thread 'main' panicked at 'Box<Any>', $DIR/catch_panic.rs:50:21\n+thread 'main' panicked at 'Box<Any>', $DIR/catch_panic.rs:53:21\n Failed get caught panic message.\n-thread 'main' panicked at 'Hello from panic: core', $DIR/catch_panic.rs:52:21\n+thread 'main' panicked at 'Hello from panic: core', $DIR/catch_panic.rs:56:21\n Caught panic message (String): Hello from panic: core\n-thread 'main' panicked at 'Hello from panic: 5', $DIR/catch_panic.rs:53:20\n+thread 'main' panicked at 'Hello from panic: 5', $DIR/catch_panic.rs:57:20\n Caught panic message (String): Hello from panic: 5\n-thread 'main' panicked at 'Hello from panic: 6', $DIR/catch_panic.rs:54:20\n+thread 'main' panicked at 'Hello from panic: 6', $DIR/catch_panic.rs:58:20\n Caught panic message (String): Hello from panic: 6\n+thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 4', $DIR/catch_panic.rs:61:34\n+Caught panic message (String): index out of bounds: the len is 3 but the index is 4\n+thread 'main' panicked at 'attempt to divide by zero', $DIR/catch_panic.rs:62:34\n+Caught panic message (String): attempt to divide by zero\n Success!", "previous_filename": "tests/run-pass/catch_panic.stderr"}, {"sha": "6cc319bf0bc4b593006754c6bea6ae2c09b1fe28", "filename": "tests/run-pass/panic/div-by-zero-2.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Fdiv-by-zero-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Fdiv-by-zero-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fdiv-by-zero-2.rs?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -0,0 +1,6 @@\n+// ignore-windows: Unwind panicking does not currently work on Windows\n+#![allow(const_err)]\n+\n+fn main() {\n+    let _n = 1 / 0;\n+}"}, {"sha": "77dca2aac1e289715f0f8db4b30744320182782b", "filename": "tests/run-pass/panic/div-by-zero-2.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Fdiv-by-zero-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Fdiv-by-zero-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fdiv-by-zero-2.stderr?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -0,0 +1 @@\n+thread 'main' panicked at 'attempt to divide by zero', $DIR/div-by-zero-2.rs:5:14"}, {"sha": "b214243c88f863fd8c0e252c0faf32eef6843fbd", "filename": "tests/run-pass/panic/overflowing-lsh-neg.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Foverflowing-lsh-neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Foverflowing-lsh-neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Foverflowing-lsh-neg.rs?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -0,0 +1,7 @@\n+// ignore-windows: Unwind panicking does not currently work on Windows\n+#![allow(exceeding_bitshifts)]\n+#![allow(const_err)]\n+\n+fn main() {\n+    let _n = 2i64 << -1;\n+}"}, {"sha": "fe5a35e6b381df764132749f181b76a70ca46b4d", "filename": "tests/run-pass/panic/overflowing-lsh-neg.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Foverflowing-lsh-neg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Foverflowing-lsh-neg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Foverflowing-lsh-neg.stderr?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -0,0 +1 @@\n+thread 'main' panicked at 'attempt to shift left with overflow', $DIR/overflowing-lsh-neg.rs:6:14"}, {"sha": "68ea51d16731646b78d3d5dc02d1047a61b7d8d1", "filename": "tests/run-pass/panic/overflowing-rsh-1.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Foverflowing-rsh-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Foverflowing-rsh-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Foverflowing-rsh-1.rs?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -0,0 +1,6 @@\n+// ignore-windows: Unwind panicking does not currently work on Windows\n+#![allow(exceeding_bitshifts, const_err)]\n+\n+fn main() {\n+    let _n = 1i64 >> 64;\n+}"}, {"sha": "20a45739ae2e6a19434c04bf9f156d4ca2b5ca39", "filename": "tests/run-pass/panic/overflowing-rsh-1.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Foverflowing-rsh-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Foverflowing-rsh-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Foverflowing-rsh-1.stderr?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -0,0 +1 @@\n+thread 'main' panicked at 'attempt to shift right with overflow', $DIR/overflowing-rsh-1.rs:5:14"}, {"sha": "4e287f20adf8fc0c8e6856b7b4b366a2cb9e4eea", "filename": "tests/run-pass/panic/overflowing-rsh-2.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Foverflowing-rsh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Foverflowing-rsh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Foverflowing-rsh-2.rs?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -1,6 +1,7 @@\n+// ignore-windows: Unwind panicking does not currently work on Windows\n #![allow(exceeding_bitshifts, const_err)]\n \n fn main() {\n     // Make sure we catch overflows that would be hidden by first casting the RHS to u32\n-    let _n = 1i64 >> (u32::max_value() as i64 + 1); //~ ERROR attempt to shift right with overflow\n+    let _n = 1i64 >> (u32::max_value() as i64 + 1);\n }", "previous_filename": "tests/compile-fail/overflowing-rsh-2.rs"}, {"sha": "3381116ae6c858133aea4277c84c030c2af8b603", "filename": "tests/run-pass/panic/overflowing-rsh-2.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Foverflowing-rsh-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Foverflowing-rsh-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Foverflowing-rsh-2.stderr?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -0,0 +1 @@\n+thread 'main' panicked at 'attempt to shift right with overflow', $DIR/overflowing-rsh-2.rs:6:14"}, {"sha": "61321c658166f45baacd35da377bbf1c52e0c995", "filename": "tests/run-pass/panic/panic1.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Fpanic1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Fpanic1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fpanic1.rs?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -0,0 +1,4 @@\n+// ignore-windows: Unwind panicking does not currently work on Windows\n+fn main() {\n+    std::panic!(\"panicking from libstd\");\n+}"}, {"sha": "305fc1a1a6e669eb7f0d4cd8956cce68d84ad7c3", "filename": "tests/run-pass/panic/panic1.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Fpanic1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Fpanic1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fpanic1.stderr?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -0,0 +1 @@\n+thread 'main' panicked at 'panicking from libstd', $DIR/panic1.rs:3:5"}, {"sha": "d6ab864795eafa169381f15d5419acae321a00dc", "filename": "tests/run-pass/panic/panic2.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Fpanic2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Fpanic2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fpanic2.rs?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -0,0 +1,4 @@\n+// ignore-windows: Unwind panicking does not currently work on Windows\n+fn main() {\n+    std::panic!(\"{}-panicking from libstd\", 42);\n+}"}, {"sha": "cd40559c81ef1c94ece47c848f80b6db25e487d3", "filename": "tests/run-pass/panic/panic2.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Fpanic2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Fpanic2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fpanic2.stderr?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -0,0 +1 @@\n+thread 'main' panicked at '42-panicking from libstd', $DIR/panic2.rs:3:5"}, {"sha": "10a42c7e6c00f19fb385e2000a3dc13e42af8c27", "filename": "tests/run-pass/panic/panic3.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Fpanic3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Fpanic3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fpanic3.rs?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -0,0 +1,4 @@\n+// ignore-windows: Unwind panicking does not currently work on Windows\n+fn main() {\n+    core::panic!(\"panicking from libcore\");\n+}"}, {"sha": "e3aa902f0cbc9d57819d01ddf9e99bf1266256c2", "filename": "tests/run-pass/panic/panic3.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Fpanic3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Fpanic3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fpanic3.stderr?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -0,0 +1 @@\n+thread 'main' panicked at 'panicking from libcore', $DIR/panic3.rs:3:5"}, {"sha": "06e2dd008fff82e2e08fb0eb94d6eb1c7babfddc", "filename": "tests/run-pass/panic/panic4.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Fpanic4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Fpanic4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fpanic4.rs?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -0,0 +1,4 @@\n+// ignore-windows: Unwind panicking does not currently work on Windows\n+fn main() {\n+    core::panic!(\"{}-panicking from libcore\", 42);\n+}"}, {"sha": "1a242a868cae19987253976f9b533fcb1372f605", "filename": "tests/run-pass/panic/panic4.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Fpanic4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Fpanic4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fpanic4.stderr?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -0,0 +1 @@\n+thread 'main' panicked at '42-panicking from libcore', $DIR/panic4.rs:3:5"}, {"sha": "8cbe9a099bb6c1240683a733db1bca8df6fe44da", "filename": "tests/run-pass/panic/transmute_fat2.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Ftransmute_fat2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Ftransmute_fat2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Ftransmute_fat2.rs?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -1,3 +1,4 @@\n+// ignore-windows: Unwind panicking does not currently work on Windows\n fn main() {\n     #[cfg(target_pointer_width=\"64\")]\n     let bad = unsafe {\n@@ -7,5 +8,5 @@ fn main() {\n     let bad = unsafe {\n         std::mem::transmute::<u64, &[u8]>(42)\n     };\n-    bad[0]; //~ ERROR index out of bounds: the len is 0 but the index is 0\n+    bad[0];\n }", "previous_filename": "tests/compile-fail/transmute_fat2.rs"}, {"sha": "08849a5b517a4e9e3a9fa6dd90e9879f4dedfdbe", "filename": "tests/run-pass/panic/transmute_fat2.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Ftransmute_fat2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/913226a174847b416fb4088d66effc2af3777d95/tests%2Frun-pass%2Fpanic%2Ftransmute_fat2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Ftransmute_fat2.stderr?ref=913226a174847b416fb4088d66effc2af3777d95", "patch": "@@ -0,0 +1 @@\n+thread 'main' panicked at 'index out of bounds: the len is 0 but the index is 0', $DIR/transmute_fat2.rs:11:5"}]}