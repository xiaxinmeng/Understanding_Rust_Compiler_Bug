{"sha": "7693e3e6662c2ae8aa24d69434161f501d855420", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2OTNlM2U2NjYyYzJhZThhYTI0ZDY5NDM0MTYxZjUwMWQ4NTU0MjA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-02T09:14:40Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-02T09:14:40Z"}, "message": "liballoc: refactor & fix some imports.", "tree": {"sha": "753f7af71b4aa6cef036bd3ed388644cf895e42e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/753f7af71b4aa6cef036bd3ed388644cf895e42e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7693e3e6662c2ae8aa24d69434161f501d855420", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7693e3e6662c2ae8aa24d69434161f501d855420", "html_url": "https://github.com/rust-lang/rust/commit/7693e3e6662c2ae8aa24d69434161f501d855420", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7693e3e6662c2ae8aa24d69434161f501d855420/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6e27924e17aa7def20ecaf88abc18ead6d97f93", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6e27924e17aa7def20ecaf88abc18ead6d97f93", "html_url": "https://github.com/rust-lang/rust/commit/e6e27924e17aa7def20ecaf88abc18ead6d97f93"}], "stats": {"total": 766, "additions": 424, "deletions": 342}, "files": [{"sha": "bb88897323eafcb285aa4b004e50cfaaf072f385", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -2,9 +2,11 @@\n \n #![stable(feature = \"alloc_module\", since = \"1.28.0\")]\n \n-use core::intrinsics::{min_align_of_val, size_of_val};\n-use core::ptr::{NonNull, Unique};\n-use core::usize;\n+use core::{\n+    intrinsics::{min_align_of_val, size_of_val},\n+    ptr::{NonNull, Unique},\n+    usize,\n+};\n \n #[stable(feature = \"alloc_module\", since = \"1.28.0\")]\n #[doc(inline)]\n@@ -228,8 +230,10 @@ pub fn handle_alloc_error(layout: Layout) -> ! {\n mod tests {\n     extern crate test;\n     use self::test::Bencher;\n-    use boxed::Box;\n-    use alloc::{Global, Alloc, Layout, handle_alloc_error};\n+    use crate::{\n+        boxed::Box,\n+        alloc::{Global, Alloc, Layout, handle_alloc_error},\n+    };\n \n     #[test]\n     fn allocate_zeroed() {"}, {"sha": "3865ec866aeed82b314fece31ccfc6ecf6a9d6bd", "filename": "src/liballoc/benches/btree/map.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fbenches%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fbenches%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbenches%2Fbtree%2Fmap.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -1,6 +1,8 @@\n-use std::iter::Iterator;\n-use std::vec::Vec;\n-use std::collections::BTreeMap;\n+use std::{\n+    iter::Iterator,\n+    vec::Vec,\n+    collections::BTreeMap,\n+};\n use rand::{Rng, seq::SliceRandom, thread_rng};\n use test::{Bencher, black_box};\n "}, {"sha": "d87b70f2d932cb3bc7a3c064f3ba3aaece3c45a5", "filename": "src/liballoc/benches/slice.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fbenches%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fbenches%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbenches%2Fslice.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -1,9 +1,8 @@\n-use rand::{thread_rng};\n-use std::mem;\n-use std::ptr;\n-\n-use rand::{Rng, SeedableRng};\n-use rand::distributions::{Standard, Alphanumeric};\n+use std::{mem, ptr};\n+use rand::{\n+    thread_rng, Rng, SeedableRng,\n+    distributions::{Standard, Alphanumeric},\n+};\n use rand_xorshift::XorShiftRng;\n use test::{Bencher, black_box};\n "}, {"sha": "8161d588fbdb8fe962f8c3d58b87540c74c59814", "filename": "src/liballoc/borrow.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fborrow.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -2,12 +2,13 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use core::cmp::Ordering;\n-use core::hash::{Hash, Hasher};\n-use core::ops::{Add, AddAssign, Deref};\n+use core::{\n+    cmp::Ordering,\n+    hash::{Hash, Hasher},\n+    ops::{Add, AddAssign, Deref},\n+};\n \n-use crate::fmt;\n-use crate::string::String;\n+use crate::{fmt, string::String};\n \n use self::Cow::*;\n "}, {"sha": "f590b6488d9da04c380710974a3fb67c3755438e", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -56,26 +56,28 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use core::any::Any;\n-use core::borrow;\n-use core::cmp::Ordering;\n-use core::convert::From;\n-use core::fmt;\n-use core::future::Future;\n-use core::hash::{Hash, Hasher};\n-use core::iter::{Iterator, FromIterator, FusedIterator};\n-use core::marker::{Unpin, Unsize};\n-use core::mem;\n-use core::pin::Pin;\n-use core::ops::{\n-    CoerceUnsized, DispatchFromDyn, Deref, DerefMut, Receiver, Generator, GeneratorState\n+use core::{\n+    any::Any,\n+    borrow,\n+    cmp::Ordering,\n+    convert::From,\n+    fmt,\n+    future::Future,\n+    hash::{Hash, Hasher},\n+    iter::{Iterator, FromIterator, FusedIterator},\n+    marker::{Unpin, Unsize},\n+    mem,\n+    pin::Pin,\n+    ops::{CoerceUnsized, DispatchFromDyn, Deref, DerefMut, Receiver, Generator, GeneratorState},\n+    ptr::{self, NonNull, Unique},\n+    task::{LocalWaker, Poll},\n };\n-use core::ptr::{self, NonNull, Unique};\n-use core::task::{LocalWaker, Poll};\n \n-use crate::vec::Vec;\n-use crate::raw_vec::RawVec;\n-use crate::str::from_boxed_utf8_unchecked;\n+use crate::{\n+    vec::Vec,\n+    raw_vec::RawVec,\n+    str::from_boxed_utf8_unchecked,\n+};\n \n /// A pointer type for heap allocation.\n ///"}, {"sha": "6fb01fbc6a150e55f631cd0122e113a0cebc743a", "filename": "src/liballoc/boxed_test.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fboxed_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fboxed_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed_test.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -1,11 +1,13 @@\n //! Test for `boxed` mod.\n \n-use core::any::Any;\n-use core::ops::Deref;\n-use core::result::Result::{Err, Ok};\n-use core::clone::Clone;\n-use core::f64;\n-use core::i64;\n+use core::{\n+    any::Any,\n+    ops::Deref,\n+    result::Result::{Err, Ok},\n+    clone::Clone,\n+    f64,\n+    i64,\n+};\n \n use std::boxed::Box;\n "}, {"sha": "4a38f041636ef91530c32adaaad0f7433f7df567", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -145,14 +145,18 @@\n #![allow(missing_docs)]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use core::ops::{Deref, DerefMut};\n-use core::iter::{FromIterator, FusedIterator};\n-use core::mem::{swap, size_of, ManuallyDrop};\n-use core::ptr;\n-use core::fmt;\n-\n-use crate::slice;\n-use crate::vec::{self, Vec};\n+use core::{\n+    ops::{Deref, DerefMut},\n+    iter::{FromIterator, FusedIterator},\n+    mem::{swap, size_of, ManuallyDrop},\n+    ptr,\n+    fmt,\n+};\n+\n+use crate::{\n+    slice,\n+    vec::{self, Vec},\n+};\n \n use super::SpecExtend;\n "}, {"sha": "f81cf6f1047198cf83806ec1490be41b6b877813", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -1,23 +1,24 @@\n-use core::cmp::Ordering;\n-use core::fmt::Debug;\n-use core::hash::{Hash, Hasher};\n-use core::iter::{FromIterator, Peekable, FusedIterator};\n-use core::marker::PhantomData;\n-use core::ops::Bound::{Excluded, Included, Unbounded};\n-use core::ops::Index;\n-use core::ops::RangeBounds;\n-use core::{fmt, intrinsics, mem, ptr};\n+use core::{\n+    cmp::Ordering,\n+    fmt::Debug,\n+    hash::{Hash, Hasher},\n+    iter::{FromIterator, Peekable, FusedIterator},\n+    marker::PhantomData,\n+    ops::{\n+        Bound::{Excluded, Included, Unbounded},\n+        Index, RangeBounds,\n+    },\n+    fmt, intrinsics, mem, ptr,\n+};\n \n use crate::borrow::Borrow;\n \n-use super::node::{self, Handle, NodeRef, marker};\n-use super::search;\n+use super::{\n+    node::{self, Handle, NodeRef, marker, InsertResult::*, ForceResult::*},\n+    search::{self, SearchResult::*},\n+};\n \n-use super::node::InsertResult::*;\n-use super::node::ForceResult::*;\n-use super::search::SearchResult::*;\n-use self::UnderflowResult::*;\n-use self::Entry::*;\n+use self::{UnderflowResult::*, Entry::*};\n \n /// A map based on a B-Tree.\n ///"}, {"sha": "f33a75bc45e024ab0089e8bb88e287d41eb54378", "filename": "src/liballoc/collections/btree/node.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -31,13 +31,17 @@\n // - A node of length `n` has `n` keys, `n` values, and (in an internal node) `n + 1` edges.\n //   This implies that even an empty internal node has at least one edge.\n \n-use core::marker::PhantomData;\n-use core::mem::{self, MaybeUninit};\n-use core::ptr::{self, Unique, NonNull};\n-use core::slice;\n+use core::{\n+    marker::PhantomData,\n+    mem::{self, MaybeUninit},\n+    ptr::{self, Unique, NonNull},\n+    slice,\n+};\n \n-use crate::alloc::{Global, Alloc, Layout};\n-use crate::boxed::Box;\n+use crate::{\n+    alloc::{Global, Alloc, Layout},\n+    boxed::Box,\n+};\n \n const B: usize = 6;\n pub const MIN_LEN: usize = B - 1;"}, {"sha": "a3b56ad17c6b7ac8a408f54c8b93776f092b8f50", "filename": "src/liballoc/collections/btree/search.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fcollections%2Fbtree%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fcollections%2Fbtree%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fsearch.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -2,9 +2,8 @@ use core::cmp::Ordering;\n \n use crate::borrow::Borrow;\n \n-use super::node::{Handle, NodeRef, marker};\n+use super::node::{Handle, NodeRef, marker, ForceResult::*};\n \n-use super::node::ForceResult::*;\n use self::SearchResult::*;\n \n pub enum SearchResult<BorrowType, K, V, FoundType, GoDownType> {"}, {"sha": "298d165a91afa00a0f5a332efb35a21d93264e96", "filename": "src/liballoc/collections/btree/set.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -1,15 +1,20 @@\n // This is pretty much entirely stolen from TreeSet, since BTreeMap has an identical interface\n // to TreeMap\n \n-use core::cmp::Ordering::{self, Less, Greater, Equal};\n-use core::cmp::{min, max};\n-use core::fmt::Debug;\n-use core::fmt;\n-use core::iter::{Peekable, FromIterator, FusedIterator};\n-use core::ops::{BitOr, BitAnd, BitXor, Sub, RangeBounds};\n-\n-use crate::borrow::Borrow;\n-use crate::collections::btree_map::{self, BTreeMap, Keys};\n+use core::{\n+    cmp::{\n+        Ordering::{self, Less, Greater, Equal},\n+        min, max,\n+    },\n+    fmt::{self, Debug},\n+    iter::{Peekable, FromIterator, FusedIterator},\n+    ops::{BitOr, BitAnd, BitXor, Sub, RangeBounds},\n+};\n+\n+use crate::{\n+    borrow::Borrow,\n+    collections::btree_map::{self, BTreeMap, Keys},\n+};\n use super::Recover;\n \n // FIXME(conventions): implement bounded iterators"}, {"sha": "8f72c6babaf35918af671c6fcaf948f46f365664", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -12,13 +12,15 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use core::cmp::Ordering;\n-use core::fmt;\n-use core::hash::{Hasher, Hash};\n-use core::iter::{FromIterator, FusedIterator};\n-use core::marker::PhantomData;\n-use core::mem;\n-use core::ptr::NonNull;\n+use core::{\n+    cmp::Ordering,\n+    fmt,\n+    hash::{Hasher, Hash},\n+    iter::{FromIterator, FusedIterator},\n+    marker::PhantomData,\n+    mem,\n+    ptr::NonNull,\n+};\n \n use crate::boxed::Box;\n use super::SpecExtend;\n@@ -1213,11 +1215,8 @@ unsafe impl<'a, T: Sync> Sync for IterMut<'a, T> {}\n \n #[cfg(test)]\n mod tests {\n-    use std::thread;\n-    use std::vec::Vec;\n-\n+    use std::{thread, vec::Vec};\n     use rand::{thread_rng, RngCore};\n-\n     use super::{LinkedList, Node};\n \n     #[cfg(test)]"}, {"sha": "de78783983d7ce203b6808f5a12d37140a9ecffb", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -7,22 +7,25 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use core::cmp::Ordering;\n-use core::fmt;\n-use core::iter::{repeat_with, FromIterator, FusedIterator};\n-use core::mem;\n-use core::ops::Bound::{Excluded, Included, Unbounded};\n-use core::ops::{Index, IndexMut, RangeBounds, Try};\n-use core::ptr;\n-use core::ptr::NonNull;\n-use core::slice;\n-\n-use core::hash::{Hash, Hasher};\n-use core::cmp;\n-\n-use crate::collections::CollectionAllocErr;\n-use crate::raw_vec::RawVec;\n-use crate::vec::Vec;\n+use core::{\n+    cmp::{self, Ordering},\n+    fmt,\n+    iter::{repeat_with, FromIterator, FusedIterator},\n+    mem,\n+    ops::{\n+        Bound::{Excluded, Included, Unbounded},\n+        Index, IndexMut, RangeBounds, Try,\n+    },\n+    ptr::{self, NonNull},\n+    slice,\n+    hash::{Hash, Hasher},\n+};\n+\n+use crate::{\n+    collections::CollectionAllocErr,\n+    raw_vec::RawVec,\n+    vec::Vec,\n+};\n \n const INITIAL_CAPACITY: usize = 7; // 2^3 - 1\n const MINIMUM_CAPACITY: usize = 1; // 2 - 1\n@@ -2758,7 +2761,7 @@ impl<T> From<VecDeque<T>> for Vec<T> {\n \n #[cfg(test)]\n mod tests {\n-    use test;\n+    use ::test;\n \n     use super::VecDeque;\n \n@@ -3036,7 +3039,7 @@ mod tests {\n \n     #[test]\n     fn test_from_vec() {\n-        use vec::Vec;\n+        use crate::vec::Vec;\n         for cap in 0..35 {\n             for len in 0..=cap {\n                 let mut vec = Vec::with_capacity(cap);\n@@ -3052,7 +3055,7 @@ mod tests {\n \n     #[test]\n     fn test_vec_from_vecdeque() {\n-        use vec::Vec;\n+        use crate::vec::Vec;\n \n         fn create_vec_and_test_convert(cap: usize, offset: usize, len: usize) {\n             let mut vd = VecDeque::with_capacity(cap);\n@@ -3114,7 +3117,7 @@ mod tests {\n \n     #[test]\n     fn issue_53529() {\n-        use boxed::Box;\n+        use crate::boxed::Box;\n \n         let mut dst = VecDeque::new();\n         dst.push_front(Box::new(1));"}, {"sha": "be35b4487509b93a966a708da027272aacba3a43", "filename": "src/liballoc/fmt.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ffmt.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -509,21 +509,16 @@\n #[unstable(feature = \"fmt_internals\", issue = \"0\")]\n pub use core::fmt::rt;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::fmt::{Formatter, Result, Write};\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::fmt::{Binary, Octal};\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::fmt::{Debug, Display};\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::fmt::{LowerHex, Pointer, UpperHex};\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::fmt::{LowerExp, UpperExp};\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::fmt::Error;\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::fmt::{write, ArgumentV1, Arguments};\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::fmt::{DebugList, DebugMap, DebugSet, DebugStruct, DebugTuple};\n+pub use core::fmt::{\n+    Formatter, Result, Write,\n+    Binary, Octal,\n+    Debug, Display,\n+    LowerHex, Pointer, UpperHex,\n+    LowerExp, UpperExp,\n+    Error,\n+    write, ArgumentV1, Arguments,\n+    DebugList, DebugMap, DebugSet, DebugStruct, DebugTuple\n+};\n #[stable(feature = \"fmt_flags_align\", since = \"1.28.0\")]\n pub use core::fmt::{Alignment};\n "}, {"sha": "3f1d6ded66d351926d125099fe20fb4c05dc5156", "filename": "src/liballoc/prelude.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fprelude.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -12,8 +12,11 @@\n \n #![unstable(feature = \"alloc\", issue = \"27783\")]\n \n-#[unstable(feature = \"alloc\", issue = \"27783\")] pub use crate::borrow::ToOwned;\n-#[unstable(feature = \"alloc\", issue = \"27783\")] pub use crate::boxed::Box;\n-#[unstable(feature = \"alloc\", issue = \"27783\")] pub use crate::slice::SliceConcatExt;\n-#[unstable(feature = \"alloc\", issue = \"27783\")] pub use crate::string::{String, ToString};\n-#[unstable(feature = \"alloc\", issue = \"27783\")] pub use crate::vec::Vec;\n+#[unstable(feature = \"alloc\", issue = \"27783\")]\n+pub use crate::{\n+    borrow::ToOwned,\n+    boxed::Box,\n+    slice::SliceConcatExt,\n+    string::{String, ToString},\n+    vec::Vec,\n+};"}, {"sha": "92d482b1f052a5ba84a7c9295b20e3813539e908", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -1,16 +1,19 @@\n #![unstable(feature = \"raw_vec_internals\", reason = \"implementation detail\", issue = \"0\")]\n #![doc(hidden)]\n \n-use core::cmp;\n-use core::mem;\n-use core::ops::Drop;\n-use core::ptr::{self, NonNull, Unique};\n-use core::slice;\n-\n-use crate::alloc::{Alloc, Layout, Global, handle_alloc_error};\n-use crate::collections::CollectionAllocErr;\n-use crate::collections::CollectionAllocErr::*;\n-use crate::boxed::Box;\n+use core::{\n+    cmp,\n+    mem,\n+    ops::Drop,\n+    ptr::{self, NonNull, Unique},\n+    slice,\n+};\n+\n+use crate::{\n+    alloc::{Alloc, Layout, Global, handle_alloc_error},\n+    collections::CollectionAllocErr::{self, *},\n+    boxed::Box,\n+};\n \n /// A low-level utility for more ergonomically allocating, reallocating, and deallocating\n /// a buffer of memory on the heap without having to worry about all the corner cases\n@@ -753,7 +756,7 @@ mod tests {\n \n     #[test]\n     fn allocator_param() {\n-        use alloc::AllocErr;\n+        use crate::alloc::AllocErr;\n \n         // Writing a test of integration between third-party\n         // allocators and RawVec is a little tricky because the RawVec"}, {"sha": "720ac4b630aee3c0fb479e50ea497bd7547edf99", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 33, "deletions": 32, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -231,26 +231,28 @@ use crate::boxed::Box;\n #[cfg(test)]\n use std::boxed::Box;\n \n-use core::any::Any;\n-use core::borrow;\n-use core::cell::Cell;\n-use core::cmp::Ordering;\n-use core::fmt;\n-use core::hash::{Hash, Hasher};\n-use core::intrinsics::abort;\n-use core::marker;\n-use core::marker::{Unpin, Unsize, PhantomData};\n-use core::mem::{self, align_of_val, forget, size_of_val};\n-use core::ops::{Deref, Receiver};\n-use core::ops::{CoerceUnsized, DispatchFromDyn};\n-use core::pin::Pin;\n-use core::ptr::{self, NonNull};\n-use core::convert::From;\n-use core::usize;\n-\n-use crate::alloc::{Global, Alloc, Layout, box_free, handle_alloc_error};\n-use crate::string::String;\n-use crate::vec::Vec;\n+use core::{\n+    any::Any,\n+    borrow,\n+    cell::Cell,\n+    cmp::Ordering,\n+    fmt,\n+    hash::{Hash, Hasher},\n+    intrinsics::abort,\n+    marker::{self, Unpin, Unsize, PhantomData},\n+    mem::{self, align_of_val, forget, size_of_val},\n+    ops::{Deref, Receiver, CoerceUnsized, DispatchFromDyn},\n+    pin::Pin,\n+    ptr::{self, NonNull},\n+    convert::From,\n+    usize,\n+};\n+\n+use crate::{\n+    alloc::{Global, Alloc, Layout, box_free, handle_alloc_error},\n+    string::String,\n+    vec::Vec,\n+};\n \n struct RcBox<T: ?Sized> {\n     strong: Cell<usize>,\n@@ -1562,14 +1564,15 @@ impl<T: ?Sized> RcBoxPtr<T> for RcBox<T> {\n #[cfg(test)]\n mod tests {\n     use super::{Rc, Weak};\n-    use std::boxed::Box;\n-    use std::cell::RefCell;\n-    use std::option::Option;\n-    use std::option::Option::{None, Some};\n-    use std::result::Result::{Err, Ok};\n-    use std::mem::drop;\n-    use std::clone::Clone;\n-    use std::convert::From;\n+    use std::{\n+        boxed::Box,\n+        cell::RefCell,\n+        option::Option::{self, None, Some},\n+        result::Result::{Err, Ok},\n+        mem::drop,\n+        clone::Clone,\n+        convert::From,\n+    };\n \n     #[test]\n     fn test_clone() {\n@@ -1733,8 +1736,7 @@ mod tests {\n \n     #[test]\n     fn test_into_from_raw_unsized() {\n-        use std::fmt::Display;\n-        use std::string::ToString;\n+        use std::{fmt::Display, string::ToString};\n \n         let rc: Rc<str> = Rc::from(\"foo\");\n \n@@ -1942,8 +1944,7 @@ mod tests {\n \n     #[test]\n     fn test_from_box_trait() {\n-        use std::fmt::Display;\n-        use std::string::ToString;\n+        use std::{fmt::Display, string::ToString};\n \n         let b: Box<dyn Display> = box 123;\n         let r: Rc<dyn Display> = Rc::from(b);"}, {"sha": "1cee3aa415b8bfd6126695a79958682f7457511a", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -87,15 +87,18 @@\n // It's cleaner to just turn off the unused_imports warning than to fix them.\n #![cfg_attr(test, allow(unused_imports, dead_code))]\n \n-use core::cmp::Ordering::{self, Less};\n-use core::mem::size_of;\n-use core::mem;\n-use core::ptr;\n-use core::{u8, u16, u32};\n-\n-use crate::borrow::{Borrow, BorrowMut, ToOwned};\n-use crate::boxed::Box;\n-use crate::vec::Vec;\n+use core::{\n+    cmp::Ordering::{self, Less},\n+    mem::{self, size_of},\n+    ptr,\n+    u8, u16, u32,\n+};\n+\n+use crate::{\n+    borrow::{Borrow, BorrowMut, ToOwned},\n+    boxed::Box,\n+    vec::Vec,\n+};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::slice::{Chunks, Windows};"}, {"sha": "85437defd5733a2d184852b3c3385f75fc3639f6", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -28,20 +28,25 @@\n // It's cleaner to just turn off the unused_imports warning than to fix them.\n #![allow(unused_imports)]\n \n-use core::fmt;\n-use core::str as core_str;\n-use core::str::pattern::Pattern;\n-use core::str::pattern::{Searcher, ReverseSearcher, DoubleEndedSearcher};\n-use core::mem;\n-use core::ptr;\n-use core::iter::FusedIterator;\n-use core::unicode::conversions;\n-\n-use crate::borrow::{Borrow, ToOwned};\n-use crate::boxed::Box;\n-use crate::slice::{SliceConcatExt, SliceIndex};\n-use crate::string::String;\n-use crate::vec::Vec;\n+use core::{\n+    fmt,\n+    str::{\n+        self as core_str,\n+        pattern::{Pattern, Searcher, ReverseSearcher, DoubleEndedSearcher},\n+    },\n+    mem,\n+    ptr,\n+    iter::FusedIterator,\n+    unicode::conversions,\n+};\n+\n+use crate::{\n+    borrow::{Borrow, ToOwned},\n+    boxed::Box,\n+    slice::{SliceConcatExt, SliceIndex},\n+    string::String,\n+    vec::Vec,\n+};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::str::{FromStr, Utf8Error};"}, {"sha": "e9da10b3597f245fce7e49d3c2b0b85d186b3d41", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -46,21 +46,30 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use core::char::{decode_utf16, REPLACEMENT_CHARACTER};\n-use core::fmt;\n-use core::hash;\n-use core::iter::{FromIterator, FusedIterator};\n-use core::ops::Bound::{Excluded, Included, Unbounded};\n-use core::ops::{self, Add, AddAssign, Index, IndexMut, RangeBounds};\n-use core::ptr;\n-use core::str::pattern::Pattern;\n-use core::str::lossy;\n-\n-use crate::collections::CollectionAllocErr;\n-use crate::borrow::{Cow, ToOwned};\n-use crate::boxed::Box;\n-use crate::str::{self, from_boxed_utf8_unchecked, FromStr, Utf8Error, Chars};\n-use crate::vec::Vec;\n+use core::{\n+    char::{decode_utf16, REPLACEMENT_CHARACTER},\n+    fmt,\n+    hash,\n+    iter::{FromIterator, FusedIterator},\n+    ops::{\n+        self,\n+        Bound::{Excluded, Included, Unbounded},\n+        Add, AddAssign, Index, IndexMut, RangeBounds,\n+    },\n+    ptr,\n+    str::{\n+        pattern::Pattern,\n+        lossy,\n+    }\n+};\n+\n+use crate::{\n+    collections::CollectionAllocErr,\n+    borrow::{Cow, ToOwned},\n+    boxed::Box,\n+    str::{self, from_boxed_utf8_unchecked, FromStr, Utf8Error, Chars},\n+    vec::Vec,\n+};\n \n /// A UTF-8 encoded, growable string.\n ///"}, {"sha": "2a4b3113bfe75493c727c0960adec1f897c054bb", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 42, "deletions": 39, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -6,28 +6,33 @@\n //!\n //! [arc]: struct.Arc.html\n \n-use core::any::Any;\n-use core::sync::atomic;\n-use core::sync::atomic::Ordering::{Acquire, Relaxed, Release, SeqCst};\n-use core::borrow;\n-use core::fmt;\n-use core::cmp::{self, Ordering};\n-use core::intrinsics::abort;\n-use core::mem::{self, align_of_val, size_of_val};\n-use core::ops::{Deref, Receiver};\n-use core::ops::{CoerceUnsized, DispatchFromDyn};\n-use core::pin::Pin;\n-use core::ptr::{self, NonNull};\n-use core::marker::{Unpin, Unsize, PhantomData};\n-use core::hash::{Hash, Hasher};\n-use core::{isize, usize};\n-use core::convert::From;\n-\n-use crate::alloc::{Global, Alloc, Layout, box_free, handle_alloc_error};\n-use crate::boxed::Box;\n-use crate::rc::is_dangling;\n-use crate::string::String;\n-use crate::vec::Vec;\n+use core::{\n+    any::Any,\n+    sync::atomic::{\n+        self,\n+        Ordering::{Acquire, Relaxed, Release, SeqCst}\n+    },\n+    borrow,\n+    fmt,\n+    cmp::{self, Ordering},\n+    intrinsics::abort,\n+    mem::{self, align_of_val, size_of_val},\n+    ops::{Deref, Receiver, CoerceUnsized, DispatchFromDyn},\n+    pin::Pin,\n+    ptr::{self, NonNull},\n+    marker::{Unpin, Unsize, PhantomData},\n+    hash::{Hash, Hasher},\n+    isize, usize,\n+    convert::From,\n+};\n+\n+use crate::{\n+    alloc::{Global, Alloc, Layout, box_free, handle_alloc_error},\n+    boxed::Box,\n+    rc::is_dangling,\n+    string::String,\n+    vec::Vec,\n+};\n \n /// A soft limit on the amount of references that may be made to an `Arc`.\n ///\n@@ -1650,21 +1655,21 @@ impl<T> From<Vec<T>> for Arc<[T]> {\n \n #[cfg(test)]\n mod tests {\n-    use std::boxed::Box;\n-    use std::clone::Clone;\n-    use std::sync::mpsc::channel;\n-    use std::mem::drop;\n-    use std::ops::Drop;\n-    use std::option::Option;\n-    use std::option::Option::{None, Some};\n-    use std::sync::atomic;\n-    use std::sync::atomic::Ordering::{Acquire, SeqCst};\n-    use std::thread;\n-    use std::sync::Mutex;\n-    use std::convert::From;\n+    use std::{\n+        boxed::Box,\n+        clone::Clone,\n+        sync::mpsc::channel,\n+        mem::drop,\n+        ops::Drop,\n+        option::Option::{self, None, Some},\n+        sync::atomic::{self, Ordering::{Acquire, SeqCst}},\n+        thread,\n+        sync::Mutex,\n+        convert::From,\n+    };\n \n     use super::{Arc, Weak};\n-    use vec::Vec;\n+    use crate::vec::Vec;\n \n     struct Canary(*mut atomic::AtomicUsize);\n \n@@ -1770,8 +1775,7 @@ mod tests {\n \n     #[test]\n     fn test_into_from_raw_unsized() {\n-        use std::fmt::Display;\n-        use std::string::ToString;\n+        use std::{fmt::Display, string::ToString};\n \n         let arc: Arc<str> = Arc::from(\"foo\");\n \n@@ -2083,8 +2087,7 @@ mod tests {\n \n     #[test]\n     fn test_from_box_trait() {\n-        use std::fmt::Display;\n-        use std::string::ToString;\n+        use std::{fmt::Display, string::ToString};\n \n         let b: Box<dyn Display> = box 123;\n         let r: Arc<dyn Display> = Arc::from(b);"}, {"sha": "89dc2b10a929429611d346fe549282bf7cf78c07", "filename": "src/liballoc/task.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftask.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -8,9 +8,11 @@ pub use self::if_arc::*;\n #[cfg(all(target_has_atomic = \"ptr\", target_has_atomic = \"cas\"))]\n mod if_arc {\n     use super::*;\n-    use core::marker::PhantomData;\n-    use core::mem;\n-    use core::ptr::{self, NonNull};\n+    use core::{\n+        marker::PhantomData,\n+        mem,\n+        ptr::{self, NonNull},\n+    };\n     use crate::sync::Arc;\n \n     /// A way of waking up a specific task."}, {"sha": "b71cf3bd477954c0571aefd9444b7647ec62587e", "filename": "src/liballoc/tests/arc.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Ftests%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Ftests%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Farc.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -1,7 +1,9 @@\n-use std::any::Any;\n-use std::sync::{Arc, Weak};\n-use std::cell::RefCell;\n-use std::cmp::PartialEq;\n+use std::{\n+    any::Any,\n+    sync::{Arc, Weak},\n+    cell::RefCell,\n+    cmp::PartialEq,\n+};\n \n #[test]\n fn uninhabited() {"}, {"sha": "f19d641fe83eb8cde60e771893feec331ec53864", "filename": "src/liballoc/tests/binary_heap.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbinary_heap.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -1,8 +1,9 @@\n-use std::cmp;\n-use std::collections::BinaryHeap;\n-use std::collections::binary_heap::{Drain, PeekMut};\n-use std::panic::{self, AssertUnwindSafe};\n-use std::sync::atomic::{AtomicUsize, Ordering};\n+use std::{\n+    cmp,\n+    collections::{BinaryHeap, binary_heap::{Drain, PeekMut}},\n+    panic::{self, AssertUnwindSafe},\n+    sync::atomic::{AtomicUsize, Ordering},\n+};\n \n use rand::{thread_rng, seq::SliceRandom};\n "}, {"sha": "33f65980784a1c0b1addb5cb834b63a668507e77", "filename": "src/liballoc/tests/btree/map.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -1,9 +1,10 @@\n-use std::collections::BTreeMap;\n-use std::collections::btree_map::Entry::{Occupied, Vacant};\n-use std::ops::Bound::{self, Excluded, Included, Unbounded};\n-use std::rc::Rc;\n+use std::{\n+    collections::{BTreeMap, btree_map::Entry::{Occupied, Vacant}},\n+    ops::Bound::{self, Excluded, Included, Unbounded},\n+    rc::Rc,\n+    iter::FromIterator,\n+};\n \n-use std::iter::FromIterator;\n use super::DeterministicRng;\n \n #[test]"}, {"sha": "b90ecd9e3f1369e7a9145c78b31cd9dc913d8684", "filename": "src/liballoc/tests/btree/set.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fset.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -1,6 +1,7 @@\n-use std::collections::BTreeSet;\n-\n-use std::iter::FromIterator;\n+use std::{\n+    collections::BTreeSet,\n+    iter::FromIterator\n+};\n use super::DeterministicRng;\n \n #[test]\n@@ -15,6 +16,8 @@ fn test_clone_eq() {\n \n #[test]\n fn test_hash() {\n+    use crate::hash;\n+\n     let mut x = BTreeSet::new();\n     let mut y = BTreeSet::new();\n \n@@ -26,7 +29,7 @@ fn test_hash() {\n     y.insert(2);\n     y.insert(1);\n \n-    assert!(::hash(&x) == ::hash(&y));\n+    assert!(hash(&x) == hash(&y));\n }\n \n fn check<F>(a: &[i32], b: &[i32], expected: &[i32], f: F)"}, {"sha": "100b3986370abadc45216dbd91a1d8a9bead45f7", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -13,8 +13,10 @@\n extern crate core;\n extern crate rand;\n \n-use std::hash::{Hash, Hasher};\n-use std::collections::hash_map::DefaultHasher;\n+use std::{\n+    hash::{Hash, Hasher},\n+    collections::hash_map::DefaultHasher,\n+};\n \n mod arc;\n mod binary_heap;"}, {"sha": "0fbfbdccd453717e67844d6223693ff6d1ecd254", "filename": "src/liballoc/tests/linked_list.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Ftests%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Ftests%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flinked_list.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -241,10 +241,12 @@ fn test_eq() {\n \n #[test]\n fn test_hash() {\n+    use crate::hash;\n+\n     let mut x = LinkedList::new();\n     let mut y = LinkedList::new();\n \n-    assert!(::hash(&x) == ::hash(&y));\n+    assert!(hash(&x) == hash(&y));\n \n     x.push_back(1);\n     x.push_back(2);\n@@ -254,7 +256,7 @@ fn test_hash() {\n     y.push_front(2);\n     y.push_front(1);\n \n-    assert!(::hash(&x) == ::hash(&y));\n+    assert!(hash(&x) == hash(&y));\n }\n \n #[test]"}, {"sha": "caa3c914fc2484786072477b42b6820be56afebd", "filename": "src/liballoc/tests/rc.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Ftests%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Ftests%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Frc.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -1,7 +1,9 @@\n-use std::any::Any;\n-use std::rc::{Rc, Weak};\n-use std::cell::RefCell;\n-use std::cmp::PartialEq;\n+use std::{\n+    any::Any,\n+    rc::{Rc, Weak},\n+    cell::RefCell,\n+    cmp::PartialEq,\n+};\n \n #[test]\n fn uninhabited() {"}, {"sha": "d0a8b65ae8be07ee7fdd47557207a61655bebae1", "filename": "src/liballoc/tests/slice.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fslice.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -1,15 +1,18 @@\n-use std::cell::Cell;\n-use std::cmp::Ordering::{Equal, Greater, Less};\n-use std::cmp::Ordering;\n-use std::mem;\n-use std::panic;\n-use std::rc::Rc;\n-use std::sync::atomic::Ordering::Relaxed;\n-use std::sync::atomic::AtomicUsize;\n-use std::thread;\n-\n-use rand::{Rng, RngCore, thread_rng, seq::SliceRandom};\n-use rand::distributions::Standard;\n+use std::{\n+    cell::Cell,\n+    cmp::Ordering::{self, Equal, Greater, Less},\n+    mem,\n+    panic,\n+    rc::Rc,\n+    sync::atomic::{Ordering::Relaxed, AtomicUsize},\n+    thread,\n+};\n+\n+use rand::{\n+    Rng, RngCore, thread_rng,\n+    seq::SliceRandom,\n+    distributions::Standard,\n+};\n \n fn square(n: usize) -> usize {\n     n * n\n@@ -476,7 +479,7 @@ fn test_sort_stability() {\n             // the second item represents which occurrence of that\n             // number this element is, i.e., the second elements\n             // will occur in sorted order.\n-            let mut orig: Vec<_> = (0..len)\n+            let orig: Vec<_> = (0..len)\n                 .map(|_| {\n                     let n = thread_rng().gen::<usize>() % 10;\n                     counts[n] += 1;"}, {"sha": "583e616bf6d75706fb0a35d8f3ec17a7e0845b72", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -1,6 +1,8 @@\n-use std::borrow::Cow;\n-use std::cmp::Ordering::{Equal, Greater, Less};\n-use std::str::from_utf8;\n+use std::{\n+    borrow::Cow,\n+    cmp::Ordering::{Equal, Greater, Less},\n+    str::from_utf8,\n+};\n \n #[test]\n fn test_le() {\n@@ -1599,9 +1601,10 @@ fn test_repeat() {\n }\n \n mod pattern {\n-    use std::str::pattern::Pattern;\n-    use std::str::pattern::{Searcher, ReverseSearcher};\n-    use std::str::pattern::SearchStep::{self, Match, Reject, Done};\n+    use std::str::pattern::{\n+        Pattern, Searcher, ReverseSearcher,\n+        SearchStep::{self, Match, Reject, Done},\n+    };\n \n     macro_rules! make_test {\n         ($name:ident, $p:expr, $h:expr, [$($e:expr,)*]) => {"}, {"sha": "9e4ffb5be9d6e1b325913b3fb8df54ddb6b605a2", "filename": "src/liballoc/tests/string.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstring.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -1,7 +1,9 @@\n-use std::borrow::Cow;\n-use std::collections::CollectionAllocErr::*;\n-use std::mem::size_of;\n-use std::{usize, isize};\n+use std::{\n+    borrow::Cow,\n+    collections::CollectionAllocErr::*,\n+    mem::size_of,\n+    usize, isize,\n+};\n \n pub trait IntoCow<'a, B: ?Sized> where B: ToOwned {\n     fn into_cow(self) -> Cow<'a, B>;"}, {"sha": "473d41d483eff5e8a2aef07d27a296101503aeda", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -1,8 +1,10 @@\n-use std::borrow::Cow;\n-use std::mem::size_of;\n-use std::{usize, isize};\n-use std::vec::{Drain, IntoIter};\n-use std::collections::CollectionAllocErr::*;\n+use std::{\n+    borrow::Cow,\n+    mem::size_of,\n+    usize, isize,\n+    vec::{Drain, IntoIter},\n+    collections::CollectionAllocErr::*,\n+};\n \n struct DropCounter<'a> {\n     count: &'a mut u32,"}, {"sha": "cbc9fefcdff9e6058dc749805167c37bb672b21f", "filename": "src/liballoc/tests/vec_deque.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec_deque.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -1,9 +1,14 @@\n-use std::collections::VecDeque;\n-use std::fmt::Debug;\n-use std::collections::vec_deque::{Drain};\n-use std::collections::CollectionAllocErr::*;\n-use std::mem::size_of;\n-use std::{usize, isize};\n+use std::{\n+    fmt::Debug,\n+    collections::{\n+        VecDeque, vec_deque::Drain,\n+        CollectionAllocErr::*,\n+    },\n+    mem::size_of,\n+    usize, isize,\n+};\n+\n+use crate::hash;\n \n use self::Taggy::*;\n use self::Taggypar::*;\n@@ -583,7 +588,7 @@ fn test_hash() {\n     y.push_back(2);\n     y.push_back(3);\n \n-    assert!(::hash(&x) == ::hash(&y));\n+    assert!(hash(&x) == hash(&y));\n }\n \n #[test]\n@@ -599,7 +604,7 @@ fn test_hash_after_rotation() {\n             *elt -= 1;\n         }\n         ring.push_back(len - 1);\n-        assert_eq!(::hash(&orig), ::hash(&ring));\n+        assert_eq!(hash(&orig), hash(&ring));\n         assert_eq!(orig, ring);\n         assert_eq!(ring, orig);\n     }"}, {"sha": "69fcd87dae6973f1a92f5ce501cc43fc0c45d164", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7693e3e6662c2ae8aa24d69434161f501d855420/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=7693e3e6662c2ae8aa24d69434161f501d855420", "patch": "@@ -56,25 +56,30 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use core::cmp::{self, Ordering};\n-use core::fmt;\n-use core::hash::{self, Hash};\n-use core::intrinsics::{arith_offset, assume};\n-use core::iter::{FromIterator, FusedIterator, TrustedLen};\n-use core::marker::PhantomData;\n-use core::mem;\n-use core::ops::Bound::{Excluded, Included, Unbounded};\n-use core::ops::{Index, IndexMut, RangeBounds};\n-use core::ops;\n-use core::ptr;\n-use core::ptr::NonNull;\n-use core::slice;\n-\n-use crate::collections::CollectionAllocErr;\n-use crate::borrow::ToOwned;\n-use crate::borrow::Cow;\n-use crate::boxed::Box;\n-use crate::raw_vec::RawVec;\n+use core::{\n+    cmp::{self, Ordering},\n+    fmt,\n+    hash::{self, Hash},\n+    intrinsics::{arith_offset, assume},\n+    iter::{FromIterator, FusedIterator, TrustedLen},\n+    marker::PhantomData,\n+    mem,\n+    ops::{\n+        self,\n+        Bound::{Excluded, Included, Unbounded},\n+        Index, IndexMut, RangeBounds,\n+    },\n+    ptr::{self, NonNull},\n+    slice,\n+};\n+\n+use crate::{\n+    collections::CollectionAllocErr,\n+    borrow::ToOwned,\n+    borrow::Cow,\n+    boxed::Box,\n+    raw_vec::RawVec,\n+};\n \n /// A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.\n ///\n@@ -1646,7 +1651,7 @@ impl<T: Clone> Clone for Vec<T> {\n     // NB see the slice::hack module in slice.rs for more information\n     #[cfg(test)]\n     fn clone(&self) -> Vec<T> {\n-        ::slice::to_vec(&**self)\n+        crate::slice::to_vec(&**self)\n     }\n \n     fn clone_from(&mut self, other: &Vec<T>) {\n@@ -2193,7 +2198,7 @@ impl<'a, T: Clone> From<&'a [T]> for Vec<T> {\n     }\n     #[cfg(test)]\n     fn from(s: &'a [T]) -> Vec<T> {\n-        ::slice::to_vec(s)\n+        crate::slice::to_vec(s)\n     }\n }\n \n@@ -2205,7 +2210,7 @@ impl<'a, T: Clone> From<&'a mut [T]> for Vec<T> {\n     }\n     #[cfg(test)]\n     fn from(s: &'a mut [T]) -> Vec<T> {\n-        ::slice::to_vec(s)\n+        crate::slice::to_vec(s)\n     }\n }\n "}]}