{"sha": "7fe68571fa22d6504b3c14303cc4389cd5a92a24", "node_id": "C_kwDOAAsO6NoAKDdmZTY4NTcxZmEyMmQ2NTA0YjNjMTQzMDNjYzQzODljZDVhOTJhMjQ", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2023-01-17T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2023-01-17T21:00:41Z"}, "message": "Lazy dominator tree construction in borrowck\n\nMotivated by the observation that sometimes constructed dominator tree\nwas never queried.", "tree": {"sha": "d643d4d704443a72193ec60792c7a5d8a6c0ac9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d643d4d704443a72193ec60792c7a5d8a6c0ac9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fe68571fa22d6504b3c14303cc4389cd5a92a24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fe68571fa22d6504b3c14303cc4389cd5a92a24", "html_url": "https://github.com/rust-lang/rust/commit/7fe68571fa22d6504b3c14303cc4389cd5a92a24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fe68571fa22d6504b3c14303cc4389cd5a92a24/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "159ba8a92c9e2fa4121f106176309521f4af87e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/159ba8a92c9e2fa4121f106176309521f4af87e9", "html_url": "https://github.com/rust-lang/rust/commit/159ba8a92c9e2fa4121f106176309521f4af87e9"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "e5a36259fa495c0abdff6188e8dc5862499dbdbe", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fe68571fa22d6504b3c14303cc4389cd5a92a24/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fe68571fa22d6504b3c14303cc4389cd5a92a24/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=7fe68571fa22d6504b3c14303cc4389cd5a92a24", "patch": "@@ -2193,7 +2193,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let mut back_edge_stack = Vec::new();\n \n         predecessor_locations(self.body, location).for_each(|predecessor| {\n-            if location.dominates(predecessor, &self.dominators) {\n+            if location.dominates(predecessor, self.dominators()) {\n                 back_edge_stack.push(predecessor)\n             } else {\n                 stack.push(predecessor);\n@@ -2305,7 +2305,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n             let mut has_predecessor = false;\n             predecessor_locations(self.body, location).for_each(|predecessor| {\n-                if location.dominates(predecessor, &self.dominators) {\n+                if location.dominates(predecessor, self.dominators()) {\n                     back_edge_stack.push(predecessor)\n                 } else {\n                     stack.push(predecessor);"}, {"sha": "f2685241724d78bc33cbffad5bcc1e49b5bb22c2", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7fe68571fa22d6504b3c14303cc4389cd5a92a24/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fe68571fa22d6504b3c14303cc4389cd5a92a24/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=7fe68571fa22d6504b3c14303cc4389cd5a92a24", "patch": "@@ -5,6 +5,7 @@\n #![feature(let_chains)]\n #![feature(min_specialization)]\n #![feature(never_type)]\n+#![feature(once_cell)]\n #![feature(rustc_attrs)]\n #![feature(stmt_expr_attributes)]\n #![feature(trusted_step)]\n@@ -39,6 +40,7 @@ use rustc_span::{Span, Symbol};\n \n use either::Either;\n use smallvec::SmallVec;\n+use std::cell::OnceCell;\n use std::cell::RefCell;\n use std::collections::BTreeMap;\n use std::rc::Rc;\n@@ -333,7 +335,7 @@ fn do_mir_borrowck<'tcx>(\n                 used_mut: Default::default(),\n                 used_mut_upvars: SmallVec::new(),\n                 borrow_set: Rc::clone(&borrow_set),\n-                dominators: Dominators::dummy(), // not used\n+                dominators: Default::default(),\n                 upvars: Vec::new(),\n                 local_names: IndexVec::from_elem(None, &promoted_body.local_decls),\n                 region_names: RefCell::default(),\n@@ -346,8 +348,6 @@ fn do_mir_borrowck<'tcx>(\n         };\n     }\n \n-    let dominators = body.basic_blocks.dominators();\n-\n     let mut mbcx = MirBorrowckCtxt {\n         infcx,\n         param_env,\n@@ -364,7 +364,7 @@ fn do_mir_borrowck<'tcx>(\n         used_mut: Default::default(),\n         used_mut_upvars: SmallVec::new(),\n         borrow_set: Rc::clone(&borrow_set),\n-        dominators,\n+        dominators: Default::default(),\n         upvars,\n         local_names,\n         region_names: RefCell::default(),\n@@ -534,7 +534,7 @@ struct MirBorrowckCtxt<'cx, 'tcx> {\n     borrow_set: Rc<BorrowSet<'tcx>>,\n \n     /// Dominators for MIR\n-    dominators: Dominators<BasicBlock>,\n+    dominators: OnceCell<Dominators<BasicBlock>>,\n \n     /// Information about upvars not necessarily preserved in types or MIR\n     upvars: Vec<Upvar<'tcx>>,\n@@ -1051,7 +1051,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n                 (Read(kind), BorrowKind::Unique | BorrowKind::Mut { .. }) => {\n                     // Reading from mere reservations of mutable-borrows is OK.\n-                    if !is_active(&this.dominators, borrow, location) {\n+                    if !is_active(this.dominators(), borrow, location) {\n                         assert!(allow_two_phase_borrow(borrow.kind));\n                         return Control::Continue;\n                     }\n@@ -2219,6 +2219,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx>) -> Option<Field> {\n         path_utils::is_upvar_field_projection(self.infcx.tcx, &self.upvars, place_ref, self.body())\n     }\n+\n+    fn dominators(&self) -> &Dominators<BasicBlock> {\n+        self.dominators.get_or_init(|| self.body.basic_blocks.dominators())\n+    }\n }\n \n mod error {"}, {"sha": "434291e837424eccb0baed86c9f1a91114b2c00d", "filename": "compiler/rustc_data_structures/src/graph/dominators/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fe68571fa22d6504b3c14303cc4389cd5a92a24/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fe68571fa22d6504b3c14303cc4389cd5a92a24/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs?ref=7fe68571fa22d6504b3c14303cc4389cd5a92a24", "patch": "@@ -268,10 +268,6 @@ pub struct Dominators<N: Idx> {\n }\n \n impl<Node: Idx> Dominators<Node> {\n-    pub fn dummy() -> Self {\n-        Self { post_order_rank: IndexVec::new(), immediate_dominators: IndexVec::new() }\n-    }\n-\n     pub fn is_reachable(&self, node: Node) -> bool {\n         self.immediate_dominators[node].is_some()\n     }"}]}