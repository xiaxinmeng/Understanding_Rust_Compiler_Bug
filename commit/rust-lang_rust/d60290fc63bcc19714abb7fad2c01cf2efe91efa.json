{"sha": "d60290fc63bcc19714abb7fad2c01cf2efe91efa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MDI5MGZjNjNiY2MxOTcxNGFiYjdmYWQyYzAxY2YyZWZlOTFlZmE=", "commit": {"author": {"name": "Murarth", "email": "murarth@gmail.com", "date": "2018-10-08T23:52:48Z"}, "committer": {"name": "Murarth", "email": "murarth@gmail.com", "date": "2018-11-05T17:33:30Z"}, "message": "Fix undefined behavior in Rc/Arc allocation\n\nManually calculate allocation layout for `Rc`/`Arc` to avoid undefined behavior", "tree": {"sha": "f8926a8ec0f16f2b0b6e8f8307f23008f50e7bcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8926a8ec0f16f2b0b6e8f8307f23008f50e7bcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d60290fc63bcc19714abb7fad2c01cf2efe91efa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d60290fc63bcc19714abb7fad2c01cf2efe91efa", "html_url": "https://github.com/rust-lang/rust/commit/d60290fc63bcc19714abb7fad2c01cf2efe91efa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d60290fc63bcc19714abb7fad2c01cf2efe91efa/comments", "author": {"login": "murarth", "id": 1332722, "node_id": "MDQ6VXNlcjEzMzI3MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1332722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/murarth", "html_url": "https://github.com/murarth", "followers_url": "https://api.github.com/users/murarth/followers", "following_url": "https://api.github.com/users/murarth/following{/other_user}", "gists_url": "https://api.github.com/users/murarth/gists{/gist_id}", "starred_url": "https://api.github.com/users/murarth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/murarth/subscriptions", "organizations_url": "https://api.github.com/users/murarth/orgs", "repos_url": "https://api.github.com/users/murarth/repos", "events_url": "https://api.github.com/users/murarth/events{/privacy}", "received_events_url": "https://api.github.com/users/murarth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "murarth", "id": 1332722, "node_id": "MDQ6VXNlcjEzMzI3MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1332722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/murarth", "html_url": "https://github.com/murarth", "followers_url": "https://api.github.com/users/murarth/followers", "following_url": "https://api.github.com/users/murarth/following{/other_user}", "gists_url": "https://api.github.com/users/murarth/gists{/gist_id}", "starred_url": "https://api.github.com/users/murarth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/murarth/subscriptions", "organizations_url": "https://api.github.com/users/murarth/orgs", "repos_url": "https://api.github.com/users/murarth/repos", "events_url": "https://api.github.com/users/murarth/events{/privacy}", "received_events_url": "https://api.github.com/users/murarth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "423d8109868c1f926f2cfcc3bff980c3daa515fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/423d8109868c1f926f2cfcc3bff980c3daa515fd", "html_url": "https://github.com/rust-lang/rust/commit/423d8109868c1f926f2cfcc3bff980c3daa515fd"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "33511b8e0a1d628c9569df8ebc06dd5892f29e3c", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d60290fc63bcc19714abb7fad2c01cf2efe91efa/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d60290fc63bcc19714abb7fad2c01cf2efe91efa/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=d60290fc63bcc19714abb7fad2c01cf2efe91efa", "patch": "@@ -665,15 +665,17 @@ impl Rc<dyn Any> {\n impl<T: ?Sized> Rc<T> {\n     // Allocates an `RcBox<T>` with sufficient space for an unsized value\n     unsafe fn allocate_for_ptr(ptr: *const T) -> *mut RcBox<T> {\n-        // Create a fake RcBox to find allocation size and alignment\n-        let fake_ptr = ptr as *mut RcBox<T>;\n-\n-        let layout = Layout::for_value(&*fake_ptr);\n+        // Calculate layout using the given value.\n+        // Previously, layout was calculated on the expression\n+        // `&*(ptr as *const RcBox<T>)`, but this created a misaligned\n+        // reference (see #54908).\n+        let (layout, _) = Layout::new::<RcBox<()>>()\n+            .extend(Layout::for_value(&*ptr)).unwrap();\n \n         let mem = Global.alloc(layout)\n             .unwrap_or_else(|_| handle_alloc_error(layout));\n \n-        // Initialize the real RcBox\n+        // Initialize the RcBox\n         let inner = set_data_ptr(ptr as *mut T, mem.as_ptr() as *mut u8) as *mut RcBox<T>;\n \n         ptr::write(&mut (*inner).strong, Cell::new(1));"}, {"sha": "7f7b8fb90e6668d6a5fa1a8aaf650f959fe0cd89", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d60290fc63bcc19714abb7fad2c01cf2efe91efa/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d60290fc63bcc19714abb7fad2c01cf2efe91efa/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=d60290fc63bcc19714abb7fad2c01cf2efe91efa", "patch": "@@ -566,15 +566,17 @@ impl<T: ?Sized> Arc<T> {\n impl<T: ?Sized> Arc<T> {\n     // Allocates an `ArcInner<T>` with sufficient space for an unsized value\n     unsafe fn allocate_for_ptr(ptr: *const T) -> *mut ArcInner<T> {\n-        // Create a fake ArcInner to find allocation size and alignment\n-        let fake_ptr = ptr as *mut ArcInner<T>;\n-\n-        let layout = Layout::for_value(&*fake_ptr);\n+        // Calculate layout using the given value.\n+        // Previously, layout was calculated on the expression\n+        // `&*(ptr as *const ArcInner<T>)`, but this created a misaligned\n+        // reference (see #54908).\n+        let (layout, _) = Layout::new::<ArcInner<()>>()\n+            .extend(Layout::for_value(&*ptr)).unwrap();\n \n         let mem = Global.alloc(layout)\n             .unwrap_or_else(|_| handle_alloc_error(layout));\n \n-        // Initialize the real ArcInner\n+        // Initialize the ArcInner\n         let inner = set_data_ptr(ptr as *mut T, mem.as_ptr() as *mut u8) as *mut ArcInner<T>;\n \n         ptr::write(&mut (*inner).strong, atomic::AtomicUsize::new(1));"}]}