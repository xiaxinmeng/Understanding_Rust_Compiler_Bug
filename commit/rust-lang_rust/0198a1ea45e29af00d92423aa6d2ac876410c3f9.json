{"sha": "0198a1ea45e29af00d92423aa6d2ac876410c3f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxOThhMWVhNDVlMjlhZjAwZDkyNDIzYWE2ZDJhYzg3NjQxMGMzZjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-08T19:57:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-08T19:57:14Z"}, "message": "Auto merge of #53909 - mikhail-m1:53643, r=nikomatsakis\n\nSkip a shared borrow of a immutable local variables\n\nissue #53643\n\nr? @nikomatsakis", "tree": {"sha": "2711480bf2a79b00b1ba712f42dd01e9bc52b04a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2711480bf2a79b00b1ba712f42dd01e9bc52b04a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0198a1ea45e29af00d92423aa6d2ac876410c3f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0198a1ea45e29af00d92423aa6d2ac876410c3f9", "html_url": "https://github.com/rust-lang/rust/commit/0198a1ea45e29af00d92423aa6d2ac876410c3f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0198a1ea45e29af00d92423aa6d2ac876410c3f9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "968d95e9402e69c6a63b6b0a80da0de8307e0fcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/968d95e9402e69c6a63b6b0a80da0de8307e0fcc", "html_url": "https://github.com/rust-lang/rust/commit/968d95e9402e69c6a63b6b0a80da0de8307e0fcc"}, {"sha": "d0c1e5a99e3a9b0d57e8f1deea3c76bd1fb7c0e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0c1e5a99e3a9b0d57e8f1deea3c76bd1fb7c0e9", "html_url": "https://github.com/rust-lang/rust/commit/d0c1e5a99e3a9b0d57e8f1deea3c76bd1fb7c0e9"}], "stats": {"total": 1300, "additions": 822, "deletions": 478}, "files": [{"sha": "708ce8e203126c1326cf504acf714a30a2972a2d", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=0198a1ea45e29af00d92423aa6d2ac876410c3f9", "patch": "@@ -249,11 +249,6 @@ impl<'tcx> Mir<'tcx> {\n         } else if self.local_decls[local].name.is_some() {\n             LocalKind::Var\n         } else {\n-            debug_assert!(\n-                self.local_decls[local].mutability == Mutability::Mut,\n-                \"temp should be mutable\"\n-            );\n-\n             LocalKind::Temp\n         }\n     }\n@@ -782,33 +777,38 @@ impl<'tcx> LocalDecl<'tcx> {\n     /// Create a new `LocalDecl` for a temporary.\n     #[inline]\n     pub fn new_temp(ty: Ty<'tcx>, span: Span) -> Self {\n-        LocalDecl {\n-            mutability: Mutability::Mut,\n-            ty,\n-            name: None,\n-            source_info: SourceInfo {\n-                span,\n-                scope: OUTERMOST_SOURCE_SCOPE,\n-            },\n-            visibility_scope: OUTERMOST_SOURCE_SCOPE,\n-            internal: false,\n-            is_user_variable: None,\n-        }\n+        Self::new_local(ty, Mutability::Mut, false, span)\n+    }\n+\n+    /// Create a new immutable `LocalDecl` for a temporary.\n+    #[inline]\n+    pub fn new_immutable_temp(ty: Ty<'tcx>, span: Span) -> Self {\n+        Self::new_local(ty, Mutability::Not, false, span)\n     }\n \n     /// Create a new `LocalDecl` for a internal temporary.\n     #[inline]\n     pub fn new_internal(ty: Ty<'tcx>, span: Span) -> Self {\n+        Self::new_local(ty, Mutability::Mut, true, span)\n+    }\n+\n+    #[inline]\n+    fn new_local(\n+        ty: Ty<'tcx>,\n+        mutability: Mutability,\n+        internal: bool,\n+        span: Span,\n+    ) -> Self {\n         LocalDecl {\n-            mutability: Mutability::Mut,\n+            mutability,\n             ty,\n             name: None,\n             source_info: SourceInfo {\n                 span,\n                 scope: OUTERMOST_SOURCE_SCOPE,\n             },\n             visibility_scope: OUTERMOST_SOURCE_SCOPE,\n-            internal: true,\n+            internal,\n             is_user_variable: None,\n         }\n     }"}, {"sha": "8ddcfa054321e38ebc9cb3edd6d5d88935625e56", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=0198a1ea45e29af00d92423aa6d2ac876410c3f9", "patch": "@@ -10,12 +10,14 @@\n \n use borrow_check::place_ext::PlaceExt;\n use dataflow::indexes::BorrowIndex;\n+use dataflow::move_paths::MoveData;\n use rustc::mir::traversal;\n use rustc::mir::visit::{PlaceContext, Visitor};\n-use rustc::mir::{self, Location, Mir, Place};\n+use rustc::mir::{self, Location, Mir, Place, Local};\n use rustc::ty::{Region, TyCtxt};\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_vec::IndexVec;\n+use rustc_data_structures::bitvec::BitArray;\n use std::fmt;\n use std::hash::Hash;\n use std::ops::Index;\n@@ -43,6 +45,8 @@ crate struct BorrowSet<'tcx> {\n \n     /// Map from local to all the borrows on that local\n     crate local_map: FxHashMap<mir::Local, FxHashSet<BorrowIndex>>,\n+\n+    crate locals_state_at_exit: LocalsStateAtExit,\n }\n \n impl<'tcx> Index<BorrowIndex> for BorrowSet<'tcx> {\n@@ -96,8 +100,52 @@ impl<'tcx> fmt::Display for BorrowData<'tcx> {\n     }\n }\n \n+crate enum LocalsStateAtExit {\n+    AllAreInvalidated,\n+    SomeAreInvalidated { has_storage_dead_or_moved: BitArray<Local> }\n+}\n+\n+impl LocalsStateAtExit {\n+    fn build(\n+        locals_are_invalidated_at_exit: bool,\n+        mir: &Mir<'tcx>,\n+        move_data: &MoveData<'tcx>\n+    ) -> Self {\n+        struct HasStorageDead(BitArray<Local>);\n+\n+        impl<'tcx> Visitor<'tcx> for HasStorageDead {\n+            fn visit_local(&mut self, local: &Local, ctx: PlaceContext<'tcx>, _: Location) {\n+                if ctx == PlaceContext::StorageDead {\n+                    self.0.insert(*local);\n+                }\n+            }\n+        }\n+\n+        if locals_are_invalidated_at_exit {\n+            LocalsStateAtExit::AllAreInvalidated\n+        } else {\n+            let mut has_storage_dead = HasStorageDead(BitArray::new(mir.local_decls.len()));\n+            has_storage_dead.visit_mir(mir);\n+            let mut has_storage_dead_or_moved = has_storage_dead.0;\n+            for move_out in &move_data.moves {\n+                if let Some(index) = move_data.base_local(move_out.path) {\n+                    has_storage_dead_or_moved.insert(index);\n+\n+                }\n+            }\n+            LocalsStateAtExit::SomeAreInvalidated{ has_storage_dead_or_moved }\n+        }\n+    }\n+}\n+\n impl<'tcx> BorrowSet<'tcx> {\n-    pub fn build(tcx: TyCtxt<'_, '_, 'tcx>, mir: &Mir<'tcx>) -> Self {\n+    pub fn build(\n+        tcx: TyCtxt<'_, '_, 'tcx>,\n+        mir: &Mir<'tcx>,\n+        locals_are_invalidated_at_exit: bool,\n+        move_data: &MoveData<'tcx>\n+    ) -> Self {\n+\n         let mut visitor = GatherBorrows {\n             tcx,\n             mir,\n@@ -107,6 +155,8 @@ impl<'tcx> BorrowSet<'tcx> {\n             region_map: FxHashMap(),\n             local_map: FxHashMap(),\n             pending_activations: FxHashMap(),\n+            locals_state_at_exit:\n+                LocalsStateAtExit::build(locals_are_invalidated_at_exit, mir, move_data),\n         };\n \n         for (block, block_data) in traversal::preorder(mir) {\n@@ -119,6 +169,7 @@ impl<'tcx> BorrowSet<'tcx> {\n             activation_map: visitor.activation_map,\n             region_map: visitor.region_map,\n             local_map: visitor.local_map,\n+            locals_state_at_exit: visitor.locals_state_at_exit,\n         }\n     }\n \n@@ -148,6 +199,8 @@ struct GatherBorrows<'a, 'gcx: 'tcx, 'tcx: 'a> {\n     /// the borrow. When we find a later use of this activation, we\n     /// remove from the map (and add to the \"tombstone\" set below).\n     pending_activations: FxHashMap<mir::Local, BorrowIndex>,\n+\n+    locals_state_at_exit: LocalsStateAtExit,\n }\n \n impl<'a, 'gcx, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'gcx, 'tcx> {\n@@ -159,7 +212,8 @@ impl<'a, 'gcx, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'gcx, 'tcx> {\n         location: mir::Location,\n     ) {\n         if let mir::Rvalue::Ref(region, kind, ref borrowed_place) = *rvalue {\n-            if borrowed_place.ignore_borrow(self.tcx, self.mir) {\n+            if borrowed_place.ignore_borrow(\n+                self.tcx, self.mir, &self.locals_state_at_exit) {\n                 return;\n             }\n "}, {"sha": "76f6bcb5e566d08a3916b40d927ebadccb8921c4", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=0198a1ea45e29af00d92423aa6d2ac876410c3f9", "patch": "@@ -196,7 +196,12 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         |bd, i| DebugFormatted::new(&bd.move_data().inits[i]),\n     ));\n \n-    let borrow_set = Rc::new(BorrowSet::build(tcx, mir));\n+    let locals_are_invalidated_at_exit = match tcx.hir.body_owner_kind(id) {\n+            hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => false,\n+            hir::BodyOwnerKind::Fn => true,\n+    };\n+    let borrow_set = Rc::new(BorrowSet::build(\n+            tcx, mir, locals_are_invalidated_at_exit, &mdpe.move_data));\n \n     // If we are in non-lexical mode, compute the non-lexical lifetimes.\n     let (regioncx, polonius_output, opt_closure_req) = nll::compute_regions(\n@@ -241,10 +246,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         param_env: param_env,\n         location_table,\n         movable_generator,\n-        locals_are_invalidated_at_exit: match tcx.hir.body_owner_kind(id) {\n-            hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => false,\n-            hir::BodyOwnerKind::Fn => true,\n-        },\n+        locals_are_invalidated_at_exit,\n         access_place_error_reported: FxHashSet(),\n         reservation_error_reported: FxHashSet(),\n         moved_error_reported: FxHashSet(),"}, {"sha": "740cc64598438dcb2f46cc9e3647dafab0da37c3", "filename": "src/librustc_mir/borrow_check/place_ext.rs", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs?ref=0198a1ea45e29af00d92423aa6d2ac876410c3f9", "patch": "@@ -10,27 +10,57 @@\n \n use rustc::hir;\n use rustc::mir::ProjectionElem;\n-use rustc::mir::{Local, Mir, Place};\n+use rustc::mir::{Local, Mir, Place, Mutability};\n use rustc::ty::{self, TyCtxt};\n+use borrow_check::borrow_set::LocalsStateAtExit;\n \n /// Extension methods for the `Place` type.\n crate trait PlaceExt<'tcx> {\n     /// Returns true if we can safely ignore borrows of this place.\n     /// This is true whenever there is no action that the user can do\n     /// to the place `self` that would invalidate the borrow. This is true\n     /// for borrows of raw pointer dereferents as well as shared references.\n-    fn ignore_borrow(&self, tcx: TyCtxt<'_, '_, 'tcx>, mir: &Mir<'tcx>) -> bool;\n+    fn ignore_borrow(\n+        &self,\n+        tcx: TyCtxt<'_, '_, 'tcx>,\n+        mir: &Mir<'tcx>,\n+        locals_state_at_exit: &LocalsStateAtExit,\n+        ) -> bool;\n \n     /// If this is a place like `x.f.g`, returns the local\n     /// `x`. Returns `None` if this is based in a static.\n     fn root_local(&self) -> Option<Local>;\n }\n \n impl<'tcx> PlaceExt<'tcx> for Place<'tcx> {\n-    fn ignore_borrow(&self, tcx: TyCtxt<'_, '_, 'tcx>, mir: &Mir<'tcx>) -> bool {\n+    fn ignore_borrow(\n+        &self,\n+        tcx: TyCtxt<'_, '_, 'tcx>,\n+        mir: &Mir<'tcx>,\n+        locals_state_at_exit: &LocalsStateAtExit,\n+    ) -> bool {\n         match self {\n-            Place::Promoted(_) |\n-            Place::Local(_) => false,\n+            Place::Promoted(_) => false,\n+\n+            // If a local variable is immutable, then we only need to track borrows to guard\n+            // against two kinds of errors:\n+            // * The variable being dropped while still borrowed (e.g., because the fn returns\n+            //   a reference to a local variable)\n+            // * The variable being moved while still borrowed\n+            //\n+            // In particular, the variable cannot be mutated -- the \"access checks\" will fail --\n+            // so we don't have to worry about mutation while borrowed.\n+            Place::Local(index) => {\n+                match locals_state_at_exit {\n+                    LocalsStateAtExit::AllAreInvalidated => false,\n+                    LocalsStateAtExit::SomeAreInvalidated { has_storage_dead_or_moved } => {\n+                        let ignore = !has_storage_dead_or_moved.contains(*index) &&\n+                            mir.local_decls[*index].mutability == Mutability::Not;\n+                        debug!(\"ignore_borrow: local {:?} => {:?}\", index, ignore);\n+                        ignore\n+                    }\n+                }\n+            }\n             Place::Static(static_) => {\n                 tcx.is_static(static_.def_id) == Some(hir::Mutability::MutMutable)\n             }\n@@ -39,7 +69,8 @@ impl<'tcx> PlaceExt<'tcx> for Place<'tcx> {\n                 | ProjectionElem::Downcast(..)\n                 | ProjectionElem::Subslice { .. }\n                 | ProjectionElem::ConstantIndex { .. }\n-                | ProjectionElem::Index(_) => proj.base.ignore_borrow(tcx, mir),\n+                | ProjectionElem::Index(_) => proj.base.ignore_borrow(\n+                    tcx, mir, locals_state_at_exit),\n \n                 ProjectionElem::Deref => {\n                     let ty = proj.base.ty(mir, tcx).to_ty(tcx);\n@@ -55,7 +86,7 @@ impl<'tcx> PlaceExt<'tcx> for Place<'tcx> {\n                         // borrowed *that* one, leaving the original\n                         // path unborrowed.\n                         ty::RawPtr(..) | ty::Ref(_, _, hir::MutImmutable) => true,\n-                        _ => proj.base.ignore_borrow(tcx, mir),\n+                        _ => proj.base.ignore_borrow(tcx, mir, locals_state_at_exit),\n                     }\n                 }\n             },"}, {"sha": "606bd2978b6429801d8e7f5e8f909b0601353ca4", "filename": "src/librustc_mir/build/expr/as_constant.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_constant.rs?ref=0198a1ea45e29af00d92423aa6d2ac876410c3f9", "patch": "@@ -18,26 +18,34 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// Compile `expr`, yielding a compile-time constant. Assumes that\n     /// `expr` is a valid compile-time constant!\n     pub fn as_constant<M>(&mut self, expr: M) -> Constant<'tcx>\n-        where M: Mirror<'tcx, Output=Expr<'tcx>>\n+    where\n+        M: Mirror<'tcx, Output = Expr<'tcx>>,\n     {\n         let expr = self.hir.mirror(expr);\n         self.expr_as_constant(expr)\n     }\n \n     fn expr_as_constant(&mut self, expr: Expr<'tcx>) -> Constant<'tcx> {\n         let this = self;\n-        let Expr { ty, temp_lifetime: _, span, kind }\n-            = expr;\n+        let Expr {\n+            ty,\n+            temp_lifetime: _,\n+            span,\n+            kind,\n+        } = expr;\n         match kind {\n-            ExprKind::Scope { region_scope: _, lint_level: _, value } =>\n-                this.as_constant(value),\n-            ExprKind::Literal { literal, user_ty } =>\n-                Constant { span, ty, user_ty, literal },\n-            _ =>\n-                span_bug!(\n-                    span,\n-                    \"expression is not a valid constant {:?}\",\n-                    kind),\n+            ExprKind::Scope {\n+                region_scope: _,\n+                lint_level: _,\n+                value,\n+            } => this.as_constant(value),\n+            ExprKind::Literal { literal, user_ty } => Constant {\n+                span,\n+                ty,\n+                user_ty,\n+                literal,\n+            },\n+            _ => span_bug!(span, \"expression is not a valid constant {:?}\", kind),\n         }\n     }\n }"}, {"sha": "8046d898e0a8822c146b5afaa75083fbe6e80831", "filename": "src/librustc_mir/build/expr/as_operand.rs", "status": "modified", "additions": 30, "deletions": 20, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs?ref=0198a1ea45e29af00d92423aa6d2ac876410c3f9", "patch": "@@ -10,8 +10,8 @@\n \n //! See docs in build/expr/mod.rs\n \n-use build::{BlockAnd, BlockAndExtension, Builder};\n use build::expr::category::Category;\n+use build::{BlockAnd, BlockAndExtension, Builder};\n use hair::*;\n use rustc::middle::region;\n use rustc::mir::*;\n@@ -23,9 +23,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// The operand returned from this function will *not be valid* after\n     /// an ExprKind::Scope is passed, so please do *not* return it from\n     /// functions to avoid bad miscompiles.\n-    pub fn as_local_operand<M>(&mut self, block: BasicBlock, expr: M)\n-                             -> BlockAnd<Operand<'tcx>>\n-        where M: Mirror<'tcx, Output = Expr<'tcx>>\n+    pub fn as_local_operand<M>(&mut self, block: BasicBlock, expr: M) -> BlockAnd<Operand<'tcx>>\n+    where\n+        M: Mirror<'tcx, Output = Expr<'tcx>>,\n     {\n         let local_scope = self.local_scope();\n         self.as_operand(block, local_scope, expr)\n@@ -37,25 +37,34 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// this time.\n     ///\n     /// The operand is known to be live until the end of `scope`.\n-    pub fn as_operand<M>(&mut self,\n-                         block: BasicBlock,\n-                         scope: Option<region::Scope>,\n-                         expr: M) -> BlockAnd<Operand<'tcx>>\n-        where M: Mirror<'tcx, Output = Expr<'tcx>>\n+    pub fn as_operand<M>(\n+        &mut self,\n+        block: BasicBlock,\n+        scope: Option<region::Scope>,\n+        expr: M,\n+    ) -> BlockAnd<Operand<'tcx>>\n+    where\n+        M: Mirror<'tcx, Output = Expr<'tcx>>,\n     {\n         let expr = self.hir.mirror(expr);\n         self.expr_as_operand(block, scope, expr)\n     }\n \n-    fn expr_as_operand(&mut self,\n-                       mut block: BasicBlock,\n-                       scope: Option<region::Scope>,\n-                       expr: Expr<'tcx>)\n-                       -> BlockAnd<Operand<'tcx>> {\n+    fn expr_as_operand(\n+        &mut self,\n+        mut block: BasicBlock,\n+        scope: Option<region::Scope>,\n+        expr: Expr<'tcx>,\n+    ) -> BlockAnd<Operand<'tcx>> {\n         debug!(\"expr_as_operand(block={:?}, expr={:?})\", block, expr);\n         let this = self;\n \n-        if let ExprKind::Scope { region_scope, lint_level, value } = expr.kind {\n+        if let ExprKind::Scope {\n+            region_scope,\n+            lint_level,\n+            value,\n+        } = expr.kind\n+        {\n             let source_info = this.source_info(expr.span);\n             let region_scope = (region_scope, source_info);\n             return this.in_scope(region_scope, lint_level, block, |this| {\n@@ -64,16 +73,17 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         }\n \n         let category = Category::of(&expr.kind).unwrap();\n-        debug!(\"expr_as_operand: category={:?} for={:?}\", category, expr.kind);\n+        debug!(\n+            \"expr_as_operand: category={:?} for={:?}\",\n+            category, expr.kind\n+        );\n         match category {\n             Category::Constant => {\n                 let constant = this.as_constant(expr);\n                 block.and(Operand::Constant(box constant))\n             }\n-            Category::Place |\n-            Category::Rvalue(..) => {\n-                let operand =\n-                    unpack!(block = this.as_temp(block, scope, expr));\n+            Category::Place | Category::Rvalue(..) => {\n+                let operand = unpack!(block = this.as_temp(block, scope, expr, Mutability::Mut));\n                 block.and(Operand::Move(Place::Local(operand)))\n             }\n         }"}, {"sha": "5688ea9d260f59ec704adaad6265330be112161e", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 104, "deletions": 69, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=0198a1ea45e29af00d92423aa6d2ac876410c3f9", "patch": "@@ -10,42 +10,64 @@\n \n //! See docs in build/expr/mod.rs\n \n-use build::{BlockAnd, BlockAndExtension, Builder};\n-use build::ForGuard::{OutsideGuard, RefWithinGuard};\n use build::expr::category::Category;\n+use build::ForGuard::{OutsideGuard, RefWithinGuard};\n+use build::{BlockAnd, BlockAndExtension, Builder};\n use hair::*;\n-use rustc::mir::*;\n use rustc::mir::interpret::EvalErrorKind::BoundsCheck;\n+use rustc::mir::*;\n \n use rustc_data_structures::indexed_vec::Idx;\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// Compile `expr`, yielding a place that we can move from etc.\n-    pub fn as_place<M>(&mut self,\n-                        block: BasicBlock,\n-                        expr: M)\n-                        -> BlockAnd<Place<'tcx>>\n-        where M: Mirror<'tcx, Output=Expr<'tcx>>\n+    pub fn as_place<M>(&mut self, block: BasicBlock, expr: M) -> BlockAnd<Place<'tcx>>\n+    where\n+        M: Mirror<'tcx, Output = Expr<'tcx>>,\n     {\n         let expr = self.hir.mirror(expr);\n-        self.expr_as_place(block, expr)\n+        self.expr_as_place(block, expr, Mutability::Mut)\n     }\n \n-    fn expr_as_place(&mut self,\n-                      mut block: BasicBlock,\n-                      expr: Expr<'tcx>)\n-                      -> BlockAnd<Place<'tcx>> {\n-        debug!(\"expr_as_place(block={:?}, expr={:?})\", block, expr);\n+    /// Compile `expr`, yielding a place that we can move from etc.\n+    /// Mutability note: The caller of this method promises only to read from the resulting\n+    /// place. The place itself may or may not be mutable:\n+    /// * If this expr is a place expr like a.b, then we will return that place.\n+    /// * Otherwise, a temporary is created: in that event, it will be an immutable temporary.\n+    pub fn as_read_only_place<M>(&mut self, block: BasicBlock, expr: M) -> BlockAnd<Place<'tcx>>\n+    where\n+        M: Mirror<'tcx, Output = Expr<'tcx>>,\n+    {\n+        let expr = self.hir.mirror(expr);\n+        self.expr_as_place(block, expr, Mutability::Not)\n+    }\n+\n+    fn expr_as_place(\n+        &mut self,\n+        mut block: BasicBlock,\n+        expr: Expr<'tcx>,\n+        mutability: Mutability,\n+    ) -> BlockAnd<Place<'tcx>> {\n+        debug!(\n+            \"expr_as_place(block={:?}, expr={:?}, mutability={:?})\",\n+            block, expr, mutability\n+        );\n \n         let this = self;\n         let expr_span = expr.span;\n         let source_info = this.source_info(expr_span);\n         match expr.kind {\n-            ExprKind::Scope { region_scope, lint_level, value } => {\n-                this.in_scope((region_scope, source_info), lint_level, block, |this| {\n+            ExprKind::Scope {\n+                region_scope,\n+                lint_level,\n+                value,\n+            } => this.in_scope((region_scope, source_info), lint_level, block, |this| {\n+                if mutability == Mutability::Not {\n+                    this.as_read_only_place(block, value)\n+                } else {\n                     this.as_place(block, value)\n-                })\n-            }\n+                }\n+            }),\n             ExprKind::Field { lhs, name } => {\n                 let place = unpack!(block = this.as_place(block, lhs));\n                 let place = place.field(name, expr.ty);\n@@ -63,32 +85,43 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 // region_scope=None so place indexes live forever. They are scalars so they\n                 // do not need storage annotations, and they are often copied between\n                 // places.\n-                let idx = unpack!(block = this.as_temp(block, None, index));\n+                let idx = unpack!(block = this.as_temp(block, None, index, Mutability::Mut));\n \n                 // bounds check:\n-                let (len, lt) = (this.temp(usize_ty.clone(), expr_span),\n-                                 this.temp(bool_ty, expr_span));\n-                this.cfg.push_assign(block, source_info, // len = len(slice)\n-                                     &len, Rvalue::Len(slice.clone()));\n-                this.cfg.push_assign(block, source_info, // lt = idx < len\n-                                     &lt, Rvalue::BinaryOp(BinOp::Lt,\n-                                                           Operand::Copy(Place::Local(idx)),\n-                                                           Operand::Copy(len.clone())));\n+                let (len, lt) = (\n+                    this.temp(usize_ty.clone(), expr_span),\n+                    this.temp(bool_ty, expr_span),\n+                );\n+                this.cfg.push_assign(\n+                    block,\n+                    source_info, // len = len(slice)\n+                    &len,\n+                    Rvalue::Len(slice.clone()),\n+                );\n+                this.cfg.push_assign(\n+                    block,\n+                    source_info, // lt = idx < len\n+                    &lt,\n+                    Rvalue::BinaryOp(\n+                        BinOp::Lt,\n+                        Operand::Copy(Place::Local(idx)),\n+                        Operand::Copy(len.clone()),\n+                    ),\n+                );\n \n                 let msg = BoundsCheck {\n                     len: Operand::Move(len),\n-                    index: Operand::Copy(Place::Local(idx))\n+                    index: Operand::Copy(Place::Local(idx)),\n                 };\n-                let success = this.assert(block, Operand::Move(lt), true,\n-                                          msg, expr_span);\n+                let success = this.assert(block, Operand::Move(lt), true, msg, expr_span);\n                 success.and(slice.index(idx))\n             }\n-            ExprKind::SelfRef => {\n-                block.and(Place::Local(Local::new(1)))\n-            }\n+            ExprKind::SelfRef => block.and(Place::Local(Local::new(1))),\n             ExprKind::VarRef { id } => {\n-                let place = if this.is_bound_var_in_guard(id) &&\n-                    this.hir.tcx().all_pat_vars_are_implicit_refs_within_guards()\n+                let place = if this.is_bound_var_in_guard(id) && this\n+                    .hir\n+                    .tcx()\n+                    .all_pat_vars_are_implicit_refs_within_guards()\n                 {\n                     let index = this.var_local_id(id, RefWithinGuard);\n                     Place::Local(index).deref()\n@@ -98,46 +131,48 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 };\n                 block.and(place)\n             }\n-            ExprKind::StaticRef { id } => {\n-                block.and(Place::Static(Box::new(Static { def_id: id, ty: expr.ty })))\n-            }\n+            ExprKind::StaticRef { id } => block.and(Place::Static(Box::new(Static {\n+                def_id: id,\n+                ty: expr.ty,\n+            }))),\n \n-            ExprKind::Array { .. } |\n-            ExprKind::Tuple { .. } |\n-            ExprKind::Adt { .. } |\n-            ExprKind::Closure { .. } |\n-            ExprKind::Unary { .. } |\n-            ExprKind::Binary { .. } |\n-            ExprKind::LogicalOp { .. } |\n-            ExprKind::Box { .. } |\n-            ExprKind::Cast { .. } |\n-            ExprKind::Use { .. } |\n-            ExprKind::NeverToAny { .. } |\n-            ExprKind::ReifyFnPointer { .. } |\n-            ExprKind::ClosureFnPointer { .. } |\n-            ExprKind::UnsafeFnPointer { .. } |\n-            ExprKind::Unsize { .. } |\n-            ExprKind::Repeat { .. } |\n-            ExprKind::Borrow { .. } |\n-            ExprKind::If { .. } |\n-            ExprKind::Match { .. } |\n-            ExprKind::Loop { .. } |\n-            ExprKind::Block { .. } |\n-            ExprKind::Assign { .. } |\n-            ExprKind::AssignOp { .. } |\n-            ExprKind::Break { .. } |\n-            ExprKind::Continue { .. } |\n-            ExprKind::Return { .. } |\n-            ExprKind::Literal { .. } |\n-            ExprKind::InlineAsm { .. } |\n-            ExprKind::Yield { .. } |\n-            ExprKind::Call { .. } => {\n+            ExprKind::Array { .. }\n+            | ExprKind::Tuple { .. }\n+            | ExprKind::Adt { .. }\n+            | ExprKind::Closure { .. }\n+            | ExprKind::Unary { .. }\n+            | ExprKind::Binary { .. }\n+            | ExprKind::LogicalOp { .. }\n+            | ExprKind::Box { .. }\n+            | ExprKind::Cast { .. }\n+            | ExprKind::Use { .. }\n+            | ExprKind::NeverToAny { .. }\n+            | ExprKind::ReifyFnPointer { .. }\n+            | ExprKind::ClosureFnPointer { .. }\n+            | ExprKind::UnsafeFnPointer { .. }\n+            | ExprKind::Unsize { .. }\n+            | ExprKind::Repeat { .. }\n+            | ExprKind::Borrow { .. }\n+            | ExprKind::If { .. }\n+            | ExprKind::Match { .. }\n+            | ExprKind::Loop { .. }\n+            | ExprKind::Block { .. }\n+            | ExprKind::Assign { .. }\n+            | ExprKind::AssignOp { .. }\n+            | ExprKind::Break { .. }\n+            | ExprKind::Continue { .. }\n+            | ExprKind::Return { .. }\n+            | ExprKind::Literal { .. }\n+            | ExprKind::InlineAsm { .. }\n+            | ExprKind::Yield { .. }\n+            | ExprKind::Call { .. } => {\n                 // these are not places, so we need to make a temporary.\n                 debug_assert!(match Category::of(&expr.kind) {\n                     Some(Category::Place) => false,\n                     _ => true,\n                 });\n-                let temp = unpack!(block = this.as_temp(block, expr.temp_lifetime, expr));\n+                let temp =\n+                    unpack!(block = this.as_temp(block, expr.temp_lifetime, expr, mutability));\n                 block.and(Place::Local(temp))\n             }\n         }"}, {"sha": "b721120f74dbd3d0d8e2f6b409c9deb42a20bdae", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 226, "deletions": 136, "changes": 362, "blob_url": "https://github.com/rust-lang/rust/blob/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=0198a1ea45e29af00d92423aa6d2ac876410c3f9", "patch": "@@ -13,64 +13,84 @@\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n \n-use build::{BlockAnd, BlockAndExtension, Builder};\n use build::expr::category::{Category, RvalueFunc};\n+use build::{BlockAnd, BlockAndExtension, Builder};\n use hair::*;\n use rustc::middle::region;\n-use rustc::ty::{self, Ty, UpvarSubsts};\n-use rustc::mir::*;\n use rustc::mir::interpret::EvalErrorKind;\n+use rustc::mir::*;\n+use rustc::ty::{self, Ty, UpvarSubsts};\n use syntax_pos::Span;\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// See comment on `as_local_operand`\n-    pub fn as_local_rvalue<M>(&mut self, block: BasicBlock, expr: M)\n-                             -> BlockAnd<Rvalue<'tcx>>\n-        where M: Mirror<'tcx, Output = Expr<'tcx>>\n+    pub fn as_local_rvalue<M>(&mut self, block: BasicBlock, expr: M) -> BlockAnd<Rvalue<'tcx>>\n+    where\n+        M: Mirror<'tcx, Output = Expr<'tcx>>,\n     {\n         let local_scope = self.local_scope();\n         self.as_rvalue(block, local_scope, expr)\n     }\n \n     /// Compile `expr`, yielding an rvalue.\n-    pub fn as_rvalue<M>(&mut self, block: BasicBlock, scope: Option<region::Scope>, expr: M)\n-                        -> BlockAnd<Rvalue<'tcx>>\n-        where M: Mirror<'tcx, Output = Expr<'tcx>>\n+    pub fn as_rvalue<M>(\n+        &mut self,\n+        block: BasicBlock,\n+        scope: Option<region::Scope>,\n+        expr: M,\n+    ) -> BlockAnd<Rvalue<'tcx>>\n+    where\n+        M: Mirror<'tcx, Output = Expr<'tcx>>,\n     {\n         let expr = self.hir.mirror(expr);\n         self.expr_as_rvalue(block, scope, expr)\n     }\n \n-    fn expr_as_rvalue(&mut self,\n-                      mut block: BasicBlock,\n-                      scope: Option<region::Scope>,\n-                      expr: Expr<'tcx>)\n-                      -> BlockAnd<Rvalue<'tcx>> {\n-        debug!(\"expr_as_rvalue(block={:?}, scope={:?}, expr={:?})\", block, scope, expr);\n+    fn expr_as_rvalue(\n+        &mut self,\n+        mut block: BasicBlock,\n+        scope: Option<region::Scope>,\n+        expr: Expr<'tcx>,\n+    ) -> BlockAnd<Rvalue<'tcx>> {\n+        debug!(\n+            \"expr_as_rvalue(block={:?}, scope={:?}, expr={:?})\",\n+            block, scope, expr\n+        );\n \n         let this = self;\n         let expr_span = expr.span;\n         let source_info = this.source_info(expr_span);\n \n         match expr.kind {\n-            ExprKind::Scope { region_scope, lint_level, value } => {\n+            ExprKind::Scope {\n+                region_scope,\n+                lint_level,\n+                value,\n+            } => {\n                 let region_scope = (region_scope, source_info);\n-                this.in_scope(region_scope, lint_level, block,\n-                              |this| this.as_rvalue(block, scope, value))\n+                this.in_scope(region_scope, lint_level, block, |this| {\n+                    this.as_rvalue(block, scope, value)\n+                })\n             }\n             ExprKind::Repeat { value, count } => {\n                 let value_operand = unpack!(block = this.as_operand(block, scope, value));\n                 block.and(Rvalue::Repeat(value_operand, count))\n             }\n-            ExprKind::Borrow { region, borrow_kind, arg } => {\n-                let arg_place = unpack!(block = this.as_place(block, arg));\n+            ExprKind::Borrow {\n+                region,\n+                borrow_kind,\n+                arg,\n+            } => {\n+                let arg_place = match borrow_kind {\n+                    BorrowKind::Shared => unpack!(block = this.as_read_only_place(block, arg)),\n+                    _ => unpack!(block = this.as_place(block, arg)),\n+                };\n                 block.and(Rvalue::Ref(region, borrow_kind, arg_place))\n             }\n             ExprKind::Binary { op, lhs, rhs } => {\n                 let lhs = unpack!(block = this.as_operand(block, scope, lhs));\n                 let rhs = unpack!(block = this.as_operand(block, scope, rhs));\n-                this.build_binary_op(block, op, expr_span, expr.ty,\n-                                     lhs, rhs)\n+                this.build_binary_op(block, op, expr_span, expr.ty, lhs, rhs)\n             }\n             ExprKind::Unary { op, arg } => {\n                 let arg = unpack!(block = this.as_operand(block, scope, arg));\n@@ -81,11 +101,20 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     let minval = this.minval_literal(expr_span, expr.ty);\n                     let is_min = this.temp(bool_ty, expr_span);\n \n-                    this.cfg.push_assign(block, source_info, &is_min,\n-                                         Rvalue::BinaryOp(BinOp::Eq, arg.to_copy(), minval));\n+                    this.cfg.push_assign(\n+                        block,\n+                        source_info,\n+                        &is_min,\n+                        Rvalue::BinaryOp(BinOp::Eq, arg.to_copy(), minval),\n+                    );\n \n-                    block = this.assert(block, Operand::Move(is_min), false,\n-                                        EvalErrorKind::OverflowNeg, expr_span);\n+                    block = this.assert(\n+                        block,\n+                        Operand::Move(is_min),\n+                        false,\n+                        EvalErrorKind::OverflowNeg,\n+                        expr_span,\n+                    );\n                 }\n                 block.and(Rvalue::UnaryOp(op, arg))\n             }\n@@ -94,22 +123,30 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 // The `Box<T>` temporary created here is not a part of the HIR,\n                 // and therefore is not considered during generator OIBIT\n                 // determination. See the comment about `box` at `yield_in_scope`.\n-                let result = this.local_decls.push(\n-                    LocalDecl::new_internal(expr.ty, expr_span));\n-                this.cfg.push(block, Statement {\n-                    source_info,\n-                    kind: StatementKind::StorageLive(result)\n-                });\n+                let result = this\n+                    .local_decls\n+                    .push(LocalDecl::new_internal(expr.ty, expr_span));\n+                this.cfg.push(\n+                    block,\n+                    Statement {\n+                        source_info,\n+                        kind: StatementKind::StorageLive(result),\n+                    },\n+                );\n                 if let Some(scope) = scope {\n                     // schedule a shallow free of that memory, lest we unwind:\n                     this.schedule_drop_storage_and_value(\n-                        expr_span, scope, &Place::Local(result), value.ty,\n+                        expr_span,\n+                        scope,\n+                        &Place::Local(result),\n+                        value.ty,\n                     );\n                 }\n \n                 // malloc some memory of suitable type (thus far, uninitialized):\n                 let box_ = Rvalue::NullaryOp(NullOp::Box, value.ty);\n-                this.cfg.push_assign(block, source_info, &Place::Local(result), box_);\n+                this.cfg\n+                    .push_assign(block, source_info, &Place::Local(result), box_);\n \n                 // initialize the box contents:\n                 unpack!(block = this.into(&Place::Local(result).deref(), block, value));\n@@ -170,23 +207,29 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n                 // first process the set of fields\n                 let el_ty = expr.ty.sequence_element_type(this.hir.tcx());\n-                let fields: Vec<_> =\n-                    fields.into_iter()\n-                          .map(|f| unpack!(block = this.as_operand(block, scope, f)))\n-                          .collect();\n+                let fields: Vec<_> = fields\n+                    .into_iter()\n+                    .map(|f| unpack!(block = this.as_operand(block, scope, f)))\n+                    .collect();\n \n                 block.and(Rvalue::Aggregate(box AggregateKind::Array(el_ty), fields))\n             }\n-            ExprKind::Tuple { fields } => { // see (*) above\n+            ExprKind::Tuple { fields } => {\n+                // see (*) above\n                 // first process the set of fields\n-                let fields: Vec<_> =\n-                    fields.into_iter()\n-                          .map(|f| unpack!(block = this.as_operand(block, scope, f)))\n-                          .collect();\n+                let fields: Vec<_> = fields\n+                    .into_iter()\n+                    .map(|f| unpack!(block = this.as_operand(block, scope, f)))\n+                    .collect();\n \n                 block.and(Rvalue::Aggregate(box AggregateKind::Tuple, fields))\n             }\n-            ExprKind::Closure { closure_id, substs, upvars, movability } => {\n+            ExprKind::Closure {\n+                closure_id,\n+                substs,\n+                upvars,\n+                movability,\n+            } => {\n                 // see (*) above\n                 let mut operands: Vec<_> = upvars\n                     .into_iter()\n@@ -212,25 +255,22 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                 // that caused the capture will cause an error.\n                                 match upvar.kind {\n                                     ExprKind::Borrow {\n-                                        borrow_kind: BorrowKind::Mut {\n-                                            allow_two_phase_borrow: false\n-                                        },\n+                                        borrow_kind:\n+                                            BorrowKind::Mut {\n+                                                allow_two_phase_borrow: false,\n+                                            },\n                                         region,\n                                         arg,\n-                                    } => unpack!(block = this.limit_capture_mutability(\n-                                        upvar.span,\n-                                        upvar.ty,\n-                                        scope,\n-                                        block,\n-                                        arg,\n-                                        region,\n-                                    )),\n+                                    } => unpack!(\n+                                        block = this.limit_capture_mutability(\n+                                            upvar.span, upvar.ty, scope, block, arg, region,\n+                                        )\n+                                    ),\n                                     _ => unpack!(block = this.as_operand(block, scope, upvar)),\n                                 }\n                             }\n                         }\n-                    })\n-                    .collect();\n+                    }).collect();\n                 let result = match substs {\n                     UpvarSubsts::Generator(substs) => {\n                         let movability = movability.unwrap();\n@@ -248,23 +288,36 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         }));\n                         box AggregateKind::Generator(closure_id, substs, movability)\n                     }\n-                    UpvarSubsts::Closure(substs) => {\n-                        box AggregateKind::Closure(closure_id, substs)\n-                    }\n+                    UpvarSubsts::Closure(substs) => box AggregateKind::Closure(closure_id, substs),\n                 };\n                 block.and(Rvalue::Aggregate(result, operands))\n             }\n             ExprKind::Adt {\n-                adt_def, variant_index, substs, user_ty, fields, base\n-            } => { // see (*) above\n+                adt_def,\n+                variant_index,\n+                substs,\n+                user_ty,\n+                fields,\n+                base,\n+            } => {\n+                // see (*) above\n                 let is_union = adt_def.is_union();\n-                let active_field_index = if is_union { Some(fields[0].name.index()) } else { None };\n+                let active_field_index = if is_union {\n+                    Some(fields[0].name.index())\n+                } else {\n+                    None\n+                };\n \n                 // first process the set of fields that were provided\n                 // (evaluating them in order given by user)\n-                let fields_map: FxHashMap<_, _> = fields.into_iter()\n-                    .map(|f| (f.name, unpack!(block = this.as_operand(block, scope, f.expr))))\n-                    .collect();\n+                let fields_map: FxHashMap<_, _> = fields\n+                    .into_iter()\n+                    .map(|f| {\n+                        (\n+                            f.name,\n+                            unpack!(block = this.as_operand(block, scope, f.expr)),\n+                        )\n+                    }).collect();\n \n                 let field_names = this.hir.all_fields(adt_def, variant_index);\n \n@@ -274,15 +327,18 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     // MIR does not natively support FRU, so for each\n                     // base-supplied field, generate an operand that\n                     // reads it from the base.\n-                    field_names.into_iter()\n+                    field_names\n+                        .into_iter()\n                         .zip(field_types.into_iter())\n                         .map(|(n, ty)| match fields_map.get(&n) {\n                             Some(v) => v.clone(),\n-                            None => this.consume_by_copy_or_move(base.clone().field(n, ty))\n-                        })\n-                        .collect()\n+                            None => this.consume_by_copy_or_move(base.clone().field(n, ty)),\n+                        }).collect()\n                 } else {\n-                    field_names.iter().filter_map(|n| fields_map.get(n).cloned()).collect()\n+                    field_names\n+                        .iter()\n+                        .filter_map(|n| fields_map.get(n).cloned())\n+                        .collect()\n                 };\n \n                 let adt = box AggregateKind::Adt(\n@@ -294,40 +350,43 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 );\n                 block.and(Rvalue::Aggregate(adt, fields))\n             }\n-            ExprKind::Assign { .. } |\n-            ExprKind::AssignOp { .. } => {\n+            ExprKind::Assign { .. } | ExprKind::AssignOp { .. } => {\n                 block = unpack!(this.stmt_expr(block, expr));\n                 block.and(this.unit_rvalue())\n             }\n             ExprKind::Yield { value } => {\n                 let value = unpack!(block = this.as_operand(block, scope, value));\n                 let resume = this.cfg.start_new_block();\n                 let cleanup = this.generator_drop_cleanup();\n-                this.cfg.terminate(block, source_info, TerminatorKind::Yield {\n-                    value: value,\n-                    resume: resume,\n-                    drop: cleanup,\n-                });\n+                this.cfg.terminate(\n+                    block,\n+                    source_info,\n+                    TerminatorKind::Yield {\n+                        value: value,\n+                        resume: resume,\n+                        drop: cleanup,\n+                    },\n+                );\n                 resume.and(this.unit_rvalue())\n             }\n-            ExprKind::Literal { .. } |\n-            ExprKind::Block { .. } |\n-            ExprKind::Match { .. } |\n-            ExprKind::If { .. } |\n-            ExprKind::NeverToAny { .. } |\n-            ExprKind::Loop { .. } |\n-            ExprKind::LogicalOp { .. } |\n-            ExprKind::Call { .. } |\n-            ExprKind::Field { .. } |\n-            ExprKind::Deref { .. } |\n-            ExprKind::Index { .. } |\n-            ExprKind::VarRef { .. } |\n-            ExprKind::SelfRef |\n-            ExprKind::Break { .. } |\n-            ExprKind::Continue { .. } |\n-            ExprKind::Return { .. } |\n-            ExprKind::InlineAsm { .. } |\n-            ExprKind::StaticRef { .. } => {\n+            ExprKind::Literal { .. }\n+            | ExprKind::Block { .. }\n+            | ExprKind::Match { .. }\n+            | ExprKind::If { .. }\n+            | ExprKind::NeverToAny { .. }\n+            | ExprKind::Loop { .. }\n+            | ExprKind::LogicalOp { .. }\n+            | ExprKind::Call { .. }\n+            | ExprKind::Field { .. }\n+            | ExprKind::Deref { .. }\n+            | ExprKind::Index { .. }\n+            | ExprKind::VarRef { .. }\n+            | ExprKind::SelfRef\n+            | ExprKind::Break { .. }\n+            | ExprKind::Continue { .. }\n+            | ExprKind::Return { .. }\n+            | ExprKind::InlineAsm { .. }\n+            | ExprKind::StaticRef { .. } => {\n                 // these do not have corresponding `Rvalue` variants,\n                 // so make an operand and then return that\n                 debug_assert!(match Category::of(&expr.kind) {\n@@ -340,19 +399,27 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn build_binary_op(&mut self, mut block: BasicBlock,\n-                           op: BinOp, span: Span, ty: Ty<'tcx>,\n-                           lhs: Operand<'tcx>, rhs: Operand<'tcx>) -> BlockAnd<Rvalue<'tcx>> {\n+    pub fn build_binary_op(\n+        &mut self,\n+        mut block: BasicBlock,\n+        op: BinOp,\n+        span: Span,\n+        ty: Ty<'tcx>,\n+        lhs: Operand<'tcx>,\n+        rhs: Operand<'tcx>,\n+    ) -> BlockAnd<Rvalue<'tcx>> {\n         let source_info = self.source_info(span);\n         let bool_ty = self.hir.bool_ty();\n         if self.hir.check_overflow() && op.is_checkable() && ty.is_integral() {\n             let result_tup = self.hir.tcx().intern_tup(&[ty, bool_ty]);\n             let result_value = self.temp(result_tup, span);\n \n-            self.cfg.push_assign(block, source_info,\n-                                 &result_value, Rvalue::CheckedBinaryOp(op,\n-                                                                        lhs,\n-                                                                        rhs));\n+            self.cfg.push_assign(\n+                block,\n+                source_info,\n+                &result_value,\n+                Rvalue::CheckedBinaryOp(op, lhs, rhs),\n+            );\n             let val_fld = Field::new(0);\n             let of_fld = Field::new(1);\n \n@@ -361,8 +428,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n             let err = EvalErrorKind::Overflow(op);\n \n-            block = self.assert(block, Operand::Move(of), false,\n-                                err, span);\n+            block = self.assert(block, Operand::Move(of), false, err, span);\n \n             block.and(Rvalue::Use(Operand::Move(val)))\n         } else {\n@@ -371,21 +437,22 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 // and 2. there are two possible failure cases, divide-by-zero and overflow.\n \n                 let (zero_err, overflow_err) = if op == BinOp::Div {\n-                    (EvalErrorKind::DivisionByZero,\n-                     EvalErrorKind::Overflow(op))\n+                    (EvalErrorKind::DivisionByZero, EvalErrorKind::Overflow(op))\n                 } else {\n-                    (EvalErrorKind::RemainderByZero,\n-                     EvalErrorKind::Overflow(op))\n+                    (EvalErrorKind::RemainderByZero, EvalErrorKind::Overflow(op))\n                 };\n \n                 // Check for / 0\n                 let is_zero = self.temp(bool_ty, span);\n                 let zero = self.zero_literal(span, ty);\n-                self.cfg.push_assign(block, source_info, &is_zero,\n-                                     Rvalue::BinaryOp(BinOp::Eq, rhs.to_copy(), zero));\n+                self.cfg.push_assign(\n+                    block,\n+                    source_info,\n+                    &is_zero,\n+                    Rvalue::BinaryOp(BinOp::Eq, rhs.to_copy(), zero),\n+                );\n \n-                block = self.assert(block, Operand::Move(is_zero), false,\n-                                    zero_err, span);\n+                block = self.assert(block, Operand::Move(is_zero), false, zero_err, span);\n \n                 // We only need to check for the overflow in one case:\n                 // MIN / -1, and only for signed values.\n@@ -394,23 +461,34 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     let min = self.minval_literal(span, ty);\n \n                     let is_neg_1 = self.temp(bool_ty, span);\n-                    let is_min   = self.temp(bool_ty, span);\n-                    let of       = self.temp(bool_ty, span);\n+                    let is_min = self.temp(bool_ty, span);\n+                    let of = self.temp(bool_ty, span);\n \n                     // this does (rhs == -1) & (lhs == MIN). It could short-circuit instead\n \n-                    self.cfg.push_assign(block, source_info, &is_neg_1,\n-                                         Rvalue::BinaryOp(BinOp::Eq, rhs.to_copy(), neg_1));\n-                    self.cfg.push_assign(block, source_info, &is_min,\n-                                         Rvalue::BinaryOp(BinOp::Eq, lhs.to_copy(), min));\n+                    self.cfg.push_assign(\n+                        block,\n+                        source_info,\n+                        &is_neg_1,\n+                        Rvalue::BinaryOp(BinOp::Eq, rhs.to_copy(), neg_1),\n+                    );\n+                    self.cfg.push_assign(\n+                        block,\n+                        source_info,\n+                        &is_min,\n+                        Rvalue::BinaryOp(BinOp::Eq, lhs.to_copy(), min),\n+                    );\n \n                     let is_neg_1 = Operand::Move(is_neg_1);\n                     let is_min = Operand::Move(is_min);\n-                    self.cfg.push_assign(block, source_info, &of,\n-                                         Rvalue::BinaryOp(BinOp::BitAnd, is_neg_1, is_min));\n+                    self.cfg.push_assign(\n+                        block,\n+                        source_info,\n+                        &of,\n+                        Rvalue::BinaryOp(BinOp::BitAnd, is_neg_1, is_min),\n+                    );\n \n-                    block = self.assert(block, Operand::Move(of), false,\n-                                        overflow_err, span);\n+                    block = self.assert(block, Operand::Move(of), false, overflow_err, span);\n                 }\n             }\n \n@@ -430,12 +508,17 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let this = self;\n \n         let source_info = this.source_info(upvar_span);\n-        let temp = this.local_decls.push(LocalDecl::new_temp(upvar_ty, upvar_span));\n+        let temp = this\n+            .local_decls\n+            .push(LocalDecl::new_temp(upvar_ty, upvar_span));\n \n-        this.cfg.push(block, Statement {\n-            source_info,\n-            kind: StatementKind::StorageLive(temp)\n-        });\n+        this.cfg.push(\n+            block,\n+            Statement {\n+                source_info,\n+                kind: StatementKind::StorageLive(temp),\n+            },\n+        );\n \n         let arg_place = unpack!(block = this.as_place(block, arg));\n \n@@ -446,8 +529,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 elem: ProjectionElem::Deref,\n             }) => {\n                 debug_assert!(\n-                    if let Some(ClearCrossCrate::Set(BindingForm::RefForGuard))\n-                        = this.local_decls[local].is_user_variable {\n+                    if let Some(ClearCrossCrate::Set(BindingForm::RefForGuard)) =\n+                        this.local_decls[local].is_user_variable\n+                    {\n                         true\n                     } else {\n                         false\n@@ -461,10 +545,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 elem: ProjectionElem::Field(upvar_index, _),\n             })\n             | Place::Projection(box Projection {\n-                base: Place::Projection(box Projection {\n-                    ref base,\n-                    elem: ProjectionElem::Field(upvar_index, _),\n-                }),\n+                base:\n+                    Place::Projection(box Projection {\n+                        ref base,\n+                        elem: ProjectionElem::Field(upvar_index, _),\n+                    }),\n                 elem: ProjectionElem::Deref,\n             }) => {\n                 // Not projected from the implicit `self` in a closure.\n@@ -491,7 +576,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         let borrow_kind = match mutability {\n             Mutability::Not => BorrowKind::Unique,\n-            Mutability::Mut => BorrowKind::Mut { allow_two_phase_borrow: false },\n+            Mutability::Mut => BorrowKind::Mut {\n+                allow_two_phase_borrow: false,\n+            },\n         };\n \n         this.cfg.push_assign(\n@@ -506,7 +593,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         // a constant at this time, even if the type may need dropping.\n         if let Some(temp_lifetime) = temp_lifetime {\n             this.schedule_drop_storage_and_value(\n-                upvar_span, temp_lifetime, &Place::Local(temp), upvar_ty,\n+                upvar_span,\n+                temp_lifetime,\n+                &Place::Local(temp),\n+                upvar_ty,\n             );\n         }\n "}, {"sha": "a2dcce6adcb6e1b4c9a4fad429f2c7db34c86ed5", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 46, "deletions": 22, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=0198a1ea45e29af00d92423aa6d2ac876410c3f9", "patch": "@@ -18,42 +18,63 @@ use rustc::mir::*;\n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// Compile `expr` into a fresh temporary. This is used when building\n     /// up rvalues so as to freeze the value that will be consumed.\n-    pub fn as_temp<M>(&mut self,\n-                      block: BasicBlock,\n-                      temp_lifetime: Option<region::Scope>,\n-                      expr: M)\n-                      -> BlockAnd<Local>\n-        where M: Mirror<'tcx, Output = Expr<'tcx>>\n+    pub fn as_temp<M>(\n+        &mut self,\n+        block: BasicBlock,\n+        temp_lifetime: Option<region::Scope>,\n+        expr: M,\n+        mutability: Mutability,\n+    ) -> BlockAnd<Local>\n+    where\n+        M: Mirror<'tcx, Output = Expr<'tcx>>,\n     {\n         let expr = self.hir.mirror(expr);\n-        self.expr_as_temp(block, temp_lifetime, expr)\n+        self.expr_as_temp(block, temp_lifetime, expr, mutability)\n     }\n \n-    fn expr_as_temp(&mut self,\n-                    mut block: BasicBlock,\n-                    temp_lifetime: Option<region::Scope>,\n-                    expr: Expr<'tcx>)\n-                    -> BlockAnd<Local> {\n-        debug!(\"expr_as_temp(block={:?}, temp_lifetime={:?}, expr={:?})\",\n-               block, temp_lifetime, expr);\n+    fn expr_as_temp(\n+        &mut self,\n+        mut block: BasicBlock,\n+        temp_lifetime: Option<region::Scope>,\n+        expr: Expr<'tcx>,\n+        mutability: Mutability,\n+    ) -> BlockAnd<Local> {\n+        debug!(\n+            \"expr_as_temp(block={:?}, temp_lifetime={:?}, expr={:?}, mutability={:?})\",\n+            block, temp_lifetime, expr, mutability\n+        );\n         let this = self;\n \n         let expr_span = expr.span;\n         let source_info = this.source_info(expr_span);\n-        if let ExprKind::Scope { region_scope, lint_level, value } = expr.kind {\n+        if let ExprKind::Scope {\n+            region_scope,\n+            lint_level,\n+            value,\n+        } = expr.kind\n+        {\n             return this.in_scope((region_scope, source_info), lint_level, block, |this| {\n-                this.as_temp(block, temp_lifetime, value)\n+                this.as_temp(block, temp_lifetime, value, mutability)\n             });\n         }\n \n         let expr_ty = expr.ty;\n-        let temp = this.local_decls.push(LocalDecl::new_temp(expr_ty, expr_span));\n+        let temp = if mutability == Mutability::Not {\n+            this.local_decls\n+                .push(LocalDecl::new_immutable_temp(expr_ty, expr_span))\n+        } else {\n+            this.local_decls\n+                .push(LocalDecl::new_temp(expr_ty, expr_span))\n+        };\n \n         if !expr_ty.is_never() {\n-            this.cfg.push(block, Statement {\n-                source_info,\n-                kind: StatementKind::StorageLive(temp)\n-            });\n+            this.cfg.push(\n+                block,\n+                Statement {\n+                    source_info,\n+                    kind: StatementKind::StorageLive(temp),\n+                },\n+            );\n         }\n \n         unpack!(block = this.into(&Place::Local(temp), block, expr));\n@@ -63,7 +84,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         // a constant at this time, even if the type may need dropping.\n         if let Some(temp_lifetime) = temp_lifetime {\n             this.schedule_drop_storage_and_value(\n-                expr_span, temp_lifetime, &Place::Local(temp), expr_ty,\n+                expr_span,\n+                temp_lifetime,\n+                &Place::Local(temp),\n+                expr_ty,\n             );\n         }\n "}, {"sha": "601fe2d01f86134647fdd7e1ac7fd547cacf2878", "filename": "src/librustc_mir/build/expr/category.rs", "status": "modified", "additions": 41, "deletions": 43, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs?ref=0198a1ea45e29af00d92423aa6d2ac876410c3f9", "patch": "@@ -45,53 +45,51 @@ impl Category {\n         match *ek {\n             ExprKind::Scope { .. } => None,\n \n-            ExprKind::Field { .. } |\n-            ExprKind::Deref { .. } |\n-            ExprKind::Index { .. } |\n-            ExprKind::SelfRef |\n-            ExprKind::VarRef { .. } |\n-            ExprKind::StaticRef { .. } =>\n-                Some(Category::Place),\n+            ExprKind::Field { .. }\n+            | ExprKind::Deref { .. }\n+            | ExprKind::Index { .. }\n+            | ExprKind::SelfRef\n+            | ExprKind::VarRef { .. }\n+            | ExprKind::StaticRef { .. } => Some(Category::Place),\n \n-            ExprKind::LogicalOp { .. } |\n-            ExprKind::If { .. } |\n-            ExprKind::Match { .. } |\n-            ExprKind::NeverToAny { .. } |\n-            ExprKind::Call { .. } =>\n-                Some(Category::Rvalue(RvalueFunc::Into)),\n+            ExprKind::LogicalOp { .. }\n+            | ExprKind::If { .. }\n+            | ExprKind::Match { .. }\n+            | ExprKind::NeverToAny { .. }\n+            | ExprKind::Call { .. } => Some(Category::Rvalue(RvalueFunc::Into)),\n \n-            ExprKind::Array { .. } |\n-            ExprKind::Tuple { .. } |\n-            ExprKind::Adt { .. } |\n-            ExprKind::Closure { .. } |\n-            ExprKind::Unary { .. } |\n-            ExprKind::Binary { .. } |\n-            ExprKind::Box { .. } |\n-            ExprKind::Cast { .. } |\n-            ExprKind::Use { .. } |\n-            ExprKind::ReifyFnPointer { .. } |\n-            ExprKind::ClosureFnPointer { .. } |\n-            ExprKind::UnsafeFnPointer { .. } |\n-            ExprKind::Unsize { .. } |\n-            ExprKind::Repeat { .. } |\n-            ExprKind::Borrow { .. } |\n-            ExprKind::Assign { .. } |\n-            ExprKind::AssignOp { .. } |\n-            ExprKind::Yield { .. } |\n-            ExprKind::InlineAsm { .. } =>\n-                Some(Category::Rvalue(RvalueFunc::AsRvalue)),\n+            ExprKind::Array { .. }\n+            | ExprKind::Tuple { .. }\n+            | ExprKind::Adt { .. }\n+            | ExprKind::Closure { .. }\n+            | ExprKind::Unary { .. }\n+            | ExprKind::Binary { .. }\n+            | ExprKind::Box { .. }\n+            | ExprKind::Cast { .. }\n+            | ExprKind::Use { .. }\n+            | ExprKind::ReifyFnPointer { .. }\n+            | ExprKind::ClosureFnPointer { .. }\n+            | ExprKind::UnsafeFnPointer { .. }\n+            | ExprKind::Unsize { .. }\n+            | ExprKind::Repeat { .. }\n+            | ExprKind::Borrow { .. }\n+            | ExprKind::Assign { .. }\n+            | ExprKind::AssignOp { .. }\n+            | ExprKind::Yield { .. }\n+            | ExprKind::InlineAsm { .. } => Some(Category::Rvalue(RvalueFunc::AsRvalue)),\n \n-            ExprKind::Literal { .. } =>\n-                Some(Category::Constant),\n+            ExprKind::Literal { .. } => Some(Category::Constant),\n \n-            ExprKind::Loop { .. } |\n-            ExprKind::Block { .. } |\n-            ExprKind::Break { .. } |\n-            ExprKind::Continue { .. } |\n-            ExprKind::Return { .. } =>\n-                // FIXME(#27840) these probably want their own\n-                // category, like \"nonterminating\"\n-                Some(Category::Rvalue(RvalueFunc::Into)),\n+            ExprKind::Loop { .. }\n+            | ExprKind::Block { .. }\n+            | ExprKind::Break { .. }\n+            | ExprKind::Continue { .. }\n+            | ExprKind::Return { .. } =>\n+            // FIXME(#27840) these probably want their own\n+            // category, like \"nonterminating\"\n+            {\n+                Some(Category::Rvalue(RvalueFunc::Into))\n+            }\n         }\n     }\n }"}, {"sha": "59ebb7703ff610e8b3783cd7e2f4bd582971cff7", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 151, "deletions": 98, "changes": 249, "blob_url": "https://github.com/rust-lang/rust/blob/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=0198a1ea45e29af00d92423aa6d2ac876410c3f9", "patch": "@@ -10,25 +10,27 @@\n \n //! See docs in build/expr/mod.rs\n \n-use build::{BlockAnd, BlockAndExtension, Builder};\n use build::expr::category::{Category, RvalueFunc};\n+use build::{BlockAnd, BlockAndExtension, Builder};\n use hair::*;\n-use rustc::ty;\n use rustc::mir::*;\n+use rustc::ty;\n \n use rustc_target::spec::abi::Abi;\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     /// Compile `expr`, storing the result into `destination`, which\n     /// is assumed to be uninitialized.\n-    pub fn into_expr(&mut self,\n-                     destination: &Place<'tcx>,\n-                     mut block: BasicBlock,\n-                     expr: Expr<'tcx>)\n-                     -> BlockAnd<()>\n-    {\n-        debug!(\"into_expr(destination={:?}, block={:?}, expr={:?})\",\n-               destination, block, expr);\n+    pub fn into_expr(\n+        &mut self,\n+        destination: &Place<'tcx>,\n+        mut block: BasicBlock,\n+        expr: Expr<'tcx>,\n+    ) -> BlockAnd<()> {\n+        debug!(\n+            \"into_expr(destination={:?}, block={:?}, expr={:?})\",\n+            destination, block, expr\n+        );\n \n         // since we frequently have to reference `self` from within a\n         // closure, where `self` would be shadowed, it's easier to\n@@ -38,10 +40,15 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let source_info = this.source_info(expr_span);\n \n         match expr.kind {\n-            ExprKind::Scope { region_scope, lint_level, value } => {\n+            ExprKind::Scope {\n+                region_scope,\n+                lint_level,\n+                value,\n+            } => {\n                 let region_scope = (region_scope, source_info);\n-                this.in_scope(region_scope, lint_level, block,\n-                              |this| this.into(destination, block, value))\n+                this.in_scope(region_scope, lint_level, block, |this| {\n+                    this.into(destination, block, value)\n+                })\n             }\n             ExprKind::Block { body: ast_block } => {\n                 this.ast_block(destination, block, ast_block, source_info)\n@@ -63,12 +70,17 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 if is_call {\n                     block.unit()\n                 } else {\n-                    this.cfg.terminate(block, source_info, TerminatorKind::Unreachable);\n+                    this.cfg\n+                        .terminate(block, source_info, TerminatorKind::Unreachable);\n                     let end_block = this.cfg.start_new_block();\n                     end_block.unit()\n                 }\n             }\n-            ExprKind::If { condition: cond_expr, then: then_expr, otherwise: else_expr } => {\n+            ExprKind::If {\n+                condition: cond_expr,\n+                then: then_expr,\n+                otherwise: else_expr,\n+            } => {\n                 let operand = unpack!(block = this.as_local_operand(block, cond_expr));\n \n                 let mut then_block = this.cfg.start_new_block();\n@@ -82,15 +94,22 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 } else {\n                     // Body of the `if` expression without an `else` clause must return `()`, thus\n                     // we implicitly generate a `else {}` if it is not specified.\n-                    this.cfg.push_assign_unit(else_block, source_info, destination);\n+                    this.cfg\n+                        .push_assign_unit(else_block, source_info, destination);\n                     else_block\n                 };\n \n                 let join_block = this.cfg.start_new_block();\n-                this.cfg.terminate(then_block, source_info,\n-                                   TerminatorKind::Goto { target: join_block });\n-                this.cfg.terminate(else_block, source_info,\n-                                   TerminatorKind::Goto { target: join_block });\n+                this.cfg.terminate(\n+                    then_block,\n+                    source_info,\n+                    TerminatorKind::Goto { target: join_block },\n+                );\n+                this.cfg.terminate(\n+                    else_block,\n+                    source_info,\n+                    TerminatorKind::Goto { target: join_block },\n+                );\n \n                 join_block.unit()\n             }\n@@ -107,9 +126,12 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 //        | (true)                   | (false)\n                 //  [true_block]               [false_block]\n \n-                let (true_block, false_block, mut else_block, join_block) =\n-                    (this.cfg.start_new_block(), this.cfg.start_new_block(),\n-                     this.cfg.start_new_block(), this.cfg.start_new_block());\n+                let (true_block, false_block, mut else_block, join_block) = (\n+                    this.cfg.start_new_block(),\n+                    this.cfg.start_new_block(),\n+                    this.cfg.start_new_block(),\n+                    this.cfg.start_new_block(),\n+                );\n \n                 let lhs = unpack!(block = this.as_local_operand(block, lhs));\n                 let blocks = match op {\n@@ -124,31 +146,46 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 this.cfg.terminate(else_block, source_info, term);\n \n                 this.cfg.push_assign_constant(\n-                    true_block, source_info, destination,\n+                    true_block,\n+                    source_info,\n+                    destination,\n                     Constant {\n                         span: expr_span,\n                         ty: this.hir.bool_ty(),\n                         user_ty: None,\n                         literal: this.hir.true_literal(),\n-                    });\n+                    },\n+                );\n \n                 this.cfg.push_assign_constant(\n-                    false_block, source_info, destination,\n+                    false_block,\n+                    source_info,\n+                    destination,\n                     Constant {\n                         span: expr_span,\n                         ty: this.hir.bool_ty(),\n                         user_ty: None,\n                         literal: this.hir.false_literal(),\n-                    });\n+                    },\n+                );\n \n-                this.cfg.terminate(true_block, source_info,\n-                                   TerminatorKind::Goto { target: join_block });\n-                this.cfg.terminate(false_block, source_info,\n-                                   TerminatorKind::Goto { target: join_block });\n+                this.cfg.terminate(\n+                    true_block,\n+                    source_info,\n+                    TerminatorKind::Goto { target: join_block },\n+                );\n+                this.cfg.terminate(\n+                    false_block,\n+                    source_info,\n+                    TerminatorKind::Goto { target: join_block },\n+                );\n \n                 join_block.unit()\n             }\n-            ExprKind::Loop { condition: opt_cond_expr, body } => {\n+            ExprKind::Loop {\n+                condition: opt_cond_expr,\n+                body,\n+            } => {\n                 // [block] --> [loop_block] -/eval. cond./-> [loop_block_end] -1-> [exit_block]\n                 //                  ^                               |\n                 //                  |                               0\n@@ -172,62 +209,74 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 let exit_block = this.cfg.start_new_block();\n \n                 // start the loop\n-                this.cfg.terminate(block, source_info,\n-                                   TerminatorKind::Goto { target: loop_block });\n+                this.cfg.terminate(\n+                    block,\n+                    source_info,\n+                    TerminatorKind::Goto { target: loop_block },\n+                );\n \n                 this.in_breakable_scope(\n-                    Some(loop_block), exit_block, destination.clone(),\n+                    Some(loop_block),\n+                    exit_block,\n+                    destination.clone(),\n                     move |this| {\n                         // conduct the test, if necessary\n                         let body_block;\n                         if let Some(cond_expr) = opt_cond_expr {\n                             let loop_block_end;\n                             let cond = unpack!(\n-                                loop_block_end = this.as_local_operand(loop_block, cond_expr));\n+                                loop_block_end = this.as_local_operand(loop_block, cond_expr)\n+                            );\n                             body_block = this.cfg.start_new_block();\n-                            let term = TerminatorKind::if_(this.hir.tcx(), cond,\n-                                                           body_block, exit_block);\n+                            let term =\n+                                TerminatorKind::if_(this.hir.tcx(), cond, body_block, exit_block);\n                             this.cfg.terminate(loop_block_end, source_info, term);\n \n                             // if the test is false, there's no `break` to assign `destination`, so\n                             // we have to do it; this overwrites any `break`-assigned value but it's\n                             // always `()` anyway\n-                            this.cfg.push_assign_unit(exit_block, source_info, destination);\n+                            this.cfg\n+                                .push_assign_unit(exit_block, source_info, destination);\n                         } else {\n                             body_block = this.cfg.start_new_block();\n                             let diverge_cleanup = this.diverge_cleanup();\n-                            this.cfg.terminate(loop_block, source_info,\n-                                               TerminatorKind::FalseUnwind {\n-                                                   real_target: body_block,\n-                                                   unwind: Some(diverge_cleanup)\n-                                               })\n+                            this.cfg.terminate(\n+                                loop_block,\n+                                source_info,\n+                                TerminatorKind::FalseUnwind {\n+                                    real_target: body_block,\n+                                    unwind: Some(diverge_cleanup),\n+                                },\n+                            )\n                         }\n \n                         // The \u201creturn\u201d value of the loop body must always be an unit. We therefore\n                         // introduce a unit temporary as the destination for the loop body.\n                         let tmp = this.get_unit_temp();\n                         // Execute the body, branching back to the test.\n                         let body_block_end = unpack!(this.into(&tmp, body_block, body));\n-                        this.cfg.terminate(body_block_end, source_info,\n-                                           TerminatorKind::Goto { target: loop_block });\n-                    }\n+                        this.cfg.terminate(\n+                            body_block_end,\n+                            source_info,\n+                            TerminatorKind::Goto { target: loop_block },\n+                        );\n+                    },\n                 );\n                 exit_block.unit()\n             }\n             ExprKind::Call { ty, fun, args } => {\n                 // FIXME(canndrew): This is_never should probably be an is_uninhabited\n                 let diverges = expr.ty.is_never();\n                 let intrinsic = match ty.sty {\n-                    ty::FnDef(def_id, _)  => {\n+                    ty::FnDef(def_id, _) => {\n                         let f = ty.fn_sig(this.hir.tcx());\n-                        if f.abi() == Abi::RustIntrinsic ||\n-                           f.abi() == Abi::PlatformIntrinsic {\n+                        if f.abi() == Abi::RustIntrinsic || f.abi() == Abi::PlatformIntrinsic {\n                             Some(this.hir.tcx().item_name(def_id).as_str())\n                         } else {\n                             None\n                         }\n                     }\n-                    _ => None\n+                    _ => None,\n                 };\n                 let intrinsic = intrinsic.as_ref().map(|s| &s[..]);\n                 let fun = unpack!(block = this.as_local_operand(block, fun));\n@@ -257,95 +306,99 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     let block = unpack!(this.into(&ptr_temp, block, ptr));\n                     this.into(&ptr_temp.deref(), block, val)\n                 } else {\n-                    let args: Vec<_> =\n-                        args.into_iter()\n-                            .map(|arg| unpack!(block = this.as_local_operand(block, arg)))\n-                            .collect();\n+                    let args: Vec<_> = args\n+                        .into_iter()\n+                        .map(|arg| unpack!(block = this.as_local_operand(block, arg)))\n+                        .collect();\n \n                     let success = this.cfg.start_new_block();\n                     let cleanup = this.diverge_cleanup();\n-                    this.cfg.terminate(block, source_info, TerminatorKind::Call {\n-                        func: fun,\n-                        args,\n-                        cleanup: Some(cleanup),\n-                        destination: if diverges {\n-                            None\n-                        } else {\n-                            Some ((destination.clone(), success))\n-                        }\n-                    });\n+                    this.cfg.terminate(\n+                        block,\n+                        source_info,\n+                        TerminatorKind::Call {\n+                            func: fun,\n+                            args,\n+                            cleanup: Some(cleanup),\n+                            destination: if diverges {\n+                                None\n+                            } else {\n+                                Some((destination.clone(), success))\n+                            },\n+                        },\n+                    );\n                     success.unit()\n                 }\n             }\n \n             // These cases don't actually need a destination\n-            ExprKind::Assign { .. } |\n-            ExprKind::AssignOp { .. } |\n-            ExprKind::Continue { .. } |\n-            ExprKind::Break { .. } |\n-            ExprKind::InlineAsm { .. } |\n-            ExprKind::Return { .. } => {\n+            ExprKind::Assign { .. }\n+            | ExprKind::AssignOp { .. }\n+            | ExprKind::Continue { .. }\n+            | ExprKind::Break { .. }\n+            | ExprKind::InlineAsm { .. }\n+            | ExprKind::Return { .. } => {\n                 unpack!(block = this.stmt_expr(block, expr));\n                 this.cfg.push_assign_unit(block, source_info, destination);\n                 block.unit()\n             }\n \n             // Avoid creating a temporary\n-            ExprKind::VarRef { .. } |\n-            ExprKind::SelfRef |\n-            ExprKind::StaticRef { .. } => {\n+            ExprKind::VarRef { .. } | ExprKind::SelfRef | ExprKind::StaticRef { .. } => {\n                 debug_assert!(Category::of(&expr.kind) == Some(Category::Place));\n \n                 let place = unpack!(block = this.as_place(block, expr));\n                 let rvalue = Rvalue::Use(this.consume_by_copy_or_move(place));\n-                this.cfg.push_assign(block, source_info, destination, rvalue);\n+                this.cfg\n+                    .push_assign(block, source_info, destination, rvalue);\n                 block.unit()\n             }\n-            ExprKind::Index { .. } |\n-            ExprKind::Deref { .. } |\n-            ExprKind::Field { .. } => {\n+            ExprKind::Index { .. } | ExprKind::Deref { .. } | ExprKind::Field { .. } => {\n                 debug_assert!(Category::of(&expr.kind) == Some(Category::Place));\n \n                 // Create a \"fake\" temporary variable so that we check that the\n                 // value is Sized. Usually, this is caught in type checking, but\n                 // in the case of box expr there is no such check.\n                 if let Place::Projection(..) = destination {\n-                    this.local_decls.push(LocalDecl::new_temp(expr.ty, expr.span));\n+                    this.local_decls\n+                        .push(LocalDecl::new_temp(expr.ty, expr.span));\n                 }\n \n                 debug_assert!(Category::of(&expr.kind) == Some(Category::Place));\n \n                 let place = unpack!(block = this.as_place(block, expr));\n                 let rvalue = Rvalue::Use(this.consume_by_copy_or_move(place));\n-                this.cfg.push_assign(block, source_info, destination, rvalue);\n+                this.cfg\n+                    .push_assign(block, source_info, destination, rvalue);\n                 block.unit()\n             }\n \n             // these are the cases that are more naturally handled by some other mode\n-            ExprKind::Unary { .. } |\n-            ExprKind::Binary { .. } |\n-            ExprKind::Box { .. } |\n-            ExprKind::Cast { .. } |\n-            ExprKind::Use { .. } |\n-            ExprKind::ReifyFnPointer { .. } |\n-            ExprKind::ClosureFnPointer { .. } |\n-            ExprKind::UnsafeFnPointer { .. } |\n-            ExprKind::Unsize { .. } |\n-            ExprKind::Repeat { .. } |\n-            ExprKind::Borrow { .. } |\n-            ExprKind::Array { .. } |\n-            ExprKind::Tuple { .. } |\n-            ExprKind::Adt { .. } |\n-            ExprKind::Closure { .. } |\n-            ExprKind::Literal { .. } |\n-            ExprKind::Yield { .. } => {\n+            ExprKind::Unary { .. }\n+            | ExprKind::Binary { .. }\n+            | ExprKind::Box { .. }\n+            | ExprKind::Cast { .. }\n+            | ExprKind::Use { .. }\n+            | ExprKind::ReifyFnPointer { .. }\n+            | ExprKind::ClosureFnPointer { .. }\n+            | ExprKind::UnsafeFnPointer { .. }\n+            | ExprKind::Unsize { .. }\n+            | ExprKind::Repeat { .. }\n+            | ExprKind::Borrow { .. }\n+            | ExprKind::Array { .. }\n+            | ExprKind::Tuple { .. }\n+            | ExprKind::Adt { .. }\n+            | ExprKind::Closure { .. }\n+            | ExprKind::Literal { .. }\n+            | ExprKind::Yield { .. } => {\n                 debug_assert!(match Category::of(&expr.kind).unwrap() {\n                     Category::Rvalue(RvalueFunc::Into) => false,\n                     _ => true,\n                 });\n \n                 let rvalue = unpack!(block = this.as_local_rvalue(block, expr));\n-                this.cfg.push_assign(block, source_info, destination, rvalue);\n+                this.cfg\n+                    .push_assign(block, source_info, destination, rvalue);\n                 block.unit()\n             }\n         }"}, {"sha": "6442ba34da4b2a5e379d21efbb54b49d093075b7", "filename": "src/librustc_mir/build/expr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fmod.rs?ref=0198a1ea45e29af00d92423aa6d2ac876410c3f9", "patch": "@@ -71,9 +71,9 @@\n //! over to the \"by reference\" mode (`as_place`).\n \n mod as_constant;\n+mod as_operand;\n mod as_place;\n mod as_rvalue;\n-mod as_operand;\n mod as_temp;\n mod category;\n mod into;"}, {"sha": "0086cff46e53c8ed280bdff2cf31db1e32f4b94b", "filename": "src/librustc_mir/build/expr/stmt.rs", "status": "modified", "additions": 56, "deletions": 34, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs?ref=0198a1ea45e29af00d92423aa6d2ac876410c3f9", "patch": "@@ -8,21 +8,24 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use build::{BlockAnd, BlockAndExtension, Builder};\n use build::scope::BreakableScope;\n+use build::{BlockAnd, BlockAndExtension, Builder};\n use hair::*;\n use rustc::mir::*;\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n-\n     pub fn stmt_expr(&mut self, mut block: BasicBlock, expr: Expr<'tcx>) -> BlockAnd<()> {\n         let this = self;\n         let expr_span = expr.span;\n         let source_info = this.source_info(expr.span);\n         // Handle a number of expressions that don't need a destination at all. This\n         // avoids needing a mountain of temporary `()` variables.\n         match expr.kind {\n-            ExprKind::Scope { region_scope, lint_level, value } => {\n+            ExprKind::Scope {\n+                region_scope,\n+                lint_level,\n+                value,\n+            } => {\n                 let value = this.hir.mirror(value);\n                 this.in_scope((region_scope, source_info), lint_level, block, |this| {\n                     this.stmt_expr(block, value)\n@@ -42,9 +45,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 if this.hir.needs_drop(lhs.ty) {\n                     let rhs = unpack!(block = this.as_local_operand(block, rhs));\n                     let lhs = unpack!(block = this.as_place(block, lhs));\n-                    unpack!(block = this.build_drop_and_replace(\n-                        block, lhs_span, lhs, rhs\n-                    ));\n+                    unpack!(block = this.build_drop_and_replace(block, lhs_span, lhs, rhs));\n                     block.unit()\n                 } else {\n                     let rhs = unpack!(block = this.as_local_rvalue(block, rhs));\n@@ -72,18 +73,34 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 // we don't have to drop prior contents or anything\n                 // because AssignOp is only legal for Copy types\n                 // (overloaded ops should be desugared into a call).\n-                let result = unpack!(block = this.build_binary_op(block, op, expr_span, lhs_ty,\n-                                                  Operand::Copy(lhs.clone()), rhs));\n+                let result = unpack!(\n+                    block = this.build_binary_op(\n+                        block,\n+                        op,\n+                        expr_span,\n+                        lhs_ty,\n+                        Operand::Copy(lhs.clone()),\n+                        rhs\n+                    )\n+                );\n                 this.cfg.push_assign(block, source_info, &lhs, result);\n \n                 block.unit()\n             }\n             ExprKind::Continue { label } => {\n-                let BreakableScope { continue_block, region_scope, .. } =\n-                    *this.find_breakable_scope(expr_span, label);\n-                let continue_block = continue_block.expect(\n-                    \"Attempted to continue in non-continuable breakable block\");\n-                this.exit_scope(expr_span, (region_scope, source_info), block, continue_block);\n+                let BreakableScope {\n+                    continue_block,\n+                    region_scope,\n+                    ..\n+                } = *this.find_breakable_scope(expr_span, label);\n+                let continue_block = continue_block\n+                    .expect(\"Attempted to continue in non-continuable breakable block\");\n+                this.exit_scope(\n+                    expr_span,\n+                    (region_scope, source_info),\n+                    block,\n+                    continue_block,\n+                );\n                 this.cfg.start_new_block().unit()\n             }\n             ExprKind::Break { label, value } => {\n@@ -106,13 +123,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             }\n             ExprKind::Return { value } => {\n                 block = match value {\n-                    Some(value) => {\n-                        unpack!(this.into(&Place::Local(RETURN_PLACE), block, value))\n-                    }\n+                    Some(value) => unpack!(this.into(&Place::Local(RETURN_PLACE), block, value)),\n                     None => {\n-                        this.cfg.push_assign_unit(block,\n-                                                  source_info,\n-                                                  &Place::Local(RETURN_PLACE));\n+                        this.cfg\n+                            .push_assign_unit(block, source_info, &Place::Local(RETURN_PLACE));\n                         block\n                     }\n                 };\n@@ -121,21 +135,30 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 this.exit_scope(expr_span, (region_scope, source_info), block, return_block);\n                 this.cfg.start_new_block().unit()\n             }\n-            ExprKind::InlineAsm { asm, outputs, inputs } => {\n-                let outputs = outputs.into_iter().map(|output| {\n-                    unpack!(block = this.as_place(block, output))\n-                }).collect();\n-                let inputs = inputs.into_iter().map(|input| {\n-                    unpack!(block = this.as_local_operand(block, input))\n-                }).collect();\n-                this.cfg.push(block, Statement {\n-                    source_info,\n-                    kind: StatementKind::InlineAsm {\n-                        asm: box asm.clone(),\n-                        outputs,\n-                        inputs,\n+            ExprKind::InlineAsm {\n+                asm,\n+                outputs,\n+                inputs,\n+            } => {\n+                let outputs = outputs\n+                    .into_iter()\n+                    .map(|output| unpack!(block = this.as_place(block, output)))\n+                    .collect();\n+                let inputs = inputs\n+                    .into_iter()\n+                    .map(|input| unpack!(block = this.as_local_operand(block, input)))\n+                    .collect();\n+                this.cfg.push(\n+                    block,\n+                    Statement {\n+                        source_info,\n+                        kind: StatementKind::InlineAsm {\n+                            asm: box asm.clone(),\n+                            outputs,\n+                            inputs,\n+                        },\n                     },\n-                });\n+                );\n                 block.unit()\n             }\n             _ => {\n@@ -147,5 +170,4 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             }\n         }\n     }\n-\n }"}, {"sha": "f42612b4b7a73f487fbce7a945131820ee0578dd", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=0198a1ea45e29af00d92423aa6d2ac876410c3f9", "patch": "@@ -153,7 +153,7 @@ impl<'a, 'gcx, 'tcx> Borrows<'a, 'gcx, 'tcx> {\n         nonlexical_regioncx: Rc<RegionInferenceContext<'tcx>>,\n         def_id: DefId,\n         body_id: Option<hir::BodyId>,\n-        borrow_set: &Rc<BorrowSet<'tcx>>\n+        borrow_set: &Rc<BorrowSet<'tcx>>,\n     ) -> Self {\n         let scope_tree = tcx.region_scope_tree(def_id);\n         let root_scope = body_id.map(|body_id| {\n@@ -269,7 +269,13 @@ impl<'a, 'gcx, 'tcx> BitDenotation for Borrows<'a, 'gcx, 'tcx> {\n                 // propagate_call_return method.\n \n                 if let mir::Rvalue::Ref(region, _, ref place) = *rhs {\n-                    if place.ignore_borrow(self.tcx, self.mir) { return; }\n+                    if place.ignore_borrow(\n+                        self.tcx,\n+                        self.mir,\n+                        &self.borrow_set.locals_state_at_exit,\n+                    ) {\n+                        return;\n+                    }\n                     let index = self.borrow_set.location_map.get(&location).unwrap_or_else(|| {\n                         panic!(\"could not find BorrowIndex for location {:?}\", location);\n                     });"}, {"sha": "7d7da6c96e8699fe3976836d544b743d783d6f77", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=0198a1ea45e29af00d92423aa6d2ac876410c3f9", "patch": "@@ -334,4 +334,14 @@ impl<'a, 'gcx, 'tcx> MoveData<'tcx> {\n                         -> Result<Self, (Self, Vec<(Place<'tcx>, MoveError<'tcx>)>)> {\n         builder::gather_moves(mir, tcx)\n     }\n+\n+    /// For the move path `mpi`, returns the root local variable (if any) that starts the path.\n+    /// (e.g., for a path like `a.b.c` returns `Some(a)`)\n+    pub fn base_local(&self, mut mpi: MovePathIndex) -> Option<Local> {\n+        loop {\n+            let path = &self.move_paths[mpi];\n+            if let Place::Local(l) = path.place { return Some(l); }\n+            if let Some(parent) = path.parent { mpi = parent; continue } else { return None }\n+        }\n+    }\n }"}, {"sha": "9f5b5040b09574ae96c704617058a81f8f414ebc", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=0198a1ea45e29af00d92423aa6d2ac876410c3f9", "patch": "@@ -612,8 +612,9 @@ fn write_temp_decls(mir: &Mir, w: &mut dyn Write) -> io::Result<()> {\n     for temp in mir.temps_iter() {\n         writeln!(\n             w,\n-            \"{}let mut {:?}: {};\",\n+            \"{}let {}{:?}: {};\",\n             INDENT,\n+            if mir.local_decls[temp].mutability == Mutability::Mut {\"mut \"} else {\"\"},\n             temp,\n             mir.local_decls[temp].ty\n         )?;"}, {"sha": "16e2fe046fb699f9cdf162cafd3b58306b8fbde9", "filename": "src/test/mir-opt/end_region_destruction_extents_1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Ftest%2Fmir-opt%2Fend_region_destruction_extents_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Ftest%2Fmir-opt%2Fend_region_destruction_extents_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_destruction_extents_1.rs?ref=0198a1ea45e29af00d92423aa6d2ac876410c3f9", "patch": "@@ -70,10 +70,10 @@ unsafe impl<'a, #[may_dangle] 'b> Drop for D1<'a, 'b> {\n //     let mut _2: D1<'12ds, '10s>;\n //     let mut _3: &'12ds S1;\n //     let mut _4: &'12ds S1;\n-//     let mut _5: S1;\n+//     let _5: S1;\n //     let mut _6: &'10s S1;\n //     let mut _7: &'10s S1;\n-//     let mut _8: S1;\n+//     let _8: S1;\n //     bb0: {\n //         StorageLive(_2);\n //         StorageLive(_3);\n@@ -118,10 +118,10 @@ unsafe impl<'a, #[may_dangle] 'b> Drop for D1<'a, 'b> {\n //     let mut _2: D1<'12ds, '10s>;\n //     let mut _3: &'12ds S1;\n //     let mut _4: &'12ds S1;\n-//     let mut _5: S1;\n+//     let _5: S1;\n //     let mut _6: &'10s S1;\n //     let mut _7: &'10s S1;\n-//     let mut _8: S1;\n+//     let _8: S1;\n //     bb0: {\n //         StorageLive(_2);\n //         StorageLive(_3);"}, {"sha": "e39b7df8a7ad806ce48e8a676dd9f68c2ba61ead", "filename": "src/test/mir-opt/storage_live_dead_in_statics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0198a1ea45e29af00d92423aa6d2ac876410c3f9/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.rs?ref=0198a1ea45e29af00d92423aa6d2ac876410c3f9", "patch": "@@ -47,11 +47,11 @@ fn main() {\n // START rustc.XXX.mir_map.0.mir\n //    let mut _0: &'static Foo;\n //    let mut _1: &'static Foo;\n-//    let mut _2: Foo;\n+//    let _2: Foo;\n //    let mut _3: &'static [(u32, u32)];\n //    let mut _4: &'static [(u32, u32); 42];\n //    let mut _5: &'static [(u32, u32); 42];\n-//    let mut _6: [(u32, u32); 42];\n+//    let _6: [(u32, u32); 42];\n //    let mut _7: (u32, u32);\n //    let mut _8: (u32, u32);\n //    let mut _9: (u32, u32);"}]}