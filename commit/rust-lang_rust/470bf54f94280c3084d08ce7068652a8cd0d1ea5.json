{"sha": "470bf54f94280c3084d08ce7068652a8cd0d1ea5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MGJmNTRmOTQyODBjMzA4NGQwOGNlNzA2ODY1MmE4Y2QwZDFlYTU=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-01-25T16:55:47Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2020-09-03T18:59:27Z"}, "message": "test drops during in-place iteration", "tree": {"sha": "84c58f483450a1cb516c2b5914a92be681c380ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84c58f483450a1cb516c2b5914a92be681c380ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/470bf54f94280c3084d08ce7068652a8cd0d1ea5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/470bf54f94280c3084d08ce7068652a8cd0d1ea5", "html_url": "https://github.com/rust-lang/rust/commit/470bf54f94280c3084d08ce7068652a8cd0d1ea5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/470bf54f94280c3084d08ce7068652a8cd0d1ea5/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe350dd82d49bc58e1f03cc370d3f6162ccc1d72", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe350dd82d49bc58e1f03cc370d3f6162ccc1d72", "html_url": "https://github.com/rust-lang/rust/commit/fe350dd82d49bc58e1f03cc370d3f6162ccc1d72"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "761b76a8876159d99210d4972e5f4f6e3a521980", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/470bf54f94280c3084d08ce7068652a8cd0d1ea5/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/470bf54f94280c3084d08ce7068652a8cd0d1ea5/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=470bf54f94280c3084d08ce7068652a8cd0d1ea5", "patch": "@@ -4,6 +4,7 @@ use std::fmt::Debug;\n use std::iter::InPlaceIterable;\n use std::mem::size_of;\n use std::panic::{catch_unwind, AssertUnwindSafe};\n+use std::rc::Rc;\n use std::vec::{Drain, IntoIter};\n \n struct DropCounter<'a> {\n@@ -826,6 +827,45 @@ fn test_from_iter_specialization_with_iterator_adapters() {\n     assert_eq!(srcptr, sinkptr);\n }\n \n+#[test]\n+fn test_from_iter_specialization_head_tail_drop() {\n+    let drop_count: Vec<_> = (0..=2).map(|_| Rc::new(())).collect();\n+    let src: Vec<_> = drop_count.iter().cloned().collect();\n+    let srcptr = src.as_ptr();\n+    let iter = src.into_iter();\n+    let sink: Vec<_> = iter.skip(1).take(1).collect();\n+    let sinkptr = sink.as_ptr();\n+    assert_eq!(srcptr, sinkptr, \"specialization was applied\");\n+    assert_eq!(Rc::strong_count(&drop_count[0]), 1, \"front was dropped\");\n+    assert_eq!(Rc::strong_count(&drop_count[1]), 2, \"one element was collected\");\n+    assert_eq!(Rc::strong_count(&drop_count[2]), 1, \"tail was dropped\");\n+    assert_eq!(sink.len(), 1);\n+}\n+\n+#[test]\n+fn test_from_iter_specialization_panic_drop() {\n+    let drop_count: Vec<_> = (0..=2).map(|_| Rc::new(())).collect();\n+    let src: Vec<_> = drop_count.iter().cloned().collect();\n+    let iter = src.into_iter();\n+\n+    let _ = std::panic::catch_unwind(AssertUnwindSafe(|| {\n+        let _ = iter\n+            .enumerate()\n+            .filter_map(|(i, e)| {\n+                if i == 1 {\n+                    std::panic!(\"aborting iteration\");\n+                }\n+                Some(e)\n+            })\n+            .collect::<Vec<_>>();\n+    }));\n+\n+    assert!(\n+        drop_count.iter().map(Rc::strong_count).all(|count| count == 1),\n+        \"all items were dropped once\"\n+    );\n+}\n+\n #[test]\n fn test_cow_from() {\n     let borrowed: &[_] = &[\"borrowed\", \"(slice)\"];"}]}