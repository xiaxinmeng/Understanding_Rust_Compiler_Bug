{"sha": "6755b2da4472fb82f8105a52a19cb1b32308ab48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3NTViMmRhNDQ3MmZiODJmODEwNWE1MmExOWNiMWIzMjMwOGFiNDg=", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-07-19T12:05:13Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-08-26T09:00:30Z"}, "message": "ignore const substs in `implicit_infer`", "tree": {"sha": "34b5502d3fe8d1c54596bbdee0cee7bae80ce366", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34b5502d3fe8d1c54596bbdee0cee7bae80ce366"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6755b2da4472fb82f8105a52a19cb1b32308ab48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6755b2da4472fb82f8105a52a19cb1b32308ab48", "html_url": "https://github.com/rust-lang/rust/commit/6755b2da4472fb82f8105a52a19cb1b32308ab48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6755b2da4472fb82f8105a52a19cb1b32308ab48/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caa975c89e343cb7e51f77c2710c8460ada50532", "url": "https://api.github.com/repos/rust-lang/rust/commits/caa975c89e343cb7e51f77c2710c8460ada50532", "html_url": "https://github.com/rust-lang/rust/commit/caa975c89e343cb7e51f77c2710c8460ada50532"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "73985cf31e0f9e736c79d67faa3d440cfee8850d", "filename": "compiler/rustc_middle/src/ty/walk.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6755b2da4472fb82f8105a52a19cb1b32308ab48/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6755b2da4472fb82f8105a52a19cb1b32308ab48/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs?ref=6755b2da4472fb82f8105a52a19cb1b32308ab48", "patch": "@@ -11,7 +11,7 @@ use smallvec::{self, SmallVec};\n type TypeWalkerStack<'tcx> = SmallVec<[GenericArg<'tcx>; 8]>;\n \n pub struct TypeWalker<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n+    expose_default_const_substs: Option<TyCtxt<'tcx>>,\n     stack: TypeWalkerStack<'tcx>,\n     last_subtree: usize,\n     pub visited: SsoHashSet<GenericArg<'tcx>>,\n@@ -26,8 +26,13 @@ pub struct TypeWalker<'tcx> {\n /// It maintains a set of visited types and\n /// skips any types that are already there.\n impl<'tcx> TypeWalker<'tcx> {\n-    fn new(tcx: TyCtxt<'tcx>, root: GenericArg<'tcx>) -> Self {\n-        Self { tcx, stack: smallvec![root], last_subtree: 1, visited: SsoHashSet::new() }\n+    fn new(expose_default_const_substs: Option<TyCtxt<'tcx>>, root: GenericArg<'tcx>) -> Self {\n+        Self {\n+            expose_default_const_substs,\n+            stack: smallvec![root],\n+            last_subtree: 1,\n+            visited: SsoHashSet::new(),\n+        }\n     }\n \n     /// Skips the subtree corresponding to the last type\n@@ -56,7 +61,7 @@ impl<'tcx> Iterator for TypeWalker<'tcx> {\n             let next = self.stack.pop()?;\n             self.last_subtree = self.stack.len();\n             if self.visited.insert(next) {\n-                push_inner(self.tcx, &mut self.stack, next);\n+                push_inner(self.expose_default_const_substs, &mut self.stack, next);\n                 debug!(\"next: stack={:?}\", self.stack);\n                 return Some(next);\n             }\n@@ -76,7 +81,7 @@ impl GenericArg<'tcx> {\n     /// [isize] => { [isize], isize }\n     /// ```\n     pub fn walk(self, tcx: TyCtxt<'tcx>) -> TypeWalker<'tcx> {\n-        TypeWalker::new(tcx, self)\n+        TypeWalker::new(Some(tcx), self)\n     }\n \n     /// Iterator that walks the immediate children of `self`. Hence\n@@ -92,13 +97,17 @@ impl GenericArg<'tcx> {\n         visited: &mut SsoHashSet<GenericArg<'tcx>>,\n     ) -> impl Iterator<Item = GenericArg<'tcx>> {\n         let mut stack = SmallVec::new();\n-        push_inner(tcx, &mut stack, self);\n+        push_inner(Some(tcx), &mut stack, self);\n         stack.retain(|a| visited.insert(*a));\n         stack.into_iter()\n     }\n }\n \n impl<'tcx> super::TyS<'tcx> {\n+    pub fn walk_ignoring_default_const_substs(&'tcx self) -> TypeWalker<'tcx> {\n+        TypeWalker::new(None, self.into())\n+    }\n+\n     /// Iterator that walks `self` and any types reachable from\n     /// `self`, in depth-first order. Note that just walks the types\n     /// that appear in `self`, it does not descend into the fields of\n@@ -110,7 +119,7 @@ impl<'tcx> super::TyS<'tcx> {\n     /// [isize] => { [isize], isize }\n     /// ```\n     pub fn walk(&'tcx self, tcx: TyCtxt<'tcx>) -> TypeWalker<'tcx> {\n-        TypeWalker::new(tcx, self.into())\n+        TypeWalker::new(Some(tcx), self.into())\n     }\n }\n \n@@ -121,7 +130,7 @@ impl<'tcx> super::TyS<'tcx> {\n /// natural order one would expect (basically, the order of the\n /// types as they are written).\n fn push_inner<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+    expose_default_const_substs: Option<TyCtxt<'tcx>>,\n     stack: &mut TypeWalkerStack<'tcx>,\n     parent: GenericArg<'tcx>,\n ) {\n@@ -202,7 +211,11 @@ fn push_inner<'tcx>(\n                 | ty::ConstKind::Error(_) => {}\n \n                 ty::ConstKind::Unevaluated(ct) => {\n-                    stack.extend(ct.substs(tcx).iter().rev());\n+                    if let Some(tcx) = expose_default_const_substs {\n+                        stack.extend(ct.substs(tcx).iter().rev());\n+                    } else if let Some(substs) = ct.substs_ {\n+                        stack.extend(substs.iter().rev());\n+                    }\n                 }\n             }\n         }"}, {"sha": "9a728e3f44d50566155cea77ee25b0afe8b42695", "filename": "compiler/rustc_typeck/src/outlives/implicit_infer.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6755b2da4472fb82f8105a52a19cb1b32308ab48/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6755b2da4472fb82f8105a52a19cb1b32308ab48/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fimplicit_infer.rs?ref=6755b2da4472fb82f8105a52a19cb1b32308ab48", "patch": "@@ -114,7 +114,12 @@ fn insert_required_predicates_to_be_wf<'tcx>(\n     required_predicates: &mut RequiredPredicates<'tcx>,\n     explicit_map: &mut ExplicitPredicatesMap<'tcx>,\n ) {\n-    for arg in field_ty.walk(tcx) {\n+    // We must not look into the default substs of consts\n+    // as computing those depends on the results of `predicates_of`.\n+    //\n+    // Luckily the only types contained in default substs are type\n+    // parameters which don't matter here.\n+    for arg in field_ty.walk_ignoring_default_const_substs() {\n         let ty = match arg.unpack() {\n             GenericArgKind::Type(ty) => ty,\n "}]}