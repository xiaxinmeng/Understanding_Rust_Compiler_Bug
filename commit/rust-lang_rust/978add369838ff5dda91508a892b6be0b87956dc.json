{"sha": "978add369838ff5dda91508a892b6be0b87956dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3OGFkZDM2OTgzOGZmNWRkYTkxNTA4YTg5MmI2YmUwYjg3OTU2ZGM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-13T14:06:30Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-13T14:24:14Z"}, "message": "Convenience functions for creating and emitting faerie modules", "tree": {"sha": "0daefff98915e7f7eb7d8823f79ffb8aef890660", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0daefff98915e7f7eb7d8823f79ffb8aef890660"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/978add369838ff5dda91508a892b6be0b87956dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/978add369838ff5dda91508a892b6be0b87956dc", "html_url": "https://github.com/rust-lang/rust/commit/978add369838ff5dda91508a892b6be0b87956dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/978add369838ff5dda91508a892b6be0b87956dc/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc687ee99293163ff856aea9efee9c9cb27cb6d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc687ee99293163ff856aea9efee9c9cb27cb6d6", "html_url": "https://github.com/rust-lang/rust/commit/bc687ee99293163ff856aea9efee9c9cb27cb6d6"}], "stats": {"total": 64, "additions": 36, "deletions": 28}, "files": [{"sha": "bb7ff63b0a67e6ed978f54602d32e069c29c5bdb", "filename": "src/lib.rs", "status": "modified", "additions": 36, "deletions": 28, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/978add369838ff5dda91508a892b6be0b87956dc/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/978add369838ff5dda91508a892b6be0b87956dc/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=978add369838ff5dda91508a892b6be0b87956dc", "patch": "@@ -220,43 +220,51 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             jit_module.finish();\n             ::std::process::exit(0);\n         } else {\n-            let mut faerie_module: Module<FaerieBackend> = Module::new(\n-                FaerieBuilder::new(\n-                    build_isa(tcx.sess),\n-                    \"some_file.o\".to_string(),\n-                    FaerieTrapCollection::Disabled,\n-                    FaerieBuilder::default_libcall_names(),\n-                )\n-                .unwrap(),\n-            );\n-            assert_eq!(\n-                pointer_ty(tcx),\n-                faerie_module.target_config().pointer_type()\n-            );\n+            let new_module = |name: String| {\n+                let module: Module<FaerieBackend> = Module::new(\n+                    FaerieBuilder::new(\n+                        build_isa(tcx.sess),\n+                        name + \".o\",\n+                        FaerieTrapCollection::Disabled,\n+                        FaerieBuilder::default_libcall_names(),\n+                    )\n+                    .unwrap(),\n+                );\n+                assert_eq!(\n+                    pointer_ty(tcx),\n+                    module.target_config().pointer_type()\n+                );\n+                module\n+            };\n+\n+            let mut faerie_module = new_module(\"some_file\".to_string());\n \n             codegen_cgus(tcx, &mut faerie_module, &mut log);\n             crate::allocator::codegen(tcx.sess, &mut faerie_module);\n-            faerie_module.finalize_definitions();\n \n             tcx.sess.abort_if_errors();\n \n-            let artifact = faerie_module.finish().artifact;\n-\n-            let tmp_file = tcx\n-                .output_filenames(LOCAL_CRATE)\n-                .temp_path(OutputType::Object, None);\n-            let obj = artifact.emit().unwrap();\n-            std::fs::write(&tmp_file, obj).unwrap();\n-\n-            return Box::new(CodegenResults {\n-                crate_name: tcx.crate_name(LOCAL_CRATE),\n-                modules: vec![CompiledModule {\n-                    name: \"dummy_name\".to_string(),\n-                    kind: ModuleKind::Regular,\n+            let emit_module = |name: &str, kind: ModuleKind, mut module: Module<FaerieBackend>| {\n+                module.finalize_definitions();\n+                let artifact = module.finish().artifact;\n+\n+                let tmp_file = tcx\n+                    .output_filenames(LOCAL_CRATE)\n+                    .temp_path(OutputType::Object, Some(name));\n+                let obj = artifact.emit().unwrap();\n+                std::fs::write(&tmp_file, obj).unwrap();\n+                CompiledModule {\n+                    name: name.to_string(),\n+                    kind,\n                     object: Some(tmp_file),\n                     bytecode: None,\n                     bytecode_compressed: None,\n-                }],\n+                }\n+            };\n+\n+            return Box::new(CodegenResults {\n+                crate_name: tcx.crate_name(LOCAL_CRATE),\n+                modules: vec![emit_module(\"dummy_name\", ModuleKind::Regular, faerie_module)],\n                 allocator_module: None,\n                 metadata_module: CompiledModule {\n                     name: \"dummy_metadata\".to_string(),"}]}