{"sha": "dddcbcfeac13c1cf0a262e7d57e14d6588dcadc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkZGNiY2ZlYWMxM2MxY2YwYTI2MmU3ZDU3ZTE0ZDY1ODhkY2FkYzI=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-04-06T18:07:20Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-04-07T23:20:55Z"}, "message": "Fix range performance regression\n\nA recent change to the implementation of range iterators meant that,\neven when stepping by 1, the iterators *always* involved checked\narithmetic.\n\nThis commit reverts to the earlier behavior (while retaining the\nrefactoring into traits).\n\nFixes #24095\ncc #24014", "tree": {"sha": "757168983c9bdae8fcff31afc1454e8126bd1b0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/757168983c9bdae8fcff31afc1454e8126bd1b0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dddcbcfeac13c1cf0a262e7d57e14d6588dcadc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dddcbcfeac13c1cf0a262e7d57e14d6588dcadc2", "html_url": "https://github.com/rust-lang/rust/commit/dddcbcfeac13c1cf0a262e7d57e14d6588dcadc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dddcbcfeac13c1cf0a262e7d57e14d6588dcadc2/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f37ba64e812713b273ad9818f05d852f6563b87", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f37ba64e812713b273ad9818f05d852f6563b87", "html_url": "https://github.com/rust-lang/rust/commit/9f37ba64e812713b273ad9818f05d852f6563b87"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "b4fee0ffe2a9527a9a52b651c2dc9dea8d056f66", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/dddcbcfeac13c1cf0a262e7d57e14d6588dcadc2/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dddcbcfeac13c1cf0a262e7d57e14d6588dcadc2/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=dddcbcfeac13c1cf0a262e7d57e14d6588dcadc2", "patch": "@@ -60,7 +60,7 @@ use self::MinMaxResult::*;\n \n use clone::Clone;\n use cmp;\n-use cmp::Ord;\n+use cmp::{Ord, PartialOrd, PartialEq};\n use default::Default;\n use marker;\n use mem;\n@@ -2431,7 +2431,7 @@ impl<A, St, F> Iterator for Unfold<St, F> where F: FnMut(&mut St) -> Option<A> {\n /// two `Step` objects.\n #[unstable(feature = \"step_trait\",\n            reason = \"likely to be replaced by finer-grained traits\")]\n-pub trait Step: Ord {\n+pub trait Step: PartialOrd {\n     /// Steps `self` if possible.\n     fn step(&self, by: &Self) -> Option<Self>;\n \n@@ -2598,7 +2598,10 @@ pub fn range_inclusive<A>(start: A, stop: A) -> RangeInclusive<A>\n \n #[unstable(feature = \"core\",\n            reason = \"likely to be replaced by range notation and adapters\")]\n-impl<A: Step + One + Clone> Iterator for RangeInclusive<A> {\n+impl<A> Iterator for RangeInclusive<A> where\n+    A: PartialEq + Step + One + Clone,\n+    for<'a> &'a A: Add<&'a A, Output = A>\n+{\n     type Item = A;\n \n     #[inline]\n@@ -2628,9 +2631,10 @@ impl<A: Step + One + Clone> Iterator for RangeInclusive<A> {\n \n #[unstable(feature = \"core\",\n            reason = \"likely to be replaced by range notation and adapters\")]\n-impl<A> DoubleEndedIterator for RangeInclusive<A>\n-    where A: Step + One + Clone,\n-          for<'a> &'a A: Sub<Output=A>\n+impl<A> DoubleEndedIterator for RangeInclusive<A> where\n+    A: PartialEq + Step + One + Clone,\n+    for<'a> &'a A: Add<&'a A, Output = A>,\n+    for<'a> &'a A: Sub<Output=A>\n {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> {\n@@ -2758,24 +2762,17 @@ macro_rules! range_exact_iter_impl {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated)]\n-impl<A: Step + One + Clone> Iterator for ops::Range<A> {\n+impl<A: Step + One> Iterator for ops::Range<A> where\n+    for<'a> &'a A: Add<&'a A, Output = A>\n+{\n     type Item = A;\n \n     #[inline]\n     fn next(&mut self) -> Option<A> {\n         if self.start < self.end {\n-            match self.start.step(&A::one()) {\n-                Some(mut n) => {\n-                    mem::swap(&mut n, &mut self.start);\n-                    Some(n)\n-                },\n-                None => {\n-                    let mut n = self.end.clone();\n-                    mem::swap(&mut n, &mut self.start);\n-                    Some(n)\n-\n-                }\n-            }\n+            let mut n = &self.start + &A::one();\n+            mem::swap(&mut n, &mut self.start);\n+            Some(n)\n         } else {\n             None\n         }\n@@ -2797,6 +2794,7 @@ range_exact_iter_impl!(usize u8 u16 u32 isize i8 i16 i32);\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated)]\n impl<A: Step + One + Clone> DoubleEndedIterator for ops::Range<A> where\n+    for<'a> &'a A: Add<&'a A, Output = A>,\n     for<'a> &'a A: Sub<&'a A, Output = A>\n {\n     #[inline]\n@@ -2812,15 +2810,16 @@ impl<A: Step + One + Clone> DoubleEndedIterator for ops::Range<A> where\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated)]\n-impl<A: Step + One> Iterator for ops::RangeFrom<A> {\n+impl<A: Step + One> Iterator for ops::RangeFrom<A> where\n+    for<'a> &'a A: Add<&'a A, Output = A>\n+{\n     type Item = A;\n \n     #[inline]\n     fn next(&mut self) -> Option<A> {\n-        self.start.step(&A::one()).map(|mut n| {\n-            mem::swap(&mut n, &mut self.start);\n-            n\n-        })\n+        let mut n = &self.start + &A::one();\n+        mem::swap(&mut n, &mut self.start);\n+        Some(n)\n     }\n }\n "}, {"sha": "826e4283ef82748fb400c0b2208ed75f67e5c9a8", "filename": "src/test/compile-fail/range-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dddcbcfeac13c1cf0a262e7d57e14d6588dcadc2/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dddcbcfeac13c1cf0a262e7d57e14d6588dcadc2/src%2Ftest%2Fcompile-fail%2Frange-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frange-1.rs?ref=dddcbcfeac13c1cf0a262e7d57e14d6588dcadc2", "patch": "@@ -19,6 +19,7 @@ pub fn main() {\n     for i in false..true {}\n     //~^ ERROR the trait\n     //~^^ ERROR the trait\n+    //~^^^ ERROR the trait\n \n     // Unsized type.\n     let arr: &[_] = &[1, 2, 3];"}]}