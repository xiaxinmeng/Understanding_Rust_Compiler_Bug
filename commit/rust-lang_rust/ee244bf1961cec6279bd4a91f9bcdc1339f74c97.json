{"sha": "ee244bf1961cec6279bd4a91f9bcdc1339f74c97", "node_id": "C_kwDOAAsO6NoAKGVlMjQ0YmYxOTYxY2VjNjI3OWJkNGE5MWY5YmNkYzEzMzlmNzRjOTc", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-30T23:08:46Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-05T04:20:25Z"}, "message": "Remove dead code from `print_generic_args`.", "tree": {"sha": "a145b9524ffa5465507bd5aade951b9f112ae6c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a145b9524ffa5465507bd5aade951b9f112ae6c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee244bf1961cec6279bd4a91f9bcdc1339f74c97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee244bf1961cec6279bd4a91f9bcdc1339f74c97", "html_url": "https://github.com/rust-lang/rust/commit/ee244bf1961cec6279bd4a91f9bcdc1339f74c97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee244bf1961cec6279bd4a91f9bcdc1339f74c97/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49b90573ac84d0f18ff1737e5f4fd4d0afc869f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/49b90573ac84d0f18ff1737e5f4fd4d0afc869f2", "html_url": "https://github.com/rust-lang/rust/commit/49b90573ac84d0f18ff1737e5f4fd4d0afc869f2"}], "stats": {"total": 34, "additions": 7, "deletions": 27}, "files": [{"sha": "3c145bbc81f730934b7fd3b984c4b20ff9303c2c", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 7, "deletions": 27, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ee244bf1961cec6279bd4a91f9bcdc1339f74c97/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee244bf1961cec6279bd4a91f9bcdc1339f74c97/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=ee244bf1961cec6279bd4a91f9bcdc1339f74c97", "patch": "@@ -1189,7 +1189,7 @@ impl<'a> State<'a> {\n \n         let generic_args = segment.args();\n         if !generic_args.args.is_empty() || !generic_args.bindings.is_empty() {\n-            self.print_generic_args(generic_args, segment.infer_args, true);\n+            self.print_generic_args(generic_args, true);\n         }\n \n         self.print_call_post(base_args)\n@@ -1592,15 +1592,15 @@ impl<'a> State<'a> {\n             }\n             if segment.ident.name != kw::PathRoot {\n                 self.print_ident(segment.ident);\n-                self.print_generic_args(segment.args(), segment.infer_args, colons_before_params);\n+                self.print_generic_args(segment.args(), colons_before_params);\n             }\n         }\n     }\n \n     pub fn print_path_segment(&mut self, segment: &hir::PathSegment<'_>) {\n         if segment.ident.name != kw::PathRoot {\n             self.print_ident(segment.ident);\n-            self.print_generic_args(segment.args(), segment.infer_args, false);\n+            self.print_generic_args(segment.args(), false);\n         }\n     }\n \n@@ -1619,23 +1619,15 @@ impl<'a> State<'a> {\n                     }\n                     if segment.ident.name != kw::PathRoot {\n                         self.print_ident(segment.ident);\n-                        self.print_generic_args(\n-                            segment.args(),\n-                            segment.infer_args,\n-                            colons_before_params,\n-                        );\n+                        self.print_generic_args(segment.args(), colons_before_params);\n                     }\n                 }\n \n                 self.word(\">\");\n                 self.word(\"::\");\n                 let item_segment = path.segments.last().unwrap();\n                 self.print_ident(item_segment.ident);\n-                self.print_generic_args(\n-                    item_segment.args(),\n-                    item_segment.infer_args,\n-                    colons_before_params,\n-                )\n+                self.print_generic_args(item_segment.args(), colons_before_params)\n             }\n             hir::QPath::TypeRelative(qself, item_segment) => {\n                 // If we've got a compound-qualified-path, let's push an additional pair of angle\n@@ -1651,11 +1643,7 @@ impl<'a> State<'a> {\n \n                 self.word(\"::\");\n                 self.print_ident(item_segment.ident);\n-                self.print_generic_args(\n-                    item_segment.args(),\n-                    item_segment.infer_args,\n-                    colons_before_params,\n-                )\n+                self.print_generic_args(item_segment.args(), colons_before_params)\n             }\n             hir::QPath::LangItem(lang_item, span, _) => {\n                 self.word(\"#[lang = \\\"\");\n@@ -1668,7 +1656,6 @@ impl<'a> State<'a> {\n     fn print_generic_args(\n         &mut self,\n         generic_args: &hir::GenericArgs<'_>,\n-        infer_args: bool,\n         colons_before_params: bool,\n     ) {\n         if generic_args.parenthesized {\n@@ -1715,13 +1702,6 @@ impl<'a> State<'a> {\n                 );\n             }\n \n-            // FIXME(eddyb): this would leak into error messages (e.g.,\n-            // \"non-exhaustive patterns: `Some::<..>(_)` not covered\").\n-            if infer_args && false {\n-                start_or_comma(self);\n-                self.word(\"..\");\n-            }\n-\n             for binding in generic_args.bindings {\n                 start_or_comma(self);\n                 self.print_type_binding(binding);\n@@ -1735,7 +1715,7 @@ impl<'a> State<'a> {\n \n     pub fn print_type_binding(&mut self, binding: &hir::TypeBinding<'_>) {\n         self.print_ident(binding.ident);\n-        self.print_generic_args(binding.gen_args, false, false);\n+        self.print_generic_args(binding.gen_args, false);\n         self.space();\n         match binding.kind {\n             hir::TypeBindingKind::Equality { ref term } => {"}]}