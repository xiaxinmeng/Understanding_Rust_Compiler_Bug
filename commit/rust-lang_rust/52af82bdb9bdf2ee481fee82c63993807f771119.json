{"sha": "52af82bdb9bdf2ee481fee82c63993807f771119", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyYWY4MmJkYjliZGYyZWU0ODFmZWU4MmM2Mzk5MzgwN2Y3NzExMTk=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-24T16:06:04Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-27T19:07:37Z"}, "message": "add reuse_or_mk_predicate", "tree": {"sha": "7062411c7d6c218e0cbe79701e744d9d0a4c5ad9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7062411c7d6c218e0cbe79701e744d9d0a4c5ad9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52af82bdb9bdf2ee481fee82c63993807f771119", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52af82bdb9bdf2ee481fee82c63993807f771119", "html_url": "https://github.com/rust-lang/rust/commit/52af82bdb9bdf2ee481fee82c63993807f771119", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52af82bdb9bdf2ee481fee82c63993807f771119/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d030752f63b9d52bb5fa8733080e674697640866", "url": "https://api.github.com/repos/rust-lang/rust/commits/d030752f63b9d52bb5fa8733080e674697640866", "html_url": "https://github.com/rust-lang/rust/commit/d030752f63b9d52bb5fa8733080e674697640866"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "a6229e61ae77ddab02c8c8260696955fb41ca461", "filename": "src/librustc_infer/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af82bdb9bdf2ee481fee82c63993807f771119/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af82bdb9bdf2ee481fee82c63993807f771119/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs?ref=52af82bdb9bdf2ee481fee82c63993807f771119", "patch": "@@ -526,7 +526,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     ) -> impl Iterator<Item = PredicateObligation<'tcx>> + 'a + Captures<'tcx> {\n         unsubstituted_region_constraints.iter().map(move |constraint| {\n             let ty::OutlivesPredicate(k1, r2) =\n-                *substitute_value(self.tcx, result_subst, constraint).skip_binder();\n+                substitute_value(self.tcx, result_subst, constraint).skip_binder();\n \n             let predicate = match k1.unpack() {\n                 GenericArgKind::Lifetime(r1) => {"}, {"sha": "0d343be2c264fca3e4c18bf2bdfba0381f43dbe1", "filename": "src/librustc_infer/traits/util.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/52af82bdb9bdf2ee481fee82c63993807f771119/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af82bdb9bdf2ee481fee82c63993807f771119/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Futil.rs?ref=52af82bdb9bdf2ee481fee82c63993807f771119", "patch": "@@ -10,11 +10,10 @@ pub fn anonymize_predicate<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     pred: ty::Predicate<'tcx>,\n ) -> ty::Predicate<'tcx> {\n-    let kind = pred.kind();\n-    match kind {\n+    match pred.kind() {\n         ty::PredicateKind::ForAll(binder) => {\n             let new = ty::PredicateKind::ForAll(tcx.anonymize_late_bound_regions(binder));\n-            if new != *kind { new.to_predicate(tcx) } else { pred }\n+            tcx.reuse_or_mk_predicate(pred, new)\n         }\n         ty::PredicateKind::Trait(_, _)\n         | ty::PredicateKind::RegionOutlives(_)"}, {"sha": "eeb58a0c55a3e7c2c77e2556255e53d826d9e1d2", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/52af82bdb9bdf2ee481fee82c63993807f771119/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af82bdb9bdf2ee481fee82c63993807f771119/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=52af82bdb9bdf2ee481fee82c63993807f771119", "patch": "@@ -2132,11 +2132,20 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline]\n-    pub fn mk_predicate(&self, kind: PredicateKind<'tcx>) -> Predicate<'tcx> {\n+    pub fn mk_predicate(self, kind: PredicateKind<'tcx>) -> Predicate<'tcx> {\n         let inner = self.interners.intern_predicate(kind);\n         Predicate { inner }\n     }\n \n+    #[inline]\n+    pub fn reuse_or_mk_predicate(\n+        self,\n+        pred: Predicate<'tcx>,\n+        kind: PredicateKind<'tcx>,\n+    ) -> Predicate<'tcx> {\n+        if *pred.kind() != kind { self.mk_predicate(kind) } else { pred }\n+    }\n+\n     pub fn mk_mach_int(self, tm: ast::IntTy) -> Ty<'tcx> {\n         match tm {\n             ast::IntTy::Isize => self.types.isize,"}, {"sha": "4b1f970edb09c8de16e4b1e929fb88b81985988d", "filename": "src/librustc_middle/ty/flags.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52af82bdb9bdf2ee481fee82c63993807f771119/src%2Flibrustc_middle%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af82bdb9bdf2ee481fee82c63993807f771119/src%2Flibrustc_middle%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fflags.rs?ref=52af82bdb9bdf2ee481fee82c63993807f771119", "patch": "@@ -201,7 +201,7 @@ impl FlagComputation {\n         }\n     }\n \n-    fn add_predicate(&mut self, pred: &ty::Predicate<'_>) {\n+    fn add_predicate(&mut self, pred: ty::Predicate<'_>) {\n         self.add_flags(pred.inner.flags);\n         self.add_exclusive_binder(pred.inner.outer_exclusive_binder);\n     }\n@@ -223,7 +223,7 @@ impl FlagComputation {\n                 self.add_ty(a);\n                 self.add_ty(b);\n             }\n-            ty::PredicateKind::Projection(ty::ProjectionPredicate { projection_ty, ty }) => {\n+            &ty::PredicateKind::Projection(ty::ProjectionPredicate { projection_ty, ty }) => {\n                 self.add_projection_ty(projection_ty);\n                 self.add_ty(ty);\n             }"}, {"sha": "c8ad8ae10dc35b3e3b910d413f56c1b66e5b7958", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af82bdb9bdf2ee481fee82c63993807f771119/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af82bdb9bdf2ee481fee82c63993807f771119/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=52af82bdb9bdf2ee481fee82c63993807f771119", "patch": "@@ -1252,7 +1252,7 @@ impl<'tcx> Predicate<'tcx> {\n         // from the substitution and the value being substituted into, and\n         // this trick achieves that).\n         let substs = trait_ref.skip_binder().substs;\n-        let pred = *self.ignore_quantifiers().skip_binder();\n+        let pred = self.ignore_quantifiers().skip_binder();\n         let new = pred.subst(tcx, substs);\n         if new != pred { new.potentially_quantified(tcx, PredicateKind::ForAll) } else { self }\n     }"}, {"sha": "e6237853f21cd4f0c15c9013a8290b5d65a39ad3", "filename": "src/librustc_middle/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af82bdb9bdf2ee481fee82c63993807f771119/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af82bdb9bdf2ee481fee82c63993807f771119/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs?ref=52af82bdb9bdf2ee481fee82c63993807f771119", "patch": "@@ -1000,7 +1000,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Region<'tcx> {\n impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         let new = ty::PredicateKind::super_fold_with(&self.inner.kind, folder);\n-        if new != self.inner.kind { folder.tcx().mk_predicate(new) } else { *self }\n+        folder.tcx().reuse_or_mk_predicate(*self, new)\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {"}, {"sha": "223e92e0482cde6b9441e5aeddeb970801060cc9", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af82bdb9bdf2ee481fee82c63993807f771119/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af82bdb9bdf2ee481fee82c63993807f771119/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=52af82bdb9bdf2ee481fee82c63993807f771119", "patch": "@@ -89,7 +89,7 @@ where\n             &ty::PredicateKind::ForAll(pred) => {\n                 // This visitor does not care about bound regions as we only\n                 // look at `DefId`s.\n-                self.visit_predicate(*pred.skip_binder())\n+                self.visit_predicate(pred.skip_binder())\n             }\n             &ty::PredicateKind::Trait(ty::TraitPredicate { trait_ref }, _) => {\n                 self.visit_trait(trait_ref)"}, {"sha": "afa2270b7af0f2b5d193cad496f023cf6ca71aa6", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af82bdb9bdf2ee481fee82c63993807f771119/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af82bdb9bdf2ee481fee82c63993807f771119/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=52af82bdb9bdf2ee481fee82c63993807f771119", "patch": "@@ -88,7 +88,7 @@ pub fn predicate_obligations<'a, 'tcx>(\n     infcx: &InferCtxt<'a, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     body_id: hir::HirId,\n-    predicate: &'_ ty::Predicate<'tcx>,\n+    predicate: ty::Predicate<'tcx>,\n     span: Span,\n ) -> Vec<traits::PredicateObligation<'tcx>> {\n     let mut wf = WfPredicates { infcx, param_env, body_id, span, out: vec![], item: None };"}, {"sha": "dabae6cbc41377a3fdf75e55101086b8c8da6dd8", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52af82bdb9bdf2ee481fee82c63993807f771119/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52af82bdb9bdf2ee481fee82c63993807f771119/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=52af82bdb9bdf2ee481fee82c63993807f771119", "patch": "@@ -828,7 +828,7 @@ fn check_where_clauses<'tcx, 'fcx>(\n     debug!(\"check_where_clauses: predicates={:?}\", predicates.predicates);\n     assert_eq!(predicates.predicates.len(), predicates.spans.len());\n     let wf_obligations =\n-        predicates.predicates.iter().zip(predicates.spans.iter()).flat_map(|(p, &sp)| {\n+        predicates.predicates.iter().zip(predicates.spans.iter()).flat_map(|(&p, &sp)| {\n             traits::wf::predicate_obligations(fcx, fcx.param_env, fcx.body_id, p, sp)\n         });\n "}]}