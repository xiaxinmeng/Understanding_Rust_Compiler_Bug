{"sha": "e52f7c9239a0a523c04651f5eba3cad6f15fa217", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MmY3YzkyMzlhMGE1MjNjMDQ2NTFmNWViYTNjYWQ2ZjE1ZmEyMTc=", "commit": {"author": {"name": "Carl-Anton Ingmarsson", "email": "mail@carlanton.se", "date": "2014-01-12T11:51:16Z"}, "committer": {"name": "Carl-Anton Ingmarsson", "email": "mail@carlanton.se", "date": "2014-01-12T19:25:57Z"}, "message": "ebml::extra: Optimize reader::vuint_at()\n\nUse a lookup table, SHIFT_MASK_TABLE, that for every possible four\nbit prefix holds the number of times the value should be right shifted and what\nthe right shifted value should be masked with. This way we can get rid of the\nbranches which in my testing gives approximately a 2x speedup.", "tree": {"sha": "11dac55bdaccd97c218d4fdbe734f24a83f9cb7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11dac55bdaccd97c218d4fdbe734f24a83f9cb7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e52f7c9239a0a523c04651f5eba3cad6f15fa217", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e52f7c9239a0a523c04651f5eba3cad6f15fa217", "html_url": "https://github.com/rust-lang/rust/commit/e52f7c9239a0a523c04651f5eba3cad6f15fa217", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e52f7c9239a0a523c04651f5eba3cad6f15fa217/comments", "author": {"login": "c-a", "id": 804040, "node_id": "MDQ6VXNlcjgwNDA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/804040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c-a", "html_url": "https://github.com/c-a", "followers_url": "https://api.github.com/users/c-a/followers", "following_url": "https://api.github.com/users/c-a/following{/other_user}", "gists_url": "https://api.github.com/users/c-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/c-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c-a/subscriptions", "organizations_url": "https://api.github.com/users/c-a/orgs", "repos_url": "https://api.github.com/users/c-a/repos", "events_url": "https://api.github.com/users/c-a/events{/privacy}", "received_events_url": "https://api.github.com/users/c-a/received_events", "type": "User", "site_admin": false}, "committer": {"login": "c-a", "id": 804040, "node_id": "MDQ6VXNlcjgwNDA0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/804040?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c-a", "html_url": "https://github.com/c-a", "followers_url": "https://api.github.com/users/c-a/followers", "following_url": "https://api.github.com/users/c-a/following{/other_user}", "gists_url": "https://api.github.com/users/c-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/c-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c-a/subscriptions", "organizations_url": "https://api.github.com/users/c-a/orgs", "repos_url": "https://api.github.com/users/c-a/repos", "events_url": "https://api.github.com/users/c-a/events{/privacy}", "received_events_url": "https://api.github.com/users/c-a/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1130886138f1dc6285ac2011c6bcabefd564bb7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1130886138f1dc6285ac2011c6bcabefd564bb7d", "html_url": "https://github.com/rust-lang/rust/commit/1130886138f1dc6285ac2011c6bcabefd564bb7d"}], "stats": {"total": 51, "additions": 29, "deletions": 22}, "files": [{"sha": "95be54d3bb0a421775d0e02d387455f892911ed3", "filename": "src/libextra/ebml.rs", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e52f7c9239a0a523c04651f5eba3cad6f15fa217/src%2Flibextra%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e52f7c9239a0a523c04651f5eba3cad6f15fa217/src%2Flibextra%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Febml.rs?ref=e52f7c9239a0a523c04651f5eba3cad6f15fa217", "patch": "@@ -130,32 +130,39 @@ pub mod reader {\n             return vuint_at_slow(data, start);\n         }\n \n+        // Lookup table for parsing EBML Element IDs as per http://ebml.sourceforge.net/specs/\n+        // The Element IDs are parsed by reading a big endian u32 positioned at data[start].\n+        // Using the four most significant bits of the u32 we lookup in the table below how the\n+        // element ID should be derived from it.\n+        //\n+        // The table stores tuples (shift, mask) where shift is the number the u32 should be right\n+        // shifted with and mask is the value the right shifted value should be masked with.\n+        // If for example the most significant bit is set this means it's a class A ID and the u32\n+        // should be right shifted with 24 and masked with 0x7f. Therefore we store (24, 0x7f) at\n+        // index 0x8 - 0xF (four bit numbers where the most significant bit is set).\n+        //\n+        // By storing the number of shifts and masks in a table instead of checking in order if\n+        // the most significant bit is set, the second most significant bit is set etc. we can\n+        // replace up to three \"and+branch\" with a single table lookup which gives us a measured\n+        // speedup of around 2x on x86_64.\n+        static SHIFT_MASK_TABLE: [(u32, u32), ..16] = [\n+            (0, 0x0), (0, 0x0fffffff),\n+            (8, 0x1fffff), (8, 0x1fffff),\n+            (16, 0x3fff), (16, 0x3fff), (16, 0x3fff), (16, 0x3fff),\n+            (24, 0x7f), (24, 0x7f), (24, 0x7f), (24, 0x7f), (24, 0x7f), (24, 0x7f), (24, 0x7f), (24, 0x7f)\n+        ];\n+\n         unsafe {\n             let (ptr, _): (*u8, uint) = transmute(data);\n             let ptr = offset(ptr, start as int);\n             let ptr: *i32 = transmute(ptr);\n-            let val = from_be32(*ptr);\n-            let val: u32 = transmute(val);\n-            if (val & 0x80000000) != 0 {\n-                Res {\n-                    val: ((val >> 24) & 0x7f) as uint,\n-                    next: start + 1\n-                }\n-            } else if (val & 0x40000000) != 0 {\n-                Res {\n-                    val: ((val >> 16) & 0x3fff) as uint,\n-                    next: start + 2\n-                }\n-            } else if (val & 0x20000000) != 0 {\n-                Res {\n-                    val: ((val >> 8) & 0x1fffff) as uint,\n-                    next: start + 3\n-                }\n-            } else {\n-                Res {\n-                    val: (val & 0x0fffffff) as uint,\n-                    next: start + 4\n-                }\n+            let val = from_be32(*ptr) as u32;\n+\n+            let i = (val >> 28u) as uint;\n+            let (shift, mask) = SHIFT_MASK_TABLE[i];\n+            Res {\n+                val: ((val >> shift) & mask) as uint,\n+                next: start + (((32 - shift) >> 3) as uint)\n             }\n         }\n     }"}]}