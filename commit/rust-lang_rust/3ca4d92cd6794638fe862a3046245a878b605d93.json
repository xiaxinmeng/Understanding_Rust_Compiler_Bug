{"sha": "3ca4d92cd6794638fe862a3046245a878b605d93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjYTRkOTJjZDY3OTQ2MzhmZTg2MmEzMDQ2MjQ1YTg3OGI2MDVkOTM=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-06-13T14:59:10Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-06-13T14:59:10Z"}, "message": "Ensure projections are not counted as constraining type parameters.\n\nFixes #26262", "tree": {"sha": "cd29e06bb57b9f5204f6e2a3ffe94945be54bbd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd29e06bb57b9f5204f6e2a3ffe94945be54bbd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ca4d92cd6794638fe862a3046245a878b605d93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ca4d92cd6794638fe862a3046245a878b605d93", "html_url": "https://github.com/rust-lang/rust/commit/3ca4d92cd6794638fe862a3046245a878b605d93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ca4d92cd6794638fe862a3046245a878b605d93/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a27982623c12e759c0d8d8e53c5290b76351bdd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a27982623c12e759c0d8d8e53c5290b76351bdd3", "html_url": "https://github.com/rust-lang/rust/commit/a27982623c12e759c0d8d8e53c5290b76351bdd3"}], "stats": {"total": 49, "additions": 46, "deletions": 3}, "files": [{"sha": "b1580a74876c1f61109af0ec2093cf424e416c36", "filename": "src/librustc_typeck/constrained_type_params.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3ca4d92cd6794638fe862a3046245a878b605d93/src%2Flibrustc_typeck%2Fconstrained_type_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca4d92cd6794638fe862a3046245a878b605d93/src%2Flibrustc_typeck%2Fconstrained_type_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fconstrained_type_params.rs?ref=3ca4d92cd6794638fe862a3046245a878b605d93", "patch": "@@ -19,10 +19,21 @@ pub enum Parameter {\n     Region(ty::EarlyBoundRegion),\n }\n \n+/// Returns the list of parameters that are constrained by the type `ty`\n+/// - i.e. the value of each parameter in the list is uniquely determined\n+/// by `ty` (see RFC 447).\n pub fn parameters_for_type<'tcx>(ty: Ty<'tcx>) -> Vec<Parameter> {\n-    ty.walk()\n-      .flat_map(|ty| parameters_for_type_shallow(ty))\n-      .collect()\n+    let mut result = vec![];\n+    ty::maybe_walk_ty(ty, |t| {\n+        if let ty::TyProjection(..) = t.sty {\n+            false // projections are not injective.\n+        } else {\n+            result.append(&mut parameters_for_type_shallow(t));\n+            // non-projection type constructors are injective.\n+            true\n+        }\n+    });\n+    result\n }\n \n pub fn parameters_for_trait_ref<'tcx>(trait_ref: &ty::TraitRef<'tcx>) -> Vec<Parameter> {"}, {"sha": "8d79fd4570d34d44fc9dd58410431c62547a1be9", "filename": "src/test/compile-fail/issue-26262.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3ca4d92cd6794638fe862a3046245a878b605d93/src%2Ftest%2Fcompile-fail%2Fissue-26262.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca4d92cd6794638fe862a3046245a878b605d93/src%2Ftest%2Fcompile-fail%2Fissue-26262.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-26262.rs?ref=3ca4d92cd6794638fe862a3046245a878b605d93", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that projections don't count as constraining type parameters.\n+\n+struct S<T>(T);\n+\n+trait Tr { type Assoc; fn test(); }\n+\n+impl<T: Tr> S<T::Assoc> {\n+//~^ ERROR the type parameter `T` is not constrained\n+    fn foo(self, _: T) {\n+        T::test();\n+    }\n+}\n+\n+trait Trait1<T> { type Bar; }\n+trait Trait2<'x> { type Foo; }\n+\n+impl<'a,T: Trait2<'a>> Trait1<<T as Trait2<'a>>::Foo> for T {\n+//~^ ERROR the lifetime parameter `'a` is not constrained\n+    type Bar = &'a ();\n+}\n+\n+fn main() {}"}]}