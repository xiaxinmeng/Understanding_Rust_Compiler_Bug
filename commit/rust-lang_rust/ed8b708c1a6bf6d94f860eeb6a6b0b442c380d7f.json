{"sha": "ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkOGI3MDhjMWE2YmY2ZDk0Zjg2MGVlYjZhNmIwYjQ0MmMzODBkN2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-21T14:02:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-21T14:02:02Z"}, "message": "Auto merge of #64658 - Centril:rollup-9s3raz6, r=Centril\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #64010 (Stabilize `param_attrs` in Rust 1.39.0)\n - #64136 (Document From trait for LhsExpr in parser)\n - #64342 (factor out pluralisation remains after #64280)\n - #64347 (Add long error explanation for E0312)\n - #64621 (Add Compatibility Notes to RELEASES.md for 1.38.0)\n - #64632 (remove the extra comma after the match arm)\n - #64640 (No home directory on vxWorks)\n - #64641 (Exempt extern \"Rust\" from improper_ctypes)\n - #64642 (Fix the span used to suggest avoiding for-loop moves)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "931af44227c59522d720d6277caa4a411cbdf747", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/931af44227c59522d720d6277caa4a411cbdf747"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "html_url": "https://github.com/rust-lang/rust/commit/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5349e69ae207c4d11245e75463c091eded3ad13c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5349e69ae207c4d11245e75463c091eded3ad13c", "html_url": "https://github.com/rust-lang/rust/commit/5349e69ae207c4d11245e75463c091eded3ad13c"}, {"sha": "97ca0737c6b63507945e9198177ebadf9d4eff82", "url": "https://api.github.com/repos/rust-lang/rust/commits/97ca0737c6b63507945e9198177ebadf9d4eff82", "html_url": "https://github.com/rust-lang/rust/commit/97ca0737c6b63507945e9198177ebadf9d4eff82"}], "stats": {"total": 541, "additions": 261, "deletions": 280}, "files": [{"sha": "ecf49278f4b521d9779ffd4e5a7b3242457f6a31", "filename": "RELEASES.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -68,6 +68,13 @@ Misc\n - [`rustc` will now warn about some incorrect uses of\n   `mem::{uninitialized, zeroed}` that are known to cause undefined behaviour.][63346]\n \n+Compatibility Notes\n+-------------------\n+- Unfortunately the [`x86_64-unknown-uefi` platform can not be built][62785]\n+  with rustc 1.39.0.\n+- The [`armv7-unknown-linux-gnueabihf` platform is also known to have\n+  issues][62896] for certain crates such as libc.\n+\n [60260]: https://github.com/rust-lang/rust/pull/60260/\n [61457]: https://github.com/rust-lang/rust/pull/61457/\n [61491]: https://github.com/rust-lang/rust/pull/61491/\n@@ -79,7 +86,9 @@ Misc\n [62735]: https://github.com/rust-lang/rust/pull/62735/\n [62766]: https://github.com/rust-lang/rust/pull/62766/\n [62784]: https://github.com/rust-lang/rust/pull/62784/\n+[62785]: https://github.com/rust-lang/rust/issues/62785/\n [62814]: https://github.com/rust-lang/rust/pull/62814/\n+[62896]: https://github.com/rust-lang/rust/issues/62896/\n [63000]: https://github.com/rust-lang/rust/pull/63000/\n [63056]: https://github.com/rust-lang/rust/pull/63056/\n [63107]: https://github.com/rust-lang/rust/pull/63107/"}, {"sha": "4b83c204ba10579d2152672578834232bd4d1984", "filename": "src/doc/unstable-book/src/language-features/param-attrs.md", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5349e69ae207c4d11245e75463c091eded3ad13c/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fparam-attrs.md", "raw_url": "https://github.com/rust-lang/rust/raw/5349e69ae207c4d11245e75463c091eded3ad13c/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fparam-attrs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fparam-attrs.md?ref=5349e69ae207c4d11245e75463c091eded3ad13c", "patch": "@@ -1,27 +0,0 @@\n-# `param_attrs`\n-\n-The tracking issue for this feature is: [#60406]\n-\n-[#60406]: https://github.com/rust-lang/rust/issues/60406\n-\n-Allow attributes in formal function parameter position so external tools and compiler internals can\n-take advantage of the additional information that the parameters provide.\n-\n-Enables finer conditional compilation with `#[cfg(..)]` and linting control of variables. Moreover,\n-opens the path to richer DSLs created by users.\n-\n-------------------------\n-\n-Example:\n-\n-```rust\n-#![feature(param_attrs)]\n-\n-fn len(\n-  #[cfg(windows)] slice: &[u16],\n-  #[cfg(not(windows))] slice: &[u8],\n-) -> usize\n-{\n-  slice.len()\n-}\n-```"}, {"sha": "a39fcd5ad4c580fef0c96d466dc3d9c05728249d", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -240,7 +240,7 @@ pub(crate) unsafe fn box_free<T: ?Sized>(ptr: Unique<T>) {\n #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n #[rustc_allocator_nounwind]\n pub fn handle_alloc_error(layout: Layout) -> ! {\n-    #[allow(improper_ctypes)]\n+    #[cfg_attr(bootstrap, allow(improper_ctypes))]\n     extern \"Rust\" {\n         #[lang = \"oom\"]\n         fn oom_impl(layout: Layout) -> !;"}, {"sha": "3d2bc24bf24a5dc35e54f9e58ec1eae895e415f7", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -71,7 +71,7 @@ pub fn panic_fmt(fmt: fmt::Arguments<'_>, file_line_col: &(&'static str, u32, u3\n     }\n \n     // NOTE This function never crosses the FFI boundary; it's a Rust-to-Rust call\n-    #[allow(improper_ctypes)] // PanicInfo contains a trait object which is not FFI safe\n+    #[cfg_attr(boostrap_stdarch_ignore_this, allow(improper_ctypes))]\n     extern \"Rust\" {\n         #[lang = \"panic_impl\"]\n         fn panic_impl(pi: &PanicInfo<'_>) -> !;"}, {"sha": "f6564f1fcd4c19bff0b41716bbdf5204801e4ad7", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -1347,6 +1347,39 @@ struct Foo<T: 'static> {\n ```\n \"##,\n \n+E0312: r##\"\n+Reference's lifetime of borrowed content doesn't match the expected lifetime.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0312\n+pub fn opt_str<'a>(maybestr: &'a Option<String>) -> &'static str {\n+    if maybestr.is_none() {\n+        \"(none)\"\n+    } else {\n+        let s: &'a str = maybestr.as_ref().unwrap();\n+        s  // Invalid lifetime!\n+    }\n+}\n+```\n+\n+To fix this error, either lessen the expected lifetime or find a way to not have\n+to use this reference outside of its current scope (by running the code directly\n+in the same block for example?):\n+\n+```\n+// In this case, we can fix the issue by switching from \"static\" lifetime to 'a\n+pub fn opt_str<'a>(maybestr: &'a Option<String>) -> &'a str {\n+    if maybestr.is_none() {\n+        \"(none)\"\n+    } else {\n+        let s: &'a str = maybestr.as_ref().unwrap();\n+        s  // Ok!\n+    }\n+}\n+```\n+\"##,\n+\n E0317: r##\"\n This error occurs when an `if` expression without an `else` block is used in a\n context where a type other than `()` is expected, for example a `let`\n@@ -2202,7 +2235,6 @@ static X: u32 = 42;\n //  E0304, // expected signed integer constant\n //  E0305, // expected constant\n     E0311, // thing may not live long enough\n-    E0312, // lifetime of reference outlives lifetime of borrowed content\n     E0313, // lifetime of borrowed pointer outlives lifetime of captured\n            // variable\n     E0314, // closure outlives stack frame"}, {"sha": "5906a6388a8bd5209ed84ebb67323ce065d37129", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -7,7 +7,7 @@\n use crate::lint::{LintPass, LateLintPass, LintArray};\n use crate::middle::stability;\n use crate::session::Session;\n-use errors::{Applicability, DiagnosticBuilder};\n+use errors::{Applicability, DiagnosticBuilder, pluralise};\n use syntax::ast;\n use syntax::source_map::Span;\n use syntax::symbol::Symbol;\n@@ -524,7 +524,7 @@ pub(crate) fn add_elided_lifetime_in_path_suggestion(\n     };\n     db.span_suggestion(\n         replace_span,\n-        &format!(\"indicate the anonymous lifetime{}\", if n >= 2 { \"s\" } else { \"\" }),\n+        &format!(\"indicate the anonymous lifetime{}\", pluralise!(n)),\n         suggestion,\n         Applicability::MachineApplicable\n     );"}, {"sha": "d833a34385b2d8400f0830c87d339250d915376d", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -17,7 +17,7 @@ use crate::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n use crate::rustc::lint;\n use crate::session::Session;\n use crate::util::nodemap::{DefIdMap, FxHashMap, FxHashSet, HirIdMap, HirIdSet};\n-use errors::{Applicability, DiagnosticBuilder};\n+use errors::{Applicability, DiagnosticBuilder, pluralise};\n use rustc_macros::HashStable;\n use std::borrow::Cow;\n use std::cell::Cell;\n@@ -3047,7 +3047,7 @@ pub fn report_missing_lifetime_specifiers(\n         span,\n         E0106,\n         \"missing lifetime specifier{}\",\n-        if count > 1 { \"s\" } else { \"\" }\n+        pluralise!(count)\n     )\n }\n "}, {"sha": "c9018f1c290d21ca2e51285b7c5a89c87872888b", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -33,7 +33,7 @@ use crate::ty::subst::Subst;\n use crate::ty::SubtypePredicate;\n use crate::util::nodemap::{FxHashMap, FxHashSet};\n \n-use errors::{Applicability, DiagnosticBuilder};\n+use errors::{Applicability, DiagnosticBuilder, pluralise};\n use std::fmt;\n use syntax::ast;\n use syntax::symbol::{sym, kw};\n@@ -1214,7 +1214,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 _ => format!(\"{} {}argument{}\",\n                              arg_length,\n                              if distinct && arg_length > 1 { \"distinct \" } else { \"\" },\n-                             if arg_length == 1 { \"\" } else { \"s\" }),\n+                             pluralise!(arg_length))\n             }\n         };\n "}, {"sha": "5409cbc4129f0bf19a230431c23e8378d9094193", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -196,7 +196,7 @@ impl<'tcx> ty::TyS<'tcx> {\n                 let n = tcx.lift_to_global(&n).unwrap();\n                 match n.try_eval_usize(tcx, ty::ParamEnv::empty()) {\n                     Some(n) => {\n-                        format!(\"array of {} element{}\", n, if n != 1 { \"s\" } else { \"\" }).into()\n+                        format!(\"array of {} element{}\", n, pluralise!(n)).into()\n                     }\n                     None => \"array\".into(),\n                 }"}, {"sha": "40261f6d13739d0b04668b35cd0dc2f7dbfca596", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -975,7 +975,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImproperCTypes {\n     fn check_foreign_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::ForeignItem) {\n         let mut vis = ImproperCTypesVisitor { cx };\n         let abi = cx.tcx.hir().get_foreign_abi(it.hir_id);\n-        if abi != Abi::RustIntrinsic && abi != Abi::PlatformIntrinsic {\n+        if let Abi::Rust | Abi::RustCall | Abi::RustIntrinsic | Abi::PlatformIntrinsic = abi {\n+            // Don't worry about types in internal ABIs.\n+        } else {\n             match it.node {\n                 hir::ForeignItemKind::Fn(ref decl, _, _) => {\n                     vis.check_foreign_fn(it.hir_id, decl);"}, {"sha": "2d4af2f606a2cc997f276861d254935e20fd237a", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -9,7 +9,7 @@ use lint::{LintPass, EarlyLintPass, LateLintPass};\n \n use syntax::ast;\n use syntax::attr;\n-use syntax::errors::Applicability;\n+use syntax::errors::{Applicability, pluralise};\n use syntax::feature_gate::{AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n use syntax::print::pprust;\n use syntax::symbol::{kw, sym};\n@@ -48,7 +48,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n         }\n \n         let ty = cx.tables.expr_ty(&expr);\n-        let type_permits_lack_of_use = check_must_use_ty(cx, ty, &expr, s.span, \"\", \"\", false);\n+        let type_permits_lack_of_use = check_must_use_ty(cx, ty, &expr, s.span, \"\", \"\", 1);\n \n         let mut fn_warned = false;\n         let mut op_warned = false;\n@@ -135,21 +135,21 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n             span: Span,\n             descr_pre: &str,\n             descr_post: &str,\n-            plural: bool,\n+            plural_len: usize,\n         ) -> bool {\n             if ty.is_unit() || cx.tcx.is_ty_uninhabited_from(\n                 cx.tcx.hir().get_module_parent(expr.hir_id), ty)\n             {\n                 return true;\n             }\n \n-            let plural_suffix = if plural { \"s\" } else { \"\" };\n+            let plural_suffix = pluralise!(plural_len);\n \n             match ty.sty {\n                 ty::Adt(..) if ty.is_box() => {\n                     let boxed_ty = ty.boxed_ty();\n                     let descr_pre = &format!(\"{}boxed \", descr_pre);\n-                    check_must_use_ty(cx, boxed_ty, expr, span, descr_pre, descr_post, plural)\n+                    check_must_use_ty(cx, boxed_ty, expr, span, descr_pre, descr_post, plural_len)\n                 }\n                 ty::Adt(def, _) => {\n                     check_must_use_def(cx, def.did, span, descr_pre, descr_post)\n@@ -202,7 +202,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                     for (i, ty) in tys.iter().map(|k| k.expect_ty()).enumerate() {\n                         let descr_post = &format!(\" in tuple element {}\", i);\n                         let span = *spans.get(i).unwrap_or(&span);\n-                        if check_must_use_ty(cx, ty, expr, span, descr_pre, descr_post, plural) {\n+                        if check_must_use_ty(\n+                            cx,\n+                            ty,\n+                            expr,\n+                            span,\n+                            descr_pre,\n+                            descr_post,\n+                            plural_len\n+                        ) {\n                             has_emitted = true;\n                         }\n                     }\n@@ -216,7 +224,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                             descr_pre,\n                             plural_suffix,\n                         );\n-                        check_must_use_ty(cx, ty, expr, span, descr_pre, descr_post, true)\n+                        check_must_use_ty(cx, ty, expr, span, descr_pre, descr_post, n as usize + 1)\n                     }\n                     // Otherwise, we don't lint, to avoid false positives.\n                     _ => false,"}, {"sha": "599a0ad0d0c52641d2daeee4d6575aca42bb614c", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -180,7 +180,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     );\n                 }\n                 if Some(DesugaringKind::ForLoop) == move_span.desugaring_kind() {\n-                    if let Ok(snippet) = self.infcx.tcx.sess.source_map().span_to_snippet(span) {\n+                    let sess = self.infcx.tcx.sess;\n+                    if let Ok(snippet) = sess.source_map().span_to_snippet(move_span) {\n                         err.span_suggestion(\n                             move_span,\n                             \"consider borrowing to avoid moving into the for loop\","}, {"sha": "0d85be83e12e04d437889a85fdf594ddd81fae87", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -26,6 +26,8 @@\n use crate::Resolver;\n use crate::resolve_imports::ImportDirectiveSubclass;\n \n+use errors::pluralise;\n+\n use rustc::util::nodemap::NodeMap;\n use rustc::{lint, ty};\n use rustc_data_structures::fx::FxHashSet;\n@@ -295,7 +297,7 @@ impl Resolver<'_> {\n                 }).collect::<Vec<String>>();\n             span_snippets.sort();\n             let msg = format!(\"unused import{}{}\",\n-                            if len > 1 { \"s\" } else { \"\" },\n+                            pluralise!(len),\n                             if !span_snippets.is_empty() {\n                                 format!(\": {}\", span_snippets.join(\", \"))\n                             } else {"}, {"sha": "df8bd3fa75e1437a0523b4f12bbfac30e7caabaa", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -424,7 +424,7 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n                 } else {\n                     err.note(\"did you mean to use one of the enum's variants?\");\n                 }\n-            },\n+            }\n             (Res::Def(DefKind::Struct, def_id), _) if ns == ValueNS => {\n                 if let Some((ctor_def, ctor_vis))\n                         = self.r.struct_constructors.get(&def_id).cloned() {"}, {"sha": "360343169bc3d83dc0b09e1e815f46b050fb79be", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -11,7 +11,7 @@ use crate::{Resolver, ResolutionError, Segment, ModuleKind};\n use crate::{names_to_string, module_to_string};\n use crate::diagnostics::Suggestion;\n \n-use errors::Applicability;\n+use errors::{Applicability, pluralise};\n \n use rustc_data_structures::ptr_key::PtrKey;\n use rustc::ty;\n@@ -728,7 +728,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n \n             let msg = format!(\n                 \"unresolved import{} {}\",\n-                if paths.len() > 1 { \"s\" } else { \"\" },\n+                pluralise!(paths.len()),\n                 paths.join(\", \"),\n             );\n "}, {"sha": "718d12484f741bf9cc5e78c3d059be0d677a2f57", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -1346,7 +1346,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 span,\n                 E0191,\n                 \"the value of the associated type{} {} must be specified\",\n-                if associated_types.len() == 1 { \"\" } else { \"s\" },\n+                pluralise!(associated_types.len()),\n                 names,\n             );\n             let (suggest, potential_assoc_types_spans) ="}, {"sha": "1ae50b8cb288356a7e7727239448e84b5aead3cc", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -17,7 +17,7 @@ use crate::util::common::ErrorReported;\n use crate::util::nodemap::FxHashMap;\n use crate::astconv::AstConv as _;\n \n-use errors::{Applicability, DiagnosticBuilder};\n+use errors::{Applicability, DiagnosticBuilder, pluralise};\n use syntax::ast;\n use syntax::symbol::{Symbol, kw, sym};\n use syntax::source_map::Span;\n@@ -1178,7 +1178,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             struct_span_err!(tcx.sess, span, E0063,\n                              \"missing field{} {}{} in initializer of `{}`\",\n-                             if remaining_fields.len() == 1 { \"\" } else { \"s\" },\n+                             pluralise!(remaining_fields.len()),\n                              remaining_fields_names,\n                              truncated_fields_error,\n                              adt_ty)"}, {"sha": "74e4f28255b162cb510845aa7cfbbc6446daf0fa", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -5,7 +5,7 @@ use crate::check::FnCtxt;\n use crate::middle::lang_items::FnOnceTraitLangItem;\n use crate::namespace::Namespace;\n use crate::util::nodemap::FxHashSet;\n-use errors::{Applicability, DiagnosticBuilder};\n+use errors::{Applicability, DiagnosticBuilder, pluralise};\n use rustc::hir::{self, ExprKind, Node, QPath};\n use rustc::hir::def::{Res, DefKind};\n use rustc::hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE, DefId};\n@@ -560,7 +560,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let help = format!(\"{an}other candidate{s} {were} found in the following \\\n                                         trait{s}, perhaps add a `use` for {one_of_them}:\",\n                                     an = if candidates.len() == 1 {\"an\" } else { \"\" },\n-                                    s = if candidates.len() == 1 { \"\" } else { \"s\" },\n+                                    s = pluralise!(candidates.len()),\n                                     were = if candidates.len() == 1 { \"was\" } else { \"were\" },\n                                     one_of_them = if candidates.len() == 1 {\n                                         \"it\""}, {"sha": "7ff8f9c95c89c0a0c96133d5a885e953fb8f730e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -88,7 +88,7 @@ pub mod intrinsic;\n mod op;\n \n use crate::astconv::{AstConv, PathSeg};\n-use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n+use errors::{Applicability, DiagnosticBuilder, DiagnosticId, pluralise};\n use rustc::hir::{self, ExprKind, GenericArg, ItemKind, Node, PatKind, QPath};\n use rustc::hir::def::{CtorOf, Res, DefKind};\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n@@ -4935,5 +4935,5 @@ fn fatally_break_rust(sess: &Session) {\n }\n \n fn potentially_plural_count(count: usize, word: &str) -> String {\n-    format!(\"{} {}{}\", count, word, if count == 1 { \"\" } else { \"s\" })\n+    format!(\"{} {}{}\", count, word, pluralise!(count))\n }"}, {"sha": "d93a4052cd3932c6f09352970211e0ff8a7fb7ac", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -1,6 +1,6 @@\n use crate::check::FnCtxt;\n use crate::util::nodemap::FxHashMap;\n-use errors::{Applicability, DiagnosticBuilder};\n+use errors::{Applicability, DiagnosticBuilder, pluralise};\n use rustc::hir::{self, PatKind, Pat, HirId};\n use rustc::hir::def::{Res, DefKind, CtorKind};\n use rustc::hir::pat_util::EnumerateAndAdjustIterator;\n@@ -684,8 +684,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     fn e0023(&self, pat_span: Span, res: Res, subpats: &'tcx [P<Pat>], fields: &[ty::FieldDef]) {\n-        let subpats_ending = if subpats.len() == 1 { \"\" } else { \"s\" };\n-        let fields_ending = if fields.len() == 1 { \"\" } else { \"s\" };\n+        let subpats_ending = pluralise!(subpats.len());\n+        let fields_ending = pluralise!(fields.len());\n         let res_span = self.tcx.def_span(res.def_id());\n         struct_span_err!(\n             self.tcx.sess,\n@@ -1103,10 +1103,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             E0527,\n             \"pattern requires {} element{} but array has {}\",\n             min_len,\n-            if min_len != 1 { \"s\" } else { \"\" },\n+            pluralise!(min_len),\n             size,\n         )\n-        .span_label(span, format!(\"expected {} element{}\", size, if size != 1 { \"s\" } else { \"\" }))\n+        .span_label(span, format!(\"expected {} element{}\", size, pluralise!(size)))\n         .emit();\n     }\n \n@@ -1117,14 +1117,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             E0528,\n             \"pattern requires at least {} element{} but array has {}\",\n             min_len,\n-            if min_len != 1 { \"s\" } else { \"\" },\n+            pluralise!(min_len),\n             size,\n         ).span_label(\n             span,\n             format!(\n                 \"pattern cannot match array of {} element{}\",\n                 size,\n-                if size != 1 { \"s\" } else { \"\" },\n+                pluralise!(size),\n             ),\n         ).emit();\n     }"}, {"sha": "51fdb1c0e55ec9dbbd1596424424a31b58fd5e03", "filename": "src/libstd/sys/vxworks/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibstd%2Fsys%2Fvxworks%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibstd%2Fsys%2Fvxworks%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Ffs.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -529,7 +529,7 @@ pub fn stat(p: &Path) -> io::Result<FileAttr> {\n     let p = cstr(p)?;\n     let mut stat: stat64 = unsafe { mem::zeroed() };\n     cvt(unsafe {\n-        libc::lstat(p.as_ptr(), &mut stat as *mut _ as *mut _)\n+        libc::stat(p.as_ptr(), &mut stat as *mut _ as *mut _)\n     })?;\n     Ok(FileAttr { stat })\n }"}, {"sha": "f4798da1876cf66e6ff6e0235492820e6bfa3c37", "filename": "src/libstd/sys/vxworks/os.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibstd%2Fsys%2Fvxworks%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibstd%2Fsys%2Fvxworks%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fos.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -287,28 +287,7 @@ pub fn temp_dir() -> PathBuf {\n }\n \n pub fn home_dir() -> Option<PathBuf> {\n-    return crate::env::var_os(\"HOME\").or_else(|| unsafe {\n-        fallback()\n-    }).map(PathBuf::from);\n-\n-    unsafe fn fallback() -> Option<OsString> {\n-        let amt = match libc::sysconf(libc::_SC_GETPW_R_SIZE_MAX) {\n-            n if n < 0 => 512 as usize,\n-            n => n as usize,\n-        };\n-        let mut buf = Vec::with_capacity(amt);\n-        let mut passwd: libc::passwd = mem::zeroed();\n-        let mut result = ptr::null_mut();\n-        match libc::getpwuid_r(libc::getuid(), &mut passwd, buf.as_mut_ptr(),\n-                                buf.capacity(), &mut result) {\n-            0 if !result.is_null() => {\n-                let ptr = passwd.pw_dir as *const _;\n-                let bytes = CStr::from_ptr(ptr).to_bytes().to_vec();\n-                Some(OsStringExt::from_vec(bytes))\n-            },\n-            _ => None,\n-        }\n-    }\n+    None\n }\n \n pub fn exit(code: i32) -> ! {"}, {"sha": "f9c07e3a2e4ff43e2449edea8cec164dcf82a270", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -8,6 +8,7 @@ use crate::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n \n use smallvec::{smallvec, SmallVec};\n \n+use errors::pluralise;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use syntax_pos::hygiene::{ExpnId, Transparency};\n@@ -348,10 +349,10 @@ impl LockstepIterSize {\n                         \"meta-variable `{}` repeats {} time{}, but `{}` repeats {} time{}\",\n                         l_id,\n                         l_len,\n-                        if l_len != 1 { \"s\" } else { \"\" },\n+                        pluralise!(l_len),\n                         r_id,\n                         r_len,\n-                        if r_len != 1 { \"s\" } else { \"\" },\n+                        pluralise!(r_len),\n                     );\n                     LockstepIterSize::Contradiction(msg)\n                 }"}, {"sha": "5538daf388e2f046e38a5c841be431ab0b4a6bc1", "filename": "src/libsyntax/feature_gate/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -243,6 +243,8 @@ declare_features! (\n     (accepted, async_await, \"1.39.0\", Some(50547), None),\n     /// Allows mixing bind-by-move in patterns and references to those identifiers in guards.\n     (accepted, bind_by_move_pattern_guards, \"1.39.0\", Some(15287), None),\n+    /// Allows attributes in formal function parameters.\n+    (accepted, param_attrs, \"1.39.0\", Some(60406), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "38c16dbac6ab7730265fa7d8655e177b30ce92f8", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -489,9 +489,6 @@ declare_features! (\n     /// Allows the user of associated type bounds.\n     (active, associated_type_bounds, \"1.34.0\", Some(52662), None),\n \n-    /// Attributes on formal function params.\n-    (active, param_attrs, \"1.36.0\", Some(60406), None),\n-\n     /// Allows calling constructor functions in `const fn`.\n     (active, const_constructor, \"1.37.0\", Some(61456), None),\n "}, {"sha": "b50ca1ad1cf2b4ed15418362b443b0fb7932f914", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -812,7 +812,6 @@ pub fn check_crate(krate: &ast::Crate,\n         }\n     }\n \n-    gate_all!(param_attrs, \"attributes on function parameters are unstable\");\n     gate_all!(let_chains, \"`let` expressions in this position are experimental\");\n     gate_all!(async_closure, \"async closures are unstable\");\n     gate_all!(yields, generators, \"yield syntax is experimental\");"}, {"sha": "bba70973631fefa6ee73e03957b2d2e8a11c32c9", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -19,13 +19,6 @@ const DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG: &str = \"an inner attribute is not \\\n                                                      permitted in this context\";\n \n impl<'a> Parser<'a> {\n-    crate fn parse_param_attributes(&mut self) -> PResult<'a, Vec<ast::Attribute>> {\n-        let attrs = self.parse_outer_attributes()?;\n-        self.sess.gated_spans.param_attrs.borrow_mut()\n-            .extend(attrs.iter().map(|a| a.span));\n-        Ok(attrs)\n-    }\n-\n     /// Parses attributes that appear before an item.\n     crate fn parse_outer_attributes(&mut self) -> PResult<'a, Vec<ast::Attribute>> {\n         let mut attrs: Vec<ast::Attribute> = Vec::new();"}, {"sha": "2d7f4f71ca4ee1dadf4f21a150a8b5cb05976656", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -11,7 +11,7 @@ use crate::ptr::P;\n use crate::symbol::{kw, sym};\n use crate::ThinVec;\n use crate::util::parser::AssocOp;\n-use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n+use errors::{Applicability, DiagnosticBuilder, DiagnosticId, pluralise};\n use rustc_data_structures::fx::FxHashSet;\n use syntax_pos::{Span, DUMMY_SP, MultiSpan, SpanSnippetError};\n use log::{debug, trace};\n@@ -532,15 +532,15 @@ impl<'a> Parser<'a> {\n             self.eat_to_tokens(&[&end]);\n             let span = lo.until(self.token.span);\n \n-            let plural = number_of_gt > 1 || number_of_shr >= 1;\n+            let total_num_of_gt = number_of_gt + number_of_shr * 2;\n             self.diagnostic()\n                 .struct_span_err(\n                     span,\n-                    &format!(\"unmatched angle bracket{}\", if plural { \"s\" } else { \"\" }),\n+                    &format!(\"unmatched angle bracket{}\", pluralise!(total_num_of_gt)),\n                 )\n                 .span_suggestion(\n                     span,\n-                    &format!(\"remove extra angle bracket{}\", if plural { \"s\" } else { \"\" }),\n+                    &format!(\"remove extra angle bracket{}\", pluralise!(total_num_of_gt)),\n                     String::new(),\n                     Applicability::MachineApplicable,\n                 )"}, {"sha": "f7b87d154feccb745f9abcbb784b1120c4f04a9f", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -49,8 +49,6 @@ static_assert_size!(PResult<'_, bool>, 16);\n /// used and should be feature gated accordingly in `check_crate`.\n #[derive(Default)]\n pub struct GatedSpans {\n-    /// Spans collected for gating `param_attrs`, e.g. `fn foo(#[attr] x: u8) {}`.\n-    pub param_attrs: Lock<Vec<Span>>,\n     /// Spans collected for gating `let_chains`, e.g. `if a && let b = c {}`.\n     pub let_chains: Lock<Vec<Span>>,\n     /// Spans collected for gating `async_closure`, e.g. `async || ..`."}, {"sha": "b2b6504919e96b152a6c7789d1122a387ff09c21", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -979,7 +979,7 @@ impl<'a> Parser<'a> {\n         is_name_required: impl Fn(&token::Token) -> bool,\n     ) -> PResult<'a, Param> {\n         let lo = self.token.span;\n-        let attrs = self.parse_param_attributes()?;\n+        let attrs = self.parse_outer_attributes()?;\n         if let Some(mut param) = self.parse_self_param()? {\n             param.attrs = attrs.into();\n             return self.recover_bad_self_param(param, is_trait_item);\n@@ -1362,7 +1362,7 @@ impl<'a> Parser<'a> {\n     /// Returns the parsed optional self parameter with attributes and whether a self\n     /// shortcut was used.\n     fn parse_self_parameter_with_attrs(&mut self) -> PResult<'a, Option<Param>> {\n-        let attrs = self.parse_param_attributes()?;\n+        let attrs = self.parse_outer_attributes()?;\n         let param_opt = self.parse_self_param()?;\n         Ok(param_opt.map(|mut param| {\n             param.attrs = attrs.into();"}, {"sha": "41c3747b950ec7eab6e512ce1734be8ed5e737ee", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -66,6 +66,10 @@ pub(super) enum LhsExpr {\n }\n \n impl From<Option<ThinVec<Attribute>>> for LhsExpr {\n+    /// Converts `Some(attrs)` into `LhsExpr::AttributesParsed(attrs)`\n+    /// and `None` into `LhsExpr::NotYetParsed`.\n+    ///\n+    /// This conversion does not allocate.\n     fn from(o: Option<ThinVec<Attribute>>) -> Self {\n         if let Some(attrs) = o {\n             LhsExpr::AttributesParsed(attrs)\n@@ -76,6 +80,9 @@ impl From<Option<ThinVec<Attribute>>> for LhsExpr {\n }\n \n impl From<P<Expr>> for LhsExpr {\n+    /// Converts the `expr: P<Expr>` into `LhsExpr::AlreadyParsed(expr)`.\n+    ///\n+    /// This conversion does not allocate.\n     fn from(expr: P<Expr>) -> Self {\n         LhsExpr::AlreadyParsed(expr)\n     }\n@@ -1176,7 +1183,7 @@ impl<'a> Parser<'a> {\n     /// Parses a parameter in a closure header (e.g., `|arg, arg|`).\n     fn parse_fn_block_param(&mut self) -> PResult<'a, Param> {\n         let lo = self.token.span;\n-        let attrs = self.parse_param_attributes()?;\n+        let attrs = self.parse_outer_attributes()?;\n         let pat = self.parse_pat(PARAM_EXPECTED)?;\n         let t = if self.eat(&token::Colon) {\n             self.parse_ty()?"}, {"sha": "dcd3c648017423314609ec26651ee2f8b4107699", "filename": "src/libsyntax/parse/parser/path.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -9,7 +9,7 @@ use crate::symbol::kw;\n \n use std::mem;\n use log::debug;\n-use errors::{Applicability};\n+use errors::{Applicability, pluralise};\n \n /// Specifies how to parse a path.\n #[derive(Copy, Clone, PartialEq)]\n@@ -347,20 +347,19 @@ impl<'a> Parser<'a> {\n                 let span = lo.with_hi(\n                     lo.lo() + BytePos(snapshot.unmatched_angle_bracket_count)\n                 );\n-                let plural = snapshot.unmatched_angle_bracket_count > 1;\n                 self.diagnostic()\n                     .struct_span_err(\n                         span,\n                         &format!(\n                             \"unmatched angle bracket{}\",\n-                            if plural { \"s\" } else { \"\" }\n+                            pluralise!(snapshot.unmatched_angle_bracket_count)\n                         ),\n                     )\n                     .span_suggestion(\n                         span,\n                         &format!(\n                             \"remove extra angle bracket{}\",\n-                            if plural { \"s\" } else { \"\" }\n+                            pluralise!(snapshot.unmatched_angle_bracket_count)\n                         ),\n                         String::new(),\n                         Applicability::MachineApplicable,"}, {"sha": "5697edd8e4867a5972ba23d743171b75b5f746bc", "filename": "src/libsyntax/parse/parser/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -11,7 +11,7 @@ use crate::symbol::{kw};\n \n use rustc_target::spec::abi::Abi;\n \n-use errors::{Applicability};\n+use errors::{Applicability, pluralise};\n \n /// Returns `true` if `IDENT t` can start a type -- `IDENT::a::b`, `IDENT<u8, u8>`,\n /// `IDENT<<u8 as Trait>::AssocTy>`.\n@@ -397,7 +397,7 @@ impl<'a> Parser<'a> {\n         }\n \n         if !negative_bounds.is_empty() || was_negative {\n-            let plural = negative_bounds.len() > 1;\n+            let negative_bounds_len = negative_bounds.len();\n             let last_span = negative_bounds.last().map(|sp| *sp);\n             let mut err = self.struct_span_err(\n                 negative_bounds,\n@@ -420,7 +420,7 @@ impl<'a> Parser<'a> {\n                 }\n                 err.span_suggestion_hidden(\n                     bound_list,\n-                    &format!(\"remove the trait bound{}\", if plural { \"s\" } else { \"\" }),\n+                    &format!(\"remove the trait bound{}\", pluralise!(negative_bounds_len)),\n                     new_bound_list,\n                     Applicability::MachineApplicable,\n                 );"}, {"sha": "26455df17b896421a6e27b079c331fb809768c72", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -5,6 +5,7 @@ use fmt_macros as parse;\n \n use errors::DiagnosticBuilder;\n use errors::Applicability;\n+use errors::pluralise;\n \n use syntax::ast;\n use syntax::ext::base::{self, *};\n@@ -299,7 +300,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 &format!(\n                     \"{} positional argument{} in format string, but {}\",\n                     count,\n-                    if count != 1 { \"s\" } else { \"\" },\n+                    pluralise!(count),\n                     self.describe_num_args(),\n                 ),\n             );"}, {"sha": "a836593e0da108defd40295c7c1fe6efabcb5433", "filename": "src/test/ui/issues/issue-10291.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fissues%2Fissue-10291.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fissues%2Fissue-10291.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10291.stderr?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -20,3 +20,4 @@ LL | fn test<'x>(x: &'x isize) {\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0312`."}, {"sha": "586548002072ed201e1a4fb44de50acfaf2a38da", "filename": "src/test/ui/issues/issue-52533.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fissues%2Fissue-52533.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fissues%2Fissue-52533.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52533.stderr?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -17,3 +17,4 @@ LL |     foo(|a, b| b)\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0312`."}, {"sha": "71e054b5d9876a47f9ffeebc720ee43a31dac3a5", "filename": "src/test/ui/issues/issue-64559.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fissues%2Fissue-64559.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fissues%2Fissue-64559.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64559.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    let orig = vec![true];\n+    for _val in orig {}\n+    let _closure = || orig;\n+    //~^ ERROR use of moved value: `orig`\n+}"}, {"sha": "3c685dc8d089a145dc8ce0bd95ba2941905eab0a", "filename": "src/test/ui/issues/issue-64559.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fissues%2Fissue-64559.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fissues%2Fissue-64559.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64559.stderr?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -0,0 +1,18 @@\n+error[E0382]: use of moved value: `orig`\n+  --> $DIR/issue-64559.rs:4:20\n+   |\n+LL |     let orig = vec![true];\n+   |         ---- move occurs because `orig` has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n+LL |     for _val in orig {}\n+   |                 ----\n+   |                 |\n+   |                 value moved here\n+   |                 help: consider borrowing to avoid moving into the for loop: `&orig`\n+LL |     let _closure = || orig;\n+   |                    ^^ ---- use occurs due to use in closure\n+   |                    |\n+   |                    value used here after move\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "9e787f638a9989d7827d58bf6e4845847f8c458f", "filename": "src/test/ui/issues/issue-64593.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fissues%2Fissue-64593.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fissues%2Fissue-64593.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64593.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+#![deny(improper_ctypes)]\n+\n+pub struct Error(std::num::NonZeroU32);\n+\n+extern \"Rust\" {\n+    fn foo(dest: &mut [u8]) -> Result<(), Error>;\n+}\n+\n+fn main() {\n+    let _ = unsafe { foo(&mut []) };\n+}"}, {"sha": "1af44ecf362bf50158bd94f9972aaa8a0398fc1e", "filename": "src/test/ui/lint/lint-unused-mut-variables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-mut-variables.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -3,7 +3,7 @@\n // Exercise the unused_mut attribute in some positive and negative cases\n \n #![deny(unused_mut)]\n-#![feature(async_closure, param_attrs)]\n+#![feature(async_closure)]\n \n async fn baz_async(\n     mut a: i32,"}, {"sha": "1a6b5183f0fae48b735084c400a0b84a951ea3da", "filename": "src/test/ui/lint/lint-unused-variables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Flint%2Flint-unused-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Flint%2Flint-unused-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-variables.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -1,7 +1,7 @@\n // compile-flags: --cfg something\n // edition:2018\n \n-#![feature(async_closure, param_attrs)]\n+#![feature(async_closure)]\n #![deny(unused_variables)]\n \n async fn foo_async("}, {"sha": "26f756c91833bf7ba4e46f5bf60a12fb8d94a36d", "filename": "src/test/ui/lub-if.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Flub-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Flub-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-if.stderr?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -26,3 +26,4 @@ LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0312`."}, {"sha": "0cb0a23c6f2df30339960f73eed818cd76a247cf", "filename": "src/test/ui/lub-match.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Flub-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Flub-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-match.stderr?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -26,3 +26,4 @@ LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0312`."}, {"sha": "90a35177f4c3bae75e75119c11f75ec8eb77430e", "filename": "src/test/ui/nll/issue-52742.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -20,3 +20,4 @@ LL | |     }\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0312`."}, {"sha": "4ec16ba055a4c48a4edd34379ce63a8cb173b391", "filename": "src/test/ui/nll/issue-55401.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fnll%2Fissue-55401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fnll%2Fissue-55401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55401.stderr?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -13,3 +13,4 @@ LL | fn static_to_a_to_static_through_ref_in_tuple<'a>(x: &'a u32) -> &'static u\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0312`."}, {"sha": "0a8ad4221c986ed509e1018b9a779cb5176e20cc", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-normalize.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-normalize.stderr?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -13,3 +13,4 @@ LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0312`."}, {"sha": "d596aaf098f7709db1a58a8268d1c5e2191413f3", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-1.stderr?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -13,3 +13,4 @@ LL | fn foo<'a>(_: &'a u32) -> &'static u32 {\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0312`."}, {"sha": "80ff9a043d4d5004fe06283c1ec474fd3545796f", "filename": "src/test/ui/nll/user-annotations/constant-in-expr-trait-item-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fconstant-in-expr-trait-item-2.stderr?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -13,3 +13,4 @@ LL | fn foo<'a, T: Foo<'a>>() -> &'static u32 {\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0312`."}, {"sha": "995eb62d0bb59b191b9b58e76c28b5e9911e9750", "filename": "src/test/ui/parser/fn-arg-doc-comment.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -2,14 +2,10 @@ pub fn f(\n     /// Comment\n     //~^ ERROR documentation comments cannot be applied to function parameters\n     //~| NOTE doc comments are not allowed here\n-    //~| ERROR attributes on function parameters are unstable\n-    //~| NOTE https://github.com/rust-lang/rust/issues/60406\n     id: u8,\n     /// Other\n     //~^ ERROR documentation comments cannot be applied to function parameters\n     //~| NOTE doc comments are not allowed here\n-    //~| ERROR attributes on function parameters are unstable\n-    //~| NOTE https://github.com/rust-lang/rust/issues/60406\n     a: u8,\n ) {}\n "}, {"sha": "669785af45f9323d9d9e3aa3d3793b3d951259fb", "filename": "src/test/ui/parser/fn-arg-doc-comment.stderr", "status": "modified", "additions": 7, "deletions": 26, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-arg-doc-comment.stderr?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -1,5 +1,5 @@\n error: attributes cannot be applied to a function parameter's type\n-  --> $DIR/fn-arg-doc-comment.rs:16:12\n+  --> $DIR/fn-arg-doc-comment.rs:12:12\n    |\n LL | fn bar(id: #[allow(dead_code)] i32) {}\n    |            ^^^^^^^^^^^^^^^^^^^ attributes are not allowed here\n@@ -11,31 +11,13 @@ LL |     /// Comment\n    |     ^^^^^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/fn-arg-doc-comment.rs:8:5\n+  --> $DIR/fn-arg-doc-comment.rs:6:5\n    |\n LL |     /// Other\n    |     ^^^^^^^^^ doc comments are not allowed here\n \n-error[E0658]: attributes on function parameters are unstable\n-  --> $DIR/fn-arg-doc-comment.rs:2:5\n-   |\n-LL |     /// Comment\n-   |     ^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/60406\n-   = help: add `#![feature(param_attrs)]` to the crate attributes to enable\n-\n-error[E0658]: attributes on function parameters are unstable\n-  --> $DIR/fn-arg-doc-comment.rs:8:5\n-   |\n-LL |     /// Other\n-   |     ^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/60406\n-   = help: add `#![feature(param_attrs)]` to the crate attributes to enable\n-\n error[E0308]: mismatched types\n-  --> $DIR/fn-arg-doc-comment.rs:22:7\n+  --> $DIR/fn-arg-doc-comment.rs:18:7\n    |\n LL |     f(\"\", \"\");\n    |       ^^ expected u8, found reference\n@@ -44,7 +26,7 @@ LL |     f(\"\", \"\");\n               found type `&'static str`\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-arg-doc-comment.rs:22:11\n+  --> $DIR/fn-arg-doc-comment.rs:18:11\n    |\n LL |     f(\"\", \"\");\n    |           ^^ expected u8, found reference\n@@ -53,15 +35,14 @@ LL |     f(\"\", \"\");\n               found type `&'static str`\n \n error[E0308]: mismatched types\n-  --> $DIR/fn-arg-doc-comment.rs:29:9\n+  --> $DIR/fn-arg-doc-comment.rs:25:9\n    |\n LL |     bar(\"\");\n    |         ^^ expected i32, found reference\n    |\n    = note: expected type `i32`\n               found type `&'static str`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 6 previous errors\n \n-Some errors have detailed explanations: E0308, E0658.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "7b9f2c9503b2fdbfa1e604f56ef99952ebf1541f", "filename": "src/test/ui/regions/regions-early-bound-error-method.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.stderr?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -17,3 +17,4 @@ LL |     fn or<'b,G:GetRef<'b>>(&self, g2: G) -> &'a isize {\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0312`."}, {"sha": "a68355b78f54ca2a82f8bf8b1f443451a74c8080", "filename": "src/test/ui/regions/regions-early-bound-error.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.stderr?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -17,3 +17,4 @@ LL | fn get<'a,'b,G:GetRef<'a, isize>>(g1: G, b: &'b isize) -> &'b isize {\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0312`."}, {"sha": "904dee6998c9bbe7c720c044edaa3c63aff4aa48", "filename": "src/test/ui/regions/regions-nested-fns.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.stderr?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -57,3 +57,4 @@ LL | fn nested<'x>(x: &'x isize) {\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0312`."}, {"sha": "21ead8b768f475db682079524370a9a75460cfb0", "filename": "src/test/ui/regions/regions-static-bound.migrate.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.stderr?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -30,4 +30,5 @@ LL |     static_id_indirect(&v);\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0621`.\n+Some errors have detailed explanations: E0312, E0621.\n+For more information about an error, try `rustc --explain E0312`."}, {"sha": "a6f693bd5b5f43c833d354d7f6e57dc09dfb2871", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-2018.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(param_attrs)]\n-\n trait Trait2015 { fn foo(#[allow(C)] i32); }\n //~^ ERROR expected one of `:`, `@`, or `|`, found `)`\n "}, {"sha": "9860e9805b2ed832bae742167a12cabfbae071ee", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-2018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-2018.stderr?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -1,5 +1,5 @@\n error: expected one of `:`, `@`, or `|`, found `)`\n-  --> $DIR/param-attrs-2018.rs:5:41\n+  --> $DIR/param-attrs-2018.rs:3:41\n    |\n LL | trait Trait2015 { fn foo(#[allow(C)] i32); }\n    |                                         ^ expected one of `:`, `@`, or `|` here"}, {"sha": "1217f89cb316863d0ea3e802faed1d591c776353", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-allowed.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-allowed.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -2,7 +2,6 @@\n // compile-flags: --cfg something\n \n #![deny(unused_mut)]\n-#![feature(param_attrs)]\n \n extern \"C\" {\n     fn ffi("}, {"sha": "c4684a3fa82b0f1d0bb419d2bab96c657c74b920", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-builtin-attrs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -1,5 +1,3 @@\n-#![feature(param_attrs)]\n-\n extern \"C\" {\n     fn ffi(\n         /// Foo"}, {"sha": "0fc6ca2f7f37ae8fd133a20bdb6f49e847c5e5f5", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-builtin-attrs.stderr", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.stderr?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -1,311 +1,311 @@\n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:7:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:5:9\n    |\n LL |         #[test] a: i32,\n    |         ^^^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:23:5\n+  --> $DIR/param-attrs-builtin-attrs.rs:21:5\n    |\n LL |     #[test] a: u32,\n    |     ^^^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:38:5\n+  --> $DIR/param-attrs-builtin-attrs.rs:36:5\n    |\n LL |     #[test] a: u32,\n    |     ^^^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:58:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:56:9\n    |\n LL |         #[test] a: i32,\n    |         ^^^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:79:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:77:9\n    |\n LL |         #[test] a: i32,\n    |         ^^^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:98:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:96:9\n    |\n LL |         #[test] a: i32,\n    |         ^^^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:117:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:115:9\n    |\n LL |         #[test] a: i32,\n    |         ^^^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:134:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:132:9\n    |\n LL |         #[test] a: u32,\n    |         ^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:5:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:3:9\n    |\n LL |         /// Foo\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:9:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:7:9\n    |\n LL |         /// Bar\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:11:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:9:9\n    |\n LL |         #[must_use]\n    |         ^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:13:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:11:9\n    |\n LL |         /// Baz\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:15:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:13:9\n    |\n LL |         #[no_mangle] b: i32,\n    |         ^^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:21:5\n+  --> $DIR/param-attrs-builtin-attrs.rs:19:5\n    |\n LL |     /// Foo\n    |     ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:25:5\n+  --> $DIR/param-attrs-builtin-attrs.rs:23:5\n    |\n LL |     /// Bar\n    |     ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:27:5\n+  --> $DIR/param-attrs-builtin-attrs.rs:25:5\n    |\n LL |     #[must_use]\n    |     ^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:29:5\n+  --> $DIR/param-attrs-builtin-attrs.rs:27:5\n    |\n LL |     /// Baz\n    |     ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:31:5\n+  --> $DIR/param-attrs-builtin-attrs.rs:29:5\n    |\n LL |     #[no_mangle] b: i32,\n    |     ^^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:36:5\n+  --> $DIR/param-attrs-builtin-attrs.rs:34:5\n    |\n LL |     /// Foo\n    |     ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:40:5\n+  --> $DIR/param-attrs-builtin-attrs.rs:38:5\n    |\n LL |     /// Bar\n    |     ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:42:5\n+  --> $DIR/param-attrs-builtin-attrs.rs:40:5\n    |\n LL |     #[must_use]\n    |     ^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:44:5\n+  --> $DIR/param-attrs-builtin-attrs.rs:42:5\n    |\n LL |     /// Baz\n    |     ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:46:5\n+  --> $DIR/param-attrs-builtin-attrs.rs:44:5\n    |\n LL |     #[no_mangle] b: i32,\n    |     ^^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:53:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:51:9\n    |\n LL |         /// Foo\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:56:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:54:9\n    |\n LL |         /// Bar\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:60:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:58:9\n    |\n LL |         /// Baz\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:62:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:60:9\n    |\n LL |         #[must_use]\n    |         ^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:64:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:62:9\n    |\n LL |         /// Qux\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:66:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:64:9\n    |\n LL |         #[no_mangle] b: i32,\n    |         ^^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:74:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:72:9\n    |\n LL |         /// Foo\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:77:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:75:9\n    |\n LL |         /// Bar\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:81:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:79:9\n    |\n LL |         /// Baz\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:83:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:81:9\n    |\n LL |         #[must_use]\n    |         ^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:85:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:83:9\n    |\n LL |         /// Qux\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:87:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:85:9\n    |\n LL |         #[no_mangle] b: i32,\n    |         ^^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:93:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:91:9\n    |\n LL |         /// Foo\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:96:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:94:9\n    |\n LL |         /// Bar\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:100:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:98:9\n    |\n LL |         /// Baz\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:102:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:100:9\n    |\n LL |         #[must_use]\n    |         ^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:104:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:102:9\n    |\n LL |         /// Qux\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:106:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:104:9\n    |\n LL |         #[no_mangle] b: i32,\n    |         ^^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:112:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:110:9\n    |\n LL |         /// Foo\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:115:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:113:9\n    |\n LL |         /// Bar\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:119:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:117:9\n    |\n LL |         /// Baz\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:121:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:119:9\n    |\n LL |         #[must_use]\n    |         ^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:123:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:121:9\n    |\n LL |         /// Qux\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:125:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:123:9\n    |\n LL |         #[no_mangle] b: i32,\n    |         ^^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:132:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:130:9\n    |\n LL |         /// Foo\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:136:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:134:9\n    |\n LL |         /// Bar\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:138:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:136:9\n    |\n LL |         #[must_use]\n    |         ^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:140:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:138:9\n    |\n LL |         /// Baz\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:142:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:140:9\n    |\n LL |         #[no_mangle] b: i32\n    |         ^^^^^^^^^^^^"}, {"sha": "d44ff14e992474e64ac0e1f077e93b3d7f00a166", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -1,7 +1,7 @@\n // compile-flags: --cfg something\n // edition:2018\n \n-#![feature(async_closure, param_attrs)]\n+#![feature(async_closure)]\n #![deny(unused_variables)]\n \n extern \"C\" {"}, {"sha": "a7f4855915b24f76b70844026cb4580a75c2e13b", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-feature-gate.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5349e69ae207c4d11245e75463c091eded3ad13c/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5349e69ae207c4d11245e75463c091eded3ad13c/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-feature-gate.rs?ref=5349e69ae207c4d11245e75463c091eded3ad13c", "patch": "@@ -1,16 +0,0 @@\n-// gate-test-param_attrs\n-\n-#![deny(unused_variables)]\n-\n-fn foo(\n-    /// Foo\n-    //~^ ERROR documentation comments cannot be applied to function parameters\n-    //~| NOTE doc comments are not allowed here\n-    //~| ERROR attributes on function parameters are unstable\n-    //~| NOTE https://github.com/rust-lang/rust/issues/60406\n-    #[allow(unused_variables)] a: u8\n-    //~^ ERROR attributes on function parameters are unstable\n-    //~| NOTE https://github.com/rust-lang/rust/issues/60406\n-) {}\n-\n-fn main() {}"}, {"sha": "0bb9d05dca0acad876418cebefe1ba2f40e2fd98", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-feature-gate.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5349e69ae207c4d11245e75463c091eded3ad13c/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5349e69ae207c4d11245e75463c091eded3ad13c/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-feature-gate.stderr?ref=5349e69ae207c4d11245e75463c091eded3ad13c", "patch": "@@ -1,27 +0,0 @@\n-error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-feature-gate.rs:6:5\n-   |\n-LL |     /// Foo\n-   |     ^^^^^^^ doc comments are not allowed here\n-\n-error[E0658]: attributes on function parameters are unstable\n-  --> $DIR/param-attrs-feature-gate.rs:6:5\n-   |\n-LL |     /// Foo\n-   |     ^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/60406\n-   = help: add `#![feature(param_attrs)]` to the crate attributes to enable\n-\n-error[E0658]: attributes on function parameters are unstable\n-  --> $DIR/param-attrs-feature-gate.rs:11:5\n-   |\n-LL |     #[allow(unused_variables)] a: u8\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/60406\n-   = help: add `#![feature(param_attrs)]` to the crate attributes to enable\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "fb86020d992e96c64376bf44ed5337d1e8edac5f", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-pretty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-pretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-pretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-pretty.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -2,7 +2,6 @@\n \n // check-pass\n \n-#![feature(param_attrs)]\n #![feature(c_variadic)]\n \n extern crate param_attrs;"}, {"sha": "9f4e2710dc42070d17e7388fb33d6dcb46e6630a", "filename": "src/test/ui/rfc-2565-param-attrs/proc-macro-cannot-be-used.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.rs?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -1,6 +1,5 @@\n // aux-build:ident-mac.rs\n \n-#![feature(param_attrs)]\n #![feature(c_variadic)]\n \n extern crate ident_mac;"}, {"sha": "b4946fa74943fbc7cbd0c0060d455400b6ab4f7f", "filename": "src/test/ui/rfc-2565-param-attrs/proc-macro-cannot-be-used.stderr", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.stderr?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -1,149 +1,149 @@\n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:11:21\n+  --> $DIR/proc-macro-cannot-be-used.rs:10:21\n    |\n LL | extern \"C\" { fn ffi(#[id] arg1: i32, #[id] ...); }\n    |                     ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:11:38\n+  --> $DIR/proc-macro-cannot-be-used.rs:10:38\n    |\n LL | extern \"C\" { fn ffi(#[id] arg1: i32, #[id] ...); }\n    |                                      ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:15:38\n+  --> $DIR/proc-macro-cannot-be-used.rs:14:38\n    |\n LL | unsafe extern \"C\" fn cvar(arg1: i32, #[id] mut args: ...) {}\n    |                                      ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:18:28\n+  --> $DIR/proc-macro-cannot-be-used.rs:17:28\n    |\n LL | type Alias = extern \"C\" fn(#[id] u8, #[id] ...);\n    |                            ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:18:38\n+  --> $DIR/proc-macro-cannot-be-used.rs:17:38\n    |\n LL | type Alias = extern \"C\" fn(#[id] u8, #[id] ...);\n    |                                      ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:22:9\n+  --> $DIR/proc-macro-cannot-be-used.rs:21:9\n    |\n LL | fn free(#[id] arg1: u8) {\n    |         ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:24:16\n+  --> $DIR/proc-macro-cannot-be-used.rs:23:16\n    |\n LL |     let lam = |#[id] W(x), #[id] y| ();\n    |                ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:24:28\n+  --> $DIR/proc-macro-cannot-be-used.rs:23:28\n    |\n LL |     let lam = |#[id] W(x), #[id] y| ();\n    |                            ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:30:18\n+  --> $DIR/proc-macro-cannot-be-used.rs:29:18\n    |\n LL |     fn inherent1(#[id] self, #[id] arg1: u8) {}\n    |                  ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:30:30\n+  --> $DIR/proc-macro-cannot-be-used.rs:29:30\n    |\n LL |     fn inherent1(#[id] self, #[id] arg1: u8) {}\n    |                              ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:33:18\n+  --> $DIR/proc-macro-cannot-be-used.rs:32:18\n    |\n LL |     fn inherent2(#[id] &self, #[id] arg1: u8) {}\n    |                  ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:33:31\n+  --> $DIR/proc-macro-cannot-be-used.rs:32:31\n    |\n LL |     fn inherent2(#[id] &self, #[id] arg1: u8) {}\n    |                               ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:36:22\n+  --> $DIR/proc-macro-cannot-be-used.rs:35:22\n    |\n LL |     fn inherent3<'a>(#[id] &'a mut self, #[id] arg1: u8) {}\n    |                      ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:36:42\n+  --> $DIR/proc-macro-cannot-be-used.rs:35:42\n    |\n LL |     fn inherent3<'a>(#[id] &'a mut self, #[id] arg1: u8) {}\n    |                                          ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:39:22\n+  --> $DIR/proc-macro-cannot-be-used.rs:38:22\n    |\n LL |     fn inherent4<'a>(#[id] self: Box<Self>, #[id] arg1: u8) {}\n    |                      ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:39:45\n+  --> $DIR/proc-macro-cannot-be-used.rs:38:45\n    |\n LL |     fn inherent4<'a>(#[id] self: Box<Self>, #[id] arg1: u8) {}\n    |                                             ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:45:15\n+  --> $DIR/proc-macro-cannot-be-used.rs:44:15\n    |\n LL |     fn trait1(#[id] self, #[id] arg1: u8);\n    |               ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:45:27\n+  --> $DIR/proc-macro-cannot-be-used.rs:44:27\n    |\n LL |     fn trait1(#[id] self, #[id] arg1: u8);\n    |                           ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:48:15\n+  --> $DIR/proc-macro-cannot-be-used.rs:47:15\n    |\n LL |     fn trait2(#[id] &self, #[id] arg1: u8);\n    |               ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:48:28\n+  --> $DIR/proc-macro-cannot-be-used.rs:47:28\n    |\n LL |     fn trait2(#[id] &self, #[id] arg1: u8);\n    |                            ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:51:19\n+  --> $DIR/proc-macro-cannot-be-used.rs:50:19\n    |\n LL |     fn trait3<'a>(#[id] &'a mut self, #[id] arg1: u8);\n    |                   ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:51:39\n+  --> $DIR/proc-macro-cannot-be-used.rs:50:39\n    |\n LL |     fn trait3<'a>(#[id] &'a mut self, #[id] arg1: u8);\n    |                                       ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:54:19\n+  --> $DIR/proc-macro-cannot-be-used.rs:53:19\n    |\n LL |     fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n    |                   ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:54:42\n+  --> $DIR/proc-macro-cannot-be-used.rs:53:42\n    |\n LL |     fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n    |                                          ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:54:58\n+  --> $DIR/proc-macro-cannot-be-used.rs:53:58\n    |\n LL |     fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n    |                                                          ^^^^^"}, {"sha": "526055ba04b654dabe8979d3e5a21a970160916a", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-argument-types-two-region-pointers.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.stderr?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -23,3 +23,4 @@ LL | |     });\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0312`."}, {"sha": "3ec90f00448a9af75800748d172939ce482adfa6", "filename": "src/test/ui/wf/wf-static-method.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.stderr?ref=ed8b708c1a6bf6d94f860eeb6a6b0b442c380d7f", "patch": "@@ -105,4 +105,5 @@ LL |     <IndirectEvil>::static_evil(b)\n \n error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0478`.\n+Some errors have detailed explanations: E0312, E0478.\n+For more information about an error, try `rustc --explain E0312`."}]}