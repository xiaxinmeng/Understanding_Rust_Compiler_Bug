{"sha": "5d0c1aa1625a17723209e537590dc7fc7f181df1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMGMxYWExNjI1YTE3NzIzMjA5ZTUzNzU5MGRjN2ZjN2YxODFkZjE=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-06-03T12:13:26Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-06-05T12:00:30Z"}, "message": "Rebase on the latest master.", "tree": {"sha": "1213710b519126e640e543ab5a8d456634e15772", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1213710b519126e640e543ab5a8d456634e15772"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d0c1aa1625a17723209e537590dc7fc7f181df1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d0c1aa1625a17723209e537590dc7fc7f181df1", "html_url": "https://github.com/rust-lang/rust/commit/5d0c1aa1625a17723209e537590dc7fc7f181df1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d0c1aa1625a17723209e537590dc7fc7f181df1/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b147e6eb95b8bbc8cd9a56f9a9a629b8671bdc0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b147e6eb95b8bbc8cd9a56f9a9a629b8671bdc0e", "html_url": "https://github.com/rust-lang/rust/commit/b147e6eb95b8bbc8cd9a56f9a9a629b8671bdc0e"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "2fbe0ba1f127e92131d3db910df435a63abc7e64", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d0c1aa1625a17723209e537590dc7fc7f181df1/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d0c1aa1625a17723209e537590dc7fc7f181df1/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=5d0c1aa1625a17723209e537590dc7fc7f181df1", "patch": "@@ -1127,7 +1127,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n     }\n \n     #[test]\n-    fn test_hover_trait_hash_impl_action() {\n+    fn test_hover_trait_has_impl_action() {\n         let (_, actions) = check_hover_result(\n             \"\n             //- /lib.rs\n@@ -1139,7 +1139,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n     }\n \n     #[test]\n-    fn test_hover_struct_hash_impl_action() {\n+    fn test_hover_struct_has_impl_action() {\n         let (_, actions) = check_hover_result(\n             \"\n             //- /lib.rs\n@@ -1151,7 +1151,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n     }\n \n     #[test]\n-    fn test_hover_union_hash_impl_action() {\n+    fn test_hover_union_has_impl_action() {\n         let (_, actions) = check_hover_result(\n             \"\n             //- /lib.rs"}, {"sha": "d998d9dddff713d99378560c7ba9e77ffca54cb1", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5d0c1aa1625a17723209e537590dc7fc7f181df1/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d0c1aa1625a17723209e537590dc7fc7f181df1/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=5d0c1aa1625a17723209e537590dc7fc7f181df1", "patch": "@@ -553,7 +553,7 @@ pub fn handle_hover(\n             value: crate::markdown::format_docs(&info.info.to_markup()),\n         }),\n         range: Some(range),\n-        actions: Some(prepare_hover_actions(&world, info.info.actions())),\n+        actions: Some(prepare_hover_actions(&snap, info.info.actions())),\n     };\n     Ok(Some(res))\n }\n@@ -1176,18 +1176,18 @@ fn to_command_link(command: Command, tooltip: String) -> lsp_ext::CommandLink {\n }\n \n fn show_impl_command_link(\n-    world: &WorldSnapshot,\n+    snap: &GlobalStateSnapshot,\n     position: &FilePosition,\n ) -> Option<lsp_ext::CommandLinkGroup> {\n-    if world.config.hover.implementations {\n-        if let Some(nav_data) = world.analysis().goto_implementation(*position).unwrap_or(None) {\n-            let uri = to_proto::url(world, position.file_id).ok()?;\n-            let line_index = world.analysis().file_line_index(position.file_id).ok()?;\n+    if snap.config.hover.implementations {\n+        if let Some(nav_data) = snap.analysis().goto_implementation(*position).unwrap_or(None) {\n+            let uri = to_proto::url(snap, position.file_id).ok()?;\n+            let line_index = snap.analysis().file_line_index(position.file_id).ok()?;\n             let position = to_proto::position(&line_index, position.offset);\n             let locations: Vec<_> = nav_data\n                 .info\n                 .iter()\n-                .filter_map(|it| to_proto::location(world, it.file_range()).ok())\n+                .filter_map(|it| to_proto::location(snap, it.file_range()).ok())\n                 .collect();\n             let title = implementation_title(locations.len());\n             let command = show_references_command(title, &uri, position, locations);\n@@ -1202,17 +1202,17 @@ fn show_impl_command_link(\n }\n \n fn prepare_hover_actions(\n-    world: &WorldSnapshot,\n+    snap: &GlobalStateSnapshot,\n     actions: &[HoverAction],\n ) -> Vec<lsp_ext::CommandLinkGroup> {\n-    if world.config.hover.none() || !world.config.client_caps.hover_actions {\n+    if snap.config.hover.none() || !snap.config.client_caps.hover_actions {\n         return Vec::new();\n     }\n \n     actions\n         .iter()\n         .filter_map(|it| match it {\n-            HoverAction::Implementaion(position) => show_impl_command_link(world, position),\n+            HoverAction::Implementaion(position) => show_impl_command_link(snap, position),\n         })\n         .collect()\n }"}]}