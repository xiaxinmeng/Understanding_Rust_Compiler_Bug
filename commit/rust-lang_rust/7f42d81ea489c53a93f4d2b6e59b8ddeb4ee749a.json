{"sha": "7f42d81ea489c53a93f4d2b6e59b8ddeb4ee749a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNDJkODFlYTQ4OWM1M2E5M2Y0ZDJiNmU1OWI4ZGRlYjRlZTc0OWE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-04-05T14:31:29Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-04-06T22:35:09Z"}, "message": "linker: Factor out addition of pre-, post- and late link args", "tree": {"sha": "d9361ad5731cabe4d4a9d1adc7af5c9d2dc310ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9361ad5731cabe4d4a9d1adc7af5c9d2dc310ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f42d81ea489c53a93f4d2b6e59b8ddeb4ee749a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f42d81ea489c53a93f4d2b6e59b8ddeb4ee749a", "html_url": "https://github.com/rust-lang/rust/commit/7f42d81ea489c53a93f4d2b6e59b8ddeb4ee749a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f42d81ea489c53a93f4d2b6e59b8ddeb4ee749a/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "927db7d3224646f7946d38de37cdbc388b925024", "url": "https://api.github.com/repos/rust-lang/rust/commits/927db7d3224646f7946d38de37cdbc388b925024", "html_url": "https://github.com/rust-lang/rust/commit/927db7d3224646f7946d38de37cdbc388b925024"}], "stats": {"total": 117, "additions": 82, "deletions": 35}, "files": [{"sha": "39355baebee7e0fe79106093e5a81247fb92c3b4", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 82, "deletions": 35, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/7f42d81ea489c53a93f4d2b6e59b8ddeb4ee749a/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f42d81ea489c53a93f4d2b6e59b8ddeb4ee749a/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=7f42d81ea489c53a93f4d2b6e59b8ddeb4ee749a", "patch": "@@ -1189,6 +1189,74 @@ fn add_post_link_objects(cmd: &mut dyn Linker, sess: &'a Session, crate_type: co\n     }\n }\n \n+/// Add arbitrary \"pre-link\" args defined by the target spec or from command line.\n+/// FIXME: Determine where exactly these args need to be inserted.\n+fn add_pre_link_args(\n+    cmd: &mut dyn Linker,\n+    sess: &'a Session,\n+    flavor: LinkerFlavor,\n+    crate_type: config::CrateType,\n+) {\n+    if let Some(args) = sess.target.target.options.pre_link_args.get(&flavor) {\n+        cmd.args(args);\n+    }\n+    if let Some(args) = sess.target.target.options.pre_link_args_crt.get(&flavor) {\n+        if sess.crt_static(Some(crate_type)) {\n+            cmd.args(args);\n+        }\n+    }\n+    cmd.args(&sess.opts.debugging_opts.pre_link_args);\n+}\n+\n+/// Add arbitrary \"user defined\" args defined from command line and by `#[link_args]` attributes.\n+/// FIXME: Determine where exactly these args need to be inserted.\n+fn add_user_defined_link_args(\n+    cmd: &mut dyn Linker,\n+    sess: &'a Session,\n+    codegen_results: &CodegenResults,\n+) {\n+    cmd.args(&sess.opts.cg.link_args);\n+    cmd.args(&*codegen_results.crate_info.link_args);\n+}\n+\n+/// Add arbitrary \"late link\" args defined by the target spec.\n+/// FIXME: Determine where exactly these args need to be inserted.\n+fn add_late_link_args(\n+    cmd: &mut dyn Linker,\n+    sess: &'a Session,\n+    flavor: LinkerFlavor,\n+    crate_type: config::CrateType,\n+    codegen_results: &CodegenResults,\n+) {\n+    if let Some(args) = sess.target.target.options.late_link_args.get(&flavor) {\n+        cmd.args(args);\n+    }\n+    let any_dynamic_crate = crate_type == config::CrateType::Dylib\n+        || codegen_results.crate_info.dependency_formats.iter().any(|(ty, list)| {\n+            *ty == crate_type && list.iter().any(|&linkage| linkage == Linkage::Dynamic)\n+        });\n+    if any_dynamic_crate {\n+        if let Some(args) = sess.target.target.options.late_link_args_dynamic.get(&flavor) {\n+            cmd.args(args);\n+        }\n+    } else {\n+        if let Some(args) = sess.target.target.options.late_link_args_static.get(&flavor) {\n+            cmd.args(args);\n+        }\n+    }\n+}\n+\n+/// Add arbitrary \"post-link\" args defined by the target spec.\n+/// FIXME: Determine where exactly these args need to be inserted.\n+fn add_post_link_args(cmd: &mut dyn Linker, sess: &'a Session, flavor: LinkerFlavor) {\n+    if let Some(args) = sess.target.target.options.post_link_args.get(&flavor) {\n+        cmd.args(args);\n+    }\n+}\n+\n+/// Produce the linker command line containing linker path and arguments.\n+/// `NO-OPT-OUT` marks the arguments that cannot be removed from the command line\n+/// by the user without creating a custom target specification.\n fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     path: &Path,\n     flavor: LinkerFlavor,\n@@ -1205,15 +1273,8 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n     assert!(base_cmd.get_args().is_empty() || sess.target.target.target_vendor == \"uwp\");\n     let cmd = &mut *codegen_results.linker_info.to_linker(base_cmd, &sess, flavor, target_cpu);\n \n-    if let Some(args) = sess.target.target.options.pre_link_args.get(&flavor) {\n-        cmd.args(args);\n-    }\n-    if let Some(args) = sess.target.target.options.pre_link_args_crt.get(&flavor) {\n-        if sess.crt_static(Some(crate_type)) {\n-            cmd.args(args);\n-        }\n-    }\n-    cmd.args(&sess.opts.debugging_opts.pre_link_args);\n+    // NO-OPT-OUT\n+    add_pre_link_args(cmd, sess, flavor, crate_type);\n \n     if sess.target.target.options.is_like_fuchsia {\n         let prefix = match sess.opts.debugging_opts.sanitizer {\n@@ -1294,16 +1355,19 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n         cmd.gc_sections(keep_metadata);\n     }\n \n-    let attr_link_args = codegen_results.crate_info.link_args.iter();\n-    let user_link_args = sess.opts.cg.link_args.iter().chain(attr_link_args);\n-\n     if crate_type == config::CrateType::Executable {\n         let mut position_independent_executable = false;\n \n         if t.options.position_independent_executables {\n             if is_pic(sess)\n                 && !sess.crt_static(Some(crate_type))\n-                && !user_link_args.clone().any(|x| x == \"-static\")\n+                && !sess\n+                    .opts\n+                    .cg\n+                    .link_args\n+                    .iter()\n+                    .chain(&*codegen_results.crate_info.link_args)\n+                    .any(|x| x == \"-static\")\n             {\n                 position_independent_executable = true;\n             }\n@@ -1432,35 +1496,18 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n         cmd.args(&rpath::get_rpath_flags(&mut rpath_config));\n     }\n \n-    // Finally add all the linker arguments provided on the command line along\n-    // with any #[link_args] attributes found inside the crate\n-    cmd.args(user_link_args);\n+    add_user_defined_link_args(cmd, sess, codegen_results);\n \n     cmd.finalize();\n \n-    if let Some(args) = sess.target.target.options.late_link_args.get(&flavor) {\n-        cmd.args(args);\n-    }\n-    let any_dynamic_crate = crate_type == config::CrateType::Dylib\n-        || codegen_results.crate_info.dependency_formats.iter().any(|(ty, list)| {\n-            *ty == crate_type && list.iter().any(|&linkage| linkage == Linkage::Dynamic)\n-        });\n-    if any_dynamic_crate {\n-        if let Some(args) = sess.target.target.options.late_link_args_dynamic.get(&flavor) {\n-            cmd.args(args);\n-        }\n-    } else {\n-        if let Some(args) = sess.target.target.options.late_link_args_static.get(&flavor) {\n-            cmd.args(args);\n-        }\n-    }\n+    // NO-OPT-OUT\n+    add_late_link_args(cmd, sess, flavor, crate_type, codegen_results);\n \n     // NO-OPT-OUT\n     add_post_link_objects(cmd, sess, crate_type);\n \n-    if let Some(args) = sess.target.target.options.post_link_args.get(&flavor) {\n-        cmd.args(args);\n-    }\n+    // NO-OPT-OUT\n+    add_post_link_args(cmd, sess, flavor);\n \n     cmd.take_cmd()\n }"}]}