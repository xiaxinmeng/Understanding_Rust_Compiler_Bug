{"sha": "4f2b0f032a2b479b6cf728646283bf6e46b32098", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMmIwZjAzMmEyYjQ3OWI2Y2Y3Mjg2NDYyODNiZjZlNDZiMzIwOTg=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-12-04T00:01:29Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-12-29T12:55:24Z"}, "message": "Store Substs in an arena in the tcx.\n\nThis current inflates memory use more than 3 times.", "tree": {"sha": "3cbdf01efd876f54bacc2f12ad21521c6aa7096e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cbdf01efd876f54bacc2f12ad21521c6aa7096e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f2b0f032a2b479b6cf728646283bf6e46b32098", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f2b0f032a2b479b6cf728646283bf6e46b32098", "html_url": "https://github.com/rust-lang/rust/commit/4f2b0f032a2b479b6cf728646283bf6e46b32098", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f2b0f032a2b479b6cf728646283bf6e46b32098/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cd6bf67a2ccfe37912271f576ba2b1e1a568162", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cd6bf67a2ccfe37912271f576ba2b1e1a568162", "html_url": "https://github.com/rust-lang/rust/commit/7cd6bf67a2ccfe37912271f576ba2b1e1a568162"}], "stats": {"total": 290, "additions": 151, "deletions": 139}, "files": [{"sha": "3eeace42f25a2aac0328c534bd5821b22c70a9fe", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -262,8 +262,8 @@ fn parse_substs<'a, 'tcx>(st: &mut PState<'a, 'tcx>,\n     let types =\n         parse_vec_per_param_space(st, |st| parse_ty(st, |x,y| conv(x,y)));\n \n-    return subst::Substs { types: types,\n-                           regions: regions };\n+    subst::Substs { types: types,\n+                    regions: regions }\n }\n \n fn parse_region_substs(st: &mut PState, conv: conv_did) -> subst::RegionSubsts {\n@@ -380,7 +380,7 @@ fn parse_trait_ref<'a, 'tcx>(st: &mut PState<'a, 'tcx>, conv: conv_did)\n                              -> ty::TraitRef<'tcx> {\n     let def = parse_def(st, NominalType, |x,y| conv(x,y));\n     let substs = parse_substs(st, |x,y| conv(x,y));\n-    ty::TraitRef {def_id: def, substs: substs}\n+    ty::TraitRef {def_id: def, substs: st.tcx.mk_substs(substs)}\n }\n \n fn parse_ty<'a, 'tcx>(st: &mut PState<'a, 'tcx>, conv: conv_did) -> Ty<'tcx> {\n@@ -409,7 +409,7 @@ fn parse_ty<'a, 'tcx>(st: &mut PState<'a, 'tcx>, conv: conv_did) -> Ty<'tcx> {\n         let def = parse_def(st, NominalType, |x,y| conv(x,y));\n         let substs = parse_substs(st, |x,y| conv(x,y));\n         assert_eq!(next(st), ']');\n-        return ty::mk_enum(st.tcx, def, substs);\n+        return ty::mk_enum(st.tcx, def, st.tcx.mk_substs(substs));\n       }\n       'x' => {\n         assert_eq!(next(st), '[');\n@@ -490,15 +490,15 @@ fn parse_ty<'a, 'tcx>(st: &mut PState<'a, 'tcx>, conv: conv_did) -> Ty<'tcx> {\n           let did = parse_def(st, NominalType, |x,y| conv(x,y));\n           let substs = parse_substs(st, |x,y| conv(x,y));\n           assert_eq!(next(st), ']');\n-          return ty::mk_struct(st.tcx, did, substs);\n+          return ty::mk_struct(st.tcx, did, st.tcx.mk_substs(substs));\n       }\n       'k' => {\n           assert_eq!(next(st), '[');\n           let did = parse_def(st, UnboxedClosureSource, |x,y| conv(x,y));\n           let region = parse_region(st, |x,y| conv(x,y));\n           let substs = parse_substs(st, |x,y| conv(x,y));\n           assert_eq!(next(st), ']');\n-          return ty::mk_unboxed_closure(st.tcx, did, region, substs);\n+          return ty::mk_unboxed_closure(st.tcx, did, region, st.tcx.mk_substs(substs));\n       }\n       'e' => {\n           return ty::mk_err();"}, {"sha": "cf35c1f3dee76639435de2bd07bb313ab0343dd2", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -301,7 +301,7 @@ fn enc_bound_region(w: &mut SeekableMemWriter, cx: &ctxt, br: ty::BoundRegion) {\n pub fn enc_trait_ref<'a, 'tcx>(w: &mut SeekableMemWriter, cx: &ctxt<'a, 'tcx>,\n                                s: &ty::TraitRef<'tcx>) {\n     mywrite!(w, \"{}|\", (cx.ds)(s.def_id));\n-    enc_substs(w, cx, &s.substs);\n+    enc_substs(w, cx, s.substs);\n }\n \n pub fn enc_trait_store(w: &mut SeekableMemWriter, cx: &ctxt, s: ty::TraitStore) {"}, {"sha": "d32e65943e35bd68a4d3e0438d925290582d8648", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -767,7 +767,7 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n         // Select just those fields of the `with`\n         // expression that will actually be used\n         let with_fields = match with_cmt.ty.sty {\n-            ty::ty_struct(did, ref substs) => {\n+            ty::ty_struct(did, substs) => {\n                 ty::struct_fields(self.tcx(), did, substs)\n             }\n             _ => {\n@@ -1271,4 +1271,3 @@ fn copy_or_move<'tcx>(tcx: &ty::ctxt<'tcx>,\n         Copy\n     }\n }\n-"}, {"sha": "9dc09d9032a12e0d8ac96c0ba7f29463fb197078", "filename": "src/librustc/middle/infer/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcoercion.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -358,7 +358,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                                                              bounds: bounds },\n                                                ty_a)))\n                 }\n-                (&ty::ty_struct(did_a, ref substs_a), &ty::ty_struct(did_b, ref substs_b))\n+                (&ty::ty_struct(did_a, substs_a), &ty::ty_struct(did_b, substs_b))\n                   if did_a == did_b => {\n                     debug!(\"unsizing a struct\");\n                     // Try unsizing each type param in turn to see if we end up with ty_b.\n@@ -383,7 +383,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                                 // Check that the whole types match.\n                                 let mut new_substs = substs_a.clone();\n                                 new_substs.types.get_mut_slice(subst::TypeSpace)[i] = new_tp;\n-                                let ty = ty::mk_struct(tcx, did_a, new_substs);\n+                                let ty = ty::mk_struct(tcx, did_a, tcx.mk_substs(new_substs));\n                                 if self.get_ref().infcx.try(|_| sub.tys(ty, ty_b)).is_err() {\n                                     debug!(\"Unsized type parameter '{}', but still \\\n                                             could not match types {} and {}\","}, {"sha": "e0aa010a6a0c6c16cdfc3e1c4cff17e70244298d", "filename": "src/librustc/middle/infer/combine.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -470,13 +470,13 @@ pub fn super_tys<'tcx, C: Combine<'tcx>>(this: &C,\n         Ok(a)\n       }\n \n-      (&ty::ty_enum(a_id, ref a_substs),\n-       &ty::ty_enum(b_id, ref b_substs))\n+      (&ty::ty_enum(a_id, a_substs),\n+       &ty::ty_enum(b_id, b_substs))\n       if a_id == b_id => {\n           let substs = try!(this.substs(a_id,\n                                           a_substs,\n                                           b_substs));\n-          Ok(ty::mk_enum(tcx, a_id, substs))\n+          Ok(ty::mk_enum(tcx, a_id, tcx.mk_substs(substs)))\n       }\n \n       (&ty::ty_trait(ref a_),\n@@ -487,21 +487,21 @@ pub fn super_tys<'tcx, C: Combine<'tcx>>(this: &C,\n           Ok(ty::mk_trait(tcx, principal, bounds))\n       }\n \n-      (&ty::ty_struct(a_id, ref a_substs), &ty::ty_struct(b_id, ref b_substs))\n+      (&ty::ty_struct(a_id, a_substs), &ty::ty_struct(b_id, b_substs))\n       if a_id == b_id => {\n             let substs = try!(this.substs(a_id, a_substs, b_substs));\n-            Ok(ty::mk_struct(tcx, a_id, substs))\n+            Ok(ty::mk_struct(tcx, a_id, tcx.mk_substs(substs)))\n       }\n \n-      (&ty::ty_unboxed_closure(a_id, a_region, ref a_substs),\n-       &ty::ty_unboxed_closure(b_id, b_region, ref b_substs))\n+      (&ty::ty_unboxed_closure(a_id, a_region, a_substs),\n+       &ty::ty_unboxed_closure(b_id, b_region, b_substs))\n       if a_id == b_id => {\n           // All ty_unboxed_closure types with the same id represent\n           // the (anonymous) type of the same closure expression. So\n           // all of their regions should be equated.\n           let region = try!(this.equate().regions(a_region, b_region));\n           let substs = try!(this.substs_variances(None, a_substs, b_substs));\n-          Ok(ty::mk_unboxed_closure(tcx, a_id, region, substs))\n+          Ok(ty::mk_unboxed_closure(tcx, a_id, region, tcx.mk_substs(substs)))\n       }\n \n       (&ty::ty_uniq(a_inner), &ty::ty_uniq(b_inner)) => {\n@@ -813,5 +813,3 @@ impl<'cx, 'tcx> ty_fold::TypeFolder<'tcx> for Generalizer<'cx, 'tcx> {\n         self.infcx.next_region_var(MiscVariable(self.span))\n     }\n }\n-\n-"}, {"sha": "ba18c02f52dc1e68b45432232edff069024e3796", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -37,7 +37,7 @@ fn type_size_is_affected_by_type_parameters<'tcx>(tcx: &ty::ctxt<'tcx>, typ: Ty<\n                 // No need to continue; we now know the result.\n                 false\n             }\n-            ty::ty_enum(did, ref substs) => {\n+            ty::ty_enum(did, substs) => {\n                 for enum_variant in (*ty::enum_variants(tcx, did)).iter() {\n                     for argument_type in enum_variant.args.iter() {\n                         let argument_type = argument_type.subst(tcx, substs);\n@@ -51,7 +51,7 @@ fn type_size_is_affected_by_type_parameters<'tcx>(tcx: &ty::ctxt<'tcx>, typ: Ty<\n                 // Don't traverse substitutions.\n                 false\n             }\n-            ty::ty_struct(did, ref substs) => {\n+            ty::ty_struct(did, substs) => {\n                 for field in ty::struct_fields(tcx, did, substs).iter() {\n                     result = result ||\n                         type_size_is_affected_by_type_parameters(tcx,"}, {"sha": "4199e19a9d49109398b6585aa76ce835684a50d4", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -1210,7 +1210,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Ok(If(tys.clone()))\n             }\n \n-            ty::ty_unboxed_closure(def_id, _, ref substs) => {\n+            ty::ty_unboxed_closure(def_id, _, substs) => {\n                 // FIXME -- This case is tricky. In the case of by-ref\n                 // closures particularly, we need the results of\n                 // inference to decide how to reflect the type of each\n@@ -1248,7 +1248,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n             }\n \n-            ty::ty_struct(def_id, ref substs) => {\n+            ty::ty_struct(def_id, substs) => {\n                 let types: Vec<Ty> =\n                     ty::struct_fields(self.tcx(), def_id, substs)\n                     .iter()\n@@ -1257,7 +1257,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 nominal(self, bound, def_id, types)\n             }\n \n-            ty::ty_enum(def_id, ref substs) => {\n+            ty::ty_enum(def_id, substs) => {\n                 let types: Vec<Ty> =\n                     ty::substd_enum_variants(self.tcx(), def_id, substs)\n                     .iter()\n@@ -1574,7 +1574,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 self_ty);\n         let trait_ref = Rc::new(ty::Binder(ty::TraitRef {\n             def_id: obligation.trait_ref.def_id(),\n-            substs: substs,\n+            substs: self.tcx().mk_substs(substs),\n         }));\n \n         try!(self.confirm_poly_trait_refs(obligation.cause.clone(),\n@@ -1615,7 +1615,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 obligation.self_ty());\n         let trait_ref = Rc::new(ty::Binder(ty::TraitRef {\n             def_id: obligation.trait_ref.def_id(),\n-            substs: substs,\n+            substs: self.tcx().mk_substs(substs),\n         }));\n \n         debug!(\"confirm_unboxed_closure_candidate(closure_def_id={}, trait_ref={})\","}, {"sha": "e75478b32438fe54e005f85db086e93b4ac11886", "filename": "src/librustc/middle/traits/util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -1,4 +1,3 @@\n-\n // Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -276,7 +275,7 @@ pub fn poly_trait_ref_for_builtin_bound<'tcx>(\n         Ok(def_id) => {\n             Ok(Rc::new(ty::Binder(ty::TraitRef {\n                 def_id: def_id,\n-                substs: Substs::empty().with_self_ty(param_ty)\n+                substs: tcx.mk_substs(Substs::empty().with_self_ty(param_ty))\n             })))\n         }\n         Err(e) => {"}, {"sha": "bd2cc24f0b2a70a559cca2478e9f19e4fdf0d264", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 43, "deletions": 34, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -610,6 +610,7 @@ pub struct TransmuteRestriction<'tcx> {\n pub struct ctxt<'tcx> {\n     /// The arena that types are allocated from.\n     type_arena: &'tcx TypedArena<TyS<'tcx>>,\n+    substs_arena: &'tcx TypedArena<Substs<'tcx>>,\n \n     /// Specifically use a speedy hash algorithm for this hash map, it's used\n     /// quite often.\n@@ -1312,7 +1313,7 @@ pub enum sty<'tcx> {\n     /// from the tcx, use the `NodeId` from the `ast::Ty` and look it up in\n     /// the `ast_ty_to_ty_cache`. This is probably true for `ty_struct` as\n     /// well.`\n-    ty_enum(DefId, Substs<'tcx>),\n+    ty_enum(DefId, &'tcx Substs<'tcx>),\n     ty_uniq(Ty<'tcx>),\n     ty_str,\n     ty_vec(Ty<'tcx>, Option<uint>), // Second field is length.\n@@ -1325,9 +1326,9 @@ pub enum sty<'tcx> {\n \n     ty_closure(Box<ClosureTy<'tcx>>),\n     ty_trait(Box<TyTrait<'tcx>>),\n-    ty_struct(DefId, Substs<'tcx>),\n+    ty_struct(DefId, &'tcx Substs<'tcx>),\n \n-    ty_unboxed_closure(DefId, Region, Substs<'tcx>),\n+    ty_unboxed_closure(DefId, Region, &'tcx Substs<'tcx>),\n \n     ty_tup(Vec<Ty<'tcx>>),\n \n@@ -1384,7 +1385,7 @@ impl<'tcx> TyTrait<'tcx> {\n #[deriving(Clone, PartialEq, Eq, Hash, Show)]\n pub struct TraitRef<'tcx> {\n     pub def_id: DefId,\n-    pub substs: Substs<'tcx>,\n+    pub substs: &'tcx Substs<'tcx>,\n }\n \n pub type PolyTraitRef<'tcx> = Binder<TraitRef<'tcx>>;\n@@ -1820,7 +1821,7 @@ impl<'tcx> GenericBounds<'tcx> {\n }\n \n impl<'tcx> TraitRef<'tcx> {\n-    pub fn new(def_id: ast::DefId, substs: Substs<'tcx>) -> TraitRef<'tcx> {\n+    pub fn new(def_id: ast::DefId, substs: &'tcx Substs<'tcx>) -> TraitRef<'tcx> {\n         TraitRef { def_id: def_id, substs: substs }\n     }\n \n@@ -2049,6 +2050,7 @@ impl UnboxedClosureKind {\n \n pub fn mk_ctxt<'tcx>(s: Session,\n                      type_arena: &'tcx TypedArena<TyS<'tcx>>,\n+                     substs_arena: &'tcx TypedArena<Substs<'tcx>>,\n                      dm: DefMap,\n                      named_region_map: resolve_lifetime::NamedRegionMap,\n                      map: ast_map::Map<'tcx>,\n@@ -2059,6 +2061,7 @@ pub fn mk_ctxt<'tcx>(s: Session,\n                      stability: stability::Index) -> ctxt<'tcx> {\n     ctxt {\n         type_arena: type_arena,\n+        substs_arena: substs_arena,\n         interner: RefCell::new(FnvHashMap::new()),\n         named_region_map: named_region_map,\n         item_variance_map: RefCell::new(DefIdMap::new()),\n@@ -2119,6 +2122,12 @@ pub fn mk_ctxt<'tcx>(s: Session,\n \n // Type constructors\n \n+impl<'tcx> ctxt<'tcx> {\n+    pub fn mk_substs(&self, subst: Substs<'tcx>) -> &'tcx Substs<'tcx> {\n+        self.substs_arena.alloc(subst)\n+    }\n+}\n+\n // Interns a type/name combination, stores the resulting box in cx.interner,\n // and returns the box as cast to an unsafe ptr (see comments for Ty above).\n pub fn mk_t<'tcx>(cx: &ctxt<'tcx>, st: sty<'tcx>) -> Ty<'tcx> {\n@@ -2222,7 +2231,7 @@ impl FlagComputation {\n                 }\n             }\n \n-            &ty_unboxed_closure(_, ref region, ref substs) => {\n+            &ty_unboxed_closure(_, ref region, substs) => {\n                 self.add_region(*region);\n                 self.add_substs(substs);\n             }\n@@ -2231,7 +2240,7 @@ impl FlagComputation {\n                 self.add_flags(HAS_TY_INFER)\n             }\n \n-            &ty_enum(_, ref substs) | &ty_struct(_, ref substs) => {\n+            &ty_enum(_, substs) | &ty_struct(_, substs) => {\n                 self.add_substs(substs);\n             }\n \n@@ -2365,7 +2374,7 @@ pub fn mk_str_slice<'tcx>(cx: &ctxt<'tcx>, r: Region, m: ast::Mutability) -> Ty<\n             })\n }\n \n-pub fn mk_enum<'tcx>(cx: &ctxt<'tcx>, did: ast::DefId, substs: Substs<'tcx>) -> Ty<'tcx> {\n+pub fn mk_enum<'tcx>(cx: &ctxt<'tcx>, did: ast::DefId, substs: &'tcx Substs<'tcx>) -> Ty<'tcx> {\n     // take a copy of substs so that we own the vectors inside\n     mk_t(cx, ty_enum(did, substs))\n }\n@@ -2459,13 +2468,13 @@ pub fn mk_trait<'tcx>(cx: &ctxt<'tcx>,\n }\n \n pub fn mk_struct<'tcx>(cx: &ctxt<'tcx>, struct_id: ast::DefId,\n-                       substs: Substs<'tcx>) -> Ty<'tcx> {\n+                       substs: &'tcx Substs<'tcx>) -> Ty<'tcx> {\n     // take a copy of substs so that we own the vectors inside\n     mk_t(cx, ty_struct(struct_id, substs))\n }\n \n pub fn mk_unboxed_closure<'tcx>(cx: &ctxt<'tcx>, closure_id: ast::DefId,\n-                                region: Region, substs: Substs<'tcx>)\n+                                region: Region, substs: &'tcx Substs<'tcx>)\n                                 -> Ty<'tcx> {\n     mk_t(cx, ty_unboxed_closure(closure_id, region, substs))\n }\n@@ -2688,7 +2697,7 @@ pub fn sequence_element_type<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n \n pub fn simd_type<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n     match ty.sty {\n-        ty_struct(did, ref substs) => {\n+        ty_struct(did, substs) => {\n             let fields = lookup_struct_fields(cx, did);\n             lookup_field_type(cx, did, fields[0].id, substs)\n         }\n@@ -2787,7 +2796,7 @@ pub fn type_needs_unwind_cleanup<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n                 ty_bool | ty_int(_) | ty_uint(_) |\n                 ty_float(_) | ty_tup(_) | ty_ptr(_) => false,\n \n-                ty_enum(did, ref substs) =>\n+                ty_enum(did, substs) =>\n                     enum_variants(cx, did).iter().any(|v|\n                         v.args.iter().any(|aty| {\n                             let t = aty.subst(cx, substs);\n@@ -3055,7 +3064,7 @@ pub fn type_contents<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> TypeContents {\n             }\n             ty_str => TC::Nonsized,\n \n-            ty_struct(did, ref substs) => {\n+            ty_struct(did, substs) => {\n                 let flds = struct_fields(cx, did, substs);\n                 let mut res =\n                     TypeContents::union(flds[],\n@@ -3071,7 +3080,7 @@ pub fn type_contents<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> TypeContents {\n                 apply_lang_items(cx, did, res)\n             }\n \n-            ty_unboxed_closure(did, r, ref substs) => {\n+            ty_unboxed_closure(did, r, substs) => {\n                 // FIXME(#14449): `borrowed_contents` below assumes `&mut`\n                 // unboxed closure.\n                 let upvars = unboxed_closure_upvars(cx, did, substs);\n@@ -3085,7 +3094,7 @@ pub fn type_contents<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> TypeContents {\n                                     |ty| tc_ty(cx, *ty, cache))\n             }\n \n-            ty_enum(did, ref substs) => {\n+            ty_enum(did, substs) => {\n                 let variants = substd_enum_variants(cx, did, substs);\n                 let mut res =\n                     TypeContents::union(variants[], |variant| {\n@@ -3377,15 +3386,15 @@ pub fn is_instantiable<'tcx>(cx: &ctxt<'tcx>, r_ty: Ty<'tcx>) -> bool {\n                 false\n             }\n \n-            ty_struct(did, ref substs) => {\n+            ty_struct(did, substs) => {\n                 seen.push(did);\n                 let fields = struct_fields(cx, did, substs);\n                 let r = fields.iter().any(|f| type_requires(cx, seen, r_ty, f.mt.ty));\n                 seen.pop().unwrap();\n                 r\n             }\n \n-            ty_unboxed_closure(did, _, ref substs) => {\n+            ty_unboxed_closure(did, _, substs) => {\n                 let upvars = unboxed_closure_upvars(cx, did, substs);\n                 upvars.iter().any(|f| type_requires(cx, seen, r_ty, f.ty))\n             }\n@@ -3398,7 +3407,7 @@ pub fn is_instantiable<'tcx>(cx: &ctxt<'tcx>, r_ty: Ty<'tcx>) -> bool {\n                 false\n             }\n \n-            ty_enum(did, ref substs) => {\n+            ty_enum(did, substs) => {\n                 seen.push(did);\n                 let vs = enum_variants(cx, did);\n                 let r = !vs.is_empty() && vs.iter().all(|variant| {\n@@ -3465,19 +3474,19 @@ pub fn is_type_representable<'tcx>(cx: &ctxt<'tcx>, sp: Span, ty: Ty<'tcx>)\n             ty_vec(ty, Some(_)) => {\n                 is_type_structurally_recursive(cx, sp, seen, ty)\n             }\n-            ty_struct(did, ref substs) => {\n+            ty_struct(did, substs) => {\n                 let fields = struct_fields(cx, did, substs);\n                 find_nonrepresentable(cx, sp, seen, fields.iter().map(|f| f.mt.ty))\n             }\n-            ty_enum(did, ref substs) => {\n+            ty_enum(did, substs) => {\n                 let vs = enum_variants(cx, did);\n                 let iter = vs.iter()\n                     .flat_map(|variant| { variant.args.iter() })\n                     .map(|aty| { aty.subst_spanned(cx, substs, Some(sp)) });\n \n                 find_nonrepresentable(cx, sp, seen, iter)\n             }\n-            ty_unboxed_closure(did, _, ref substs) => {\n+            ty_unboxed_closure(did, _, substs) => {\n                 let upvars = unboxed_closure_upvars(cx, did, substs);\n                 find_nonrepresentable(cx, sp, seen, upvars.iter().map(|f| f.ty))\n             }\n@@ -3697,7 +3706,7 @@ pub fn lltype_is_sized<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n pub fn unsized_part_of_type<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n     match ty.sty {\n         ty_str | ty_trait(..) | ty_vec(..) => ty,\n-        ty_struct(def_id, ref substs) => {\n+        ty_struct(def_id, substs) => {\n             let unsized_fields: Vec<_> = struct_fields(cx, def_id, substs).iter()\n                 .map(|f| f.mt.ty).filter(|ty| !type_is_sized(cx, *ty)).collect();\n             // Exactly one of the fields must be unsized.\n@@ -3801,16 +3810,16 @@ pub fn positional_element_ty<'tcx>(cx: &ctxt<'tcx>,\n         (&ty_tup(ref v), None) => v.get(i).map(|&t| t),\n \n \n-        (&ty_struct(def_id, ref substs), None) => lookup_struct_fields(cx, def_id)\n+        (&ty_struct(def_id, substs), None) => lookup_struct_fields(cx, def_id)\n             .get(i)\n             .map(|&t|lookup_item_type(cx, t.id).ty.subst(cx, substs)),\n \n-        (&ty_enum(def_id, ref substs), Some(variant_def_id)) => {\n+        (&ty_enum(def_id, substs), Some(variant_def_id)) => {\n             let variant_info = enum_variant_with_id(cx, def_id, variant_def_id);\n             variant_info.args.get(i).map(|t|t.subst(cx, substs))\n         }\n \n-        (&ty_enum(def_id, ref substs), None) => {\n+        (&ty_enum(def_id, substs), None) => {\n             assert!(enum_is_univariant(cx, def_id));\n             let enum_variants = enum_variants(cx, def_id);\n             let variant_info = &(*enum_variants)[0];\n@@ -3829,12 +3838,12 @@ pub fn named_element_ty<'tcx>(cx: &ctxt<'tcx>,\n                               variant: Option<ast::DefId>) -> Option<Ty<'tcx>> {\n \n     match (&ty.sty, variant) {\n-        (&ty_struct(def_id, ref substs), None) => {\n+        (&ty_struct(def_id, substs), None) => {\n             let r = lookup_struct_fields(cx, def_id);\n             r.iter().find(|f| f.name == n)\n                 .map(|&f| lookup_field_type(cx, def_id, f.id, substs))\n         }\n-        (&ty_enum(def_id, ref substs), Some(variant_def_id)) => {\n+        (&ty_enum(def_id, substs), Some(variant_def_id)) => {\n             let variant_info = enum_variant_with_id(cx, def_id, variant_def_id);\n             variant_info.arg_names.as_ref()\n                 .expect(\"must have struct enum variant if accessing a named fields\")\n@@ -4197,12 +4206,12 @@ pub fn unsize_ty<'tcx>(cx: &ctxt<'tcx>,\n                                           ty_to_string(cx, ty))[])\n         },\n         &UnsizeStruct(box ref k, tp_index) => match ty.sty {\n-            ty_struct(did, ref substs) => {\n+            ty_struct(did, substs) => {\n                 let ty_substs = substs.types.get_slice(subst::TypeSpace);\n                 let new_ty = unsize_ty(cx, ty_substs[tp_index], k, span);\n                 let mut unsized_substs = substs.clone();\n                 unsized_substs.types.get_mut_slice(subst::TypeSpace)[tp_index] = new_ty;\n-                mk_struct(cx, did, unsized_substs)\n+                mk_struct(cx, did, cx.mk_substs(unsized_substs))\n             }\n             _ => cx.sess.span_bug(span,\n                                   format!(\"UnsizeStruct with bad sty: {}\",\n@@ -5227,9 +5236,10 @@ pub fn predicates_for_trait_ref<'tcx>(tcx: &ctxt<'tcx>,\n         trait_def.bounds.trait_bounds\n         .iter()\n         .map(|bound_trait_ref| {\n+            let substs = tcx.mk_substs(bound_trait_ref.substs().subst(tcx, trait_ref.substs()));\n             ty::Binder(\n                 ty::TraitRef::new(bound_trait_ref.def_id(),\n-                                  bound_trait_ref.substs().subst(tcx, trait_ref.substs())))\n+                                  substs))\n         })\n         .map(|bound_trait_ref| Rc::new(bound_trait_ref))\n         .collect();\n@@ -6305,8 +6315,8 @@ pub fn accumulate_lifetimes_in_type(accumulator: &mut Vec<ty::Region>,\n             ty_trait(ref t) => {\n                 accumulator.push_all(t.principal.substs().regions().as_slice());\n             }\n-            ty_enum(_, ref substs) |\n-            ty_struct(_, ref substs) => {\n+            ty_enum(_, substs) |\n+            ty_struct(_, substs) => {\n                 accum_substs(accumulator, substs);\n             }\n             ty_closure(ref closure_ty) => {\n@@ -6315,7 +6325,7 @@ pub fn accumulate_lifetimes_in_type(accumulator: &mut Vec<ty::Region>,\n                     UniqTraitStore => {}\n                 }\n             }\n-            ty_unboxed_closure(_, ref region, ref substs) => {\n+            ty_unboxed_closure(_, ref region, substs) => {\n                 accumulator.push(*region);\n                 accum_substs(accumulator, substs);\n             }\n@@ -6702,4 +6712,3 @@ impl<T:RegionEscape,U:RegionEscape> RegionEscape for OutlivesPredicate<T,U> {\n         self.0.has_regions_escaping_depth(depth) || self.1.has_regions_escaping_depth(depth)\n     }\n }\n-"}, {"sha": "503be1e61a4a0856c295e9b96df52906f1b59b92", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -626,7 +626,7 @@ pub fn super_fold_trait_ref<'tcx, T: TypeFolder<'tcx>>(this: &mut T,\n {\n     ty::TraitRef {\n         def_id: t.def_id,\n-        substs: t.substs.fold_with(this),\n+        substs: this.tcx().mk_substs(substs),\n     }\n }\n \n@@ -833,4 +833,3 @@ pub fn shift_regions<'tcx, T:TypeFoldable<'tcx>+Repr<'tcx>>(tcx: &ty::ctxt<'tcx>\n         shift_region(region, amount)\n     }))\n }\n-"}, {"sha": "a7787dd335cf5a9803feb081fb267ecec9719342", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -432,7 +432,7 @@ pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n                 param_ty.user_string(cx)\n             }\n         }\n-        ty_enum(did, ref substs) | ty_struct(did, ref substs) => {\n+        ty_enum(did, substs) | ty_struct(did, substs) => {\n             let base = ty::item_path_str(cx, did);\n             let generics = ty::lookup_item_type(cx, did).generics;\n             parameterized(cx, base.as_slice(), substs, &generics, did)\n@@ -449,7 +449,7 @@ pub fn ty_to_string<'tcx>(cx: &ctxt<'tcx>, typ: &ty::TyS<'tcx>) -> String {\n                     bound_str)\n         }\n         ty_str => \"str\".to_string(),\n-        ty_unboxed_closure(ref did, _, ref substs) => {\n+        ty_unboxed_closure(ref did, _, substs) => {\n             let unboxed_closures = cx.unboxed_closures.borrow();\n             unboxed_closures.get(did).map(|cl| {\n                 closure_to_string(cx, &cl.closure_type.subst(cx, substs))\n@@ -1209,8 +1209,10 @@ impl<'tcx> UserString<'tcx> for ty::TraitRef<'tcx> {\n     fn user_string(&self, tcx: &ctxt<'tcx>) -> String {\n         let path_str = ty::item_path_str(tcx, self.def_id);\n         let trait_def = ty::lookup_trait_def(tcx, self.def_id);\n-        parameterized(tcx, path_str.as_slice(), &self.substs,\n+        parameterized(tcx, path_str.as_slice(), self.substs,\n                       &trait_def.generics, self.def_id)\n+        let did = trait_def.trait_ref.def_id;\n+        parameterized(tcx, base.as_slice(), trait_ref.substs, &trait_def.generics, did)\n     }\n }\n "}, {"sha": "7609554033cef5021c56421362d0eb388d039591", "filename": "src/librustc_borrowck/borrowck/fragments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -391,7 +391,7 @@ fn add_fragment_siblings_for_extension<'tcx>(this: &MoveData<'tcx>,\n             }\n         }\n \n-        (&ty::ty_enum(enum_def_id, ref substs), ref enum_variant_info) => {\n+        (&ty::ty_enum(enum_def_id, substs), ref enum_variant_info) => {\n             let variant_info = {\n                 let mut variants = ty::substd_enum_variants(tcx, enum_def_id, substs);\n                 match *enum_variant_info {"}, {"sha": "4208b2908fa5a062e9815b237e9bd9734fd1b5ab", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -12,7 +12,7 @@ use rustc::session::Session;\n use rustc::session::config::{mod, Input, OutputFilenames};\n use rustc::lint;\n use rustc::metadata::creader;\n-use rustc::middle::{stability, ty, reachable};\n+use rustc::middle::{stability, ty, reachable, subst};\n use rustc::middle::dependency_format;\n use rustc::middle;\n use rustc::plugin::load::Plugins;\n@@ -80,7 +80,8 @@ pub fn compile_input(sess: Session,\n         if stop_after_phase_2(&sess) { return; }\n \n         let type_arena = TypedArena::new();\n-        let analysis = phase_3_run_analysis_passes(sess, ast_map, &type_arena, id);\n+        let substs_arena = TypedArena::new();\n+        let analysis = phase_3_run_analysis_passes(sess, ast_map, &type_arena, &substs_arena, id);\n         phase_save_analysis(&analysis.ty_cx.sess, analysis.ty_cx.map.krate(), &analysis, outdir);\n \n         if log_enabled!(::log::INFO) {\n@@ -343,6 +344,7 @@ pub fn assign_node_ids_and_map<'ast>(sess: &Session,\n pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n                                          ast_map: ast_map::Map<'tcx>,\n                                          type_arena: &'tcx TypedArena<ty::TyS<'tcx>>,\n+                                         substs_arena: &'tcx TypedArena<subst::Substs<'tcx>>,\n                                          name: String) -> ty::CrateAnalysis<'tcx> {\n     let time_passes = sess.time_passes();\n     let krate = ast_map.krate();\n@@ -403,6 +405,7 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n \n     let ty_cx = ty::mk_ctxt(sess,\n                             type_arena,\n+                            substs_arena,\n                             def_map,\n                             named_region_map,\n                             ast_map,"}, {"sha": "d9d52d59b0cfee8c1cbf098c504844b12bbfdcf6", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -19,7 +19,7 @@ use rustc_trans::back::link;\n \n use driver;\n \n-use rustc::middle::ty;\n+use rustc::middle::{ty, subst};\n use rustc::middle::cfg;\n use rustc::middle::cfg::graphviz::LabelledCFG;\n use rustc::session::Session;\n@@ -113,6 +113,7 @@ impl PpSourceMode {\n                                            sess: Session,\n                                            ast_map: Option<ast_map::Map<'tcx>>,\n                                            type_arena: &'tcx TypedArena<ty::TyS<'tcx>>,\n+                                           substs_arena: &'tcx TypedArena<subst::Substs<'tcx>>,\n                                            id: String,\n                                            payload: B,\n                                            f: F) -> A where\n@@ -135,7 +136,7 @@ impl PpSourceMode {\n             PpmTyped => {\n                 let ast_map = ast_map.expect(\"--pretty=typed missing ast_map\");\n                 let analysis = driver::phase_3_run_analysis_passes(sess, ast_map,\n-                                                                   type_arena, id);\n+                                                                   type_arena, substs_arena, id);\n                 let annotation = TypedAnnotation { analysis: analysis };\n                 f(&annotation, payload)\n             }\n@@ -511,6 +512,7 @@ pub fn pretty_print_input(sess: Session,\n \n     let mut forest = ast_map::Forest::new(krate);\n     let type_arena = TypedArena::new();\n+    let substs_arena = TypedArena::new();\n \n     let (krate, ast_map) = if compute_ast_map {\n         let map = driver::assign_node_ids_and_map(&sess, &mut forest);\n@@ -539,7 +541,7 @@ pub fn pretty_print_input(sess: Session,\n     match (ppm, opt_uii) {\n         (PpmSource(s), None) =>\n             s.call_with_pp_support(\n-                sess, ast_map, &type_arena, id, out, |annotation, out| {\n+                sess, ast_map, &type_arena, &substs_arena, id, out, |annotation, out| {\n                     debug!(\"pretty printing source code {}\", s);\n                     let sess = annotation.sess();\n                     pprust::print_crate(sess.codemap(),\n@@ -554,7 +556,7 @@ pub fn pretty_print_input(sess: Session,\n \n         (PpmSource(s), Some(uii)) =>\n             s.call_with_pp_support(\n-                sess, ast_map, &type_arena, id, (out,uii), |annotation, (out,uii)| {\n+                sess, ast_map, &type_arena, &substs_arena, id, (out,uii), |annotation, (out,uii)| {\n                     debug!(\"pretty printing source code {}\", s);\n                     let sess = annotation.sess();\n                     let ast_map = annotation.ast_map()\n@@ -597,7 +599,8 @@ pub fn pretty_print_input(sess: Session,\n                 Some(code) => {\n                     let variants = gather_flowgraph_variants(&sess);\n                     let analysis = driver::phase_3_run_analysis_passes(sess, ast_map,\n-                                                                       &type_arena, id);\n+                                                                       &type_arena, &substs_arena,\n+                                                                       id);\n                     print_flowgraph(variants, analysis, code, out)\n                 }\n                 None => {"}, {"sha": "43fec4c5077be2a0e22ddd77d67d6ded23e8885c", "filename": "src/librustc_trans/trans/adt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_trans%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fadt.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -156,7 +156,7 @@ fn represent_type_uncached<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         ty::ty_tup(ref elems) => {\n             Univariant(mk_struct(cx, elems[], false, t), false)\n         }\n-        ty::ty_struct(def_id, ref substs) => {\n+        ty::ty_struct(def_id, substs) => {\n             let fields = ty::lookup_struct_fields(cx.tcx(), def_id);\n             let mut ftys = fields.iter().map(|field| {\n                 ty::lookup_field_type(cx.tcx(), def_id, field.id, substs)\n@@ -167,12 +167,12 @@ fn represent_type_uncached<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n             Univariant(mk_struct(cx, ftys[], packed, t), dtor)\n         }\n-        ty::ty_unboxed_closure(def_id, _, ref substs) => {\n+        ty::ty_unboxed_closure(def_id, _, substs) => {\n             let upvars = ty::unboxed_closure_upvars(cx.tcx(), def_id, substs);\n             let upvar_types = upvars.iter().map(|u| u.ty).collect::<Vec<_>>();\n             Univariant(mk_struct(cx, upvar_types[], false, t), false)\n         }\n-        ty::ty_enum(def_id, ref substs) => {\n+        ty::ty_enum(def_id, substs) => {\n             let cases = get_cases(cx.tcx(), def_id, substs);\n             let hint = *ty::lookup_repr_hints(cx.tcx(), def_id)[].get(0)\n                 .unwrap_or(&attr::ReprAny);"}, {"sha": "ab9c1c3ea0c16dc101e7a30bd09f268f389fe2b3", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -288,7 +288,7 @@ pub fn decl_rust_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         ty::ty_closure(ref f) => {\n             (f.sig.0.inputs.clone(), f.sig.0.output, f.abi, Some(Type::i8p(ccx)))\n         }\n-        ty::ty_unboxed_closure(closure_did, _, ref substs) => {\n+        ty::ty_unboxed_closure(closure_did, _, substs) => {\n             let unboxed_closures = ccx.tcx().unboxed_closures.borrow();\n             let unboxed_closure = &(*unboxed_closures)[closure_did];\n             let function_type = unboxed_closure.closure_type.clone();\n@@ -529,9 +529,9 @@ pub fn get_res_dtor<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         assert_eq!(did.krate, ast::LOCAL_CRATE);\n \n         // Since we're in trans we don't care for any region parameters\n-        let ref substs = subst::Substs::erased(substs.types.clone());\n+        let substs = subst::Substs::erased(substs.types.clone());\n \n-        let (val, _) = monomorphize::monomorphic_fn(ccx, did, substs, None);\n+        let (val, _) = monomorphize::monomorphic_fn(ccx, did, &substs, None);\n \n         val\n     } else if did.krate == ast::LOCAL_CRATE {\n@@ -749,7 +749,7 @@ pub fn iter_structural_ty<'a, 'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n               }\n           })\n       }\n-      ty::ty_unboxed_closure(def_id, _, ref substs) => {\n+      ty::ty_unboxed_closure(def_id, _, substs) => {\n           let repr = adt::represent_type(cx.ccx(), t);\n           let upvars = ty::unboxed_closure_upvars(cx.tcx(), def_id, substs);\n           for (i, upvar) in upvars.iter().enumerate() {\n@@ -769,7 +769,7 @@ pub fn iter_structural_ty<'a, 'blk, 'tcx>(cx: Block<'blk, 'tcx>,\n               cx = f(cx, llfld_a, *arg);\n           }\n       }\n-      ty::ty_enum(tid, ref substs) => {\n+      ty::ty_enum(tid, substs) => {\n           let fcx = cx.fcx;\n           let ccx = fcx.ccx;\n \n@@ -2466,7 +2466,7 @@ pub fn get_fn_llvm_attributes<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, fn_ty: Ty<\n     let (fn_sig, abi, has_env) = match fn_ty.sty {\n         ty::ty_closure(ref f) => (f.sig.clone(), f.abi, true),\n         ty::ty_bare_fn(_, ref f) => (f.sig.clone(), f.abi, false),\n-        ty::ty_unboxed_closure(closure_did, _, ref substs) => {\n+        ty::ty_unboxed_closure(closure_did, _, substs) => {\n             let unboxed_closures = ccx.tcx().unboxed_closures.borrow();\n             let ref function_type = (*unboxed_closures)[closure_did]\n                                                     .closure_type;"}, {"sha": "1f61fed3998d1bfe28e299020d1b8fdab71e8bae", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -59,7 +59,7 @@ pub use trans::context::CrateContext;\n fn type_is_newtype_immediate<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                        ty: Ty<'tcx>) -> bool {\n     match ty.sty {\n-        ty::ty_struct(def_id, ref substs) => {\n+        ty::ty_struct(def_id, substs) => {\n             let fields = ty::struct_fields(ccx.tcx(), def_id, substs);\n             fields.len() == 1 &&\n                 fields[0].name =="}, {"sha": "d8c465d17aff4a3cf5dd2493cf2354e710c7a7b1", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -360,11 +360,11 @@ impl<'tcx> TypeMap<'tcx> {\n             ty::ty_float(_) => {\n                 push_debuginfo_type_name(cx, type_, false, &mut unique_type_id);\n             },\n-            ty::ty_enum(def_id, ref substs) => {\n+            ty::ty_enum(def_id, substs) => {\n                 unique_type_id.push_str(\"enum \");\n                 from_def_id_and_substs(self, cx, def_id, substs, &mut unique_type_id);\n             },\n-            ty::ty_struct(def_id, ref substs) => {\n+            ty::ty_struct(def_id, substs) => {\n                 unique_type_id.push_str(\"struct \");\n                 from_def_id_and_substs(self, cx, def_id, substs, &mut unique_type_id);\n             },\n@@ -469,7 +469,7 @@ impl<'tcx> TypeMap<'tcx> {\n                                                         closure_ty.clone(),\n                                                         &mut unique_type_id);\n             },\n-            ty::ty_unboxed_closure(ref def_id, _, ref substs) => {\n+            ty::ty_unboxed_closure(ref def_id, _, substs) => {\n                 let closure_ty = cx.tcx().unboxed_closures.borrow()\n                                    .get(def_id).unwrap().closure_type.subst(cx.tcx(), substs);\n                 self.get_unique_type_id_of_closure_type(cx,\n@@ -3003,12 +3003,12 @@ fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         ty::ty_closure(ref closurety) => {\n             subroutine_type_metadata(cx, unique_type_id, &closurety.sig, usage_site_span)\n         }\n-        ty::ty_unboxed_closure(ref def_id, _, ref substs) => {\n+        ty::ty_unboxed_closure(ref def_id, _, substs) => {\n             let sig = cx.tcx().unboxed_closures.borrow()\n                         .get(def_id).unwrap().closure_type.sig.subst(cx.tcx(), substs);\n             subroutine_type_metadata(cx, unique_type_id, &sig, usage_site_span)\n         }\n-        ty::ty_struct(def_id, ref substs) => {\n+        ty::ty_struct(def_id, substs) => {\n             prepare_struct_metadata(cx,\n                                     t,\n                                     def_id,\n@@ -3763,8 +3763,8 @@ fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         ty::ty_uint(ast::TyU64)  => output.push_str(\"u64\"),\n         ty::ty_float(ast::TyF32) => output.push_str(\"f32\"),\n         ty::ty_float(ast::TyF64) => output.push_str(\"f64\"),\n-        ty::ty_struct(def_id, ref substs) |\n-        ty::ty_enum(def_id, ref substs) => {\n+        ty::ty_struct(def_id, substs) |\n+        ty::ty_enum(def_id, substs) => {\n             push_item_name(cx, def_id, qualified, output);\n             push_type_params(cx, substs, output);\n         },"}, {"sha": "678e89340c7da0389b7bc193ba2d46865fcf4c3e", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -322,7 +322,7 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 let substs = principal.substs().with_self_ty(unadjusted_ty).erase_regions();\n                 let trait_ref =\n                     Rc::new(ty::Binder(ty::TraitRef { def_id: principal.def_id(),\n-                                                      substs: substs }));\n+                                                      substs: bcx.tcx().mk_substs(substs) }));\n                 let trait_ref = trait_ref.subst(bcx.tcx(), bcx.fcx.param_substs);\n                 let box_ty = mk_ty(unadjusted_ty);\n                 PointerCast(bcx,\n@@ -1339,15 +1339,15 @@ pub fn with_field_tys<'tcx, R, F>(tcx: &ty::ctxt<'tcx>,\n     F: FnOnce(ty::Disr, &[ty::field<'tcx>]) -> R,\n {\n     match ty.sty {\n-        ty::ty_struct(did, ref substs) => {\n+        ty::ty_struct(did, substs) => {\n             op(0, struct_fields(tcx, did, substs)[])\n         }\n \n         ty::ty_tup(ref v) => {\n             op(0, tup_fields(v[])[])\n         }\n \n-        ty::ty_enum(_, ref substs) => {\n+        ty::ty_enum(_, substs) => {\n             // We want the *variant* ID here, not the enum ID.\n             match node_id_opt {\n                 None => {"}, {"sha": "e276543264b0a553c6bd00ec2e3c5baea35b2775", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -310,7 +310,7 @@ fn size_and_align_of_dst<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, t: Ty<'tcx>, info:\n         return (size, align);\n     }\n     match t.sty {\n-        ty::ty_struct(id, ref substs) => {\n+        ty::ty_struct(id, substs) => {\n             let ccx = bcx.ccx();\n             // First get the size of all statically known fields.\n             // Don't use type_of::sizing_type_of because that expects t to be sized.\n@@ -407,7 +407,7 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, t: Ty<'tcx>)\n                 }\n             }\n         }\n-        ty::ty_struct(did, ref substs) | ty::ty_enum(did, ref substs) => {\n+        ty::ty_struct(did, substs) | ty::ty_enum(did, substs) => {\n             let tcx = bcx.tcx();\n             match ty::ty_dtor(tcx, did) {\n                 ty::TraitDtor(dtor, true) => {"}, {"sha": "002590c4db3507db1bd34023a7213ec2ab86ff23", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -240,7 +240,7 @@ pub fn trans_static_method_callee(bcx: Block,\n                                              Vec::new()));\n     debug!(\"trait_substs={}\", trait_substs.repr(bcx.tcx()));\n     let trait_ref = Rc::new(ty::Binder(ty::TraitRef { def_id: trait_id,\n-                                                      substs: trait_substs }));\n+                                                      substs: bcx.tcx().mk_substs(trait_substs) }));\n     let vtbl = fulfill_obligation(bcx.ccx(),\n                                   DUMMY_SP,\n                                   trait_ref);"}, {"sha": "b29ac70ca1542340ceb3f67773013d6e65a12ef1", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -633,7 +633,7 @@ fn ast_path_to_trait_ref<'tcx,AC,RS>(\n                                             regions,\n                                             assoc_bindings);\n \n-    ty::TraitRef::new(trait_def_id, substs)\n+    ty::TraitRef::new(trait_def_id, this.tcx().mk_substs(substs))\n }\n \n pub fn ast_path_to_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>("}, {"sha": "e17bc633d28c86058f358061fc65bfb09933f689", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -411,13 +411,13 @@ pub fn check_pat_enum<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>, pat: &ast::Pat,\n \n     let real_path_ty = fcx.node_ty(pat.id);\n     let (arg_tys, kind_name) = match real_path_ty.sty {\n-        ty::ty_enum(enum_def_id, ref expected_substs)\n+        ty::ty_enum(enum_def_id, expected_substs)\n             if def == def::DefVariant(enum_def_id, def.def_id(), false) => {\n             let variant = ty::enum_variant_with_id(tcx, enum_def_id, def.def_id());\n             (variant.args.iter().map(|t| t.subst(tcx, expected_substs)).collect::<Vec<_>>(),\n                 \"variant\")\n         }\n-        ty::ty_struct(struct_def_id, ref expected_substs) => {\n+        ty::ty_struct(struct_def_id, expected_substs) => {\n             let struct_fields = ty::struct_fields(tcx, struct_def_id, expected_substs);\n             (struct_fields.iter().map(|field| field.mt.ty).collect::<Vec<_>>(),\n                 \"struct\")"}, {"sha": "f0e1724438499de8cffbb230ae6b5a1327cc832d", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -127,7 +127,8 @@ fn check_unboxed_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n     let closure_type = ty::mk_unboxed_closure(fcx.ccx.tcx,\n                                               expr_def_id,\n                                               region,\n-                                              fcx.inh.param_env.free_substs.clone());\n+                                              fcx.ccx.tcx.mk_substs(\n+                                                  fcx.inh.param_env.free_substs.clone()));\n \n     fcx.write_ty(expr.id, closure_type);\n "}, {"sha": "461e2c67f1fd5c3dbbaca0deff0161a497a8f69d", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -275,7 +275,7 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n                                                                  self.infcx().next_ty_var());\n \n                 let trait_ref =\n-                    Rc::new(ty::TraitRef::new(trait_def_id, substs.clone()));\n+                    Rc::new(ty::TraitRef::new(trait_def_id, self.tcx().mk_substs(substs.clone())));\n                 let origin = MethodTypeParam(MethodParam { trait_ref: trait_ref,\n                                                            method_num: method_num });\n                 (substs, origin)"}, {"sha": "d2d2e108b33c5df643c1ebd0930ba2a88c2e6e6b", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -164,7 +164,7 @@ pub fn lookup_in_trait_adjusted<'a, 'tcx>(fcx: &'a FnCtxt<'a, 'tcx>,\n \n     // Construct a trait-reference `self_ty : Trait<input_tys>`\n     let substs = subst::Substs::new_trait(input_types, Vec::new(), assoc_types, self_ty);\n-    let trait_ref = Rc::new(ty::TraitRef::new(trait_def_id, substs));\n+    let trait_ref = Rc::new(ty::TraitRef::new(trait_def_id, fcx.tcx().mk_substs(substs)));\n \n     // Construct an obligation\n     let poly_trait_ref = Rc::new(ty::Binder((*trait_ref).clone()));\n@@ -194,7 +194,7 @@ pub fn lookup_in_trait_adjusted<'a, 'tcx>(fcx: &'a FnCtxt<'a, 'tcx>,\n     // Substitute the trait parameters into the method type and\n     // instantiate late-bound regions to get the actual method type.\n     let ref bare_fn_ty = method_ty.fty;\n-    let fn_sig = bare_fn_ty.sig.subst(tcx, &trait_ref.substs);\n+    let fn_sig = bare_fn_ty.sig.subst(tcx, trait_ref.substs);\n     let fn_sig = fcx.infcx().replace_late_bound_regions_with_fresh_var(span,\n                                                                        infer::FnCall,\n                                                                        &fn_sig).0;\n@@ -217,7 +217,7 @@ pub fn lookup_in_trait_adjusted<'a, 'tcx>(fcx: &'a FnCtxt<'a, 'tcx>,\n     //\n     // Note that as the method comes from a trait, it should not have\n     // any late-bound regions appearing in its bounds.\n-    let method_bounds = method_ty.generics.to_bounds(fcx.tcx(), &trait_ref.substs);\n+    let method_bounds = method_ty.generics.to_bounds(fcx.tcx(), trait_ref.substs);\n     assert!(!method_bounds.has_escaping_regions());\n     fcx.add_obligations_for_parameters(\n         traits::ObligationCause::misc(span, fcx.body_id),\n@@ -425,4 +425,3 @@ fn impl_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n         .find(|m| m.name() == method_name)\n         .and_then(|item| item.as_opt_method())\n }\n-"}, {"sha": "94e52f88d0117299cf05b86ce55062a1de4b7453", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -499,7 +499,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n \n             // Determine the receiver type that the method itself expects.\n             let xform_self_ty =\n-                self.xform_self_ty(&method, &impl_trait_ref.substs);\n+                self.xform_self_ty(&method, impl_trait_ref.substs);\n \n             debug!(\"xform_self_ty={}\", xform_self_ty.repr(self.tcx()));\n "}, {"sha": "5992a8d75969abdc315a5642f77f6c6e3273e017", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -3331,7 +3331,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n         let (_, autoderefs, field_ty) =\n             autoderef(fcx, expr.span, expr_t, Some(base.id), lvalue_pref, |base_t, _| {\n                 match base_t.sty {\n-                    ty::ty_struct(base_id, ref substs) => {\n+                    ty::ty_struct(base_id, substs) => {\n                         debug!(\"struct named {}\", ppaux::ty_to_string(tcx, base_t));\n                         let fields = ty::lookup_struct_fields(tcx, base_id);\n                         lookup_field_ty(tcx, base_id, fields[],\n@@ -3392,7 +3392,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n         let (_, autoderefs, field_ty) =\n             autoderef(fcx, expr.span, expr_t, Some(base.id), lvalue_pref, |base_t, _| {\n                 match base_t.sty {\n-                    ty::ty_struct(base_id, ref substs) => {\n+                    ty::ty_struct(base_id, substs) => {\n                         tuple_like = ty::is_tuple_struct(tcx, base_id);\n                         if tuple_like {\n                             debug!(\"tuple struct named {}\", ppaux::ty_to_string(tcx, base_t));\n@@ -3443,7 +3443,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                                                 span: Span,\n                                                 class_id: ast::DefId,\n                                                 node_id: ast::NodeId,\n-                                                substitutions: subst::Substs<'tcx>,\n+                                                substitutions: &'tcx subst::Substs<'tcx>,\n                                                 field_types: &[ty::field_ty],\n                                                 ast_fields: &[ast::Field],\n                                                 check_completeness: bool,\n@@ -3495,7 +3495,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                 Some((field_id, false)) => {\n                     expected_field_type =\n                         ty::lookup_field_type(\n-                            tcx, class_id, field_id, &substitutions);\n+                            tcx, class_id, field_id, substitutions);\n                     class_field_map.insert(\n                         field.ident.node.name, (field_id, true));\n                     fields_found += 1;\n@@ -3561,7 +3561,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                                        span,\n                                        class_id,\n                                        id,\n-                                       struct_substs,\n+                                       fcx.ccx.tcx.mk_substs(struct_substs),\n                                        class_fields[],\n                                        fields,\n                                        base_expr.is_none(),\n@@ -3604,7 +3604,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                                        span,\n                                        variant_id,\n                                        id,\n-                                       substitutions,\n+                                       fcx.ccx.tcx.mk_substs(substitutions),\n                                        variant_fields[],\n                                        fields,\n                                        true,\n@@ -3737,7 +3737,7 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n                             Some(mt) => mt.ty,\n                             None => {\n                                 let is_newtype = match oprnd_t.sty {\n-                                    ty::ty_struct(did, ref substs) => {\n+                                    ty::ty_struct(did, substs) => {\n                                         let fields = ty::struct_fields(fcx.tcx(), did, substs);\n                                         fields.len() == 1\n                                         && fields[0].name ==\n@@ -4749,7 +4749,7 @@ pub fn check_simd(tcx: &ty::ctxt, sp: Span, id: ast::NodeId) {\n         return;\n     }\n     match t.sty {\n-        ty::ty_struct(did, ref substs) => {\n+        ty::ty_struct(did, substs) => {\n             let fields = ty::lookup_struct_fields(tcx, did);\n             if fields.is_empty() {\n                 span_err!(tcx.sess, sp, E0075, \"SIMD vector cannot be empty\");\n@@ -5594,7 +5594,7 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n                     Ok(did) => (1u,\n                                 Vec::new(),\n                                 ty::mk_struct(ccx.tcx, did,\n-                                              subst::Substs::empty())),\n+                                              ccx.tcx.mk_substs(subst::Substs::empty()))),\n                     Err(msg) => {\n                         tcx.sess.span_fatal(it.span, msg[]);\n                     }\n@@ -5798,4 +5798,3 @@ pub fn check_intrinsic_type(ccx: &CrateCtxt, it: &ast::ForeignItem) {\n             });\n     }\n }\n-"}, {"sha": "b9daf029f7d24c5896b3df41d280dfc9d6bf886d", "filename": "src/librustc_typeck/check/regionmanip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_typeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_typeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionmanip.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -102,8 +102,8 @@ impl<'a, 'tcx> Wf<'a, 'tcx> {\n                 self.accumulate_from_object_ty(ty, t.bounds.region_bound, required_region_bounds)\n             }\n \n-            ty::ty_enum(def_id, ref substs) |\n-            ty::ty_struct(def_id, ref substs) => {\n+            ty::ty_enum(def_id, substs) |\n+            ty::ty_struct(def_id, substs) => {\n                 self.accumulate_from_adt(ty, def_id, substs)\n             }\n "}, {"sha": "ac65e5702059a58a07e6819ca13c331a6193ae83", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -264,7 +264,7 @@ impl<'cx,'tcx> BoundsChecker<'cx,'tcx> {\n     pub fn check_trait_ref(&mut self, trait_ref: &ty::TraitRef<'tcx>) {\n         let trait_def = ty::lookup_trait_def(self.fcx.tcx(), trait_ref.def_id);\n \n-        let bounds = trait_def.generics.to_bounds(self.tcx(), &trait_ref.substs);\n+        let bounds = trait_def.generics.to_bounds(self.tcx(), trait_ref.substs);\n         self.fcx.add_obligations_for_parameters(\n             traits::ObligationCause::new(\n                 self.span,\n@@ -311,8 +311,8 @@ impl<'cx,'tcx> TypeFolder<'tcx> for BoundsChecker<'cx,'tcx> {\n         }\n \n         match t.sty{\n-            ty::ty_struct(type_id, ref substs) |\n-            ty::ty_enum(type_id, ref substs) => {\n+            ty::ty_struct(type_id, substs) |\n+            ty::ty_enum(type_id, substs) => {\n                 let polytype = ty::lookup_item_type(self.fcx.tcx(), type_id);\n \n                 if self.binding_count == 0 {"}, {"sha": "8259cf8009662c1708257ea91c28e888bc501505", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -1264,7 +1264,7 @@ pub fn convert_struct<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     tcx.struct_fields.borrow_mut().insert(local_def(id), Rc::new(field_tys));\n \n     let substs = mk_item_substs(ccx, &pty.generics);\n-    let selfty = ty::mk_struct(tcx, local_def(id), substs);\n+    let selfty = ty::mk_struct(tcx, local_def(id), tcx.mk_substs(substs));\n \n     // If this struct is enum-like or tuple-like, create the type of its\n     // constructor.\n@@ -1353,11 +1353,11 @@ pub fn trait_def_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         }\n     };\n \n-    let substs = mk_trait_substs(ccx, it.id, generics, items);\n+    let substs = ccx.tcx.mk_substs(mk_trait_substs(ccx, it.id, generics, items));\n \n     let ty_generics = ty_generics_for_trait(ccx,\n                                             it.id,\n-                                            &substs,\n+                                            substs,\n                                             generics,\n                                             items);\n \n@@ -1377,7 +1377,7 @@ pub fn trait_def_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         bounds: bounds,\n         trait_ref: Rc::new(ty::TraitRef {\n             def_id: def_id,\n-            substs: substs\n+            substs: ccx.tcx.mk_substs(substs)\n         })\n     });\n     tcx.trait_defs.borrow_mut().insert(def_id, trait_def.clone());\n@@ -1502,7 +1502,7 @@ pub fn ty_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>, it: &ast::Item)\n                 generics,\n                 DontCreateTypeParametersForAssociatedTypes);\n             let substs = mk_item_substs(ccx, &ty_generics);\n-            let t = ty::mk_enum(tcx, local_def(it.id), substs);\n+            let t = ty::mk_enum(tcx, local_def(it.id), tcx.mk_substs(substs));\n             let pty = Polytype {\n                 generics: ty_generics,\n                 ty: t\n@@ -1520,7 +1520,7 @@ pub fn ty_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>, it: &ast::Item)\n                 generics,\n                 DontCreateTypeParametersForAssociatedTypes);\n             let substs = mk_item_substs(ccx, &ty_generics);\n-            let t = ty::mk_struct(tcx, local_def(it.id), substs);\n+            let t = ty::mk_struct(tcx, local_def(it.id), tcx.mk_substs(substs));\n             let pty = Polytype {\n                 generics: ty_generics,\n                 ty: t\n@@ -1598,7 +1598,7 @@ fn ty_generics_for_type_or_impl<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n \n fn ty_generics_for_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                    trait_id: ast::NodeId,\n-                                   substs: &subst::Substs<'tcx>,\n+                                   substs: &'tcx subst::Substs<'tcx>,\n                                    ast_generics: &ast::Generics,\n                                    items: &[ast::TraitItem])\n                                    -> ty::Generics<'tcx>\n@@ -1639,7 +1639,7 @@ fn ty_generics_for_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n \n     let self_trait_ref =\n         Rc::new(ty::Binder(ty::TraitRef { def_id: local_def(trait_id),\n-                                          substs: (*substs).clone() }));\n+                                          substs: substs }));\n \n     let def = ty::TypeParameterDef {\n         space: subst::SelfSpace,"}, {"sha": "9aa83b708d9a4569f94ae75723c92c430a353718", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -750,8 +750,8 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 }\n             }\n \n-            ty::ty_enum(def_id, ref substs) |\n-            ty::ty_struct(def_id, ref substs) => {\n+            ty::ty_enum(def_id, substs) |\n+            ty::ty_struct(def_id, substs) => {\n                 let item_type = ty::lookup_item_type(self.tcx(), def_id);\n                 let generics = &item_type.generics;\n "}, {"sha": "4b84998af1f4fe18bfa33f691d780d3970a78f91", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -1464,10 +1464,10 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                     ty::RegionTraitStore(..) => Closure(decl),\n                 }\n             }\n-            ty::ty_struct(did, ref substs) |\n-            ty::ty_enum(did, ref substs) |\n+            ty::ty_struct(did, substs) |\n+            ty::ty_enum(did, substs) |\n             ty::ty_trait(box ty::TyTrait {\n-                principal: ty::Binder(ty::TraitRef { def_id: did, ref substs }),\n+                principal: ty::Binder(ty::TraitRef { def_id: did, substs }),\n                 .. }) =>\n             {\n                 let fqn = csearch::get_item_path(cx.tcx(), did);"}, {"sha": "5603f728d2fa77374b6d8000d376d7c2c5d5f5d0", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f2b0f032a2b479b6cf728646283bf6e46b32098/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=4f2b0f032a2b479b6cf728646283bf6e46b32098", "patch": "@@ -122,9 +122,10 @@ pub fn run_core(libs: Vec<Path>, cfgs: Vec<String>, externs: Externs,\n     let ast_map = driver::assign_node_ids_and_map(&sess, &mut forest);\n \n     let type_arena = TypedArena::new();\n+    let substs_arena = TypedArena::new();\n     let ty::CrateAnalysis {\n         exported_items, public_items, ty_cx, ..\n-    } = driver::phase_3_run_analysis_passes(sess, ast_map, &type_arena, name);\n+    } = driver::phase_3_run_analysis_passes(sess, ast_map, &type_arena, &substs_arena, name);\n \n     let ctxt = DocContext {\n         krate: ty_cx.map.krate(),"}]}