{"sha": "953b5f23cc493d75288cec1347ab65dd3ed38fd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1M2I1ZjIzY2M0OTNkNzUyODhjZWMxMzQ3YWI2NWRkM2VkMzhmZDc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-23T23:17:33Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-23T23:17:33Z"}, "message": "Restore CompletionItem immutability", "tree": {"sha": "f04eeb12188d2f19522043a26ecff68442018dde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f04eeb12188d2f19522043a26ecff68442018dde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/953b5f23cc493d75288cec1347ab65dd3ed38fd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/953b5f23cc493d75288cec1347ab65dd3ed38fd7", "html_url": "https://github.com/rust-lang/rust/commit/953b5f23cc493d75288cec1347ab65dd3ed38fd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/953b5f23cc493d75288cec1347ab65dd3ed38fd7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6654b9aff31dccdbc2284598deacc95c67b3672c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6654b9aff31dccdbc2284598deacc95c67b3672c", "html_url": "https://github.com/rust-lang/rust/commit/6654b9aff31dccdbc2284598deacc95c67b3672c"}], "stats": {"total": 54, "additions": 23, "deletions": 31}, "files": [{"sha": "edbf4a5b756da2602f4f4e7d64d00d62cca70de6", "filename": "crates/ra_ide/src/completion/completion_item.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/953b5f23cc493d75288cec1347ab65dd3ed38fd7/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953b5f23cc493d75288cec1347ab65dd3ed38fd7/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=953b5f23cc493d75288cec1347ab65dd3ed38fd7", "patch": "@@ -190,7 +190,7 @@ impl CompletionItem {\n     }\n     /// What string is used for filtering.\n     pub fn lookup(&self) -> &str {\n-        self.lookup.as_deref().unwrap_or_else(|| self.label())\n+        self.lookup.as_deref().unwrap_or(&self.label)\n     }\n \n     pub fn kind(&self) -> Option<CompletionItemKind> {\n@@ -205,10 +205,6 @@ impl CompletionItem {\n         self.score\n     }\n \n-    pub fn set_score(&mut self, score: CompletionScore) {\n-        self.score = Some(score);\n-    }\n-\n     pub fn trigger_call_info(&self) -> bool {\n         self.trigger_call_info\n     }\n@@ -310,7 +306,6 @@ impl Builder {\n         self.deprecated = Some(deprecated);\n         self\n     }\n-    #[allow(unused)]\n     pub(crate) fn set_score(mut self, score: CompletionScore) -> Builder {\n         self.score = Some(score);\n         self"}, {"sha": "6d8a5dc089d4947deb8713691ee7b336a9ee4afa", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/953b5f23cc493d75288cec1347ab65dd3ed38fd7/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953b5f23cc493d75288cec1347ab65dd3ed38fd7/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=953b5f23cc493d75288cec1347ab65dd3ed38fd7", "patch": "@@ -23,22 +23,20 @@ impl Completions {\n         ty: &Type,\n     ) {\n         let is_deprecated = is_deprecated(field, ctx.db);\n-        let mut completion_item = CompletionItem::new(\n-            CompletionKind::Reference,\n-            ctx.source_range(),\n-            field.name(ctx.db).to_string(),\n-        )\n-        .kind(CompletionItemKind::Field)\n-        .detail(ty.display(ctx.db).to_string())\n-        .set_documentation(field.docs(ctx.db))\n-        .set_deprecated(is_deprecated)\n-        .build();\n-\n-        if let Some(score) = compute_score(&completion_item, ctx) {\n-            completion_item.set_score(score);\n+        let ty = ty.display(ctx.db).to_string();\n+        let name = field.name(ctx.db);\n+        let mut completion_item =\n+            CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.to_string())\n+                .kind(CompletionItemKind::Field)\n+                .detail(ty.clone())\n+                .set_documentation(field.docs(ctx.db))\n+                .set_deprecated(is_deprecated);\n+\n+        if let Some(score) = compute_score(ctx, &ty, &name.to_string()) {\n+            completion_item = completion_item.set_score(score);\n         }\n \n-        self.add(completion_item);\n+        completion_item.add_to(self);\n     }\n \n     pub(crate) fn add_tuple_field(&mut self, ctx: &CompletionContext, field: usize, ty: &Type) {\n@@ -308,8 +306,9 @@ impl Completions {\n }\n \n pub(crate) fn compute_score(\n-    completion_item: &CompletionItem,\n     ctx: &CompletionContext,\n+    ty: &str,\n+    name: &str,\n ) -> Option<CompletionScore> {\n     let (active_name, active_type) = if let Some(record_field) = &ctx.record_field_syntax {\n         if let Some((struct_field, _)) = ctx.sema.resolve_record_field(record_field) {\n@@ -334,16 +333,14 @@ pub(crate) fn compute_score(\n \n     // Compute score\n     // For the same type\n-    if let Some(a_parameter_type) = completion_item.detail() {\n-        if &active_type == a_parameter_type {\n-            // If same type + same name then go top position\n-            let res = if active_name == completion_item.label() {\n-                CompletionScore::TypeAndNameMatch\n-            } else {\n-                CompletionScore::TypeMatch\n-            };\n-            return Some(res);\n-        }\n+    if &active_type == ty {\n+        // If same type + same name then go top position\n+        let res = if active_name == name {\n+            CompletionScore::TypeAndNameMatch\n+        } else {\n+            CompletionScore::TypeMatch\n+        };\n+        return Some(res);\n     }\n     None\n }"}]}