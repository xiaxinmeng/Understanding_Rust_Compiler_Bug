{"sha": "acf8af9a553fbccd6dd5475d94cb65270d703581", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjZjhhZjlhNTUzZmJjY2Q2ZGQ1NDc1ZDk0Y2I2NTI3MGQ3MDM1ODE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-30T20:48:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-30T20:48:49Z"}, "message": "Auto merge of #63148 - Centril:rollup-t813bxw, r=Centril\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #62293 (Unsupport the `await!(future)` macro)\n - #62469 (Add doc links to liballoc crate page)\n - #63095 (Turn `INCOMPLETE_FEATURES` into lint)\n - #63117 (Use global variable 'environ' to pass environments to rtpSpawn)\n - #63123 (`const fn`-ify `std::any::type_name` as laid out in #63084)\n - #63129 (Subslice patterns: Test passing static & dynamic semantics.)\n - #63147 (Updated RELEASES.md for 1.37.0)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "473c258e2b996b14a7c1237ca7335bad8b4d5b59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/473c258e2b996b14a7c1237ca7335bad8b4d5b59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acf8af9a553fbccd6dd5475d94cb65270d703581", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acf8af9a553fbccd6dd5475d94cb65270d703581", "html_url": "https://github.com/rust-lang/rust/commit/acf8af9a553fbccd6dd5475d94cb65270d703581", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acf8af9a553fbccd6dd5475d94cb65270d703581/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dddb7fca09dc817ba275602b950bb81a9032fb6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dddb7fca09dc817ba275602b950bb81a9032fb6d", "html_url": "https://github.com/rust-lang/rust/commit/dddb7fca09dc817ba275602b950bb81a9032fb6d"}, {"sha": "0924ac7290435a92ab2ea671991d56fcf532b459", "url": "https://api.github.com/repos/rust-lang/rust/commits/0924ac7290435a92ab2ea671991d56fcf532b459", "html_url": "https://github.com/rust-lang/rust/commit/0924ac7290435a92ab2ea671991d56fcf532b459"}], "stats": {"total": 1120, "additions": 668, "deletions": 452}, "files": [{"sha": "51cd6578ec5312305a61d1bcfa1b5d51fdb333f3", "filename": "RELEASES.md", "status": "modified", "additions": 119, "deletions": 1, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -1,3 +1,121 @@\n+Version 1.37.0 (2019-08-15)\n+==========================\n+\n+Language\n+--------\n+- `#[must_use]` will now warn if the type is contained in a [tuple][61100],\n+  [`Box`][62228], or an [array][62235] and unused.\n+- [You can now use the `cfg` and `cfg_attr` attributes on\n+  generic parameters.][61547]\n+- [You can now use enum variants through type alias.][61682] e.g. You can\n+  write the following:\n+  ```rust\n+  type MyOption = Option<u8>;\n+\n+  fn increment_or_zero(x: MyOption) -> u8 {\n+      match x {\n+          MyOption::Some(y) => y + 1,\n+          MyOption::None => 0,\n+      }\n+  }\n+  ```\n+- [You can now use `_` as an identifier for consts.][61347] e.g. You can write\n+  `const _: u32 = 5;`.\n+- [You can now use `#[repr(align(X)]` on enums.][61229]\n+- [The  `?`/_\"Kleene\"_ macro operator is now available in the\n+  2015 edition.][60932]\n+\n+Compiler\n+--------\n+- [You can now enable Profile-Guided Optimization with the `-C profile-generate`\n+  and `-C profile-use` flags.][61268] For more information on how to use profile\n+  guided optimization, please refer to the [rustc book][rustc-book-pgo].\n+- [The `rust-lldb` wrapper script should now work again.][61827]\n+\n+Libraries\n+---------\n+- [`mem::MaybeUninit<T>` is now ABI-compatible with `T`.][61802]\n+\n+Stabilized APIs\n+---------------\n+- [`BufReader::buffer`]\n+- [`BufWriter::buffer`]\n+- [`Cell::from_mut`]\n+- [`Cell<[T]>::as_slice_of_cells`][`Cell<slice>::as_slice_of_cells`]\n+- [`DoubleEndedIterator::nth_back`]\n+- [`Option::xor`]\n+- [`Wrapping::reverse_bits`]\n+- [`i128::reverse_bits`]\n+- [`i16::reverse_bits`]\n+- [`i32::reverse_bits`]\n+- [`i64::reverse_bits`]\n+- [`i8::reverse_bits`]\n+- [`isize::reverse_bits`]\n+- [`slice::copy_within`]\n+- [`u128::reverse_bits`]\n+- [`u16::reverse_bits`]\n+- [`u32::reverse_bits`]\n+- [`u64::reverse_bits`]\n+- [`u8::reverse_bits`]\n+- [`usize::reverse_bits`]\n+\n+Cargo\n+-----\n+- [`Cargo.lock` files are now included by default when publishing executable crates\n+  with executables.][cargo/7026]\n+- [You can now specify `default-run=\"foo\"` in `[package]` to specify the\n+  default executable to use for `cargo run`.][cargo/7056]\n+\n+Misc\n+----\n+\n+Compatibility Notes\n+-------------------\n+- [Using `...` for inclusive range patterns will now warn by default.][61342]\n+  Please transition your code to using the `..=` syntax for inclusive\n+  ranges instead.\n+- [Using a trait object without the `dyn` will now warn by default.][61203]\n+  Please transition your code to use `dyn Trait` for trait objects instead.\n+\n+[62228]: https://github.com/rust-lang/rust/pull/62228/\n+[62235]: https://github.com/rust-lang/rust/pull/62235/\n+[61802]: https://github.com/rust-lang/rust/pull/61802/\n+[61827]: https://github.com/rust-lang/rust/pull/61827/\n+[61547]: https://github.com/rust-lang/rust/pull/61547/\n+[61682]: https://github.com/rust-lang/rust/pull/61682/\n+[61268]: https://github.com/rust-lang/rust/pull/61268/\n+[61342]: https://github.com/rust-lang/rust/pull/61342/\n+[61347]: https://github.com/rust-lang/rust/pull/61347/\n+[61100]: https://github.com/rust-lang/rust/pull/61100/\n+[61203]: https://github.com/rust-lang/rust/pull/61203/\n+[61229]: https://github.com/rust-lang/rust/pull/61229/\n+[60932]: https://github.com/rust-lang/rust/pull/60932/\n+[cargo/7026]: https://github.com/rust-lang/cargo/pull/7026/\n+[cargo/7056]: https://github.com/rust-lang/cargo/pull/7056/\n+[`BufReader::buffer`]: https://doc.rust-lang.org/std/io/struct.BufReader.html#method.buffer\n+[`BufWriter::buffer`]: https://doc.rust-lang.org/std/io/struct.BufWriter.html#method.buffer\n+[`Cell::from_mut`]: https://doc.rust-lang.org/std/cell/struct.Cell.html#method.from_mut\n+[`Cell<slice>::as_slice_of_cells`]: https://doc.rust-lang.org/std/cell/struct.Cell.html#method.as_slice_of_cells\n+[`DoubleEndedIterator::nth_back`]: https://doc.rust-lang.org/std/iter/trait.DoubleEndedIterator.html#method.nth_back\n+[`Option::xor`]: https://doc.rust-lang.org/std/option/enum.Option.html#method.xor\n+[`RefCell::try_borrow_unguarded`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.try_borrow_unguarded\n+[`Wrapping::reverse_bits`]: https://doc.rust-lang.org/std/num/struct.Wrapping.html#method.reverse_bits\n+[`i128::reverse_bits`]: https://doc.rust-lang.org/std/primitive.i128.html#method.reverse_bits\n+[`i16::reverse_bits`]: https://doc.rust-lang.org/std/primitive.i16.html#method.reverse_bits\n+[`i32::reverse_bits`]: https://doc.rust-lang.org/std/primitive.i32.html#method.reverse_bits\n+[`i64::reverse_bits`]: https://doc.rust-lang.org/std/primitive.i64.html#method.reverse_bits\n+[`i8::reverse_bits`]: https://doc.rust-lang.org/std/primitive.i8.html#method.reverse_bits\n+[`isize::reverse_bits`]: https://doc.rust-lang.org/std/primitive.isize.html#method.reverse_bits\n+[`slice::copy_within`]: https://doc.rust-lang.org/std/primitive.slice.html#method.copy_within\n+[`u128::reverse_bits`]: https://doc.rust-lang.org/std/primitive.u128.html#method.reverse_bits\n+[`u16::reverse_bits`]: https://doc.rust-lang.org/std/primitive.u16.html#method.reverse_bits\n+[`u32::reverse_bits`]: https://doc.rust-lang.org/std/primitive.u32.html#method.reverse_bits\n+[`u64::reverse_bits`]: https://doc.rust-lang.org/std/primitive.u64.html#method.reverse_bits\n+[`u8::reverse_bits`]: https://doc.rust-lang.org/std/primitive.u8.html#method.reverse_bits\n+[`usize::reverse_bits`]: https://doc.rust-lang.org/std/primitive.usize.html#method.reverse_bits\n+[rustc-book-pgo]: https://doc.rust-lang.org/rustc/profile-guided-optimization.html\n+\n+\n Version 1.36.0 (2019-07-04)\n ==========================\n \n@@ -39,7 +157,7 @@ Stabilized APIs\n - [`mem::MaybeUninit`]\n - [`pointer::align_offset`]\n - [`future::Future`]\n-- [`task::Context`] \n+- [`task::Context`]\n - [`task::RawWaker`]\n - [`task::RawWakerVTable`]\n - [`task::Waker`]"}, {"sha": "98fa754759aa41916c8e24af40ae57ff8c1080bb", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -10,30 +10,30 @@\n //!\n //! ## Boxed values\n //!\n-//! The [`Box`](boxed/index.html) type is a smart pointer type. There can\n-//! only be one owner of a `Box`, and the owner can decide to mutate the\n-//! contents, which live on the heap.\n+//! The [`Box`] type is a smart pointer type. There can only be one owner of a\n+//! [`Box`], and the owner can decide to mutate the contents, which live on the\n+//! heap.\n //!\n //! This type can be sent among threads efficiently as the size of a `Box` value\n //! is the same as that of a pointer. Tree-like data structures are often built\n //! with boxes because each node often has only one owner, the parent.\n //!\n //! ## Reference counted pointers\n //!\n-//! The [`Rc`](rc/index.html) type is a non-threadsafe reference-counted pointer\n-//! type intended for sharing memory within a thread. An `Rc` pointer wraps a\n-//! type, `T`, and only allows access to `&T`, a shared reference.\n+//! The [`Rc`] type is a non-threadsafe reference-counted pointer type intended\n+//! for sharing memory within a thread. An [`Rc`] pointer wraps a type, `T`, and\n+//! only allows access to `&T`, a shared reference.\n //!\n-//! This type is useful when inherited mutability (such as using `Box`) is too\n-//! constraining for an application, and is often paired with the `Cell` or\n-//! `RefCell` types in order to allow mutation.\n+//! This type is useful when inherited mutability (such as using [`Box`]) is too\n+//! constraining for an application, and is often paired with the [`Cell`] or\n+//! [`RefCell`] types in order to allow mutation.\n //!\n //! ## Atomically reference counted pointers\n //!\n-//! The [`Arc`](sync/index.html) type is the threadsafe equivalent of the `Rc`\n-//! type. It provides all the same functionality of `Rc`, except it requires\n-//! that the contained type `T` is shareable. Additionally, `Arc<T>` is itself\n-//! sendable while `Rc<T>` is not.\n+//! The [`Arc`] type is the threadsafe equivalent of the [`Rc`] type. It\n+//! provides all the same functionality of [`Rc`], except it requires that the\n+//! contained type `T` is shareable. Additionally, [`Arc<T>`][`Arc`] is itself\n+//! sendable while [`Rc<T>`][`Rc`] is not.\n //!\n //! This type allows for shared access to the contained data, and is often\n //! paired with synchronization primitives such as mutexes to allow mutation of\n@@ -49,6 +49,12 @@\n //!\n //! The [`alloc`](alloc/index.html) module defines the low-level interface to the\n //! default global allocator. It is not compatible with the libc allocator API.\n+//!\n+//! [`Arc`]: sync/index.html\n+//! [`Box`]: boxed/index.html\n+//! [`Cell`]: ../core/cell/index.html\n+//! [`Rc`]: rc/index.html\n+//! [`RefCell`]: ../core/cell/index.html\n \n #![allow(unused_attributes)]\n #![stable(feature = \"alloc\", since = \"1.36.0\")]\n@@ -63,6 +69,7 @@\n #![warn(missing_debug_implementations)]\n #![deny(intra_doc_link_resolution_failure)] // rustdoc is run without -D warnings\n #![allow(explicit_outlives_requirements)]\n+#![cfg_attr(not(bootstrap), allow(incomplete_features))]\n \n #![cfg_attr(not(test), feature(generator_trait))]\n #![cfg_attr(test, feature(test))]"}, {"sha": "078091a9b5475494486fb8a56fcf09a5ca8c60ee", "filename": "src/libcore/any.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -468,7 +468,8 @@ impl TypeId {\n /// The current implementation uses the same infrastructure as compiler\n /// diagnostics and debuginfo, but this is not guaranteed.\n #[stable(feature = \"type_name\", since = \"1.38.0\")]\n-pub fn type_name<T: ?Sized>() -> &'static str {\n+#[rustc_const_unstable(feature = \"const_type_name\")]\n+pub const fn type_name<T: ?Sized>() -> &'static str {\n     #[cfg(bootstrap)]\n     unsafe {\n         intrinsics::type_name::<T>()"}, {"sha": "4d627383fd7cc50ac7484e669b8fd9068a487575", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -63,6 +63,7 @@\n #![warn(missing_debug_implementations)]\n #![deny(intra_doc_link_resolution_failure)] // rustdoc is run without -D warnings\n #![allow(explicit_outlives_requirements)]\n+#![cfg_attr(not(bootstrap), allow(incomplete_features))]\n \n #![feature(allow_internal_unstable)]\n #![feature(arbitrary_self_types)]"}, {"sha": "b3eee7c3464896ea3bd3e29462085fbb59e4d02c", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -2088,11 +2088,11 @@ generator can be constructed.\n Erroneous code example:\n \n ```edition2018,compile-fail,E0698\n-#![feature(futures_api, async_await, await_macro)]\n+#![feature(async_await)]\n async fn bar<T>() -> () {}\n \n async fn foo() {\n-  await!(bar());  // error: cannot infer type for `T`\n+    bar().await; // error: cannot infer type for `T`\n }\n ```\n \n@@ -2101,12 +2101,12 @@ To fix this you must bind `T` to a concrete type such as `String`\n so that a generator can then be constructed:\n \n ```edition2018\n-#![feature(futures_api, async_await, await_macro)]\n+#![feature(async_await)]\n async fn bar<T>() -> () {}\n \n async fn foo() {\n-  await!(bar::<String>());\n-  //          ^^^^^^^^ specify type explicitly\n+  bar::<String>().await;\n+  //   ^^^^^^^^ specify type explicitly\n }\n ```\n \"##,"}, {"sha": "026c3cc6f95b20bda97a1d72554f9765315ef88b", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -4685,7 +4685,7 @@ impl<'a> LoweringContext<'a> {\n                     })\n                 })\n             }\n-            ExprKind::Await(_origin, ref expr) => self.lower_await(e.span, expr),\n+            ExprKind::Await(ref expr) => self.lower_await(e.span, expr),\n             ExprKind::Closure(\n                 capture_clause, asyncness, movability, ref decl, ref body, fn_decl_span\n             ) => {"}, {"sha": "6ac68e86e4be9630d0580c2d675670989cd9d85a", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -33,13 +33,12 @@ use lint::{LintPass, LateLintPass, EarlyLintPass, EarlyContext};\n use rustc::util::nodemap::FxHashSet;\n \n use syntax::tokenstream::{TokenTree, TokenStream};\n-use syntax::ast;\n+use syntax::ast::{self, Expr};\n use syntax::ptr::P;\n-use syntax::ast::Expr;\n use syntax::attr::{self, HasAttrs, AttributeTemplate};\n use syntax::source_map::Spanned;\n use syntax::edition::Edition;\n-use syntax::feature_gate::{AttributeGate, AttributeType};\n+use syntax::feature_gate::{self, AttributeGate, AttributeType};\n use syntax::feature_gate::{Stability, deprecated_attributes};\n use syntax_pos::{BytePos, Span, SyntaxContext};\n use syntax::symbol::{Symbol, kw, sym};\n@@ -1831,3 +1830,35 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExplicitOutlivesRequirements {\n         }\n     }\n }\n+\n+declare_lint! {\n+    pub INCOMPLETE_FEATURES,\n+    Warn,\n+    \"incomplete features that may function improperly in some or all cases\"\n+}\n+\n+declare_lint_pass!(\n+    /// Check for used feature gates in `INCOMPLETE_FEATURES` in `feature_gate.rs`.\n+    IncompleteFeatures => [INCOMPLETE_FEATURES]\n+);\n+\n+impl EarlyLintPass for IncompleteFeatures {\n+    fn check_crate(&mut self, cx: &EarlyContext<'_>, _: &ast::Crate) {\n+        let features = cx.sess.features_untracked();\n+        features.declared_lang_features\n+            .iter().map(|(name, span, _)| (name, span))\n+            .chain(features.declared_lib_features.iter().map(|(name, span)| (name, span)))\n+            .filter(|(name, _)| feature_gate::INCOMPLETE_FEATURES.iter().any(|f| name == &f))\n+            .for_each(|(name, &span)| {\n+                cx.struct_span_lint(\n+                    INCOMPLETE_FEATURES,\n+                    span,\n+                    &format!(\n+                        \"the feature `{}` is incomplete and may cause the compiler to crash\",\n+                        name,\n+                    )\n+                )\n+                .emit();\n+            });\n+    }\n+}"}, {"sha": "78bc164ba1a0f0fcc16c3ff93647f22a41ba69bf", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -97,6 +97,7 @@ macro_rules! early_lint_passes {\n             DeprecatedAttr: DeprecatedAttr::new(),\n             WhileTrue: WhileTrue,\n             NonAsciiIdents: NonAsciiIdents,\n+            IncompleteFeatures: IncompleteFeatures,\n         ]);\n     )\n }"}, {"sha": "b07966fa2062654a65c48e02957c67d0b35d4653", "filename": "src/libstd/sys/vxworks/process/process_vxworks.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_vxworks.rs?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -1,7 +1,7 @@\n use crate::io::{self, Error, ErrorKind};\n-use libc::{self, c_int};\n+use libc::{self, c_int, c_char};\n use libc::{RTP_ID};\n-\n+use crate::sys;\n use crate::sys::cvt;\n use crate::sys::process::rtp;\n use crate::sys::process::process_common::*;\n@@ -16,8 +16,6 @@ impl Command {\n         use crate::sys::{cvt_r};\n         const CLOEXEC_MSG_FOOTER: &'static [u8] = b\"NOEX\";\n \n-        let envp = self.capture_env();\n-\n         if self.saw_nul() {\n             return Err(io::Error::new(ErrorKind::InvalidInput,\n                                       \"nul byte found in provided data\"));\n@@ -54,19 +52,10 @@ impl Command {\n                 t!(cvt(libc::chdir(cwd.as_ptr())));\n             }\n \n-            //            let envp = envp.map(|c| c.as_ptr())\n-            //                .unwrap_or(*sys::os::environ() as *const _);\n-            // FIXME: https://github.com/rust-lang/rust/issues/61993\n-            let envp_empty = CStringArray::with_capacity(0);\n-            let envp = match envp {\n-                Some(x) => x,\n-                None => envp_empty,\n-            };\n-            let envp = envp.as_ptr();\n             let ret = rtp::rtpSpawn(\n                 self.get_argv()[0],                   // executing program\n                 self.get_argv().as_ptr() as *const _, // argv\n-                envp as *const _,                     // environment variable pointers\n+                *sys::os::environ() as *const *const c_char,\n                 100 as c_int,                         // initial priority\n                 0x16000,                                    // initial stack size. 0 defaults\n                                                       // to 0x4000 in 32 bit and 0x8000 in 64 bit"}, {"sha": "b633705a65f5d6518b18e956cbba36759c1608f8", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -1178,7 +1178,7 @@ pub enum ExprKind {\n     /// preexisting defs.\n     Async(CaptureBy, NodeId, P<Block>),\n     /// An await expression (`my_future.await`).\n-    Await(AwaitOrigin, P<Expr>),\n+    Await(P<Expr>),\n \n     /// A try block (`try { ... }`).\n     TryBlock(P<Block>),"}, {"sha": "4f637a23e6917042b6d6ed80fa2df786e60a5f5a", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 8, "deletions": 30, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -468,10 +468,6 @@ declare_features! (\n     // Allows async and await syntax.\n     (active, async_await, \"1.28.0\", Some(50547), None),\n \n-    // Allows await! macro-like syntax.\n-    // This will likely be removed prior to stabilization of async/await.\n-    (active, await_macro, \"1.28.0\", Some(50547), None),\n-\n     // Allows reinterpretation of the bits of a value of one type as another type during const eval.\n     (active, const_transmute, \"1.29.0\", Some(53605), None),\n \n@@ -569,10 +565,10 @@ declare_features! (\n     // -------------------------------------------------------------------------\n );\n \n-// Some features are known to be incomplete and using them is likely to have\n-// unanticipated results, such as compiler crashes. We warn the user about these\n-// to alert them.\n-const INCOMPLETE_FEATURES: &[Symbol] = &[\n+/// Some features are known to be incomplete and using them is likely to have\n+/// unanticipated results, such as compiler crashes. We warn the user about these\n+/// to alert them.\n+pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n     sym::impl_trait_in_bindings,\n     sym::generic_associated_types,\n     sym::const_generics,\n@@ -627,6 +623,8 @@ declare_features! (\n     (removed, quote, \"1.33.0\", Some(29601), None, None),\n     // Allows using `#[unsafe_destructor_blind_to_params]` (RFC 1238).\n     (removed, dropck_parametricity, \"1.38.0\", Some(28498), None, None),\n+    (removed, await_macro, \"1.38.0\", Some(50547), None,\n+     Some(\"subsumed by `.await` syntax\")),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: removed features\n@@ -2109,19 +2107,8 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::ExprKind::Async(..) => {\n                 gate_feature_post!(&self, async_await, e.span, \"async blocks are unstable\");\n             }\n-            ast::ExprKind::Await(origin, _) => {\n-                match origin {\n-                    ast::AwaitOrigin::FieldLike =>\n-                        gate_feature_post!(&self, async_await, e.span, \"async/await is unstable\"),\n-                    ast::AwaitOrigin::MacroLike =>\n-                        gate_feature_post!(\n-                            &self,\n-                            await_macro,\n-                            e.span,\n-                            \"`await!(<expr>)` macro syntax is unstable, and will soon be removed \\\n-                            in favor of `<expr>.await` syntax.\"\n-                        ),\n-                }\n+            ast::ExprKind::Await(_) => {\n+                gate_feature_post!(&self, async_await, e.span, \"async/await is unstable\");\n             }\n             _ => {}\n         }\n@@ -2338,15 +2325,6 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n             }\n \n             let name = mi.name_or_empty();\n-            if INCOMPLETE_FEATURES.iter().any(|f| name == *f) {\n-                span_handler.struct_span_warn(\n-                    mi.span(),\n-                    &format!(\n-                        \"the feature `{}` is incomplete and may cause the compiler to crash\",\n-                        name\n-                    )\n-                ).emit();\n-            }\n \n             if let Some(edition) = ALL_EDITIONS.iter().find(|e| name == e.feature_name()) {\n                 if *edition <= crate_edition {"}, {"sha": "7b328e817bf8e36b624686af6ee7aa557f2d09cd", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -1139,7 +1139,7 @@ pub fn noop_visit_expr<T: MutVisitor>(Expr { node, id, span, attrs }: &mut Expr,\n             vis.visit_id(node_id);\n             vis.visit_block(body);\n         }\n-        ExprKind::Await(_origin, expr) => vis.visit_expr(expr),\n+        ExprKind::Await(expr) => vis.visit_expr(expr),\n         ExprKind::Assign(el, er) => {\n             vis.visit_expr(el);\n             vis.visit_expr(er);"}, {"sha": "730efb5ef013cdd73e56772d45d3d42c4be0017b", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -869,13 +869,23 @@ impl<'a> Parser<'a> {\n         Ok(())\n     }\n \n-    /// Consume alternative await syntaxes like `await <expr>`, `await? <expr>`, `await(<expr>)`\n-    /// and `await { <expr> }`.\n+    /// Consume alternative await syntaxes like `await!(<expr>)`, `await <expr>`,\n+    /// `await? <expr>`, `await(<expr>)`, and `await { <expr> }`.\n     crate fn parse_incorrect_await_syntax(\n         &mut self,\n         lo: Span,\n         await_sp: Span,\n     ) -> PResult<'a, (Span, ExprKind)> {\n+        if self.token == token::Not {\n+            // Handle `await!(<expr>)`.\n+            self.expect(&token::Not)?;\n+            self.expect(&token::OpenDelim(token::Paren))?;\n+            let expr = self.parse_expr()?;\n+            self.expect(&token::CloseDelim(token::Paren))?;\n+            let sp = self.error_on_incorrect_await(lo, self.prev_span, &expr, false);\n+            return Ok((sp, ExprKind::Await(expr)))\n+        }\n+\n         let is_question = self.eat(&token::Question); // Handle `await? <expr>`.\n         let expr = if self.token == token::OpenDelim(token::Brace) {\n             // Handle `await { <expr> }`.\n@@ -893,18 +903,23 @@ impl<'a> Parser<'a> {\n             err.span_label(await_sp, \"while parsing this incorrect await expression\");\n             err\n         })?;\n+        let sp = self.error_on_incorrect_await(lo, expr.span, &expr, is_question);\n+        Ok((sp, ExprKind::Await(expr)))\n+    }\n+\n+    fn error_on_incorrect_await(&self, lo: Span, hi: Span, expr: &Expr, is_question: bool) -> Span {\n         let expr_str = self.span_to_snippet(expr.span)\n             .unwrap_or_else(|_| pprust::expr_to_string(&expr));\n         let suggestion = format!(\"{}.await{}\", expr_str, if is_question { \"?\" } else { \"\" });\n-        let sp = lo.to(expr.span);\n+        let sp = lo.to(hi);\n         let app = match expr.node {\n             ExprKind::Try(_) => Applicability::MaybeIncorrect, // `await <expr>?`\n             _ => Applicability::MachineApplicable,\n         };\n         self.struct_span_err(sp, \"incorrect use of `await`\")\n             .span_suggestion(sp, \"`await` is a postfix operation\", suggestion, app)\n             .emit();\n-        Ok((sp, ExprKind::Await(ast::AwaitOrigin::FieldLike, expr)))\n+        sp\n     }\n \n     /// If encountering `future.await()`, consume and emit error."}, {"sha": "7fda9158b4bdfed7e05c39621c8d43bf11ea5fb4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 35, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -2234,7 +2234,7 @@ impl<'a> Parser<'a> {\n                 } else if self.eat_keyword(kw::Let) {\n                     return self.parse_let_expr(attrs);\n                 } else if is_span_rust_2018 && self.eat_keyword(kw::Await) {\n-                    let (await_hi, e_kind) = self.parse_await_macro_or_alt(lo, self.prev_span)?;\n+                    let (await_hi, e_kind) = self.parse_incorrect_await_syntax(lo, self.prev_span)?;\n                     hi = await_hi;\n                     ex = e_kind;\n                 } else if self.token.is_path_start() {\n@@ -2282,31 +2282,6 @@ impl<'a> Parser<'a> {\n         self.maybe_recover_from_bad_qpath(expr, true)\n     }\n \n-    /// Parse `await!(<expr>)` calls, or alternatively recover from incorrect but reasonable\n-    /// alternative syntaxes `await <expr>`, `await? <expr>`, `await(<expr>)` and\n-    /// `await { <expr> }`.\n-    fn parse_await_macro_or_alt(\n-        &mut self,\n-        lo: Span,\n-        await_sp: Span,\n-    ) -> PResult<'a, (Span, ExprKind)> {\n-        if self.token == token::Not {\n-            // Handle correct `await!(<expr>)`.\n-            // FIXME: make this an error when `await!` is no longer supported\n-            // https://github.com/rust-lang/rust/issues/60610\n-            self.expect(&token::Not)?;\n-            self.expect(&token::OpenDelim(token::Paren))?;\n-            let expr = self.parse_expr().map_err(|mut err| {\n-                err.span_label(await_sp, \"while parsing this await macro call\");\n-                err\n-            })?;\n-            self.expect(&token::CloseDelim(token::Paren))?;\n-            Ok((self.prev_span, ExprKind::Await(ast::AwaitOrigin::MacroLike, expr)))\n-        } else { // Handle `await <expr>`.\n-            self.parse_incorrect_await_syntax(lo, await_sp)\n-        }\n-    }\n-\n     fn maybe_parse_struct_expr(\n         &mut self,\n         lo: Span,\n@@ -2509,18 +2484,19 @@ impl<'a> Parser<'a> {\n         )\n     }\n \n-    // Assuming we have just parsed `.`, continue parsing into an expression.\n+    fn mk_await_expr(&mut self, self_arg: P<Expr>, lo: Span) -> PResult<'a, P<Expr>> {\n+        let span = lo.to(self.prev_span);\n+        let await_expr = self.mk_expr(span, ExprKind::Await(self_arg), ThinVec::new());\n+        self.recover_from_await_method_call();\n+        Ok(await_expr)\n+    }\n+\n+    /// Assuming we have just parsed `.`, continue parsing into an expression.\n     fn parse_dot_suffix(&mut self, self_arg: P<Expr>, lo: Span) -> PResult<'a, P<Expr>> {\n         if self.token.span.rust_2018() && self.eat_keyword(kw::Await) {\n-            let span = lo.to(self.prev_span);\n-            let await_expr = self.mk_expr(\n-                span,\n-                ExprKind::Await(ast::AwaitOrigin::FieldLike, self_arg),\n-                ThinVec::new(),\n-            );\n-            self.recover_from_await_method_call();\n-            return Ok(await_expr);\n+            return self.mk_await_expr(self_arg, lo);\n         }\n+\n         let segment = self.parse_path_segment(PathStyle::Expr)?;\n         self.check_trailing_angle_brackets(&segment, token::OpenDelim(token::Paren));\n "}, {"sha": "88ff6ee9071014deb7efefb3b46af59be7ba269c", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -2120,17 +2120,9 @@ impl<'a> State<'a> {\n                 self.ibox(0);\n                 self.print_block_with_attrs(blk, attrs);\n             }\n-            ast::ExprKind::Await(origin, ref expr) => {\n-                match origin {\n-                    ast::AwaitOrigin::MacroLike => {\n-                        self.s.word(\"await!\");\n-                        self.print_expr_maybe_paren(expr, parser::PREC_FORCE_PAREN);\n-                    }\n-                    ast::AwaitOrigin::FieldLike => {\n-                        self.print_expr_maybe_paren(expr, parser::PREC_POSTFIX);\n-                        self.s.word(\".await\");\n-                    }\n-                }\n+            ast::ExprKind::Await(ref expr) => {\n+                self.print_expr_maybe_paren(expr, parser::PREC_POSTFIX);\n+                self.s.word(\".await\");\n             }\n             ast::ExprKind::Assign(ref lhs, ref rhs) => {\n                 let prec = AssocOp::Assign.precedence() as i8;"}, {"sha": "d71358f45c470ec3bb787bf288bfaca4cf7f801a", "filename": "src/libsyntax/util/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Flibsyntax%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Flibsyntax%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser.rs?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -382,7 +382,7 @@ pub fn contains_exterior_struct_lit(value: &ast::Expr) -> bool {\n             // X { y: 1 } + X { y: 2 }\n             contains_exterior_struct_lit(&lhs) || contains_exterior_struct_lit(&rhs)\n         }\n-        ast::ExprKind::Await(_, ref x) |\n+        ast::ExprKind::Await(ref x) |\n         ast::ExprKind::Unary(_, ref x) |\n         ast::ExprKind::Cast(ref x, _) |\n         ast::ExprKind::Type(ref x, _) |"}, {"sha": "5fee8ed81ab3bde39034848b4d3729c52fed09a5", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -757,7 +757,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n         ExprKind::Async(_, _, ref body) => {\n             visitor.visit_block(body);\n         }\n-        ExprKind::Await(_, ref expr) => visitor.visit_expr(expr),\n+        ExprKind::Await(ref expr) => visitor.visit_expr(expr),\n         ExprKind::Assign(ref left_hand_expression, ref right_hand_expression) => {\n             visitor.visit_expr(left_hand_expression);\n             visitor.visit_expr(right_hand_expression);"}, {"sha": "1ebf3def78876b5622c6713f2d4f00f660a7377c", "filename": "src/test/ui/array-slice-vec/subslice-patterns-pass.rs", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Farray-slice-vec%2Fsubslice-patterns-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Farray-slice-vec%2Fsubslice-patterns-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fsubslice-patterns-pass.rs?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -0,0 +1,128 @@\n+// This test comprehensively checks the passing static and dynamic semantics\n+// of subslice patterns `..`, `x @ ..`, `ref x @ ..`, and `ref mut @ ..`\n+// in slice patterns `[$($pat), $(,)?]` .\n+\n+// run-pass\n+\n+#![feature(slice_patterns)]\n+\n+#![allow(unreachable_patterns)]\n+\n+use std::convert::identity;\n+\n+#[derive(PartialEq, Debug, Clone)]\n+struct N(u8);\n+\n+macro_rules! n {\n+    ($($e:expr),* $(,)?) => {\n+        [$(N($e)),*]\n+    }\n+}\n+\n+macro_rules! c {\n+    ($inp:expr, $typ:ty, $out:expr $(,)?) => {\n+        assert_eq!($out, identity::<$typ>($inp));\n+    }\n+}\n+\n+macro_rules! m {\n+    ($e:expr, $p:pat => $b:expr) => {\n+        match $e {\n+            $p => $b,\n+            _ => panic!(),\n+        }\n+    }\n+}\n+\n+fn main() {\n+    slices();\n+    arrays();\n+}\n+\n+fn slices() {\n+    // Matching slices using `ref` patterns:\n+    let mut v = vec![N(0), N(1), N(2), N(3), N(4)];\n+    let mut vc = (0..=4).collect::<Vec<u8>>();\n+\n+    let [..] = v[..]; // Always matches.\n+    m!(v[..], [N(0), ref sub @ .., N(4)] => c!(sub, &[N], n![1, 2, 3]));\n+    m!(v[..], [N(0), ref sub @ ..] => c!(sub, &[N], n![1, 2, 3, 4]));\n+    m!(v[..], [ref sub @ .., N(4)] => c!(sub, &[N], n![0, 1, 2, 3]));\n+    m!(v[..], [ref sub @ .., _, _, _, _, _] => c!(sub, &[N], &n![] as &[N]));\n+    m!(v[..], [_, _, _, _, _, ref sub @ ..] => c!(sub, &[N], &n![] as &[N]));\n+    m!(vc[..], [x, .., y] => c!((x, y), (u8, u8), (0, 4)));\n+\n+    // Matching slices using `ref mut` patterns:\n+    let [..] = v[..]; // Always matches.\n+    m!(v[..], [N(0), ref mut sub @ .., N(4)] => c!(sub, &mut [N], n![1, 2, 3]));\n+    m!(v[..], [N(0), ref mut sub @ ..] => c!(sub, &mut [N], n![1, 2, 3, 4]));\n+    m!(v[..], [ref mut sub @ .., N(4)] => c!(sub, &mut [N], n![0, 1, 2, 3]));\n+    m!(v[..], [ref mut sub @ .., _, _, _, _, _] => c!(sub, &mut [N], &mut n![] as &mut [N]));\n+    m!(v[..], [_, _, _, _, _, ref mut sub @ ..] => c!(sub, &mut [N], &mut n![] as &mut [N]));\n+    m!(vc[..], [x, .., y] => c!((x, y), (u8, u8), (0, 4)));\n+\n+    // Matching slices using default binding modes (&):\n+    let [..] = &v[..]; // Always matches.\n+    m!(&v[..], [N(0), sub @ .., N(4)] => c!(sub, &[N], n![1, 2, 3]));\n+    m!(&v[..], [N(0), sub @ ..] => c!(sub, &[N], n![1, 2, 3, 4]));\n+    m!(&v[..], [sub @ .., N(4)] => c!(sub, &[N], n![0, 1, 2, 3]));\n+    m!(&v[..], [sub @ .., _, _, _, _, _] => c!(sub, &[N], &n![] as &[N]));\n+    m!(&v[..], [_, _, _, _, _, sub @ ..] => c!(sub, &[N], &n![] as &[N]));\n+    m!(&vc[..], [x, .., y] => c!((x, y), (&u8, &u8), (&0, &4)));\n+\n+    // Matching slices using default binding modes (&mut):\n+    let [..] = &mut v[..]; // Always matches.\n+    m!(&mut v[..], [N(0), sub @ .., N(4)] => c!(sub, &mut [N], n![1, 2, 3]));\n+    m!(&mut v[..], [N(0), sub @ ..] => c!(sub, &mut [N], n![1, 2, 3, 4]));\n+    m!(&mut v[..], [sub @ .., N(4)] => c!(sub, &mut [N], n![0, 1, 2, 3]));\n+    m!(&mut v[..], [sub @ .., _, _, _, _, _] => c!(sub, &mut [N], &mut n![] as &mut [N]));\n+    m!(&mut v[..], [_, _, _, _, _, sub @ ..] => c!(sub, &mut [N], &mut n![] as &mut [N]));\n+    m!(&mut vc[..], [x, .., y] => c!((x, y), (&mut u8, &mut u8), (&mut 0, &mut 4)));\n+}\n+\n+fn arrays() {\n+    let mut v = n![0, 1, 2, 3, 4];\n+    let vc = [0, 1, 2, 3, 4];\n+\n+    // Matching arrays by value:\n+    m!(v.clone(), [N(0), sub @ .., N(4)] => c!(sub, [N; 3], n![1, 2, 3]));\n+    m!(v.clone(), [N(0), sub @ ..] => c!(sub, [N; 4], n![1, 2, 3, 4]));\n+    m!(v.clone(), [sub @ .., N(4)] => c!(sub, [N; 4], n![0, 1, 2, 3]));\n+    m!(v.clone(), [sub @ .., _, _, _, _, _] => c!(sub, [N; 0], n![] as [N; 0]));\n+    m!(v.clone(), [_, _, _, _, _, sub @ ..] => c!(sub, [N; 0], n![] as [N; 0]));\n+    m!(v.clone(), [x, .., y] => c!((x, y), (N, N), (N(0), N(4))));\n+    m!(v.clone(), [..] => ());\n+\n+    // Matching arrays by ref patterns:\n+    m!(v, [N(0), ref sub @ .., N(4)] => c!(sub, &[N; 3], &n![1, 2, 3]));\n+    m!(v, [N(0), ref sub @ ..] => c!(sub, &[N; 4], &n![1, 2, 3, 4]));\n+    m!(v, [ref sub @ .., N(4)] => c!(sub, &[N; 4], &n![0, 1, 2, 3]));\n+    m!(v, [ref sub @ .., _, _, _, _, _] => c!(sub, &[N; 0], &n![] as &[N; 0]));\n+    m!(v, [_, _, _, _, _, ref sub @ ..] => c!(sub, &[N; 0], &n![] as &[N; 0]));\n+    m!(vc, [x, .., y] => c!((x, y), (u8, u8), (0, 4)));\n+\n+    // Matching arrays by ref mut patterns:\n+    m!(v, [N(0), ref mut sub @ .., N(4)] => c!(sub, &mut [N; 3], &mut n![1, 2, 3]));\n+    m!(v, [N(0), ref mut sub @ ..] => c!(sub, &mut [N; 4], &mut n![1, 2, 3, 4]));\n+    m!(v, [ref mut sub @ .., N(4)] => c!(sub, &mut [N; 4], &mut n![0, 1, 2, 3]));\n+    m!(v, [ref mut sub @ .., _, _, _, _, _] => c!(sub, &mut [N; 0], &mut n![] as &mut [N; 0]));\n+    m!(v, [_, _, _, _, _, ref mut sub @ ..] => c!(sub, &mut [N; 0], &mut n![] as &mut [N; 0]));\n+\n+    // Matching arrays by default binding modes (&):\n+    m!(&v, [N(0), sub @ .., N(4)] => c!(sub, &[N; 3], &n![1, 2, 3]));\n+    m!(&v, [N(0), sub @ ..] => c!(sub, &[N; 4], &n![1, 2, 3, 4]));\n+    m!(&v, [sub @ .., N(4)] => c!(sub, &[N; 4], &n![0, 1, 2, 3]));\n+    m!(&v, [sub @ .., _, _, _, _, _] => c!(sub, &[N; 0], &n![] as &[N; 0]));\n+    m!(&v, [_, _, _, _, _, sub @ ..] => c!(sub, &[N; 0], &n![] as &[N; 0]));\n+    m!(&v, [..] => ());\n+    m!(&v, [x, .., y] => c!((x, y), (&N, &N), (&N(0), &N(4))));\n+\n+    // Matching arrays by default binding modes (&mut):\n+    m!(&mut v, [N(0), sub @ .., N(4)] => c!(sub, &mut [N; 3], &mut n![1, 2, 3]));\n+    m!(&mut v, [N(0), sub @ ..] => c!(sub, &mut [N; 4], &mut n![1, 2, 3, 4]));\n+    m!(&mut v, [sub @ .., N(4)] => c!(sub, &mut [N; 4], &mut n![0, 1, 2, 3]));\n+    m!(&mut v, [sub @ .., _, _, _, _, _] => c!(sub, &mut [N; 0], &mut n![] as &[N; 0]));\n+    m!(&mut v, [_, _, _, _, _, sub @ ..] => c!(sub, &mut [N; 0], &mut n![] as &[N; 0]));\n+    m!(&mut v, [..] => ());\n+    m!(&mut v, [x, .., y] => c!((x, y), (&mut N, &mut N), (&mut N(0), &mut N(4))));\n+}"}, {"sha": "7f14a033688bdb4f5e9ab32717c4ab9b6e4b3ac9", "filename": "src/test/ui/associated-type-bounds/duplicate.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,6 +3,8 @@ warning: the feature `impl_trait_in_bindings` is incomplete and may cause the co\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n   --> $DIR/duplicate.rs:12:36"}, {"sha": "1b3975f0999b656dc5aa383f24a05a0c1a9a0e99", "filename": "src/test/ui/associated-type-bounds/dyn-lcsit.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-lcsit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-lcsit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fdyn-lcsit.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,4 +3,6 @@ warning: the feature `impl_trait_in_bindings` is incomplete and may cause the co\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n "}, {"sha": "7c4349541e000f5929b963241260174b6c72acf3", "filename": "src/test/ui/associated-type-bounds/lcsit.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fassociated-type-bounds%2Flcsit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fassociated-type-bounds%2Flcsit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Flcsit.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,4 +3,6 @@ warning: the feature `impl_trait_in_bindings` is incomplete and may cause the co\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n "}, {"sha": "422a5a6394f8e71fc2948427cee8a3f72b36a3a9", "filename": "src/test/ui/async-await/await-keyword/2015-edition-error-various-positions.rs", "status": "renamed", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.rs?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -1,4 +1,4 @@\n-#![feature(async_await, await_macro)]\n+#![feature(async_await)]\n #![allow(non_camel_case_types)]\n #![deny(keyword_idents)]\n \n@@ -29,6 +29,9 @@ macro_rules! await {\n }\n \n fn main() {\n+    await!(); //~ ERROR `await` is a keyword in the 2018 edition\n+    //~^ WARN this was previously accepted by the compiler\n+\n     match await { await => {} } //~ ERROR `await` is a keyword in the 2018 edition\n     //~^ ERROR `await` is a keyword in the 2018 edition\n     //~^^ WARN this was previously accepted by the compiler", "previous_filename": "src/test/ui/async-await/await-keyword/2015-edition-error-in-non-macro-position.rs"}, {"sha": "8af0110169ebd2deaee4a15617e0400a71113cf8", "filename": "src/test/ui/async-await/await-keyword/2015-edition-error-various-positions.stderr", "status": "renamed", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2015-edition-error-various-positions.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -1,19 +1,19 @@\n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-in-non-macro-position.rs:6:13\n+  --> $DIR/2015-edition-error-various-positions.rs:6:13\n    |\n LL |     pub mod await {\n    |             ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n note: lint level defined here\n-  --> $DIR/2015-edition-error-in-non-macro-position.rs:3:9\n+  --> $DIR/2015-edition-error-various-positions.rs:3:9\n    |\n LL | #![deny(keyword_idents)]\n    |         ^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-in-non-macro-position.rs:8:20\n+  --> $DIR/2015-edition-error-various-positions.rs:8:20\n    |\n LL |         pub struct await;\n    |                    ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -22,7 +22,7 @@ LL |         pub struct await;\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-in-non-macro-position.rs:12:16\n+  --> $DIR/2015-edition-error-various-positions.rs:12:16\n    |\n LL | use outer_mod::await::await;\n    |                ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -31,7 +31,7 @@ LL | use outer_mod::await::await;\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-in-non-macro-position.rs:12:23\n+  --> $DIR/2015-edition-error-various-positions.rs:12:23\n    |\n LL | use outer_mod::await::await;\n    |                       ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -40,7 +40,7 @@ LL | use outer_mod::await::await;\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-in-non-macro-position.rs:17:14\n+  --> $DIR/2015-edition-error-various-positions.rs:17:14\n    |\n LL | struct Foo { await: () }\n    |              ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -49,7 +49,7 @@ LL | struct Foo { await: () }\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-in-non-macro-position.rs:21:15\n+  --> $DIR/2015-edition-error-various-positions.rs:21:15\n    |\n LL | impl Foo { fn await() {} }\n    |               ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -58,7 +58,7 @@ LL | impl Foo { fn await() {} }\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-in-non-macro-position.rs:25:14\n+  --> $DIR/2015-edition-error-various-positions.rs:25:14\n    |\n LL | macro_rules! await {\n    |              ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -67,7 +67,16 @@ LL | macro_rules! await {\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-in-non-macro-position.rs:32:11\n+  --> $DIR/2015-edition-error-various-positions.rs:32:5\n+   |\n+LL |     await!();\n+   |     ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n+\n+error: `await` is a keyword in the 2018 edition\n+  --> $DIR/2015-edition-error-various-positions.rs:35:11\n    |\n LL |     match await { await => {} }\n    |           ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n@@ -76,13 +85,13 @@ LL |     match await { await => {} }\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n error: `await` is a keyword in the 2018 edition\n-  --> $DIR/2015-edition-error-in-non-macro-position.rs:32:19\n+  --> $DIR/2015-edition-error-various-positions.rs:35:19\n    |\n LL |     match await { await => {} }\n    |                   ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #49716 <https://github.com/rust-lang/rust/issues/49716>\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 10 previous errors\n ", "previous_filename": "src/test/ui/async-await/await-keyword/2015-edition-error-in-non-macro-position.stderr"}, {"sha": "e620c27f9e36de8bafa376753bfa452718103320", "filename": "src/test/ui/async-await/await-keyword/2018-edition-error.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.rs?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -9,4 +9,8 @@ mod outer_mod {\n use self::outer_mod::await::await; //~ ERROR expected identifier\n     //~^ ERROR expected identifier, found reserved keyword `await`\n \n-fn main() {}\n+macro_rules! await { () => {}; } //~ ERROR expected identifier, found reserved keyword `await`\n+\n+fn main() {\n+    await!(); //~ ERROR expected expression, found `)`\n+}"}, {"sha": "9304928cfde5d8183bae99410a6dc3f4136e2a87", "filename": "src/test/ui/async-await/await-keyword/2018-edition-error.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2F2018-edition-error.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -38,5 +38,21 @@ help: you can escape reserved keywords to use them as identifiers\n LL | use self::outer_mod::await::r#await;\n    |                             ^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: expected identifier, found reserved keyword `await`\n+  --> $DIR/2018-edition-error.rs:12:14\n+   |\n+LL | macro_rules! await { () => {}; }\n+   |              ^^^^^ expected identifier, found reserved keyword\n+help: you can escape reserved keywords to use them as identifiers\n+   |\n+LL | macro_rules! r#await { () => {}; }\n+   |              ^^^^^^^\n+\n+error: expected expression, found `)`\n+  --> $DIR/2018-edition-error.rs:15:12\n+   |\n+LL |     await!();\n+   |            ^ expected expression\n+\n+error: aborting due to 6 previous errors\n "}, {"sha": "25da337c58798c2542af2b2bbb1c2530cdfa7cda", "filename": "src/test/ui/async-await/await-keyword/incorrect-syntax-suggestions.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.rs?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -104,6 +104,31 @@ fn foo25() -> Result<(), ()> {\n     foo()\n }\n \n+async fn foo26() -> Result<(), ()> {\n+    let _ = await!(bar()); //~ ERROR incorrect use of `await`\n+    Ok(())\n+}\n+async fn foo27() -> Result<(), ()> {\n+    let _ = await!(bar())?; //~ ERROR incorrect use of `await`\n+    Ok(())\n+}\n+fn foo28() -> Result<(), ()> {\n+    fn foo() -> Result<(), ()> {\n+        let _ = await!(bar())?; //~ ERROR incorrect use of `await`\n+        //~^ ERROR `await` is only allowed inside `async` functions\n+        Ok(())\n+    }\n+    foo()\n+}\n+fn foo29() -> Result<(), ()> {\n+    let foo = || {\n+        let _ = await!(bar())?; //~ ERROR incorrect use of `await`\n+        //~^ ERROR `await` is only allowed inside `async` functions\n+        Ok(())\n+    };\n+    foo()\n+}\n+\n fn main() {\n     match await { await => () }\n     //~^ ERROR expected expression, found `=>`"}, {"sha": "db86d3d5d03ba8ac79fe7ad24a7badf1edd73741", "filename": "src/test/ui/async-await/await-keyword/incorrect-syntax-suggestions.stderr", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -88,22 +88,46 @@ error: incorrect use of `await`\n LL |     let _ = bar().await()?;\n    |                        ^^ help: `await` is not a method call, remove the parentheses\n \n+error: incorrect use of `await`\n+  --> $DIR/incorrect-syntax-suggestions.rs:108:13\n+   |\n+LL |     let _ = await!(bar());\n+   |             ^^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n+\n+error: incorrect use of `await`\n+  --> $DIR/incorrect-syntax-suggestions.rs:112:13\n+   |\n+LL |     let _ = await!(bar())?;\n+   |             ^^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n+\n+error: incorrect use of `await`\n+  --> $DIR/incorrect-syntax-suggestions.rs:117:17\n+   |\n+LL |         let _ = await!(bar())?;\n+   |                 ^^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n+\n+error: incorrect use of `await`\n+  --> $DIR/incorrect-syntax-suggestions.rs:125:17\n+   |\n+LL |         let _ = await!(bar())?;\n+   |                 ^^^^^^^^^^^^^ help: `await` is a postfix operation: `bar().await`\n+\n error: expected expression, found `=>`\n-  --> $DIR/incorrect-syntax-suggestions.rs:108:25\n+  --> $DIR/incorrect-syntax-suggestions.rs:133:25\n    |\n LL |     match await { await => () }\n    |                   ----- ^^ expected expression\n    |                   |\n    |                   while parsing this incorrect await expression\n \n error: incorrect use of `await`\n-  --> $DIR/incorrect-syntax-suggestions.rs:108:11\n+  --> $DIR/incorrect-syntax-suggestions.rs:133:11\n    |\n LL |     match await { await => () }\n    |           ^^^^^^^^^^^^^^^^^^^^^ help: `await` is a postfix operation: `{ await => () }.await`\n \n error: expected one of `.`, `?`, `{`, or an operator, found `}`\n-  --> $DIR/incorrect-syntax-suggestions.rs:111:1\n+  --> $DIR/incorrect-syntax-suggestions.rs:136:1\n    |\n LL |     match await { await => () }\n    |     -----                      - expected one of `.`, `?`, `{`, or an operator here\n@@ -193,6 +217,22 @@ LL |     let foo = || {\n LL |         let _ = bar().await?;\n    |                 ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n+error[E0728]: `await` is only allowed inside `async` functions and blocks\n+  --> $DIR/incorrect-syntax-suggestions.rs:117:17\n+   |\n+LL |     fn foo() -> Result<(), ()> {\n+   |        --- this is not `async`\n+LL |         let _ = await!(bar())?;\n+   |                 ^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+\n+error[E0728]: `await` is only allowed inside `async` functions and blocks\n+  --> $DIR/incorrect-syntax-suggestions.rs:125:17\n+   |\n+LL |     let foo = || {\n+   |               -- this is not `async`\n+LL |         let _ = await!(bar())?;\n+   |                 ^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+\n error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n   --> $DIR/incorrect-syntax-suggestions.rs:18:19\n    |\n@@ -202,6 +242,6 @@ LL |     let _ = await bar()?;\n    = help: the trait `std::ops::Try` is not implemented for `impl std::future::Future`\n    = note: required by `std::ops::Try::into_result`\n \n-error: aborting due to 29 previous errors\n+error: aborting due to 35 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "0996c38b3b6c61f18efcbefa970c498b3457bf8b", "filename": "src/test/ui/async-await/await-keyword/post_expansion_error.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fpost_expansion_error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fpost_expansion_error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fpost_expansion_error.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -2,9 +2,7 @@ error: expected expression, found `)`\n   --> $DIR/post_expansion_error.rs:8:12\n    |\n LL |     await!()\n-   |     -----  ^ expected expression\n-   |     |\n-   |     while parsing this await macro call\n+   |            ^ expected expression\n \n error: aborting due to previous error\n "}, {"sha": "b9cd3903513a47492bb528adf9b61f50ee7a4ad3", "filename": "src/test/ui/async-await/await-macro.rs", "status": "removed", "additions": 0, "deletions": 230, "changes": 230, "blob_url": "https://github.com/rust-lang/rust/blob/dddb7fca09dc817ba275602b950bb81a9032fb6d/src%2Ftest%2Fui%2Fasync-await%2Fawait-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dddb7fca09dc817ba275602b950bb81a9032fb6d/src%2Ftest%2Fui%2Fasync-await%2Fawait-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-macro.rs?ref=dddb7fca09dc817ba275602b950bb81a9032fb6d", "patch": "@@ -1,230 +0,0 @@\n-// run-pass\n-\n-// edition:2018\n-// aux-build:arc_wake.rs\n-\n-#![feature(async_await, async_closure, await_macro)]\n-\n-extern crate arc_wake;\n-\n-use std::pin::Pin;\n-use std::future::Future;\n-use std::sync::{\n-    Arc,\n-    atomic::{self, AtomicUsize},\n-};\n-use std::task::{Context, Poll};\n-use arc_wake::ArcWake;\n-\n-struct Counter {\n-    wakes: AtomicUsize,\n-}\n-\n-impl ArcWake for Counter {\n-    fn wake(self: Arc<Self>) {\n-        Self::wake_by_ref(&self)\n-    }\n-    fn wake_by_ref(arc_self: &Arc<Self>) {\n-        arc_self.wakes.fetch_add(1, atomic::Ordering::SeqCst);\n-    }\n-}\n-\n-struct WakeOnceThenComplete(bool);\n-\n-fn wake_and_yield_once() -> WakeOnceThenComplete { WakeOnceThenComplete(false) }\n-\n-impl Future for WakeOnceThenComplete {\n-    type Output = ();\n-    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {\n-        if self.0 {\n-            Poll::Ready(())\n-        } else {\n-            cx.waker().wake_by_ref();\n-            self.0 = true;\n-            Poll::Pending\n-        }\n-    }\n-}\n-\n-fn async_block(x: u8) -> impl Future<Output = u8> {\n-    async move {\n-        await!(wake_and_yield_once());\n-        x\n-    }\n-}\n-\n-fn async_block_with_borrow_named_lifetime<'a>(x: &'a u8) -> impl Future<Output = u8> + 'a {\n-    async move {\n-        await!(wake_and_yield_once());\n-        *x\n-    }\n-}\n-\n-fn async_nonmove_block(x: u8) -> impl Future<Output = u8> {\n-    async move {\n-        let future = async {\n-            await!(wake_and_yield_once());\n-            x\n-        };\n-        await!(future)\n-    }\n-}\n-\n-fn async_closure(x: u8) -> impl Future<Output = u8> {\n-    (async move |x: u8| -> u8 {\n-        await!(wake_and_yield_once());\n-        x\n-    })(x)\n-}\n-\n-fn async_closure_in_unsafe_block(x: u8) -> impl Future<Output = u8> {\n-    (unsafe {\n-        async move |x: u8| unsafe_fn(await!(unsafe_async_fn(x)))\n-    })(x)\n-}\n-\n-async fn async_fn(x: u8) -> u8 {\n-    await!(wake_and_yield_once());\n-    x\n-}\n-\n-async fn generic_async_fn<T>(x: T) -> T {\n-    await!(wake_and_yield_once());\n-    x\n-}\n-\n-async fn async_fn_with_borrow(x: &u8) -> u8 {\n-    await!(wake_and_yield_once());\n-    *x\n-}\n-\n-async fn async_fn_with_borrow_named_lifetime<'a>(x: &'a u8) -> u8 {\n-    await!(wake_and_yield_once());\n-    *x\n-}\n-\n-fn async_fn_with_impl_future_named_lifetime<'a>(x: &'a u8) -> impl Future<Output = u8> + 'a {\n-    async move {\n-        await!(wake_and_yield_once());\n-        *x\n-    }\n-}\n-\n-/* FIXME(cramertj) support when `existential type T<'a, 'b>:;` works\n-async fn async_fn_multiple_args(x: &u8, _y: &u8) -> u8 {\n-    await!(wake_and_yield_once());\n-    *x\n-}\n-*/\n-\n-async fn async_fn_multiple_args_named_lifetime<'a>(x: &'a u8, _y: &'a u8) -> u8 {\n-    await!(wake_and_yield_once());\n-    *x\n-}\n-\n-fn async_fn_with_internal_borrow(y: u8) -> impl Future<Output = u8> {\n-    async move {\n-        await!(async_fn_with_borrow_named_lifetime(&y))\n-    }\n-}\n-\n-async unsafe fn unsafe_async_fn(x: u8) -> u8 {\n-    await!(wake_and_yield_once());\n-    x\n-}\n-\n-unsafe fn unsafe_fn(x: u8) -> u8 {\n-    x\n-}\n-\n-fn async_block_in_unsafe_block(x: u8) -> impl Future<Output = u8> {\n-    unsafe {\n-        async move {\n-            unsafe_fn(await!(unsafe_async_fn(x)))\n-        }\n-    }\n-}\n-\n-struct Foo;\n-\n-trait Bar {\n-    fn foo() {}\n-}\n-\n-impl Foo {\n-    async fn async_assoc_item(x: u8) -> u8 {\n-        unsafe {\n-            await!(unsafe_async_fn(x))\n-        }\n-    }\n-\n-    async unsafe fn async_unsafe_assoc_item(x: u8) -> u8 {\n-        await!(unsafe_async_fn(x))\n-    }\n-}\n-\n-fn test_future_yields_once_then_returns<F, Fut>(f: F)\n-where\n-    F: FnOnce(u8) -> Fut,\n-    Fut: Future<Output = u8>,\n-{\n-    let mut fut = Box::pin(f(9));\n-    let counter = Arc::new(Counter { wakes: AtomicUsize::new(0) });\n-    let waker = ArcWake::into_waker(counter.clone());\n-    let mut cx = Context::from_waker(&waker);\n-    assert_eq!(0, counter.wakes.load(atomic::Ordering::SeqCst));\n-    assert_eq!(Poll::Pending, fut.as_mut().poll(&mut cx));\n-    assert_eq!(1, counter.wakes.load(atomic::Ordering::SeqCst));\n-    assert_eq!(Poll::Ready(9), fut.as_mut().poll(&mut cx));\n-}\n-\n-fn main() {\n-    macro_rules! test {\n-        ($($fn_name:expr,)*) => { $(\n-            test_future_yields_once_then_returns($fn_name);\n-        )* }\n-    }\n-\n-    macro_rules! test_with_borrow {\n-        ($($fn_name:expr,)*) => { $(\n-            test_future_yields_once_then_returns(|x| {\n-                async move {\n-                    await!($fn_name(&x))\n-                }\n-            });\n-        )* }\n-    }\n-\n-    test! {\n-        async_block,\n-        async_nonmove_block,\n-        async_closure,\n-        async_closure_in_unsafe_block,\n-        async_fn,\n-        generic_async_fn,\n-        async_fn_with_internal_borrow,\n-        async_block_in_unsafe_block,\n-        Foo::async_assoc_item,\n-        |x| {\n-            async move {\n-                unsafe { await!(unsafe_async_fn(x)) }\n-            }\n-        },\n-        |x| {\n-            async move {\n-                unsafe { await!(Foo::async_unsafe_assoc_item(x)) }\n-            }\n-        },\n-    }\n-    test_with_borrow! {\n-        async_block_with_borrow_named_lifetime,\n-        async_fn_with_borrow,\n-        async_fn_with_borrow_named_lifetime,\n-        async_fn_with_impl_future_named_lifetime,\n-        |x| {\n-            async move {\n-                await!(async_fn_multiple_args_named_lifetime(x, x))\n-            }\n-        },\n-    }\n-}"}, {"sha": "cd479e256b4e55e0215724f197abaf72633e351e", "filename": "src/test/ui/async-await/multiple-lifetimes/named.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fnamed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fnamed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fnamed.rs?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,7 +3,7 @@\n \n // Test that we can use async fns with multiple arbitrary lifetimes.\n \n-#![feature(arbitrary_self_types, async_await, await_macro)]\n+#![feature(async_await)]\n \n async fn multiple_named_lifetimes<'a, 'b>(_: &'a u8, _: &'b u8) {}\n "}, {"sha": "c4ad38a571170d7db9ce141f884957c73b7f8e46", "filename": "src/test/ui/const-generics/apit-with-const-param.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fapit-with-const-param.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,4 +3,6 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n "}, {"sha": "5a5eaba0b197e58143e994b49e1e1715c60a4908", "filename": "src/test/ui/const-generics/array-wrapper-struct-ctor.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Farray-wrapper-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Farray-wrapper-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-wrapper-struct-ctor.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,4 +3,6 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n "}, {"sha": "51de98ad5237af9e799ef1e759bcb7e2108d2750", "filename": "src/test/ui/const-generics/broken-mir-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-1.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,4 +3,6 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n "}, {"sha": "b72bc6a46a05615089b5cfd17945bf0c7f5bca8b", "filename": "src/test/ui/const-generics/broken-mir-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,6 +3,8 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0277]: arrays only have std trait implementations for lengths 0..=32\n   --> $DIR/broken-mir-2.rs:7:36"}, {"sha": "32adc63156a37b6dc2193d89e0a52bffc470b182", "filename": "src/test/ui/const-generics/cannot-infer-const-args.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-const-args.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,6 +3,8 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0282]: type annotations needed\n   --> $DIR/cannot-infer-const-args.rs:9:5"}, {"sha": "00a98e3ba9b3ecf2e490a45ef4790fb47a8ee396", "filename": "src/test/ui/const-generics/cannot-infer-type-for-const-param.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcannot-infer-type-for-const-param.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,4 +3,6 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n "}, {"sha": "0392488fce1c75bc6f14a908bd89f10d7e5fa6d5", "filename": "src/test/ui/const-generics/concrete-const-as-fn-arg.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-as-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-as-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-as-fn-arg.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,4 +3,6 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n "}, {"sha": "5e730b5643a7dcff7bbf4c423c5887c5984efed5", "filename": "src/test/ui/const-generics/concrete-const-impl-method.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-impl-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-impl-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconcrete-const-impl-method.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,4 +3,6 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n "}, {"sha": "c9e22ab39018b43802116432fc4952a7d8c538dc", "filename": "src/test/ui/const-generics/condition-in-trait-const-arg.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fcondition-in-trait-const-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fcondition-in-trait-const-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcondition-in-trait-const-arg.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,4 +3,6 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n "}, {"sha": "61ba9cdaf55b4f4d273e76248a7b85917af6857b", "filename": "src/test/ui/const-generics/const-arg-in-fn.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-fn.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,4 +3,6 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n "}, {"sha": "7311e27c289f764adec0e5c78cf01965d8aca07e", "filename": "src/test/ui/const-generics/const-expression-parameter.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -9,6 +9,8 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "3437ed33d0c6f660d4ae56a3febae514f718f6df", "filename": "src/test/ui/const-generics/const-fn-with-const-param.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -1,9 +1,3 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n-  --> $DIR/const-fn-with-const-param.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-\n error: const parameters are not permitted in `const fn`\n   --> $DIR/const-fn-with-const-param.rs:4:1\n    |\n@@ -13,5 +7,13 @@ LL | |     X\n LL | | }\n    | |_^\n \n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/const-fn-with-const-param.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n error: aborting due to previous error\n "}, {"sha": "5c7b6a70d3b3f99d4a6e76f5eaa1671f5cf9bb6a", "filename": "src/test/ui/const-generics/const-generic-array-wrapper.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-array-wrapper.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,4 +3,6 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n "}, {"sha": "5bdbfd8ff1f3907ba6dce0faaa0004261a8c2c76", "filename": "src/test/ui/const-generics/const-param-before-other-params.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -1,5 +1,4 @@\n #![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n \n fn bar<const X: (), 'a>(_: &'a ()) {\n     //~^ ERROR lifetime parameters must be declared prior to const parameters"}, {"sha": "87622f7e50010d5c57a282cd515164afeccffcd3", "filename": "src/test/ui/const-generics/const-param-before-other-params.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -1,17 +1,11 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n-  --> $DIR/const-param-before-other-params.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-\n error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/const-param-before-other-params.rs:4:21\n+  --> $DIR/const-param-before-other-params.rs:3:21\n    |\n LL | fn bar<const X: (), 'a>(_: &'a ()) {\n    |       --------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, const X: ()>`\n \n error: type parameters must be declared prior to const parameters\n-  --> $DIR/const-param-before-other-params.rs:8:21\n+  --> $DIR/const-param-before-other-params.rs:7:21\n    |\n LL | fn foo<const X: (), T>(_: &T) {\n    |       --------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const X: ()>`"}, {"sha": "90ca85cd62f92bf29c45df22a571b48e27f8af88", "filename": "src/test/ui/const-generics/const-param-from-outer-fn.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -1,9 +1,3 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n-  --> $DIR/const-param-from-outer-fn.rs:1:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-\n error[E0401]: can't use generic parameters from outer function\n   --> $DIR/const-param-from-outer-fn.rs:6:9\n    |\n@@ -14,6 +8,14 @@ LL |     fn bar() -> u32 {\n LL |         X\n    |         ^ use of generic parameter from outer function\n \n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/const-param-from-outer-fn.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0401`."}, {"sha": "c45523d2fa6f6aac6f441f04456f35d1fe18534c", "filename": "src/test/ui/const-generics/const-param-in-trait.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-in-trait.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,4 +3,6 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n "}, {"sha": "142efe45ac2d7ce8a042fdbad6dd7be1b53bf89d", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -1,14 +1,16 @@\n+error[E0671]: const parameters cannot depend on type parameters\n+  --> $DIR/const-param-type-depends-on-type-param.rs:9:34\n+   |\n+LL | pub struct Dependent<T, const X: T>([(); X]);\n+   |                                  ^ const parameter depends on type parameter\n+\n warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n   --> $DIR/const-param-type-depends-on-type-param.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n-\n-error[E0671]: const parameters cannot depend on type parameters\n-  --> $DIR/const-param-type-depends-on-type-param.rs:9:34\n    |\n-LL | pub struct Dependent<T, const X: T>([(); X]);\n-   |                                  ^ const parameter depends on type parameter\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0392]: parameter `T` is never used\n   --> $DIR/const-param-type-depends-on-type-param.rs:9:22"}, {"sha": "fddb06981bc734754c1093921f252ec01acba8c6", "filename": "src/test/ui/const-generics/const-parameter-uppercase-lint.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-parameter-uppercase-lint.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,6 +3,8 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error: const parameter `x` should have an upper case name\n   --> $DIR/const-parameter-uppercase-lint.rs:6:15"}, {"sha": "ca3d7810ca530566aefa86e8470053635e8e0b18", "filename": "src/test/ui/const-generics/const-types.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fconst-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fconst-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-types.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,4 +3,6 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n "}, {"sha": "08a9037a207b3a79094754a65922efea60701724", "filename": "src/test/ui/const-generics/derive-debug-array-wrapper.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,6 +3,8 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0277]: arrays only have std trait implementations for lengths 0..=32\n   --> $DIR/derive-debug-array-wrapper.rs:6:5"}, {"sha": "d7f8f1364eef84346917fbc377dbf0772ba3b6bf", "filename": "src/test/ui/const-generics/fn-taking-const-generic-array.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Ffn-taking-const-generic-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Ffn-taking-const-generic-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-taking-const-generic-array.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,4 +3,6 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n "}, {"sha": "1eae9c4038959a9232b7f80dd8dbeb87a8a94693", "filename": "src/test/ui/const-generics/impl-const-generic-struct.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-const-generic-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-const-generic-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fimpl-const-generic-struct.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,4 +3,6 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n "}, {"sha": "6aa1c23176bfaf44d5eff49db12fe6ccc2590997", "filename": "src/test/ui/const-generics/incorrect-number-of-const-args.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fincorrect-number-of-const-args.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,6 +3,8 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0107]: wrong number of const arguments: expected 2, found 1\n   --> $DIR/incorrect-number-of-const-args.rs:9:5"}, {"sha": "3e0cd8168818f426f3932e95c9edd88e0e1681ea", "filename": "src/test/ui/const-generics/issue-60818-struct-constructors.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fissue-60818-struct-constructors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fissue-60818-struct-constructors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-60818-struct-constructors.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,4 +3,6 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n "}, {"sha": "949fa896d8780bfee6151da612a488bed1f0e51b", "filename": "src/test/ui/const-generics/issue-61336-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336-1.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,6 +3,8 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error: array lengths can't depend on generic parameters\n   --> $DIR/issue-61336-1.rs:5:9"}, {"sha": "63f86c81b1e7f0a727778c44e2afef0c33e3abb4", "filename": "src/test/ui/const-generics/issue-61336-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336-2.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,6 +3,8 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error: array lengths can't depend on generic parameters\n   --> $DIR/issue-61336-2.rs:5:9"}, {"sha": "f96e8e02d4ec03ca347561411e397ed1b8cb0c8f", "filename": "src/test/ui/const-generics/issue-61336.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61336.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,6 +3,8 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error: array lengths can't depend on generic parameters\n   --> $DIR/issue-61336.rs:5:9"}, {"sha": "166bd3c2d3b67a65d717b383bee81344d1c55acf", "filename": "src/test/ui/const-generics/issue-61422.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61422.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61422.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61422.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,4 +3,6 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n "}, {"sha": "bd7ae49193eed357941c657928ed0bc37b6efb6f", "filename": "src/test/ui/const-generics/mut-ref-const-param-array.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fmut-ref-const-param-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fmut-ref-const-param-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmut-ref-const-param-array.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,4 +3,6 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n "}, {"sha": "dfa2557e9f6f8479da5fc852a40ac943b169fe2c", "filename": "src/test/ui/const-generics/struct-with-invalid-const-param.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -1,14 +1,16 @@\n+error[E0573]: expected type, found const parameter `C`\n+  --> $DIR/struct-with-invalid-const-param.rs:4:23\n+   |\n+LL | struct S<const C: u8>(C);\n+   |                       ^ help: a struct with a similar name exists: `S`\n+\n warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n   --> $DIR/struct-with-invalid-const-param.rs:1:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n-\n-error[E0573]: expected type, found const parameter `C`\n-  --> $DIR/struct-with-invalid-const-param.rs:4:23\n    |\n-LL | struct S<const C: u8>(C);\n-   |                       ^ help: a struct with a similar name exists: `S`\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "156eddafff0104c2b029a6f81484d783df1df9f5", "filename": "src/test/ui/const-generics/transparent-maybeunit-array-wrapper.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftransparent-maybeunit-array-wrapper.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,4 +3,6 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n "}, {"sha": "3c05a354440f0847b53d1e10f016081e647e9eb8", "filename": "src/test/ui/const-generics/uninferred-consts-during-codegen-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-1.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,4 +3,6 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n "}, {"sha": "f27fc531031f9b9e95b7520955a4d043e327c247", "filename": "src/test/ui/const-generics/uninferred-consts-during-codegen-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funinferred-consts-during-codegen-2.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,4 +3,6 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n "}, {"sha": "27f023eeeff4c465544353db75df9fab3a440da8", "filename": "src/test/ui/const-generics/unused-const-param.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused-const-param.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,4 +3,6 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n "}, {"sha": "4ccfb42098423b6a5c611af945cfa9269d397bdd", "filename": "src/test/ui/consts/const-fn-type-name-any.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-type-name-any.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-type-name-any.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-type-name-any.rs?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -0,0 +1,29 @@\n+// run-pass\n+\n+#![feature(const_fn)]\n+#![feature(const_type_name)]\n+#![allow(dead_code)]\n+\n+const fn type_name_wrapper<T>(_: &T) -> &'static str {\n+    std::any::type_name::<T>()\n+}\n+\n+struct Struct<TA, TB, TC> {\n+    a: TA,\n+    b: TB,\n+    c: TC,\n+}\n+\n+type StructInstantiation = Struct<i8, f64, bool>;\n+\n+const CONST_STRUCT: StructInstantiation = StructInstantiation { a: 12, b: 13.7, c: false };\n+\n+const CONST_STRUCT_NAME: &'static str = type_name_wrapper(&CONST_STRUCT);\n+\n+fn main() {\n+    let non_const_struct = StructInstantiation { a: 87, b: 65.99, c: true };\n+\n+    let non_const_struct_name = type_name_wrapper(&non_const_struct);\n+\n+    assert_eq!(CONST_STRUCT_NAME, non_const_struct_name);\n+}"}, {"sha": "9309ee99064c968db3cc8a8a1940d6f27f5aac45", "filename": "src/test/ui/error-codes/E0730.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Ferror-codes%2FE0730.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Ferror-codes%2FE0730.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0730.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,6 +3,8 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0730]: cannot pattern-match on an array without a fixed length\n   --> $DIR/E0730.rs:6:9"}, {"sha": "81754c8f706b59d5feeabfab13a69228e845408e", "filename": "src/test/ui/existential_types/existential_type_const.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fexistential_types%2Fexistential_type_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fexistential_types%2Fexistential_type_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fexistential_type_const.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,4 +3,6 @@ warning: the feature `impl_trait_in_bindings` is incomplete and may cause the co\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n "}, {"sha": "291db9ba41370637b608f5981a73b3d12b2c50cc", "filename": "src/test/ui/feature-gate/await-macro.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dddb7fca09dc817ba275602b950bb81a9032fb6d/src%2Ftest%2Fui%2Ffeature-gate%2Fawait-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dddb7fca09dc817ba275602b950bb81a9032fb6d/src%2Ftest%2Fui%2Ffeature-gate%2Fawait-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fawait-macro.rs?ref=dddb7fca09dc817ba275602b950bb81a9032fb6d", "patch": "@@ -1,12 +0,0 @@\n-// gate-test-await_macro\n-// edition:2018\n-\n-#![feature(async_await)]\n-\n-async fn bar() {}\n-\n-async fn foo() {\n-    await!(bar()); //~ ERROR `await!(<expr>)` macro syntax is unstable, and will soon be removed\n-}\n-\n-fn main() {}"}, {"sha": "0d4f03e211b52d98b610b07aef2ca83fc01e4ddc", "filename": "src/test/ui/feature-gate/await-macro.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dddb7fca09dc817ba275602b950bb81a9032fb6d/src%2Ftest%2Fui%2Ffeature-gate%2Fawait-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dddb7fca09dc817ba275602b950bb81a9032fb6d/src%2Ftest%2Fui%2Ffeature-gate%2Fawait-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fawait-macro.stderr?ref=dddb7fca09dc817ba275602b950bb81a9032fb6d", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: `await!(<expr>)` macro syntax is unstable, and will soon be removed in favor of `<expr>.await` syntax.\n-  --> $DIR/await-macro.rs:9:5\n-   |\n-LL |     await!(bar());\n-   |     ^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/50547\n-   = help: add `#![feature(await_macro)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "b3e4fef08c20ecd1b36cd8a37ee3f9a94216b84a", "filename": "src/test/ui/hygiene/generic_params.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fhygiene%2Fgeneric_params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fhygiene%2Fgeneric_params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fgeneric_params.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,4 +3,6 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(decl_macro, rustc_attrs, const_generics)]\n    |                                     ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n "}, {"sha": "c9aac6609a184c99b718f71142dcf1b09924f5c7", "filename": "src/test/ui/hygiene/issue-61574-const-parameters.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fhygiene%2Fissue-61574-const-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fhygiene%2Fissue-61574-const-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fissue-61574-const-parameters.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,4 +3,6 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n "}, {"sha": "629089d8c5c5ddc8a460f0e47a3e5eca3eddf994", "filename": "src/test/ui/impl-trait-in-bindings.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fimpl-trait-in-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fimpl-trait-in-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait-in-bindings.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,4 +3,6 @@ warning: the feature `impl_trait_in_bindings` is incomplete and may cause the co\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n "}, {"sha": "ad108173a7a1e79e558c125226cead8efbfc1fb1", "filename": "src/test/ui/impl-trait/bindings-opaque.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,6 +3,8 @@ warning: the feature `impl_trait_in_bindings` is incomplete and may cause the co\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0599]: no method named `count_ones` found for type `impl std::marker::Copy` in the current scope\n   --> $DIR/bindings-opaque.rs:11:17"}, {"sha": "e93859551978429d83183ce92981a9bfc443bcdb", "filename": "src/test/ui/impl-trait/bindings.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -1,9 +1,3 @@\n-warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n-  --> $DIR/bindings.rs:1:12\n-   |\n-LL | #![feature(impl_trait_in_bindings)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/bindings.rs:5:29\n    |\n@@ -28,6 +22,14 @@ error[E0435]: attempt to use a non-constant value in a constant\n LL |         const foo: impl Clone = x;\n    |                                 ^ non-constant value\n \n+warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n+  --> $DIR/bindings.rs:1:12\n+   |\n+LL | #![feature(impl_trait_in_bindings)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0435`."}, {"sha": "24a687491e529754d88c54dea5485de0a73c657e", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,6 +3,8 @@ warning: the feature `impl_trait_in_bindings` is incomplete and may cause the co\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n   --> $DIR/bound-normalization-fail.rs:30:32"}, {"sha": "229acdb2b144abcf1e5c27717badc0825dacf087", "filename": "src/test/ui/impl-trait/bound-normalization-pass.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,4 +3,6 @@ warning: the feature `impl_trait_in_bindings` is incomplete and may cause the co\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n "}, {"sha": "dd78c7c83134c715d275e6f73890c5534ae017eb", "filename": "src/test/ui/issues/issue-59508-1.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fissues%2Fissue-59508-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Fissues%2Fissue-59508-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59508-1.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -1,14 +1,16 @@\n+error: lifetime parameters must be declared prior to type parameters\n+  --> $DIR/issue-59508-1.rs:12:25\n+   |\n+LL |     pub fn do_things<T, 'a, 'b: 'a>() {\n+   |                     ----^^--^^----- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b: 'a, T>`\n+\n warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n   --> $DIR/issue-59508-1.rs:2:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n-\n-error: lifetime parameters must be declared prior to type parameters\n-  --> $DIR/issue-59508-1.rs:12:25\n    |\n-LL |     pub fn do_things<T, 'a, 'b: 'a>() {\n-   |                     ----^^--^^----- help: reorder the parameters: lifetimes, then types, then consts: `<'a, 'b: 'a, T>`\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "4edc00efc7e722cb37a4bfde5984912ef9c80f2e", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -4,18 +4,6 @@ error: expected one of `,` or `>`, found `&&`\n LL |         true && let 1 = 1\n    |              ^^ expected one of `,` or `>` here\n \n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n-  --> $DIR/disallowed-positions.rs:20:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-\n-warning: the feature `let_chains` is incomplete and may cause the compiler to crash\n-  --> $DIR/disallowed-positions.rs:22:12\n-   |\n-LL | #![feature(let_chains)] // Avoid inflating `.stderr` with overzealous gates in this test.\n-   |            ^^^^^^^^^^\n-\n error: `let` expressions are not supported here\n   --> $DIR/disallowed-positions.rs:32:9\n    |\n@@ -511,6 +499,20 @@ LL |         true && let 1 = 1\n    = note: only supported directly in conditions of `if`- and `while`-expressions\n    = note: as well as when nested within `&&` and parenthesis in those conditions\n \n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/disallowed-positions.rs:20:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: the feature `let_chains` is incomplete and may cause the compiler to crash\n+  --> $DIR/disallowed-positions.rs:22:12\n+   |\n+LL | #![feature(let_chains)] // Avoid inflating `.stderr` with overzealous gates in this test.\n+   |            ^^^^^^^^^^\n+\n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:32:8\n    |"}, {"sha": "fa8fcc99240c69c8c0d311681841425d69037b93", "filename": "src/test/ui/rfc1598-generic-associated-types/collections.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,6 +3,8 @@ warning: the feature `generic_associated_types` is incomplete and may cause the\n    |\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/collections.rs:56:90"}, {"sha": "ab161ae21bb67c84c4603c09304d65c4b9e9e9ce", "filename": "src/test/ui/rfc1598-generic-associated-types/construct_with_other_type.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,6 +3,8 @@ warning: the feature `generic_associated_types` is incomplete and may cause the\n    |\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/construct_with_other_type.rs:17:46"}, {"sha": "749032dbcc2205f0e3b36f9ab1e0d2e42febfa39", "filename": "src/test/ui/rfc1598-generic-associated-types/empty_generics.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fempty_generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fempty_generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fempty_generics.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -9,6 +9,8 @@ warning: the feature `generic_associated_types` is incomplete and may cause the\n    |\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error: aborting due to previous error\n "}, {"sha": "d75f9fb8451b9d6856b8fdc0d5d31208fe4fe4c4", "filename": "src/test/ui/rfc1598-generic-associated-types/gat-incomplete-warning.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgat-incomplete-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgat-incomplete-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgat-incomplete-warning.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,4 +3,6 @@ warning: the feature `generic_associated_types` is incomplete and may cause the\n    |\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n "}, {"sha": "0d319a7a599f68a91b22711019213e724aebe0cd", "filename": "src/test/ui/rfc1598-generic-associated-types/generic-associated-types-where.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric-associated-types-where.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,4 +3,6 @@ warning: the feature `generic_associated_types` is incomplete and may cause the\n    |\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n "}, {"sha": "40ea42f62431dd7254e900afc1c86cb5492f10f5", "filename": "src/test/ui/rfc1598-generic-associated-types/generic_associated_type_undeclared_lifetimes.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,6 +3,8 @@ warning: the feature `generic_associated_types` is incomplete and may cause the\n    |\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0261]: use of undeclared lifetime name `'b`\n   --> $DIR/generic_associated_type_undeclared_lifetimes.rs:13:37"}, {"sha": "51246d3c9027fa795308bea1dd6666a4f595ea18", "filename": "src/test/ui/rfc1598-generic-associated-types/iterable.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,6 +3,8 @@ warning: the feature `generic_associated_types` is incomplete and may cause the\n    |\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/iterable.rs:11:47"}, {"sha": "65dbd00c5b12138ed726fad09392e5711859d306", "filename": "src/test/ui/rfc1598-generic-associated-types/parameter_number_and_kind.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,6 +3,8 @@ warning: the feature `generic_associated_types` is incomplete and may cause the\n    |\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/parameter_number_and_kind.rs:17:27"}, {"sha": "626495350a7e6940cc3b9e75d5dc95422430e474", "filename": "src/test/ui/rfc1598-generic-associated-types/pointer_family.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fpointer_family.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,6 +3,8 @@ warning: the feature `generic_associated_types` is incomplete and may cause the\n    |\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0109]: type arguments are not allowed for this type\n   --> $DIR/pointer_family.rs:37:21"}, {"sha": "9526df258c497128ba0ea6adf237e011b8f2d6f1", "filename": "src/test/ui/rfc1598-generic-associated-types/shadowing.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,4 +3,6 @@ warning: the feature `generic_associated_types` is incomplete and may cause the\n    |\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n "}, {"sha": "09dd654b575afaff9a2608e33678c958852d37f2", "filename": "src/test/ui/rfc1598-generic-associated-types/streaming_iterator.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acf8af9a553fbccd6dd5475d94cb65270d703581/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr?ref=acf8af9a553fbccd6dd5475d94cb65270d703581", "patch": "@@ -3,6 +3,8 @@ warning: the feature `generic_associated_types` is incomplete and may cause the\n    |\n LL | #![feature(generic_associated_types)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n \n error[E0109]: lifetime arguments are not allowed for this type\n   --> $DIR/streaming_iterator.rs:18:41"}]}