{"sha": "3fedb18c0af0bd9fa5e4973936003c0b57e4d3e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZWRiMThjMGFmMGJkOWZhNWU0OTczOTM2MDAzYzBiNTdlNGQzZTg=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-02-01T04:06:02Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-02-01T05:08:47Z"}, "message": "Allow the else part of an expr_if to be either expr_if or expr_block", "tree": {"sha": "69adf95963fda1fedd3338d30f095f73d1c37c77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69adf95963fda1fedd3338d30f095f73d1c37c77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fedb18c0af0bd9fa5e4973936003c0b57e4d3e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fedb18c0af0bd9fa5e4973936003c0b57e4d3e8", "html_url": "https://github.com/rust-lang/rust/commit/3fedb18c0af0bd9fa5e4973936003c0b57e4d3e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fedb18c0af0bd9fa5e4973936003c0b57e4d3e8/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c848ed1e9862a527e0a6f16ef235b41f98baa419", "url": "https://api.github.com/repos/rust-lang/rust/commits/c848ed1e9862a527e0a6f16ef235b41f98baa419", "html_url": "https://github.com/rust-lang/rust/commit/c848ed1e9862a527e0a6f16ef235b41f98baa419"}], "stats": {"total": 85, "additions": 55, "deletions": 30}, "files": [{"sha": "fb068dba4aaf38836d729bcbfd3d06d29d66e77d", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fedb18c0af0bd9fa5e4973936003c0b57e4d3e8/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fedb18c0af0bd9fa5e4973936003c0b57e4d3e8/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=3fedb18c0af0bd9fa5e4973936003c0b57e4d3e8", "patch": "@@ -149,7 +149,7 @@ tag expr_ {\n     expr_unary(unop, @expr, ann);\n     expr_lit(@lit, ann);\n     expr_cast(@expr, @ty, ann);\n-    expr_if(@expr, block, option.t[block], ann);\n+    expr_if(@expr, block, option.t[@expr], ann);\n     expr_while(@expr, block, ann);\n     expr_for(@decl, @expr, block, ann);\n     expr_do_while(block, @expr, ann);"}, {"sha": "e629683c2f8186c24a06f30ccb972a59c5ece723", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3fedb18c0af0bd9fa5e4973936003c0b57e4d3e8/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fedb18c0af0bd9fa5e4973936003c0b57e4d3e8/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=3fedb18c0af0bd9fa5e4973936003c0b57e4d3e8", "patch": "@@ -891,30 +891,29 @@ impure fn parse_if_expr(parser p) -> @ast.expr {\n     auto cond = parse_expr(p);\n     expect(p, token.RPAREN);\n     auto thn = parse_block(p);\n-    let option.t[ast.block] els = none[ast.block];\n+    let option.t[@ast.expr] els = none[@ast.expr];\n     hi = thn.span;\n     alt (p.peek()) {\n         case (token.ELSE) {\n-            auto eblk = parse_else_block(p);\n-            els = some(eblk);\n-            hi = eblk.span;\n+            auto elexpr = parse_else_expr(p);\n+            els = some(elexpr);\n+            hi = elexpr.span;\n         }\n         case (_) { /* fall through */ }\n     }\n     ret @spanned(lo, hi, ast.expr_if(cond, thn, els, ast.ann_none));\n }\n \n-impure fn parse_else_block(parser p) -> ast.block {\n+impure fn parse_else_expr(parser p) -> @ast.expr {\n     expect(p, token.ELSE);\n     alt (p.peek()) {\n         case (token.IF) {\n-            let vec[@ast.stmt] stmts = vec();\n-            auto ifexpr = parse_if_expr(p);\n-            auto bloc = index_block(stmts, some(ifexpr));\n-            ret spanned(ifexpr.span, ifexpr.span, bloc);\n+            ret parse_if_expr(p);\n         }\n         case (_) {\n-            ret parse_block(p);\n+            auto blk = parse_block(p);\n+            ret @spanned(blk.span, blk.span,\n+                         ast.expr_block(blk, ast.ann_none));\n         }\n     }\n }"}, {"sha": "ca10e79fe2d404203711f1b4c14edf1bfe5adba9", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3fedb18c0af0bd9fa5e4973936003c0b57e4d3e8/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fedb18c0af0bd9fa5e4973936003c0b57e4d3e8/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=3fedb18c0af0bd9fa5e4973936003c0b57e4d3e8", "patch": "@@ -100,7 +100,7 @@ type ast_fold[ENV] =\n \n      (fn(&ENV e, &span sp,\n          @expr cond, &block thn,\n-         &option.t[block] els,\n+         &option.t[@expr] els,\n          ann a) -> @expr)                         fold_expr_if,\n \n      (fn(&ENV e, &span sp,\n@@ -504,10 +504,10 @@ fn fold_expr[ENV](&ENV env, ast_fold[ENV] fld, &@expr e) -> @expr {\n         case (ast.expr_if(?cnd, ?thn, ?els, ?t)) {\n             auto ccnd = fold_expr(env_, fld, cnd);\n             auto tthn = fold_block(env_, fld, thn);\n-            auto eels = none[block];\n+            auto eels = none[@expr];\n             alt (els) {\n-                case (some[block](?b)) {\n-                    eels = some(fold_block(env_, fld, b));\n+                case (some[@expr](?e)) {\n+                    eels = some(fold_expr(env_, fld, e));\n                 }\n                 case (_) { /* fall through */  }\n             }\n@@ -961,7 +961,7 @@ fn identity_fold_expr_cast[ENV](&ENV env, &span sp, @ast.expr e,\n \n fn identity_fold_expr_if[ENV](&ENV env, &span sp,\n                               @expr cond, &block thn,\n-                              &option.t[block] els, ann a) -> @expr {\n+                              &option.t[@expr] els, ann a) -> @expr {\n     ret @respan(sp, ast.expr_if(cond, thn, els, a));\n }\n "}, {"sha": "c2b0ae48bbccb8214572030652e509ada71b9534", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3fedb18c0af0bd9fa5e4973936003c0b57e4d3e8/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fedb18c0af0bd9fa5e4973936003c0b57e4d3e8/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=3fedb18c0af0bd9fa5e4973936003c0b57e4d3e8", "patch": "@@ -1931,7 +1931,7 @@ fn join_results(@block_ctxt parent_cx,\n }\n \n fn trans_if(@block_ctxt cx, @ast.expr cond,\n-            &ast.block thn, &option.t[ast.block] els) -> result {\n+            &ast.block thn, &option.t[@ast.expr] els) -> result {\n \n     auto cond_res = trans_expr(cx, cond);\n \n@@ -1942,8 +1942,19 @@ fn trans_if(@block_ctxt cx, @ast.expr cond,\n     auto else_res = res(else_cx, C_nil());\n \n     alt (els) {\n-        case (some[ast.block](?eblk)) {\n-            else_res = trans_block(else_cx, eblk);\n+        case (some[@ast.expr](?elexpr)) {\n+            // FIXME: Shouldn't need to unwrap the block here,\n+            // instead just use 'else_res = trans_expr(else_cx, elexpr)',\n+            // but either a) trans_expr doesn't handle expr_block\n+            // correctly or b) I have no idea what I'm doing...\n+            alt (elexpr.node) {\n+                case (ast.expr_if(_, _, _, _)) {\n+                    else_res = trans_expr(else_cx, elexpr);\n+                }\n+                case (ast.expr_block(?b, _)) {\n+                    else_res = trans_block(else_cx, b);\n+                }\n+            }\n         }\n         case (_) { /* fall through */ }\n     }"}, {"sha": "d778ffa96d0c0e033031f6e19263d92daf504183", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3fedb18c0af0bd9fa5e4973936003c0b57e4d3e8/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fedb18c0af0bd9fa5e4973936003c0b57e4d3e8/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=3fedb18c0af0bd9fa5e4973936003c0b57e4d3e8", "patch": "@@ -870,10 +870,10 @@ fn demand_expr_full(&@fn_ctxt fcx, @ty.t expected, @ast.expr e,\n             auto then_1 = demand_block(fcx, expected, then_0);\n             auto else_1;\n             alt (else_0) {\n-                case (none[ast.block]) { else_1 = none[ast.block]; }\n-                case (some[ast.block](?b_0)) {\n-                    auto b_1 = demand_block(fcx, expected, b_0);\n-                    else_1 = some[ast.block](b_1);\n+                case (none[@ast.expr]) { else_1 = none[@ast.expr]; }\n+                case (some[@ast.expr](?e_0)) {\n+                    auto e_1 = demand_expr(fcx, expected, e_0);\n+                    else_1 = some[@ast.expr](e_1);\n                 }\n             }\n             e_1 = ast.expr_if(cond, then_1, else_1, ast.ann_type(t));\n@@ -1205,14 +1205,14 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n             auto elsopt_1;\n             auto elsopt_t;\n             alt (elsopt) {\n-                case (some[ast.block](?els)) {\n-                    auto els_0 = check_block(fcx, els);\n-                    auto els_1 = demand_block(fcx, thn_t, els_0);\n-                    elsopt_1 = some[ast.block](els_1);\n-                    elsopt_t = block_ty(els_1);\n+                case (some[@ast.expr](?els)) {\n+                    auto els_0 = check_expr(fcx, els);\n+                    auto els_1 = demand_expr(fcx, thn_t, els_0);\n+                    elsopt_1 = some[@ast.expr](els_1);\n+                    elsopt_t = expr_ty(els_1);\n                 }\n-                case (none[ast.block]) {\n-                    elsopt_1 = none[ast.block];\n+                case (none[@ast.expr]) {\n+                    elsopt_1 = none[@ast.expr];\n                     elsopt_t = plain_ty(ty.ty_nil);\n                 }\n             }\n@@ -1308,6 +1308,21 @@ fn check_expr(&@fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n                                         ast.expr_alt(expr_1, arms_1, ann));\n         }\n \n+        case (ast.expr_block(?b, _)) {\n+            auto b_0 = check_block(fcx, b);\n+            auto ann;\n+            alt (b_0.node.expr) {\n+                case (some[@ast.expr](?expr)) {\n+                    ann = ast.ann_type(expr_ty(expr));\n+                }\n+                case (none[@ast.expr]) {\n+                    ann = ast.ann_type(plain_ty(ty.ty_nil));\n+                }\n+            }\n+            ret @fold.respan[ast.expr_](expr.span,\n+                                        ast.expr_block(b_0, ann));\n+        }\n+\n         case (ast.expr_bind(?f, ?args, _)) {\n             auto f_0 = check_expr(fcx, f);\n             auto t_0 = expr_ty(f_0);"}]}