{"sha": "698b311a596b5d141b0c42f1b5400adc1f11150f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5OGIzMTFhNTk2YjVkMTQxYjBjNDJmMWI1NDAwYWRjMWYxMTE1MGY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-05T08:08:57Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-05T08:08:57Z"}, "message": "fix NULL in TLS dtors", "tree": {"sha": "2e8a1f006bb375f069802c1261446bf14b63f626", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e8a1f006bb375f069802c1261446bf14b63f626"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/698b311a596b5d141b0c42f1b5400adc1f11150f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/698b311a596b5d141b0c42f1b5400adc1f11150f", "html_url": "https://github.com/rust-lang/rust/commit/698b311a596b5d141b0c42f1b5400adc1f11150f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/698b311a596b5d141b0c42f1b5400adc1f11150f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07d5e9917cb17d8c8aa2c132919e985841ed24bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/07d5e9917cb17d8c8aa2c132919e985841ed24bc", "html_url": "https://github.com/rust-lang/rust/commit/07d5e9917cb17d8c8aa2c132919e985841ed24bc"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "9a22c03bf2f69c68279131aae285455cde273641", "filename": "src/shims/tls.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/698b311a596b5d141b0c42f1b5400adc1f11150f/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/698b311a596b5d141b0c42f1b5400adc1f11150f/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=698b311a596b5d141b0c42f1b5400adc1f11150f", "patch": "@@ -6,6 +6,7 @@ use rustc::{ty, ty::layout::HasDataLayout, mir};\n use crate::{\n     InterpResult, InterpError, StackPopCleanup,\n     MPlaceTy, Scalar, Tag,\n+    HelpersEvalContextExt,\n };\n \n pub type TlsKey = u128;\n@@ -111,7 +112,6 @@ impl<'tcx> TlsData<'tcx> {\n     fn fetch_tls_dtor(\n         &mut self,\n         key: Option<TlsKey>,\n-        cx: &impl HasDataLayout,\n     ) -> Option<(ty::Instance<'tcx>, Scalar<Tag>, TlsKey)> {\n         use std::collections::Bound::*;\n \n@@ -123,10 +123,10 @@ impl<'tcx> TlsData<'tcx> {\n         for (&key, &mut TlsEntry { ref mut data, dtor }) in\n             thread_local.range_mut((start, Unbounded))\n         {\n-            if let Some(ref mut data) = *data {\n+            if let Some(data_scalar) = *data {\n                 if let Some(dtor) = dtor {\n-                    let ret = Some((dtor, *data, key));\n-                    *data = Scalar::ptr_null(cx);\n+                    let ret = Some((dtor, data_scalar, key));\n+                    *data = None;\n                     return ret;\n                 }\n             }\n@@ -139,10 +139,11 @@ impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tc\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn run_tls_dtors(&mut self) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n-        let mut dtor = this.machine.tls.fetch_tls_dtor(None, &*this.tcx);\n+        let mut dtor = this.machine.tls.fetch_tls_dtor(None);\n         // FIXME: replace loop by some structure that works with stepping\n         while let Some((instance, ptr, key)) = dtor {\n             trace!(\"Running TLS dtor {:?} on {:?}\", instance, ptr);\n+            assert!(!this.is_null(ptr).unwrap(), \"Data can't be NULL when dtor is called!\");\n             // TODO: Potentially, this has to support all the other possible instances?\n             // See eval_fn_call in interpret/terminator/mod.rs\n             let mir = this.load_mir(instance.def)?;\n@@ -163,9 +164,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // step until out of stackframes\n             this.run()?;\n \n-            dtor = match this.machine.tls.fetch_tls_dtor(Some(key), &*this.tcx) {\n+            dtor = match this.machine.tls.fetch_tls_dtor(Some(key)) {\n                 dtor @ Some(_) => dtor,\n-                None => this.machine.tls.fetch_tls_dtor(None, &*this.tcx),\n+                None => this.machine.tls.fetch_tls_dtor(None),\n             };\n         }\n         // FIXME: On a windows target, call `unsafe extern \"system\" fn on_tls_callback`."}]}