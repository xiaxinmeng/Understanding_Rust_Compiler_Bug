{"sha": "9beb8f54774ca0d41dd2eb7622809f4073676757", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZWI4ZjU0Nzc0Y2EwZDQxZGQyZWI3NjIyODA5ZjQwNzM2NzY3NTc=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-11-26T11:06:30Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-03-24T14:36:07Z"}, "message": "ci: add github actions configuration", "tree": {"sha": "17c73a58c8c2199aa866437deb982cf1cf9b8111", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17c73a58c8c2199aa866437deb982cf1cf9b8111"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9beb8f54774ca0d41dd2eb7622809f4073676757", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl56GtcACgkQPgar6Auq\n8Zxn2g//dwvSBaGIGOV+RIVkWvmOT65sRE/wmJApM0wl6ragLfmGKMD6+x2lzkKb\ngNqOIXXvaxBLYZFL+AzKpVqbmgDYqR+AEyR/iudkTSS2Dmhy93Ni1AKhXUgktdK6\nRsApXuYZaX85EGakNfDdyzNvyDTBHEcjRkcZYwN7ueSzcqpw+r9Y86NA53NT/7w8\nES1qX2AEFqPfSkbIUCaLv6gZ7cJpf9LnlD0bgaoFlz7bXRoAqA/0Lz+Ffu9oHg/q\n8sL5gA3mPPsL4rMeYa465sDFVkb6IPUP5L8CqYTP/EehQRBZ89JB99gFH2tC5vGQ\nq3G667wIPzhjjrvi+v2VqzvEILlGojHSgp/a2ZKe416xpS6CpmwhhZU9mtl4L3Ut\nHMru2GuDlp4jHohmPsNSR1hZcdEI6KSCMqVYdVs+mONiEx/QJRA3VmXYvTfcFMiB\n9V/YD9x7sCQUe78+zyl9GL3/psQxuwBqWeLo862xnMg0IxMTqFUkLW/cVy48DtbO\n/kyuNoftEuBFDWF2QpGjwsKPbRISeXRTFJWF+gLs0O/sVsCX5cLi11X/AJ+PqXnY\nd9Ydhv1uYcRTyiA6b9utmvJA/sn15B8MRsPaDfYt0y/8/0aPKztwjKDQiE+6c+gQ\nsoyN3aygAis0xs81ijrxRjR2fNX4hue3HbPn8DGCclkgMhQXg+g=\n=qki5\n-----END PGP SIGNATURE-----", "payload": "tree 17c73a58c8c2199aa866437deb982cf1cf9b8111\nparent 9d5c416037b2066b0b1450952914989dee73900a\nauthor Pietro Albini <pietro@pietroalbini.org> 1574766390 +0100\ncommitter Pietro Albini <pietro@pietroalbini.org> 1585060567 +0100\n\nci: add github actions configuration\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9beb8f54774ca0d41dd2eb7622809f4073676757", "html_url": "https://github.com/rust-lang/rust/commit/9beb8f54774ca0d41dd2eb7622809f4073676757", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9beb8f54774ca0d41dd2eb7622809f4073676757/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d5c416037b2066b0b1450952914989dee73900a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d5c416037b2066b0b1450952914989dee73900a", "html_url": "https://github.com/rust-lang/rust/commit/9d5c416037b2066b0b1450952914989dee73900a"}], "stats": {"total": 1921, "additions": 1909, "deletions": 12}, "files": [{"sha": "275823e9dbcf8743f30ddbcf32f19ef313a7c9b1", "filename": ".github/workflows/ci.yml", "status": "added", "additions": 781, "deletions": 0, "changes": 781, "blob_url": "https://github.com/rust-lang/rust/blob/9beb8f54774ca0d41dd2eb7622809f4073676757/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/9beb8f54774ca0d41dd2eb7622809f4073676757/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=9beb8f54774ca0d41dd2eb7622809f4073676757", "patch": "@@ -0,0 +1,781 @@\n+#############################################################\n+#   WARNING: automatically generated file, DO NOT CHANGE!   #\n+#############################################################\n+\n+# This file was automatically generated by the expand-yaml-anchors tool. The\n+# source file that generated this one is:\n+#\n+#   src/ci/github-actions/ci.yml\n+#\n+# Once you make changes to that file you need to run:\n+#\n+#   ./x.py run src/tools/expand-yaml-anchors/\n+#\n+# The CI build will fail if the tool is not run after changes to this file.\n+\n+---\n+name: CI\n+\"on\":\n+  push:\n+    branches:\n+      - auto\n+      - try\n+      - master\n+  pull_request:\n+    branches:\n+      - \"**\"\n+jobs:\n+  pr:\n+    name: PR\n+    env:\n+      CI_JOB_NAME: \"${{ matrix.name }}\"\n+      SCCACHE_BUCKET: rust-lang-gha-caches\n+      TOOLSTATE_REPO: \"https://github.com/pietroalbini/rust-toolstate\"\n+    if: \"github.event_name == 'pull_request'\"\n+    strategy:\n+      matrix:\n+        name:\n+          - mingw-check\n+          - x86_64-gnu-llvm-7\n+          - x86_64-gnu-tools\n+        include:\n+          - name: mingw-check\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: x86_64-gnu-llvm-7\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: x86_64-gnu-tools\n+            env:\n+              CI_ONLY_WHEN_SUBMODULES_CHANGED: 1\n+            os: ubuntu-latest-xl\n+    timeout-minutes: 600\n+    runs-on: \"${{ matrix.os }}\"\n+    steps:\n+      - name: disable git crlf conversion\n+        run: git config --global core.autocrlf false\n+        shell: bash\n+      - name: checkout the source code\n+        uses: actions/checkout@v1\n+        with:\n+          fetch-depth: 2\n+      - name: configure GitHub Actions to kill the build when outdated\n+        uses: rust-lang/simpleinfra/github-actions/cancel-outdated-builds@master\n+        with:\n+          github_token: \"${{ secrets.github_token }}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: add extra environment variables\n+        run: src/ci/scripts/setup-environment.sh\n+        env:\n+          EXTRA_VARIABLES: \"${{ toJson(matrix.env) }}\"\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: decide whether to skip this job\n+        run: src/ci/scripts/should-skip-this.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: collect CPU statistics\n+        run: src/ci/scripts/collect-cpu-stats.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: show the current environment\n+        run: src/ci/scripts/dump-environment.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: install awscli\n+        run: src/ci/scripts/install-awscli.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: install sccache\n+        run: src/ci/scripts/install-sccache.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: install clang\n+        run: src/ci/scripts/install-clang.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: install WIX\n+        run: src/ci/scripts/install-wix.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: install InnoSetup\n+        run: src/ci/scripts/install-innosetup.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: ensure the build happens on a partition with enough space\n+        run: src/ci/scripts/symlink-build-dir.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: disable git crlf conversion\n+        run: src/ci/scripts/disable-git-crlf-conversion.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: install MSYS2\n+        run: src/ci/scripts/install-msys2.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: install MSYS2 packages\n+        run: src/ci/scripts/install-msys2-packages.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: install MinGW\n+        run: src/ci/scripts/install-mingw.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: install ninja\n+        run: src/ci/scripts/install-ninja.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: enable ipv6 on Docker\n+        run: src/ci/scripts/enable-docker-ipv6.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: disable git crlf conversion\n+        run: src/ci/scripts/disable-git-crlf-conversion.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: checkout submodules\n+        run: src/ci/scripts/checkout-submodules.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: ensure line endings are correct\n+        run: src/ci/scripts/verify-line-endings.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: run the build\n+        run: src/ci/scripts/run-build-from-ci.sh\n+        env:\n+          AWS_ACCESS_KEY_ID: \"${{ env.CACHES_AWS_ACCESS_KEY_ID }}\"\n+          AWS_SECRET_ACCESS_KEY: \"${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.CACHES_AWS_ACCESS_KEY_ID)] }}\"\n+          TOOLSTATE_REPO_ACCESS_TOKEN: \"${{ secrets.TOOLSTATE_REPO_ACCESS_TOKEN }}\"\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: upload artifacts to S3\n+        run: src/ci/scripts/upload-artifacts.sh\n+        env:\n+          AWS_ACCESS_KEY_ID: \"${{ env.ARTIFACTS_AWS_ACCESS_KEY_ID }}\"\n+          AWS_SECRET_ACCESS_KEY: \"${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.ARTIFACTS_AWS_ACCESS_KEY_ID)] }}\"\n+        if: \"success() && !env.SKIP_JOB && (github.event_name == 'push' || env.DEPLOY == '1' || env.DEPLOY_ALT == '1')\"\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+  try:\n+    name: try\n+    env:\n+      CI_JOB_NAME: \"${{ matrix.name }}\"\n+      SCCACHE_BUCKET: rust-lang-gha-caches\n+      DEPLOY_BUCKET: rust-lang-gha\n+      TOOLSTATE_REPO: \"https://github.com/pietroalbini/rust-toolstate\"\n+      TOOLSTATE_ISSUES_API_URL: \"https://api.github.com/repos/pietroalbini/rust-toolstate/issues\"\n+      TOOLSTATE_PUBLISH: 1\n+      CACHES_AWS_ACCESS_KEY_ID: AKIA46X5W6CZOMUQATD5\n+      ARTIFACTS_AWS_ACCESS_KEY_ID: AKIA46X5W6CZH5AYXDVF\n+    if: \"github.event_name == 'push' && github.ref == 'refs/heads/try'\"\n+    strategy:\n+      matrix:\n+        name:\n+          - dist-x86_64-linux\n+          - dist-x86_64-linux-alt\n+        include:\n+          - name: dist-x86_64-linux\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: dist-x86_64-linux-alt\n+            env:\n+              IMAGE: dist-x86_64-linux\n+            os: ubuntu-latest-xl\n+    timeout-minutes: 600\n+    runs-on: \"${{ matrix.os }}\"\n+    steps:\n+      - name: disable git crlf conversion\n+        run: git config --global core.autocrlf false\n+        shell: bash\n+      - name: checkout the source code\n+        uses: actions/checkout@v1\n+        with:\n+          fetch-depth: 2\n+      - name: configure GitHub Actions to kill the build when outdated\n+        uses: rust-lang/simpleinfra/github-actions/cancel-outdated-builds@master\n+        with:\n+          github_token: \"${{ secrets.github_token }}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: add extra environment variables\n+        run: src/ci/scripts/setup-environment.sh\n+        env:\n+          EXTRA_VARIABLES: \"${{ toJson(matrix.env) }}\"\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: decide whether to skip this job\n+        run: src/ci/scripts/should-skip-this.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: collect CPU statistics\n+        run: src/ci/scripts/collect-cpu-stats.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: show the current environment\n+        run: src/ci/scripts/dump-environment.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: install awscli\n+        run: src/ci/scripts/install-awscli.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: install sccache\n+        run: src/ci/scripts/install-sccache.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: install clang\n+        run: src/ci/scripts/install-clang.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: install WIX\n+        run: src/ci/scripts/install-wix.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: install InnoSetup\n+        run: src/ci/scripts/install-innosetup.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: ensure the build happens on a partition with enough space\n+        run: src/ci/scripts/symlink-build-dir.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: disable git crlf conversion\n+        run: src/ci/scripts/disable-git-crlf-conversion.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: install MSYS2\n+        run: src/ci/scripts/install-msys2.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: install MSYS2 packages\n+        run: src/ci/scripts/install-msys2-packages.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: install MinGW\n+        run: src/ci/scripts/install-mingw.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: install ninja\n+        run: src/ci/scripts/install-ninja.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: enable ipv6 on Docker\n+        run: src/ci/scripts/enable-docker-ipv6.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: disable git crlf conversion\n+        run: src/ci/scripts/disable-git-crlf-conversion.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: checkout submodules\n+        run: src/ci/scripts/checkout-submodules.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: ensure line endings are correct\n+        run: src/ci/scripts/verify-line-endings.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: run the build\n+        run: src/ci/scripts/run-build-from-ci.sh\n+        env:\n+          AWS_ACCESS_KEY_ID: \"${{ env.CACHES_AWS_ACCESS_KEY_ID }}\"\n+          AWS_SECRET_ACCESS_KEY: \"${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.CACHES_AWS_ACCESS_KEY_ID)] }}\"\n+          TOOLSTATE_REPO_ACCESS_TOKEN: \"${{ secrets.TOOLSTATE_REPO_ACCESS_TOKEN }}\"\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: upload artifacts to S3\n+        run: src/ci/scripts/upload-artifacts.sh\n+        env:\n+          AWS_ACCESS_KEY_ID: \"${{ env.ARTIFACTS_AWS_ACCESS_KEY_ID }}\"\n+          AWS_SECRET_ACCESS_KEY: \"${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.ARTIFACTS_AWS_ACCESS_KEY_ID)] }}\"\n+        if: \"success() && !env.SKIP_JOB && (github.event_name == 'push' || env.DEPLOY == '1' || env.DEPLOY_ALT == '1')\"\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+  auto:\n+    name: auto\n+    env:\n+      CI_JOB_NAME: \"${{ matrix.name }}\"\n+      SCCACHE_BUCKET: rust-lang-gha-caches\n+      DEPLOY_BUCKET: rust-lang-gha\n+      TOOLSTATE_REPO: \"https://github.com/pietroalbini/rust-toolstate\"\n+      TOOLSTATE_ISSUES_API_URL: \"https://api.github.com/repos/pietroalbini/rust-toolstate/issues\"\n+      TOOLSTATE_PUBLISH: 1\n+      CACHES_AWS_ACCESS_KEY_ID: AKIA46X5W6CZOMUQATD5\n+      ARTIFACTS_AWS_ACCESS_KEY_ID: AKIA46X5W6CZH5AYXDVF\n+    if: \"github.event_name == 'push' && github.ref == 'refs/heads/auto'\"\n+    strategy:\n+      matrix:\n+        name:\n+          - arm-android\n+          - armhf-gnu\n+          - dist-aarch64-linux\n+          - dist-android\n+          - dist-arm-linux\n+          - dist-armhf-linux\n+          - dist-armv7-linux\n+          - dist-i586-gnu-i586-i686-musl\n+          - dist-i686-freebsd\n+          - dist-i686-linux\n+          - dist-i686-mingw\n+          - dist-i686-msvc\n+          - dist-mips-linux\n+          - dist-mips64-linux\n+          - dist-mips64el-linux\n+          - dist-mipsel-linux\n+          - dist-powerpc-linux\n+          - dist-powerpc64-linux\n+          - dist-powerpc64le-linux\n+          - dist-s390x-linux\n+          - dist-various-1\n+          - dist-various-2\n+          - dist-x86_64-apple\n+          - dist-x86_64-apple-alt\n+          - dist-x86_64-freebsd\n+          - dist-x86_64-linux\n+          - dist-x86_64-linux-alt\n+          - dist-x86_64-mingw\n+          - dist-x86_64-msvc\n+          - dist-x86_64-msvc-alt\n+          - dist-x86_64-musl\n+          - dist-x86_64-netbsd\n+          - i686-gnu\n+          - i686-gnu-nopt\n+          - i686-mingw-1\n+          - i686-mingw-2\n+          - i686-msvc-1\n+          - i686-msvc-2\n+          - mingw-check\n+          - test-various\n+          - wasm32\n+          - x86_64-apple\n+          - x86_64-gnu\n+          - x86_64-gnu-aux\n+          - x86_64-gnu-debug\n+          - x86_64-gnu-distcheck\n+          - x86_64-gnu-full-bootstrap\n+          - x86_64-gnu-llvm-7\n+          - x86_64-gnu-nopt\n+          - x86_64-gnu-tools\n+          - x86_64-mingw-1\n+          - x86_64-mingw-2\n+          - x86_64-msvc-1\n+          - x86_64-msvc-2\n+          - x86_64-msvc-aux\n+          - x86_64-msvc-cargo\n+          - x86_64-msvc-tools\n+        include:\n+          - name: arm-android\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: armhf-gnu\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: dist-aarch64-linux\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: dist-android\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: dist-arm-linux\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: dist-armhf-linux\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: dist-armv7-linux\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: dist-i586-gnu-i586-i686-musl\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: dist-i686-freebsd\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: dist-i686-linux\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: dist-mips-linux\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: dist-mips64-linux\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: dist-mips64el-linux\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: dist-mipsel-linux\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: dist-powerpc-linux\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: dist-powerpc64-linux\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: dist-powerpc64le-linux\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: dist-s390x-linux\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: dist-various-1\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: dist-various-2\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: dist-x86_64-freebsd\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: dist-x86_64-linux\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: dist-x86_64-linux-alt\n+            env:\n+              IMAGE: dist-x86_64-linux\n+            os: ubuntu-latest-xl\n+          - name: dist-x86_64-musl\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: dist-x86_64-netbsd\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: i686-gnu\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: i686-gnu-nopt\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: mingw-check\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: test-various\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: wasm32\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: x86_64-gnu\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: x86_64-gnu-aux\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: x86_64-gnu-debug\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: x86_64-gnu-distcheck\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: x86_64-gnu-full-bootstrap\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: x86_64-gnu-llvm-7\n+            env:\n+              RUST_BACKTRACE: 1\n+            os: ubuntu-latest-xl\n+          - name: x86_64-gnu-nopt\n+            os: ubuntu-latest-xl\n+            env: {}\n+          - name: x86_64-gnu-tools\n+            env:\n+              DEPLOY_TOOLSTATES_JSON: toolstates-linux.json\n+            os: ubuntu-latest-xl\n+          - name: dist-x86_64-apple\n+            env:\n+              SCRIPT: \"./x.py dist\"\n+              RUST_CONFIGURE_ARGS: \"--target=aarch64-apple-ios,x86_64-apple-ios --enable-full-tools --enable-sanitizers --enable-profiler --set rust.jemalloc\"\n+              RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+              MACOSX_DEPLOYMENT_TARGET: 10.7\n+              NO_LLVM_ASSERTIONS: 1\n+              NO_DEBUG_ASSERTIONS: 1\n+              DIST_REQUIRE_ALL_TOOLS: 1\n+            os: macos-latest\n+          - name: dist-x86_64-apple-alt\n+            env:\n+              SCRIPT: \"./x.py dist\"\n+              RUST_CONFIGURE_ARGS: \"--enable-extended --enable-profiler --set rust.jemalloc\"\n+              RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+              MACOSX_DEPLOYMENT_TARGET: 10.7\n+              NO_LLVM_ASSERTIONS: 1\n+              NO_DEBUG_ASSERTIONS: 1\n+            os: macos-latest\n+          - name: x86_64-apple\n+            env:\n+              SCRIPT: \"./x.py test\"\n+              RUST_CONFIGURE_ARGS: \"--build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc\"\n+              RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+              MACOSX_DEPLOYMENT_TARGET: 10.8\n+              MACOSX_STD_DEPLOYMENT_TARGET: 10.7\n+              NO_LLVM_ASSERTIONS: 1\n+              NO_DEBUG_ASSERTIONS: 1\n+            os: macos-latest\n+          - name: x86_64-msvc-1\n+            env:\n+              RUST_CONFIGURE_ARGS: \"--build=x86_64-pc-windows-msvc --enable-profiler\"\n+              SCRIPT: make ci-subset-1\n+              NO_DEBUG_ASSERTIONS: 1\n+              NO_LLVM_ASSERTIONS: 1\n+            os: windows-latest-xl\n+          - name: x86_64-msvc-2\n+            env:\n+              RUST_CONFIGURE_ARGS: \"--build=x86_64-pc-windows-msvc --enable-profiler\"\n+              SCRIPT: make ci-subset-2\n+            os: windows-latest-xl\n+          - name: i686-msvc-1\n+            env:\n+              RUST_CONFIGURE_ARGS: \"--build=i686-pc-windows-msvc\"\n+              SCRIPT: make ci-subset-1\n+              NO_DEBUG_ASSERTIONS: 1\n+              NO_LLVM_ASSERTIONS: 1\n+            os: windows-latest-xl\n+          - name: i686-msvc-2\n+            env:\n+              RUST_CONFIGURE_ARGS: \"--build=i686-pc-windows-msvc\"\n+              SCRIPT: make ci-subset-2\n+              NO_DEBUG_ASSERTIONS: 1\n+              NO_LLVM_ASSERTIONS: 1\n+            os: windows-latest-xl\n+          - name: x86_64-msvc-aux\n+            env:\n+              RUST_CHECK_TARGET: check-aux EXCLUDE_CARGO=1\n+              RUST_CONFIGURE_ARGS: \"--build=x86_64-pc-windows-msvc\"\n+            os: windows-latest-xl\n+          - name: x86_64-msvc-cargo\n+            env:\n+              SCRIPT: python x.py test src/tools/cargotest src/tools/cargo\n+              RUST_CONFIGURE_ARGS: \"--build=x86_64-pc-windows-msvc\"\n+              VCVARS_BAT: vcvars64.bat\n+              NO_DEBUG_ASSERTIONS: 1\n+              NO_LLVM_ASSERTIONS: 1\n+            os: windows-latest-xl\n+          - name: x86_64-msvc-tools\n+            env:\n+              SCRIPT: src/ci/docker/x86_64-gnu-tools/checktools.sh x.py /tmp/toolstate/toolstates.json windows\n+              RUST_CONFIGURE_ARGS: \"--build=x86_64-pc-windows-msvc --save-toolstates=/tmp/toolstate/toolstates.json\"\n+            os: windows-latest-xl\n+          - name: i686-mingw-1\n+            env:\n+              RUST_CONFIGURE_ARGS: \"--build=i686-pc-windows-gnu\"\n+              SCRIPT: make ci-mingw-subset-1\n+              CUSTOM_MINGW: 1\n+              NO_DEBUG_ASSERTIONS: 1\n+              NO_LLVM_ASSERTIONS: 1\n+            os: windows-latest-xl\n+          - name: i686-mingw-2\n+            env:\n+              RUST_CONFIGURE_ARGS: \"--build=i686-pc-windows-gnu\"\n+              SCRIPT: make ci-mingw-subset-2\n+              CUSTOM_MINGW: 1\n+            os: windows-latest-xl\n+          - name: x86_64-mingw-1\n+            env:\n+              SCRIPT: make ci-mingw-subset-1\n+              RUST_CONFIGURE_ARGS: \"--build=x86_64-pc-windows-gnu\"\n+              CUSTOM_MINGW: 1\n+              NO_DEBUG_ASSERTIONS: 1\n+              NO_LLVM_ASSERTIONS: 1\n+            os: windows-latest-xl\n+          - name: x86_64-mingw-2\n+            env:\n+              SCRIPT: make ci-mingw-subset-2\n+              RUST_CONFIGURE_ARGS: \"--build=x86_64-pc-windows-gnu\"\n+              CUSTOM_MINGW: 1\n+            os: windows-latest-xl\n+          - name: dist-x86_64-msvc\n+            env:\n+              RUST_CONFIGURE_ARGS: \"--build=x86_64-pc-windows-msvc --target=x86_64-pc-windows-msvc,aarch64-pc-windows-msvc --enable-full-tools --enable-profiler\"\n+              SCRIPT: python x.py dist\n+              DIST_REQUIRE_ALL_TOOLS: 1\n+            os: windows-latest-xl\n+          - name: dist-i686-msvc\n+            env:\n+              RUST_CONFIGURE_ARGS: \"--build=i686-pc-windows-msvc --target=i586-pc-windows-msvc --enable-full-tools --enable-profiler\"\n+              SCRIPT: python x.py dist\n+              DIST_REQUIRE_ALL_TOOLS: 1\n+            os: windows-latest-xl\n+          - name: dist-i686-mingw\n+            env:\n+              RUST_CONFIGURE_ARGS: \"--build=i686-pc-windows-gnu --enable-full-tools --enable-profiler\"\n+              SCRIPT: python x.py dist\n+              CUSTOM_MINGW: 1\n+              DIST_REQUIRE_ALL_TOOLS: 1\n+            os: windows-latest-xl\n+          - name: dist-x86_64-mingw\n+            env:\n+              SCRIPT: python x.py dist\n+              RUST_CONFIGURE_ARGS: \"--build=x86_64-pc-windows-gnu --enable-full-tools --enable-profiler\"\n+              CUSTOM_MINGW: 1\n+              DIST_REQUIRE_ALL_TOOLS: 1\n+            os: windows-latest-xl\n+          - name: dist-x86_64-msvc-alt\n+            env:\n+              RUST_CONFIGURE_ARGS: \"--build=x86_64-pc-windows-msvc --enable-extended --enable-profiler\"\n+              SCRIPT: python x.py dist\n+            os: windows-latest-xl\n+    timeout-minutes: 600\n+    runs-on: \"${{ matrix.os }}\"\n+    steps:\n+      - name: disable git crlf conversion\n+        run: git config --global core.autocrlf false\n+        shell: bash\n+      - name: checkout the source code\n+        uses: actions/checkout@v1\n+        with:\n+          fetch-depth: 2\n+      - name: configure GitHub Actions to kill the build when outdated\n+        uses: rust-lang/simpleinfra/github-actions/cancel-outdated-builds@master\n+        with:\n+          github_token: \"${{ secrets.github_token }}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: add extra environment variables\n+        run: src/ci/scripts/setup-environment.sh\n+        env:\n+          EXTRA_VARIABLES: \"${{ toJson(matrix.env) }}\"\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: decide whether to skip this job\n+        run: src/ci/scripts/should-skip-this.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: collect CPU statistics\n+        run: src/ci/scripts/collect-cpu-stats.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: show the current environment\n+        run: src/ci/scripts/dump-environment.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: install awscli\n+        run: src/ci/scripts/install-awscli.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: install sccache\n+        run: src/ci/scripts/install-sccache.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: install clang\n+        run: src/ci/scripts/install-clang.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: install WIX\n+        run: src/ci/scripts/install-wix.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: install InnoSetup\n+        run: src/ci/scripts/install-innosetup.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: ensure the build happens on a partition with enough space\n+        run: src/ci/scripts/symlink-build-dir.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: disable git crlf conversion\n+        run: src/ci/scripts/disable-git-crlf-conversion.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: install MSYS2\n+        run: src/ci/scripts/install-msys2.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: install MSYS2 packages\n+        run: src/ci/scripts/install-msys2-packages.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: install MinGW\n+        run: src/ci/scripts/install-mingw.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: install ninja\n+        run: src/ci/scripts/install-ninja.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: enable ipv6 on Docker\n+        run: src/ci/scripts/enable-docker-ipv6.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: disable git crlf conversion\n+        run: src/ci/scripts/disable-git-crlf-conversion.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: checkout submodules\n+        run: src/ci/scripts/checkout-submodules.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: ensure line endings are correct\n+        run: src/ci/scripts/verify-line-endings.sh\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: run the build\n+        run: src/ci/scripts/run-build-from-ci.sh\n+        env:\n+          AWS_ACCESS_KEY_ID: \"${{ env.CACHES_AWS_ACCESS_KEY_ID }}\"\n+          AWS_SECRET_ACCESS_KEY: \"${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.CACHES_AWS_ACCESS_KEY_ID)] }}\"\n+          TOOLSTATE_REPO_ACCESS_TOKEN: \"${{ secrets.TOOLSTATE_REPO_ACCESS_TOKEN }}\"\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+      - name: upload artifacts to S3\n+        run: src/ci/scripts/upload-artifacts.sh\n+        env:\n+          AWS_ACCESS_KEY_ID: \"${{ env.ARTIFACTS_AWS_ACCESS_KEY_ID }}\"\n+          AWS_SECRET_ACCESS_KEY: \"${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.ARTIFACTS_AWS_ACCESS_KEY_ID)] }}\"\n+        if: \"success() && !env.SKIP_JOB && (github.event_name == 'push' || env.DEPLOY == '1' || env.DEPLOY_ALT == '1')\"\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+  master:\n+    name: master\n+    runs-on: ubuntu-latest\n+    env:\n+      SCCACHE_BUCKET: rust-lang-gha-caches\n+      DEPLOY_BUCKET: rust-lang-gha\n+      TOOLSTATE_REPO: \"https://github.com/pietroalbini/rust-toolstate\"\n+      TOOLSTATE_ISSUES_API_URL: \"https://api.github.com/repos/pietroalbini/rust-toolstate/issues\"\n+      TOOLSTATE_PUBLISH: 1\n+      CACHES_AWS_ACCESS_KEY_ID: AKIA46X5W6CZOMUQATD5\n+      ARTIFACTS_AWS_ACCESS_KEY_ID: AKIA46X5W6CZH5AYXDVF\n+    if: \"github.event_name == 'push' && github.ref == 'refs/heads/master'\"\n+    steps:\n+      - name: checkout the source code\n+        uses: actions/checkout@v1\n+        with:\n+          fetch-depth: 2\n+      - name: publish toolstate\n+        run: src/ci/publish_toolstate.sh\n+        env:\n+          TOOLSTATE_REPO_ACCESS_TOKEN: \"${{ secrets.TOOLSTATE_REPO_ACCESS_TOKEN }}\"\n+        shell: \"python src/ci/exec-with-shell.py {0}\"\n+        if: success() && !env.SKIP_JOB\n+  try-success:\n+    needs:\n+      - try\n+    if: success()\n+    steps:\n+      - name: mark the job as a success\n+        run: exit 0\n+    name: bors build finished\n+    runs-on: ubuntu-latest\n+  try-failure:\n+    needs:\n+      - try\n+    if: \"!success()\"\n+    steps:\n+      - name: mark the job as a failure\n+        run: exit 1\n+    name: bors build finished\n+    runs-on: ubuntu-latest\n+  auto-success:\n+    needs:\n+      - auto\n+    if: success()\n+    steps:\n+      - name: mark the job as a success\n+        run: exit 0\n+    name: bors build finished\n+    runs-on: ubuntu-latest\n+  auto-failure:\n+    needs:\n+      - auto\n+    if: \"!success()\"\n+    steps:\n+      - name: mark the job as a failure\n+        run: exit 1\n+    name: bors build finished\n+    runs-on: ubuntu-latest"}, {"sha": "f45637e647998fc40937ea418bea5c37f11b0ad9", "filename": "Cargo.lock", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9beb8f54774ca0d41dd2eb7622809f4073676757/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9beb8f54774ca0d41dd2eb7622809f4073676757/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=9beb8f54774ca0d41dd2eb7622809f4073676757", "patch": "@@ -443,7 +443,7 @@ dependencies = [\n  \"textwrap\",\n  \"unicode-width\",\n  \"vec_map\",\n- \"yaml-rust\",\n+ \"yaml-rust 0.3.5\",\n ]\n \n [[package]]\n@@ -1026,6 +1026,14 @@ dependencies = [\n  \"walkdir\",\n ]\n \n+[[package]]\n+name = \"expand-yaml-anchors\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"yaml-merge-keys\",\n+ \"yaml-rust 0.4.3\",\n+]\n+\n [[package]]\n name = \"failure\"\n version = \"0.1.5\"\n@@ -1830,6 +1838,12 @@ dependencies = [\n name = \"linkchecker\"\n version = \"0.1.0\"\n \n+[[package]]\n+name = \"linked-hash-map\"\n+version = \"0.5.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ae91b68aebc4ddb91978b11a1b02ddd8602a05ec19002801c5666000e05e0f83\"\n+\n [[package]]\n name = \"lock_api\"\n version = \"0.3.1\"\n@@ -4854,6 +4868,26 @@ dependencies = [\n  \"unicode-width\",\n ]\n \n+[[package]]\n+name = \"thiserror\"\n+version = \"1.0.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f9fb62ff737e573b1e677459bea6fd023cd5d6e868c3242d3cdf3ef2f0554824\"\n+dependencies = [\n+ \"thiserror-impl\",\n+]\n+\n+[[package]]\n+name = \"thiserror-impl\"\n+version = \"1.0.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"24069c0ba08aab54289d6a25f5036d94afc61e1538bbc42ae5501df141c9027d\"\n+dependencies = [\n+ \"proc-macro2 1.0.3\",\n+ \"quote 1.0.2\",\n+ \"syn 1.0.11\",\n+]\n+\n [[package]]\n name = \"thread_local\"\n version = \"0.3.6\"\n@@ -5536,8 +5570,28 @@ dependencies = [\n  \"lzma-sys\",\n ]\n \n+[[package]]\n+name = \"yaml-merge-keys\"\n+version = \"0.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"59893318ba3ad2b704498c7761214a10eaf42c5f838bce9fc0145bf2ba658cfa\"\n+dependencies = [\n+ \"lazy_static 1.4.0\",\n+ \"thiserror\",\n+ \"yaml-rust 0.4.3\",\n+]\n+\n [[package]]\n name = \"yaml-rust\"\n version = \"0.3.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"e66366e18dc58b46801afbf2ca7661a9f59cc8c5962c29892b6039b4f86fa992\"\n+\n+[[package]]\n+name = \"yaml-rust\"\n+version = \"0.4.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"65923dd1784f44da1d2c3dbbc5e822045628c590ba72123e1c73d3c230c4434d\"\n+dependencies = [\n+ \"linked-hash-map\",\n+]"}, {"sha": "7b5e0fa1c281787b2d2cff8aa6dd737fab06c228", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9beb8f54774ca0d41dd2eb7622809f4073676757/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9beb8f54774ca0d41dd2eb7622809f4073676757/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=9beb8f54774ca0d41dd2eb7622809f4073676757", "patch": "@@ -24,6 +24,7 @@ members = [\n   \"src/tools/miri\",\n   \"src/tools/rustdoc-themes\",\n   \"src/tools/unicode-table-generator\",\n+  \"src/tools/expand-yaml-anchors\",\n ]\n exclude = [\n   \"build\","}, {"sha": "243cd3fa1999862c1ee10c57db01f9c9125257aa", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9beb8f54774ca0d41dd2eb7622809f4073676757/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9beb8f54774ca0d41dd2eb7622809f4073676757/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=9beb8f54774ca0d41dd2eb7622809f4073676757", "patch": "@@ -21,6 +21,7 @@ use crate::doc;\n use crate::flags::Subcommand;\n use crate::install;\n use crate::native;\n+use crate::run;\n use crate::test;\n use crate::tool;\n use crate::util::{self, add_dylib_path, add_link_lib_path, exe, libdir};\n@@ -313,6 +314,7 @@ pub enum Kind {\n     Dist,\n     Doc,\n     Install,\n+    Run,\n }\n \n impl<'a> Builder<'a> {\n@@ -353,6 +355,7 @@ impl<'a> Builder<'a> {\n             }\n             Kind::Test => describe!(\n                 crate::toolstate::ToolStateCheck,\n+                test::ExpandYamlAnchors,\n                 test::Tidy,\n                 test::Ui,\n                 test::CompileFail,\n@@ -454,6 +457,7 @@ impl<'a> Builder<'a> {\n                 install::Src,\n                 install::Rustc\n             ),\n+            Kind::Run => describe!(run::ExpandYamlAnchors,),\n         }\n     }\n \n@@ -507,6 +511,7 @@ impl<'a> Builder<'a> {\n             Subcommand::Bench { ref paths, .. } => (Kind::Bench, &paths[..]),\n             Subcommand::Dist { ref paths } => (Kind::Dist, &paths[..]),\n             Subcommand::Install { ref paths } => (Kind::Install, &paths[..]),\n+            Subcommand::Run { ref paths } => (Kind::Run, &paths[..]),\n             Subcommand::Format { .. } | Subcommand::Clean { .. } => panic!(),\n         };\n "}, {"sha": "eda26f7df1f1c34733d0ff56e54218e617c9a346", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9beb8f54774ca0d41dd2eb7622809f4073676757/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9beb8f54774ca0d41dd2eb7622809f4073676757/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=9beb8f54774ca0d41dd2eb7622809f4073676757", "patch": "@@ -86,6 +86,9 @@ pub enum Subcommand {\n     Install {\n         paths: Vec<PathBuf>,\n     },\n+    Run {\n+        paths: Vec<PathBuf>,\n+    },\n }\n \n impl Default for Subcommand {\n@@ -113,6 +116,7 @@ Subcommands:\n     clean       Clean out build directories\n     dist        Build distribution artifacts\n     install     Install distribution artifacts\n+    run         Run tools contained in this repository\n \n To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n         );\n@@ -188,6 +192,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n                 || (s == \"clean\")\n                 || (s == \"dist\")\n                 || (s == \"install\")\n+                || (s == \"run\")\n         });\n         let subcommand = match subcommand {\n             Some(s) => s,\n@@ -400,6 +405,18 @@ Arguments:\n         ./x.py doc --stage 1\",\n                 );\n             }\n+            \"run\" => {\n+                subcommand_help.push_str(\n+                    \"\\n\n+Arguments:\n+    This subcommand accepts a number of paths to tools to build and run. For\n+    example:\n+\n+        ./x.py run src/tool/expand-yaml-anchors\n+\n+    At least a tool needs to be called.\",\n+                );\n+            }\n             _ => {}\n         };\n         // Get any optional paths which occur after the subcommand\n@@ -468,6 +485,13 @@ Arguments:\n             \"fmt\" => Subcommand::Format { check: matches.opt_present(\"check\") },\n             \"dist\" => Subcommand::Dist { paths },\n             \"install\" => Subcommand::Install { paths },\n+            \"run\" => {\n+                if paths.is_empty() {\n+                    println!(\"\\nrun requires at least a path!\\n\");\n+                    usage(1, &opts, &subcommand_help, &extra_help);\n+                }\n+                Subcommand::Run { paths }\n+            }\n             _ => {\n                 usage(1, &opts, &subcommand_help, &extra_help);\n             }"}, {"sha": "6436fa756558bcd4c1929d1637f09047bff6cb3d", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9beb8f54774ca0d41dd2eb7622809f4073676757/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9beb8f54774ca0d41dd2eb7622809f4073676757/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=9beb8f54774ca0d41dd2eb7622809f4073676757", "patch": "@@ -140,6 +140,7 @@ mod format;\n mod install;\n mod metadata;\n mod native;\n+mod run;\n mod sanity;\n mod test;\n mod tool;"}, {"sha": "22f88b516cd0ce3e5d394e4e481123d7e71aadc1", "filename": "src/bootstrap/run.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/9beb8f54774ca0d41dd2eb7622809f4073676757/src%2Fbootstrap%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9beb8f54774ca0d41dd2eb7622809f4073676757/src%2Fbootstrap%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frun.rs?ref=9beb8f54774ca0d41dd2eb7622809f4073676757", "patch": "@@ -0,0 +1,45 @@\n+use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n+use crate::tool::Tool;\n+use std::process::Command;\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct ExpandYamlAnchors;\n+\n+impl Step for ExpandYamlAnchors {\n+    type Output = ();\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    /// Runs the `expand-yaml_anchors` tool.\n+    ///\n+    /// This tool in `src/tools` read the CI configuration files written in YAML and expands the\n+    /// anchors in them, since GitHub Actions doesn't support them.\n+    fn run(self, builder: &Builder<'_>) {\n+        builder.info(\"Expanding YAML anchors in the GitHub Actions configuration\");\n+        try_run(\n+            builder,\n+            &mut builder.tool_cmd(Tool::ExpandYamlAnchors).arg(\"generate\").arg(&builder.src),\n+        );\n+    }\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"src/tools/expand-yaml-anchors\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(ExpandYamlAnchors);\n+    }\n+}\n+\n+fn try_run(builder: &Builder<'_>, cmd: &mut Command) -> bool {\n+    if !builder.fail_fast {\n+        if !builder.try_run(cmd) {\n+            let mut failures = builder.delayed_failures.borrow_mut();\n+            failures.push(format!(\"{:?}\", cmd));\n+            return false;\n+        }\n+    } else {\n+        builder.run(cmd);\n+    }\n+    true\n+}"}, {"sha": "e75868f7ebd0853c776ec908f2e185f26bd405fa", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9beb8f54774ca0d41dd2eb7622809f4073676757/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9beb8f54774ca0d41dd2eb7622809f4073676757/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=9beb8f54774ca0d41dd2eb7622809f4073676757", "patch": "@@ -750,6 +750,35 @@ impl Step for Tidy {\n     }\n }\n \n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct ExpandYamlAnchors;\n+\n+impl Step for ExpandYamlAnchors {\n+    type Output = ();\n+    const ONLY_HOSTS: bool = true;\n+\n+    /// Ensure the `generate-ci-config` tool was run locally.\n+    ///\n+    /// The tool in `src/tools` reads the CI definition in `src/ci/builders.yml` and generates the\n+    /// appropriate configuration for all our CI providers. This step ensures the tool was called\n+    /// by the user before committing CI changes.\n+    fn run(self, builder: &Builder<'_>) {\n+        builder.info(\"Ensuring the YAML anchors in the GitHub Actions config were expanded\");\n+        try_run(\n+            builder,\n+            &mut builder.tool_cmd(Tool::ExpandYamlAnchors).arg(\"check\").arg(&builder.src),\n+        );\n+    }\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.path(\"src/tools/expand-yaml-anchors\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(ExpandYamlAnchors);\n+    }\n+}\n+\n fn testdir(builder: &Builder<'_>, host: Interned<String>) -> PathBuf {\n     builder.out.join(host).join(\"test\")\n }"}, {"sha": "52f750f448e20448201fb56130cd908e905fff6e", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9beb8f54774ca0d41dd2eb7622809f4073676757/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9beb8f54774ca0d41dd2eb7622809f4073676757/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=9beb8f54774ca0d41dd2eb7622809f4073676757", "patch": "@@ -378,6 +378,7 @@ bootstrap_tool!(\n     RemoteTestClient, \"src/tools/remote-test-client\", \"remote-test-client\";\n     RustInstaller, \"src/tools/rust-installer\", \"fabricate\", is_external_tool = true;\n     RustdocTheme, \"src/tools/rustdoc-themes\", \"rustdoc-themes\";\n+    ExpandYamlAnchors, \"src/tools/expand-yaml-anchors\", \"expand-yaml-anchors\";\n );\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]"}, {"sha": "1293717f975aaa9413a2af4ea41506ff32788f9e", "filename": "src/ci/docker/mingw-check/Dockerfile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9beb8f54774ca0d41dd2eb7622809f4073676757/src%2Fci%2Fdocker%2Fmingw-check%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/9beb8f54774ca0d41dd2eb7622809f4073676757/src%2Fci%2Fdocker%2Fmingw-check%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fmingw-check%2FDockerfile?ref=9beb8f54774ca0d41dd2eb7622809f4073676757", "patch": "@@ -22,7 +22,8 @@ RUN sh /scripts/sccache.sh\n COPY mingw-check/validate-toolstate.sh /scripts/\n \n ENV RUN_CHECK_WITH_PARALLEL_QUERIES 1\n-ENV SCRIPT python2.7 ../x.py check --target=i686-pc-windows-gnu --host=i686-pc-windows-gnu && \\\n+ENV SCRIPT python2.7 ../x.py test src/tools/expand-yaml-anchors && \\\n+           python2.7 ../x.py check --target=i686-pc-windows-gnu --host=i686-pc-windows-gnu && \\\n            python2.7 ../x.py build --stage 0 src/tools/build-manifest && \\\n            python2.7 ../x.py test --stage 0 src/tools/compiletest && \\\n            python2.7 ../x.py test src/tools/tidy && \\"}, {"sha": "26ce69e33d9c3ea14450b82061ac05a0a88874b6", "filename": "src/ci/exec-with-shell.py", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9beb8f54774ca0d41dd2eb7622809f4073676757/src%2Fci%2Fexec-with-shell.py", "raw_url": "https://github.com/rust-lang/rust/raw/9beb8f54774ca0d41dd2eb7622809f4073676757/src%2Fci%2Fexec-with-shell.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fexec-with-shell.py?ref=9beb8f54774ca0d41dd2eb7622809f4073676757", "patch": "@@ -0,0 +1,16 @@\n+#!/usr/bin/env python\n+# A simple wrapper that forwards the arguments to bash, unless the\n+# CI_OVERRIDE_SHELL environment variable is present: in that case the content\n+# of that environment variable is used as the shell path.\n+\n+import os\n+import sys\n+import subprocess\n+\n+try:\n+    shell = os.environ[\"CI_OVERRIDE_SHELL\"]\n+except KeyError:\n+    shell = \"bash\"\n+\n+res = subprocess.call([shell] + sys.argv[1:])\n+sys.exit(res)"}, {"sha": "33573a4de9f683fba44c52bc3b18100da4a02d96", "filename": "src/ci/github-actions/ci.yml", "status": "added", "additions": 707, "deletions": 0, "changes": 707, "blob_url": "https://github.com/rust-lang/rust/blob/9beb8f54774ca0d41dd2eb7622809f4073676757/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/9beb8f54774ca0d41dd2eb7622809f4073676757/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=9beb8f54774ca0d41dd2eb7622809f4073676757", "patch": "@@ -0,0 +1,707 @@\n+######################################################\n+#   WARNING! Action needed when changing this file   #\n+######################################################\n+\n+# Due to GitHub Actions limitations, we can't use YAML Anchors directly in the\n+# CI configuration stored on the repository. To work around that this file is\n+# expanded by a tool in the repository, and the expansion is committed as well.\n+#\n+# After you make any change to the file you'll need to run this command:\n+#\n+#   ./x.py run src/tools/expand-yaml-anchors\n+#\n+# ...and commit the file it updated in addition to this one. If you forget this\n+# step CI will fail.\n+\n+---\n+\n+###############################\n+#   YAML Anchors Definition   #\n+###############################\n+\n+# This key contains most of the YAML anchors that will be used later in the\n+# document. YAML anchors allows us to greatly reduce duplication inside the CI\n+# configuration by reusing parts of the configuration.\n+#\n+# YAML anchors work by defining an anchor with `&anchor-name` and reusing its\n+# content in another place with `*anchor-name`. The special `<<` map key merges\n+# the content of the map with the content of the anchor (or list of anchors).\n+#\n+# The expand-yaml-anchors tool will automatically remove this block from the\n+# output YAML file.\n+x--expand-yaml-anchors--remove:\n+\n+  - &shared-ci-variables\n+    CI_JOB_NAME: ${{ matrix.name }}\n+\n+  - &public-variables\n+    SCCACHE_BUCKET: rust-lang-gha-caches\n+    TOOLSTATE_REPO: https://github.com/pietroalbini/rust-toolstate\n+\n+  - &prod-variables\n+    SCCACHE_BUCKET: rust-lang-gha-caches\n+    DEPLOY_BUCKET: rust-lang-gha\n+    TOOLSTATE_REPO: https://github.com/pietroalbini/rust-toolstate\n+    TOOLSTATE_ISSUES_API_URL: https://api.github.com/repos/pietroalbini/rust-toolstate/issues\n+    TOOLSTATE_PUBLISH: 1\n+    # AWS_SECRET_ACCESS_KEYs are stored in GitHub's secrets storage, named\n+    # AWS_SECRET_ACCESS_KEY_<keyid>. Including the key id in the name allows to\n+    # rotate them in a single branch while keeping the old key in another\n+    # branch, which wouldn't be possible if the key was named with the kind\n+    # (caches, artifacts...).\n+    CACHES_AWS_ACCESS_KEY_ID: AKIA46X5W6CZOMUQATD5\n+    ARTIFACTS_AWS_ACCESS_KEY_ID: AKIA46X5W6CZH5AYXDVF\n+\n+  - &base-job\n+    env: {}\n+\n+  - &job-linux-xl\n+    os: ubuntu-latest-xl\n+    <<: *base-job\n+\n+  - &job-macos-xl\n+    os: macos-latest  # We don't have an XL builder for this\n+    <<: *base-job\n+\n+  - &job-windows-xl\n+    os: windows-latest-xl\n+    <<: *base-job\n+\n+  - &step\n+    if: success() && !env.SKIP_JOB\n+\n+  - &step-run\n+    <<: *step\n+    # While on Linux and macOS builders it just forwards the arguments to the\n+    # system bash, this wrapper allows switching from the host's bash.exe to\n+    # the one we install along with MSYS2 mid-build on Windows.\n+    #\n+    # Once the step to install MSYS2 is executed, the CI_OVERRIDE_SHELL\n+    # environment variable is set pointing to our MSYS2's bash.exe. From that\n+    # moment the host's bash.exe will not be called anymore.\n+    #\n+    # This is needed because we can't launch our own bash.exe from the host\n+    # bash.exe, as that would load two different cygwin1.dll in memory, causing\n+    # \"cygwin heap mismatch\" errors.\n+    shell: python src/ci/exec-with-shell.py {0}\n+\n+  - &base-ci-job\n+    timeout-minutes: 600\n+    runs-on: \"${{ matrix.os }}\"\n+    env: *shared-ci-variables\n+    steps:\n+      - name: disable git crlf conversion\n+        run: git config --global core.autocrlf false\n+        shell: bash\n+\n+      - name: checkout the source code\n+        uses: actions/checkout@v1\n+        with:\n+          fetch-depth: 2\n+\n+      - name: configure GitHub Actions to kill the build when outdated\n+        uses: rust-lang/simpleinfra/github-actions/cancel-outdated-builds@master\n+        with:\n+          github_token: \"${{ secrets.github_token }}\"\n+        <<: *step\n+\n+      - name: add extra environment variables\n+        run: src/ci/scripts/setup-environment.sh\n+        env:\n+          # Since it's not possible to merge `${{ matrix.env }}` with the other\n+          # variables in `job.<name>.env`, the variables defined in the matrix\n+          # are passed to the `setup-environment.sh` script encoded in JSON,\n+          # which then uses log commands to actually set them.\n+          EXTRA_VARIABLES: ${{ toJson(matrix.env) }}\n+        <<: *step-run\n+\n+      - name: decide whether to skip this job\n+        run: src/ci/scripts/should-skip-this.sh\n+        <<: *step-run\n+\n+      - name: collect CPU statistics\n+        run: src/ci/scripts/collect-cpu-stats.sh\n+        <<: *step-run\n+\n+      - name: show the current environment\n+        run: src/ci/scripts/dump-environment.sh\n+        <<: *step-run\n+\n+      - name: install awscli\n+        run: src/ci/scripts/install-awscli.sh\n+        <<: *step-run\n+\n+      - name: install sccache\n+        run: src/ci/scripts/install-sccache.sh\n+        <<: *step-run\n+\n+      - name: install clang\n+        run: src/ci/scripts/install-clang.sh\n+        <<: *step-run\n+\n+      - name: install WIX\n+        run: src/ci/scripts/install-wix.sh\n+        <<: *step-run\n+\n+      - name: install InnoSetup\n+        run: src/ci/scripts/install-innosetup.sh\n+        <<: *step-run\n+\n+      - name: ensure the build happens on a partition with enough space\n+        run: src/ci/scripts/symlink-build-dir.sh\n+        <<: *step-run\n+\n+      - name: disable git crlf conversion\n+        run: src/ci/scripts/disable-git-crlf-conversion.sh\n+        <<: *step-run\n+\n+      - name: install MSYS2\n+        run: src/ci/scripts/install-msys2.sh\n+        <<: *step-run\n+\n+      - name: install MSYS2 packages\n+        run: src/ci/scripts/install-msys2-packages.sh\n+        <<: *step-run\n+\n+      - name: install MinGW\n+        run: src/ci/scripts/install-mingw.sh\n+        <<: *step-run\n+\n+      - name: install ninja\n+        run: src/ci/scripts/install-ninja.sh\n+        <<: *step-run\n+\n+      - name: enable ipv6 on Docker\n+        run: src/ci/scripts/enable-docker-ipv6.sh\n+        <<: *step-run\n+\n+      # Disable automatic line ending conversion (again). On Windows, when we're\n+      # installing dependencies, something switches the git configuration directory or\n+      # re-enables autocrlf. We've not tracked down the exact cause -- and there may\n+      # be multiple -- but this should ensure submodules are checked out with the\n+      # appropriate line endings.\n+      - name: disable git crlf conversion\n+        run: src/ci/scripts/disable-git-crlf-conversion.sh\n+        <<: *step-run\n+\n+      - name: checkout submodules\n+        run: src/ci/scripts/checkout-submodules.sh\n+        <<: *step-run\n+\n+      - name: ensure line endings are correct\n+        run: src/ci/scripts/verify-line-endings.sh\n+        <<: *step-run\n+\n+      - name: run the build\n+        run: src/ci/scripts/run-build-from-ci.sh\n+        env:\n+          AWS_ACCESS_KEY_ID: ${{ env.CACHES_AWS_ACCESS_KEY_ID }}\n+          AWS_SECRET_ACCESS_KEY: ${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.CACHES_AWS_ACCESS_KEY_ID)] }}\n+          TOOLSTATE_REPO_ACCESS_TOKEN: ${{ secrets.TOOLSTATE_REPO_ACCESS_TOKEN }}\n+        <<: *step-run\n+\n+      - name: upload artifacts to S3\n+        run: src/ci/scripts/upload-artifacts.sh\n+        env:\n+          AWS_ACCESS_KEY_ID: ${{ env.ARTIFACTS_AWS_ACCESS_KEY_ID }}\n+          AWS_SECRET_ACCESS_KEY: ${{ secrets[format('AWS_SECRET_ACCESS_KEY_{0}', env.ARTIFACTS_AWS_ACCESS_KEY_ID)] }}\n+        # Adding a condition on DEPLOY=1 or DEPLOY_ALT=1 is not needed as all deploy\n+        # builders *should* have the AWS credentials available. Still, explicitly\n+        # adding the condition is helpful as this way CI will not silently skip\n+        # deploying artifacts from a dist builder if the variables are misconfigured,\n+        # erroring about invalid credentials instead.\n+        if: success() && !env.SKIP_JOB && (github.event_name == 'push' || env.DEPLOY == '1' || env.DEPLOY_ALT == '1')\n+        <<: *step-run\n+\n+  # These snippets are used by the try-success, try-failure, auto-success and auto-failure jobs.\n+  # Check out their documentation for more information on why they're needed.\n+\n+  - &base-outcome-job\n+    name: bors build finished\n+    runs-on: ubuntu-latest\n+\n+  - &base-success-job\n+    if: success()\n+    steps:\n+      - name: mark the job as a success\n+        run: exit 0\n+    <<: *base-outcome-job\n+\n+  - &base-failure-job\n+    if: \"!success()\"\n+    steps:\n+      - name: mark the job as a failure\n+        run: exit 1\n+    <<: *base-outcome-job\n+\n+###########################\n+#   Builders definition   #\n+###########################\n+\n+name: CI\n+on:\n+  push:\n+    branches:\n+      - auto\n+      - try\n+      - master\n+  pull_request:\n+    branches:\n+      - \"**\"\n+\n+jobs:\n+  pr:\n+    <<: *base-ci-job\n+    name: PR\n+    env:\n+      <<: [*shared-ci-variables, *public-variables]\n+    if: github.event_name == 'pull_request'\n+    strategy:\n+      matrix:\n+        name:\n+          - mingw-check\n+          - x86_64-gnu-llvm-7\n+          - x86_64-gnu-tools\n+        include:\n+          - name: mingw-check\n+            <<: *job-linux-xl\n+\n+          - name: x86_64-gnu-llvm-7\n+            <<: *job-linux-xl\n+\n+          - name: x86_64-gnu-tools\n+            env:\n+              CI_ONLY_WHEN_SUBMODULES_CHANGED: 1\n+            <<: *job-linux-xl\n+\n+  try:\n+    <<: *base-ci-job\n+    name: try\n+    env:\n+      <<: [*shared-ci-variables, *prod-variables]\n+    if: github.event_name == 'push' && github.ref == 'refs/heads/try'\n+    strategy:\n+      matrix:\n+        name:\n+          - dist-x86_64-linux\n+          - dist-x86_64-linux-alt\n+        include:\n+          - name: dist-x86_64-linux\n+            <<: *job-linux-xl\n+\n+          - name: dist-x86_64-linux-alt\n+            env:\n+              IMAGE: dist-x86_64-linux\n+            <<: *job-linux-xl\n+\n+  auto:\n+    <<: *base-ci-job\n+    name: auto\n+    env:\n+      <<: [*shared-ci-variables, *prod-variables]\n+    if: github.event_name == 'push' && github.ref == 'refs/heads/auto'\n+    strategy:\n+      matrix:\n+        name:\n+          - arm-android\n+          - armhf-gnu\n+          - dist-aarch64-linux\n+          - dist-android\n+          - dist-arm-linux\n+          - dist-armhf-linux\n+          - dist-armv7-linux\n+          - dist-i586-gnu-i586-i686-musl\n+          - dist-i686-freebsd\n+          - dist-i686-linux\n+          - dist-i686-mingw\n+          - dist-i686-msvc\n+          - dist-mips-linux\n+          - dist-mips64-linux\n+          - dist-mips64el-linux\n+          - dist-mipsel-linux\n+          - dist-powerpc-linux\n+          - dist-powerpc64-linux\n+          - dist-powerpc64le-linux\n+          - dist-s390x-linux\n+          - dist-various-1\n+          - dist-various-2\n+          - dist-x86_64-apple\n+          - dist-x86_64-apple-alt\n+          - dist-x86_64-freebsd\n+          - dist-x86_64-linux\n+          - dist-x86_64-linux-alt\n+          - dist-x86_64-mingw\n+          - dist-x86_64-msvc\n+          - dist-x86_64-msvc-alt\n+          - dist-x86_64-musl\n+          - dist-x86_64-netbsd\n+          - i686-gnu\n+          - i686-gnu-nopt\n+          - i686-mingw-1\n+          - i686-mingw-2\n+          - i686-msvc-1\n+          - i686-msvc-2\n+          - mingw-check\n+          - test-various\n+          - wasm32\n+          - x86_64-apple\n+          - x86_64-gnu\n+          - x86_64-gnu-aux\n+          - x86_64-gnu-debug\n+          - x86_64-gnu-distcheck\n+          - x86_64-gnu-full-bootstrap\n+          - x86_64-gnu-llvm-7\n+          - x86_64-gnu-nopt\n+          - x86_64-gnu-tools\n+          - x86_64-mingw-1\n+          - x86_64-mingw-2\n+          - x86_64-msvc-1\n+          - x86_64-msvc-2\n+          - x86_64-msvc-aux\n+          - x86_64-msvc-cargo\n+          - x86_64-msvc-tools\n+        include:\n+          #############################\n+          #   Linux/Docker builders   #\n+          #############################\n+\n+          - name: arm-android\n+            <<: *job-linux-xl\n+\n+          - name: armhf-gnu\n+            <<: *job-linux-xl\n+\n+          - name: dist-aarch64-linux\n+            <<: *job-linux-xl\n+\n+          - name: dist-android\n+            <<: *job-linux-xl\n+\n+          - name: dist-arm-linux\n+            <<: *job-linux-xl\n+\n+          - name: dist-armhf-linux\n+            <<: *job-linux-xl\n+\n+          - name: dist-armv7-linux\n+            <<: *job-linux-xl\n+\n+          - name: dist-i586-gnu-i586-i686-musl\n+            <<: *job-linux-xl\n+\n+          - name: dist-i686-freebsd\n+            <<: *job-linux-xl\n+\n+          - name: dist-i686-linux\n+            <<: *job-linux-xl\n+\n+          - name: dist-mips-linux\n+            <<: *job-linux-xl\n+\n+          - name: dist-mips64-linux\n+            <<: *job-linux-xl\n+\n+          - name: dist-mips64el-linux\n+            <<: *job-linux-xl\n+\n+          - name: dist-mipsel-linux\n+            <<: *job-linux-xl\n+\n+          - name: dist-powerpc-linux\n+            <<: *job-linux-xl\n+\n+          - name: dist-powerpc64-linux\n+            <<: *job-linux-xl\n+\n+          - name: dist-powerpc64le-linux\n+            <<: *job-linux-xl\n+\n+          - name: dist-s390x-linux\n+            <<: *job-linux-xl\n+\n+          - name: dist-various-1\n+            <<: *job-linux-xl\n+\n+          - name: dist-various-2\n+            <<: *job-linux-xl\n+\n+          - name: dist-x86_64-freebsd\n+            <<: *job-linux-xl\n+\n+          - name: dist-x86_64-linux\n+            <<: *job-linux-xl\n+\n+          - name: dist-x86_64-linux-alt\n+            env:\n+              IMAGE: dist-x86_64-linux\n+            <<: *job-linux-xl\n+\n+          - name: dist-x86_64-musl\n+            <<: *job-linux-xl\n+\n+          - name: dist-x86_64-netbsd\n+            <<: *job-linux-xl\n+\n+          - name: i686-gnu\n+            <<: *job-linux-xl\n+\n+          - name: i686-gnu-nopt\n+            <<: *job-linux-xl\n+\n+          - name: mingw-check\n+            <<: *job-linux-xl\n+\n+          - name: test-various\n+            <<: *job-linux-xl\n+\n+          - name: wasm32\n+            <<: *job-linux-xl\n+\n+          - name: x86_64-gnu\n+            <<: *job-linux-xl\n+\n+          - name: x86_64-gnu-aux\n+            <<: *job-linux-xl\n+\n+          - name: x86_64-gnu-debug\n+            <<: *job-linux-xl\n+\n+          - name: x86_64-gnu-distcheck\n+            <<: *job-linux-xl\n+\n+          - name: x86_64-gnu-full-bootstrap\n+            <<: *job-linux-xl\n+\n+          - name: x86_64-gnu-llvm-7\n+            env:\n+              RUST_BACKTRACE: 1\n+            <<: *job-linux-xl\n+\n+          - name: x86_64-gnu-nopt\n+            <<: *job-linux-xl\n+\n+          - name: x86_64-gnu-tools\n+            env:\n+              DEPLOY_TOOLSTATES_JSON: toolstates-linux.json\n+            <<: *job-linux-xl\n+\n+          ####################\n+          #  macOS Builders  #\n+          ####################\n+\n+          - name: dist-x86_64-apple\n+            env:\n+              SCRIPT: ./x.py dist\n+              RUST_CONFIGURE_ARGS: --target=aarch64-apple-ios,x86_64-apple-ios --enable-full-tools --enable-sanitizers --enable-profiler --set rust.jemalloc\n+              RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+              MACOSX_DEPLOYMENT_TARGET: 10.7\n+              NO_LLVM_ASSERTIONS: 1\n+              NO_DEBUG_ASSERTIONS: 1\n+              DIST_REQUIRE_ALL_TOOLS: 1\n+            <<: *job-macos-xl\n+\n+          - name: dist-x86_64-apple-alt\n+            env:\n+              SCRIPT: ./x.py dist\n+              RUST_CONFIGURE_ARGS: --enable-extended --enable-profiler --set rust.jemalloc\n+              RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+              MACOSX_DEPLOYMENT_TARGET: 10.7\n+              NO_LLVM_ASSERTIONS: 1\n+              NO_DEBUG_ASSERTIONS: 1\n+            <<: *job-macos-xl\n+\n+          - name: x86_64-apple\n+            env:\n+              SCRIPT: ./x.py test\n+              RUST_CONFIGURE_ARGS: --build=x86_64-apple-darwin --enable-sanitizers --enable-profiler --set rust.jemalloc\n+              RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+              MACOSX_DEPLOYMENT_TARGET: 10.8\n+              MACOSX_STD_DEPLOYMENT_TARGET: 10.7\n+              NO_LLVM_ASSERTIONS: 1\n+              NO_DEBUG_ASSERTIONS: 1\n+            <<: *job-macos-xl\n+\n+          ######################\n+          #  Windows Builders  #\n+          ######################\n+\n+          - name: x86_64-msvc-1\n+            env:\n+              RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n+              SCRIPT: make ci-subset-1\n+              # FIXME(#59637)\n+              NO_DEBUG_ASSERTIONS: 1\n+              NO_LLVM_ASSERTIONS: 1\n+            <<: *job-windows-xl\n+\n+          - name: x86_64-msvc-2\n+            env:\n+              RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n+              SCRIPT: make ci-subset-2\n+            <<: *job-windows-xl\n+\n+          - name: i686-msvc-1\n+            env:\n+              RUST_CONFIGURE_ARGS: --build=i686-pc-windows-msvc\n+              SCRIPT: make ci-subset-1\n+              # FIXME(#59637)\n+              NO_DEBUG_ASSERTIONS: 1\n+              NO_LLVM_ASSERTIONS: 1\n+            <<: *job-windows-xl\n+\n+          - name: i686-msvc-2\n+            env:\n+              RUST_CONFIGURE_ARGS: --build=i686-pc-windows-msvc\n+              SCRIPT: make ci-subset-2\n+              # FIXME(#59637)\n+              NO_DEBUG_ASSERTIONS: 1\n+              NO_LLVM_ASSERTIONS: 1\n+            <<: *job-windows-xl\n+\n+          - name: x86_64-msvc-aux\n+            env:\n+              RUST_CHECK_TARGET: check-aux EXCLUDE_CARGO=1\n+              RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc\n+            <<: *job-windows-xl\n+\n+          - name: x86_64-msvc-cargo\n+            env:\n+              SCRIPT: python x.py test src/tools/cargotest src/tools/cargo\n+              RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc\n+              VCVARS_BAT: vcvars64.bat\n+              # FIXME(#59637)\n+              NO_DEBUG_ASSERTIONS: 1\n+              NO_LLVM_ASSERTIONS: 1\n+            <<: *job-windows-xl\n+\n+          - name: x86_64-msvc-tools\n+            env:\n+              SCRIPT: src/ci/docker/x86_64-gnu-tools/checktools.sh x.py /tmp/toolstate/toolstates.json windows\n+              RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --save-toolstates=/tmp/toolstate/toolstates.json\n+            <<: *job-windows-xl\n+\n+          # 32/64-bit MinGW builds.\n+          #\n+          # We are using MinGW with posix threads since LLVM does not compile with\n+          # the win32 threads version due to missing support for C++'s std::thread.\n+          #\n+          # Instead of relying on the MinGW version installed on appveryor we download\n+          # and install one ourselves so we won't be surprised by changes to appveyor's\n+          # build image.\n+          #\n+          # Finally, note that the downloads below are all in the `rust-lang-ci` S3\n+          # bucket, but they cleraly didn't originate there! The downloads originally\n+          # came from the mingw-w64 SourceForge download site. Unfortunately\n+          # SourceForge is notoriously flaky, so we mirror it on our own infrastructure.\n+\n+          - name: i686-mingw-1\n+            env:\n+              RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu\n+              SCRIPT: make ci-mingw-subset-1\n+              CUSTOM_MINGW: 1\n+              # FIXME(#59637)\n+              NO_DEBUG_ASSERTIONS: 1\n+              NO_LLVM_ASSERTIONS: 1\n+            <<: *job-windows-xl\n+\n+          - name: i686-mingw-2\n+            env:\n+              RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu\n+              SCRIPT: make ci-mingw-subset-2\n+              CUSTOM_MINGW: 1\n+            <<: *job-windows-xl\n+\n+          - name: x86_64-mingw-1\n+            env:\n+              SCRIPT: make ci-mingw-subset-1\n+              RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu\n+              CUSTOM_MINGW: 1\n+              # FIXME(#59637)\n+              NO_DEBUG_ASSERTIONS: 1\n+              NO_LLVM_ASSERTIONS: 1\n+            <<: *job-windows-xl\n+\n+          - name: x86_64-mingw-2\n+            env:\n+              SCRIPT: make ci-mingw-subset-2\n+              RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu\n+              CUSTOM_MINGW: 1\n+            <<: *job-windows-xl\n+\n+          - name: dist-x86_64-msvc\n+            env:\n+              RUST_CONFIGURE_ARGS: >-\n+                --build=x86_64-pc-windows-msvc\n+                --target=x86_64-pc-windows-msvc,aarch64-pc-windows-msvc\n+                --enable-full-tools\n+                --enable-profiler\n+              SCRIPT: python x.py dist\n+              DIST_REQUIRE_ALL_TOOLS: 1\n+            <<: *job-windows-xl\n+\n+          - name: dist-i686-msvc\n+            env:\n+              RUST_CONFIGURE_ARGS: >-\n+                --build=i686-pc-windows-msvc\n+                --target=i586-pc-windows-msvc\n+                --enable-full-tools\n+                --enable-profiler\n+              SCRIPT: python x.py dist\n+              DIST_REQUIRE_ALL_TOOLS: 1\n+            <<: *job-windows-xl\n+\n+          - name: dist-i686-mingw\n+            env:\n+              RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --enable-full-tools --enable-profiler\n+              SCRIPT: python x.py dist\n+              CUSTOM_MINGW: 1\n+              DIST_REQUIRE_ALL_TOOLS: 1\n+            <<: *job-windows-xl\n+\n+          - name: dist-x86_64-mingw\n+            env:\n+              SCRIPT: python x.py dist\n+              RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-full-tools --enable-profiler\n+              CUSTOM_MINGW: 1\n+              DIST_REQUIRE_ALL_TOOLS: 1\n+            <<: *job-windows-xl\n+\n+          - name: dist-x86_64-msvc-alt\n+            env:\n+              RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-extended --enable-profiler\n+              SCRIPT: python x.py dist\n+            <<: *job-windows-xl\n+\n+  master:\n+    name: master\n+    runs-on: ubuntu-latest\n+    env:\n+      <<: [*prod-variables]\n+    if: github.event_name == 'push' && github.ref == 'refs/heads/master'\n+    steps:\n+      - name: checkout the source code\n+        uses: actions/checkout@v1\n+        with:\n+          fetch-depth: 2\n+\n+      - name: publish toolstate\n+        run: src/ci/publish_toolstate.sh\n+        env:\n+          TOOLSTATE_REPO_ACCESS_TOKEN: ${{ secrets.TOOLSTATE_REPO_ACCESS_TOKEN }}\n+        <<: *step-run\n+\n+  # These jobs don't actually test anything, but they're used to tell bors the\n+  # build completed, as there is no practical way to detect when a workflow is\n+  # successful listening to webhooks only.\n+  try-success:\n+    needs: [try]\n+    <<: *base-success-job\n+  try-failure:\n+    needs: [try]\n+    <<: *base-failure-job\n+  auto-success:\n+    needs: [auto]\n+    <<: *base-success-job\n+  auto-failure:\n+    needs: [auto]\n+    <<: *base-failure-job"}, {"sha": "78728dd7d005cc39254a8fccc86537bfd437ae55", "filename": "src/ci/scripts/install-mingw.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9beb8f54774ca0d41dd2eb7622809f4073676757/src%2Fci%2Fscripts%2Finstall-mingw.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9beb8f54774ca0d41dd2eb7622809f4073676757/src%2Fci%2Fscripts%2Finstall-mingw.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Finstall-mingw.sh?ref=9beb8f54774ca0d41dd2eb7622809f4073676757", "patch": "@@ -50,8 +50,8 @@ if isWindows; then\n     esac\n \n     if [[ \"${CUSTOM_MINGW-0}\" -ne 1 ]]; then\n-        pacman -S --noconfirm --needed mingw-w64-$arch-toolchain mingw-w64-$arch-cmake \\\n-            mingw-w64-$arch-gcc mingw-w64-$arch-python2\n+        pacman -S --noconfirm --needed mingw-w64-$arch-toolchain \\\n+            mingw-w64-$arch-cmake mingw-w64-$arch-gcc mingw-w64-$arch-python2\n         ciCommandAddPath \"$(ciCheckoutPath)/msys2/mingw${bits}/bin\"\n     else\n         mingw_dir=\"mingw${bits}\""}, {"sha": "3c3b5007f869780ea3809433c235f36a09e4763f", "filename": "src/ci/scripts/install-msys2.sh", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9beb8f54774ca0d41dd2eb7622809f4073676757/src%2Fci%2Fscripts%2Finstall-msys2.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9beb8f54774ca0d41dd2eb7622809f4073676757/src%2Fci%2Fscripts%2Finstall-msys2.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Finstall-msys2.sh?ref=9beb8f54774ca0d41dd2eb7622809f4073676757", "patch": "@@ -22,4 +22,7 @@ if isWindows; then\n     rm msys2.nupkg chocolatey-core.extension.nupkg\n     mkdir -p \"$(ciCheckoutPath)/msys2/home/${USERNAME}\"\n     ciCommandAddPath \"$(ciCheckoutPath)/msys2/usr/bin\"\n+\n+    echo \"switching shell to use our own bash\"\n+    ciCommandSetEnv CI_OVERRIDE_SHELL \"$(ciCheckoutPath)/msys2/usr/bin/bash.exe\"\n fi"}, {"sha": "411ef6f9b2822de63d2bd621db865e68565161e4", "filename": "src/ci/scripts/setup-environment.sh", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9beb8f54774ca0d41dd2eb7622809f4073676757/src%2Fci%2Fscripts%2Fsetup-environment.sh", "raw_url": "https://github.com/rust-lang/rust/raw/9beb8f54774ca0d41dd2eb7622809f4073676757/src%2Fci%2Fscripts%2Fsetup-environment.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Fsetup-environment.sh?ref=9beb8f54774ca0d41dd2eb7622809f4073676757", "patch": "@@ -11,16 +11,34 @@ source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n # Since matrix variables are readonly in Azure Pipelines, we take\n # INITIAL_RUST_CONFIGURE_ARGS and establish RUST_CONFIGURE_ARGS\n # which downstream steps can alter\n-# macOS ships with Bash 3.16, so we cannot use [[ -v FOO ]],\n-# which was introduced in Bash 4.2\n-if [[ -z \"${INITIAL_RUST_CONFIGURE_ARGS+x}\" ]]; then\n-    INITIAL_RUST_CONFIG=\"\"\n-    echo \"No initial Rust configure args set\"\n-else\n-    INITIAL_RUST_CONFIG=\"${INITIAL_RUST_CONFIGURE_ARGS}\"\n-    ciCommandSetEnv RUST_CONFIGURE_ARGS \"${INITIAL_RUST_CONFIG}\"\n+if isAzurePipelines; then\n+    # macOS ships with Bash 3.16, so we cannot use [[ -v FOO ]],\n+    # which was introduced in Bash 4.2\n+    if [[ -z \"${INITIAL_RUST_CONFIGURE_ARGS+x}\" ]]; then\n+        INITIAL_RUST_CONFIG=\"\"\n+        echo \"No initial Rust configure args set\"\n+    else\n+        INITIAL_RUST_CONFIG=\"${INITIAL_RUST_CONFIGURE_ARGS}\"\n+        ciCommandSetEnv RUST_CONFIGURE_ARGS \"${INITIAL_RUST_CONFIG}\"\n+    fi\n fi\n \n+# Load extra environment variables\n+vars=\"${EXTRA_VARIABLES-}\"\n+echo \"${vars}\" | jq '' >/dev/null  # Validate JSON and exit on errors\n+for key in $(echo \"${vars}\" | jq \"keys[]\" -r); do\n+    # On Windows, for whatever reason, $key contains the BOM character in it,\n+    # and that messes up `jq \".${key}\"`. This line strips the BOM from the key.\n+    #\n+    # https://unix.stackexchange.com/a/381263\n+    key=\"$(echo \"${key}\" | sed '1s/^\\xEF\\xBB\\xBF//')\"\n+\n+    echo \"adding extra environment variable ${key}\"\n+    value=\"$(echo \"${vars}\" | jq \".${key}\" -r)\"\n+    export \"${key}\"=\"${value}\"\n+    ciCommandSetEnv \"${key}\" \"${value}\"\n+done\n+\n # Builders starting with `dist-` are dist builders, but if they also end with\n # `-alt` they are alternate dist builders.\n if [[ \"${CI_JOB_NAME}\" = dist-* ]]; then"}, {"sha": "2c63e28b693daf4f80839609a58988bb36b39882", "filename": "src/tools/expand-yaml-anchors/Cargo.toml", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9beb8f54774ca0d41dd2eb7622809f4073676757/src%2Ftools%2Fexpand-yaml-anchors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9beb8f54774ca0d41dd2eb7622809f4073676757/src%2Ftools%2Fexpand-yaml-anchors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fexpand-yaml-anchors%2FCargo.toml?ref=9beb8f54774ca0d41dd2eb7622809f4073676757", "patch": "@@ -0,0 +1,9 @@\n+[package]\n+name = \"expand-yaml-anchors\"\n+version = \"0.1.0\"\n+authors = [\"Pietro Albini <pietro@pietroalbini.org>\"]\n+edition = \"2018\"\n+\n+[dependencies]\n+yaml-rust = \"0.4.3\"\n+yaml-merge-keys = \"0.4.0\""}, {"sha": "f2ed8aa409a36e4077986b5f8b11b2c334bce97d", "filename": "src/tools/expand-yaml-anchors/src/main.rs", "status": "added", "additions": 202, "deletions": 0, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/9beb8f54774ca0d41dd2eb7622809f4073676757/src%2Ftools%2Fexpand-yaml-anchors%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9beb8f54774ca0d41dd2eb7622809f4073676757/src%2Ftools%2Fexpand-yaml-anchors%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fexpand-yaml-anchors%2Fsrc%2Fmain.rs?ref=9beb8f54774ca0d41dd2eb7622809f4073676757", "patch": "@@ -0,0 +1,202 @@\n+use std::error::Error;\n+use std::path::{Path, PathBuf};\n+use yaml_rust::{Yaml, YamlEmitter, YamlLoader};\n+\n+/// List of directories containing files to expand. The first tuple element is the source\n+/// directory, while the second tuple element is the destination directory.\n+#[rustfmt::skip]\n+static TO_EXPAND: &[(&str, &str)] = &[\n+    (\"src/ci/github-actions\", \".github/workflows\"),\n+];\n+\n+/// Name of a special key that will be removed from all the maps in expanded configuration files.\n+/// This key can then be used to contain shared anchors.\n+static REMOVE_MAP_KEY: &str = \"x--expand-yaml-anchors--remove\";\n+\n+/// Message that will be included at the top of all the expanded files. {source} will be replaced\n+/// with the source filename relative to the base path.\n+static HEADER_MESSAGE: &str = \"\\\n+#############################################################\n+#   WARNING: automatically generated file, DO NOT CHANGE!   #\n+#############################################################\n+\n+# This file was automatically generated by the expand-yaml-anchors tool. The\n+# source file that generated this one is:\n+#\n+#   {source}\n+#\n+# Once you make changes to that file you need to run:\n+#\n+#   ./x.py run src/tools/expand-yaml-anchors/\n+#\n+# The CI build will fail if the tool is not run after changes to this file.\n+\n+\";\n+\n+enum Mode {\n+    Check,\n+    Generate,\n+}\n+\n+struct App {\n+    mode: Mode,\n+    base: PathBuf,\n+}\n+\n+impl App {\n+    fn from_args() -> Result<Self, Box<dyn Error>> {\n+        // Parse CLI arguments\n+        let args = std::env::args().skip(1).collect::<Vec<_>>();\n+        let (mode, base) = match args.iter().map(|s| s.as_str()).collect::<Vec<_>>().as_slice() {\n+            &[\"generate\", ref base] => (Mode::Generate, PathBuf::from(base)),\n+            &[\"check\", ref base] => (Mode::Check, PathBuf::from(base)),\n+            _ => {\n+                eprintln!(\"usage: expand-yaml-anchors <source-dir> <dest-dir>\");\n+                std::process::exit(1);\n+            }\n+        };\n+\n+        Ok(App { mode, base })\n+    }\n+\n+    fn run(&self) -> Result<(), Box<dyn Error>> {\n+        for (source, dest) in TO_EXPAND {\n+            let source = self.base.join(source);\n+            let dest = self.base.join(dest);\n+            for entry in std::fs::read_dir(&source)? {\n+                let path = entry?.path();\n+                if !path.is_file() || path.extension().and_then(|e| e.to_str()) != Some(\"yml\") {\n+                    continue;\n+                }\n+\n+                let dest_path = dest.join(path.file_name().unwrap());\n+                self.expand(&path, &dest_path).with_context(|| match self.mode {\n+                    Mode::Generate => format!(\n+                        \"failed to expand {} into {}\",\n+                        self.path(&path),\n+                        self.path(&dest_path)\n+                    ),\n+                    Mode::Check => format!(\"{} is not up to date\", self.path(&dest_path)),\n+                })?;\n+            }\n+        }\n+        Ok(())\n+    }\n+\n+    fn expand(&self, source: &Path, dest: &Path) -> Result<(), Box<dyn Error>> {\n+        let content = std::fs::read_to_string(source)\n+            .with_context(|| format!(\"failed to read {}\", self.path(source)))?;\n+\n+        let mut buf = HEADER_MESSAGE.replace(\"{source}\", &self.path(source).to_string());\n+\n+        let documents = YamlLoader::load_from_str(&content)\n+            .with_context(|| format!(\"failed to parse {}\", self.path(source)))?;\n+        for mut document in documents.into_iter() {\n+            document = yaml_merge_keys::merge_keys(document)\n+                .with_context(|| format!(\"failed to expand {}\", self.path(source)))?;\n+            document = filter_document(document);\n+\n+            YamlEmitter::new(&mut buf).dump(&document).map_err(|err| WithContext {\n+                context: \"failed to serialize the expanded yaml\".into(),\n+                source: Box::new(err),\n+            })?;\n+            buf.push('\\n');\n+        }\n+\n+        match self.mode {\n+            Mode::Check => {\n+                let old = std::fs::read_to_string(dest)\n+                    .with_context(|| format!(\"failed to read {}\", self.path(dest)))?;\n+                if old != buf {\n+                    return Err(Box::new(StrError(format!(\n+                        \"{} and {} are different\",\n+                        self.path(source),\n+                        self.path(dest),\n+                    ))));\n+                }\n+            }\n+            Mode::Generate => {\n+                std::fs::write(dest, buf.as_bytes())\n+                    .with_context(|| format!(\"failed to write to {}\", self.path(dest)))?;\n+            }\n+        }\n+        Ok(())\n+    }\n+\n+    fn path<'a>(&self, path: &'a Path) -> impl std::fmt::Display + 'a {\n+        path.strip_prefix(&self.base).unwrap_or(path).display()\n+    }\n+}\n+\n+fn filter_document(document: Yaml) -> Yaml {\n+    match document {\n+        Yaml::Hash(map) => Yaml::Hash(\n+            map.into_iter()\n+                .filter(|(key, _)| {\n+                    if let Yaml::String(string) = &key { string != REMOVE_MAP_KEY } else { true }\n+                })\n+                .map(|(key, value)| (filter_document(key), filter_document(value)))\n+                .collect(),\n+        ),\n+        Yaml::Array(vec) => {\n+            Yaml::Array(vec.into_iter().map(|item| filter_document(item)).collect())\n+        }\n+        other => other,\n+    }\n+}\n+\n+fn main() {\n+    if let Err(err) = App::from_args().and_then(|app| app.run()) {\n+        eprintln!(\"error: {}\", err);\n+\n+        let mut source = err.as_ref() as &dyn Error;\n+        while let Some(err) = source.source() {\n+            eprintln!(\"caused by: {}\", err);\n+            source = err;\n+        }\n+\n+        std::process::exit(1);\n+    }\n+}\n+\n+#[derive(Debug)]\n+struct StrError(String);\n+\n+impl Error for StrError {}\n+\n+impl std::fmt::Display for StrError {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        std::fmt::Display::fmt(&self.0, f)\n+    }\n+}\n+\n+#[derive(Debug)]\n+struct WithContext {\n+    context: String,\n+    source: Box<dyn Error>,\n+}\n+\n+impl std::fmt::Display for WithContext {\n+    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n+        write!(f, \"{}\", self.context)\n+    }\n+}\n+\n+impl Error for WithContext {\n+    fn source(&self) -> Option<&(dyn Error + 'static)> {\n+        Some(self.source.as_ref())\n+    }\n+}\n+\n+pub(crate) trait ResultExt<T> {\n+    fn with_context<F: FnOnce() -> String>(self, f: F) -> Result<T, Box<dyn Error>>;\n+}\n+\n+impl<T, E: Into<Box<dyn Error>>> ResultExt<T> for Result<T, E> {\n+    fn with_context<F: FnOnce() -> String>(self, f: F) -> Result<T, Box<dyn Error>> {\n+        match self {\n+            Ok(ok) => Ok(ok),\n+            Err(err) => Err(WithContext { source: err.into(), context: f() }.into()),\n+        }\n+    }\n+}"}]}