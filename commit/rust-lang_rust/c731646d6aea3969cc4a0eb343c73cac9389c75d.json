{"sha": "c731646d6aea3969cc4a0eb343c73cac9389c75d", "node_id": "C_kwDOAAsO6NoAKGM3MzE2NDZkNmFlYTM5NjljYzRhMGViMzQzYzczY2FjOTM4OWM3NWQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-08T12:38:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-08T12:38:18Z"}, "message": "Rollup merge of #102675 - ouz-a:mir-technical-debt, r=oli-obk\n\nRemove `mir::CastKind::Misc`\n\nAs discussed in #97649 `mir::CastKind::Misc` is not clear, this PR addresses that by creating a new enum variant for every valid cast.\n\nr? ````@oli-obk````", "tree": {"sha": "f02f537ee5ee120e9eaf813c31e9e33657ec6a11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f02f537ee5ee120e9eaf813c31e9e33657ec6a11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c731646d6aea3969cc4a0eb343c73cac9389c75d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjQW86CRBK7hj4Ov3rIwAAkwEIACOT1LEB0NbacWAPf1AUZfkK\nk/gKdPZC/QrAAn1ks3v6CUpuHAQWTBWbWpi/s/ehQmb3+wrBqEsVahdFYIgLM6zM\npPyUJT/5fT8o4MxUgaC8k6dHIIeJazrHVo22JFf4abEHIlv5fmNMEmSI8X12q5D1\nL8sux/avB5cV6ykv33SXKikNb/bu0eel58TZMWf5WMAEyS83wvWgZWE+B4xy6Vc7\noF4WoVS4WurXzK62qfDa5K9zVHs6c4RaHwUL+L2DsH0Gdso2NKlSzNvTvhHmfIZ1\n9CW2pcRZ8x5ESay55x6EB3xYnLNzU9B0au+QgK7T2NHhtgRk7DAojHYn3e9Y4vw=\n=iSrh\n-----END PGP SIGNATURE-----\n", "payload": "tree f02f537ee5ee120e9eaf813c31e9e33657ec6a11\nparent 6bcdf8aa7435a3c72a7ea3f5e54b67f5faec9264\nparent d59c7ff000db581bd03c2da79046af431678fab8\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1665232698 +0200\ncommitter GitHub <noreply@github.com> 1665232698 +0200\n\nRollup merge of #102675 - ouz-a:mir-technical-debt, r=oli-obk\n\nRemove `mir::CastKind::Misc`\n\nAs discussed in #97649 `mir::CastKind::Misc` is not clear, this PR addresses that by creating a new enum variant for every valid cast.\n\nr? ````@oli-obk````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c731646d6aea3969cc4a0eb343c73cac9389c75d", "html_url": "https://github.com/rust-lang/rust/commit/c731646d6aea3969cc4a0eb343c73cac9389c75d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c731646d6aea3969cc4a0eb343c73cac9389c75d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bcdf8aa7435a3c72a7ea3f5e54b67f5faec9264", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bcdf8aa7435a3c72a7ea3f5e54b67f5faec9264", "html_url": "https://github.com/rust-lang/rust/commit/6bcdf8aa7435a3c72a7ea3f5e54b67f5faec9264"}, {"sha": "d59c7ff000db581bd03c2da79046af431678fab8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d59c7ff000db581bd03c2da79046af431678fab8", "html_url": "https://github.com/rust-lang/rust/commit/d59c7ff000db581bd03c2da79046af431678fab8"}], "stats": {"total": 247, "additions": 190, "deletions": 57}, "files": [{"sha": "4962d9476b5471937d7a994ebcfba8cf0539c9f0", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 89, "deletions": 10, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/c731646d6aea3969cc4a0eb343c73cac9389c75d/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c731646d6aea3969cc4a0eb343c73cac9389c75d/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=c731646d6aea3969cc4a0eb343c73cac9389c75d", "patch": "@@ -2209,25 +2209,104 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                             }\n                         }\n                     }\n-\n-                    CastKind::Misc => {\n+                    CastKind::IntToInt => {\n                         let ty_from = op.ty(body, tcx);\n                         let cast_ty_from = CastTy::from_ty(ty_from);\n                         let cast_ty_to = CastTy::from_ty(*ty);\n-                        // Misc casts are either between floats and ints, or one ptr type to another.\n                         match (cast_ty_from, cast_ty_to) {\n-                            (\n-                                Some(CastTy::Int(_) | CastTy::Float),\n-                                Some(CastTy::Int(_) | CastTy::Float),\n-                            )\n-                            | (Some(CastTy::Ptr(_) | CastTy::FnPtr), Some(CastTy::Ptr(_))) => (),\n+                            (Some(CastTy::Int(_)), Some(CastTy::Int(_))) => (),\n                             _ => {\n                                 span_mirbug!(\n                                     self,\n                                     rvalue,\n-                                    \"Invalid Misc cast {:?} -> {:?}\",\n+                                    \"Invalid IntToInt cast {:?} -> {:?}\",\n                                     ty_from,\n-                                    ty,\n+                                    ty\n+                                )\n+                            }\n+                        }\n+                    }\n+                    CastKind::IntToFloat => {\n+                        let ty_from = op.ty(body, tcx);\n+                        let cast_ty_from = CastTy::from_ty(ty_from);\n+                        let cast_ty_to = CastTy::from_ty(*ty);\n+                        match (cast_ty_from, cast_ty_to) {\n+                            (Some(CastTy::Int(_)), Some(CastTy::Float)) => (),\n+                            _ => {\n+                                span_mirbug!(\n+                                    self,\n+                                    rvalue,\n+                                    \"Invalid IntToFloat cast {:?} -> {:?}\",\n+                                    ty_from,\n+                                    ty\n+                                )\n+                            }\n+                        }\n+                    }\n+                    CastKind::FloatToInt => {\n+                        let ty_from = op.ty(body, tcx);\n+                        let cast_ty_from = CastTy::from_ty(ty_from);\n+                        let cast_ty_to = CastTy::from_ty(*ty);\n+                        match (cast_ty_from, cast_ty_to) {\n+                            (Some(CastTy::Float), Some(CastTy::Int(_))) => (),\n+                            _ => {\n+                                span_mirbug!(\n+                                    self,\n+                                    rvalue,\n+                                    \"Invalid FloatToInt cast {:?} -> {:?}\",\n+                                    ty_from,\n+                                    ty\n+                                )\n+                            }\n+                        }\n+                    }\n+                    CastKind::FloatToFloat => {\n+                        let ty_from = op.ty(body, tcx);\n+                        let cast_ty_from = CastTy::from_ty(ty_from);\n+                        let cast_ty_to = CastTy::from_ty(*ty);\n+                        match (cast_ty_from, cast_ty_to) {\n+                            (Some(CastTy::Float), Some(CastTy::Float)) => (),\n+                            _ => {\n+                                span_mirbug!(\n+                                    self,\n+                                    rvalue,\n+                                    \"Invalid FloatToFloat cast {:?} -> {:?}\",\n+                                    ty_from,\n+                                    ty\n+                                )\n+                            }\n+                        }\n+                    }\n+                    CastKind::FnPtrToPtr => {\n+                        let ty_from = op.ty(body, tcx);\n+                        let cast_ty_from = CastTy::from_ty(ty_from);\n+                        let cast_ty_to = CastTy::from_ty(*ty);\n+                        match (cast_ty_from, cast_ty_to) {\n+                            (Some(CastTy::FnPtr), Some(CastTy::Ptr(_))) => (),\n+                            _ => {\n+                                span_mirbug!(\n+                                    self,\n+                                    rvalue,\n+                                    \"Invalid FnPtrToPtr cast {:?} -> {:?}\",\n+                                    ty_from,\n+                                    ty\n+                                )\n+                            }\n+                        }\n+                    }\n+                    CastKind::PtrToPtr => {\n+                        let ty_from = op.ty(body, tcx);\n+                        let cast_ty_from = CastTy::from_ty(ty_from);\n+                        let cast_ty_to = CastTy::from_ty(*ty);\n+                        match (cast_ty_from, cast_ty_to) {\n+                            (Some(CastTy::Ptr(_)), Some(CastTy::Ptr(_))) => (),\n+                            _ => {\n+                                span_mirbug!(\n+                                    self,\n+                                    rvalue,\n+                                    \"Invalid PtrToPtr cast {:?} -> {:?}\",\n+                                    ty_from,\n+                                    ty\n                                 )\n                             }\n                         }"}, {"sha": "4303d63fe21314d2f0e8c6306018de9486d909f7", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c731646d6aea3969cc4a0eb343c73cac9389c75d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c731646d6aea3969cc4a0eb343c73cac9389c75d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=c731646d6aea3969cc4a0eb343c73cac9389c75d", "patch": "@@ -633,7 +633,12 @@ fn codegen_stmt<'tcx>(\n                     lval.write_cvalue(fx, operand.cast_pointer_to(to_layout));\n                 }\n                 Rvalue::Cast(\n-                    CastKind::Misc\n+                    CastKind::IntToInt\n+                    | CastKind::FloatToFloat\n+                    | CastKind::FloatToInt\n+                    | CastKind::IntToFloat\n+                    | CastKind::FnPtrToPtr\n+                    | CastKind::PtrToPtr\n                     | CastKind::PointerExposeAddress\n                     | CastKind::PointerFromExposedAddress,\n                     ref operand,"}, {"sha": "c5f44bb8479642fb26e475403b43e3638d33978a", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c731646d6aea3969cc4a0eb343c73cac9389c75d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c731646d6aea3969cc4a0eb343c73cac9389c75d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=c731646d6aea3969cc4a0eb343c73cac9389c75d", "patch": "@@ -490,7 +490,16 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n                     match &stmt.kind {\n                         StatementKind::Assign(local_and_rvalue) if &local_and_rvalue.0 == place => {\n                             match &local_and_rvalue.1 {\n-                                Rvalue::Cast(CastKind::Misc, operand, ty) => {\n+                                Rvalue::Cast(\n+                                    CastKind::IntToInt\n+                                    | CastKind::FloatToFloat\n+                                    | CastKind::FloatToInt\n+                                    | CastKind::IntToFloat\n+                                    | CastKind::FnPtrToPtr\n+                                    | CastKind::PtrToPtr,\n+                                    operand,\n+                                    ty,\n+                                ) => {\n                                     if computed_const_val.is_some() {\n                                         return None; // local assigned twice\n                                     }"}, {"sha": "abf3c9a363fca6b6d706a7c38cf283ec793a8e07", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c731646d6aea3969cc4a0eb343c73cac9389c75d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c731646d6aea3969cc4a0eb343c73cac9389c75d/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=c731646d6aea3969cc4a0eb343c73cac9389c75d", "patch": "@@ -250,7 +250,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         OperandValue::Pair(lldata, llextra)\n                     }\n                     mir::CastKind::Pointer(PointerCast::MutToConstPointer)\n-                    | mir::CastKind::Misc\n+                    | mir::CastKind::PtrToPtr\n                         if bx.cx().is_backend_scalar_pair(operand.layout) =>\n                     {\n                         if let OperandValue::Pair(data_ptr, meta) = operand.val {\n@@ -290,7 +290,13 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     mir::CastKind::Pointer(\n                         PointerCast::MutToConstPointer | PointerCast::ArrayToPointer,\n                     )\n-                    | mir::CastKind::Misc\n+                    | mir::CastKind::IntToInt\n+                    | mir::CastKind::FloatToInt\n+                    | mir::CastKind::FloatToFloat\n+                    | mir::CastKind::IntToFloat\n+                    | mir::CastKind::PtrToPtr\n+                    | mir::CastKind::FnPtrToPtr\n+\n                     // Since int2ptr can have arbitrary integer types as input (so we have to do\n                     // sign extension and all that), it is currently best handled in the same code\n                     // path as the other integer-to-X casts."}, {"sha": "764224fd0072eb1c38a99401a111c2e6ec85b2f3", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c731646d6aea3969cc4a0eb343c73cac9389c75d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c731646d6aea3969cc4a0eb343c73cac9389c75d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=c731646d6aea3969cc4a0eb343c73cac9389c75d", "patch": "@@ -42,8 +42,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let res = self.pointer_from_exposed_address_cast(&src, cast_ty)?;\n                 self.write_immediate(res, dest)?;\n             }\n-\n-            Misc => {\n+            // FIXME: We shouldn't use `misc_cast` for these but handle them separately.\n+            IntToInt | FloatToInt | FloatToFloat | IntToFloat | FnPtrToPtr | PtrToPtr => {\n                 let src = self.read_immediate(src)?;\n                 let res = self.misc_cast(&src, cast_ty)?;\n                 self.write_immediate(res, dest)?;"}, {"sha": "80ca412b32ac667b57c0c0858791be26adc4e858", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c731646d6aea3969cc4a0eb343c73cac9389c75d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c731646d6aea3969cc4a0eb343c73cac9389c75d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=c731646d6aea3969cc4a0eb343c73cac9389c75d", "patch": "@@ -553,7 +553,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                 unimplemented!()\n             }\n \n-            Rvalue::Cast(CastKind::Misc, _, _) => {}\n+            Rvalue::Cast(_, _, _) => {}\n \n             Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) => {}\n             Rvalue::ShallowInitBox(_, _) => {}"}, {"sha": "87b7c55bf7fb56663d7fdffb3834de4cef00709f", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c731646d6aea3969cc4a0eb343c73cac9389c75d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c731646d6aea3969cc4a0eb343c73cac9389c75d/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=c731646d6aea3969cc4a0eb343c73cac9389c75d", "patch": "@@ -557,7 +557,14 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n             }\n             Rvalue::Cast(kind, operand, target_type) => {\n                 match kind {\n-                    CastKind::Misc => {\n+                    CastKind::DynStar => {\n+                        // FIXME(dyn-star): make sure nothing needs to be done here.\n+                    }\n+                    // Nothing to check here\n+                    CastKind::PointerFromExposedAddress\n+                    | CastKind::PointerExposeAddress\n+                    | CastKind::Pointer(_) => {}\n+                    _ => {\n                         let op_ty = operand.ty(self.body, self.tcx);\n                         if op_ty.is_enum() {\n                             self.fail(\n@@ -568,13 +575,6 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                             );\n                         }\n                     }\n-                    CastKind::DynStar => {\n-                        // FIXME(dyn-star): make sure nothing needs to be done here.\n-                    }\n-                    // Nothing to check here\n-                    CastKind::PointerFromExposedAddress\n-                    | CastKind::PointerExposeAddress\n-                    | CastKind::Pointer(_) => {}\n                 }\n             }\n             Rvalue::Repeat(_, _)"}, {"sha": "d3a98e43c53820d640662b77cb87d33e22fb3f41", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c731646d6aea3969cc4a0eb343c73cac9389c75d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c731646d6aea3969cc4a0eb343c73cac9389c75d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=c731646d6aea3969cc4a0eb343c73cac9389c75d", "patch": "@@ -1834,7 +1834,14 @@ impl<'tcx> Rvalue<'tcx> {\n             | Rvalue::AddressOf(_, _)\n             | Rvalue::Len(_)\n             | Rvalue::Cast(\n-                CastKind::Misc | CastKind::Pointer(_) | CastKind::PointerFromExposedAddress,\n+                CastKind::IntToInt\n+                | CastKind::FloatToInt\n+                | CastKind::FloatToFloat\n+                | CastKind::IntToFloat\n+                | CastKind::FnPtrToPtr\n+                | CastKind::PtrToPtr\n+                | CastKind::Pointer(_)\n+                | CastKind::PointerFromExposedAddress,\n                 _,\n                 _,\n             )"}, {"sha": "9a22a12b93b33c3e96f7903f0f7864044e54c95a", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c731646d6aea3969cc4a0eb343c73cac9389c75d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c731646d6aea3969cc4a0eb343c73cac9389c75d/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=c731646d6aea3969cc4a0eb343c73cac9389c75d", "patch": "@@ -1149,8 +1149,12 @@ pub enum CastKind {\n     Pointer(PointerCast),\n     /// Cast into a dyn* object.\n     DynStar,\n-    /// Remaining unclassified casts.\n-    Misc,\n+    IntToInt,\n+    FloatToInt,\n+    FloatToFloat,\n+    IntToFloat,\n+    PtrToPtr,\n+    FnPtrToPtr,\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]"}, {"sha": "e65585955199fcc803d29913b879656af360b920", "filename": "compiler/rustc_middle/src/ty/cast.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c731646d6aea3969cc4a0eb343c73cac9389c75d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c731646d6aea3969cc4a0eb343c73cac9389c75d/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcast.rs?ref=c731646d6aea3969cc4a0eb343c73cac9389c75d", "patch": "@@ -2,6 +2,7 @@\n // typeck and codegen.\n \n use crate::ty::{self, Ty};\n+use rustc_middle::mir;\n \n use rustc_macros::HashStable;\n \n@@ -75,3 +76,28 @@ impl<'tcx> CastTy<'tcx> {\n         }\n     }\n }\n+\n+/// Returns `mir::CastKind` from the given parameters.\n+pub fn mir_cast_kind<'tcx>(from_ty: Ty<'tcx>, cast_ty: Ty<'tcx>) -> mir::CastKind {\n+    let from = CastTy::from_ty(from_ty);\n+    let cast = CastTy::from_ty(cast_ty);\n+    let cast_kind = match (from, cast) {\n+        (Some(CastTy::Ptr(_) | CastTy::FnPtr), Some(CastTy::Int(_))) => {\n+            mir::CastKind::PointerExposeAddress\n+        }\n+        (Some(CastTy::Int(_)), Some(CastTy::Ptr(_))) => mir::CastKind::PointerFromExposedAddress,\n+        (_, Some(CastTy::DynStar)) => mir::CastKind::DynStar,\n+        (Some(CastTy::Int(_)), Some(CastTy::Int(_))) => mir::CastKind::IntToInt,\n+        (Some(CastTy::FnPtr), Some(CastTy::Ptr(_))) => mir::CastKind::FnPtrToPtr,\n+\n+        (Some(CastTy::Float), Some(CastTy::Int(_))) => mir::CastKind::FloatToInt,\n+        (Some(CastTy::Int(_)), Some(CastTy::Float)) => mir::CastKind::IntToFloat,\n+        (Some(CastTy::Float), Some(CastTy::Float)) => mir::CastKind::FloatToFloat,\n+        (Some(CastTy::Ptr(_)), Some(CastTy::Ptr(_))) => mir::CastKind::PtrToPtr,\n+\n+        (_, _) => {\n+            bug!(\"Attempting to cast non-castable types {:?} and {:?}\", from_ty, cast_ty)\n+        }\n+    };\n+    cast_kind\n+}"}, {"sha": "35a00da8d38b2ceaa49ed917689a1c3470bc3054", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c731646d6aea3969cc4a0eb343c73cac9389c75d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c731646d6aea3969cc4a0eb343c73cac9389c75d/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=c731646d6aea3969cc4a0eb343c73cac9389c75d", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::mir::AssertKind;\n use rustc_middle::mir::Place;\n use rustc_middle::mir::*;\n use rustc_middle::thir::*;\n-use rustc_middle::ty::cast::CastTy;\n+use rustc_middle::ty::cast::{mir_cast_kind, CastTy};\n use rustc_middle::ty::{self, Ty, UpvarSubsts};\n use rustc_span::Span;\n \n@@ -217,16 +217,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let from_ty = CastTy::from_ty(ty);\n                 let cast_ty = CastTy::from_ty(expr.ty);\n                 debug!(\"ExprKind::Cast from_ty={from_ty:?}, cast_ty={:?}/{cast_ty:?}\", expr.ty,);\n-                let cast_kind = match (from_ty, cast_ty) {\n-                    (Some(CastTy::Ptr(_) | CastTy::FnPtr), Some(CastTy::Int(_))) => {\n-                        CastKind::PointerExposeAddress\n-                    }\n-                    (Some(CastTy::Int(_)), Some(CastTy::Ptr(_))) => {\n-                        CastKind::PointerFromExposedAddress\n-                    }\n-                    (_, Some(CastTy::DynStar)) => CastKind::DynStar,\n-                    (_, _) => CastKind::Misc,\n-                };\n+                let cast_kind = mir_cast_kind(ty, expr.ty);\n                 block.and(Rvalue::Cast(cast_kind, source, expr.ty))\n             }\n             ExprKind::Pointer { cast, source } => {"}, {"sha": "23403628c53fa6aa6ed32b865575380a628d614a", "filename": "compiler/rustc_mir_dataflow/src/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c731646d6aea3969cc4a0eb343c73cac9389c75d/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c731646d6aea3969cc4a0eb343c73cac9389c75d/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs?ref=c731646d6aea3969cc4a0eb343c73cac9389c75d", "patch": "@@ -823,9 +823,10 @@ where\n             // tmp = &raw mut P;\n             // cur = tmp as *mut T;\n             // end = Offset(cur, len);\n+            let mir_cast_kind = ty::cast::mir_cast_kind(iter_ty, tmp_ty);\n             vec![\n                 self.assign(tmp, Rvalue::AddressOf(Mutability::Mut, self.place)),\n-                self.assign(cur, Rvalue::Cast(CastKind::Misc, Operand::Move(tmp), iter_ty)),\n+                self.assign(cur, Rvalue::Cast(mir_cast_kind, Operand::Move(tmp), iter_ty)),\n                 self.assign(\n                     length_or_end,\n                     Rvalue::BinaryOp("}, {"sha": "1d4dfc29f70b623bfc2c26cd704e105964ea4685", "filename": "src/test/mir-opt/const_prop/cast.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c731646d6aea3969cc4a0eb343c73cac9389c75d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcast.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c731646d6aea3969cc4a0eb343c73cac9389c75d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcast.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcast.main.ConstProp.diff?ref=c731646d6aea3969cc4a0eb343c73cac9389c75d", "patch": "@@ -14,10 +14,10 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/cast.rs:+1:9: +1:10\n--         _1 = const 42_u8 as u32 (Misc);  // scope 0 at $DIR/cast.rs:+1:13: +1:24\n+-         _1 = const 42_u8 as u32 (IntToInt); // scope 0 at $DIR/cast.rs:+1:13: +1:24\n +         _1 = const 42_u32;               // scope 0 at $DIR/cast.rs:+1:13: +1:24\n           StorageLive(_2);                 // scope 1 at $DIR/cast.rs:+3:9: +3:10\n--         _2 = const 42_u32 as u8 (Misc);  // scope 1 at $DIR/cast.rs:+3:13: +3:24\n+-         _2 = const 42_u32 as u8 (IntToInt); // scope 1 at $DIR/cast.rs:+3:13: +3:24\n +         _2 = const 42_u8;                // scope 1 at $DIR/cast.rs:+3:13: +3:24\n           _0 = const ();                   // scope 0 at $DIR/cast.rs:+0:11: +4:2\n           StorageDead(_2);                 // scope 1 at $DIR/cast.rs:+4:1: +4:2"}, {"sha": "f4c0c5c5e7fb0b9388988e68e5c18b46f5adcdf7", "filename": "src/test/mir-opt/const_prop/indirect.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c731646d6aea3969cc4a0eb343c73cac9389c75d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c731646d6aea3969cc4a0eb343c73cac9389c75d/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.main.ConstProp.diff?ref=c731646d6aea3969cc4a0eb343c73cac9389c75d", "patch": "@@ -13,7 +13,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/indirect.rs:+1:9: +1:10\n           StorageLive(_2);                 // scope 0 at $DIR/indirect.rs:+1:13: +1:25\n--         _2 = const 2_u32 as u8 (Misc);   // scope 0 at $DIR/indirect.rs:+1:13: +1:25\n+-         _2 = const 2_u32 as u8 (IntToInt); // scope 0 at $DIR/indirect.rs:+1:13: +1:25\n -         _3 = CheckedAdd(_2, const 1_u8); // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n -         assert(!move (_3.1: bool), \"attempt to compute `{} + {}`, which would overflow\", move _2, const 1_u8) -> bb1; // scope 0 at $DIR/indirect.rs:+1:13: +1:29\n +         _2 = const 2_u8;                 // scope 0 at $DIR/indirect.rs:+1:13: +1:25"}, {"sha": "8b12525b576ffcbef9ddbf869a1106e1afeebd59", "filename": "src/test/mir-opt/enum_cast.bar.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c731646d6aea3969cc4a0eb343c73cac9389c75d/src%2Ftest%2Fmir-opt%2Fenum_cast.bar.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c731646d6aea3969cc4a0eb343c73cac9389c75d/src%2Ftest%2Fmir-opt%2Fenum_cast.bar.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fenum_cast.bar.mir_map.0.mir?ref=c731646d6aea3969cc4a0eb343c73cac9389c75d", "patch": "@@ -7,7 +7,7 @@ fn bar(_1: Bar) -> usize {\n \n     bb0: {\n         _2 = discriminant(_1);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        _0 = move _2 as usize (Misc);    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        _0 = move _2 as usize (IntToInt); // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n         return;                          // scope 0 at $DIR/enum_cast.rs:+2:2: +2:2\n     }\n }"}, {"sha": "a77f4d06c239bb46a88cc0c20ad634361d79602c", "filename": "src/test/mir-opt/enum_cast.boo.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c731646d6aea3969cc4a0eb343c73cac9389c75d/src%2Ftest%2Fmir-opt%2Fenum_cast.boo.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c731646d6aea3969cc4a0eb343c73cac9389c75d/src%2Ftest%2Fmir-opt%2Fenum_cast.boo.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fenum_cast.boo.mir_map.0.mir?ref=c731646d6aea3969cc4a0eb343c73cac9389c75d", "patch": "@@ -7,7 +7,7 @@ fn boo(_1: Boo) -> usize {\n \n     bb0: {\n         _2 = discriminant(_1);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        _0 = move _2 as usize (Misc);    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        _0 = move _2 as usize (IntToInt); // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n         return;                          // scope 0 at $DIR/enum_cast.rs:+2:2: +2:2\n     }\n }"}, {"sha": "ae3e71df8c6df3726fdc828a4b9ee8bc6ae9cf17", "filename": "src/test/mir-opt/enum_cast.droppy.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c731646d6aea3969cc4a0eb343c73cac9389c75d/src%2Ftest%2Fmir-opt%2Fenum_cast.droppy.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c731646d6aea3969cc4a0eb343c73cac9389c75d/src%2Ftest%2Fmir-opt%2Fenum_cast.droppy.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fenum_cast.droppy.mir_map.0.mir?ref=c731646d6aea3969cc4a0eb343c73cac9389c75d", "patch": "@@ -26,7 +26,7 @@ fn droppy() -> () {\n         FakeRead(ForLet(None), _2);      // scope 0 at $DIR/enum_cast.rs:+2:13: +2:14\n         StorageLive(_3);                 // scope 3 at $DIR/enum_cast.rs:+5:13: +5:14\n         _4 = discriminant(_2);           // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n-        _3 = move _4 as usize (Misc);    // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n+        _3 = move _4 as usize (IntToInt); // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n         FakeRead(ForLet(None), _3);      // scope 3 at $DIR/enum_cast.rs:+5:13: +5:14\n         _1 = const ();                   // scope 0 at $DIR/enum_cast.rs:+1:5: +6:6\n         StorageDead(_3);                 // scope 1 at $DIR/enum_cast.rs:+6:5: +6:6"}, {"sha": "9e44d9158e02f96950db39f51dcac6e601853e0f", "filename": "src/test/mir-opt/enum_cast.foo.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c731646d6aea3969cc4a0eb343c73cac9389c75d/src%2Ftest%2Fmir-opt%2Fenum_cast.foo.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c731646d6aea3969cc4a0eb343c73cac9389c75d/src%2Ftest%2Fmir-opt%2Fenum_cast.foo.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fenum_cast.foo.mir_map.0.mir?ref=c731646d6aea3969cc4a0eb343c73cac9389c75d", "patch": "@@ -7,7 +7,7 @@ fn foo(_1: Foo) -> usize {\n \n     bb0: {\n         _2 = discriminant(_1);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        _0 = move _2 as usize (Misc);    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        _0 = move _2 as usize (IntToInt); // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n         return;                          // scope 0 at $DIR/enum_cast.rs:+2:2: +2:2\n     }\n }"}, {"sha": "6ab63e82e35d28fdda6e0c376f47344509a50d56", "filename": "src/test/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c731646d6aea3969cc4a0eb343c73cac9389c75d/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c731646d6aea3969cc4a0eb343c73cac9389c75d/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=c731646d6aea3969cc4a0eb343c73cac9389c75d", "patch": "@@ -91,7 +91,7 @@\n           StorageLive(_15);                // scope 3 at $DIR/funky_arms.rs:+15:59: +15:75\n           StorageLive(_16);                // scope 3 at $DIR/funky_arms.rs:+15:59: +15:68\n           _16 = _10;                       // scope 3 at $DIR/funky_arms.rs:+15:59: +15:68\n-          _15 = move _16 as u32 (Misc);    // scope 3 at $DIR/funky_arms.rs:+15:59: +15:75\n+          _15 = move _16 as u32 (IntToInt); // scope 3 at $DIR/funky_arms.rs:+15:59: +15:75\n           StorageDead(_16);                // scope 3 at $DIR/funky_arms.rs:+15:74: +15:75\n           _14 = Add(move _15, const 1_u32); // scope 3 at $DIR/funky_arms.rs:+15:59: +15:79\n           StorageDead(_15);                // scope 3 at $DIR/funky_arms.rs:+15:78: +15:79"}, {"sha": "ed53c9a956ca88f1d4534e37e10f6444c2717226", "filename": "src/test/mir-opt/if_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c731646d6aea3969cc4a0eb343c73cac9389c75d/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c731646d6aea3969cc4a0eb343c73cac9389c75d/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff?ref=c731646d6aea3969cc4a0eb343c73cac9389c75d", "patch": "@@ -31,7 +31,7 @@\n           StorageLive(_6);                 // scope 1 at $DIR/if-condition-int.rs:+4:23: +4:31\n           StorageLive(_7);                 // scope 1 at $DIR/if-condition-int.rs:+4:23: +4:24\n           _7 = _2;                         // scope 1 at $DIR/if-condition-int.rs:+4:23: +4:24\n-          _6 = move _7 as i32 (Misc);      // scope 1 at $DIR/if-condition-int.rs:+4:23: +4:31\n+          _6 = move _7 as i32 (IntToInt);  // scope 1 at $DIR/if-condition-int.rs:+4:23: +4:31\n           StorageDead(_7);                 // scope 1 at $DIR/if-condition-int.rs:+4:30: +4:31\n           _0 = Add(const 100_i32, move _6); // scope 1 at $DIR/if-condition-int.rs:+4:17: +4:31\n           StorageDead(_6);                 // scope 1 at $DIR/if-condition-int.rs:+4:30: +4:31\n@@ -43,7 +43,7 @@\n           StorageLive(_4);                 // scope 1 at $DIR/if-condition-int.rs:+3:23: +3:31\n           StorageLive(_5);                 // scope 1 at $DIR/if-condition-int.rs:+3:23: +3:24\n           _5 = _2;                         // scope 1 at $DIR/if-condition-int.rs:+3:23: +3:24\n-          _4 = move _5 as i32 (Misc);      // scope 1 at $DIR/if-condition-int.rs:+3:23: +3:31\n+          _4 = move _5 as i32 (IntToInt);  // scope 1 at $DIR/if-condition-int.rs:+3:23: +3:31\n           StorageDead(_5);                 // scope 1 at $DIR/if-condition-int.rs:+3:30: +3:31\n           _0 = Add(const 10_i32, move _4); // scope 1 at $DIR/if-condition-int.rs:+3:18: +3:31\n           StorageDead(_4);                 // scope 1 at $DIR/if-condition-int.rs:+3:30: +3:31"}, {"sha": "a71baad3e3ed90bb54af61c925201c6e0ad8bd5e", "filename": "src/test/mir-opt/inline/inline_diverging.g.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c731646d6aea3969cc4a0eb343c73cac9389c75d/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c731646d6aea3969cc4a0eb343c73cac9389c75d/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff?ref=c731646d6aea3969cc4a0eb343c73cac9389c75d", "patch": "@@ -25,7 +25,7 @@\n       bb1: {\n           StorageLive(_4);                 // scope 0 at $DIR/inline-diverging.rs:+2:9: +2:10\n           _4 = _1;                         // scope 0 at $DIR/inline-diverging.rs:+2:9: +2:10\n-          _0 = move _4 as u32 (Misc);      // scope 0 at $DIR/inline-diverging.rs:+2:9: +2:17\n+          _0 = move _4 as u32 (IntToInt);  // scope 0 at $DIR/inline-diverging.rs:+2:9: +2:17\n           StorageDead(_4);                 // scope 0 at $DIR/inline-diverging.rs:+2:16: +2:17\n           StorageDead(_2);                 // scope 0 at $DIR/inline-diverging.rs:+5:5: +5:6\n           return;                          // scope 0 at $DIR/inline-diverging.rs:+6:2: +6:2"}, {"sha": "281afe4be17ef1832cd391516626b16108c32afb", "filename": "src/test/mir-opt/issue_101973.inner.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c731646d6aea3969cc4a0eb343c73cac9389c75d/src%2Ftest%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c731646d6aea3969cc4a0eb343c73cac9389c75d/src%2Ftest%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff?ref=c731646d6aea3969cc4a0eb343c73cac9389c75d", "patch": "@@ -90,9 +90,9 @@\n           StorageDead(_16);                // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n           StorageDead(_6);                 // scope 0 at $DIR/issue-101973.rs:+1:57: +1:58\n           StorageDead(_4);                 // scope 0 at $DIR/issue-101973.rs:+1:57: +1:58\n-          _2 = move _3 as i32 (Misc);      // scope 0 at $DIR/issue-101973.rs:+1:5: +1:65\n+          _2 = move _3 as i32 (IntToInt);  // scope 0 at $DIR/issue-101973.rs:+1:5: +1:65\n           StorageDead(_3);                 // scope 0 at $DIR/issue-101973.rs:+1:64: +1:65\n-          _0 = move _2 as i64 (Misc);      // scope 0 at $DIR/issue-101973.rs:+1:5: +1:72\n+          _0 = move _2 as i64 (IntToInt);  // scope 0 at $DIR/issue-101973.rs:+1:5: +1:72\n           StorageDead(_2);                 // scope 0 at $DIR/issue-101973.rs:+1:71: +1:72\n           return;                          // scope 0 at $DIR/issue-101973.rs:+2:2: +2:2\n       }"}, {"sha": "ec15fd1ef74d60f4ad11fb9f5ffb2aa2193a1f04", "filename": "src/test/mir-opt/lower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c731646d6aea3969cc4a0eb343c73cac9389c75d/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c731646d6aea3969cc4a0eb343c73cac9389c75d/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff?ref=c731646d6aea3969cc4a0eb343c73cac9389c75d", "patch": "@@ -36,7 +36,7 @@\n           _7 = &_1;                        // scope 3 at $DIR/lower_intrinsics.rs:+4:29: +4:33\n           _6 = &raw const (*_7);           // scope 3 at $DIR/lower_intrinsics.rs:+4:29: +4:33\n           _5 = _6;                         // scope 3 at $DIR/lower_intrinsics.rs:+4:29: +4:45\n-          _4 = move _5 as *const i32 (Misc); // scope 3 at $DIR/lower_intrinsics.rs:+4:29: +4:59\n+          _4 = move _5 as *const i32 (PtrToPtr); // scope 3 at $DIR/lower_intrinsics.rs:+4:29: +4:59\n           StorageDead(_5);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:58: +4:59\n           StorageLive(_8);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:91\n           StorageLive(_9);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:79\n@@ -45,7 +45,7 @@\n           _11 = &mut _2;                   // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:69\n           _10 = &raw mut (*_11);           // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:69\n           _9 = _10;                        // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:79\n-          _8 = move _9 as *mut i32 (Misc); // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:91\n+          _8 = move _9 as *mut i32 (PtrToPtr); // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:91\n           StorageDead(_9);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:90: +4:91\n -         _3 = copy_nonoverlapping::<i32>(move _4, move _8, const 0_usize) -> bb1; // scope 3 at $DIR/lower_intrinsics.rs:+4:9: +4:95\n -                                          // mir::Constant"}, {"sha": "31ccf14549ca21637c82ab8dd8f0578bb05982c7", "filename": "src/test/mir-opt/slice_drop_shim.core.ptr-drop_in_place.[String].AddMovesForPackedDrops.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c731646d6aea3969cc4a0eb343c73cac9389c75d/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c731646d6aea3969cc4a0eb343c73cac9389c75d/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.mir?ref=c731646d6aea3969cc4a0eb343c73cac9389c75d", "patch": "@@ -84,7 +84,7 @@ fn std::ptr::drop_in_place(_1: *mut [String]) -> () {\n \n     bb13: {\n         _15 = &raw mut (*_1);            // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        _9 = move _15 as *mut std::string::String (Misc); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+        _9 = move _15 as *mut std::string::String (PtrToPtr); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n         _10 = Offset(_9, move _3);       // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n         goto -> bb12;                    // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n     }"}, {"sha": "45b63a4aa5df8bd79c27b32755b32e30ebfaf909", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c731646d6aea3969cc4a0eb343c73cac9389c75d/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c731646d6aea3969cc4a0eb343c73cac9389c75d/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=c731646d6aea3969cc4a0eb343c73cac9389c75d", "patch": "@@ -129,7 +129,12 @@ fn check_rvalue<'tcx>(\n         | Rvalue::Use(operand)\n         | Rvalue::Cast(\n             CastKind::PointerFromExposedAddress\n-            | CastKind::Misc\n+            | CastKind::IntToInt\n+            | CastKind::FloatToInt\n+            | CastKind::IntToFloat\n+            | CastKind::FloatToFloat\n+            | CastKind::FnPtrToPtr\n+            | CastKind::PtrToPtr\n             | CastKind::Pointer(PointerCast::MutToConstPointer | PointerCast::ArrayToPointer),\n             operand,\n             _,"}]}