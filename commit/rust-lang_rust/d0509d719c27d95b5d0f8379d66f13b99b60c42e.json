{"sha": "d0509d719c27d95b5d0f8379d66f13b99b60c42e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNTA5ZDcxOWMyN2Q5NWI1ZDBmODM3OWQ2NmYxM2I5OWI2MGM0MmU=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-01T15:31:04Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-01T15:31:04Z"}, "message": "Add docs for helper functions", "tree": {"sha": "2f3a6756fee78674d58791f8b38b9537f34b2c44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f3a6756fee78674d58791f8b38b9537f34b2c44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0509d719c27d95b5d0f8379d66f13b99b60c42e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0509d719c27d95b5d0f8379d66f13b99b60c42e", "html_url": "https://github.com/rust-lang/rust/commit/d0509d719c27d95b5d0f8379d66f13b99b60c42e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0509d719c27d95b5d0f8379d66f13b99b60c42e/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50be5a83c50528cc61d2b65a73839dbb25fc9c67", "url": "https://api.github.com/repos/rust-lang/rust/commits/50be5a83c50528cc61d2b65a73839dbb25fc9c67", "html_url": "https://github.com/rust-lang/rust/commit/50be5a83c50528cc61d2b65a73839dbb25fc9c67"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "0d1adcce6526d139e713df28747212d39fc7ed70", "filename": "src/shims/io.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d0509d719c27d95b5d0f8379d66f13b99b60c42e/src%2Fshims%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0509d719c27d95b5d0f8379d66f13b99b60c42e/src%2Fshims%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fio.rs?ref=d0509d719c27d95b5d0f8379d66f13b99b60c42e", "patch": "@@ -151,6 +151,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         )\n     }\n \n+    /// Helper function that gets a `FileHandle` immutable reference and allows to manipulate it\n+    /// using `f`.\n+    ///\n+    /// If the `fd` file descriptor does not corresponds to a file, this functions returns `Ok(-1)`\n+    /// and sets `Evaluator::last_error` to `libc::EBADF` (invalid file descriptor).\n+    ///\n+    /// This function uses `T: From<i32>` instead of `i32` directly because some IO related\n+    /// functions return different integer types (like `read`, that returns an `i64`)\n     fn get_handle_and<F, T: From<i32>>(&mut self, fd: i32, f: F) -> InterpResult<'tcx, T>\n     where\n         F: Fn(&FileHandle) -> InterpResult<'tcx, T>,\n@@ -164,6 +172,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n     }\n \n+    /// Helper function that removes a `FileHandle` and allows to manipulate it using the `f`\n+    /// closure. This function is quite useful when you need to modify a `FileHandle` but you need\n+    /// to modify `MiriEvalContext` at the same time, so you can modify the handle and reinsert it\n+    /// using `f`.\n+    ///\n+    /// If the `fd` file descriptor does not corresponds to a file, this functions returns `Ok(-1)`\n+    /// and sets `Evaluator::last_error` to `libc::EBADF` (invalid file descriptor).\n+    ///\n+    /// This function uses `T: From<i32>` instead of `i32` directly because some IO related\n+    /// functions return different integer types (like `read`, that returns an `i64`)\n     fn remove_handle_and<F, T: From<i32>>(&mut self, fd: i32, mut f: F) -> InterpResult<'tcx, T>\n     where\n         F: FnMut(FileHandle, &mut MiriEvalContext<'mir, 'tcx>) -> InterpResult<'tcx, T>,\n@@ -177,6 +195,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n     }\n \n+    /// Helper function that consumes an `std::io::Result<T>` and returns an\n+    /// `InterpResult<'tcx,T>::Ok` instead. It is expected that the result can be converted to an\n+    /// OS error using `std::io::Error::raw_os_error`.\n+    ///\n+    /// This function uses `T: From<i32>` instead of `i32` directly because some IO related\n+    /// functions return different integer types (like `read`, that returns an `i64`)\n     fn consume_result<T: From<i32>>(&mut self, result: std::io::Result<T>) -> InterpResult<'tcx, T> {\n         match result {\n             Ok(ok) => Ok(ok),"}]}