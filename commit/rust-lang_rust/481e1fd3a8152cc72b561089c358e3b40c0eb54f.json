{"sha": "481e1fd3a8152cc72b561089c358e3b40c0eb54f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4MWUxZmQzYTgxNTJjYzcyYjU2MTA4OWMzNThlM2I0MGMwZWI1NGY=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-02-26T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-02-26T00:00:00Z"}, "message": "Miscellaneous inlining improvements\n\nInline a few small and hot functions.", "tree": {"sha": "f64577c45caa4aae453113d73c1771f63dfc72e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f64577c45caa4aae453113d73c1771f63dfc72e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/481e1fd3a8152cc72b561089c358e3b40c0eb54f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/481e1fd3a8152cc72b561089c358e3b40c0eb54f", "html_url": "https://github.com/rust-lang/rust/commit/481e1fd3a8152cc72b561089c358e3b40c0eb54f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/481e1fd3a8152cc72b561089c358e3b40c0eb54f/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cecdb181ade91c0a5ffab9a148dba68fc7d00ee3", "url": "https://api.github.com/repos/rust-lang/rust/commits/cecdb181ade91c0a5ffab9a148dba68fc7d00ee3", "html_url": "https://github.com/rust-lang/rust/commit/cecdb181ade91c0a5ffab9a148dba68fc7d00ee3"}], "stats": {"total": 60, "additions": 52, "deletions": 8}, "files": [{"sha": "3cc501e423c0b7fb04414233e9fdc864777a1965", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/481e1fd3a8152cc72b561089c358e3b40c0eb54f/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481e1fd3a8152cc72b561089c358e3b40c0eb54f/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=481e1fd3a8152cc72b561089c358e3b40c0eb54f", "patch": "@@ -773,6 +773,7 @@ pub struct MacroDef<'hir> {\n }\n \n impl MacroDef<'_> {\n+    #[inline]\n     pub fn hir_id(&self) -> HirId {\n         HirId::make_owner(self.def_id)\n     }\n@@ -2024,6 +2025,7 @@ pub struct TraitItemId {\n }\n \n impl TraitItemId {\n+    #[inline]\n     pub fn hir_id(&self) -> HirId {\n         // Items are always HIR owners.\n         HirId::make_owner(self.def_id)\n@@ -2045,6 +2047,7 @@ pub struct TraitItem<'hir> {\n }\n \n impl TraitItem<'_> {\n+    #[inline]\n     pub fn hir_id(&self) -> HirId {\n         // Items are always HIR owners.\n         HirId::make_owner(self.def_id)\n@@ -2086,6 +2089,7 @@ pub struct ImplItemId {\n }\n \n impl ImplItemId {\n+    #[inline]\n     pub fn hir_id(&self) -> HirId {\n         // Items are always HIR owners.\n         HirId::make_owner(self.def_id)\n@@ -2106,6 +2110,7 @@ pub struct ImplItem<'hir> {\n }\n \n impl ImplItem<'_> {\n+    #[inline]\n     pub fn hir_id(&self) -> HirId {\n         // Items are always HIR owners.\n         HirId::make_owner(self.def_id)\n@@ -2696,6 +2701,7 @@ pub struct ItemId {\n }\n \n impl ItemId {\n+    #[inline]\n     pub fn hir_id(&self) -> HirId {\n         // Items are always HIR owners.\n         HirId::make_owner(self.def_id)\n@@ -2716,6 +2722,7 @@ pub struct Item<'hir> {\n }\n \n impl Item<'_> {\n+    #[inline]\n     pub fn hir_id(&self) -> HirId {\n         // Items are always HIR owners.\n         HirId::make_owner(self.def_id)\n@@ -2900,6 +2907,7 @@ pub struct ForeignItemId {\n }\n \n impl ForeignItemId {\n+    #[inline]\n     pub fn hir_id(&self) -> HirId {\n         // Items are always HIR owners.\n         HirId::make_owner(self.def_id)\n@@ -2932,6 +2940,7 @@ pub struct ForeignItem<'hir> {\n }\n \n impl ForeignItem<'_> {\n+    #[inline]\n     pub fn hir_id(&self) -> HirId {\n         // Items are always HIR owners.\n         HirId::make_owner(self.def_id)"}, {"sha": "e24eb5e449002e3133bfa1c2cde40cda1b3ce6b8", "filename": "compiler/rustc_hir/src/hir_id.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/481e1fd3a8152cc72b561089c358e3b40c0eb54f/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481e1fd3a8152cc72b561089c358e3b40c0eb54f/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs?ref=481e1fd3a8152cc72b561089c358e3b40c0eb54f", "patch": "@@ -28,6 +28,7 @@ impl HirId {\n         if self.local_id.index() == 0 { Some(self.owner) } else { None }\n     }\n \n+    #[inline]\n     pub fn make_owner(owner: LocalDefId) -> Self {\n         Self { owner, local_id: ItemLocalId::from_u32(0) }\n     }"}, {"sha": "7cc4a5e9785e57421c50275f28f1aa032ab7ca50", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/481e1fd3a8152cc72b561089c358e3b40c0eb54f/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481e1fd3a8152cc72b561089c358e3b40c0eb54f/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=481e1fd3a8152cc72b561089c358e3b40c0eb54f", "patch": "@@ -111,6 +111,7 @@ macro_rules! newtype_index {\n         }\n \n         impl Clone for $type {\n+            #[inline]\n             fn clone(&self) -> Self {\n                 *self\n             }"}, {"sha": "f0b52c698819a59c217f6174fd3adfeb1e8499c3", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/481e1fd3a8152cc72b561089c358e3b40c0eb54f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481e1fd3a8152cc72b561089c358e3b40c0eb54f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=481e1fd3a8152cc72b561089c358e3b40c0eb54f", "patch": "@@ -61,12 +61,14 @@ pub trait HasLocalDecls<'tcx> {\n }\n \n impl<'tcx> HasLocalDecls<'tcx> for LocalDecls<'tcx> {\n+    #[inline]\n     fn local_decls(&self) -> &LocalDecls<'tcx> {\n         self\n     }\n }\n \n impl<'tcx> HasLocalDecls<'tcx> for Body<'tcx> {\n+    #[inline]\n     fn local_decls(&self) -> &LocalDecls<'tcx> {\n         &self.local_decls\n     }\n@@ -1772,6 +1774,7 @@ impl<'tcx> Place<'tcx> {\n         self.as_ref().as_local()\n     }\n \n+    #[inline]\n     pub fn as_ref(&self) -> PlaceRef<'tcx> {\n         PlaceRef { local: self.local, projection: &self.projection }\n     }\n@@ -1783,6 +1786,7 @@ impl<'tcx> Place<'tcx> {\n     /// - (a.b, .c)\n     ///\n     /// Given a place without projections, the iterator is empty.\n+    #[inline]\n     pub fn iter_projections(\n         self,\n     ) -> impl Iterator<Item = (PlaceRef<'tcx>, PlaceElem<'tcx>)> + DoubleEndedIterator {"}, {"sha": "92f46ef6a638cdc5b683315ffabfeb1f9804c8e9", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/481e1fd3a8152cc72b561089c358e3b40c0eb54f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481e1fd3a8152cc72b561089c358e3b40c0eb54f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=481e1fd3a8152cc72b561089c358e3b40c0eb54f", "patch": "@@ -21,6 +21,7 @@ pub struct PlaceTy<'tcx> {\n static_assert_size!(PlaceTy<'_>, 16);\n \n impl<'tcx> PlaceTy<'tcx> {\n+    #[inline]\n     pub fn from_ty(ty: Ty<'tcx>) -> PlaceTy<'tcx> {\n         PlaceTy { ty, variant_index: None }\n     }"}, {"sha": "bb8c5f175b8c0cb9304c455217a36b495c4ff148", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/481e1fd3a8152cc72b561089c358e3b40c0eb54f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481e1fd3a8152cc72b561089c358e3b40c0eb54f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=481e1fd3a8152cc72b561089c358e3b40c0eb54f", "patch": "@@ -1201,6 +1201,7 @@ pub enum PlaceContext {\n \n impl PlaceContext {\n     /// Returns `true` if this place context represents a drop.\n+    #[inline]\n     pub fn is_drop(&self) -> bool {\n         matches!(self, PlaceContext::MutatingUse(MutatingUseContext::Drop))\n     }\n@@ -1218,6 +1219,7 @@ impl PlaceContext {\n     }\n \n     /// Returns `true` if this place context represents a storage live or storage dead marker.\n+    #[inline]\n     pub fn is_storage_marker(&self) -> bool {\n         matches!(\n             self,\n@@ -1226,16 +1228,19 @@ impl PlaceContext {\n     }\n \n     /// Returns `true` if this place context represents a use that potentially changes the value.\n+    #[inline]\n     pub fn is_mutating_use(&self) -> bool {\n         matches!(self, PlaceContext::MutatingUse(..))\n     }\n \n     /// Returns `true` if this place context represents a use that does not change the value.\n+    #[inline]\n     pub fn is_nonmutating_use(&self) -> bool {\n         matches!(self, PlaceContext::NonMutatingUse(..))\n     }\n \n     /// Returns `true` if this place context represents a use.\n+    #[inline]\n     pub fn is_use(&self) -> bool {\n         !matches!(self, PlaceContext::NonUse(..))\n     }"}, {"sha": "e1d79248171a8b783191585d8511ef78a18ea904", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/481e1fd3a8152cc72b561089c358e3b40c0eb54f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481e1fd3a8152cc72b561089c358e3b40c0eb54f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=481e1fd3a8152cc72b561089c358e3b40c0eb54f", "patch": "@@ -206,19 +206,26 @@ pub struct LocalTableInContext<'a, V> {\n /// would be in a different frame of reference and using its `local_id`\n /// would result in lookup errors, or worse, in silently wrong data being\n /// stored/returned.\n+#[inline]\n fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {\n     if hir_id.owner != hir_owner {\n-        ty::tls::with(|tcx| {\n-            bug!(\n-                \"node {} with HirId::owner {:?} cannot be placed in TypeckResults with hir_owner {:?}\",\n-                tcx.hir().node_to_string(hir_id),\n-                hir_id.owner,\n-                hir_owner\n-            )\n-        });\n+        invalid_hir_id_for_typeck_results(hir_owner, hir_id);\n     }\n }\n \n+#[cold]\n+#[inline(never)]\n+fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {\n+    ty::tls::with(|tcx| {\n+        bug!(\n+            \"node {} with HirId::owner {:?} cannot be placed in TypeckResults with hir_owner {:?}\",\n+            tcx.hir().node_to_string(hir_id),\n+            hir_id.owner,\n+            hir_owner\n+        )\n+    });\n+}\n+\n impl<'a, V> LocalTableInContext<'a, V> {\n     pub fn contains_key(&self, id: hir::HirId) -> bool {\n         validate_hir_id_for_typeck_results(self.hir_owner, id);"}, {"sha": "4c7db4e803b8ee5766afb5949086527379e3e548", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/481e1fd3a8152cc72b561089c358e3b40c0eb54f/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481e1fd3a8152cc72b561089c358e3b40c0eb54f/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=481e1fd3a8152cc72b561089c358e3b40c0eb54f", "patch": "@@ -837,6 +837,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n         result\n     }\n \n+    #[inline]\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n         // If the outer-exclusive-binder is *strictly greater* than\n         // `outer_index`, that means that `t` contains some content\n@@ -850,6 +851,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n         }\n     }\n \n+    #[inline]\n     fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         // If the region is bound by `outer_index` or anything outside\n         // of outer index, then it escapes the binders we have\n@@ -875,6 +877,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n         }\n     }\n \n+    #[inline]\n     fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n         if predicate.inner.outer_exclusive_binder > self.outer_index {\n             ControlFlow::Break(FoundEscapingVars)\n@@ -895,6 +898,7 @@ struct HasTypeFlagsVisitor {\n impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n     type BreakTy = FoundFlags;\n \n+    #[inline]\n     fn visit_ty(&mut self, t: Ty<'_>) -> ControlFlow<Self::BreakTy> {\n         debug!(\n             \"HasTypeFlagsVisitor: t={:?} t.flags={:?} self.flags={:?}\",\n@@ -909,6 +913,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n         }\n     }\n \n+    #[inline]\n     fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n         let flags = r.type_flags();\n         debug!(\"HasTypeFlagsVisitor: r={:?} r.flags={:?} self.flags={:?}\", r, flags, self.flags);\n@@ -919,6 +924,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n         }\n     }\n \n+    #[inline]\n     fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n         let flags = FlagComputation::for_const(c);\n         debug!(\"HasTypeFlagsVisitor: c={:?} c.flags={:?} self.flags={:?}\", c, flags, self.flags);\n@@ -929,6 +935,7 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n         }\n     }\n \n+    #[inline]\n     fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<Self::BreakTy> {\n         debug!(\n             \"HasTypeFlagsVisitor: predicate={:?} predicate.flags={:?} self.flags={:?}\","}, {"sha": "154a5e54a5329111b214d3d6dc04c30cee973840", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/481e1fd3a8152cc72b561089c358e3b40c0eb54f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481e1fd3a8152cc72b561089c358e3b40c0eb54f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=481e1fd3a8152cc72b561089c358e3b40c0eb54f", "patch": "@@ -1055,6 +1055,7 @@ impl<'tcx> Eq for Predicate<'tcx> {}\n \n impl<'tcx> Predicate<'tcx> {\n     /// Gets the inner `Binder<PredicateKind<'tcx>>`.\n+    #[inline]\n     pub fn kind(self) -> Binder<PredicateKind<'tcx>> {\n         self.inner.kind\n     }"}, {"sha": "6c074d3af5c4b13a437107372ec3e203235c0009", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/481e1fd3a8152cc72b561089c358e3b40c0eb54f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481e1fd3a8152cc72b561089c358e3b40c0eb54f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=481e1fd3a8152cc72b561089c358e3b40c0eb54f", "patch": "@@ -1256,6 +1256,7 @@ impl<'tcx> ParamTy {\n         ParamTy::new(def.index, def.name)\n     }\n \n+    #[inline]\n     pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n         tcx.mk_ty_param(self.index, self.name)\n     }\n@@ -1561,14 +1562,17 @@ impl RegionKind {\n         }\n     }\n \n+    #[inline]\n     pub fn is_late_bound(&self) -> bool {\n         matches!(*self, ty::ReLateBound(..))\n     }\n \n+    #[inline]\n     pub fn is_placeholder(&self) -> bool {\n         matches!(*self, ty::RePlaceholder(..))\n     }\n \n+    #[inline]\n     pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {\n         match *self {\n             ty::ReLateBound(debruijn, _) => debruijn >= index,"}, {"sha": "18b8ef557d6714e315d24c45c86a38fd41048989", "filename": "compiler/rustc_mir/src/util/storage.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/481e1fd3a8152cc72b561089c358e3b40c0eb54f/compiler%2Frustc_mir%2Fsrc%2Futil%2Fstorage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481e1fd3a8152cc72b561089c358e3b40c0eb54f/compiler%2Frustc_mir%2Fsrc%2Futil%2Fstorage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fstorage.rs?ref=481e1fd3a8152cc72b561089c358e3b40c0eb54f", "patch": "@@ -34,6 +34,7 @@ impl AlwaysLiveLocals {\n impl std::ops::Deref for AlwaysLiveLocals {\n     type Target = BitSet<Local>;\n \n+    #[inline]\n     fn deref(&self) -> &Self::Target {\n         &self.0\n     }"}, {"sha": "493bbb3a76201af747daf182eedc56a4229e60fe", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/481e1fd3a8152cc72b561089c358e3b40c0eb54f/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/481e1fd3a8152cc72b561089c358e3b40c0eb54f/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=481e1fd3a8152cc72b561089c358e3b40c0eb54f", "patch": "@@ -77,6 +77,7 @@ impl Limit {\n \n     /// Check that `value` is within the limit. Ensures that the same comparisons are used\n     /// throughout the compiler, as mismatches can cause ICEs, see #72540.\n+    #[inline]\n     pub fn value_within_limit(&self, value: usize) -> bool {\n         value <= self.0\n     }\n@@ -347,10 +348,12 @@ impl Session {\n         self.crate_types.set(crate_types).expect(\"`crate_types` was initialized twice\")\n     }\n \n+    #[inline]\n     pub fn recursion_limit(&self) -> Limit {\n         self.recursion_limit.get().copied().unwrap()\n     }\n \n+    #[inline]\n     pub fn type_length_limit(&self) -> Limit {\n         self.type_length_limit.get().copied().unwrap()\n     }"}]}