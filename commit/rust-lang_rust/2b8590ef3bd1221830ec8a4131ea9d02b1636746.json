{"sha": "2b8590ef3bd1221830ec8a4131ea9d02b1636746", "node_id": "C_kwDOAAsO6NoAKDJiODU5MGVmM2JkMTIyMTgzMGVjOGE0MTMxZWE5ZDAyYjE2MzY3NDY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-12T07:40:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-12T07:40:32Z"}, "message": "Auto merge of #106757 - matthiaskrgr:rollup-9j8830g, r=matthiaskrgr\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #106167 (Fix invalid syntax and incomplete suggestion in impl Trait parameter type suggestions for E0311)\n - #106309 (Prefer non-`[type error]` candidates during selection)\n - #106532 (Allow codegen to unsize `dyn*` to `dyn`)\n - #106596 (Hide more of long types in E0271)\n - #106638 (std tests: use __OsLocalKeyInner from realstd)\n - #106676 (Test that we cannot use trait impl methods arguments as defining uses)\n - #106702 (Conserve cause of `ImplDerivedObligation` in E0599)\n - #106732 (rustc_llvm: replace llvm::makeArrayRef with ArrayRef constructors.)\n - #106733 (Revert \"warn newer available version of the x tool\")\n - #106748 (Clean up `OnUnimplementedFormatString::verify`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "7c99d064572f9d620f1e5d51db183bad0b785991", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c99d064572f9d620f1e5d51db183bad0b785991"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b8590ef3bd1221830ec8a4131ea9d02b1636746", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b8590ef3bd1221830ec8a4131ea9d02b1636746", "html_url": "https://github.com/rust-lang/rust/commit/2b8590ef3bd1221830ec8a4131ea9d02b1636746", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b8590ef3bd1221830ec8a4131ea9d02b1636746/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4887cb18dc2ef5b1bf3fc50ce6c267fde085032b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4887cb18dc2ef5b1bf3fc50ce6c267fde085032b", "html_url": "https://github.com/rust-lang/rust/commit/4887cb18dc2ef5b1bf3fc50ce6c267fde085032b"}, {"sha": "e8ef83e4c060ec66a8dbb3d729af67ffd34f6a92", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8ef83e4c060ec66a8dbb3d729af67ffd34f6a92", "html_url": "https://github.com/rust-lang/rust/commit/e8ef83e4c060ec66a8dbb3d729af67ffd34f6a92"}], "stats": {"total": 1197, "additions": 860, "deletions": 337}, "files": [{"sha": "4bea3af7f3bfa111809d367b6a651d37d2e51910", "filename": "Cargo.lock", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -5034,18 +5034,18 @@ checksum = \"1ef965a420fe14fdac7dd018862966a4c14094f900e1650bbc71ddd7d580c8af\"\n \n [[package]]\n name = \"semver\"\n-version = \"1.0.14\"\n+version = \"1.0.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e25dfac463d778e353db5be2449d1cce89bd6fd23c9f1ea21310ce6e5a1b29c4\"\n+checksum = \"a2333e6df6d6598f2b1974829f853c2b4c5f4a6e503c10af918081aa6f8564e1\"\n dependencies = [\n  \"serde\",\n ]\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.152\"\n+version = \"1.0.147\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bb7d1f0d3021d347a83e556fc4683dea2ea09d87bccdf88ff5c12545d89d5efb\"\n+checksum = \"d193d69bae983fc11a79df82342761dfbf28a99fc8d203dca4c3c1b590948965\"\n dependencies = [\n  \"serde_derive\",\n ]\n@@ -5062,9 +5062,9 @@ dependencies = [\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.152\"\n+version = \"1.0.147\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"af487d118eecd09402d70a5d72551860e788df87b464af30e5ea6a38c75c541e\"\n+checksum = \"4f1d362ca8fc9c3e3a7484440752472d68a6caa98f1ab81d99b5dfe517cec852\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -5082,9 +5082,9 @@ dependencies = [\n \n [[package]]\n name = \"serde_json\"\n-version = \"1.0.91\"\n+version = \"1.0.85\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"877c235533714907a8c2464236f5c4b2a17262ef1bd71f38f35ea592c8da6883\"\n+checksum = \"e55a28e3aaef9d5ce0506d0a14dbba8054ddc7e499ef522dd8b26859ec9d4a44\"\n dependencies = [\n  \"indexmap\",\n  \"itoa\",\n@@ -5400,9 +5400,9 @@ checksum = \"6bdef32e8150c2a081110b42772ffe7d7c9032b606bc226c8260fd97e0976601\"\n \n [[package]]\n name = \"syn\"\n-version = \"1.0.107\"\n+version = \"1.0.102\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1f4064b5b16e03ae50984a5a8ed5d4f8803e6bc1fd170a3cda91a1be4b18e3f5\"\n+checksum = \"3fcd952facd492f9be3ef0d0b7032a6e442ee9b361d4acc2b1d0c4aaa5f613a1\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -5576,7 +5576,6 @@ dependencies = [\n  \"lazy_static\",\n  \"miropt-test-tools\",\n  \"regex\",\n- \"semver\",\n  \"termcolor\",\n  \"walkdir\",\n ]"}, {"sha": "f7312f6fcdafdc6d0d90539fa70042a9fbd7f7c8", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -153,9 +153,7 @@ pub fn unsized_info<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         (\n             &ty::Dynamic(ref data_a, _, src_dyn_kind),\n             &ty::Dynamic(ref data_b, _, target_dyn_kind),\n-        ) => {\n-            assert_eq!(src_dyn_kind, target_dyn_kind);\n-\n+        ) if src_dyn_kind == target_dyn_kind => {\n             let old_info =\n                 old_info.expect(\"unsized_info: missing old info for trait upcasting coercion\");\n             if data_a.principal_def_id() == data_b.principal_def_id() {"}, {"sha": "63067deb7b07b79eacf7925f5a3f671fe7ffcb1f", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -1556,7 +1556,23 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n                     // Convert the bounds into obligations.\n                     let impl_obligations = traits::predicates_for_generics(\n-                        |_, _| cause.clone(),\n+                        |_idx, span| {\n+                            let misc = traits::ObligationCause::misc(span, self.body_id);\n+                            let parent_trait_pred = ty::Binder::dummy(ty::TraitPredicate {\n+                                trait_ref: ty::TraitRef::from_method(self.tcx, impl_def_id, substs),\n+                                constness: ty::BoundConstness::NotConst,\n+                                polarity: ty::ImplPolarity::Positive,\n+                            });\n+                            misc.derived_cause(parent_trait_pred, |derived| {\n+                                traits::ImplDerivedObligation(Box::new(\n+                                    traits::ImplDerivedObligationCause {\n+                                        derived,\n+                                        impl_def_id,\n+                                        span,\n+                                    },\n+                                ))\n+                            })\n+                        },\n                         self.param_env,\n                         impl_bounds,\n                     );"}, {"sha": "8166eb8299041136a089eb92866cf4fea044dd0b", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 40, "deletions": 33, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -101,6 +101,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.autoderef(span, ty).any(|(ty, _)| matches!(ty.kind(), ty::Slice(..) | ty::Array(..)))\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     pub fn report_method_error(\n         &self,\n         span: Span,\n@@ -586,22 +587,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             // Find all the requirements that come from a local `impl` block.\n             let mut skip_list: FxHashSet<_> = Default::default();\n-            let mut spanned_predicates: FxHashMap<MultiSpan, _> = Default::default();\n-            for (data, p, parent_p, impl_def_id, cause) in unsatisfied_predicates\n+            let mut spanned_predicates = FxHashMap::default();\n+            for (p, parent_p, impl_def_id, cause) in unsatisfied_predicates\n                 .iter()\n                 .filter_map(|(p, parent, c)| c.as_ref().map(|c| (p, parent, c)))\n                 .filter_map(|(p, parent, c)| match c.code() {\n-                    ObligationCauseCode::ImplDerivedObligation(data) => {\n-                        Some((&data.derived, p, parent, data.impl_def_id, data))\n+                    ObligationCauseCode::ImplDerivedObligation(data)\n+                        if matches!(p.kind().skip_binder(), ty::PredicateKind::Clause(_)) =>\n+                    {\n+                        Some((p, parent, data.impl_def_id, data))\n                     }\n                     _ => None,\n                 })\n             {\n-                let parent_trait_ref = data.parent_trait_pred;\n-                let path = parent_trait_ref.print_modifiers_and_trait_path();\n-                let tr_self_ty = parent_trait_ref.skip_binder().self_ty();\n-                let unsatisfied_msg = \"unsatisfied trait bound introduced here\";\n-                let derive_msg = \"unsatisfied trait bound introduced in this `derive` macro\";\n                 match self.tcx.hir().get_if_local(impl_def_id) {\n                     // Unmet obligation comes from a `derive` macro, point at it once to\n                     // avoid multiple span labels pointing at the same place.\n@@ -617,10 +615,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ) =>\n                     {\n                         let span = self_ty.span.ctxt().outer_expn_data().call_site;\n-                        let mut spans: MultiSpan = span.into();\n-                        spans.push_span_label(span, derive_msg);\n-                        let entry = spanned_predicates.entry(spans);\n-                        entry.or_insert_with(|| (path, tr_self_ty, Vec::new())).2.push(p);\n+                        let entry = spanned_predicates.entry(span);\n+                        let entry = entry.or_insert_with(|| {\n+                            (FxHashSet::default(), FxHashSet::default(), Vec::new())\n+                        });\n+                        entry.0.insert(span);\n+                        entry.1.insert((\n+                            span,\n+                            \"unsatisfied trait bound introduced in this `derive` macro\",\n+                        ));\n+                        entry.2.push(p);\n+                        skip_list.insert(p);\n                     }\n \n                     // Unmet obligation coming from an `impl`.\n@@ -647,8 +652,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 };\n                                 err.span_suggestion_verbose(\n                                     sp,\n-                                    \"consider relaxing the type parameter's implicit \\\n-                                     `Sized` bound\",\n+                                    \"consider relaxing the type parameter's implicit `Sized` bound\",\n                                     sugg,\n                                     Applicability::MachineApplicable,\n                                 );\n@@ -659,25 +663,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             let _ = format_pred(*pred);\n                         }\n                         skip_list.insert(p);\n-                        let mut spans = if cause.span != *item_span {\n-                            let mut spans: MultiSpan = cause.span.into();\n-                            spans.push_span_label(cause.span, unsatisfied_msg);\n-                            spans\n+                        let entry = spanned_predicates.entry(self_ty.span);\n+                        let entry = entry.or_insert_with(|| {\n+                            (FxHashSet::default(), FxHashSet::default(), Vec::new())\n+                        });\n+                        entry.2.push(p);\n+                        if cause.span != *item_span {\n+                            entry.0.insert(cause.span);\n+                            entry.1.insert((cause.span, \"unsatisfied trait bound introduced here\"));\n                         } else {\n-                            let mut spans = Vec::with_capacity(2);\n                             if let Some(trait_ref) = of_trait {\n-                                spans.push(trait_ref.path.span);\n+                                entry.0.insert(trait_ref.path.span);\n                             }\n-                            spans.push(self_ty.span);\n-                            spans.into()\n+                            entry.0.insert(self_ty.span);\n                         };\n                         if let Some(trait_ref) = of_trait {\n-                            spans.push_span_label(trait_ref.path.span, \"\");\n+                            entry.1.insert((trait_ref.path.span, \"\"));\n                         }\n-                        spans.push_span_label(self_ty.span, \"\");\n-\n-                        let entry = spanned_predicates.entry(spans);\n-                        entry.or_insert_with(|| (path, tr_self_ty, Vec::new())).2.push(p);\n+                        entry.1.insert((self_ty.span, \"\"));\n                     }\n                     Some(Node::Item(hir::Item {\n                         kind: hir::ItemKind::Trait(rustc_ast::ast::IsAuto::Yes, ..),\n@@ -694,11 +697,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n             let mut spanned_predicates: Vec<_> = spanned_predicates.into_iter().collect();\n-            spanned_predicates.sort_by_key(|(span, (_, _, _))| span.primary_span());\n-            for (span, (_path, _self_ty, preds)) in spanned_predicates {\n-                let mut preds: Vec<_> = preds\n-                    .into_iter()\n-                    .filter_map(|pred| format_pred(*pred))\n+            spanned_predicates.sort_by_key(|(span, _)| *span);\n+            for (_, (primary_spans, span_labels, predicates)) in spanned_predicates {\n+                let mut preds: Vec<_> = predicates\n+                    .iter()\n+                    .filter_map(|pred| format_pred(**pred))\n                     .map(|(p, _)| format!(\"`{}`\", p))\n                     .collect();\n                 preds.sort();\n@@ -708,6 +711,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 } else {\n                     format!(\"the following trait bounds were not satisfied:\\n{}\", preds.join(\"\\n\"),)\n                 };\n+                let mut span: MultiSpan = primary_spans.into_iter().collect::<Vec<_>>().into();\n+                for (sp, label) in span_labels {\n+                    span.push_span_label(sp, label);\n+                }\n                 err.span_note(span, &msg);\n                 unsatisfied_bounds = true;\n             }"}, {"sha": "9747f360eca48b53edc2d6c57702751897260ecf", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 77, "deletions": 17, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -2144,18 +2144,21 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         // suggest adding an explicit lifetime bound to it.\n         let generics = self.tcx.generics_of(generic_param_scope);\n         // type_param_span is (span, has_bounds)\n+        let mut is_synthetic = false;\n+        let mut ast_generics = None;\n         let type_param_span = match bound_kind {\n             GenericKind::Param(ref param) => {\n                 // Account for the case where `param` corresponds to `Self`,\n                 // which doesn't have the expected type argument.\n                 if !(generics.has_self && param.index == 0) {\n                     let type_param = generics.type_param(param, self.tcx);\n+                    is_synthetic = type_param.kind.is_synthetic();\n                     type_param.def_id.as_local().map(|def_id| {\n                         // Get the `hir::Param` to verify whether it already has any bounds.\n                         // We do this to avoid suggesting code that ends up as `T: 'a'b`,\n                         // instead we suggest `T: 'a + 'b` in that case.\n                         let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n-                        let ast_generics = self.tcx.hir().get_generics(hir_id.owner.def_id);\n+                        ast_generics = self.tcx.hir().get_generics(hir_id.owner.def_id);\n                         let bounds =\n                             ast_generics.and_then(|g| g.bounds_span_for_suggestions(def_id));\n                         // `sp` only covers `T`, change it so that it covers\n@@ -2187,11 +2190,64 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 .unwrap_or(\"'lt\".to_string())\n         };\n \n-        let add_lt_sugg = generics\n-            .params\n-            .first()\n-            .and_then(|param| param.def_id.as_local())\n-            .map(|def_id| (self.tcx.def_span(def_id).shrink_to_lo(), format!(\"{}, \", new_lt)));\n+        let mut add_lt_suggs: Vec<Option<_>> = vec![];\n+        if is_synthetic {\n+            if let Some(ast_generics) = ast_generics {\n+                let named_lifetime_param_exist = ast_generics.params.iter().any(|p| {\n+                    matches!(\n+                        p.kind,\n+                        hir::GenericParamKind::Lifetime { kind: hir::LifetimeParamKind::Explicit }\n+                    )\n+                });\n+                if named_lifetime_param_exist && let [param, ..] = ast_generics.params\n+                {\n+                    add_lt_suggs.push(Some((\n+                        self.tcx.def_span(param.def_id).shrink_to_lo(),\n+                        format!(\"{new_lt}, \"),\n+                    )));\n+                } else {\n+                    add_lt_suggs\n+                        .push(Some((ast_generics.span.shrink_to_hi(), format!(\"<{new_lt}>\"))));\n+                }\n+            }\n+        } else {\n+            if let [param, ..] = &generics.params[..] && let Some(def_id) = param.def_id.as_local()\n+            {\n+                add_lt_suggs\n+                    .push(Some((self.tcx.def_span(def_id).shrink_to_lo(), format!(\"{new_lt}, \"))));\n+            }\n+        }\n+\n+        if let Some(ast_generics) = ast_generics {\n+            for p in ast_generics.params {\n+                if p.is_elided_lifetime() {\n+                    if self\n+                        .tcx\n+                        .sess\n+                        .source_map()\n+                        .span_to_prev_source(p.span.shrink_to_hi())\n+                        .ok()\n+                        .map_or(false, |s| *s.as_bytes().last().unwrap() == b'&')\n+                    {\n+                        add_lt_suggs\n+                            .push(Some(\n+                                (\n+                                    p.span.shrink_to_hi(),\n+                                    if let Ok(snip) = self.tcx.sess.source_map().span_to_next_source(p.span)\n+                                        && snip.starts_with(' ')\n+                                    {\n+                                        format!(\"{new_lt}\")\n+                                    } else {\n+                                        format!(\"{new_lt} \")\n+                                    }\n+                                )\n+                            ));\n+                    } else {\n+                        add_lt_suggs.push(Some((p.span.shrink_to_hi(), format!(\"<{new_lt}>\"))));\n+                    }\n+                }\n+            }\n+        }\n \n         let labeled_user_string = match bound_kind {\n             GenericKind::Param(ref p) => format!(\"the parameter type `{}`\", p),\n@@ -2215,20 +2271,22 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             );\n         }\n \n-        fn binding_suggestion<S: fmt::Display>(\n+        fn binding_suggestion<'tcx, S: fmt::Display>(\n             err: &mut Diagnostic,\n             type_param_span: Option<(Span, bool)>,\n-            bound_kind: GenericKind<'_>,\n+            bound_kind: GenericKind<'tcx>,\n             sub: S,\n-            add_lt_sugg: Option<(Span, String)>,\n+            add_lt_suggs: Vec<Option<(Span, String)>>,\n         ) {\n             let msg = \"consider adding an explicit lifetime bound\";\n             if let Some((sp, has_lifetimes)) = type_param_span {\n                 let suggestion =\n                     if has_lifetimes { format!(\" + {}\", sub) } else { format!(\": {}\", sub) };\n                 let mut suggestions = vec![(sp, suggestion)];\n-                if let Some(add_lt_sugg) = add_lt_sugg {\n-                    suggestions.push(add_lt_sugg);\n+                for add_lt_sugg in add_lt_suggs {\n+                    if let Some(add_lt_sugg) = add_lt_sugg {\n+                        suggestions.push(add_lt_sugg);\n+                    }\n                 }\n                 err.multipart_suggestion_verbose(\n                     format!(\"{msg}...\"),\n@@ -2252,9 +2310,11 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     };\n                     let mut sugg =\n                         vec![(sp, suggestion), (span.shrink_to_hi(), format!(\" + {}\", new_lt))];\n-                    if let Some(lt) = add_lt_sugg.clone() {\n-                        sugg.push(lt);\n-                        sugg.rotate_right(1);\n+                    for add_lt_sugg in add_lt_suggs.clone() {\n+                        if let Some(lt) = add_lt_sugg {\n+                            sugg.push(lt);\n+                            sugg.rotate_right(1);\n+                        }\n                     }\n                     // `MaybeIncorrect` due to issue #41966.\n                     err.multipart_suggestion(msg, sugg, Applicability::MaybeIncorrect);\n@@ -2358,7 +2418,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 // for the bound is not suitable for suggestions when `-Zverbose` is set because it\n                 // uses `Debug` output, so we handle it specially here so that suggestions are\n                 // always correct.\n-                binding_suggestion(&mut err, type_param_span, bound_kind, name, None);\n+                binding_suggestion(&mut err, type_param_span, bound_kind, name, vec![]);\n                 err\n             }\n \n@@ -2371,7 +2431,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     \"{} may not live long enough\",\n                     labeled_user_string\n                 );\n-                binding_suggestion(&mut err, type_param_span, bound_kind, \"'static\", None);\n+                binding_suggestion(&mut err, type_param_span, bound_kind, \"'static\", vec![]);\n                 err\n             }\n \n@@ -2410,7 +2470,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                                 type_param_span,\n                                 bound_kind,\n                                 new_lt,\n-                                add_lt_sugg,\n+                                add_lt_suggs,\n                             );\n                         }\n                     }"}, {"sha": "03e6d2149e96984846c0c90e83b0a67323e38b49", "filename": "compiler/rustc_llvm/llvm-wrapper/CoverageMappingWrapper.cpp", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/compiler%2Frustc_llvm%2Fllvm-wrapper%2FCoverageMappingWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/compiler%2Frustc_llvm%2Fllvm-wrapper%2FCoverageMappingWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FCoverageMappingWrapper.cpp?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -28,8 +28,8 @@ extern \"C\" void LLVMRustCoverageWriteFilenamesSectionToBuffer(\n   for (size_t i = 0; i < FilenamesLen; i++) {\n     FilenameRefs.push_back(std::string(Filenames[i]));\n   }\n-  auto FilenamesWriter = coverage::CoverageFilenamesSectionWriter(\n-    makeArrayRef(FilenameRefs));\n+  auto FilenamesWriter =\n+      coverage::CoverageFilenamesSectionWriter(ArrayRef<std::string>(FilenameRefs));\n   RawRustStringOstream OS(BufferOut);\n   FilenamesWriter.write(OS);\n }\n@@ -45,15 +45,16 @@ extern \"C\" void LLVMRustCoverageWriteMappingToBuffer(\n   // Convert from FFI representation to LLVM representation.\n   SmallVector<coverage::CounterMappingRegion, 0> MappingRegions;\n   MappingRegions.reserve(NumMappingRegions);\n-  for (const auto &Region : makeArrayRef(RustMappingRegions, NumMappingRegions)) {\n+  for (const auto &Region : ArrayRef<LLVMRustCounterMappingRegion>(\n+           RustMappingRegions, NumMappingRegions)) {\n     MappingRegions.emplace_back(\n         Region.Count, Region.FalseCount, Region.FileID, Region.ExpandedFileID,\n         Region.LineStart, Region.ColumnStart, Region.LineEnd, Region.ColumnEnd,\n         Region.Kind);\n   }\n   auto CoverageMappingWriter = coverage::CoverageMappingWriter(\n-      makeArrayRef(VirtualFileMappingIDs, NumVirtualFileMappingIDs),\n-      makeArrayRef(Expressions, NumExpressions),\n+      ArrayRef<unsigned>(VirtualFileMappingIDs, NumVirtualFileMappingIDs),\n+      ArrayRef<coverage::CounterExpression>(Expressions, NumExpressions),\n       MappingRegions);\n   RawRustStringOstream OS(BufferOut);\n   CoverageMappingWriter.write(OS);"}, {"sha": "8f94e8a4ab2e1d2422d009ec6665eeb7e209ab88", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -257,7 +257,7 @@ template<typename T> static inline void AddAttributes(T *t, unsigned Index,\n   PALNew = PAL.addAttributes(t->getContext(), Index, B);\n #else\n   AttrBuilder B(t->getContext());\n-  for (LLVMAttributeRef Attr : makeArrayRef(Attrs, AttrsLen))\n+  for (LLVMAttributeRef Attr : ArrayRef<LLVMAttributeRef>(Attrs, AttrsLen))\n     B.addAttribute(unwrap(Attr));\n   PALNew = PAL.addAttributesAtIndex(t->getContext(), Index, B);\n #endif\n@@ -1064,7 +1064,7 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateEnumerator(\n     LLVMRustDIBuilderRef Builder, const char *Name, size_t NameLen,\n     const uint64_t Value[2], unsigned SizeInBits, bool IsUnsigned) {\n   return wrap(Builder->createEnumerator(StringRef(Name, NameLen),\n-      APSInt(APInt(SizeInBits, makeArrayRef(Value, 2)), IsUnsigned)));\n+      APSInt(APInt(SizeInBits, ArrayRef<uint64_t>(Value, 2)), IsUnsigned)));\n }\n \n extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateEnumerationType(\n@@ -1477,7 +1477,7 @@ extern \"C\" void LLVMRustAddHandler(LLVMValueRef CatchSwitchRef,\n extern \"C\" OperandBundleDef *LLVMRustBuildOperandBundleDef(const char *Name,\n                                                            LLVMValueRef *Inputs,\n                                                            unsigned NumInputs) {\n-  return new OperandBundleDef(Name, makeArrayRef(unwrap(Inputs), NumInputs));\n+  return new OperandBundleDef(Name, ArrayRef<Value*>(unwrap(Inputs), NumInputs));\n }\n \n extern \"C\" void LLVMRustFreeOperandBundleDef(OperandBundleDef *Bundle) {\n@@ -1491,8 +1491,8 @@ extern \"C\" LLVMValueRef LLVMRustBuildCall(LLVMBuilderRef B, LLVMTypeRef Ty, LLVM\n   Value *Callee = unwrap(Fn);\n   FunctionType *FTy = unwrap<FunctionType>(Ty);\n   return wrap(unwrap(B)->CreateCall(\n-      FTy, Callee, makeArrayRef(unwrap(Args), NumArgs),\n-      makeArrayRef(*OpBundles, NumOpBundles)));\n+      FTy, Callee, ArrayRef<Value*>(unwrap(Args), NumArgs),\n+      ArrayRef<OperandBundleDef>(*OpBundles, NumOpBundles)));\n }\n \n extern \"C\" LLVMValueRef LLVMRustGetInstrProfIncrementIntrinsic(LLVMModuleRef M) {\n@@ -1537,8 +1537,8 @@ LLVMRustBuildInvoke(LLVMBuilderRef B, LLVMTypeRef Ty, LLVMValueRef Fn,\n   Value *Callee = unwrap(Fn);\n   FunctionType *FTy = unwrap<FunctionType>(Ty);\n   return wrap(unwrap(B)->CreateInvoke(FTy, Callee, unwrap(Then), unwrap(Catch),\n-                                      makeArrayRef(unwrap(Args), NumArgs),\n-                                      makeArrayRef(*OpBundles, NumOpBundles),\n+                                      ArrayRef<Value*>(unwrap(Args), NumArgs),\n+                                      ArrayRef<OperandBundleDef>(*OpBundles, NumOpBundles),\n                                       Name));\n }\n "}, {"sha": "b9c5a4e0d0d49b2cb028ea937c0cd79fa3d46dfb", "filename": "compiler/rustc_middle/src/ty/_match.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -89,7 +89,9 @@ impl<'tcx> TypeRelation<'tcx> for Match<'tcx> {\n                 Err(TypeError::Sorts(relate::expected_found(self, a, b)))\n             }\n \n-            (&ty::Error(_), _) | (_, &ty::Error(_)) => Ok(self.tcx().ty_error()),\n+            (&ty::Error(guar), _) | (_, &ty::Error(guar)) => {\n+                Ok(self.tcx().ty_error_with_guaranteed(guar))\n+            }\n \n             _ => relate::super_relate_tys(self, a, b),\n         }"}, {"sha": "a91e8de5f21ea5221f33fccaa8b8b4392b46d178", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -283,6 +283,8 @@ pub trait PrettyPrinter<'tcx>:\n     /// This is typically the case for all non-`'_` regions.\n     fn should_print_region(&self, region: ty::Region<'tcx>) -> bool;\n \n+    fn reset_type_limit(&mut self) {}\n+\n     // Defaults (should not be overridden):\n \n     /// If possible, this returns a global path resolving to `def_id` that is visible\n@@ -1981,6 +1983,10 @@ impl<'tcx> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx> {\n         self.0.ty_infer_name_resolver.as_ref().and_then(|func| func(id))\n     }\n \n+    fn reset_type_limit(&mut self) {\n+        self.printed_type_count = 0;\n+    }\n+\n     fn const_infer_name(&self, id: ty::ConstVid<'tcx>) -> Option<Symbol> {\n         self.0.const_infer_name_resolver.as_ref().and_then(|func| func(id))\n     }\n@@ -2722,11 +2728,15 @@ define_print_and_forward_display! {\n     }\n \n     ty::SubtypePredicate<'tcx> {\n-        p!(print(self.a), \" <: \", print(self.b))\n+        p!(print(self.a), \" <: \");\n+        cx.reset_type_limit();\n+        p!(print(self.b))\n     }\n \n     ty::CoercePredicate<'tcx> {\n-        p!(print(self.a), \" -> \", print(self.b))\n+        p!(print(self.a), \" -> \");\n+        cx.reset_type_limit();\n+        p!(print(self.b))\n     }\n \n     ty::TraitPredicate<'tcx> {\n@@ -2738,7 +2748,9 @@ define_print_and_forward_display! {\n     }\n \n     ty::ProjectionPredicate<'tcx> {\n-        p!(print(self.projection_ty), \" == \", print(self.term))\n+        p!(print(self.projection_ty), \" == \");\n+        cx.reset_type_limit();\n+        p!(print(self.term))\n     }\n \n     ty::Term<'tcx> {"}, {"sha": "65fd8d9753de18b7ad6982fe5124671803917d2b", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -414,7 +414,7 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n             bug!(\"bound types encountered in super_relate_tys\")\n         }\n \n-        (&ty::Error(_), _) | (_, &ty::Error(_)) => Ok(tcx.ty_error()),\n+        (&ty::Error(guar), _) | (_, &ty::Error(guar)) => Ok(tcx.ty_error_with_guaranteed(guar)),\n \n         (&ty::Never, _)\n         | (&ty::Char, _)"}, {"sha": "20bede22c3427dfc0b08c478194d0529cea9169c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -1724,7 +1724,19 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 .and_then(|(predicate, _, normalized_term, expected_term)| {\n                     self.maybe_detailed_projection_msg(predicate, normalized_term, expected_term)\n                 })\n-                .unwrap_or_else(|| format!(\"type mismatch resolving `{}`\", predicate));\n+                .unwrap_or_else(|| {\n+                    with_forced_trimmed_paths!(format!(\n+                        \"type mismatch resolving `{}`\",\n+                        self.resolve_vars_if_possible(predicate)\n+                            .print(FmtPrinter::new_with_limit(\n+                                self.tcx,\n+                                Namespace::TypeNS,\n+                                rustc_session::Limit(10),\n+                            ))\n+                            .unwrap()\n+                            .into_buffer()\n+                    ))\n+                });\n             let mut diag = struct_span_err!(self.tcx.sess, obligation.cause.span, E0271, \"{msg}\");\n \n             let secondary_span = match predicate.kind().skip_binder() {\n@@ -1755,7 +1767,20 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 kind: hir::ImplItemKind::Type(ty),\n                                 ..\n                             }),\n-                        ) => Some((ty.span, format!(\"type mismatch resolving `{}`\", predicate))),\n+                        ) => Some((\n+                            ty.span,\n+                            with_forced_trimmed_paths!(format!(\n+                                \"type mismatch resolving `{}`\",\n+                                self.resolve_vars_if_possible(predicate)\n+                                    .print(FmtPrinter::new_with_limit(\n+                                        self.tcx,\n+                                        Namespace::TypeNS,\n+                                        rustc_session::Limit(5),\n+                                    ))\n+                                    .unwrap()\n+                                    .into_buffer()\n+                            )),\n+                        )),\n                         _ => None,\n                     }),\n                 _ => None,"}, {"sha": "e599996230f51691b87c4a97c34d2195d2307739", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 32, "deletions": 29, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -37,6 +37,21 @@ pub trait TypeErrCtxtExt<'tcx> {\n     ) -> OnUnimplementedNote;\n }\n \n+/// The symbols which are always allowed in a format string\n+static ALLOWED_FORMAT_SYMBOLS: &[Symbol] = &[\n+    kw::SelfUpper,\n+    sym::ItemContext,\n+    sym::from_method,\n+    sym::from_desugaring,\n+    sym::direct,\n+    sym::cause,\n+    sym::integral,\n+    sym::integer_,\n+    sym::float,\n+    sym::_Self,\n+    sym::crate_local,\n+];\n+\n impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n     fn impl_similar_to(\n         &self,\n@@ -543,38 +558,26 @@ impl<'tcx> OnUnimplementedFormatString {\n                 Piece::NextArgument(a) => match a.position {\n                     Position::ArgumentNamed(s) => {\n                         match Symbol::intern(s) {\n-                            // `{Self}` is allowed\n-                            kw::SelfUpper => (),\n                             // `{ThisTraitsName}` is allowed\n                             s if s == trait_name => (),\n-                            // `{from_method}` is allowed\n-                            sym::from_method => (),\n-                            // `{from_desugaring}` is allowed\n-                            sym::from_desugaring => (),\n-                            // `{ItemContext}` is allowed\n-                            sym::ItemContext => (),\n-                            // `{integral}` and `{integer}` and `{float}` are allowed\n-                            sym::integral | sym::integer_ | sym::float => (),\n+                            s if ALLOWED_FORMAT_SYMBOLS.contains(&s) => (),\n                             // So is `{A}` if A is a type parameter\n-                            s => match generics.params.iter().find(|param| param.name == s) {\n-                                Some(_) => (),\n-                                None => {\n-                                    let reported = struct_span_err!(\n-                                        tcx.sess,\n-                                        span,\n-                                        E0230,\n-                                        \"there is no parameter `{}` on {}\",\n-                                        s,\n-                                        if trait_def_id == item_def_id {\n-                                            format!(\"trait `{}`\", trait_name)\n-                                        } else {\n-                                            \"impl\".to_string()\n-                                        }\n-                                    )\n-                                    .emit();\n-                                    result = Err(reported);\n-                                }\n-                            },\n+                            s if generics.params.iter().any(|param| param.name == s) => (),\n+                            s => {\n+                                result = Err(struct_span_err!(\n+                                    tcx.sess,\n+                                    span,\n+                                    E0230,\n+                                    \"there is no parameter `{}` on {}\",\n+                                    s,\n+                                    if trait_def_id == item_def_id {\n+                                        format!(\"trait `{}`\", trait_name)\n+                                    } else {\n+                                        \"impl\".to_string()\n+                                    }\n+                                )\n+                                .emit());\n+                            }\n                         }\n                     }\n                     // `{:1}` and `{}` are not to be used"}, {"sha": "f59a6aa9810d8f7588f078824d730c69474ea781", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -2622,11 +2622,25 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 }\n             }\n             ObligationCauseCode::ObjectCastObligation(concrete_ty, object_ty) => {\n-                err.note(&format!(\n-                    \"required for the cast from `{}` to the object type `{}`\",\n-                    self.ty_to_string(concrete_ty),\n-                    self.ty_to_string(object_ty)\n-                ));\n+                let (concrete_ty, concrete_file) =\n+                    self.tcx.short_ty_string(self.resolve_vars_if_possible(concrete_ty));\n+                let (object_ty, object_file) =\n+                    self.tcx.short_ty_string(self.resolve_vars_if_possible(object_ty));\n+                err.note(&with_forced_trimmed_paths!(format!(\n+                    \"required for the cast from `{concrete_ty}` to the object type `{object_ty}`\",\n+                )));\n+                if let Some(file) = concrete_file {\n+                    err.note(&format!(\n+                        \"the full name for the casted type has been written to '{}'\",\n+                        file.display(),\n+                    ));\n+                }\n+                if let Some(file) = object_file {\n+                    err.note(&format!(\n+                        \"the full name for the object type has been written to '{}'\",\n+                        file.display(),\n+                    ));\n+                }\n             }\n             ObligationCauseCode::Coercion { source: _, target } => {\n                 err.note(&format!(\"required by cast to type `{}`\", self.ty_to_string(target)));"}, {"sha": "170c1673dbd77333c14b7deabff40899e1645e52", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -174,7 +174,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             .param_env\n             .caller_bounds()\n             .iter()\n-            .filter_map(|o| o.to_opt_poly_trait_pred());\n+            .filter_map(|p| p.to_opt_poly_trait_pred())\n+            .filter(|p| !p.references_error());\n \n         // Micro-optimization: filter out predicates relating to different traits.\n         let matching_bounds ="}, {"sha": "2615e2622821d767a2a3d188eeca40f3d14eb01b", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -2377,6 +2377,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let impl_substs = self.infcx.fresh_substs_for_item(obligation.cause.span, impl_def_id);\n \n         let impl_trait_ref = impl_trait_ref.subst(self.tcx(), impl_substs);\n+        if impl_trait_ref.references_error() {\n+            return Err(());\n+        }\n \n         debug!(?impl_trait_ref);\n "}, {"sha": "692ff0cbca68b0dae3cbafb0f7142c36f86d2232", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -177,19 +177,19 @@ use crate::sys_common::thread_parking::Parker;\n use crate::sys_common::{AsInner, IntoInner};\n use crate::time::Duration;\n \n+#[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n+mod scoped;\n+\n+#[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n+pub use scoped::{scope, Scope, ScopedJoinHandle};\n+\n ////////////////////////////////////////////////////////////////////////////////\n // Thread-local storage\n ////////////////////////////////////////////////////////////////////////////////\n \n #[macro_use]\n mod local;\n \n-#[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n-mod scoped;\n-\n-#[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n-pub use scoped::{scope, Scope, ScopedJoinHandle};\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::local::{AccessError, LocalKey};\n \n@@ -209,7 +209,6 @@ pub use self::local::{AccessError, LocalKey};\n ))]\n #[doc(hidden)]\n pub use self::local::fast::Key as __FastLocalKeyInner;\n-\n // when building for tests, use real std's type\n #[unstable(feature = \"libstd_thread_internals\", issue = \"none\")]\n #[cfg(test)]\n@@ -220,12 +219,21 @@ pub use self::local::fast::Key as __FastLocalKeyInner;\n pub use realstd::thread::__FastLocalKeyInner;\n \n #[unstable(feature = \"libstd_thread_internals\", issue = \"none\")]\n+#[cfg(not(test))]\n #[cfg(all(\n     not(target_thread_local),\n     not(all(target_family = \"wasm\", not(target_feature = \"atomics\"))),\n ))]\n #[doc(hidden)]\n pub use self::local::os::Key as __OsLocalKeyInner;\n+// when building for tests, use real std's type\n+#[unstable(feature = \"libstd_thread_internals\", issue = \"none\")]\n+#[cfg(test)]\n+#[cfg(all(\n+    not(target_thread_local),\n+    not(all(target_family = \"wasm\", not(target_feature = \"atomics\"))),\n+))]\n+pub use realstd::thread::__OsLocalKeyInner;\n \n #[unstable(feature = \"libstd_thread_internals\", issue = \"none\")]\n #[cfg(all(target_family = \"wasm\", not(target_feature = \"atomics\")))]"}, {"sha": "9cf43fc7a2193f1b67c5cd51e2927e98dff7b941", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -934,7 +934,8 @@ def main():\n     if len(sys.argv) > 1 and sys.argv[1] == 'help':\n         sys.argv = [sys.argv[0], '-h'] + sys.argv[2:]\n \n-    help_triggered = len(sys.argv) == 1 or any(x in [\"-h\", \"--help\", \"--version\"] for x in sys.argv)\n+    help_triggered = (\n+        '-h' in sys.argv) or ('--help' in sys.argv) or (len(sys.argv) == 1)\n     try:\n         bootstrap(help_triggered)\n         if not help_triggered:"}, {"sha": "fff83a1d097b3f6364c180781b8bfdb6ec886dc6", "filename": "src/tools/tidy/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/src%2Ftools%2Ftidy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/src%2Ftools%2Ftidy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2FCargo.toml?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -11,7 +11,6 @@ miropt-test-tools = { path = \"../miropt-test-tools\" }\n lazy_static = \"1\"\n walkdir = \"2\"\n ignore = \"0.4.18\"\n-semver = \"1.0.14\"\n termcolor = \"1.1.3\"\n \n [[bin]]"}, {"sha": "40375f1306d629700f41b8e81369de264d843636", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -69,4 +69,3 @@ pub mod ui_tests;\n pub mod unit_tests;\n pub mod unstable_book;\n pub mod walk;\n-pub mod x_version;"}, {"sha": "ea2886a3c2f8fda013abaf1c581a466939f36694", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -60,7 +60,7 @@ fn main() {\n \n                 let handle = s.spawn(|| {\n                     let mut flag = false;\n-                    $p::check($($args, )* &mut flag);\n+                    $p::check($($args),* , &mut flag);\n                     if (flag) {\n                         bad.store(true, Ordering::Relaxed);\n                     }\n@@ -113,8 +113,6 @@ fn main() {\n         check!(alphabetical, &compiler_path);\n         check!(alphabetical, &library_path);\n \n-        check!(x_version, &root_path, &cargo);\n-\n         let collected = {\n             drain_handles(&mut handles);\n "}, {"sha": "5dc6a0588c32bc1dc10a9fba6ab0664db9699f66", "filename": "src/tools/tidy/src/x_version.rs", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/4887cb18dc2ef5b1bf3fc50ce6c267fde085032b/src%2Ftools%2Ftidy%2Fsrc%2Fx_version.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4887cb18dc2ef5b1bf3fc50ce6c267fde085032b/src%2Ftools%2Ftidy%2Fsrc%2Fx_version.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fx_version.rs?ref=4887cb18dc2ef5b1bf3fc50ce6c267fde085032b", "patch": "@@ -1,65 +0,0 @@\n-use semver::Version;\n-use std::io::ErrorKind;\n-use std::path::Path;\n-use std::process::{Command, Stdio};\n-\n-pub fn check(root: &Path, cargo: &Path, bad: &mut bool) {\n-    let result = Command::new(\"x\").arg(\"--wrapper-version\").stdout(Stdio::piped()).spawn();\n-    // This runs the command inside a temporary directory.\n-    // This allows us to compare output of result to see if `--wrapper-version` is not a recognized argument to x.\n-    let temp_result = Command::new(\"x\")\n-        .arg(\"--wrapper-version\")\n-        .current_dir(std::env::temp_dir())\n-        .stdout(Stdio::piped())\n-        .spawn();\n-\n-    let (child, temp_child) = match (result, temp_result) {\n-        (Ok(child), Ok(temp_child)) => (child, temp_child),\n-        (Err(e), _) | (_, Err(e)) => match e.kind() {\n-            ErrorKind::NotFound => return,\n-            _ => return tidy_error!(bad, \"failed to run `x`: {}\", e),\n-        },\n-    };\n-\n-    let output = child.wait_with_output().unwrap();\n-    let temp_output = temp_child.wait_with_output().unwrap();\n-\n-    if output != temp_output {\n-        return tidy_error!(\n-            bad,\n-            \"Current version of x does not support the `--wrapper-version` argument\\nConsider updating to the newer version of x by running `cargo install --path src/tools/x`\"\n-        );\n-    }\n-\n-    if output.status.success() {\n-        let version = String::from_utf8_lossy(&output.stdout);\n-        let version = Version::parse(version.trim_end()).unwrap();\n-\n-        if let Some(expected) = get_x_wrapper_version(root, cargo) {\n-            if version < expected {\n-                return tidy_error!(\n-                    bad,\n-                    \"Current version of x is {version}, but the latest version is {expected}\\nConsider updating to the newer version of x by running `cargo install --path src/tools/x`\"\n-                );\n-            }\n-        } else {\n-            return tidy_error!(\n-                bad,\n-                \"Unable to parse the latest version of `x` at `src/tools/x/Cargo.toml`\"\n-            );\n-        }\n-    } else {\n-        return tidy_error!(bad, \"failed to check version of `x`: {}\", output.status);\n-    }\n-}\n-\n-// Parse latest version out of `x` Cargo.toml\n-fn get_x_wrapper_version(root: &Path, cargo: &Path) -> Option<Version> {\n-    let mut cmd = cargo_metadata::MetadataCommand::new();\n-    cmd.cargo_path(cargo)\n-        .manifest_path(root.join(\"src/tools/x/Cargo.toml\"))\n-        .no_deps()\n-        .features(cargo_metadata::CargoOpt::AllFeatures);\n-    let mut metadata = t!(cmd.exec());\n-    metadata.packages.pop().map(|x| x.version)\n-}"}, {"sha": "49d5c0390bc134508afa37fbdfb7a80572e55140", "filename": "tests/ui/c-variadic/issue-86053-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fc-variadic%2Fissue-86053-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fc-variadic%2Fissue-86053-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fc-variadic%2Fissue-86053-1.rs?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -2,7 +2,7 @@\n // error-pattern:unexpected `self` parameter in function\n // error-pattern:`...` must be the last argument of a C-variadic function\n // error-pattern:cannot find type `F` in this scope\n-// error-pattern:in type `&'a &'b usize`, reference has a longer lifetime than the data it references\n+\n \n #![feature(c_variadic)]\n #![crate_type=\"lib\"]"}, {"sha": "5a02f4aa93a959651514c560498d0d937a15e814", "filename": "tests/ui/c-variadic/issue-86053-1.stderr", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fc-variadic%2Fissue-86053-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fc-variadic%2Fissue-86053-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fc-variadic%2Fissue-86053-1.stderr?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -76,24 +76,6 @@ help: you might be missing a type parameter\n LL | fn ordering4 < 'a , 'b, F     > ( a :            ,   self , self ,   self ,\n    |                       +++\n \n-error[E0491]: in type `&'a &'b usize`, reference has a longer lifetime than the data it references\n-  --> $DIR/issue-86053-1.rs:11:52\n-   |\n-LL |     self , ... ,   self ,   self , ... ) where F : FnOnce ( & 'a & 'b usize ) {\n-   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: the pointer is valid for the lifetime `'a` as defined here\n-  --> $DIR/issue-86053-1.rs:10:16\n-   |\n-LL | fn ordering4 < 'a , 'b     > ( a :            ,   self , self ,   self ,\n-   |                ^^\n-note: but the referenced data is only valid for the lifetime `'b` as defined here\n-  --> $DIR/issue-86053-1.rs:10:21\n-   |\n-LL | fn ordering4 < 'a , 'b     > ( a :            ,   self , self ,   self ,\n-   |                     ^^\n-\n-error: aborting due to 12 previous errors\n+error: aborting due to 11 previous errors\n \n-Some errors have detailed explanations: E0412, E0491.\n-For more information about an error, try `rustc --explain E0412`.\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "eb4ff8305dac898011449358b8d822de6e9eac27", "filename": "tests/ui/const-generics/generic_const_exprs/issue-69654.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-69654.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-69654.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-69654.stderr?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -15,8 +15,14 @@ LL | struct Foo<const N: usize> {}\n LL |     Foo::foo();\n    |          ^^^ function or associated item cannot be called on `Foo<_>` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `[u8; _]: Bar<[(); _]>`\n+note: trait bound `[u8; _]: Bar<[(); _]>` was not satisfied\n+  --> $DIR/issue-69654.rs:11:14\n+   |\n+LL | impl<const N: usize> Foo<N>\n+   |                      ------\n+LL | where\n+LL |     [u8; N]: Bar<[(); N]>,\n+   |              ^^^^^^^^^^^^ unsatisfied trait bound introduced here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ea6f5f6927659a751148834a79cbe109a7203e8e", "filename": "tests/ui/const-generics/generic_const_exprs/issue-72787.min.stderr", "status": "modified", "additions": 3, "deletions": 40, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -17,7 +17,7 @@ LL |     Condition<{ LHS <= RHS }>: True\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-72787.rs:25:25\n+  --> $DIR/issue-72787.rs:23:25\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                         ^ cannot perform const operation using `I`\n@@ -26,50 +26,13 @@ LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/issue-72787.rs:25:36\n+  --> $DIR/issue-72787.rs:23:36\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    |                                    ^ cannot perform const operation using `J`\n    |\n    = help: const parameters may only be used as standalone arguments, i.e. `J`\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0283]: type annotations needed: cannot satisfy `IsLessOrEqual<I, 8>: True`\n-  --> $DIR/issue-72787.rs:21:26\n-   |\n-LL |     IsLessOrEqual<I, 8>: True,\n-   |                          ^^^^\n-   |\n-note: multiple `impl`s or `where` clauses satisfying `IsLessOrEqual<I, 8>: True` found\n-  --> $DIR/issue-72787.rs:10:1\n-   |\n-LL | impl<const LHS: u32, const RHS: u32> True for IsLessOrEqual<LHS, RHS> where\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL |     IsLessOrEqual<I, 8>: True,\n-   |                          ^^^^\n-...\n-LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n-   |                                          ^^^^\n-\n-error[E0283]: type annotations needed: cannot satisfy `IsLessOrEqual<I, 8>: True`\n-  --> $DIR/issue-72787.rs:21:26\n-   |\n-LL |     IsLessOrEqual<I, 8>: True,\n-   |                          ^^^^\n-   |\n-note: multiple `impl`s or `where` clauses satisfying `IsLessOrEqual<I, 8>: True` found\n-  --> $DIR/issue-72787.rs:10:1\n-   |\n-LL | impl<const LHS: u32, const RHS: u32> True for IsLessOrEqual<LHS, RHS> where\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL |     IsLessOrEqual<I, 8>: True,\n-   |                          ^^^^\n-...\n-LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n-   |                                          ^^^^\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0283`."}, {"sha": "657fec2e9cb70eb1403f81e8f962264e3386c1b8", "filename": "tests/ui/const-generics/generic_const_exprs/issue-72787.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.rs?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -19,8 +19,6 @@ struct S<const I: u32, const J: u32>;\n impl<const I: u32, const J: u32> S<I, J>\n where\n     IsLessOrEqual<I, 8>: True,\n-//[min]~^ Error type annotations needed\n-//[min]~| Error type annotations needed\n     IsLessOrEqual<J, 8>: True,\n     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n //[min]~^ Error generic parameters may not be used in const operations"}, {"sha": "6aa8ee13b790f57cd8dd8ba2dff2ba475ea28335", "filename": "tests/ui/const-generics/generic_const_exprs/issue-80742.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-80742.stderr?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -23,8 +23,17 @@ LL |     let dst = Inline::<dyn Debug>::new(0);\n    |\n    = note: doesn't satisfy `dyn Debug: Sized`\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `dyn Debug: Sized`\n+note: trait bound `dyn Debug: Sized` was not satisfied\n+  --> $DIR/issue-80742.rs:20:6\n+   |\n+LL | impl<T> Inline<T>\n+   |      ^  ---------\n+   |      |\n+   |      unsatisfied trait bound introduced here\n+help: consider relaxing the type parameter's implicit `Sized` bound\n+   |\n+LL | impl<T: ?Sized> Inline<T>\n+   |       ++++++++\n \n error[E0080]: evaluation of `Inline::<dyn std::fmt::Debug>::{constant#0}` failed\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL"}, {"sha": "91b334b412bc968800442c48883eb3e7d03aa914", "filename": "tests/ui/derives/derive-assoc-type-not-impl.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -18,9 +18,6 @@ note: trait bound `NotClone: Clone` was not satisfied\n    |\n LL | #[derive(Clone)]\n    |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro\n-   = note: the following trait bounds were not satisfied:\n-           `NotClone: Clone`\n-           which is required by `Bar<NotClone>: Clone`\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `clone`, perhaps you need to implement it:\n            candidate #1: `Clone`"}, {"sha": "cee30ac50a6a2ed1335a379ae6aaefe29c362d39", "filename": "tests/ui/derives/issue-91492.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fderives%2Fissue-91492.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fderives%2Fissue-91492.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fissue-91492.stderr?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -42,8 +42,13 @@ LL | struct Object<T, A>(T, A);\n LL |     foo.use_clone();\n    |         ^^^^^^^^^ method cannot be called on `Object<NoDerives, SomeDerives>` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `NoDerives: Clone`\n+note: trait bound `NoDerives: Clone` was not satisfied\n+  --> $DIR/issue-91492.rs:18:9\n+   |\n+LL | impl<T: Clone, A: Default> Object<T, A> {\n+   |         ^^^^^              ------------\n+   |         |\n+   |         unsatisfied trait bound introduced here\n help: consider annotating `NoDerives` with `#[derive(Clone)]`\n    |\n LL | #[derive(Clone)]"}, {"sha": "bf0bb3fbdf8f7f26a6a920f8f5be9cfe30b59a06", "filename": "tests/ui/derives/issue-91550.stderr", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fderives%2Fissue-91550.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fderives%2Fissue-91550.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fissue-91550.stderr?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -30,8 +30,13 @@ LL | struct Object<T>(T);\n LL |     foo.use_eq();\n    |         ^^^^^^ method cannot be called on `Object<NoDerives>` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `NoDerives: Eq`\n+note: trait bound `NoDerives: Eq` was not satisfied\n+  --> $DIR/issue-91550.rs:15:9\n+   |\n+LL | impl<T: Eq> Object<T> {\n+   |         ^^  ---------\n+   |         |\n+   |         unsatisfied trait bound introduced here\n help: consider annotating `NoDerives` with `#[derive(Eq, PartialEq)]`\n    |\n LL | #[derive(Eq, PartialEq)]\n@@ -49,8 +54,13 @@ LL | struct Object<T>(T);\n LL |     foo.use_ord();\n    |         ^^^^^^^ method cannot be called on `Object<NoDerives>` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `NoDerives: Ord`\n+note: trait bound `NoDerives: Ord` was not satisfied\n+  --> $DIR/issue-91550.rs:18:9\n+   |\n+LL | impl<T: Ord> Object<T> {\n+   |         ^^^  ---------\n+   |         |\n+   |         unsatisfied trait bound introduced here\n help: consider annotating `NoDerives` with `#[derive(Eq, Ord, PartialEq, PartialOrd)]`\n    |\n LL | #[derive(Eq, Ord, PartialEq, PartialOrd)]\n@@ -71,9 +81,16 @@ LL | struct Object<T>(T);\n LL |     foo.use_ord_and_partial_ord();\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ method cannot be called on `Object<NoDerives>` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `NoDerives: Ord`\n-           `NoDerives: PartialOrd`\n+note: the following trait bounds were not satisfied:\n+      `NoDerives: Ord`\n+      `NoDerives: PartialOrd`\n+  --> $DIR/issue-91550.rs:21:9\n+   |\n+LL | impl<T: Ord + PartialOrd> Object<T> {\n+   |         ^^^   ^^^^^^^^^^  ---------\n+   |         |     |\n+   |         |     unsatisfied trait bound introduced here\n+   |         unsatisfied trait bound introduced here\n help: consider annotating `NoDerives` with `#[derive(Eq, Ord, PartialEq, PartialOrd)]`\n    |\n LL | #[derive(Eq, Ord, PartialEq, PartialOrd)]"}, {"sha": "7e6b71408558345b0a00c3bcede817b03a98559b", "filename": "tests/ui/diagnostic-width/E0271.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fdiagnostic-width%2FE0271.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fdiagnostic-width%2FE0271.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiagnostic-width%2FE0271.rs?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -0,0 +1,33 @@\n+// compile-flags: --diagnostic-width=40\n+// normalize-stderr-test: \"long-type-\\d+\" -> \"long-type-hash\"\n+trait Future {\n+    type Error;\n+}\n+\n+impl<T, E> Future for Result<T, E> {\n+    type Error = E;\n+}\n+\n+impl<T> Future for Option<T> {\n+    type Error = ();\n+}\n+\n+struct Foo;\n+\n+fn foo() -> Box<dyn Future<Error=Foo>> {\n+    Box::new( //~ ERROR E0271\n+        Ok::<_, ()>(\n+            Err::<(), _>(\n+                Ok::<_, ()>(\n+                    Err::<(), _>(\n+                        Ok::<_, ()>(\n+                            Err::<(), _>(Some(5))\n+                        )\n+                    )\n+                )\n+            )\n+        )\n+    )\n+}\n+fn main() {\n+}"}, {"sha": "ed7b6651d018645f3599c751dbf6432bb1b24c10", "filename": "tests/ui/diagnostic-width/E0271.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fdiagnostic-width%2FE0271.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fdiagnostic-width%2FE0271.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiagnostic-width%2FE0271.stderr?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -0,0 +1,23 @@\n+error[E0271]: type mismatch resolving `<Result<Result<(), Result<Result<(), Result<Result<(), Option<{integer}>>, ...>>, ...>>, ...> as Future>::Error == Foo`\n+  --> $DIR/E0271.rs:18:5\n+   |\n+LL | /     Box::new(\n+LL | |         Ok::<_, ()>(\n+LL | |             Err::<(), _>(\n+LL | |                 Ok::<_, ()>(\n+...  |\n+LL | |         )\n+LL | |     )\n+   | |_____^ type mismatch resolving `<Result<Result<(), Result<Result<(), ...>, ...>>, ...> as Future>::Error == Foo`\n+   |\n+note: expected this to be `Foo`\n+  --> $DIR/E0271.rs:8:18\n+   |\n+LL |     type Error = E;\n+   |                  ^\n+   = note: required for the cast from `Result<Result<..., ...>, ...>` to the object type `dyn Future<Error = Foo>`\n+   = note: the full name for the casted type has been written to '$TEST_BUILD_DIR/diagnostic-width/E0271/E0271.long-type-hash.txt'\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "a6d9df9523af80e1a5b77985e9ef488905dae8f5", "filename": "tests/ui/dyn-star/dyn-star-to-dyn.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fdyn-star%2Fdyn-star-to-dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fdyn-star%2Fdyn-star-to-dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fdyn-star-to-dyn.rs?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -0,0 +1,9 @@\n+// build-pass\n+\n+#![feature(dyn_star)]\n+//~^ WARN the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes\n+\n+fn main() {\n+    let x: dyn* Send = &();\n+    let x = Box::new(x) as Box<dyn Send>;\n+}"}, {"sha": "03aedf5f797a5b3f0916b9b554612a7f76ae40d7", "filename": "tests/ui/dyn-star/dyn-star-to-dyn.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fdyn-star%2Fdyn-star-to-dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fdyn-star%2Fdyn-star-to-dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fdyn-star-to-dyn.stderr?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `dyn_star` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/dyn-star-to-dyn.rs:3:12\n+   |\n+LL | #![feature(dyn_star)]\n+   |            ^^^^^^^^\n+   |\n+   = note: see issue #102425 <https://github.com/rust-lang/rust/issues/102425> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "4410a4d707af462bfb20c1400e5a073350a8947d", "filename": "tests/ui/error-codes/E0311.fixed", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Ferror-codes%2FE0311.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Ferror-codes%2FE0311.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0311.fixed?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+\n+#![allow(warnings)]\n+\n+fn no_restriction<'a, T: 'a>(x: &'a ()) -> &() {\n+    with_restriction::<T>(x) //~ ERROR E0311\n+}\n+\n+fn with_restriction<'a, T: 'a>(x: &'a ()) -> &'a () {\n+    x\n+}\n+\n+fn main() {}"}, {"sha": "99e454f4d75c24a6a7f35005637a9b1a892059aa", "filename": "tests/ui/error-codes/E0311.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Ferror-codes%2FE0311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Ferror-codes%2FE0311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0311.rs?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -1,3 +1,7 @@\n+// run-rustfix\n+\n+#![allow(warnings)]\n+\n fn no_restriction<T>(x: &()) -> &() {\n     with_restriction::<T>(x) //~ ERROR E0311\n }"}, {"sha": "b0e6dd1e2727c75bc9360fb2739abe485c57e9f2", "filename": "tests/ui/error-codes/E0311.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Ferror-codes%2FE0311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Ferror-codes%2FE0311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0311.stderr?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -1,23 +1,23 @@\n error[E0311]: the parameter type `T` may not live long enough\n-  --> $DIR/E0311.rs:2:5\n+  --> $DIR/E0311.rs:6:5\n    |\n LL |     with_restriction::<T>(x)\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/E0311.rs:1:25\n+  --> $DIR/E0311.rs:5:25\n    |\n LL | fn no_restriction<T>(x: &()) -> &() {\n    |                         ^^^\n note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/E0311.rs:2:5\n+  --> $DIR/E0311.rs:6:5\n    |\n LL |     with_restriction::<T>(x)\n    |     ^^^^^^^^^^^^^^^^^^^^^\n help: consider adding an explicit lifetime bound...\n    |\n-LL | fn no_restriction<'a, T: 'a>(x: &()) -> &() {\n-   |                   +++  ++++\n+LL | fn no_restriction<'a, T: 'a>(x: &'a ()) -> &() {\n+   |                   +++  ++++      ++\n \n error: aborting due to previous error\n "}, {"sha": "83655341d6a243756412fcf1a2369eaf324f5e94", "filename": "tests/ui/generic-associated-types/method-unsatified-assoc-type-predicate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fmethod-unsatified-assoc-type-predicate.rs?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -11,7 +11,7 @@ trait M {\n \n impl<T: X<Y<i32> = i32>> M for T {}\n //~^ NOTE trait bound `<S as X>::Y<i32> = i32` was not satisfied\n-//~| NOTE unsatisfied trait bound introduced here\n+//~| NOTE\n //~| NOTE\n //~| NOTE\n "}, {"sha": "810f7c28c004f61efa5575ec0e1426d170def6a2", "filename": "tests/ui/higher-rank-trait-bounds/issue-62203-hrtb-ice.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.stderr?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: type mismatch resolving `for<'r> <L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:16: 42:19]> as T0<'r, (&'r u8,)>>::O == <_ as Ty<'r>>::V`\n+error[E0271]: type mismatch resolving `for<'r> <L<[closure@issue-62203-hrtb-ice.rs:42:16]> as T0<'r, (&'r u8,)>>::O == <_ as Ty<'r>>::V`\n   --> $DIR/issue-62203-hrtb-ice.rs:39:9\n    |\n LL |       let v = Unit2.m(\n@@ -10,7 +10,7 @@ LL | |             f: |x| {\n ...  |\n LL | |             },\n LL | |         },\n-   | |_________^ type mismatch resolving `for<'r> <L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:16: 42:19]> as T0<'r, (&'r u8,)>>::O == <_ as Ty<'r>>::V`\n+   | |_________^ type mismatch resolving `for<'r> <L<[closure@issue-62203-hrtb-ice.rs:42:16]> as T0<'r, (&'r u8,)>>::O == <_ as Ty<'r>>::V`\n    |\n note: expected this to be `<_ as Ty<'_>>::V`\n   --> $DIR/issue-62203-hrtb-ice.rs:21:14"}, {"sha": "f04a753a0e8bd5cc5df21dcb15c3d6c1fbba7831", "filename": "tests/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -1,8 +1,8 @@\n-error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n+error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as Trait>::Assoc`\n   --> $DIR/bound-normalization-fail.rs:25:32\n    |\n LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output = T::Assoc> {\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Foo<()> as FooLike>::Output == <T as Trait>::Assoc`\n LL |\n LL |         Foo(())\n    |         ------- return type was inferred to be `Foo<()>` here\n@@ -28,11 +28,11 @@ LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output = T::Assoc> {\n    = note: see issue #103532 <https://github.com/rust-lang/rust/issues/103532> for more information\n    = help: add `#![feature(impl_trait_projections)]` to the crate attributes to enable\n \n-error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'a>>::Assoc`\n+error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as Trait<'a>>::Assoc`\n   --> $DIR/bound-normalization-fail.rs:41:41\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output = T::Assoc> {\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'a>>::Assoc`\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Foo<()> as FooLike>::Output == <T as Trait<'a>>::Assoc`\n ...\n LL |         Foo(())\n    |         ------- return type was inferred to be `Foo<()>` here"}, {"sha": "d872291c87054e2aaf11c7e6d8ea97624d3a6ef4", "filename": "tests/ui/impl-trait/issues/issue-62742.stderr", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-62742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-62742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fissues%2Fissue-62742.stderr?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -23,8 +23,13 @@ LL | pub struct RawImpl<T>(PhantomData<T>);\n LL | pub struct SafeImpl<T: ?Sized, A: Raw<T>>(PhantomData<(A, T)>);\n    | ----------------------------------------- function or associated item `foo` not found for this struct\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `RawImpl<()>: Raw<()>`\n+note: trait bound `RawImpl<()>: Raw<()>` was not satisfied\n+  --> $DIR/issue-62742.rs:28:20\n+   |\n+LL | impl<T: ?Sized, A: Raw<T>> SafeImpl<T, A> {\n+   |                    ^^^^^^  --------------\n+   |                    |\n+   |                    unsatisfied trait bound introduced here\n note: the trait `Raw` must be implemented\n   --> $DIR/issue-62742.rs:12:1\n    |"}, {"sha": "f977f0bd3a8c2ae27e4b08294a0296b31ad9b7ce", "filename": "tests/ui/lifetimes/suggest-introducing-and-adding-missing-lifetime.fixed", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Flifetimes%2Fsuggest-introducing-and-adding-missing-lifetime.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Flifetimes%2Fsuggest-introducing-and-adding-missing-lifetime.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fsuggest-introducing-and-adding-missing-lifetime.fixed?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+\n+#![allow(warnings)]\n+\n+fn no_restriction<'a, T: 'a>(x: &'a ()) -> &() {\n+    with_restriction::<T>(x) //~ ERROR the parameter type `T` may not live long enough\n+}\n+\n+fn with_restriction<'b, T: 'b>(x: &'b ()) -> &'b () {\n+    x\n+}\n+\n+fn main() {}"}, {"sha": "d6ce112ec93d40fda0814f44f21b0be7977817bf", "filename": "tests/ui/lifetimes/suggest-introducing-and-adding-missing-lifetime.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Flifetimes%2Fsuggest-introducing-and-adding-missing-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Flifetimes%2Fsuggest-introducing-and-adding-missing-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fsuggest-introducing-and-adding-missing-lifetime.rs?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -1,3 +1,7 @@\n+// run-rustfix\n+\n+#![allow(warnings)]\n+\n fn no_restriction<T>(x: &()) -> &() {\n     with_restriction::<T>(x) //~ ERROR the parameter type `T` may not live long enough\n }"}, {"sha": "2d58d3a02f35e4d8c4ec429c0982555884091264", "filename": "tests/ui/lifetimes/suggest-introducing-and-adding-missing-lifetime.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Flifetimes%2Fsuggest-introducing-and-adding-missing-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Flifetimes%2Fsuggest-introducing-and-adding-missing-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fsuggest-introducing-and-adding-missing-lifetime.stderr?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -1,23 +1,23 @@\n error[E0311]: the parameter type `T` may not live long enough\n-  --> $DIR/suggest-introducing-and-adding-missing-lifetime.rs:2:5\n+  --> $DIR/suggest-introducing-and-adding-missing-lifetime.rs:6:5\n    |\n LL |     with_restriction::<T>(x)\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/suggest-introducing-and-adding-missing-lifetime.rs:1:25\n+  --> $DIR/suggest-introducing-and-adding-missing-lifetime.rs:5:25\n    |\n LL | fn no_restriction<T>(x: &()) -> &() {\n    |                         ^^^\n note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/suggest-introducing-and-adding-missing-lifetime.rs:2:5\n+  --> $DIR/suggest-introducing-and-adding-missing-lifetime.rs:6:5\n    |\n LL |     with_restriction::<T>(x)\n    |     ^^^^^^^^^^^^^^^^^^^^^\n help: consider adding an explicit lifetime bound...\n    |\n-LL | fn no_restriction<'a, T: 'a>(x: &()) -> &() {\n-   |                   +++  ++++\n+LL | fn no_restriction<'a, T: 'a>(x: &'a ()) -> &() {\n+   |                   +++  ++++      ++\n \n error: aborting due to previous error\n "}, {"sha": "f3db56d1d53911e101716a8b8a844e02d28a7854", "filename": "tests/ui/methods/method-not-found-generic-arg-elision.stderr", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -88,9 +88,16 @@ LL | struct Struct<T> {\n LL |     s.method();\n    |       ^^^^^^ method cannot be called on `Struct<f64>` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `f64: Eq`\n-           `f64: Ord`\n+note: the following trait bounds were not satisfied:\n+      `f64: Eq`\n+      `f64: Ord`\n+  --> $DIR/method-not-found-generic-arg-elision.rs:74:36\n+   |\n+LL | impl<T: Clone + Copy + PartialEq + Eq + PartialOrd + Ord> Struct<T> {\n+   |                                    ^^                ^^^  ---------\n+   |                                    |                 |\n+   |                                    |                 unsatisfied trait bound introduced here\n+   |                                    unsatisfied trait bound introduced here\n \n error: aborting due to 9 previous errors\n "}, {"sha": "968e285af7ff80349eab4f4f15975f9447285714", "filename": "tests/ui/missing-trait-bounds/missing-trait-bounds-for-method-call.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fmissing-trait-bounds%2Fmissing-trait-bounds-for-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fmissing-trait-bounds%2Fmissing-trait-bounds-for-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing-trait-bounds%2Fmissing-trait-bounds-for-method-call.stderr?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -7,20 +7,16 @@ LL | struct Foo<T> {\n LL |         self.foo();\n    |              ^^^ method cannot be called on `&Foo<T>` due to unsatisfied trait bounds\n    |\n-note: trait bound `T: Default` was not satisfied\n+note: the following trait bounds were not satisfied:\n+      `T: Bar`\n+      `T: Default`\n   --> $DIR/missing-trait-bounds-for-method-call.rs:10:9\n    |\n LL | impl<T: Default + Bar> Bar for Foo<T> {}\n-   |         ^^^^^^^        ---     ------\n-   |         |\n+   |         ^^^^^^^   ^^^  ---     ------\n+   |         |         |\n+   |         |         unsatisfied trait bound introduced here\n    |         unsatisfied trait bound introduced here\n-note: trait bound `T: Bar` was not satisfied\n-  --> $DIR/missing-trait-bounds-for-method-call.rs:10:19\n-   |\n-LL | impl<T: Default + Bar> Bar for Foo<T> {}\n-   |                   ^^^  ---     ------\n-   |                   |\n-   |                   unsatisfied trait bound introduced here\n help: consider restricting the type parameters to satisfy the trait bounds\n    |\n LL | struct Foo<T> where T: Bar, T: Default {"}, {"sha": "924b26a8c75fd224f7f9f13750aafea8b575ddf7", "filename": "tests/ui/suggestions/derive-trait-for-method-call.stderr", "status": "modified", "additions": 34, "deletions": 11, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fsuggestions%2Fderive-trait-for-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fsuggestions%2Fderive-trait-for-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fderive-trait-for-method-call.stderr?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -16,10 +16,18 @@ LL | struct Foo<X, Y> (X, Y);\n LL |     let y = x.test();\n    |               ^^^^ method cannot be called on `Foo<Enum, CloneEnum>` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `Enum: Clone`\n-           `Enum: Default`\n-           `CloneEnum: Default`\n+note: the following trait bounds were not satisfied:\n+      `CloneEnum: Default`\n+      `Enum: Clone`\n+      `Enum: Default`\n+  --> $DIR/derive-trait-for-method-call.rs:20:9\n+   |\n+LL | impl<X: Clone + Default + , Y: Clone + Default> Foo<X, Y> {\n+   |         ^^^^^   ^^^^^^^                ^^^^^^^  ---------\n+   |         |       |                      |\n+   |         |       |                      unsatisfied trait bound introduced here\n+   |         |       unsatisfied trait bound introduced here\n+   |         unsatisfied trait bound introduced here\n note: the trait `Default` must be implemented\n   --> $SRC_DIR/core/src/default.rs:LL:COL\n help: consider annotating `Enum` with `#[derive(Clone)]`\n@@ -45,10 +53,18 @@ LL | struct Foo<X, Y> (X, Y);\n LL |     let y = x.test();\n    |               ^^^^ method cannot be called on `Foo<Struct, CloneStruct>` due to unsatisfied trait bounds\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `Struct: Clone`\n-           `Struct: Default`\n-           `CloneStruct: Default`\n+note: the following trait bounds were not satisfied:\n+      `CloneStruct: Default`\n+      `Struct: Clone`\n+      `Struct: Default`\n+  --> $DIR/derive-trait-for-method-call.rs:20:9\n+   |\n+LL | impl<X: Clone + Default + , Y: Clone + Default> Foo<X, Y> {\n+   |         ^^^^^   ^^^^^^^                ^^^^^^^  ---------\n+   |         |       |                      |\n+   |         |       |                      unsatisfied trait bound introduced here\n+   |         |       unsatisfied trait bound introduced here\n+   |         unsatisfied trait bound introduced here\n help: consider annotating `CloneStruct` with `#[derive(Default)]`\n    |\n LL | #[derive(Default)]\n@@ -73,9 +89,16 @@ LL |     let y = x.test();\n    |\n    = note: doesn't satisfy `Vec<Enum>: Clone`\n    |\n-   = note: the following trait bounds were not satisfied:\n-           `Vec<Enum>: Clone`\n-           `Instant: Default`\n+note: the following trait bounds were not satisfied:\n+      `Instant: Default`\n+      `Vec<Enum>: Clone`\n+  --> $DIR/derive-trait-for-method-call.rs:20:9\n+   |\n+LL | impl<X: Clone + Default + , Y: Clone + Default> Foo<X, Y> {\n+   |         ^^^^^                          ^^^^^^^  ---------\n+   |         |                              |\n+   |         |                              unsatisfied trait bound introduced here\n+   |         unsatisfied trait bound introduced here\n \n error: aborting due to 3 previous errors\n "}, {"sha": "47087eb47497239355db1a0e47899b371b0629e7", "filename": "tests/ui/suggestions/lifetimes/issue-105544.fixed", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fsuggestions%2Flifetimes%2Fissue-105544.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fsuggestions%2Flifetimes%2Fissue-105544.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Flifetimes%2Fissue-105544.fixed?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -0,0 +1,45 @@\n+// run-rustfix\n+\n+#![allow(warnings)]\n+\n+fn foo<'a>(d: impl Sized + 'a, p: &'a mut ()) -> impl Sized + '_ { //~ NOTE the parameter type `impl Sized` must be valid for the anonymous lifetime defined here...\n+//~^ HELP consider adding an explicit lifetime bound\n+    (d, p)\n+    //~^ ERROR the parameter type `impl Sized` may not live long enough\n+    //~| NOTE ...so that the type `impl Sized` will meet its required lifetime bounds\n+}\n+\n+fn foo1<'b>(d: impl Sized + 'b, p: &'b mut ()) -> impl Sized + '_ {\n+//~^ HELP consider adding an explicit lifetime bound...\n+    (d, p) //~ NOTE ...so that the type `impl Sized` will meet its required lifetime bounds\n+    //~^ ERROR the parameter type `impl Sized` may not live long enough\n+}\n+\n+fn foo2<'b, 'a>(d: impl Sized + 'a + 'b, p: &'b mut ()) -> impl Sized + '_ { //~ NOTE the parameter type `impl Sized + 'a` must be valid for the anonymous lifetime defined here...\n+//~^ HELP consider adding an explicit lifetime bound\n+    (d, p)\n+    //~^ ERROR the parameter type `impl Sized + 'a` may not live long enough\n+    //~| NOTE ...so that the type `impl Sized + 'a` will meet its required lifetime bounds\n+}\n+\n+fn bar<'a, T : Sized + 'a>(d: T, p: &'a mut ()) -> impl Sized + '_ { //~ NOTE the parameter type `T` must be valid for the anonymous lifetime defined here...\n+//~^ HELP consider adding an explicit lifetime bound\n+    (d, p)\n+    //~^ ERROR the parameter type `T` may not live long enough\n+    //~| NOTE ...so that the type `T` will meet its required lifetime bounds\n+}\n+\n+fn bar1<'b, T : Sized + 'b>(d: T, p: &'b mut ()) -> impl Sized + '_ {\n+//~^ HELP consider adding an explicit lifetime bound...\n+    (d, p) //~ NOTE ...so that the type `T` will meet its required lifetime bounds\n+    //~^ ERROR the parameter type `T` may not live long enough\n+}\n+\n+fn bar2<'b, 'a, T : Sized + 'a + 'b>(d: T, p: &'b mut ()) -> impl Sized + '_ { //~ NOTE the parameter type `T` must be valid for the anonymous lifetime defined here...\n+//~^ HELP consider adding an explicit lifetime bound\n+    (d, p)\n+    //~^ ERROR the parameter type `T` may not live long enough\n+    //~| NOTE ...so that the type `T` will meet its required lifetime bounds\n+}\n+\n+fn main() {}"}, {"sha": "bd3bc1ef9bd2d55b8bee0fed2a3ce7560b438597", "filename": "tests/ui/suggestions/lifetimes/issue-105544.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fsuggestions%2Flifetimes%2Fissue-105544.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fsuggestions%2Flifetimes%2Fissue-105544.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Flifetimes%2Fissue-105544.rs?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -0,0 +1,45 @@\n+// run-rustfix\n+\n+#![allow(warnings)]\n+\n+fn foo(d: impl Sized, p: &mut ()) -> impl Sized + '_ { //~ NOTE the parameter type `impl Sized` must be valid for the anonymous lifetime defined here...\n+//~^ HELP consider adding an explicit lifetime bound\n+    (d, p)\n+    //~^ ERROR the parameter type `impl Sized` may not live long enough\n+    //~| NOTE ...so that the type `impl Sized` will meet its required lifetime bounds\n+}\n+\n+fn foo1<'b>(d: impl Sized, p: &'b mut ()) -> impl Sized + '_ {\n+//~^ HELP consider adding an explicit lifetime bound...\n+    (d, p) //~ NOTE ...so that the type `impl Sized` will meet its required lifetime bounds\n+    //~^ ERROR the parameter type `impl Sized` may not live long enough\n+}\n+\n+fn foo2<'a>(d: impl Sized + 'a, p: &mut ()) -> impl Sized + '_ { //~ NOTE the parameter type `impl Sized + 'a` must be valid for the anonymous lifetime defined here...\n+//~^ HELP consider adding an explicit lifetime bound\n+    (d, p)\n+    //~^ ERROR the parameter type `impl Sized + 'a` may not live long enough\n+    //~| NOTE ...so that the type `impl Sized + 'a` will meet its required lifetime bounds\n+}\n+\n+fn bar<T : Sized>(d: T, p: & mut ()) -> impl Sized + '_ { //~ NOTE the parameter type `T` must be valid for the anonymous lifetime defined here...\n+//~^ HELP consider adding an explicit lifetime bound\n+    (d, p)\n+    //~^ ERROR the parameter type `T` may not live long enough\n+    //~| NOTE ...so that the type `T` will meet its required lifetime bounds\n+}\n+\n+fn bar1<'b, T : Sized>(d: T, p: &'b mut ()) -> impl Sized + '_ {\n+//~^ HELP consider adding an explicit lifetime bound...\n+    (d, p) //~ NOTE ...so that the type `T` will meet its required lifetime bounds\n+    //~^ ERROR the parameter type `T` may not live long enough\n+}\n+\n+fn bar2<'a, T : Sized + 'a>(d: T, p: &mut ()) -> impl Sized + '_ { //~ NOTE the parameter type `T` must be valid for the anonymous lifetime defined here...\n+//~^ HELP consider adding an explicit lifetime bound\n+    (d, p)\n+    //~^ ERROR the parameter type `T` may not live long enough\n+    //~| NOTE ...so that the type `T` will meet its required lifetime bounds\n+}\n+\n+fn main() {}"}, {"sha": "08fe21b11b501bc85921c0ea055d8ff2a44f61a5", "filename": "tests/ui/suggestions/lifetimes/issue-105544.stderr", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fsuggestions%2Flifetimes%2Fissue-105544.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fsuggestions%2Flifetimes%2Fissue-105544.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Flifetimes%2Fissue-105544.stderr?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -0,0 +1,110 @@\n+error[E0311]: the parameter type `impl Sized` may not live long enough\n+  --> $DIR/issue-105544.rs:7:5\n+   |\n+LL |     (d, p)\n+   |     ^^^^^^\n+   |\n+note: the parameter type `impl Sized` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/issue-105544.rs:5:26\n+   |\n+LL | fn foo(d: impl Sized, p: &mut ()) -> impl Sized + '_ {\n+   |                          ^^^^^^^\n+note: ...so that the type `impl Sized` will meet its required lifetime bounds\n+  --> $DIR/issue-105544.rs:7:5\n+   |\n+LL |     (d, p)\n+   |     ^^^^^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn foo<'a>(d: impl Sized + 'a, p: &'a mut ()) -> impl Sized + '_ {\n+   |       ++++               ++++      ++\n+\n+error[E0309]: the parameter type `impl Sized` may not live long enough\n+  --> $DIR/issue-105544.rs:14:5\n+   |\n+LL |     (d, p)\n+   |     ^^^^^^ ...so that the type `impl Sized` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn foo1<'b>(d: impl Sized + 'b, p: &'b mut ()) -> impl Sized + '_ {\n+   |                           ++++\n+\n+error[E0311]: the parameter type `impl Sized + 'a` may not live long enough\n+  --> $DIR/issue-105544.rs:20:5\n+   |\n+LL |     (d, p)\n+   |     ^^^^^^\n+   |\n+note: the parameter type `impl Sized + 'a` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/issue-105544.rs:18:36\n+   |\n+LL | fn foo2<'a>(d: impl Sized + 'a, p: &mut ()) -> impl Sized + '_ {\n+   |                                    ^^^^^^^\n+note: ...so that the type `impl Sized + 'a` will meet its required lifetime bounds\n+  --> $DIR/issue-105544.rs:20:5\n+   |\n+LL |     (d, p)\n+   |     ^^^^^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn foo2<'b, 'a>(d: impl Sized + 'a + 'b, p: &'b mut ()) -> impl Sized + '_ {\n+   |         +++                        ++++      ++\n+\n+error[E0311]: the parameter type `T` may not live long enough\n+  --> $DIR/issue-105544.rs:27:5\n+   |\n+LL |     (d, p)\n+   |     ^^^^^^\n+   |\n+note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/issue-105544.rs:25:28\n+   |\n+LL | fn bar<T : Sized>(d: T, p: & mut ()) -> impl Sized + '_ {\n+   |                            ^^^^^^^^\n+note: ...so that the type `T` will meet its required lifetime bounds\n+  --> $DIR/issue-105544.rs:27:5\n+   |\n+LL |     (d, p)\n+   |     ^^^^^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn bar<'a, T : Sized + 'a>(d: T, p: &'a mut ()) -> impl Sized + '_ {\n+   |        +++           ++++            ++\n+\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/issue-105544.rs:34:5\n+   |\n+LL |     (d, p)\n+   |     ^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn bar1<'b, T : Sized + 'b>(d: T, p: &'b mut ()) -> impl Sized + '_ {\n+   |                       ++++\n+\n+error[E0311]: the parameter type `T` may not live long enough\n+  --> $DIR/issue-105544.rs:40:5\n+   |\n+LL |     (d, p)\n+   |     ^^^^^^\n+   |\n+note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/issue-105544.rs:38:38\n+   |\n+LL | fn bar2<'a, T : Sized + 'a>(d: T, p: &mut ()) -> impl Sized + '_ {\n+   |                                      ^^^^^^^\n+note: ...so that the type `T` will meet its required lifetime bounds\n+  --> $DIR/issue-105544.rs:40:5\n+   |\n+LL |     (d, p)\n+   |     ^^^^^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn bar2<'b, 'a, T : Sized + 'a + 'b>(d: T, p: &'b mut ()) -> impl Sized + '_ {\n+   |         +++                    ++++            ++\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors have detailed explanations: E0309, E0311.\n+For more information about an error, try `rustc --explain E0309`."}, {"sha": "4013d98c3cfe76654c4225c016f62e8bc42efe81", "filename": "tests/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.fixed", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.fixed?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -0,0 +1,29 @@\n+// Regression test for #81650\n+// run-rustfix\n+\n+#![allow(warnings)]\n+\n+struct Foo<'a> {\n+    x: &'a mut &'a i32,\n+}\n+\n+impl<'a> Foo<'a> {\n+    fn bar<F, T>(&self, f: F)\n+    where\n+        F: FnOnce(&Foo<'a>) -> T,\n+        F: 'a,\n+    {}\n+}\n+\n+trait Test {\n+    fn test(&self);\n+}\n+\n+fn func<'a, T: Test + 'a>(foo: &'a Foo<'a>, t: T) {\n+    foo.bar(move |_| {\n+    //~^ ERROR the parameter type `T` may not live long enough\n+        t.test();\n+    });\n+}\n+\n+fn main() {}"}, {"sha": "4096d95e5fd7fe74f57b9f6bbbc14c77081c1878", "filename": "tests/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.rs?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -1,4 +1,7 @@\n // Regression test for #81650\n+// run-rustfix\n+\n+#![allow(warnings)]\n \n struct Foo<'a> {\n     x: &'a mut &'a i32,"}, {"sha": "936d87f7968248e318f36b74276d07964f125b92", "filename": "tests/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -1,5 +1,5 @@\n error[E0311]: the parameter type `T` may not live long enough\n-  --> $DIR/missing-lifetimes-in-signature-2.rs:20:5\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:23:5\n    |\n LL | /     foo.bar(move |_| {\n LL | |\n@@ -8,12 +8,12 @@ LL | |     });\n    | |______^\n    |\n note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/missing-lifetimes-in-signature-2.rs:19:24\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:22:24\n    |\n LL | fn func<T: Test>(foo: &Foo, t: T) {\n    |                        ^^^\n note: ...so that the type `T` will meet its required lifetime bounds\n-  --> $DIR/missing-lifetimes-in-signature-2.rs:20:5\n+  --> $DIR/missing-lifetimes-in-signature-2.rs:23:5\n    |\n LL | /     foo.bar(move |_| {\n LL | |\n@@ -22,8 +22,8 @@ LL | |     });\n    | |______^\n help: consider adding an explicit lifetime bound...\n    |\n-LL | fn func<'a, T: Test + 'a>(foo: &Foo, t: T) {\n-   |         +++         ++++\n+LL | fn func<'a, T: Test + 'a>(foo: &'a Foo<'a>, t: T) {\n+   |         +++         ++++        ++    ++++\n \n error: aborting due to previous error\n "}, {"sha": "c5c3f7b468c8bdf0b603074e09da82a64fd64000", "filename": "tests/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -47,7 +47,7 @@ LL | |     }\n    | |_____^\n help: consider adding an explicit lifetime bound...\n    |\n-LL ~ fn bar<'a, G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n+LL ~ fn bar<'a, G, T>(g: G, dest: &'a mut T) -> impl FnOnce() + '_\n LL | where\n LL ~     G: Get<T> + 'a,\n    |\n@@ -76,8 +76,8 @@ LL | |     }\n    | |_____^\n help: consider adding an explicit lifetime bound...\n    |\n-LL | fn qux<'b, 'a, G: 'a + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n-   |        +++           ++++\n+LL | fn qux<'b, 'a, G: 'a + 'b, T>(g: G, dest: &'b mut T) -> impl FnOnce() + '_\n+   |        +++           ++++                  ++\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:61:9\n@@ -103,8 +103,8 @@ LL | |         }\n    | |_________^\n help: consider adding an explicit lifetime bound...\n    |\n-LL |     fn qux<'c, 'b, G: Get<T> + 'b + 'c, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n-   |            +++                    ++++\n+LL |     fn qux<'c, 'b, G: Get<T> + 'b + 'c, T>(g: G, dest: &'c mut T) -> impl FnOnce() + '_ {\n+   |            +++                    ++++                  ++\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:73:5\n@@ -132,8 +132,8 @@ LL | |     }\n    | |_____^\n help: consider adding an explicit lifetime bound...\n    |\n-LL | fn bat<'b, 'a, G: 'a + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n-   |        +++           ++++\n+LL | fn bat<'b, 'a, G: 'a + 'b, T>(g: G, dest: &'b mut T) -> impl FnOnce() + '_ + 'a\n+   |        +++           ++++                  ++\n \n error[E0621]: explicit lifetime required in the type of `dest`\n   --> $DIR/missing-lifetimes-in-signature.rs:73:5"}, {"sha": "67e880b006a7f9135ae8e3b9b5bee9bf81cfce88", "filename": "tests/ui/traits/ignore-err-impls.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Ftraits%2Fignore-err-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Ftraits%2Fignore-err-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fignore-err-impls.rs?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -0,0 +1,9 @@\n+pub struct S;\n+\n+trait Generic<T> {}\n+\n+impl<'a, T> Generic<&'a T> for S {}\n+impl Generic<Type> for S {}\n+//~^ ERROR cannot find type `Type` in this scope\n+\n+fn main() {}"}, {"sha": "1390106a29125b9caa56b440ef567e8d19bae48a", "filename": "tests/ui/traits/ignore-err-impls.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Ftraits%2Fignore-err-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Ftraits%2Fignore-err-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fignore-err-impls.stderr?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -0,0 +1,11 @@\n+error[E0412]: cannot find type `Type` in this scope\n+  --> $DIR/ignore-err-impls.rs:6:14\n+   |\n+LL | impl Generic<Type> for S {}\n+   |     -        ^^^^ not found in this scope\n+   |     |\n+   |     help: you might be missing a type parameter: `<Type>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "1739ab0063fa9dfa386f1048b8c17315fb572892", "filename": "tests/ui/type-alias-impl-trait/unnameable_type.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Ftype-alias-impl-trait%2Funnameable_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Ftype-alias-impl-trait%2Funnameable_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Funnameable_type.rs?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -0,0 +1,24 @@\n+#![feature(type_alias_impl_trait)]\n+\n+// This test ensures that unnameable types stay unnameable\n+// https://github.com/rust-lang/rust/issues/63063#issuecomment-1360053614\n+\n+// library\n+mod private {\n+    pub struct Private;\n+    pub trait Trait {\n+        fn dont_define_this(_private: Private) {}\n+    }\n+}\n+\n+use private::Trait;\n+\n+// downstream\n+type MyPrivate = impl Sized;\n+//~^ ERROR: unconstrained opaque type\n+impl Trait for u32 {\n+    fn dont_define_this(_private: MyPrivate) {}\n+    //~^ ERROR: incompatible type for trait\n+}\n+\n+fn main() {}"}, {"sha": "7dc6efc4b1b6b97c3c39de64a5f94992ea13bdac", "filename": "tests/ui/type-alias-impl-trait/unnameable_type.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Ftype-alias-impl-trait%2Funnameable_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Ftype-alias-impl-trait%2Funnameable_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Funnameable_type.stderr?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -0,0 +1,31 @@\n+error: unconstrained opaque type\n+  --> $DIR/unnameable_type.rs:17:18\n+   |\n+LL | type MyPrivate = impl Sized;\n+   |                  ^^^^^^^^^^\n+   |\n+   = note: `MyPrivate` must be used in combination with a concrete type within the same module\n+\n+error[E0053]: method `dont_define_this` has an incompatible type for trait\n+  --> $DIR/unnameable_type.rs:20:35\n+   |\n+LL | type MyPrivate = impl Sized;\n+   |                  ---------- the found opaque type\n+...\n+LL |     fn dont_define_this(_private: MyPrivate) {}\n+   |                                   ^^^^^^^^^\n+   |                                   |\n+   |                                   expected struct `Private`, found opaque type\n+   |                                   help: change the parameter type to match the trait: `Private`\n+   |\n+note: type in trait\n+  --> $DIR/unnameable_type.rs:10:39\n+   |\n+LL |         fn dont_define_this(_private: Private) {}\n+   |                                       ^^^^^^^\n+   = note: expected signature `fn(Private)`\n+              found signature `fn(MyPrivate)`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "b80e8b988adb174004542d3d5880d1ca5a959164", "filename": "tests/ui/union/union-derive-clone.mirunsafeck.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -32,9 +32,6 @@ note: trait bound `CloneNoCopy: Copy` was not satisfied\n    |\n LL | #[derive(Clone, Copy)]\n    |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro\n-   = note: the following trait bounds were not satisfied:\n-           `CloneNoCopy: Copy`\n-           which is required by `U5<CloneNoCopy>: Clone`\n help: consider annotating `CloneNoCopy` with `#[derive(Clone, Copy)]`\n    |\n LL | #[derive(Clone, Copy)]"}, {"sha": "b80e8b988adb174004542d3d5880d1ca5a959164", "filename": "tests/ui/union/union-derive-clone.thirunsafeck.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -32,9 +32,6 @@ note: trait bound `CloneNoCopy: Copy` was not satisfied\n    |\n LL | #[derive(Clone, Copy)]\n    |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro\n-   = note: the following trait bounds were not satisfied:\n-           `CloneNoCopy: Copy`\n-           which is required by `U5<CloneNoCopy>: Clone`\n help: consider annotating `CloneNoCopy` with `#[derive(Clone, Copy)]`\n    |\n LL | #[derive(Clone, Copy)]"}, {"sha": "c76f0e1a8b2b53499ea2f50bf609a3afa4e136ab", "filename": "tests/ui/where-clauses/ignore-err-clauses.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fwhere-clauses%2Fignore-err-clauses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fwhere-clauses%2Fignore-err-clauses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhere-clauses%2Fignore-err-clauses.rs?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -0,0 +1,14 @@\n+use std::ops::Add;\n+\n+fn dbl<T>(x: T) -> <T as Add>::Output\n+where\n+    T: Copy + Add,\n+    UUU: Copy,\n+    //~^ ERROR cannot find type `UUU` in this scope\n+{\n+    x + x\n+}\n+\n+fn main() {\n+    println!(\"{}\", dbl(3));\n+}"}, {"sha": "cfddc3e10b64a510070569aa0b10252068626d82", "filename": "tests/ui/where-clauses/ignore-err-clauses.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fwhere-clauses%2Fignore-err-clauses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b8590ef3bd1221830ec8a4131ea9d02b1636746/tests%2Fui%2Fwhere-clauses%2Fignore-err-clauses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhere-clauses%2Fignore-err-clauses.stderr?ref=2b8590ef3bd1221830ec8a4131ea9d02b1636746", "patch": "@@ -0,0 +1,9 @@\n+error[E0412]: cannot find type `UUU` in this scope\n+  --> $DIR/ignore-err-clauses.rs:6:5\n+   |\n+LL |     UUU: Copy,\n+   |     ^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0412`."}]}