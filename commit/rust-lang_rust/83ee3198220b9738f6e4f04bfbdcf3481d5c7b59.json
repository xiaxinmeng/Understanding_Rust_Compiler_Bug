{"sha": "83ee3198220b9738f6e4f04bfbdcf3481d5c7b59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZWUzMTk4MjIwYjk3MzhmNmU0ZjA0YmZiZGNmMzQ4MWQ1YzdiNTk=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-17T19:11:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-17T19:11:05Z"}, "message": "Rollup merge of #76607 - Mark-Simulacrum:tidy-bins, r=pnkfelix\n\nModify executable checking to be more universal\n\nThis uses a dummy file to check if the filesystem being used supports the executable bit in general.\n\nSupersedes #74753.", "tree": {"sha": "c8a21a73fc9ccc8bc48eea4c41f177f522cca47a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8a21a73fc9ccc8bc48eea4c41f177f522cca47a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83ee3198220b9738f6e4f04bfbdcf3481d5c7b59", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfi0HKCRBK7hj4Ov3rIwAAdHIIAKMNwpfqoflIT495rkfbBSow\nRDpmJy9i7uNbhL0zMN6uGGUkTgSvAGO0tLeTpuf3uphCcd0PwzQeFAU421ntg4I4\ndP5krdTJIkv9XWp92rtZD52XswlGho2rjCf6wE9jCIs46d2AGmU2BqzFS2CGNrob\nWQI3ZT2tLdo3K71G8f6cBn3UfSWGSagvq69jVZ6k+xXaAZqE5iDL6xpsbPdBBWGY\nh57w9ouUudBo8WzH7q1p4bOiyewPyX/kHgRFxZs4Hp1vnIjqJ6CESQTOkWL8AOr2\n1qJ71P8Ko+DIqa7fEhVk/6laCLb2MUw1zvqwFwfjic2383mvAV5Ji/XcCvIbnS8=\n=ri6S\n-----END PGP SIGNATURE-----\n", "payload": "tree c8a21a73fc9ccc8bc48eea4c41f177f522cca47a\nparent d10b98d7a5c57369f102f7f15789014ceba8a6c8\nparent 05c9c0ee5dcd935f518db151bee2dc88380fb92f\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1602961865 +0900\ncommitter GitHub <noreply@github.com> 1602961865 +0900\n\nRollup merge of #76607 - Mark-Simulacrum:tidy-bins, r=pnkfelix\n\nModify executable checking to be more universal\n\nThis uses a dummy file to check if the filesystem being used supports the executable bit in general.\n\nSupersedes #74753.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83ee3198220b9738f6e4f04bfbdcf3481d5c7b59", "html_url": "https://github.com/rust-lang/rust/commit/83ee3198220b9738f6e4f04bfbdcf3481d5c7b59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83ee3198220b9738f6e4f04bfbdcf3481d5c7b59/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d10b98d7a5c57369f102f7f15789014ceba8a6c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d10b98d7a5c57369f102f7f15789014ceba8a6c8", "html_url": "https://github.com/rust-lang/rust/commit/d10b98d7a5c57369f102f7f15789014ceba8a6c8"}, {"sha": "05c9c0ee5dcd935f518db151bee2dc88380fb92f", "url": "https://api.github.com/repos/rust-lang/rust/commits/05c9c0ee5dcd935f518db151bee2dc88380fb92f", "html_url": "https://github.com/rust-lang/rust/commit/05c9c0ee5dcd935f518db151bee2dc88380fb92f"}], "stats": {"total": 63, "additions": 51, "deletions": 12}, "files": [{"sha": "33e85dc5e2a1147c35645b3786a0846a95044df4", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/83ee3198220b9738f6e4f04bfbdcf3481d5c7b59/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ee3198220b9738f6e4f04bfbdcf3481d5c7b59/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=83ee3198220b9738f6e4f04bfbdcf3481d5c7b59", "patch": "@@ -737,6 +737,7 @@ impl Step for Tidy {\n         let mut cmd = builder.tool_cmd(Tool::Tidy);\n         cmd.arg(&builder.src);\n         cmd.arg(&builder.initial_cargo);\n+        cmd.arg(&builder.out);\n         if builder.is_verbose() {\n             cmd.arg(\"--verbose\");\n         }"}, {"sha": "62cfa85577f983e2155ffc93b21272ea09f9912f", "filename": "src/tools/tidy/src/bins.rs", "status": "modified", "additions": 45, "deletions": 9, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/83ee3198220b9738f6e4f04bfbdcf3481d5c7b59/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ee3198220b9738f6e4f04bfbdcf3481d5c7b59/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs?ref=83ee3198220b9738f6e4f04bfbdcf3481d5c7b59", "patch": "@@ -9,19 +9,56 @@ use std::path::Path;\n \n // All files are executable on Windows, so just check on Unix.\n #[cfg(windows)]\n-pub fn check(_path: &Path, _bad: &mut bool) {}\n+pub fn check(_path: &Path, _output: &Path, _bad: &mut bool) {}\n \n #[cfg(unix)]\n-pub fn check(path: &Path, bad: &mut bool) {\n+pub fn check(path: &Path, output: &Path, bad: &mut bool) {\n     use std::fs;\n     use std::os::unix::prelude::*;\n     use std::process::{Command, Stdio};\n \n-    if let Ok(contents) = fs::read_to_string(\"/proc/version\") {\n-        // Probably on Windows Linux Subsystem or Docker via VirtualBox,\n-        // all files will be marked as executable, so skip checking.\n-        if contents.contains(\"Microsoft\") || contents.contains(\"boot2docker\") {\n-            return;\n+    fn is_executable(path: &Path) -> std::io::Result<bool> {\n+        Ok(path.metadata()?.mode() & 0o111 != 0)\n+    }\n+\n+    // We want to avoid false positives on filesystems that do not support the\n+    // executable bit. This occurs on some versions of Window's linux subsystem,\n+    // for example.\n+    //\n+    // We try to create the temporary file first in the src directory, which is\n+    // the preferred location as it's most likely to be on the same filesystem,\n+    // and then in the output (`build`) directory if that fails. Sometimes we\n+    // see the source directory mounted as read-only which means we can't\n+    // readily create a file there to test.\n+    //\n+    // See #36706 and #74753 for context.\n+    let mut temp_path = path.join(\"tidy-test-file\");\n+    match fs::File::create(&temp_path).or_else(|_| {\n+        temp_path = output.join(\"tidy-test-file\");\n+        fs::File::create(&temp_path)\n+    }) {\n+        Ok(file) => {\n+            let exec = is_executable(&temp_path).unwrap_or(false);\n+            std::mem::drop(file);\n+            std::fs::remove_file(&temp_path).expect(\"Deleted temp file\");\n+            if exec {\n+                // If the file is executable, then we assume that this\n+                // filesystem does not track executability, so skip this check.\n+                return;\n+            }\n+        }\n+        Err(e) => {\n+            // If the directory is read-only or we otherwise don't have rights,\n+            // just don't run this check.\n+            //\n+            // 30 is the \"Read-only filesystem\" code at least in one CI\n+            //    environment.\n+            if e.raw_os_error() == Some(30) {\n+                eprintln!(\"tidy: Skipping binary file check, read-only filesystem\");\n+                return;\n+            }\n+\n+            panic!(\"unable to create temporary file `{:?}`: {:?}\", temp_path, e);\n         }\n     }\n \n@@ -36,8 +73,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n                 return;\n             }\n \n-            let metadata = t!(entry.metadata(), file);\n-            if metadata.mode() & 0o111 != 0 {\n+            if t!(is_executable(&file), file) {\n                 let rel_path = file.strip_prefix(path).unwrap();\n                 let git_friendly_path = rel_path.to_str().unwrap().replace(\"\\\\\", \"/\");\n                 let output = Command::new(\"git\")"}, {"sha": "e1525f8e1bf238b276a3f87f711b002fb6142bef", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/83ee3198220b9738f6e4f04bfbdcf3481d5c7b59/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ee3198220b9738f6e4f04bfbdcf3481d5c7b59/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=83ee3198220b9738f6e4f04bfbdcf3481d5c7b59", "patch": "@@ -13,6 +13,8 @@ use std::process;\n fn main() {\n     let root_path: PathBuf = env::args_os().nth(1).expect(\"need path to root of repo\").into();\n     let cargo: PathBuf = env::args_os().nth(2).expect(\"need path to cargo\").into();\n+    let output_directory: PathBuf =\n+        env::args_os().nth(3).expect(\"need path to output directory\").into();\n \n     let src_path = root_path.join(\"src\");\n     let library_path = root_path.join(\"library\");\n@@ -36,9 +38,9 @@ fn main() {\n     unit_tests::check(&library_path, &mut bad);\n \n     // Checks that need to be done for both the compiler and std libraries.\n-    bins::check(&src_path, &mut bad);\n-    bins::check(&compiler_path, &mut bad);\n-    bins::check(&library_path, &mut bad);\n+    bins::check(&src_path, &output_directory, &mut bad);\n+    bins::check(&compiler_path, &output_directory, &mut bad);\n+    bins::check(&library_path, &output_directory, &mut bad);\n \n     style::check(&src_path, &mut bad);\n     style::check(&compiler_path, &mut bad);"}]}