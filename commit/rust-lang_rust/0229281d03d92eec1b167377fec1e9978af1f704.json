{"sha": "0229281d03d92eec1b167377fec1e9978af1f704", "node_id": "C_kwDOAAsO6NoAKDAyMjkyODFkMDNkOTJlZWMxYjE2NzM3N2ZlYzFlOTk3OGFmMWY3MDQ", "commit": {"author": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-12-21T23:22:17Z"}, "committer": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-12-22T00:15:56Z"}, "message": "Don't run `Drop` terminators on types that do not have drop glue in const eval", "tree": {"sha": "4df3f6ef9372f524a39ac721e27567fff4ccc6e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4df3f6ef9372f524a39ac721e27567fff4ccc6e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0229281d03d92eec1b167377fec1e9978af1f704", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0229281d03d92eec1b167377fec1e9978af1f704", "html_url": "https://github.com/rust-lang/rust/commit/0229281d03d92eec1b167377fec1e9978af1f704", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0229281d03d92eec1b167377fec1e9978af1f704/comments", "author": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37e00165e408c0e0bca0072f282b790888254bc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/37e00165e408c0e0bca0072f282b790888254bc2", "html_url": "https://github.com/rust-lang/rust/commit/37e00165e408c0e0bca0072f282b790888254bc2"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "550c7a44c4199e6cf7043d4dd60f6e49c7f4b436", "filename": "compiler/rustc_const_eval/src/interpret/terminator.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0229281d03d92eec1b167377fec1e9978af1f704/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0229281d03d92eec1b167377fec1e9978af1f704/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fterminator.rs?ref=0229281d03d92eec1b167377fec1e9978af1f704", "patch": "@@ -119,11 +119,20 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             Drop { place, target, unwind } => {\n+                let frame = self.frame();\n+                let ty = place.ty(&frame.body.local_decls, *self.tcx).ty;\n+                let ty = self.subst_from_frame_and_normalize_erasing_regions(frame, ty)?;\n+                let instance = Instance::resolve_drop_in_place(*self.tcx, ty);\n+                if let ty::InstanceDef::DropGlue(_, None) = instance.def {\n+                    // This is the branch we enter if and only if the dropped type has no drop glue\n+                    // whatsoever. This can happen as a result of monomorphizing a drop of a\n+                    // generic. In order to make sure that generic and non-generic code behaves\n+                    // roughly the same (and in keeping with Mir semantics) we do nothing here.\n+                    self.go_to_block(target);\n+                    return Ok(());\n+                }\n                 let place = self.eval_place(place)?;\n-                let ty = place.layout.ty;\n                 trace!(\"TerminatorKind::drop: {:?}, type {}\", place, ty);\n-\n-                let instance = Instance::resolve_drop_in_place(*self.tcx, ty);\n                 self.drop_in_place(&place, instance, target, unwind)?;\n             }\n "}, {"sha": "6e7d84410da95dfa0a0f618755890ce91289cf22", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0229281d03d92eec1b167377fec1e9978af1f704/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0229281d03d92eec1b167377fec1e9978af1f704/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=0229281d03d92eec1b167377fec1e9978af1f704", "patch": "@@ -562,14 +562,13 @@ pub enum TerminatorKind<'tcx> {\n     Unreachable,\n \n     /// The behavior of this statement differs significantly before and after drop elaboration.\n-    /// After drop elaboration, `Drop` executes the drop glue for the specified place, after which\n-    /// it continues execution/unwinds at the given basic blocks. It is possible that executing drop\n-    /// glue is special - this would be part of Rust's memory model. (**FIXME**: due we have an\n-    /// issue tracking if drop glue has any interesting semantics in addition to those of a function\n-    /// call?)\n-    ///\n-    /// `Drop` before drop elaboration is a *conditional* execution of the drop glue. Specifically, the\n-    /// `Drop` will be executed if...\n+    ///\n+    /// After drop elaboration: `Drop` terminators are a complete nop for types that have no drop\n+    /// glue. For other types, `Drop` terminators behave exactly like a call to\n+    /// `core::mem::drop_in_place` with a pointer to the given place.\n+    ///\n+    /// `Drop` before drop elaboration is a *conditional* execution of the drop glue. Specifically,\n+    /// the `Drop` will be executed if...\n     ///\n     /// **Needs clarification**: End of that sentence. This in effect should document the exact\n     /// behavior of drop elaboration. The following sounds vaguely right, but I'm not quite sure:"}, {"sha": "8180e2f03a79c4c05c62a340283e74839ea79406", "filename": "src/tools/miri/tests/fail/stacked_borrows/drop_in_place_retag.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0229281d03d92eec1b167377fec1e9978af1f704/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0229281d03d92eec1b167377fec1e9978af1f704/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_retag.rs?ref=0229281d03d92eec1b167377fec1e9978af1f704", "patch": "@@ -1,5 +1,5 @@\n-//! Test that drop_in_place mutably retags the entire place,\n-//! ensuring it is writeable\n+//! Test that drop_in_place mutably retags the entire place, even for a type that does not need\n+//! dropping, ensuring among other things that it is writeable\n \n //@error-pattern: /retag .* for Unique permission .* only grants SharedReadOnly permission/\n "}]}