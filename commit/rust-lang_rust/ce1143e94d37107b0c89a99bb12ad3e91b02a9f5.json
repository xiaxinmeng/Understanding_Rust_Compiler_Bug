{"sha": "ce1143e94d37107b0c89a99bb12ad3e91b02a9f5", "node_id": "C_kwDOAAsO6NoAKGNlMTE0M2U5NGQzNzEwN2IwYzg5YTk5YmIxMmFkM2U5MWIwMmE5ZjU", "commit": {"author": {"name": "bstrie", "email": "865233+bstrie@users.noreply.github.com", "date": "2021-06-05T21:17:35Z"}, "committer": {"name": "bstrie", "email": "865233+bstrie@users.noreply.github.com", "date": "2021-11-08T18:11:58Z"}, "message": "impl Copy/Clone for arrays in std, not in compiler", "tree": {"sha": "ff208c1cb83adcab61344e605cf7b1204690e64b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff208c1cb83adcab61344e605cf7b1204690e64b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce1143e94d37107b0c89a99bb12ad3e91b02a9f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce1143e94d37107b0c89a99bb12ad3e91b02a9f5", "html_url": "https://github.com/rust-lang/rust/commit/ce1143e94d37107b0c89a99bb12ad3e91b02a9f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce1143e94d37107b0c89a99bb12ad3e91b02a9f5/comments", "author": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "495322d776fd6f679cd8cd4ca02b8fa834da654b", "url": "https://api.github.com/repos/rust-lang/rust/commits/495322d776fd6f679cd8cd4ca02b8fa834da654b", "html_url": "https://github.com/rust-lang/rust/commit/495322d776fd6f679cd8cd4ca02b8fa834da654b"}], "stats": {"total": 217, "additions": 30, "deletions": 187}, "files": [{"sha": "f59aaa664f3ad02f1d150a09ee65087462e02373", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 0, "deletions": 149, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/ce1143e94d37107b0c89a99bb12ad3e91b02a9f5/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1143e94d37107b0c89a99bb12ad3e91b02a9f5/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=ce1143e94d37107b0c89a99bb12ad3e91b02a9f5", "patch": "@@ -310,7 +310,6 @@ fn build_clone_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, self_ty: Ty<'tcx>) -\n \n     match self_ty.kind() {\n         _ if is_copy => builder.copy_shim(),\n-        ty::Array(ty, len) => builder.array_shim(dest, src, ty, len),\n         ty::Closure(_, substs) => {\n             builder.tuple_like_shim(dest, src, substs.as_closure().upvar_tys())\n         }\n@@ -459,154 +458,6 @@ impl CloneShimBuilder<'tcx> {\n         );\n     }\n \n-    fn loop_header(\n-        &mut self,\n-        beg: Place<'tcx>,\n-        end: Place<'tcx>,\n-        loop_body: BasicBlock,\n-        loop_end: BasicBlock,\n-        is_cleanup: bool,\n-    ) {\n-        let tcx = self.tcx;\n-\n-        let cond = self.make_place(Mutability::Mut, tcx.types.bool);\n-        let compute_cond = self.make_statement(StatementKind::Assign(Box::new((\n-            cond,\n-            Rvalue::BinaryOp(BinOp::Ne, Box::new((Operand::Copy(end), Operand::Copy(beg)))),\n-        ))));\n-\n-        // `if end != beg { goto loop_body; } else { goto loop_end; }`\n-        self.block(\n-            vec![compute_cond],\n-            TerminatorKind::if_(tcx, Operand::Move(cond), loop_body, loop_end),\n-            is_cleanup,\n-        );\n-    }\n-\n-    fn make_usize(&self, value: u64) -> Box<Constant<'tcx>> {\n-        Box::new(Constant {\n-            span: self.span,\n-            user_ty: None,\n-            literal: ty::Const::from_usize(self.tcx, value).into(),\n-        })\n-    }\n-\n-    fn array_shim(\n-        &mut self,\n-        dest: Place<'tcx>,\n-        src: Place<'tcx>,\n-        ty: Ty<'tcx>,\n-        len: &'tcx ty::Const<'tcx>,\n-    ) {\n-        let tcx = self.tcx;\n-        let span = self.span;\n-\n-        let beg = self.local_decls.push(LocalDecl::new(tcx.types.usize, span));\n-        let end = self.make_place(Mutability::Not, tcx.types.usize);\n-\n-        // BB #0\n-        // `let mut beg = 0;`\n-        // `let end = len;`\n-        // `goto #1;`\n-        let inits = vec![\n-            self.make_statement(StatementKind::Assign(Box::new((\n-                Place::from(beg),\n-                Rvalue::Use(Operand::Constant(self.make_usize(0))),\n-            )))),\n-            self.make_statement(StatementKind::Assign(Box::new((\n-                end,\n-                Rvalue::Use(Operand::Constant(Box::new(Constant {\n-                    span: self.span,\n-                    user_ty: None,\n-                    literal: len.into(),\n-                }))),\n-            )))),\n-        ];\n-        self.block(inits, TerminatorKind::Goto { target: BasicBlock::new(1) }, false);\n-\n-        // BB #1: loop {\n-        //     BB #2;\n-        //     BB #3;\n-        // }\n-        // BB #4;\n-        self.loop_header(Place::from(beg), end, BasicBlock::new(2), BasicBlock::new(4), false);\n-\n-        // BB #2\n-        // `dest[i] = Clone::clone(src[beg])`;\n-        // Goto #3 if ok, #5 if unwinding happens.\n-        let dest_field = self.tcx.mk_place_index(dest, beg);\n-        let src_field = self.tcx.mk_place_index(src, beg);\n-        self.make_clone_call(dest_field, src_field, ty, BasicBlock::new(3), BasicBlock::new(5));\n-\n-        // BB #3\n-        // `beg = beg + 1;`\n-        // `goto #1`;\n-        let statements = vec![self.make_statement(StatementKind::Assign(Box::new((\n-            Place::from(beg),\n-            Rvalue::BinaryOp(\n-                BinOp::Add,\n-                Box::new((Operand::Copy(Place::from(beg)), Operand::Constant(self.make_usize(1)))),\n-            ),\n-        ))))];\n-        self.block(statements, TerminatorKind::Goto { target: BasicBlock::new(1) }, false);\n-\n-        // BB #4\n-        // `return dest;`\n-        self.block(vec![], TerminatorKind::Return, false);\n-\n-        // BB #5 (cleanup)\n-        // `let end = beg;`\n-        // `let mut beg = 0;`\n-        // goto #6;\n-        let end = beg;\n-        let beg = self.local_decls.push(LocalDecl::new(tcx.types.usize, span));\n-        let init = self.make_statement(StatementKind::Assign(Box::new((\n-            Place::from(beg),\n-            Rvalue::Use(Operand::Constant(self.make_usize(0))),\n-        ))));\n-        self.block(vec![init], TerminatorKind::Goto { target: BasicBlock::new(6) }, true);\n-\n-        // BB #6 (cleanup): loop {\n-        //     BB #7;\n-        //     BB #8;\n-        // }\n-        // BB #9;\n-        self.loop_header(\n-            Place::from(beg),\n-            Place::from(end),\n-            BasicBlock::new(7),\n-            BasicBlock::new(9),\n-            true,\n-        );\n-\n-        // BB #7 (cleanup)\n-        // `drop(dest[beg])`;\n-        self.block(\n-            vec![],\n-            TerminatorKind::Drop {\n-                place: self.tcx.mk_place_index(dest, beg),\n-                target: BasicBlock::new(8),\n-                unwind: None,\n-            },\n-            true,\n-        );\n-\n-        // BB #8 (cleanup)\n-        // `beg = beg + 1;`\n-        // `goto #6;`\n-        let statement = self.make_statement(StatementKind::Assign(Box::new((\n-            Place::from(beg),\n-            Rvalue::BinaryOp(\n-                BinOp::Add,\n-                Box::new((Operand::Copy(Place::from(beg)), Operand::Constant(self.make_usize(1)))),\n-            ),\n-        ))));\n-        self.block(vec![statement], TerminatorKind::Goto { target: BasicBlock::new(6) }, true);\n-\n-        // BB #9 (resume)\n-        self.block(vec![], TerminatorKind::Resume, true);\n-    }\n-\n     fn tuple_like_shim<I>(&mut self, dest: Place<'tcx>, src: Place<'tcx>, tys: I)\n     where\n         I: Iterator<Item = Ty<'tcx>>,"}, {"sha": "fa8890fc352929e062f75d7b4f4788599a577fae", "filename": "compiler/rustc_trait_selection/src/traits/misc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce1143e94d37107b0c89a99bb12ad3e91b02a9f5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1143e94d37107b0c89a99bb12ad3e91b02a9f5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs?ref=ce1143e94d37107b0c89a99bb12ad3e91b02a9f5", "patch": "@@ -33,7 +33,8 @@ pub fn can_type_implement_copy(\n             | ty::Char\n             | ty::RawPtr(..)\n             | ty::Never\n-            | ty::Ref(_, _, hir::Mutability::Not) => return Ok(()),\n+            | ty::Ref(_, _, hir::Mutability::Not)\n+            | ty::Array(..) => return Ok(()),\n \n             ty::Adt(adt, substs) => (adt, substs),\n "}, {"sha": "2aa214694cb1472cd54827befdd2ee2b50a0b7d9", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce1143e94d37107b0c89a99bb12ad3e91b02a9f5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1143e94d37107b0c89a99bb12ad3e91b02a9f5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=ce1143e94d37107b0c89a99bb12ad3e91b02a9f5", "patch": "@@ -1859,7 +1859,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::Char\n             | ty::RawPtr(..)\n             | ty::Never\n-            | ty::Ref(_, _, hir::Mutability::Not) => {\n+            | ty::Ref(_, _, hir::Mutability::Not)\n+            | ty::Array(..) => {\n                 // Implementations provided in libcore\n                 None\n             }\n@@ -1872,11 +1873,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::Foreign(..)\n             | ty::Ref(_, _, hir::Mutability::Mut) => None,\n \n-            ty::Array(element_ty, _) => {\n-                // (*) binder moved here\n-                Where(obligation.predicate.rebind(vec![element_ty]))\n-            }\n-\n             ty::Tuple(tys) => {\n                 // (*) binder moved here\n                 Where(obligation.predicate.rebind(tys.iter().map(|k| k.expect_ty()).collect()))"}, {"sha": "13ffb2a5adc860b39d3173db80afaace4b76f713", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1143e94d37107b0c89a99bb12ad3e91b02a9f5/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1143e94d37107b0c89a99bb12ad3e91b02a9f5/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=ce1143e94d37107b0c89a99bb12ad3e91b02a9f5", "patch": "@@ -362,7 +362,7 @@ fn resolve_associated_item<'tcx>(\n                     let is_copy = self_ty.is_copy_modulo_regions(tcx.at(DUMMY_SP), param_env);\n                     match self_ty.kind() {\n                         _ if is_copy => (),\n-                        ty::Array(..) | ty::Closure(..) | ty::Tuple(..) => {}\n+                        ty::Closure(..) | ty::Tuple(..) => {}\n                         _ => return Ok(None),\n                     };\n "}, {"sha": "98cd7e8e1ae72aeefb57dbed7450dc2b0a447eed", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ce1143e94d37107b0c89a99bb12ad3e91b02a9f5/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1143e94d37107b0c89a99bb12ad3e91b02a9f5/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=ce1143e94d37107b0c89a99bb12ad3e91b02a9f5", "patch": "@@ -330,6 +330,24 @@ impl<T: Ord, const N: usize> Ord for [T; N] {\n     }\n }\n \n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"copy_clone_array_lib\", since = \"1.55.0\")]\n+impl<T: Copy, const N: usize> Copy for [T; N] {}\n+\n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"copy_clone_array_lib\", since = \"1.55.0\")]\n+impl<T: Clone, const N: usize> Clone for [T; N] {\n+    fn clone(&self) -> Self {\n+        // SAFETY: we know for certain that this iterator will yield exactly `N`\n+        // items.\n+        unsafe { collect_into_array_unchecked(&mut self.iter().cloned()) }\n+    }\n+\n+    fn clone_from(&mut self, other: &Self) {\n+        self.clone_from_slice(other);\n+    }\n+}\n+\n // The Default impls cannot be done with const generics because `[T; 0]` doesn't\n // require Default to be implemented, and having different impl blocks for\n // different numbers isn't supported yet."}, {"sha": "2caedb649a35a747accda8d5465a00f90ea82af7", "filename": "src/test/ui/builtin-clone-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce1143e94d37107b0c89a99bb12ad3e91b02a9f5/src%2Ftest%2Fui%2Fbuiltin-clone-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1143e94d37107b0c89a99bb12ad3e91b02a9f5/src%2Ftest%2Fui%2Fbuiltin-clone-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-clone-unwind.rs?ref=ce1143e94d37107b0c89a99bb12ad3e91b02a9f5", "patch": "@@ -53,7 +53,7 @@ fn main() {\n         ].clone();\n     });\n \n-    assert!(result.is_err());\n+    assert!(child.is_err());\n     assert_eq!(\n         1,\n         Rc::strong_count(&counter)"}, {"sha": "4323e87b08de78e6b261c53c7fc0d653b816fbb4", "filename": "src/test/ui/chalkify/builtin-copy-clone.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ce1143e94d37107b0c89a99bb12ad3e91b02a9f5/src%2Ftest%2Fui%2Fchalkify%2Fbuiltin-copy-clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1143e94d37107b0c89a99bb12ad3e91b02a9f5/src%2Ftest%2Fui%2Fchalkify%2Fbuiltin-copy-clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fbuiltin-copy-clone.rs?ref=ce1143e94d37107b0c89a99bb12ad3e91b02a9f5", "patch": "@@ -23,11 +23,12 @@ fn test_copy_clone<T: Copy + Clone>(arg: T) {\n fn foo() { }\n \n fn main() {\n+    // FIXME: add closures when they're considered WF\n     test_copy_clone(foo);\n     let f: fn() = foo;\n     test_copy_clone(f);\n-    // FIXME: add closures when they're considered WF\n-    test_copy_clone([1; 56]);\n+    // FIXME(#86252): reinstate array test after chalk upgrade\n+    //test_copy_clone([1; 56]);\n     test_copy_clone((1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));\n     test_copy_clone((1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, true, 'a', 1.1));\n     test_copy_clone(());"}, {"sha": "0f3d427ce11ac4fa430886ddd1333e1dada11ea3", "filename": "src/test/ui/error-codes/E0206.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce1143e94d37107b0c89a99bb12ad3e91b02a9f5/src%2Ftest%2Fui%2Ferror-codes%2FE0206.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1143e94d37107b0c89a99bb12ad3e91b02a9f5/src%2Ftest%2Fui%2Ferror-codes%2FE0206.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0206.rs?ref=ce1143e94d37107b0c89a99bb12ad3e91b02a9f5", "patch": "@@ -1,9 +1,3 @@\n-type Foo = [u8; 256];\n-\n-impl Copy for Foo { }\n-//~^ ERROR the trait `Copy` may not be implemented for this type\n-//~| ERROR only traits defined in the current crate can be implemented for arbitrary types\n-\n #[derive(Copy, Clone)]\n struct Bar;\n "}, {"sha": "57ae2647d339c7f5d880fe9b0611085994cdf636", "filename": "src/test/ui/error-codes/E0206.stderr", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ce1143e94d37107b0c89a99bb12ad3e91b02a9f5/src%2Ftest%2Fui%2Ferror-codes%2FE0206.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce1143e94d37107b0c89a99bb12ad3e91b02a9f5/src%2Ftest%2Fui%2Ferror-codes%2FE0206.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0206.stderr?ref=ce1143e94d37107b0c89a99bb12ad3e91b02a9f5", "patch": "@@ -1,27 +1,9 @@\n error[E0206]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/E0206.rs:3:15\n-   |\n-LL | impl Copy for Foo { }\n-   |               ^^^ type is not a structure or enumeration\n-\n-error[E0206]: the trait `Copy` may not be implemented for this type\n-  --> $DIR/E0206.rs:10:15\n+  --> $DIR/E0206.rs:4:15\n    |\n LL | impl Copy for &'static mut Bar { }\n    |               ^^^^^^^^^^^^^^^^ type is not a structure or enumeration\n \n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/E0206.rs:3:1\n-   |\n-LL | impl Copy for Foo { }\n-   | ^^^^^^^^^^^^^^---\n-   | |             |\n-   | |             this is not defined in the current crate because arrays are always foreign\n-   | impl doesn't use only types from inside the current crate\n-   |\n-   = note: define and implement a trait or new type instead\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0117, E0206.\n-For more information about an error, try `rustc --explain E0117`.\n+For more information about this error, try `rustc --explain E0206`."}]}