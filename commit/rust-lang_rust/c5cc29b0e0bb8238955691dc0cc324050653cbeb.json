{"sha": "c5cc29b0e0bb8238955691dc0cc324050653cbeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1Y2MyOWIwZTBiYjgyMzg5NTU2OTFkYzBjYzMyNDA1MDY1M2NiZWI=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-07-20T14:11:53Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-07-21T01:22:14Z"}, "message": "Parse rustc_deprecated as deprecated attribute", "tree": {"sha": "ea62cca9dd85acffd5dc436dc6291d688aa86fef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea62cca9dd85acffd5dc436dc6291d688aa86fef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5cc29b0e0bb8238955691dc0cc324050653cbeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5cc29b0e0bb8238955691dc0cc324050653cbeb", "html_url": "https://github.com/rust-lang/rust/commit/c5cc29b0e0bb8238955691dc0cc324050653cbeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5cc29b0e0bb8238955691dc0cc324050653cbeb/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05630b06fdf76c25c6ccf2e9ac3567592eae6c67", "url": "https://api.github.com/repos/rust-lang/rust/commits/05630b06fdf76c25c6ccf2e9ac3567592eae6c67", "html_url": "https://github.com/rust-lang/rust/commit/05630b06fdf76c25c6ccf2e9ac3567592eae6c67"}], "stats": {"total": 104, "additions": 57, "deletions": 47}, "files": [{"sha": "16d776593ac53cea44082b1086f66dda09f416ae", "filename": "src/librustc_attr/builtin.rs", "status": "modified", "additions": 53, "deletions": 43, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/c5cc29b0e0bb8238955691dc0cc324050653cbeb/src%2Flibrustc_attr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5cc29b0e0bb8238955691dc0cc324050653cbeb/src%2Flibrustc_attr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2Fbuiltin.rs?ref=c5cc29b0e0bb8238955691dc0cc324050653cbeb", "patch": "@@ -124,7 +124,6 @@ pub fn find_unwind_attr(diagnostic: Option<&Handler>, attrs: &[Attribute]) -> Op\n ///\n /// - `#[stable]`\n /// - `#[unstable]`\n-/// - `#[rustc_deprecated]`\n #[derive(RustcEncodable, RustcDecodable, Copy, Clone, Debug, PartialEq, Eq, Hash)]\n #[derive(HashStable_Generic)]\n pub struct Stability {\n@@ -213,7 +212,6 @@ where\n \n     'outer: for attr in attrs_iter {\n         if ![\n-            sym::rustc_deprecated,\n             sym::rustc_const_unstable,\n             sym::rustc_const_stable,\n             sym::unstable,\n@@ -299,35 +297,6 @@ where\n \n             let meta_name = meta.name_or_empty();\n             match meta_name {\n-                sym::rustc_deprecated => {\n-                    if rustc_depr.is_some() {\n-                        struct_span_err!(\n-                            diagnostic,\n-                            item_sp,\n-                            E0540,\n-                            \"multiple rustc_deprecated attributes\"\n-                        )\n-                        .emit();\n-                        continue 'outer;\n-                    }\n-\n-                    get_meta!(since, reason, suggestion);\n-\n-                    match (since, reason) {\n-                        (Some(since), Some(reason)) => {\n-                            rustc_depr = Some(RustcDeprecation { since, reason, suggestion })\n-                        }\n-                        (None, _) => {\n-                            handle_errors(sess, attr.span, AttrError::MissingSince);\n-                            continue;\n-                        }\n-                        _ => {\n-                            struct_span_err!(diagnostic, attr.span, E0543, \"missing 'reason'\")\n-                                .emit();\n-                            continue;\n-                        }\n-                    }\n-                }\n                 sym::rustc_const_unstable | sym::unstable => {\n                     if meta_name == sym::unstable && stab.is_some() {\n                         handle_errors(sess, attr.span, AttrError::MultipleStabilityLevels);\n@@ -714,7 +683,16 @@ pub fn eval_condition(\n #[derive(RustcEncodable, RustcDecodable, Clone, HashStable_Generic)]\n pub struct Deprecation {\n     pub since: Option<Symbol>,\n+    /// The note to issue a reason.\n     pub note: Option<Symbol>,\n+    /// A text snippet used to completely replace any use of the deprecated item in an expression.\n+    ///\n+    /// This is currently unstable.\n+    pub suggestion: Option<Symbol>,\n+\n+    /// Whether to treat the since attribute as being a Rust version identifier\n+    /// (rather than an opaque string).\n+    pub is_since_rustc_version: bool,\n }\n \n /// Finds the deprecation attribute. `None` if none exists.\n@@ -738,7 +716,7 @@ where\n     let diagnostic = &sess.span_diagnostic;\n \n     'outer: for attr in attrs_iter {\n-        if !attr.check_name(sym::deprecated) {\n+        if !(attr.check_name(sym::deprecated) || attr.check_name(sym::rustc_deprecated)) {\n             continue;\n         }\n \n@@ -751,11 +729,12 @@ where\n             Some(meta) => meta,\n             None => continue,\n         };\n-        depr = match &meta.kind {\n-            MetaItemKind::Word => Some(Deprecation { since: None, note: None }),\n-            MetaItemKind::NameValue(..) => {\n-                meta.value_str().map(|note| Deprecation { since: None, note: Some(note) })\n-            }\n+        let mut since = None;\n+        let mut note = None;\n+        let mut suggestion = None;\n+        match &meta.kind {\n+            MetaItemKind::Word => {}\n+            MetaItemKind::NameValue(..) => note = meta.value_str(),\n             MetaItemKind::List(list) => {\n                 let get = |meta: &MetaItem, item: &mut Option<Symbol>| {\n                     if item.is_some() {\n@@ -789,8 +768,6 @@ where\n                     }\n                 };\n \n-                let mut since = None;\n-                let mut note = None;\n                 for meta in list {\n                     match meta {\n                         NestedMetaItem::MetaItem(mi) => match mi.name_or_empty() {\n@@ -799,18 +776,32 @@ where\n                                     continue 'outer;\n                                 }\n                             }\n-                            sym::note => {\n+                            sym::note if attr.check_name(sym::deprecated) => {\n+                                if !get(mi, &mut note) {\n+                                    continue 'outer;\n+                                }\n+                            }\n+                            sym::reason if attr.check_name(sym::rustc_deprecated) => {\n                                 if !get(mi, &mut note) {\n                                     continue 'outer;\n                                 }\n                             }\n+                            sym::suggestion if attr.check_name(sym::rustc_deprecated) => {\n+                                if !get(mi, &mut suggestion) {\n+                                    continue 'outer;\n+                                }\n+                            }\n                             _ => {\n                                 handle_errors(\n                                     sess,\n                                     meta.span(),\n                                     AttrError::UnknownMetaItem(\n                                         pprust::path_to_string(&mi.path),\n-                                        &[\"since\", \"note\"],\n+                                        if attr.check_name(sym::deprecated) {\n+                                            &[\"since\", \"note\"]\n+                                        } else {\n+                                            &[\"since\", \"reason\", \"suggestion\"]\n+                                        },\n                                     ),\n                                 );\n                                 continue 'outer;\n@@ -829,10 +820,29 @@ where\n                         }\n                     }\n                 }\n+            }\n+        }\n+\n+        if suggestion.is_some() && attr.check_name(sym::deprecated) {\n+            unreachable!(\"only allowed on rustc_deprecated\")\n+        }\n \n-                Some(Deprecation { since, note })\n+        if attr.check_name(sym::rustc_deprecated) {\n+            if since.is_none() {\n+                handle_errors(sess, attr.span, AttrError::MissingSince);\n+                continue;\n             }\n-        };\n+\n+            if note.is_none() {\n+                struct_span_err!(diagnostic, attr.span, E0543, \"missing 'reason'\").emit();\n+                continue;\n+            }\n+        }\n+\n+        mark_used(&attr);\n+\n+        let is_since_rustc_version = attr.check_name(sym::rustc_deprecated);\n+        depr = Some(Deprecation { since, note, suggestion, is_since_rustc_version });\n     }\n \n     depr"}, {"sha": "99f4fb5c12cc391f48c64b8956c909223b6dc9bf", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5cc29b0e0bb8238955691dc0cc324050653cbeb/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5cc29b0e0bb8238955691dc0cc324050653cbeb/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=c5cc29b0e0bb8238955691dc0cc324050653cbeb", "patch": "@@ -588,7 +588,7 @@ E0770: include_str!(\"./error_codes/E0770.md\"),\n     E0521, // borrowed data escapes outside of closure\n     E0523,\n //  E0526, // shuffle indices are not constant\n-    E0540, // multiple rustc_deprecated attributes\n+//  E0540, // multiple rustc_deprecated attributes\n     E0542, // missing 'since'\n     E0543, // missing 'reason'\n     E0544, // multiple stability levels"}, {"sha": "80d7ae6dc637d78723cdc17ab762f4d7945bc324", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5cc29b0e0bb8238955691dc0cc324050653cbeb/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5cc29b0e0bb8238955691dc0cc324050653cbeb/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs?ref=c5cc29b0e0bb8238955691dc0cc324050653cbeb", "patch": "@@ -62,7 +62,7 @@ fn multiple3() { }\n #[rustc_deprecated(since = \"b\", reason = \"text\")]\n #[rustc_const_unstable(feature = \"c\", issue = \"none\")]\n #[rustc_const_unstable(feature = \"d\", issue = \"none\")] //~ ERROR multiple stability levels\n-pub const fn multiple4() { } //~ ERROR multiple rustc_deprecated attributes [E0540]\n+pub const fn multiple4() { } //~ ERROR multiple deprecated attributes\n //~^ ERROR Invalid stability or deprecation version found\n \n #[rustc_deprecated(since = \"a\", reason = \"text\")]"}, {"sha": "134c657c62015b51be3739ec0fa7ba2d048d14a1", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5cc29b0e0bb8238955691dc0cc324050653cbeb/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5cc29b0e0bb8238955691dc0cc324050653cbeb/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr?ref=c5cc29b0e0bb8238955691dc0cc324050653cbeb", "patch": "@@ -82,7 +82,7 @@ error[E0544]: multiple stability levels\n LL | #[stable(feature = \"a\", since = \"b\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0540]: multiple rustc_deprecated attributes\n+error[E0550]: multiple deprecated attributes\n   --> $DIR/stability-attribute-sanity.rs:65:1\n    |\n LL | pub const fn multiple4() { }\n@@ -108,5 +108,5 @@ LL | fn deprecated_without_unstable_or_stable() { }\n \n error: aborting due to 18 previous errors\n \n-Some errors have detailed explanations: E0539, E0541.\n+Some errors have detailed explanations: E0539, E0541, E0550.\n For more information about an error, try `rustc --explain E0539`."}]}