{"sha": "a391934ba8fb99b999f9956e855316692612f1ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzOTE5MzRiYThmYjk5Yjk5OWY5OTU2ZTg1NTMxNjY5MjYxMmYxYWI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-08-02T01:05:26Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-08-13T18:31:48Z"}, "message": "Fix various fallout from timer changes", "tree": {"sha": "4d27c47c5a5302ef14e048b18deaa41b725df6f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d27c47c5a5302ef14e048b18deaa41b725df6f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a391934ba8fb99b999f9956e855316692612f1ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a391934ba8fb99b999f9956e855316692612f1ab", "html_url": "https://github.com/rust-lang/rust/commit/a391934ba8fb99b999f9956e855316692612f1ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a391934ba8fb99b999f9956e855316692612f1ab/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80d32438d665ae74ffb1bc5ad60f7329ed17f39a", "url": "https://api.github.com/repos/rust-lang/rust/commits/80d32438d665ae74ffb1bc5ad60f7329ed17f39a", "html_url": "https://github.com/rust-lang/rust/commit/80d32438d665ae74ffb1bc5ad60f7329ed17f39a"}], "stats": {"total": 54, "additions": 35, "deletions": 19}, "files": [{"sha": "e041547082885dbfdccdcb2e27868d42571d16db", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a391934ba8fb99b999f9956e855316692612f1ab/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a391934ba8fb99b999f9956e855316692612f1ab/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=a391934ba8fb99b999f9956e855316692612f1ab", "patch": "@@ -1029,6 +1029,7 @@ mod test {\n     use std::rt::task::TaskOpts;\n     use std::rt::task::Task;\n     use std::rt::local::Local;\n+    use std::time::Duration;\n \n     use {TaskState, PoolConfig, SchedPool};\n     use basic;\n@@ -1291,7 +1292,7 @@ mod test {\n         // doesn't exit before emptying the work queue\n         pool.spawn(TaskOpts::new(), proc() {\n             spawn(proc() {\n-                timer::sleep(10);\n+                timer::sleep(Duration::milliseconds(10));\n             });\n         });\n "}, {"sha": "34ccf9e617a694446cdb22a061220c33de782745", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a391934ba8fb99b999f9956e855316692612f1ab/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a391934ba8fb99b999f9956e855316692612f1ab/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=a391934ba8fb99b999f9956e855316692612f1ab", "patch": "@@ -171,13 +171,14 @@ impl TcpStream {\n     /// # #![allow(unused_must_use)]\n     /// use std::io::timer;\n     /// use std::io::TcpStream;\n+    /// use std::time::Duration;\n     ///\n     /// let mut stream = TcpStream::connect(\"127.0.0.1\", 34254).unwrap();\n     /// let stream2 = stream.clone();\n     ///\n     /// spawn(proc() {\n     ///     // close this stream after one second\n-    ///     timer::sleep(1000);\n+    ///     timer::sleep(Duration::seconds(1));\n     ///     let mut stream = stream2;\n     ///     stream.close_read();\n     /// });"}, {"sha": "39c6c74e45eef62c59028409b2f1875bd3d0d449", "filename": "src/libstd/io/timer.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a391934ba8fb99b999f9956e855316692612f1ab/src%2Flibstd%2Fio%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a391934ba8fb99b999f9956e855316692612f1ab/src%2Flibstd%2Fio%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftimer.rs?ref=a391934ba8fb99b999f9956e855316692612f1ab", "patch": "@@ -38,15 +38,16 @@ use rt::rtio::{IoFactory, LocalIo, RtioTimer, Callback};\n /// # fn main() {}\n /// # fn foo() {\n /// use std::io::Timer;\n+/// use std::time::Duration;\n ///\n /// let mut timer = Timer::new().unwrap();\n-/// timer.sleep(10); // block the task for awhile\n+/// timer.sleep(Duration::milliseconds(10)); // block the task for awhile\n ///\n-/// let timeout = timer.oneshot(10);\n+/// let timeout = timer.oneshot(Duration::milliseconds(10));\n /// // do some work\n /// timeout.recv(); // wait for the timeout to expire\n ///\n-/// let periodic = timer.periodic(10);\n+/// let periodic = timer.periodic(Duration::milliseconds(10));\n /// loop {\n ///     periodic.recv();\n ///     // this loop is only executed once every 10ms\n@@ -61,9 +62,10 @@ use rt::rtio::{IoFactory, LocalIo, RtioTimer, Callback};\n /// # fn main() {}\n /// # fn foo() {\n /// use std::io::timer;\n+/// use std::time::Duration;\n ///\n /// // Put this task to sleep for 5 seconds\n-/// timer::sleep(5000);\n+/// timer::sleep(Duration::seconds(5));\n /// # }\n /// ```\n pub struct Timer {\n@@ -123,9 +125,10 @@ impl Timer {\n     ///\n     /// ```rust\n     /// use std::io::Timer;\n+    /// use std::time::Duration;\n     ///\n     /// let mut timer = Timer::new().unwrap();\n-    /// let ten_milliseconds = timer.oneshot(10);\n+    /// let ten_milliseconds = timer.oneshot(Duration::milliseconds(10));\n     ///\n     /// for _ in range(0u, 100) { /* do work */ }\n     ///\n@@ -135,9 +138,10 @@ impl Timer {\n     ///\n     /// ```rust\n     /// use std::io::Timer;\n+    /// use std::time::Duration;\n     ///\n     /// // Incorrect, method chaining-style:\n-    /// let mut five_ms = Timer::new().unwrap().oneshot(5);\n+    /// let mut five_ms = Timer::new().unwrap().oneshot(Duration::milliseconds(5));\n     /// // The timer object was destroyed, so this will always fail:\n     /// // five_ms.recv()\n     /// ```\n@@ -173,9 +177,10 @@ impl Timer {\n     ///\n     /// ```rust\n     /// use std::io::Timer;\n+    /// use std::time::Duration;\n     ///\n     /// let mut timer = Timer::new().unwrap();\n-    /// let ten_milliseconds = timer.periodic(10);\n+    /// let ten_milliseconds = timer.periodic(Duration::milliseconds(10));\n     ///\n     /// for _ in range(0u, 100) { /* do work */ }\n     ///\n@@ -191,9 +196,10 @@ impl Timer {\n     ///\n     /// ```rust\n     /// use std::io::Timer;\n+    /// use std::time::Duration;\n     ///\n     /// // Incorrect, method chaining-style.\n-    /// let mut five_ms = Timer::new().unwrap().periodic(5);\n+    /// let mut five_ms = Timer::new().unwrap().periodic(Duration::milliseconds(5));\n     /// // The timer object was destroyed, so this will always fail:\n     /// // five_ms.recv()\n     /// ```"}, {"sha": "e4df661b56201946dc852f7e75144b8357e12da5", "filename": "src/libsync/comm/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a391934ba8fb99b999f9956e855316692612f1ab/src%2Flibsync%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a391934ba8fb99b999f9956e855316692612f1ab/src%2Flibsync%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm%2Fmod.rs?ref=a391934ba8fb99b999f9956e855316692612f1ab", "patch": "@@ -128,10 +128,11 @@\n //!\n //! ```no_run\n //! use std::io::timer::Timer;\n+//! use std::time::Duration;\n //!\n //! let (tx, rx) = channel::<int>();\n //! let mut timer = Timer::new().unwrap();\n-//! let timeout = timer.oneshot(10000);\n+//! let timeout = timer.oneshot(Duration::seconds(10));\n //!\n //! loop {\n //!     select! {\n@@ -150,12 +151,13 @@\n //!\n //! ```no_run\n //! use std::io::timer::Timer;\n+//! use std::time::Duration;\n //!\n //! let (tx, rx) = channel::<int>();\n //! let mut timer = Timer::new().unwrap();\n //!\n //! loop {\n-//!     let timeout = timer.oneshot(5000);\n+//!     let timeout = timer.oneshot(Duration::seconds(5));\n //!\n //!     select! {\n //!         val = rx.recv() => println!(\"Received {}\", val),"}, {"sha": "9cee83a8598c752503962207f83c4dbff24e254d", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a391934ba8fb99b999f9956e855316692612f1ab/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a391934ba8fb99b999f9956e855316692612f1ab/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=a391934ba8fb99b999f9956e855316692612f1ab", "patch": "@@ -25,6 +25,7 @@ extern crate green;\n extern crate rustuv;\n \n use std::io::{Process, Command};\n+use std::time::Duration;\n \n macro_rules! succeed( ($e:expr) => (\n     match $e { Ok(..) => {}, Err(e) => fail!(\"failure: {}\", e) }\n@@ -115,7 +116,7 @@ pub fn test_destroy_actually_kills(force: bool) {\n     // Don't let this test time out, this should be quick\n     let (tx, rx1) = channel();\n     let mut t = timer::Timer::new().unwrap();\n-    let rx2 = t.oneshot(1000);\n+    let rx2 = t.oneshot(Duration::milliseconds(1000));\n     spawn(proc() {\n         select! {\n             () = rx2.recv() => unsafe { libc::exit(1) },"}, {"sha": "e21338746be2c91ff62e99b4d1b129a1cf2776bc", "filename": "src/test/run-pass/issue-12684.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a391934ba8fb99b999f9956e855316692612f1ab/src%2Ftest%2Frun-pass%2Fissue-12684.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a391934ba8fb99b999f9956e855316692612f1ab/src%2Ftest%2Frun-pass%2Fissue-12684.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12684.rs?ref=a391934ba8fb99b999f9956e855316692612f1ab", "patch": "@@ -13,6 +13,8 @@ extern crate native;\n extern crate green;\n extern crate rustuv;\n \n+use std::time::Duration;\n+\n #[start]\n fn start(argc: int, argv: *const *const u8) -> int {\n     green::start(argc, argv, rustuv::event_loop, main)\n@@ -24,6 +26,6 @@ fn main() {\n \n fn customtask() {\n     let mut timer = std::io::timer::Timer::new().unwrap();\n-    let periodic = timer.periodic(10);\n+    let periodic = timer.periodic(Duration::milliseconds(10));\n     periodic.recv();\n }"}, {"sha": "6b6e770bc99a43bb802dccda18a2acca50bb1c2f", "filename": "src/test/run-pass/issue-12699.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a391934ba8fb99b999f9956e855316692612f1ab/src%2Ftest%2Frun-pass%2Fissue-12699.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a391934ba8fb99b999f9956e855316692612f1ab/src%2Ftest%2Frun-pass%2Fissue-12699.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12699.rs?ref=a391934ba8fb99b999f9956e855316692612f1ab", "patch": "@@ -12,12 +12,13 @@\n extern crate native;\n \n use std::io::timer;\n+use std::time::Duration;\n \n #[start]\n fn start(argc: int, argv: *const *const u8) -> int {\n     native::start(argc, argv, main)\n }\n \n fn main() {\n-    timer::sleep(250);\n+    timer::sleep(Duration::milliseconds(250));\n }"}, {"sha": "c16319a16f2821e4b1dad17ae4a88cb8908b3b13", "filename": "src/test/run-pass/issue-9396.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a391934ba8fb99b999f9956e855316692612f1ab/src%2Ftest%2Frun-pass%2Fissue-9396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a391934ba8fb99b999f9956e855316692612f1ab/src%2Ftest%2Frun-pass%2Fissue-9396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9396.rs?ref=a391934ba8fb99b999f9956e855316692612f1ab", "patch": "@@ -10,12 +10,13 @@\n \n use std::comm;\n use std::io::timer::Timer;\n+use std::time::Duration;\n \n pub fn main() {\n     let (tx, rx) = channel();\n     spawn(proc (){\n         let mut timer = Timer::new().unwrap();\n-        timer.sleep(10);\n+        timer.sleep(Duration::milliseconds(10));\n         tx.send(());\n     });\n     loop {"}, {"sha": "1bdd06ca0e92bf61f3f8ace42792bf0776fde9ed", "filename": "src/test/run-pass/tcp-connect-timeouts.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a391934ba8fb99b999f9956e855316692612f1ab/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a391934ba8fb99b999f9956e855316692612f1ab/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs?ref=a391934ba8fb99b999f9956e855316692612f1ab", "patch": "@@ -38,6 +38,7 @@ macro_rules! iotest (\n             use std::io::net::tcp::*;\n             use std::io::test::*;\n             use std::io;\n+            use std::time::Duration;\n \n             fn f() $b\n \n@@ -72,7 +73,7 @@ iotest!(fn eventual_timeout() {\n \n     let mut v = Vec::new();\n     for _ in range(0u, 10000) {\n-        match TcpStream::connect_timeout(addr, 100) {\n+        match TcpStream::connect_timeout(addr, Duration::milliseconds(100)) {\n             Ok(e) => v.push(e),\n             Err(ref e) if e.kind == io::TimedOut => return,\n             Err(e) => fail!(\"other error: {}\", e),\n@@ -87,11 +88,11 @@ iotest!(fn timeout_success() {\n     let port = addr.port;\n     let _l = TcpListener::bind(host.as_slice(), port).unwrap().listen();\n \n-    assert!(TcpStream::connect_timeout(addr, 1000).is_ok());\n+    assert!(TcpStream::connect_timeout(addr, Duration::milliseconds(1000)).is_ok());\n })\n \n iotest!(fn timeout_error() {\n     let addr = next_test_ip4();\n \n-    assert!(TcpStream::connect_timeout(addr, 1000).is_err());\n+    assert!(TcpStream::connect_timeout(addr, Duration::milliseconds(1000)).is_err());\n })"}]}