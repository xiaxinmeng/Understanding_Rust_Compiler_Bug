{"sha": "0cbd06ae1c12368d5c73024caf1a47daf7ea87be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjYmQwNmFlMWMxMjM2OGQ1YzczMDI0Y2FmMWE0N2RhZjdlYTg3YmU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-03T19:59:22Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-06T10:10:37Z"}, "message": "nested_impl_trait -> error", "tree": {"sha": "42ae862cb82f7d9a23a2c3af21557b40ab0cfeac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42ae862cb82f7d9a23a2c3af21557b40ab0cfeac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cbd06ae1c12368d5c73024caf1a47daf7ea87be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cbd06ae1c12368d5c73024caf1a47daf7ea87be", "html_url": "https://github.com/rust-lang/rust/commit/0cbd06ae1c12368d5c73024caf1a47daf7ea87be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cbd06ae1c12368d5c73024caf1a47daf7ea87be/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e27c4f3122c2ccb529ee3911a9d7e956f2462cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e27c4f3122c2ccb529ee3911a9d7e956f2462cd", "html_url": "https://github.com/rust-lang/rust/commit/8e27c4f3122c2ccb529ee3911a9d7e956f2462cd"}], "stats": {"total": 357, "additions": 57, "deletions": 300}, "files": [{"sha": "4ffb8dabe3b97f28740dffb7da4efe45c910fb18", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0cbd06ae1c12368d5c73024caf1a47daf7ea87be/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cbd06ae1c12368d5c73024caf1a47daf7ea87be/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=0cbd06ae1c12368d5c73024caf1a47daf7ea87be", "patch": "@@ -446,16 +446,6 @@ declare_lint! {\n     };\n }\n \n-declare_lint! {\n-    pub NESTED_IMPL_TRAIT,\n-    Warn,\n-    \"nested occurrence of `impl Trait` type\",\n-    @future_incompatible = FutureIncompatibleInfo {\n-        reference: \"issue #59014 <https://github.com/rust-lang/rust/issues/59014>\",\n-        edition: None,\n-    };\n-}\n-\n declare_lint! {\n     pub MUTABLE_BORROW_RESERVATION_CONFLICT,\n     Warn,\n@@ -534,7 +524,6 @@ declare_lint_pass! {\n         parser::META_VARIABLE_MISUSE,\n         DEPRECATED_IN_FUTURE,\n         AMBIGUOUS_ASSOCIATED_ITEMS,\n-        NESTED_IMPL_TRAIT,\n         MUTABLE_BORROW_RESERVATION_CONFLICT,\n         INDIRECT_STRUCTURAL_MATCH,\n         SOFT_UNSTABLE,\n@@ -553,7 +542,6 @@ pub enum BuiltinLintDiagnostics {\n     ElidedLifetimesInPaths(usize, Span, bool, Span, String),\n     UnknownCrateTypes(Span, String, String),\n     UnusedImports(String, Vec<(Span, String)>),\n-    NestedImplTrait { outer_impl_trait_span: Span, inner_impl_trait_span: Span },\n     RedundantImport(Vec<(Span, bool)>, ast::Ident),\n     DeprecatedMacro(Option<Symbol>, Span),\n }\n@@ -662,12 +650,6 @@ impl BuiltinLintDiagnostics {\n                     );\n                 }\n             }\n-            BuiltinLintDiagnostics::NestedImplTrait {\n-                outer_impl_trait_span, inner_impl_trait_span\n-            } => {\n-                db.span_label(outer_impl_trait_span, \"outer `impl Trait`\");\n-                db.span_label(inner_impl_trait_span, \"nested `impl Trait` here\");\n-            }\n             BuiltinLintDiagnostics::RedundantImport(spans, ident) => {\n                 for (span, is_imported) in spans {\n                     let introduced = if is_imported { \"imported\" } else { \"defined\" };"}, {"sha": "2ca3d4b19b2694803a4e0ae9bc104b44fc5df785", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cbd06ae1c12368d5c73024caf1a47daf7ea87be/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cbd06ae1c12368d5c73024caf1a47daf7ea87be/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=0cbd06ae1c12368d5c73024caf1a47daf7ea87be", "patch": "@@ -344,6 +344,8 @@ fn register_builtins(store: &mut lint::LintStore, no_interleave_lints: bool) {\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/42238\");\n     store.register_removed(\"duplicate_macro_exports\",\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/35896\");\n+    store.register_removed(\"nested_impl_trait\",\n+        \"converted into hard error, see https://github.com/rust-lang/rust/issues/59014\");\n }\n \n fn register_internals(store: &mut lint::LintStore) {"}, {"sha": "4577b6e1e07ab87b9b8826d011bb319e992374a8", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 19, "deletions": 107, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/0cbd06ae1c12368d5c73024caf1a47daf7ea87be/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cbd06ae1c12368d5c73024caf1a47daf7ea87be/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=0cbd06ae1c12368d5c73024caf1a47daf7ea87be", "patch": "@@ -9,7 +9,6 @@\n use std::mem;\n use syntax::print::pprust;\n use rustc::lint;\n-use rustc::lint::builtin::{BuiltinLintDiagnostics, NESTED_IMPL_TRAIT};\n use rustc::session::Session;\n use rustc_data_structures::fx::FxHashMap;\n use syntax::ast::*;\n@@ -23,39 +22,14 @@ use syntax::{span_err, struct_span_err, walk_list};\n use syntax_pos::{Span, MultiSpan};\n use errors::{Applicability, FatalError};\n \n-#[derive(Copy, Clone, Debug)]\n-struct OuterImplTrait {\n-    span: Span,\n-\n-    /// rust-lang/rust#57979: a bug in original implementation caused\n-    /// us to fail sometimes to record an outer `impl Trait`.\n-    /// Therefore, in order to reliably issue a warning (rather than\n-    /// an error) in the *precise* places where we are newly injecting\n-    /// the diagnostic, we have to distinguish between the places\n-    /// where the outer `impl Trait` has always been recorded, versus\n-    /// the places where it has only recently started being recorded.\n-    only_recorded_since_pull_request_57730: bool,\n-}\n-\n-impl OuterImplTrait {\n-    /// This controls whether we should downgrade the nested impl\n-    /// trait diagnostic to a warning rather than an error, based on\n-    /// whether the outer impl trait had been improperly skipped in\n-    /// earlier implementations of the analysis on the stable\n-    /// compiler.\n-    fn should_warn_instead_of_error(&self) -> bool {\n-        self.only_recorded_since_pull_request_57730\n-    }\n-}\n-\n struct AstValidator<'a> {\n     session: &'a Session,\n     has_proc_macro_decls: bool,\n \n     /// Used to ban nested `impl Trait`, e.g., `impl Into<impl Debug>`.\n     /// Nested `impl Trait` _is_ allowed in associated type position,\n     /// e.g., `impl Iterator<Item = impl Debug>`.\n-    outer_impl_trait: Option<OuterImplTrait>,\n+    outer_impl_trait: Option<Span>,\n \n     /// Used to ban `impl Trait` in path projections like `<impl Iterator>::Item`\n     /// or `Foo::Bar<impl Trait>`\n@@ -65,26 +39,10 @@ struct AstValidator<'a> {\n     /// certain positions.\n     is_assoc_ty_bound_banned: bool,\n \n-    /// rust-lang/rust#57979: the ban of nested `impl Trait` was buggy\n-    /// until PRs #57730 and #57981 landed: it would jump directly to\n-    /// walk_ty rather than visit_ty (or skip recurring entirely for\n-    /// impl trait in projections), and thus miss some cases. We track\n-    /// whether we should downgrade to a warning for short-term via\n-    /// these booleans.\n-    warning_period_57979_didnt_record_next_impl_trait: bool,\n-    warning_period_57979_impl_trait_in_proj: bool,\n-\n     lint_buffer: &'a mut lint::LintBuffer,\n }\n \n impl<'a> AstValidator<'a> {\n-    fn with_impl_trait_in_proj_warning<T>(&mut self, v: bool, f: impl FnOnce(&mut Self) -> T) -> T {\n-        let old = mem::replace(&mut self.warning_period_57979_impl_trait_in_proj, v);\n-        let ret = f(self);\n-        self.warning_period_57979_impl_trait_in_proj = old;\n-        ret\n-    }\n-\n     fn with_banned_impl_trait(&mut self, f: impl FnOnce(&mut Self)) {\n         let old = mem::replace(&mut self.is_impl_trait_banned, true);\n         f(self);\n@@ -97,22 +55,15 @@ impl<'a> AstValidator<'a> {\n         self.is_assoc_ty_bound_banned = old;\n     }\n \n-    fn with_impl_trait(&mut self, outer: Option<OuterImplTrait>, f: impl FnOnce(&mut Self)) {\n+    fn with_impl_trait(&mut self, outer: Option<Span>, f: impl FnOnce(&mut Self)) {\n         let old = mem::replace(&mut self.outer_impl_trait, outer);\n         f(self);\n         self.outer_impl_trait = old;\n     }\n \n     fn visit_assoc_ty_constraint_from_generic_args(&mut self, constraint: &'a AssocTyConstraint) {\n         match constraint.kind {\n-            AssocTyConstraintKind::Equality { ref ty } => {\n-                // rust-lang/rust#57979: bug in old `visit_generic_args` called\n-                // `walk_ty` rather than `visit_ty`, skipping outer `impl Trait`\n-                // if it happened to occur at `ty`.\n-                if let TyKind::ImplTrait(..) = ty.kind {\n-                    self.warning_period_57979_didnt_record_next_impl_trait = true;\n-                }\n-            }\n+            AssocTyConstraintKind::Equality { .. } => {}\n             AssocTyConstraintKind::Bound { .. } => {\n                 if self.is_assoc_ty_bound_banned {\n                     self.err_handler().span_err(constraint.span,\n@@ -124,37 +75,11 @@ impl<'a> AstValidator<'a> {\n         self.visit_assoc_ty_constraint(constraint);\n     }\n \n-    fn visit_ty_from_generic_args(&mut self, ty: &'a Ty) {\n-        // rust-lang/rust#57979: bug in old `visit_generic_args` called\n-        // `walk_ty` rather than `visit_ty`, skippping outer `impl Trait`\n-        // if it happened to occur at `ty`.\n-        if let TyKind::ImplTrait(..) = ty.kind {\n-            self.warning_period_57979_didnt_record_next_impl_trait = true;\n-        }\n-        self.visit_ty(ty);\n-    }\n-\n-    fn outer_impl_trait(&mut self, span: Span) -> OuterImplTrait {\n-        let only_recorded_since_pull_request_57730 =\n-            self.warning_period_57979_didnt_record_next_impl_trait;\n-\n-        // (This flag is designed to be set to `true`, and then only\n-        // reach the construction point for the outer impl trait once,\n-        // so its safe and easiest to unconditionally reset it to\n-        // false.)\n-        self.warning_period_57979_didnt_record_next_impl_trait = false;\n-\n-        OuterImplTrait {\n-            span, only_recorded_since_pull_request_57730,\n-        }\n-    }\n-\n     // Mirrors `visit::walk_ty`, but tracks relevant state.\n     fn walk_ty(&mut self, t: &'a Ty) {\n         match t.kind {\n             TyKind::ImplTrait(..) => {\n-                let outer_impl_trait = self.outer_impl_trait(t.span);\n-                self.with_impl_trait(Some(outer_impl_trait), |this| visit::walk_ty(this, t))\n+                self.with_impl_trait(Some(t.span), |this| visit::walk_ty(this, t))\n             }\n             TyKind::Path(ref qself, ref path) => {\n                 // We allow these:\n@@ -484,40 +409,29 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             }\n             TyKind::ImplTrait(_, ref bounds) => {\n                 if self.is_impl_trait_banned {\n-                    if self.warning_period_57979_impl_trait_in_proj {\n-                        self.lint_buffer.buffer_lint(\n-                            NESTED_IMPL_TRAIT, ty.id, ty.span,\n-                            \"`impl Trait` is not allowed in path parameters\");\n-                    } else {\n-                        struct_span_err!(self.session, ty.span, E0667,\n-                            \"`impl Trait` is not allowed in path parameters\").emit();\n-                    }\n+                    struct_span_err!(\n+                        self.session, ty.span, E0667,\n+                        \"`impl Trait` is not allowed in path parameters\"\n+                    )\n+                    .emit();\n                 }\n \n-                if let Some(outer_impl_trait) = self.outer_impl_trait {\n-                    if outer_impl_trait.should_warn_instead_of_error() {\n-                        self.lint_buffer.buffer_lint_with_diagnostic(\n-                            NESTED_IMPL_TRAIT, ty.id, ty.span,\n-                            \"nested `impl Trait` is not allowed\",\n-                            BuiltinLintDiagnostics::NestedImplTrait {\n-                                outer_impl_trait_span: outer_impl_trait.span,\n-                                inner_impl_trait_span: ty.span,\n-                            });\n-                    } else {\n-                        struct_span_err!(self.session, ty.span, E0666,\n-                            \"nested `impl Trait` is not allowed\")\n-                            .span_label(outer_impl_trait.span, \"outer `impl Trait`\")\n-                            .span_label(ty.span, \"nested `impl Trait` here\")\n-                            .emit();\n-                    }\n+                if let Some(outer_impl_trait_sp) = self.outer_impl_trait {\n+                    struct_span_err!(\n+                        self.session, ty.span, E0666,\n+                        \"nested `impl Trait` is not allowed\"\n+                    )\n+                    .span_label(outer_impl_trait_sp, \"outer `impl Trait`\")\n+                    .span_label(ty.span, \"nested `impl Trait` here\")\n+                    .emit();\n                 }\n \n                 if !bounds.iter()\n                           .any(|b| if let GenericBound::Trait(..) = *b { true } else { false }) {\n                     self.err_handler().span_err(ty.span, \"at least one trait must be specified\");\n                 }\n \n-                self.with_impl_trait_in_proj_warning(true, |this| this.walk_ty(ty));\n+                self.walk_ty(ty);\n                 return;\n             }\n             _ => {}\n@@ -726,7 +640,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 if let Some(ref type_) = data.output {\n                     // `-> Foo` syntax is essentially an associated type binding,\n                     // so it is also allowed to contain nested `impl Trait`.\n-                    self.with_impl_trait(None, |this| this.visit_ty_from_generic_args(type_));\n+                    self.with_impl_trait(None, |this| this.visit_ty(type_));\n                 }\n             }\n         }\n@@ -844,8 +758,6 @@ pub fn check_crate(session: &Session, krate: &Crate, lints: &mut lint::LintBuffe\n         outer_impl_trait: None,\n         is_impl_trait_banned: false,\n         is_assoc_ty_bound_banned: false,\n-        warning_period_57979_didnt_record_next_impl_trait: false,\n-        warning_period_57979_impl_trait_in_proj: false,\n         lint_buffer: lints,\n     };\n     visit::walk_crate(&mut validator, krate);"}, {"sha": "0daec3305c0aeb399d9e5fa52fe6116b6873e13f", "filename": "src/test/ui/impl-trait/issues/issue-57979-deeply-nested-impl-trait-in-assoc-proj.rs", "status": "modified", "additions": 6, "deletions": 31, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0cbd06ae1c12368d5c73024caf1a47daf7ea87be/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-deeply-nested-impl-trait-in-assoc-proj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cbd06ae1c12368d5c73024caf1a47daf7ea87be/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-deeply-nested-impl-trait-in-assoc-proj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-deeply-nested-impl-trait-in-assoc-proj.rs?ref=0cbd06ae1c12368d5c73024caf1a47daf7ea87be", "patch": "@@ -1,42 +1,17 @@\n // rust-lang/rust#57979 : the initial support for `impl Trait` didn't\n // properly check syntax hidden behind an associated type projection,\n // but it did catch *some cases*. This is checking that we continue to\n-// properly emit errors for those, even with the new\n-// future-incompatibility warnings.\n+// properly emit errors for those.\n //\n // issue-57979-nested-impl-trait-in-assoc-proj.rs shows the main case\n // that we were previously failing to catch.\n \n struct Deeper<T>(T);\n \n-mod allowed {\n-    #![allow(nested_impl_trait)]\n-\n-    pub trait Foo<T> { }\n-    pub trait Bar { }\n-    pub trait Quux { type Assoc; }\n-    pub fn demo(_: impl Quux<Assoc=super::Deeper<impl Foo<impl Bar>>>) { }\n-    //~^ ERROR nested `impl Trait` is not allowed\n-}\n-\n-mod warned {\n-    #![warn(nested_impl_trait)]\n-\n-    pub trait Foo<T> { }\n-    pub trait Bar { }\n-    pub trait Quux { type Assoc; }\n-    pub fn demo(_: impl Quux<Assoc=super::Deeper<impl Foo<impl Bar>>>) { }\n-    //~^ ERROR nested `impl Trait` is not allowed\n-}\n-\n-mod denied {\n-    #![deny(nested_impl_trait)]\n-\n-    pub trait Foo<T> { }\n-    pub trait Bar { }\n-    pub trait Quux { type Assoc; }\n-    pub fn demo(_: impl Quux<Assoc=super::Deeper<impl Foo<impl Bar>>>) { }\n-    //~^ ERROR nested `impl Trait` is not allowed\n-}\n+pub trait Foo<T> { }\n+pub trait Bar { }\n+pub trait Quux { type Assoc; }\n+pub fn demo(_: impl Quux<Assoc=Deeper<impl Foo<impl Bar>>>) { }\n+//~^ ERROR nested `impl Trait` is not allowed\n \n fn main() { }"}, {"sha": "6bebbc01f3d6f88142fa8fdec54941e366fac1a3", "filename": "src/test/ui/impl-trait/issues/issue-57979-deeply-nested-impl-trait-in-assoc-proj.stderr", "status": "modified", "additions": 7, "deletions": 25, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0cbd06ae1c12368d5c73024caf1a47daf7ea87be/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-deeply-nested-impl-trait-in-assoc-proj.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cbd06ae1c12368d5c73024caf1a47daf7ea87be/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-deeply-nested-impl-trait-in-assoc-proj.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-deeply-nested-impl-trait-in-assoc-proj.stderr?ref=0cbd06ae1c12368d5c73024caf1a47daf7ea87be", "patch": "@@ -1,30 +1,12 @@\n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/issue-57979-deeply-nested-impl-trait-in-assoc-proj.rs:18:59\n+  --> $DIR/issue-57979-deeply-nested-impl-trait-in-assoc-proj.rs:14:48\n    |\n-LL |     pub fn demo(_: impl Quux<Assoc=super::Deeper<impl Foo<impl Bar>>>) { }\n-   |                                                  ---------^^^^^^^^-\n-   |                                                  |        |\n-   |                                                  |        nested `impl Trait` here\n-   |                                                  outer `impl Trait`\n+LL | pub fn demo(_: impl Quux<Assoc=Deeper<impl Foo<impl Bar>>>) { }\n+   |                                       ---------^^^^^^^^-\n+   |                                       |        |\n+   |                                       |        nested `impl Trait` here\n+   |                                       outer `impl Trait`\n \n-error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/issue-57979-deeply-nested-impl-trait-in-assoc-proj.rs:28:59\n-   |\n-LL |     pub fn demo(_: impl Quux<Assoc=super::Deeper<impl Foo<impl Bar>>>) { }\n-   |                                                  ---------^^^^^^^^-\n-   |                                                  |        |\n-   |                                                  |        nested `impl Trait` here\n-   |                                                  outer `impl Trait`\n-\n-error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/issue-57979-deeply-nested-impl-trait-in-assoc-proj.rs:38:59\n-   |\n-LL |     pub fn demo(_: impl Quux<Assoc=super::Deeper<impl Foo<impl Bar>>>) { }\n-   |                                                  ---------^^^^^^^^-\n-   |                                                  |        |\n-   |                                                  |        nested `impl Trait` here\n-   |                                                  outer `impl Trait`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0666`."}, {"sha": "c5ecd1caae1f946de6141ff9d3f21b69a1f5dcd1", "filename": "src/test/ui/impl-trait/issues/issue-57979-impl-trait-in-path.rs", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0cbd06ae1c12368d5c73024caf1a47daf7ea87be/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-impl-trait-in-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cbd06ae1c12368d5c73024caf1a47daf7ea87be/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-impl-trait-in-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-impl-trait-in-path.rs?ref=0cbd06ae1c12368d5c73024caf1a47daf7ea87be", "patch": "@@ -3,35 +3,10 @@\n // Here we test behavior of occurrences of `impl Trait` within a path\n // component in that context.\n \n-mod allowed {\n-    #![allow(nested_impl_trait)]\n-\n-    pub trait Bar { }\n-    pub trait Quux<T> { type Assoc; }\n-    pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n-    impl<T> Quux<T> for () { type Assoc = u32; }\n-}\n-\n-mod warned {\n-    #![warn(nested_impl_trait)]\n-\n-    pub trait Bar { }\n-    pub trait Quux<T> { type Assoc; }\n-    pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n-    //~^ WARN `impl Trait` is not allowed in path parameters\n-    //~| WARN will become a hard error in a future release!\n-    impl<T> Quux<T> for () { type Assoc = u32; }\n-}\n-\n-mod denied {\n-    #![deny(nested_impl_trait)]\n-\n-    pub trait Bar { }\n-    pub trait Quux<T> { type Assoc; }\n-    pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n-    //~^ ERROR `impl Trait` is not allowed in path parameters\n-    //~| WARN will become a hard error in a future release!\n-    impl<T> Quux<T> for () { type Assoc = u32; }\n-}\n+pub trait Bar { }\n+pub trait Quux<T> { type Assoc; }\n+pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n+//~^ ERROR `impl Trait` is not allowed in path parameters\n+impl<T> Quux<T> for () { type Assoc = u32; }\n \n fn main() { }"}, {"sha": "f64545d83b8d6b7f1324db534020da9776944c8e", "filename": "src/test/ui/impl-trait/issues/issue-57979-impl-trait-in-path.stderr", "status": "modified", "additions": 4, "deletions": 26, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0cbd06ae1c12368d5c73024caf1a47daf7ea87be/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-impl-trait-in-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cbd06ae1c12368d5c73024caf1a47daf7ea87be/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-impl-trait-in-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-impl-trait-in-path.stderr?ref=0cbd06ae1c12368d5c73024caf1a47daf7ea87be", "patch": "@@ -1,30 +1,8 @@\n-warning: `impl Trait` is not allowed in path parameters\n-  --> $DIR/issue-57979-impl-trait-in-path.rs:20:52\n+error[E0667]: `impl Trait` is not allowed in path parameters\n+  --> $DIR/issue-57979-impl-trait-in-path.rs:8:48\n    |\n-LL |     pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n-   |                                                    ^^^^^^^^\n-   |\n-note: lint level defined here\n-  --> $DIR/issue-57979-impl-trait-in-path.rs:16:13\n-   |\n-LL |     #![warn(nested_impl_trait)]\n-   |             ^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #59014 <https://github.com/rust-lang/rust/issues/59014>\n-\n-error: `impl Trait` is not allowed in path parameters\n-  --> $DIR/issue-57979-impl-trait-in-path.rs:31:52\n-   |\n-LL |     pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n-   |                                                    ^^^^^^^^\n-   |\n-note: lint level defined here\n-  --> $DIR/issue-57979-impl-trait-in-path.rs:27:13\n-   |\n-LL |     #![deny(nested_impl_trait)]\n-   |             ^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #59014 <https://github.com/rust-lang/rust/issues/59014>\n+LL | pub fn demo(_: impl Quux<(), Assoc=<() as Quux<impl Bar>>::Assoc>) { }\n+   |                                                ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "5a444d3dfddfa12a18cb650c2f788e318009fea3", "filename": "src/test/ui/impl-trait/issues/issue-57979-nested-impl-trait-in-assoc-proj.rs", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0cbd06ae1c12368d5c73024caf1a47daf7ea87be/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-nested-impl-trait-in-assoc-proj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cbd06ae1c12368d5c73024caf1a47daf7ea87be/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-nested-impl-trait-in-assoc-proj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-nested-impl-trait-in-assoc-proj.rs?ref=0cbd06ae1c12368d5c73024caf1a47daf7ea87be", "patch": "@@ -3,35 +3,10 @@\n // Here we test behavior of occurrences of `impl Trait` within an\n // `impl Trait` in that context.\n \n-mod allowed {\n-    #![allow(nested_impl_trait)]\n-\n-    pub trait Foo<T> { }\n-    pub trait Bar { }\n-    pub trait Quux { type Assoc; }\n-    pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n-}\n-\n-mod warned {\n-    #![warn(nested_impl_trait)]\n-\n-    pub trait Foo<T> { }\n-    pub trait Bar { }\n-    pub trait Quux { type Assoc; }\n-    pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n-    //~^ WARN nested `impl Trait` is not allowed\n-    //~| WARN will become a hard error in a future release!\n-}\n-\n-mod denied {\n-    #![deny(nested_impl_trait)]\n-\n-    pub trait Foo<T> { }\n-    pub trait Bar { }\n-    pub trait Quux { type Assoc; }\n-    pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n-    //~^ ERROR nested `impl Trait` is not allowed\n-    //~| WARN will become a hard error in a future release!\n-}\n+pub trait Foo<T> { }\n+pub trait Bar { }\n+pub trait Quux { type Assoc; }\n+pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n+//~^ ERROR nested `impl Trait` is not allowed\n \n fn main() { }"}, {"sha": "8d3d4b5e20618b0eb4af44bbaa5f3b8a5b0a6442", "filename": "src/test/ui/impl-trait/issues/issue-57979-nested-impl-trait-in-assoc-proj.stderr", "status": "modified", "additions": 9, "deletions": 33, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0cbd06ae1c12368d5c73024caf1a47daf7ea87be/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-nested-impl-trait-in-assoc-proj.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cbd06ae1c12368d5c73024caf1a47daf7ea87be/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-nested-impl-trait-in-assoc-proj.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-57979-nested-impl-trait-in-assoc-proj.stderr?ref=0cbd06ae1c12368d5c73024caf1a47daf7ea87be", "patch": "@@ -1,36 +1,12 @@\n-warning: nested `impl Trait` is not allowed\n-  --> $DIR/issue-57979-nested-impl-trait-in-assoc-proj.rs:21:45\n-   |\n-LL |     pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n-   |                                    ---------^^^^^^^^-\n-   |                                    |        |\n-   |                                    |        nested `impl Trait` here\n-   |                                    outer `impl Trait`\n-   |\n-note: lint level defined here\n-  --> $DIR/issue-57979-nested-impl-trait-in-assoc-proj.rs:16:13\n-   |\n-LL |     #![warn(nested_impl_trait)]\n-   |             ^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #59014 <https://github.com/rust-lang/rust/issues/59014>\n-\n-error: nested `impl Trait` is not allowed\n-  --> $DIR/issue-57979-nested-impl-trait-in-assoc-proj.rs:32:45\n-   |\n-LL |     pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n-   |                                    ---------^^^^^^^^-\n-   |                                    |        |\n-   |                                    |        nested `impl Trait` here\n-   |                                    outer `impl Trait`\n-   |\n-note: lint level defined here\n-  --> $DIR/issue-57979-nested-impl-trait-in-assoc-proj.rs:27:13\n-   |\n-LL |     #![deny(nested_impl_trait)]\n-   |             ^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #59014 <https://github.com/rust-lang/rust/issues/59014>\n+error[E0666]: nested `impl Trait` is not allowed\n+  --> $DIR/issue-57979-nested-impl-trait-in-assoc-proj.rs:9:41\n+   |\n+LL | pub fn demo(_: impl Quux<Assoc=impl Foo<impl Bar>>) { }\n+   |                                ---------^^^^^^^^-\n+   |                                |        |\n+   |                                |        nested `impl Trait` here\n+   |                                outer `impl Trait`\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0666`."}]}