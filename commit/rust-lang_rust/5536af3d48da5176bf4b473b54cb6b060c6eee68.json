{"sha": "5536af3d48da5176bf4b473b54cb6b060c6eee68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1MzZhZjNkNDhkYTUxNzZiZjRiNDczYjU0Y2I2YjA2MGM2ZWVlNjg=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-16T23:50:41Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-09-16T23:59:37Z"}, "message": "Beginnings of post-resolve simplify pass.", "tree": {"sha": "343f56056661cb5bab5f3f291238ed74b0d4dac4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/343f56056661cb5bab5f3f291238ed74b0d4dac4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5536af3d48da5176bf4b473b54cb6b060c6eee68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5536af3d48da5176bf4b473b54cb6b060c6eee68", "html_url": "https://github.com/rust-lang/rust/commit/5536af3d48da5176bf4b473b54cb6b060c6eee68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5536af3d48da5176bf4b473b54cb6b060c6eee68/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc03c82c79f4f970eb183cc40eb89f687f8853f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc03c82c79f4f970eb183cc40eb89f687f8853f5", "html_url": "https://github.com/rust-lang/rust/commit/bc03c82c79f4f970eb183cc40eb89f687f8853f5"}], "stats": {"total": 120, "additions": 118, "deletions": 2}, "files": [{"sha": "673e5e75e6a78ac4ed7e36cf11fee0acc0a4cd09", "filename": "src/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5536af3d48da5176bf4b473b54cb6b060c6eee68/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5536af3d48da5176bf4b473b54cb6b060c6eee68/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=5536af3d48da5176bf4b473b54cb6b060c6eee68", "patch": "@@ -233,8 +233,8 @@ BE_MLS := $(addprefix boot/be/, x86.ml ra.ml pe.ml elf.ml \\\n           macho.ml)\n IL_MLS := $(addprefix boot/be/, asm.ml il.ml abi.ml)\n ME_MLS := $(addprefix boot/me/, walk.ml semant.ml resolve.ml alias.ml \\\n-            type.ml dead.ml effect.ml typestate.ml loop.ml layout.ml  \\\n-            transutil.ml trans.ml dwarf.ml)\n+            simplify.ml type.ml dead.ml effect.ml typestate.ml loop.ml \\\n+            layout.ml transutil.ml trans.ml dwarf.ml)\n FE_MLS := $(addprefix boot/fe/, ast.ml token.ml lexer.ml parser.ml pexp.ml \\\n             item.ml cexp.ml fuzz.ml)\n DRIVER_TOP_MLS := $(addprefix boot/driver/, lib.ml $(VARIANT)/glue.ml main.ml)"}, {"sha": "03baf04d93a4eb4848e51bee78cd26ff045da613", "filename": "src/boot/driver/llvm/glue.ml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5536af3d48da5176bf4b473b54cb6b060c6eee68/src%2Fboot%2Fdriver%2Fllvm%2Fglue.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5536af3d48da5176bf4b473b54cb6b060c6eee68/src%2Fboot%2Fdriver%2Fllvm%2Fglue.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fdriver%2Fllvm%2Fglue.ml?ref=5536af3d48da5176bf4b473b54cb6b060c6eee68", "patch": "@@ -15,6 +15,7 @@ let alt_pipeline sess sem_cx crate =\n   Array.iter process\n     [|\n       Resolve.process_crate;\n+      Simplify.process_crate;\n       Type.process_crate;\n       Typestate.process_crate;\n       Effect.process_crate;"}, {"sha": "e80e7682b7eb081df030261eef287ef0d8585f4c", "filename": "src/boot/driver/main.ml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5536af3d48da5176bf4b473b54cb6b060c6eee68/src%2Fboot%2Fdriver%2Fmain.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5536af3d48da5176bf4b473b54cb6b060c6eee68/src%2Fboot%2Fdriver%2Fmain.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fdriver%2Fmain.ml?ref=5536af3d48da5176bf4b473b54cb6b060c6eee68", "patch": "@@ -34,6 +34,7 @@ let (sess:Session.sess) =\n     Session.sess_log_ast = false;\n     Session.sess_log_resolve = false;\n     Session.sess_log_type = false;\n+    Session.sess_log_simplify = false;\n     Session.sess_log_effect = false;\n     Session.sess_log_typestate = false;\n     Session.sess_log_loop = false;\n@@ -162,6 +163,8 @@ let argspecs =\n        \"-lresolve\"  \"log resolution\");\n     (flag (fun _ -> sess.Session.sess_log_type <- true)\n        \"-ltype\"     \"log type checking\");\n+    (flag (fun _ -> sess.Session.sess_log_simplify <- true)\n+       \"-lsimplify\" \"log simplification\");\n     (flag (fun _ -> sess.Session.sess_log_effect <- true)\n        \"-leffect\"   \"log effect checking\");\n     (flag (fun _ -> sess.Session.sess_log_typestate <- true)\n@@ -352,6 +355,7 @@ let main_pipeline _ =\n          proc sem_cx crate;\n          exit_if_failed ())\n       [| Resolve.process_crate;\n+         Simplify.process_crate;\n          Type.process_crate;\n          Typestate.process_crate;\n          Effect.process_crate;"}, {"sha": "2f81e4f522ae394257d9a46246b8473f90a223dc", "filename": "src/boot/driver/session.ml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5536af3d48da5176bf4b473b54cb6b060c6eee68/src%2Fboot%2Fdriver%2Fsession.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5536af3d48da5176bf4b473b54cb6b060c6eee68/src%2Fboot%2Fdriver%2Fsession.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fdriver%2Fsession.ml?ref=5536af3d48da5176bf4b473b54cb6b060c6eee68", "patch": "@@ -20,6 +20,7 @@ type sess =\n   mutable sess_log_ast: bool;\n   mutable sess_log_resolve: bool;\n   mutable sess_log_type: bool;\n+  mutable sess_log_simplify: bool;\n   mutable sess_log_effect: bool;\n   mutable sess_log_typestate: bool;\n   mutable sess_log_dead: bool;"}, {"sha": "ddc17e92aa401fc650de03d90ea68c0c2e03a3e2", "filename": "src/boot/me/simplify.ml", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/5536af3d48da5176bf4b473b54cb6b060c6eee68/src%2Fboot%2Fme%2Fsimplify.ml", "raw_url": "https://github.com/rust-lang/rust/raw/5536af3d48da5176bf4b473b54cb6b060c6eee68/src%2Fboot%2Fme%2Fsimplify.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsimplify.ml?ref=5536af3d48da5176bf4b473b54cb6b060c6eee68", "patch": "@@ -0,0 +1,110 @@\n+open Common;;\n+open Semant;;\n+\n+let log cx =\n+  Session.log\n+    \"simplify\"\n+    cx.Semant.ctxt_sess.Session.sess_log_simplify\n+    cx.Semant.ctxt_sess.Session.sess_log_out\n+\n+let iflog cx thunk =\n+  if cx.Semant.ctxt_sess.Session.sess_log_simplify\n+  then thunk ()\n+  else ()\n+;;\n+\n+\n+let plval_const_marking_visitor\n+    (cx:Semant.ctxt)\n+    (inner:Walk.visitor)\n+    : Walk.visitor =\n+  let visit_pexp_pre pexp =\n+    begin\n+      match pexp.node with\n+          Ast.PEXP_lval pl ->\n+            begin\n+              let id = lval_base_id_to_defn_base_id cx pexp.id in\n+              let is_const =\n+                if defn_id_is_item cx id\n+                then match (get_item cx id).Ast.decl_item with\n+                    Ast.MOD_ITEM_const _ -> true\n+                  | _ -> false\n+                else false\n+              in\n+                iflog cx (fun _ -> log cx \"plval %a refers to %s\"\n+                            Ast.sprintf_plval pl\n+                            (if is_const then \"const item\" else \"non-const\"));\n+                htab_put cx.ctxt_plval_const pexp.id is_const\n+            end\n+        | _ -> ()\n+    end;\n+    inner.Walk.visit_pexp_pre pexp\n+  in\n+\n+  let visit_pexp_post p =\n+    inner.Walk.visit_pexp_post p;\n+    iflog cx (fun _ -> log cx \"pexp %a is %s\"\n+                Ast.sprintf_pexp p\n+                (if pexp_is_const cx p\n+                 then \"constant\"\n+                 else \"non-constant\"))\n+  in\n+\n+    { inner with\n+        Walk.visit_pexp_pre = visit_pexp_pre;\n+        Walk.visit_pexp_post = visit_pexp_post;\n+    }\n+;;\n+\n+\n+let pexp_simplifying_visitor\n+    (_:Semant.ctxt)\n+    (inner:Walk.visitor)\n+    : Walk.visitor =\n+\n+  let walk_atom at =\n+    match at with\n+        Ast.ATOM_pexp _ ->\n+          begin\n+            (* FIXME: move desugaring code from frontend to here. *)\n+            ()\n+          end\n+      | _ -> ()\n+  in\n+\n+  let visit_stmt_pre s =\n+    begin\n+      match s.node with\n+          Ast.STMT_copy (_, Ast.EXPR_atom a) -> walk_atom a\n+        | _ -> ()\n+    end;\n+    inner.Walk.visit_stmt_pre s;\n+  in\n+    { inner with\n+        Walk.visit_stmt_pre = visit_stmt_pre;\n+    }\n+;;\n+\n+\n+let process_crate (cx:Semant.ctxt) (crate:Ast.crate) : unit =\n+  let path = Stack.create () in\n+\n+  let passes =\n+    [|\n+      (plval_const_marking_visitor cx Walk.empty_visitor);\n+      (pexp_simplifying_visitor cx Walk.empty_visitor)\n+    |]\n+  in\n+  let log_flag = cx.Semant.ctxt_sess.Session.sess_log_simplify in\n+    Semant.run_passes cx \"simplify\" path passes log_flag log crate\n+;;\n+\n+(*\n+ * Local Variables:\n+ * fill-column: 78;\n+ * indent-tabs-mode: nil\n+ * buffer-file-coding-system: utf-8-unix\n+ * compile-command: \"make -k -C ../.. 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+ * End:\n+ *)\n+"}]}