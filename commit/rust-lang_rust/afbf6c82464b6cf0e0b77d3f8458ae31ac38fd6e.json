{"sha": "afbf6c82464b6cf0e0b77d3f8458ae31ac38fd6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYmY2YzgyNDY0YjZjZjBlMGI3N2QzZjg0NThhZTMxYWMzOGZkNmU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-02-03T11:09:47Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-02-03T11:09:47Z"}, "message": "s/in_index/input_index/", "tree": {"sha": "ec2cd976927d9b2ac7a56f326c36bea0cd54ab54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec2cd976927d9b2ac7a56f326c36bea0cd54ab54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afbf6c82464b6cf0e0b77d3f8458ae31ac38fd6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afbf6c82464b6cf0e0b77d3f8458ae31ac38fd6e", "html_url": "https://github.com/rust-lang/rust/commit/afbf6c82464b6cf0e0b77d3f8458ae31ac38fd6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afbf6c82464b6cf0e0b77d3f8458ae31ac38fd6e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef9ae8581ff17dd88eb0260076bfe80d8d9c4aba", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef9ae8581ff17dd88eb0260076bfe80d8d9c4aba", "html_url": "https://github.com/rust-lang/rust/commit/ef9ae8581ff17dd88eb0260076bfe80d8d9c4aba"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "c79930bfae51349b4e5b25e9761a89d4954680cf", "filename": "src/librustc_incremental/persist/preds/compress/dag_id.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afbf6c82464b6cf0e0b77d3f8458ae31ac38fd6e/src%2Flibrustc_incremental%2Fpersist%2Fpreds%2Fcompress%2Fdag_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbf6c82464b6cf0e0b77d3f8458ae31ac38fd6e/src%2Flibrustc_incremental%2Fpersist%2Fpreds%2Fcompress%2Fdag_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fpreds%2Fcompress%2Fdag_id.rs?ref=afbf6c82464b6cf0e0b77d3f8458ae31ac38fd6e", "patch": "@@ -7,11 +7,11 @@ pub struct DagId {\n }\n \n impl DagId {\n-    pub fn from_in_index(n: NodeIndex) -> Self {\n+    pub fn from_input_index(n: NodeIndex) -> Self {\n         DagId { index: n.0 as u32 }\n     }\n \n-    pub fn as_in_index(&self) -> NodeIndex {\n+    pub fn as_input_index(&self) -> NodeIndex {\n         NodeIndex(self.index as usize)\n     }\n }"}, {"sha": "974a2221a4575bf6f35107c044a81c03492b97dc", "filename": "src/librustc_incremental/persist/preds/compress/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/afbf6c82464b6cf0e0b77d3f8458ae31ac38fd6e/src%2Flibrustc_incremental%2Fpersist%2Fpreds%2Fcompress%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbf6c82464b6cf0e0b77d3f8458ae31ac38fd6e/src%2Flibrustc_incremental%2Fpersist%2Fpreds%2Fcompress%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fpreds%2Fcompress%2Fmod.rs?ref=afbf6c82464b6cf0e0b77d3f8458ae31ac38fd6e", "patch": "@@ -89,7 +89,7 @@ impl<'q, N, I, O> GraphReduce<'q, N, I, O>\n         // correspond to the indices from the input graph\n         for i in 0..in_graph.len_nodes() {\n             let k = unify.new_key(());\n-            assert!(k == DagId::from_in_index(NodeIndex(i)));\n+            assert!(k == DagId::from_input_index(NodeIndex(i)));\n         }\n \n         GraphReduce { in_graph, unify, is_input, is_output }\n@@ -105,17 +105,17 @@ impl<'q, N, I, O> GraphReduce<'q, N, I, O>\n     }\n \n     fn mark_cycle(&mut self, in_node1: NodeIndex, in_node2: NodeIndex) {\n-        let dag_id1 = DagId::from_in_index(in_node1);\n-        let dag_id2 = DagId::from_in_index(in_node2);\n+        let dag_id1 = DagId::from_input_index(in_node1);\n+        let dag_id2 = DagId::from_input_index(in_node2);\n         self.unify.union(dag_id1, dag_id2);\n     }\n \n     /// Convert a dag-id into its cycle head representative. This will\n     /// be a no-op unless `in_node` participates in a cycle, in which\n     /// case a distinct node *may* be returned.\n     fn cycle_head(&mut self, in_node: NodeIndex) -> NodeIndex {\n-        let i = DagId::from_in_index(in_node);\n-        self.unify.find(i).as_in_index()\n+        let i = DagId::from_input_index(in_node);\n+        self.unify.find(i).as_input_index()\n     }\n \n     #[cfg(test)]"}]}