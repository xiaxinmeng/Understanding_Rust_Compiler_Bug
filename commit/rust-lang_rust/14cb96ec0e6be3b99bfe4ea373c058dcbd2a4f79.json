{"sha": "14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0Y2I5NmVjMGU2YmUzYjk5YmZlNGVhMzczYzA1OGRjYmQyYTRmNzk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-31T17:54:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-31T18:00:48Z"}, "message": "Allign RecordPat with RecordExpr", "tree": {"sha": "730802ad5c2d522bd77eba81984d8e368e852948", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/730802ad5c2d522bd77eba81984d8e368e852948"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79", "html_url": "https://github.com/rust-lang/rust/commit/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "572f1c08b6ba43bdd57c5cb99f79a08ecd821c1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/572f1c08b6ba43bdd57c5cb99f79a08ecd821c1c", "html_url": "https://github.com/rust-lang/rust/commit/572f1c08b6ba43bdd57c5cb99f79a08ecd821c1c"}], "stats": {"total": 163, "additions": 78, "deletions": 85}, "files": [{"sha": "6a19a400264fa2fd22fbc3df788a30f90db036f0", "filename": "crates/ra_assists/src/handlers/reorder_fields.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs?ref=14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79", "patch": "@@ -57,7 +57,7 @@ fn reorder<R: AstNode>(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n fn get_fields_kind(node: &SyntaxNode) -> Vec<SyntaxKind> {\n     match node.kind() {\n         RECORD_EXPR => vec![RECORD_EXPR_FIELD],\n-        RECORD_PAT => vec![RECORD_FIELD_PAT, BIND_PAT],\n+        RECORD_PAT => vec![RECORD_PAT_FIELD, BIND_PAT],\n         _ => vec![],\n     }\n }\n@@ -66,7 +66,7 @@ fn get_field_name(node: &SyntaxNode) -> String {\n     let res = match_ast! {\n         match node {\n             ast::RecordExprField(field) => field.field_name().map(|it| it.to_string()),\n-            ast::RecordFieldPat(field) => field.field_name().map(|it| it.to_string()),\n+            ast::RecordPatField(field) => field.field_name().map(|it| it.to_string()),\n             _ => None,\n         }\n     };"}, {"sha": "44c71857ea8eefc522e19fd42c03af4ef090e5ba", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79", "patch": "@@ -216,7 +216,7 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.resolve_record_field(field)\n     }\n \n-    pub fn resolve_record_field_pat(&self, field: &ast::RecordFieldPat) -> Option<Field> {\n+    pub fn resolve_record_field_pat(&self, field: &ast::RecordPatField) -> Option<Field> {\n         self.imp.resolve_record_field_pat(field)\n     }\n \n@@ -429,7 +429,7 @@ impl<'db> SemanticsImpl<'db> {\n         self.analyze(field.syntax()).resolve_record_field(self.db, field)\n     }\n \n-    fn resolve_record_field_pat(&self, field: &ast::RecordFieldPat) -> Option<Field> {\n+    fn resolve_record_field_pat(&self, field: &ast::RecordPatField) -> Option<Field> {\n         self.analyze(field.syntax()).resolve_record_field_pat(self.db, field)\n     }\n "}, {"sha": "37b33cc4f83af46f31caeef60885734b4f6b15d9", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79", "patch": "@@ -182,7 +182,7 @@ impl SourceAnalyzer {\n     pub(crate) fn resolve_record_field_pat(\n         &self,\n         _db: &dyn HirDatabase,\n-        field: &ast::RecordFieldPat,\n+        field: &ast::RecordPatField,\n     ) -> Option<Field> {\n         let pat_id = self.pat_id(&field.pat()?)?;\n         let struct_field = self.infer.as_ref()?.record_field_pat_resolution(pat_id)?;"}, {"sha": "25e29b7cde49c97a7f877f7ee2e72fc868969ba3", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79", "patch": "@@ -1,6 +1,8 @@\n //! Transforms `ast::Expr` into an equivalent `hir_def::expr::Expr`\n //! representation.\n \n+use std::{any::type_name, sync::Arc};\n+\n use either::Either;\n use hir_expand::{\n     hygiene::Hygiene,\n@@ -10,11 +12,12 @@ use hir_expand::{\n use ra_arena::Arena;\n use ra_syntax::{\n     ast::{\n-        self, ArgListOwner, ArrayExprKind, LiteralKind, LoopBodyOwner, NameOwner,\n+        self, ArgListOwner, ArrayExprKind, AstChildren, LiteralKind, LoopBodyOwner, NameOwner,\n         SlicePatComponents,\n     },\n     AstNode, AstPtr,\n };\n+use rustc_hash::FxHashMap;\n use test_utils::mark;\n \n use crate::{\n@@ -35,9 +38,6 @@ use crate::{\n };\n \n use super::{ExprSource, PatSource};\n-use ast::AstChildren;\n-use rustc_hash::FxHashMap;\n-use std::{any::type_name, sync::Arc};\n \n pub(crate) struct LowerCtx {\n     hygiene: Hygiene,\n@@ -786,29 +786,26 @@ impl ExprCollector<'_> {\n             ast::Pat::PlaceholderPat(_) => Pat::Wild,\n             ast::Pat::RecordPat(p) => {\n                 let path = p.path().and_then(|path| self.expander.parse_path(path));\n-                let record_field_pat_list =\n-                    p.record_field_pat_list().expect(\"every struct should have a field list\");\n-                let mut fields: Vec<_> = record_field_pat_list\n-                    .bind_pats()\n-                    .filter_map(|bind_pat| {\n-                        let ast_pat =\n-                            ast::Pat::cast(bind_pat.syntax().clone()).expect(\"bind pat is a pat\");\n+\n+                let args: Vec<_> = p\n+                    .record_pat_field_list()\n+                    .expect(\"every struct should have a field list\")\n+                    .fields()\n+                    .filter_map(|f| {\n+                        let ast_pat = f.pat()?;\n                         let pat = self.collect_pat(ast_pat);\n-                        let name = bind_pat.name()?.as_name();\n+                        let name = f.field_name()?.as_name();\n                         Some(RecordFieldPat { name, pat })\n                     })\n                     .collect();\n-                let iter = record_field_pat_list.record_field_pats().filter_map(|f| {\n-                    let ast_pat = f.pat()?;\n-                    let pat = self.collect_pat(ast_pat);\n-                    let name = f.field_name()?.as_name();\n-                    Some(RecordFieldPat { name, pat })\n-                });\n-                fields.extend(iter);\n \n-                let ellipsis = record_field_pat_list.dotdot_token().is_some();\n+                let ellipsis = p\n+                    .record_pat_field_list()\n+                    .expect(\"every struct should have a field list\")\n+                    .dotdot_token()\n+                    .is_some();\n \n-                Pat::Record { path, args: fields, ellipsis }\n+                Pat::Record { path, args, ellipsis }\n             }\n             ast::Pat::SlicePat(p) => {\n                 let SlicePatComponents { prefix, slice, suffix } = p.components();"}, {"sha": "977c0525b526f55fff4228a949a8fd993ab287af", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79", "patch": "@@ -92,7 +92,7 @@ impl AstDiagnostic for MissingFields {\n #[derive(Debug)]\n pub struct MissingPatFields {\n     pub file: HirFileId,\n-    pub field_list: AstPtr<ast::RecordFieldPatList>,\n+    pub field_list: AstPtr<ast::RecordPatFieldList>,\n     pub missed_fields: Vec<Name>,\n }\n "}, {"sha": "95bbf2d955e9985b267e2570c6bc28a7de6cca53", "filename": "crates/ra_hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79", "patch": "@@ -131,7 +131,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             if let Some(expr) = source_ptr.value.as_ref().left() {\n                 let root = source_ptr.file_syntax(db.upcast());\n                 if let ast::Pat::RecordPat(record_pat) = expr.to_node(&root) {\n-                    if let Some(field_list) = record_pat.record_field_pat_list() {\n+                    if let Some(field_list) = record_pat.record_pat_field_list() {\n                         let variant_data = variant_data(db.upcast(), variant_def);\n                         let missed_fields = missed_fields\n                             .into_iter()"}, {"sha": "29955754c117ef335ba207ab5ee94a35e6b4fa01", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79", "patch": "@@ -265,7 +265,7 @@ impl<'a> CompletionContext<'a> {\n                 return;\n             }\n             // FIXME: remove this (V) duplication and make the check more precise\n-            if name_ref.syntax().ancestors().find_map(ast::RecordFieldPatList::cast).is_some() {\n+            if name_ref.syntax().ancestors().find_map(ast::RecordPatFieldList::cast).is_some() {\n                 self.record_pat_syntax =\n                     self.sema.find_node_at_offset_with_macros(&original_file, offset);\n             }\n@@ -283,7 +283,7 @@ impl<'a> CompletionContext<'a> {\n                 {\n                     self.is_pat_binding_or_const = false;\n                 }\n-                if bind_pat.syntax().parent().and_then(ast::RecordFieldPatList::cast).is_some() {\n+                if bind_pat.syntax().parent().and_then(ast::RecordPatFieldList::cast).is_some() {\n                     self.is_pat_binding_or_const = false;\n                 }\n                 if let Some(let_stmt) = bind_pat.syntax().ancestors().find_map(ast::LetStmt::cast) {\n@@ -300,7 +300,7 @@ impl<'a> CompletionContext<'a> {\n                 return;\n             }\n             // FIXME: remove this (^) duplication and make the check more precise\n-            if name.syntax().ancestors().find_map(ast::RecordFieldPatList::cast).is_some() {\n+            if name.syntax().ancestors().find_map(ast::RecordPatFieldList::cast).is_some() {\n                 self.record_pat_syntax =\n                     self.sema.find_node_at_offset_with_macros(&original_file, offset);\n             }"}, {"sha": "7230a0ff9ee2dd6cdb5af822b75452b45d2fecb7", "filename": "crates/ra_ide/src/extend_selection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs?ref=14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79", "patch": "@@ -37,7 +37,7 @@ fn try_extend_selection(\n \n     let string_kinds = [COMMENT, STRING, RAW_STRING, BYTE_STRING, RAW_BYTE_STRING];\n     let list_kinds = [\n-        RECORD_FIELD_PAT_LIST,\n+        RECORD_PAT_FIELD_LIST,\n         MATCH_ARM_LIST,\n         RECORD_FIELD_LIST,\n         TUPLE_FIELD_LIST,"}, {"sha": "903c349964389754c37817c6a6e0c20c49ffce4f", "filename": "crates/ra_ide/src/folding_ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_ide%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_ide%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ffolding_ranges.rs?ref=14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79", "patch": "@@ -86,7 +86,7 @@ fn fold_kind(kind: SyntaxKind) -> Option<FoldKind> {\n         USE => Some(FoldKind::Imports),\n         ARG_LIST | PARAM_LIST => Some(FoldKind::ArgList),\n         RECORD_FIELD_LIST\n-        | RECORD_FIELD_PAT_LIST\n+        | RECORD_PAT_FIELD_LIST\n         | RECORD_EXPR_FIELD_LIST\n         | ITEM_LIST\n         | EXTERN_ITEM_LIST"}, {"sha": "6bf80a34c222c27099b6f06cd764d3ab0b97fcc2", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79", "patch": "@@ -131,7 +131,7 @@ pub fn classify_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option\n             ast::BindPat(it) => {\n                 let local = sema.to_def(&it)?;\n \n-                if let Some(record_field_pat) = it.syntax().parent().and_then(ast::RecordFieldPat::cast) {\n+                if let Some(record_field_pat) = it.syntax().parent().and_then(ast::RecordPatField::cast) {\n                     if record_field_pat.name_ref().is_none() {\n                         if let Some(field) = sema.resolve_record_field_pat(&record_field_pat) {\n                             let field = Definition::Field(field);\n@@ -247,7 +247,7 @@ pub fn classify_name_ref(\n         }\n     }\n \n-    if let Some(record_field_pat) = ast::RecordFieldPat::cast(parent.clone()) {\n+    if let Some(record_field_pat) = ast::RecordPatField::cast(parent.clone()) {\n         if let Some(field) = sema.resolve_record_field_pat(&record_field_pat) {\n             let field = Definition::Field(field);\n             return Some(NameRefClass::Definition(field));"}, {"sha": "d5dd9ffa2f8af6baabdd5ba44214f63169a3fef0", "filename": "crates/ra_parser/src/grammar/patterns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79", "patch": "@@ -217,15 +217,15 @@ fn record_field_pat_list(p: &mut Parser) {\n                         bind_pat(p, false);\n                     }\n                 }\n-                m.complete(p, RECORD_FIELD_PAT);\n+                m.complete(p, RECORD_PAT_FIELD);\n             }\n         }\n         if !p.at(T!['}']) {\n             p.expect(T![,]);\n         }\n     }\n     p.expect(T!['}']);\n-    m.complete(p, RECORD_FIELD_PAT_LIST);\n+    m.complete(p, RECORD_PAT_FIELD_LIST);\n }\n \n // test placeholder_pat"}, {"sha": "9db328dc3db8703f0ebe0edcea02f454ba235bac", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79", "patch": "@@ -161,8 +161,8 @@ pub enum SyntaxKind {\n     DOT_DOT_PAT,\n     PATH_PAT,\n     RECORD_PAT,\n-    RECORD_FIELD_PAT_LIST,\n-    RECORD_FIELD_PAT,\n+    RECORD_PAT_FIELD_LIST,\n+    RECORD_PAT_FIELD,\n     TUPLE_STRUCT_PAT,\n     TUPLE_PAT,\n     SLICE_PAT,"}, {"sha": "7708ae8064591fe2cb68f9bd52951127eed84fef", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79", "patch": "@@ -1192,7 +1192,7 @@ pub struct RecordPat {\n }\n impl RecordPat {\n     pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n-    pub fn record_field_pat_list(&self) -> Option<RecordFieldPatList> {\n+    pub fn record_pat_field_list(&self) -> Option<RecordPatFieldList> {\n         support::child(&self.syntax)\n     }\n }\n@@ -1234,24 +1234,21 @@ impl TupleStructPat {\n     pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct RecordFieldPatList {\n+pub struct RecordPatFieldList {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl RecordFieldPatList {\n+impl RecordPatFieldList {\n     pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n-    pub fn record_field_pats(&self) -> AstChildren<RecordFieldPat> {\n-        support::children(&self.syntax)\n-    }\n-    pub fn bind_pats(&self) -> AstChildren<BindPat> { support::children(&self.syntax) }\n+    pub fn fields(&self) -> AstChildren<RecordPatField> { support::children(&self.syntax) }\n     pub fn dotdot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![..]) }\n     pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct RecordFieldPat {\n+pub struct RecordPatField {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for RecordFieldPat {}\n-impl RecordFieldPat {\n+impl ast::AttrsOwner for RecordPatField {}\n+impl RecordPatField {\n     pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n     pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n@@ -2724,8 +2721,8 @@ impl AstNode for TupleStructPat {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for RecordFieldPatList {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_FIELD_PAT_LIST }\n+impl AstNode for RecordPatFieldList {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_PAT_FIELD_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2735,8 +2732,8 @@ impl AstNode for RecordFieldPatList {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for RecordFieldPat {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_FIELD_PAT }\n+impl AstNode for RecordPatField {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_PAT_FIELD }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -4059,12 +4056,12 @@ impl std::fmt::Display for TupleStructPat {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for RecordFieldPatList {\n+impl std::fmt::Display for RecordPatFieldList {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for RecordFieldPat {\n+impl std::fmt::Display for RecordPatField {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }"}, {"sha": "2cfdac2250e46723c337e4cafede9001a0d2411d", "filename": "crates/ra_syntax/src/ast/node_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79", "patch": "@@ -227,7 +227,7 @@ impl fmt::Display for NameOrNameRef {\n     }\n }\n \n-impl ast::RecordFieldPat {\n+impl ast::RecordPatField {\n     /// Deals with field init shorthand\n     pub fn field_name(&self) -> Option<NameOrNameRef> {\n         if let Some(name_ref) = self.name_ref() {"}, {"sha": "d848f3c88ff0de7944d35a43cfaa5b9edefd001c", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0008_path_part.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0008_path_part.rast", "raw_url": "https://github.com/rust-lang/rust/raw/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0008_path_part.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0008_path_part.rast?ref=14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79", "patch": "@@ -58,7 +58,7 @@ SOURCE_FILE@0..103\n               NAME_REF@62..65\n                 IDENT@62..65 \"Bar\"\n           WHITESPACE@65..66 \" \"\n-          RECORD_FIELD_PAT_LIST@66..72\n+          RECORD_PAT_FIELD_LIST@66..72\n             L_CURLY@66..67 \"{\"\n             WHITESPACE@67..68 \" \"\n             DOT2@68..70 \"..\""}, {"sha": "003c517acbd25c39dbe88e2eecbe77715c7200ba", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0102_record_field_pat_list.rast", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0102_record_field_pat_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0102_record_field_pat_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0102_record_field_pat_list.rast?ref=14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79", "patch": "@@ -20,7 +20,7 @@ SOURCE_FILE@0..119\n               NAME_REF@19..20\n                 IDENT@19..20 \"S\"\n           WHITESPACE@20..21 \" \"\n-          RECORD_FIELD_PAT_LIST@21..23\n+          RECORD_PAT_FIELD_LIST@21..23\n             L_CURLY@21..22 \"{\"\n             R_CURLY@22..23 \"}\"\n         WHITESPACE@23..24 \" \"\n@@ -40,16 +40,16 @@ SOURCE_FILE@0..119\n               NAME_REF@38..39\n                 IDENT@38..39 \"S\"\n           WHITESPACE@39..40 \" \"\n-          RECORD_FIELD_PAT_LIST@40..56\n+          RECORD_PAT_FIELD_LIST@40..56\n             L_CURLY@40..41 \"{\"\n             WHITESPACE@41..42 \" \"\n-            RECORD_FIELD_PAT@42..43\n+            RECORD_PAT_FIELD@42..43\n               BIND_PAT@42..43\n                 NAME@42..43\n                   IDENT@42..43 \"f\"\n             COMMA@43..44 \",\"\n             WHITESPACE@44..45 \" \"\n-            RECORD_FIELD_PAT@45..54\n+            RECORD_PAT_FIELD@45..54\n               BIND_PAT@45..54\n                 REF_KW@45..48 \"ref\"\n                 WHITESPACE@48..49 \" \"\n@@ -76,10 +76,10 @@ SOURCE_FILE@0..119\n               NAME_REF@71..72\n                 IDENT@71..72 \"S\"\n           WHITESPACE@72..73 \" \"\n-          RECORD_FIELD_PAT_LIST@73..84\n+          RECORD_PAT_FIELD_LIST@73..84\n             L_CURLY@73..74 \"{\"\n             WHITESPACE@74..75 \" \"\n-            RECORD_FIELD_PAT@75..79\n+            RECORD_PAT_FIELD@75..79\n               NAME_REF@75..76\n                 IDENT@75..76 \"h\"\n               COLON@76..77 \":\"\n@@ -107,10 +107,10 @@ SOURCE_FILE@0..119\n               NAME_REF@99..100\n                 IDENT@99..100 \"S\"\n           WHITESPACE@100..101 \" \"\n-          RECORD_FIELD_PAT_LIST@101..110\n+          RECORD_PAT_FIELD_LIST@101..110\n             L_CURLY@101..102 \"{\"\n             WHITESPACE@102..103 \" \"\n-            RECORD_FIELD_PAT@103..107\n+            RECORD_PAT_FIELD@103..107\n               NAME_REF@103..104\n                 IDENT@103..104 \"h\"\n               COLON@104..105 \":\""}, {"sha": "caae3e2dcf0151ed6bdaf1cc389fa432cd3380f8", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0143_box_pat.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0143_box_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0143_box_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0143_box_pat.rast?ref=14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79", "patch": "@@ -40,10 +40,10 @@ SOURCE_FILE@0..118\n                 NAME_REF@44..49\n                   IDENT@44..49 \"Outer\"\n             WHITESPACE@49..50 \" \"\n-            RECORD_FIELD_PAT_LIST@50..81\n+            RECORD_PAT_FIELD_LIST@50..81\n               L_CURLY@50..51 \"{\"\n               WHITESPACE@51..52 \" \"\n-              RECORD_FIELD_PAT@52..57\n+              RECORD_PAT_FIELD@52..57\n                 BOX_PAT@52..57\n                   BOX_KW@52..55 \"box\"\n                   WHITESPACE@55..56 \" \"\n@@ -52,7 +52,7 @@ SOURCE_FILE@0..118\n                       IDENT@56..57 \"i\"\n               COMMA@57..58 \",\"\n               WHITESPACE@58..59 \" \"\n-              RECORD_FIELD_PAT@59..79\n+              RECORD_PAT_FIELD@59..79\n                 NAME_REF@59..60\n                   IDENT@59..60 \"j\"\n                 COLON@60..61 \":\""}, {"sha": "925409bdfe3b11a7cbd9f07eab3335af0a056b8e", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0145_record_field_pat.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0145_record_field_pat.rast", "raw_url": "https://github.com/rust-lang/rust/raw/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0145_record_field_pat.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0145_record_field_pat.rast?ref=14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79", "patch": "@@ -20,10 +20,10 @@ SOURCE_FILE@0..63\n               NAME_REF@19..20\n                 IDENT@19..20 \"S\"\n           WHITESPACE@20..21 \" \"\n-          RECORD_FIELD_PAT_LIST@21..29\n+          RECORD_PAT_FIELD_LIST@21..29\n             L_CURLY@21..22 \"{\"\n             WHITESPACE@22..23 \" \"\n-            RECORD_FIELD_PAT@23..27\n+            RECORD_PAT_FIELD@23..27\n               NAME_REF@23..24\n                 INT_NUMBER@23..24 \"0\"\n               COLON@24..25 \":\"\n@@ -50,10 +50,10 @@ SOURCE_FILE@0..63\n               NAME_REF@44..45\n                 IDENT@44..45 \"S\"\n           WHITESPACE@45..46 \" \"\n-          RECORD_FIELD_PAT_LIST@46..54\n+          RECORD_PAT_FIELD_LIST@46..54\n             L_CURLY@46..47 \"{\"\n             WHITESPACE@47..48 \" \"\n-            RECORD_FIELD_PAT@48..52\n+            RECORD_PAT_FIELD@48..52\n               NAME_REF@48..49\n                 IDENT@48..49 \"x\"\n               COLON@49..50 \":\""}, {"sha": "7c5467289a4668194ea3c69938497481fae42b3d", "filename": "crates/ra_syntax/test_data/parser/ok/0063_trait_fn_patterns.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0063_trait_fn_patterns.rast", "raw_url": "https://github.com/rust-lang/rust/raw/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0063_trait_fn_patterns.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0063_trait_fn_patterns.rast?ref=14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79", "patch": "@@ -64,16 +64,16 @@ SOURCE_FILE@0..170\n                   NAME_REF@57..58\n                     IDENT@57..58 \"S\"\n               WHITESPACE@58..59 \" \"\n-              RECORD_FIELD_PAT_LIST@59..67\n+              RECORD_PAT_FIELD_LIST@59..67\n                 L_CURLY@59..60 \"{\"\n                 WHITESPACE@60..61 \" \"\n-                RECORD_FIELD_PAT@61..62\n+                RECORD_PAT_FIELD@61..62\n                   BIND_PAT@61..62\n                     NAME@61..62\n                       IDENT@61..62 \"a\"\n                 COMMA@62..63 \",\"\n                 WHITESPACE@63..64 \" \"\n-                RECORD_FIELD_PAT@64..65\n+                RECORD_PAT_FIELD@64..65\n                   BIND_PAT@64..65\n                     NAME@64..65\n                       IDENT@64..65 \"b\""}, {"sha": "087053f257efda731ec31b1ff35c0e631afbf5c7", "filename": "crates/ra_syntax/test_data/parser/ok/0064_impl_fn_params.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0064_impl_fn_params.rast", "raw_url": "https://github.com/rust-lang/rust/raw/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0064_impl_fn_params.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0064_impl_fn_params.rast?ref=14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79", "patch": "@@ -67,16 +67,16 @@ SOURCE_FILE@0..137\n                   NAME_REF@56..57\n                     IDENT@56..57 \"S\"\n               WHITESPACE@57..58 \" \"\n-              RECORD_FIELD_PAT_LIST@58..66\n+              RECORD_PAT_FIELD_LIST@58..66\n                 L_CURLY@58..59 \"{\"\n                 WHITESPACE@59..60 \" \"\n-                RECORD_FIELD_PAT@60..61\n+                RECORD_PAT_FIELD@60..61\n                   BIND_PAT@60..61\n                     NAME@60..61\n                       IDENT@60..61 \"a\"\n                 COMMA@61..62 \",\"\n                 WHITESPACE@62..63 \" \"\n-                RECORD_FIELD_PAT@63..64\n+                RECORD_PAT_FIELD@63..64\n                   BIND_PAT@63..64\n                     NAME@63..64\n                       IDENT@63..64 \"b\""}, {"sha": "869bdaa0d2d1407bf5cedd97a0bcdfd948d78864", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79", "patch": "@@ -131,8 +131,8 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"DOT_DOT_PAT\",\n         \"PATH_PAT\",\n         \"RECORD_PAT\",\n-        \"RECORD_FIELD_PAT_LIST\",\n-        \"RECORD_FIELD_PAT\",\n+        \"RECORD_PAT_FIELD_LIST\",\n+        \"RECORD_PAT_FIELD\",\n         \"TUPLE_STRUCT_PAT\",\n         \"TUPLE_PAT\",\n         \"SLICE_PAT\","}, {"sha": "6436688636b511b6999d9f864f197b25af39e4f0", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79", "patch": "@@ -529,16 +529,15 @@ RefPat =\n   '&' 'mut'? Pat\n \n RecordPat =\n-  Path RecordFieldPatList\n+  Path RecordPatFieldList\n \n-RecordFieldPatList =\n+RecordPatFieldList =\n   '{'\n-    record_field_pats:RecordFieldPat*\n-    BindPat*\n+    fields:(RecordPatField (',' RecordPatField)* ','?)\n     '..'?\n   '}'\n \n-RecordFieldPat =\n+RecordPatField =\n   Attr* (NameRef ':')? Pat\n \n OrPat ="}]}