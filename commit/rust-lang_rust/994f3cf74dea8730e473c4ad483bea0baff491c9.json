{"sha": "994f3cf74dea8730e473c4ad483bea0baff491c9", "node_id": "C_kwDOAAsO6NoAKDk5NGYzY2Y3NGRlYTg3MzBlNDczYzRhZDQ4M2JlYTBiYWZmNDkxYzk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-01T14:55:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-01T14:55:51Z"}, "message": "Auto merge of #12636 - xuhongxu96:fix-12148, r=Veykril\n\ncomplete raw identifier with \"r#\" prefix\n\nFix #12148\n\nEscape Names and Paths used in `insert_text`/`insert_snippet` while rendering the completion items.", "tree": {"sha": "e44d4396a5b396f1d6f0d19b3099543989229d16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e44d4396a5b396f1d6f0d19b3099543989229d16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/994f3cf74dea8730e473c4ad483bea0baff491c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/994f3cf74dea8730e473c4ad483bea0baff491c9", "html_url": "https://github.com/rust-lang/rust/commit/994f3cf74dea8730e473c4ad483bea0baff491c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/994f3cf74dea8730e473c4ad483bea0baff491c9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed44fe52e4a730e4f892cde094fbba8ae8621589", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed44fe52e4a730e4f892cde094fbba8ae8621589", "html_url": "https://github.com/rust-lang/rust/commit/ed44fe52e4a730e4f892cde094fbba8ae8621589"}, {"sha": "f536766efb288669dede4281b55e4416fd27d54a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f536766efb288669dede4281b55e4416fd27d54a", "html_url": "https://github.com/rust-lang/rust/commit/f536766efb288669dede4281b55e4416fd27d54a"}], "stats": {"total": 364, "additions": 304, "deletions": 60}, "files": [{"sha": "af59733b9f106f1ba8dd1904b7ce3e938705d325", "filename": "crates/hir-expand/src/mod_path.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/994f3cf74dea8730e473c4ad483bea0baff491c9/crates%2Fhir-expand%2Fsrc%2Fmod_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994f3cf74dea8730e473c4ad483bea0baff491c9/crates%2Fhir-expand%2Fsrc%2Fmod_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fmod_path.rs?ref=994f3cf74dea8730e473c4ad483bea0baff491c9", "patch": "@@ -20,6 +20,9 @@ pub struct ModPath {\n     segments: Vec<Name>,\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+pub struct EscapedModPath<'a>(&'a ModPath);\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub enum PathKind {\n     Plain,\n@@ -97,10 +100,12 @@ impl ModPath {\n             _ => None,\n         }\n     }\n-}\n \n-impl Display for ModPath {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    pub fn escaped(&self) -> EscapedModPath {\n+        EscapedModPath(self)\n+    }\n+\n+    fn _fmt(&self, f: &mut fmt::Formatter<'_>, escaped: bool) -> fmt::Result {\n         let mut first_segment = true;\n         let mut add_segment = |s| -> fmt::Result {\n             if !first_segment {\n@@ -127,12 +132,28 @@ impl Display for ModPath {\n                 f.write_str(\"::\")?;\n             }\n             first_segment = false;\n-            segment.fmt(f)?;\n+            if escaped {\n+                segment.escaped().fmt(f)?\n+            } else {\n+                segment.fmt(f)?\n+            };\n         }\n         Ok(())\n     }\n }\n \n+impl Display for ModPath {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        self._fmt(f, false)\n+    }\n+}\n+\n+impl<'a> Display for EscapedModPath<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        self.0._fmt(f, true)\n+    }\n+}\n+\n impl From<Name> for ModPath {\n     fn from(name: Name) -> ModPath {\n         ModPath::from_segments(PathKind::Plain, iter::once(name))"}, {"sha": "6b48258f37164d3d1478e8d1256c89802e9202a4", "filename": "crates/hir-expand/src/name.rs", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/994f3cf74dea8730e473c4ad483bea0baff491c9/crates%2Fhir-expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994f3cf74dea8730e473c4ad483bea0baff491c9/crates%2Fhir-expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fname.rs?ref=994f3cf74dea8730e473c4ad483bea0baff491c9", "patch": "@@ -2,14 +2,18 @@\n \n use std::fmt;\n \n-use syntax::{ast, SmolStr};\n+use syntax::{ast, SmolStr, SyntaxKind};\n \n /// `Name` is a wrapper around string, which is used in hir for both references\n /// and declarations. In theory, names should also carry hygiene info, but we are\n /// not there yet!\n #[derive(Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub struct Name(Repr);\n \n+/// `EscapedName` will add a prefix \"r#\" to the wrapped `Name` when it is a raw identifier\n+#[derive(Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]\n+pub struct EscapedName<'a>(&'a Name);\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]\n enum Repr {\n     Text(SmolStr),\n@@ -25,6 +29,51 @@ impl fmt::Display for Name {\n     }\n }\n \n+fn is_raw_identifier(name: &str) -> bool {\n+    let is_keyword = SyntaxKind::from_keyword(name).is_some();\n+    is_keyword && !matches!(name, \"self\" | \"crate\" | \"super\" | \"Self\")\n+}\n+\n+impl<'a> fmt::Display for EscapedName<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match &self.0 .0 {\n+            Repr::Text(text) => {\n+                if is_raw_identifier(text) {\n+                    write!(f, \"r#{}\", &text)\n+                } else {\n+                    fmt::Display::fmt(&text, f)\n+                }\n+            }\n+            Repr::TupleField(idx) => fmt::Display::fmt(&idx, f),\n+        }\n+    }\n+}\n+\n+impl<'a> EscapedName<'a> {\n+    pub fn is_escaped(&self) -> bool {\n+        match &self.0 .0 {\n+            Repr::Text(it) => is_raw_identifier(&it),\n+            Repr::TupleField(_) => false,\n+        }\n+    }\n+\n+    /// Returns the textual representation of this name as a [`SmolStr`].\n+    /// Prefer using this over [`ToString::to_string`] if possible as this conversion is cheaper in\n+    /// the general case.\n+    pub fn to_smol_str(&self) -> SmolStr {\n+        match &self.0 .0 {\n+            Repr::Text(it) => {\n+                if is_raw_identifier(&it) {\n+                    SmolStr::from_iter([\"r#\", &it])\n+                } else {\n+                    it.clone()\n+                }\n+            }\n+            Repr::TupleField(it) => SmolStr::new(&it.to_string()),\n+        }\n+    }\n+}\n+\n impl Name {\n     /// Note: this is private to make creating name from random string hard.\n     /// Hopefully, this should allow us to integrate hygiene cleaner in the\n@@ -92,6 +141,10 @@ impl Name {\n             Repr::TupleField(it) => SmolStr::new(&it.to_string()),\n         }\n     }\n+\n+    pub fn escaped(&self) -> EscapedName {\n+        EscapedName(self)\n+    }\n }\n \n pub trait AsName {"}, {"sha": "3872053f2cd357b330d69613eaa70aabbcf918a1", "filename": "crates/ide-completion/src/completions/item_list/trait_impl.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/994f3cf74dea8730e473c4ad483bea0baff491c9/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994f3cf74dea8730e473c4ad483bea0baff491c9/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list%2Ftrait_impl.rs?ref=994f3cf74dea8730e473c4ad483bea0baff491c9", "patch": "@@ -232,10 +232,11 @@ fn add_type_alias_impl(\n     replacement_range: TextRange,\n     type_alias: hir::TypeAlias,\n ) {\n-    let alias_name = type_alias.name(ctx.db).to_smol_str();\n+    let alias_name = type_alias.name(ctx.db);\n+    let (alias_name, escaped_name) = (alias_name.to_smol_str(), alias_name.escaped().to_smol_str());\n \n     let label = format!(\"type {} =\", alias_name);\n-    let replacement = format!(\"type {} = \", alias_name);\n+    let replacement = format!(\"type {} = \", escaped_name);\n \n     let mut item = CompletionItem::new(SymbolKind::TypeAlias, replacement_range, label);\n     item.lookup_by(format!(\"type {}\", alias_name))"}, {"sha": "005ab3a895ce7c799353fe103123765cb0632cc3", "filename": "crates/ide-completion/src/render.rs", "status": "modified", "additions": 155, "deletions": 9, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/994f3cf74dea8730e473c4ad483bea0baff491c9/crates%2Fide-completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994f3cf74dea8730e473c4ad483bea0baff491c9/crates%2Fide-completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender.rs?ref=994f3cf74dea8730e473c4ad483bea0baff491c9", "patch": "@@ -116,7 +116,8 @@ pub(crate) fn render_field(\n     ty: &hir::Type,\n ) -> CompletionItem {\n     let is_deprecated = ctx.is_deprecated(field);\n-    let name = field.name(ctx.db()).to_smol_str();\n+    let name = field.name(ctx.db());\n+    let (name, escaped_name) = (name.to_smol_str(), name.escaped().to_smol_str());\n     let mut item = CompletionItem::new(\n         SymbolKind::Field,\n         ctx.source_range(),\n@@ -131,10 +132,7 @@ pub(crate) fn render_field(\n         .set_documentation(field.docs(ctx.db()))\n         .set_deprecated(is_deprecated)\n         .lookup_by(name.clone());\n-    let is_keyword = SyntaxKind::from_keyword(name.as_str()).is_some();\n-    if is_keyword && !matches!(name.as_str(), \"self\" | \"crate\" | \"super\" | \"Self\") {\n-        item.insert_text(format!(\"r#{}\", name));\n-    }\n+    item.insert_text(escaped_name);\n     if let Some(receiver) = &dot_access.receiver {\n         if let Some(ref_match) = compute_ref_match(ctx.completion, ty) {\n             item.ref_match(ref_match, receiver.syntax().text_range().start());\n@@ -235,7 +233,7 @@ fn render_resolution_pat(\n         _ => (),\n     }\n \n-    render_resolution_simple_(ctx, local_name, import_to_add, resolution)\n+    render_resolution_simple_(ctx, &local_name, import_to_add, resolution)\n }\n \n fn render_resolution_path(\n@@ -274,7 +272,10 @@ fn render_resolution_path(\n     let config = completion.config;\n \n     let name = local_name.to_smol_str();\n-    let mut item = render_resolution_simple_(ctx, local_name, import_to_add, resolution);\n+    let mut item = render_resolution_simple_(ctx, &local_name, import_to_add, resolution);\n+    if local_name.escaped().is_escaped() {\n+        item.insert_text(local_name.escaped().to_smol_str());\n+    }\n     // Add `<>` for generic types\n     let type_path_no_ty_args = matches!(\n         path_ctx,\n@@ -295,7 +296,7 @@ fn render_resolution_path(\n                 item.lookup_by(name.clone())\n                     .label(SmolStr::from_iter([&name, \"<\u2026>\"]))\n                     .trigger_call_info()\n-                    .insert_snippet(cap, format!(\"{}<$0>\", name));\n+                    .insert_snippet(cap, format!(\"{}<$0>\", local_name.escaped()));\n             }\n         }\n     }\n@@ -321,7 +322,7 @@ fn render_resolution_path(\n \n fn render_resolution_simple_(\n     ctx: RenderContext<'_>,\n-    local_name: hir::Name,\n+    local_name: &hir::Name,\n     import_to_add: Option<LocatedImport>,\n     resolution: ScopeDef,\n ) -> Builder {\n@@ -1725,4 +1726,149 @@ fn f() {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn completes_struct_with_raw_identifier() {\n+        check_edit(\n+            \"type\",\n+            r#\"\n+mod m { pub struct r#type {} }\n+fn main() {\n+    let r#type = m::t$0;\n+}\n+\"#,\n+            r#\"\n+mod m { pub struct r#type {} }\n+fn main() {\n+    let r#type = m::r#type;\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn completes_fn_with_raw_identifier() {\n+        check_edit(\n+            \"type\",\n+            r#\"\n+mod m { pub fn r#type {} }\n+fn main() {\n+    m::t$0\n+}\n+\"#,\n+            r#\"\n+mod m { pub fn r#type {} }\n+fn main() {\n+    m::r#type()$0\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn completes_macro_with_raw_identifier() {\n+        check_edit(\n+            \"let!\",\n+            r#\"\n+macro_rules! r#let { () => {} }\n+fn main() {\n+    $0\n+}\n+\"#,\n+            r#\"\n+macro_rules! r#let { () => {} }\n+fn main() {\n+    r#let!($0)\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn completes_variant_with_raw_identifier() {\n+        check_edit(\n+            \"type\",\n+            r#\"\n+enum A { r#type }\n+fn main() {\n+    let a = A::t$0\n+}\n+\"#,\n+            r#\"\n+enum A { r#type }\n+fn main() {\n+    let a = A::r#type$0\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn completes_field_with_raw_identifier() {\n+        check_edit(\n+            \"fn\",\n+            r#\"\n+mod r#type {\n+    pub struct r#struct {\n+        pub r#fn: u32\n+    }\n+}\n+\n+fn main() {\n+    let a = r#type::r#struct {};\n+    a.$0\n+}\n+\"#,\n+            r#\"\n+mod r#type {\n+    pub struct r#struct {\n+        pub r#fn: u32\n+    }\n+}\n+\n+fn main() {\n+    let a = r#type::r#struct {};\n+    a.r#fn\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn completes_const_with_raw_identifier() {\n+        check_edit(\n+            \"type\",\n+            r#\"\n+struct r#struct {}\n+impl r#struct { pub const r#type: u8 = 1; }\n+fn main() {\n+    r#struct::t$0\n+}\n+\"#,\n+            r#\"\n+struct r#struct {}\n+impl r#struct { pub const r#type: u8 = 1; }\n+fn main() {\n+    r#struct::r#type\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn completes_type_alias_with_raw_identifier() {\n+        check_edit(\n+            \"type type\",\n+            r#\"\n+struct r#struct {}\n+trait r#trait { type r#type; }\n+impl r#trait for r#struct { type t$0 }\n+\"#,\n+            r#\"\n+struct r#struct {}\n+trait r#trait { type r#type; }\n+impl r#trait for r#struct { type r#type = $0; }\n+\"#,\n+        )\n+    }\n }"}, {"sha": "a810eef18dd1ff24313bbe9c4a83a1916ab4a3f5", "filename": "crates/ide-completion/src/render/const_.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/994f3cf74dea8730e473c4ad483bea0baff491c9/crates%2Fide-completion%2Fsrc%2Frender%2Fconst_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994f3cf74dea8730e473c4ad483bea0baff491c9/crates%2Fide-completion%2Fsrc%2Frender%2Fconst_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fconst_.rs?ref=994f3cf74dea8730e473c4ad483bea0baff491c9", "patch": "@@ -12,7 +12,8 @@ pub(crate) fn render_const(ctx: RenderContext<'_>, const_: hir::Const) -> Option\n \n fn render(ctx: RenderContext<'_>, const_: hir::Const) -> Option<CompletionItem> {\n     let db = ctx.db();\n-    let name = const_.name(db)?.to_smol_str();\n+    let name = const_.name(db)?;\n+    let (name, escaped_name) = (name.to_smol_str(), name.escaped().to_smol_str());\n     let detail = const_.display(db).to_string();\n \n     let mut item = CompletionItem::new(SymbolKind::Const, ctx.source_range(), name.clone());\n@@ -24,9 +25,9 @@ fn render(ctx: RenderContext<'_>, const_: hir::Const) -> Option<CompletionItem>\n     if let Some(actm) = const_.as_assoc_item(db) {\n         if let Some(trt) = actm.containing_trait_or_trait_impl(db) {\n             item.trait_name(trt.name(db).to_smol_str());\n-            item.insert_text(name);\n         }\n     }\n+    item.insert_text(escaped_name);\n \n     Some(item.build())\n }"}, {"sha": "4a8a5d5c776b5e1dddbfd1395f921b5d8d0c9ac8", "filename": "crates/ide-completion/src/render/function.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/994f3cf74dea8730e473c4ad483bea0baff491c9/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994f3cf74dea8730e473c4ad483bea0baff491c9/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Ffunction.rs?ref=994f3cf74dea8730e473c4ad483bea0baff491c9", "patch": "@@ -50,9 +50,12 @@ fn render(\n \n     let name = local_name.unwrap_or_else(|| func.name(db));\n \n-    let call = match &func_kind {\n-        FuncKind::Method(_, Some(receiver)) => format!(\"{}.{}\", receiver, &name).into(),\n-        _ => name.to_smol_str(),\n+    let (call, escaped_call) = match &func_kind {\n+        FuncKind::Method(_, Some(receiver)) => (\n+            format!(\"{}.{}\", receiver, &name).into(),\n+            format!(\"{}.{}\", receiver.escaped(), name.escaped()).into(),\n+        ),\n+        _ => (name.to_smol_str(), name.escaped().to_smol_str()),\n     };\n     let mut item = CompletionItem::new(\n         if func.self_param(db).is_some() {\n@@ -115,7 +118,15 @@ fn render(\n                 if let Some((self_param, params)) =\n                     params(ctx.completion, func, &func_kind, has_dot_receiver)\n                 {\n-                    add_call_parens(&mut item, completion, cap, call, self_param, params);\n+                    add_call_parens(\n+                        &mut item,\n+                        completion,\n+                        cap,\n+                        call,\n+                        escaped_call,\n+                        self_param,\n+                        params,\n+                    );\n                 }\n             }\n         }\n@@ -142,13 +153,14 @@ pub(super) fn add_call_parens<'b>(\n     ctx: &CompletionContext,\n     cap: SnippetCap,\n     name: SmolStr,\n+    escaped_name: SmolStr,\n     self_param: Option<hir::SelfParam>,\n     params: Vec<hir::Param>,\n ) -> &'b mut Builder {\n     cov_mark::hit!(inserts_parens_for_function_calls);\n \n     let (snippet, label_suffix) = if self_param.is_none() && params.is_empty() {\n-        (format!(\"{}()$0\", name), \"()\")\n+        (format!(\"{}()$0\", escaped_name), \"()\")\n     } else {\n         builder.trigger_call_info();\n         let snippet = if let Some(CallableSnippets::FillArguments) = ctx.config.callable {\n@@ -179,19 +191,19 @@ pub(super) fn add_call_parens<'b>(\n                 Some(self_param) => {\n                     format!(\n                         \"{}(${{1:{}}}{}{})$0\",\n-                        name,\n+                        escaped_name,\n                         self_param.display(ctx.db),\n                         if params.is_empty() { \"\" } else { \", \" },\n                         function_params_snippet\n                     )\n                 }\n                 None => {\n-                    format!(\"{}({})$0\", name, function_params_snippet)\n+                    format!(\"{}({})$0\", escaped_name, function_params_snippet)\n                 }\n             }\n         } else {\n             cov_mark::hit!(suppress_arg_snippets);\n-            format!(\"{}($0)\", name)\n+            format!(\"{}($0)\", escaped_name)\n         };\n \n         (snippet, \"(\u2026)\")"}, {"sha": "df80fb2fa678cc07cdd73ff97d9d8123101377e0", "filename": "crates/ide-completion/src/render/literal.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/994f3cf74dea8730e473c4ad483bea0baff491c9/crates%2Fide-completion%2Fsrc%2Frender%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994f3cf74dea8730e473c4ad483bea0baff491c9/crates%2Fide-completion%2Fsrc%2Frender%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fliteral.rs?ref=994f3cf74dea8730e473c4ad483bea0baff491c9", "patch": "@@ -72,17 +72,21 @@ fn render(\n         }\n         None => (name.clone().into(), name.into(), false),\n     };\n-    let qualified_name = qualified_name.to_string();\n+    let (qualified_name, escaped_qualified_name) =\n+        (qualified_name.to_string(), qualified_name.escaped().to_string());\n     let snippet_cap = ctx.snippet_cap();\n \n     let mut rendered = match kind {\n         StructKind::Tuple if should_add_parens => {\n-            render_tuple_lit(db, snippet_cap, &fields, &qualified_name)\n+            render_tuple_lit(db, snippet_cap, &fields, &escaped_qualified_name)\n         }\n         StructKind::Record if should_add_parens => {\n-            render_record_lit(db, snippet_cap, &fields, &qualified_name)\n+            render_record_lit(db, snippet_cap, &fields, &escaped_qualified_name)\n         }\n-        _ => RenderedLiteral { literal: qualified_name.clone(), detail: qualified_name.clone() },\n+        _ => RenderedLiteral {\n+            literal: escaped_qualified_name.clone(),\n+            detail: escaped_qualified_name.clone(),\n+        },\n     };\n \n     if snippet_cap.is_some() {"}, {"sha": "ebf8a98eb014aaa5e55da0508e2d1730236323bc", "filename": "crates/ide-completion/src/render/macro_.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/994f3cf74dea8730e473c4ad483bea0baff491c9/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994f3cf74dea8730e473c4ad483bea0baff491c9/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs?ref=994f3cf74dea8730e473c4ad483bea0baff491c9", "patch": "@@ -46,7 +46,7 @@ fn render(\n         ctx.source_range()\n     };\n \n-    let name = name.to_smol_str();\n+    let (name, escaped_name) = (name.to_smol_str(), name.escaped().to_smol_str());\n     let docs = ctx.docs(macro_);\n     let docs_str = docs.as_ref().map(Documentation::as_str).unwrap_or_default();\n     let is_fn_like = macro_.is_fn_like(completion.db);\n@@ -64,20 +64,18 @@ fn render(\n         .set_documentation(docs)\n         .set_relevance(ctx.completion_relevance());\n \n-    let name = &*name;\n     match ctx.snippet_cap() {\n         Some(cap) if needs_bang && !has_call_parens => {\n-            let snippet = format!(\"{}!{}$0{}\", name, bra, ket);\n-            let lookup = banged_name(name);\n+            let snippet = format!(\"{}!{}$0{}\", escaped_name, bra, ket);\n+            let lookup = banged_name(&name);\n             item.insert_snippet(cap, snippet).lookup_by(lookup);\n         }\n         _ if needs_bang => {\n-            let banged_name = banged_name(name);\n-            item.insert_text(banged_name.clone()).lookup_by(banged_name);\n+            item.insert_text(banged_name(&escaped_name)).lookup_by(banged_name(&name));\n         }\n         _ => {\n             cov_mark::hit!(dont_insert_macro_call_parens_unncessary);\n-            item.insert_text(name);\n+            item.insert_text(escaped_name);\n         }\n     };\n     if let Some(import_to_add) = ctx.import_to_add {"}, {"sha": "f9c4037dee4fb3f1cba3526bc9f80e05c5cbd444", "filename": "crates/ide-completion/src/render/pattern.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/994f3cf74dea8730e473c4ad483bea0baff491c9/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994f3cf74dea8730e473c4ad483bea0baff491c9/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs?ref=994f3cf74dea8730e473c4ad483bea0baff491c9", "patch": "@@ -27,11 +27,12 @@ pub(crate) fn render_struct_pat(\n         return None;\n     }\n \n-    let name = local_name.unwrap_or_else(|| strukt.name(ctx.db())).to_smol_str();\n+    let name = local_name.unwrap_or_else(|| strukt.name(ctx.db()));\n+    let (name, escaped_name) = (name.to_smol_str(), name.escaped().to_smol_str());\n     let pat = render_pat(\n         &ctx,\n         pattern_ctx,\n-        &name,\n+        &escaped_name,\n         strukt.kind(ctx.db()),\n         &visible_fields,\n         fields_omitted,\n@@ -52,14 +53,17 @@ pub(crate) fn render_variant_pat(\n     let fields = variant.fields(ctx.db());\n     let (visible_fields, fields_omitted) = visible_fields(ctx.completion, &fields, variant)?;\n \n-    let name = match path {\n-        Some(path) => path.to_string().into(),\n-        None => local_name.unwrap_or_else(|| variant.name(ctx.db())).to_smol_str(),\n+    let (name, escaped_name) = match path {\n+        Some(path) => (path.to_string().into(), path.escaped().to_string().into()),\n+        None => {\n+            let name = local_name.unwrap_or_else(|| variant.name(ctx.db()));\n+            (name.to_smol_str(), name.escaped().to_smol_str())\n+        }\n     };\n     let pat = render_pat(\n         &ctx,\n         pattern_ctx,\n-        &name,\n+        &escaped_name,\n         variant.kind(ctx.db()),\n         &visible_fields,\n         fields_omitted,"}, {"sha": "f1b23c76e7b436621ae005c0ef2bed79bfb13464", "filename": "crates/ide-completion/src/render/type_alias.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/994f3cf74dea8730e473c4ad483bea0baff491c9/crates%2Fide-completion%2Fsrc%2Frender%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994f3cf74dea8730e473c4ad483bea0baff491c9/crates%2Fide-completion%2Fsrc%2Frender%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Ftype_alias.rs?ref=994f3cf74dea8730e473c4ad483bea0baff491c9", "patch": "@@ -29,10 +29,14 @@ fn render(\n ) -> Option<CompletionItem> {\n     let db = ctx.db();\n \n-    let name = if with_eq {\n-        SmolStr::from_iter([&*type_alias.name(db).to_smol_str(), \" = \"])\n+    let name = type_alias.name(db);\n+    let (name, escaped_name) = if with_eq {\n+        (\n+            SmolStr::from_iter([&name.to_smol_str(), \" = \"]),\n+            SmolStr::from_iter([&name.escaped().to_smol_str(), \" = \"]),\n+        )\n     } else {\n-        type_alias.name(db).to_smol_str()\n+        (name.to_smol_str(), name.escaped().to_smol_str())\n     };\n     let detail = type_alias.display(db).to_string();\n \n@@ -45,9 +49,9 @@ fn render(\n     if let Some(actm) = type_alias.as_assoc_item(db) {\n         if let Some(trt) = actm.containing_trait_or_trait_impl(db) {\n             item.trait_name(trt.name(db).to_smol_str());\n-            item.insert_text(name);\n         }\n     }\n+    item.insert_text(escaped_name);\n \n     Some(item.build())\n }"}, {"sha": "fc35381256cd300b3dc8ef334bcdc1e42dff7c14", "filename": "crates/ide-completion/src/render/union_literal.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/994f3cf74dea8730e473c4ad483bea0baff491c9/crates%2Fide-completion%2Fsrc%2Frender%2Funion_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994f3cf74dea8730e473c4ad483bea0baff491c9/crates%2Fide-completion%2Fsrc%2Frender%2Funion_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Funion_literal.rs?ref=994f3cf74dea8730e473c4ad483bea0baff491c9", "patch": "@@ -18,17 +18,17 @@ pub(crate) fn render_union_literal(\n     path: Option<hir::ModPath>,\n     local_name: Option<Name>,\n ) -> Option<CompletionItem> {\n-    let name = local_name.unwrap_or_else(|| un.name(ctx.db())).to_smol_str();\n+    let name = local_name.unwrap_or_else(|| un.name(ctx.db()));\n \n-    let qualified_name = match path {\n-        Some(p) => p.to_string(),\n-        None => name.to_string(),\n+    let (qualified_name, escaped_qualified_name) = match path {\n+        Some(p) => (p.to_string(), p.escaped().to_string()),\n+        None => (name.to_string(), name.escaped().to_string()),\n     };\n \n     let mut item = CompletionItem::new(\n         CompletionItemKind::SymbolKind(SymbolKind::Union),\n         ctx.source_range(),\n-        format_literal_label(&name, StructKind::Record),\n+        format_literal_label(&name.to_smol_str(), StructKind::Record),\n     );\n \n     let fields = un.fields(ctx.db());\n@@ -41,16 +41,16 @@ pub(crate) fn render_union_literal(\n     let literal = if ctx.snippet_cap().is_some() {\n         format!(\n             \"{} {{ ${{1|{}|}}: ${{2:()}} }}$0\",\n-            qualified_name,\n-            fields.iter().map(|field| field.name(ctx.db())).format(\",\")\n+            escaped_qualified_name,\n+            fields.iter().map(|field| field.name(ctx.db()).escaped().to_smol_str()).format(\",\")\n         )\n     } else {\n         format!(\n             \"{} {{ {} }}\",\n-            qualified_name,\n-            fields\n-                .iter()\n-                .format_with(\", \", |field, f| { f(&format_args!(\"{}: ()\", field.name(ctx.db()))) })\n+            escaped_qualified_name,\n+            fields.iter().format_with(\", \", |field, f| {\n+                f(&format_args!(\"{}: ()\", field.name(ctx.db()).escaped()))\n+            })\n         )\n     };\n "}, {"sha": "440b9d14ca7e8879fc843c0cd7ee316ee71e0213", "filename": "crates/ide-completion/src/render/variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/994f3cf74dea8730e473c4ad483bea0baff491c9/crates%2Fide-completion%2Fsrc%2Frender%2Fvariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/994f3cf74dea8730e473c4ad483bea0baff491c9/crates%2Fide-completion%2Fsrc%2Frender%2Fvariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fvariant.rs?ref=994f3cf74dea8730e473c4ad483bea0baff491c9", "patch": "@@ -24,9 +24,9 @@ pub(crate) fn render_record_lit(\n ) -> RenderedLiteral {\n     let completions = fields.iter().enumerate().format_with(\", \", |(idx, field), f| {\n         if snippet_cap.is_some() {\n-            f(&format_args!(\"{}: ${{{}:()}}\", field.name(db), idx + 1))\n+            f(&format_args!(\"{}: ${{{}:()}}\", field.name(db).escaped(), idx + 1))\n         } else {\n-            f(&format_args!(\"{}: ()\", field.name(db)))\n+            f(&format_args!(\"{}: ()\", field.name(db).escaped()))\n         }\n     });\n "}]}