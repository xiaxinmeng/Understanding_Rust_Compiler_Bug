{"sha": "20c1b3fb49385bed0fc1fc539f573d3695a94753", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwYzFiM2ZiNDkzODViZWQwZmMxZmM1MzlmNTczZDM2OTVhOTQ3NTM=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-22T19:56:01Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-26T21:50:18Z"}, "message": "Add a `const_eval` helper to `InterpCx`", "tree": {"sha": "be0857468f3bba8a9b59e7dd5ddaa6472e668c79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be0857468f3bba8a9b59e7dd5ddaa6472e668c79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20c1b3fb49385bed0fc1fc539f573d3695a94753", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20c1b3fb49385bed0fc1fc539f573d3695a94753", "html_url": "https://github.com/rust-lang/rust/commit/20c1b3fb49385bed0fc1fc539f573d3695a94753", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20c1b3fb49385bed0fc1fc539f573d3695a94753/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1acbf4b8028ae4eb86128c07945ac0cdc8f7d811", "url": "https://api.github.com/repos/rust-lang/rust/commits/1acbf4b8028ae4eb86128c07945ac0cdc8f7d811", "html_url": "https://github.com/rust-lang/rust/commit/1acbf4b8028ae4eb86128c07945ac0cdc8f7d811"}], "stats": {"total": 43, "additions": 23, "deletions": 20}, "files": [{"sha": "da4156c2719fdcca5aca5580b3db840b89273e82", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/20c1b3fb49385bed0fc1fc539f573d3695a94753/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c1b3fb49385bed0fc1fc539f573d3695a94753/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=20c1b3fb49385bed0fc1fc539f573d3695a94753", "patch": "@@ -20,8 +20,8 @@ use rustc_macros::HashStable;\n use syntax::source_map::{self, Span, DUMMY_SP};\n \n use super::{\n-    Immediate, MPlaceTy, Machine, MemPlace, Memory, Operand, Place, PlaceTy, ScalarMaybeUndef,\n-    StackPopInfo,\n+    Immediate, MPlaceTy, Machine, MemPlace, Memory, OpTy, Operand, Place, PlaceTy,\n+    ScalarMaybeUndef, StackPopInfo,\n };\n \n pub struct InterpCx<'mir, 'tcx, M: Machine<'mir, 'tcx>> {\n@@ -754,6 +754,24 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(())\n     }\n \n+    pub(super) fn const_eval(\n+        &self,\n+        gid: GlobalId<'tcx>,\n+    ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n+        // For statics we pick `ParamEnv::reveal_all`, because statics don't have generics\n+        // and thus don't care about the parameter environment. While we could just use\n+        // `self.param_env`, that would mean we invoke the query to evaluate the static\n+        // with different parameter environments, thus causing the static to be evaluated\n+        // multiple times.\n+        let param_env = if self.tcx.is_static(gid.instance.def_id()) {\n+            ty::ParamEnv::reveal_all()\n+        } else {\n+            self.param_env\n+        };\n+        let val = self.tcx.const_eval(param_env.and(gid))?;\n+        self.eval_const_to_op(val, None)\n+    }\n+\n     pub fn const_eval_raw(\n         &self,\n         gid: GlobalId<'tcx>,"}, {"sha": "eb7657f780c56da4538df6e62f9f3c8e1b45fa48", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/20c1b3fb49385bed0fc1fc539f573d3695a94753/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c1b3fb49385bed0fc1fc539f573d3695a94753/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=20c1b3fb49385bed0fc1fc539f573d3695a94753", "patch": "@@ -118,9 +118,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             | sym::size_of\n             | sym::type_id\n             | sym::type_name => {\n-                let val =\n-                    self.tcx.const_eval_instance(self.param_env, instance, Some(self.tcx.span))?;\n-                let val = self.eval_const_to_op(val, None)?;\n+                let gid = GlobalId { instance, promoted: None };\n+                let val = self.const_eval(gid)?;\n                 self.copy_op(val, dest)?;\n             }\n "}, {"sha": "fc63847433b5c0859a7402d04545b56d6a2ff553", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/20c1b3fb49385bed0fc1fc539f573d3695a94753/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c1b3fb49385bed0fc1fc539f573d3695a94753/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=20c1b3fb49385bed0fc1fc539f573d3695a94753", "patch": "@@ -578,28 +578,14 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             ty::ConstKind::Param(_) => throw_inval!(TooGeneric),\n             ty::ConstKind::Unevaluated(def_id, substs) => {\n                 let instance = self.resolve(def_id, substs)?;\n-                // For statics we pick `ParamEnv::reveal_all`, because statics don't have generics\n-                // and thus don't care about the parameter environment. While we could just use\n-                // `self.param_env`, that would mean we invoke the query to evaluate the static\n-                // with different parameter environments, thus causing the static to be evaluated\n-                // multiple times.\n-                let param_env = if self.tcx.is_static(def_id) {\n-                    ty::ParamEnv::reveal_all()\n-                } else {\n-                    self.param_env\n-                };\n                 // We use `const_eval` here and `const_eval_raw` elsewhere in mir interpretation.\n                 // The reason we use `const_eval_raw` everywhere else is to prevent cycles during\n                 // validation, because validation automatically reads through any references, thus\n                 // potentially requiring the current static to be evaluated again. This is not a\n                 // problem here, because we need an operand and operands are always reads.\n                 // FIXME(oli-obk): eliminate all the `const_eval_raw` usages when we get rid of\n                 // `StaticKind` once and for all.\n-                let val =\n-                    self.tcx.const_eval(param_env.and(GlobalId { instance, promoted: None }))?;\n-                // \"recurse\". This is only ever going into a recusion depth of 1, because after\n-                // `const_eval` we don't have `Unevaluated` anymore.\n-                return self.eval_const_to_op(val, layout);\n+                return self.const_eval(GlobalId { instance, promoted: None });\n             }\n             ty::ConstKind::Value(val_val) => val_val,\n         };"}]}