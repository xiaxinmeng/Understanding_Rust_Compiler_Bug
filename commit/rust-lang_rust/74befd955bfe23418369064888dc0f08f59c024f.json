{"sha": "74befd955bfe23418369064888dc0f08f59c024f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0YmVmZDk1NWJmZTIzNDE4MzY5MDY0ODg4ZGMwZjA4ZjU5YzAyNGY=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-06-05T14:52:38Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-06-06T20:04:51Z"}, "message": "Fix #[thread_local] statics as asm! sym operands", "tree": {"sha": "a1307fa332f1e847e62361c2c842289ee7d4fc29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1307fa332f1e847e62361c2c842289ee7d4fc29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74befd955bfe23418369064888dc0f08f59c024f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74befd955bfe23418369064888dc0f08f59c024f", "html_url": "https://github.com/rust-lang/rust/commit/74befd955bfe23418369064888dc0f08f59c024f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74befd955bfe23418369064888dc0f08f59c024f/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a5cbb0e42f330617a061243f8725d861dd5118b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a5cbb0e42f330617a061243f8725d861dd5118b", "html_url": "https://github.com/rust-lang/rust/commit/2a5cbb0e42f330617a061243f8725d861dd5118b"}], "stats": {"total": 123, "additions": 78, "deletions": 45}, "files": [{"sha": "c8038e5e0fccb445c87c7ed87fbe263a9598cfc9", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74befd955bfe23418369064888dc0f08f59c024f/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74befd955bfe23418369064888dc0f08f59c024f/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=74befd955bfe23418369064888dc0f08f59c024f", "patch": "@@ -921,12 +921,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         span_bug!(span, \"invalid type for asm sym (fn)\");\n                     }\n                 }\n-                mir::InlineAsmOperand::SymStatic { ref value } => {\n-                    if let Some(def_id) = value.check_static_ptr(bx.tcx()) {\n-                        InlineAsmOperandRef::SymStatic { def_id }\n-                    } else {\n-                        span_bug!(span, \"invalid type for asm sym (static)\");\n-                    }\n+                mir::InlineAsmOperand::SymStatic { def_id } => {\n+                    InlineAsmOperandRef::SymStatic { def_id }\n                 }\n             })\n             .collect();"}, {"sha": "9df42679ade041d67dcd1adad01cbfdac4ff020a", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/74befd955bfe23418369064888dc0f08f59c024f/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74befd955bfe23418369064888dc0f08f59c024f/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=74befd955bfe23418369064888dc0f08f59c024f", "patch": "@@ -1240,7 +1240,7 @@ pub enum InlineAsmOperand<'tcx> {\n         value: Box<Constant<'tcx>>,\n     },\n     SymStatic {\n-        value: Box<Constant<'tcx>>,\n+        def_id: DefId,\n     },\n }\n \n@@ -1636,9 +1636,11 @@ impl<'tcx> TerminatorKind<'tcx> {\n                         InlineAsmOperand::Const { value } => {\n                             write!(fmt, \"const {:?}\", value)?;\n                         }\n-                        InlineAsmOperand::SymFn { value }\n-                        | InlineAsmOperand::SymStatic { value } => {\n-                            write!(fmt, \"sym {:?}\", value)?;\n+                        InlineAsmOperand::SymFn { value } => {\n+                            write!(fmt, \"sym_fn {:?}\", value)?;\n+                        }\n+                        InlineAsmOperand::SymStatic { def_id } => {\n+                            write!(fmt, \"sym_static {:?}\", def_id)?;\n                         }\n                     }\n                 }"}, {"sha": "220dfa80f06ad99b5b3e0ec85a36c0bc4d415773", "filename": "src/librustc_middle/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74befd955bfe23418369064888dc0f08f59c024f/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74befd955bfe23418369064888dc0f08f59c024f/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fvisit.rs?ref=74befd955bfe23418369064888dc0f08f59c024f", "patch": "@@ -563,10 +563,10 @@ macro_rules! make_mir_visitor {\n                                         );\n                                     }\n                                 }\n-                                InlineAsmOperand::SymFn { value }\n-                                | InlineAsmOperand::SymStatic { value } => {\n+                                InlineAsmOperand::SymFn { value } => {\n                                     self.visit_constant(value, source_location);\n                                 }\n+                                InlineAsmOperand::SymStatic { def_id: _ } => {}\n                             }\n                         }\n                     }"}, {"sha": "a0935517aaaea76d362a0509836ab4be13951e58", "filename": "src/librustc_mir/borrow_check/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74befd955bfe23418369064888dc0f08f59c024f/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74befd955bfe23418369064888dc0f08f59c024f/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs?ref=74befd955bfe23418369064888dc0f08f59c024f", "patch": "@@ -208,7 +208,7 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                             }\n                         }\n                         InlineAsmOperand::SymFn { value: _ }\n-                        | InlineAsmOperand::SymStatic { value: _ } => {}\n+                        | InlineAsmOperand::SymStatic { def_id: _ } => {}\n                     }\n                 }\n             }"}, {"sha": "8f2977039280b928b6aeae890fafcf07ce1d7ee8", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74befd955bfe23418369064888dc0f08f59c024f/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74befd955bfe23418369064888dc0f08f59c024f/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=74befd955bfe23418369064888dc0f08f59c024f", "patch": "@@ -759,7 +759,7 @@ impl<'cx, 'tcx> dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tc\n                             }\n                         }\n                         InlineAsmOperand::SymFn { value: _ }\n-                        | InlineAsmOperand::SymStatic { value: _ } => {}\n+                        | InlineAsmOperand::SymStatic { def_id: _ } => {}\n                     }\n                 }\n             }"}, {"sha": "4e8b796d500d90ddbf77253d937a5313350e8fd9", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74befd955bfe23418369064888dc0f08f59c024f/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74befd955bfe23418369064888dc0f08f59c024f/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=74befd955bfe23418369064888dc0f08f59c024f", "patch": "@@ -439,7 +439,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                             }\n                         }\n                         InlineAsmOperand::SymFn { value: _ }\n-                        | InlineAsmOperand::SymStatic { value: _ } => {}\n+                        | InlineAsmOperand::SymStatic { def_id: _ } => {}\n                     }\n                 }\n             }"}, {"sha": "c4dadf0938b5817972631b45041c05cc8adb4d5b", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/74befd955bfe23418369064888dc0f08f59c024f/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74befd955bfe23418369064888dc0f08f59c024f/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=74befd955bfe23418369064888dc0f08f59c024f", "patch": "@@ -634,9 +634,19 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n             }\n             mir::TerminatorKind::InlineAsm { ref operands, .. } => {\n                 for op in operands {\n-                    if let mir::InlineAsmOperand::SymFn { value } = op {\n-                        let fn_ty = self.monomorphize(value.literal.ty);\n-                        visit_fn_use(self.tcx, fn_ty, false, &mut self.output);\n+                    match *op {\n+                        mir::InlineAsmOperand::SymFn { ref value } => {\n+                            let fn_ty = self.monomorphize(value.literal.ty);\n+                            visit_fn_use(self.tcx, fn_ty, false, &mut self.output);\n+                        }\n+                        mir::InlineAsmOperand::SymStatic { def_id } => {\n+                            let instance = Instance::mono(self.tcx, def_id);\n+                            if should_monomorphize_locally(self.tcx, &instance) {\n+                                trace!(\"collecting asm sym static {:?}\", def_id);\n+                                self.output.push(MonoItem::Static(def_id));\n+                            }\n+                        }\n+                        _ => {}\n                     }\n                 }\n             }"}, {"sha": "6b8d13de96a3322b24ca7fdc8c93492c5847f1aa", "filename": "src/librustc_mir_build/build/expr/into.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74befd955bfe23418369064888dc0f08f59c024f/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74befd955bfe23418369064888dc0f08f59c024f/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs?ref=74befd955bfe23418369064888dc0f08f59c024f", "patch": "@@ -353,8 +353,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         hair::InlineAsmOperand::SymFn { expr } => {\n                             mir::InlineAsmOperand::SymFn { value: box this.as_constant(expr) }\n                         }\n-                        hair::InlineAsmOperand::SymStatic { expr } => {\n-                            mir::InlineAsmOperand::SymStatic { value: box this.as_constant(expr) }\n+                        hair::InlineAsmOperand::SymStatic { def_id } => {\n+                            mir::InlineAsmOperand::SymStatic { def_id }\n                         }\n                     })\n                     .collect();"}, {"sha": "ef038a132d9ac4b967492cf94ec106a6b7c874ee", "filename": "src/librustc_mir_build/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/74befd955bfe23418369064888dc0f08f59c024f/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74befd955bfe23418369064888dc0f08f59c024f/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs?ref=74befd955bfe23418369064888dc0f08f59c024f", "patch": "@@ -465,25 +465,8 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n                                     }\n                                 }\n \n-                                Res::Def(DefKind::Static, id) => {\n-                                    ty = cx.tcx.static_ptr_ty(id);\n-                                    let ptr = cx.tcx.create_static_alloc(id);\n-                                    InlineAsmOperand::SymStatic {\n-                                        expr: Expr {\n-                                            ty,\n-                                            temp_lifetime,\n-                                            span: expr.span,\n-                                            kind: ExprKind::StaticRef {\n-                                                literal: ty::Const::from_scalar(\n-                                                    cx.tcx,\n-                                                    Scalar::Ptr(ptr.into()),\n-                                                    ty,\n-                                                ),\n-                                                def_id: id,\n-                                            },\n-                                        }\n-                                        .to_ref(),\n-                                    }\n+                                Res::Def(DefKind::Static, def_id) => {\n+                                    InlineAsmOperand::SymStatic { def_id }\n                                 }\n \n                                 _ => {"}, {"sha": "5f280e8568cd4d6f9f8f4a296d7e669d47e8a7f1", "filename": "src/librustc_mir_build/hair/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74befd955bfe23418369064888dc0f08f59c024f/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74befd955bfe23418369064888dc0f08f59c024f/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs?ref=74befd955bfe23418369064888dc0f08f59c024f", "patch": "@@ -374,7 +374,7 @@ crate enum InlineAsmOperand<'tcx> {\n         expr: ExprRef<'tcx>,\n     },\n     SymStatic {\n-        expr: ExprRef<'tcx>,\n+        def_id: DefId,\n     },\n }\n "}, {"sha": "8cff16aa75f695a76479b8185bd3cdf282524ce4", "filename": "src/test/ui/asm/sym.rs", "status": "modified", "additions": 47, "deletions": 5, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/74befd955bfe23418369064888dc0f08f59c024f/src%2Ftest%2Fui%2Fasm%2Fsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74befd955bfe23418369064888dc0f08f59c024f/src%2Ftest%2Fui%2Fasm%2Fsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fsym.rs?ref=74befd955bfe23418369064888dc0f08f59c024f", "patch": "@@ -1,8 +1,9 @@\n // no-system-llvm\n // only-x86_64\n+// only-linux\n // run-pass\n \n-#![feature(asm, track_caller)]\n+#![feature(asm, track_caller, thread_local)]\n \n extern \"C\" fn f1() -> i32 {\n     111\n@@ -15,9 +16,9 @@ fn f2() -> i32 {\n }\n \n macro_rules! call {\n-    ($func:path) => {{\n-        let result: i32;\n+    ($func:path) => {\n         unsafe {\n+            let result: i32;\n             asm!(\"call {}\", sym $func,\n                 out(\"rax\") result,\n                 out(\"rcx\") _, out(\"rdx\") _, out(\"rdi\") _, out(\"rsi\") _,\n@@ -27,12 +28,53 @@ macro_rules! call {\n                 out(\"xmm8\") _, out(\"xmm9\") _, out(\"xmm10\") _, out(\"xmm11\") _,\n                 out(\"xmm12\") _, out(\"xmm13\") _, out(\"xmm14\") _, out(\"xmm15\") _,\n             );\n+            result\n         }\n-        result\n-    }}\n+    }\n }\n \n+macro_rules! static_addr {\n+    ($s:expr) => {\n+        unsafe {\n+            let result: *const u32;\n+            // LEA performs a RIP-relative address calculation and returns the address\n+            asm!(\"lea {}, [rip + {}]\", out(reg) result, sym $s);\n+            result\n+        }\n+    }\n+}\n+macro_rules! static_tls_addr {\n+    ($s:expr) => {\n+        unsafe {\n+            let result: *const u32;\n+            asm!(\n+                \"\n+                    # Load TLS base address\n+                    mov {out}, qword ptr fs:[0]\n+                    # Calculate the address of sym in the TLS block. The @tpoff\n+                    # relocation gives the offset of the symbol from the start\n+                    # of the TLS block.\n+                    lea {out}, [{out} + {sym}@tpoff]\n+                \",\n+                out = out(reg) result,\n+                sym = sym $s\n+            );\n+            result\n+        }\n+    }\n+}\n+\n+static S1: u32 = 111;\n+#[thread_local]\n+static S2: u32 = 222;\n+\n fn main() {\n     assert_eq!(call!(f1), 111);\n     assert_eq!(call!(f2), 222);\n+    assert_eq!(static_addr!(S1), &S1 as *const u32);\n+    assert_eq!(static_tls_addr!(S2), &S2 as *const u32);\n+    std::thread::spawn(|| {\n+        assert_eq!(static_addr!(S1), &S1 as *const u32);\n+        assert_eq!(static_tls_addr!(S2), &S2 as *const u32);\n+    });\n }"}]}