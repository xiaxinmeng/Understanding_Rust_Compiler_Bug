{"sha": "f2da0c701edef601b16b512b3a244977bf4b3afe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyZGEwYzcwMWVkZWY2MDFiMTZiNTEyYjNhMjQ0OTc3YmY0YjNhZmU=", "commit": {"author": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-10-22T20:46:10Z"}, "committer": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-10-22T20:46:10Z"}, "message": "manual-unwrap-or / pr remarks", "tree": {"sha": "b6705df0a147563ddaaa431f6912d23780e1da8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6705df0a147563ddaaa431f6912d23780e1da8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2da0c701edef601b16b512b3a244977bf4b3afe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2da0c701edef601b16b512b3a244977bf4b3afe", "html_url": "https://github.com/rust-lang/rust/commit/f2da0c701edef601b16b512b3a244977bf4b3afe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2da0c701edef601b16b512b3a244977bf4b3afe/comments", "author": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "915ce3608724e6c900d1b5eb4412cac2fcace33a", "url": "https://api.github.com/repos/rust-lang/rust/commits/915ce3608724e6c900d1b5eb4412cac2fcace33a", "html_url": "https://github.com/rust-lang/rust/commit/915ce3608724e6c900d1b5eb4412cac2fcace33a"}], "stats": {"total": 112, "additions": 77, "deletions": 35}, "files": [{"sha": "c784de0f604751a5557fa0e40e17470305b4d10f", "filename": "tests/ui/manual_unwrap_or.fixed", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f2da0c701edef601b16b512b3a244977bf4b3afe/tests%2Fui%2Fmanual_unwrap_or.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f2da0c701edef601b16b512b3a244977bf4b3afe/tests%2Fui%2Fmanual_unwrap_or.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_unwrap_or.fixed?ref=f2da0c701edef601b16b512b3a244977bf4b3afe", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n #![allow(dead_code)]\n+#![allow(unused_variables)]\n \n fn option_unwrap_or() {\n     // int case\n@@ -67,44 +68,58 @@ fn option_unwrap_or() {\n \n fn result_unwrap_or() {\n     // int case\n+    Ok::<i32, &str>(1).unwrap_or(42);\n+\n+    // int case, suggestion must surround with parenthesis\n     (Ok(1) as Result<i32, &str>).unwrap_or(42);\n \n     // int case reversed\n-    (Ok(1) as Result<i32, &str>).unwrap_or(42);\n+    Ok::<i32, &str>(1).unwrap_or(42);\n \n     // richer none expr\n-    (Ok(1) as Result<i32, &str>).unwrap_or(1 + 42);\n+    Ok::<i32, &str>(1).unwrap_or(1 + 42);\n \n     // multiline case\n     #[rustfmt::skip]\n-    (Ok(1) as Result<i32, &str>).unwrap_or({\n+    Ok::<i32, &str>(1).unwrap_or({\n         42 + 42\n             + 42 + 42 + 42\n             + 42 + 42 + 42\n     });\n \n     // string case\n-    (Ok(\"Bob\") as Result<&str, &str>).unwrap_or(\"Alice\");\n+    Ok::<&str, &str>(\"Bob\").unwrap_or(\"Alice\");\n \n     // don't lint\n-    match Ok(1) as Result<i32, &str> {\n+    match Ok::<i32, &str>(1) {\n         Ok(i) => i + 2,\n         Err(_) => 42,\n     };\n-    match Ok(1) as Result<i32, &str> {\n+    match Ok::<i32, &str>(1) {\n         Ok(i) => i,\n         Err(_) => return,\n     };\n     for j in 0..4 {\n-        match Ok(j) as Result<i32, &str> {\n+        match Ok::<i32, &str>(j) {\n             Ok(i) => i,\n             Err(_) => continue,\n         };\n-        match Ok(j) as Result<i32, &str> {\n+        match Ok::<i32, &str>(j) {\n             Ok(i) => i,\n             Err(_) => break,\n         };\n     }\n+\n+    // don't lint, Err value is used\n+    match Ok::<&str, &str>(\"Alice\") {\n+        Ok(s) => s,\n+        Err(s) => s,\n+    };\n+    // could lint, but unused_variables takes care of it\n+    match Ok::<&str, &str>(\"Alice\") {\n+        Ok(s) => s,\n+        Err(s) => \"Bob\",\n+    };\n }\n \n fn main() {}"}, {"sha": "df5f237c3fbaf1ba591095e6300a0b904c85f227", "filename": "tests/ui/manual_unwrap_or.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f2da0c701edef601b16b512b3a244977bf4b3afe/tests%2Fui%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2da0c701edef601b16b512b3a244977bf4b3afe/tests%2Fui%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_unwrap_or.rs?ref=f2da0c701edef601b16b512b3a244977bf4b3afe", "patch": "@@ -1,5 +1,6 @@\n // run-rustfix\n #![allow(dead_code)]\n+#![allow(unused_variables)]\n \n fn option_unwrap_or() {\n     // int case\n@@ -82,26 +83,32 @@ fn option_unwrap_or() {\n \n fn result_unwrap_or() {\n     // int case\n+    match Ok::<i32, &str>(1) {\n+        Ok(i) => i,\n+        Err(_) => 42,\n+    };\n+\n+    // int case, suggestion must surround with parenthesis\n     match Ok(1) as Result<i32, &str> {\n         Ok(i) => i,\n         Err(_) => 42,\n     };\n \n     // int case reversed\n-    match Ok(1) as Result<i32, &str> {\n+    match Ok::<i32, &str>(1) {\n         Err(_) => 42,\n         Ok(i) => i,\n     };\n \n     // richer none expr\n-    match Ok(1) as Result<i32, &str> {\n+    match Ok::<i32, &str>(1) {\n         Ok(i) => i,\n         Err(_) => 1 + 42,\n     };\n \n     // multiline case\n     #[rustfmt::skip]\n-    match Ok(1) as Result<i32, &str> {\n+    match Ok::<i32, &str>(1) {\n         Ok(i) => i,\n         Err(_) => {\n             42 + 42\n@@ -111,30 +118,41 @@ fn result_unwrap_or() {\n     };\n \n     // string case\n-    match Ok(\"Bob\") as Result<&str, &str> {\n+    match Ok::<&str, &str>(\"Bob\") {\n         Ok(i) => i,\n         Err(_) => \"Alice\",\n     };\n \n     // don't lint\n-    match Ok(1) as Result<i32, &str> {\n+    match Ok::<i32, &str>(1) {\n         Ok(i) => i + 2,\n         Err(_) => 42,\n     };\n-    match Ok(1) as Result<i32, &str> {\n+    match Ok::<i32, &str>(1) {\n         Ok(i) => i,\n         Err(_) => return,\n     };\n     for j in 0..4 {\n-        match Ok(j) as Result<i32, &str> {\n+        match Ok::<i32, &str>(j) {\n             Ok(i) => i,\n             Err(_) => continue,\n         };\n-        match Ok(j) as Result<i32, &str> {\n+        match Ok::<i32, &str>(j) {\n             Ok(i) => i,\n             Err(_) => break,\n         };\n     }\n+\n+    // don't lint, Err value is used\n+    match Ok::<&str, &str>(\"Alice\") {\n+        Ok(s) => s,\n+        Err(s) => s,\n+    };\n+    // could lint, but unused_variables takes care of it\n+    match Ok::<&str, &str>(\"Alice\") {\n+        Ok(s) => s,\n+        Err(s) => \"Bob\",\n+    };\n }\n \n fn main() {}"}, {"sha": "5bc01bf4e68e162ba4a45ce2f5596d3e24c35160", "filename": "tests/ui/manual_unwrap_or.stderr", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f2da0c701edef601b16b512b3a244977bf4b3afe/tests%2Fui%2Fmanual_unwrap_or.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2da0c701edef601b16b512b3a244977bf4b3afe/tests%2Fui%2Fmanual_unwrap_or.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_unwrap_or.stderr?ref=f2da0c701edef601b16b512b3a244977bf4b3afe", "patch": "@@ -1,5 +1,5 @@\n error: this pattern reimplements `Option::unwrap_or`\n-  --> $DIR/manual_unwrap_or.rs:6:5\n+  --> $DIR/manual_unwrap_or.rs:7:5\n    |\n LL | /     match Some(1) {\n LL | |         Some(i) => i,\n@@ -10,7 +10,7 @@ LL | |     };\n    = note: `-D clippy::manual-unwrap-or` implied by `-D warnings`\n \n error: this pattern reimplements `Option::unwrap_or`\n-  --> $DIR/manual_unwrap_or.rs:12:5\n+  --> $DIR/manual_unwrap_or.rs:13:5\n    |\n LL | /     match Some(1) {\n LL | |         None => 42,\n@@ -19,7 +19,7 @@ LL | |     };\n    | |_____^ help: replace with: `Some(1).unwrap_or(42)`\n \n error: this pattern reimplements `Option::unwrap_or`\n-  --> $DIR/manual_unwrap_or.rs:18:5\n+  --> $DIR/manual_unwrap_or.rs:19:5\n    |\n LL | /     match Some(1) {\n LL | |         Some(i) => i,\n@@ -28,7 +28,7 @@ LL | |     };\n    | |_____^ help: replace with: `Some(1).unwrap_or(1 + 42)`\n \n error: this pattern reimplements `Option::unwrap_or`\n-  --> $DIR/manual_unwrap_or.rs:25:5\n+  --> $DIR/manual_unwrap_or.rs:26:5\n    |\n LL | /     match Some(1) {\n LL | |         Some(i) => i,\n@@ -49,7 +49,7 @@ LL |     });\n    |\n \n error: this pattern reimplements `Option::unwrap_or`\n-  --> $DIR/manual_unwrap_or.rs:35:5\n+  --> $DIR/manual_unwrap_or.rs:36:5\n    |\n LL | /     match Some(\"Bob\") {\n LL | |         Some(i) => i,\n@@ -58,7 +58,16 @@ LL | |     };\n    | |_____^ help: replace with: `Some(\"Bob\").unwrap_or(\"Alice\")`\n \n error: this pattern reimplements `Result::unwrap_or`\n-  --> $DIR/manual_unwrap_or.rs:85:5\n+  --> $DIR/manual_unwrap_or.rs:86:5\n+   |\n+LL | /     match Ok::<i32, &str>(1) {\n+LL | |         Ok(i) => i,\n+LL | |         Err(_) => 42,\n+LL | |     };\n+   | |_____^ help: replace with: `Ok::<i32, &str>(1).unwrap_or(42)`\n+\n+error: this pattern reimplements `Result::unwrap_or`\n+  --> $DIR/manual_unwrap_or.rs:92:5\n    |\n LL | /     match Ok(1) as Result<i32, &str> {\n LL | |         Ok(i) => i,\n@@ -67,27 +76,27 @@ LL | |     };\n    | |_____^ help: replace with: `(Ok(1) as Result<i32, &str>).unwrap_or(42)`\n \n error: this pattern reimplements `Result::unwrap_or`\n-  --> $DIR/manual_unwrap_or.rs:91:5\n+  --> $DIR/manual_unwrap_or.rs:98:5\n    |\n-LL | /     match Ok(1) as Result<i32, &str> {\n+LL | /     match Ok::<i32, &str>(1) {\n LL | |         Err(_) => 42,\n LL | |         Ok(i) => i,\n LL | |     };\n-   | |_____^ help: replace with: `(Ok(1) as Result<i32, &str>).unwrap_or(42)`\n+   | |_____^ help: replace with: `Ok::<i32, &str>(1).unwrap_or(42)`\n \n error: this pattern reimplements `Result::unwrap_or`\n-  --> $DIR/manual_unwrap_or.rs:97:5\n+  --> $DIR/manual_unwrap_or.rs:104:5\n    |\n-LL | /     match Ok(1) as Result<i32, &str> {\n+LL | /     match Ok::<i32, &str>(1) {\n LL | |         Ok(i) => i,\n LL | |         Err(_) => 1 + 42,\n LL | |     };\n-   | |_____^ help: replace with: `(Ok(1) as Result<i32, &str>).unwrap_or(1 + 42)`\n+   | |_____^ help: replace with: `Ok::<i32, &str>(1).unwrap_or(1 + 42)`\n \n error: this pattern reimplements `Result::unwrap_or`\n-  --> $DIR/manual_unwrap_or.rs:104:5\n+  --> $DIR/manual_unwrap_or.rs:111:5\n    |\n-LL | /     match Ok(1) as Result<i32, &str> {\n+LL | /     match Ok::<i32, &str>(1) {\n LL | |         Ok(i) => i,\n LL | |         Err(_) => {\n LL | |             42 + 42\n@@ -98,21 +107,21 @@ LL | |     };\n    |\n help: replace with\n    |\n-LL |     (Ok(1) as Result<i32, &str>).unwrap_or({\n+LL |     Ok::<i32, &str>(1).unwrap_or({\n LL |         42 + 42\n LL |             + 42 + 42 + 42\n LL |             + 42 + 42 + 42\n LL |     });\n    |\n \n error: this pattern reimplements `Result::unwrap_or`\n-  --> $DIR/manual_unwrap_or.rs:114:5\n+  --> $DIR/manual_unwrap_or.rs:121:5\n    |\n-LL | /     match Ok(\"Bob\") as Result<&str, &str> {\n+LL | /     match Ok::<&str, &str>(\"Bob\") {\n LL | |         Ok(i) => i,\n LL | |         Err(_) => \"Alice\",\n LL | |     };\n-   | |_____^ help: replace with: `(Ok(\"Bob\") as Result<&str, &str>).unwrap_or(\"Alice\")`\n+   | |_____^ help: replace with: `Ok::<&str, &str>(\"Bob\").unwrap_or(\"Alice\")`\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 11 previous errors\n "}]}