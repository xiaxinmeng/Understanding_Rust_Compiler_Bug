{"sha": "97520ccb101609af63f29919bb0a39115269c89e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NTIwY2NiMTAxNjA5YWY2M2YyOTkxOWJiMGEzOTExNTI2OWM4OWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-21T16:52:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-21T16:52:09Z"}, "message": "Auto merge of #47116 - estebank:non-accessible-ctor, r=petrochenkov\n\nTweaks to invalid ctor messages\n\n - Do not suggest using a constructor that isn't accessible\n - Suggest the appropriate syntax (`()`/`{}` as appropriate)\n - Add note when trying to use `Self` as a ctor\n\nCC #22488, fix #47085.", "tree": {"sha": "7a3cbc112e89cc045bfec646dc759cfd0e021b90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a3cbc112e89cc045bfec646dc759cfd0e021b90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97520ccb101609af63f29919bb0a39115269c89e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97520ccb101609af63f29919bb0a39115269c89e", "html_url": "https://github.com/rust-lang/rust/commit/97520ccb101609af63f29919bb0a39115269c89e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97520ccb101609af63f29919bb0a39115269c89e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3001ab10b96dd495f4c579936a592dc993388568", "url": "https://api.github.com/repos/rust-lang/rust/commits/3001ab10b96dd495f4c579936a592dc993388568", "html_url": "https://github.com/rust-lang/rust/commit/3001ab10b96dd495f4c579936a592dc993388568"}, {"sha": "067405044cb682f1d01c8665e81287c23dd3655f", "url": "https://api.github.com/repos/rust-lang/rust/commits/067405044cb682f1d01c8665e81287c23dd3655f", "html_url": "https://github.com/rust-lang/rust/commit/067405044cb682f1d01c8665e81287c23dd3655f"}], "stats": {"total": 582, "additions": 466, "deletions": 116}, "files": [{"sha": "5429dbccc589908fe26d2baadb4507ec7bdf2186", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/97520ccb101609af63f29919bb0a39115269c89e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97520ccb101609af63f29919bb0a39115269c89e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=97520ccb101609af63f29919bb0a39115269c89e", "patch": "@@ -898,7 +898,7 @@ impl<'a> LexicalScopeBinding<'a> {\n     }\n }\n \n-#[derive(Clone)]\n+#[derive(Clone, Debug)]\n enum PathResult<'a> {\n     Module(Module<'a>),\n     NonModule(PathResolution),\n@@ -2568,7 +2568,8 @@ impl<'a> Resolver<'a> {\n             let code = source.error_code(def.is_some());\n             let (base_msg, fallback_label, base_span) = if let Some(def) = def {\n                 (format!(\"expected {}, found {} `{}`\", expected, def.kind_name(), path_str),\n-                 format!(\"not a {}\", expected), span)\n+                 format!(\"not a {}\", expected),\n+                 span)\n             } else {\n                 let item_str = path[path.len() - 1].node;\n                 let item_span = path[path.len() - 1].span;\n@@ -2585,7 +2586,8 @@ impl<'a> Resolver<'a> {\n                     (mod_prefix, format!(\"`{}`\", names_to_string(mod_path)))\n                 };\n                 (format!(\"cannot find {} `{}` in {}{}\", expected, item_str, mod_prefix, mod_str),\n-                 format!(\"not found in {}\", mod_str), item_span)\n+                 format!(\"not found in {}\", mod_str),\n+                 item_span)\n             };\n             let code = DiagnosticId::Error(code.into());\n             let mut err = this.session.struct_span_err_with_code(base_span, &base_msg, code);\n@@ -2700,20 +2702,37 @@ impl<'a> Resolver<'a> {\n                         }\n                         return (err, candidates);\n                     },\n-                    _ if ns == ValueNS && is_struct_like(def) => {\n-                        if let Def::Struct(def_id) = def {\n-                            if let Some((ctor_def, ctor_vis))\n-                                    = this.struct_constructors.get(&def_id).cloned() {\n-                                if is_expected(ctor_def) && !this.is_accessible(ctor_vis) {\n-                                    err.span_label(span, format!(\"constructor is not visible \\\n-                                                                   here due to private fields\"));\n-                                }\n+                    (Def::Struct(def_id), _) if ns == ValueNS => {\n+                        if let Some((ctor_def, ctor_vis))\n+                                = this.struct_constructors.get(&def_id).cloned() {\n+                            let accessible_ctor = this.is_accessible(ctor_vis);\n+                            if is_expected(ctor_def) && !accessible_ctor {\n+                                err.span_label(span, format!(\"constructor is not visible \\\n+                                                              here due to private fields\"));\n                             }\n+                        } else {\n+                            err.span_label(span, format!(\"did you mean `{} {{ /* fields */ }}`?\",\n+                                                         path_str));\n                         }\n+                        return (err, candidates);\n+                    }\n+                    (Def::Union(..), _) |\n+                    (Def::Variant(..), _) |\n+                    (Def::VariantCtor(_, CtorKind::Fictive), _) if ns == ValueNS => {\n                         err.span_label(span, format!(\"did you mean `{} {{ /* fields */ }}`?\",\n                                                      path_str));\n                         return (err, candidates);\n                     }\n+                    (Def::SelfTy(..), _) if ns == ValueNS => {\n+                        err.span_label(span, fallback_label);\n+                        err.note(\"can't use `Self` as a constructor, you must use the \\\n+                                  implemented struct\");\n+                        return (err, candidates);\n+                    }\n+                    (Def::TyAlias(_), _) | (Def::AssociatedTy(..), _) if ns == ValueNS => {\n+                        err.note(\"can't use a type alias as a constructor\");\n+                        return (err, candidates);\n+                    }\n                     _ => {}\n                 }\n             }\n@@ -3965,13 +3984,6 @@ impl<'a> Resolver<'a> {\n     }\n }\n \n-fn is_struct_like(def: Def) -> bool {\n-    match def {\n-        Def::VariantCtor(_, CtorKind::Fictive) => true,\n-        _ => PathSource::Struct.is_expected(def),\n-    }\n-}\n-\n fn is_self_type(path: &[SpannedIdent], namespace: Namespace) -> bool {\n     namespace == TypeNS && path.len() == 1 && path[0].node.name == keywords::SelfType.name()\n }"}, {"sha": "5c5e5f2735b712a7f789e61688c79a82e6c6ee64", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/97520ccb101609af63f29919bb0a39115269c89e/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97520ccb101609af63f29919bb0a39115269c89e/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=97520ccb101609af63f29919bb0a39115269c89e", "patch": "@@ -210,15 +210,25 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         }\n                     }\n                 }\n-                let mut err = type_error_struct!(self.tcx.sess, call_expr.span, callee_ty, E0618,\n-                                                 \"expected function, found `{}`\",\n-                                                 if let Some(ref path) = unit_variant {\n-                                                     path.to_string()\n-                                                 } else {\n-                                                     callee_ty.to_string()\n-                                                 });\n-                if let Some(path) = unit_variant {\n-                    err.help(&format!(\"did you mean to write `{}`?\", path));\n+\n+                let mut err = type_error_struct!(\n+                    self.tcx.sess,\n+                    call_expr.span,\n+                    callee_ty,\n+                    E0618,\n+                    \"expected function, found {}\",\n+                    match unit_variant {\n+                        Some(ref path) => format!(\"enum variant `{}`\", path),\n+                        None => format!(\"`{}`\", callee_ty),\n+                    });\n+\n+                err.span_label(call_expr.span, \"not a function\");\n+\n+                if let Some(ref path) = unit_variant {\n+                    err.span_suggestion(call_expr.span,\n+                                        &format!(\"`{}` is a unit variant, you need to write it \\\n+                                                  without the parenthesis\", path),\n+                                        path.to_string());\n                 }\n \n                 if let hir::ExprCall(ref expr, _) = call_expr.node {\n@@ -235,7 +245,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         _ => self.tcx.hir.span_if_local(def.def_id())\n                     };\n                     if let Some(span) = def_span {\n-                        err.span_note(span, \"defined here\");\n+                        let name = match unit_variant {\n+                            Some(path) => path,\n+                            None => callee_ty.to_string(),\n+                        };\n+                        err.span_label(span, format!(\"`{}` defined here\", name));\n                     }\n                 }\n "}, {"sha": "570eecfc267deea3ff5fa8f7fe7dc044c5bfc141", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97520ccb101609af63f29919bb0a39115269c89e/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97520ccb101609af63f29919bb0a39115269c89e/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=97520ccb101609af63f29919bb0a39115269c89e", "patch": "@@ -518,7 +518,10 @@ fn compare_self_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                            self_descr);\n             err.span_label(impl_m_span, format!(\"`{}` used in impl\", self_descr));\n             if let Some(span) = tcx.hir.span_if_local(trait_m.def_id) {\n-                err.span_label(span, format!(\"trait declared without `{}`\", self_descr));\n+                err.span_label(span, format!(\"trait method declared without `{}`\", self_descr));\n+            } else {\n+                err.note_trait_signature(trait_m.name.to_string(),\n+                                         trait_m.signature(&tcx));\n             }\n             err.emit();\n             return Err(ErrorReported);\n@@ -533,8 +536,7 @@ fn compare_self_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                             not in the impl\",\n                                            trait_m.name,\n                                            self_descr);\n-            err.span_label(impl_m_span,\n-                           format!(\"expected `{}` in impl\", self_descr));\n+            err.span_label(impl_m_span, format!(\"expected `{}` in impl\", self_descr));\n             if let Some(span) = tcx.hir.span_if_local(trait_m.def_id) {\n                 err.span_label(span, format!(\"`{}` used in trait\", self_descr));\n             } else {"}, {"sha": "0cd3d00a735767608e015f85205229c0e85c8669", "filename": "src/test/compile-fail/E0185.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97520ccb101609af63f29919bb0a39115269c89e/src%2Ftest%2Fcompile-fail%2FE0185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97520ccb101609af63f29919bb0a39115269c89e/src%2Ftest%2Fcompile-fail%2FE0185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0185.rs?ref=97520ccb101609af63f29919bb0a39115269c89e", "patch": "@@ -9,14 +9,16 @@\n // except according to those terms.\n \n trait Foo {\n-    fn foo(); //~ trait declared without `&self`\n+    fn foo();\n+    //~^ NOTE trait method declared without `&self`\n }\n \n struct Bar;\n \n impl Foo for Bar {\n-    fn foo(&self) {} //~ ERROR E0185\n-    //~^ `&self` used in impl\n+    fn foo(&self) {}\n+    //~^ ERROR E0185\n+    //~| NOTE `&self` used in impl\n }\n \n fn main() {"}, {"sha": "f46bdb9980142fce754a261e94ba91ff00e96216", "filename": "src/test/compile-fail/E0618.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97520ccb101609af63f29919bb0a39115269c89e/src%2Ftest%2Fcompile-fail%2FE0618.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97520ccb101609af63f29919bb0a39115269c89e/src%2Ftest%2Fcompile-fail%2FE0618.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0618.rs?ref=97520ccb101609af63f29919bb0a39115269c89e", "patch": "@@ -13,7 +13,9 @@ enum X {\n }\n \n fn main() {\n-    X::Entry(); //~ ERROR expected function, found `X::Entry` [E0618]\n+    X::Entry();\n+    //~^ ERROR expected function, found enum variant `X::Entry` [E0618]\n     let x = 0i32;\n-    x(); //~ ERROR expected function, found `i32` [E0618]\n+    x();\n+    //~^ ERROR expected function, found `i32` [E0618]\n }"}, {"sha": "3b4f514de7dcaf82e3df8f2bf15b977826e8c6cb", "filename": "src/test/ui/block-result/issue-20862.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97520ccb101609af63f29919bb0a39115269c89e/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97520ccb101609af63f29919bb0a39115269c89e/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr?ref=97520ccb101609af63f29919bb0a39115269c89e", "patch": "@@ -13,7 +13,7 @@ error[E0618]: expected function, found `()`\n   --> $DIR/issue-20862.rs:17:13\n    |\n 17 |     let x = foo(5)(2);\n-   |             ^^^^^^^^^\n+   |             ^^^^^^^^^ not a function\n \n error: aborting due to 2 previous errors\n "}, {"sha": "941292a7ec27d0bb08065ec4c55b3195adf0823b", "filename": "src/test/ui/empty-struct-unit-expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97520ccb101609af63f29919bb0a39115269c89e/src%2Ftest%2Fui%2Fempty-struct-unit-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97520ccb101609af63f29919bb0a39115269c89e/src%2Ftest%2Fui%2Fempty-struct-unit-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty-struct-unit-expr.rs?ref=97520ccb101609af63f29919bb0a39115269c89e", "patch": "@@ -24,8 +24,8 @@ enum E {\n fn main() {\n     let e2 = Empty2(); //~ ERROR expected function, found `Empty2`\n     let e4 = E::Empty4();\n-    //~^ ERROR expected function, found `E::Empty4` [E0618]\n+    //~^ ERROR expected function, found enum variant `E::Empty4` [E0618]\n     let xe2 = XEmpty2(); //~ ERROR expected function, found `empty_struct::XEmpty2`\n     let xe4 = XE::XEmpty4();\n-    //~^ ERROR expected function, found `XE::XEmpty4` [E0618]\n+    //~^ ERROR expected function, found enum variant `XE::XEmpty4` [E0618]\n }"}, {"sha": "aa242a530d0e322c1078d9822720a8d32044a3e3", "filename": "src/test/ui/empty-struct-unit-expr.stderr", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/97520ccb101609af63f29919bb0a39115269c89e/src%2Ftest%2Fui%2Fempty-struct-unit-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97520ccb101609af63f29919bb0a39115269c89e/src%2Ftest%2Fui%2Fempty-struct-unit-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty-struct-unit-expr.stderr?ref=97520ccb101609af63f29919bb0a39115269c89e", "patch": "@@ -1,41 +1,40 @@\n error[E0618]: expected function, found `Empty2`\n   --> $DIR/empty-struct-unit-expr.rs:25:14\n    |\n-25 |     let e2 = Empty2(); //~ ERROR expected function, found `Empty2`\n-   |              ^^^^^^^^\n-   |\n-note: defined here\n-  --> $DIR/empty-struct-unit-expr.rs:18:1\n-   |\n 18 | struct Empty2;\n-   | ^^^^^^^^^^^^^^\n+   | -------------- `Empty2` defined here\n+...\n+25 |     let e2 = Empty2(); //~ ERROR expected function, found `Empty2`\n+   |              ^^^^^^^^ not a function\n \n-error[E0618]: expected function, found `E::Empty4`\n+error[E0618]: expected function, found enum variant `E::Empty4`\n   --> $DIR/empty-struct-unit-expr.rs:26:14\n    |\n+21 |     Empty4\n+   |     ------ `E::Empty4` defined here\n+...\n 26 |     let e4 = E::Empty4();\n-   |              ^^^^^^^^^^^\n-   |\n-   = help: did you mean to write `E::Empty4`?\n-note: defined here\n-  --> $DIR/empty-struct-unit-expr.rs:21:5\n+   |              ^^^^^^^^^^^ not a function\n+help: `E::Empty4` is a unit variant, you need to write it without the parenthesis\n    |\n-21 |     Empty4\n-   |     ^^^^^^\n+26 |     let e4 = E::Empty4;\n+   |              ^^^^^^^^^\n \n error[E0618]: expected function, found `empty_struct::XEmpty2`\n   --> $DIR/empty-struct-unit-expr.rs:28:15\n    |\n 28 |     let xe2 = XEmpty2(); //~ ERROR expected function, found `empty_struct::XEmpty2`\n-   |               ^^^^^^^^^\n+   |               ^^^^^^^^^ not a function\n \n-error[E0618]: expected function, found `XE::XEmpty4`\n+error[E0618]: expected function, found enum variant `XE::XEmpty4`\n   --> $DIR/empty-struct-unit-expr.rs:29:15\n    |\n 29 |     let xe4 = XE::XEmpty4();\n-   |               ^^^^^^^^^^^^^\n+   |               ^^^^^^^^^^^^^ not a function\n+help: `XE::XEmpty4` is a unit variant, you need to write it without the parenthesis\n    |\n-   = help: did you mean to write `XE::XEmpty4`?\n+29 |     let xe4 = XE::XEmpty4;\n+   |               ^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "68127b282ed5484dcf61ced5033e8eb76bdd3a14", "filename": "src/test/ui/issue-10969.stderr", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/97520ccb101609af63f29919bb0a39115269c89e/src%2Ftest%2Fui%2Fissue-10969.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97520ccb101609af63f29919bb0a39115269c89e/src%2Ftest%2Fui%2Fissue-10969.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-10969.stderr?ref=97520ccb101609af63f29919bb0a39115269c89e", "patch": "@@ -1,26 +1,18 @@\n error[E0618]: expected function, found `i32`\n   --> $DIR/issue-10969.rs:12:5\n    |\n-12 |     i(); //~ERROR expected function, found `i32`\n-   |     ^^^\n-   |\n-note: defined here\n-  --> $DIR/issue-10969.rs:11:9\n-   |\n 11 | fn func(i: i32) {\n-   |         ^\n+   |         - `i32` defined here\n+12 |     i(); //~ERROR expected function, found `i32`\n+   |     ^^^ not a function\n \n error[E0618]: expected function, found `i32`\n   --> $DIR/issue-10969.rs:16:5\n    |\n-16 |     i(); //~ERROR expected function, found `i32`\n-   |     ^^^\n-   |\n-note: defined here\n-  --> $DIR/issue-10969.rs:15:9\n-   |\n 15 |     let i = 0i32;\n-   |         ^\n+   |         - `i32` defined here\n+16 |     i(); //~ERROR expected function, found `i32`\n+   |     ^^^ not a function\n \n error: aborting due to 2 previous errors\n "}, {"sha": "08480a0e1faa82261fbe414c732bd3e6f9a522a2", "filename": "src/test/ui/resolve/privacy-enum-ctor.rs", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/97520ccb101609af63f29919bb0a39115269c89e/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97520ccb101609af63f29919bb0a39115269c89e/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.rs?ref=97520ccb101609af63f29919bb0a39115269c89e", "patch": "@@ -0,0 +1,81 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod m {\n+    pub enum E {\n+        Fn(u8),\n+        Struct {\n+            s: u8,\n+        },\n+        Unit,\n+    }\n+\n+    pub mod n {\n+        pub(in m) enum Z {\n+            Fn(u8),\n+            Struct {\n+                s: u8,\n+            },\n+            Unit,\n+        }\n+    }\n+\n+    use m::n::Z; // OK, only the type is imported\n+\n+    fn f() {\n+        n::Z;\n+        //~^ ERROR expected value, found enum `n::Z`\n+        Z;\n+        //~^ ERROR expected value, found enum `Z`\n+        let _: Z = Z::Fn;\n+        //~^ ERROR mismatched types\n+        let _: Z = Z::Struct;\n+        //~^ ERROR expected value, found struct variant `Z::Struct`\n+        let _ = Z::Unit();\n+        //~^ ERROR expected function, found enum variant `Z::Unit`\n+        let _ = Z::Unit {};\n+        // This is ok, it is equivalent to not having braces\n+    }\n+}\n+\n+use m::E; // OK, only the type is imported\n+\n+fn main() {\n+    let _: E = m::E;\n+    //~^ ERROR expected value, found enum `m::E`\n+    let _: E = m::E::Fn;\n+    //~^ ERROR mismatched types\n+    let _: E = m::E::Struct;\n+    //~^ ERROR expected value, found struct variant `m::E::Struct`\n+    let _: E = m::E::Unit();\n+    //~^ ERROR expected function, found enum variant `m::E::Unit`\n+    let _: E = E;\n+    //~^ ERROR expected value, found enum `E`\n+    let _: E = E::Fn;\n+    //~^ ERROR mismatched types\n+    let _: E = E::Struct;\n+    //~^ ERROR expected value, found struct variant `E::Struct`\n+    let _: E = E::Unit();\n+    //~^ ERROR expected function, found enum variant `E::Unit`\n+    let _: Z = m::n::Z;\n+    //~^ ERROR cannot find type `Z` in this scope\n+    //~| ERROR expected value, found enum `m::n::Z`\n+    //~| ERROR enum `Z` is private\n+    let _: Z = m::n::Z::Fn;\n+    //~^ ERROR cannot find type `Z` in this scope\n+    //~| ERROR enum `Z` is private\n+    let _: Z = m::n::Z::Struct;\n+    //~^ ERROR cannot find type `Z` in this scope\n+    //~| ERROR expected value, found struct variant `m::n::Z::Struct`\n+    //~| ERROR enum `Z` is private\n+    let _: Z = m::n::Z::Unit {};\n+    //~^ ERROR cannot find type `Z` in this scope\n+    //~| ERROR enum `Z` is private\n+}"}, {"sha": "c4f6d1f5b7407034bc0b63672daac325a63b698e", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "added", "additions": 225, "deletions": 0, "changes": 225, "blob_url": "https://github.com/rust-lang/rust/blob/97520ccb101609af63f29919bb0a39115269c89e/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97520ccb101609af63f29919bb0a39115269c89e/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=97520ccb101609af63f29919bb0a39115269c89e", "patch": "@@ -0,0 +1,225 @@\n+error[E0423]: expected value, found enum `n::Z`\n+  --> $DIR/privacy-enum-ctor.rs:33:9\n+   |\n+33 |         n::Z;\n+   |         ^^^^\n+   |\n+   = note: did you mean to use one of the following variants?\n+           - `m::Z::Fn`\n+           - `m::Z::Struct`\n+           - `m::Z::Unit`\n+\n+error[E0423]: expected value, found enum `Z`\n+  --> $DIR/privacy-enum-ctor.rs:35:9\n+   |\n+35 |         Z;\n+   |         ^ did you mean `f`?\n+   |\n+   = note: did you mean to use one of the following variants?\n+           - `m::Z::Fn`\n+           - `m::Z::Struct`\n+           - `m::Z::Unit`\n+\n+error[E0423]: expected value, found struct variant `Z::Struct`\n+  --> $DIR/privacy-enum-ctor.rs:39:20\n+   |\n+39 |         let _: Z = Z::Struct;\n+   |                    ^^^^^^^^^ did you mean `Z::Struct { /* fields */ }`?\n+\n+error[E0423]: expected value, found enum `m::E`\n+  --> $DIR/privacy-enum-ctor.rs:51:16\n+   |\n+51 |     let _: E = m::E;\n+   |                ^^^-\n+   |                   |\n+   |                   did you mean `f`?\n+   |\n+   = note: did you mean to use one of the following variants?\n+           - `E::Fn`\n+           - `E::Struct`\n+           - `E::Unit`\n+help: possible better candidates are found in other modules, you can import them into scope\n+   |\n+48 | use std::f32::consts::E;\n+   |\n+48 | use std::f64::consts::E;\n+   |\n+\n+error[E0423]: expected value, found struct variant `m::E::Struct`\n+  --> $DIR/privacy-enum-ctor.rs:55:16\n+   |\n+55 |     let _: E = m::E::Struct;\n+   |                ^^^^^^^^^^^^ did you mean `m::E::Struct { /* fields */ }`?\n+\n+error[E0423]: expected value, found enum `E`\n+  --> $DIR/privacy-enum-ctor.rs:59:16\n+   |\n+59 |     let _: E = E;\n+   |                ^\n+   |\n+   = note: did you mean to use one of the following variants?\n+           - `E::Fn`\n+           - `E::Struct`\n+           - `E::Unit`\n+help: possible better candidates are found in other modules, you can import them into scope\n+   |\n+48 | use std::f32::consts::E;\n+   |\n+48 | use std::f64::consts::E;\n+   |\n+\n+error[E0423]: expected value, found struct variant `E::Struct`\n+  --> $DIR/privacy-enum-ctor.rs:63:16\n+   |\n+63 |     let _: E = E::Struct;\n+   |                ^^^^^^^^^ did you mean `E::Struct { /* fields */ }`?\n+\n+error[E0412]: cannot find type `Z` in this scope\n+  --> $DIR/privacy-enum-ctor.rs:67:12\n+   |\n+67 |     let _: Z = m::n::Z;\n+   |            ^ did you mean `E`?\n+help: possible candidate is found in another module, you can import it into scope\n+   |\n+48 | use m::n::Z;\n+   |\n+\n+error[E0423]: expected value, found enum `m::n::Z`\n+  --> $DIR/privacy-enum-ctor.rs:67:16\n+   |\n+67 |     let _: Z = m::n::Z;\n+   |                ^^^^^^^\n+   |\n+   = note: did you mean to use one of the following variants?\n+           - `m::Z::Fn`\n+           - `m::Z::Struct`\n+           - `m::Z::Unit`\n+\n+error[E0412]: cannot find type `Z` in this scope\n+  --> $DIR/privacy-enum-ctor.rs:71:12\n+   |\n+71 |     let _: Z = m::n::Z::Fn;\n+   |            ^ did you mean `E`?\n+help: possible candidate is found in another module, you can import it into scope\n+   |\n+48 | use m::n::Z;\n+   |\n+\n+error[E0412]: cannot find type `Z` in this scope\n+  --> $DIR/privacy-enum-ctor.rs:74:12\n+   |\n+74 |     let _: Z = m::n::Z::Struct;\n+   |            ^ did you mean `E`?\n+help: possible candidate is found in another module, you can import it into scope\n+   |\n+48 | use m::n::Z;\n+   |\n+\n+error[E0423]: expected value, found struct variant `m::n::Z::Struct`\n+  --> $DIR/privacy-enum-ctor.rs:74:16\n+   |\n+74 |     let _: Z = m::n::Z::Struct;\n+   |                ^^^^^^^^^^^^^^^ did you mean `m::n::Z::Struct { /* fields */ }`?\n+\n+error[E0412]: cannot find type `Z` in this scope\n+  --> $DIR/privacy-enum-ctor.rs:78:12\n+   |\n+78 |     let _: Z = m::n::Z::Unit {};\n+   |            ^ did you mean `E`?\n+help: possible candidate is found in another module, you can import it into scope\n+   |\n+48 | use m::n::Z;\n+   |\n+\n+error[E0603]: enum `Z` is private\n+  --> $DIR/privacy-enum-ctor.rs:67:16\n+   |\n+67 |     let _: Z = m::n::Z;\n+   |                ^^^^^^^\n+\n+error[E0603]: enum `Z` is private\n+  --> $DIR/privacy-enum-ctor.rs:71:16\n+   |\n+71 |     let _: Z = m::n::Z::Fn;\n+   |                ^^^^^^^^^^^\n+\n+error[E0603]: enum `Z` is private\n+  --> $DIR/privacy-enum-ctor.rs:74:16\n+   |\n+74 |     let _: Z = m::n::Z::Struct;\n+   |                ^^^^^^^^^^^^^^^\n+\n+error[E0603]: enum `Z` is private\n+  --> $DIR/privacy-enum-ctor.rs:78:16\n+   |\n+78 |     let _: Z = m::n::Z::Unit {};\n+   |                ^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/privacy-enum-ctor.rs:37:20\n+   |\n+37 |         let _: Z = Z::Fn;\n+   |                    ^^^^^ expected enum `m::n::Z`, found fn item\n+   |\n+   = note: expected type `m::n::Z`\n+              found type `fn(u8) -> m::n::Z {m::n::Z::Fn}`\n+\n+error[E0618]: expected function, found enum variant `Z::Unit`\n+  --> $DIR/privacy-enum-ctor.rs:41:17\n+   |\n+26 |             Unit,\n+   |             ---- `Z::Unit` defined here\n+...\n+41 |         let _ = Z::Unit();\n+   |                 ^^^^^^^^^ not a function\n+help: `Z::Unit` is a unit variant, you need to write it without the parenthesis\n+   |\n+41 |         let _ = Z::Unit;\n+   |                 ^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/privacy-enum-ctor.rs:53:16\n+   |\n+53 |     let _: E = m::E::Fn;\n+   |                ^^^^^^^^ expected enum `m::E`, found fn item\n+   |\n+   = note: expected type `m::E`\n+              found type `fn(u8) -> m::E {m::E::Fn}`\n+\n+error[E0618]: expected function, found enum variant `m::E::Unit`\n+  --> $DIR/privacy-enum-ctor.rs:57:16\n+   |\n+17 |         Unit,\n+   |         ---- `m::E::Unit` defined here\n+...\n+57 |     let _: E = m::E::Unit();\n+   |                ^^^^^^^^^^^^ not a function\n+help: `m::E::Unit` is a unit variant, you need to write it without the parenthesis\n+   |\n+57 |     let _: E = m::E::Unit;\n+   |                ^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/privacy-enum-ctor.rs:61:16\n+   |\n+61 |     let _: E = E::Fn;\n+   |                ^^^^^ expected enum `m::E`, found fn item\n+   |\n+   = note: expected type `m::E`\n+              found type `fn(u8) -> m::E {m::E::Fn}`\n+\n+error[E0618]: expected function, found enum variant `E::Unit`\n+  --> $DIR/privacy-enum-ctor.rs:65:16\n+   |\n+17 |         Unit,\n+   |         ---- `E::Unit` defined here\n+...\n+65 |     let _: E = E::Unit();\n+   |                ^^^^^^^^^ not a function\n+help: `E::Unit` is a unit variant, you need to write it without the parenthesis\n+   |\n+65 |     let _: E = E::Unit;\n+   |                ^^^^^^^\n+\n+error: aborting due to 23 previous errors\n+"}, {"sha": "9029eeb22cd27304ab1b8f7f8df50f8ad69ff93a", "filename": "src/test/ui/resolve/privacy-struct-ctor.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/97520ccb101609af63f29919bb0a39115269c89e/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97520ccb101609af63f29919bb0a39115269c89e/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.rs?ref=97520ccb101609af63f29919bb0a39115269c89e", "patch": "@@ -14,6 +14,9 @@ extern crate privacy_struct_ctor as xcrate;\n \n mod m {\n     pub struct S(u8);\n+    pub struct S2 {\n+        s: u8\n+    }\n \n     pub mod n {\n         pub(in m) struct Z(pub(in m::n) u8);\n@@ -22,22 +25,33 @@ mod m {\n     use m::n::Z; // OK, only the type is imported\n \n     fn f() {\n-        n::Z; //~ ERROR tuple struct `Z` is private\n+        n::Z;\n+        //~^ ERROR tuple struct `Z` is private\n         Z;\n         //~^ ERROR expected value, found struct `Z`\n     }\n }\n \n use m::S; // OK, only the type is imported\n+use m::S2; // OK, only the type is imported\n \n fn main() {\n-    m::S; //~ ERROR tuple struct `S` is private\n+    m::S;\n+    //~^ ERROR tuple struct `S` is private\n+    let _: S = m::S(2);\n+    //~^ ERROR tuple struct `S` is private\n     S;\n     //~^ ERROR expected value, found struct `S`\n-    m::n::Z; //~ ERROR tuple struct `Z` is private\n+    m::n::Z;\n+    //~^ ERROR tuple struct `Z` is private\n+\n+    S2;\n+    //~^ ERROR expected value, found struct `S2`\n \n-    xcrate::m::S; //~ ERROR tuple struct `S` is private\n+    xcrate::m::S;\n+    //~^ ERROR tuple struct `S` is private\n     xcrate::S;\n     //~^ ERROR expected value, found struct `xcrate::S`\n-    xcrate::m::n::Z; //~ ERROR tuple struct `Z` is private\n+    xcrate::m::n::Z;\n+    //~^ ERROR tuple struct `Z` is private\n }"}, {"sha": "e97a4e4143cc35d06ff4224588b98da7d6451d75", "filename": "src/test/ui/resolve/privacy-struct-ctor.stderr", "status": "modified", "additions": 34, "deletions": 29, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/97520ccb101609af63f29919bb0a39115269c89e/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97520ccb101609af63f29919bb0a39115269c89e/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr?ref=97520ccb101609af63f29919bb0a39115269c89e", "patch": "@@ -1,72 +1,77 @@\n error[E0423]: expected value, found struct `Z`\n-  --> $DIR/privacy-struct-ctor.rs:26:9\n+  --> $DIR/privacy-struct-ctor.rs:30:9\n    |\n-26 |         Z;\n+30 |         Z;\n    |         ^\n    |         |\n    |         did you mean `S`?\n    |         constructor is not visible here due to private fields\n-   |         did you mean `Z { /* fields */ }`?\n help: possible better candidate is found in another module, you can import it into scope\n    |\n-22 |     use m::n::Z;\n+25 |     use m::n::Z;\n    |\n \n error[E0423]: expected value, found struct `S`\n-  --> $DIR/privacy-struct-ctor.rs:35:5\n+  --> $DIR/privacy-struct-ctor.rs:43:5\n    |\n-35 |     S;\n-   |     ^\n-   |     |\n-   |     constructor is not visible here due to private fields\n-   |     did you mean `S { /* fields */ }`?\n+43 |     S;\n+   |     ^ constructor is not visible here due to private fields\n help: possible better candidate is found in another module, you can import it into scope\n    |\n-31 | use m::S;\n+35 | use m::S;\n    |\n \n+error[E0423]: expected value, found struct `S2`\n+  --> $DIR/privacy-struct-ctor.rs:48:5\n+   |\n+48 |     S2;\n+   |     ^^ did you mean `S2 { /* fields */ }`?\n+\n error[E0423]: expected value, found struct `xcrate::S`\n-  --> $DIR/privacy-struct-ctor.rs:40:5\n+  --> $DIR/privacy-struct-ctor.rs:53:5\n    |\n-40 |     xcrate::S;\n-   |     ^^^^^^^^^\n-   |     |\n-   |     constructor is not visible here due to private fields\n-   |     did you mean `xcrate::S { /* fields */ }`?\n+53 |     xcrate::S;\n+   |     ^^^^^^^^^ constructor is not visible here due to private fields\n help: possible better candidate is found in another module, you can import it into scope\n    |\n-31 | use m::S;\n+35 | use m::S;\n    |\n \n error[E0603]: tuple struct `Z` is private\n-  --> $DIR/privacy-struct-ctor.rs:25:9\n+  --> $DIR/privacy-struct-ctor.rs:28:9\n    |\n-25 |         n::Z; //~ ERROR tuple struct `Z` is private\n+28 |         n::Z;\n    |         ^^^^\n \n error[E0603]: tuple struct `S` is private\n-  --> $DIR/privacy-struct-ctor.rs:34:5\n+  --> $DIR/privacy-struct-ctor.rs:39:5\n    |\n-34 |     m::S; //~ ERROR tuple struct `S` is private\n+39 |     m::S;\n    |     ^^^^\n \n+error[E0603]: tuple struct `S` is private\n+  --> $DIR/privacy-struct-ctor.rs:41:16\n+   |\n+41 |     let _: S = m::S(2);\n+   |                ^^^^\n+\n error[E0603]: tuple struct `Z` is private\n-  --> $DIR/privacy-struct-ctor.rs:37:5\n+  --> $DIR/privacy-struct-ctor.rs:45:5\n    |\n-37 |     m::n::Z; //~ ERROR tuple struct `Z` is private\n+45 |     m::n::Z;\n    |     ^^^^^^^\n \n error[E0603]: tuple struct `S` is private\n-  --> $DIR/privacy-struct-ctor.rs:39:5\n+  --> $DIR/privacy-struct-ctor.rs:51:5\n    |\n-39 |     xcrate::m::S; //~ ERROR tuple struct `S` is private\n+51 |     xcrate::m::S;\n    |     ^^^^^^^^^^^^\n \n error[E0603]: tuple struct `Z` is private\n-  --> $DIR/privacy-struct-ctor.rs:42:5\n+  --> $DIR/privacy-struct-ctor.rs:55:5\n    |\n-42 |     xcrate::m::n::Z; //~ ERROR tuple struct `Z` is private\n+55 |     xcrate::m::n::Z;\n    |     ^^^^^^^^^^^^^^^\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 10 previous errors\n "}, {"sha": "843d7c20ffd2cf5e0140275f6507b7123cb9ea90", "filename": "src/test/ui/resolve/tuple-struct-alias.stderr", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/97520ccb101609af63f29919bb0a39115269c89e/src%2Ftest%2Fui%2Fresolve%2Ftuple-struct-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97520ccb101609af63f29919bb0a39115269c89e/src%2Ftest%2Fui%2Fresolve%2Ftuple-struct-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftuple-struct-alias.stderr?ref=97520ccb101609af63f29919bb0a39115269c89e", "patch": "@@ -2,31 +2,33 @@ error[E0423]: expected function, found self type `Self`\n   --> $DIR/tuple-struct-alias.rs:16:17\n    |\n 16 |         let s = Self(0, 1); //~ ERROR expected function\n-   |                 ^^^^ did you mean `Self { /* fields */ }`?\n+   |                 ^^^^ not a function\n+   |\n+   = note: can't use `Self` as a constructor, you must use the implemented struct\n \n error[E0532]: expected tuple struct/variant, found self type `Self`\n   --> $DIR/tuple-struct-alias.rs:18:13\n    |\n 18 |             Self(..) => {} //~ ERROR expected tuple struct/variant\n-   |             ^^^^ did you mean `Self { /* fields */ }`?\n+   |             ^^^^ not a tuple struct/variant\n+   |\n+   = note: can't use `Self` as a constructor, you must use the implemented struct\n \n error[E0423]: expected function, found type alias `A`\n   --> $DIR/tuple-struct-alias.rs:24:13\n    |\n 24 |     let s = A(0, 1); //~ ERROR expected function\n-   |             ^\n-   |             |\n-   |             did you mean `S`?\n-   |             did you mean `A { /* fields */ }`?\n+   |             ^ did you mean `S`?\n+   |\n+   = note: can't use a type alias as a constructor\n \n error[E0532]: expected tuple struct/variant, found type alias `A`\n   --> $DIR/tuple-struct-alias.rs:26:9\n    |\n 26 |         A(..) => {} //~ ERROR expected tuple struct/variant\n-   |         ^\n-   |         |\n-   |         did you mean `S`?\n-   |         did you mean `A { /* fields */ }`?\n+   |         ^ did you mean `S`?\n+   |\n+   = note: can't use a type alias as a constructor\n \n error: aborting due to 4 previous errors\n "}]}