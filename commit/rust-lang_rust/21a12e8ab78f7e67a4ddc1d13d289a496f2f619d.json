{"sha": "21a12e8ab78f7e67a4ddc1d13d289a496f2f619d", "node_id": "C_kwDOAAsO6NoAKDIxYTEyZThhYjc4ZjdlNjdhNGRkYzFkMTNkMjg5YTQ5NmYyZjYxOWQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-25T17:16:56Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-07-02T07:21:55Z"}, "message": "Handle fresh lifetimes on bare trait objects.", "tree": {"sha": "19dd6254ccb56ceaaf4dd40780e2b65cb25713c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19dd6254ccb56ceaaf4dd40780e2b65cb25713c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21a12e8ab78f7e67a4ddc1d13d289a496f2f619d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21a12e8ab78f7e67a4ddc1d13d289a496f2f619d", "html_url": "https://github.com/rust-lang/rust/commit/21a12e8ab78f7e67a4ddc1d13d289a496f2f619d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21a12e8ab78f7e67a4ddc1d13d289a496f2f619d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5354eb48ea8705d9f2d4f211b139b43ccdebd16", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5354eb48ea8705d9f2d4f211b139b43ccdebd16", "html_url": "https://github.com/rust-lang/rust/commit/d5354eb48ea8705d9f2d4f211b139b43ccdebd16"}], "stats": {"total": 124, "additions": 53, "deletions": 71}, "files": [{"sha": "cab2de0ced87cff63e8ddd8f59c397d9a42da21e", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/21a12e8ab78f7e67a4ddc1d13d289a496f2f619d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a12e8ab78f7e67a4ddc1d13d289a496f2f619d/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=21a12e8ab78f7e67a4ddc1d13d289a496f2f619d", "patch": "@@ -1174,6 +1174,33 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         param_mode: ParamMode,\n         itctx: ImplTraitContext,\n     ) -> hir::Ty<'hir> {\n+        // Check whether we should interpret this as a bare trait object.\n+        // This check mirrors the one in late resolution.  We only introduce this special case in\n+        // the rare occurence we need to lower `Fresh` anonymous lifetimes.\n+        // The other cases when a qpath should be opportunistically made a trait object are handled\n+        // by `ty_path`.\n+        if qself.is_none()\n+            && let Some(partial_res) = self.resolver.get_partial_res(t.id)\n+            && partial_res.unresolved_segments() == 0\n+            && let Res::Def(DefKind::Trait | DefKind::TraitAlias, _) = partial_res.base_res()\n+        {\n+            let (bounds, lifetime_bound) = self.with_dyn_type_scope(true, |this| {\n+                let bound = this.lower_poly_trait_ref(\n+                    &PolyTraitRef {\n+                        bound_generic_params: vec![],\n+                        trait_ref: TraitRef { path: path.clone(), ref_id: t.id },\n+                        span: t.span\n+                    },\n+                    itctx,\n+                );\n+                let bounds = this.arena.alloc_from_iter([bound]);\n+                let lifetime_bound = this.elided_dyn_bound(t.span);\n+                (bounds, lifetime_bound)\n+            });\n+            let kind = hir::TyKind::TraitObject(bounds, lifetime_bound, TraitObjectSyntax::None);\n+            return hir::Ty { kind, span: self.lower_span(t.span), hir_id: self.next_id() };\n+        }\n+\n         let id = self.lower_node_id(t.id);\n         let qpath = self.lower_qpath(t.id, qself, path, param_mode, itctx);\n         self.ty_path(id, t.span, qpath)"}, {"sha": "ced32904c0acb5314264219a8ef8c999d650a8ad", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/21a12e8ab78f7e67a4ddc1d13d289a496f2f619d/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a12e8ab78f7e67a4ddc1d13d289a496f2f619d/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=21a12e8ab78f7e67a4ddc1d13d289a496f2f619d", "patch": "@@ -611,6 +611,30 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n             TyKind::Path(ref qself, ref path) => {\n                 self.diagnostic_metadata.current_type_path = Some(ty);\n                 self.smart_resolve_path(ty.id, qself.as_ref(), path, PathSource::Type);\n+\n+                // Check whether we should interpret this as a bare trait object.\n+                if qself.is_none()\n+                    && let Some(partial_res) = self.r.partial_res_map.get(&ty.id)\n+                    && partial_res.unresolved_segments() == 0\n+                    && let Res::Def(DefKind::Trait | DefKind::TraitAlias, _) = partial_res.base_res()\n+                {\n+                    // This path is actually a bare trait object.  In case of a bare `Fn`-trait\n+                    // object with anonymous lifetimes, we need this rib to correctly place the\n+                    // synthetic lifetimes.\n+                    let span = ty.span.shrink_to_lo().to(path.span.shrink_to_lo());\n+                    self.with_generic_param_rib(\n+                        &[],\n+                        NormalRibKind,\n+                        LifetimeRibKind::Generics {\n+                            binder: ty.id,\n+                            kind: LifetimeBinderKind::PolyTrait,\n+                            span,\n+                        },\n+                        |this| this.visit_path(&path, ty.id),\n+                    );\n+                    self.diagnostic_metadata.current_type_path = prev_ty;\n+                    return;\n+                }\n             }\n             TyKind::ImplicitSelf => {\n                 let self_ty = Ident::with_dummy_span(kw::SelfUpper);"}, {"sha": "45f5e4ae129a12c77252f1078ac834ad17c84641", "filename": "src/test/ui/lifetimes/bare-trait-object-borrowck.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21a12e8ab78f7e67a4ddc1d13d289a496f2f619d/src%2Ftest%2Fui%2Flifetimes%2Fbare-trait-object-borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a12e8ab78f7e67a4ddc1d13d289a496f2f619d/src%2Ftest%2Fui%2Flifetimes%2Fbare-trait-object-borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fbare-trait-object-borrowck.rs?ref=21a12e8ab78f7e67a4ddc1d13d289a496f2f619d", "patch": "@@ -1,5 +1,5 @@\n #![allow(bare_trait_objects)]\n-\n+// check-pass\n pub struct FormatWith<'a, I, F> {\n     sep: &'a str,\n     /// FormatWith uses interior mutability because Display::fmt takes &self.\n@@ -21,7 +21,4 @@ where\n \n fn main() {\n     let _ = new_format(0..32, \" | \", |i, f| f(&format_args!(\"0x{:x}\", i)));\n-    //~^ ERROR temporary value dropped while borrowed\n-    //~| ERROR temporary value dropped while borrowed\n-    //~| ERROR `i` does not live long enough\n }"}, {"sha": "d7b059019eb3b15f14af3ac12a65177021eb1632", "filename": "src/test/ui/lifetimes/bare-trait-object-borrowck.stderr", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d5354eb48ea8705d9f2d4f211b139b43ccdebd16/src%2Ftest%2Fui%2Flifetimes%2Fbare-trait-object-borrowck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5354eb48ea8705d9f2d4f211b139b43ccdebd16/src%2Ftest%2Fui%2Flifetimes%2Fbare-trait-object-borrowck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fbare-trait-object-borrowck.stderr?ref=d5354eb48ea8705d9f2d4f211b139b43ccdebd16", "patch": "@@ -1,43 +0,0 @@\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/bare-trait-object-borrowck.rs:23:48\n-   |\n-LL |     let _ = new_format(0..32, \" | \", |i, f| f(&format_args!(\"0x{:x}\", i)));\n-   |                                          -  ---^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |                                          |  |  |                        |\n-   |                                          |  |  |                        temporary value is freed at the end of this statement\n-   |                                          |  |  creates a temporary which is freed while still in use\n-   |                                          |  argument requires that borrow lasts for `'1`\n-   |                                          has type `&mut dyn FnMut(&'1 (dyn std::fmt::Display + '1)) -> Result<(), std::fmt::Error>`\n-   |\n-   = note: this error originates in the macro `format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/bare-trait-object-borrowck.rs:23:48\n-   |\n-LL |     let _ = new_format(0..32, \" | \", |i, f| f(&format_args!(\"0x{:x}\", i)));\n-   |                                          -  ---^^^^^^^^^^^^^^^^^^^^^^^^^-\n-   |                                          |  |  |                        |\n-   |                                          |  |  |                        temporary value is freed at the end of this statement\n-   |                                          |  |  creates a temporary which is freed while still in use\n-   |                                          |  argument requires that borrow lasts for `'1`\n-   |                                          has type `&mut dyn FnMut(&'1 (dyn std::fmt::Display + '1)) -> Result<(), std::fmt::Error>`\n-   |\n-   = note: this error originates in the macro `format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0597]: `i` does not live long enough\n-  --> $DIR/bare-trait-object-borrowck.rs:23:71\n-   |\n-LL |     let _ = new_format(0..32, \" | \", |i, f| f(&format_args!(\"0x{:x}\", i)));\n-   |                                          -  --------------------------^--\n-   |                                          |  |                         | |\n-   |                                          |  |                         | `i` dropped here while still borrowed\n-   |                                          |  |                         borrowed value does not live long enough\n-   |                                          |  argument requires that `i` is borrowed for `'1`\n-   |                                          has type `&mut dyn FnMut(&'1 (dyn std::fmt::Display + '1)) -> Result<(), std::fmt::Error>`\n-   |\n-   = note: this error originates in the macro `format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 3 previous errors\n-\n-Some errors have detailed explanations: E0597, E0716.\n-For more information about an error, try `rustc --explain E0597`."}, {"sha": "9eff618c734d519fccab4707f9a724c66b3f2e09", "filename": "src/test/ui/lifetimes/bare-trait-object.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21a12e8ab78f7e67a4ddc1d13d289a496f2f619d/src%2Ftest%2Fui%2Flifetimes%2Fbare-trait-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a12e8ab78f7e67a4ddc1d13d289a496f2f619d/src%2Ftest%2Fui%2Flifetimes%2Fbare-trait-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fbare-trait-object.rs?ref=21a12e8ab78f7e67a4ddc1d13d289a496f2f619d", "patch": "@@ -1,5 +1,5 @@\n // Verify that lifetime resolution correctly accounts for `Fn` bare trait objects.\n-\n+// check-pass\n #![allow(bare_trait_objects)]\n \n // This should work as: fn next_u32(fill_buf: &mut dyn FnMut(&mut [u8]))\n@@ -15,10 +15,8 @@ fn explicit(fill_buf: &mut dyn FnMut(&mut [u8])) {\n \n fn main() {\n     let _: fn(&mut FnMut(&mut [u8])) = next_u32;\n-    //~^ ERROR mismatched types\n     let _: &dyn Fn(&mut FnMut(&mut [u8])) = &next_u32;\n     let _: fn(&mut FnMut(&mut [u8])) = explicit;\n-    //~^ ERROR mismatched types\n     let _: &dyn Fn(&mut FnMut(&mut [u8])) = &explicit;\n     let _: fn(&mut dyn FnMut(&mut [u8])) = next_u32;\n     let _: &dyn Fn(&mut dyn FnMut(&mut [u8])) = &next_u32;"}, {"sha": "8f06410152e62eb33412d3b1541f843bc1a1e947", "filename": "src/test/ui/lifetimes/bare-trait-object.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d5354eb48ea8705d9f2d4f211b139b43ccdebd16/src%2Ftest%2Fui%2Flifetimes%2Fbare-trait-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5354eb48ea8705d9f2d4f211b139b43ccdebd16/src%2Ftest%2Fui%2Flifetimes%2Fbare-trait-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fbare-trait-object.stderr?ref=d5354eb48ea8705d9f2d4f211b139b43ccdebd16", "patch": "@@ -1,21 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/bare-trait-object.rs:17:40\n-   |\n-LL |     let _: fn(&mut FnMut(&mut [u8])) = next_u32;\n-   |                                        ^^^^^^^^ one type is more general than the other\n-   |\n-   = note: expected fn pointer `for<'r, 's> fn(&'r mut (dyn for<'s> FnMut(&'s mut [u8]) + 'r))`\n-                 found fn item `for<'r> fn(&'r mut (dyn for<'r> FnMut(&'r mut [u8]) + 'r)) {next_u32}`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/bare-trait-object.rs:20:40\n-   |\n-LL |     let _: fn(&mut FnMut(&mut [u8])) = explicit;\n-   |                                        ^^^^^^^^ one type is more general than the other\n-   |\n-   = note: expected fn pointer `for<'r, 's> fn(&'r mut (dyn for<'s> FnMut(&'s mut [u8]) + 'r))`\n-                 found fn item `for<'r> fn(&'r mut (dyn for<'r> FnMut(&'r mut [u8]) + 'r)) {explicit}`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0308`."}]}