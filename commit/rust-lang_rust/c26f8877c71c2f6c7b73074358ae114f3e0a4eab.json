{"sha": "c26f8877c71c2f6c7b73074358ae114f3e0a4eab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNmY4ODc3YzcxYzJmNmM3YjczMDc0MzU4YWUxMTRmM2UwYTRlYWI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-24T12:05:31Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-25T04:41:14Z"}, "message": "Handle variants", "tree": {"sha": "96b816a2ebae2d33502d7e6b5f190fe59a860e48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96b816a2ebae2d33502d7e6b5f190fe59a860e48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c26f8877c71c2f6c7b73074358ae114f3e0a4eab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c26f8877c71c2f6c7b73074358ae114f3e0a4eab", "html_url": "https://github.com/rust-lang/rust/commit/c26f8877c71c2f6c7b73074358ae114f3e0a4eab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c26f8877c71c2f6c7b73074358ae114f3e0a4eab/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4d36928fd872c146b15cc8aa2211267441cffc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4d36928fd872c146b15cc8aa2211267441cffc1", "html_url": "https://github.com/rust-lang/rust/commit/a4d36928fd872c146b15cc8aa2211267441cffc1"}], "stats": {"total": 21, "additions": 17, "deletions": 4}, "files": [{"sha": "0929b833c1965395337753946980f8f4db38ec84", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c26f8877c71c2f6c7b73074358ae114f3e0a4eab/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26f8877c71c2f6c7b73074358ae114f3e0a4eab/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c26f8877c71c2f6c7b73074358ae114f3e0a4eab", "patch": "@@ -848,10 +848,8 @@ impl AttributesExt for Attributes {\n /// they exist in both namespaces (structs and modules)\n fn value_ns_kind(def: Def, path_str: &str) -> Option<(&'static str, String)> {\n     match def {\n-        // structs and mods exist in both namespaces. skip them\n-        Def::StructCtor(..) | Def::Mod(..) => None,\n-        Def::Variant(..) | Def::VariantCtor(..)\n-            => Some((\"variant\", format!(\"{}()\", path_str))),\n+        // structs, variants, and mods exist in both namespaces. skip them\n+        Def::StructCtor(..) | Def::Mod(..) | Def::Variant(..) | Def::VariantCtor(..) => None,\n         Def::Fn(..)\n             => Some((\"function\", format!(\"{}()\", path_str))),\n         Def::Method(..)\n@@ -897,6 +895,20 @@ fn ambiguity_error(cx: &DocContext, attrs: &Attributes,\n              .emit();\n }\n \n+/// Given an enum variant's def, return the def of its enum and the associated fragment\n+fn handle_variant(cx: &DocContext, def: Def) -> Result<(Def, Option<String>), ()> {\n+    use rustc::ty::DefIdTree;\n+\n+    let parent = if let Some(parent) = cx.tcx.parent(def.def_id()) {\n+        parent\n+    } else {\n+        return Err(())\n+    };\n+    let parent_def = Def::Enum(parent);\n+    let variant = cx.tcx.expect_variant_def(def);\n+    Ok((parent_def, Some(format!(\"{}.v\", variant.name))))\n+}\n+\n /// Resolve a given string as a path, along with whether or not it is\n /// in the value namespace. Also returns an optional URL fragment in the case\n /// of variants and methods\n@@ -917,6 +929,7 @@ fn resolve(cx: &DocContext, path_str: &str, is_val: bool) -> Result<(Def, Option\n             let value = match result.def {\n                 Def::Method(_) | Def::AssociatedConst(_) => true,\n                 Def::AssociatedTy(_)  => false,\n+                Def::Variant(_) => return handle_variant(cx, result.def),\n                 // not a trait item, just return what we found\n                 _ => return Ok((result.def, None))\n             };"}]}