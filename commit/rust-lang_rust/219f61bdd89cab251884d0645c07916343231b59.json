{"sha": "219f61bdd89cab251884d0645c07916343231b59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxOWY2MWJkZDg5Y2FiMjUxODg0ZDA2NDVjMDc5MTYzNDMyMzFiNTk=", "commit": {"author": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2015-04-12T16:07:15Z"}, "committer": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2015-04-12T21:39:03Z"}, "message": "Make Debug include the - in -0.0", "tree": {"sha": "386b2ce518926f3b2fb7f1b33817d208b0e228ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/386b2ce518926f3b2fb7f1b33817d208b0e228ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/219f61bdd89cab251884d0645c07916343231b59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/219f61bdd89cab251884d0645c07916343231b59", "html_url": "https://github.com/rust-lang/rust/commit/219f61bdd89cab251884d0645c07916343231b59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/219f61bdd89cab251884d0645c07916343231b59/comments", "author": null, "committer": null, "parents": [{"sha": "a1e3c25a2688664e85052b6205187b62410c0df0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1e3c25a2688664e85052b6205187b62410c0df0", "html_url": "https://github.com/rust-lang/rust/commit/a1e3c25a2688664e85052b6205187b62410c0df0"}], "stats": {"total": 174, "additions": 59, "deletions": 115}, "files": [{"sha": "72c25c68040222ffd48913bf88c41b5b23b18332", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 29, "deletions": 91, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/219f61bdd89cab251884d0645c07916343231b59/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/219f61bdd89cab251884d0645c07916343231b59/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=219f61bdd89cab251884d0645c07916343231b59", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,14 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(missing_docs)]\n-\n pub use self::ExponentFormat::*;\n pub use self::SignificantDigits::*;\n-pub use self::SignFormat::*;\n \n-use char;\n-use char::CharExt;\n+use char::{self, CharExt};\n use fmt;\n use iter::Iterator;\n use num::{cast, Float, ToPrimitive};\n@@ -46,67 +42,42 @@ pub enum SignificantDigits {\n     DigExact(usize)\n }\n \n-/// How to emit the sign of a number.\n-pub enum SignFormat {\n-    /// `-` will be printed for negative values, but no sign will be emitted\n-    /// for positive numbers.\n-    SignNeg\n-}\n-\n-const DIGIT_E_RADIX: u32 = ('e' as u32) - ('a' as u32) + 11;\n-\n-/// Converts a number to its string representation as a byte vector.\n-/// This is meant to be a common base implementation for all numeric string\n-/// conversion functions like `to_string()` or `to_str_radix()`.\n+/// Converts a float number to its string representation.\n+/// This is meant to be a common base implementation for various formatting styles.\n+/// The number is assumed to be non-negative, callers use `Formatter::pad_integral`\n+/// to add the right sign, if any.\n ///\n /// # Arguments\n ///\n-/// - `num`           - The number to convert. Accepts any number that\n+/// - `num`           - The number to convert (non-negative). Accepts any number that\n ///                     implements the numeric traits.\n-/// - `radix`         - Base to use. Accepts only the values 2-36. If the exponential notation\n-///                     is used, then this base is only used for the significand. The exponent\n-///                     itself always printed using a base of 10.\n-/// - `negative_zero` - Whether to treat the special value `-0` as\n-///                     `-0` or as `+0`.\n-/// - `sign`          - How to emit the sign. See `SignFormat`.\n /// - `digits`        - The amount of digits to use for emitting the fractional\n ///                     part, if any. See `SignificantDigits`.\n /// - `exp_format`   - Whether or not to use the exponential (scientific) notation.\n ///                    See `ExponentFormat`.\n /// - `exp_capital`   - Whether or not to use a capital letter for the exponent sign, if\n ///                     exponential notation is desired.\n-/// - `f`             - A closure to invoke with the bytes representing the\n+/// - `f`             - A closure to invoke with the string representing the\n ///                     float.\n ///\n /// # Panics\n ///\n-/// - Panics if `radix` < 2 or `radix` > 36.\n-/// - Panics if `radix` > 14 and `exp_format` is `ExpDec` due to conflict\n-///   between digit and exponent sign `'e'`.\n-/// - Panics if `radix` > 25 and `exp_format` is `ExpBin` due to conflict\n-///   between digit and exponent sign `'p'`.\n+/// - Panics if `num` is negative.\n pub fn float_to_str_bytes_common<T: Float, U, F>(\n     num: T,\n-    radix: u32,\n-    negative_zero: bool,\n-    sign: SignFormat,\n     digits: SignificantDigits,\n     exp_format: ExponentFormat,\n     exp_upper: bool,\n     f: F\n ) -> U where\n     F: FnOnce(&str) -> U,\n {\n-    assert!(2 <= radix && radix <= 36);\n-    match exp_format {\n-        ExpDec if radix >= DIGIT_E_RADIX       // decimal exponent 'e'\n-          => panic!(\"float_to_str_bytes_common: radix {} incompatible with \\\n-                    use of 'e' as decimal exponent\", radix),\n-        _ => ()\n-    }\n-\n     let _0: T = Float::zero();\n     let _1: T = Float::one();\n+    let radix: u32 = 10;\n+    let radix_f: T = cast(radix).unwrap();\n+\n+    assert!(num.is_nan() || num >= _0, \"float_to_str_bytes_common: number is negative\");\n \n     match num.classify() {\n         Fp::Nan => return f(\"NaN\"),\n@@ -119,41 +90,28 @@ pub fn float_to_str_bytes_common<T: Float, U, F>(\n         _ => {}\n     }\n \n-    let neg = num < _0 || (negative_zero && _1 / num == Float::neg_infinity());\n-    // For an f64 the exponent is in the range of [-1022, 1023] for base 2, so\n-    // we may have up to that many digits. Give ourselves some extra wiggle room\n-    // otherwise as well.\n-    let mut buf = [0; 1536];\n+    // For an f64 the (decimal) exponent is roughly in the range of [-307, 308], so\n+    // we may have up to that many digits. We err on the side of caution and\n+    // add 50% extra wiggle room.\n+    let mut buf = [0; 462];\n     let mut end = 0;\n-    let radix_gen: T = cast(radix as isize).unwrap();\n \n     let (num, exp) = match exp_format {\n-        ExpNone => (num, 0),\n-        ExpDec if num == _0 => (num, 0),\n-        ExpDec => {\n-            let (exp, exp_base) = match exp_format {\n-                ExpDec => (num.abs().log10().floor(), cast::<f64, T>(10.0f64).unwrap()),\n-                ExpNone => panic!(\"unreachable\"),\n-            };\n-\n-            (num / exp_base.powf(exp), cast::<T, i32>(exp).unwrap())\n+        ExpDec if num != _0 => {\n+            let exp = num.log10().floor();\n+            (num / radix_f.powf(exp), cast::<T, i32>(exp).unwrap())\n         }\n+        _ => (num, 0)\n     };\n \n     // First emit the non-fractional part, looping at least once to make\n     // sure at least a `0` gets emitted.\n     let mut deccum = num.trunc();\n     loop {\n-        // Calculate the absolute value of each digit instead of only\n-        // doing it once for the whole number because a\n-        // representable negative number doesn't necessary have an\n-        // representable additive inverse of the same type\n-        // (See twos complement). But we assume that for the\n-        // numbers [-35 .. 0] we always have [0 .. 35].\n-        let current_digit = (deccum % radix_gen).abs();\n+        let current_digit = deccum % radix_f;\n \n         // Decrease the deccumulator one digit at a time\n-        deccum = deccum / radix_gen;\n+        deccum = deccum / radix_f;\n         deccum = deccum.trunc();\n \n         let c = char::from_digit(current_digit.to_isize().unwrap() as u32, radix);\n@@ -170,15 +128,6 @@ pub fn float_to_str_bytes_common<T: Float, U, F>(\n         DigExact(count) => (true, count + 1, true)\n     };\n \n-    // Decide what sign to put in front\n-    match sign {\n-        SignNeg if neg => {\n-            buf[end] = b'-';\n-            end += 1;\n-        }\n-        _ => ()\n-    }\n-\n     buf[..end].reverse();\n \n     // Remember start of the fractional digits.\n@@ -205,14 +154,11 @@ pub fn float_to_str_bytes_common<T: Float, U, F>(\n               )\n         ) {\n             // Shift first fractional digit into the integer part\n-            deccum = deccum * radix_gen;\n+            deccum = deccum * radix_f;\n \n-            // Calculate the absolute value of each digit.\n-            // See note in first loop.\n-            let current_digit = deccum.trunc().abs();\n+            let current_digit = deccum.trunc();\n \n-            let c = char::from_digit(current_digit.to_isize().unwrap() as u32,\n-                                     radix);\n+            let c = char::from_digit(current_digit.to_isize().unwrap() as u32, radix);\n             buf[end] = c.unwrap() as u8;\n             end += 1;\n \n@@ -301,12 +247,8 @@ pub fn float_to_str_bytes_common<T: Float, U, F>(\n \n     match exp_format {\n         ExpNone => {},\n-        _ => {\n-            buf[end] = match exp_format {\n-                ExpDec if exp_upper => 'E',\n-                ExpDec if !exp_upper => 'e',\n-                _ => panic!(\"unreachable\"),\n-            } as u8;\n+        ExpDec => {\n+            buf[end] = if exp_upper { b'E' } else { b'e' };\n             end += 1;\n \n             struct Filler<'a> {\n@@ -324,11 +266,7 @@ pub fn float_to_str_bytes_common<T: Float, U, F>(\n             }\n \n             let mut filler = Filler { buf: &mut buf, end: &mut end };\n-            match sign {\n-                SignNeg => {\n-                    let _ = fmt::write(&mut filler, format_args!(\"{:-}\", exp));\n-                }\n-            }\n+            let _ = fmt::write(&mut filler, format_args!(\"{:-}\", exp));\n         }\n     }\n "}, {"sha": "b945e2a73e2f911f9fa006364a863ea586c35802", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/219f61bdd89cab251884d0645c07916343231b59/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/219f61bdd89cab251884d0645c07916343231b59/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=219f61bdd89cab251884d0645c07916343231b59", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -18,6 +18,7 @@ use clone::Clone;\n use iter::Iterator;\n use marker::{Copy, PhantomData, Sized};\n use mem;\n+use num::Float;\n use option::Option;\n use option::Option::{Some, None};\n use result::Result::Ok;\n@@ -904,33 +905,38 @@ impl<'a, T> Pointer for &'a mut T {\n     }\n }\n \n+// Common code of floating point Debug and Display.\n+fn float_to_str_common<T: Float, F>(num: &T, precision: Option<usize>, post: F) -> Result\n+        where F : FnOnce(&str) -> Result {\n+    let digits = match precision {\n+        Some(i) => float::DigExact(i),\n+        None => float::DigMax(6),\n+    };\n+    float::float_to_str_bytes_common(num.abs(),\n+                                     digits,\n+                                     float::ExpNone,\n+                                     false,\n+                                     post)\n+}\n+\n macro_rules! floating { ($ty:ident) => {\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl Debug for $ty {\n         fn fmt(&self, fmt: &mut Formatter) -> Result {\n-            Display::fmt(self, fmt)\n+            float_to_str_common(self, fmt.precision, |absolute| {\n+                // is_positive() counts -0.0 as negative\n+                fmt.pad_integral(self.is_nan() || self.is_positive(), \"\", absolute)\n+            })\n         }\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl Display for $ty {\n         fn fmt(&self, fmt: &mut Formatter) -> Result {\n-            use num::Float;\n-\n-            let digits = match fmt.precision {\n-                Some(i) => float::DigExact(i),\n-                None => float::DigMax(6),\n-            };\n-            float::float_to_str_bytes_common(self.abs(),\n-                                             10,\n-                                             true,\n-                                             float::SignNeg,\n-                                             digits,\n-                                             float::ExpNone,\n-                                             false,\n-                                             |bytes| {\n-                fmt.pad_integral(self.is_nan() || *self >= 0.0, \"\", bytes)\n+            float_to_str_common(self, fmt.precision, |absolute| {\n+                // simple comparison counts -0.0 as positive\n+                fmt.pad_integral(self.is_nan() || *self >= 0.0, \"\", absolute)\n             })\n         }\n     }\n@@ -945,9 +951,6 @@ macro_rules! floating { ($ty:ident) => {\n                 None => float::DigMax(6),\n             };\n             float::float_to_str_bytes_common(self.abs(),\n-                                             10,\n-                                             true,\n-                                             float::SignNeg,\n                                              digits,\n                                              float::ExpDec,\n                                              false,\n@@ -967,9 +970,6 @@ macro_rules! floating { ($ty:ident) => {\n                 None => float::DigMax(6),\n             };\n             float::float_to_str_bytes_common(self.abs(),\n-                                             10,\n-                                             true,\n-                                             float::SignNeg,\n                                              digits,\n                                              float::ExpDec,\n                                              true,"}, {"sha": "ea9db9b1e1f8d91aabb86d5628b4c727f9af657f", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/219f61bdd89cab251884d0645c07916343231b59/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/219f61bdd89cab251884d0645c07916343231b59/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=219f61bdd89cab251884d0645c07916343231b59", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -144,6 +144,12 @@ pub fn main() {\n     t!(format!(\"{:+10.3e}\", 1.2345e6f64),  \"  +1.234e6\");\n     t!(format!(\"{:+10.3e}\", -1.2345e6f64), \"  -1.234e6\");\n \n+    // Float edge cases\n+    t!(format!(\"{}\", -0.0), \"0\");\n+    t!(format!(\"{:?}\", -0.0), \"-0\");\n+    t!(format!(\"{:?}\", 0.0), \"0\");\n+\n+\n     // Test that pointers don't get truncated.\n     {\n         let val = usize::MAX;"}]}