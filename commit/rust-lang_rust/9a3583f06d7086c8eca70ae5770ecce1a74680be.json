{"sha": "9a3583f06d7086c8eca70ae5770ecce1a74680be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMzU4M2YwNmQ3MDg2YzhlY2E3MGFlNTc3MGVjY2UxYTc0NjgwYmU=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-01-30T05:35:17Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2014-02-01T02:02:53Z"}, "message": "Make next_power_of_two generic for unsigned integers\n\nAlso rename `next_power_of_two_opt` to `checked_next_power_of_two`.", "tree": {"sha": "c1d228c64e7f4d547292b7fb94f5b7a0a8fe4633", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1d228c64e7f4d547292b7fb94f5b7a0a8fe4633"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a3583f06d7086c8eca70ae5770ecce1a74680be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a3583f06d7086c8eca70ae5770ecce1a74680be", "html_url": "https://github.com/rust-lang/rust/commit/9a3583f06d7086c8eca70ae5770ecce1a74680be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a3583f06d7086c8eca70ae5770ecce1a74680be/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "535e806841e1eca7adb9f41796001848f6859637", "url": "https://api.github.com/repos/rust-lang/rust/commits/535e806841e1eca7adb9f41796001848f6859637", "html_url": "https://github.com/rust-lang/rust/commit/535e806841e1eca7adb9f41796001848f6859637"}], "stats": {"total": 165, "additions": 87, "deletions": 78}, "files": [{"sha": "56c1871597401dc210d489bdf72725d89866b508", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a3583f06d7086c8eca70ae5770ecce1a74680be/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3583f06d7086c8eca70ae5770ecce1a74680be/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=9a3583f06d7086c8eca70ae5770ecce1a74680be", "patch": "@@ -178,7 +178,7 @@ impl Arena {\n         let new_min_chunk_size = num::max(n_bytes, chunk_size);\n         self.chunks.set(@Cons(self.pod_head.clone(), self.chunks.get()));\n         self.pod_head =\n-            chunk(uint::next_power_of_two(new_min_chunk_size + 1u), true);\n+            chunk(num::next_power_of_two(new_min_chunk_size + 1u), true);\n \n         return self.alloc_pod_inner(n_bytes, align);\n     }\n@@ -220,7 +220,7 @@ impl Arena {\n         let new_min_chunk_size = num::max(n_bytes, chunk_size);\n         self.chunks.set(@Cons(self.head.clone(), self.chunks.get()));\n         self.head =\n-            chunk(uint::next_power_of_two(new_min_chunk_size + 1u), false);\n+            chunk(num::next_power_of_two(new_min_chunk_size + 1u), false);\n \n         return self.alloc_nonpod_inner(n_bytes, align);\n     }"}, {"sha": "55e90248e1c3b608149c72e16c6b72ae3ee9fa5e", "filename": "src/libstd/at_vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a3583f06d7086c8eca70ae5770ecce1a74680be/src%2Flibstd%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3583f06d7086c8eca70ae5770ecce1a74680be/src%2Flibstd%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fat_vec.rs?ref=9a3583f06d7086c8eca70ae5770ecce1a74680be", "patch": "@@ -177,9 +177,9 @@ pub mod raw {\n     use cast::{transmute, transmute_copy};\n     use container::Container;\n     use option::None;\n-    use ptr;\n     use mem;\n-    use uint;\n+    use num::next_power_of_two;\n+    use ptr;\n     use unstable::intrinsics::{move_val_init, TyDesc};\n     use unstable::intrinsics;\n     use unstable::raw::{Box, Vec};\n@@ -293,7 +293,7 @@ pub mod raw {\n      */\n     #[inline]\n     pub unsafe fn reserve_at_least<T>(v: &mut @[T], n: uint) {\n-        reserve(v, uint::next_power_of_two(n));\n+        reserve(v, next_power_of_two(n));\n     }\n }\n "}, {"sha": "31bf4679144bcb6485b3838229dd34eb69245754", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a3583f06d7086c8eca70ae5770ecce1a74680be/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3583f06d7086c8eca70ae5770ecce1a74680be/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=9a3583f06d7086c8eca70ae5770ecce1a74680be", "patch": "@@ -388,7 +388,7 @@ impl<K: Hash + Eq, V> HashMap<K, V> {\n     pub fn reserve_at_least(&mut self, n: uint) {\n         if n > self.buckets.len() {\n             let buckets = n * 4 / 3 + 1;\n-            self.resize(uint::next_power_of_two(buckets));\n+            self.resize(num::next_power_of_two(buckets));\n         }\n     }\n "}, {"sha": "976761b512053309e698a261e96fd717bd907f67", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 75, "deletions": 1, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/9a3583f06d7086c8eca70ae5770ecce1a74680be/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3583f06d7086c8eca70ae5770ecce1a74680be/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=9a3583f06d7086c8eca70ae5770ecce1a74680be", "patch": "@@ -440,7 +440,39 @@ pub trait Primitive: Clone\n /// A collection of traits relevant to primitive signed and unsigned integers\n pub trait Int: Integer\n              + Primitive\n-             + Bitwise {}\n+             + Bitwise\n+             + CheckedAdd\n+             + CheckedSub\n+             // + CheckedMul // FIXME #8849: currently not impled on 32-bit\n+             + CheckedDiv {}\n+\n+/// Returns the smallest power of 2 greater than or equal to `n`.\n+#[inline]\n+pub fn next_power_of_two<T: Unsigned + Int>(n: T) -> T {\n+    let halfbits: T = cast(size_of::<T>() * 4).unwrap();\n+    let mut tmp: T = n - one();\n+    let mut shift: T = one();\n+    while shift <= halfbits {\n+        tmp = tmp | (tmp >> shift);\n+        shift = shift << one();\n+    }\n+    tmp + one()\n+}\n+\n+/// Returns the smallest power of 2 greater than or equal to `n`. If the next\n+/// power of two is greater than the type's maximum value, `None` is returned,\n+/// otherwise the power of 2 is wrapped in `Some`.\n+#[inline]\n+pub fn checked_next_power_of_two<T: Unsigned + Int>(n: T) -> Option<T> {\n+    let halfbits: T = cast(size_of::<T>() * 4).unwrap();\n+    let mut tmp: T = n - one();\n+    let mut shift: T = one();\n+    while shift <= halfbits {\n+        tmp = tmp | (tmp >> shift);\n+        shift = shift << one();\n+    }\n+    tmp.checked_add(&one())\n+}\n \n /// Used for representing the classification of floating point numbers\n #[deriving(Eq)]\n@@ -1589,6 +1621,48 @@ mod tests {\n         assert_eq!(third.checked_mul(&4), None);\n     }\n \n+    macro_rules! test_next_power_of_two(\n+        ($test_name:ident, $T:ident) => (\n+            fn $test_name() {\n+                #[test];\n+                assert_eq!(next_power_of_two::<$T>(0), 0);\n+                let mut next_power = 1;\n+                for i in range::<$T>(1, 40) {\n+                     assert_eq!(next_power_of_two(i), next_power);\n+                     if i == next_power { next_power *= 2 }\n+                }\n+            }\n+        )\n+    )\n+\n+    test_next_power_of_two!(test_next_power_of_two_u8, u8)\n+    test_next_power_of_two!(test_next_power_of_two_u16, u16)\n+    test_next_power_of_two!(test_next_power_of_two_u32, u32)\n+    test_next_power_of_two!(test_next_power_of_two_u64, u64)\n+    test_next_power_of_two!(test_next_power_of_two_uint, uint)\n+\n+    macro_rules! test_checked_next_power_of_two(\n+        ($test_name:ident, $T:ident) => (\n+            fn $test_name() {\n+                #[test];\n+                assert_eq!(checked_next_power_of_two::<$T>(0), None);\n+                let mut next_power = 1;\n+                for i in range::<$T>(1, 40) {\n+                     assert_eq!(checked_next_power_of_two(i), Some(next_power));\n+                     if i == next_power { next_power *= 2 }\n+                }\n+                assert!(checked_next_power_of_two::<$T>($T::MAX / 2).is_some());\n+                assert_eq!(checked_next_power_of_two::<$T>($T::MAX - 1), None);\n+                assert_eq!(checked_next_power_of_two::<$T>($T::MAX), None);\n+            }\n+        )\n+    )\n+\n+    test_checked_next_power_of_two!(test_checked_next_power_of_two_u8, u8)\n+    test_checked_next_power_of_two!(test_checked_next_power_of_two_u16, u16)\n+    test_checked_next_power_of_two!(test_checked_next_power_of_two_u32, u32)\n+    test_checked_next_power_of_two!(test_checked_next_power_of_two_u64, u64)\n+    test_checked_next_power_of_two!(test_checked_next_power_of_two_uint, uint)\n \n     #[deriving(Eq)]\n     struct Value { x: int }"}, {"sha": "7954cdc92f07ea4ed463055e8739297d9bd6bcfa", "filename": "src/libstd/num/uint.rs", "status": "modified", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/9a3583f06d7086c8eca70ae5770ecce1a74680be/src%2Flibstd%2Fnum%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3583f06d7086c8eca70ae5770ecce1a74680be/src%2Flibstd%2Fnum%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint.rs?ref=9a3583f06d7086c8eca70ae5770ecce1a74680be", "patch": "@@ -15,7 +15,6 @@\n use prelude::*;\n \n use default::Default;\n-use mem;\n use num::{Bitwise, Bounded};\n use num::{CheckedAdd, CheckedSub, CheckedMul};\n use num::{CheckedDiv, Zero, One, strconv};\n@@ -79,26 +78,6 @@ pub fn div_round(x: uint, y: uint) -> uint {\n ///\n pub fn div_floor(x: uint, y: uint) -> uint { return x / y; }\n \n-/// Returns the smallest power of 2 greater than or equal to `n`\n-#[inline]\n-pub fn next_power_of_two(n: uint) -> uint {\n-    let halfbits: uint = mem::size_of::<uint>() * 4u;\n-    let mut tmp: uint = n - 1u;\n-    let mut shift: uint = 1u;\n-    while shift <= halfbits { tmp |= tmp >> shift; shift <<= 1u; }\n-    tmp + 1u\n-}\n-\n-/// Returns the smallest power of 2 greater than or equal to `n`\n-#[inline]\n-pub fn next_power_of_two_opt(n: uint) -> Option<uint> {\n-    let halfbits: uint = mem::size_of::<uint>() * 4u;\n-    let mut tmp: uint = n - 1u;\n-    let mut shift: uint = 1u;\n-    while shift <= halfbits { tmp |= tmp >> shift; shift <<= 1u; }\n-    tmp.checked_add(&1)\n-}\n-\n #[cfg(target_word_size = \"32\")]\n impl CheckedAdd for uint {\n     #[inline]\n@@ -165,50 +144,6 @@ impl CheckedMul for uint {\n     }\n }\n \n-#[test]\n-fn test_next_power_of_two() {\n-    assert!((next_power_of_two(0u) == 0u));\n-    assert!((next_power_of_two(1u) == 1u));\n-    assert!((next_power_of_two(2u) == 2u));\n-    assert!((next_power_of_two(3u) == 4u));\n-    assert!((next_power_of_two(4u) == 4u));\n-    assert!((next_power_of_two(5u) == 8u));\n-    assert!((next_power_of_two(6u) == 8u));\n-    assert!((next_power_of_two(7u) == 8u));\n-    assert!((next_power_of_two(8u) == 8u));\n-    assert!((next_power_of_two(9u) == 16u));\n-    assert!((next_power_of_two(10u) == 16u));\n-    assert!((next_power_of_two(11u) == 16u));\n-    assert!((next_power_of_two(12u) == 16u));\n-    assert!((next_power_of_two(13u) == 16u));\n-    assert!((next_power_of_two(14u) == 16u));\n-    assert!((next_power_of_two(15u) == 16u));\n-    assert!((next_power_of_two(16u) == 16u));\n-    assert!((next_power_of_two(17u) == 32u));\n-    assert!((next_power_of_two(18u) == 32u));\n-    assert!((next_power_of_two(19u) == 32u));\n-    assert!((next_power_of_two(20u) == 32u));\n-    assert!((next_power_of_two(21u) == 32u));\n-    assert!((next_power_of_two(22u) == 32u));\n-    assert!((next_power_of_two(23u) == 32u));\n-    assert!((next_power_of_two(24u) == 32u));\n-    assert!((next_power_of_two(25u) == 32u));\n-    assert!((next_power_of_two(26u) == 32u));\n-    assert!((next_power_of_two(27u) == 32u));\n-    assert!((next_power_of_two(28u) == 32u));\n-    assert!((next_power_of_two(29u) == 32u));\n-    assert!((next_power_of_two(30u) == 32u));\n-    assert!((next_power_of_two(31u) == 32u));\n-    assert!((next_power_of_two(32u) == 32u));\n-    assert!((next_power_of_two(33u) == 64u));\n-    assert!((next_power_of_two(34u) == 64u));\n-    assert!((next_power_of_two(35u) == 64u));\n-    assert!((next_power_of_two(36u) == 64u));\n-    assert!((next_power_of_two(37u) == 64u));\n-    assert!((next_power_of_two(38u) == 64u));\n-    assert!((next_power_of_two(39u) == 64u));\n-}\n-\n #[test]\n fn test_overflows() {\n     use uint;"}, {"sha": "cefa39fb3cd244cbe96b968d0e9ec200b13fed3b", "filename": "src/libstd/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a3583f06d7086c8eca70ae5770ecce1a74680be/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3583f06d7086c8eca70ae5770ecce1a74680be/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=9a3583f06d7086c8eca70ae5770ecce1a74680be", "patch": "@@ -104,7 +104,7 @@ use iter::{Iterator, FromIterator, Extendable, range};\n use iter::{Filter, AdditiveIterator, Map};\n use iter::{Rev, DoubleEndedIterator, ExactSize};\n use libc;\n-use num::{Saturating};\n+use num::{Saturating, checked_next_power_of_two};\n use option::{None, Option, Some};\n use ptr;\n use ptr::RawPtr;\n@@ -2640,7 +2640,7 @@ impl OwnedStr for ~str {\n \n     #[inline]\n     fn reserve_at_least(&mut self, n: uint) {\n-        self.reserve(uint::next_power_of_two_opt(n).unwrap_or(n))\n+        self.reserve(checked_next_power_of_two(n).unwrap_or(n))\n     }\n \n     #[inline]"}, {"sha": "74f3a6f6918da8b44a7978d3e878790b623a43db", "filename": "src/libstd/sync/mpmc_bounded_queue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a3583f06d7086c8eca70ae5770ecce1a74680be/src%2Flibstd%2Fsync%2Fmpmc_bounded_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3583f06d7086c8eca70ae5770ecce1a74680be/src%2Flibstd%2Fsync%2Fmpmc_bounded_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpmc_bounded_queue.rs?ref=9a3583f06d7086c8eca70ae5770ecce1a74680be", "patch": "@@ -31,10 +31,10 @@\n \n use clone::Clone;\n use kinds::Send;\n+use num::next_power_of_two;\n use option::{Option, Some, None};\n use sync::arc::UnsafeArc;\n use sync::atomics::{AtomicUint,Relaxed,Release,Acquire};\n-use uint;\n use vec;\n \n struct Node<T> {\n@@ -64,7 +64,7 @@ impl<T: Send> State<T> {\n                 2u\n             } else {\n                 // use next power of 2 as capacity\n-                uint::next_power_of_two(capacity)\n+                next_power_of_two(capacity)\n             }\n         } else {\n             capacity"}, {"sha": "11b5790aeb79245e270cbb2cde677e9142cfbb9b", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a3583f06d7086c8eca70ae5770ecce1a74680be/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3583f06d7086c8eca70ae5770ecce1a74680be/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=9a3583f06d7086c8eca70ae5770ecce1a74680be", "patch": "@@ -109,7 +109,7 @@ use cmp::{Eq, TotalOrd, Ordering, Less, Equal, Greater};\n use cmp;\n use default::Default;\n use iter::*;\n-use num::{Integer, CheckedAdd, Saturating};\n+use num::{Integer, CheckedAdd, Saturating, checked_next_power_of_two};\n use option::{None, Option, Some};\n use ptr::to_unsafe_ptr;\n use ptr;\n@@ -1486,7 +1486,7 @@ impl<T> OwnedVector<T> for ~[T] {\n \n     #[inline]\n     fn reserve_at_least(&mut self, n: uint) {\n-        self.reserve(uint::next_power_of_two_opt(n).unwrap_or(n));\n+        self.reserve(checked_next_power_of_two(n).unwrap_or(n));\n     }\n \n     #[inline]"}]}