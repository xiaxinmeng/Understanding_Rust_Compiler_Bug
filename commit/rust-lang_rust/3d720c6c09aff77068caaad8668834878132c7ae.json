{"sha": "3d720c6c09aff77068caaad8668834878132c7ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNzIwYzZjMDlhZmY3NzA2OGNhYWFkODY2ODgzNDg3ODEzMmM3YWU=", "commit": {"author": {"name": "Florian Zeitz", "email": "florob@babelmonkeys.de", "date": "2013-08-11T01:36:38Z"}, "committer": {"name": "Florian Zeitz", "email": "florob@babelmonkeys.de", "date": "2013-08-21T09:50:07Z"}, "message": "Add support for performing NFD and NFKD on strings", "tree": {"sha": "342398ca2e8df6621dd008445db33816040aa608", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/342398ca2e8df6621dd008445db33816040aa608"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d720c6c09aff77068caaad8668834878132c7ae", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d720c6c09aff77068caaad8668834878132c7ae", "html_url": "https://github.com/rust-lang/rust/commit/3d720c6c09aff77068caaad8668834878132c7ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d720c6c09aff77068caaad8668834878132c7ae/comments", "author": {"login": "Florob", "id": 133684, "node_id": "MDQ6VXNlcjEzMzY4NA==", "avatar_url": "https://avatars.githubusercontent.com/u/133684?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Florob", "html_url": "https://github.com/Florob", "followers_url": "https://api.github.com/users/Florob/followers", "following_url": "https://api.github.com/users/Florob/following{/other_user}", "gists_url": "https://api.github.com/users/Florob/gists{/gist_id}", "starred_url": "https://api.github.com/users/Florob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Florob/subscriptions", "organizations_url": "https://api.github.com/users/Florob/orgs", "repos_url": "https://api.github.com/users/Florob/repos", "events_url": "https://api.github.com/users/Florob/events{/privacy}", "received_events_url": "https://api.github.com/users/Florob/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Florob", "id": 133684, "node_id": "MDQ6VXNlcjEzMzY4NA==", "avatar_url": "https://avatars.githubusercontent.com/u/133684?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Florob", "html_url": "https://github.com/Florob", "followers_url": "https://api.github.com/users/Florob/followers", "following_url": "https://api.github.com/users/Florob/following{/other_user}", "gists_url": "https://api.github.com/users/Florob/gists{/gist_id}", "starred_url": "https://api.github.com/users/Florob/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Florob/subscriptions", "organizations_url": "https://api.github.com/users/Florob/orgs", "repos_url": "https://api.github.com/users/Florob/repos", "events_url": "https://api.github.com/users/Florob/events{/privacy}", "received_events_url": "https://api.github.com/users/Florob/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2675f3e9e77f20c50b0e015037ead170f2601e2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2675f3e9e77f20c50b0e015037ead170f2601e2e", "html_url": "https://github.com/rust-lang/rust/commit/2675f3e9e77f20c50b0e015037ead170f2601e2e"}], "stats": {"total": 143, "additions": 143, "deletions": 0}, "files": [{"sha": "0dd84fd3443463b40bb4532cd0efbf78c0d4dbf9", "filename": "src/libstd/str.rs", "status": "modified", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/3d720c6c09aff77068caaad8668834878132c7ae/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d720c6c09aff77068caaad8668834878132c7ae/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=3d720c6c09aff77068caaad8668834878132c7ae", "patch": "@@ -450,6 +450,97 @@ impl<'self> Iterator<&'self str> for StrSplitIterator<'self> {\n     }\n }\n \n+// Helper functions used for Unicode normalization\n+fn canonical_sort(comb: &mut [(char, u8)]) {\n+    use iterator::range;\n+    use tuple::CopyableTuple;\n+\n+    let len = comb.len();\n+    for i in range(0, len) {\n+        let mut swapped = false;\n+        for j in range(1, len-i) {\n+            let classA = comb[j-1].second();\n+            let classB = comb[j].second();\n+            if classA != 0 && classB != 0 && classA > classB {\n+                comb.swap(j-1, j);\n+                swapped = true;\n+            }\n+        }\n+        if !swapped { break; }\n+    }\n+}\n+\n+#[deriving(Clone)]\n+enum NormalizationForm {\n+    NFD,\n+    NFKD\n+}\n+\n+/// External iterator for a string's normalization's characters.\n+/// Use with the `std::iterator` module.\n+#[deriving(Clone)]\n+struct NormalizationIterator<'self> {\n+    priv kind: NormalizationForm,\n+    priv index: uint,\n+    priv string: &'self str,\n+    priv buffer: ~[(char, u8)],\n+    priv sorted: bool\n+}\n+\n+impl<'self> Iterator<char> for NormalizationIterator<'self> {\n+    #[inline]\n+    fn next(&mut self) -> Option<char> {\n+        use unicode::decompose::canonical_combining_class;\n+\n+        match self.buffer.head_opt() {\n+            Some(&(c, 0)) => {\n+                self.sorted = false;\n+                self.buffer.shift();\n+                return Some(c);\n+            }\n+            Some(&(c, _)) if self.sorted => {\n+                self.buffer.shift();\n+                return Some(c);\n+            }\n+            _ => self.sorted = false\n+        }\n+\n+        let decomposer = match self.kind {\n+            NFD => char::decompose_canonical,\n+            NFKD => char::decompose_compatible\n+        };\n+\n+        while !self.sorted && self.index < self.string.len() {\n+            let CharRange {ch, next} = self.string.char_range_at(self.index);\n+            self.index = next;\n+            do decomposer(ch) |d| {\n+                let class = canonical_combining_class(d);\n+                if class == 0 && !self.sorted {\n+                    canonical_sort(self.buffer);\n+                    self.sorted = true;\n+                }\n+                self.buffer.push((d, class));\n+            }\n+        }\n+\n+        if !self.sorted {\n+            canonical_sort(self.buffer);\n+            self.sorted = true;\n+        }\n+\n+        match self.buffer.shift_opt() {\n+            Some((c, 0)) => {\n+                self.sorted = false;\n+                Some(c)\n+            }\n+            Some((c, _)) => Some(c),\n+            None => None\n+        }\n+    }\n+\n+    fn size_hint(&self) -> (uint, Option<uint>) { (self.string.len(), None) }\n+}\n+\n /// Replace all occurrences of one string with another\n ///\n /// # Arguments\n@@ -1128,6 +1219,8 @@ pub trait StrSlice<'self> {\n     fn line_iter(&self) -> CharSplitIterator<'self, char>;\n     fn any_line_iter(&self) -> AnyLineIterator<'self>;\n     fn word_iter(&self) -> WordIterator<'self>;\n+    fn nfd_iter(&self) -> NormalizationIterator<'self>;\n+    fn nfkd_iter(&self) -> NormalizationIterator<'self>;\n     fn ends_with(&self, needle: &str) -> bool;\n     fn is_whitespace(&self) -> bool;\n     fn is_alphanumeric(&self) -> bool;\n@@ -1343,6 +1436,28 @@ impl<'self> StrSlice<'self> for &'self str {\n         self.split_iter(char::is_whitespace).filter(|s| !s.is_empty())\n     }\n \n+    /// Returns the string in Unicode Normalization Form D (canonical decomposition)\n+    fn nfd_iter(&self) -> NormalizationIterator<'self> {\n+        NormalizationIterator {\n+            index: 0,\n+            string: *self,\n+            buffer: ~[],\n+            sorted: false,\n+            kind: NFD\n+        }\n+    }\n+\n+    /// Returns the string in Unicode Normalization Form KD (compatibility decomposition)\n+    fn nfkd_iter(&self) -> NormalizationIterator<'self> {\n+        NormalizationIterator {\n+            index: 0,\n+            string: *self,\n+            buffer: ~[],\n+            sorted: false,\n+            kind: NFKD\n+        }\n+    }\n+\n     /// Returns true if the string contains only whitespace\n     ///\n     /// Whitespace characters are determined by `char::is_whitespace`\n@@ -3217,6 +3332,34 @@ mod tests {\n         assert_eq!(words, ~[\"M\u00e4ry\", \"h\u00e4d\", \"\u00e4\", \"little\", \"l\u00e4mb\", \"Little\", \"l\u00e4mb\"])\n     }\n \n+    #[test]\n+    fn test_nfd_iter() {\n+        assert_eq!(\"abc\".nfd_iter().collect::<~str>(), ~\"abc\");\n+        assert_eq!(\"\\u1e0b\\u01c4\".nfd_iter().collect::<~str>(), ~\"d\\u0307\\u01c4\");\n+        assert_eq!(\"\\u2026\".nfd_iter().collect::<~str>(), ~\"\\u2026\");\n+        assert_eq!(\"\\u2126\".nfd_iter().collect::<~str>(), ~\"\\u03a9\");\n+        assert_eq!(\"\\u1e0b\\u0323\".nfd_iter().collect::<~str>(), ~\"d\\u0323\\u0307\");\n+        assert_eq!(\"\\u1e0d\\u0307\".nfd_iter().collect::<~str>(), ~\"d\\u0323\\u0307\");\n+        assert_eq!(\"a\\u0301\".nfd_iter().collect::<~str>(), ~\"a\\u0301\");\n+        assert_eq!(\"\\u0301a\".nfd_iter().collect::<~str>(), ~\"\\u0301a\");\n+        assert_eq!(\"\\ud4db\".nfd_iter().collect::<~str>(), ~\"\\u1111\\u1171\\u11b6\");\n+        assert_eq!(\"\\uac1c\".nfd_iter().collect::<~str>(), ~\"\\u1100\\u1162\");\n+    }\n+\n+    #[test]\n+    fn test_nfkd_iter() {\n+        assert_eq!(\"abc\".nfkd_iter().collect::<~str>(), ~\"abc\");\n+        assert_eq!(\"\\u1e0b\\u01c4\".nfkd_iter().collect::<~str>(), ~\"d\\u0307DZ\\u030c\");\n+        assert_eq!(\"\\u2026\".nfkd_iter().collect::<~str>(), ~\"...\");\n+        assert_eq!(\"\\u2126\".nfkd_iter().collect::<~str>(), ~\"\\u03a9\");\n+        assert_eq!(\"\\u1e0b\\u0323\".nfkd_iter().collect::<~str>(), ~\"d\\u0323\\u0307\");\n+        assert_eq!(\"\\u1e0d\\u0307\".nfkd_iter().collect::<~str>(), ~\"d\\u0323\\u0307\");\n+        assert_eq!(\"a\\u0301\".nfkd_iter().collect::<~str>(), ~\"a\\u0301\");\n+        assert_eq!(\"\\u0301a\".nfkd_iter().collect::<~str>(), ~\"\\u0301a\");\n+        assert_eq!(\"\\ud4db\".nfkd_iter().collect::<~str>(), ~\"\\u1111\\u1171\\u11b6\");\n+        assert_eq!(\"\\uac1c\".nfkd_iter().collect::<~str>(), ~\"\\u1100\\u1162\");\n+    }\n+\n     #[test]\n     fn test_line_iter() {\n         let data = \"\\nM\u00e4ry h\u00e4d \u00e4 little l\u00e4mb\\n\\nLittle l\u00e4mb\\n\";"}]}