{"sha": "58e71896506edb701f276158bd2f47e8788a1133", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZTcxODk2NTA2ZWRiNzAxZjI3NjE1OGJkMmY0N2U4Nzg4YTExMzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-05T06:21:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-05T06:21:14Z"}, "message": "Auto merge of #83858 - joshtriplett:unsafe-cell-always-inline, r=Mark-Simulacrum\n\nUse `#[inline(always)]` on trivial UnsafeCell methods\n\nUnsafeCell is the standard building block for shared mutable data\nstructures. UnsafeCell should add zero overhead compared to using raw\npointers directly.\n\nSome reports suggest that debug builds, or even builds at opt-level 1,\nmay not always be inlining its methods. Mark the methods as\n`#[inline(always)]`, since once inlined the methods should result in no\nactual code other than field accesses.", "tree": {"sha": "9cde6ac1b3496550920bbe9d32b98371be862e0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cde6ac1b3496550920bbe9d32b98371be862e0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58e71896506edb701f276158bd2f47e8788a1133", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58e71896506edb701f276158bd2f47e8788a1133", "html_url": "https://github.com/rust-lang/rust/commit/58e71896506edb701f276158bd2f47e8788a1133", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58e71896506edb701f276158bd2f47e8788a1133/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1b0a1597c40b55b81e5b95ea5fc825a1287b2bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1b0a1597c40b55b81e5b95ea5fc825a1287b2bb", "html_url": "https://github.com/rust-lang/rust/commit/b1b0a1597c40b55b81e5b95ea5fc825a1287b2bb"}, {"sha": "37498a19dedb4105f8800a7cc2473803fd4bbccf", "url": "https://api.github.com/repos/rust-lang/rust/commits/37498a19dedb4105f8800a7cc2473803fd4bbccf", "html_url": "https://github.com/rust-lang/rust/commit/37498a19dedb4105f8800a7cc2473803fd4bbccf"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "4820588df25cd3bcef05b3602888d0e7f9fc31c3", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/58e71896506edb701f276158bd2f47e8788a1133/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e71896506edb701f276158bd2f47e8788a1133/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=58e71896506edb701f276158bd2f47e8788a1133", "patch": "@@ -1815,7 +1815,7 @@ impl<T> UnsafeCell<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_unsafe_cell_new\", since = \"1.32.0\")]\n-    #[inline]\n+    #[inline(always)]\n     pub const fn new(value: T) -> UnsafeCell<T> {\n         UnsafeCell { value }\n     }\n@@ -1831,7 +1831,7 @@ impl<T> UnsafeCell<T> {\n     ///\n     /// let five = uc.into_inner();\n     /// ```\n-    #[inline]\n+    #[inline(always)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_cell_into_inner\", issue = \"78729\")]\n     pub const fn into_inner(self) -> T {\n@@ -1856,7 +1856,7 @@ impl<T: ?Sized> UnsafeCell<T> {\n     ///\n     /// let five = uc.get();\n     /// ```\n-    #[inline]\n+    #[inline(always)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_unsafecell_get\", since = \"1.32.0\")]\n     pub const fn get(&self) -> *mut T {\n@@ -1881,7 +1881,7 @@ impl<T: ?Sized> UnsafeCell<T> {\n     ///\n     /// assert_eq!(*c.get_mut(), 6);\n     /// ```\n-    #[inline]\n+    #[inline(always)]\n     #[stable(feature = \"unsafe_cell_get_mut\", since = \"1.50.0\")]\n     pub fn get_mut(&mut self) -> &mut T {\n         &mut self.value\n@@ -1914,7 +1914,7 @@ impl<T: ?Sized> UnsafeCell<T> {\n     ///\n     /// assert_eq!(uc.into_inner(), 5);\n     /// ```\n-    #[inline]\n+    #[inline(always)]\n     #[unstable(feature = \"unsafe_cell_raw_get\", issue = \"66358\")]\n     pub const fn raw_get(this: *const Self) -> *mut T {\n         // We can just cast the pointer from `UnsafeCell<T>` to `T` because of"}]}