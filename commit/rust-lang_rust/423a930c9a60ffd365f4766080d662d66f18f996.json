{"sha": "423a930c9a60ffd365f4766080d662d66f18f996", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyM2E5MzBjOWE2MGZmZDM2NWY0NzY2MDgwZDY2MmQ2NmYxOGY5OTY=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-08-03T10:07:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-03T10:07:48Z"}, "message": "Rollup merge of #87708 - the8472:canonical_v6, r=dtolnay\n\nAdd convenience method for handling ipv4-mapped addresses by canonicalizing them\n\nThis simplifies checking common properties in an address-family-agnostic\nway since #86335 commits to not checking IPv4 semantics\nof IPv4-mapped addresses in the `Ipv6Addr` property methods.", "tree": {"sha": "3a13b53cc9d4826fcb73e0d18a61390dd7392e48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a13b53cc9d4826fcb73e0d18a61390dd7392e48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/423a930c9a60ffd365f4766080d662d66f18f996", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhCRV0CRBK7hj4Ov3rIwAA1OsIAJNiZfYG7EomjXnfvUatXfeS\neSb6QGS4QljkhvM/+r6rqomFjRg7sfoZLVDvceHkHaAy1GDZy6FMNQ9ViaTHd/vG\nrYsaNT0I1GQ8LWAWLvkgQSEibEkbffu0oWwS052mIEWKcy/JptNVVNYqNaWmUg3x\nEeCNfhUsdbRfZxSwwjTvVa4d77TfQYKYRLZtfqcKRKRsqXGwVuyoNVNe/swHR/ZV\nqKuT4lu8W35Vm1rTTYmf0LVSUuk44rgippmYbk47Zxss81l1zm6oLt5D0VPW4FxO\nHUYont/YZHxEdat9w4iHqLmZcL1r60dt2xLnn6T9IuWeKBDGwdMTeOOufuQg/xY=\n=eX0e\n-----END PGP SIGNATURE-----\n", "payload": "tree 3a13b53cc9d4826fcb73e0d18a61390dd7392e48\nparent ebebc7a12df3354d3c49b97b9aa07a7bb0c15aa2\nparent a5cdff3bd42e82f58de45dd49d468a6d4c54b54b\nauthor Yuki Okushi <jtitor@2k36.org> 1627985268 +0900\ncommitter GitHub <noreply@github.com> 1627985268 +0900\n\nRollup merge of #87708 - the8472:canonical_v6, r=dtolnay\n\nAdd convenience method for handling ipv4-mapped addresses by canonicalizing them\n\nThis simplifies checking common properties in an address-family-agnostic\nway since #86335 commits to not checking IPv4 semantics\nof IPv4-mapped addresses in the `Ipv6Addr` property methods.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/423a930c9a60ffd365f4766080d662d66f18f996", "html_url": "https://github.com/rust-lang/rust/commit/423a930c9a60ffd365f4766080d662d66f18f996", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/423a930c9a60ffd365f4766080d662d66f18f996/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebebc7a12df3354d3c49b97b9aa07a7bb0c15aa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebebc7a12df3354d3c49b97b9aa07a7bb0c15aa2", "html_url": "https://github.com/rust-lang/rust/commit/ebebc7a12df3354d3c49b97b9aa07a7bb0c15aa2"}, {"sha": "a5cdff3bd42e82f58de45dd49d468a6d4c54b54b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5cdff3bd42e82f58de45dd49d468a6d4c54b54b", "html_url": "https://github.com/rust-lang/rust/commit/a5cdff3bd42e82f58de45dd49d468a6d4c54b54b"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "ac92cfe19cd334a5428b4fb907b8adaed5eb6985", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/423a930c9a60ffd365f4766080d662d66f18f996/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/423a930c9a60ffd365f4766080d662d66f18f996/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=423a930c9a60ffd365f4766080d662d66f18f996", "patch": "@@ -379,6 +379,29 @@ impl IpAddr {\n     pub const fn is_ipv6(&self) -> bool {\n         matches!(self, IpAddr::V6(_))\n     }\n+\n+    /// Converts this address to an `IpAddr::V4` if it is a IPv4-mapped IPv6 addresses, otherwise it\n+    /// return `self` as-is.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ip)]\n+    /// use std::net::{IpAddr, Ipv4Addr, Ipv6Addr};\n+    ///\n+    /// assert_eq!(IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)).to_canonical().is_loopback(), true);\n+    /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0x7f00, 0x1)).is_loopback(), false);\n+    /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0x7f00, 0x1)).to_canonical().is_loopback(), true);\n+    /// ```\n+    #[inline]\n+    #[rustc_const_unstable(feature = \"const_ip\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n+    pub const fn to_canonical(&self) -> IpAddr {\n+        match self {\n+            &v4 @ IpAddr::V4(_) => v4,\n+            IpAddr::V6(v6) => v6.to_canonical(),\n+        }\n+    }\n }\n \n impl Ipv4Addr {\n@@ -1598,6 +1621,28 @@ impl Ipv6Addr {\n         }\n     }\n \n+    /// Converts this address to an `IpAddr::V4` if it is a IPv4-mapped addresses, otherwise it\n+    /// returns self wrapped in a `IpAddr::V6`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ip)]\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0x7f00, 0x1).is_loopback(), false);\n+    /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0x7f00, 0x1).to_canonical().is_loopback(), true);\n+    /// ```\n+    #[inline]\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    #[unstable(feature = \"ip\", issue = \"27709\")]\n+    pub const fn to_canonical(&self) -> IpAddr {\n+        if let Some(mapped) = self.to_ipv4_mapped() {\n+            return IpAddr::V4(mapped);\n+        }\n+        IpAddr::V6(*self)\n+    }\n+\n     /// Returns the sixteen eight-bit integers the IPv6 address consists of.\n     ///\n     /// ```"}]}