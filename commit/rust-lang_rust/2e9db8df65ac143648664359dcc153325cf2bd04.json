{"sha": "2e9db8df65ac143648664359dcc153325cf2bd04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlOWRiOGRmNjVhYzE0MzY0ODY2NDM1OWRjYzE1MzMyNWNmMmJkMDQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-07T15:58:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-07T15:58:57Z"}, "message": "Rollup merge of #71962 - jsoref:grammar, r=Dylan-DPC\n\nGrammar\n\nI've split this into individual changes so that people can veto individually. I'm not attached to most of them.\n\n`zeroes` vs. `zeros` is why I took the effort to run this through app.grammarly (which disappointingly didn't even notice).", "tree": {"sha": "7ad9b70b1d50c9d74b88672567f7656e1232ef4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ad9b70b1d50c9d74b88672567f7656e1232ef4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e9db8df65ac143648664359dcc153325cf2bd04", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJetDBBCRBK7hj4Ov3rIwAAdHIIAEQjjhSHXFGQv8Tm62oZyDFX\nxxOPhc+QfBnlJdfIPJ09pKWw7/llehnjW1HQbXb+LtyGOSrDRsBgNGEgRFlvqYeA\nd8g1BU+SrYZpeuP6hr8vStDe+CWRZGFlsZVNwebj3F6zP1JR+7sCxtvgGMG9U8Di\nz/pR6NJgiyt7u0bn/0EkPdX7CCRGRFnerzhOcUTlJdZVABVFvdo7SNk3MlDadNBR\ntXrnzLohaZuubYoLDNDAeVLzxyyNaVzDjIE24aBjFo34/qJpQ8CsKn9RtPFq26wQ\nenV9oN9jY2qQxkbglleD9as44orK19C+ATILxwSJRnVSYJy6LbGMn8PjVu6ig6M=\n=0HSP\n-----END PGP SIGNATURE-----\n", "payload": "tree 7ad9b70b1d50c9d74b88672567f7656e1232ef4e\nparent 9e4a745b8dfa2188e9dcbfc58ac8e4cd25537cde\nparent 6c8c3f8ac41e067ab718f0cfda20256a3a680816\nauthor Dylan DPC <dylan.dpc@gmail.com> 1588867137 +0200\ncommitter GitHub <noreply@github.com> 1588867137 +0200\n\nRollup merge of #71962 - jsoref:grammar, r=Dylan-DPC\n\nGrammar\n\nI've split this into individual changes so that people can veto individually. I'm not attached to most of them.\n\n`zeroes` vs. `zeros` is why I took the effort to run this through app.grammarly (which disappointingly didn't even notice).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e9db8df65ac143648664359dcc153325cf2bd04", "html_url": "https://github.com/rust-lang/rust/commit/2e9db8df65ac143648664359dcc153325cf2bd04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e9db8df65ac143648664359dcc153325cf2bd04/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e4a745b8dfa2188e9dcbfc58ac8e4cd25537cde", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e4a745b8dfa2188e9dcbfc58ac8e4cd25537cde", "html_url": "https://github.com/rust-lang/rust/commit/9e4a745b8dfa2188e9dcbfc58ac8e4cd25537cde"}, {"sha": "6c8c3f8ac41e067ab718f0cfda20256a3a680816", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c8c3f8ac41e067ab718f0cfda20256a3a680816", "html_url": "https://github.com/rust-lang/rust/commit/6c8c3f8ac41e067ab718f0cfda20256a3a680816"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "26077f3c8d15045820c9912e54d4facd790f9954", "filename": "src/liballoc/fmt.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2e9db8df65ac143648664359dcc153325cf2bd04/src%2Fliballoc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e9db8df65ac143648664359dcc153325cf2bd04/src%2Fliballoc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ffmt.rs?ref=2e9db8df65ac143648664359dcc153325cf2bd04", "patch": "@@ -50,8 +50,8 @@\n //! The internal iterator over the argument has not been advanced by the time\n //! the first `{}` is seen, so it prints the first argument. Then upon reaching\n //! the second `{}`, the iterator has advanced forward to the second argument.\n-//! Essentially, parameters which explicitly name their argument do not affect\n-//! parameters which do not name an argument in terms of positional specifiers.\n+//! Essentially, parameters that explicitly name their argument do not affect\n+//! parameters that do not name an argument in terms of positional specifiers.\n //!\n //! A format string is required to use all of its arguments, otherwise it is a\n //! compile-time error. You may refer to the same argument more than once in the\n@@ -60,7 +60,7 @@\n //! ## Named parameters\n //!\n //! Rust itself does not have a Python-like equivalent of named parameters to a\n-//! function, but the [`format!`] macro is a syntax extension which allows it to\n+//! function, but the [`format!`] macro is a syntax extension that allows it to\n //! leverage named parameters. Named parameters are listed at the end of the\n //! argument list and have the syntax:\n //!\n@@ -77,7 +77,7 @@\n //! ```\n //!\n //! It is not valid to put positional parameters (those without names) after\n-//! arguments which have names. Like with positional parameters, it is not\n+//! arguments that have names. Like with positional parameters, it is not\n //! valid to provide named parameters that are unused by the format string.\n //!\n //! # Formatting Parameters\n@@ -130,7 +130,7 @@\n //!\n //! The default [fill/alignment](#fillalignment) for non-numerics is a space and\n //! left-aligned. The\n-//! defaults for numeric formatters is also a space but with right-alignment. If\n+//! default for numeric formatters is also a space character but with right-alignment. If\n //! the `0` flag (see below) is specified for numerics, then the implicit fill character is\n //! `0`.\n //!\n@@ -161,7 +161,7 @@\n //!         `Signed` trait. This flag indicates that the correct sign (`+` or `-`)\n //!         should always be printed.\n //! * `-` - Currently not used\n-//! * `#` - This flag is indicates that the \"alternate\" form of printing should\n+//! * `#` - This flag indicates that the \"alternate\" form of printing should\n //!         be used. The alternate forms are:\n //!     * `#?` - pretty-print the [`Debug`] formatting\n //!     * `#x` - precedes the argument with a `0x`\n@@ -173,9 +173,9 @@\n //!         like `{:08}` would yield `00000001` for the integer `1`, while the\n //!         same format would yield `-0000001` for the integer `-1`. Notice that\n //!         the negative version has one fewer zero than the positive version.\n-//!         Note that padding zeroes are always placed after the sign (if any)\n+//!         Note that padding zeros are always placed after the sign (if any)\n //!         and before the digits. When used together with the `#` flag, a similar\n-//!         rule applies: padding zeroes are inserted after the prefix but before\n+//!         rule applies: padding zeros are inserted after the prefix but before\n //!         the digits. The prefix is included in the total width.\n //!\n //! ## Precision\n@@ -251,7 +251,7 @@\n //!\n //! In some programming languages, the behavior of string formatting functions\n //! depends on the operating system's locale setting. The format functions\n-//! provided by Rust's standard library do not have any concept of locale, and\n+//! provided by Rust's standard library do not have any concept of locale and\n //! will produce the same results on all systems regardless of user\n //! configuration.\n //!\n@@ -470,7 +470,7 @@\n //!\n //! ### `format_args!`\n //!\n-//! This is a curious macro which is used to safely pass around\n+//! This is a curious macro used to safely pass around\n //! an opaque object describing the format string. This object\n //! does not require any heap allocations to create, and it only\n //! references information on the stack. Under the hood, all of\n@@ -495,7 +495,7 @@\n //! This structure can then be passed to the [`write`] and [`format`] functions\n //! inside this module in order to process the format string.\n //! The goal of this macro is to even further prevent intermediate allocations\n-//! when dealing formatting strings.\n+//! when dealing with formatting strings.\n //!\n //! For example, a logging library could use the standard formatting syntax, but\n //! it would internally pass around this structure until it has been determined"}]}