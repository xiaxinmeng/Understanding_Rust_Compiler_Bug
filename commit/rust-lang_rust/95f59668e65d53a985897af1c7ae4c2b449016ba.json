{"sha": "95f59668e65d53a985897af1c7ae4c2b449016ba", "node_id": "C_kwDOAAsO6NoAKDk1ZjU5NjY4ZTY1ZDUzYTk4NTg5N2FmMWM3YWU0YzJiNDQ5MDE2YmE", "commit": {"author": {"name": "Sebastian Ziebell", "email": "sebastian.ziebell@ferrous-systems.com", "date": "2023-05-15T15:38:25Z"}, "committer": {"name": "Sebastian Ziebell", "email": "sebastian.ziebell@ferrous-systems.com", "date": "2023-05-26T11:13:15Z"}, "message": "Fix removal of generic param from list\n\nThis removes an existing generic param from the `GenericParamList`. It\nalso considers to remove the extra colon & whitespace to the previous\nsibling.\n\n* change order to get all param types first and mark them as mutable\n  before the first edit happens\n* add helper function to remove a generic parameter\n* fix test output", "tree": {"sha": "8ee6eb079e067eac9ffffff05a3b542d7ca0c306", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ee6eb079e067eac9ffffff05a3b542d7ca0c306"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95f59668e65d53a985897af1c7ae4c2b449016ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95f59668e65d53a985897af1c7ae4c2b449016ba", "html_url": "https://github.com/rust-lang/rust/commit/95f59668e65d53a985897af1c7ae4c2b449016ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95f59668e65d53a985897af1c7ae4c2b449016ba/comments", "author": {"login": "justahero", "id": 1305185, "node_id": "MDQ6VXNlcjEzMDUxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1305185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/justahero", "html_url": "https://github.com/justahero", "followers_url": "https://api.github.com/users/justahero/followers", "following_url": "https://api.github.com/users/justahero/following{/other_user}", "gists_url": "https://api.github.com/users/justahero/gists{/gist_id}", "starred_url": "https://api.github.com/users/justahero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/justahero/subscriptions", "organizations_url": "https://api.github.com/users/justahero/orgs", "repos_url": "https://api.github.com/users/justahero/repos", "events_url": "https://api.github.com/users/justahero/events{/privacy}", "received_events_url": "https://api.github.com/users/justahero/received_events", "type": "User", "site_admin": false}, "committer": {"login": "justahero", "id": 1305185, "node_id": "MDQ6VXNlcjEzMDUxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1305185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/justahero", "html_url": "https://github.com/justahero", "followers_url": "https://api.github.com/users/justahero/followers", "following_url": "https://api.github.com/users/justahero/following{/other_user}", "gists_url": "https://api.github.com/users/justahero/gists{/gist_id}", "starred_url": "https://api.github.com/users/justahero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/justahero/subscriptions", "organizations_url": "https://api.github.com/users/justahero/orgs", "repos_url": "https://api.github.com/users/justahero/repos", "events_url": "https://api.github.com/users/justahero/events{/privacy}", "received_events_url": "https://api.github.com/users/justahero/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59f8827a6fbd635d5314bec0f88284e8f3c603fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/59f8827a6fbd635d5314bec0f88284e8f3c603fd", "html_url": "https://github.com/rust-lang/rust/commit/59f8827a6fbd635d5314bec0f88284e8f3c603fd"}], "stats": {"total": 47, "additions": 30, "deletions": 17}, "files": [{"sha": "f658ba768d8ab84ac68122e91cd7287e73a89d43", "filename": "crates/ide-assists/src/handlers/replace_named_generic_with_impl.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/95f59668e65d53a985897af1c7ae4c2b449016ba/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_named_generic_with_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f59668e65d53a985897af1c7ae4c2b449016ba/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_named_generic_with_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_named_generic_with_impl.rs?ref=95f59668e65d53a985897af1c7ae4c2b449016ba", "patch": "@@ -1,9 +1,5 @@\n use syntax::{\n-    ast::{\n-        self,\n-        make::{self, impl_trait_type},\n-        HasGenericParams, HasName, HasTypeBounds,\n-    },\n+    ast::{self, make::impl_trait_type, HasGenericParams, HasName, HasTypeBounds},\n     ted, AstNode,\n };\n \n@@ -27,7 +23,7 @@ pub(crate) fn replace_named_generic_with_impl(\n     // finds `<P: AsRef<Path>>`\n     let type_param = ctx.find_node_at_offset::<ast::TypeParam>()?;\n \n-    // The list of type bounds / traits for generic name `P`\n+    // The list of type bounds / traits: `AsRef<Path>`\n     let type_bound_list = type_param.type_bound_list()?;\n \n     // returns `P`\n@@ -67,24 +63,26 @@ pub(crate) fn replace_named_generic_with_impl(\n             let type_param = edit.make_mut(type_param);\n             let fn_ = edit.make_mut(fn_);\n \n-            // Replace generic type in `<P: AsRef<Path>>` to `<P>`\n-            let new_ty = make::ty(&type_param_name.to_string()).clone_for_update();\n-            ted::replace(type_param.syntax(), new_ty.syntax());\n+            // get all params\n+            let param_types = params\n+                .iter()\n+                .filter_map(|param| match param.ty() {\n+                    Some(ast::Type::PathType(param_type)) => Some(edit.make_mut(param_type)),\n+                    _ => None,\n+                })\n+                .collect::<Vec<_>>();\n \n             if let Some(generic_params) = fn_.generic_param_list() {\n+                generic_params.remove_generic_param(ast::GenericParam::TypeParam(type_param));\n                 if generic_params.generic_params().count() == 0 {\n                     ted::remove(generic_params.syntax());\n                 }\n             }\n \n-            // Replace generic type parameter: `foo(p: P)` -> `foo(p: impl AsRef<Path>)`\n-            let new_bounds = impl_trait_type(type_bound_list).clone_for_update();\n-\n-            for param in params {\n-                if let Some(ast::Type::PathType(param_type)) = param.ty() {\n-                    let param_type = edit.make_mut(param_type).clone_for_update();\n-                    ted::replace(param_type.syntax(), new_bounds.syntax());\n-                }\n+            // get type bounds in signature type: `P` -> `impl AsRef<Path>`\n+            let new_bounds = impl_trait_type(type_bound_list);\n+            for param_type in param_types.iter().rev() {\n+                ted::replace(param_type.syntax(), new_bounds.clone_for_update().syntax());\n             }\n         },\n     )"}, {"sha": "b3ea6ca8d46a12bfa539916cc6604784e9091fd1", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/95f59668e65d53a985897af1c7ae4c2b449016ba/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95f59668e65d53a985897af1c7ae4c2b449016ba/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=95f59668e65d53a985897af1c7ae4c2b449016ba", "patch": "@@ -236,6 +236,21 @@ impl ast::GenericParamList {\n         }\n     }\n \n+    /// Removes the existing generic param\n+    pub fn remove_generic_param(&self, generic_param: ast::GenericParam) {\n+        if let Some(previous) = generic_param.syntax().prev_sibling() {\n+            if let Some(next_token) = previous.next_sibling_or_token() {\n+                ted::remove_all(next_token..=generic_param.syntax().clone().into());\n+            }\n+        } else if let Some(next) = generic_param.syntax().next_sibling() {\n+            if let Some(next_token) = next.prev_sibling_or_token() {\n+                ted::remove_all(generic_param.syntax().clone().into()..=next_token);\n+            }\n+        } else {\n+            ted::remove(generic_param.syntax());\n+        }\n+    }\n+\n     /// Constructs a matching [`ast::GenericArgList`]\n     pub fn to_generic_args(&self) -> ast::GenericArgList {\n         let args = self.generic_params().filter_map(|param| match param {"}]}