{"sha": "efd582c6d8f14ffd730c5911101789e40eccec31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZDU4MmM2ZDhmMTRmZmQ3MzBjNTkxMTEwMTc4OWU0MGVjY2VjMzE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-06T08:04:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-06T08:04:16Z"}, "message": "explicitly list memory kinds for stacked borrows", "tree": {"sha": "dd3b8ac49863b3bbca7066639b74b368b9dbaaa1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd3b8ac49863b3bbca7066639b74b368b9dbaaa1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efd582c6d8f14ffd730c5911101789e40eccec31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efd582c6d8f14ffd730c5911101789e40eccec31", "html_url": "https://github.com/rust-lang/rust/commit/efd582c6d8f14ffd730c5911101789e40eccec31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efd582c6d8f14ffd730c5911101789e40eccec31/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15e81a94b1aff99f7c38151d6976757ee0ed0097", "url": "https://api.github.com/repos/rust-lang/rust/commits/15e81a94b1aff99f7c38151d6976757ee0ed0097", "html_url": "https://github.com/rust-lang/rust/commit/15e81a94b1aff99f7c38151d6976757ee0ed0097"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "32cecf855d4996cddfb493599f40d7be9be95407", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/efd582c6d8f14ffd730c5911101789e40eccec31/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd582c6d8f14ffd730c5911101789e40eccec31/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=efd582c6d8f14ffd730c5911101789e40eccec31", "patch": "@@ -513,8 +513,14 @@ impl Stacks {\n                 | MiriMemoryKind::Tls\n                 | MiriMemoryKind::Env,\n             ) => (extra.global_base_ptr(id), Permission::SharedReadWrite),\n-            // Everything else we handle like raw pointers for now.\n-            _ => {\n+            // Everything else we only track precisely when raw pointers are tagged, for now.\n+            MemoryKind::CallerLocation\n+            | MemoryKind::Machine(\n+                MiriMemoryKind::Rust\n+                | MiriMemoryKind::C\n+                | MiriMemoryKind::WinHeap\n+                | MiriMemoryKind::Machine,\n+            ) => {\n                 let tag =\n                     if extra.track_raw { Tag::Tagged(extra.new_ptr()) } else { Tag::Untagged };\n                 (tag, Permission::SharedReadWrite)"}]}