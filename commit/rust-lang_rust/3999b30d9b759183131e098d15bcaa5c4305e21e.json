{"sha": "3999b30d9b759183131e098d15bcaa5c4305e21e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5OTliMzBkOWI3NTkxODMxMzFlMDk4ZDE1YmNhYTVjNDMwNWUyMWU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-24T08:04:46Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-24T08:04:46Z"}, "message": "Update stderrs", "tree": {"sha": "b5bad7e2775fc1af0c48a327ca00428f350df7ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5bad7e2775fc1af0c48a327ca00428f350df7ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3999b30d9b759183131e098d15bcaa5c4305e21e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3999b30d9b759183131e098d15bcaa5c4305e21e", "html_url": "https://github.com/rust-lang/rust/commit/3999b30d9b759183131e098d15bcaa5c4305e21e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3999b30d9b759183131e098d15bcaa5c4305e21e/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dc73c45d59c29a2fdf3169f114fea9cce942616", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dc73c45d59c29a2fdf3169f114fea9cce942616", "html_url": "https://github.com/rust-lang/rust/commit/2dc73c45d59c29a2fdf3169f114fea9cce942616"}], "stats": {"total": 95, "additions": 69, "deletions": 26}, "files": [{"sha": "048639eb01ed4bba71463a3282802a6162948560", "filename": "tests/ui/expect.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3999b30d9b759183131e098d15bcaa5c4305e21e/tests%2Fui%2Fexpect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3999b30d9b759183131e098d15bcaa5c4305e21e/tests%2Fui%2Fexpect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect.stderr?ref=3999b30d9b759183131e098d15bcaa5c4305e21e", "patch": "@@ -1,18 +1,20 @@\n-error: used `expect()` on `an Option` value. If this value is an `None` it will panic\n+error: used `expect()` on `an Option` value\n   --> $DIR/expect.rs:5:13\n    |\n LL |     let _ = opt.expect(\"\");\n    |             ^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::option-expect-used` implied by `-D warnings`\n+   = help: If this value is an `None`, it will panic.\n \n-error: used `expect()` on `a Result` value. If this value is an `Err` it will panic\n+error: used `expect()` on `a Result` value\n   --> $DIR/expect.rs:10:13\n    |\n LL |     let _ = res.expect(\"\");\n    |             ^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::result-expect-used` implied by `-D warnings`\n+   = help: If this value is an `Err`, it will panic.\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3888143ee05ff9d2bc55b26b430e7b7dc3587fcd", "filename": "tests/ui/filter_methods.stderr", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3999b30d9b759183131e098d15bcaa5c4305e21e/tests%2Fui%2Ffilter_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3999b30d9b759183131e098d15bcaa5c4305e21e/tests%2Fui%2Ffilter_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_methods.stderr?ref=3999b30d9b759183131e098d15bcaa5c4305e21e", "patch": "@@ -1,12 +1,13 @@\n-error: called `filter(p).map(q)` on an `Iterator`. This is more succinctly expressed by calling `.filter_map(..)` instead.\n+error: called `filter(p).map(q)` on an `Iterator`\n   --> $DIR/filter_methods.rs:5:21\n    |\n LL |     let _: Vec<_> = vec![5; 6].into_iter().filter(|&x| x == 0).map(|x| x * 2).collect();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::filter-map` implied by `-D warnings`\n+   = help: This is more succinctly expressed by calling `.filter_map(..)` instead.\n \n-error: called `filter(p).flat_map(q)` on an `Iterator`. This is more succinctly expressed by calling `.flat_map(..)` and filtering by returning an empty Iterator.\n+error: called `filter(p).flat_map(q)` on an `Iterator`\n   --> $DIR/filter_methods.rs:7:21\n    |\n LL |       let _: Vec<_> = vec![5_i8; 6]\n@@ -15,8 +16,10 @@ LL | |         .into_iter()\n LL | |         .filter(|&x| x == 0)\n LL | |         .flat_map(|x| x.checked_mul(2))\n    | |_______________________________________^\n+   |\n+   = help: This is more succinctly expressed by calling `.flat_map(..)` and filtering by returning an empty Iterator.\n \n-error: called `filter_map(p).flat_map(q)` on an `Iterator`. This is more succinctly expressed by calling `.flat_map(..)` and filtering by returning an empty Iterator.\n+error: called `filter_map(p).flat_map(q)` on an `Iterator`\n   --> $DIR/filter_methods.rs:13:21\n    |\n LL |       let _: Vec<_> = vec![5_i8; 6]\n@@ -25,8 +28,10 @@ LL | |         .into_iter()\n LL | |         .filter_map(|x| x.checked_mul(2))\n LL | |         .flat_map(|x| x.checked_mul(2))\n    | |_______________________________________^\n+   |\n+   = help: This is more succinctly expressed by calling `.flat_map(..)` and filtering by returning an empty Iterator.\n \n-error: called `filter_map(p).map(q)` on an `Iterator`. This is more succinctly expressed by only calling `.filter_map(..)` instead.\n+error: called `filter_map(p).map(q)` on an `Iterator`\n   --> $DIR/filter_methods.rs:19:21\n    |\n LL |       let _: Vec<_> = vec![5_i8; 6]\n@@ -35,6 +40,8 @@ LL | |         .into_iter()\n LL | |         .filter_map(|x| x.checked_mul(2))\n LL | |         .map(|x| x.checked_mul(2))\n    | |__________________________________^\n+   |\n+   = help: This is more succinctly expressed by only calling `.filter_map(..)` instead.\n \n error: aborting due to 4 previous errors\n "}, {"sha": "844b5d5b661494a2b6f14f9e005f8795daba18e5", "filename": "tests/ui/find_map.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3999b30d9b759183131e098d15bcaa5c4305e21e/tests%2Fui%2Ffind_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3999b30d9b759183131e098d15bcaa5c4305e21e/tests%2Fui%2Ffind_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffind_map.stderr?ref=3999b30d9b759183131e098d15bcaa5c4305e21e", "patch": "@@ -1,12 +1,13 @@\n-error: called `find(p).map(q)` on an `Iterator`. This is more succinctly expressed by calling `.find_map(..)` instead.\n+error: called `find(p).map(q)` on an `Iterator`\n   --> $DIR/find_map.rs:20:26\n    |\n LL |     let _: Option<i32> = a.iter().find(|s| s.parse::<i32>().is_ok()).map(|s| s.parse().unwrap());\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::find-map` implied by `-D warnings`\n+   = help: This is more succinctly expressed by calling `.find_map(..)` instead.\n \n-error: called `find(p).map(q)` on an `Iterator`. This is more succinctly expressed by calling `.find_map(..)` instead.\n+error: called `find(p).map(q)` on an `Iterator`\n   --> $DIR/find_map.rs:22:29\n    |\n LL |       let _: Option<Flavor> = desserts_of_the_week\n@@ -18,6 +19,8 @@ LL | |             Dessert::Cake(_) => true,\n LL | |             _ => unreachable!(),\n LL | |         });\n    | |__________^\n+   |\n+   = help: This is more succinctly expressed by calling `.find_map(..)` instead.\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d66f70eb17278bc4f076497f18fa9a4243c47579", "filename": "tests/ui/iter_nth.stderr", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3999b30d9b759183131e098d15bcaa5c4305e21e/tests%2Fui%2Fiter_nth.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3999b30d9b759183131e098d15bcaa5c4305e21e/tests%2Fui%2Fiter_nth.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_nth.stderr?ref=3999b30d9b759183131e098d15bcaa5c4305e21e", "patch": "@@ -1,46 +1,59 @@\n-error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n+error: called `.iter().nth()` on a Vec\n   --> $DIR/iter_nth.rs:33:23\n    |\n LL |         let bad_vec = some_vec.iter().nth(3);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::iter-nth` implied by `-D warnings`\n+   = help: Calling `.get()` is both faster and more readable\n \n-error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n+error: called `.iter().nth()` on a slice\n   --> $DIR/iter_nth.rs:34:26\n    |\n LL |         let bad_slice = &some_vec[..].iter().nth(3);\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: Calling `.get()` is both faster and more readable\n \n-error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n+error: called `.iter().nth()` on a slice\n   --> $DIR/iter_nth.rs:35:31\n    |\n LL |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: Calling `.get()` is both faster and more readable\n \n-error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n+error: called `.iter().nth()` on a VecDeque\n   --> $DIR/iter_nth.rs:36:29\n    |\n LL |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: Calling `.get()` is both faster and more readable\n \n-error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n+error: called `.iter_mut().nth()` on a Vec\n   --> $DIR/iter_nth.rs:41:23\n    |\n LL |         let bad_vec = some_vec.iter_mut().nth(3);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: Calling `.get_mut()` is both faster and more readable\n \n-error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n+error: called `.iter_mut().nth()` on a slice\n   --> $DIR/iter_nth.rs:44:26\n    |\n LL |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: Calling `.get_mut()` is both faster and more readable\n \n-error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n+error: called `.iter_mut().nth()` on a VecDeque\n   --> $DIR/iter_nth.rs:47:29\n    |\n LL |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: Calling `.get_mut()` is both faster and more readable\n \n error: aborting due to 7 previous errors\n "}, {"sha": "fff85edb7b057b56e6a9651a95f43251905db04a", "filename": "tests/ui/iter_skip_next.stderr", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3999b30d9b759183131e098d15bcaa5c4305e21e/tests%2Fui%2Fiter_skip_next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3999b30d9b759183131e098d15bcaa5c4305e21e/tests%2Fui%2Fiter_skip_next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_skip_next.stderr?ref=3999b30d9b759183131e098d15bcaa5c4305e21e", "patch": "@@ -1,28 +1,35 @@\n-error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n+error: called `skip(x).next()` on an iterator\n   --> $DIR/iter_skip_next.rs:13:13\n    |\n LL |     let _ = some_vec.iter().skip(42).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::iter-skip-next` implied by `-D warnings`\n+   = help: This is more succinctly expressed by calling `nth(x)`.\n \n-error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n+error: called `skip(x).next()` on an iterator\n   --> $DIR/iter_skip_next.rs:14:13\n    |\n LL |     let _ = some_vec.iter().cycle().skip(42).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: This is more succinctly expressed by calling `nth(x)`.\n \n-error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n+error: called `skip(x).next()` on an iterator\n   --> $DIR/iter_skip_next.rs:15:13\n    |\n LL |     let _ = (1..10).skip(10).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: This is more succinctly expressed by calling `nth(x)`.\n \n-error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n+error: called `skip(x).next()` on an iterator\n   --> $DIR/iter_skip_next.rs:16:14\n    |\n LL |     let _ = &some_vec[..].iter().skip(3).next();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: This is more succinctly expressed by calling `nth(x)`.\n \n error: aborting due to 4 previous errors\n "}, {"sha": "d1276eb247e8c4aa7bf2d162ae1fc633a1f41d8a", "filename": "tests/ui/ok_expect.stderr", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3999b30d9b759183131e098d15bcaa5c4305e21e/tests%2Fui%2Fok_expect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3999b30d9b759183131e098d15bcaa5c4305e21e/tests%2Fui%2Fok_expect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fok_expect.stderr?ref=3999b30d9b759183131e098d15bcaa5c4305e21e", "patch": "@@ -1,34 +1,43 @@\n-error: called `ok().expect()` on a `Result` value. You can call `expect()` directly on the `Result`\n+error: called `ok().expect()` on a `Result` value\n   --> $DIR/ok_expect.rs:14:5\n    |\n LL |     res.ok().expect(\"disaster!\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::ok-expect` implied by `-D warnings`\n+   = help: You can call `expect()` directly on the `Result`\n \n-error: called `ok().expect()` on a `Result` value. You can call `expect()` directly on the `Result`\n+error: called `ok().expect()` on a `Result` value\n   --> $DIR/ok_expect.rs:20:5\n    |\n LL |     res3.ok().expect(\"whoof\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: You can call `expect()` directly on the `Result`\n \n-error: called `ok().expect()` on a `Result` value. You can call `expect()` directly on the `Result`\n+error: called `ok().expect()` on a `Result` value\n   --> $DIR/ok_expect.rs:22:5\n    |\n LL |     res4.ok().expect(\"argh\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: You can call `expect()` directly on the `Result`\n \n-error: called `ok().expect()` on a `Result` value. You can call `expect()` directly on the `Result`\n+error: called `ok().expect()` on a `Result` value\n   --> $DIR/ok_expect.rs:24:5\n    |\n LL |     res5.ok().expect(\"oops\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: You can call `expect()` directly on the `Result`\n \n-error: called `ok().expect()` on a `Result` value. You can call `expect()` directly on the `Result`\n+error: called `ok().expect()` on a `Result` value\n   --> $DIR/ok_expect.rs:26:5\n    |\n LL |     res6.ok().expect(\"meh\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: You can call `expect()` directly on the `Result`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "b7f8a145a32c9aefbd60270728d5d1abae426fce", "filename": "tests/ui/unwrap.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3999b30d9b759183131e098d15bcaa5c4305e21e/tests%2Fui%2Funwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3999b30d9b759183131e098d15bcaa5c4305e21e/tests%2Fui%2Funwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap.stderr?ref=3999b30d9b759183131e098d15bcaa5c4305e21e", "patch": "@@ -1,18 +1,20 @@\n-error: used `unwrap()` on `an Option` value. If you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+error: used `unwrap()` on `an Option` value\n   --> $DIR/unwrap.rs:5:13\n    |\n LL |     let _ = opt.unwrap();\n    |             ^^^^^^^^^^^^\n    |\n    = note: `-D clippy::option-unwrap-used` implied by `-D warnings`\n+   = help: If you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message.\n \n-error: used `unwrap()` on `a Result` value. If you don't want to handle the `Err` case gracefully, consider using `expect()` to provide a better panic message\n+error: used `unwrap()` on `a Result` value\n   --> $DIR/unwrap.rs:10:13\n    |\n LL |     let _ = res.unwrap();\n    |             ^^^^^^^^^^^^\n    |\n    = note: `-D clippy::result-unwrap-used` implied by `-D warnings`\n+   = help: If you don't want to handle the `Err` case gracefully, consider using `expect()` to provide a better panic message.\n \n error: aborting due to 2 previous errors\n "}]}