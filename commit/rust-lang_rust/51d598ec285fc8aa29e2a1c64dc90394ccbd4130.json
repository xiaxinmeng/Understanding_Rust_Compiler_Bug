{"sha": "51d598ec285fc8aa29e2a1c64dc90394ccbd4130", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxZDU5OGVjMjg1ZmM4YWEyOWUyYTFjNjRkYzkwMzk0Y2NiZDQxMzA=", "commit": {"author": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-08-19T10:35:20Z"}, "committer": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-08-19T13:07:53Z"}, "message": "Adjust documentation of `Arc::make_mut`\n\nRelated discussion in the users forum:\nhttps://users.rust-lang.org/t/what-s-this-alleged-difference-between-arc-make-mut-and-rc-make-mut/63747?u=steffahn\n\nAlso includes small formatting improvement in the documentation of `Rc::make_mut`.\n\nThis commit makes the two documentations in question complete analogs. The previously claimed point in which\none \"differs from the behavior of\" the other turns out to be incorrect, AFAIK.\n\nOne remaining inaccuracy: `Weak` pointers aren't disassociated from the allocation but only from the contained\nvalue, i.e. in case of outstanding `Weak` pointers there still is a new allocation created, just the\ncall to `.clone()` is avoided, instead the value is moved from one allocation to the other.", "tree": {"sha": "6cefc441d954b5a96ad720f69a6b300e5a220057", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cefc441d954b5a96ad720f69a6b300e5a220057"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51d598ec285fc8aa29e2a1c64dc90394ccbd4130", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51d598ec285fc8aa29e2a1c64dc90394ccbd4130", "html_url": "https://github.com/rust-lang/rust/commit/51d598ec285fc8aa29e2a1c64dc90394ccbd4130", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51d598ec285fc8aa29e2a1c64dc90394ccbd4130/comments", "author": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4968a8bbd19cea8713aabff9b1575ec60e208670", "url": "https://api.github.com/repos/rust-lang/rust/commits/4968a8bbd19cea8713aabff9b1575ec60e208670", "html_url": "https://github.com/rust-lang/rust/commit/4968a8bbd19cea8713aabff9b1575ec60e208670"}], "stats": {"total": 44, "additions": 30, "deletions": 14}, "files": [{"sha": "90b077210a4756252dc9ad4c46accc1f6d152bfe", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/51d598ec285fc8aa29e2a1c64dc90394ccbd4130/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d598ec285fc8aa29e2a1c64dc90394ccbd4130/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=51d598ec285fc8aa29e2a1c64dc90394ccbd4130", "patch": "@@ -1115,11 +1115,11 @@ impl<T: Clone> Rc<T> {\n     ///\n     /// let mut data = Rc::new(5);\n     ///\n-    /// *Rc::make_mut(&mut data) += 1;        // Won't clone anything\n-    /// let mut other_data = Rc::clone(&data);    // Won't clone inner data\n-    /// *Rc::make_mut(&mut data) += 1;        // Clones inner data\n-    /// *Rc::make_mut(&mut data) += 1;        // Won't clone anything\n-    /// *Rc::make_mut(&mut other_data) *= 2;  // Won't clone anything\n+    /// *Rc::make_mut(&mut data) += 1;         // Won't clone anything\n+    /// let mut other_data = Rc::clone(&data); // Won't clone inner data\n+    /// *Rc::make_mut(&mut data) += 1;         // Clones inner data\n+    /// *Rc::make_mut(&mut data) += 1;         // Won't clone anything\n+    /// *Rc::make_mut(&mut other_data) *= 2;   // Won't clone anything\n     ///\n     /// // Now `data` and `other_data` point to different allocations.\n     /// assert_eq!(*data, 8);"}, {"sha": "7e4cb6d2c60f2587fecf5ff916e15a542e995a7a", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/51d598ec285fc8aa29e2a1c64dc90394ccbd4130/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d598ec285fc8aa29e2a1c64dc90394ccbd4130/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=51d598ec285fc8aa29e2a1c64dc90394ccbd4130", "patch": "@@ -1346,18 +1346,17 @@ impl<T: ?Sized> Receiver for Arc<T> {}\n impl<T: Clone> Arc<T> {\n     /// Makes a mutable reference into the given `Arc`.\n     ///\n-    /// If there are other `Arc` or [`Weak`] pointers to the same allocation,\n-    /// then `make_mut` will create a new allocation and invoke [`clone`][clone] on the inner value\n-    /// to ensure unique ownership. This is also referred to as clone-on-write.\n+    /// If there are other `Arc` pointers to the same allocation, then `make_mut` will\n+    /// [`clone`] the inner value to a new allocation to ensure unique ownership.  This is also\n+    /// referred to as clone-on-write.\n     ///\n-    /// Note that this differs from the behavior of [`Rc::make_mut`] which disassociates\n-    /// any remaining `Weak` pointers.\n+    /// If there are no other `Arc` pointers to this allocation, then [`Weak`]\n+    /// pointers to this allocation will be disassociated.\n     ///\n-    /// See also [`get_mut`][get_mut], which will fail rather than cloning.\n+    /// See also [`get_mut`], which will fail rather than cloning.\n     ///\n-    /// [clone]: Clone::clone\n-    /// [get_mut]: Arc::get_mut\n-    /// [`Rc::make_mut`]: super::rc::Rc::make_mut\n+    /// [`clone`]: Clone::clone\n+    /// [`get_mut`]: Arc::get_mut\n     ///\n     /// # Examples\n     ///\n@@ -1376,6 +1375,23 @@ impl<T: Clone> Arc<T> {\n     /// assert_eq!(*data, 8);\n     /// assert_eq!(*other_data, 12);\n     /// ```\n+    ///\n+    /// [`Weak`] pointers will be disassociated:\n+    ///\n+    /// ```\n+    /// use std::sync::Arc;\n+    ///\n+    /// let mut data = Arc::new(75);\n+    /// let weak = Arc::downgrade(&data);\n+    ///\n+    /// assert!(75 == *data);\n+    /// assert!(75 == *weak.upgrade().unwrap());\n+    ///\n+    /// *Arc::make_mut(&mut data) += 1;\n+    ///\n+    /// assert!(76 == *data);\n+    /// assert!(weak.upgrade().is_none());\n+    /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[inline]\n     #[stable(feature = \"arc_unique\", since = \"1.4.0\")]"}]}