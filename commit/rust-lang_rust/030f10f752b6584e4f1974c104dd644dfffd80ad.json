{"sha": "030f10f752b6584e4f1974c104dd644dfffd80ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzMGYxMGY3NTJiNjU4NGU0ZjE5NzRjMTA0ZGQ2NDRkZmZmZDgwYWQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-14T11:49:32Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-15T13:21:32Z"}, "message": "Clean up generic param handling", "tree": {"sha": "9ee0d785c60b955f07a4e18a7472ca746b53a7b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ee0d785c60b955f07a4e18a7472ca746b53a7b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/030f10f752b6584e4f1974c104dd644dfffd80ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/030f10f752b6584e4f1974c104dd644dfffd80ad", "html_url": "https://github.com/rust-lang/rust/commit/030f10f752b6584e4f1974c104dd644dfffd80ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/030f10f752b6584e4f1974c104dd644dfffd80ad/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25bf73d31cab64d9511e45d78efc6265e2cdd693", "url": "https://api.github.com/repos/rust-lang/rust/commits/25bf73d31cab64d9511e45d78efc6265e2cdd693", "html_url": "https://github.com/rust-lang/rust/commit/25bf73d31cab64d9511e45d78efc6265e2cdd693"}], "stats": {"total": 57, "additions": 35, "deletions": 22}, "files": [{"sha": "934069974beb128d23fa26850a36157cf65a2919", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/030f10f752b6584e4f1974c104dd644dfffd80ad/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030f10f752b6584e4f1974c104dd644dfffd80ad/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=030f10f752b6584e4f1974c104dd644dfffd80ad", "patch": "@@ -382,13 +382,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         for param in generics.params.iter() {\n             let value = match param.kind {\n                 GenericParamDefKind::Type(_) => {\n-                    let ty = trait_ref.substs.type_for_def(&param);\n-                    ty.to_string()\n+                    trait_ref.substs[param.index as usize].to_string()\n                 },\n                 GenericParamDefKind::Lifetime => continue,\n             };\n             let name = param.name.to_string();\n-            flags.push((name.clone(), Some(value.clone())));\n+            flags.push((name, Some(value)));\n         }\n \n         if let Some(true) = self_ty.ty_to_def_id().map(|def_id| def_id.is_local()) {"}, {"sha": "539f40cf3efb5a061440bfc4c419a0837bffd5ab", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/030f10f752b6584e4f1974c104dd644dfffd80ad/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030f10f752b6584e4f1974c104dd644dfffd80ad/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=030f10f752b6584e4f1974c104dd644dfffd80ad", "patch": "@@ -290,7 +290,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n         let generic_map = generics.params.iter().filter_map(|param| {\n             let value = match param.kind {\n                 GenericParamDefKind::Type(_) => {\n-                    trait_ref.substs.type_for_def(&param).to_string()\n+                    trait_ref.substs[param.index as usize].to_string()\n                 },\n                 GenericParamDefKind::Lifetime => return None\n             };"}, {"sha": "6861683ed1298160aa5f6eb2b8bf3e0e72bf18ec", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/030f10f752b6584e4f1974c104dd644dfffd80ad/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030f10f752b6584e4f1974c104dd644dfffd80ad/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=030f10f752b6584e4f1974c104dd644dfffd80ad", "patch": "@@ -837,7 +837,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n             let param = &self.params[index as usize];\n             match param.kind {\n                 ty::GenericParamDefKind::Lifetime => param,\n-                _ => bug!(\"expected region parameter, but found another generic parameter\")\n+                _ => bug!(\"expected lifetime parameter, but found another generic parameter\")\n             }\n         } else {\n             tcx.generics_of(self.parent.expect(\"parent_count>0 but no parent?\"))\n@@ -851,7 +851,11 @@ impl<'a, 'gcx, 'tcx> Generics {\n                       tcx: TyCtxt<'a, 'gcx, 'tcx>)\n                       -> &'tcx GenericParamDef {\n         if let Some(index) = param.idx.checked_sub(self.parent_count as u32) {\n-            &self.params[index as usize]\n+            let param = &self.params[index as usize];\n+            match param.kind {\n+                ty::GenericParamDefKind::Type(_) => param,\n+                _ => bug!(\"expected type parameter, but found another generic parameter\")\n+            }\n         } else {\n             tcx.generics_of(self.parent.expect(\"parent_count>0 but no parent?\"))\n                 .type_param(param, tcx)"}, {"sha": "12e1bfde2241c9ec1af04e89b80be4eed947b850", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/030f10f752b6584e4f1974c104dd644dfffd80ad/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030f10f752b6584e4f1974c104dd644dfffd80ad/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=030f10f752b6584e4f1974c104dd644dfffd80ad", "patch": "@@ -87,6 +87,11 @@ struct ConvertedBinding<'tcx> {\n     span: Span,\n }\n \n+struct ParamRange {\n+    required: usize,\n+    accepted: usize\n+}\n+\n /// Dummy type used for the `Self` of a `TraitRef` created for converting\n /// a trait object, and which gets removed in `ExistentialTraitRef`.\n /// This type must not appear anywhere in other converted types.\n@@ -212,23 +217,23 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         let lt_provided = parameters.lifetimes.len();\n \n         let mut lt_accepted = 0;\n-        let mut ty_range = (0, 0);\n+        let mut ty_params = ParamRange { required: 0, accepted: 0 };\n         for param in &decl_generics.params {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => {\n                     lt_accepted += 1;\n                 }\n                 GenericParamDefKind::Type(ty) => {\n-                    ty_range.1 += 1;\n+                    ty_params.accepted += 1;\n                     if !ty.has_default {\n-                        ty_range.0 += 1;\n+                        ty_params.required += 1;\n                     }\n                 }\n             };\n         }\n         if self_ty.is_some() {\n-            ty_range.0 -= 1;\n-            ty_range.1 -= 1;\n+            ty_params.required -= 1;\n+            ty_params.accepted -= 1;\n         }\n \n         if lt_accepted != lt_provided {\n@@ -239,8 +244,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         assert_eq!(decl_generics.has_self, self_ty.is_some());\n \n         // Check the number of type parameters supplied by the user.\n-        if !infer_types || ty_provided > ty_range.0 {\n-            check_type_argument_count(tcx, span, ty_provided, ty_range);\n+        if !infer_types || ty_provided > ty_params.required {\n+            check_type_argument_count(tcx, span, ty_provided, ty_params);\n         }\n \n         let is_object = self_ty.map_or(false, |ty| ty.sty == TRAIT_OBJECT_DUMMY_SELF);\n@@ -1327,9 +1332,9 @@ fn split_auto_traits<'a, 'b, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n fn check_type_argument_count(tcx: TyCtxt,\n                              span: Span,\n                              supplied: usize,\n-                             ty_range: (usize, usize))\n+                             ty_params: ParamRange)\n {\n-    let (required, accepted) = ty_range;\n+    let (required, accepted) = (ty_params.required, ty_params.accepted);\n     if supplied < required {\n         let expected = if required < accepted {\n             \"expected at least\""}, {"sha": "7e33bf9722f1923237074ca1219e1af13f950015", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/030f10f752b6584e4f1974c104dd644dfffd80ad/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030f10f752b6584e4f1974c104dd644dfffd80ad/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=030f10f752b6584e4f1974c104dd644dfffd80ad", "patch": "@@ -4925,27 +4925,32 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // Check provided parameters.\n         let ((ty_required, ty_accepted), lt_accepted) =\n             segment.map_or(((0, 0), 0), |(_, generics)| {\n+                struct ParamRange {\n+                    required: usize,\n+                    accepted: usize\n+                };\n+\n                 let mut lt_accepted = 0;\n-                let mut ty_range = (0, 0);\n+                let mut ty_params = ParamRange { required: 0, accepted: 0 };\n                 for param in &generics.params {\n                     match param.kind {\n                         GenericParamDefKind::Lifetime => {\n                             lt_accepted += 1;\n                         }\n                         GenericParamDefKind::Type(ty) => {\n-                            ty_range.1 += 1;\n+                            ty_params.accepted += 1;\n                             if !ty.has_default {\n-                                ty_range.0 += 1;\n+                                ty_params.required += 1;\n                             }\n                         }\n                     };\n                 }\n                 if generics.parent.is_none() && generics.has_self {\n-                    ty_range.0 -= 1;\n-                    ty_range.1 -= 1;\n+                    ty_params.required -= 1;\n+                    ty_params.accepted -= 1;\n                 }\n \n-                ((ty_range.0, ty_range.1), lt_accepted)\n+                ((ty_params.required, ty_params.accepted), lt_accepted)\n             });\n \n         if types.len() > ty_accepted {"}, {"sha": "80dde814c6638a529eee689fc4b0e552150f37cd", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/030f10f752b6584e4f1974c104dd644dfffd80ad/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030f10f752b6584e4f1974c104dd644dfffd80ad/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=030f10f752b6584e4f1974c104dd644dfffd80ad", "patch": "@@ -72,7 +72,7 @@ struct ImplWfCheck<'a, 'tcx: 'a> {\n impl<'a, 'tcx> ItemLikeVisitor<'tcx> for ImplWfCheck<'a, 'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         match item.node {\n-            hir::ItemImpl(.., _, _, _, ref impl_item_refs) => {\n+            hir::ItemImpl(.., ref impl_item_refs) => {\n                 let impl_def_id = self.tcx.hir.local_def_id(item.id);\n                 enforce_impl_params_are_constrained(self.tcx,\n                                                     impl_def_id,"}]}