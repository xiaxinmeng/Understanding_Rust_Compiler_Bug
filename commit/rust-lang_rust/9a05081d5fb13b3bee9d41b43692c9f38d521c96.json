{"sha": "9a05081d5fb13b3bee9d41b43692c9f38d521c96", "node_id": "C_kwDOAAsO6NoAKDlhMDUwODFkNWZiMTNiM2JlZTlkNDFiNDM2OTJjOWYzOGQ1MjFjOTY", "commit": {"author": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2022-10-07T16:15:13Z"}, "committer": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2022-10-27T22:58:54Z"}, "message": "Add additional tests for static AFIT", "tree": {"sha": "c597ff7d373c38b4e142c5b9b2a92b36b8619535", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c597ff7d373c38b4e142c5b9b2a92b36b8619535"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a05081d5fb13b3bee9d41b43692c9f38d521c96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a05081d5fb13b3bee9d41b43692c9f38d521c96", "html_url": "https://github.com/rust-lang/rust/commit/9a05081d5fb13b3bee9d41b43692c9f38d521c96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a05081d5fb13b3bee9d41b43692c9f38d521c96/comments", "author": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11b1439380d2e7e915207cb708e78a9060af82b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/11b1439380d2e7e915207cb708e78a9060af82b8", "html_url": "https://github.com/rust-lang/rust/commit/11b1439380d2e7e915207cb708e78a9060af82b8"}], "stats": {"total": 169, "additions": 169, "deletions": 0}, "files": [{"sha": "38ba297189c691ad05b8c4328a00fea2347a551c", "filename": "src/test/ui/async-await/in-trait/async-example-desugared-boxed-in-trait.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9a05081d5fb13b3bee9d41b43692c9f38d521c96/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a05081d5fb13b3bee9d41b43692c9f38d521c96/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.rs?ref=9a05081d5fb13b3bee9d41b43692c9f38d521c96", "patch": "@@ -0,0 +1,21 @@\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::future::Future;\n+use std::pin::Pin;\n+\n+trait MyTrait {\n+    fn foo(&self) -> Pin<Box<dyn Future<Output = i32> + '_>>;\n+}\n+\n+impl MyTrait for i32 {\n+    async fn foo(&self) -> i32 {\n+        //~^ ERROR method `foo` has an incompatible type for trait\n+        *self\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "22d2928f2f5641801c4b858ccbe6217d4aa8d830", "filename": "src/test/ui/async-await/in-trait/async-example-desugared-boxed-in-trait.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9a05081d5fb13b3bee9d41b43692c9f38d521c96/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a05081d5fb13b3bee9d41b43692c9f38d521c96/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed-in-trait.stderr?ref=9a05081d5fb13b3bee9d41b43692c9f38d521c96", "patch": "@@ -0,0 +1,17 @@\n+error[E0053]: method `foo` has an incompatible type for trait\n+  --> $DIR/async-example-desugared-boxed-in-trait.rs:15:28\n+   |\n+LL |     async fn foo(&self) -> i32 {\n+   |                            ^^^ expected struct `Pin`, found opaque type\n+   |\n+note: type in trait\n+  --> $DIR/async-example-desugared-boxed-in-trait.rs:11:22\n+   |\n+LL |     fn foo(&self) -> Pin<Box<dyn Future<Output = i32> + '_>>;\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: expected fn pointer `fn(&i32) -> Pin<Box<dyn Future<Output = i32>>>`\n+              found fn pointer `fn(&i32) -> impl Future<Output = i32>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "e1131753885b871cd19839756b8a90be007e89a8", "filename": "src/test/ui/async-await/in-trait/async-example-desugared-boxed.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9a05081d5fb13b3bee9d41b43692c9f38d521c96/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a05081d5fb13b3bee9d41b43692c9f38d521c96/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-boxed.rs?ref=9a05081d5fb13b3bee9d41b43692c9f38d521c96", "patch": "@@ -0,0 +1,23 @@\n+// check-pass\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::future::Future;\n+use std::pin::Pin;\n+\n+trait MyTrait {\n+    async fn foo(&self) -> i32;\n+}\n+\n+impl MyTrait for i32 {\n+    fn foo(&self) -> Pin<Box<dyn Future<Output = i32> + '_>> {\n+        Box::pin(async {\n+            *self\n+        })\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "6f61781709e73f6ad96ff286f178bb363c5c76c0", "filename": "src/test/ui/async-await/in-trait/async-example-desugared-in-trait.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9a05081d5fb13b3bee9d41b43692c9f38d521c96/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a05081d5fb13b3bee9d41b43692c9f38d521c96/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared-in-trait.rs?ref=9a05081d5fb13b3bee9d41b43692c9f38d521c96", "patch": "@@ -0,0 +1,20 @@\n+// check-pass\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::future::Future;\n+\n+trait MyTrait {\n+    fn foo(&self) -> impl Future<Output = i32> + '_;\n+}\n+\n+impl MyTrait for i32 {\n+    async fn foo(&self) -> i32 {\n+        *self\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "faf9a43d352d5a097c1f2c05987c5bd7062dc20c", "filename": "src/test/ui/async-await/in-trait/async-example-desugared.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9a05081d5fb13b3bee9d41b43692c9f38d521c96/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a05081d5fb13b3bee9d41b43692c9f38d521c96/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-example-desugared.rs?ref=9a05081d5fb13b3bee9d41b43692c9f38d521c96", "patch": "@@ -0,0 +1,22 @@\n+// check-pass\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::future::Future;\n+\n+trait MyTrait {\n+    async fn foo(&self) -> i32;\n+}\n+\n+impl MyTrait for i32 {\n+    fn foo(&self) -> impl Future<Output = i32> + '_ {\n+        async {\n+            *self\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "6839abd381c3f9b3126a4038eaa83f1eb90bd0ef", "filename": "src/test/ui/async-await/in-trait/async-recursive-generic.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9a05081d5fb13b3bee9d41b43692c9f38d521c96/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a05081d5fb13b3bee9d41b43692c9f38d521c96/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.rs?ref=9a05081d5fb13b3bee9d41b43692c9f38d521c96", "patch": "@@ -0,0 +1,21 @@\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait MyTrait<T> {\n+    async fn foo_recursive(&self, n: usize) -> T;\n+}\n+\n+impl<T> MyTrait<T> for T where T: Copy {\n+    async fn foo_recursive(&self, n: usize) -> T {\n+        //~^ ERROR recursion in an `async fn` requires boxing\n+        if n > 0 {\n+            self.foo_recursive(n - 1).await\n+        } else {\n+            *self\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "cab173bdd5b7030a508a74d04ceb1baba74aa5dc", "filename": "src/test/ui/async-await/in-trait/async-recursive-generic.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a05081d5fb13b3bee9d41b43692c9f38d521c96/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a05081d5fb13b3bee9d41b43692c9f38d521c96/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive-generic.stderr?ref=9a05081d5fb13b3bee9d41b43692c9f38d521c96", "patch": "@@ -0,0 +1,12 @@\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/async-recursive-generic.rs:11:48\n+   |\n+LL |     async fn foo_recursive(&self, n: usize) -> T {\n+   |                                                ^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n+   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0733`."}, {"sha": "61119f8095bcc0edcf2d380b3b54f827c0d4b59a", "filename": "src/test/ui/async-await/in-trait/async-recursive.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9a05081d5fb13b3bee9d41b43692c9f38d521c96/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a05081d5fb13b3bee9d41b43692c9f38d521c96/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.rs?ref=9a05081d5fb13b3bee9d41b43692c9f38d521c96", "patch": "@@ -0,0 +1,21 @@\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait MyTrait {\n+    async fn foo_recursive(&self, n: usize) -> i32;\n+}\n+\n+impl MyTrait for i32 {\n+    async fn foo_recursive(&self, n: usize) -> i32 {\n+        //~^ ERROR recursion in an `async fn` requires boxing\n+        if n > 0 {\n+            self.foo_recursive(n - 1).await\n+        } else {\n+            *self\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "9feff37b3fe46772ccebb3d3c778dd70d325fc68", "filename": "src/test/ui/async-await/in-trait/async-recursive.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9a05081d5fb13b3bee9d41b43692c9f38d521c96/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a05081d5fb13b3bee9d41b43692c9f38d521c96/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-recursive.stderr?ref=9a05081d5fb13b3bee9d41b43692c9f38d521c96", "patch": "@@ -0,0 +1,12 @@\n+error[E0733]: recursion in an `async fn` requires boxing\n+  --> $DIR/async-recursive.rs:11:48\n+   |\n+LL |     async fn foo_recursive(&self, n: usize) -> i32 {\n+   |                                                ^^^ recursive `async fn`\n+   |\n+   = note: a recursive `async fn` must be rewritten to return a boxed `dyn Future`\n+   = note: consider using the `async_recursion` crate: https://crates.io/crates/async_recursion\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0733`."}]}