{"sha": "7c1c0e6feadc017f5919f789f974405635fc25e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMWMwZTZmZWFkYzAxN2Y1OTE5Zjc4OWY5NzQ0MDU2MzVmYzI1ZTM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-07T01:33:22Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-07T01:33:22Z"}, "message": "Collect trait impls inside unnamed consts", "tree": {"sha": "be2ec91cdd13c8125e560bb414a37866ae573642", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be2ec91cdd13c8125e560bb414a37866ae573642"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c1c0e6feadc017f5919f789f974405635fc25e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c1c0e6feadc017f5919f789f974405635fc25e3", "html_url": "https://github.com/rust-lang/rust/commit/7c1c0e6feadc017f5919f789f974405635fc25e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c1c0e6feadc017f5919f789f974405635fc25e3/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f04f38d3d79c3cc51956bc530a34e32945cdb294", "url": "https://api.github.com/repos/rust-lang/rust/commits/f04f38d3d79c3cc51956bc530a34e32945cdb294", "html_url": "https://github.com/rust-lang/rust/commit/f04f38d3d79c3cc51956bc530a34e32945cdb294"}], "stats": {"total": 80, "additions": 61, "deletions": 19}, "files": [{"sha": "9014468ea04f11fe5d4a261584f8da194d90c2bb", "filename": "crates/hir_def/src/item_scope.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c1c0e6feadc017f5919f789f974405635fc25e3/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c1c0e6feadc017f5919f789f974405635fc25e3/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs?ref=7c1c0e6feadc017f5919f789f974405635fc25e3", "patch": "@@ -107,6 +107,10 @@ impl ItemScope {\n             .map(|(_, v)| v)\n     }\n \n+    pub fn unnamed_consts(&self) -> impl Iterator<Item = ConstId> + '_ {\n+        self.unnamed_consts.iter().copied()\n+    }\n+\n     /// Iterate over all module scoped macros\n     pub(crate) fn macros<'a>(&'a self) -> impl Iterator<Item = (&'a Name, MacroDefId)> + 'a {\n         self.entries().filter_map(|(name, def)| def.take_macros().map(|macro_| (name, macro_)))"}, {"sha": "f29319f2065a3bbb8d17d95cbf41155d1a9fa2d6", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 35, "deletions": 19, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7c1c0e6feadc017f5919f789f974405635fc25e3/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c1c0e6feadc017f5919f789f974405635fc25e3/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=7c1c0e6feadc017f5919f789f974405635fc25e3", "patch": "@@ -8,8 +8,8 @@ use arrayvec::ArrayVec;\n use base_db::CrateId;\n use chalk_ir::{cast::Cast, Mutability, UniverseIndex};\n use hir_def::{\n-    lang_item::LangItemTarget, AssocContainerId, AssocItemId, FunctionId, GenericDefId, HasModule,\n-    ImplId, Lookup, ModuleId, TraitId,\n+    lang_item::LangItemTarget, nameres::DefMap, AssocContainerId, AssocItemId, FunctionId,\n+    GenericDefId, HasModule, ImplId, Lookup, ModuleId, TraitId,\n };\n use hir_expand::name::Name;\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -100,25 +100,38 @@ impl TraitImpls {\n         let mut impls = Self { map: FxHashMap::default() };\n \n         let crate_def_map = db.crate_def_map(krate);\n-        for (_module_id, module_data) in crate_def_map.modules() {\n-            for impl_id in module_data.scope.impls() {\n-                let target_trait = match db.impl_trait(impl_id) {\n-                    Some(tr) => tr.skip_binders().hir_trait_id(),\n-                    None => continue,\n-                };\n-                let self_ty = db.impl_self_ty(impl_id);\n-                let self_ty_fp = TyFingerprint::for_impl(self_ty.skip_binders());\n-                impls\n-                    .map\n-                    .entry(target_trait)\n-                    .or_default()\n-                    .entry(self_ty_fp)\n-                    .or_default()\n-                    .push(impl_id);\n+        collect_def_map(db, &crate_def_map, &mut impls);\n+\n+        return Arc::new(impls);\n+\n+        fn collect_def_map(db: &dyn HirDatabase, def_map: &DefMap, impls: &mut TraitImpls) {\n+            for (_module_id, module_data) in def_map.modules() {\n+                for impl_id in module_data.scope.impls() {\n+                    let target_trait = match db.impl_trait(impl_id) {\n+                        Some(tr) => tr.skip_binders().hir_trait_id(),\n+                        None => continue,\n+                    };\n+                    let self_ty = db.impl_self_ty(impl_id);\n+                    let self_ty_fp = TyFingerprint::for_impl(self_ty.skip_binders());\n+                    impls\n+                        .map\n+                        .entry(target_trait)\n+                        .or_default()\n+                        .entry(self_ty_fp)\n+                        .or_default()\n+                        .push(impl_id);\n+                }\n+\n+                // To better support custom derives, collect impls in all unnamed const items.\n+                // const _: () = { ... };\n+                for konst in module_data.scope.unnamed_consts() {\n+                    let body = db.body(konst.into());\n+                    for (_, block_def_map) in body.blocks(db.upcast()) {\n+                        collect_def_map(db, &block_def_map, impls);\n+                    }\n+                }\n             }\n         }\n-\n-        Arc::new(impls)\n     }\n \n     pub(crate) fn trait_impls_in_deps_query(db: &dyn HirDatabase, krate: CrateId) -> Arc<Self> {\n@@ -208,6 +221,9 @@ impl InherentImpls {\n             }\n         }\n \n+        // NOTE: We're not collecting inherent impls from unnamed consts here, we intentionally only\n+        // support trait impls there.\n+\n         Arc::new(Self { map })\n     }\n "}, {"sha": "4b2c82b417fe177ecaf5dc56f0469f63e4bdde51", "filename": "crates/hir_ty/src/tests/method_resolution.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7c1c0e6feadc017f5919f789f974405635fc25e3/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c1c0e6feadc017f5919f789f974405635fc25e3/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=7c1c0e6feadc017f5919f789f974405635fc25e3", "patch": "@@ -1292,3 +1292,25 @@ mod b {\n         \"#]],\n     )\n }\n+\n+#[test]\n+fn impl_in_unnamed_const() {\n+    check_types(\n+        r#\"\n+struct S;\n+\n+trait Tr {\n+    fn method(&self) -> u16;\n+}\n+\n+const _: () = {\n+    impl Tr for S {}\n+};\n+\n+fn f() {\n+    S.method();\n+  //^^^^^^^^^^ u16\n+}\n+    \"#,\n+    );\n+}"}]}