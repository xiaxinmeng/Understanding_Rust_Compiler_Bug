{"sha": "dfcc44d76903fe68ceab8461cc55efe475c26b8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmY2M0NGQ3NjkwM2ZlNjhjZWFiODQ2MWNjNTVlZmU0NzVjMjZiOGI=", "commit": {"author": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2019-12-25T15:41:50Z"}, "committer": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2019-12-25T17:41:05Z"}, "message": "rewrite scalar to integer methods", "tree": {"sha": "6827b1f65bde1e96d67630afa5c1f0e0eede7b6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6827b1f65bde1e96d67630afa5c1f0e0eede7b6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfcc44d76903fe68ceab8461cc55efe475c26b8b", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niI4EABYIADYWIQRsB8A/3NrzTlMMjT0nUl7150IKUAUCXgOfMRgcZ2l0QGNocmlz\ndGlhbnBvdmVkYS54eXoACgkQJ1Je9edCClDbFwEA+rJE5qVk8IOjgZnzd/XgDkns\n8TlQewBoCRpNencKa1kA/j+vuvKx3rPWJ6j6ZqC8E/3Ee04bP/bD0BAKKrpDG20B\n=Qfp3\n-----END PGP SIGNATURE-----", "payload": "tree 6827b1f65bde1e96d67630afa5c1f0e0eede7b6e\nparent 415ecc848d776e1629840420d3a48fbf8d817a76\nauthor Christian Poveda <git@christianpoveda.xyz> 1577288510 -0500\ncommitter Christian Poveda <git@christianpoveda.xyz> 1577295665 -0500\n\nrewrite scalar to integer methods\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfcc44d76903fe68ceab8461cc55efe475c26b8b", "html_url": "https://github.com/rust-lang/rust/commit/dfcc44d76903fe68ceab8461cc55efe475c26b8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfcc44d76903fe68ceab8461cc55efe475c26b8b/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "415ecc848d776e1629840420d3a48fbf8d817a76", "url": "https://api.github.com/repos/rust-lang/rust/commits/415ecc848d776e1629840420d3a48fbf8d817a76", "html_url": "https://github.com/rust-lang/rust/commit/415ecc848d776e1629840420d3a48fbf8d817a76"}], "stats": {"total": 57, "additions": 29, "deletions": 28}, "files": [{"sha": "e8e16785610960a9836bdfd953777a0e17c1e79e", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/dfcc44d76903fe68ceab8461cc55efe475c26b8b/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfcc44d76903fe68ceab8461cc55efe475c26b8b/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=dfcc44d76903fe68ceab8461cc55efe475c26b8b", "patch": "@@ -415,61 +415,62 @@ impl<'tcx, Tag> Scalar<Tag> {\n         }\n     }\n \n+    #[inline]\n+    fn to_unsigned_with_bit_width(self, bits: u64) -> InterpResult<'static, u128> {\n+        let sz = Size::from_bits(bits);\n+        self.to_bits(sz)\n+    }\n+\n+    /// Converts the scalar to produce an `u8`. Fails if the scalar is a pointer.\n     pub fn to_u8(self) -> InterpResult<'static, u8> {\n-        let sz = Size::from_bits(8);\n-        let b = self.to_bits(sz)?;\n-        Ok(b as u8)\n+        self.to_unsigned_with_bit_width(8).map(|v| v as u8)\n     }\n \n+    /// Converts the scalar to produce an `u16`. Fails if the scalar is a pointer.\n     pub fn to_u16(self) -> InterpResult<'static, u16> {\n-        let sz = Size::from_bits(16);\n-        let b = self.to_bits(sz)?;\n-        Ok(b as u16)\n+        self.to_unsigned_with_bit_width(16).map(|v| v as u16)\n     }\n \n+    /// Converts the scalar to produce an `u32`. Fails if the scalar is a pointer.\n     pub fn to_u32(self) -> InterpResult<'static, u32> {\n-        let sz = Size::from_bits(32);\n-        let b = self.to_bits(sz)?;\n-        Ok(b as u32)\n+        self.to_unsigned_with_bit_width(32).map(|v| v as u32)\n     }\n \n+    /// Converts the scalar to produce an `u64`. Fails if the scalar is a pointer.\n     pub fn to_u64(self) -> InterpResult<'static, u64> {\n-        let sz = Size::from_bits(64);\n-        let b = self.to_bits(sz)?;\n-        Ok(b as u64)\n+        self.to_unsigned_with_bit_width(64).map(|v| v as u64)\n     }\n \n     pub fn to_machine_usize(self, cx: &impl HasDataLayout) -> InterpResult<'static, u64> {\n         let b = self.to_bits(cx.data_layout().pointer_size)?;\n         Ok(b as u64)\n     }\n \n-    pub fn to_i8(self) -> InterpResult<'static, i8> {\n-        let sz = Size::from_bits(8);\n+    #[inline]\n+    fn to_signed_with_bit_width(self, bits: u64) -> InterpResult<'static, i128> {\n+        let sz = Size::from_bits(bits);\n         let b = self.to_bits(sz)?;\n-        let b = sign_extend(b, sz) as i128;\n-        Ok(b as i8)\n+        Ok(sign_extend(b, sz) as i128)\n     }\n \n+    /// Converts the scalar to produce an `i8`. Fails if the scalar is a pointer.\n+    pub fn to_i8(self) -> InterpResult<'static, i8> {\n+        self.to_signed_with_bit_width(8).map(|v| v as i8)\n+    }\n+\n+    /// Converts the scalar to produce an `i16`. Fails if the scalar is a pointer.\n     pub fn to_i16(self) -> InterpResult<'static, i16> {\n-        let sz = Size::from_bits(16);\n-        let b = self.to_bits(sz)?;\n-        let b = sign_extend(b, sz) as i128;\n-        Ok(b as i16)\n+        self.to_signed_with_bit_width(16).map(|v| v as i16)\n     }\n \n+    /// Converts the scalar to produce an `i32`. Fails if the scalar is a pointer.\n     pub fn to_i32(self) -> InterpResult<'static, i32> {\n-        let sz = Size::from_bits(32);\n-        let b = self.to_bits(sz)?;\n-        let b = sign_extend(b, sz) as i128;\n-        Ok(b as i32)\n+        self.to_signed_with_bit_width(32).map(|v| v as i32)\n     }\n \n+    /// Converts the scalar to produce an `i64`. Fails if the scalar is a pointer.\n     pub fn to_i64(self) -> InterpResult<'static, i64> {\n-        let sz = Size::from_bits(64);\n-        let b = self.to_bits(sz)?;\n-        let b = sign_extend(b, sz) as i128;\n-        Ok(b as i64)\n+        self.to_signed_with_bit_width(64).map(|v| v as i64)\n     }\n \n     pub fn to_machine_isize(self, cx: &impl HasDataLayout) -> InterpResult<'static, i64> {"}]}