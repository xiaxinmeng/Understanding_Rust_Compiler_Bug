{"sha": "60cf5428b3c3671da8ebfd7e885f8b06150655eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwY2Y1NDI4YjNjMzY3MWRhOGViZmQ3ZTg4NWY4YjA2MTUwNjU1ZWI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-07-26T12:51:53Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-07-27T17:59:40Z"}, "message": "rustc_const_eval: keep track of the appropriate ParamEnv.", "tree": {"sha": "bf2b303a91ddc2db5555118340ee902414c20da0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf2b303a91ddc2db5555118340ee902414c20da0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60cf5428b3c3671da8ebfd7e885f8b06150655eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60cf5428b3c3671da8ebfd7e885f8b06150655eb", "html_url": "https://github.com/rust-lang/rust/commit/60cf5428b3c3671da8ebfd7e885f8b06150655eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60cf5428b3c3671da8ebfd7e885f8b06150655eb/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c900c52482fd398cbec4d1d433fcc2e6888ff1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c900c52482fd398cbec4d1d433fcc2e6888ff1b", "html_url": "https://github.com/rust-lang/rust/commit/4c900c52482fd398cbec4d1d433fcc2e6888ff1b"}], "stats": {"total": 171, "additions": 107, "deletions": 64}, "files": [{"sha": "b6b1648f39687e326da384b5a14640a4a4127082", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/60cf5428b3c3671da8ebfd7e885f8b06150655eb/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60cf5428b3c3671da8ebfd7e885f8b06150655eb/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=60cf5428b3c3671da8ebfd7e885f8b06150655eb", "patch": "@@ -14,7 +14,8 @@ pub use rustc_const_math::ConstInt;\n use hir;\n use hir::def::Def;\n use hir::def_id::DefId;\n-use ty::{TyCtxt, layout};\n+use traits::Reveal;\n+use ty::{self, TyCtxt, layout};\n use ty::subst::Substs;\n use util::common::ErrorReported;\n use rustc_const_math::*;\n@@ -229,8 +230,9 @@ pub fn eval_length(tcx: TyCtxt,\n {\n     let count_expr = &tcx.hir.body(count).value;\n     let count_def_id = tcx.hir.body_owner_def_id(count);\n+    let param_env = ty::ParamEnv::empty(Reveal::UserFacing);\n     let substs = Substs::identity_for_item(tcx.global_tcx(), count_def_id);\n-    match tcx.at(count_expr.span).const_eval((count_def_id, substs)) {\n+    match tcx.at(count_expr.span).const_eval(param_env.and((count_def_id, substs))) {\n         Ok(Integral(Usize(count))) => {\n             let val = count.as_u64(tcx.sess.target.uint_type);\n             assert_eq!(val as usize as u64, val);"}, {"sha": "7a45a706ea405ef8738dce350bd1d388b2057261", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/60cf5428b3c3671da8ebfd7e885f8b06150655eb/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60cf5428b3c3671da8ebfd7e885f8b06150655eb/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=60cf5428b3c3671da8ebfd7e885f8b06150655eb", "patch": "@@ -372,8 +372,8 @@ impl<'tcx> QueryDescription for queries::reachable_set<'tcx> {\n }\n \n impl<'tcx> QueryDescription for queries::const_eval<'tcx> {\n-    fn describe(tcx: TyCtxt, (def_id, _): (DefId, &'tcx Substs<'tcx>)) -> String {\n-        format!(\"const-evaluating `{}`\", tcx.item_path_str(def_id))\n+    fn describe(tcx: TyCtxt, key: ty::ParamEnvAnd<'tcx, (DefId, &'tcx Substs<'tcx>)>) -> String {\n+        format!(\"const-evaluating `{}`\", tcx.item_path_str(key.value.0))\n     }\n }\n \n@@ -935,7 +935,7 @@ define_maps! { <'tcx>\n \n     /// Results of evaluating const items or constants embedded in\n     /// other items (such as enum variant explicit discriminants).\n-    [] const_eval: const_eval_dep_node((DefId, &'tcx Substs<'tcx>))\n+    [] const_eval: const_eval_dep_node(ty::ParamEnvAnd<'tcx, (DefId, &'tcx Substs<'tcx>)>)\n         -> const_val::EvalResult<'tcx>,\n \n     /// Performs the privacy check and computes \"access levels\".\n@@ -1032,8 +1032,9 @@ fn typeck_item_bodies_dep_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::TypeckBodiesKrate\n }\n \n-fn const_eval_dep_node<'tcx>((def_id, substs): (DefId, &'tcx Substs<'tcx>))\n+fn const_eval_dep_node<'tcx>(key: ty::ParamEnvAnd<'tcx, (DefId, &'tcx Substs<'tcx>)>)\n                              -> DepConstructor<'tcx> {\n+    let (def_id, substs) = key.value;\n     DepConstructor::ConstEval { def_id, substs }\n }\n "}, {"sha": "804f47b5283f2e0561671e20e149ee3d3cb10094", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/60cf5428b3c3671da8ebfd7e885f8b06150655eb/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60cf5428b3c3671da8ebfd7e885f8b06150655eb/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=60cf5428b3c3671da8ebfd7e885f8b06150655eb", "patch": "@@ -1582,14 +1582,15 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n     #[inline]\n     pub fn discriminants(&'a self, tcx: TyCtxt<'a, 'gcx, 'tcx>)\n                          -> impl Iterator<Item=ConstInt> + 'a {\n+        let param_env = ParamEnv::empty(traits::Reveal::UserFacing);\n         let repr_type = self.repr.discr_type();\n         let initial = repr_type.initial_discriminant(tcx.global_tcx());\n         let mut prev_discr = None::<ConstInt>;\n         self.variants.iter().map(move |v| {\n             let mut discr = prev_discr.map_or(initial, |d| d.wrap_incr());\n             if let VariantDiscr::Explicit(expr_did) = v.discr {\n                 let substs = Substs::identity_for_item(tcx.global_tcx(), expr_did);\n-                match tcx.const_eval((expr_did, substs)) {\n+                match tcx.const_eval(param_env.and((expr_did, substs))) {\n                     Ok(ConstVal::Integral(v)) => {\n                         discr = v;\n                     }\n@@ -1617,6 +1618,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                                     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                     variant_index: usize)\n                                     -> ConstInt {\n+        let param_env = ParamEnv::empty(traits::Reveal::UserFacing);\n         let repr_type = self.repr.discr_type();\n         let mut explicit_value = repr_type.initial_discriminant(tcx.global_tcx());\n         let mut explicit_index = variant_index;\n@@ -1628,7 +1630,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                 }\n                 ty::VariantDiscr::Explicit(expr_did) => {\n                     let substs = Substs::identity_for_item(tcx.global_tcx(), expr_did);\n-                    match tcx.const_eval((expr_did, substs)) {\n+                    match tcx.const_eval(param_env.and((expr_did, substs))) {\n                         Ok(ConstVal::Integral(v)) => {\n                             explicit_value = v;\n                             break;"}, {"sha": "f261a56cdccddffb112a16782bb512bd54b3518e", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60cf5428b3c3671da8ebfd7e885f8b06150655eb/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60cf5428b3c3671da8ebfd7e885f8b06150655eb/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=60cf5428b3c3671da8ebfd7e885f8b06150655eb", "patch": "@@ -398,7 +398,7 @@ macro_rules! CopyImpls {\n     }\n }\n \n-CopyImpls! { (), hir::Unsafety, abi::Abi }\n+CopyImpls! { (), hir::Unsafety, abi::Abi, hir::def_id::DefId }\n \n impl<'tcx, T:TypeFoldable<'tcx>, U:TypeFoldable<'tcx>> TypeFoldable<'tcx> for (T, U) {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> (T, U) {"}, {"sha": "95c8613232ec2c5d2746116a29102ad29e8e35e5", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/60cf5428b3c3671da8ebfd7e885f8b06150655eb/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60cf5428b3c3671da8ebfd7e885f8b06150655eb/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=60cf5428b3c3671da8ebfd7e885f8b06150655eb", "patch": "@@ -165,8 +165,9 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n \n             let inlined_arms : Vec<(Vec<_>, _)> = arms.iter().map(|arm| (\n                 arm.pats.iter().map(|pat| {\n-                    let substs = self.identity_substs;\n-                    let mut patcx = PatternContext::new(self.tcx, self.tables, substs);\n+                    let mut patcx = PatternContext::new(self.tcx,\n+                                                        self.param_env.and(self.identity_substs),\n+                                                        self.tables);\n                     let pattern = expand_pattern(cx, patcx.lower_pattern(&pat));\n                     if !patcx.errors.is_empty() {\n                         patcx.report_inlining_errors(pat.span);\n@@ -233,8 +234,9 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n     fn check_irrefutable(&self, pat: &Pat, origin: &str) {\n         let module = self.tcx.hir.get_module_parent(pat.id);\n         MatchCheckCtxt::create_and_enter(self.tcx, module, |ref mut cx| {\n-            let substs = self.identity_substs;\n-            let mut patcx = PatternContext::new(self.tcx, self.tables, substs);\n+            let mut patcx = PatternContext::new(self.tcx,\n+                                                self.param_env.and(self.identity_substs),\n+                                                self.tables);\n             let pattern = patcx.lower_pattern(pat);\n             let pattern_ty = pattern.ty;\n             let pats : Matrix = vec![vec!["}, {"sha": "463f256fe6c6fedd1949ce1fb1931762b2834220", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 33, "deletions": 35, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/60cf5428b3c3671da8ebfd7e885f8b06150655eb/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60cf5428b3c3671da8ebfd7e885f8b06150655eb/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=60cf5428b3c3671da8ebfd7e885f8b06150655eb", "patch": "@@ -21,7 +21,6 @@ use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::maps::Providers;\n use rustc::ty::util::IntTypeExt;\n use rustc::ty::subst::{Substs, Subst};\n-use rustc::traits::Reveal;\n use rustc::util::common::ErrorReported;\n use rustc::util::nodemap::DefIdMap;\n \n@@ -49,24 +48,21 @@ macro_rules! math {\n     }\n }\n \n-/// * `def_id` is the id of the constant.\n-/// * `substs` is the monomorphized substitutions for the expression.\n-///\n-/// `substs` is optional and is used for associated constants.\n-/// This generally happens in late/trans const evaluation.\n+/// * `DefId` is the id of the constant.\n+/// * `Substs` is the monomorphized substitutions for the expression.\n pub fn lookup_const_by_id<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                    def_id: DefId,\n-                                    substs: &'tcx Substs<'tcx>)\n+                                    key: ty::ParamEnvAnd<'tcx, (DefId, &'tcx Substs<'tcx>)>)\n                                     -> Option<(DefId, &'tcx Substs<'tcx>)> {\n+    let (def_id, _) = key.value;\n     if let Some(node_id) = tcx.hir.as_local_node_id(def_id) {\n         match tcx.hir.find(node_id) {\n             Some(hir_map::NodeTraitItem(_)) => {\n                 // If we have a trait item and the substitutions for it,\n                 // `resolve_trait_associated_const` will select an impl\n                 // or the default.\n-                resolve_trait_associated_const(tcx, def_id, substs)\n+                resolve_trait_associated_const(tcx, key)\n             }\n-            _ => Some((def_id, substs))\n+            _ => Some(key.value)\n         }\n     } else {\n         match tcx.describe_def(def_id) {\n@@ -76,31 +72,34 @@ pub fn lookup_const_by_id<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 // trait-associated const if the caller gives us the\n                 // substitutions for the reference to it.\n                 if tcx.trait_of_item(def_id).is_some() {\n-                    resolve_trait_associated_const(tcx, def_id, substs)\n+                    resolve_trait_associated_const(tcx, key)\n                 } else {\n-                    Some((def_id, substs))\n+                    Some(key.value)\n                 }\n             }\n-            _ => Some((def_id, substs))\n+            _ => Some(key.value)\n         }\n     }\n }\n \n pub struct ConstContext<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n     substs: &'tcx Substs<'tcx>,\n     fn_args: Option<DefIdMap<ConstVal<'tcx>>>\n }\n \n impl<'a, 'tcx> ConstContext<'a, 'tcx> {\n     pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-               tables: &'a ty::TypeckTables<'tcx>,\n-               substs: &'tcx Substs<'tcx>) -> Self {\n+               param_env_and_substs: ty::ParamEnvAnd<'tcx, &'tcx Substs<'tcx>>,\n+               tables: &'a ty::TypeckTables<'tcx>)\n+               -> Self {\n         ConstContext {\n             tcx,\n+            param_env: param_env_and_substs.param_env,\n             tables,\n-            substs,\n+            substs: param_env_and_substs.value,\n             fn_args: None\n         }\n     }\n@@ -279,7 +278,7 @@ fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,\n           match cx.tables.qpath_def(qpath, e.id) {\n               Def::Const(def_id) |\n               Def::AssociatedConst(def_id) => {\n-                    match tcx.at(e.span).const_eval((def_id, substs)) {\n+                    match tcx.at(e.span).const_eval(cx.param_env.and((def_id, substs))) {\n                         Ok(val) => val,\n                         Err(ConstEvalErr { kind: TypeckError, .. }) => {\n                             signal!(e, TypeckError);\n@@ -323,10 +322,9 @@ fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,\n \n           if tcx.fn_sig(def_id).abi() == Abi::RustIntrinsic {\n             let layout_of = |ty: Ty<'tcx>| {\n-                ty.layout(tcx, ty::ParamEnv::empty(traits::Reveal::All))\n-                    .map_err(|err| {\n-                        ConstEvalErr { span: e.span, kind: LayoutError(err) }\n-                    })\n+                ty.layout(tcx, cx.param_env).map_err(|err| {\n+                    ConstEvalErr { span: e.span, kind: LayoutError(err) }\n+                })\n             };\n             match &tcx.item_name(def_id).as_str()[..] {\n                 \"size_of\" => {\n@@ -377,7 +375,8 @@ fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,\n           }\n           debug!(\"const call({:?})\", call_args);\n           let callee_cx = ConstContext {\n-            tcx: tcx,\n+            tcx,\n+            param_env: cx.param_env,\n             tables: tcx.typeck_tables_of(def_id),\n             substs: substs,\n             fn_args: Some(call_args)\n@@ -477,17 +476,17 @@ fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,\n }\n \n fn resolve_trait_associated_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                            def_id: DefId,\n-                                            substs: &'tcx Substs<'tcx>)\n+                                            key: ty::ParamEnvAnd<'tcx, (DefId, &'tcx Substs<'tcx>)>)\n                                             -> Option<(DefId, &'tcx Substs<'tcx>)> {\n+    let param_env = key.param_env;\n+    let (def_id, substs) = key.value;\n     let trait_item = tcx.associated_item(def_id);\n     let trait_id = trait_item.container.id();\n     let trait_ref = ty::Binder(ty::TraitRef::new(trait_id, substs));\n     debug!(\"resolve_trait_associated_const: trait_ref={:?}\",\n            trait_ref);\n \n     tcx.infer_ctxt().enter(|infcx| {\n-        let param_env = ty::ParamEnv::empty(Reveal::UserFacing);\n         let mut selcx = traits::SelectionContext::new(&infcx);\n         let obligation = traits::Obligation::new(traits::ObligationCause::dummy(),\n                                                  param_env,\n@@ -506,10 +505,8 @@ fn resolve_trait_associated_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         };\n \n         // NOTE: this code does not currently account for specialization, but when\n-        // it does so, it should hook into the Reveal to determine when the\n-        // constant should resolve; this will also require plumbing through to this\n-        // function whether we are in \"trans mode\" to pick the right Reveal\n-        // when constructing the inference context above.\n+        // it does so, it should hook into the param_env.reveal to determine when the\n+        // constant should resolve.\n         match selection {\n             traits::VtableImpl(ref impl_data) => {\n                 let name = trait_item.name;\n@@ -524,15 +521,16 @@ fn resolve_trait_associated_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     }\n                     None => {\n                         if trait_item.defaultness.has_value() {\n-                            Some((def_id, substs))\n+                            Some(key.value)\n                         } else {\n                             None\n                         }\n                     }\n                 }\n             }\n+            traits::VtableParam(_) => None,\n             _ => {\n-                bug!(\"resolve_trait_associated_const: unexpected vtable type\")\n+                bug!(\"resolve_trait_associated_const: unexpected vtable type {:?}\", selection)\n             }\n         }\n     })\n@@ -761,13 +759,13 @@ pub fn provide(providers: &mut Providers) {\n }\n \n fn const_eval<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                        (def_id, substs): (DefId, &'tcx Substs<'tcx>))\n+                        key: ty::ParamEnvAnd<'tcx, (DefId, &'tcx Substs<'tcx>)>)\n                         -> EvalResult<'tcx> {\n-    let (def_id, substs) = if let Some(resolved) = lookup_const_by_id(tcx, def_id, substs) {\n+    let (def_id, substs) = if let Some(resolved) = lookup_const_by_id(tcx, key) {\n         resolved\n     } else {\n         return Err(ConstEvalErr {\n-            span: tcx.def_span(def_id),\n+            span: tcx.def_span(key.value.0),\n             kind: TypeckError\n         });\n     };\n@@ -779,5 +777,5 @@ fn const_eval<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     } else {\n         tcx.sess.cstore.item_body(tcx, def_id)\n     };\n-    ConstContext::new(tcx, tables, substs).eval(&body.value)\n+    ConstContext::new(tcx, key.param_env.and(substs), tables).eval(&body.value)\n }"}, {"sha": "ab919da815206869bf1df19e5fb0d554907c3aac", "filename": "src/librustc_const_eval/pattern.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/60cf5428b3c3671da8ebfd7e885f8b06150655eb/src%2Flibrustc_const_eval%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60cf5428b3c3671da8ebfd7e885f8b06150655eb/src%2Flibrustc_const_eval%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fpattern.rs?ref=60cf5428b3c3671da8ebfd7e885f8b06150655eb", "patch": "@@ -268,17 +268,18 @@ impl<'tcx> fmt::Display for Pattern<'tcx> {\n \n pub struct PatternContext<'a, 'tcx: 'a> {\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    pub param_env: ty::ParamEnv<'tcx>,\n     pub tables: &'a ty::TypeckTables<'tcx>,\n     pub substs: &'tcx Substs<'tcx>,\n     pub errors: Vec<PatternError<'tcx>>,\n }\n \n impl<'a, 'tcx> Pattern<'tcx> {\n     pub fn from_hir(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                    param_env_and_substs: ty::ParamEnvAnd<'tcx, &'tcx Substs<'tcx>>,\n                     tables: &'a ty::TypeckTables<'tcx>,\n-                    substs: &'tcx Substs<'tcx>,\n                     pat: &hir::Pat) -> Self {\n-        let mut pcx = PatternContext::new(tcx, tables, substs);\n+        let mut pcx = PatternContext::new(tcx, param_env_and_substs, tables);\n         let result = pcx.lower_pattern(pat);\n         if !pcx.errors.is_empty() {\n             span_bug!(pat.span, \"encountered errors lowering pattern: {:?}\", pcx.errors)\n@@ -290,9 +291,15 @@ impl<'a, 'tcx> Pattern<'tcx> {\n \n impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n     pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-               tables: &'a ty::TypeckTables<'tcx>,\n-               substs: &'tcx Substs<'tcx>) -> Self {\n-        PatternContext { tcx, tables, substs, errors: vec![] }\n+               param_env_and_substs: ty::ParamEnvAnd<'tcx, &'tcx Substs<'tcx>>,\n+               tables: &'a ty::TypeckTables<'tcx>) -> Self {\n+        PatternContext {\n+            tcx,\n+            param_env: param_env_and_substs.param_env,\n+            tables,\n+            substs: param_env_and_substs.value,\n+            errors: vec![]\n+        }\n     }\n \n     pub fn lower_pattern(&mut self, pat: &hir::Pat) -> Pattern<'tcx> {\n@@ -588,7 +595,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n         let kind = match def {\n             Def::Const(def_id) | Def::AssociatedConst(def_id) => {\n                 let substs = self.tables.node_substs(id);\n-                match eval::lookup_const_by_id(self.tcx, def_id, substs) {\n+                match eval::lookup_const_by_id(self.tcx, self.param_env.and((def_id, substs))) {\n                     Some((def_id, substs)) => {\n                         // Enter the inlined constant's tables&substs temporarily.\n                         let old_tables = self.tables;\n@@ -622,7 +629,9 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n     }\n \n     fn lower_lit(&mut self, expr: &hir::Expr) -> PatternKind<'tcx> {\n-        let const_cx = eval::ConstContext::new(self.tcx, self.tables, self.substs);\n+        let const_cx = eval::ConstContext::new(self.tcx,\n+                                               self.param_env.and(self.substs),\n+                                               self.tables);\n         match const_cx.eval(expr) {\n             Ok(value) => {\n                 if let ConstVal::Variant(def_id) = value {"}, {"sha": "aca98df9cc998b98958d0a75a0b854c9af5b8234", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60cf5428b3c3671da8ebfd7e885f8b06150655eb/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60cf5428b3c3671da8ebfd7e885f8b06150655eb/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=60cf5428b3c3671da8ebfd7e885f8b06150655eb", "patch": "@@ -113,7 +113,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                             let parent_item = cx.tcx.hir.get_parent(e.id);\n                             let parent_def_id = cx.tcx.hir.local_def_id(parent_item);\n                             let substs = Substs::identity_for_item(cx.tcx, parent_def_id);\n-                            let const_cx = ConstContext::new(cx.tcx, cx.tables, substs);\n+                            let const_cx = ConstContext::new(cx.tcx,\n+                                                             cx.param_env.and(substs),\n+                                                             cx.tables);\n                             match const_cx.eval(&r) {\n                                 Ok(ConstVal::Integral(i)) => {\n                                     i.is_negative() ||"}, {"sha": "5badef3cfa180ce8d961930e03d5fd6367b4e105", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60cf5428b3c3671da8ebfd7e885f8b06150655eb/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60cf5428b3c3671da8ebfd7e885f8b06150655eb/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=60cf5428b3c3671da8ebfd7e885f8b06150655eb", "patch": "@@ -514,8 +514,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n             if let Some(pattern) = pattern {\n                 let pattern = Pattern::from_hir(self.hir.tcx().global_tcx(),\n+                                                self.hir.param_env.and(self.hir.identity_substs),\n                                                 self.hir.tables(),\n-                                                self.hir.identity_substs,\n                                                 pattern);\n                 scope = self.declare_bindings(scope, ast_body.span, &pattern);\n                 unpack!(block = self.lvalue_into_pattern(block, pattern, &lvalue));"}, {"sha": "c91326f6d87460fe3005020f6bf65aa1f5675c78", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60cf5428b3c3671da8ebfd7e885f8b06150655eb/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60cf5428b3c3671da8ebfd7e885f8b06150655eb/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=60cf5428b3c3671da8ebfd7e885f8b06150655eb", "patch": "@@ -71,8 +71,8 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                         });\n \n                         let pattern = Pattern::from_hir(cx.tcx.global_tcx(),\n+                                                        cx.param_env.and(cx.identity_substs),\n                                                         cx.tables(),\n-                                                        cx.identity_substs,\n                                                         &local.pat);\n                         result.push(StmtRef::Mirror(Box::new(Stmt {\n                             span: stmt.span,"}, {"sha": "06a0c4ff213da72149dd3e7edb24f6037fa7fb42", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/60cf5428b3c3671da8ebfd7e885f8b06150655eb/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60cf5428b3c3671da8ebfd7e885f8b06150655eb/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=60cf5428b3c3671da8ebfd7e885f8b06150655eb", "patch": "@@ -467,7 +467,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             let c = &cx.tcx.hir.body(count).value;\n             let def_id = cx.tcx.hir.body_owner_def_id(count);\n             let substs = Substs::identity_for_item(cx.tcx.global_tcx(), def_id);\n-            let count = match cx.tcx.at(c.span).const_eval((def_id, substs)) {\n+            let count = match cx.tcx.at(c.span).const_eval(cx.param_env.and((def_id, substs))) {\n                 Ok(ConstVal::Integral(ConstInt::Usize(u))) => u,\n                 Ok(other) => bug!(\"constant evaluation of repeat count yielded {:?}\", other),\n                 Err(s) => cx.fatal_const_eval_err(&s, c.span, \"expression\")\n@@ -605,7 +605,10 @@ fn to_borrow_kind(m: hir::Mutability) -> BorrowKind {\n fn convert_arm<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>, arm: &'tcx hir::Arm) -> Arm<'tcx> {\n     Arm {\n         patterns: arm.pats.iter().map(|p| {\n-            Pattern::from_hir(cx.tcx.global_tcx(), cx.tables(), cx.identity_substs, p)\n+            Pattern::from_hir(cx.tcx.global_tcx(),\n+                              cx.param_env.and(cx.identity_substs),\n+                              cx.tables(),\n+                              p)\n         }).collect(),\n         guard: arm.guard.to_ref(),\n         body: arm.body.to_ref(),"}, {"sha": "2f4ab36d394b00a488e623b47ef7cc8fd5ff1a70", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/60cf5428b3c3671da8ebfd7e885f8b06150655eb/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60cf5428b3c3671da8ebfd7e885f8b06150655eb/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=60cf5428b3c3671da8ebfd7e885f8b06150655eb", "patch": "@@ -37,7 +37,7 @@ pub struct Cx<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n \n-    pub param_env: ty::ParamEnv<'tcx>,\n+    pub param_env: ty::ParamEnv<'gcx>,\n \n     /// Identity `Substs` for use with const-evaluation.\n     pub identity_substs: &'gcx Substs<'gcx>,\n@@ -135,7 +135,10 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n \n     pub fn const_eval_literal(&mut self, e: &hir::Expr) -> Literal<'tcx> {\n         let tcx = self.tcx.global_tcx();\n-        match ConstContext::new(tcx, self.tables(), self.identity_substs).eval(e) {\n+        let const_cx = ConstContext::new(tcx,\n+                                         self.param_env.and(self.identity_substs),\n+                                         self.tables());\n+        match const_cx.eval(e) {\n             Ok(value) => Literal::Value { value: value },\n             Err(s) => self.fatal_const_eval_err(&s, e.span, \"expression\")\n         }"}, {"sha": "a881bf9eac7bf5d65909bb9303e31336bdba27d5", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60cf5428b3c3671da8ebfd7e885f8b06150655eb/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60cf5428b3c3671da8ebfd7e885f8b06150655eb/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=60cf5428b3c3671da8ebfd7e885f8b06150655eb", "patch": "@@ -65,7 +65,7 @@ struct CheckCrateVisitor<'a, 'tcx: 'a> {\n \n impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n     fn const_cx(&self) -> ConstContext<'a, 'gcx> {\n-        ConstContext::new(self.tcx, self.tables, self.identity_substs)\n+        ConstContext::new(self.tcx, self.param_env.and(self.identity_substs), self.tables)\n     }\n \n     fn check_const_eval(&self, expr: &'gcx hir::Expr) {"}, {"sha": "8780131bbcc26e957c8c9198713e6060e841b679", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60cf5428b3c3671da8ebfd7e885f8b06150655eb/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60cf5428b3c3671da8ebfd7e885f8b06150655eb/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=60cf5428b3c3671da8ebfd7e885f8b06150655eb", "patch": "@@ -59,6 +59,7 @@ use constrained_type_params as ctp;\n use middle::lang_items::SizedTraitLangItem;\n use middle::const_val::ConstVal;\n use middle::resolve_lifetime as rl;\n+use rustc::traits::Reveal;\n use rustc::ty::subst::Substs;\n use rustc::ty::{ToPredicate, ReprOptions};\n use rustc::ty::{self, AdtKind, ToPolyTraitRef, Ty, TyCtxt};\n@@ -550,6 +551,7 @@ fn convert_variant_ctor<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n fn convert_enum_variant_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                         def_id: DefId,\n                                         variants: &[hir::Variant]) {\n+    let param_env = ty::ParamEnv::empty(Reveal::UserFacing);\n     let def = tcx.adt_def(def_id);\n     let repr_type = def.repr.discr_type();\n     let initial = repr_type.initial_discriminant(tcx);\n@@ -561,7 +563,7 @@ fn convert_enum_variant_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         prev_discr = Some(if let Some(e) = variant.node.disr_expr {\n             let expr_did = tcx.hir.local_def_id(e.node_id);\n             let substs = Substs::identity_for_item(tcx, expr_did);\n-            let result = tcx.at(variant.span).const_eval((expr_did, substs));\n+            let result = tcx.at(variant.span).const_eval(param_env.and((expr_did, substs)));\n \n             // enum variant evaluation happens before the global constant check\n             // so we need to report the real error"}, {"sha": "9a5f65d67b106641da5fc204fc4fa6b3936cd3ca", "filename": "src/test/run-pass/issue-43357.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/60cf5428b3c3671da8ebfd7e885f8b06150655eb/src%2Ftest%2Frun-pass%2Fissue-43357.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60cf5428b3c3671da8ebfd7e885f8b06150655eb/src%2Ftest%2Frun-pass%2Fissue-43357.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-43357.rs?ref=60cf5428b3c3671da8ebfd7e885f8b06150655eb", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Trait {\n+    type Output;\n+}\n+\n+fn f<T: Trait>() {\n+    std::mem::size_of::<T::Output>();\n+}\n+\n+fn main() {}"}]}