{"sha": "f2241f640bb9f04cce88b2d28092cbfcee04c43e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMjQxZjY0MGJiOWYwNGNjZTg4YjJkMjgwOTJjYmZjZWUwNGM0M2U=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-29T16:10:08Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-02-01T15:39:50Z"}, "message": "Make the existential type errors a little bit more helpful", "tree": {"sha": "210533260525fd49bfc718ea94c21f1fb6dc4ea3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/210533260525fd49bfc718ea94c21f1fb6dc4ea3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2241f640bb9f04cce88b2d28092cbfcee04c43e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2241f640bb9f04cce88b2d28092cbfcee04c43e", "html_url": "https://github.com/rust-lang/rust/commit/f2241f640bb9f04cce88b2d28092cbfcee04c43e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2241f640bb9f04cce88b2d28092cbfcee04c43e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "984688ace34ec0add8f365ead6587237537fc230", "url": "https://api.github.com/repos/rust-lang/rust/commits/984688ace34ec0add8f365ead6587237537fc230", "html_url": "https://github.com/rust-lang/rust/commit/984688ace34ec0add8f365ead6587237537fc230"}], "stats": {"total": 44, "additions": 32, "deletions": 12}, "files": [{"sha": "b26a6a2292a04c6bcd064496d021a7985cff94fb", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f2241f640bb9f04cce88b2d28092cbfcee04c43e/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2241f640bb9f04cce88b2d28092cbfcee04c43e/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=f2241f640bb9f04cce88b2d28092cbfcee04c43e", "patch": "@@ -1355,10 +1355,9 @@ fn find_existential_constraints<'a, 'tcx>(\n                 let mut index_map: FxHashMap<ty::ParamTy, usize> = FxHashMap::default();\n                 // skip binder is ok, since we only use this to find generic parameters and their\n                 // positions.\n-                for subst in substs.iter() {\n+                for (idx, subst) in substs.iter().enumerate() {\n                     if let UnpackedKind::Type(ty) = subst.unpack() {\n                         if let ty::Param(p) = ty.sty {\n-                            let idx = index_map.len();\n                             if index_map.insert(p, idx).is_some() {\n                                 // there was already an entry for `p`, meaning a generic parameter\n                                 // was used twice\n@@ -1391,20 +1390,24 @@ fn find_existential_constraints<'a, 'tcx>(\n                 }).collect();\n                 if let Some((prev_span, prev_ty, ref prev_indices)) = self.found {\n                     let mut ty = concrete_type.walk().fuse();\n-                    let mut prev_ty = prev_ty.walk().fuse();\n-                    let iter_eq = (&mut ty).zip(&mut prev_ty).all(|(t, p)| match (&t.sty, &p.sty) {\n+                    let mut p_ty = prev_ty.walk().fuse();\n+                    let iter_eq = (&mut ty).zip(&mut p_ty).all(|(t, p)| match (&t.sty, &p.sty) {\n                         // type parameters are equal to any other type parameter for the purpose of\n                         // concrete type equality, as it is possible to obtain the same type just\n                         // by passing matching parameters to a function.\n                         (ty::Param(_), ty::Param(_)) => true,\n                         _ => t == p,\n                     });\n-                    if !iter_eq || ty.next().is_some() || prev_ty.next().is_some() {\n+                    if !iter_eq || ty.next().is_some() || p_ty.next().is_some() {\n                         // found different concrete types for the existential type\n                         let mut err = self.tcx.sess.struct_span_err(\n                             span,\n                             \"concrete type differs from previous defining existential type use\",\n                         );\n+                        err.span_label(\n+                            span,\n+                            format!(\"expected `{}`, got `{}`\", prev_ty, concrete_type),\n+                        );\n                         err.span_note(prev_span, \"previous use here\");\n                         err.emit();\n                     } else if indices != *prev_indices {\n@@ -1413,6 +1416,23 @@ fn find_existential_constraints<'a, 'tcx>(\n                             span,\n                             \"concrete type's generic parameters differ from previous defining use\",\n                         );\n+                        use std::fmt::Write;\n+                        let mut s = String::new();\n+                        write!(s, \"expected [\").unwrap();\n+                        let list = |s: &mut String, indices: &Vec<usize>| {\n+                            let mut indices = indices.iter().cloned();\n+                            if let Some(first) = indices.next() {\n+                                write!(s, \"`{}`\", substs[first]).unwrap();\n+                                for i in indices {\n+                                    write!(s, \", `{}`\", substs[i]).unwrap();\n+                                }\n+                            }\n+                        };\n+                        list(&mut s, prev_indices);\n+                        write!(s, \"], got [\").unwrap();\n+                        list(&mut s, &indices);\n+                        write!(s, \"]\").unwrap();\n+                        err.span_label(span, s);\n                         err.span_note(prev_span, \"previous use here\");\n                         err.emit();\n                     }"}, {"sha": "3f9ed96400b54ac4e29d670dc5dc4190d9ab3c95", "filename": "src/test/ui/existential_types/different_defining_uses.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2241f640bb9f04cce88b2d28092cbfcee04c43e/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2241f640bb9f04cce88b2d28092cbfcee04c43e/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses.stderr?ref=f2241f640bb9f04cce88b2d28092cbfcee04c43e", "patch": "@@ -4,7 +4,7 @@ error: concrete type differs from previous defining existential type use\n LL | / fn bar() -> Foo { //~ ERROR concrete type differs from previous\n LL | |     42i32\n LL | | }\n-   | |_^\n+   | |_^ expected `&'static str`, got `i32`\n    |\n note: previous use here\n   --> $DIR/different_defining_uses.rs:8:1"}, {"sha": "e29256a5014f9fede3c8eecc84b6a96c14288712", "filename": "src/test/ui/existential_types/different_defining_uses_never_type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2241f640bb9f04cce88b2d28092cbfcee04c43e/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses_never_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2241f640bb9f04cce88b2d28092cbfcee04c43e/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses_never_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fdifferent_defining_uses_never_type.stderr?ref=f2241f640bb9f04cce88b2d28092cbfcee04c43e", "patch": "@@ -4,7 +4,7 @@ error: concrete type differs from previous defining existential type use\n LL | / fn bar() -> Foo { //~ ERROR concrete type differs from previous\n LL | |     panic!()\n LL | | }\n-   | |_^\n+   | |_^ expected `&'static str`, got `()`\n    |\n note: previous use here\n   --> $DIR/different_defining_uses_never_type.rs:8:1\n@@ -20,7 +20,7 @@ error: concrete type differs from previous defining existential type use\n LL | / fn boo() -> Foo { //~ ERROR concrete type differs from previous\n LL | |     loop {}\n LL | | }\n-   | |_^\n+   | |_^ expected `&'static str`, got `()`\n    |\n note: previous use here\n   --> $DIR/different_defining_uses_never_type.rs:8:1"}, {"sha": "3f129658b8fd0d119e865201c98db329e6d927e2", "filename": "src/test/ui/existential_types/generic_different_defining_uses.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2241f640bb9f04cce88b2d28092cbfcee04c43e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_different_defining_uses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2241f640bb9f04cce88b2d28092cbfcee04c43e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_different_defining_uses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_different_defining_uses.stderr?ref=f2241f640bb9f04cce88b2d28092cbfcee04c43e", "patch": "@@ -4,7 +4,7 @@ error: concrete type differs from previous defining existential type use\n LL | / fn my_iter2<T>(t: T) -> MyIter<T> { //~ ERROR concrete type differs from previous\n LL | |     Some(t).into_iter()\n LL | | }\n-   | |_^\n+   | |_^ expected `std::iter::Once<T>`, got `std::option::IntoIter<T>`\n    |\n note: previous use here\n   --> $DIR/generic_different_defining_uses.rs:7:1"}, {"sha": "1c96c15a76919696af6185af61c4755b03ebf14c", "filename": "src/test/ui/existential_types/generic_duplicate_param_use3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2241f640bb9f04cce88b2d28092cbfcee04c43e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2241f640bb9f04cce88b2d28092cbfcee04c43e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use3.stderr?ref=f2241f640bb9f04cce88b2d28092cbfcee04c43e", "patch": "@@ -14,7 +14,7 @@ LL | / fn three<T, U: Debug>(_: T, u: U) -> Two<T, U> {\n LL | | //~^ concrete type's generic parameters differ from previous defining use\n LL | |     u\n LL | | }\n-   | |_^\n+   | |_^ expected [`T`], got [`U`]\n    |\n note: previous use here\n   --> $DIR/generic_duplicate_param_use3.rs:15:1"}, {"sha": "166623801c246496ab8e935d2691bd625eef63b3", "filename": "src/test/ui/existential_types/generic_duplicate_param_use5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2241f640bb9f04cce88b2d28092cbfcee04c43e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2241f640bb9f04cce88b2d28092cbfcee04c43e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use5.stderr?ref=f2241f640bb9f04cce88b2d28092cbfcee04c43e", "patch": "@@ -5,7 +5,7 @@ LL | / fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n LL | | //~^ concrete type differs from previous\n LL | |     (u, t)\n LL | | }\n-   | |_^\n+   | |_^ expected `(T, U)`, got `(U, T)`\n    |\n note: previous use here\n   --> $DIR/generic_duplicate_param_use5.rs:10:1"}, {"sha": "da49a83be1f70801d279543cde3addc284607a75", "filename": "src/test/ui/existential_types/generic_duplicate_param_use6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2241f640bb9f04cce88b2d28092cbfcee04c43e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2241f640bb9f04cce88b2d28092cbfcee04c43e/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_duplicate_param_use6.stderr?ref=f2241f640bb9f04cce88b2d28092cbfcee04c43e", "patch": "@@ -5,7 +5,7 @@ LL | / fn three<T: Debug, U: Debug>(t: T, u: U) -> Two<T, U> {\n LL | | //~^ concrete type differs from previous\n LL | |     (u, t)\n LL | | }\n-   | |_^\n+   | |_^ expected `(T, T)`, got `(U, T)`\n    |\n note: previous use here\n   --> $DIR/generic_duplicate_param_use6.rs:10:1"}]}