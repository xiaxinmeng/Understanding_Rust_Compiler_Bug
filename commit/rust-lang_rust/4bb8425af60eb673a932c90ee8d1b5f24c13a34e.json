{"sha": "4bb8425af60eb673a932c90ee8d1b5f24c13a34e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYjg0MjVhZjYwZWI2NzNhOTMyYzkwZWU4ZDFiNWYyNGMxM2EzNGU=", "commit": {"author": {"name": "Ian Jackson", "email": "ijackson@chiark.greenend.org.uk", "date": "2021-02-22T15:26:19Z"}, "committer": {"name": "Ian Jackson", "email": "ijackson@chiark.greenend.org.uk", "date": "2021-02-23T00:58:10Z"}, "message": "ExitStatus: Improve documentation re wait status vs exit status\n\nThe use of `ExitStatus` as the Rust type name for a Unix *wait\nstatus*, not an *exit status*, is very confusing, but sadly probably\ntoo late to change.\n\nThis area is confusing enough in Unix already (and many programmers\nare already confuxed).  We can at least document it.\n\nI chose *not* to mention the way shells like to exit with signal\nnumbers, thus turning signal numbers into exit statuses.  This is only\nrelevant for Rust programs using `std::process` if they run shells.\n\nSigned-off-by: Ian Jackson <ijackson@chiark.greenend.org.uk>", "tree": {"sha": "2a7df2379617c088d3ba1b539dc4520b6a4277fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a7df2379617c088d3ba1b539dc4520b6a4277fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bb8425af60eb673a932c90ee8d1b5f24c13a34e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb8425af60eb673a932c90ee8d1b5f24c13a34e", "html_url": "https://github.com/rust-lang/rust/commit/4bb8425af60eb673a932c90ee8d1b5f24c13a34e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bb8425af60eb673a932c90ee8d1b5f24c13a34e/comments", "author": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ijackson", "id": 2090772, "node_id": "MDQ6VXNlcjIwOTA3NzI=", "avatar_url": "https://avatars.githubusercontent.com/u/2090772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ijackson", "html_url": "https://github.com/ijackson", "followers_url": "https://api.github.com/users/ijackson/followers", "following_url": "https://api.github.com/users/ijackson/following{/other_user}", "gists_url": "https://api.github.com/users/ijackson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ijackson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ijackson/subscriptions", "organizations_url": "https://api.github.com/users/ijackson/orgs", "repos_url": "https://api.github.com/users/ijackson/repos", "events_url": "https://api.github.com/users/ijackson/events{/privacy}", "received_events_url": "https://api.github.com/users/ijackson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8cfd56985bd8cc32274bfead4b1499da1c38810", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8cfd56985bd8cc32274bfead4b1499da1c38810", "html_url": "https://github.com/rust-lang/rust/commit/d8cfd56985bd8cc32274bfead4b1499da1c38810"}], "stats": {"total": 39, "additions": 30, "deletions": 9}, "files": [{"sha": "15ac9e402c589243b2b8720efbba4f186bb4496e", "filename": "library/std/src/process.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4bb8425af60eb673a932c90ee8d1b5f24c13a34e/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb8425af60eb673a932c90ee8d1b5f24c13a34e/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=4bb8425af60eb673a932c90ee8d1b5f24c13a34e", "patch": "@@ -885,7 +885,7 @@ impl Command {\n     }\n \n     /// Executes a command as a child process, waiting for it to finish and\n-    /// collecting its exit status.\n+    /// collecting its status.\n     ///\n     /// By default, stdin, stdout and stderr are inherited from the parent.\n     ///\n@@ -899,7 +899,7 @@ impl Command {\n     ///                      .status()\n     ///                      .expect(\"failed to execute process\");\n     ///\n-    /// println!(\"process exited with: {}\", status);\n+    /// println!(\"process finished with: {}\", status);\n     ///\n     /// assert!(status.success());\n     /// ```\n@@ -1368,11 +1368,17 @@ impl From<fs::File> for Stdio {\n \n /// Describes the result of a process after it has terminated.\n ///\n-/// This `struct` is used to represent the exit status of a child process.\n+/// This `struct` is used to represent the exit status or other termination of a child process.\n /// Child processes are created via the [`Command`] struct and their exit\n /// status is exposed through the [`status`] method, or the [`wait`] method\n /// of a [`Child`] process.\n ///\n+/// An `ExitStatus` represents every possible disposition of a process.  On Unix this\n+/// is the **wait status**.  It is *not* simply an *exit status* (a value passed to `exit`).\n+///\n+/// For proper error reporting of failed processes, print the value of `ExitStatus` using its\n+/// implementation of [`Display`](crate::fmt::Display).\n+///\n /// [`status`]: Command::status\n /// [`wait`]: Child::wait\n #[derive(PartialEq, Eq, Clone, Copy, Debug)]\n@@ -1400,7 +1406,7 @@ impl ExitStatus {\n     /// if status.success() {\n     ///     println!(\"'projects/' directory created\");\n     /// } else {\n-    ///     println!(\"failed to create 'projects/' directory\");\n+    ///     println!(\"failed to create 'projects/' directory: {}\", status);\n     /// }\n     /// ```\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n@@ -1410,9 +1416,14 @@ impl ExitStatus {\n \n     /// Returns the exit code of the process, if any.\n     ///\n-    /// On Unix, this will return `None` if the process was terminated\n-    /// by a signal; `std::os::unix` provides an extension trait for\n-    /// extracting the signal and other details from the `ExitStatus`.\n+    /// In Unix terms the return value is the **exit status**: the value passed to `exit`, if the\n+    /// process finished by calling `exit`.  Note that on Unix the exit status is truncated to 8\n+    /// bits, and that values that didn't come from a program's call to `exit` may be invented the\n+    /// runtime system (often, for example, 255, 254, 127 or 126).\n+    ///\n+    /// On Unix, this will return `None` if the process was terminated by a signal.\n+    /// [`ExitStatusExt`](crate::os::unix::process::ExitStatusExt) is an\n+    /// extension trait for extracting any such signal, and other details, from the `ExitStatus`.\n     ///\n     /// # Examples\n     ///"}, {"sha": "6dc2033289a4aec3052e594f93fe35e66626d640", "filename": "library/std/src/sys/unix/ext/process.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4bb8425af60eb673a932c90ee8d1b5f24c13a34e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb8425af60eb673a932c90ee8d1b5f24c13a34e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=4bb8425af60eb673a932c90ee8d1b5f24c13a34e", "patch": "@@ -186,12 +186,20 @@ impl CommandExt for process::Command {\n \n /// Unix-specific extensions to [`process::ExitStatus`].\n ///\n+/// On Unix, `ExitStatus` **does not necessarily represent an exit status**, as passed to the\n+/// `exit` system call or returned by [`ExitStatus::code()`](crate::process::ExitStatus::code).\n+/// It represents **any wait status**, as returned by one of the `wait` family of system calls.\n+///\n+/// This is because a Unix wait status (a Rust `ExitStatus`) can represent a Unix exit status, but\n+/// can also represent other kinds of process event.\n+///\n /// This trait is sealed: it cannot be implemented outside the standard library.\n /// This is so that future additional methods are not breaking changes.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait ExitStatusExt: Sealed {\n-    /// Creates a new `ExitStatus` from the raw underlying `i32` return value of\n-    /// a process.\n+    /// Creates a new `ExitStatus` from the raw underlying integer status value from `wait`\n+    ///\n+    /// The value should be a **wait status, not an exit status**.\n     #[stable(feature = \"exit_status_from\", since = \"1.12.0\")]\n     fn from_raw(raw: i32) -> Self;\n \n@@ -220,6 +228,8 @@ pub trait ExitStatusExt: Sealed {\n     fn continued(&self) -> bool;\n \n     /// Returns the underlying raw `wait` status.\n+    ///\n+    /// The returned integer is a **wait status, not an exit status**.\n     #[unstable(feature = \"unix_process_wait_more\", issue = \"80695\")]\n     fn into_raw(self) -> i32;\n }"}]}