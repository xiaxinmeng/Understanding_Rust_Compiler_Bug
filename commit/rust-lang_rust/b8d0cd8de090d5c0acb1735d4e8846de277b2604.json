{"sha": "b8d0cd8de090d5c0acb1735d4e8846de277b2604", "node_id": "C_kwDOAAsO6NoAKGI4ZDBjZDhkZTA5MGQ1YzBhY2IxNzM1ZDRlODg0NmRlMjc3YjI2MDQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-24T01:52:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-24T01:52:00Z"}, "message": "Auto merge of #97272 - jackh726:ban-compare-mode-nll, r=Mark-Simulacrum\n\nDisallow compare-mode=nll test differences\n\nThis ensures that new tests don't get added not as revisions if they have nll output. This will make stabilization PR easier.\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "a0321d19af740bcd67d710365bc0268e949dd17d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0321d19af740bcd67d710365bc0268e949dd17d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8d0cd8de090d5c0acb1735d4e8846de277b2604", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8d0cd8de090d5c0acb1735d4e8846de277b2604", "html_url": "https://github.com/rust-lang/rust/commit/b8d0cd8de090d5c0acb1735d4e8846de277b2604", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8d0cd8de090d5c0acb1735d4e8846de277b2604/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee160f2f5e73b6f5954bc33f059c316d9e8582c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee160f2f5e73b6f5954bc33f059c316d9e8582c4", "html_url": "https://github.com/rust-lang/rust/commit/ee160f2f5e73b6f5954bc33f059c316d9e8582c4"}, {"sha": "2c75eca035bad996dfd40f340e9645236446f4f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c75eca035bad996dfd40f340e9645236446f4f4", "html_url": "https://github.com/rust-lang/rust/commit/2c75eca035bad996dfd40f340e9645236446f4f4"}], "stats": {"total": 71, "additions": 48, "deletions": 23}, "files": [{"sha": "c2cb8bcde19d30ecd072bf9554c9d9e80f0515f4", "filename": "src/test/ui/json-multiple.nll.stderr", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee160f2f5e73b6f5954bc33f059c316d9e8582c4/src%2Ftest%2Fui%2Fjson-multiple.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee160f2f5e73b6f5954bc33f059c316d9e8582c4/src%2Ftest%2Fui%2Fjson-multiple.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-multiple.nll.stderr?ref=ee160f2f5e73b6f5954bc33f059c316d9e8582c4", "patch": "@@ -1 +0,0 @@\n-{\"artifact\":\"$TEST_BUILD_DIR/json-multiple.nll/libjson_multiple.rlib\",\"emit\":\"link\"}"}, {"sha": "4c37e20d94dda0e9b3c59e886a1c0ad5dfb92dc5", "filename": "src/test/ui/json-multiple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8d0cd8de090d5c0acb1735d4e8846de277b2604/src%2Ftest%2Fui%2Fjson-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d0cd8de090d5c0acb1735d4e8846de277b2604/src%2Ftest%2Fui%2Fjson-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-multiple.rs?ref=b8d0cd8de090d5c0acb1735d4e8846de277b2604", "patch": "@@ -1,5 +1,6 @@\n // build-pass\n // ignore-pass (different metadata emitted in different modes)\n // compile-flags: --json=diagnostic-short --json artifacts --error-format=json\n+// ignore-compare-mode-nll\n \n #![crate_type = \"lib\"]"}, {"sha": "f19a9cd92afc3070d8af35a19079897c88569d25", "filename": "src/test/ui/json-options.nll.stderr", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee160f2f5e73b6f5954bc33f059c316d9e8582c4/src%2Ftest%2Fui%2Fjson-options.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee160f2f5e73b6f5954bc33f059c316d9e8582c4/src%2Ftest%2Fui%2Fjson-options.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-options.nll.stderr?ref=ee160f2f5e73b6f5954bc33f059c316d9e8582c4", "patch": "@@ -1 +0,0 @@\n-{\"artifact\":\"$TEST_BUILD_DIR/json-options.nll/libjson_options.rlib\",\"emit\":\"link\"}"}, {"sha": "fea07cc9e3e542cd089ee0f9e396878ced6dd361", "filename": "src/test/ui/json-options.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8d0cd8de090d5c0acb1735d4e8846de277b2604/src%2Ftest%2Fui%2Fjson-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d0cd8de090d5c0acb1735d4e8846de277b2604/src%2Ftest%2Fui%2Fjson-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-options.rs?ref=b8d0cd8de090d5c0acb1735d4e8846de277b2604", "patch": "@@ -1,5 +1,6 @@\n // build-pass\n // ignore-pass (different metadata emitted in different modes)\n // compile-flags: --json=diagnostic-short,artifacts --error-format=json\n+// ignore-compare-mode-nll\n \n #![crate_type = \"lib\"]"}, {"sha": "ed62f300284916d02feff10cce1ec92e302dcb36", "filename": "src/test/ui/rmeta/emit-artifact-notifications.nll.stderr", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee160f2f5e73b6f5954bc33f059c316d9e8582c4/src%2Ftest%2Fui%2Frmeta%2Femit-artifact-notifications.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee160f2f5e73b6f5954bc33f059c316d9e8582c4/src%2Ftest%2Fui%2Frmeta%2Femit-artifact-notifications.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frmeta%2Femit-artifact-notifications.nll.stderr?ref=ee160f2f5e73b6f5954bc33f059c316d9e8582c4", "patch": "@@ -1 +0,0 @@\n-{\"artifact\":\"$TEST_BUILD_DIR/rmeta/emit-artifact-notifications.nll/libemit_artifact_notifications.rmeta\",\"emit\":\"metadata\"}"}, {"sha": "be38fb4c3a69a31babcd5469ab0b91af1ee35b3a", "filename": "src/test/ui/rmeta/emit-artifact-notifications.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8d0cd8de090d5c0acb1735d4e8846de277b2604/src%2Ftest%2Fui%2Frmeta%2Femit-artifact-notifications.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d0cd8de090d5c0acb1735d4e8846de277b2604/src%2Ftest%2Fui%2Frmeta%2Femit-artifact-notifications.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frmeta%2Femit-artifact-notifications.rs?ref=b8d0cd8de090d5c0acb1735d4e8846de277b2604", "patch": "@@ -2,6 +2,7 @@\n // build-pass\n // ignore-pass\n // ^-- needed because `--pass check` does not emit the output needed.\n+// ignore-compare-mode-nll\n \n // A very basic test for the emission of artifact notifications in JSON output.\n "}, {"sha": "60734cedb50e3b3a582c8c419ed1ef21c364b3c3", "filename": "src/test/ui/save-analysis/emit-notifications.nll.stderr", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee160f2f5e73b6f5954bc33f059c316d9e8582c4/src%2Ftest%2Fui%2Fsave-analysis%2Femit-notifications.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee160f2f5e73b6f5954bc33f059c316d9e8582c4/src%2Ftest%2Fui%2Fsave-analysis%2Femit-notifications.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Femit-notifications.nll.stderr?ref=ee160f2f5e73b6f5954bc33f059c316d9e8582c4", "patch": "@@ -1,2 +0,0 @@\n-{\"artifact\":\"$TEST_BUILD_DIR/save-analysis/emit-notifications.nll/save-analysis/libemit_notifications.json\",\"emit\":\"save-analysis\"}\n-{\"artifact\":\"$TEST_BUILD_DIR/save-analysis/emit-notifications.nll/libemit_notifications.rlib\",\"emit\":\"link\"}"}, {"sha": "8a696695ec0a2faa1e3e0c234c2136f09ece0149", "filename": "src/test/ui/save-analysis/emit-notifications.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8d0cd8de090d5c0acb1735d4e8846de277b2604/src%2Ftest%2Fui%2Fsave-analysis%2Femit-notifications.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d0cd8de090d5c0acb1735d4e8846de277b2604/src%2Ftest%2Fui%2Fsave-analysis%2Femit-notifications.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Femit-notifications.rs?ref=b8d0cd8de090d5c0acb1735d4e8846de277b2604", "patch": "@@ -3,5 +3,6 @@\n // compile-flags: --crate-type rlib --error-format=json\n // ignore-pass\n // ^-- needed because otherwise, the .stderr file changes with --pass check\n+// ignore-compare-mode-nll\n \n pub fn foo() {}"}, {"sha": "64b6df3567a4a07cd70f69d5956902726d67b08c", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 44, "deletions": 18, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b8d0cd8de090d5c0acb1735d4e8846de277b2604/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8d0cd8de090d5c0acb1735d4e8846de277b2604/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=b8d0cd8de090d5c0acb1735d4e8846de277b2604", "patch": "@@ -3112,7 +3112,7 @@ impl<'test> TestCx<'test> {\n         let expected_fixed = self.load_expected_output(UI_FIXED);\n \n         let modes_to_prune = vec![CompareMode::Nll];\n-        self.prune_duplicate_outputs(&modes_to_prune);\n+        self.check_and_prune_duplicate_outputs(&proc_res, &[], &modes_to_prune);\n \n         let mut errors = self.load_compare_outputs(&proc_res, TestOutput::Compile, explicit);\n         let rustfix_input = json::rustfix_diagnostics_only(&proc_res.stderr);\n@@ -3730,28 +3730,54 @@ impl<'test> TestCx<'test> {\n         if self.config.bless { 0 } else { 1 }\n     }\n \n-    fn prune_duplicate_output(&self, mode: CompareMode, kind: &str, canon_content: &str) {\n-        let examined_path = expected_output_path(&self.testpaths, self.revision, &Some(mode), kind);\n-\n-        let examined_content =\n-            self.load_expected_output_from_path(&examined_path).unwrap_or_else(|_| String::new());\n+    fn check_and_prune_duplicate_outputs(\n+        &self,\n+        proc_res: &ProcRes,\n+        modes: &[CompareMode],\n+        require_same_modes: &[CompareMode],\n+    ) {\n+        for kind in UI_EXTENSIONS {\n+            let canon_comparison_path =\n+                expected_output_path(&self.testpaths, self.revision, &None, kind);\n \n-        if canon_content == examined_content {\n-            self.delete_file(&examined_path);\n-        }\n-    }\n+            let canon = match self.load_expected_output_from_path(&canon_comparison_path) {\n+                Ok(canon) => canon,\n+                _ => continue,\n+            };\n+            let bless = self.config.bless;\n+            let check_and_prune_duplicate_outputs = |mode: &CompareMode, require_same: bool| {\n+                let examined_path =\n+                    expected_output_path(&self.testpaths, self.revision, &Some(mode.clone()), kind);\n+\n+                // If there is no output, there is nothing to do\n+                let examined_content = match self.load_expected_output_from_path(&examined_path) {\n+                    Ok(content) => content,\n+                    _ => return,\n+                };\n \n-    fn prune_duplicate_outputs(&self, modes: &[CompareMode]) {\n-        if self.config.bless {\n-            for kind in UI_EXTENSIONS {\n-                let canon_comparison_path =\n-                    expected_output_path(&self.testpaths, self.revision, &None, kind);\n+                let is_duplicate = canon == examined_content;\n \n-                if let Ok(canon) = self.load_expected_output_from_path(&canon_comparison_path) {\n-                    for mode in modes {\n-                        self.prune_duplicate_output(mode.clone(), kind, &canon);\n+                match (bless, require_same, is_duplicate) {\n+                    // If we're blessing and the output is the same, then delete the file.\n+                    (true, _, true) => {\n+                        self.delete_file(&examined_path);\n                     }\n+                    // If we want them to be the same, but they are different, then error.\n+                    // We do this wether we bless or not\n+                    (_, true, false) => {\n+                        self.fatal_proc_rec(\n+                            &format!(\"`{}` should not have different output from base test!\", kind),\n+                            proc_res,\n+                        );\n+                    }\n+                    _ => {}\n                 }\n+            };\n+            for mode in modes {\n+                check_and_prune_duplicate_outputs(mode, false);\n+            }\n+            for mode in require_same_modes {\n+                check_and_prune_duplicate_outputs(mode, true);\n             }\n         }\n     }"}]}