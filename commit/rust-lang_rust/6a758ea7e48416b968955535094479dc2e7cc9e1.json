{"sha": "6a758ea7e48416b968955535094479dc2e7cc9e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNzU4ZWE3ZTQ4NDE2Yjk2ODk1NTUzNTA5NDQ3OWRjMmU3Y2M5ZTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-22T21:17:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-22T21:17:12Z"}, "message": "Auto merge of #85193 - pnkfelix:readd-support-for-inner-attrs-within-match, r=nikomatsakis\n\nRe-add support for parsing (and pretty-printing) inner-attributes in match body\n\nRe-add support for parsing (and pretty-printing) inner-attributes within body of a `match`.\n\nIn other words, we can do `match EXPR { #![inner_attr] ARM_1 ARM_2 ... }` again.\n\nI believe this unbreaks the only four crates that crater flagged as broken by PR #83312.\n\n(I am putting this up so that the lang-team can check it out and decide whether it changes their mind about what to do regarding PR #83312.)", "tree": {"sha": "8d9992caeb8917c25fa0a728c6e8209f33750fb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d9992caeb8917c25fa0a728c6e8209f33750fb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a758ea7e48416b968955535094479dc2e7cc9e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a758ea7e48416b968955535094479dc2e7cc9e1", "html_url": "https://github.com/rust-lang/rust/commit/6a758ea7e48416b968955535094479dc2e7cc9e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a758ea7e48416b968955535094479dc2e7cc9e1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8be3162d734f3583b240977615f3e1bae6b364a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8be3162d734f3583b240977615f3e1bae6b364a", "html_url": "https://github.com/rust-lang/rust/commit/b8be3162d734f3583b240977615f3e1bae6b364a"}, {"sha": "8ce761d75ed5132c90bfe28e983d83007b8ce7c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ce761d75ed5132c90bfe28e983d83007b8ce7c3", "html_url": "https://github.com/rust-lang/rust/commit/8ce761d75ed5132c90bfe28e983d83007b8ce7c3"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "3d2785faad65e44949b160df29ab7d39b401fef9", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6a758ea7e48416b968955535094479dc2e7cc9e1/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a758ea7e48416b968955535094479dc2e7cc9e1/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=6a758ea7e48416b968955535094479dc2e7cc9e1", "patch": "@@ -369,6 +369,10 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n         self.print_either_attributes(attrs, ast::AttrStyle::Inner, false, true)\n     }\n \n+    fn print_inner_attributes_no_trailing_hardbreak(&mut self, attrs: &[ast::Attribute]) {\n+        self.print_either_attributes(attrs, ast::AttrStyle::Inner, false, false)\n+    }\n+\n     fn print_outer_attributes(&mut self, attrs: &[ast::Attribute]) {\n         self.print_either_attributes(attrs, ast::AttrStyle::Outer, false, true)\n     }\n@@ -1960,6 +1964,7 @@ impl<'a> State<'a> {\n                 self.print_expr_as_cond(expr);\n                 self.s.space();\n                 self.bopen();\n+                self.print_inner_attributes_no_trailing_hardbreak(attrs);\n                 for arm in arms {\n                     self.print_arm(arm);\n                 }"}, {"sha": "9dff40ff1ed6eae2f310b21499ad2a17b3781e3f", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a758ea7e48416b968955535094479dc2e7cc9e1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a758ea7e48416b968955535094479dc2e7cc9e1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=6a758ea7e48416b968955535094479dc2e7cc9e1", "patch": "@@ -1945,7 +1945,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses a `match ... { ... }` expression (`match` token already eaten).\n-    fn parse_match_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n+    fn parse_match_expr(&mut self, mut attrs: AttrVec) -> PResult<'a, P<Expr>> {\n         let match_span = self.prev_token.span;\n         let lo = self.prev_token.span;\n         let scrutinee = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;\n@@ -1960,6 +1960,7 @@ impl<'a> Parser<'a> {\n             }\n             return Err(e);\n         }\n+        attrs.extend(self.parse_inner_attributes()?);\n \n         let mut arms: Vec<Arm> = Vec::new();\n         while self.token != token::CloseDelim(token::Brace) {"}, {"sha": "a32903a6409a413bef8802e904334a8708a6f7de", "filename": "src/test/pretty/ast-stmt-expr-attr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a758ea7e48416b968955535094479dc2e7cc9e1/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a758ea7e48416b968955535094479dc2e7cc9e1/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs?ref=6a758ea7e48416b968955535094479dc2e7cc9e1", "patch": "@@ -43,10 +43,10 @@ fn syntax() {\n                     #![attr]\n                 };\n     let _ =\n-        #[attr] match true\n-                    {\n-                     #[attr]\n-                     _ => false,\n+        #[attr] match true {\n+                    #![attr]\n+                            #[attr]\n+                            _ => false,\n                 };\n     let _ = #[attr] || #[attr] foo;\n     let _ = #[attr] move || #[attr] foo;"}, {"sha": "231351433c8906fe47d52d9bcd6851cd4988da98", "filename": "src/test/pretty/stmt_expr_attributes.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6a758ea7e48416b968955535094479dc2e7cc9e1/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a758ea7e48416b968955535094479dc2e7cc9e1/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs?ref=6a758ea7e48416b968955535094479dc2e7cc9e1", "patch": "@@ -41,9 +41,16 @@ fn _3() {\n fn _4() {\n \n     #[rustc_dummy]\n-    match () { _ => (), }\n+    match () {\n+        #![rustc_dummy]\n+        _ => (),\n+    }\n \n-    let _ = #[rustc_dummy] match () { () => (), };\n+    let _ =\n+        #[rustc_dummy] match () {\n+                           #![rustc_dummy]\n+                           () => (),\n+                       };\n }\n \n fn _5() {\n@@ -164,7 +171,11 @@ fn _11() {\n         #[rustc_dummy] loop  {\n                            #![rustc_dummy]\n                        };\n-    let _ = #[rustc_dummy] match false { _ => (), };\n+    let _ =\n+        #[rustc_dummy] match false {\n+                           #![rustc_dummy]\n+                           _ => (),\n+                       };\n     let _ = #[rustc_dummy] || #[rustc_dummy] ();\n     let _ = #[rustc_dummy] move || #[rustc_dummy] ();\n     let _ ="}, {"sha": "5e9d29a152f915bedcd49571d802f2fe7e9fa085", "filename": "src/test/ui/parser/stmt_expr_attrs_placement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a758ea7e48416b968955535094479dc2e7cc9e1/src%2Ftest%2Fui%2Fparser%2Fstmt_expr_attrs_placement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a758ea7e48416b968955535094479dc2e7cc9e1/src%2Ftest%2Fui%2Fparser%2Fstmt_expr_attrs_placement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstmt_expr_attrs_placement.rs?ref=6a758ea7e48416b968955535094479dc2e7cc9e1", "patch": "@@ -30,7 +30,7 @@ fn main() {\n     //~^ ERROR an inner attribute is not permitted in this context\n \n     let g = match true { #![allow(warnings)] _ => {} };\n-    //~^ ERROR an inner attribute is not permitted in this context\n+\n \n     struct MyStruct { field: u8 }\n     let h = MyStruct { #![allow(warnings)] field: 0 };"}, {"sha": "808903d9c62f3e559d80db61cc8eff9b05cf6fc3", "filename": "src/test/ui/parser/stmt_expr_attrs_placement.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6a758ea7e48416b968955535094479dc2e7cc9e1/src%2Ftest%2Fui%2Fparser%2Fstmt_expr_attrs_placement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a758ea7e48416b968955535094479dc2e7cc9e1/src%2Ftest%2Fui%2Fparser%2Fstmt_expr_attrs_placement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstmt_expr_attrs_placement.stderr?ref=6a758ea7e48416b968955535094479dc2e7cc9e1", "patch": "@@ -46,14 +46,6 @@ LL |     let f = [#![allow(warnings)] 1; 0];\n    |\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n-error: an inner attribute is not permitted in this context\n-  --> $DIR/stmt_expr_attrs_placement.rs:32:26\n-   |\n-LL |     let g = match true { #![allow(warnings)] _ => {} };\n-   |                          ^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n-\n error: an inner attribute is not permitted in this context\n   --> $DIR/stmt_expr_attrs_placement.rs:36:24\n    |\n@@ -62,5 +54,5 @@ LL |     let h = MyStruct { #![allow(warnings)] field: 0 };\n    |\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 7 previous errors\n "}]}