{"sha": "82fb85a15223bf2e7345197bbbc96c399292d54f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZmI4NWExNTIyM2JmMmU3MzQ1MTk3YmJiYzk2YzM5OTI5MmQ1NGY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-15T16:13:58Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-19T01:09:08Z"}, "message": "rustc: Mix extra-filename in temp outputs\n\nWhen invoking the compiler in parallel, the intermediate output of the object\nfiles and bytecode can stomp over one another if two crates with the same name\nare being compiled.\n\nThe output file is already being disambiguated with `-C extra-filename`, so this\ncommit alters the naming of the temporary files to also mix in the extra\nfilename to ensure that file names don't clash.", "tree": {"sha": "9673f5c72c57ad8b6069b6e9914c2ad79a146a2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9673f5c72c57ad8b6069b6e9914c2ad79a146a2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82fb85a15223bf2e7345197bbbc96c399292d54f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82fb85a15223bf2e7345197bbbc96c399292d54f", "html_url": "https://github.com/rust-lang/rust/commit/82fb85a15223bf2e7345197bbbc96c399292d54f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82fb85a15223bf2e7345197bbbc96c399292d54f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50868db351d5261346afe855f88235d044b80195", "url": "https://api.github.com/repos/rust-lang/rust/commits/50868db351d5261346afe855f88235d044b80195", "html_url": "https://github.com/rust-lang/rust/commit/50868db351d5261346afe855f88235d044b80195"}], "stats": {"total": 57, "additions": 41, "deletions": 16}, "files": [{"sha": "cc73cdce6a8c3f8fc44f5f48e31aa3c923ce517f", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82fb85a15223bf2e7345197bbbc96c399292d54f/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82fb85a15223bf2e7345197bbbc96c399292d54f/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=82fb85a15223bf2e7345197bbbc96c399292d54f", "patch": "@@ -571,8 +571,9 @@ pub fn find_crate_name(sess: Option<&Session>,\n     };\n \n     // Look in attributes 100% of the time to make sure the attribute is marked\n-    // as used. After doing this, however, favor crate names from the command\n-    // line.\n+    // as used. After doing this, however, we still prioritize a crate name from\n+    // the command line over one found in the #[crate_name] attribute. If we\n+    // find both we ensure that they're the same later on as well.\n     let attr_crate_name = attrs.iter().find(|at| at.check_name(\"crate_name\"))\n                                .and_then(|at| at.value_str().map(|s| (at, s)));\n \n@@ -1558,7 +1559,7 @@ fn add_upstream_rust_crates(cmd: &mut Command, sess: &Session,\n                 add_dynamic_crate(cmd, sess, src.dylib.unwrap())\n             }\n             cstore::RequireStatic => {\n-                add_static_crate(cmd, sess, tmpdir, cnum, src.rlib.unwrap())\n+                add_static_crate(cmd, sess, tmpdir, src.rlib.unwrap())\n             }\n         }\n \n@@ -1575,7 +1576,7 @@ fn add_upstream_rust_crates(cmd: &mut Command, sess: &Session,\n \n     // Adds the static \"rlib\" versions of all crates to the command line.\n     fn add_static_crate(cmd: &mut Command, sess: &Session, tmpdir: &Path,\n-                        cnum: ast::CrateNum, cratepath: Path) {\n+                        cratepath: Path) {\n         // When performing LTO on an executable output, all of the\n         // bytecode from the upstream libraries has already been\n         // included in our object file output. We need to modify all of\n@@ -1591,7 +1592,8 @@ fn add_upstream_rust_crates(cmd: &mut Command, sess: &Session,\n         // If we're not doing LTO, then our job is simply to just link\n         // against the archive.\n         if sess.lto() {\n-            let name = sess.cstore.get_crate_data(cnum).name.clone();\n+            let name = cratepath.filename_str().unwrap();\n+            let name = name.slice(3, name.len() - 5); // chop off lib/.rlib\n             time(sess.time_passes(),\n                  format!(\"altering {}.rlib\", name).as_slice(),\n                  (), |()| {"}, {"sha": "c51f1615d59806eff4f24011747e7f3f76fb7bfe", "filename": "src/librustc/back/lto.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82fb85a15223bf2e7345197bbbc96c399292d54f/src%2Flibrustc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82fb85a15223bf2e7345197bbbc96c399292d54f/src%2Flibrustc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flto.rs?ref=82fb85a15223bf2e7345197bbbc96c399292d54f", "patch": "@@ -54,17 +54,19 @@ pub fn run(sess: &session::Session, llmod: ModuleRef,\n         };\n \n         let archive = ArchiveRO::open(&path).expect(\"wanted an rlib\");\n-        debug!(\"reading {}\", name);\n+        let file = path.filename_str().unwrap();\n+        let file = file.slice(3, file.len() - 5); // chop off lib/.rlib\n+        debug!(\"reading {}\", file);\n         let bc = time(sess.time_passes(),\n                       format!(\"read {}.bytecode.deflate\", name).as_slice(),\n                       (),\n                       |_| {\n                           archive.read(format!(\"{}.bytecode.deflate\",\n-                                               name).as_slice())\n+                                               file).as_slice())\n                       });\n         let bc = bc.expect(\"missing compressed bytecode in archive!\");\n         let bc = time(sess.time_passes(),\n-                      format!(\"inflate {}.bc\", name).as_slice(),\n+                      format!(\"inflate {}.bc\", file).as_slice(),\n                       (),\n                       |_| {\n                           match flate::inflate_bytes(bc) {"}, {"sha": "81ace4d015c8576101d566fb499694e4856eb5f7", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82fb85a15223bf2e7345197bbbc96c399292d54f/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82fb85a15223bf2e7345197bbbc96c399292d54f/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=82fb85a15223bf2e7345197bbbc96c399292d54f", "patch": "@@ -936,6 +936,7 @@ pub struct OutputFilenames {\n     pub out_directory: Path,\n     pub out_filestem: String,\n     pub single_output_file: Option<Path>,\n+    extra: String,\n }\n \n impl OutputFilenames {\n@@ -948,7 +949,7 @@ impl OutputFilenames {\n     }\n \n     pub fn temp_path(&self, flavor: link::OutputType) -> Path {\n-        let base = self.out_directory.join(self.out_filestem.as_slice());\n+        let base = self.out_directory.join(self.filestem());\n         match flavor {\n             link::OutputTypeBitcode => base.with_extension(\"bc\"),\n             link::OutputTypeAssembly => base.with_extension(\"s\"),\n@@ -959,8 +960,11 @@ impl OutputFilenames {\n     }\n \n     pub fn with_extension(&self, extension: &str) -> Path {\n-        let stem = self.out_filestem.as_slice();\n-        self.out_directory.join(stem).with_extension(extension)\n+        self.out_directory.join(self.filestem()).with_extension(extension)\n+    }\n+\n+    fn filestem(&self) -> String {\n+        format!(\"{}{}\", self.out_filestem, self.extra)\n     }\n }\n \n@@ -1000,6 +1004,7 @@ pub fn build_output_filenames(input: &Input,\n                 out_directory: dirpath,\n                 out_filestem: stem,\n                 single_output_file: None,\n+                extra: sess.opts.cg.extra_filename.clone(),\n             }\n         }\n \n@@ -1018,6 +1023,7 @@ pub fn build_output_filenames(input: &Input,\n                 out_directory: out_file.dir_path(),\n                 out_filestem: out_file.filestem_str().unwrap().to_string(),\n                 single_output_file: ofile,\n+                extra: sess.opts.cg.extra_filename.clone(),\n             }\n         }\n     }"}, {"sha": "589c0beb7605934f591f8b3f4eed43f80ef4ee45", "filename": "src/test/compile-fail/crate-name-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82fb85a15223bf2e7345197bbbc96c399292d54f/src%2Ftest%2Fcompile-fail%2Fcrate-name-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82fb85a15223bf2e7345197bbbc96c399292d54f/src%2Ftest%2Fcompile-fail%2Fcrate-name-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcrate-name-mismatch.rs?ref=82fb85a15223bf2e7345197bbbc96c399292d54f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-args: --crate-name foo\n+// compile-flags: --crate-name foo\n \n #![crate_name = \"bar\"]\n //~^ ERROR: --crate-name and #[crate_name] are required to match, but `foo` != `bar`"}, {"sha": "2fe518324336171c97d0c4bfb37e314979fafd39", "filename": "src/test/run-make/crate-name-priority/Makefile", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/82fb85a15223bf2e7345197bbbc96c399292d54f/src%2Ftest%2Frun-make%2Fcrate-name-priority%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/82fb85a15223bf2e7345197bbbc96c399292d54f/src%2Ftest%2Frun-make%2Fcrate-name-priority%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcrate-name-priority%2FMakefile?ref=82fb85a15223bf2e7345197bbbc96c399292d54f", "patch": "@@ -7,7 +7,5 @@ all:\n \trm $(TMPDIR)/$(call BIN,bar)\n \t$(RUSTC) foo1.rs\n \trm $(TMPDIR)/$(call BIN,foo)\n-\t$(RUSTC) foo1.rs --crate-name bar\n-\trm $(TMPDIR)/$(call BIN,bar)\n-\t$(RUSTC) foo1.rs --crate-name bar -o $(TMPDIR)/bar1\n+\t$(RUSTC) foo1.rs -o $(TMPDIR)/bar1\n \trm $(TMPDIR)/$(call BIN,bar1)"}, {"sha": "28c22a173cca0fa1b9f4a336c5d84c7c4ee5cacf", "filename": "src/test/run-make/extra-filename-with-temp-outputs/Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82fb85a15223bf2e7345197bbbc96c399292d54f/src%2Ftest%2Frun-make%2Fextra-filename-with-temp-outputs%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/82fb85a15223bf2e7345197bbbc96c399292d54f/src%2Ftest%2Frun-make%2Fextra-filename-with-temp-outputs%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextra-filename-with-temp-outputs%2FMakefile?ref=82fb85a15223bf2e7345197bbbc96c399292d54f", "patch": "@@ -0,0 +1,6 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) -C extra-filename=bar foo.rs -C save-temps\n+\trm $(TMPDIR)/foobar.o\n+\trm $(TMPDIR)/$(call BIN,foobar)"}, {"sha": "8ae3d072362ed6b5db81a00be3becce691926a7f", "filename": "src/test/run-make/extra-filename-with-temp-outputs/foo.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/82fb85a15223bf2e7345197bbbc96c399292d54f/src%2Ftest%2Frun-make%2Fextra-filename-with-temp-outputs%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82fb85a15223bf2e7345197bbbc96c399292d54f/src%2Ftest%2Frun-make%2Fextra-filename-with-temp-outputs%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextra-filename-with-temp-outputs%2Ffoo.rs?ref=82fb85a15223bf2e7345197bbbc96c399292d54f", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {}"}, {"sha": "95c7d331264e128b04e5dc45af7556173ab5f160", "filename": "src/test/run-pass/crate-name-attr-used.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82fb85a15223bf2e7345197bbbc96c399292d54f/src%2Ftest%2Frun-pass%2Fcrate-name-attr-used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82fb85a15223bf2e7345197bbbc96c399292d54f/src%2Ftest%2Frun-pass%2Fcrate-name-attr-used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrate-name-attr-used.rs?ref=82fb85a15223bf2e7345197bbbc96c399292d54f", "patch": "@@ -10,6 +10,6 @@\n \n // compile-flags:--crate-name crate-name-attr-used -F unused-attribute\n \n-#![crate_name = \"test\"]\n+#![crate_name = \"crate-name-attr-used\"]\n \n fn main() {}"}]}