{"sha": "1bbf7187ad7775b9a7d59236c17b571d9916a3ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiYmY3MTg3YWQ3Nzc1YjlhN2Q1OTIzNmMxN2I1NzFkOTkxNmEzZWM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-16T20:21:41Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-16T20:56:53Z"}, "message": "Fix tests for rustc_*", "tree": {"sha": "17b49b2dab9bef18f561a38cb6a352560765de4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17b49b2dab9bef18f561a38cb6a352560765de4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bbf7187ad7775b9a7d59236c17b571d9916a3ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bbf7187ad7775b9a7d59236c17b571d9916a3ec", "html_url": "https://github.com/rust-lang/rust/commit/1bbf7187ad7775b9a7d59236c17b571d9916a3ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0129002d3afa2edb2dad4f2b4f615e73c60c68cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/0129002d3afa2edb2dad4f2b4f615e73c60c68cc", "html_url": "https://github.com/rust-lang/rust/commit/0129002d3afa2edb2dad4f2b4f615e73c60c68cc"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "0219f5b6becb3bae271892a3cc559bebacc8ae56", "filename": "src/test/compile-fail/move-fragments-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/src%2Ftest%2Fcompile-fail%2Fmove-fragments-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/src%2Ftest%2Fcompile-fail%2Fmove-fragments-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-1.rs?ref=1bbf7187ad7775b9a7d59236c17b571d9916a3ec", "patch": "@@ -18,6 +18,8 @@\n // These are all fairly trivial cases: unused variables or direct\n // drops of substructure.\n \n+#![feature(rustc_attrs)]\n+\n pub struct D { d: isize }\n impl Drop for D { fn drop(&mut self) { } }\n "}, {"sha": "175488bf2fcd02f38c0c4a926a9aeb858342cd3c", "filename": "src/test/compile-fail/move-fragments-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/src%2Ftest%2Fcompile-fail%2Fmove-fragments-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/src%2Ftest%2Fcompile-fail%2Fmove-fragments-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-2.rs?ref=1bbf7187ad7775b9a7d59236c17b571d9916a3ec", "patch": "@@ -18,6 +18,8 @@\n // These are checking that enums are tracked; note that their output\n // paths include \"downcasts\" of the path to a particular enum.\n \n+#![feature(rustc_attrs)]\n+\n use self::Lonely::{Zero, One, Two};\n \n pub struct D { d: isize }"}, {"sha": "b65921177adaaf145db68235d20778b3f6c6a99c", "filename": "src/test/compile-fail/move-fragments-3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/src%2Ftest%2Fcompile-fail%2Fmove-fragments-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/src%2Ftest%2Fcompile-fail%2Fmove-fragments-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-3.rs?ref=1bbf7187ad7775b9a7d59236c17b571d9916a3ec", "patch": "@@ -18,6 +18,8 @@\n // This checks the handling of `_` within variants, especially when mixed\n // with bindings.\n \n+#![feature(rustc_attrs)]\n+\n use self::Lonely::{Zero, One, Two};\n \n pub struct D { d: isize }"}, {"sha": "191e23a28638b59c8119386ae18525d6f172cc36", "filename": "src/test/compile-fail/move-fragments-4.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/src%2Ftest%2Fcompile-fail%2Fmove-fragments-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/src%2Ftest%2Fcompile-fail%2Fmove-fragments-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-4.rs?ref=1bbf7187ad7775b9a7d59236c17b571d9916a3ec", "patch": "@@ -19,6 +19,8 @@\n // early draft of the code did not properly traverse up through all of\n // the parents of the leaf fragment.)\n \n+#![feature(rustc_attrs)]\n+\n pub struct D { d: isize }\n impl Drop for D { fn drop(&mut self) { } }\n "}, {"sha": "38a385eacac5c07795c9a19e49c5d9288b3b7e63", "filename": "src/test/compile-fail/move-fragments-5.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/src%2Ftest%2Fcompile-fail%2Fmove-fragments-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/src%2Ftest%2Fcompile-fail%2Fmove-fragments-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-5.rs?ref=1bbf7187ad7775b9a7d59236c17b571d9916a3ec", "patch": "@@ -17,6 +17,8 @@\n \n // This is the first test that checks moving into local variables.\n \n+#![feature(rustc_attrs)]\n+\n pub struct D { d: isize }\n impl Drop for D { fn drop(&mut self) { } }\n "}, {"sha": "122727c3f6b64a0c1cf75e4ca4a216cf51df98b3", "filename": "src/test/compile-fail/move-fragments-6.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/src%2Ftest%2Fcompile-fail%2Fmove-fragments-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/src%2Ftest%2Fcompile-fail%2Fmove-fragments-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-6.rs?ref=1bbf7187ad7775b9a7d59236c17b571d9916a3ec", "patch": "@@ -18,6 +18,8 @@\n // Test that moving into a field (i.e. overwriting it) fragments the\n // receiver.\n \n+#![feature(rustc_attrs)]\n+\n use std::mem::drop;\n \n pub struct Pair<X,Y> { x: X, y: Y }"}, {"sha": "a2a37208cd6168b61f4dcbdce75f59cf93e4b65d", "filename": "src/test/compile-fail/move-fragments-7.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/src%2Ftest%2Fcompile-fail%2Fmove-fragments-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/src%2Ftest%2Fcompile-fail%2Fmove-fragments-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-7.rs?ref=1bbf7187ad7775b9a7d59236c17b571d9916a3ec", "patch": "@@ -19,6 +19,8 @@\n // both moving out of the structure (i.e. reading `*p.x`) and writing\n // into the container (i.e. writing `*p.x`).\n \n+#![feature(rustc_attrs)]\n+\n pub struct D { d: isize }\n impl Drop for D { fn drop(&mut self) { } }\n "}, {"sha": "e57268dbfa32aa985afb154168824b5916186a22", "filename": "src/test/compile-fail/move-fragments-8.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/src%2Ftest%2Fcompile-fail%2Fmove-fragments-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/src%2Ftest%2Fcompile-fail%2Fmove-fragments-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-8.rs?ref=1bbf7187ad7775b9a7d59236c17b571d9916a3ec", "patch": "@@ -22,6 +22,8 @@\n // also that in this case we cannot do a move out of `&T`, so we only\n // test writing `*p.x` here.\n \n+#![feature(rustc_attrs)]\n+\n pub struct D { d: isize }\n impl Drop for D { fn drop(&mut self) { } }\n "}, {"sha": "350f4169034004620cae6bf2cb6367532dfb27b2", "filename": "src/test/compile-fail/move-fragments-9.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/src%2Ftest%2Fcompile-fail%2Fmove-fragments-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/src%2Ftest%2Fcompile-fail%2Fmove-fragments-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-fragments-9.rs?ref=1bbf7187ad7775b9a7d59236c17b571d9916a3ec", "patch": "@@ -14,6 +14,8 @@\n // Note also that the `test_move_array_then_overwrite` tests represent\n // cases that we probably should make illegal.\n \n+#![feature(rustc_attrs)]\n+\n pub struct D { d: isize }\n impl Drop for D { fn drop(&mut self) { } }\n "}, {"sha": "82f32cbcd14e46028916269eaf210b822e7e54d8", "filename": "src/test/compile-fail/rustc-error.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/src%2Ftest%2Fcompile-fail%2Frustc-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/src%2Ftest%2Fcompile-fail%2Frustc-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frustc-error.rs?ref=1bbf7187ad7775b9a7d59236c17b571d9916a3ec", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(rustc_attrs)]\n+\n #[rustc_error]\n fn main() {\n     //~^ ERROR compilation successful"}, {"sha": "0ed0861d34af1fe7744a6db319611db233e7e1ca", "filename": "src/test/compile-fail/variance-associated-types.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/src%2Ftest%2Fcompile-fail%2Fvariance-associated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/src%2Ftest%2Fcompile-fail%2Fvariance-associated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-associated-types.rs?ref=1bbf7187ad7775b9a7d59236c17b571d9916a3ec", "patch": "@@ -11,6 +11,8 @@\n // Test that the variance computation considers types/regions that\n // appear in projections to be invariant.\n \n+#![feature(rustc_attrs)]\n+\n trait Trait<'a> {\n     type Type;\n "}, {"sha": "2b7b05970d90f4c15f8830398eeaa50b76cc1e5d", "filename": "src/test/compile-fail/variance-object-types.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/src%2Ftest%2Fcompile-fail%2Fvariance-object-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/src%2Ftest%2Fcompile-fail%2Fvariance-object-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-object-types.rs?ref=1bbf7187ad7775b9a7d59236c17b571d9916a3ec", "patch": "@@ -11,6 +11,8 @@\n // Test that Cell is considered invariant with respect to its\n // type.\n \n+#![feature(rustc_attrs)]\n+\n use std::cell::Cell;\n \n // For better or worse, associated types are invariant, and hence we"}, {"sha": "d70305d1106ecd64c8a1535fddea6449fad35320", "filename": "src/test/compile-fail/variance-regions-direct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/src%2Ftest%2Fcompile-fail%2Fvariance-regions-direct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/src%2Ftest%2Fcompile-fail%2Fvariance-regions-direct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-regions-direct.rs?ref=1bbf7187ad7775b9a7d59236c17b571d9916a3ec", "patch": "@@ -11,6 +11,8 @@\n // Test that we correctly infer variance for region parameters in\n // various self-contained types.\n \n+#![feature(rustc_attrs)]\n+\n // Regions that just appear in normal spots are contravariant:\n \n #[rustc_variance]"}, {"sha": "4bb329d6304cf3ec1333f980bde394d063ff5f16", "filename": "src/test/compile-fail/variance-regions-indirect.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/src%2Ftest%2Fcompile-fail%2Fvariance-regions-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/src%2Ftest%2Fcompile-fail%2Fvariance-regions-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-regions-indirect.rs?ref=1bbf7187ad7775b9a7d59236c17b571d9916a3ec", "patch": "@@ -12,6 +12,8 @@\n // case that involve multiple intricate types.\n // Try enums too.\n \n+#![feature(rustc_attrs)]\n+\n #[rustc_variance]\n enum Base<'a, 'b, 'c:'b, 'd> { //~ ERROR regions=[[+, -, o, *];[];[]]\n     Test8A(extern \"Rust\" fn(&'a isize)),"}, {"sha": "965b9430a5e2d44095266a7b08abf700728e2147", "filename": "src/test/compile-fail/variance-trait-object-bound.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/src%2Ftest%2Fcompile-fail%2Fvariance-trait-object-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbf7187ad7775b9a7d59236c17b571d9916a3ec/src%2Ftest%2Fcompile-fail%2Fvariance-trait-object-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariance-trait-object-bound.rs?ref=1bbf7187ad7775b9a7d59236c17b571d9916a3ec", "patch": "@@ -14,6 +14,8 @@\n //\n // Issue #18262.\n \n+#![feature(rustc_attrs)]\n+\n use std::mem;\n \n trait T { fn foo(); }"}]}