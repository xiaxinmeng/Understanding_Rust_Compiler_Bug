{"sha": "ee049b256a7718fb346a7172a34f0fc324b3269b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMDQ5YjI1NmE3NzE4ZmIzNDZhNzE3MmEzNGYwZmMzMjRiMzI2OWI=", "commit": {"author": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2021-02-13T13:47:53Z"}, "committer": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2021-02-13T13:47:53Z"}, "message": "Improve runnable annotations order, fix incorrect ignore detection", "tree": {"sha": "b02b0b3d85431aee16f9e28580e0a5147acb92b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b02b0b3d85431aee16f9e28580e0a5147acb92b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee049b256a7718fb346a7172a34f0fc324b3269b", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEcPkYW+t8+2SKgl5T2MS9WuTZzE0FAmAn2IkACgkQ2MS9WuTZ\nzE2UbQgAnl/pnIKu/gd2T/0w+/XTeJJdEm19tx/8bJzheK6ipa4wpoJBtb/coQJG\nJvkHoc+REU7CmVXAI3N+XSvl4JuCRe8ZCPGV2/46Ko0wkfzIMAkUIa1flh21xvFq\nImTv28qYFoDfwQ22UtsncvlPqpfGB2A+ByWA1U4xd6l7cNmM1etxE2gEhCfyvv2b\nyOv1H8tlccCPMMchyEhqPysBKsXBfDV/cqtgpMGBsCjyKNoQjCJCCP0Droqe5G7l\nWHDyfibe5xPoEgAS8iYbd6ompvNzg+8FsG6c29npRDZfhnCCB0K5Zb48A4MOqv/R\nH6FGqiQlZ3sJMlpdKcmOTAYOEB7MCw==\n=cgBd\n-----END PGP SIGNATURE-----", "payload": "tree b02b0b3d85431aee16f9e28580e0a5147acb92b8\nparent c46b32c44987de02559f7ec5898765722fa45166\nauthor ivan770 <leshenko.ivan770@gmail.com> 1613224073 +0200\ncommitter ivan770 <leshenko.ivan770@gmail.com> 1613224073 +0200\n\nImprove runnable annotations order, fix incorrect ignore detection\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee049b256a7718fb346a7172a34f0fc324b3269b", "html_url": "https://github.com/rust-lang/rust/commit/ee049b256a7718fb346a7172a34f0fc324b3269b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee049b256a7718fb346a7172a34f0fc324b3269b/comments", "author": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c46b32c44987de02559f7ec5898765722fa45166", "url": "https://api.github.com/repos/rust-lang/rust/commits/c46b32c44987de02559f7ec5898765722fa45166", "html_url": "https://github.com/rust-lang/rust/commit/c46b32c44987de02559f7ec5898765722fa45166"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "43250bf5dfb112961bcd9890a119bbe915a2f0ce", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ee049b256a7718fb346a7172a34f0fc324b3269b/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee049b256a7718fb346a7172a34f0fc324b3269b/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=ee049b256a7718fb346a7172a34f0fc324b3269b", "patch": "@@ -50,25 +50,26 @@ pub(crate) fn annotations(\n \n     if config.annotate_runnables {\n         for runnable in runnables(db, file_id) {\n-            if !matches!(runnable.kind, RunnableKind::Bin) || !config.binary_target {\n+            if should_skip_runnable(&runnable.kind, config.binary_target) {\n                 continue;\n             }\n \n             let action = runnable.action();\n             let range = runnable.nav.full_range;\n \n-            if config.run {\n+            if action.debugee && config.debug {\n                 annotations.push(Annotation {\n                     range,\n+\n                     // FIXME: This one allocates without reason if run is enabled, but debug is disabled\n-                    kind: AnnotationKind::Runnable { debug: false, runnable: runnable.clone() },\n+                    kind: AnnotationKind::Runnable { debug: true, runnable: runnable.clone() },\n                 });\n             }\n \n-            if action.debugee && config.debug {\n+            if config.run {\n                 annotations.push(Annotation {\n                     range,\n-                    kind: AnnotationKind::Runnable { debug: true, runnable },\n+                    kind: AnnotationKind::Runnable { debug: false, runnable },\n                 });\n             }\n         }\n@@ -144,6 +145,13 @@ pub(crate) fn resolve_annotation(db: &RootDatabase, mut annotation: Annotation)\n     annotation\n }\n \n+fn should_skip_runnable(kind: &RunnableKind, binary_target: bool) -> bool {\n+    match kind {\n+        RunnableKind::Bin => !binary_target,\n+        _ => false,\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use ide_db::base_db::{FileId, FileRange};"}]}