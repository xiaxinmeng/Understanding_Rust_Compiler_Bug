{"sha": "1aaeda1e1eda1ff5a78f92a5e60e93319174528e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYWVkYTFlMWVkYTFmZjVhNzhmOTJhNWU2MGU5MzMxOTE3NDUyOGU=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-15T14:58:52Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-01-18T00:54:11Z"}, "message": "add scaffolding for symmetric_difference/union", "tree": {"sha": "4354f68d154f14edb42a7e556af6b84b1fbbf267", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4354f68d154f14edb42a7e556af6b84b1fbbf267"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1aaeda1e1eda1ff5a78f92a5e60e93319174528e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1aaeda1e1eda1ff5a78f92a5e60e93319174528e", "html_url": "https://github.com/rust-lang/rust/commit/1aaeda1e1eda1ff5a78f92a5e60e93319174528e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1aaeda1e1eda1ff5a78f92a5e60e93319174528e/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90b111f4bf1f63f6dbb0fc048f334cfe02cab0d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/90b111f4bf1f63f6dbb0fc048f334cfe02cab0d9", "html_url": "https://github.com/rust-lang/rust/commit/90b111f4bf1f63f6dbb0fc048f334cfe02cab0d9"}], "stats": {"total": 24, "additions": 19, "deletions": 5}, "files": [{"sha": "9ebb760358b4b60fe8979a335dca981e8e53d26e", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1aaeda1e1eda1ff5a78f92a5e60e93319174528e/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aaeda1e1eda1ff5a78f92a5e60e93319174528e/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=1aaeda1e1eda1ff5a78f92a5e60e93319174528e", "patch": "@@ -229,13 +229,13 @@ impl <T: Ord> TreeSet<T> {\n     /// Return true if the set has no elements in common with `other`.\n     /// This is equivalent to checking for an empty intersection.\n     pure fn is_disjoint(&self, other: &TreeSet<T>) -> bool {\n-        // FIXME: this is a naive O(n*log(m)) implementation, could be O(n)\n+        // FIXME: this is a naive O(n*log(m)) implementation, could be O(n + m)\n         !iter::any(self, |x| other.contains(x))\n     }\n \n     /// Check of the set is a subset of another\n     pure fn is_subset(&self, other: &TreeSet<T>) -> bool {\n-        // FIXME: this is a naive O(n*log(m)) implementation, could be O(n)\n+        // FIXME: this is a naive O(n*log(m)) implementation, could be O(n + m)\n         !iter::any(self, |x| !other.contains(x))\n     }\n \n@@ -278,14 +278,21 @@ impl <T: Ord> TreeSet<T> {\n     }\n \n     /// Visit the values (in-order) representing the symmetric difference\n-    pure fn symmetric_difference(&self, _other: &TreeSet<T>,\n+    pure fn symmetric_difference(&self, other: &TreeSet<T>,\n                                  _f: fn(&T) -> bool) {\n+        unsafe { // purity workaround\n+            let mut x = self.map.iter();\n+            let mut y = other.map.iter();\n+\n+            let mut a = x.next();\n+            let mut b = y.next();\n+        }\n         fail ~\"not yet implemented\"\n     }\n \n     /// Visit the values (in-order) representing the intersection\n     pure fn intersection(&self, other: &TreeSet<T>, f: fn(&T) -> bool) {\n-        // FIXME: this is a naive O(n*log(m)) implementation, could be O(n)\n+        // FIXME: this is a naive O(n*log(m)) implementation, could be O(n + m)\n         for self.each |x| {\n             if other.contains(x) {\n                 if !f(x) { break }\n@@ -294,7 +301,14 @@ impl <T: Ord> TreeSet<T> {\n     }\n \n     /// Visit the values (in-order) representing the union\n-    pure fn union(&self, _other: &TreeSet<T>, _f: fn(&T) -> bool) {\n+    pure fn union(&self, other: &TreeSet<T>, _f: fn(&T) -> bool) {\n+        unsafe { // purity workaround\n+            let mut x = self.map.iter();\n+            let mut y = other.map.iter();\n+\n+            let mut a = x.next();\n+            let mut b = y.next();\n+        }\n         fail ~\"not yet implemented\"\n     }\n }"}]}