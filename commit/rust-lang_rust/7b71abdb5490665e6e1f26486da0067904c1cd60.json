{"sha": "7b71abdb5490665e6e1f26486da0067904c1cd60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNzFhYmRiNTQ5MDY2NWU2ZTFmMjY0ODZkYTAwNjc5MDRjMWNkNjA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-24T20:42:45Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-24T20:42:45Z"}, "message": "Fix #64744 -- handle zero sub-pats case.", "tree": {"sha": "0b08172b914801e2042daf39fc5a1e1fa8558563", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b08172b914801e2042daf39fc5a1e1fa8558563"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b71abdb5490665e6e1f26486da0067904c1cd60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b71abdb5490665e6e1f26486da0067904c1cd60", "html_url": "https://github.com/rust-lang/rust/commit/7b71abdb5490665e6e1f26486da0067904c1cd60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b71abdb5490665e6e1f26486da0067904c1cd60/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ef275e6c3cb1384ec78128eceeb4963ff788dca", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ef275e6c3cb1384ec78128eceeb4963ff788dca", "html_url": "https://github.com/rust-lang/rust/commit/6ef275e6c3cb1384ec78128eceeb4963ff788dca"}], "stats": {"total": 77, "additions": 62, "deletions": 15}, "files": [{"sha": "2cd8507d753a641d01493e0acdc1330ea4010170", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 46, "deletions": 13, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/7b71abdb5490665e6e1f26486da0067904c1cd60/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b71abdb5490665e6e1f26486da0067904c1cd60/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=7b71abdb5490665e6e1f26486da0067904c1cd60", "patch": "@@ -676,7 +676,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         } else {\n             // Pattern has wrong number of fields.\n-            self.e0023(pat.span, res, &subpats, &variant.fields, expected);\n+            self.e0023(pat.span, res, qpath, subpats, &variant.fields, expected);\n             on_error();\n             return tcx.types.err;\n         }\n@@ -687,22 +687,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         pat_span: Span,\n         res: Res,\n+        qpath: &hir::QPath,\n         subpats: &'tcx [P<Pat>],\n         fields: &[ty::FieldDef],\n         expected: Ty<'tcx>\n     ) {\n         let subpats_ending = pluralise!(subpats.len());\n         let fields_ending = pluralise!(fields.len());\n-        let missing_parenthesis = match expected.sty {\n-            ty::Adt(_, substs) if fields.len() == 1 => {\n-                let field_ty = fields[0].ty(self.tcx, substs);\n-                match field_ty.sty {\n-                    ty::Tuple(_) => field_ty.tuple_fields().count() == subpats.len(),\n-                    _ => false,\n-                }\n-            }\n-            _ => false,\n-        };\n         let res_span = self.tcx.def_span(res.def_id());\n         let mut err = struct_span_err!(\n             self.tcx.sess,\n@@ -723,11 +714,53 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ))\n             .span_label(res_span, format!(\"{} defined here\", res.descr()));\n \n+        // Identify the case `Some(x, y)` where the expected type is e.g. `Option<(T, U)>`.\n+        // More generally, the expected type wants a tuple variant with one field of an\n+        // N-arity-tuple, e.g., `V_i((p_0, .., p_N))`. Meanwhile, the user supplied a pattern\n+        // with the subpatterns directly in the tuple variant pattern, e.g., `V_i(p_0, .., p_N)`.\n+        let missing_parenthesis = match expected.sty {\n+            ty::Adt(_, substs) if fields.len() == 1 => {\n+                let field_ty = fields[0].ty(self.tcx, substs);\n+                match field_ty.sty {\n+                    ty::Tuple(_) => field_ty.tuple_fields().count() == subpats.len(),\n+                    _ => false,\n+                }\n+            }\n+            _ => false,\n+        };\n         if missing_parenthesis {\n+            let (left, right) = match subpats {\n+                // This is the zero case; we aim to get the \"hi\" part of the `QPath`'s\n+                // span as the \"lo\" and then the \"hi\" part of the pattern's span as the \"hi\".\n+                // This looks like:\n+                //\n+                // help: missing parenthesis\n+                //   |\n+                // L |     let A(()) = A(());\n+                //   |          ^  ^\n+                [] => {\n+                    let qpath_span = match qpath {\n+                        hir::QPath::Resolved(_, path) => path.span,\n+                        hir::QPath::TypeRelative(_, ps) => ps.ident.span,\n+                    };\n+                    (qpath_span.shrink_to_hi(), pat_span)\n+                },\n+                // Easy case. Just take the \"lo\" of the first sub-pattern and the \"hi\" of the\n+                // last sub-pattern. In the case of `A(x)` the first and last may coincide.\n+                // This looks like:\n+                //\n+                // help: missing parenthesis\n+                //   |\n+                // L |     let A((x, y)) = A((1, 2));\n+                //   |           ^    ^\n+                [first, ..] => (first.span.shrink_to_lo(), subpats.last().unwrap().span),\n+            };\n             err.multipart_suggestion(\n                 \"missing parenthesis\",\n-                vec![(subpats[0].span.shrink_to_lo(), \"(\".to_string()),\n-                    (subpats[subpats.len()-1].span.shrink_to_hi(), \")\".to_string())],\n+                vec![\n+                    (left, \"(\".to_string()),\n+                    (right.shrink_to_hi(), \")\".to_string()),\n+                ],\n                 Applicability::MachineApplicable,\n             );\n         }"}, {"sha": "7ac22bb71092e1d245ca2dd3afac865673fd09ca", "filename": "src/test/ui/error-codes/E0023.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b71abdb5490665e6e1f26486da0067904c1cd60/src%2Ftest%2Fui%2Ferror-codes%2FE0023.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b71abdb5490665e6e1f26486da0067904c1cd60/src%2Ftest%2Fui%2Ferror-codes%2FE0023.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0023.rs?ref=7b71abdb5490665e6e1f26486da0067904c1cd60", "patch": "@@ -2,15 +2,16 @@ enum Fruit {\n     Apple(String, String),\n     Pear(u32),\n     Orange((String, String)),\n+    Banana(()),\n }\n \n-\n fn main() {\n     let x = Fruit::Apple(String::new(), String::new());\n     match x {\n         Fruit::Apple(a) => {}, //~ ERROR E0023\n         Fruit::Apple(a, b, c) => {}, //~ ERROR E0023\n         Fruit::Pear(1, 2) => {}, //~ ERROR E0023\n         Fruit::Orange(a, b) => {}, //~ ERROR E0023\n+        Fruit::Banana() => {}, //~ ERROR E0023\n     }\n }"}, {"sha": "dbce6003a2bad386b398ddb124a346183916954f", "filename": "src/test/ui/error-codes/E0023.stderr", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7b71abdb5490665e6e1f26486da0067904c1cd60/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b71abdb5490665e6e1f26486da0067904c1cd60/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0023.stderr?ref=7b71abdb5490665e6e1f26486da0067904c1cd60", "patch": "@@ -38,6 +38,19 @@ help: missing parenthesis\n LL |         Fruit::Orange((a, b)) => {},\n    |                       ^    ^\n \n-error: aborting due to 4 previous errors\n+error[E0023]: this pattern has 0 fields, but the corresponding tuple variant has 1 field\n+  --> $DIR/E0023.rs:15:9\n+   |\n+LL |     Banana(()),\n+   |     ---------- tuple variant defined here\n+...\n+LL |         Fruit::Banana() => {},\n+   |         ^^^^^^^^^^^^^^^ expected 1 field, found 0\n+help: missing parenthesis\n+   |\n+LL |         Fruit::Banana(()) => {},\n+   |                      ^  ^\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0023`."}]}