{"sha": "25f070d1edf3d54d8933e00eeac95ce55ca8eabb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1ZjA3MGQxZWRmM2Q1NGQ4OTMzZTAwZWVhYzk1Y2U1NWNhOGVhYmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-21T04:35:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-21T04:35:17Z"}, "message": "Auto merge of #71267 - pnkfelix:issue-71248-dont-need-exports-all-green, r=nagisa\n\nattempt to recover perf by removing `exports_all_green`\n\nattempt to recover perf by removing `exports_all_green` flag.\n\ncc #71248\n\n(My hypothesis is that my use of this flag was an overly conservative generalization of PR #67020.)", "tree": {"sha": "8d7fb315368670bf2c53910b7c4e6f3a4e06eb69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d7fb315368670bf2c53910b7c4e6f3a4e06eb69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25f070d1edf3d54d8933e00eeac95ce55ca8eabb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25f070d1edf3d54d8933e00eeac95ce55ca8eabb", "html_url": "https://github.com/rust-lang/rust/commit/25f070d1edf3d54d8933e00eeac95ce55ca8eabb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25f070d1edf3d54d8933e00eeac95ce55ca8eabb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "073744f554cf170942aa43893f292199ad44e3d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/073744f554cf170942aa43893f292199ad44e3d4", "html_url": "https://github.com/rust-lang/rust/commit/073744f554cf170942aa43893f292199ad44e3d4"}, {"sha": "19e5a654dcef599bd2cb82eb90a9dfbc8b42d300", "url": "https://api.github.com/repos/rust-lang/rust/commits/19e5a654dcef599bd2cb82eb90a9dfbc8b42d300", "html_url": "https://github.com/rust-lang/rust/commit/19e5a654dcef599bd2cb82eb90a9dfbc8b42d300"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "7292492a0c02fe5d8bf6bcd9c2d9f49d789815c5", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/25f070d1edf3d54d8933e00eeac95ce55ca8eabb/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25f070d1edf3d54d8933e00eeac95ce55ca8eabb/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=25f070d1edf3d54d8933e00eeac95ce55ca8eabb", "patch": "@@ -500,15 +500,32 @@ fn thin_lto(\n             let module_name = module_name_to_str(module_name);\n \n             // If (1.) the module hasn't changed, and (2.) none of the modules\n-            // it imports from nor exports to have changed, *and* (3.) the\n-            // import and export sets themselves have not changed from the\n-            // previous compile when it was last ThinLTO'ed, then we can re-use\n-            // the post-ThinLTO version of the module. Otherwise, freshly\n-            // perform LTO optimization.\n+            // it imports from have changed, *and* (3.) the import and export\n+            // sets themselves have not changed from the previous compile when\n+            // it was last ThinLTO'ed, then we can re-use the post-ThinLTO\n+            // version of the module. Otherwise, freshly perform LTO\n+            // optimization.\n             //\n             // (Note that globally, the export set is just the inverse of the\n             // import set.)\n             //\n+            // For further justification of why the above is necessary and sufficient,\n+            // see the LLVM blog post on ThinLTO:\n+            //\n+            // http://blog.llvm.org/2016/06/thinlto-scalable-and-incremental-lto.html\n+            //\n+            // which states the following:\n+            //\n+            // ```quote\n+            // any particular ThinLTO backend must be redone iff:\n+            //\n+            // 1. The corresponding (primary) module\u2019s bitcode changed\n+            // 2. The list of imports into or exports from the module changed\n+            // 3. The bitcode for any module being imported from has changed\n+            // 4. Any global analysis result affecting either the primary module\n+            //    or anything it imports has changed.\n+            // ```\n+            //\n             // This strategy means we can always save the computed imports as\n             // canon: when we reuse the post-ThinLTO version, condition (3.)\n             // ensures that the current import set is the same as the previous\n@@ -531,13 +548,8 @@ fn thin_lto(\n                 let imports_all_green = curr_imports\n                     .iter()\n                     .all(|imported_module| green_modules.contains_key(imported_module));\n-                let exports_all_green = curr_exports\n-                    .iter()\n-                    .all(|exported_module| green_modules.contains_key(exported_module));\n-\n                 if imports_all_green\n                     && equivalent_as_sets(prev_imports, curr_imports)\n-                    && exports_all_green\n                     && equivalent_as_sets(prev_exports, curr_exports)\n                 {\n                     let work_product = green_modules[module_name].clone();"}]}