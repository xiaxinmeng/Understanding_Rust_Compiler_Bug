{"sha": "f609efff8762abe66a8418d926a157b5299e457c", "node_id": "C_kwDOAAsO6NoAKGY2MDllZmZmODc2MmFiZTY2YTg0MThkOTI2YTE1N2I1Mjk5ZTQ1N2M", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-20T13:38:22Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-20T13:38:22Z"}, "message": "Simplify", "tree": {"sha": "f0ba36bc8239ee6859a6aad27f88262f2c0fbf49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0ba36bc8239ee6859a6aad27f88262f2c0fbf49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f609efff8762abe66a8418d926a157b5299e457c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f609efff8762abe66a8418d926a157b5299e457c", "html_url": "https://github.com/rust-lang/rust/commit/f609efff8762abe66a8418d926a157b5299e457c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f609efff8762abe66a8418d926a157b5299e457c/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a574434c3f0d963392113d4f6aa80872d9c49d16", "url": "https://api.github.com/repos/rust-lang/rust/commits/a574434c3f0d963392113d4f6aa80872d9c49d16", "html_url": "https://github.com/rust-lang/rust/commit/a574434c3f0d963392113d4f6aa80872d9c49d16"}], "stats": {"total": 110, "additions": 58, "deletions": 52}, "files": [{"sha": "0c6cbf7cb2d82fbc80cc58657c0a382b8fa10b59", "filename": "crates/ide_completion/src/render/builder_ext.rs", "status": "modified", "additions": 42, "deletions": 35, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/f609efff8762abe66a8418d926a157b5299e457c/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f609efff8762abe66a8418d926a157b5299e457c/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs?ref=f609efff8762abe66a8418d926a157b5299e457c", "patch": "@@ -1,21 +1,20 @@\n //! Extensions for `Builder` structure required for item rendering.\n \n-use either::Either;\n use itertools::Itertools;\n use syntax::ast::{self, HasName};\n \n use crate::{context::PathKind, item::Builder, patterns::ImmediateLocation, CompletionContext};\n \n #[derive(Debug)]\n pub(super) enum Params {\n-    Named(Vec<(Either<ast::SelfParam, ast::Param>, hir::Param)>),\n+    Named(Option<ast::SelfParam>, Vec<(ast::Param, hir::Param)>),\n     Anonymous(usize),\n }\n \n impl Params {\n     pub(super) fn len(&self) -> usize {\n         match self {\n-            Params::Named(xs) => xs.len(),\n+            Params::Named(selv, params) => params.len() + if selv.is_some() { 1 } else { 0 },\n             Params::Anonymous(len) => *len,\n         }\n     }\n@@ -77,48 +76,56 @@ impl Builder {\n         } else {\n             self.trigger_call_info();\n             let snippet = match (ctx.config.add_call_argument_snippets, params) {\n-                (true, Params::Named(params)) => {\n+                (true, Params::Named(self_param, params)) => {\n+                    let offset = if self_param.is_some() { 2 } else { 1 };\n                     let function_params_snippet = params.iter().enumerate().format_with(\n                         \", \",\n                         |(index, (param_source, param)), f| {\n                             let name;\n                             let text;\n-                            let (ref_, name) = match param_source {\n-                                Either::Left(self_param) => (\n-                                    match self_param.kind() {\n-                                        ast::SelfParamKind::Owned => \"\",\n-                                        ast::SelfParamKind::Ref => \"&\",\n-                                        ast::SelfParamKind::MutRef => \"&mut \",\n-                                    },\n-                                    \"self\",\n-                                ),\n-                                Either::Right(it) => {\n-                                    let n = (|| {\n-                                        let mut pat = it.pat()?;\n-                                        loop {\n-                                            match pat {\n-                                                ast::Pat::IdentPat(pat) => break pat.name(),\n-                                                ast::Pat::RefPat(it) => pat = it.pat()?,\n-                                                _ => return None,\n-                                            }\n-                                        }\n-                                    })();\n-                                    match n {\n-                                        Some(n) => {\n-                                            name = n;\n-                                            text = name.text();\n-                                            let text = text.as_str().trim_start_matches('_');\n-                                            let ref_ = ref_of_param(ctx, text, param.ty());\n-                                            (ref_, text)\n-                                        }\n-                                        None => (\"\", \"_\"),\n+                            let n = (|| {\n+                                let mut pat = param_source.pat()?;\n+                                loop {\n+                                    match pat {\n+                                        ast::Pat::IdentPat(pat) => break pat.name(),\n+                                        ast::Pat::RefPat(it) => pat = it.pat()?,\n+                                        _ => return None,\n                                     }\n                                 }\n+                            })();\n+                            let (ref_, name) = match n {\n+                                Some(n) => {\n+                                    name = n;\n+                                    text = name.text();\n+                                    let text = text.as_str().trim_start_matches('_');\n+                                    let ref_ = ref_of_param(ctx, text, param.ty());\n+                                    (ref_, text)\n+                                }\n+                                None => (\"\", \"_\"),\n                             };\n-                            f(&format_args!(\"${{{}:{}{}}}\", index + 1, ref_, name))\n+\n+                            f(&format_args!(\"${{{}:{}{}}}\", index + offset, ref_, name))\n                         },\n                     );\n-                    format!(\"{}({})$0\", name, function_params_snippet)\n+                    match self_param {\n+                        Some(self_param) => {\n+                            let prefix = match self_param.kind() {\n+                                ast::SelfParamKind::Owned => \"\",\n+                                ast::SelfParamKind::Ref => \"&\",\n+                                ast::SelfParamKind::MutRef => \"&mut \",\n+                            };\n+                            format!(\n+                                \"{}(${{1:{}self}}{}{})$0\",\n+                                name,\n+                                prefix,\n+                                if params.is_empty() { \"\" } else { \", \" },\n+                                function_params_snippet\n+                            )\n+                        }\n+                        None => {\n+                            format!(\"{}({})$0\", name, function_params_snippet)\n+                        }\n+                    }\n                 }\n                 _ => {\n                     cov_mark::hit!(suppress_arg_snippets);"}, {"sha": "5a243cbdd3276cec7e95fa3997110daf83c55559", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f609efff8762abe66a8418d926a157b5299e457c/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f609efff8762abe66a8418d926a157b5299e457c/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=f609efff8762abe66a8418d926a157b5299e457c", "patch": "@@ -1,6 +1,5 @@\n //! Renderer for function calls.\n \n-use either::Either;\n use hir::{AsAssocItem, HasSource, HirDisplay};\n use ide_db::SymbolKind;\n use itertools::Itertools;\n@@ -56,7 +55,7 @@ struct FunctionRender<'a> {\n     ///\n     /// It seems that just using `ast` is the best choice -- most of parses\n     /// should be cached anyway.\n-    ast_node: ast::Fn,\n+    param_list: Option<ast::ParamList>,\n     is_method: bool,\n }\n \n@@ -69,9 +68,9 @@ impl<'a> FunctionRender<'a> {\n         is_method: bool,\n     ) -> Option<FunctionRender<'a>> {\n         let name = local_name.unwrap_or_else(|| fn_.name(ctx.db()));\n-        let ast_node = fn_.source(ctx.db())?.value;\n+        let param_list = fn_.source(ctx.db())?.value.param_list();\n \n-        Some(FunctionRender { ctx, name, receiver, func: fn_, ast_node, is_method })\n+        Some(FunctionRender { ctx, name, receiver, func: fn_, param_list, is_method })\n     }\n \n     fn render(self, import_to_add: Option<ImportEdit>) -> CompletionItem {\n@@ -152,25 +151,25 @@ impl<'a> FunctionRender<'a> {\n     }\n \n     fn params(&self) -> Params {\n-        let ast_params = match self.ast_node.param_list() {\n+        let ast_params = match &self.param_list {\n             Some(it) => it,\n-            None => return Params::Named(Vec::new()),\n+            None => return Params::Named(None, Vec::new()),\n         };\n-        let params = ast_params.params().map(Either::Right);\n+        let params = ast_params.params();\n \n-        let params = if self.ctx.completion.has_dot_receiver() || self.receiver.is_some() {\n-            params.zip(self.func.method_params(self.ctx.db()).unwrap_or_default()).collect()\n+        let (params, self_param) = if self.ctx.completion.has_dot_receiver()\n+            || self.receiver.is_some()\n+        {\n+            (params.zip(self.func.method_params(self.ctx.db()).unwrap_or_default()).collect(), None)\n         } else {\n-            ast_params\n-                .self_param()\n-                .map(Either::Left)\n-                .into_iter()\n-                .chain(params)\n-                .zip(self.func.assoc_fn_params(self.ctx.db()))\n-                .collect()\n+            let mut assoc_params = self.func.assoc_fn_params(self.ctx.db());\n+            if self.func.self_param(self.ctx.db()).is_some() {\n+                assoc_params.remove(0);\n+            }\n+            (params.zip(assoc_params).collect(), ast_params.self_param())\n         };\n \n-        Params::Named(params)\n+        Params::Named(self_param, params)\n     }\n \n     fn kind(&self) -> CompletionItemKind {"}]}