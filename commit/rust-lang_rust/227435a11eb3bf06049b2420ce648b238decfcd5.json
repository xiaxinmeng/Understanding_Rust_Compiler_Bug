{"sha": "227435a11eb3bf06049b2420ce648b238decfcd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNzQzNWExMWViM2JmMDYwNDliMjQyMGNlNjQ4YjIzOGRlY2ZjZDU=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-01T20:34:36Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-14T01:15:38Z"}, "message": "Tell regionck which binops are by value", "tree": {"sha": "6a8b80995572a15f46bd4a6c365420b8f0032dde", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a8b80995572a15f46bd4a6c365420b8f0032dde"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/227435a11eb3bf06049b2420ce648b238decfcd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/227435a11eb3bf06049b2420ce648b238decfcd5", "html_url": "https://github.com/rust-lang/rust/commit/227435a11eb3bf06049b2420ce648b238decfcd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/227435a11eb3bf06049b2420ce648b238decfcd5/comments", "author": null, "committer": null, "parents": [{"sha": "5038f5a70c8fd12703fe5d78b8d04918336e764c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5038f5a70c8fd12703fe5d78b8d04918336e764c", "html_url": "https://github.com/rust-lang/rust/commit/5038f5a70c8fd12703fe5d78b8d04918336e764c"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "3e7992b3cba173c91d64ae0a49b7b91c6e1fb68d", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/227435a11eb3bf06049b2420ce648b238decfcd5/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/227435a11eb3bf06049b2420ce648b238decfcd5/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=227435a11eb3bf06049b2420ce648b238decfcd5", "patch": "@@ -131,7 +131,7 @@ use middle::pat_util;\n use util::nodemap::{DefIdMap, NodeMap, FnvHashMap};\n use util::ppaux::{ty_to_string, Repr};\n \n-use syntax::ast;\n+use syntax::{ast, ast_util};\n use syntax::codemap::Span;\n use syntax::visit;\n use syntax::visit::Visitor;\n@@ -637,14 +637,22 @@ fn visit_expr(rcx: &mut Rcx, expr: &ast::Expr) {\n             visit::walk_expr(rcx, expr);\n         }\n \n-        ast::ExprIndex(ref lhs, ref rhs) |\n-        ast::ExprBinary(_, ref lhs, ref rhs) if has_method_map => {\n+        ast::ExprIndex(ref lhs, ref rhs) if has_method_map => {\n+            constrain_call(rcx, expr, Some(&**lhs),\n+                           Some(&**rhs).into_iter(), true);\n+\n+            visit::walk_expr(rcx, expr);\n+        },\n+\n+        ast::ExprBinary(op, ref lhs, ref rhs) if has_method_map => {\n+            let implicitly_ref_args = !ast_util::is_by_value_binop(op);\n+\n             // As `expr_method_call`, but the call is via an\n             // overloaded op.  Note that we (sadly) currently use an\n             // implicit \"by ref\" sort of passing style here.  This\n             // should be converted to an adjustment!\n             constrain_call(rcx, expr, Some(&**lhs),\n-                           Some(&**rhs).into_iter(), true);\n+                           Some(&**rhs).into_iter(), implicitly_ref_args);\n \n             visit::walk_expr(rcx, expr);\n         }"}]}