{"sha": "5fd8d180977feaf6f1141fb6a992303b2c817b14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZDhkMTgwOTc3ZmVhZjZmMTE0MWZiNmE5OTIzMDNiMmM4MTdiMTQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-23T18:24:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-23T18:24:49Z"}, "message": "Rollup merge of #48157 - scottmcm:try-for-each, r=dtolnay\n\nAdd Iterator::try_for_each\n\nThe fallible version of `for_each` aka the stateless version of `try_fold`.  Inspired by @cuviper's comment in https://github.com/rust-lang/rust/pull/45379#issuecomment-338370020 as a more direct and obvious solution than `.map(f).collect::<Result<(), _>>()`.\n\nLike `for_each`, no need for an `r` version thanks to overrides in `Rev`.\n\n`iterator_try_fold` tracking issue: https://github.com/rust-lang/rust/issues/45594", "tree": {"sha": "e025d02f841238419c3acd0a2f4456c40dba587e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e025d02f841238419c3acd0a2f4456c40dba587e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fd8d180977feaf6f1141fb6a992303b2c817b14", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJakFxyCRBK7hj4Ov3rIwAAdHIIABZr+SbwOJNeHSZUC8AOsEXy\nQQtItsgwL7bBy4Sjj22iiEJhnU8ti73ANHtvS4PyvKNOLQ/ib16HdDiJ+ddu0mld\npb3pXzXz2Vlr+y0r2tYKFP1kbf5IW5u4MMjGJvUcUeuMqi+Y7aot352rBG9elPKU\n195O9vd6oIG/4uNFJcMRmeGD8U2BPTp6qYOWmspXvcEf+VCmMkc78JRapjFbnvyk\nh8YrzneRsnmFVBQ/S5jkXv+ABQcXA4IlTXN6kazE57fojRnwEEGmLFuTNIy0vgot\nF7D5l5/YjVv2eLMPMZSquZu70K59lqBfWbQ2C4qeUDeGm/r9E6Gv2eYhMIkQq98=\n=qSQB\n-----END PGP SIGNATURE-----\n", "payload": "tree e025d02f841238419c3acd0a2f4456c40dba587e\nparent 1e67c1315b6dbd88c5267354a3b29a4a25f398c7\nparent 0bb818cc0b2885b01ce670ce192aac1dbc6db16a\nauthor Manish Goregaokar <manishsmail@gmail.com> 1519410289 -0800\ncommitter GitHub <noreply@github.com> 1519410289 -0800\n\nRollup merge of #48157 - scottmcm:try-for-each, r=dtolnay\n\nAdd Iterator::try_for_each\n\nThe fallible version of `for_each` aka the stateless version of `try_fold`.  Inspired by @cuviper's comment in https://github.com/rust-lang/rust/pull/45379#issuecomment-338370020 as a more direct and obvious solution than `.map(f).collect::<Result<(), _>>()`.\n\nLike `for_each`, no need for an `r` version thanks to overrides in `Rev`.\n\n`iterator_try_fold` tracking issue: https://github.com/rust-lang/rust/issues/45594\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fd8d180977feaf6f1141fb6a992303b2c817b14", "html_url": "https://github.com/rust-lang/rust/commit/5fd8d180977feaf6f1141fb6a992303b2c817b14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fd8d180977feaf6f1141fb6a992303b2c817b14/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e67c1315b6dbd88c5267354a3b29a4a25f398c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e67c1315b6dbd88c5267354a3b29a4a25f398c7", "html_url": "https://github.com/rust-lang/rust/commit/1e67c1315b6dbd88c5267354a3b29a4a25f398c7"}, {"sha": "0bb818cc0b2885b01ce670ce192aac1dbc6db16a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bb818cc0b2885b01ce670ce192aac1dbc6db16a", "html_url": "https://github.com/rust-lang/rust/commit/0bb818cc0b2885b01ce670ce192aac1dbc6db16a"}], "stats": {"total": 48, "additions": 42, "deletions": 6}, "files": [{"sha": "877793cb3c57cfd9b1c8a93027cbb5fb2a574191", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5fd8d180977feaf6f1141fb6a992303b2c817b14/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd8d180977feaf6f1141fb6a992303b2c817b14/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=5fd8d180977feaf6f1141fb6a992303b2c817b14", "patch": "@@ -1366,9 +1366,9 @@ pub trait Iterator {\n     ///\n     /// In particular, try to have this call `try_fold()` on the internal parts\n     /// from which this iterator is composed.  If multiple calls are needed,\n-    /// the `?` operator be convenient for chaining the accumulator value along,\n-    /// but beware any invariants that need to be upheld before those early\n-    /// returns.  This is a `&mut self` method, so iteration needs to be\n+    /// the `?` operator may be convenient for chaining the accumulator value\n+    /// along, but beware any invariants that need to be upheld before those\n+    /// early returns.  This is a `&mut self` method, so iteration needs to be\n     /// resumable after hitting an error here.\n     ///\n     /// # Examples\n@@ -1414,6 +1414,42 @@ pub trait Iterator {\n         Try::from_ok(accum)\n     }\n \n+    /// An iterator method that applies a fallible function to each item in the\n+    /// iterator, stopping at the first error and returning that error.\n+    ///\n+    /// This can also be thought of as the fallible form of [`for_each()`]\n+    /// or as the stateless version of [`try_fold()`].\n+    ///\n+    /// [`for_each()`]: #method.for_each\n+    /// [`try_fold()`]: #method.try_fold\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(iterator_try_fold)]\n+    /// use std::fs::rename;\n+    /// use std::io::{stdout, Write};\n+    /// use std::path::Path;\n+    ///\n+    /// let data = [\"no_tea.txt\", \"stale_bread.json\", \"torrential_rain.png\"];\n+    ///\n+    /// let res = data.iter().try_for_each(|x| writeln!(stdout(), \"{}\", x));\n+    /// assert!(res.is_ok());\n+    ///\n+    /// let mut it = data.iter().cloned();\n+    /// let res = it.try_for_each(|x| rename(x, Path::new(x).with_extension(\"old\")));\n+    /// assert!(res.is_err());\n+    /// // It short-circuited, so the remaining items are still in the iterator:\n+    /// assert_eq!(it.next(), Some(\"stale_bread.json\"));\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iterator_try_fold\", issue = \"45594\")]\n+    fn try_for_each<F, R>(&mut self, mut f: F) -> R where\n+        Self: Sized, F: FnMut(Self::Item) -> R, R: Try<Ok=()>\n+    {\n+        self.try_fold((), move |(), x| f(x))\n+    }\n+\n     /// An iterator method that applies a function, producing a single, final value.\n     ///\n     /// `fold()` takes two arguments: an initial value, and a closure with two\n@@ -1532,7 +1568,7 @@ pub trait Iterator {\n     fn all<F>(&mut self, mut f: F) -> bool where\n         Self: Sized, F: FnMut(Self::Item) -> bool\n     {\n-        self.try_fold((), move |(), x| {\n+        self.try_for_each(move |x| {\n             if f(x) { LoopState::Continue(()) }\n             else { LoopState::Break(()) }\n         }) == LoopState::Continue(())\n@@ -1581,7 +1617,7 @@ pub trait Iterator {\n         Self: Sized,\n         F: FnMut(Self::Item) -> bool\n     {\n-        self.try_fold((), move |(), x| {\n+        self.try_for_each(move |x| {\n             if f(x) { LoopState::Break(()) }\n             else { LoopState::Continue(()) }\n         }) == LoopState::Break(())\n@@ -1635,7 +1671,7 @@ pub trait Iterator {\n         Self: Sized,\n         P: FnMut(&Self::Item) -> bool,\n     {\n-        self.try_fold((), move |(), x| {\n+        self.try_for_each(move |x| {\n             if predicate(&x) { LoopState::Break(x) }\n             else { LoopState::Continue(()) }\n         }).break_value()"}]}