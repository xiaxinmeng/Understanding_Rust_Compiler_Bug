{"sha": "6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMGE0MDZiMWM5ZTRjNTE4NTg2YWMzY2MyZmU5NmMyMTg0MGE1ZGM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-10T03:14:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-10T03:14:10Z"}, "message": "Rollup merge of #62474 - nikic:update-llvm, r=alexcrichton\n\nPrepare for LLVM 9 update\n\nMain changes:\n\n * In preparation for opaque pointer types, the `byval` attribute now takes a type. As such, the argument type needs to be threaded through to the function/callsite attribute application logic.\n * On ARM the `+fp-only-sp` and `+d16` features have become `-fp64` and `-d32`. I've switched the target definitions to use the new names, but also added bidirectional emulation so either can be used on any LLVM version for backwards compatibility.\n * The datalayout can now specify function pointer alignment. In particular on ARM `Fi8` is specified, which means that function pointer alignment is independent of function alignment. I've added this to our datalayouts to match LLVM (which is something we check) and strip the fnptr alignment for older LLVM versions.\n * The fmul/fadd reductions now always respect the accumulator (including for unordered reductions), so we should pass the identity instead of undef.\n\nOpen issues:\n\n * https://reviews.llvm.org/D62106 causes linker errors with ld.bdf due to https://sourceware.org/bugzilla/show_bug.cgi?id=24784. To avoid this I've enabled `RelaxELFRelocations`, which results in a GOTPCRELX relocation for `__tls_get_addr` and avoids the issue. However, this is likely not acceptable because relax relocations are not supported by older linker versions. We may need an LLVM option to keep using PLT for `__tls_get_addr` despite `RtLibUseGOT`.\n\nThe corresponding llvm-project PR is https://github.com/rust-lang/llvm-project/pull/19.\n\nr? @ghost", "tree": {"sha": "7abf65e94dcccf7f9b813037d5d6b3d3d7c54b24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7abf65e94dcccf7f9b813037d5d6b3d3d7c54b24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdJVgCCRBK7hj4Ov3rIwAAdHIIAKAeB53ERigOVKS4538M5fpQ\nJgvLh+J4OnG7raCQ4DSOPOYmsCfAKetuZbOqFgIK2mczQk6jJCrHRa5pAn2JnZyd\nae1+TkONXp39hYCp+DypowtZ0DgjGevP0NXasCETiqHFy0uS+hPgWAV2t+yOqzjG\nh7ndcrGY2Qf5L1h/+2OoPxS+IzDQu/AyrUw+d6a179ygev+FxgMxsnbbYPfKZbA2\nu7y1ACYsd4ehahXlF0CMsqjiakmMbu7h47WXwWnr4nJgRSSAG3cXUNuyRGC5HTfh\nLUtDQb5vc4wey5wc+kfGoXjAfGjVBLHFYnJprncza8wNJFAmxF3mgKy49XTp5w8=\n=UZ5c\n-----END PGP SIGNATURE-----\n", "payload": "tree 7abf65e94dcccf7f9b813037d5d6b3d3d7c54b24\nparent fe26fc9a1cada15beb553adf0922286eb0bce274\nparent ac560258e36659d542850651fc1b79e4db2eb29d\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1562728450 +0200\ncommitter GitHub <noreply@github.com> 1562728450 +0200\n\nRollup merge of #62474 - nikic:update-llvm, r=alexcrichton\n\nPrepare for LLVM 9 update\n\nMain changes:\n\n * In preparation for opaque pointer types, the `byval` attribute now takes a type. As such, the argument type needs to be threaded through to the function/callsite attribute application logic.\n * On ARM the `+fp-only-sp` and `+d16` features have become `-fp64` and `-d32`. I've switched the target definitions to use the new names, but also added bidirectional emulation so either can be used on any LLVM version for backwards compatibility.\n * The datalayout can now specify function pointer alignment. In particular on ARM `Fi8` is specified, which means that function pointer alignment is independent of function alignment. I've added this to our datalayouts to match LLVM (which is something we check) and strip the fnptr alignment for older LLVM versions.\n * The fmul/fadd reductions now always respect the accumulator (including for unordered reductions), so we should pass the identity instead of undef.\n\nOpen issues:\n\n * https://reviews.llvm.org/D62106 causes linker errors with ld.bdf due to https://sourceware.org/bugzilla/show_bug.cgi?id=24784. To avoid this I've enabled `RelaxELFRelocations`, which results in a GOTPCRELX relocation for `__tls_get_addr` and avoids the issue. However, this is likely not acceptable because relax relocations are not supported by older linker versions. We may need an LLVM option to keep using PLT for `__tls_get_addr` despite `RtLibUseGOT`.\n\nThe corresponding llvm-project PR is https://github.com/rust-lang/llvm-project/pull/19.\n\nr? @ghost\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "html_url": "https://github.com/rust-lang/rust/commit/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe26fc9a1cada15beb553adf0922286eb0bce274", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe26fc9a1cada15beb553adf0922286eb0bce274", "html_url": "https://github.com/rust-lang/rust/commit/fe26fc9a1cada15beb553adf0922286eb0bce274"}, {"sha": "ac560258e36659d542850651fc1b79e4db2eb29d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac560258e36659d542850651fc1b79e4db2eb29d", "html_url": "https://github.com/rust-lang/rust/commit/ac560258e36659d542850651fc1b79e4db2eb29d"}], "stats": {"total": 245, "additions": 160, "deletions": 85}, "files": [{"sha": "ff87afe0c444b7556739c73517056a6c7e919f20", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 35, "deletions": 29, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -34,17 +34,17 @@ trait ArgAttributeExt {\n impl ArgAttributeExt for ArgAttribute {\n     fn for_each_kind<F>(&self, mut f: F) where F: FnMut(llvm::Attribute) {\n         for_each_kind!(self, f,\n-                       ByVal, NoAlias, NoCapture, NonNull, ReadOnly, SExt, StructRet, ZExt, InReg)\n+                       NoAlias, NoCapture, NonNull, ReadOnly, SExt, StructRet, ZExt, InReg)\n     }\n }\n \n pub trait ArgAttributesExt {\n-    fn apply_llfn(&self, idx: AttributePlace, llfn: &Value);\n-    fn apply_callsite(&self, idx: AttributePlace, callsite: &Value);\n+    fn apply_llfn(&self, idx: AttributePlace, llfn: &Value, ty: Option<&Type>);\n+    fn apply_callsite(&self, idx: AttributePlace, callsite: &Value, ty: Option<&Type>);\n }\n \n impl ArgAttributesExt for ArgAttributes {\n-    fn apply_llfn(&self, idx: AttributePlace, llfn: &Value) {\n+    fn apply_llfn(&self, idx: AttributePlace, llfn: &Value, ty: Option<&Type>) {\n         let mut regular = self.regular;\n         unsafe {\n             let deref = self.pointee_size.bytes();\n@@ -65,11 +65,14 @@ impl ArgAttributesExt for ArgAttributes {\n                                                idx.as_uint(),\n                                                align.bytes() as u32);\n             }\n+            if regular.contains(ArgAttribute::ByVal) {\n+                llvm::LLVMRustAddByValAttr(llfn, idx.as_uint(), ty.unwrap());\n+            }\n             regular.for_each_kind(|attr| attr.apply_llfn(idx, llfn));\n         }\n     }\n \n-    fn apply_callsite(&self, idx: AttributePlace, callsite: &Value) {\n+    fn apply_callsite(&self, idx: AttributePlace, callsite: &Value, ty: Option<&Type>) {\n         let mut regular = self.regular;\n         unsafe {\n             let deref = self.pointee_size.bytes();\n@@ -90,6 +93,9 @@ impl ArgAttributesExt for ArgAttributes {\n                                                        idx.as_uint(),\n                                                        align.bytes() as u32);\n             }\n+            if regular.contains(ArgAttribute::ByVal) {\n+                llvm::LLVMRustAddByValCallSiteAttr(callsite, idx.as_uint(), ty.unwrap());\n+            }\n             regular.for_each_kind(|attr| attr.apply_callsite(idx, callsite));\n         }\n     }\n@@ -298,7 +304,7 @@ pub trait FnTypeLlvmExt<'tcx> {\n     fn llvm_type(&self, cx: &CodegenCx<'ll, 'tcx>) -> &'ll Type;\n     fn ptr_to_llvm_type(&self, cx: &CodegenCx<'ll, 'tcx>) -> &'ll Type;\n     fn llvm_cconv(&self) -> llvm::CallConv;\n-    fn apply_attrs_llfn(&self, llfn: &'ll Value);\n+    fn apply_attrs_llfn(&self, cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value);\n     fn apply_attrs_callsite(&self, bx: &mut Builder<'a, 'll, 'tcx>, callsite: &'ll Value);\n }\n \n@@ -384,51 +390,51 @@ impl<'tcx> FnTypeLlvmExt<'tcx> for FnType<'tcx, Ty<'tcx>> {\n         }\n     }\n \n-    fn apply_attrs_llfn(&self, llfn: &'ll Value) {\n+    fn apply_attrs_llfn(&self, cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value) {\n         let mut i = 0;\n-        let mut apply = |attrs: &ArgAttributes| {\n-            attrs.apply_llfn(llvm::AttributePlace::Argument(i), llfn);\n+        let mut apply = |attrs: &ArgAttributes, ty: Option<&Type>| {\n+            attrs.apply_llfn(llvm::AttributePlace::Argument(i), llfn, ty);\n             i += 1;\n         };\n         match self.ret.mode {\n             PassMode::Direct(ref attrs) => {\n-                attrs.apply_llfn(llvm::AttributePlace::ReturnValue, llfn);\n+                attrs.apply_llfn(llvm::AttributePlace::ReturnValue, llfn, None);\n             }\n-            PassMode::Indirect(ref attrs, _) => apply(attrs),\n+            PassMode::Indirect(ref attrs, _) => apply(attrs, Some(self.ret.layout.llvm_type(cx))),\n             _ => {}\n         }\n         for arg in &self.args {\n             if arg.pad.is_some() {\n-                apply(&ArgAttributes::new());\n+                apply(&ArgAttributes::new(), None);\n             }\n             match arg.mode {\n                 PassMode::Ignore(_) => {}\n                 PassMode::Direct(ref attrs) |\n-                PassMode::Indirect(ref attrs, None) => apply(attrs),\n+                PassMode::Indirect(ref attrs, None) => apply(attrs, Some(arg.layout.llvm_type(cx))),\n                 PassMode::Indirect(ref attrs, Some(ref extra_attrs)) => {\n-                    apply(attrs);\n-                    apply(extra_attrs);\n+                    apply(attrs, None);\n+                    apply(extra_attrs, None);\n                 }\n                 PassMode::Pair(ref a, ref b) => {\n-                    apply(a);\n-                    apply(b);\n+                    apply(a, None);\n+                    apply(b, None);\n                 }\n-                PassMode::Cast(_) => apply(&ArgAttributes::new()),\n+                PassMode::Cast(_) => apply(&ArgAttributes::new(), None),\n             }\n         }\n     }\n \n     fn apply_attrs_callsite(&self, bx: &mut Builder<'a, 'll, 'tcx>, callsite: &'ll Value) {\n         let mut i = 0;\n-        let mut apply = |attrs: &ArgAttributes| {\n-            attrs.apply_callsite(llvm::AttributePlace::Argument(i), callsite);\n+        let mut apply = |attrs: &ArgAttributes, ty: Option<&Type>| {\n+            attrs.apply_callsite(llvm::AttributePlace::Argument(i), callsite, ty);\n             i += 1;\n         };\n         match self.ret.mode {\n             PassMode::Direct(ref attrs) => {\n-                attrs.apply_callsite(llvm::AttributePlace::ReturnValue, callsite);\n+                attrs.apply_callsite(llvm::AttributePlace::ReturnValue, callsite, None);\n             }\n-            PassMode::Indirect(ref attrs, _) => apply(attrs),\n+            PassMode::Indirect(ref attrs, _) => apply(attrs, Some(self.ret.layout.llvm_type(bx))),\n             _ => {}\n         }\n         if let layout::Abi::Scalar(ref scalar) = self.ret.layout.abi {\n@@ -446,21 +452,21 @@ impl<'tcx> FnTypeLlvmExt<'tcx> for FnType<'tcx, Ty<'tcx>> {\n         }\n         for arg in &self.args {\n             if arg.pad.is_some() {\n-                apply(&ArgAttributes::new());\n+                apply(&ArgAttributes::new(), None);\n             }\n             match arg.mode {\n                 PassMode::Ignore(_) => {}\n                 PassMode::Direct(ref attrs) |\n-                PassMode::Indirect(ref attrs, None) => apply(attrs),\n+                PassMode::Indirect(ref attrs, None) => apply(attrs, Some(arg.layout.llvm_type(bx))),\n                 PassMode::Indirect(ref attrs, Some(ref extra_attrs)) => {\n-                    apply(attrs);\n-                    apply(extra_attrs);\n+                    apply(attrs, None);\n+                    apply(extra_attrs, None);\n                 }\n                 PassMode::Pair(ref a, ref b) => {\n-                    apply(a);\n-                    apply(b);\n+                    apply(a, None);\n+                    apply(b, None);\n                 }\n-                PassMode::Cast(_) => apply(&ArgAttributes::new()),\n+                PassMode::Cast(_) => apply(&ArgAttributes::new(), None),\n             }\n         }\n "}, {"sha": "33b50401b22f149ac9f11d8464f949433848e2e2", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -119,6 +119,29 @@ pub fn set_probestack(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n         const_cstr!(\"probe-stack\"), const_cstr!(\"__rust_probestack\"));\n }\n \n+fn translate_obsolete_target_features(feature: &str) -> &str {\n+    const LLVM9_FEATURE_CHANGES: &[(&str, &str)] = &[\n+        (\"+fp-only-sp\", \"-fp64\"),\n+        (\"-fp-only-sp\", \"+fp64\"),\n+        (\"+d16\", \"-d32\"),\n+        (\"-d16\", \"+d32\"),\n+    ];\n+    if llvm_util::get_major_version() >= 9 {\n+        for &(old, new) in LLVM9_FEATURE_CHANGES {\n+            if feature == old {\n+                return new;\n+            }\n+        }\n+    } else {\n+        for &(old, new) in LLVM9_FEATURE_CHANGES {\n+            if feature == new {\n+                return old;\n+            }\n+        }\n+    }\n+    feature\n+}\n+\n pub fn llvm_target_features(sess: &Session) -> impl Iterator<Item = &str> {\n     const RUSTC_SPECIFIC_FEATURES: &[&str] = &[\n         \"crt-static\",\n@@ -129,6 +152,7 @@ pub fn llvm_target_features(sess: &Session) -> impl Iterator<Item = &str> {\n     sess.target.target.options.features.split(',')\n         .chain(cmdline)\n         .filter(|l| !l.is_empty())\n+        .map(translate_obsolete_target_features)\n }\n \n pub fn apply_target_cpu_attr(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {"}, {"sha": "e9f25e6344b064ac990af518a59a16fa9e9b420c", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -249,6 +249,10 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         self.const_uint(self.type_i8(), i as u64)\n     }\n \n+    fn const_real(&self, t: &'ll Type, val: f64) -> &'ll Value {\n+        unsafe { llvm::LLVMConstReal(t, val) }\n+    }\n+\n     fn const_struct(\n         &self,\n         elts: &[&'ll Value],"}, {"sha": "2b68eb53a4ab96a27195a938dda8d5aede0c720f", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -1,5 +1,6 @@\n use crate::attributes;\n use crate::llvm;\n+use crate::llvm_util;\n use crate::debuginfo;\n use crate::value::Value;\n use rustc::dep_graph::DepGraphSafe;\n@@ -140,6 +141,11 @@ pub fn is_pie_binary(sess: &Session) -> bool {\n     !is_any_library(sess) && get_reloc_model(sess) == llvm::RelocMode::PIC\n }\n \n+fn strip_function_ptr_alignment(data_layout: String) -> String {\n+    // FIXME: Make this more general.\n+    data_layout.replace(\"-Fi8-\", \"-\")\n+}\n+\n pub unsafe fn create_module(\n     tcx: TyCtxt<'_>,\n     llcx: &'ll llvm::Context,\n@@ -149,14 +155,19 @@ pub unsafe fn create_module(\n     let mod_name = SmallCStr::new(mod_name);\n     let llmod = llvm::LLVMModuleCreateWithNameInContext(mod_name.as_ptr(), llcx);\n \n+    let mut target_data_layout = sess.target.target.data_layout.clone();\n+    if llvm_util::get_major_version() < 9 {\n+        target_data_layout = strip_function_ptr_alignment(target_data_layout);\n+    }\n+\n     // Ensure the data-layout values hardcoded remain the defaults.\n     if sess.target.target.options.is_builtin {\n         let tm = crate::back::write::create_informational_target_machine(&tcx.sess, false);\n         llvm::LLVMRustSetDataLayoutFromTargetMachine(llmod, tm);\n         llvm::LLVMRustDisposeTargetMachine(tm);\n \n-        let data_layout = llvm::LLVMGetDataLayout(llmod);\n-        let data_layout = str::from_utf8(CStr::from_ptr(data_layout).to_bytes())\n+        let llvm_data_layout = llvm::LLVMGetDataLayout(llmod);\n+        let llvm_data_layout = str::from_utf8(CStr::from_ptr(llvm_data_layout).to_bytes())\n             .ok().expect(\"got a non-UTF8 data-layout from LLVM\");\n \n         // Unfortunately LLVM target specs change over time, and right now we\n@@ -177,16 +188,16 @@ pub unsafe fn create_module(\n         let cfg_llvm_root = option_env!(\"CFG_LLVM_ROOT\").unwrap_or(\"\");\n         let custom_llvm_used = cfg_llvm_root.trim() != \"\";\n \n-        if !custom_llvm_used && sess.target.target.data_layout != data_layout {\n+        if !custom_llvm_used && target_data_layout != llvm_data_layout {\n             bug!(\"data-layout for builtin `{}` target, `{}`, \\\n                   differs from LLVM default, `{}`\",\n                  sess.target.target.llvm_target,\n-                 sess.target.target.data_layout,\n-                 data_layout);\n+                 target_data_layout,\n+                 llvm_data_layout);\n         }\n     }\n \n-    let data_layout = SmallCStr::new(&sess.target.target.data_layout);\n+    let data_layout = SmallCStr::new(&target_data_layout);\n     llvm::LLVMSetDataLayout(llmod, data_layout.as_ptr());\n \n     let llvm_target = SmallCStr::new(&sess.target.target.llvm_target);"}, {"sha": "62eab0f3d4e69b8f047d2f749fe65b13b672c8fb", "filename": "src/librustc_codegen_llvm/declare.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdeclare.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -107,7 +107,7 @@ impl DeclareMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             llvm::Attribute::NoReturn.apply_llfn(Function, llfn);\n         }\n \n-        fty.apply_attrs_llfn(llfn);\n+        fty.apply_attrs_llfn(self, llfn);\n \n         llfn\n     }"}, {"sha": "dd6cfd7e29e4ea9f39efffb9f834d86a240fee11", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -1663,9 +1663,10 @@ fn generic_simd_intrinsic(\n                             acc\n                         } else {\n                             // unordered arithmetic reductions do not:\n+                            let identity_acc = if $name.contains(\"mul\") { 1.0 } else { 0.0 };\n                             match f.bit_width() {\n-                                32 => bx.const_undef(bx.type_f32()),\n-                                64 => bx.const_undef(bx.type_f64()),\n+                                32 => bx.const_real(bx.type_f32(), identity_acc),\n+                                64 => bx.const_real(bx.type_f64(), identity_acc),\n                                 v => {\n                                     return_error!(r#\"\n unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,"}, {"sha": "2b22925f4496927b0ac47b89e5bdc27072353f8f", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -715,6 +715,7 @@ extern \"C\" {\n     // Operations on scalar constants\n     pub fn LLVMConstInt(IntTy: &Type, N: c_ulonglong, SignExtend: Bool) -> &Value;\n     pub fn LLVMConstIntOfArbitraryPrecision(IntTy: &Type, Wn: c_uint, Ws: *const u64) -> &Value;\n+    pub fn LLVMConstReal(RealTy: &Type, N: f64) -> &Value;\n     pub fn LLVMConstIntGetZExtValue(ConstantVal: &Value) -> c_ulonglong;\n     pub fn LLVMRustConstInt128Get(ConstantVal: &Value, SExt: bool,\n                                   high: &mut u64, low: &mut u64) -> bool;\n@@ -794,6 +795,7 @@ extern \"C\" {\n     pub fn LLVMRustAddAlignmentAttr(Fn: &Value, index: c_uint, bytes: u32);\n     pub fn LLVMRustAddDereferenceableAttr(Fn: &Value, index: c_uint, bytes: u64);\n     pub fn LLVMRustAddDereferenceableOrNullAttr(Fn: &Value, index: c_uint, bytes: u64);\n+    pub fn LLVMRustAddByValAttr(Fn: &Value, index: c_uint, ty: &Type);\n     pub fn LLVMRustAddFunctionAttribute(Fn: &Value, index: c_uint, attr: Attribute);\n     pub fn LLVMRustAddFunctionAttrStringValue(Fn: &Value,\n                                               index: c_uint,\n@@ -824,6 +826,7 @@ extern \"C\" {\n     pub fn LLVMRustAddDereferenceableOrNullCallSiteAttr(Instr: &Value,\n                                                         index: c_uint,\n                                                         bytes: u64);\n+    pub fn LLVMRustAddByValCallSiteAttr(Instr: &Value, index: c_uint, ty: &Type);\n \n     // Operations on load/store instructions (only)\n     pub fn LLVMSetVolatile(MemoryAccessInst: &Value, volatile: Bool);"}, {"sha": "248fadfaf0f2734eef2e350d8674750d06c4e748", "filename": "src/librustc_codegen_ssa/traits/consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fconsts.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -17,6 +17,7 @@ pub trait ConstMethods<'tcx>: BackendTypes {\n     fn const_u64(&self, i: u64) -> Self::Value;\n     fn const_usize(&self, i: u64) -> Self::Value;\n     fn const_u8(&self, i: u8) -> Self::Value;\n+    fn const_real(&self, t: Self::Type, val: f64) -> Self::Value;\n \n     fn const_struct(&self, elts: &[Self::Value], packed: bool) -> Self::Value;\n "}, {"sha": "c02edabd886fa8eecbb681c717af0dfe2c9165e8", "filename": "src/librustc_target/spec/arm_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farm_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farm_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_linux_androideabi.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -11,7 +11,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"android\".to_string(),\n         target_env: String::new(),"}, {"sha": "1d5751c1f713b83c84ab24ae4e79da8bd2045afa", "filename": "src/librustc_target/spec/arm_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabi.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -8,7 +8,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),"}, {"sha": "8eb19a6518a3f7ebfbaf939fc11c4ef05d1ca269", "filename": "src/librustc_target/spec/arm_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_gnueabihf.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -8,7 +8,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),"}, {"sha": "5c40b6fb89fd33c02206f010926d4a93135ca049", "filename": "src/librustc_target/spec/arm_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabi.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -15,7 +15,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"linux\".to_string(),\n         target_env: \"musl\".to_string(),"}, {"sha": "496a0c4a43a7e51978970a8ff033f488e91b7f29", "filename": "src/librustc_target/spec/arm_unknown_linux_musleabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farm_unknown_linux_musleabihf.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -15,7 +15,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"linux\".to_string(),\n         target_env: \"musl\".to_string(),"}, {"sha": "0b41b920e584478bb6ae7c25f43e04d0a1f06d26", "filename": "src/librustc_target/spec/armebv7r_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabi.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -9,7 +9,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"E-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"E-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n         target_env: \"\".to_string(),"}, {"sha": "5f1bfdce355c13f46b8097cf3bcac63ac0d4a590", "filename": "src/librustc_target/spec/armebv7r_none_eabihf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -9,7 +9,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"big\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"E-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"E-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n         target_env: String::new(),\n@@ -21,7 +21,7 @@ pub fn target() -> TargetResult {\n             linker: Some(\"rust-lld\".to_owned()),\n             relocation_model: \"static\".to_string(),\n             panic_strategy: PanicStrategy::Abort,\n-            features: \"+vfp3,+d16,+fp-only-sp\".to_string(),\n+            features: \"+vfp3,-d32,-fp16\".to_string(),\n             max_atomic_width: Some(32),\n             abi_blacklist: super::arm_base::abi_blacklist(),\n             emit_debug_gdb_scripts: false,"}, {"sha": "264bf8d871d7a7ac23bb11ad8bff5bc5f50b8759", "filename": "src/librustc_target/spec/armv4t_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv4t_unknown_linux_gnueabi.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -7,7 +7,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),"}, {"sha": "d0f1222d87a5b40fda628982fa037b8e249ce5a0", "filename": "src/librustc_target/spec/armv5te_unknown_linux_gnueabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_gnueabi.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -7,7 +7,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),"}, {"sha": "9c08a7741a65e105ca7311bf2c21ca087624c547", "filename": "src/librustc_target/spec/armv5te_unknown_linux_musleabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_musleabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_musleabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv5te_unknown_linux_musleabi.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -10,7 +10,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"linux\".to_string(),\n         target_env: \"musl\".to_string(),"}, {"sha": "efbbee959ed955cfd13799085dcbfa1dca3e71c0", "filename": "src/librustc_target/spec/armv6_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_freebsd.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -7,7 +7,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"freebsd\".to_string(),\n         target_env: \"gnueabihf\".to_string(),"}, {"sha": "b76c39ac75b8b59299a8d77282a99298802cdea1", "filename": "src/librustc_target/spec/armv6_unknown_netbsd_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv6_unknown_netbsd_eabihf.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -8,7 +8,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"netbsd\".to_string(),\n         target_env: \"eabihf\".to_string(),"}, {"sha": "c1e1caf8e2e7697af514083830a2ec50f078f097", "filename": "src/librustc_target/spec/armv7_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmv7_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmv7_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_apple_ios.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -8,7 +8,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:o-p:32:32-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32\".to_string(),\n+        data_layout: \"e-m:o-p:32:32-Fi8-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"ios\".to_string(),\n         target_env: String::new(),"}, {"sha": "e22a853814a040b85ffa0b49127c520dd1691f38", "filename": "src/librustc_target/spec/armv7_linux_androideabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmv7_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmv7_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_linux_androideabi.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -10,7 +10,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::android_base::opts();\n-    base.features = \"+v7,+thumb-mode,+thumb2,+vfp3,+d16,-neon\".to_string();\n+    base.features = \"+v7,+thumb-mode,+thumb2,+vfp3,-d32,-neon\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args\n         .get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-march=armv7-a\".to_string());\n@@ -20,7 +20,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"android\".to_string(),\n         target_env: String::new(),"}, {"sha": "7065d30a5bebafb29b4fcd2e14c6f34ab11ff87b", "filename": "src/librustc_target/spec/armv7_unknown_cloudabi_eabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_cloudabi_eabihf.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -13,7 +13,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"cloudabi\".to_string(),\n         target_env: String::new(),"}, {"sha": "219b06362f3f7f8dbaf7ab60edafa3a22967a6b0", "filename": "src/librustc_target/spec/armv7_unknown_freebsd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_freebsd.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -7,15 +7,15 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"freebsd\".to_string(),\n         target_env: \"gnueabihf\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n-            features: \"+v7,+vfp3,+d16,+thumb2,-neon\".to_string(),\n+            features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             max_atomic_width: Some(64),\n             abi_blacklist: super::arm_base::abi_blacklist(),\n             target_mcount: \"\\u{1}__gnu_mcount_nc\".to_string(),"}, {"sha": "1dd53b1b4229ff201997f80eee8fbf2f29ecbb2d", "filename": "src/librustc_target/spec/armv7_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_gnueabihf.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -10,7 +10,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),\n@@ -19,7 +19,7 @@ pub fn target() -> TargetResult {\n \n         options: TargetOptions {\n             // Info about features at https://wiki.debian.org/ArmHardFloatPort\n-            features: \"+v7,+vfp3,+d16,+thumb2,-neon\".to_string(),\n+            features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             abi_blacklist: super::arm_base::abi_blacklist(),"}, {"sha": "ee8e48e3e751c7ead12abfd954d76bb71955f6b6", "filename": "src/librustc_target/spec/armv7_unknown_linux_musleabihf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_linux_musleabihf.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -12,7 +12,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"linux\".to_string(),\n         target_env: \"musl\".to_string(),\n@@ -22,7 +22,7 @@ pub fn target() -> TargetResult {\n         // Most of these settings are copied from the armv7_unknown_linux_gnueabihf\n         // target.\n         options: TargetOptions {\n-            features: \"+v7,+vfp3,+d16,+thumb2,-neon\".to_string(),\n+            features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             abi_blacklist: super::arm_base::abi_blacklist(),"}, {"sha": "1d63b0261c1a4ca466f826bda4c6dfa90b4a373e", "filename": "src/librustc_target/spec/armv7_unknown_netbsd_eabihf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7_unknown_netbsd_eabihf.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -7,15 +7,15 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"netbsd\".to_string(),\n         target_env: \"eabihf\".to_string(),\n         target_vendor: \"unknown\".to_string(),\n         linker_flavor: LinkerFlavor::Gcc,\n \n         options: TargetOptions {\n-            features: \"+v7,+vfp3,+d16,+thumb2,-neon\".to_string(),\n+            features: \"+v7,+vfp3,-d32,+thumb2,-neon\".to_string(),\n             cpu: \"generic\".to_string(),\n             max_atomic_width: Some(64),\n             abi_blacklist: super::arm_base::abi_blacklist(),"}, {"sha": "814ca1d77ac7ed649c10240fdf8645c191d89cca", "filename": "src/librustc_target/spec/armv7r_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabi.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -9,7 +9,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n         target_env: \"\".to_string(),"}, {"sha": "decf1a01e0b1496374035f342323b8d36775b004", "filename": "src/librustc_target/spec/armv7r_none_eabihf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabihf.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -9,7 +9,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n         target_env: \"\".to_string(),\n@@ -21,7 +21,7 @@ pub fn target() -> TargetResult {\n             linker: Some(\"rust-lld\".to_owned()),\n             relocation_model: \"static\".to_string(),\n             panic_strategy: PanicStrategy::Abort,\n-            features: \"+vfp3,+d16,+fp-only-sp\".to_string(),\n+            features: \"+vfp3,-d32,-fp16\".to_string(),\n             max_atomic_width: Some(32),\n             abi_blacklist: super::arm_base::abi_blacklist(),\n             emit_debug_gdb_scripts: false,"}, {"sha": "55e2a876865e3f002cc7bac1e8f08fab9b9e915f", "filename": "src/librustc_target/spec/armv7s_apple_ios.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmv7s_apple_ios.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Farmv7s_apple_ios.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7s_apple_ios.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -8,7 +8,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:o-p:32:32-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32\".to_string(),\n+        data_layout: \"e-m:o-p:32:32-Fi8-f64:32:64-v64:32:64-v128:32:128-a:0:32-n32-S32\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"ios\".to_string(),\n         target_env: String::new(),"}, {"sha": "28353552fc71af9f459c0403e9ab8d498966add1", "filename": "src/librustc_target/spec/thumbv6m_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Fthumbv6m_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Fthumbv6m_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv6m_none_eabi.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -8,7 +8,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n         target_env: String::new(),"}, {"sha": "886e3188272622f6ea945659ca853a48725e20b8", "filename": "src/librustc_target/spec/thumbv7a_pc_windows_msvc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7a_pc_windows_msvc.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -22,7 +22,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:w-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:w-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"windows\".to_string(),\n         target_env: \"msvc\".to_string(),"}, {"sha": "4e2f9b91b0d559add467d5c6f404b19f5f3cfbbe", "filename": "src/librustc_target/spec/thumbv7em_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabi.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -17,7 +17,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n         target_env: String::new(),"}, {"sha": "c510be519c0a8a4c931774875e046f18cb44688e", "filename": "src/librustc_target/spec/thumbv7em_none_eabihf.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7em_none_eabihf.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -6,7 +6,7 @@\n // Additionally, this target uses the \"hard\" floating convention (ABI) where floating point values\n // are passed to/from subroutines via FPU registers (S0, S1, D0, D1, etc.).\n //\n-// To opt into double precision hardware support, use the `-C target-feature=-fp-only-sp` flag.\n+// To opt into double precision hardware support, use the `-C target-feature=+fp64` flag.\n \n use crate::spec::{LinkerFlavor, LldFlavor, Target, TargetOptions, TargetResult};\n \n@@ -16,7 +16,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n         target_env: String::new(),\n@@ -26,14 +26,14 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             // `+vfp4` is the lowest common denominator between the Cortex-M4 (vfp4-16) and the\n             // Cortex-M7 (vfp5)\n-            // `+d16` both the Cortex-M4 and the Cortex-M7 only have 16 double-precision registers\n+            // `-d32` both the Cortex-M4 and the Cortex-M7 only have 16 double-precision registers\n             // available\n-            // `+fp-only-sp` The Cortex-M4 only supports single precision floating point operations\n+            // `-fp64` The Cortex-M4 only supports single precision floating point operations\n             // whereas in the Cortex-M7 double precision is optional\n             //\n             // Reference:\n             // ARMv7-M Architecture Reference Manual - A2.5 The optional floating-point extension\n-            features: \"+vfp4,+d16,+fp-only-sp\".to_string(),\n+            features: \"+vfp4,-d32,-fp64\".to_string(),\n             max_atomic_width: Some(32),\n             .. super::thumb_base::opts()\n         }"}, {"sha": "9c9868ef37c31a89bfaf7ed8a346847df5ded0cc", "filename": "src/librustc_target/spec/thumbv7m_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Fthumbv7m_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Fthumbv7m_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7m_none_eabi.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -8,7 +8,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n         target_env: String::new(),"}, {"sha": "f3142ef600239953655d4715fafb75fb6d9d38a6", "filename": "src/librustc_target/spec/thumbv7neon_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_linux_androideabi.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -20,7 +20,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"android\".to_string(),\n         target_env: \"\".to_string(),"}, {"sha": "5524bc9ab662e9f6e86a6f7bc8ceebfeb34a23d1", "filename": "src/librustc_target/spec/thumbv7neon_unknown_linux_gnueabihf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv7neon_unknown_linux_gnueabihf.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -13,7 +13,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"linux\".to_string(),\n         target_env: \"gnu\".to_string(),"}, {"sha": "0b4750093cc2cd391a05e0d18abe36ce9e19b6b5", "filename": "src/librustc_target/spec/thumbv8m_base_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Fthumbv8m_base_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Fthumbv8m_base_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv8m_base_none_eabi.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -8,7 +8,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n         target_env: String::new(),"}, {"sha": "acce424136db88076b5b71c8601a83f594b0fb46", "filename": "src/librustc_target/spec/thumbv8m_main_none_eabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Fthumbv8m_main_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Fthumbv8m_main_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv8m_main_none_eabi.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -9,7 +9,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n         target_env: String::new(),"}, {"sha": "455d56b095bfe7f96c5b208c41d9dc7d8038fe2b", "filename": "src/librustc_target/spec/thumbv8m_main_none_eabihf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Fthumbv8m_main_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Flibrustc_target%2Fspec%2Fthumbv8m_main_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumbv8m_main_none_eabihf.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -9,7 +9,7 @@ pub fn target() -> TargetResult {\n         target_endian: \"little\".to_string(),\n         target_pointer_width: \"32\".to_string(),\n         target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".to_string(),\n         arch: \"arm\".to_string(),\n         target_os: \"none\".to_string(),\n         target_env: String::new(),\n@@ -22,7 +22,7 @@ pub fn target() -> TargetResult {\n             // the FPU uses the FPv5 architecture, single-precision instructions\n             // and 16 D registers.\n             // These parameters map to the following LLVM features.\n-            features: \"+fp-armv8,+fp-only-sp,+d16\".to_string(),\n+            features: \"+fp-armv8,-fp64,-d32\".to_string(),\n             max_atomic_width: Some(32),\n             .. super::thumb_base::opts()\n         },"}, {"sha": "cea88f14dcc65045e44b4c57cffd6f50cb3a7bb8", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -913,7 +913,10 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n                               GlobalValue::LinkageTypes NewLinkage) {\n     ResolvedODR[ModuleIdentifier][GUID] = NewLinkage;\n   };\n-#if LLVM_VERSION_GE(8, 0)\n+#if LLVM_VERSION_GE(9, 0)\n+  thinLTOResolvePrevailingInIndex(Ret->Index, isPrevailing, recordNewLinkage,\n+                                  Ret->GUIDPreservedSymbols);\n+#elif LLVM_VERSION_GE(8, 0)\n   thinLTOResolvePrevailingInIndex(Ret->Index, isPrevailing, recordNewLinkage);\n #else\n   thinLTOResolveWeakForLinkerInIndex(Ret->Index, isPrevailing, recordNewLinkage);"}, {"sha": "16d08ee534edc413f6b1a9f88ba11e151b35f1de", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -237,6 +237,17 @@ extern \"C\" void LLVMRustAddDereferenceableOrNullCallSiteAttr(LLVMValueRef Instr,\n       Call->getContext(), Index, B));\n }\n \n+extern \"C\" void LLVMRustAddByValCallSiteAttr(LLVMValueRef Instr, unsigned Index,\n+                                             LLVMTypeRef Ty) {\n+  CallSite Call = CallSite(unwrap<Instruction>(Instr));\n+#if LLVM_VERSION_GE(9, 0)\n+  Attribute Attr = Attribute::getWithByValType(Call->getContext(), unwrap(Ty));\n+#else\n+  Attribute Attr = Attribute::get(Call->getContext(), Attribute::ByVal);\n+#endif\n+  Call.addAttribute(Index, Attr);\n+}\n+\n extern \"C\" void LLVMRustAddFunctionAttribute(LLVMValueRef Fn, unsigned Index,\n                                              LLVMRustAttribute RustAttr) {\n   Function *A = unwrap<Function>(Fn);\n@@ -271,6 +282,17 @@ extern \"C\" void LLVMRustAddDereferenceableOrNullAttr(LLVMValueRef Fn,\n   A->addAttributes(Index, B);\n }\n \n+extern \"C\" void LLVMRustAddByValAttr(LLVMValueRef Fn, unsigned Index,\n+                                     LLVMTypeRef Ty) {\n+  Function *F = unwrap<Function>(Fn);\n+#if LLVM_VERSION_GE(9, 0)\n+  Attribute Attr = Attribute::getWithByValType(F->getContext(), unwrap(Ty));\n+#else\n+  Attribute Attr = Attribute::get(F->getContext(), Attribute::ByVal);\n+#endif\n+  F->addAttribute(Index, Attr);\n+}\n+\n extern \"C\" void LLVMRustAddFunctionAttrStringValue(LLVMValueRef Fn,\n                                                    unsigned Index,\n                                                    const char *Name,"}, {"sha": "790db33437b08d3694f6a034d83f4ae3c9326b38", "filename": "src/test/codegen/mainsubprogram.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Ftest%2Fcodegen%2Fmainsubprogram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Ftest%2Fcodegen%2Fmainsubprogram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fmainsubprogram.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -7,7 +7,7 @@\n // compile-flags: -g -C no-prepopulate-passes\n \n // CHECK-LABEL: @main\n-// CHECK: {{.*}}DISubprogram{{.*}}name: \"main\",{{.*}}DIFlagMainSubprogram{{.*}}\n+// CHECK: {{.*}}DISubprogram{{.*}}name: \"main\",{{.*}}DI{{(SP)?}}FlagMainSubprogram{{.*}}\n \n pub fn main() {\n }"}, {"sha": "d4de9f59ac27aad2cb848b68e559f65da4833c8e", "filename": "src/test/codegen/mainsubprogramstart.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Ftest%2Fcodegen%2Fmainsubprogramstart.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc/src%2Ftest%2Fcodegen%2Fmainsubprogramstart.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fmainsubprogramstart.rs?ref=6c0a406b1c9e4c518586ac3cc2fe96c21840a5dc", "patch": "@@ -6,7 +6,7 @@\n #![feature(start)]\n \n // CHECK-LABEL: @main\n-// CHECK: {{.*}}DISubprogram{{.*}}name: \"start\",{{.*}}DIFlagMainSubprogram{{.*}}\n+// CHECK: {{.*}}DISubprogram{{.*}}name: \"start\",{{.*}}DI{{(SP)?}}FlagMainSubprogram{{.*}}\n \n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {"}]}