{"sha": "3acd1a4f92013945667f025167cfccdcf6cd73e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhY2QxYTRmOTIwMTM5NDU2NjdmMDI1MTY3Y2ZjY2RjZjZjZDczZTQ=", "commit": {"author": {"name": "Arlie Davis", "email": "ardavis@microsoft.com", "date": "2021-01-31T16:49:23Z"}, "committer": {"name": "Arlie Davis", "email": "ardavis@microsoft.com", "date": "2021-01-31T16:49:23Z"}, "message": "Fix calling convention for CRT startup\n\nMy PR #81478 used the wrong calling convention for a set of\nfunctions that are called by the CRT. These functions need to use\n`extern \"C\"`.\n\nThis would only affect x86, which is the only target (that I know of)\nthat has multiple calling conventions.", "tree": {"sha": "d28f5c00188904138306e469841f90dffa13aefa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d28f5c00188904138306e469841f90dffa13aefa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3acd1a4f92013945667f025167cfccdcf6cd73e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3acd1a4f92013945667f025167cfccdcf6cd73e4", "html_url": "https://github.com/rust-lang/rust/commit/3acd1a4f92013945667f025167cfccdcf6cd73e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3acd1a4f92013945667f025167cfccdcf6cd73e4/comments", "author": null, "committer": null, "parents": [{"sha": "0e63af5da3400ace48a0345117980473fd21ad73", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e63af5da3400ace48a0345117980473fd21ad73", "html_url": "https://github.com/rust-lang/rust/commit/0e63af5da3400ace48a0345117980473fd21ad73"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "cbd3366b189ed890a09e6647c5a0d3e5de0aef04", "filename": "library/std/src/sys/windows/compat.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3acd1a4f92013945667f025167cfccdcf6cd73e4/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3acd1a4f92013945667f025167cfccdcf6cd73e4/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs?ref=3acd1a4f92013945667f025167cfccdcf6cd73e4", "patch": "@@ -74,26 +74,24 @@ macro_rules! compat_fn {\n             /// used, and would remove it.\n             #[used]\n             #[link_section = \".CRT$XCU\"]\n-            static INIT_TABLE_ENTRY: fn() = init;\n+            static INIT_TABLE_ENTRY: unsafe extern \"C\" fn() = init;\n \n-            fn init() {\n+            unsafe extern \"C\" fn init() {\n                 // There is no locking here. This code is executed before main() is entered, and\n                 // is guaranteed to be single-threaded.\n                 //\n                 // DO NOT do anything interesting or complicated in this function! DO NOT call\n                 // any Rust functions or CRT functions, if those functions touch any global state,\n                 // because this function runs during global initialization. For example, DO NOT\n                 // do any dynamic allocation, don't call LoadLibrary, etc.\n-                unsafe {\n-                    let module_name: *const u8 = concat!($module, \"\\0\").as_ptr();\n-                    let symbol_name: *const u8 = concat!(stringify!($symbol), \"\\0\").as_ptr();\n-                    let module_handle = $crate::sys::c::GetModuleHandleA(module_name as *const i8);\n-                    if !module_handle.is_null() {\n-                        match $crate::sys::c::GetProcAddress(module_handle, symbol_name as *const i8) as usize {\n-                            0 => {}\n-                            n => {\n-                                PTR = Some(mem::transmute::<usize, F>(n));\n-                            }\n+                let module_name: *const u8 = concat!($module, \"\\0\").as_ptr();\n+                let symbol_name: *const u8 = concat!(stringify!($symbol), \"\\0\").as_ptr();\n+                let module_handle = $crate::sys::c::GetModuleHandleA(module_name as *const i8);\n+                if !module_handle.is_null() {\n+                    match $crate::sys::c::GetProcAddress(module_handle, symbol_name as *const i8) as usize {\n+                        0 => {}\n+                        n => {\n+                            PTR = Some(mem::transmute::<usize, F>(n));\n                         }\n                     }\n                 }"}]}