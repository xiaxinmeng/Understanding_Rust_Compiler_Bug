{"sha": "dedf6fcde48ccebe8b81654aa0e3ac1c78347a9b", "node_id": "C_kwDOAAsO6NoAKGRlZGY2ZmNkZTQ4Y2NlYmU4YjgxNjU0YWEwZTNhYzFjNzgzNDdhOWI", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-09-22T21:54:38Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-09-22T21:54:38Z"}, "message": "rustdoc: clean up CSS/DOM for deprecation warnings", "tree": {"sha": "c9ef5b8a3262196920bdb60b46d49a45887002d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9ef5b8a3262196920bdb60b46d49a45887002d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dedf6fcde48ccebe8b81654aa0e3ac1c78347a9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dedf6fcde48ccebe8b81654aa0e3ac1c78347a9b", "html_url": "https://github.com/rust-lang/rust/commit/dedf6fcde48ccebe8b81654aa0e3ac1c78347a9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dedf6fcde48ccebe8b81654aa0e3ac1c78347a9b/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ab71ab59fd17a1c51d23b68eced935b92431b70", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ab71ab59fd17a1c51d23b68eced935b92431b70", "html_url": "https://github.com/rust-lang/rust/commit/8ab71ab59fd17a1c51d23b68eced935b92431b70"}], "stats": {"total": 36, "additions": 12, "deletions": 24}, "files": [{"sha": "8e53fbbcd1975ce6fd6aa8fe66182326d2d8d6ac", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dedf6fcde48ccebe8b81654aa0e3ac1c78347a9b/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedf6fcde48ccebe8b81654aa0e3ac1c78347a9b/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=dedf6fcde48ccebe8b81654aa0e3ac1c78347a9b", "patch": "@@ -111,14 +111,9 @@ pub(crate) struct MarkdownWithToc<'a>(\n     pub(crate) Edition,\n     pub(crate) &'a Option<Playground>,\n );\n-/// A tuple struct like `Markdown` that renders the markdown escaping HTML tags.\n-pub(crate) struct MarkdownHtml<'a>(\n-    pub(crate) &'a str,\n-    pub(crate) &'a mut IdMap,\n-    pub(crate) ErrorCodes,\n-    pub(crate) Edition,\n-    pub(crate) &'a Option<Playground>,\n-);\n+/// A tuple struct like `Markdown` that renders the markdown escaping HTML tags\n+/// and includes no paragraph tags.\n+pub(crate) struct MarkdownItemInfo<'a>(pub(crate) &'a str, pub(crate) &'a mut IdMap);\n /// A tuple struct like `Markdown` that renders only the first paragraph.\n pub(crate) struct MarkdownSummaryLine<'a>(pub &'a str, pub &'a [RenderedLink]);\n \n@@ -1072,9 +1067,9 @@ impl MarkdownWithToc<'_> {\n     }\n }\n \n-impl MarkdownHtml<'_> {\n+impl MarkdownItemInfo<'_> {\n     pub(crate) fn into_string(self) -> String {\n-        let MarkdownHtml(md, ids, codes, edition, playground) = self;\n+        let MarkdownItemInfo(md, ids) = self;\n \n         // This is actually common enough to special-case\n         if md.is_empty() {\n@@ -1093,7 +1088,9 @@ impl MarkdownHtml<'_> {\n         let p = HeadingLinks::new(p, None, ids, HeadingOffset::H1);\n         let p = Footnotes::new(p);\n         let p = TableWrapper::new(p.map(|(ev, _)| ev));\n-        let p = CodeBlocks::new(p, codes, edition, playground);\n+        let p = p.filter(|event| {\n+            !matches!(event, Event::Start(Tag::Paragraph) | Event::End(Tag::Paragraph))\n+        });\n         html::push_html(&mut s, p);\n \n         s"}, {"sha": "ca4e65d70287c02aa25c941c803f396fd62de4d5", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dedf6fcde48ccebe8b81654aa0e3ac1c78347a9b/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedf6fcde48ccebe8b81654aa0e3ac1c78347a9b/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=dedf6fcde48ccebe8b81654aa0e3ac1c78347a9b", "patch": "@@ -74,7 +74,9 @@ use crate::html::format::{\n     PrintWithSpace,\n };\n use crate::html::highlight;\n-use crate::html::markdown::{HeadingOffset, IdMap, Markdown, MarkdownHtml, MarkdownSummaryLine};\n+use crate::html::markdown::{\n+    HeadingOffset, IdMap, Markdown, MarkdownItemInfo, MarkdownSummaryLine,\n+};\n use crate::html::sources;\n use crate::html::static_files::SCRAPE_EXAMPLES_HELP_MD;\n use crate::scrape_examples::{CallData, CallLocation};\n@@ -582,7 +584,6 @@ fn short_item_info(\n     parent: Option<&clean::Item>,\n ) -> Vec<String> {\n     let mut extra_info = vec![];\n-    let error_codes = cx.shared.codes;\n \n     if let Some(depr @ Deprecation { note, since, is_since_rustc_version: _, suggestion: _ }) =\n         item.deprecation(cx.tcx())\n@@ -606,13 +607,7 @@ fn short_item_info(\n \n         if let Some(note) = note {\n             let note = note.as_str();\n-            let html = MarkdownHtml(\n-                note,\n-                &mut cx.id_map,\n-                error_codes,\n-                cx.shared.edition(),\n-                &cx.shared.playground,\n-            );\n+            let html = MarkdownItemInfo(note, &mut cx.id_map);\n             message.push_str(&format!(\": {}\", html.into_string()));\n         }\n         extra_info.push(format!("}, {"sha": "3ce9407cb2ddad248b128a39c5225318ae5a767d", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dedf6fcde48ccebe8b81654aa0e3ac1c78347a9b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/dedf6fcde48ccebe8b81654aa0e3ac1c78347a9b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=dedf6fcde48ccebe8b81654aa0e3ac1c78347a9b", "patch": "@@ -1078,10 +1078,6 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \tfont-size: 0.875rem;\n \tfont-weight: normal;\n }\n-.stab p {\n-\tdisplay: inline;\n-\tmargin: 0;\n-}\n \n .stab .emoji {\n \tfont-size: 1.25rem;"}]}