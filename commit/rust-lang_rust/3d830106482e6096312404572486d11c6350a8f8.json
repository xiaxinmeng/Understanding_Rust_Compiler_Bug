{"sha": "3d830106482e6096312404572486d11c6350a8f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkODMwMTA2NDgyZTYwOTYzMTI0MDQ1NzI0ODZkMTFjNjM1MGE4Zjg=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-08-08T12:23:25Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-08-15T02:06:17Z"}, "message": "Switch to new <V:Visitor> visitor (rather than @Visitor).\n\nAlpha-renamed top-level visit_* functions to walk_*.\n(Motivation: Distinguish visit action and recursive traversal.)\n\nAbstract over `&mut self` rather than over `@mut self`.\n\nThis required some acrobatics, notably the\n\n  `impl<E> Visitor<E> for @mut Visitor<E>`\n\nand corresponding introduction of `@mut Visitor` and some local `let\nmut` bindings.\n\nRemove oldvisit reference.\n\nAdded default implementations for all of the Visitor trait methods.\n\nNote that both `visit_expr_post` and `visit_ty` are no-op's by\ndefault, just like they are in `oldvisit::default_visitor`.\n\nRefactoring: extract logic to ease swapping visit for oldvisit (hopefully).", "tree": {"sha": "c0b220fe84ddfba9ee5d38adfd81027a7378f97c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0b220fe84ddfba9ee5d38adfd81027a7378f97c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d830106482e6096312404572486d11c6350a8f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d830106482e6096312404572486d11c6350a8f8", "html_url": "https://github.com/rust-lang/rust/commit/3d830106482e6096312404572486d11c6350a8f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d830106482e6096312404572486d11c6350a8f8/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b9250052c018d073da85b2cb05693fec2efec22", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b9250052c018d073da85b2cb05693fec2efec22", "html_url": "https://github.com/rust-lang/rust/commit/9b9250052c018d073da85b2cb05693fec2efec22"}], "stats": {"total": 667, "additions": 370, "deletions": 297}, "files": [{"sha": "55425b647953098d70b2492bd60d3bc90dde8ba1", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3d830106482e6096312404572486d11c6350a8f8/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d830106482e6096312404572486d11c6350a8f8/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=3d830106482e6096312404572486d11c6350a8f8", "patch": "@@ -480,6 +480,7 @@ impl Context {\n                             (orig.visit_item)(it, (self, stopping));\n                         }\n                         NewVisitor(new_visitor) => {\n+                            let mut new_visitor = new_visitor;\n                             new_visitor.visit_item(it, ());\n                         }\n                     }\n@@ -492,7 +493,8 @@ impl Context {\n                             oldvisit::visit_crate(c, (self, stopping))\n                         }\n                         NewVisitor(new_visitor) => {\n-                            visit::visit_crate(new_visitor, c, ())\n+                            let mut new_visitor = new_visitor;\n+                            visit::walk_crate(&mut new_visitor, c, ())\n                         }\n                     }\n                 }\n@@ -518,6 +520,7 @@ impl Context {\n                             let fk = visit::fk_method(m.ident,\n                                                       &m.generics,\n                                                       m);\n+                            let mut new_visitor = new_visitor;\n                             new_visitor.visit_fn(&fk,\n                                                  &m.decl,\n                                                  &m.body,"}, {"sha": "6c3fb82965d1c162976ce91f15dcd1743b96babd", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 52, "deletions": 51, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/3d830106482e6096312404572486d11c6350a8f8/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d830106482e6096312404572486d11c6350a8f8/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=3d830106482e6096312404572486d11c6350a8f8", "patch": "@@ -89,11 +89,11 @@ pub struct Ctx {\n }\n \n impl Ctx {\n-    fn extend(@mut self, elt: ident) -> @path {\n+    fn extend(&self, elt: ident) -> @path {\n         @vec::append(self.path.clone(), [path_name(elt)])\n     }\n \n-    fn map_method(@mut self,\n+    fn map_method(&mut self,\n                   impl_did: def_id,\n                   impl_path: @path,\n                   m: @method,\n@@ -107,7 +107,7 @@ impl Ctx {\n         self.map.insert(m.self_id, node_local(special_idents::self_));\n     }\n \n-    fn map_struct_def(@mut self,\n+    fn map_struct_def(&mut self,\n                       struct_def: @ast::struct_def,\n                       parent_node: ast_node,\n                       ident: ast::ident) {\n@@ -130,7 +130,7 @@ impl Ctx {\n         }\n     }\n \n-    fn map_expr(@mut self, ex: @expr) {\n+    fn map_expr(&mut self, ex: @expr) {\n         self.map.insert(ex.id, node_expr(ex));\n \n         // Expressions which are or might be calls:\n@@ -141,10 +141,10 @@ impl Ctx {\n             }\n         }\n \n-        visit::visit_expr(self as @mut Visitor<()>, ex, ());\n+        visit::walk_expr(self, ex, ());\n     }\n \n-    fn map_fn(@mut self,\n+    fn map_fn(&mut self,\n               fk: &visit::fn_kind,\n               decl: &fn_decl,\n               body: &Block,\n@@ -153,21 +153,21 @@ impl Ctx {\n         for a in decl.inputs.iter() {\n             self.map.insert(a.id, node_arg);\n         }\n-        visit::visit_fn(self as @mut Visitor<()>, fk, decl, body, sp, id, ());\n+        visit::walk_fn(self, fk, decl, body, sp, id, ());\n     }\n \n-    fn map_stmt(@mut self, stmt: @stmt) {\n+    fn map_stmt(&mut self, stmt: @stmt) {\n         self.map.insert(stmt_id(stmt), node_stmt(stmt));\n-        visit::visit_stmt(self as @mut Visitor<()>, stmt, ());\n+        visit::walk_stmt(self, stmt, ());\n     }\n \n-    fn map_block(@mut self, b: &Block) {\n+    fn map_block(&mut self, b: &Block) {\n         // clone is FIXME #2543\n         self.map.insert(b.id, node_block((*b).clone()));\n-        visit::visit_block(self as @mut Visitor<()>, b, ());\n+        visit::walk_block(self, b, ());\n     }\n \n-    fn map_pat(@mut self, pat: @pat) {\n+    fn map_pat(&mut self, pat: @pat) {\n         match pat.node {\n             pat_ident(_, ref path, _) => {\n                 // Note: this is at least *potentially* a pattern...\n@@ -177,20 +177,21 @@ impl Ctx {\n             _ => ()\n         }\n \n-        visit::visit_pat(self as @mut Visitor<()>, pat, ());\n+        visit::walk_pat(self, pat, ());\n     }\n }\n \n impl Visitor<()> for Ctx {\n-    fn visit_item(@mut self, i: @item, _: ()) {\n+    fn visit_item(&mut self, i: @item, _: ()) {\n         // clone is FIXME #2543\n         let item_path = @self.path.clone();\n         self.map.insert(i.id, node_item(i, item_path));\n         match i.node {\n             item_impl(_, _, _, ref ms) => {\n                 let impl_did = ast_util::local_def(i.id);\n                 for m in ms.iter() {\n-                    self.map_method(impl_did, self.extend(i.ident), *m, false)\n+                    let extended = { self.extend(i.ident) };\n+                    self.map_method(impl_did, extended, *m, false)\n                 }\n             }\n             item_enum(ref enum_definition, _) => {\n@@ -254,24 +255,24 @@ impl Visitor<()> for Ctx {\n             }\n             _ => self.path.push(path_name(i.ident))\n         }\n-        visit::visit_item(self as @mut Visitor<()>, i, ());\n+        visit::walk_item(self, i, ());\n         self.path.pop();\n     }\n \n-    fn visit_pat(@mut self, pat: @pat, _: ()) {\n+    fn visit_pat(&mut self, pat: @pat, _: ()) {\n         self.map_pat(pat);\n-        visit::visit_pat(self as @mut Visitor<()>, pat, ())\n+        visit::walk_pat(self, pat, ())\n     }\n \n-    fn visit_expr(@mut self, expr: @expr, _: ()) {\n+    fn visit_expr(&mut self, expr: @expr, _: ()) {\n         self.map_expr(expr)\n     }\n \n-    fn visit_stmt(@mut self, stmt: @stmt, _: ()) {\n+    fn visit_stmt(&mut self, stmt: @stmt, _: ()) {\n         self.map_stmt(stmt)\n     }\n \n-    fn visit_fn(@mut self,\n+    fn visit_fn(&mut self,\n                 function_kind: &fn_kind,\n                 function_declaration: &fn_decl,\n                 block: &Block,\n@@ -281,56 +282,56 @@ impl Visitor<()> for Ctx {\n         self.map_fn(function_kind, function_declaration, block, span, node_id)\n     }\n \n-    fn visit_block(@mut self, block: &Block, _: ()) {\n+    fn visit_block(&mut self, block: &Block, _: ()) {\n         self.map_block(block)\n     }\n \n     // XXX: Methods below can become default methods.\n \n-    fn visit_mod(@mut self, module: &_mod, _: span, _: NodeId, _: ()) {\n-        visit::visit_mod(self as @mut Visitor<()>, module, ())\n+    fn visit_mod(&mut self, module: &_mod, _: span, _: NodeId, _: ()) {\n+        visit::walk_mod(self, module, ())\n     }\n \n-    fn visit_view_item(@mut self, view_item: &view_item, _: ()) {\n-        visit::visit_view_item(self as @mut Visitor<()>, view_item, ())\n+    fn visit_view_item(&mut self, view_item: &view_item, _: ()) {\n+        visit::walk_view_item(self, view_item, ())\n     }\n \n-    fn visit_foreign_item(@mut self, foreign_item: @foreign_item, _: ()) {\n-        visit::visit_foreign_item(self as @mut Visitor<()>, foreign_item, ())\n+    fn visit_foreign_item(&mut self, foreign_item: @foreign_item, _: ()) {\n+        visit::walk_foreign_item(self, foreign_item, ())\n     }\n \n-    fn visit_local(@mut self, local: @Local, _: ()) {\n-        visit::visit_local(self as @mut Visitor<()>, local, ())\n+    fn visit_local(&mut self, local: @Local, _: ()) {\n+        visit::walk_local(self, local, ())\n     }\n \n-    fn visit_arm(@mut self, arm: &arm, _: ()) {\n-        visit::visit_arm(self as @mut Visitor<()>, arm, ())\n+    fn visit_arm(&mut self, arm: &arm, _: ()) {\n+        visit::walk_arm(self, arm, ())\n     }\n \n-    fn visit_decl(@mut self, decl: @decl, _: ()) {\n-        visit::visit_decl(self as @mut Visitor<()>, decl, ())\n+    fn visit_decl(&mut self, decl: @decl, _: ()) {\n+        visit::walk_decl(self, decl, ())\n     }\n \n-    fn visit_expr_post(@mut self, _: @expr, _: ()) {\n+    fn visit_expr_post(&mut self, _: @expr, _: ()) {\n         // Empty!\n     }\n \n-    fn visit_ty(@mut self, typ: &Ty, _: ()) {\n-        visit::visit_ty(self as @mut Visitor<()>, typ, ())\n+    fn visit_ty(&mut self, typ: &Ty, _: ()) {\n+        visit::walk_ty(self, typ, ())\n     }\n \n-    fn visit_generics(@mut self, generics: &Generics, _: ()) {\n-        visit::visit_generics(self as @mut Visitor<()>, generics, ())\n+    fn visit_generics(&mut self, generics: &Generics, _: ()) {\n+        visit::walk_generics(self, generics, ())\n     }\n \n-    fn visit_fn(@mut self,\n+    fn visit_fn(&mut self,\n                 function_kind: &fn_kind,\n                 function_declaration: &fn_decl,\n                 block: &Block,\n                 span: span,\n                 node_id: NodeId,\n                 _: ()) {\n-        visit::visit_fn(self as @mut Visitor<()>,\n+        visit::walk_fn(self,\n                         function_kind,\n                         function_declaration,\n                         block,\n@@ -339,30 +340,30 @@ impl Visitor<()> for Ctx {\n                         ())\n     }\n \n-    fn visit_ty_method(@mut self, ty_method: &TypeMethod, _: ()) {\n-        visit::visit_ty_method(self as @mut Visitor<()>, ty_method, ())\n+    fn visit_ty_method(&mut self, ty_method: &TypeMethod, _: ()) {\n+        visit::walk_ty_method(self, ty_method, ())\n     }\n \n-    fn visit_trait_method(@mut self, trait_method: &trait_method, _: ()) {\n-        visit::visit_trait_method(self as @mut Visitor<()>, trait_method, ())\n+    fn visit_trait_method(&mut self, trait_method: &trait_method, _: ()) {\n+        visit::walk_trait_method(self, trait_method, ())\n     }\n \n-    fn visit_struct_def(@mut self,\n+    fn visit_struct_def(&mut self,\n                         struct_def: @struct_def,\n                         ident: ident,\n                         generics: &Generics,\n                         node_id: NodeId,\n                         _: ()) {\n-        visit::visit_struct_def(self as @mut Visitor<()>,\n+        visit::walk_struct_def(self,\n                                 struct_def,\n                                 ident,\n                                 generics,\n                                 node_id,\n                                 ())\n     }\n \n-    fn visit_struct_field(@mut self, struct_field: @struct_field, _: ()) {\n-        visit::visit_struct_field(self as @mut Visitor<()>, struct_field, ())\n+    fn visit_struct_field(&mut self, struct_field: @struct_field, _: ()) {\n+        visit::walk_struct_field(self, struct_field, ())\n     }\n }\n \n@@ -372,7 +373,7 @@ pub fn map_crate(diag: @mut span_handler, c: &Crate) -> map {\n         path: ~[],\n         diag: diag,\n     };\n-    visit::visit_crate(cx as @mut Visitor<()>, c, ());\n+    visit::walk_crate(cx, c, ());\n     cx.map\n }\n \n@@ -409,7 +410,7 @@ pub fn map_decoded_item(diag: @mut span_handler,\n     }\n \n     // visit the item / method contents and add those to the map:\n-    ii.accept((), cx as @mut Visitor<()>);\n+    ii.accept((), cx);\n }\n \n pub fn node_id_to_str(map: map, id: NodeId, itr: @ident_interner) -> ~str {"}, {"sha": "cfbe61ca65e682726add25c8286f1b00c468e2ff", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 77, "deletions": 72, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/3d830106482e6096312404572486d11c6350a8f8/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d830106482e6096312404572486d11c6350a8f8/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=3d830106482e6096312404572486d11c6350a8f8", "patch": "@@ -298,7 +298,7 @@ pub fn struct_field_visibility(field: ast::struct_field) -> visibility {\n pub trait inlined_item_utils {\n     fn ident(&self) -> ident;\n     fn id(&self) -> ast::NodeId;\n-    fn accept<E: Clone>(&self, e: E, v: @mut Visitor<E>);\n+    fn accept<E: Clone, V:Visitor<E>>(&self, e: E, v: &mut V);\n }\n \n impl inlined_item_utils for inlined_item {\n@@ -318,11 +318,11 @@ impl inlined_item_utils for inlined_item {\n         }\n     }\n \n-    fn accept<E: Clone>(&self, e: E, v: @mut Visitor<E>) {\n+    fn accept<E: Clone, V:Visitor<E>>(&self, e: E, v: &mut V) {\n         match *self {\n             ii_item(i) => v.visit_item(i, e),\n             ii_foreign(i) => v.visit_foreign_item(i, e),\n-            ii_method(_, _, m) => visit::visit_method_helper(v, m, e),\n+            ii_method(_, _, m) => visit::walk_method_helper(v, m, e),\n         }\n     }\n }\n@@ -390,14 +390,24 @@ impl id_range {\n     }\n }\n \n-struct IdVisitor {\n+pub fn id_visitor(vfn: @fn(NodeId), pass_through_items: bool)\n+                  -> @mut Visitor<()> {\n+    let visitor = @mut IdVisitor {\n+        visit_callback: vfn,\n+        pass_through_items: pass_through_items,\n+        visited_outermost: false,\n+    };\n+    visitor as @mut Visitor<()>\n+}\n+\n+pub struct IdVisitor {\n     visit_callback: @fn(NodeId),\n     pass_through_items: bool,\n     visited_outermost: bool,\n }\n \n impl IdVisitor {\n-    fn visit_generics_helper(@mut self, generics: &Generics) {\n+    fn visit_generics_helper(&self, generics: &Generics) {\n         for type_parameter in generics.ty_params.iter() {\n             (self.visit_callback)(type_parameter.id)\n         }\n@@ -408,16 +418,16 @@ impl IdVisitor {\n }\n \n impl Visitor<()> for IdVisitor {\n-    fn visit_mod(@mut self,\n+    fn visit_mod(&mut self,\n                  module: &_mod,\n                  _span: span,\n                  node_id: NodeId,\n                  env: ()) {\n         (self.visit_callback)(node_id);\n-        visit::visit_mod(self as @mut Visitor<()>, module, env)\n+        visit::walk_mod(self, module, env)\n     }\n \n-    fn visit_view_item(@mut self, view_item: &view_item, env: ()) {\n+    fn visit_view_item(&mut self, view_item: &view_item, env: ()) {\n         match view_item.node {\n             view_item_extern_mod(_, _, _, node_id) => {\n                 (self.visit_callback)(node_id)\n@@ -439,15 +449,15 @@ impl Visitor<()> for IdVisitor {\n                 }\n             }\n         }\n-        visit::visit_view_item(self as @mut Visitor<()>, view_item, env)\n+        visit::walk_view_item(self, view_item, env)\n     }\n \n-    fn visit_foreign_item(@mut self, foreign_item: @foreign_item, env: ()) {\n+    fn visit_foreign_item(&mut self, foreign_item: @foreign_item, env: ()) {\n         (self.visit_callback)(foreign_item.id);\n-        visit::visit_foreign_item(self as @mut Visitor<()>, foreign_item, env)\n+        visit::walk_foreign_item(self, foreign_item, env)\n     }\n \n-    fn visit_item(@mut self, item: @item, env: ()) {\n+    fn visit_item(&mut self, item: @item, env: ()) {\n         if !self.pass_through_items {\n             if self.visited_outermost {\n                 return\n@@ -466,72 +476,72 @@ impl Visitor<()> for IdVisitor {\n             _ => {}\n         }\n \n-        visit::visit_item(self as @mut Visitor<()>, item, env);\n+        visit::walk_item(self, item, env);\n \n         self.visited_outermost = false\n     }\n \n-    fn visit_local(@mut self, local: @Local, env: ()) {\n+    fn visit_local(&mut self, local: @Local, env: ()) {\n         (self.visit_callback)(local.id);\n-        visit::visit_local(self as @mut Visitor<()>, local, env)\n+        visit::walk_local(self, local, env)\n     }\n \n-    fn visit_block(@mut self, block: &Block, env: ()) {\n+    fn visit_block(&mut self, block: &Block, env: ()) {\n         (self.visit_callback)(block.id);\n-        visit::visit_block(self as @mut Visitor<()>, block, env)\n+        visit::walk_block(self, block, env)\n     }\n \n-    fn visit_stmt(@mut self, statement: @stmt, env: ()) {\n+    fn visit_stmt(&mut self, statement: @stmt, env: ()) {\n         (self.visit_callback)(ast_util::stmt_id(statement));\n-        visit::visit_stmt(self as @mut Visitor<()>, statement, env)\n+        visit::walk_stmt(self, statement, env)\n     }\n \n     // XXX: Default\n-    fn visit_arm(@mut self, arm: &arm, env: ()) {\n-        visit::visit_arm(self as @mut Visitor<()>, arm, env)\n+    fn visit_arm(&mut self, arm: &arm, env: ()) {\n+        visit::walk_arm(self, arm, env)\n     }\n \n-    fn visit_pat(@mut self, pattern: @pat, env: ()) {\n+    fn visit_pat(&mut self, pattern: @pat, env: ()) {\n         (self.visit_callback)(pattern.id);\n-        visit::visit_pat(self as @mut Visitor<()>, pattern, env)\n+        visit::walk_pat(self, pattern, env)\n     }\n \n     // XXX: Default\n-    fn visit_decl(@mut self, declaration: @decl, env: ()) {\n-        visit::visit_decl(self as @mut Visitor<()>, declaration, env)\n+    fn visit_decl(&mut self, declaration: @decl, env: ()) {\n+        visit::walk_decl(self, declaration, env)\n     }\n \n-    fn visit_expr(@mut self, expression: @expr, env: ()) {\n+    fn visit_expr(&mut self, expression: @expr, env: ()) {\n         {\n             let optional_callee_id = expression.get_callee_id();\n             for callee_id in optional_callee_id.iter() {\n                 (self.visit_callback)(*callee_id)\n             }\n         }\n         (self.visit_callback)(expression.id);\n-        visit::visit_expr(self as @mut Visitor<()>, expression, env)\n+        visit::walk_expr(self, expression, env)\n     }\n \n     // XXX: Default\n-    fn visit_expr_post(@mut self, _: @expr, _: ()) {\n+    fn visit_expr_post(&mut self, _: @expr, _: ()) {\n         // Empty!\n     }\n \n-    fn visit_ty(@mut self, typ: &Ty, env: ()) {\n+    fn visit_ty(&mut self, typ: &Ty, env: ()) {\n         (self.visit_callback)(typ.id);\n         match typ.node {\n             ty_path(_, _, id) => (self.visit_callback)(id),\n             _ => {}\n         }\n-        visit::visit_ty(self as @mut Visitor<()>, typ, env)\n+        visit::walk_ty(self, typ, env)\n     }\n \n-    fn visit_generics(@mut self, generics: &Generics, env: ()) {\n+    fn visit_generics(&mut self, generics: &Generics, env: ()) {\n         self.visit_generics_helper(generics);\n-        visit::visit_generics(self as @mut Visitor<()>, generics, env)\n+        visit::walk_generics(self, generics, env)\n     }\n \n-    fn visit_fn(@mut self,\n+    fn visit_fn(&mut self,\n                 function_kind: &visit::fn_kind,\n                 function_declaration: &fn_decl,\n                 block: &Block,\n@@ -563,7 +573,7 @@ impl Visitor<()> for IdVisitor {\n             (self.visit_callback)(argument.id)\n         }\n \n-        visit::visit_fn(self as @mut Visitor<()>,\n+        visit::walk_fn(self,\n                         function_kind,\n                         function_declaration,\n                         block,\n@@ -580,48 +590,43 @@ impl Visitor<()> for IdVisitor {\n     }\n \n     // XXX: Default\n-    fn visit_ty_method(@mut self, type_method: &TypeMethod, env: ()) {\n-        visit::visit_ty_method(self as @mut Visitor<()>, type_method, env)\n+    fn visit_ty_method(&mut self, type_method: &TypeMethod, env: ()) {\n+        visit::walk_ty_method(self, type_method, env)\n     }\n \n     // XXX: Default\n-    fn visit_trait_method(@mut self, trait_method: &trait_method, env: ()) {\n-        visit::visit_trait_method(self as @mut Visitor<()>, trait_method, env)\n+    fn visit_trait_method(&mut self, trait_method: &trait_method, env: ()) {\n+        visit::walk_trait_method(self, trait_method, env)\n     }\n \n     // XXX: Default\n-    fn visit_struct_def(@mut self,\n+    fn visit_struct_def(&mut self,\n                         struct_definition: @struct_def,\n                         identifier: ident,\n                         generics: &Generics,\n                         node_id: NodeId,\n                         env: ()) {\n-        visit::visit_struct_def(self as @mut Visitor<()>,\n+        visit::walk_struct_def(self,\n                                 struct_definition,\n                                 identifier,\n                                 generics,\n                                 node_id,\n                                 env)\n     }\n \n-    fn visit_struct_field(@mut self, struct_field: @struct_field, env: ()) {\n+    fn visit_struct_field(&mut self, struct_field: @struct_field, env: ()) {\n         (self.visit_callback)(struct_field.node.id);\n-        visit::visit_struct_field(self as @mut Visitor<()>, struct_field, env)\n+        visit::walk_struct_field(self, struct_field, env)\n     }\n }\n \n-pub fn id_visitor(vfn: @fn(NodeId), pass_through_items: bool)\n-                  -> @mut Visitor<()> {\n-    let visitor = @mut IdVisitor {\n+pub fn visit_ids_for_inlined_item(item: &inlined_item, vfn: @fn(NodeId)) {\n+    let mut id_visitor = IdVisitor {\n         visit_callback: vfn,\n-        pass_through_items: pass_through_items,\n+        pass_through_items: true,\n         visited_outermost: false,\n     };\n-    visitor as @mut Visitor<()>\n-}\n-\n-pub fn visit_ids_for_inlined_item(item: &inlined_item, vfn: @fn(NodeId)) {\n-    item.accept((), id_visitor(|id| vfn(id), true));\n+    item.accept((), &mut id_visitor);\n }\n \n pub fn compute_id_range(visit_ids_fn: &fn(@fn(NodeId))) -> id_range {\n@@ -680,73 +685,73 @@ struct EachViewItemData {\n }\n \n impl SimpleVisitor for EachViewItemData {\n-    fn visit_mod(@mut self, _: &_mod, _: span, _: NodeId) {\n+    fn visit_mod(&mut self, _: &_mod, _: span, _: NodeId) {\n         // XXX: Default method.\n     }\n-    fn visit_view_item(@mut self, view_item: &view_item) {\n+    fn visit_view_item(&mut self, view_item: &view_item) {\n         let _ = (self.callback)(view_item);\n     }\n-    fn visit_foreign_item(@mut self, _: @foreign_item) {\n+    fn visit_foreign_item(&mut self, _: @foreign_item) {\n         // XXX: Default method.\n     }\n-    fn visit_item(@mut self, _: @item) {\n+    fn visit_item(&mut self, _: @item) {\n         // XXX: Default method.\n     }\n-    fn visit_local(@mut self, _: @Local) {\n+    fn visit_local(&mut self, _: @Local) {\n         // XXX: Default method.\n     }\n-    fn visit_block(@mut self, _: &Block) {\n+    fn visit_block(&mut self, _: &Block) {\n         // XXX: Default method.\n     }\n-    fn visit_stmt(@mut self, _: @stmt) {\n+    fn visit_stmt(&mut self, _: @stmt) {\n         // XXX: Default method.\n     }\n-    fn visit_arm(@mut self, _: &arm) {\n+    fn visit_arm(&mut self, _: &arm) {\n         // XXX: Default method.\n     }\n-    fn visit_pat(@mut self, _: @pat) {\n+    fn visit_pat(&mut self, _: @pat) {\n         // XXX: Default method.\n     }\n-    fn visit_decl(@mut self, _: @decl) {\n+    fn visit_decl(&mut self, _: @decl) {\n         // XXX: Default method.\n     }\n-    fn visit_expr(@mut self, _: @expr) {\n+    fn visit_expr(&mut self, _: @expr) {\n         // XXX: Default method.\n     }\n-    fn visit_expr_post(@mut self, _: @expr) {\n+    fn visit_expr_post(&mut self, _: @expr) {\n         // XXX: Default method.\n     }\n-    fn visit_ty(@mut self, _: &Ty) {\n+    fn visit_ty(&mut self, _: &Ty) {\n         // XXX: Default method.\n     }\n-    fn visit_generics(@mut self, _: &Generics) {\n+    fn visit_generics(&mut self, _: &Generics) {\n         // XXX: Default method.\n     }\n-    fn visit_fn(@mut self,\n+    fn visit_fn(&mut self,\n                 _: &visit::fn_kind,\n                 _: &fn_decl,\n                 _: &Block,\n                 _: span,\n                 _: NodeId) {\n         // XXX: Default method.\n     }\n-    fn visit_ty_method(@mut self, _: &TypeMethod) {\n+    fn visit_ty_method(&mut self, _: &TypeMethod) {\n         // XXX: Default method.\n     }\n-    fn visit_trait_method(@mut self, _: &trait_method) {\n+    fn visit_trait_method(&mut self, _: &trait_method) {\n         // XXX: Default method.\n     }\n-    fn visit_struct_def(@mut self,\n+    fn visit_struct_def(&mut self,\n                         _: @struct_def,\n                         _: ident,\n                         _: &Generics,\n                         _: NodeId) {\n         // XXX: Default method.\n     }\n-    fn visit_struct_field(@mut self, _: @struct_field) {\n+    fn visit_struct_field(&mut self, _: @struct_field) {\n         // XXX: Default method.\n     }\n-    fn visit_struct_method(@mut self, _: @method) {\n+    fn visit_struct_method(&mut self, _: @method) {\n         // XXX: Default method.\n     }\n }\n@@ -759,7 +764,7 @@ impl EachViewItem for ast::Crate {\n         let visitor = @mut SimpleVisitorVisitor {\n             simple_visitor: data as @mut SimpleVisitor,\n         };\n-        visit::visit_crate(visitor as @mut Visitor<()>, self, ());\n+        visit::walk_crate(visitor, self, ());\n         true\n     }\n }"}, {"sha": "c188326a4f1b016641d6824734a6e269996d9731", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/3d830106482e6096312404572486d11c6350a8f8/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d830106482e6096312404572486d11c6350a8f8/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=3d830106482e6096312404572486d11c6350a8f8", "patch": "@@ -522,7 +522,7 @@ struct NewNameFinderContext {\n }\n \n impl Visitor<()> for NewNameFinderContext {\n-    fn visit_pat(@mut self, pattern: @ast::pat, _: ()) {\n+    fn visit_pat(&mut self, pattern: @ast::pat, _: ()) {\n         match *pattern {\n             // we found a pat_ident!\n             ast::pat {\n@@ -548,74 +548,74 @@ impl Visitor<()> for NewNameFinderContext {\n                 }\n             }\n             // use the default traversal for non-pat_idents\n-            _ => visit::visit_pat(self as @mut Visitor<()>, pattern, ())\n+            _ => visit::walk_pat(self, pattern, ())\n         }\n     }\n \n     // XXX: Methods below can become default methods.\n \n-    fn visit_mod(@mut self, module: &ast::_mod, _: span, _: NodeId, _: ()) {\n-        visit::visit_mod(self as @mut Visitor<()>, module, ())\n+    fn visit_mod(&mut self, module: &ast::_mod, _: span, _: NodeId, _: ()) {\n+        visit::walk_mod(self, module, ())\n     }\n \n-    fn visit_view_item(@mut self, view_item: &ast::view_item, _: ()) {\n-        visit::visit_view_item(self as @mut Visitor<()>, view_item, ())\n+    fn visit_view_item(&mut self, view_item: &ast::view_item, _: ()) {\n+        visit::walk_view_item(self, view_item, ())\n     }\n \n-    fn visit_item(@mut self, item: @ast::item, _: ()) {\n-        visit::visit_item(self as @mut Visitor<()>, item, ())\n+    fn visit_item(&mut self, item: @ast::item, _: ()) {\n+        visit::walk_item(self, item, ())\n     }\n \n-    fn visit_foreign_item(@mut self,\n+    fn visit_foreign_item(&mut self,\n                           foreign_item: @ast::foreign_item,\n                           _: ()) {\n-        visit::visit_foreign_item(self as @mut Visitor<()>, foreign_item, ())\n+        visit::walk_foreign_item(self, foreign_item, ())\n     }\n \n-    fn visit_local(@mut self, local: @ast::Local, _: ()) {\n-        visit::visit_local(self as @mut Visitor<()>, local, ())\n+    fn visit_local(&mut self, local: @ast::Local, _: ()) {\n+        visit::walk_local(self, local, ())\n     }\n \n-    fn visit_block(@mut self, block: &ast::Block, _: ()) {\n-        visit::visit_block(self as @mut Visitor<()>, block, ())\n+    fn visit_block(&mut self, block: &ast::Block, _: ()) {\n+        visit::walk_block(self, block, ())\n     }\n \n-    fn visit_stmt(@mut self, stmt: @ast::stmt, _: ()) {\n-        visit::visit_stmt(self as @mut Visitor<()>, stmt, ())\n+    fn visit_stmt(&mut self, stmt: @ast::stmt, _: ()) {\n+        visit::walk_stmt(self, stmt, ())\n     }\n \n-    fn visit_arm(@mut self, arm: &ast::arm, _: ()) {\n-        visit::visit_arm(self as @mut Visitor<()>, arm, ())\n+    fn visit_arm(&mut self, arm: &ast::arm, _: ()) {\n+        visit::walk_arm(self, arm, ())\n     }\n \n-    fn visit_decl(@mut self, decl: @ast::decl, _: ()) {\n-        visit::visit_decl(self as @mut Visitor<()>, decl, ())\n+    fn visit_decl(&mut self, decl: @ast::decl, _: ()) {\n+        visit::walk_decl(self, decl, ())\n     }\n \n-    fn visit_expr(@mut self, expr: @ast::expr, _: ()) {\n-        visit::visit_expr(self as @mut Visitor<()>, expr, ())\n+    fn visit_expr(&mut self, expr: @ast::expr, _: ()) {\n+        visit::walk_expr(self, expr, ())\n     }\n \n-    fn visit_expr_post(@mut self, _: @ast::expr, _: ()) {\n+    fn visit_expr_post(&mut self, _: @ast::expr, _: ()) {\n         // Empty!\n     }\n \n-    fn visit_ty(@mut self, typ: &ast::Ty, _: ()) {\n-        visit::visit_ty(self as @mut Visitor<()>, typ, ())\n+    fn visit_ty(&mut self, typ: &ast::Ty, _: ()) {\n+        visit::walk_ty(self, typ, ())\n     }\n \n-    fn visit_generics(@mut self, generics: &ast::Generics, _: ()) {\n-        visit::visit_generics(self as @mut Visitor<()>, generics, ())\n+    fn visit_generics(&mut self, generics: &ast::Generics, _: ()) {\n+        visit::walk_generics(self, generics, ())\n     }\n \n-    fn visit_fn(@mut self,\n+    fn visit_fn(&mut self,\n                 function_kind: &visit::fn_kind,\n                 function_declaration: &ast::fn_decl,\n                 block: &ast::Block,\n                 span: span,\n                 node_id: NodeId,\n                 _: ()) {\n-        visit::visit_fn(self as @mut Visitor<()>,\n+        visit::walk_fn(self,\n                         function_kind,\n                         function_declaration,\n                         block,\n@@ -624,34 +624,34 @@ impl Visitor<()> for NewNameFinderContext {\n                         ())\n     }\n \n-    fn visit_ty_method(@mut self, ty_method: &ast::TypeMethod, _: ()) {\n-        visit::visit_ty_method(self as @mut Visitor<()>, ty_method, ())\n+    fn visit_ty_method(&mut self, ty_method: &ast::TypeMethod, _: ()) {\n+        visit::walk_ty_method(self, ty_method, ())\n     }\n \n-    fn visit_trait_method(@mut self,\n+    fn visit_trait_method(&mut self,\n                           trait_method: &ast::trait_method,\n                           _: ()) {\n-        visit::visit_trait_method(self as @mut Visitor<()>, trait_method, ())\n+        visit::walk_trait_method(self, trait_method, ())\n     }\n \n-    fn visit_struct_def(@mut self,\n+    fn visit_struct_def(&mut self,\n                         struct_def: @ast::struct_def,\n                         ident: ident,\n                         generics: &ast::Generics,\n                         node_id: NodeId,\n                         _: ()) {\n-        visit::visit_struct_def(self as @mut Visitor<()>,\n+        visit::walk_struct_def(self,\n                                 struct_def,\n                                 ident,\n                                 generics,\n                                 node_id,\n                                 ())\n     }\n \n-    fn visit_struct_field(@mut self,\n+    fn visit_struct_field(&mut self,\n                           struct_field: @ast::struct_field,\n                           _: ()) {\n-        visit::visit_struct_field(self as @mut Visitor<()>, struct_field, ())\n+        visit::walk_struct_field(self, struct_field, ())\n     }\n }\n "}, {"sha": "8178e7f3760b723e49df1a5e07ca06ff00de8efc", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 200, "deletions": 136, "changes": 336, "blob_url": "https://github.com/rust-lang/rust/blob/3d830106482e6096312404572486d11c6350a8f8/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d830106482e6096312404572486d11c6350a8f8/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=3d830106482e6096312404572486d11c6350a8f8", "patch": "@@ -66,33 +66,97 @@ pub fn generics_of_fn(fk: &fn_kind) -> Generics {\n     }\n }\n \n-pub trait Visitor<E> {\n-    fn visit_mod(@mut self, &_mod, span, NodeId, E);\n-    fn visit_view_item(@mut self, &view_item, E);\n-    fn visit_foreign_item(@mut self, @foreign_item, E);\n-    fn visit_item(@mut self, @item, E);\n-    fn visit_local(@mut self, @Local, E);\n-    fn visit_block(@mut self, &Block, E);\n-    fn visit_stmt(@mut self, @stmt, E);\n-    fn visit_arm(@mut self, &arm, E);\n-    fn visit_pat(@mut self, @pat, E);\n-    fn visit_decl(@mut self, @decl, E);\n-    fn visit_expr(@mut self, @expr, E);\n-    fn visit_expr_post(@mut self, @expr, E);\n-    fn visit_ty(@mut self, &Ty, E);\n-    fn visit_generics(@mut self, &Generics, E);\n-    fn visit_fn(@mut self, &fn_kind, &fn_decl, &Block, span, NodeId, E);\n-    fn visit_ty_method(@mut self, &TypeMethod, E);\n-    fn visit_trait_method(@mut self, &trait_method, E);\n-    fn visit_struct_def(@mut self, @struct_def, ident, &Generics, NodeId, E);\n-    fn visit_struct_field(@mut self, @struct_field, E);\n-}\n-\n-pub fn visit_crate<E:Clone>(visitor: @mut Visitor<E>, crate: &Crate, env: E) {\n+pub trait Visitor<E:Clone> {\n+    fn visit_mod(&mut self, m:&_mod, _s:span, _n:NodeId, e:E) { walk_mod(self, m, e) }\n+    fn visit_view_item(&mut self, i:&view_item, e:E) { walk_view_item(self, i, e) }\n+    fn visit_foreign_item(&mut self, i:@foreign_item, e:E) { walk_foreign_item(self, i, e) }\n+    fn visit_item(&mut self, i:@item, e:E) { walk_item(self, i, e) }\n+    fn visit_local(&mut self, l:@Local, e:E) { walk_local(self, l, e) }\n+    fn visit_block(&mut self, b:&Block, e:E) { walk_block(self, b, e) }\n+    fn visit_stmt(&mut self, s:@stmt, e:E) { walk_stmt(self, s, e) }\n+    fn visit_arm(&mut self, a:&arm, e:E) { walk_arm(self, a, e) }\n+    fn visit_pat(&mut self, p:@pat, e:E) { walk_pat(self, p, e) }\n+    fn visit_decl(&mut self, d:@decl, e:E) { walk_decl(self, d, e) }\n+    fn visit_expr(&mut self, ex:@expr, e:E) { walk_expr(self, ex, e) }\n+    fn visit_expr_post(&mut self, _ex:@expr, _e:E) { }\n+    fn visit_ty(&mut self, _t:&Ty, _e:E) { }\n+    fn visit_generics(&mut self, g:&Generics, e:E) { walk_generics(self, g, e) }\n+    fn visit_fn(&mut self, fk:&fn_kind, fd:&fn_decl, b:&Block, s:span, n:NodeId, e:E) {\n+        walk_fn(self, fk, fd, b, s, n , e)\n+    }\n+    fn visit_ty_method(&mut self, t:&TypeMethod, e:E) { walk_ty_method(self, t, e) }\n+    fn visit_trait_method(&mut self, t:&trait_method, e:E) { walk_trait_method(self, t, e) }\n+    fn visit_struct_def(&mut self, s:@struct_def, i:ident, g:&Generics, n:NodeId, e:E) {\n+        walk_struct_def(self, s, i, g, n, e)\n+    }\n+    fn visit_struct_field(&mut self, s:@struct_field, e:E) { walk_struct_field(self, s, e) }\n+}\n+\n+impl<E:Clone> Visitor<E> for @mut Visitor<E> {\n+    fn visit_mod(&mut self, a:&_mod, b:span, c:NodeId, e:E) {\n+        (*self).visit_mod(a, b, c, e)\n+    }\n+    fn visit_view_item(&mut self, a:&view_item, e:E) {\n+        (*self).visit_view_item(a, e)\n+    }\n+    fn visit_foreign_item(&mut self, a:@foreign_item, e:E) {\n+        (*self).visit_foreign_item(a, e)\n+    }\n+    fn visit_item(&mut self, a:@item, e:E) {\n+        (*self).visit_item(a, e)\n+    }\n+    fn visit_local(&mut self, a:@Local, e:E) {\n+        (*self).visit_local(a, e)\n+    }\n+    fn visit_block(&mut self, a:&Block, e:E) {\n+        (*self).visit_block(a, e)\n+    }\n+    fn visit_stmt(&mut self, a:@stmt, e:E) {\n+        (*self).visit_stmt(a, e)\n+    }\n+    fn visit_arm(&mut self, a:&arm, e:E) {\n+        (*self).visit_arm(a, e)\n+    }\n+    fn visit_pat(&mut self, a:@pat, e:E) {\n+        (*self).visit_pat(a, e)\n+    }\n+    fn visit_decl(&mut self, a:@decl, e:E) {\n+        (*self).visit_decl(a, e)\n+    }\n+    fn visit_expr(&mut self, a:@expr, e:E) {\n+        (*self).visit_expr(a, e)\n+    }\n+    fn visit_expr_post(&mut self, a:@expr, e:E) {\n+        (*self).visit_expr_post(a, e)\n+    }\n+    fn visit_ty(&mut self, a:&Ty, e:E) {\n+        (*self).visit_ty(a, e)\n+    }\n+    fn visit_generics(&mut self, a:&Generics, e:E) {\n+        (*self).visit_generics(a, e)\n+    }\n+    fn visit_fn(&mut self, a:&fn_kind, b:&fn_decl, c:&Block, d:span, f:NodeId, e:E) {\n+        (*self).visit_fn(a, b, c, d, f, e)\n+    }\n+    fn visit_ty_method(&mut self, a:&TypeMethod, e:E) {\n+        (*self).visit_ty_method(a, e)\n+    }\n+    fn visit_trait_method(&mut self, a:&trait_method, e:E) {\n+        (*self).visit_trait_method(a, e)\n+    }\n+    fn visit_struct_def(&mut self, a:@struct_def, b:ident, c:&Generics, d:NodeId, e:E) {\n+        (*self).visit_struct_def(a, b, c, d, e)\n+    }\n+    fn visit_struct_field(&mut self, a:@struct_field, e:E) {\n+        (*self).visit_struct_field(a, e)\n+    }\n+}\n+\n+pub fn walk_crate<E:Clone, V:Visitor<E>>(visitor: &mut V, crate: &Crate, env: E) {\n     visitor.visit_mod(&crate.module, crate.span, CRATE_NODE_ID, env)\n }\n \n-pub fn visit_mod<E:Clone>(visitor: @mut Visitor<E>, module: &_mod, env: E) {\n+pub fn walk_mod<E:Clone, V:Visitor<E>>(visitor: &mut V, module: &_mod, env: E) {\n     for view_item in module.view_items.iter() {\n         visitor.visit_view_item(view_item, env.clone())\n     }\n@@ -101,11 +165,11 @@ pub fn visit_mod<E:Clone>(visitor: @mut Visitor<E>, module: &_mod, env: E) {\n     }\n }\n \n-pub fn visit_view_item<E:Clone>(_: @mut Visitor<E>, _: &view_item, _: E) {\n+pub fn walk_view_item<E:Clone, V:Visitor<E>>(_: &mut V, _: &view_item, _: E) {\n     // Empty!\n }\n \n-pub fn visit_local<E:Clone>(visitor: @mut Visitor<E>, local: &Local, env: E) {\n+pub fn walk_local<E:Clone, V:Visitor<E>>(visitor: &mut V, local: &Local, env: E) {\n     visitor.visit_pat(local.pat, env.clone());\n     visitor.visit_ty(&local.ty, env.clone());\n     match local.init {\n@@ -114,13 +178,13 @@ pub fn visit_local<E:Clone>(visitor: @mut Visitor<E>, local: &Local, env: E) {\n     }\n }\n \n-fn visit_trait_ref<E:Clone>(visitor: @mut Visitor<E>,\n+fn walk_trait_ref<E:Clone, V:Visitor<E>>(visitor: &mut V,\n                             trait_ref: &ast::trait_ref,\n                             env: E) {\n-    visit_path(visitor, &trait_ref.path, env)\n+    walk_path(visitor, &trait_ref.path, env)\n }\n \n-pub fn visit_item<E:Clone>(visitor: @mut Visitor<E>, item: &item, env: E) {\n+pub fn walk_item<E:Clone, V:Visitor<E>>(visitor: &mut V, item: &item, env: E) {\n     match item.node {\n         item_static(ref typ, _, expr) => {\n             visitor.visit_ty(typ, env.clone());\n@@ -151,19 +215,19 @@ pub fn visit_item<E:Clone>(visitor: @mut Visitor<E>, item: &item, env: E) {\n         }\n         item_enum(ref enum_definition, ref type_parameters) => {\n             visitor.visit_generics(type_parameters, env.clone());\n-            visit_enum_def(visitor, enum_definition, type_parameters, env)\n+            walk_enum_def(visitor, enum_definition, type_parameters, env)\n         }\n         item_impl(ref type_parameters,\n                   ref trait_references,\n                   ref typ,\n                   ref methods) => {\n             visitor.visit_generics(type_parameters, env.clone());\n             for trait_reference in trait_references.iter() {\n-                visit_trait_ref(visitor, trait_reference, env.clone())\n+                walk_trait_ref(visitor, trait_reference, env.clone())\n             }\n             visitor.visit_ty(typ, env.clone());\n             for method in methods.iter() {\n-                visit_method_helper(visitor, *method, env.clone())\n+                walk_method_helper(visitor, *method, env.clone())\n             }\n         }\n         item_struct(struct_definition, ref generics) => {\n@@ -177,17 +241,17 @@ pub fn visit_item<E:Clone>(visitor: @mut Visitor<E>, item: &item, env: E) {\n         item_trait(ref generics, ref trait_paths, ref methods) => {\n             visitor.visit_generics(generics, env.clone());\n             for trait_path in trait_paths.iter() {\n-                visit_path(visitor, &trait_path.path, env.clone())\n+                walk_path(visitor, &trait_path.path, env.clone())\n             }\n             for method in methods.iter() {\n                 visitor.visit_trait_method(method, env.clone())\n             }\n         }\n-        item_mac(ref macro) => visit_mac(visitor, macro, env),\n+        item_mac(ref macro) => walk_mac(visitor, macro, env),\n     }\n }\n \n-pub fn visit_enum_def<E:Clone>(visitor: @mut Visitor<E>,\n+pub fn walk_enum_def<E:Clone, V:Visitor<E>>(visitor: &mut V,\n                                enum_definition: &ast::enum_def,\n                                generics: &Generics,\n                                env: E) {\n@@ -209,11 +273,11 @@ pub fn visit_enum_def<E:Clone>(visitor: @mut Visitor<E>,\n     }\n }\n \n-pub fn skip_ty<E>(_: @mut Visitor<E>, _: &Ty, _: E) {\n+pub fn skip_ty<E, V:Visitor<E>>(_: &mut V, _: &Ty, _: E) {\n     // Empty!\n }\n \n-pub fn visit_ty<E:Clone>(visitor: @mut Visitor<E>, typ: &Ty, env: E) {\n+pub fn walk_ty<E:Clone, V:Visitor<E>>(visitor: &mut V, typ: &Ty, env: E) {\n     match typ.node {\n         ty_box(ref mutable_type) | ty_uniq(ref mutable_type) |\n         ty_vec(ref mutable_type) | ty_ptr(ref mutable_type) |\n@@ -231,7 +295,7 @@ pub fn visit_ty<E:Clone>(visitor: @mut Visitor<E>, typ: &Ty, env: E) {\n              }\n              visitor.visit_ty(&function_declaration.decl.output, env.clone());\n              for bounds in function_declaration.bounds.iter() {\n-                visit_ty_param_bounds(visitor, bounds, env.clone())\n+                walk_ty_param_bounds(visitor, bounds, env.clone())\n              }\n         }\n         ty_bare_fn(ref function_declaration) => {\n@@ -241,9 +305,9 @@ pub fn visit_ty<E:Clone>(visitor: @mut Visitor<E>, typ: &Ty, env: E) {\n             visitor.visit_ty(&function_declaration.decl.output, env.clone())\n         }\n         ty_path(ref path, ref bounds, _) => {\n-            visit_path(visitor, path, env.clone());\n+            walk_path(visitor, path, env.clone());\n             for bounds in bounds.iter() {\n-                visit_ty_param_bounds(visitor, bounds, env.clone())\n+                walk_ty_param_bounds(visitor, bounds, env.clone())\n             }\n         }\n         ty_fixed_length_vec(ref mutable_type, expression) => {\n@@ -254,24 +318,24 @@ pub fn visit_ty<E:Clone>(visitor: @mut Visitor<E>, typ: &Ty, env: E) {\n     }\n }\n \n-pub fn visit_path<E:Clone>(visitor: @mut Visitor<E>, path: &Path, env: E) {\n+pub fn walk_path<E:Clone, V:Visitor<E>>(visitor: &mut V, path: &Path, env: E) {\n     for typ in path.types.iter() {\n         visitor.visit_ty(typ, env.clone())\n     }\n }\n \n-pub fn visit_pat<E:Clone>(visitor: @mut Visitor<E>, pattern: &pat, env: E) {\n+pub fn walk_pat<E:Clone, V:Visitor<E>>(visitor: &mut V, pattern: &pat, env: E) {\n     match pattern.node {\n         pat_enum(ref path, ref children) => {\n-            visit_path(visitor, path, env.clone());\n+            walk_path(visitor, path, env.clone());\n             for children in children.iter() {\n                 for child in children.iter() {\n                     visitor.visit_pat(*child, env.clone())\n                 }\n             }\n         }\n         pat_struct(ref path, ref fields, _) => {\n-            visit_path(visitor, path, env.clone());\n+            walk_path(visitor, path, env.clone());\n             for field in fields.iter() {\n                 visitor.visit_pat(field.pat, env.clone())\n             }\n@@ -287,7 +351,7 @@ pub fn visit_pat<E:Clone>(visitor: @mut Visitor<E>, pattern: &pat, env: E) {\n             visitor.visit_pat(subpattern, env)\n         }\n         pat_ident(_, ref path, ref optional_subpattern) => {\n-            visit_path(visitor, path, env.clone());\n+            walk_path(visitor, path, env.clone());\n             match *optional_subpattern {\n                 None => {}\n                 Some(subpattern) => visitor.visit_pat(subpattern, env),\n@@ -313,40 +377,40 @@ pub fn visit_pat<E:Clone>(visitor: @mut Visitor<E>, pattern: &pat, env: E) {\n     }\n }\n \n-pub fn visit_foreign_item<E:Clone>(visitor: @mut Visitor<E>,\n+pub fn walk_foreign_item<E:Clone, V:Visitor<E>>(visitor: &mut V,\n                                    foreign_item: &foreign_item,\n                                    env: E) {\n     match foreign_item.node {\n         foreign_item_fn(ref function_declaration, ref generics) => {\n-            visit_fn_decl(visitor, function_declaration, env.clone());\n+            walk_fn_decl(visitor, function_declaration, env.clone());\n             visitor.visit_generics(generics, env)\n         }\n         foreign_item_static(ref typ, _) => visitor.visit_ty(typ, env),\n     }\n }\n \n-pub fn visit_ty_param_bounds<E:Clone>(visitor: @mut Visitor<E>,\n+pub fn walk_ty_param_bounds<E:Clone, V:Visitor<E>>(visitor: &mut V,\n                                       bounds: &OptVec<TyParamBound>,\n                                       env: E) {\n     for bound in bounds.iter() {\n         match *bound {\n             TraitTyParamBound(ref typ) => {\n-                visit_trait_ref(visitor, typ, env.clone())\n+                walk_trait_ref(visitor, typ, env.clone())\n             }\n             RegionTyParamBound => {}\n         }\n     }\n }\n \n-pub fn visit_generics<E:Clone>(visitor: @mut Visitor<E>,\n+pub fn walk_generics<E:Clone, V:Visitor<E>>(visitor: &mut V,\n                                generics: &Generics,\n                                env: E) {\n     for type_parameter in generics.ty_params.iter() {\n-        visit_ty_param_bounds(visitor, &type_parameter.bounds, env.clone())\n+        walk_ty_param_bounds(visitor, &type_parameter.bounds, env.clone())\n     }\n }\n \n-pub fn visit_fn_decl<E:Clone>(visitor: @mut Visitor<E>,\n+pub fn walk_fn_decl<E:Clone, V:Visitor<E>>(visitor: &mut V,\n                               function_declaration: &fn_decl,\n                               env: E) {\n     for argument in function_declaration.inputs.iter() {\n@@ -360,7 +424,7 @@ pub fn visit_fn_decl<E:Clone>(visitor: @mut Visitor<E>,\n // visit_fn() and check for fk_method().  I named this visit_method_helper()\n // because it is not a default impl of any method, though I doubt that really\n // clarifies anything. - Niko\n-pub fn visit_method_helper<E:Clone>(visitor: @mut Visitor<E>,\n+pub fn walk_method_helper<E:Clone, V:Visitor<E>>(visitor: &mut V,\n                                     method: &method,\n                                     env: E) {\n     visitor.visit_fn(&fk_method(method.ident, &method.generics, method),\n@@ -371,20 +435,20 @@ pub fn visit_method_helper<E:Clone>(visitor: @mut Visitor<E>,\n                      env)\n }\n \n-pub fn visit_fn<E:Clone>(visitor: @mut Visitor<E>,\n+pub fn walk_fn<E:Clone, V:Visitor<E>>(visitor: &mut V,\n                          function_kind: &fn_kind,\n                          function_declaration: &fn_decl,\n                          function_body: &Block,\n                          _: span,\n                          _: NodeId,\n                          env: E) {\n-    visit_fn_decl(visitor, function_declaration, env.clone());\n+    walk_fn_decl(visitor, function_declaration, env.clone());\n     let generics = generics_of_fn(function_kind);\n     visitor.visit_generics(&generics, env.clone());\n     visitor.visit_block(function_body, env)\n }\n \n-pub fn visit_ty_method<E:Clone>(visitor: @mut Visitor<E>,\n+pub fn walk_ty_method<E:Clone, V:Visitor<E>>(visitor: &mut V,\n                                 method_type: &TypeMethod,\n                                 env: E) {\n     for argument_type in method_type.decl.inputs.iter() {\n@@ -394,18 +458,18 @@ pub fn visit_ty_method<E:Clone>(visitor: @mut Visitor<E>,\n     visitor.visit_ty(&method_type.decl.output, env.clone())\n }\n \n-pub fn visit_trait_method<E:Clone>(visitor: @mut Visitor<E>,\n+pub fn walk_trait_method<E:Clone, V:Visitor<E>>(visitor: &mut V,\n                                    trait_method: &trait_method,\n                                    env: E) {\n     match *trait_method {\n         required(ref method_type) => {\n             visitor.visit_ty_method(method_type, env)\n         }\n-        provided(method) => visit_method_helper(visitor, method, env),\n+        provided(method) => walk_method_helper(visitor, method, env),\n     }\n }\n \n-pub fn visit_struct_def<E:Clone>(visitor: @mut Visitor<E>,\n+pub fn walk_struct_def<E:Clone, V:Visitor<E>>(visitor: &mut V,\n                                  struct_definition: @struct_def,\n                                  _: ast::ident,\n                                  _: &Generics,\n@@ -416,40 +480,40 @@ pub fn visit_struct_def<E:Clone>(visitor: @mut Visitor<E>,\n     }\n }\n \n-pub fn visit_struct_field<E:Clone>(visitor: @mut Visitor<E>,\n+pub fn walk_struct_field<E:Clone, V:Visitor<E>>(visitor: &mut V,\n                                    struct_field: &struct_field,\n                                    env: E) {\n     visitor.visit_ty(&struct_field.node.ty, env)\n }\n \n-pub fn visit_block<E:Clone>(visitor: @mut Visitor<E>, block: &Block, env: E) {\n+pub fn walk_block<E:Clone, V:Visitor<E>>(visitor: &mut V, block: &Block, env: E) {\n     for view_item in block.view_items.iter() {\n         visitor.visit_view_item(view_item, env.clone())\n     }\n     for statement in block.stmts.iter() {\n         visitor.visit_stmt(*statement, env.clone())\n     }\n-    visit_expr_opt(visitor, block.expr, env)\n+    walk_expr_opt(visitor, block.expr, env)\n }\n \n-pub fn visit_stmt<E>(visitor: @mut Visitor<E>, statement: &stmt, env: E) {\n+pub fn walk_stmt<E:Clone, V:Visitor<E>>(visitor: &mut V, statement: &stmt, env: E) {\n     match statement.node {\n         stmt_decl(declaration, _) => visitor.visit_decl(declaration, env),\n         stmt_expr(expression, _) | stmt_semi(expression, _) => {\n             visitor.visit_expr(expression, env)\n         }\n-        stmt_mac(ref macro, _) => visit_mac(visitor, macro, env),\n+        stmt_mac(ref macro, _) => walk_mac(visitor, macro, env),\n     }\n }\n \n-pub fn visit_decl<E:Clone>(visitor: @mut Visitor<E>, declaration: &decl, env: E) {\n+pub fn walk_decl<E:Clone, V:Visitor<E>>(visitor: &mut V, declaration: &decl, env: E) {\n     match declaration.node {\n         decl_local(ref local) => visitor.visit_local(*local, env),\n         decl_item(item) => visitor.visit_item(item, env),\n     }\n }\n \n-pub fn visit_expr_opt<E>(visitor: @mut Visitor<E>,\n+pub fn walk_expr_opt<E:Clone, V:Visitor<E>>(visitor: &mut V,\n                          optional_expression: Option<@expr>,\n                          env: E) {\n     match optional_expression {\n@@ -458,36 +522,36 @@ pub fn visit_expr_opt<E>(visitor: @mut Visitor<E>,\n     }\n }\n \n-pub fn visit_exprs<E:Clone>(visitor: @mut Visitor<E>,\n+pub fn walk_exprs<E:Clone, V:Visitor<E>>(visitor: &mut V,\n                             expressions: &[@expr],\n                             env: E) {\n     for expression in expressions.iter() {\n         visitor.visit_expr(*expression, env.clone())\n     }\n }\n \n-pub fn visit_mac<E>(_: @mut Visitor<E>, _: &mac, _: E) {\n+pub fn walk_mac<E, V:Visitor<E>>(_: &mut V, _: &mac, _: E) {\n     // Empty!\n }\n \n-pub fn visit_expr<E:Clone>(visitor: @mut Visitor<E>, expression: @expr, env: E) {\n+pub fn walk_expr<E:Clone, V:Visitor<E>>(visitor: &mut V, expression: @expr, env: E) {\n     match expression.node {\n         expr_vstore(subexpression, _) => {\n             visitor.visit_expr(subexpression, env.clone())\n         }\n         expr_vec(ref subexpressions, _) => {\n-            visit_exprs(visitor, *subexpressions, env.clone())\n+            walk_exprs(visitor, *subexpressions, env.clone())\n         }\n         expr_repeat(element, count, _) => {\n             visitor.visit_expr(element, env.clone());\n             visitor.visit_expr(count, env.clone())\n         }\n         expr_struct(ref path, ref fields, optional_base) => {\n-            visit_path(visitor, path, env.clone());\n+            walk_path(visitor, path, env.clone());\n             for field in fields.iter() {\n                 visitor.visit_expr(field.expr, env.clone())\n             }\n-            visit_expr_opt(visitor, optional_base, env.clone())\n+            walk_expr_opt(visitor, optional_base, env.clone())\n         }\n         expr_tup(ref subexpressions) => {\n             for subexpression in subexpressions.iter() {\n@@ -501,7 +565,7 @@ pub fn visit_expr<E:Clone>(visitor: @mut Visitor<E>, expression: @expr, env: E)\n             visitor.visit_expr(callee_expression, env.clone())\n         }\n         expr_method_call(_, callee, _, ref types, ref arguments, _) => {\n-            visit_exprs(visitor, *arguments, env.clone());\n+            walk_exprs(visitor, *arguments, env.clone());\n             for typ in types.iter() {\n                 visitor.visit_ty(typ, env.clone())\n             }\n@@ -524,7 +588,7 @@ pub fn visit_expr<E:Clone>(visitor: @mut Visitor<E>, expression: @expr, env: E)\n         expr_if(head_expression, ref if_block, optional_else) => {\n             visitor.visit_expr(head_expression, env.clone());\n             visitor.visit_block(if_block, env.clone());\n-            visit_expr_opt(visitor, optional_else, env.clone())\n+            walk_expr_opt(visitor, optional_else, env.clone())\n         }\n         expr_while(subexpression, ref block) => {\n             visitor.visit_expr(subexpression, env.clone());\n@@ -569,16 +633,16 @@ pub fn visit_expr<E:Clone>(visitor: @mut Visitor<E>, expression: @expr, env: E)\n             visitor.visit_expr(main_expression, env.clone());\n             visitor.visit_expr(index_expression, env.clone())\n         }\n-        expr_path(ref path) => visit_path(visitor, path, env.clone()),\n+        expr_path(ref path) => walk_path(visitor, path, env.clone()),\n         expr_self | expr_break(_) | expr_again(_) => {}\n         expr_ret(optional_expression) => {\n-            visit_expr_opt(visitor, optional_expression, env.clone())\n+            walk_expr_opt(visitor, optional_expression, env.clone())\n         }\n         expr_log(level, subexpression) => {\n             visitor.visit_expr(level, env.clone());\n             visitor.visit_expr(subexpression, env.clone());\n         }\n-        expr_mac(ref macro) => visit_mac(visitor, macro, env.clone()),\n+        expr_mac(ref macro) => walk_mac(visitor, macro, env.clone()),\n         expr_paren(subexpression) => {\n             visitor.visit_expr(subexpression, env.clone())\n         }\n@@ -595,105 +659,105 @@ pub fn visit_expr<E:Clone>(visitor: @mut Visitor<E>, expression: @expr, env: E)\n     visitor.visit_expr_post(expression, env.clone())\n }\n \n-pub fn visit_arm<E:Clone>(visitor: @mut Visitor<E>, arm: &arm, env: E) {\n+pub fn walk_arm<E:Clone, V:Visitor<E>>(visitor: &mut V, arm: &arm, env: E) {\n     for pattern in arm.pats.iter() {\n         visitor.visit_pat(*pattern, env.clone())\n     }\n-    visit_expr_opt(visitor, arm.guard, env.clone());\n+    walk_expr_opt(visitor, arm.guard, env.clone());\n     visitor.visit_block(&arm.body, env)\n }\n \n // Simpler, non-context passing interface. Always walks the whole tree, simply\n // calls the given functions on the nodes.\n \n pub trait SimpleVisitor {\n-    fn visit_mod(@mut self, &_mod, span, NodeId);\n-    fn visit_view_item(@mut self, &view_item);\n-    fn visit_foreign_item(@mut self, @foreign_item);\n-    fn visit_item(@mut self, @item);\n-    fn visit_local(@mut self, @Local);\n-    fn visit_block(@mut self, &Block);\n-    fn visit_stmt(@mut self, @stmt);\n-    fn visit_arm(@mut self, &arm);\n-    fn visit_pat(@mut self, @pat);\n-    fn visit_decl(@mut self, @decl);\n-    fn visit_expr(@mut self, @expr);\n-    fn visit_expr_post(@mut self, @expr);\n-    fn visit_ty(@mut self, &Ty);\n-    fn visit_generics(@mut self, &Generics);\n-    fn visit_fn(@mut self, &fn_kind, &fn_decl, &Block, span, NodeId);\n-    fn visit_ty_method(@mut self, &TypeMethod);\n-    fn visit_trait_method(@mut self, &trait_method);\n-    fn visit_struct_def(@mut self, @struct_def, ident, &Generics, NodeId);\n-    fn visit_struct_field(@mut self, @struct_field);\n-    fn visit_struct_method(@mut self, @method);\n+    fn visit_mod(&mut self, &_mod, span, NodeId);\n+    fn visit_view_item(&mut self, &view_item);\n+    fn visit_foreign_item(&mut self, @foreign_item);\n+    fn visit_item(&mut self, @item);\n+    fn visit_local(&mut self, @Local);\n+    fn visit_block(&mut self, &Block);\n+    fn visit_stmt(&mut self, @stmt);\n+    fn visit_arm(&mut self, &arm);\n+    fn visit_pat(&mut self, @pat);\n+    fn visit_decl(&mut self, @decl);\n+    fn visit_expr(&mut self, @expr);\n+    fn visit_expr_post(&mut self, @expr);\n+    fn visit_ty(&mut self, &Ty);\n+    fn visit_generics(&mut self, &Generics);\n+    fn visit_fn(&mut self, &fn_kind, &fn_decl, &Block, span, NodeId);\n+    fn visit_ty_method(&mut self, &TypeMethod);\n+    fn visit_trait_method(&mut self, &trait_method);\n+    fn visit_struct_def(&mut self, @struct_def, ident, &Generics, NodeId);\n+    fn visit_struct_field(&mut self, @struct_field);\n+    fn visit_struct_method(&mut self, @method);\n }\n \n pub struct SimpleVisitorVisitor {\n     simple_visitor: @mut SimpleVisitor,\n }\n \n impl Visitor<()> for SimpleVisitorVisitor {\n-    fn visit_mod(@mut self,\n+    fn visit_mod(&mut self,\n                  module: &_mod,\n                  span: span,\n                  node_id: NodeId,\n                  env: ()) {\n         self.simple_visitor.visit_mod(module, span, node_id);\n-        visit_mod(self as @mut Visitor<()>, module, env)\n+        walk_mod(self, module, env)\n     }\n-    fn visit_view_item(@mut self, view_item: &view_item, env: ()) {\n+    fn visit_view_item(&mut self, view_item: &view_item, env: ()) {\n         self.simple_visitor.visit_view_item(view_item);\n-        visit_view_item(self as @mut Visitor<()>, view_item, env)\n+        walk_view_item(self, view_item, env)\n     }\n-    fn visit_foreign_item(@mut self, foreign_item: @foreign_item, env: ()) {\n+    fn visit_foreign_item(&mut self, foreign_item: @foreign_item, env: ()) {\n         self.simple_visitor.visit_foreign_item(foreign_item);\n-        visit_foreign_item(self as @mut Visitor<()>, foreign_item, env)\n+        walk_foreign_item(self, foreign_item, env)\n     }\n-    fn visit_item(@mut self, item: @item, env: ()) {\n+    fn visit_item(&mut self, item: @item, env: ()) {\n         self.simple_visitor.visit_item(item);\n-        visit_item(self as @mut Visitor<()>, item, env)\n+        walk_item(self, item, env)\n     }\n-    fn visit_local(@mut self, local: @Local, env: ()) {\n+    fn visit_local(&mut self, local: @Local, env: ()) {\n         self.simple_visitor.visit_local(local);\n-        visit_local(self as @mut Visitor<()>, local, env)\n+        walk_local(self, local, env)\n     }\n-    fn visit_block(@mut self, block: &Block, env: ()) {\n+    fn visit_block(&mut self, block: &Block, env: ()) {\n         self.simple_visitor.visit_block(block);\n-        visit_block(self as @mut Visitor<()>, block, env)\n+        walk_block(self, block, env)\n     }\n-    fn visit_stmt(@mut self, statement: @stmt, env: ()) {\n+    fn visit_stmt(&mut self, statement: @stmt, env: ()) {\n         self.simple_visitor.visit_stmt(statement);\n-        visit_stmt(self as @mut Visitor<()>, statement, env)\n+        walk_stmt(self, statement, env)\n     }\n-    fn visit_arm(@mut self, arm: &arm, env: ()) {\n+    fn visit_arm(&mut self, arm: &arm, env: ()) {\n         self.simple_visitor.visit_arm(arm);\n-        visit_arm(self as @mut Visitor<()>, arm, env)\n+        walk_arm(self, arm, env)\n     }\n-    fn visit_pat(@mut self, pattern: @pat, env: ()) {\n+    fn visit_pat(&mut self, pattern: @pat, env: ()) {\n         self.simple_visitor.visit_pat(pattern);\n-        visit_pat(self as @mut Visitor<()>, pattern, env)\n+        walk_pat(self, pattern, env)\n     }\n-    fn visit_decl(@mut self, declaration: @decl, env: ()) {\n+    fn visit_decl(&mut self, declaration: @decl, env: ()) {\n         self.simple_visitor.visit_decl(declaration);\n-        visit_decl(self as @mut Visitor<()>, declaration, env)\n+        walk_decl(self, declaration, env)\n     }\n-    fn visit_expr(@mut self, expression: @expr, env: ()) {\n+    fn visit_expr(&mut self, expression: @expr, env: ()) {\n         self.simple_visitor.visit_expr(expression);\n-        visit_expr(self as @mut Visitor<()>, expression, env)\n+        walk_expr(self, expression, env)\n     }\n-    fn visit_expr_post(@mut self, expression: @expr, _: ()) {\n+    fn visit_expr_post(&mut self, expression: @expr, _: ()) {\n         self.simple_visitor.visit_expr_post(expression)\n     }\n-    fn visit_ty(@mut self, typ: &Ty, env: ()) {\n+    fn visit_ty(&mut self, typ: &Ty, env: ()) {\n         self.simple_visitor.visit_ty(typ);\n-        visit_ty(self as @mut Visitor<()>, typ, env)\n+        walk_ty(self, typ, env)\n     }\n-    fn visit_generics(@mut self, generics: &Generics, env: ()) {\n+    fn visit_generics(&mut self, generics: &Generics, env: ()) {\n         self.simple_visitor.visit_generics(generics);\n-        visit_generics(self as @mut Visitor<()>, generics, env)\n+        walk_generics(self, generics, env)\n     }\n-    fn visit_fn(@mut self,\n+    fn visit_fn(&mut self,\n                 function_kind: &fn_kind,\n                 function_declaration: &fn_decl,\n                 block: &Block,\n@@ -705,23 +769,23 @@ impl Visitor<()> for SimpleVisitorVisitor {\n                                      block,\n                                      span,\n                                      node_id);\n-        visit_fn(self as @mut Visitor<()>,\n+        walk_fn(self,\n                  function_kind,\n                  function_declaration,\n                  block,\n                  span,\n                  node_id,\n                  env)\n     }\n-    fn visit_ty_method(@mut self, method_type: &TypeMethod, env: ()) {\n+    fn visit_ty_method(&mut self, method_type: &TypeMethod, env: ()) {\n         self.simple_visitor.visit_ty_method(method_type);\n-        visit_ty_method(self as @mut Visitor<()>, method_type, env)\n+        walk_ty_method(self, method_type, env)\n     }\n-    fn visit_trait_method(@mut self, trait_method: &trait_method, env: ()) {\n+    fn visit_trait_method(&mut self, trait_method: &trait_method, env: ()) {\n         self.simple_visitor.visit_trait_method(trait_method);\n-        visit_trait_method(self as @mut Visitor<()>, trait_method, env)\n+        walk_trait_method(self, trait_method, env)\n     }\n-    fn visit_struct_def(@mut self,\n+    fn visit_struct_def(&mut self,\n                         struct_definition: @struct_def,\n                         identifier: ident,\n                         generics: &Generics,\n@@ -731,16 +795,16 @@ impl Visitor<()> for SimpleVisitorVisitor {\n                                              identifier,\n                                              generics,\n                                              node_id);\n-        visit_struct_def(self as @mut Visitor<()>,\n+        walk_struct_def(self,\n                          struct_definition,\n                          identifier,\n                          generics,\n                          node_id,\n                          env)\n     }\n-    fn visit_struct_field(@mut self, struct_field: @struct_field, env: ()) {\n+    fn visit_struct_field(&mut self, struct_field: @struct_field, env: ()) {\n         self.simple_visitor.visit_struct_field(struct_field);\n-        visit_struct_field(self as @mut Visitor<()>, struct_field, env)\n+        walk_struct_field(self, struct_field, env)\n     }\n }\n "}]}