{"sha": "e88e13d31158780260b1be829242f8fb845d39c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4OGUxM2QzMTE1ODc4MDI2MGIxYmU4MjkyNDJmOGZiODQ1ZDM5YzE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-11-17T18:40:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-17T18:40:58Z"}, "message": "Rollup merge of #37799 - michaelwoerister:ich-type-def-tests, r=nikomatsakis\n\nICH: Add test case for type alias definitions\n\nr? @nikomatsakis", "tree": {"sha": "7173b484f09293d5a3665744dab648beb3327ed8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7173b484f09293d5a3665744dab648beb3327ed8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e88e13d31158780260b1be829242f8fb845d39c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e88e13d31158780260b1be829242f8fb845d39c1", "html_url": "https://github.com/rust-lang/rust/commit/e88e13d31158780260b1be829242f8fb845d39c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e88e13d31158780260b1be829242f8fb845d39c1/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5426143f6ae41d41a219827fb12c144b93d01cfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5426143f6ae41d41a219827fb12c144b93d01cfb", "html_url": "https://github.com/rust-lang/rust/commit/5426143f6ae41d41a219827fb12c144b93d01cfb"}, {"sha": "8e4097f6a843ec6d333627459ca54e4656d42335", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e4097f6a843ec6d333627459ca54e4656d42335", "html_url": "https://github.com/rust-lang/rust/commit/8e4097f6a843ec6d333627459ca54e4656d42335"}], "stats": {"total": 249, "additions": 249, "deletions": 0}, "files": [{"sha": "35fb583cd4ed2b623b453d61d509abe8debd1ab9", "filename": "src/test/incremental/hashes/type_defs.rs", "status": "added", "additions": 249, "deletions": 0, "changes": 249, "blob_url": "https://github.com/rust-lang/rust/blob/e88e13d31158780260b1be829242f8fb845d39c1/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88e13d31158780260b1be829242f8fb845d39c1/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs?ref=e88e13d31158780260b1be829242f8fb845d39c1", "patch": "@@ -0,0 +1,249 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// This test case tests the incremental compilation hash (ICH) implementation\n+// for `type` definitions.\n+\n+// The general pattern followed here is: Change one thing between rev1 and rev2\n+// and make sure that the hash has changed, then change nothing between rev2 and\n+// rev3 and make sure that the hash has not changed.\n+\n+// We also test the ICH for `type` definitions exported in metadata. Same as\n+// above, we want to make sure that the change between rev1 and rev2 also\n+// results in a change of the ICH for the enum's metadata, and that it stays\n+// the same between rev2 and rev3.\n+\n+// must-compile-successfully\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Z query-dep-graph\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+#![crate_type=\"rlib\"]\n+\n+\n+// Change type (primitive) -----------------------------------------------------\n+#[cfg(cfail1)]\n+type ChangePrimitiveType = i32;\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+type ChangePrimitiveType = i64;\n+\n+\n+\n+// Change mutability -----------------------------------------------------------\n+#[cfg(cfail1)]\n+type ChangeMutability = &'static i32;\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+type ChangeMutability = &'static mut i32;\n+\n+\n+\n+// Change mutability -----------------------------------------------------------\n+#[cfg(cfail1)]\n+type ChangeLifetime<'a> = (&'static i32, &'a i32);\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+type ChangeLifetime<'a> = (&'a i32, &'a i32);\n+\n+\n+\n+// Change type (struct) -----------------------------------------------------------\n+struct Struct1;\n+struct Struct2;\n+\n+#[cfg(cfail1)]\n+type ChangeTypeStruct = Struct1;\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+type ChangeTypeStruct = Struct2;\n+\n+\n+\n+// Change type (tuple) ---------------------------------------------------------\n+#[cfg(cfail1)]\n+type ChangeTypeTuple = (u32, u64);\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+type ChangeTypeTuple = (u32, i64);\n+\n+\n+\n+// Change type (enum) ----------------------------------------------------------\n+enum Enum1 {\n+    Var1,\n+    Var2,\n+}\n+enum Enum2 {\n+    Var1,\n+    Var2,\n+}\n+\n+#[cfg(cfail1)]\n+type ChangeTypeEnum = Enum1;\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+type ChangeTypeEnum = Enum2;\n+\n+\n+\n+// Add tuple field -------------------------------------------------------------\n+#[cfg(cfail1)]\n+type AddTupleField = (i32, i64);\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+type AddTupleField = (i32, i64, i16);\n+\n+\n+\n+// Change nested tuple field ---------------------------------------------------\n+#[cfg(cfail1)]\n+type ChangeNestedTupleField = (i32, (i64, i16));\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+type ChangeNestedTupleField = (i32, (i64, i8));\n+\n+\n+\n+// Add type param --------------------------------------------------------------\n+#[cfg(cfail1)]\n+type AddTypeParam<T1> = (T1, T1);\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+type AddTypeParam<T1, T2> = (T1, T2);\n+\n+\n+\n+// Add type param bound --------------------------------------------------------\n+#[cfg(cfail1)]\n+type AddTypeParamBound<T1> = (T1, u32);\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+type AddTypeParamBound<T1: Clone> = (T1, u32);\n+\n+\n+\n+// Add type param bound in where clause ----------------------------------------\n+#[cfg(cfail1)]\n+type AddTypeParamBoundWhereClause<T1> where T1: Clone = (T1, u32);\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+type AddTypeParamBoundWhereClause<T1> where T1: Clone+Copy = (T1, u32);\n+\n+\n+\n+// Add lifetime param ----------------------------------------------------------\n+#[cfg(cfail1)]\n+type AddLifetimeParam<'a> = (&'a u32, &'a u32);\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+type AddLifetimeParam<'a, 'b> = (&'a u32, &'b u32);\n+\n+\n+\n+// Add lifetime param bound ----------------------------------------------------\n+#[cfg(cfail1)]\n+type AddLifetimeParamBound<'a, 'b> = (&'a u32, &'b u32);\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+type AddLifetimeParamBound<'a, 'b: 'a> = (&'a u32, &'b u32);\n+\n+\n+\n+// Add lifetime param bound in where clause ------------------------------------\n+#[cfg(cfail1)]\n+type AddLifetimeParamBoundWhereClause<'a, 'b, 'c>\n+where 'b: 'a\n+    = (&'a u32, &'b u32, &'c u32);\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+type AddLifetimeParamBoundWhereClause<'a, 'b, 'c>\n+where 'b: 'a,\n+      'c: 'a\n+    = (&'a u32, &'b u32, &'c u32);\n+\n+\n+\n+// Change Trait Bound Indirectly -----------------------------------------------\n+trait ReferencedTrait1 {}\n+trait ReferencedTrait2 {}\n+\n+mod change_trait_bound_indirectly {\n+    #[cfg(cfail1)]\n+    use super::ReferencedTrait1 as Trait;\n+    #[cfg(not(cfail1))]\n+    use super::ReferencedTrait2 as Trait;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    type ChangeTraitBoundIndirectly<T: Trait> = (T, u32);\n+}\n+\n+\n+\n+// Change Trait Bound Indirectly In Where Clause -------------------------------\n+mod change_trait_bound_indirectly_in_where_clause {\n+    #[cfg(cfail1)]\n+    use super::ReferencedTrait1 as Trait;\n+    #[cfg(not(cfail1))]\n+    use super::ReferencedTrait2 as Trait;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    type ChangeTraitBoundIndirectly<T> where T : Trait = (T, u32);\n+}"}]}