{"sha": "e93cb04c4b011088d3b13a17bdf4cb865730dd38", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5M2NiMDRjNGIwMTEwODhkM2IxM2ExN2JkZjRjYjg2NTczMGRkMzg=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-05-01T07:00:19Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-05-01T21:43:00Z"}, "message": "fix error message for obsolete &\"foo\" literal", "tree": {"sha": "2cf2ba7c72610463373666ad9480ffaad1d4f0c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cf2ba7c72610463373666ad9480ffaad1d4f0c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e93cb04c4b011088d3b13a17bdf4cb865730dd38", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e93cb04c4b011088d3b13a17bdf4cb865730dd38", "html_url": "https://github.com/rust-lang/rust/commit/e93cb04c4b011088d3b13a17bdf4cb865730dd38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e93cb04c4b011088d3b13a17bdf4cb865730dd38/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7852625b8671211125564cba69d982dd4ee5db24", "url": "https://api.github.com/repos/rust-lang/rust/commits/7852625b8671211125564cba69d982dd4ee5db24", "html_url": "https://github.com/rust-lang/rust/commit/7852625b8671211125564cba69d982dd4ee5db24"}], "stats": {"total": 127, "additions": 65, "deletions": 62}, "files": [{"sha": "5c3f99d1905153334c85ef10e7186c6783bcecbf", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 65, "deletions": 62, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/e93cb04c4b011088d3b13a17bdf4cb865730dd38/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e93cb04c4b011088d3b13a17bdf4cb865730dd38/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=e93cb04c4b011088d3b13a17bdf4cb865730dd38", "patch": "@@ -2564,71 +2564,74 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n     let tcx = fcx.ccx.tcx;\n     let id = expr.id;\n     match expr.node {\n-      ast::ExprVstore(ev, vst) => {\n-        let typ = match ev.node {\n-          ast::ExprVec(ref args) => {\n-            let mutability = match vst {\n-                ast::ExprVstoreMutSlice => ast::MutMutable,\n-                _ => ast::MutImmutable,\n-            };\n-            let mut any_error = false;\n-            let mut any_bot = false;\n-            let t: ty::t = fcx.infcx().next_ty_var();\n-            for e in args.iter() {\n-                check_expr_has_type(fcx, *e, t);\n-                let arg_t = fcx.expr_ty(*e);\n-                if ty::type_is_error(arg_t) {\n-                    any_error = true;\n+        ast::ExprVstore(ev, vst) => {\n+            let typ = match ev.node {\n+                ast::ExprVec(ref args) => {\n+                    let mutability = match vst {\n+                        ast::ExprVstoreMutSlice => ast::MutMutable,\n+                        _ => ast::MutImmutable,\n+                    };\n+                    let mut any_error = false;\n+                    let mut any_bot = false;\n+                    let t: ty::t = fcx.infcx().next_ty_var();\n+                    for e in args.iter() {\n+                        check_expr_has_type(fcx, *e, t);\n+                        let arg_t = fcx.expr_ty(*e);\n+                        if ty::type_is_error(arg_t) {\n+                            any_error = true;\n+                        }\n+                        else if ty::type_is_bot(arg_t) {\n+                            any_bot = true;\n+                        }\n+                    }\n+                    if any_error {\n+                        ty::mk_err()\n+                    } else if any_bot {\n+                        ty::mk_bot()\n+                    } else {\n+                        ast_expr_vstore_to_ty(fcx, ev, vst, ||\n+                            ty::mt{ ty: ty::mk_vec(tcx,\n+                                                   ty::mt {ty: t, mutbl: mutability},\n+                                                   None),\n+                                                   mutbl: mutability })\n+                    }\n                 }\n-                else if ty::type_is_bot(arg_t) {\n-                    any_bot = true;\n+                ast::ExprRepeat(element, count_expr) => {\n+                    check_expr_with_hint(fcx, count_expr, ty::mk_uint());\n+                    let _ = ty::eval_repeat_count(fcx, count_expr);\n+                    let mutability = match vst {\n+                        ast::ExprVstoreMutSlice => ast::MutMutable,\n+                        _ => ast::MutImmutable,\n+                    };\n+                    let t = fcx.infcx().next_ty_var();\n+                    check_expr_has_type(fcx, element, t);\n+                    let arg_t = fcx.expr_ty(element);\n+                    if ty::type_is_error(arg_t) {\n+                        ty::mk_err()\n+                    } else if ty::type_is_bot(arg_t) {\n+                        ty::mk_bot()\n+                    } else {\n+                        ast_expr_vstore_to_ty(fcx, ev, vst, ||\n+                            ty::mt{ ty: ty::mk_vec(tcx,\n+                                                   ty::mt {ty: t, mutbl: mutability},\n+                                                   None),\n+                                                   mutbl: mutability})\n+                    }\n                 }\n-            }\n-            if any_error {\n-                ty::mk_err()\n-            } else if any_bot {\n-                ty::mk_bot()\n-            } else {\n-                ast_expr_vstore_to_ty(fcx, ev, vst, ||\n-                    ty::mt{ ty: ty::mk_vec(tcx,\n-                                           ty::mt {ty: t, mutbl: mutability},\n-                                           None),\n-                            mutbl: mutability })\n-            }\n-          }\n-          ast::ExprRepeat(element, count_expr) => {\n-            check_expr_with_hint(fcx, count_expr, ty::mk_uint());\n-            let _ = ty::eval_repeat_count(fcx, count_expr);\n-            let mutability = match vst {\n-                ast::ExprVstoreMutSlice => ast::MutMutable,\n-                _ => ast::MutImmutable,\n+                ast::ExprLit(_) => {\n+                    let error = if vst == ast::ExprVstoreSlice {\n+                        \"`&\\\"string\\\"` has been removed; use `\\\"string\\\"` instead\"\n+                    } else {\n+                        \"`~\\\"string\\\"` has been removed; use `\\\"string\\\".to_owned()` instead\"\n+                    };\n+                    tcx.sess.span_err(expr.span, error);\n+                    ty::mk_err()\n+                }\n+                _ => tcx.sess.span_bug(expr.span, \"vstore modifier on non-sequence\"),\n             };\n-            let t = fcx.infcx().next_ty_var();\n-            check_expr_has_type(fcx, element, t);\n-            let arg_t = fcx.expr_ty(element);\n-            if ty::type_is_error(arg_t) {\n-                ty::mk_err()\n-            } else if ty::type_is_bot(arg_t) {\n-                ty::mk_bot()\n-            } else {\n-                ast_expr_vstore_to_ty(fcx, ev, vst, ||\n-                    ty::mt{ ty: ty::mk_vec(tcx,\n-                                           ty::mt {ty: t, mutbl: mutability},\n-                                           None),\n-                            mutbl: mutability})\n-            }\n-          }\n-          ast::ExprLit(_) => {\n-            tcx.sess.span_err(expr.span,\n-                              \"`~\\\"string\\\"` has been removed; use `\\\"string\\\".to_owned()` \\\n-                               instead\");\n-            ty::mk_err()\n-          }\n-          _ => tcx.sess.span_bug(expr.span, \"vstore modifier on non-sequence\"),\n-        };\n-        fcx.write_ty(ev.id, typ);\n-        fcx.write_ty(id, typ);\n-      }\n+            fcx.write_ty(ev.id, typ);\n+            fcx.write_ty(id, typ);\n+        }\n \n       ast::ExprBox(place, subexpr) => {\n           check_expr(fcx, place);"}]}