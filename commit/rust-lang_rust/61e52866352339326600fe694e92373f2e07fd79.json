{"sha": "61e52866352339326600fe694e92373f2e07fd79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxZTUyODY2MzUyMzM5MzI2NjAwZmU2OTRlOTIzNzNmMmUwN2ZkNzk=", "commit": {"author": {"name": "ksqsf", "email": "i@ksqsf.moe", "date": "2019-08-02T05:58:55Z"}, "committer": {"name": "ksqsf", "email": "i@ksqsf.moe", "date": "2019-08-02T05:58:55Z"}, "message": "Remove Err variants of cloned and copied", "tree": {"sha": "f23be5228a3fdef5a3a7c95969d77d44ca2745e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f23be5228a3fdef5a3a7c95969d77d44ca2745e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61e52866352339326600fe694e92373f2e07fd79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61e52866352339326600fe694e92373f2e07fd79", "html_url": "https://github.com/rust-lang/rust/commit/61e52866352339326600fe694e92373f2e07fd79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61e52866352339326600fe694e92373f2e07fd79/comments", "author": {"login": "ksqsf", "id": 23358293, "node_id": "MDQ6VXNlcjIzMzU4Mjkz", "avatar_url": "https://avatars.githubusercontent.com/u/23358293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ksqsf", "html_url": "https://github.com/ksqsf", "followers_url": "https://api.github.com/users/ksqsf/followers", "following_url": "https://api.github.com/users/ksqsf/following{/other_user}", "gists_url": "https://api.github.com/users/ksqsf/gists{/gist_id}", "starred_url": "https://api.github.com/users/ksqsf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ksqsf/subscriptions", "organizations_url": "https://api.github.com/users/ksqsf/orgs", "repos_url": "https://api.github.com/users/ksqsf/repos", "events_url": "https://api.github.com/users/ksqsf/events{/privacy}", "received_events_url": "https://api.github.com/users/ksqsf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ksqsf", "id": 23358293, "node_id": "MDQ6VXNlcjIzMzU4Mjkz", "avatar_url": "https://avatars.githubusercontent.com/u/23358293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ksqsf", "html_url": "https://github.com/ksqsf", "followers_url": "https://api.github.com/users/ksqsf/followers", "following_url": "https://api.github.com/users/ksqsf/following{/other_user}", "gists_url": "https://api.github.com/users/ksqsf/gists{/gist_id}", "starred_url": "https://api.github.com/users/ksqsf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ksqsf/subscriptions", "organizations_url": "https://api.github.com/users/ksqsf/orgs", "repos_url": "https://api.github.com/users/ksqsf/repos", "events_url": "https://api.github.com/users/ksqsf/events{/privacy}", "received_events_url": "https://api.github.com/users/ksqsf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9733f0d16382c728e502c3efb4f38a19270f8202", "url": "https://api.github.com/repos/rust-lang/rust/commits/9733f0d16382c728e502c3efb4f38a19270f8202", "html_url": "https://github.com/rust-lang/rust/commit/9733f0d16382c728e502c3efb4f38a19270f8202"}], "stats": {"total": 79, "additions": 0, "deletions": 79}, "files": [{"sha": "935e48574fdf5508f4c74fd08c76c6b7f2c44cb6", "filename": "src/libcore/result.rs", "status": "modified", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/61e52866352339326600fe694e92373f2e07fd79/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61e52866352339326600fe694e92373f2e07fd79/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=61e52866352339326600fe694e92373f2e07fd79", "patch": "@@ -860,46 +860,6 @@ impl<T: Copy, E> Result<&mut T, E> {\n     }\n }\n \n-impl<T, E: Copy> Result<T, &E> {\n-    /// Maps a `Result<T, &E>` to a `Result<T, E>` by copying the contents of the\n-    /// `Err` part.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(result_copied)]\n-    /// let val = 12;\n-    /// let x: Result<i32, &i32> = Err(&val);\n-    /// assert_eq!(x, Err(&12));\n-    /// let copied = x.copied_err();\n-    /// assert_eq!(copied, Err(12));\n-    /// ```\n-    #[unstable(feature = \"result_copied\", reason = \"newly added\", issue = \"63168\")]\n-    pub fn copied_err(self) -> Result<T, E> {\n-        self.map_err(|&e| e)\n-    }\n-}\n-\n-impl<T, E: Copy> Result<T, &mut E> {\n-    /// Maps a `Result<T, &mut E>` to a `Result<T, E>` by copying the contents of the\n-    /// `Err` part.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(result_copied)]\n-    /// let mut val = 12;\n-    /// let x: Result<i32, &mut i32> = Err(&mut val);\n-    /// assert_eq!(x, Err(&mut 12));\n-    /// let copied = x.copied_err();\n-    /// assert_eq!(copied, Err(12));\n-    /// ```\n-    #[unstable(feature = \"result_copied\", reason = \"newly added\", issue = \"63168\")]\n-    pub fn copied_err(self) -> Result<T, E> {\n-        self.map_err(|&mut e| e)\n-    }\n-}\n-\n impl<T: Clone, E> Result<&T, E> {\n     /// Maps a `Result<&T, E>` to a `Result<T, E>` by cloning the contents of the\n     /// `Ok` part.\n@@ -940,45 +900,6 @@ impl<T: Clone, E> Result<&mut T, E> {\n     }\n }\n \n-impl<T, E: Clone> Result<T, &E> {\n-    /// Maps a `Result<T, &E>` to a `Result<T, E>` by cloning the contents of the\n-    /// `Err` part.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(result_cloned)]\n-    /// let val = 12;\n-    /// let x: Result<i32, &i32> = Err(&val);\n-    /// assert_eq!(x, Err(&12));\n-    /// let cloned = x.cloned_err();\n-    /// assert_eq!(cloned, Err(12));\n-    /// ```\n-    #[unstable(feature = \"result_cloned\", reason = \"newly added\", issue = \"63168\")]\n-    pub fn cloned_err(self) -> Result<T, E> {\n-        self.map_err(|e| e.clone())\n-    }\n-}\n-\n-impl<T, E: Clone> Result<T, &mut E> {\n-    /// Maps a `Result<T, &mut E>` to a `Result<T, E>` by cloning the contents of the\n-    /// `Err` part.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(result_cloned)]\n-    /// let mut val = 12;\n-    /// let x: Result<i32, &mut i32> = Err(&mut val);\n-    /// assert_eq!(x, Err(&mut 12));\n-    /// let cloned = x.cloned_err();\n-    /// assert_eq!(cloned, Err(12));\n-    /// ```\n-    #[unstable(feature = \"result_cloned\", reason = \"newly added\", issue = \"63168\")]\n-    pub fn cloned_err(self) -> Result<T, E> {\n-        self.map_err(|e| e.clone())\n-    }\n-}\n \n impl<T, E: fmt::Debug> Result<T, E> {\n     /// Unwraps a result, yielding the content of an [`Ok`]."}]}