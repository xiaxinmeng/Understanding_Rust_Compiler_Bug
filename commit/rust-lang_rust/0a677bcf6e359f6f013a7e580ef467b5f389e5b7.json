{"sha": "0a677bcf6e359f6f013a7e580ef467b5f389e5b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNjc3YmNmNmUzNTlmNmYwMTNhN2U1ODBlZjQ2N2I1ZjM4OWU1Yjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-14T17:35:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-14T17:35:12Z"}, "message": "auto merge of #8462 : thestinger/rust/loop-cleanup, r=cmr\n\nI missed some of this in e7bb33aed889aebae1b141cdcc2aeeebab1724ee. Hopefully it's all gone now :).", "tree": {"sha": "456774d8d22d643828e8375dc9d4ccbbfd0eecca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/456774d8d22d643828e8375dc9d4ccbbfd0eecca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a677bcf6e359f6f013a7e580ef467b5f389e5b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a677bcf6e359f6f013a7e580ef467b5f389e5b7", "html_url": "https://github.com/rust-lang/rust/commit/0a677bcf6e359f6f013a7e580ef467b5f389e5b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a677bcf6e359f6f013a7e580ef467b5f389e5b7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "927aff1724465ca92b49153236c96781038dc17e", "url": "https://api.github.com/repos/rust-lang/rust/commits/927aff1724465ca92b49153236c96781038dc17e", "html_url": "https://github.com/rust-lang/rust/commit/927aff1724465ca92b49153236c96781038dc17e"}, {"sha": "d99d33740d24a25fca28d1859c2703534d51a045", "url": "https://api.github.com/repos/rust-lang/rust/commits/d99d33740d24a25fca28d1859c2703534d51a045", "html_url": "https://github.com/rust-lang/rust/commit/d99d33740d24a25fca28d1859c2703534d51a045"}], "stats": {"total": 122, "additions": 20, "deletions": 102}, "files": [{"sha": "ec6bb0c998e0680a1f9b8378dee9393d0e7b37f0", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a677bcf6e359f6f013a7e580ef467b5f389e5b7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a677bcf6e359f6f013a7e580ef467b5f389e5b7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=0a677bcf6e359f6f013a7e580ef467b5f389e5b7", "patch": "@@ -1624,7 +1624,6 @@ pub fn new_fn_ctxt_w_id(ccx: @mut CrateContext,\n           llreturn: None,\n           llself: None,\n           personality: None,\n-          loop_ret: None,\n           has_immediate_return_value: is_immediate,\n           llargs: @mut HashMap::new(),\n           lllocals: @mut HashMap::new(),\n@@ -1834,8 +1833,7 @@ pub fn trans_closure(ccx: @mut CrateContext,\n                      id: ast::NodeId,\n                      attributes: &[ast::Attribute],\n                      output_type: ty::t,\n-                     maybe_load_env: &fn(@mut FunctionContext),\n-                     finish: &fn(@mut Block)) {\n+                     maybe_load_env: &fn(@mut FunctionContext)) {\n     ccx.stats.n_closures += 1;\n     let _icx = push_ctxt(\"trans_closure\");\n     set_uwtable(llfndecl);\n@@ -1885,7 +1883,6 @@ pub fn trans_closure(ccx: @mut CrateContext,\n         bcx = controlflow::trans_block(bcx, body, dest);\n     }\n \n-    finish(bcx);\n     match fcx.llreturn {\n         Some(llreturn) => cleanup_and_Br(bcx, bcx_top, llreturn),\n         None => bcx = cleanup_block(bcx, Some(bcx_top.llbb))\n@@ -1937,8 +1934,7 @@ pub fn trans_fn(ccx: @mut CrateContext,\n                           && fcx_has_nonzero_span(fcx) {\n                           debuginfo::create_function_metadata(fcx);\n                       }\n-                  },\n-                  |_bcx| { });\n+                  });\n }\n \n fn insert_synthetic_type_entries(bcx: @mut Block,"}, {"sha": "422394716b479f2727835a4e603a150b553e7a68", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 8, "deletions": 66, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/0a677bcf6e359f6f013a7e580ef467b5f389e5b7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a677bcf6e359f6f013a7e580ef467b5f389e5b7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=0a677bcf6e359f6f013a7e580ef467b5f389e5b7", "patch": "@@ -16,15 +16,13 @@ use middle::moves;\n use middle::trans::base::*;\n use middle::trans::build::*;\n use middle::trans::common::*;\n-use middle::trans::datum::{Datum, INIT, ByRef, ZeroMem};\n+use middle::trans::datum::{Datum, INIT};\n use middle::trans::expr;\n use middle::trans::glue;\n use middle::trans::type_of::*;\n use middle::ty;\n use util::ppaux::ty_to_str;\n \n-use middle::trans::type_::Type;\n-\n use std::vec;\n use syntax::ast;\n use syntax::ast_map::path_name;\n@@ -259,8 +257,7 @@ pub fn store_environment(bcx: @mut Block,\n // collects the upvars and packages them up for store_environment.\n pub fn build_closure(bcx0: @mut Block,\n                      cap_vars: &[moves::CaptureVar],\n-                     sigil: ast::Sigil,\n-                     include_ret_handle: Option<ValueRef>) -> ClosureResult {\n+                     sigil: ast::Sigil) -> ClosureResult {\n     let _icx = push_ctxt(\"closure::build_closure\");\n \n     // If we need to, package up the iterator body to call\n@@ -288,30 +285,6 @@ pub fn build_closure(bcx0: @mut Block,\n         }\n     }\n \n-    // If this is a `for` loop body, add two special environment\n-    // variables:\n-    for flagptr in include_ret_handle.iter() {\n-        // Flag indicating we have returned (a by-ref bool):\n-        let flag_datum = Datum {val: *flagptr, ty: ty::mk_bool(),\n-                                mode: ByRef(ZeroMem)};\n-        env_vals.push(EnvValue {action: EnvRef,\n-                                datum: flag_datum});\n-\n-        // Return value (we just pass a by-ref () and cast it later to\n-        // the right thing):\n-        let ret_true = match bcx.fcx.loop_ret {\n-            Some((_, retptr)) => retptr,\n-            None => match bcx.fcx.llretptr {\n-                None => C_null(Type::nil().ptr_to()),\n-                Some(retptr) => PointerCast(bcx, retptr, Type::nil().ptr_to()),\n-            }\n-        };\n-        let ret_datum = Datum {val: ret_true, ty: ty::mk_nil(),\n-                               mode: ByRef(ZeroMem)};\n-        env_vals.push(EnvValue {action: EnvRef,\n-                                datum: ret_datum});\n-    }\n-\n     return store_environment(bcx, env_vals, sigil);\n }\n \n@@ -321,12 +294,11 @@ pub fn build_closure(bcx0: @mut Block,\n pub fn load_environment(fcx: @mut FunctionContext,\n                         cdata_ty: ty::t,\n                         cap_vars: &[moves::CaptureVar],\n-                        load_ret_handle: bool,\n                         sigil: ast::Sigil) {\n     let _icx = push_ctxt(\"closure::load_environment\");\n \n     // Don't bother to create the block if there's nothing to load\n-    if cap_vars.len() == 0 && !load_ret_handle {\n+    if cap_vars.len() == 0 {\n         return;\n     }\n \n@@ -347,12 +319,6 @@ pub fn load_environment(fcx: @mut FunctionContext,\n         fcx.llupvars.insert(def_id.node, upvarptr);\n         i += 1u;\n     }\n-    if load_ret_handle {\n-        let flagptr = Load(bcx, GEPi(bcx, llcdata, [0u, i]));\n-        let retptr = Load(bcx,\n-                          GEPi(bcx, llcdata, [0u, i+1u]));\n-        fcx.loop_ret = Some((flagptr, retptr));\n-    }\n }\n \n pub fn trans_expr_fn(bcx: @mut Block,\n@@ -361,7 +327,6 @@ pub fn trans_expr_fn(bcx: @mut Block,\n                      body: &ast::Block,\n                      outer_id: ast::NodeId,\n                      user_id: ast::NodeId,\n-                     is_loop_body: Option<Option<ValueRef>>,\n                      dest: expr::Dest) -> @mut Block {\n     /*!\n      *\n@@ -378,7 +343,6 @@ pub fn trans_expr_fn(bcx: @mut Block,\n      * - `user_id`: The id of the closure as the user expressed it.\n          Generally the same as `outer_id`\n      * - `cap_clause`: information about captured variables, if any.\n-     * - `is_loop_body`: `Some()` if this is part of a `for` loop.\n      * - `dest`: where to write the closure value, which must be a\n          (fn ptr, env) pair\n      */\n@@ -405,28 +369,14 @@ pub fn trans_expr_fn(bcx: @mut Block,\n                                                  \"expr_fn\");\n     let llfn = decl_internal_cdecl_fn(ccx.llmod, s, llfnty);\n \n-    // Always mark inline if this is a loop body. This is important for\n-    // performance on many programs with tight loops.\n-    if is_loop_body.is_some() {\n-        set_always_inline(llfn);\n-    } else {\n-        // Can't hurt.\n-        set_inline_hint(llfn);\n-    }\n-\n-    let real_return_type = if is_loop_body.is_some() {\n-        ty::mk_bool()\n-    } else {\n-        ty::ty_fn_ret(fty)\n-    };\n+    // set an inline hint for all closures\n+    set_inline_hint(llfn);\n \n     let Result {bcx: bcx, val: closure} = match sigil {\n         ast::BorrowedSigil | ast::ManagedSigil | ast::OwnedSigil => {\n             let cap_vars = ccx.maps.capture_map.get_copy(&user_id);\n-            let ret_handle = match is_loop_body {Some(x) => x,\n-                                                 None => None};\n             let ClosureResult {llbox, cdata_ty, bcx}\n-                = build_closure(bcx, cap_vars, sigil, ret_handle);\n+                = build_closure(bcx, cap_vars, sigil);\n             trans_closure(ccx,\n                           sub_path,\n                           decl,\n@@ -436,16 +386,8 @@ pub fn trans_expr_fn(bcx: @mut Block,\n                           bcx.fcx.param_substs,\n                           user_id,\n                           [],\n-                          real_return_type,\n-                          |fcx| load_environment(fcx, cdata_ty, cap_vars,\n-                                                 ret_handle.is_some(), sigil),\n-                          |bcx| {\n-                              if is_loop_body.is_some() {\n-                                  Store(bcx,\n-                                        C_bool(true),\n-                                        bcx.fcx.llretptr.unwrap());\n-                              }\n-                          });\n+                          ty::ty_fn_ret(fty),\n+                          |fcx| load_environment(fcx, cdata_ty, cap_vars, sigil));\n             rslt(bcx, llbox)\n         }\n     };"}, {"sha": "fde33220d8426cd076adbe384283a759eb222281", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a677bcf6e359f6f013a7e580ef467b5f389e5b7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a677bcf6e359f6f013a7e580ef467b5f389e5b7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=0a677bcf6e359f6f013a7e580ef467b5f389e5b7", "patch": "@@ -196,9 +196,6 @@ pub struct FunctionContext {\n     // The a value alloca'd for calls to upcalls.rust_personality. Used when\n     // outputting the resume instruction.\n     personality: Option<ValueRef>,\n-    // If this is a for-loop body that returns, this holds the pointers needed\n-    // for that (flagptr, retptr)\n-    loop_ret: Option<(ValueRef, ValueRef)>,\n \n     // True if this function has an immediate return value, false otherwise.\n     // If this is false, the llretptr will alias the first argument of the"}, {"sha": "c0c1475e80834afce5aa171010f095c4b15f5c83", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a677bcf6e359f6f013a7e580ef467b5f389e5b7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a677bcf6e359f6f013a7e580ef467b5f389e5b7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=0a677bcf6e359f6f013a7e580ef467b5f389e5b7", "patch": "@@ -13,7 +13,7 @@ use back::{upcall};\n use driver::session;\n use lib::llvm::{ContextRef, ModuleRef, ValueRef};\n use lib::llvm::{llvm, TargetData, TypeNames};\n-use lib::llvm::{mk_target_data, False};\n+use lib::llvm::mk_target_data;\n use metadata::common::LinkMeta;\n use middle::astencode;\n use middle::resolve;"}, {"sha": "ed061e66f4194dd0eab1df915f87b7fd188b8312", "filename": "src/librustc/middle/trans/controlflow.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0a677bcf6e359f6f013a7e580ef467b5f389e5b7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a677bcf6e359f6f013a7e580ef467b5f389e5b7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontrolflow.rs?ref=0a677bcf6e359f6f013a7e580ef467b5f389e5b7", "patch": "@@ -20,7 +20,6 @@ use middle::trans::build::*;\n use middle::trans::callee;\n use middle::trans::common::*;\n use middle::trans::expr;\n-use middle::trans::type_of::*;\n use middle::ty;\n use util::common::indenter;\n use util::ppaux;\n@@ -338,29 +337,15 @@ pub fn trans_cont(bcx: @mut Block, label_opt: Option<ident>) -> @mut Block {\n pub fn trans_ret(bcx: @mut Block, e: Option<@ast::expr>) -> @mut Block {\n     let _icx = push_ctxt(\"trans_ret\");\n     let mut bcx = bcx;\n-    let dest = match bcx.fcx.loop_ret {\n-      Some((flagptr, retptr)) => {\n-        // This is a loop body return. Must set continue flag (our retptr)\n-        // to false, return flag to true, and then store the value in the\n-        // parent's retptr.\n-        Store(bcx, C_bool(true), flagptr);\n-        Store(bcx, C_bool(false), bcx.fcx.llretptr.unwrap());\n-        expr::SaveIn(match e {\n-          Some(x) => PointerCast(bcx, retptr,\n-                                 type_of(bcx.ccx(), expr_ty(bcx, x)).ptr_to()),\n-          None => retptr\n-        })\n-      }\n-      None => match bcx.fcx.llretptr {\n+    let dest = match bcx.fcx.llretptr {\n         None => expr::Ignore,\n         Some(retptr) => expr::SaveIn(retptr),\n-      }\n     };\n     match e {\n-      Some(x) => {\n-        bcx = expr::trans_into(bcx, x, dest);\n-      }\n-      _ => ()\n+        Some(x) => {\n+            bcx = expr::trans_into(bcx, x, dest);\n+        }\n+        _ => ()\n     }\n     cleanup_and_leave(bcx, None, Some(bcx.fcx.get_llreturn()));\n     Unreachable(bcx);"}, {"sha": "2a63ce976b6db273e9e1c7a1494b2f71189aaf42", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a677bcf6e359f6f013a7e580ef467b5f389e5b7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a677bcf6e359f6f013a7e580ef467b5f389e5b7/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=0a677bcf6e359f6f013a7e580ef467b5f389e5b7", "patch": "@@ -697,8 +697,7 @@ fn trans_rvalue_dps_unadjusted(bcx: @mut Block, expr: @ast::expr,\n                    expr_to_str(expr, tcx.sess.intr()),\n                    expr_ty.repr(tcx));\n             return closure::trans_expr_fn(bcx, sigil, decl, body,\n-                                          expr.id, expr.id,\n-                                          None, dest);\n+                                          expr.id, expr.id, dest);\n         }\n         ast::expr_do_body(blk) => {\n             return trans_into(bcx, blk, dest);"}, {"sha": "922b1693094a95372e5bc9bfa0b248c494214ac3", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a677bcf6e359f6f013a7e580ef467b5f389e5b7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a677bcf6e359f6f013a7e580ef467b5f389e5b7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=0a677bcf6e359f6f013a7e580ef467b5f389e5b7", "patch": "@@ -427,7 +427,7 @@ fn visit_expr(expr: @ast::expr, (rcx, v): (@mut Rcx, rvt)) {\n         }\n \n         ast::expr_fn_block(*) => {\n-            check_expr_fn_block(rcx, expr, v, false);\n+            check_expr_fn_block(rcx, expr, v);\n         }\n \n         ast::expr_loop(ref body, _) => {\n@@ -454,8 +454,7 @@ fn visit_expr(expr: @ast::expr, (rcx, v): (@mut Rcx, rvt)) {\n \n fn check_expr_fn_block(rcx: @mut Rcx,\n                        expr: @ast::expr,\n-                       v: rvt,\n-                       is_loop_body: bool) {\n+                       v: rvt) {\n     let tcx = rcx.fcx.tcx();\n     match expr.node {\n         ast::expr_fn_block(_, ref body) => {\n@@ -464,7 +463,7 @@ fn check_expr_fn_block(rcx: @mut Rcx,\n                 ty::ty_closure(\n                     ty::ClosureTy {\n                         sigil: ast::BorrowedSigil, region: region, _}) => {\n-                    if get_freevars(tcx, expr.id).is_empty() && !is_loop_body {\n+                    if get_freevars(tcx, expr.id).is_empty() {\n                         // No free variables means that the environment\n                         // will be NULL at runtime and hence the closure\n                         // has static lifetime."}]}