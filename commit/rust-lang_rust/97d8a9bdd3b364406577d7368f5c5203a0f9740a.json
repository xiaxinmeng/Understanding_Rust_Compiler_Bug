{"sha": "97d8a9bdd3b364406577d7368f5c5203a0f9740a", "node_id": "C_kwDOAAsO6NoAKDk3ZDhhOWJkZDNiMzY0NDA2NTc3ZDczNjhmNWM1MjAzYTBmOTc0MGE", "commit": {"author": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-10-06T23:09:54Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-11-22T22:12:26Z"}, "message": "also sort fields by niche sizes to retain optimizations", "tree": {"sha": "2e0b33243ee260176be49c6d97cef3e2155e0d8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e0b33243ee260176be49c6d97cef3e2155e0d8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97d8a9bdd3b364406577d7368f5c5203a0f9740a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97d8a9bdd3b364406577d7368f5c5203a0f9740a", "html_url": "https://github.com/rust-lang/rust/commit/97d8a9bdd3b364406577d7368f5c5203a0f9740a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97d8a9bdd3b364406577d7368f5c5203a0f9740a/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3450d060d04b07c09775483b4d4bb7597429e5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3450d060d04b07c09775483b4d4bb7597429e5a", "html_url": "https://github.com/rust-lang/rust/commit/a3450d060d04b07c09775483b4d4bb7597429e5a"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "07af3dc5164786208a9e05784f5cdc169a4c8f47", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/97d8a9bdd3b364406577d7368f5c5203a0f9740a/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d8a9bdd3b364406577d7368f5c5203a0f9740a/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=97d8a9bdd3b364406577d7368f5c5203a0f9740a", "patch": "@@ -140,8 +140,13 @@ fn univariant_uninterned<'tcx>(\n         let optimizing = &mut inverse_memory_index[..end];\n         let effective_field_align = |f: &TyAndLayout<'_>| {\n             if let Some(pack) = pack {\n+                // return the packed alignment in bytes\n                 f.align.abi.min(pack).bytes()\n             } else {\n+                // returns log2(effective-align).\n+                // This is ok since `pack` applies to all fields equally.\n+                // The calculation assumes that size is an integer multiple of align, except for ZSTs.\n+                //\n                 // group [u8; 4] with align-4 or [u8; 6] with align-2 fields\n                 f.align.abi.bytes().max(f.size.bytes()).trailing_zeros() as u64\n             }\n@@ -165,15 +170,23 @@ fn univariant_uninterned<'tcx>(\n                     optimizing.sort_by_key(|&x| {\n                         // Place ZSTs first to avoid \"interesting offsets\",\n                         // especially with only one or two non-ZST fields.\n+                        // Then place largest alignments first, largest niches within an alignment group last\n                         let f = &fields[x as usize];\n-                        (!f.is_zst(), cmp::Reverse(effective_field_align(f)))\n+                        let niche_size = f.largest_niche.map_or(0, |n| n.available(cx));\n+                        (!f.is_zst(), cmp::Reverse(effective_field_align(f)), niche_size)\n                     });\n                 }\n \n                 StructKind::Prefixed(..) => {\n                     // Sort in ascending alignment so that the layout stays optimal\n-                    // regardless of the prefix\n-                    optimizing.sort_by_key(|&x| effective_field_align(&fields[x as usize]));\n+                    // regardless of the prefix.\n+                    // And put the largest niche in an alignment group at the end\n+                    // so it can be used as discriminant in jagged enums\n+                    optimizing.sort_by_key(|&x| {\n+                        let f = &fields[x as usize];\n+                        let niche_size = f.largest_niche.map_or(0, |n| n.available(cx));\n+                        (effective_field_align(f), niche_size)\n+                    });\n                 }\n             }\n "}]}