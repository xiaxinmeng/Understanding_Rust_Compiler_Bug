{"sha": "2080faefa9a15a69289f5124b861a9376e35b762", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwODBmYWVmYTlhMTVhNjkyODlmNTEyNGI4NjFhOTM3NmUzNWI3NjI=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-09-28T17:53:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-28T17:53:40Z"}, "message": "Merge pull request #65 from oli-obk/master\n\nsmall fixes", "tree": {"sha": "f5e18544c6b2c2f0921b4d0b856b565a40ba9c09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5e18544c6b2c2f0921b4d0b856b565a40ba9c09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2080faefa9a15a69289f5124b861a9376e35b762", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2080faefa9a15a69289f5124b861a9376e35b762", "html_url": "https://github.com/rust-lang/rust/commit/2080faefa9a15a69289f5124b861a9376e35b762", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2080faefa9a15a69289f5124b861a9376e35b762/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e13c3c9839d169b819fdc2e8b9960f9f635f0e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e13c3c9839d169b819fdc2e8b9960f9f635f0e3", "html_url": "https://github.com/rust-lang/rust/commit/6e13c3c9839d169b819fdc2e8b9960f9f635f0e3"}, {"sha": "870bb4d862ee3c5b23cb428e7a697a13917ec8d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/870bb4d862ee3c5b23cb428e7a697a13917ec8d8", "html_url": "https://github.com/rust-lang/rust/commit/870bb4d862ee3c5b23cb428e7a697a13917ec8d8"}], "stats": {"total": 229, "additions": 208, "deletions": 21}, "files": [{"sha": "44179eafabbabde175e819e8557f774db4174476", "filename": "src/error.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2080faefa9a15a69289f5124b861a9376e35b762/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2080faefa9a15a69289f5124b861a9376e35b762/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=2080faefa9a15a69289f5124b861a9376e35b762", "patch": "@@ -45,6 +45,7 @@ pub enum EvalError<'tcx> {\n     VtableForArgumentlessMethod,\n     ModifiedConstantMemory,\n     AssumptionNotHeld,\n+    InlineAsm,\n }\n \n pub type EvalResult<'tcx, T> = Result<T, EvalError<'tcx>>;\n@@ -102,7 +103,9 @@ impl<'tcx> Error for EvalError<'tcx> {\n             EvalError::ModifiedConstantMemory =>\n                 \"tried to modify constant memory\",\n             EvalError::AssumptionNotHeld =>\n-                \"`assume` argument was false\"\n+                \"`assume` argument was false\",\n+            EvalError::InlineAsm =>\n+                \"cannot evaluate inline assembly\",\n         }\n     }\n "}, {"sha": "41dfa6806fb5291202fbb420833c100da940c424", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 44, "deletions": 18, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/2080faefa9a15a69289f5124b861a9376e35b762/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2080faefa9a15a69289f5124b861a9376e35b762/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=2080faefa9a15a69289f5124b861a9376e35b762", "patch": "@@ -1,5 +1,6 @@\n use rustc::middle::const_val::ConstVal;\n use rustc::hir::def_id::DefId;\n+use rustc::hir::map::definitions::DefPathData;\n use rustc::mir::mir_map::MirMap;\n use rustc::mir::repr as mir;\n use rustc::traits::Reveal;\n@@ -576,15 +577,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             Len(ref lvalue) => {\n                 let src = self.eval_lvalue(lvalue)?;\n                 let ty = self.lvalue_ty(lvalue);\n-                match ty.sty {\n-                    ty::TyArray(_, n) => self.memory.write_usize(dest, n as u64)?,\n-                    ty::TySlice(_) => if let LvalueExtra::Length(len) = src.extra {\n-                        self.memory.write_usize(dest, len)?;\n-                    } else {\n-                        bug!(\"Rvalue::Len of a slice given non-slice pointer: {:?}\", src);\n-                    },\n-                    _ => bug!(\"Rvalue::Len expected array or slice, got {:?}\", ty),\n-                }\n+                let (_, len) = src.elem_ty_and_len(ty);\n+                self.memory.write_usize(dest, len)?;\n             }\n \n             Ref(_, _, ref lvalue) => {\n@@ -667,7 +661,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 }\n             }\n \n-            InlineAsm { .. } => unimplemented!(),\n+            InlineAsm { .. } => return Err(EvalError::InlineAsm),\n         }\n \n         Ok(())\n@@ -719,13 +713,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 Ok(adt_def.struct_variant().fields[field_index].ty(self.tcx, substs))\n             }\n \n+            ty::TyTuple(fields) => Ok(fields[field_index]),\n+\n             ty::TyRef(_, ty::TypeAndMut { ty, .. }) |\n             ty::TyRawPtr(ty::TypeAndMut { ty, .. }) |\n             ty::TyBox(ty) => {\n                 assert_eq!(field_index, 0);\n                 Ok(ty)\n             }\n-            _ => Err(EvalError::Unimplemented(format!(\"can't handle type: {:?}\", ty))),\n+            _ => Err(EvalError::Unimplemented(format!(\"can't handle type: {:?}, {:?}\", ty, ty.sty))),\n         }\n     }\n \n@@ -889,19 +885,34 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     }\n \n                     Index(ref operand) => {\n-                        let elem_size = match base_ty.sty {\n-                            ty::TyArray(elem_ty, _) |\n-                            ty::TySlice(elem_ty) => self.type_size(elem_ty),\n-                            _ => bug!(\"indexing expected an array or slice, got {:?}\", base_ty),\n-                        };\n+                        let (elem_ty, len) = base.elem_ty_and_len(base_ty);\n+                        let elem_size = self.type_size(elem_ty);\n                         let n_ptr = self.eval_operand(operand)?;\n                         let usize = self.tcx.types.usize;\n                         let n = self.value_to_primval(n_ptr, usize)?.expect_uint(\"Projection::Index expected usize\");\n+                        assert!(n < len);\n                         base.ptr.offset(n as isize * elem_size as isize)\n                     }\n \n-                    ConstantIndex { .. } => unimplemented!(),\n-                    Subslice { .. } => unimplemented!(),\n+                    ConstantIndex { offset, min_length, from_end } => {\n+                        let (elem_ty, n) = base.elem_ty_and_len(base_ty);\n+                        let elem_size = self.type_size(elem_ty);\n+                        assert!(n >= min_length as u64);\n+                        if from_end {\n+                            base.ptr.offset((n as isize - offset as isize) * elem_size as isize)\n+                        } else {\n+                            base.ptr.offset(offset as isize * elem_size as isize)\n+                        }\n+                    },\n+                    Subslice { from, to } => {\n+                        let (elem_ty, n) = base.elem_ty_and_len(base_ty);\n+                        let elem_size = self.type_size(elem_ty);\n+                        assert!((from as u64) <= n - (to as u64));\n+                        return Ok(Lvalue {\n+                            ptr: base.ptr.offset(from as isize * elem_size as isize),\n+                            extra: LvalueExtra::Length(n - to as u64 - from as u64),\n+                        })\n+                    },\n                 }\n             }\n         };\n@@ -1172,6 +1183,17 @@ impl Lvalue {\n         assert_eq!(self.extra, LvalueExtra::None);\n         self.ptr\n     }\n+    fn elem_ty_and_len<'tcx>(self, ty: Ty<'tcx>) -> (Ty<'tcx>, u64) {\n+        match ty.sty {\n+            ty::TyArray(elem, n) => (elem, n as u64),\n+            ty::TySlice(elem) => if let LvalueExtra::Length(len) = self.extra {\n+                (elem, len)\n+            } else {\n+                bug!(\"elem_ty_and_len called on a slice given non-slice lvalue: {:?}\", self);\n+            },\n+            _ => bug!(\"elem_ty_and_len expected array or slice, got {:?}\", ty),\n+        }\n+    }\n }\n \n impl<'mir, 'tcx: 'mir> Deref for CachedMir<'mir, 'tcx> {\n@@ -1236,6 +1258,10 @@ fn report(tcx: TyCtxt, ecx: &EvalContext, e: EvalError) {\n     };\n     let mut err = tcx.sess.struct_span_err(span, &e.to_string());\n     for &Frame { def_id, substs, span, .. } in ecx.stack().iter().rev() {\n+        if tcx.def_key(def_id).disambiguated_data.data == DefPathData::ClosureExpr {\n+            err.span_note(span, \"inside call to closure\");\n+            continue;\n+        }\n         // FIXME(solson): Find a way to do this without this Display impl hack.\n         use rustc::util::ppaux;\n         use std::fmt;"}, {"sha": "bee05ecd7fae3f88b167bd913964da10532f1ac4", "filename": "tests/compile-fail/send-is-not-static-par-for.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2080faefa9a15a69289f5124b861a9376e35b762/tests%2Fcompile-fail%2Fsend-is-not-static-par-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2080faefa9a15a69289f5124b861a9376e35b762/tests%2Fcompile-fail%2Fsend-is-not-static-par-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fsend-is-not-static-par-for.rs?ref=2080faefa9a15a69289f5124b861a9376e35b762", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//error-pattern: no mir for `std::panicking::panicking`\n+\n+use std::sync::Mutex;\n+\n+fn par_for<I, F>(iter: I, f: F)\n+    where I: Iterator,\n+          I::Item: Send,\n+          F: Fn(I::Item) + Sync\n+{\n+    for item in iter {\n+        f(item)\n+    }\n+}\n+\n+fn sum(x: &[i32]) {\n+    let sum_lengths = Mutex::new(0);\n+    par_for(x.windows(4), |x| {\n+        *sum_lengths.lock().unwrap() += x.len()\n+    });\n+\n+    assert_eq!(*sum_lengths.lock().unwrap(), (x.len() - 3) * 4);\n+}\n+\n+fn main() {\n+    let mut elements = [0; 20];\n+\n+    // iterators over references into this stack frame\n+    par_for(elements.iter_mut().enumerate(), |(i, x)| {\n+        *x = i as i32\n+    });\n+\n+    sum(&elements)\n+}"}, {"sha": "e8f43bbbe019a64a6ba2c7527fdb02505be347e1", "filename": "tests/compiletest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2080faefa9a15a69289f5124b861a9376e35b762/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2080faefa9a15a69289f5124b861a9376e35b762/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=2080faefa9a15a69289f5124b861a9376e35b762", "patch": "@@ -54,7 +54,6 @@ fn compile_test() {\n             .expect(\"need to specify RUST_SYSROOT env var or use rustup or multirust\")\n             .to_owned(),\n     };\n-    compile_fail(&sysroot);\n     run_pass();\n     for_all_targets(&sysroot, |target| {\n         let files = std::fs::read_dir(\"tests/run-pass\").unwrap();\n@@ -92,7 +91,7 @@ fn compile_test() {\n                 },\n                 Ok(output) => {\n                     let output_err = std::str::from_utf8(&output.stderr).unwrap();\n-                    if let Some(text) = output_err.splitn(2, \"thread 'main' panicked at 'no mir for `\").nth(1) {\n+                    if let Some(text) = output_err.splitn(2, \"no mir for `\").nth(1) {\n                         mir_not_found += 1;\n                         let end = text.find('`').unwrap();\n                         writeln!(stderr.lock(), \"NO MIR FOR `{}`\", &text[..end]).unwrap();\n@@ -117,4 +116,5 @@ fn compile_test() {\n         writeln!(stderr.lock(), \"{} success, {} mir not found, {} crate not found, {} failed\", success, mir_not_found, crate_not_found, failed).unwrap();\n         assert_eq!(failed, 0, \"some tests failed\");\n     });\n+    compile_fail(&sysroot);\n }"}, {"sha": "cee0caeb465f56d3206266d85cc4f6f769730fb3", "filename": "tests/run-pass/issue-15080.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2080faefa9a15a69289f5124b861a9376e35b762/tests%2Frun-pass%2Fissue-15080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2080faefa9a15a69289f5124b861a9376e35b762/tests%2Frun-pass%2Fissue-15080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-15080.rs?ref=2080faefa9a15a69289f5124b861a9376e35b762", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+#![feature(slice_patterns)]\n+\n+fn main() {\n+    let mut x: &[_] = &[1, 2, 3, 4];\n+\n+    let mut result = vec!();\n+    loop {\n+        x = match *x {\n+            [1, n, 3, ref rest..] => {\n+                result.push(n);\n+                rest\n+            }\n+            [n, ref rest..] => {\n+                result.push(n);\n+                rest\n+            }\n+            [] =>\n+                break\n+        }\n+    }\n+    assert_eq!(result, [2, 4]);\n+}"}, {"sha": "6c87e8d35fbf0643c1402c409329ad64d4aa4ab3", "filename": "tests/run-pass/issue-17877.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2080faefa9a15a69289f5124b861a9376e35b762/tests%2Frun-pass%2Fissue-17877.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2080faefa9a15a69289f5124b861a9376e35b762/tests%2Frun-pass%2Fissue-17877.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-17877.rs?ref=2080faefa9a15a69289f5124b861a9376e35b762", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+#![feature(slice_patterns)]\n+\n+fn main() {\n+    assert_eq!(match [0u8; 1024] {\n+        _ => 42_usize,\n+    }, 42_usize);\n+\n+    assert_eq!(match [0u8; 1024] {\n+        [1, _..] => 0_usize,\n+        [0, _..] => 1_usize,\n+        _ => 2_usize\n+    }, 1_usize);\n+}"}, {"sha": "ac80a4211ada627fbfc0c0a2eb50dfda3d31f570", "filename": "tests/run-pass/vec-matching-fold.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/2080faefa9a15a69289f5124b861a9376e35b762/tests%2Frun-pass%2Fvec-matching-fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2080faefa9a15a69289f5124b861a9376e35b762/tests%2Frun-pass%2Fvec-matching-fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fvec-matching-fold.rs?ref=2080faefa9a15a69289f5124b861a9376e35b762", "patch": "@@ -0,0 +1,58 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+#![feature(advanced_slice_patterns)]\n+#![feature(slice_patterns)]\n+\n+use std::fmt::Debug;\n+\n+fn foldl<T, U, F>(values: &[T],\n+                  initial: U,\n+                  mut function: F)\n+                  -> U where\n+    U: Clone+Debug, T:Debug,\n+    F: FnMut(U, &T) -> U,\n+{    match values {\n+        &[ref head, ref tail..] =>\n+            foldl(tail, function(initial, head), function),\n+        &[] => {\n+            // FIXME: call guards\n+            let res = initial.clone(); res\n+        }\n+    }\n+}\n+\n+fn foldr<T, U, F>(values: &[T],\n+                  initial: U,\n+                  mut function: F)\n+                  -> U where\n+    U: Clone,\n+    F: FnMut(&T, U) -> U,\n+{\n+    match values {\n+        &[ref head.., ref tail] =>\n+            foldr(head, function(tail, initial), function),\n+        &[] => {\n+            // FIXME: call guards\n+            let res = initial.clone(); res\n+        }\n+    }\n+}\n+\n+pub fn main() {\n+    let x = &[1, 2, 3, 4, 5];\n+\n+    let product = foldl(x, 1, |a, b| a * *b);\n+    assert_eq!(product, 120);\n+\n+    let sum = foldr(x, 0, |a, b| *a + b);\n+    assert_eq!(sum, 15);\n+}"}]}