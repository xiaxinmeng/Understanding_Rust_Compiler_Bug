{"sha": "e25077704164071a1ef87cdc90fe7dd1872ba3fa", "node_id": "C_kwDOAAsO6NoAKGUyNTA3NzcwNDE2NDA3MWExZWY4N2NkYzkwZmU3ZGQxODcyYmEzZmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-09T04:04:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-09T04:04:01Z"}, "message": "Auto merge of #91691 - matthiaskrgr:rollup-wfommdr, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #91042 (Use Vec extend instead of repeated pushes on several places)\n - #91476 (Improve 'cannot contain emoji' error.)\n - #91568 (Pretty print break and continue without redundant space)\n - #91645 (Implement `core::future::join!`)\n - #91666 (update Miri)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "0c1e5f88fb29780ecfd8c8234dc6f7e7cd7e3d57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c1e5f88fb29780ecfd8c8234dc6f7e7cd7e3d57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e25077704164071a1ef87cdc90fe7dd1872ba3fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e25077704164071a1ef87cdc90fe7dd1872ba3fa", "html_url": "https://github.com/rust-lang/rust/commit/e25077704164071a1ef87cdc90fe7dd1872ba3fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e25077704164071a1ef87cdc90fe7dd1872ba3fa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985", "html_url": "https://github.com/rust-lang/rust/commit/3c857f48ce12d1f98f3ea6d48eb9e33d8d60c985"}, {"sha": "229aa1b106634c88084887f3e4fb20abb8c92b43", "url": "https://api.github.com/repos/rust-lang/rust/commits/229aa1b106634c88084887f3e4fb20abb8c92b43", "html_url": "https://github.com/rust-lang/rust/commit/229aa1b106634c88084887f3e4fb20abb8c92b43"}], "stats": {"total": 330, "additions": 291, "deletions": 39}, "files": [{"sha": "6c70cafb01fabe0a4043e202bfd93f60285cb406", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e25077704164071a1ef87cdc90fe7dd1872ba3fa/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25077704164071a1ef87cdc90fe7dd1872ba3fa/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=e25077704164071a1ef87cdc90fe7dd1872ba3fa", "patch": "@@ -2135,22 +2135,20 @@ impl<'a> State<'a> {\n             ast::ExprKind::Path(Some(ref qself), ref path) => self.print_qpath(path, qself, true),\n             ast::ExprKind::Break(opt_label, ref opt_expr) => {\n                 self.word(\"break\");\n-                self.space();\n                 if let Some(label) = opt_label {\n-                    self.print_ident(label.ident);\n                     self.space();\n+                    self.print_ident(label.ident);\n                 }\n                 if let Some(ref expr) = *opt_expr {\n-                    self.print_expr_maybe_paren(expr, parser::PREC_JUMP);\n                     self.space();\n+                    self.print_expr_maybe_paren(expr, parser::PREC_JUMP);\n                 }\n             }\n             ast::ExprKind::Continue(opt_label) => {\n                 self.word(\"continue\");\n-                self.space();\n                 if let Some(label) = opt_label {\n+                    self.space();\n                     self.print_ident(label.ident);\n-                    self.space()\n                 }\n             }\n             ast::ExprKind::Ret(ref result) => {"}, {"sha": "c3601d0997c236af711681ee1d9fd6b3ef20072f", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e25077704164071a1ef87cdc90fe7dd1872ba3fa/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25077704164071a1ef87cdc90fe7dd1872ba3fa/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=e25077704164071a1ef87cdc90fe7dd1872ba3fa", "patch": "@@ -1543,22 +1543,20 @@ impl<'a> State<'a> {\n             hir::ExprKind::Path(ref qpath) => self.print_qpath(qpath, true),\n             hir::ExprKind::Break(destination, ref opt_expr) => {\n                 self.word(\"break\");\n-                self.space();\n                 if let Some(label) = destination.label {\n-                    self.print_ident(label.ident);\n                     self.space();\n+                    self.print_ident(label.ident);\n                 }\n                 if let Some(ref expr) = *opt_expr {\n-                    self.print_expr_maybe_paren(expr, parser::PREC_JUMP);\n                     self.space();\n+                    self.print_expr_maybe_paren(expr, parser::PREC_JUMP);\n                 }\n             }\n             hir::ExprKind::Continue(destination) => {\n                 self.word(\"continue\");\n-                self.space();\n                 if let Some(label) = destination.label {\n+                    self.space();\n                     self.print_ident(label.ident);\n-                    self.space()\n                 }\n             }\n             hir::ExprKind::Ret(ref result) => {"}, {"sha": "da76f221269fe7a61032d0d41b9b43f22d86fa01", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e25077704164071a1ef87cdc90fe7dd1872ba3fa/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25077704164071a1ef87cdc90fe7dd1872ba3fa/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=e25077704164071a1ef87cdc90fe7dd1872ba3fa", "patch": "@@ -10,7 +10,7 @@ use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::parallel;\n use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n use rustc_data_structures::temp_dir::MaybeTempDir;\n-use rustc_errors::{ErrorReported, PResult};\n+use rustc_errors::{Applicability, ErrorReported, PResult};\n use rustc_expand::base::ExtCtxt;\n use rustc_hir::def_id::{StableCrateId, LOCAL_CRATE};\n use rustc_hir::Crate;\n@@ -456,10 +456,26 @@ pub fn configure_and_expand(\n         identifiers.sort_by_key(|&(key, _)| key);\n         for (ident, mut spans) in identifiers.into_iter() {\n             spans.sort();\n-            sess.diagnostic().span_err(\n-                MultiSpan::from(spans),\n-                &format!(\"identifiers cannot contain emoji: `{}`\", ident),\n-            );\n+            if ident == sym::ferris {\n+                let first_span = spans[0];\n+                sess.diagnostic()\n+                    .struct_span_err(\n+                        MultiSpan::from(spans),\n+                        \"Ferris cannot be used as an identifier\",\n+                    )\n+                    .span_suggestion(\n+                        first_span,\n+                        \"try using their name instead\",\n+                        \"ferris\".to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    )\n+                    .emit();\n+            } else {\n+                sess.diagnostic().span_err(\n+                    MultiSpan::from(spans),\n+                    &format!(\"identifiers cannot contain emoji: `{}`\", ident),\n+                );\n+            }\n         }\n     });\n "}, {"sha": "01e72a6c1588d6393bb9a9d148509baee1a44cd3", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e25077704164071a1ef87cdc90fe7dd1872ba3fa/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25077704164071a1ef87cdc90fe7dd1872ba3fa/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=e25077704164071a1ef87cdc90fe7dd1872ba3fa", "patch": "@@ -329,9 +329,7 @@ impl<'a, 'tcx> CoverageSpans<'a, 'tcx> {\n     fn mir_to_initial_sorted_coverage_spans(&self) -> Vec<CoverageSpan> {\n         let mut initial_spans = Vec::<CoverageSpan>::with_capacity(self.mir_body.num_nodes() * 2);\n         for (bcb, bcb_data) in self.basic_coverage_blocks.iter_enumerated() {\n-            for coverage_span in self.bcb_to_initial_coverage_spans(bcb, bcb_data) {\n-                initial_spans.push(coverage_span);\n-            }\n+            initial_spans.extend(self.bcb_to_initial_coverage_spans(bcb, bcb_data));\n         }\n \n         if initial_spans.is_empty() {"}, {"sha": "492cecf7d6734eb539f78040fd3af74150bdade9", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e25077704164071a1ef87cdc90fe7dd1872ba3fa/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25077704164071a1ef87cdc90fe7dd1872ba3fa/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=e25077704164071a1ef87cdc90fe7dd1872ba3fa", "patch": "@@ -630,6 +630,7 @@ symbols! {\n         fdiv_fast,\n         feature,\n         fence,\n+        ferris: \"\ud83e\udd80\",\n         fetch_update,\n         ffi,\n         ffi_const,"}, {"sha": "aec9da9f8d4f8e534c3ce7344f5c960f80e44325", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e25077704164071a1ef87cdc90fe7dd1872ba3fa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25077704164071a1ef87cdc90fe7dd1872ba3fa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=e25077704164071a1ef87cdc90fe7dd1872ba3fa", "patch": "@@ -498,9 +498,7 @@ fn orphan_check_trait_ref<'tcx>(\n             return Err(OrphanCheckErr::UncoveredTy(input_ty, local_type));\n         }\n \n-        for input_ty in non_local_tys {\n-            non_local_spans.push((input_ty, i == 0));\n-        }\n+        non_local_spans.extend(non_local_tys.into_iter().map(|input_ty| (input_ty, i == 0)));\n     }\n     // If we exit above loop, never found a local type.\n     debug!(\"orphan_check_trait_ref: no local type\");"}, {"sha": "4d9559c96af0e9f1b3f24a70971f164d66983887", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e25077704164071a1ef87cdc90fe7dd1872ba3fa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25077704164071a1ef87cdc90fe7dd1872ba3fa/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=e25077704164071a1ef87cdc90fe7dd1872ba3fa", "patch": "@@ -362,9 +362,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             .infcx\n             .probe(|_| self.match_projection_obligation_against_definition_bounds(obligation));\n \n-        for predicate_index in result {\n-            candidates.vec.push(ProjectionCandidate(predicate_index));\n-        }\n+        candidates.vec.extend(result.into_iter().map(ProjectionCandidate));\n     }\n \n     /// Given an obligation like `<SomeTrait for T>`, searches the obligations that the caller"}, {"sha": "2e80f85972fa7afb130e9a89e095d43287bc030c", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e25077704164071a1ef87cdc90fe7dd1872ba3fa/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25077704164071a1ef87cdc90fe7dd1872ba3fa/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=e25077704164071a1ef87cdc90fe7dd1872ba3fa", "patch": "@@ -686,9 +686,8 @@ fn bounds_from_generic_predicates<'tcx>(\n     };\n     let mut where_clauses = vec![];\n     for (ty, bounds) in types {\n-        for bound in &bounds {\n-            where_clauses.push(format!(\"{}: {}\", ty, tcx.def_path_str(*bound)));\n-        }\n+        where_clauses\n+            .extend(bounds.into_iter().map(|bound| format!(\"{}: {}\", ty, tcx.def_path_str(bound))));\n     }\n     for projection in &projections {\n         let p = projection.skip_binder();"}, {"sha": "a98afd1e3e1dc91b534cb82f1035a0740244e653", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e25077704164071a1ef87cdc90fe7dd1872ba3fa/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25077704164071a1ef87cdc90fe7dd1872ba3fa/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=e25077704164071a1ef87cdc90fe7dd1872ba3fa", "patch": "@@ -904,10 +904,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> MigrationWarningReason {\n         let mut reasons = MigrationWarningReason::default();\n \n-        for auto_trait in auto_trait_reasons {\n-            reasons.auto_traits.push(auto_trait);\n-        }\n-\n+        reasons.auto_traits.extend(auto_trait_reasons);\n         reasons.drop_order = drop_order;\n \n         reasons"}, {"sha": "aadff103ebab44ef04973612948e6113ddaba30f", "filename": "library/core/src/future/join.rs", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/e25077704164071a1ef87cdc90fe7dd1872ba3fa/library%2Fcore%2Fsrc%2Ffuture%2Fjoin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25077704164071a1ef87cdc90fe7dd1872ba3fa/library%2Fcore%2Fsrc%2Ffuture%2Fjoin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fjoin.rs?ref=e25077704164071a1ef87cdc90fe7dd1872ba3fa", "patch": "@@ -0,0 +1,147 @@\n+#![allow(unused_imports)] // items are used by the macro\n+\n+use crate::cell::UnsafeCell;\n+use crate::future::{poll_fn, Future};\n+use crate::mem;\n+use crate::pin::Pin;\n+use crate::task::{Context, Poll};\n+\n+/// Polls multiple futures simultaneously, returning a tuple\n+/// of all results once complete.\n+///\n+/// While `join!(a, b)` is similar to `(a.await, b.await)`,\n+/// `join!` polls both futures concurrently and is therefore more efficient.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(future_join, future_poll_fn)]\n+///\n+/// use std::future::join;\n+///\n+/// async fn one() -> usize { 1 }\n+/// async fn two() -> usize { 2 }\n+///\n+/// # let _ =  async {\n+/// let x = join!(one(), two()).await;\n+/// assert_eq!(x, (1, 2));\n+/// # };\n+/// ```\n+///\n+/// `join!` is variadic, so you can pass any number of futures:\n+///\n+/// ```\n+/// #![feature(future_join, future_poll_fn)]\n+///\n+/// use std::future::join;\n+///\n+/// async fn one() -> usize { 1 }\n+/// async fn two() -> usize { 2 }\n+/// async fn three() -> usize { 3 }\n+///\n+/// # let _ = async {\n+/// let x = join!(one(), two(), three()).await;\n+/// assert_eq!(x, (1, 2, 3));\n+/// # };\n+/// ```\n+#[unstable(feature = \"future_join\", issue = \"91642\")]\n+pub macro join {\n+    ( $($fut:expr),* $(,)?) => {\n+        join! { @count: (), @futures: {}, @rest: ($($fut,)*) }\n+    },\n+    // Recurse until we have the position of each future in the tuple\n+    (\n+        // A token for each future that has been expanded: \"_ _ _\"\n+        @count: ($($count:tt)*),\n+        // Futures and their positions in the tuple: \"{ a => (_), b => (_ _)) }\"\n+        @futures: { $($fut:tt)* },\n+        // Take a future from @rest to expand\n+        @rest: ($current:expr, $($rest:tt)*)\n+    ) => {\n+        join! {\n+            @count: ($($count)* _),\n+            @futures: { $($fut)* $current => ($($count)*), },\n+            @rest: ($($rest)*)\n+        }\n+    },\n+    // Now generate the output future\n+    (\n+        @count: ($($count:tt)*),\n+        @futures: {\n+            $( $(@$f:tt)? $fut:expr => ( $($pos:tt)* ), )*\n+        },\n+        @rest: ()\n+    ) => {\n+        async move {\n+            let mut futures = ( $( MaybeDone::Future($fut), )* );\n+\n+            poll_fn(move |cx| {\n+                let mut done = true;\n+\n+                $(\n+                    let ( $($pos,)* fut, .. ) = &mut futures;\n+\n+                    // SAFETY: The futures are never moved\n+                    done &= unsafe { Pin::new_unchecked(fut).poll(cx).is_ready() };\n+                )*\n+\n+                if done {\n+                    // Extract all the outputs\n+                    Poll::Ready(($({\n+                        let ( $($pos,)* fut, .. ) = &mut futures;\n+\n+                        fut.take_output().unwrap()\n+                    }),*))\n+                } else {\n+                    Poll::Pending\n+                }\n+            }).await\n+        }\n+    }\n+}\n+\n+/// Future used by `join!` that stores it's output to\n+/// be later taken and doesn't panic when polled after ready.\n+///\n+/// This type is public in a private module for use by the macro.\n+#[allow(missing_debug_implementations)]\n+#[unstable(feature = \"future_join\", issue = \"91642\")]\n+pub enum MaybeDone<F: Future> {\n+    Future(F),\n+    Done(F::Output),\n+    Took,\n+}\n+\n+#[unstable(feature = \"future_join\", issue = \"91642\")]\n+impl<F: Future> MaybeDone<F> {\n+    pub fn take_output(&mut self) -> Option<F::Output> {\n+        match &*self {\n+            MaybeDone::Done(_) => match mem::replace(self, Self::Took) {\n+                MaybeDone::Done(val) => Some(val),\n+                _ => unreachable!(),\n+            },\n+            _ => None,\n+        }\n+    }\n+}\n+\n+#[unstable(feature = \"future_join\", issue = \"91642\")]\n+impl<F: Future> Future for MaybeDone<F> {\n+    type Output = ();\n+\n+    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n+        // SAFETY: pinning in structural for `f`\n+        unsafe {\n+            match self.as_mut().get_unchecked_mut() {\n+                MaybeDone::Future(f) => match Pin::new_unchecked(f).poll(cx) {\n+                    Poll::Ready(val) => self.set(Self::Done(val)),\n+                    Poll::Pending => return Poll::Pending,\n+                },\n+                MaybeDone::Done(_) => {}\n+                MaybeDone::Took => unreachable!(),\n+            }\n+        }\n+\n+        Poll::Ready(())\n+    }\n+}"}, {"sha": "88db584aefd08df0a75ccaca7efab0d29fa8edeb", "filename": "library/core/src/future/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e25077704164071a1ef87cdc90fe7dd1872ba3fa/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25077704164071a1ef87cdc90fe7dd1872ba3fa/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs?ref=e25077704164071a1ef87cdc90fe7dd1872ba3fa", "patch": "@@ -11,13 +11,17 @@ use crate::{\n \n mod future;\n mod into_future;\n+mod join;\n mod pending;\n mod poll_fn;\n mod ready;\n \n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub use self::future::Future;\n \n+#[unstable(feature = \"future_join\", issue = \"91642\")]\n+pub use self::join::join;\n+\n #[unstable(feature = \"into_future\", issue = \"67644\")]\n pub use into_future::IntoFuture;\n "}, {"sha": "73249b1b8a4355d899df06664e84a40e11751aa5", "filename": "library/core/tests/future.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/e25077704164071a1ef87cdc90fe7dd1872ba3fa/library%2Fcore%2Ftests%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25077704164071a1ef87cdc90fe7dd1872ba3fa/library%2Fcore%2Ftests%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Ffuture.rs?ref=e25077704164071a1ef87cdc90fe7dd1872ba3fa", "patch": "@@ -0,0 +1,85 @@\n+use std::future::{join, Future};\n+use std::pin::Pin;\n+use std::sync::Arc;\n+use std::task::{Context, Poll, Wake};\n+use std::thread;\n+\n+struct PollN {\n+    val: usize,\n+    polled: usize,\n+    num: usize,\n+}\n+\n+impl Future for PollN {\n+    type Output = usize;\n+\n+    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n+        self.polled += 1;\n+\n+        if self.polled == self.num {\n+            return Poll::Ready(self.val);\n+        }\n+\n+        cx.waker().wake_by_ref();\n+        Poll::Pending\n+    }\n+}\n+\n+fn poll_n(val: usize, num: usize) -> PollN {\n+    PollN { val, num, polled: 0 }\n+}\n+\n+#[test]\n+fn test_join() {\n+    block_on(async move {\n+        let x = join!(async { 0 }).await;\n+        assert_eq!(x, 0);\n+\n+        let x = join!(async { 0 }, async { 1 }).await;\n+        assert_eq!(x, (0, 1));\n+\n+        let x = join!(async { 0 }, async { 1 }, async { 2 }).await;\n+        assert_eq!(x, (0, 1, 2));\n+\n+        let x = join!(\n+            poll_n(0, 1),\n+            poll_n(1, 5),\n+            poll_n(2, 2),\n+            poll_n(3, 1),\n+            poll_n(4, 2),\n+            poll_n(5, 3),\n+            poll_n(6, 4),\n+            poll_n(7, 1)\n+        )\n+        .await;\n+        assert_eq!(x, (0, 1, 2, 3, 4, 5, 6, 7));\n+\n+        let y = String::new();\n+        let x = join!(async {\n+            println!(\"{}\", &y);\n+            1\n+        })\n+        .await;\n+        assert_eq!(x, 1);\n+    });\n+}\n+\n+fn block_on(fut: impl Future) {\n+    struct Waker;\n+    impl Wake for Waker {\n+        fn wake(self: Arc<Self>) {\n+            thread::current().unpark()\n+        }\n+    }\n+\n+    let waker = Arc::new(Waker).into();\n+    let mut cx = Context::from_waker(&waker);\n+    let mut fut = Box::pin(fut);\n+\n+    loop {\n+        match fut.as_mut().poll(&mut cx) {\n+            Poll::Ready(_) => break,\n+            Poll::Pending => thread::park(),\n+        }\n+    }\n+}"}, {"sha": "73a3a1fc3e0af8df8b5fe6803515e43582972014", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e25077704164071a1ef87cdc90fe7dd1872ba3fa/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25077704164071a1ef87cdc90fe7dd1872ba3fa/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=e25077704164071a1ef87cdc90fe7dd1872ba3fa", "patch": "@@ -29,6 +29,8 @@\n #![feature(flt2dec)]\n #![feature(fmt_internals)]\n #![feature(float_minimum_maximum)]\n+#![feature(future_join)]\n+#![feature(future_poll_fn)]\n #![feature(array_from_fn)]\n #![feature(hashmap_internals)]\n #![feature(try_find)]\n@@ -94,6 +96,7 @@ mod clone;\n mod cmp;\n mod const_ptr;\n mod fmt;\n+mod future;\n mod hash;\n mod intrinsics;\n mod iter;"}, {"sha": "e32f5ca24ea0f9de389575b53363f89279239cd5", "filename": "src/test/pretty/ast-stmt-expr-attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e25077704164071a1ef87cdc90fe7dd1872ba3fa/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25077704164071a1ef87cdc90fe7dd1872ba3fa/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fast-stmt-expr-attr.rs?ref=e25077704164071a1ef87cdc90fe7dd1872ba3fa", "patch": "@@ -110,8 +110,8 @@ fn syntax() {\n     let _ = #[attr] &mut 0;\n     let _ = #[attr] &#[attr] 0;\n     let _ = #[attr] &mut #[attr] 0;\n-    let _ = #[attr] break ;\n-    let _ = #[attr] continue ;\n+    let _ = #[attr] break;\n+    let _ = #[attr] continue;\n     let _ = #[attr] return;\n     let _ = #[attr] foo!();\n     let _ = #[attr] foo!(#! [attr]);"}, {"sha": "9b10fd86c4778d8ee4f744d6566c667d6c5cea63", "filename": "src/test/pretty/hir-pretty-loop.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e25077704164071a1ef87cdc90fe7dd1872ba3fa/src%2Ftest%2Fpretty%2Fhir-pretty-loop.pp", "raw_url": "https://github.com/rust-lang/rust/raw/e25077704164071a1ef87cdc90fe7dd1872ba3fa/src%2Ftest%2Fpretty%2Fhir-pretty-loop.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fhir-pretty-loop.pp?ref=e25077704164071a1ef87cdc90fe7dd1872ba3fa", "patch": "@@ -6,4 +6,4 @@\n // pretty-mode:hir\n // pp-exact:hir-pretty-loop.pp\n \n-pub fn foo() { loop { break ; } }\n+pub fn foo() { loop { break; } }"}, {"sha": "01533cd8107b07e95890c0399a6dcecaef8883b1", "filename": "src/test/pretty/stmt_expr_attributes.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e25077704164071a1ef87cdc90fe7dd1872ba3fa/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25077704164071a1ef87cdc90fe7dd1872ba3fa/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs?ref=e25077704164071a1ef87cdc90fe7dd1872ba3fa", "patch": "@@ -229,9 +229,8 @@ fn _11() {\n     let _ = #[rustc_dummy] &mut 0;\n     let _ = #[rustc_dummy] &#[rustc_dummy] 0;\n     let _ = #[rustc_dummy] &mut #[rustc_dummy] 0;\n-    // FIXME: pp bug, extra space after keyword?\n-    while false { let _ = #[rustc_dummy] continue ; }\n-    while true { let _ = #[rustc_dummy] break ; }\n+    while false { let _ = #[rustc_dummy] continue; }\n+    while true { let _ = #[rustc_dummy] break; }\n     || #[rustc_dummy] return;\n     let _ = #[rustc_dummy] expr_mac!();\n     let _ = #[rustc_dummy] expr_mac![];"}, {"sha": "b50c046bcb204748e12958bd9d7bc9d42863e723", "filename": "src/test/ui/parser/emoji-identifiers.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e25077704164071a1ef87cdc90fe7dd1872ba3fa/src%2Ftest%2Fui%2Fparser%2Femoji-identifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e25077704164071a1ef87cdc90fe7dd1872ba3fa/src%2Ftest%2Fui%2Fparser%2Femoji-identifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Femoji-identifiers.rs?ref=e25077704164071a1ef87cdc90fe7dd1872ba3fa", "patch": "@@ -13,4 +13,7 @@ fn main() {\n     let _ = i_like_to_\ud83d\ude04_a_lot() \u2796 4; //~ ERROR cannot find function `i_like_to_\ud83d\ude04_a_lot` in this scope\n     //~^ ERROR identifiers cannot contain emoji\n     //~| ERROR unknown start of token: \\u{2796}\n+\n+    let \ud83e\udd80 = 1;//~ ERROR Ferris cannot be used as an identifier\n+    dbg!(\ud83e\udd80);\n }"}, {"sha": "7dc589e556386b19bba6153b22d4e4c5d6373a16", "filename": "src/test/ui/parser/emoji-identifiers.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e25077704164071a1ef87cdc90fe7dd1872ba3fa/src%2Ftest%2Fui%2Fparser%2Femoji-identifiers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e25077704164071a1ef87cdc90fe7dd1872ba3fa/src%2Ftest%2Fui%2Fparser%2Femoji-identifiers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Femoji-identifiers.stderr?ref=e25077704164071a1ef87cdc90fe7dd1872ba3fa", "patch": "@@ -18,6 +18,14 @@ LL | fn i_like_to_\ud83d\ude05_a_lot() -> \ud83d\udc40 {\n LL |     let _ = i_like_to_\ud83d\ude04_a_lot() \u2796 4;\n    |             ^^^^^^^^^^^^^^^^^^ help: a function with a similar name exists: `i_like_to_\ud83d\ude05_a_lot`\n \n+error: Ferris cannot be used as an identifier\n+  --> $DIR/emoji-identifiers.rs:17:9\n+   |\n+LL |     let \ud83e\udd80 = 1;\n+   |         ^^ help: try using their name instead: `ferris`\n+LL |     dbg!(\ud83e\udd80);\n+   |          ^^\n+\n error: identifiers cannot contain emoji: `ABig\ud83d\udc69\ud83d\udc69\ud83d\udc67\ud83d\udc67Family`\n   --> $DIR/emoji-identifiers.rs:1:8\n    |\n@@ -77,7 +85,7 @@ LL |     \ud83d\udc40::full_of\u2728()\n    |         function or associated item not found in `\ud83d\udc40`\n    |         help: there is an associated function with a similar name: `full_of_\u2728`\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 10 previous errors\n \n Some errors have detailed explanations: E0425, E0599.\n For more information about an error, try `rustc --explain E0425`."}, {"sha": "dadcbebfbd017aac2358cf652a4bd71a91694edc", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=e25077704164071a1ef87cdc90fe7dd1872ba3fa", "patch": "@@ -1 +1 @@\n-Subproject commit 81e59e6b92cf1729aabbbbf09b81a81a03775d64\n+Subproject commit dadcbebfbd017aac2358cf652a4bd71a91694edc"}]}