{"sha": "68096ccb3f37dcdd0c454ced5496dda78589aae9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MDk2Y2NiM2YzN2RjZGQwYzQ1NGNlZDU0OTZkZGE3ODU4OWFhZTk=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-09-18T17:58:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-18T17:58:06Z"}, "message": "Rollup merge of #64532 - ecstatic-morse:dataflow-cursor-get, r=tmandry\n\nReplace `state_for_location` with `DataflowResultsCursor`\n\nThese are two different ways of getting the same data from the result of a dataflow analysis. However, `state_for_location` goes quadratic if you try to call it for every statement in the body.", "tree": {"sha": "20fc52c1ebad6800d591f795968e2cdbf4137d0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20fc52c1ebad6800d591f795968e2cdbf4137d0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68096ccb3f37dcdd0c454ced5496dda78589aae9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdgnAuCRBK7hj4Ov3rIwAAdHIIAJT4jLAByygFAMd/HY8892hy\nALbB6B1zXf4r9k8/BjfuUHea9xb96HaMJ70mck4GVlo8iZ4a8im+qpNLB7/wHLdK\nUSYvbykI+A7kO4lXQ/sKhkGJdlXKGTS0VrWiOoqquFN6Td8PsQSCqE3n2dF1aGYI\n6DnaoNRGaskNQ6fyEvbGln6hJGyVN2fRE6VgU/xbBISZZvK5FN/jw8DTCqKI2xOr\nMOFIUWUTSFcf5odjE+GTKCn60noZcmW5NhRVAhLLJmUwx1SGL156WCHfdI/LOZbx\na+nMi/L5X63z1d+fruSSx6mx9+a+UZMOHFJfSv3DDeuw3seS4aKkhe9GJG19kdw=\n=2Yyq\n-----END PGP SIGNATURE-----\n", "payload": "tree 20fc52c1ebad6800d591f795968e2cdbf4137d0f\nparent 05d93a7d06b77982a24683fdc3d4f9e66570d547\nparent 73c7a6813d1eae1e5c37c00fecd897cb7d45908c\nauthor Tyler Mandry <tmandry@gmail.com> 1568829486 -0700\ncommitter GitHub <noreply@github.com> 1568829486 -0700\n\nRollup merge of #64532 - ecstatic-morse:dataflow-cursor-get, r=tmandry\n\nReplace `state_for_location` with `DataflowResultsCursor`\n\nThese are two different ways of getting the same data from the result of a dataflow analysis. However, `state_for_location` goes quadratic if you try to call it for every statement in the body.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68096ccb3f37dcdd0c454ced5496dda78589aae9", "html_url": "https://github.com/rust-lang/rust/commit/68096ccb3f37dcdd0c454ced5496dda78589aae9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68096ccb3f37dcdd0c454ced5496dda78589aae9/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05d93a7d06b77982a24683fdc3d4f9e66570d547", "url": "https://api.github.com/repos/rust-lang/rust/commits/05d93a7d06b77982a24683fdc3d4f9e66570d547", "html_url": "https://github.com/rust-lang/rust/commit/05d93a7d06b77982a24683fdc3d4f9e66570d547"}, {"sha": "73c7a6813d1eae1e5c37c00fecd897cb7d45908c", "url": "https://api.github.com/repos/rust-lang/rust/commits/73c7a6813d1eae1e5c37c00fecd897cb7d45908c", "html_url": "https://github.com/rust-lang/rust/commit/73c7a6813d1eae1e5c37c00fecd897cb7d45908c"}], "stats": {"total": 65, "additions": 17, "deletions": 48}, "files": [{"sha": "319abbbe7b64347ce01c1187c186fb7a106ef4a5", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/68096ccb3f37dcdd0c454ced5496dda78589aae9/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68096ccb3f37dcdd0c454ced5496dda78589aae9/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=68096ccb3f37dcdd0c454ced5496dda78589aae9", "patch": "@@ -453,34 +453,10 @@ where\n     {\n         self.flow_state.each_gen_bit(f)\n     }\n-}\n-\n-pub fn state_for_location<'tcx, T: BitDenotation<'tcx>>(loc: Location,\n-                                                        analysis: &T,\n-                                                        result: &DataflowResults<'tcx, T>,\n-                                                        body: &Body<'tcx>)\n-    -> BitSet<T::Idx> {\n-    let mut trans = GenKill::from_elem(HybridBitSet::new_empty(analysis.bits_per_block()));\n \n-    for stmt in 0..loc.statement_index {\n-        let mut stmt_loc = loc;\n-        stmt_loc.statement_index = stmt;\n-        analysis.before_statement_effect(&mut trans, stmt_loc);\n-        analysis.statement_effect(&mut trans, stmt_loc);\n+    pub fn get(&self) -> &BitSet<BD::Idx> {\n+        self.flow_state.as_dense()\n     }\n-\n-    // Apply the pre-statement effect of the statement we're evaluating.\n-    if loc.statement_index == body[loc.block].statements.len() {\n-        analysis.before_terminator_effect(&mut trans, loc);\n-    } else {\n-        analysis.before_statement_effect(&mut trans, loc);\n-    }\n-\n-    // Apply the transfer function for all preceding statements to the fixpoint\n-    // at the start of the block.\n-    let mut state = result.sets().entry_set_for(loc.block.index()).to_owned();\n-    trans.apply(&mut state);\n-    state\n }\n \n pub struct DataflowAnalysis<'a, 'tcx, O>"}, {"sha": "caf588af851dd3a4fed82162e5e2a090484d3256", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/68096ccb3f37dcdd0c454ced5496dda78589aae9/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68096ccb3f37dcdd0c454ced5496dda78589aae9/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=68096ccb3f37dcdd0c454ced5496dda78589aae9", "patch": "@@ -67,7 +67,7 @@ use crate::transform::{MirPass, MirSource};\n use crate::transform::simplify;\n use crate::transform::no_landing_pads::no_landing_pads;\n use crate::dataflow::{DataflowResults, DataflowResultsConsumer, FlowAtLocation};\n-use crate::dataflow::{do_dataflow, DebugFormatted, state_for_location};\n+use crate::dataflow::{do_dataflow, DebugFormatted, DataflowResultsCursor};\n use crate::dataflow::{MaybeStorageLive, HaveBeenBorrowedLocals, RequiresStorage};\n use crate::util::dump_mir;\n use crate::util::liveness;\n@@ -436,9 +436,10 @@ fn locals_live_across_suspend_points(\n     // Calculate when MIR locals have live storage. This gives us an upper bound of their\n     // lifetimes.\n     let storage_live_analysis = MaybeStorageLive::new(body);\n-    let storage_live =\n+    let storage_live_results =\n         do_dataflow(tcx, body, def_id, &[], &dead_unwinds, storage_live_analysis,\n                     |bd, p| DebugFormatted::new(&bd.body().local_decls[p]));\n+    let mut storage_live_cursor = DataflowResultsCursor::new(&storage_live_results, body);\n \n     // Find the MIR locals which do not use StorageLive/StorageDead statements.\n     // The storage of these locals are always live.\n@@ -448,17 +449,18 @@ fn locals_live_across_suspend_points(\n     // Calculate the MIR locals which have been previously\n     // borrowed (even if they are still active).\n     let borrowed_locals_analysis = HaveBeenBorrowedLocals::new(body);\n-    let borrowed_locals_result =\n+    let borrowed_locals_results =\n         do_dataflow(tcx, body, def_id, &[], &dead_unwinds, borrowed_locals_analysis,\n                     |bd, p| DebugFormatted::new(&bd.body().local_decls[p]));\n+    let mut borrowed_locals_cursor = DataflowResultsCursor::new(&borrowed_locals_results, body);\n \n     // Calculate the MIR locals that we actually need to keep storage around\n     // for.\n-    let requires_storage_analysis = RequiresStorage::new(body, &borrowed_locals_result);\n-    let requires_storage =\n+    let requires_storage_analysis = RequiresStorage::new(body, &borrowed_locals_results);\n+    let requires_storage_results =\n         do_dataflow(tcx, body, def_id, &[], &dead_unwinds, requires_storage_analysis,\n                     |bd, p| DebugFormatted::new(&bd.body().local_decls[p]));\n-    let requires_storage_analysis = RequiresStorage::new(body, &borrowed_locals_result);\n+    let mut requires_storage_cursor = DataflowResultsCursor::new(&requires_storage_results, body);\n \n     // Calculate the liveness of MIR locals ignoring borrows.\n     let mut live_locals = liveness::LiveVarSet::new_empty(body.local_decls.len());\n@@ -484,10 +486,6 @@ fn locals_live_across_suspend_points(\n             };\n \n             if !movable {\n-                let borrowed_locals = state_for_location(loc,\n-                                                         &borrowed_locals_analysis,\n-                                                         &borrowed_locals_result,\n-                                                         body);\n                 // The `liveness` variable contains the liveness of MIR locals ignoring borrows.\n                 // This is correct for movable generators since borrows cannot live across\n                 // suspension points. However for immovable generators we need to account for\n@@ -498,22 +496,19 @@ fn locals_live_across_suspend_points(\n                 // If a borrow is converted to a raw reference, we must also assume that it lives\n                 // forever. Note that the final liveness is still bounded by the storage liveness\n                 // of the local, which happens using the `intersect` operation below.\n-                liveness.outs[block].union(&borrowed_locals);\n+                borrowed_locals_cursor.seek(loc);\n+                liveness.outs[block].union(borrowed_locals_cursor.get());\n             }\n \n-            let storage_liveness = state_for_location(loc,\n-                                                      &storage_live_analysis,\n-                                                      &storage_live,\n-                                                      body);\n+            storage_live_cursor.seek(loc);\n+            let storage_liveness = storage_live_cursor.get();\n \n             // Store the storage liveness for later use so we can restore the state\n             // after a suspension point\n             storage_liveness_map.insert(block, storage_liveness.clone());\n \n-            let mut storage_required = state_for_location(loc,\n-                                                          &requires_storage_analysis,\n-                                                          &requires_storage,\n-                                                          body);\n+            requires_storage_cursor.seek(loc);\n+            let mut storage_required = requires_storage_cursor.get().clone();\n \n             // Mark locals without storage statements as always requiring storage\n             storage_required.union(&ignored.0);\n@@ -549,8 +544,7 @@ fn locals_live_across_suspend_points(\n         body,\n         &live_locals,\n         &ignored,\n-        requires_storage,\n-        requires_storage_analysis);\n+        requires_storage_results);\n \n     LivenessInfo {\n         live_locals,\n@@ -588,7 +582,6 @@ fn compute_storage_conflicts(\n     stored_locals: &liveness::LiveVarSet,\n     ignored: &StorageIgnored,\n     requires_storage: DataflowResults<'tcx, RequiresStorage<'mir, 'tcx>>,\n-    _requires_storage_analysis: RequiresStorage<'mir, 'tcx>,\n ) -> BitMatrix<GeneratorSavedLocal, GeneratorSavedLocal> {\n     assert_eq!(body.local_decls.len(), ignored.0.domain_size());\n     assert_eq!(body.local_decls.len(), stored_locals.domain_size());"}]}