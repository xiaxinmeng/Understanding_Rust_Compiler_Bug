{"sha": "0da69969d1fc8d375867ff07dfcefa2c4a2e7724", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkYTY5OTY5ZDFmYzhkMzc1ODY3ZmYwN2RmY2VmYTJjNGEyZTc3MjQ=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2015-07-04T13:10:20Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "bluss@users.noreply.github.com", "date": "2015-07-04T13:10:20Z"}, "message": "core: Use memcmp in is_prefix_of / is_suffix_of\n\nThe basic str equality in core::str calls memcmp, re-use the same\nfunction in StrSearcher's is_prefix_of, is_suffix_of.", "tree": {"sha": "aacf2950c6219f6500cba652658a387432fb84c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aacf2950c6219f6500cba652658a387432fb84c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0da69969d1fc8d375867ff07dfcefa2c4a2e7724", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0da69969d1fc8d375867ff07dfcefa2c4a2e7724", "html_url": "https://github.com/rust-lang/rust/commit/0da69969d1fc8d375867ff07dfcefa2c4a2e7724", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0da69969d1fc8d375867ff07dfcefa2c4a2e7724/comments", "author": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluss", "id": 3209739, "node_id": "MDQ6VXNlcjMyMDk3Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3209739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluss", "html_url": "https://github.com/bluss", "followers_url": "https://api.github.com/users/bluss/followers", "following_url": "https://api.github.com/users/bluss/following{/other_user}", "gists_url": "https://api.github.com/users/bluss/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluss/subscriptions", "organizations_url": "https://api.github.com/users/bluss/orgs", "repos_url": "https://api.github.com/users/bluss/repos", "events_url": "https://api.github.com/users/bluss/events{/privacy}", "received_events_url": "https://api.github.com/users/bluss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0dc08240ea755679e3daec3832a04b22a8fc90bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dc08240ea755679e3daec3832a04b22a8fc90bf", "html_url": "https://github.com/rust-lang/rust/commit/0dc08240ea755679e3daec3832a04b22a8fc90bf"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "707f7fcf2abcf9c85de792b22bd3d8232f88d8ec", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0da69969d1fc8d375867ff07dfcefa2c4a2e7724/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da69969d1fc8d375867ff07dfcefa2c4a2e7724/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=0da69969d1fc8d375867ff07dfcefa2c4a2e7724", "patch": "@@ -513,17 +513,16 @@ impl<'a, 'b> Pattern<'a> for &'b str {\n     /// Checks whether the pattern matches at the front of the haystack\n     #[inline]\n     fn is_prefix_of(self, haystack: &'a str) -> bool {\n-        // Use `as_bytes` so that we can slice through a character in the haystack.\n-        // Since self is always valid UTF-8, this can't result in a false positive.\n-        self.len() <= haystack.len() &&\n-            self.as_bytes() == &haystack.as_bytes()[..self.len()]\n+        haystack.is_char_boundary(self.len()) &&\n+            self == &haystack[..self.len()]\n     }\n \n     /// Checks whether the pattern matches at the back of the haystack\n     #[inline]\n     fn is_suffix_of(self, haystack: &'a str) -> bool {\n         self.len() <= haystack.len() &&\n-            self.as_bytes() == &haystack.as_bytes()[haystack.len() - self.len()..]\n+            haystack.is_char_boundary(haystack.len() - self.len()) &&\n+            self == &haystack[haystack.len() - self.len()..]\n     }\n }\n "}]}